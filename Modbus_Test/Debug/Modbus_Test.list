
Modbus_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006d9c  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08006f74  08006f74  00007f74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006fb4  08006fb4  0000820c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006fb4  08006fb4  00007fb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006fbc  08006fbc  0000820c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006fbc  08006fbc  00007fbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006fc0  08006fc0  00007fc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000020c  20000000  08006fc4  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000884  2000020c  080071d0  0000820c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000a90  080071d0  00008a90  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000820c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000154a0  00000000  00000000  0000823c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000284b  00000000  00000000  0001d6dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001100  00000000  00000000  0001ff28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d54  00000000  00000000  00021028  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026495  00000000  00000000  00021d7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013d45  00000000  00000000  00048211  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fc4af  00000000  00000000  0005bf56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00158405  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004888  00000000  00000000  00158448  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  0015ccd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000020c 	.word	0x2000020c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08006f5c 	.word	0x08006f5c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000210 	.word	0x20000210
 8000214:	08006f5c 	.word	0x08006f5c

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b988 	b.w	8000540 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	468e      	mov	lr, r1
 8000250:	4604      	mov	r4, r0
 8000252:	4688      	mov	r8, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4617      	mov	r7, r2
 800025c:	d962      	bls.n	8000324 <__udivmoddi4+0xdc>
 800025e:	fab2 f682 	clz	r6, r2
 8000262:	b14e      	cbz	r6, 8000278 <__udivmoddi4+0x30>
 8000264:	f1c6 0320 	rsb	r3, r6, #32
 8000268:	fa01 f806 	lsl.w	r8, r1, r6
 800026c:	fa20 f303 	lsr.w	r3, r0, r3
 8000270:	40b7      	lsls	r7, r6
 8000272:	ea43 0808 	orr.w	r8, r3, r8
 8000276:	40b4      	lsls	r4, r6
 8000278:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800027c:	fa1f fc87 	uxth.w	ip, r7
 8000280:	fbb8 f1fe 	udiv	r1, r8, lr
 8000284:	0c23      	lsrs	r3, r4, #16
 8000286:	fb0e 8811 	mls	r8, lr, r1, r8
 800028a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800028e:	fb01 f20c 	mul.w	r2, r1, ip
 8000292:	429a      	cmp	r2, r3
 8000294:	d909      	bls.n	80002aa <__udivmoddi4+0x62>
 8000296:	18fb      	adds	r3, r7, r3
 8000298:	f101 30ff 	add.w	r0, r1, #4294967295
 800029c:	f080 80ea 	bcs.w	8000474 <__udivmoddi4+0x22c>
 80002a0:	429a      	cmp	r2, r3
 80002a2:	f240 80e7 	bls.w	8000474 <__udivmoddi4+0x22c>
 80002a6:	3902      	subs	r1, #2
 80002a8:	443b      	add	r3, r7
 80002aa:	1a9a      	subs	r2, r3, r2
 80002ac:	b2a3      	uxth	r3, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002ba:	fb00 fc0c 	mul.w	ip, r0, ip
 80002be:	459c      	cmp	ip, r3
 80002c0:	d909      	bls.n	80002d6 <__udivmoddi4+0x8e>
 80002c2:	18fb      	adds	r3, r7, r3
 80002c4:	f100 32ff 	add.w	r2, r0, #4294967295
 80002c8:	f080 80d6 	bcs.w	8000478 <__udivmoddi4+0x230>
 80002cc:	459c      	cmp	ip, r3
 80002ce:	f240 80d3 	bls.w	8000478 <__udivmoddi4+0x230>
 80002d2:	443b      	add	r3, r7
 80002d4:	3802      	subs	r0, #2
 80002d6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002da:	eba3 030c 	sub.w	r3, r3, ip
 80002de:	2100      	movs	r1, #0
 80002e0:	b11d      	cbz	r5, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40f3      	lsrs	r3, r6
 80002e4:	2200      	movs	r2, #0
 80002e6:	e9c5 3200 	strd	r3, r2, [r5]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d905      	bls.n	80002fe <__udivmoddi4+0xb6>
 80002f2:	b10d      	cbz	r5, 80002f8 <__udivmoddi4+0xb0>
 80002f4:	e9c5 0100 	strd	r0, r1, [r5]
 80002f8:	2100      	movs	r1, #0
 80002fa:	4608      	mov	r0, r1
 80002fc:	e7f5      	b.n	80002ea <__udivmoddi4+0xa2>
 80002fe:	fab3 f183 	clz	r1, r3
 8000302:	2900      	cmp	r1, #0
 8000304:	d146      	bne.n	8000394 <__udivmoddi4+0x14c>
 8000306:	4573      	cmp	r3, lr
 8000308:	d302      	bcc.n	8000310 <__udivmoddi4+0xc8>
 800030a:	4282      	cmp	r2, r0
 800030c:	f200 8105 	bhi.w	800051a <__udivmoddi4+0x2d2>
 8000310:	1a84      	subs	r4, r0, r2
 8000312:	eb6e 0203 	sbc.w	r2, lr, r3
 8000316:	2001      	movs	r0, #1
 8000318:	4690      	mov	r8, r2
 800031a:	2d00      	cmp	r5, #0
 800031c:	d0e5      	beq.n	80002ea <__udivmoddi4+0xa2>
 800031e:	e9c5 4800 	strd	r4, r8, [r5]
 8000322:	e7e2      	b.n	80002ea <__udivmoddi4+0xa2>
 8000324:	2a00      	cmp	r2, #0
 8000326:	f000 8090 	beq.w	800044a <__udivmoddi4+0x202>
 800032a:	fab2 f682 	clz	r6, r2
 800032e:	2e00      	cmp	r6, #0
 8000330:	f040 80a4 	bne.w	800047c <__udivmoddi4+0x234>
 8000334:	1a8a      	subs	r2, r1, r2
 8000336:	0c03      	lsrs	r3, r0, #16
 8000338:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800033c:	b280      	uxth	r0, r0
 800033e:	b2bc      	uxth	r4, r7
 8000340:	2101      	movs	r1, #1
 8000342:	fbb2 fcfe 	udiv	ip, r2, lr
 8000346:	fb0e 221c 	mls	r2, lr, ip, r2
 800034a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800034e:	fb04 f20c 	mul.w	r2, r4, ip
 8000352:	429a      	cmp	r2, r3
 8000354:	d907      	bls.n	8000366 <__udivmoddi4+0x11e>
 8000356:	18fb      	adds	r3, r7, r3
 8000358:	f10c 38ff 	add.w	r8, ip, #4294967295
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x11c>
 800035e:	429a      	cmp	r2, r3
 8000360:	f200 80e0 	bhi.w	8000524 <__udivmoddi4+0x2dc>
 8000364:	46c4      	mov	ip, r8
 8000366:	1a9b      	subs	r3, r3, r2
 8000368:	fbb3 f2fe 	udiv	r2, r3, lr
 800036c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000370:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000374:	fb02 f404 	mul.w	r4, r2, r4
 8000378:	429c      	cmp	r4, r3
 800037a:	d907      	bls.n	800038c <__udivmoddi4+0x144>
 800037c:	18fb      	adds	r3, r7, r3
 800037e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x142>
 8000384:	429c      	cmp	r4, r3
 8000386:	f200 80ca 	bhi.w	800051e <__udivmoddi4+0x2d6>
 800038a:	4602      	mov	r2, r0
 800038c:	1b1b      	subs	r3, r3, r4
 800038e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000392:	e7a5      	b.n	80002e0 <__udivmoddi4+0x98>
 8000394:	f1c1 0620 	rsb	r6, r1, #32
 8000398:	408b      	lsls	r3, r1
 800039a:	fa22 f706 	lsr.w	r7, r2, r6
 800039e:	431f      	orrs	r7, r3
 80003a0:	fa0e f401 	lsl.w	r4, lr, r1
 80003a4:	fa20 f306 	lsr.w	r3, r0, r6
 80003a8:	fa2e fe06 	lsr.w	lr, lr, r6
 80003ac:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003b0:	4323      	orrs	r3, r4
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	fa1f fc87 	uxth.w	ip, r7
 80003ba:	fbbe f0f9 	udiv	r0, lr, r9
 80003be:	0c1c      	lsrs	r4, r3, #16
 80003c0:	fb09 ee10 	mls	lr, r9, r0, lr
 80003c4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003c8:	fb00 fe0c 	mul.w	lr, r0, ip
 80003cc:	45a6      	cmp	lr, r4
 80003ce:	fa02 f201 	lsl.w	r2, r2, r1
 80003d2:	d909      	bls.n	80003e8 <__udivmoddi4+0x1a0>
 80003d4:	193c      	adds	r4, r7, r4
 80003d6:	f100 3aff 	add.w	sl, r0, #4294967295
 80003da:	f080 809c 	bcs.w	8000516 <__udivmoddi4+0x2ce>
 80003de:	45a6      	cmp	lr, r4
 80003e0:	f240 8099 	bls.w	8000516 <__udivmoddi4+0x2ce>
 80003e4:	3802      	subs	r0, #2
 80003e6:	443c      	add	r4, r7
 80003e8:	eba4 040e 	sub.w	r4, r4, lr
 80003ec:	fa1f fe83 	uxth.w	lr, r3
 80003f0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003f4:	fb09 4413 	mls	r4, r9, r3, r4
 80003f8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003fc:	fb03 fc0c 	mul.w	ip, r3, ip
 8000400:	45a4      	cmp	ip, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1ce>
 8000404:	193c      	adds	r4, r7, r4
 8000406:	f103 3eff 	add.w	lr, r3, #4294967295
 800040a:	f080 8082 	bcs.w	8000512 <__udivmoddi4+0x2ca>
 800040e:	45a4      	cmp	ip, r4
 8000410:	d97f      	bls.n	8000512 <__udivmoddi4+0x2ca>
 8000412:	3b02      	subs	r3, #2
 8000414:	443c      	add	r4, r7
 8000416:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800041a:	eba4 040c 	sub.w	r4, r4, ip
 800041e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000422:	4564      	cmp	r4, ip
 8000424:	4673      	mov	r3, lr
 8000426:	46e1      	mov	r9, ip
 8000428:	d362      	bcc.n	80004f0 <__udivmoddi4+0x2a8>
 800042a:	d05f      	beq.n	80004ec <__udivmoddi4+0x2a4>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x1fe>
 800042e:	ebb8 0203 	subs.w	r2, r8, r3
 8000432:	eb64 0409 	sbc.w	r4, r4, r9
 8000436:	fa04 f606 	lsl.w	r6, r4, r6
 800043a:	fa22 f301 	lsr.w	r3, r2, r1
 800043e:	431e      	orrs	r6, r3
 8000440:	40cc      	lsrs	r4, r1
 8000442:	e9c5 6400 	strd	r6, r4, [r5]
 8000446:	2100      	movs	r1, #0
 8000448:	e74f      	b.n	80002ea <__udivmoddi4+0xa2>
 800044a:	fbb1 fcf2 	udiv	ip, r1, r2
 800044e:	0c01      	lsrs	r1, r0, #16
 8000450:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000454:	b280      	uxth	r0, r0
 8000456:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800045a:	463b      	mov	r3, r7
 800045c:	4638      	mov	r0, r7
 800045e:	463c      	mov	r4, r7
 8000460:	46b8      	mov	r8, r7
 8000462:	46be      	mov	lr, r7
 8000464:	2620      	movs	r6, #32
 8000466:	fbb1 f1f7 	udiv	r1, r1, r7
 800046a:	eba2 0208 	sub.w	r2, r2, r8
 800046e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000472:	e766      	b.n	8000342 <__udivmoddi4+0xfa>
 8000474:	4601      	mov	r1, r0
 8000476:	e718      	b.n	80002aa <__udivmoddi4+0x62>
 8000478:	4610      	mov	r0, r2
 800047a:	e72c      	b.n	80002d6 <__udivmoddi4+0x8e>
 800047c:	f1c6 0220 	rsb	r2, r6, #32
 8000480:	fa2e f302 	lsr.w	r3, lr, r2
 8000484:	40b7      	lsls	r7, r6
 8000486:	40b1      	lsls	r1, r6
 8000488:	fa20 f202 	lsr.w	r2, r0, r2
 800048c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000490:	430a      	orrs	r2, r1
 8000492:	fbb3 f8fe 	udiv	r8, r3, lr
 8000496:	b2bc      	uxth	r4, r7
 8000498:	fb0e 3318 	mls	r3, lr, r8, r3
 800049c:	0c11      	lsrs	r1, r2, #16
 800049e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a2:	fb08 f904 	mul.w	r9, r8, r4
 80004a6:	40b0      	lsls	r0, r6
 80004a8:	4589      	cmp	r9, r1
 80004aa:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004ae:	b280      	uxth	r0, r0
 80004b0:	d93e      	bls.n	8000530 <__udivmoddi4+0x2e8>
 80004b2:	1879      	adds	r1, r7, r1
 80004b4:	f108 3cff 	add.w	ip, r8, #4294967295
 80004b8:	d201      	bcs.n	80004be <__udivmoddi4+0x276>
 80004ba:	4589      	cmp	r9, r1
 80004bc:	d81f      	bhi.n	80004fe <__udivmoddi4+0x2b6>
 80004be:	eba1 0109 	sub.w	r1, r1, r9
 80004c2:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c6:	fb09 f804 	mul.w	r8, r9, r4
 80004ca:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ce:	b292      	uxth	r2, r2
 80004d0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004d4:	4542      	cmp	r2, r8
 80004d6:	d229      	bcs.n	800052c <__udivmoddi4+0x2e4>
 80004d8:	18ba      	adds	r2, r7, r2
 80004da:	f109 31ff 	add.w	r1, r9, #4294967295
 80004de:	d2c4      	bcs.n	800046a <__udivmoddi4+0x222>
 80004e0:	4542      	cmp	r2, r8
 80004e2:	d2c2      	bcs.n	800046a <__udivmoddi4+0x222>
 80004e4:	f1a9 0102 	sub.w	r1, r9, #2
 80004e8:	443a      	add	r2, r7
 80004ea:	e7be      	b.n	800046a <__udivmoddi4+0x222>
 80004ec:	45f0      	cmp	r8, lr
 80004ee:	d29d      	bcs.n	800042c <__udivmoddi4+0x1e4>
 80004f0:	ebbe 0302 	subs.w	r3, lr, r2
 80004f4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004f8:	3801      	subs	r0, #1
 80004fa:	46e1      	mov	r9, ip
 80004fc:	e796      	b.n	800042c <__udivmoddi4+0x1e4>
 80004fe:	eba7 0909 	sub.w	r9, r7, r9
 8000502:	4449      	add	r1, r9
 8000504:	f1a8 0c02 	sub.w	ip, r8, #2
 8000508:	fbb1 f9fe 	udiv	r9, r1, lr
 800050c:	fb09 f804 	mul.w	r8, r9, r4
 8000510:	e7db      	b.n	80004ca <__udivmoddi4+0x282>
 8000512:	4673      	mov	r3, lr
 8000514:	e77f      	b.n	8000416 <__udivmoddi4+0x1ce>
 8000516:	4650      	mov	r0, sl
 8000518:	e766      	b.n	80003e8 <__udivmoddi4+0x1a0>
 800051a:	4608      	mov	r0, r1
 800051c:	e6fd      	b.n	800031a <__udivmoddi4+0xd2>
 800051e:	443b      	add	r3, r7
 8000520:	3a02      	subs	r2, #2
 8000522:	e733      	b.n	800038c <__udivmoddi4+0x144>
 8000524:	f1ac 0c02 	sub.w	ip, ip, #2
 8000528:	443b      	add	r3, r7
 800052a:	e71c      	b.n	8000366 <__udivmoddi4+0x11e>
 800052c:	4649      	mov	r1, r9
 800052e:	e79c      	b.n	800046a <__udivmoddi4+0x222>
 8000530:	eba1 0109 	sub.w	r1, r1, r9
 8000534:	46c4      	mov	ip, r8
 8000536:	fbb1 f9fe 	udiv	r9, r1, lr
 800053a:	fb09 f804 	mul.w	r8, r9, r4
 800053e:	e7c4      	b.n	80004ca <__udivmoddi4+0x282>

08000540 <__aeabi_idiv0>:
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop

08000544 <modbus_1t5_Timeout>:
void Modbus_frame_response();


// function for interrupt
void modbus_1t5_Timeout(TIM_HandleTypeDef *htim)
{
 8000544:	b480      	push	{r7}
 8000546:	b083      	sub	sp, #12
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 800054c:	4b04      	ldr	r3, [pc, #16]	@ (8000560 <modbus_1t5_Timeout+0x1c>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	2201      	movs	r2, #1
 8000552:	751a      	strb	r2, [r3, #20]
}
 8000554:	bf00      	nop
 8000556:	370c      	adds	r7, #12
 8000558:	46bd      	mov	sp, r7
 800055a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055e:	4770      	bx	lr
 8000560:	20000228 	.word	0x20000228

08000564 <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim)
{
 8000564:	b480      	push	{r7}
 8000566:	b083      	sub	sp, #12
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 800056c:	4b04      	ldr	r3, [pc, #16]	@ (8000580 <modbus_3t5_Timeout+0x1c>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	2201      	movs	r2, #1
 8000572:	755a      	strb	r2, [r3, #21]
}
 8000574:	bf00      	nop
 8000576:	370c      	adds	r7, #12
 8000578:	46bd      	mov	sp, r7
 800057a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057e:	4770      	bx	lr
 8000580:	20000228 	.word	0x20000228

08000584 <modbus_UART_Recived>:
void modbus_UART_Recived(UART_HandleTypeDef *huart,uint32_t pos)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
 800058c:	6039      	str	r1, [r7, #0]

	//restart timer / start timer of counting time with modbus RTU
	hModbus->Flag_URev =1;
 800058e:	4b15      	ldr	r3, [pc, #84]	@ (80005e4 <modbus_UART_Recived+0x60>)
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	2201      	movs	r2, #1
 8000594:	759a      	strb	r2, [r3, #22]
	if(hModbus->modbusUartStructure.RxTail++<MODBUS_MESSAGEBUFFER_SIZE)
 8000596:	4b13      	ldr	r3, [pc, #76]	@ (80005e4 <modbus_UART_Recived+0x60>)
 8000598:	681a      	ldr	r2, [r3, #0]
 800059a:	f8b2 33a2 	ldrh.w	r3, [r2, #930]	@ 0x3a2
 800059e:	1c59      	adds	r1, r3, #1
 80005a0:	b289      	uxth	r1, r1
 80005a2:	f8a2 13a2 	strh.w	r1, [r2, #930]	@ 0x3a2
 80005a6:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 80005aa:	d210      	bcs.n	80005ce <modbus_UART_Recived+0x4a>
	{


	    HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 80005ac:	4b0d      	ldr	r3, [pc, #52]	@ (80005e4 <modbus_UART_Recived+0x60>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	68d8      	ldr	r0, [r3, #12]
 80005b2:	4b0c      	ldr	r3, [pc, #48]	@ (80005e4 <modbus_UART_Recived+0x60>)
 80005b4:	681a      	ldr	r2, [r3, #0]
 80005b6:	4b0b      	ldr	r3, [pc, #44]	@ (80005e4 <modbus_UART_Recived+0x60>)
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 80005be:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 80005c2:	4413      	add	r3, r2
 80005c4:	3302      	adds	r3, #2
 80005c6:	2201      	movs	r2, #1
 80005c8:	4619      	mov	r1, r3
 80005ca:	f004 f951 	bl	8004870 <HAL_UART_Receive_IT>
	}
	__HAL_TIM_SET_COUNTER(hModbus->htim,0);
 80005ce:	4b05      	ldr	r3, [pc, #20]	@ (80005e4 <modbus_UART_Recived+0x60>)
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	691b      	ldr	r3, [r3, #16]
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	2200      	movs	r2, #0
 80005d8:	625a      	str	r2, [r3, #36]	@ 0x24

}
 80005da:	bf00      	nop
 80005dc:	3708      	adds	r7, #8
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	20000228 	.word	0x20000228

080005e8 <Modbus_init>:


void Modbus_init(ModbusHandleTypedef* hmodbus,u16u8_t* RegisterStartAddress)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b082      	sub	sp, #8
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
 80005f0:	6039      	str	r1, [r7, #0]
	hModbus = hmodbus;
 80005f2:	4a24      	ldr	r2, [pc, #144]	@ (8000684 <Modbus_init+0x9c>)
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	6013      	str	r3, [r2, #0]

	hModbus->RegisterAddress = RegisterStartAddress;
 80005f8:	4b22      	ldr	r3, [pc, #136]	@ (8000684 <Modbus_init+0x9c>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	683a      	ldr	r2, [r7, #0]
 80005fe:	605a      	str	r2, [r3, #4]

	//config timer interrupt
	HAL_TIM_RegisterCallback(hModbus->htim,HAL_TIM_OC_DELAY_ELAPSED_CB_ID,(void*)modbus_1t5_Timeout);
 8000600:	4b20      	ldr	r3, [pc, #128]	@ (8000684 <Modbus_init+0x9c>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	691b      	ldr	r3, [r3, #16]
 8000606:	4a20      	ldr	r2, [pc, #128]	@ (8000688 <Modbus_init+0xa0>)
 8000608:	2114      	movs	r1, #20
 800060a:	4618      	mov	r0, r3
 800060c:	f003 f958 	bl	80038c0 <HAL_TIM_RegisterCallback>
	HAL_TIM_RegisterCallback(hModbus->htim,HAL_TIM_PERIOD_ELAPSED_CB_ID ,(void*)modbus_3t5_Timeout);
 8000610:	4b1c      	ldr	r3, [pc, #112]	@ (8000684 <Modbus_init+0x9c>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	691b      	ldr	r3, [r3, #16]
 8000616:	4a1d      	ldr	r2, [pc, #116]	@ (800068c <Modbus_init+0xa4>)
 8000618:	210e      	movs	r1, #14
 800061a:	4618      	mov	r0, r3
 800061c:	f003 f950 	bl	80038c0 <HAL_TIM_RegisterCallback>

	//config UART interrupt
	HAL_UART_RegisterCallback(hModbus->huart,HAL_UART_RX_COMPLETE_CB_ID,(void*)modbus_UART_Recived);
 8000620:	4b18      	ldr	r3, [pc, #96]	@ (8000684 <Modbus_init+0x9c>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	68db      	ldr	r3, [r3, #12]
 8000626:	4a1a      	ldr	r2, [pc, #104]	@ (8000690 <Modbus_init+0xa8>)
 8000628:	2103      	movs	r1, #3
 800062a:	4618      	mov	r0, r3
 800062c:	f004 f866 	bl	80046fc <HAL_UART_RegisterCallback>
	//start Receive
    HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 8000630:	4b14      	ldr	r3, [pc, #80]	@ (8000684 <Modbus_init+0x9c>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	68d8      	ldr	r0, [r3, #12]
 8000636:	4b13      	ldr	r3, [pc, #76]	@ (8000684 <Modbus_init+0x9c>)
 8000638:	681a      	ldr	r2, [r3, #0]
 800063a:	4b12      	ldr	r3, [pc, #72]	@ (8000684 <Modbus_init+0x9c>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8000642:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 8000646:	4413      	add	r3, r2
 8000648:	3302      	adds	r3, #2
 800064a:	2201      	movs	r2, #1
 800064c:	4619      	mov	r1, r3
 800064e:	f004 f90f 	bl	8004870 <HAL_UART_Receive_IT>


    if(hModbus->htim->State == HAL_TIM_STATE_READY)
 8000652:	4b0c      	ldr	r3, [pc, #48]	@ (8000684 <Modbus_init+0x9c>)
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	691b      	ldr	r3, [r3, #16]
 8000658:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800065c:	b2db      	uxtb	r3, r3
 800065e:	2b01      	cmp	r3, #1
 8000660:	d10c      	bne.n	800067c <Modbus_init+0x94>
    	{
    		HAL_TIM_Base_Start_IT(hModbus->htim);
 8000662:	4b08      	ldr	r3, [pc, #32]	@ (8000684 <Modbus_init+0x9c>)
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	691b      	ldr	r3, [r3, #16]
 8000668:	4618      	mov	r0, r3
 800066a:	f002 fcf5 	bl	8003058 <HAL_TIM_Base_Start_IT>
    		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 800066e:	4b05      	ldr	r3, [pc, #20]	@ (8000684 <Modbus_init+0x9c>)
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	691b      	ldr	r3, [r3, #16]
 8000674:	2100      	movs	r1, #0
 8000676:	4618      	mov	r0, r3
 8000678:	f002 fe3c 	bl	80032f4 <HAL_TIM_OnePulse_Start_IT>
    	}

}
 800067c:	bf00      	nop
 800067e:	3708      	adds	r7, #8
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}
 8000684:	20000228 	.word	0x20000228
 8000688:	08000545 	.word	0x08000545
 800068c:	08000565 	.word	0x08000565
 8000690:	08000585 	.word	0x08000585

08000694 <CRC16>:
} ;

unsigned short CRC16 ( puchMsg, usDataLen ) /* The function returns the CRC as a unsigned short type */
unsigned char *puchMsg ; /* message to calculate CRC upon */
unsigned short usDataLen ; /* quantity of bytes in message */
{
 8000694:	b480      	push	{r7}
 8000696:	b085      	sub	sp, #20
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
 800069c:	460b      	mov	r3, r1
 800069e:	803b      	strh	r3, [r7, #0]
	unsigned char uchCRCHi = 0xFF ; /* high byte of CRC initialized */
 80006a0:	23ff      	movs	r3, #255	@ 0xff
 80006a2:	73fb      	strb	r3, [r7, #15]
	unsigned char uchCRCLo = 0xFF ; /* low byte of CRC initialized */
 80006a4:	23ff      	movs	r3, #255	@ 0xff
 80006a6:	73bb      	strb	r3, [r7, #14]
	unsigned uIndex ; /* will index into CRC lookup table */
	while (usDataLen--) /* pass through message buffer */
 80006a8:	e013      	b.n	80006d2 <CRC16+0x3e>
	{
		uIndex = uchCRCLo ^ *puchMsg++ ; /* calculate the CRC */
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	1c5a      	adds	r2, r3, #1
 80006ae:	607a      	str	r2, [r7, #4]
 80006b0:	781a      	ldrb	r2, [r3, #0]
 80006b2:	7bbb      	ldrb	r3, [r7, #14]
 80006b4:	4053      	eors	r3, r2
 80006b6:	b2db      	uxtb	r3, r3
 80006b8:	60bb      	str	r3, [r7, #8]
		uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex] ;
 80006ba:	4a10      	ldr	r2, [pc, #64]	@ (80006fc <CRC16+0x68>)
 80006bc:	68bb      	ldr	r3, [r7, #8]
 80006be:	4413      	add	r3, r2
 80006c0:	781a      	ldrb	r2, [r3, #0]
 80006c2:	7bfb      	ldrb	r3, [r7, #15]
 80006c4:	4053      	eors	r3, r2
 80006c6:	73bb      	strb	r3, [r7, #14]
		uchCRCHi = auchCRCLo[uIndex] ;
 80006c8:	4a0d      	ldr	r2, [pc, #52]	@ (8000700 <CRC16+0x6c>)
 80006ca:	68bb      	ldr	r3, [r7, #8]
 80006cc:	4413      	add	r3, r2
 80006ce:	781b      	ldrb	r3, [r3, #0]
 80006d0:	73fb      	strb	r3, [r7, #15]
	while (usDataLen--) /* pass through message buffer */
 80006d2:	883b      	ldrh	r3, [r7, #0]
 80006d4:	1e5a      	subs	r2, r3, #1
 80006d6:	803a      	strh	r2, [r7, #0]
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d1e6      	bne.n	80006aa <CRC16+0x16>
	}
	return (uchCRCHi << 8 | uchCRCLo) ;
 80006dc:	7bfb      	ldrb	r3, [r7, #15]
 80006de:	b21b      	sxth	r3, r3
 80006e0:	021b      	lsls	r3, r3, #8
 80006e2:	b21a      	sxth	r2, r3
 80006e4:	7bbb      	ldrb	r3, [r7, #14]
 80006e6:	b21b      	sxth	r3, r3
 80006e8:	4313      	orrs	r3, r2
 80006ea:	b21b      	sxth	r3, r3
 80006ec:	b29b      	uxth	r3, r3
}
 80006ee:	4618      	mov	r0, r3
 80006f0:	3714      	adds	r7, #20
 80006f2:	46bd      	mov	sp, r7
 80006f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f8:	4770      	bx	lr
 80006fa:	bf00      	nop
 80006fc:	20000100 	.word	0x20000100
 8000700:	20000000 	.word	0x20000000

08000704 <Modbus_Protocal_Worker>:



void Modbus_Protocal_Worker()
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b082      	sub	sp, #8
 8000708:	af00      	add	r7, sp, #0
	switch(hModbus->Mstatus)
 800070a:	4b80      	ldr	r3, [pc, #512]	@ (800090c <Modbus_Protocal_Worker+0x208>)
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	7e1b      	ldrb	r3, [r3, #24]
 8000710:	3b01      	subs	r3, #1
 8000712:	2b03      	cmp	r3, #3
 8000714:	d80a      	bhi.n	800072c <Modbus_Protocal_Worker+0x28>
 8000716:	a201      	add	r2, pc, #4	@ (adr r2, 800071c <Modbus_Protocal_Worker+0x18>)
 8000718:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800071c:	08000737 	.word	0x08000737
 8000720:	080008d5 	.word	0x080008d5
 8000724:	080007c1 	.word	0x080007c1
 8000728:	080007e7 	.word	0x080007e7
	{
	default:
	case Modbus_state_Init:
		/*init Modbus protocal*/

		hModbus->Mstatus = Modbus_state_Idle;
 800072c:	4b77      	ldr	r3, [pc, #476]	@ (800090c <Modbus_Protocal_Worker+0x208>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	2201      	movs	r2, #1
 8000732:	761a      	strb	r2, [r3, #24]
		break;
 8000734:	e0e6      	b.n	8000904 <Modbus_Protocal_Worker+0x200>
	case Modbus_state_Idle:
		/*Idle state*/

		//check that we have response message
		if(hModbus->TxCount)
 8000736:	4b75      	ldr	r3, [pc, #468]	@ (800090c <Modbus_Protocal_Worker+0x208>)
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	f893 3271 	ldrb.w	r3, [r3, #625]	@ 0x271
 800073e:	2b00      	cmp	r3, #0
 8000740:	d002      	beq.n	8000748 <Modbus_Protocal_Worker+0x44>
		{
			Modbus_Emission();
 8000742:	f000 f9d5 	bl	8000af0 <Modbus_Emission>
 8000746:	e01c      	b.n	8000782 <Modbus_Protocal_Worker+0x7e>
		}

		// Received character
		else if(hModbus->Flag_URev)
 8000748:	4b70      	ldr	r3, [pc, #448]	@ (800090c <Modbus_Protocal_Worker+0x208>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	7d9b      	ldrb	r3, [r3, #22]
 800074e:	2b00      	cmp	r3, #0
 8000750:	d017      	beq.n	8000782 <Modbus_Protocal_Worker+0x7e>
		{
			/*reset Timer flag*/
			hModbus->Flag_T15TimeOut = 0;
 8000752:	4b6e      	ldr	r3, [pc, #440]	@ (800090c <Modbus_Protocal_Worker+0x208>)
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	2200      	movs	r2, #0
 8000758:	751a      	strb	r2, [r3, #20]
			hModbus->Flag_T35TimeOut = 0;
 800075a:	4b6c      	ldr	r3, [pc, #432]	@ (800090c <Modbus_Protocal_Worker+0x208>)
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	2200      	movs	r2, #0
 8000760:	755a      	strb	r2, [r3, #21]
			__HAL_TIM_ENABLE(hModbus->htim);
 8000762:	4b6a      	ldr	r3, [pc, #424]	@ (800090c <Modbus_Protocal_Worker+0x208>)
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	691b      	ldr	r3, [r3, #16]
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	681a      	ldr	r2, [r3, #0]
 800076c:	4b67      	ldr	r3, [pc, #412]	@ (800090c <Modbus_Protocal_Worker+0x208>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	691b      	ldr	r3, [r3, #16]
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	f042 0201 	orr.w	r2, r2, #1
 8000778:	601a      	str	r2, [r3, #0]
			/*set state*/
			hModbus->Mstatus= Modbus_state_Reception;
 800077a:	4b64      	ldr	r3, [pc, #400]	@ (800090c <Modbus_Protocal_Worker+0x208>)
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	2203      	movs	r2, #3
 8000780:	761a      	strb	r2, [r3, #24]
		}

		//check that if UART RX not start, start receiving
		if(hModbus->huart->RxState == HAL_UART_STATE_READY)
 8000782:	4b62      	ldr	r3, [pc, #392]	@ (800090c <Modbus_Protocal_Worker+0x208>)
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	68db      	ldr	r3, [r3, #12]
 8000788:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800078c:	2b20      	cmp	r3, #32
 800078e:	f040 80b2 	bne.w	80008f6 <Modbus_Protocal_Worker+0x1f2>
		{
			hModbus->modbusUartStructure.RxTail =0;
 8000792:	4b5e      	ldr	r3, [pc, #376]	@ (800090c <Modbus_Protocal_Worker+0x208>)
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	2200      	movs	r2, #0
 8000798:	f8a3 23a2 	strh.w	r2, [r3, #930]	@ 0x3a2
			HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 800079c:	4b5b      	ldr	r3, [pc, #364]	@ (800090c <Modbus_Protocal_Worker+0x208>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	68d8      	ldr	r0, [r3, #12]
 80007a2:	4b5a      	ldr	r3, [pc, #360]	@ (800090c <Modbus_Protocal_Worker+0x208>)
 80007a4:	681a      	ldr	r2, [r3, #0]
 80007a6:	4b59      	ldr	r3, [pc, #356]	@ (800090c <Modbus_Protocal_Worker+0x208>)
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 80007ae:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 80007b2:	4413      	add	r3, r2
 80007b4:	3302      	adds	r3, #2
 80007b6:	2201      	movs	r2, #1
 80007b8:	4619      	mov	r1, r3
 80007ba:	f004 f859 	bl	8004870 <HAL_UART_Receive_IT>
		}
		break;
 80007be:	e09a      	b.n	80008f6 <Modbus_Protocal_Worker+0x1f2>
	case Modbus_state_Reception:

		if(hModbus->Flag_T15TimeOut)
 80007c0:	4b52      	ldr	r3, [pc, #328]	@ (800090c <Modbus_Protocal_Worker+0x208>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	7d1b      	ldrb	r3, [r3, #20]
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	f000 8097 	beq.w	80008fa <Modbus_Protocal_Worker+0x1f6>
		{
			/*reset recived flag*/
			hModbus->Flag_URev =0;
 80007cc:	4b4f      	ldr	r3, [pc, #316]	@ (800090c <Modbus_Protocal_Worker+0x208>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	2200      	movs	r2, #0
 80007d2:	759a      	strb	r2, [r3, #22]
			hModbus->RecvStatus = Modbus_RecvFrame_Null;
 80007d4:	4b4d      	ldr	r3, [pc, #308]	@ (800090c <Modbus_Protocal_Worker+0x208>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	22fe      	movs	r2, #254	@ 0xfe
 80007da:	75da      	strb	r2, [r3, #23]

			/*compute CRC and Slave address*/



			hModbus->Mstatus = Modbus_state_ControlAndWaiting;
 80007dc:	4b4b      	ldr	r3, [pc, #300]	@ (800090c <Modbus_Protocal_Worker+0x208>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	2204      	movs	r2, #4
 80007e2:	761a      	strb	r2, [r3, #24]
		}
		break;
 80007e4:	e089      	b.n	80008fa <Modbus_Protocal_Worker+0x1f6>
	case Modbus_state_ControlAndWaiting:
		/*Frame error , Not generate response , Clear buffer*/
		if(hModbus->Flag_URev)
 80007e6:	4b49      	ldr	r3, [pc, #292]	@ (800090c <Modbus_Protocal_Worker+0x208>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	7d9b      	ldrb	r3, [r3, #22]
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d009      	beq.n	8000804 <Modbus_Protocal_Worker+0x100>
		{

			if(!hModbus->RecvStatus)
 80007f0:	4b46      	ldr	r3, [pc, #280]	@ (800090c <Modbus_Protocal_Worker+0x208>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	f993 3017 	ldrsb.w	r3, [r3, #23]
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d103      	bne.n	8000804 <Modbus_Protocal_Worker+0x100>
			{
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 80007fc:	4b43      	ldr	r3, [pc, #268]	@ (800090c <Modbus_Protocal_Worker+0x208>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	22ff      	movs	r2, #255	@ 0xff
 8000802:	75da      	strb	r2, [r3, #23]
			}
		}

		/*Frame Calculation , calculate once*/
		if(hModbus->RecvStatus == Modbus_RecvFrame_Null)
 8000804:	4b41      	ldr	r3, [pc, #260]	@ (800090c <Modbus_Protocal_Worker+0x208>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	f993 3017 	ldrsb.w	r3, [r3, #23]
 800080c:	f113 0f02 	cmn.w	r3, #2
 8000810:	d150      	bne.n	80008b4 <Modbus_Protocal_Worker+0x1b0>
		{
			hModbus->RecvStatus = Modbus_RecvFrame_Normal;
 8000812:	4b3e      	ldr	r3, [pc, #248]	@ (800090c <Modbus_Protocal_Worker+0x208>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	2200      	movs	r2, #0
 8000818:	75da      	strb	r2, [r3, #23]
			// check CRC
			u16u8_t CalculateCRC;
			CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferRx,hModbus->modbusUartStructure.RxTail - 2);
 800081a:	4b3c      	ldr	r3, [pc, #240]	@ (800090c <Modbus_Protocal_Worker+0x208>)
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	f203 2272 	addw	r2, r3, #626	@ 0x272
 8000822:	4b3a      	ldr	r3, [pc, #232]	@ (800090c <Modbus_Protocal_Worker+0x208>)
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 800082a:	3b02      	subs	r3, #2
 800082c:	4619      	mov	r1, r3
 800082e:	4610      	mov	r0, r2
 8000830:	f7ff ff30 	bl	8000694 <CRC16>
 8000834:	4603      	mov	r3, r0
 8000836:	80bb      	strh	r3, [r7, #4]

			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 8000838:	793a      	ldrb	r2, [r7, #4]
 800083a:	4b34      	ldr	r3, [pc, #208]	@ (800090c <Modbus_Protocal_Worker+0x208>)
 800083c:	6819      	ldr	r1, [r3, #0]
 800083e:	4b33      	ldr	r3, [pc, #204]	@ (800090c <Modbus_Protocal_Worker+0x208>)
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8000846:	3b02      	subs	r3, #2
 8000848:	440b      	add	r3, r1
 800084a:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
 800084e:	429a      	cmp	r2, r3
 8000850:	d10c      	bne.n	800086c <Modbus_Protocal_Worker+0x168>
			&& CalculateCRC.U8[1] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail -1]))
 8000852:	797a      	ldrb	r2, [r7, #5]
 8000854:	4b2d      	ldr	r3, [pc, #180]	@ (800090c <Modbus_Protocal_Worker+0x208>)
 8000856:	6819      	ldr	r1, [r3, #0]
 8000858:	4b2c      	ldr	r3, [pc, #176]	@ (800090c <Modbus_Protocal_Worker+0x208>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8000860:	3b01      	subs	r3, #1
 8000862:	440b      	add	r3, r1
 8000864:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 8000868:	429a      	cmp	r2, r3
 800086a:	d004      	beq.n	8000876 <Modbus_Protocal_Worker+0x172>
			{
				// communication unsuccessful
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 800086c:	4b27      	ldr	r3, [pc, #156]	@ (800090c <Modbus_Protocal_Worker+0x208>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	22ff      	movs	r2, #255	@ 0xff
 8000872:	75da      	strb	r2, [r3, #23]
				break;
 8000874:	e046      	b.n	8000904 <Modbus_Protocal_Worker+0x200>
			}

			//check Slave Address
			if(hModbus->modbusUartStructure.MessageBufferRx[0] != hModbus->slaveAddress)
 8000876:	4b25      	ldr	r3, [pc, #148]	@ (800090c <Modbus_Protocal_Worker+0x208>)
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	f893 2272 	ldrb.w	r2, [r3, #626]	@ 0x272
 800087e:	4b23      	ldr	r3, [pc, #140]	@ (800090c <Modbus_Protocal_Worker+0x208>)
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	781b      	ldrb	r3, [r3, #0]
 8000884:	429a      	cmp	r2, r3
 8000886:	d113      	bne.n	80008b0 <Modbus_Protocal_Worker+0x1ac>
				break;

			//copy recivced frame
			memcpy(hModbus->Rxframe,
 8000888:	4b20      	ldr	r3, [pc, #128]	@ (800090c <Modbus_Protocal_Worker+0x208>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	f103 0019 	add.w	r0, r3, #25
					hModbus->modbusUartStructure.MessageBufferRx+1,
 8000890:	4b1e      	ldr	r3, [pc, #120]	@ (800090c <Modbus_Protocal_Worker+0x208>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	f203 2372 	addw	r3, r3, #626	@ 0x272
			memcpy(hModbus->Rxframe,
 8000898:	1c59      	adds	r1, r3, #1
					hModbus->modbusUartStructure.RxTail-3);
 800089a:	4b1c      	ldr	r3, [pc, #112]	@ (800090c <Modbus_Protocal_Worker+0x208>)
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 80008a2:	3b03      	subs	r3, #3
			memcpy(hModbus->Rxframe,
 80008a4:	461a      	mov	r2, r3
 80008a6:	f006 fb4b 	bl	8006f40 <memcpy>

			//execute command
			Modbus_frame_response();
 80008aa:	f000 f909 	bl	8000ac0 <Modbus_frame_response>
 80008ae:	e001      	b.n	80008b4 <Modbus_Protocal_Worker+0x1b0>
				break;
 80008b0:	bf00      	nop
					}
		break;


	}
}
 80008b2:	e027      	b.n	8000904 <Modbus_Protocal_Worker+0x200>
		if(hModbus->Flag_T35TimeOut)
 80008b4:	4b15      	ldr	r3, [pc, #84]	@ (800090c <Modbus_Protocal_Worker+0x208>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	7d5b      	ldrb	r3, [r3, #21]
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d01f      	beq.n	80008fe <Modbus_Protocal_Worker+0x1fa>
			hModbus->Mstatus = Modbus_state_Idle;
 80008be:	4b13      	ldr	r3, [pc, #76]	@ (800090c <Modbus_Protocal_Worker+0x208>)
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	2201      	movs	r2, #1
 80008c4:	761a      	strb	r2, [r3, #24]
			HAL_UART_AbortReceive(hModbus->huart);
 80008c6:	4b11      	ldr	r3, [pc, #68]	@ (800090c <Modbus_Protocal_Worker+0x208>)
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	68db      	ldr	r3, [r3, #12]
 80008cc:	4618      	mov	r0, r3
 80008ce:	f004 f89b 	bl	8004a08 <HAL_UART_AbortReceive>
		break;
 80008d2:	e014      	b.n	80008fe <Modbus_Protocal_Worker+0x1fa>
		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 80008d4:	4b0d      	ldr	r3, [pc, #52]	@ (800090c <Modbus_Protocal_Worker+0x208>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	68db      	ldr	r3, [r3, #12]
 80008da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80008de:	2b20      	cmp	r3, #32
 80008e0:	d10f      	bne.n	8000902 <Modbus_Protocal_Worker+0x1fe>
			hModbus->TxCount=0;
 80008e2:	4b0a      	ldr	r3, [pc, #40]	@ (800090c <Modbus_Protocal_Worker+0x208>)
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	2200      	movs	r2, #0
 80008e8:	f883 2271 	strb.w	r2, [r3, #625]	@ 0x271
			hModbus->Mstatus = Modbus_state_Idle;
 80008ec:	4b07      	ldr	r3, [pc, #28]	@ (800090c <Modbus_Protocal_Worker+0x208>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	2201      	movs	r2, #1
 80008f2:	761a      	strb	r2, [r3, #24]
		break;
 80008f4:	e005      	b.n	8000902 <Modbus_Protocal_Worker+0x1fe>
		break;
 80008f6:	bf00      	nop
 80008f8:	e004      	b.n	8000904 <Modbus_Protocal_Worker+0x200>
		break;
 80008fa:	bf00      	nop
 80008fc:	e002      	b.n	8000904 <Modbus_Protocal_Worker+0x200>
		break;
 80008fe:	bf00      	nop
 8000900:	e000      	b.n	8000904 <Modbus_Protocal_Worker+0x200>
		break;
 8000902:	bf00      	nop
}
 8000904:	bf00      	nop
 8000906:	3708      	adds	r7, #8
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}
 800090c:	20000228 	.word	0x20000228

08000910 <modbusWrite1Register>:
void modbusWrite1Register() //function 06
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b082      	sub	sp, #8
 8000914:	af00      	add	r7, sp, #0

	//write data to register
	uint16_t startAddress = (hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]);
 8000916:	4b1d      	ldr	r3, [pc, #116]	@ (800098c <modbusWrite1Register+0x7c>)
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	7e9b      	ldrb	r3, [r3, #26]
 800091c:	021b      	lsls	r3, r3, #8
 800091e:	b29b      	uxth	r3, r3
 8000920:	4a1a      	ldr	r2, [pc, #104]	@ (800098c <modbusWrite1Register+0x7c>)
 8000922:	6812      	ldr	r2, [r2, #0]
 8000924:	7ed2      	ldrb	r2, [r2, #27]
 8000926:	4413      	add	r3, r2
 8000928:	80fb      	strh	r3, [r7, #6]

	if(startAddress > hModbus->RegisterSize)
 800092a:	88fa      	ldrh	r2, [r7, #6]
 800092c:	4b17      	ldr	r3, [pc, #92]	@ (800098c <modbusWrite1Register+0x7c>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	689b      	ldr	r3, [r3, #8]
 8000932:	429a      	cmp	r2, r3
 8000934:	d903      	bls.n	800093e <modbusWrite1Register+0x2e>
		{
			 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 8000936:	2002      	movs	r0, #2
 8000938:	f000 f8a0 	bl	8000a7c <ModbusErrorReply>
			 return;
 800093c:	e023      	b.n	8000986 <modbusWrite1Register+0x76>
		}


	hModbus->RegisterAddress[startAddress].U8[1] = hModbus->Rxframe[3];
 800093e:	4b13      	ldr	r3, [pc, #76]	@ (800098c <modbusWrite1Register+0x7c>)
 8000940:	681a      	ldr	r2, [r3, #0]
 8000942:	4b12      	ldr	r3, [pc, #72]	@ (800098c <modbusWrite1Register+0x7c>)
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	6859      	ldr	r1, [r3, #4]
 8000948:	88fb      	ldrh	r3, [r7, #6]
 800094a:	005b      	lsls	r3, r3, #1
 800094c:	440b      	add	r3, r1
 800094e:	7f12      	ldrb	r2, [r2, #28]
 8000950:	705a      	strb	r2, [r3, #1]
	hModbus->RegisterAddress[startAddress].U8[0] = hModbus->Rxframe[4];
 8000952:	4b0e      	ldr	r3, [pc, #56]	@ (800098c <modbusWrite1Register+0x7c>)
 8000954:	681a      	ldr	r2, [r3, #0]
 8000956:	4b0d      	ldr	r3, [pc, #52]	@ (800098c <modbusWrite1Register+0x7c>)
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	6859      	ldr	r1, [r3, #4]
 800095c:	88fb      	ldrh	r3, [r7, #6]
 800095e:	005b      	lsls	r3, r3, #1
 8000960:	440b      	add	r3, r1
 8000962:	7f52      	ldrb	r2, [r2, #29]
 8000964:	701a      	strb	r2, [r3, #0]



	//generate response
	memcpy(hModbus->Txframe,
 8000966:	4b09      	ldr	r3, [pc, #36]	@ (800098c <modbusWrite1Register+0x7c>)
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	f203 1045 	addw	r0, r3, #325	@ 0x145
			hModbus->Rxframe,
 800096e:	4b07      	ldr	r3, [pc, #28]	@ (800098c <modbusWrite1Register+0x7c>)
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	3319      	adds	r3, #25
	memcpy(hModbus->Txframe,
 8000974:	2208      	movs	r2, #8
 8000976:	4619      	mov	r1, r3
 8000978:	f006 fae2 	bl	8006f40 <memcpy>
			8);
	//set number of byte to sent
	hModbus->TxCount=5;
 800097c:	4b03      	ldr	r3, [pc, #12]	@ (800098c <modbusWrite1Register+0x7c>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	2205      	movs	r2, #5
 8000982:	f883 2271 	strb.w	r2, [r3, #625]	@ 0x271



}
 8000986:	3708      	adds	r7, #8
 8000988:	46bd      	mov	sp, r7
 800098a:	bd80      	pop	{r7, pc}
 800098c:	20000228 	.word	0x20000228

08000990 <modbusRead1Register>:

void modbusRead1Register() // function 03
{
 8000990:	b590      	push	{r4, r7, lr}
 8000992:	b083      	sub	sp, #12
 8000994:	af00      	add	r7, sp, #0



	uint16_t numberOfDataToRead =((hModbus->Rxframe[3]<<8)+(hModbus->Rxframe[4]));
 8000996:	4b38      	ldr	r3, [pc, #224]	@ (8000a78 <modbusRead1Register+0xe8>)
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	7f1b      	ldrb	r3, [r3, #28]
 800099c:	021b      	lsls	r3, r3, #8
 800099e:	b29b      	uxth	r3, r3
 80009a0:	4a35      	ldr	r2, [pc, #212]	@ (8000a78 <modbusRead1Register+0xe8>)
 80009a2:	6812      	ldr	r2, [r2, #0]
 80009a4:	7f52      	ldrb	r2, [r2, #29]
 80009a6:	4413      	add	r3, r2
 80009a8:	80fb      	strh	r3, [r7, #6]
	uint16_t startAddress =((hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]));
 80009aa:	4b33      	ldr	r3, [pc, #204]	@ (8000a78 <modbusRead1Register+0xe8>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	7e9b      	ldrb	r3, [r3, #26]
 80009b0:	021b      	lsls	r3, r3, #8
 80009b2:	b29b      	uxth	r3, r3
 80009b4:	4a30      	ldr	r2, [pc, #192]	@ (8000a78 <modbusRead1Register+0xe8>)
 80009b6:	6812      	ldr	r2, [r2, #0]
 80009b8:	7ed2      	ldrb	r2, [r2, #27]
 80009ba:	4413      	add	r3, r2
 80009bc:	80bb      	strh	r3, [r7, #4]

	//check quantity and address range

	if(numberOfDataToRead <1 ||numberOfDataToRead > 0x7D)
 80009be:	88fb      	ldrh	r3, [r7, #6]
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d002      	beq.n	80009ca <modbusRead1Register+0x3a>
 80009c4:	88fb      	ldrh	r3, [r7, #6]
 80009c6:	2b7d      	cmp	r3, #125	@ 0x7d
 80009c8:	d903      	bls.n	80009d2 <modbusRead1Register+0x42>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataValue);
 80009ca:	2003      	movs	r0, #3
 80009cc:	f000 f856 	bl	8000a7c <ModbusErrorReply>
		 return;
 80009d0:	e04e      	b.n	8000a70 <modbusRead1Register+0xe0>
	}

	if(startAddress > hModbus->RegisterSize || (startAddress +  numberOfDataToRead) > hModbus->RegisterSize)
 80009d2:	88ba      	ldrh	r2, [r7, #4]
 80009d4:	4b28      	ldr	r3, [pc, #160]	@ (8000a78 <modbusRead1Register+0xe8>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	689b      	ldr	r3, [r3, #8]
 80009da:	429a      	cmp	r2, r3
 80009dc:	d808      	bhi.n	80009f0 <modbusRead1Register+0x60>
 80009de:	88ba      	ldrh	r2, [r7, #4]
 80009e0:	88fb      	ldrh	r3, [r7, #6]
 80009e2:	4413      	add	r3, r2
 80009e4:	461a      	mov	r2, r3
 80009e6:	4b24      	ldr	r3, [pc, #144]	@ (8000a78 <modbusRead1Register+0xe8>)
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	689b      	ldr	r3, [r3, #8]
 80009ec:	429a      	cmp	r2, r3
 80009ee:	d903      	bls.n	80009f8 <modbusRead1Register+0x68>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 80009f0:	2002      	movs	r0, #2
 80009f2:	f000 f843 	bl	8000a7c <ModbusErrorReply>
		 return;
 80009f6:	e03b      	b.n	8000a70 <modbusRead1Register+0xe0>
	}


	//generate response
	hModbus->Txframe[0] = Modbus_function_Read_Holding_Register;
 80009f8:	4b1f      	ldr	r3, [pc, #124]	@ (8000a78 <modbusRead1Register+0xe8>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	2203      	movs	r2, #3
 80009fe:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	hModbus->Txframe[1] = (2*numberOfDataToRead) & 0xFF;
 8000a02:	88fb      	ldrh	r3, [r7, #6]
 8000a04:	b2da      	uxtb	r2, r3
 8000a06:	4b1c      	ldr	r3, [pc, #112]	@ (8000a78 <modbusRead1Register+0xe8>)
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	0052      	lsls	r2, r2, #1
 8000a0c:	b2d2      	uxtb	r2, r2
 8000a0e:	f883 2146 	strb.w	r2, [r3, #326]	@ 0x146
	register int i;
	for(i=0; i<numberOfDataToRead;i++)
 8000a12:	2400      	movs	r4, #0
 8000a14:	e020      	b.n	8000a58 <modbusRead1Register+0xc8>
	{
		hModbus->Txframe[2*i+2]=hModbus->RegisterAddress[startAddress+i].U8[1];
 8000a16:	4b18      	ldr	r3, [pc, #96]	@ (8000a78 <modbusRead1Register+0xe8>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	685a      	ldr	r2, [r3, #4]
 8000a1c:	88bb      	ldrh	r3, [r7, #4]
 8000a1e:	4423      	add	r3, r4
 8000a20:	005b      	lsls	r3, r3, #1
 8000a22:	18d1      	adds	r1, r2, r3
 8000a24:	4b14      	ldr	r3, [pc, #80]	@ (8000a78 <modbusRead1Register+0xe8>)
 8000a26:	681a      	ldr	r2, [r3, #0]
 8000a28:	1c63      	adds	r3, r4, #1
 8000a2a:	005b      	lsls	r3, r3, #1
 8000a2c:	7849      	ldrb	r1, [r1, #1]
 8000a2e:	4413      	add	r3, r2
 8000a30:	460a      	mov	r2, r1
 8000a32:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
		hModbus->Txframe[2*i+3]=hModbus->RegisterAddress[startAddress+i].U8[0];
 8000a36:	4b10      	ldr	r3, [pc, #64]	@ (8000a78 <modbusRead1Register+0xe8>)
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	685a      	ldr	r2, [r3, #4]
 8000a3c:	88bb      	ldrh	r3, [r7, #4]
 8000a3e:	4423      	add	r3, r4
 8000a40:	005b      	lsls	r3, r3, #1
 8000a42:	18d1      	adds	r1, r2, r3
 8000a44:	4b0c      	ldr	r3, [pc, #48]	@ (8000a78 <modbusRead1Register+0xe8>)
 8000a46:	681a      	ldr	r2, [r3, #0]
 8000a48:	0063      	lsls	r3, r4, #1
 8000a4a:	3303      	adds	r3, #3
 8000a4c:	7809      	ldrb	r1, [r1, #0]
 8000a4e:	4413      	add	r3, r2
 8000a50:	460a      	mov	r2, r1
 8000a52:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	for(i=0; i<numberOfDataToRead;i++)
 8000a56:	3401      	adds	r4, #1
 8000a58:	88fb      	ldrh	r3, [r7, #6]
 8000a5a:	429c      	cmp	r4, r3
 8000a5c:	dbdb      	blt.n	8000a16 <modbusRead1Register+0x86>
	}
	hModbus->TxCount = 2+2*numberOfDataToRead;
 8000a5e:	88fb      	ldrh	r3, [r7, #6]
 8000a60:	3301      	adds	r3, #1
 8000a62:	b2da      	uxtb	r2, r3
 8000a64:	4b04      	ldr	r3, [pc, #16]	@ (8000a78 <modbusRead1Register+0xe8>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	0052      	lsls	r2, r2, #1
 8000a6a:	b2d2      	uxtb	r2, r2
 8000a6c:	f883 2271 	strb.w	r2, [r3, #625]	@ 0x271

}
 8000a70:	370c      	adds	r7, #12
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd90      	pop	{r4, r7, pc}
 8000a76:	bf00      	nop
 8000a78:	20000228 	.word	0x20000228

08000a7c <ModbusErrorReply>:

void ModbusErrorReply(uint8_t Errorcode)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	b083      	sub	sp, #12
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	4603      	mov	r3, r0
 8000a84:	71fb      	strb	r3, [r7, #7]
	hModbus->Txframe[0] = hModbus->Rxframe[0] | 0x80;
 8000a86:	4b0d      	ldr	r3, [pc, #52]	@ (8000abc <ModbusErrorReply+0x40>)
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	7e5a      	ldrb	r2, [r3, #25]
 8000a8c:	4b0b      	ldr	r3, [pc, #44]	@ (8000abc <ModbusErrorReply+0x40>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8000a94:	b2d2      	uxtb	r2, r2
 8000a96:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	hModbus->Txframe[1] = Errorcode;
 8000a9a:	4b08      	ldr	r3, [pc, #32]	@ (8000abc <ModbusErrorReply+0x40>)
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	79fa      	ldrb	r2, [r7, #7]
 8000aa0:	f883 2146 	strb.w	r2, [r3, #326]	@ 0x146
	hModbus->TxCount = 2;
 8000aa4:	4b05      	ldr	r3, [pc, #20]	@ (8000abc <ModbusErrorReply+0x40>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	2202      	movs	r2, #2
 8000aaa:	f883 2271 	strb.w	r2, [r3, #625]	@ 0x271
}
 8000aae:	bf00      	nop
 8000ab0:	370c      	adds	r7, #12
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop
 8000abc:	20000228 	.word	0x20000228

08000ac0 <Modbus_frame_response>:

void Modbus_frame_response()
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0
	switch(hModbus->Rxframe[0]) //check funcion
 8000ac4:	4b09      	ldr	r3, [pc, #36]	@ (8000aec <Modbus_frame_response+0x2c>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	7e5b      	ldrb	r3, [r3, #25]
 8000aca:	2b03      	cmp	r3, #3
 8000acc:	d004      	beq.n	8000ad8 <Modbus_frame_response+0x18>
 8000ace:	2b06      	cmp	r3, #6
 8000ad0:	d105      	bne.n	8000ade <Modbus_frame_response+0x1e>
	{
	case Modbus_function_Write_SingleRegister:
		modbusWrite1Register();
 8000ad2:	f7ff ff1d 	bl	8000910 <modbusWrite1Register>
		break;
 8000ad6:	e006      	b.n	8000ae6 <Modbus_frame_response+0x26>
	case Modbus_function_Read_Holding_Register:
		modbusRead1Register();
 8000ad8:	f7ff ff5a 	bl	8000990 <modbusRead1Register>
		break;
 8000adc:	e003      	b.n	8000ae6 <Modbus_frame_response+0x26>
	default:
		 ModbusErrorReply(Modbus_RecvFrame_IllegalFunction);
 8000ade:	2001      	movs	r0, #1
 8000ae0:	f7ff ffcc 	bl	8000a7c <ModbusErrorReply>
		break;
 8000ae4:	bf00      	nop

	}
}
 8000ae6:	bf00      	nop
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	20000228 	.word	0x20000228

08000af0 <Modbus_Emission>:

void Modbus_Emission()
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b082      	sub	sp, #8
 8000af4:	af00      	add	r7, sp, #0
	if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8000af6:	4b3c      	ldr	r3, [pc, #240]	@ (8000be8 <Modbus_Emission+0xf8>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	68db      	ldr	r3, [r3, #12]
 8000afc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b00:	2b20      	cmp	r3, #32
 8000b02:	d15d      	bne.n	8000bc0 <Modbus_Emission+0xd0>
	{
		//generate response package
		hModbus->modbusUartStructure.MessageBufferTx[0] = hModbus->slaveAddress;
 8000b04:	4b38      	ldr	r3, [pc, #224]	@ (8000be8 <Modbus_Emission+0xf8>)
 8000b06:	681a      	ldr	r2, [r3, #0]
 8000b08:	4b37      	ldr	r3, [pc, #220]	@ (8000be8 <Modbus_Emission+0xf8>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	7812      	ldrb	r2, [r2, #0]
 8000b0e:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		memcpy
		(
				hModbus->modbusUartStructure.MessageBufferTx+1,
 8000b12:	4b35      	ldr	r3, [pc, #212]	@ (8000be8 <Modbus_Emission+0xf8>)
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	f503 7369 	add.w	r3, r3, #932	@ 0x3a4
		memcpy
 8000b1a:	1c58      	adds	r0, r3, #1
				hModbus->Txframe,
 8000b1c:	4b32      	ldr	r3, [pc, #200]	@ (8000be8 <Modbus_Emission+0xf8>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	f203 1145 	addw	r1, r3, #325	@ 0x145
				hModbus->TxCount
 8000b24:	4b30      	ldr	r3, [pc, #192]	@ (8000be8 <Modbus_Emission+0xf8>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	f893 3271 	ldrb.w	r3, [r3, #625]	@ 0x271
		memcpy
 8000b2c:	461a      	mov	r2, r3
 8000b2e:	f006 fa07 	bl	8006f40 <memcpy>
		);

		hModbus->modbusUartStructure.TxTail = hModbus->TxCount+3;
 8000b32:	4b2d      	ldr	r3, [pc, #180]	@ (8000be8 <Modbus_Emission+0xf8>)
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	f893 3271 	ldrb.w	r3, [r3, #625]	@ 0x271
 8000b3a:	461a      	mov	r2, r3
 8000b3c:	4b2a      	ldr	r3, [pc, #168]	@ (8000be8 <Modbus_Emission+0xf8>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	3203      	adds	r2, #3
 8000b42:	b292      	uxth	r2, r2
 8000b44:	f8a3 24d4 	strh.w	r2, [r3, #1236]	@ 0x4d4

		u16u8_t CalculateCRC;
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 8000b48:	4b27      	ldr	r3, [pc, #156]	@ (8000be8 <Modbus_Emission+0xf8>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	f503 7269 	add.w	r2, r3, #932	@ 0x3a4
				hModbus->modbusUartStructure.TxTail - 2);
 8000b50:	4b25      	ldr	r3, [pc, #148]	@ (8000be8 <Modbus_Emission+0xf8>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 8000b58:	3b02      	subs	r3, #2
 8000b5a:	4619      	mov	r1, r3
 8000b5c:	4610      	mov	r0, r2
 8000b5e:	f7ff fd99 	bl	8000694 <CRC16>
 8000b62:	4603      	mov	r3, r0
 8000b64:	80bb      	strh	r3, [r7, #4]

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-2]
 8000b66:	4b20      	ldr	r3, [pc, #128]	@ (8000be8 <Modbus_Emission+0xf8>)
 8000b68:	681a      	ldr	r2, [r3, #0]
 8000b6a:	4b1f      	ldr	r3, [pc, #124]	@ (8000be8 <Modbus_Emission+0xf8>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 8000b72:	3b02      	subs	r3, #2
													 =CalculateCRC.U8[0];
 8000b74:	7939      	ldrb	r1, [r7, #4]
 8000b76:	4413      	add	r3, r2
 8000b78:	460a      	mov	r2, r1
 8000b7a:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-1]
 8000b7e:	4b1a      	ldr	r3, [pc, #104]	@ (8000be8 <Modbus_Emission+0xf8>)
 8000b80:	681a      	ldr	r2, [r3, #0]
 8000b82:	4b19      	ldr	r3, [pc, #100]	@ (8000be8 <Modbus_Emission+0xf8>)
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 8000b8a:	3b01      	subs	r3, #1
													 =CalculateCRC.U8[1];
 8000b8c:	7979      	ldrb	r1, [r7, #5]
 8000b8e:	4413      	add	r3, r2
 8000b90:	460a      	mov	r2, r1
 8000b92:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4


		//sent modbus

		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8000b96:	4b14      	ldr	r3, [pc, #80]	@ (8000be8 <Modbus_Emission+0xf8>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	68db      	ldr	r3, [r3, #12]
 8000b9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ba0:	2b20      	cmp	r3, #32
 8000ba2:	d10d      	bne.n	8000bc0 <Modbus_Emission+0xd0>
		{
			HAL_UART_Transmit_DMA(hModbus->huart
 8000ba4:	4b10      	ldr	r3, [pc, #64]	@ (8000be8 <Modbus_Emission+0xf8>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	68d8      	ldr	r0, [r3, #12]
					,hModbus->modbusUartStructure.MessageBufferTx
 8000baa:	4b0f      	ldr	r3, [pc, #60]	@ (8000be8 <Modbus_Emission+0xf8>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	f503 7169 	add.w	r1, r3, #932	@ 0x3a4
					,hModbus->modbusUartStructure.TxTail);
 8000bb2:	4b0d      	ldr	r3, [pc, #52]	@ (8000be8 <Modbus_Emission+0xf8>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
			HAL_UART_Transmit_DMA(hModbus->huart
 8000bb6:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 8000bba:	461a      	mov	r2, r3
 8000bbc:	f003 fea4 	bl	8004908 <HAL_UART_Transmit_DMA>



	}
	/*reset Timer flag*/
	hModbus->Flag_T15TimeOut = 0;
 8000bc0:	4b09      	ldr	r3, [pc, #36]	@ (8000be8 <Modbus_Emission+0xf8>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	751a      	strb	r2, [r3, #20]
	hModbus->Flag_T35TimeOut = 0;
 8000bc8:	4b07      	ldr	r3, [pc, #28]	@ (8000be8 <Modbus_Emission+0xf8>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	2200      	movs	r2, #0
 8000bce:	755a      	strb	r2, [r3, #21]
	hModbus->Flag_URev =0;
 8000bd0:	4b05      	ldr	r3, [pc, #20]	@ (8000be8 <Modbus_Emission+0xf8>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	759a      	strb	r2, [r3, #22]
	/*set state*/
	hModbus->Mstatus= Modbus_state_Emission;
 8000bd8:	4b03      	ldr	r3, [pc, #12]	@ (8000be8 <Modbus_Emission+0xf8>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	2202      	movs	r2, #2
 8000bde:	761a      	strb	r2, [r3, #24]
}
 8000be0:	bf00      	nop
 8000be2:	3708      	adds	r7, #8
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	20000228 	.word	0x20000228

08000bec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bf0:	f000 fb39 	bl	8001266 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bf4:	f000 f82c 	bl	8000c50 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bf8:	f000 f96e 	bl	8000ed8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000bfc:	f000 f942 	bl	8000e84 <MX_DMA_Init>
  MX_TIM16_Init();
 8000c00:	f000 f872 	bl	8000ce8 <MX_TIM16_Init>
  MX_USART2_UART_Init();
 8000c04:	f000 f8f0 	bl	8000de8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  hmodbus.huart = &huart2;
 8000c08:	4b0d      	ldr	r3, [pc, #52]	@ (8000c40 <main+0x54>)
 8000c0a:	4a0e      	ldr	r2, [pc, #56]	@ (8000c44 <main+0x58>)
 8000c0c:	60da      	str	r2, [r3, #12]
  hmodbus.htim = &htim16;
 8000c0e:	4b0c      	ldr	r3, [pc, #48]	@ (8000c40 <main+0x54>)
 8000c10:	4a0d      	ldr	r2, [pc, #52]	@ (8000c48 <main+0x5c>)
 8000c12:	611a      	str	r2, [r3, #16]
  hmodbus.slaveAddress = 0x15;
 8000c14:	4b0a      	ldr	r3, [pc, #40]	@ (8000c40 <main+0x54>)
 8000c16:	2215      	movs	r2, #21
 8000c18:	701a      	strb	r2, [r3, #0]
  hmodbus.RegisterSize =200;
 8000c1a:	4b09      	ldr	r3, [pc, #36]	@ (8000c40 <main+0x54>)
 8000c1c:	22c8      	movs	r2, #200	@ 0xc8
 8000c1e:	609a      	str	r2, [r3, #8]
  Modbus_init(&hmodbus, registerFrame);
 8000c20:	490a      	ldr	r1, [pc, #40]	@ (8000c4c <main+0x60>)
 8000c22:	4807      	ldr	r0, [pc, #28]	@ (8000c40 <main+0x54>)
 8000c24:	f7ff fce0 	bl	80005e8 <Modbus_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  Modbus_Protocal_Worker();
 8000c28:	f7ff fd6c 	bl	8000704 <Modbus_Protocal_Worker>
	  registerFrame[0x00].U16 = 22881;
 8000c2c:	4b07      	ldr	r3, [pc, #28]	@ (8000c4c <main+0x60>)
 8000c2e:	f645 1261 	movw	r2, #22881	@ 0x5961
 8000c32:	801a      	strh	r2, [r3, #0]
	  registerFrame[0x15].U16 = 100;
 8000c34:	4b05      	ldr	r3, [pc, #20]	@ (8000c4c <main+0x60>)
 8000c36:	2264      	movs	r2, #100	@ 0x64
 8000c38:	855a      	strh	r2, [r3, #42]	@ 0x2a
	  Modbus_Protocal_Worker();
 8000c3a:	bf00      	nop
 8000c3c:	e7f4      	b.n	8000c28 <main+0x3c>
 8000c3e:	bf00      	nop
 8000c40:	20000424 	.word	0x20000424
 8000c44:	200002f8 	.word	0x200002f8
 8000c48:	2000022c 	.word	0x2000022c
 8000c4c:	200008fc 	.word	0x200008fc

08000c50 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b094      	sub	sp, #80	@ 0x50
 8000c54:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c56:	f107 0318 	add.w	r3, r7, #24
 8000c5a:	2238      	movs	r2, #56	@ 0x38
 8000c5c:	2100      	movs	r1, #0
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f006 f942 	bl	8006ee8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c64:	1d3b      	adds	r3, r7, #4
 8000c66:	2200      	movs	r2, #0
 8000c68:	601a      	str	r2, [r3, #0]
 8000c6a:	605a      	str	r2, [r3, #4]
 8000c6c:	609a      	str	r2, [r3, #8]
 8000c6e:	60da      	str	r2, [r3, #12]
 8000c70:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000c72:	2000      	movs	r0, #0
 8000c74:	f001 f95c 	bl	8001f30 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c78:	2302      	movs	r3, #2
 8000c7a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c7c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000c80:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c82:	2340      	movs	r3, #64	@ 0x40
 8000c84:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c86:	2302      	movs	r3, #2
 8000c88:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c8a:	2302      	movs	r3, #2
 8000c8c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000c8e:	2304      	movs	r3, #4
 8000c90:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000c92:	2355      	movs	r3, #85	@ 0x55
 8000c94:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c96:	2302      	movs	r3, #2
 8000c98:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000c9a:	2302      	movs	r3, #2
 8000c9c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000c9e:	2302      	movs	r3, #2
 8000ca0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ca2:	f107 0318 	add.w	r3, r7, #24
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f001 f9f6 	bl	8002098 <HAL_RCC_OscConfig>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d001      	beq.n	8000cb6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000cb2:	f000 f96b 	bl	8000f8c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cb6:	230f      	movs	r3, #15
 8000cb8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cba:	2303      	movs	r3, #3
 8000cbc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000cca:	1d3b      	adds	r3, r7, #4
 8000ccc:	2104      	movs	r1, #4
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f001 fcf4 	bl	80026bc <HAL_RCC_ClockConfig>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d001      	beq.n	8000cde <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000cda:	f000 f957 	bl	8000f8c <Error_Handler>
  }
}
 8000cde:	bf00      	nop
 8000ce0:	3750      	adds	r7, #80	@ 0x50
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
	...

08000ce8 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b094      	sub	sp, #80	@ 0x50
 8000cec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000cee:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	601a      	str	r2, [r3, #0]
 8000cf6:	605a      	str	r2, [r3, #4]
 8000cf8:	609a      	str	r2, [r3, #8]
 8000cfa:	60da      	str	r2, [r3, #12]
 8000cfc:	611a      	str	r2, [r3, #16]
 8000cfe:	615a      	str	r2, [r3, #20]
 8000d00:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000d02:	463b      	mov	r3, r7
 8000d04:	2234      	movs	r2, #52	@ 0x34
 8000d06:	2100      	movs	r1, #0
 8000d08:	4618      	mov	r0, r3
 8000d0a:	f006 f8ed 	bl	8006ee8 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000d0e:	4b34      	ldr	r3, [pc, #208]	@ (8000de0 <MX_TIM16_Init+0xf8>)
 8000d10:	4a34      	ldr	r2, [pc, #208]	@ (8000de4 <MX_TIM16_Init+0xfc>)
 8000d12:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 169;
 8000d14:	4b32      	ldr	r3, [pc, #200]	@ (8000de0 <MX_TIM16_Init+0xf8>)
 8000d16:	22a9      	movs	r2, #169	@ 0xa9
 8000d18:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d1a:	4b31      	ldr	r3, [pc, #196]	@ (8000de0 <MX_TIM16_Init+0xf8>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 2005;
 8000d20:	4b2f      	ldr	r3, [pc, #188]	@ (8000de0 <MX_TIM16_Init+0xf8>)
 8000d22:	f240 72d5 	movw	r2, #2005	@ 0x7d5
 8000d26:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d28:	4b2d      	ldr	r3, [pc, #180]	@ (8000de0 <MX_TIM16_Init+0xf8>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000d2e:	4b2c      	ldr	r3, [pc, #176]	@ (8000de0 <MX_TIM16_Init+0xf8>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d34:	4b2a      	ldr	r3, [pc, #168]	@ (8000de0 <MX_TIM16_Init+0xf8>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000d3a:	4829      	ldr	r0, [pc, #164]	@ (8000de0 <MX_TIM16_Init+0xf8>)
 8000d3c:	f002 f928 	bl	8002f90 <HAL_TIM_Base_Init>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d001      	beq.n	8000d4a <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 8000d46:	f000 f921 	bl	8000f8c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim16) != HAL_OK)
 8000d4a:	4825      	ldr	r0, [pc, #148]	@ (8000de0 <MX_TIM16_Init+0xf8>)
 8000d4c:	f002 f9fc 	bl	8003148 <HAL_TIM_OC_Init>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d001      	beq.n	8000d5a <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 8000d56:	f000 f919 	bl	8000f8c <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim16, TIM_OPMODE_SINGLE) != HAL_OK)
 8000d5a:	2108      	movs	r1, #8
 8000d5c:	4820      	ldr	r0, [pc, #128]	@ (8000de0 <MX_TIM16_Init+0xf8>)
 8000d5e:	f002 fa61 	bl	8003224 <HAL_TIM_OnePulse_Init>
 8000d62:	4603      	mov	r3, r0
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d001      	beq.n	8000d6c <MX_TIM16_Init+0x84>
  {
    Error_Handler();
 8000d68:	f000 f910 	bl	8000f8c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_ACTIVE;
 8000d6c:	2310      	movs	r3, #16
 8000d6e:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.Pulse = 1433;
 8000d70:	f240 5399 	movw	r3, #1433	@ 0x599
 8000d74:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d76:	2300      	movs	r3, #0
 8000d78:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000d82:	2300      	movs	r3, #0
 8000d84:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000d86:	2300      	movs	r3, #0
 8000d88:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_TIM_OC_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d8a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000d8e:	2200      	movs	r2, #0
 8000d90:	4619      	mov	r1, r3
 8000d92:	4813      	ldr	r0, [pc, #76]	@ (8000de0 <MX_TIM16_Init+0xf8>)
 8000d94:	f002 fcb6 	bl	8003704 <HAL_TIM_OC_ConfigChannel>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d001      	beq.n	8000da2 <MX_TIM16_Init+0xba>
  {
    Error_Handler();
 8000d9e:	f000 f8f5 	bl	8000f8c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000da2:	2300      	movs	r3, #0
 8000da4:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000da6:	2300      	movs	r3, #0
 8000da8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000daa:	2300      	movs	r3, #0
 8000dac:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000dae:	2300      	movs	r3, #0
 8000db0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000db2:	2300      	movs	r3, #0
 8000db4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000db6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000dba:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8000dc4:	463b      	mov	r3, r7
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	4805      	ldr	r0, [pc, #20]	@ (8000de0 <MX_TIM16_Init+0xf8>)
 8000dca:	f003 fb53 	bl	8004474 <HAL_TIMEx_ConfigBreakDeadTime>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d001      	beq.n	8000dd8 <MX_TIM16_Init+0xf0>
  {
    Error_Handler();
 8000dd4:	f000 f8da 	bl	8000f8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8000dd8:	bf00      	nop
 8000dda:	3750      	adds	r7, #80	@ 0x50
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	2000022c 	.word	0x2000022c
 8000de4:	40014400 	.word	0x40014400

08000de8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000dec:	4b23      	ldr	r3, [pc, #140]	@ (8000e7c <MX_USART2_UART_Init+0x94>)
 8000dee:	4a24      	ldr	r2, [pc, #144]	@ (8000e80 <MX_USART2_UART_Init+0x98>)
 8000df0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 8000df2:	4b22      	ldr	r3, [pc, #136]	@ (8000e7c <MX_USART2_UART_Init+0x94>)
 8000df4:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 8000df8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8000dfa:	4b20      	ldr	r3, [pc, #128]	@ (8000e7c <MX_USART2_UART_Init+0x94>)
 8000dfc:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000e00:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e02:	4b1e      	ldr	r3, [pc, #120]	@ (8000e7c <MX_USART2_UART_Init+0x94>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8000e08:	4b1c      	ldr	r3, [pc, #112]	@ (8000e7c <MX_USART2_UART_Init+0x94>)
 8000e0a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000e0e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e10:	4b1a      	ldr	r3, [pc, #104]	@ (8000e7c <MX_USART2_UART_Init+0x94>)
 8000e12:	220c      	movs	r2, #12
 8000e14:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e16:	4b19      	ldr	r3, [pc, #100]	@ (8000e7c <MX_USART2_UART_Init+0x94>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e1c:	4b17      	ldr	r3, [pc, #92]	@ (8000e7c <MX_USART2_UART_Init+0x94>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e22:	4b16      	ldr	r3, [pc, #88]	@ (8000e7c <MX_USART2_UART_Init+0x94>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000e28:	4b14      	ldr	r3, [pc, #80]	@ (8000e7c <MX_USART2_UART_Init+0x94>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e2e:	4b13      	ldr	r3, [pc, #76]	@ (8000e7c <MX_USART2_UART_Init+0x94>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e34:	4811      	ldr	r0, [pc, #68]	@ (8000e7c <MX_USART2_UART_Init+0x94>)
 8000e36:	f003 fc01 	bl	800463c <HAL_UART_Init>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d001      	beq.n	8000e44 <MX_USART2_UART_Init+0x5c>
  {
    Error_Handler();
 8000e40:	f000 f8a4 	bl	8000f8c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e44:	2100      	movs	r1, #0
 8000e46:	480d      	ldr	r0, [pc, #52]	@ (8000e7c <MX_USART2_UART_Init+0x94>)
 8000e48:	f005 ff83 	bl	8006d52 <HAL_UARTEx_SetTxFifoThreshold>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d001      	beq.n	8000e56 <MX_USART2_UART_Init+0x6e>
  {
    Error_Handler();
 8000e52:	f000 f89b 	bl	8000f8c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e56:	2100      	movs	r1, #0
 8000e58:	4808      	ldr	r0, [pc, #32]	@ (8000e7c <MX_USART2_UART_Init+0x94>)
 8000e5a:	f005 ffb8 	bl	8006dce <HAL_UARTEx_SetRxFifoThreshold>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d001      	beq.n	8000e68 <MX_USART2_UART_Init+0x80>
  {
    Error_Handler();
 8000e64:	f000 f892 	bl	8000f8c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000e68:	4804      	ldr	r0, [pc, #16]	@ (8000e7c <MX_USART2_UART_Init+0x94>)
 8000e6a:	f005 ff39 	bl	8006ce0 <HAL_UARTEx_DisableFifoMode>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d001      	beq.n	8000e78 <MX_USART2_UART_Init+0x90>
  {
    Error_Handler();
 8000e74:	f000 f88a 	bl	8000f8c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e78:	bf00      	nop
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	200002f8 	.word	0x200002f8
 8000e80:	40004400 	.word	0x40004400

08000e84 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b082      	sub	sp, #8
 8000e88:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000e8a:	4b12      	ldr	r3, [pc, #72]	@ (8000ed4 <MX_DMA_Init+0x50>)
 8000e8c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000e8e:	4a11      	ldr	r2, [pc, #68]	@ (8000ed4 <MX_DMA_Init+0x50>)
 8000e90:	f043 0304 	orr.w	r3, r3, #4
 8000e94:	6493      	str	r3, [r2, #72]	@ 0x48
 8000e96:	4b0f      	ldr	r3, [pc, #60]	@ (8000ed4 <MX_DMA_Init+0x50>)
 8000e98:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000e9a:	f003 0304 	and.w	r3, r3, #4
 8000e9e:	607b      	str	r3, [r7, #4]
 8000ea0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ea2:	4b0c      	ldr	r3, [pc, #48]	@ (8000ed4 <MX_DMA_Init+0x50>)
 8000ea4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000ea6:	4a0b      	ldr	r2, [pc, #44]	@ (8000ed4 <MX_DMA_Init+0x50>)
 8000ea8:	f043 0301 	orr.w	r3, r3, #1
 8000eac:	6493      	str	r3, [r2, #72]	@ 0x48
 8000eae:	4b09      	ldr	r3, [pc, #36]	@ (8000ed4 <MX_DMA_Init+0x50>)
 8000eb0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000eb2:	f003 0301 	and.w	r3, r3, #1
 8000eb6:	603b      	str	r3, [r7, #0]
 8000eb8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000eba:	2200      	movs	r2, #0
 8000ebc:	2100      	movs	r1, #0
 8000ebe:	200b      	movs	r0, #11
 8000ec0:	f000 fb1d 	bl	80014fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000ec4:	200b      	movs	r0, #11
 8000ec6:	f000 fb34 	bl	8001532 <HAL_NVIC_EnableIRQ>

}
 8000eca:	bf00      	nop
 8000ecc:	3708      	adds	r7, #8
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	40021000 	.word	0x40021000

08000ed8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b08a      	sub	sp, #40	@ 0x28
 8000edc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ede:	f107 0314 	add.w	r3, r7, #20
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	601a      	str	r2, [r3, #0]
 8000ee6:	605a      	str	r2, [r3, #4]
 8000ee8:	609a      	str	r2, [r3, #8]
 8000eea:	60da      	str	r2, [r3, #12]
 8000eec:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eee:	4b25      	ldr	r3, [pc, #148]	@ (8000f84 <MX_GPIO_Init+0xac>)
 8000ef0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ef2:	4a24      	ldr	r2, [pc, #144]	@ (8000f84 <MX_GPIO_Init+0xac>)
 8000ef4:	f043 0304 	orr.w	r3, r3, #4
 8000ef8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000efa:	4b22      	ldr	r3, [pc, #136]	@ (8000f84 <MX_GPIO_Init+0xac>)
 8000efc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000efe:	f003 0304 	and.w	r3, r3, #4
 8000f02:	613b      	str	r3, [r7, #16]
 8000f04:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f06:	4b1f      	ldr	r3, [pc, #124]	@ (8000f84 <MX_GPIO_Init+0xac>)
 8000f08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f0a:	4a1e      	ldr	r2, [pc, #120]	@ (8000f84 <MX_GPIO_Init+0xac>)
 8000f0c:	f043 0320 	orr.w	r3, r3, #32
 8000f10:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f12:	4b1c      	ldr	r3, [pc, #112]	@ (8000f84 <MX_GPIO_Init+0xac>)
 8000f14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f16:	f003 0320 	and.w	r3, r3, #32
 8000f1a:	60fb      	str	r3, [r7, #12]
 8000f1c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f1e:	4b19      	ldr	r3, [pc, #100]	@ (8000f84 <MX_GPIO_Init+0xac>)
 8000f20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f22:	4a18      	ldr	r2, [pc, #96]	@ (8000f84 <MX_GPIO_Init+0xac>)
 8000f24:	f043 0301 	orr.w	r3, r3, #1
 8000f28:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f2a:	4b16      	ldr	r3, [pc, #88]	@ (8000f84 <MX_GPIO_Init+0xac>)
 8000f2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f2e:	f003 0301 	and.w	r3, r3, #1
 8000f32:	60bb      	str	r3, [r7, #8]
 8000f34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f36:	4b13      	ldr	r3, [pc, #76]	@ (8000f84 <MX_GPIO_Init+0xac>)
 8000f38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f3a:	4a12      	ldr	r2, [pc, #72]	@ (8000f84 <MX_GPIO_Init+0xac>)
 8000f3c:	f043 0302 	orr.w	r3, r3, #2
 8000f40:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f42:	4b10      	ldr	r3, [pc, #64]	@ (8000f84 <MX_GPIO_Init+0xac>)
 8000f44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f46:	f003 0302 	and.w	r3, r3, #2
 8000f4a:	607b      	str	r3, [r7, #4]
 8000f4c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000f4e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f54:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000f58:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000f5e:	f107 0314 	add.w	r3, r7, #20
 8000f62:	4619      	mov	r1, r3
 8000f64:	4808      	ldr	r0, [pc, #32]	@ (8000f88 <MX_GPIO_Init+0xb0>)
 8000f66:	f000 fe3d 	bl	8001be4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	2100      	movs	r1, #0
 8000f6e:	2028      	movs	r0, #40	@ 0x28
 8000f70:	f000 fac5 	bl	80014fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000f74:	2028      	movs	r0, #40	@ 0x28
 8000f76:	f000 fadc 	bl	8001532 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000f7a:	bf00      	nop
 8000f7c:	3728      	adds	r7, #40	@ 0x28
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	40021000 	.word	0x40021000
 8000f88:	48000800 	.word	0x48000800

08000f8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f90:	b672      	cpsid	i
}
 8000f92:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f94:	bf00      	nop
 8000f96:	e7fd      	b.n	8000f94 <Error_Handler+0x8>

08000f98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b082      	sub	sp, #8
 8000f9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f9e:	4b0f      	ldr	r3, [pc, #60]	@ (8000fdc <HAL_MspInit+0x44>)
 8000fa0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000fa2:	4a0e      	ldr	r2, [pc, #56]	@ (8000fdc <HAL_MspInit+0x44>)
 8000fa4:	f043 0301 	orr.w	r3, r3, #1
 8000fa8:	6613      	str	r3, [r2, #96]	@ 0x60
 8000faa:	4b0c      	ldr	r3, [pc, #48]	@ (8000fdc <HAL_MspInit+0x44>)
 8000fac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000fae:	f003 0301 	and.w	r3, r3, #1
 8000fb2:	607b      	str	r3, [r7, #4]
 8000fb4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fb6:	4b09      	ldr	r3, [pc, #36]	@ (8000fdc <HAL_MspInit+0x44>)
 8000fb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fba:	4a08      	ldr	r2, [pc, #32]	@ (8000fdc <HAL_MspInit+0x44>)
 8000fbc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000fc0:	6593      	str	r3, [r2, #88]	@ 0x58
 8000fc2:	4b06      	ldr	r3, [pc, #24]	@ (8000fdc <HAL_MspInit+0x44>)
 8000fc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fc6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fca:	603b      	str	r3, [r7, #0]
 8000fcc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000fce:	f001 f853 	bl	8002078 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fd2:	bf00      	nop
 8000fd4:	3708      	adds	r7, #8
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	40021000 	.word	0x40021000

08000fe0 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b084      	sub	sp, #16
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	4a0d      	ldr	r2, [pc, #52]	@ (8001024 <HAL_TIM_Base_MspInit+0x44>)
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d113      	bne.n	800101a <HAL_TIM_Base_MspInit+0x3a>
  {
    /* USER CODE BEGIN TIM16_MspInit 0 */

    /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000ff2:	4b0d      	ldr	r3, [pc, #52]	@ (8001028 <HAL_TIM_Base_MspInit+0x48>)
 8000ff4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ff6:	4a0c      	ldr	r2, [pc, #48]	@ (8001028 <HAL_TIM_Base_MspInit+0x48>)
 8000ff8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ffc:	6613      	str	r3, [r2, #96]	@ 0x60
 8000ffe:	4b0a      	ldr	r3, [pc, #40]	@ (8001028 <HAL_TIM_Base_MspInit+0x48>)
 8001000:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001002:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001006:	60fb      	str	r3, [r7, #12]
 8001008:	68fb      	ldr	r3, [r7, #12]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800100a:	2200      	movs	r2, #0
 800100c:	2100      	movs	r1, #0
 800100e:	2019      	movs	r0, #25
 8001010:	f000 fa75 	bl	80014fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001014:	2019      	movs	r0, #25
 8001016:	f000 fa8c 	bl	8001532 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM16_MspInit 1 */

  }

}
 800101a:	bf00      	nop
 800101c:	3710      	adds	r7, #16
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	40014400 	.word	0x40014400
 8001028:	40021000 	.word	0x40021000

0800102c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b09e      	sub	sp, #120	@ 0x78
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001034:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001038:	2200      	movs	r2, #0
 800103a:	601a      	str	r2, [r3, #0]
 800103c:	605a      	str	r2, [r3, #4]
 800103e:	609a      	str	r2, [r3, #8]
 8001040:	60da      	str	r2, [r3, #12]
 8001042:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001044:	f107 0310 	add.w	r3, r7, #16
 8001048:	2254      	movs	r2, #84	@ 0x54
 800104a:	2100      	movs	r1, #0
 800104c:	4618      	mov	r0, r3
 800104e:	f005 ff4b 	bl	8006ee8 <memset>
  if(huart->Instance==USART2)
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	4a37      	ldr	r2, [pc, #220]	@ (8001134 <HAL_UART_MspInit+0x108>)
 8001058:	4293      	cmp	r3, r2
 800105a:	d167      	bne.n	800112c <HAL_UART_MspInit+0x100>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800105c:	2302      	movs	r3, #2
 800105e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001060:	2300      	movs	r3, #0
 8001062:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001064:	f107 0310 	add.w	r3, r7, #16
 8001068:	4618      	mov	r0, r3
 800106a:	f001 fd43 	bl	8002af4 <HAL_RCCEx_PeriphCLKConfig>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	d001      	beq.n	8001078 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001074:	f7ff ff8a 	bl	8000f8c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001078:	4b2f      	ldr	r3, [pc, #188]	@ (8001138 <HAL_UART_MspInit+0x10c>)
 800107a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800107c:	4a2e      	ldr	r2, [pc, #184]	@ (8001138 <HAL_UART_MspInit+0x10c>)
 800107e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001082:	6593      	str	r3, [r2, #88]	@ 0x58
 8001084:	4b2c      	ldr	r3, [pc, #176]	@ (8001138 <HAL_UART_MspInit+0x10c>)
 8001086:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001088:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800108c:	60fb      	str	r3, [r7, #12]
 800108e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001090:	4b29      	ldr	r3, [pc, #164]	@ (8001138 <HAL_UART_MspInit+0x10c>)
 8001092:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001094:	4a28      	ldr	r2, [pc, #160]	@ (8001138 <HAL_UART_MspInit+0x10c>)
 8001096:	f043 0301 	orr.w	r3, r3, #1
 800109a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800109c:	4b26      	ldr	r3, [pc, #152]	@ (8001138 <HAL_UART_MspInit+0x10c>)
 800109e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010a0:	f003 0301 	and.w	r3, r3, #1
 80010a4:	60bb      	str	r3, [r7, #8]
 80010a6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80010a8:	230c      	movs	r3, #12
 80010aa:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ac:	2302      	movs	r3, #2
 80010ae:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b0:	2300      	movs	r3, #0
 80010b2:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b4:	2300      	movs	r3, #0
 80010b6:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80010b8:	2307      	movs	r3, #7
 80010ba:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010bc:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80010c0:	4619      	mov	r1, r3
 80010c2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010c6:	f000 fd8d 	bl	8001be4 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel1;
 80010ca:	4b1c      	ldr	r3, [pc, #112]	@ (800113c <HAL_UART_MspInit+0x110>)
 80010cc:	4a1c      	ldr	r2, [pc, #112]	@ (8001140 <HAL_UART_MspInit+0x114>)
 80010ce:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 80010d0:	4b1a      	ldr	r3, [pc, #104]	@ (800113c <HAL_UART_MspInit+0x110>)
 80010d2:	221b      	movs	r2, #27
 80010d4:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80010d6:	4b19      	ldr	r3, [pc, #100]	@ (800113c <HAL_UART_MspInit+0x110>)
 80010d8:	2210      	movs	r2, #16
 80010da:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80010dc:	4b17      	ldr	r3, [pc, #92]	@ (800113c <HAL_UART_MspInit+0x110>)
 80010de:	2200      	movs	r2, #0
 80010e0:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80010e2:	4b16      	ldr	r3, [pc, #88]	@ (800113c <HAL_UART_MspInit+0x110>)
 80010e4:	2280      	movs	r2, #128	@ 0x80
 80010e6:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80010e8:	4b14      	ldr	r3, [pc, #80]	@ (800113c <HAL_UART_MspInit+0x110>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80010ee:	4b13      	ldr	r3, [pc, #76]	@ (800113c <HAL_UART_MspInit+0x110>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80010f4:	4b11      	ldr	r3, [pc, #68]	@ (800113c <HAL_UART_MspInit+0x110>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80010fa:	4b10      	ldr	r3, [pc, #64]	@ (800113c <HAL_UART_MspInit+0x110>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001100:	480e      	ldr	r0, [pc, #56]	@ (800113c <HAL_UART_MspInit+0x110>)
 8001102:	f000 fa31 	bl	8001568 <HAL_DMA_Init>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d001      	beq.n	8001110 <HAL_UART_MspInit+0xe4>
    {
      Error_Handler();
 800110c:	f7ff ff3e 	bl	8000f8c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	4a0a      	ldr	r2, [pc, #40]	@ (800113c <HAL_UART_MspInit+0x110>)
 8001114:	67da      	str	r2, [r3, #124]	@ 0x7c
 8001116:	4a09      	ldr	r2, [pc, #36]	@ (800113c <HAL_UART_MspInit+0x110>)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800111c:	2200      	movs	r2, #0
 800111e:	2100      	movs	r1, #0
 8001120:	2026      	movs	r0, #38	@ 0x26
 8001122:	f000 f9ec 	bl	80014fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001126:	2026      	movs	r0, #38	@ 0x26
 8001128:	f000 fa03 	bl	8001532 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 800112c:	bf00      	nop
 800112e:	3778      	adds	r7, #120	@ 0x78
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}
 8001134:	40004400 	.word	0x40004400
 8001138:	40021000 	.word	0x40021000
 800113c:	200003c4 	.word	0x200003c4
 8001140:	40020008 	.word	0x40020008

08001144 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001148:	bf00      	nop
 800114a:	e7fd      	b.n	8001148 <NMI_Handler+0x4>

0800114c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001150:	bf00      	nop
 8001152:	e7fd      	b.n	8001150 <HardFault_Handler+0x4>

08001154 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001154:	b480      	push	{r7}
 8001156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001158:	bf00      	nop
 800115a:	e7fd      	b.n	8001158 <MemManage_Handler+0x4>

0800115c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001160:	bf00      	nop
 8001162:	e7fd      	b.n	8001160 <BusFault_Handler+0x4>

08001164 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001168:	bf00      	nop
 800116a:	e7fd      	b.n	8001168 <UsageFault_Handler+0x4>

0800116c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001170:	bf00      	nop
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr

0800117a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800117a:	b480      	push	{r7}
 800117c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800117e:	bf00      	nop
 8001180:	46bd      	mov	sp, r7
 8001182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001186:	4770      	bx	lr

08001188 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800118c:	bf00      	nop
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr

08001196 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001196:	b580      	push	{r7, lr}
 8001198:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800119a:	f000 f8b7 	bl	800130c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800119e:	bf00      	nop
 80011a0:	bd80      	pop	{r7, pc}
	...

080011a4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80011a8:	4802      	ldr	r0, [pc, #8]	@ (80011b4 <DMA1_Channel1_IRQHandler+0x10>)
 80011aa:	f000 fbc0 	bl	800192e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80011ae:	bf00      	nop
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	200003c4 	.word	0x200003c4

080011b8 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 80011bc:	4802      	ldr	r0, [pc, #8]	@ (80011c8 <TIM1_UP_TIM16_IRQHandler+0x10>)
 80011be:	f002 f927 	bl	8003410 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80011c2:	bf00      	nop
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	2000022c 	.word	0x2000022c

080011cc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80011d0:	4802      	ldr	r0, [pc, #8]	@ (80011dc <USART2_IRQHandler+0x10>)
 80011d2:	f003 fccf 	bl	8004b74 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80011d6:	bf00      	nop
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	200002f8 	.word	0x200002f8

080011e0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80011e4:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80011e8:	f000 fe7e 	bl	8001ee8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80011ec:	bf00      	nop
 80011ee:	bd80      	pop	{r7, pc}

080011f0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80011f4:	4b06      	ldr	r3, [pc, #24]	@ (8001210 <SystemInit+0x20>)
 80011f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80011fa:	4a05      	ldr	r2, [pc, #20]	@ (8001210 <SystemInit+0x20>)
 80011fc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001200:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001204:	bf00      	nop
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr
 800120e:	bf00      	nop
 8001210:	e000ed00 	.word	0xe000ed00

08001214 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001214:	480d      	ldr	r0, [pc, #52]	@ (800124c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001216:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001218:	f7ff ffea 	bl	80011f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800121c:	480c      	ldr	r0, [pc, #48]	@ (8001250 <LoopForever+0x6>)
  ldr r1, =_edata
 800121e:	490d      	ldr	r1, [pc, #52]	@ (8001254 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001220:	4a0d      	ldr	r2, [pc, #52]	@ (8001258 <LoopForever+0xe>)
  movs r3, #0
 8001222:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001224:	e002      	b.n	800122c <LoopCopyDataInit>

08001226 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001226:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001228:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800122a:	3304      	adds	r3, #4

0800122c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800122c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800122e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001230:	d3f9      	bcc.n	8001226 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001232:	4a0a      	ldr	r2, [pc, #40]	@ (800125c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001234:	4c0a      	ldr	r4, [pc, #40]	@ (8001260 <LoopForever+0x16>)
  movs r3, #0
 8001236:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001238:	e001      	b.n	800123e <LoopFillZerobss>

0800123a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800123a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800123c:	3204      	adds	r2, #4

0800123e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800123e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001240:	d3fb      	bcc.n	800123a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001242:	f005 fe59 	bl	8006ef8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001246:	f7ff fcd1 	bl	8000bec <main>

0800124a <LoopForever>:

LoopForever:
    b LoopForever
 800124a:	e7fe      	b.n	800124a <LoopForever>
  ldr   r0, =_estack
 800124c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001250:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001254:	2000020c 	.word	0x2000020c
  ldr r2, =_sidata
 8001258:	08006fc4 	.word	0x08006fc4
  ldr r2, =_sbss
 800125c:	2000020c 	.word	0x2000020c
  ldr r4, =_ebss
 8001260:	20000a90 	.word	0x20000a90

08001264 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001264:	e7fe      	b.n	8001264 <ADC1_2_IRQHandler>

08001266 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001266:	b580      	push	{r7, lr}
 8001268:	b082      	sub	sp, #8
 800126a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800126c:	2300      	movs	r3, #0
 800126e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001270:	2003      	movs	r0, #3
 8001272:	f000 f939 	bl	80014e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001276:	2000      	movs	r0, #0
 8001278:	f000 f80e 	bl	8001298 <HAL_InitTick>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d002      	beq.n	8001288 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001282:	2301      	movs	r3, #1
 8001284:	71fb      	strb	r3, [r7, #7]
 8001286:	e001      	b.n	800128c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001288:	f7ff fe86 	bl	8000f98 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800128c:	79fb      	ldrb	r3, [r7, #7]

}
 800128e:	4618      	mov	r0, r3
 8001290:	3708      	adds	r7, #8
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
	...

08001298 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b084      	sub	sp, #16
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80012a0:	2300      	movs	r3, #0
 80012a2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80012a4:	4b16      	ldr	r3, [pc, #88]	@ (8001300 <HAL_InitTick+0x68>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d022      	beq.n	80012f2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80012ac:	4b15      	ldr	r3, [pc, #84]	@ (8001304 <HAL_InitTick+0x6c>)
 80012ae:	681a      	ldr	r2, [r3, #0]
 80012b0:	4b13      	ldr	r3, [pc, #76]	@ (8001300 <HAL_InitTick+0x68>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80012b8:	fbb1 f3f3 	udiv	r3, r1, r3
 80012bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80012c0:	4618      	mov	r0, r3
 80012c2:	f000 f944 	bl	800154e <HAL_SYSTICK_Config>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d10f      	bne.n	80012ec <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	2b0f      	cmp	r3, #15
 80012d0:	d809      	bhi.n	80012e6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012d2:	2200      	movs	r2, #0
 80012d4:	6879      	ldr	r1, [r7, #4]
 80012d6:	f04f 30ff 	mov.w	r0, #4294967295
 80012da:	f000 f910 	bl	80014fe <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80012de:	4a0a      	ldr	r2, [pc, #40]	@ (8001308 <HAL_InitTick+0x70>)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	6013      	str	r3, [r2, #0]
 80012e4:	e007      	b.n	80012f6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80012e6:	2301      	movs	r3, #1
 80012e8:	73fb      	strb	r3, [r7, #15]
 80012ea:	e004      	b.n	80012f6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80012ec:	2301      	movs	r3, #1
 80012ee:	73fb      	strb	r3, [r7, #15]
 80012f0:	e001      	b.n	80012f6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80012f2:	2301      	movs	r3, #1
 80012f4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80012f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80012f8:	4618      	mov	r0, r3
 80012fa:	3710      	adds	r7, #16
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	20000208 	.word	0x20000208
 8001304:	20000200 	.word	0x20000200
 8001308:	20000204 	.word	0x20000204

0800130c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800130c:	b480      	push	{r7}
 800130e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001310:	4b05      	ldr	r3, [pc, #20]	@ (8001328 <HAL_IncTick+0x1c>)
 8001312:	681a      	ldr	r2, [r3, #0]
 8001314:	4b05      	ldr	r3, [pc, #20]	@ (800132c <HAL_IncTick+0x20>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4413      	add	r3, r2
 800131a:	4a03      	ldr	r2, [pc, #12]	@ (8001328 <HAL_IncTick+0x1c>)
 800131c:	6013      	str	r3, [r2, #0]
}
 800131e:	bf00      	nop
 8001320:	46bd      	mov	sp, r7
 8001322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001326:	4770      	bx	lr
 8001328:	20000a8c 	.word	0x20000a8c
 800132c:	20000208 	.word	0x20000208

08001330 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001330:	b480      	push	{r7}
 8001332:	af00      	add	r7, sp, #0
  return uwTick;
 8001334:	4b03      	ldr	r3, [pc, #12]	@ (8001344 <HAL_GetTick+0x14>)
 8001336:	681b      	ldr	r3, [r3, #0]
}
 8001338:	4618      	mov	r0, r3
 800133a:	46bd      	mov	sp, r7
 800133c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001340:	4770      	bx	lr
 8001342:	bf00      	nop
 8001344:	20000a8c 	.word	0x20000a8c

08001348 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001348:	b480      	push	{r7}
 800134a:	b085      	sub	sp, #20
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	f003 0307 	and.w	r3, r3, #7
 8001356:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001358:	4b0c      	ldr	r3, [pc, #48]	@ (800138c <__NVIC_SetPriorityGrouping+0x44>)
 800135a:	68db      	ldr	r3, [r3, #12]
 800135c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800135e:	68ba      	ldr	r2, [r7, #8]
 8001360:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001364:	4013      	ands	r3, r2
 8001366:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800136c:	68bb      	ldr	r3, [r7, #8]
 800136e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001370:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001374:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001378:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800137a:	4a04      	ldr	r2, [pc, #16]	@ (800138c <__NVIC_SetPriorityGrouping+0x44>)
 800137c:	68bb      	ldr	r3, [r7, #8]
 800137e:	60d3      	str	r3, [r2, #12]
}
 8001380:	bf00      	nop
 8001382:	3714      	adds	r7, #20
 8001384:	46bd      	mov	sp, r7
 8001386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138a:	4770      	bx	lr
 800138c:	e000ed00 	.word	0xe000ed00

08001390 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001394:	4b04      	ldr	r3, [pc, #16]	@ (80013a8 <__NVIC_GetPriorityGrouping+0x18>)
 8001396:	68db      	ldr	r3, [r3, #12]
 8001398:	0a1b      	lsrs	r3, r3, #8
 800139a:	f003 0307 	and.w	r3, r3, #7
}
 800139e:	4618      	mov	r0, r3
 80013a0:	46bd      	mov	sp, r7
 80013a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a6:	4770      	bx	lr
 80013a8:	e000ed00 	.word	0xe000ed00

080013ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b083      	sub	sp, #12
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	4603      	mov	r3, r0
 80013b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	db0b      	blt.n	80013d6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013be:	79fb      	ldrb	r3, [r7, #7]
 80013c0:	f003 021f 	and.w	r2, r3, #31
 80013c4:	4907      	ldr	r1, [pc, #28]	@ (80013e4 <__NVIC_EnableIRQ+0x38>)
 80013c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ca:	095b      	lsrs	r3, r3, #5
 80013cc:	2001      	movs	r0, #1
 80013ce:	fa00 f202 	lsl.w	r2, r0, r2
 80013d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80013d6:	bf00      	nop
 80013d8:	370c      	adds	r7, #12
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr
 80013e2:	bf00      	nop
 80013e4:	e000e100 	.word	0xe000e100

080013e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b083      	sub	sp, #12
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	4603      	mov	r3, r0
 80013f0:	6039      	str	r1, [r7, #0]
 80013f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	db0a      	blt.n	8001412 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	b2da      	uxtb	r2, r3
 8001400:	490c      	ldr	r1, [pc, #48]	@ (8001434 <__NVIC_SetPriority+0x4c>)
 8001402:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001406:	0112      	lsls	r2, r2, #4
 8001408:	b2d2      	uxtb	r2, r2
 800140a:	440b      	add	r3, r1
 800140c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001410:	e00a      	b.n	8001428 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	b2da      	uxtb	r2, r3
 8001416:	4908      	ldr	r1, [pc, #32]	@ (8001438 <__NVIC_SetPriority+0x50>)
 8001418:	79fb      	ldrb	r3, [r7, #7]
 800141a:	f003 030f 	and.w	r3, r3, #15
 800141e:	3b04      	subs	r3, #4
 8001420:	0112      	lsls	r2, r2, #4
 8001422:	b2d2      	uxtb	r2, r2
 8001424:	440b      	add	r3, r1
 8001426:	761a      	strb	r2, [r3, #24]
}
 8001428:	bf00      	nop
 800142a:	370c      	adds	r7, #12
 800142c:	46bd      	mov	sp, r7
 800142e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001432:	4770      	bx	lr
 8001434:	e000e100 	.word	0xe000e100
 8001438:	e000ed00 	.word	0xe000ed00

0800143c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800143c:	b480      	push	{r7}
 800143e:	b089      	sub	sp, #36	@ 0x24
 8001440:	af00      	add	r7, sp, #0
 8001442:	60f8      	str	r0, [r7, #12]
 8001444:	60b9      	str	r1, [r7, #8]
 8001446:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	f003 0307 	and.w	r3, r3, #7
 800144e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001450:	69fb      	ldr	r3, [r7, #28]
 8001452:	f1c3 0307 	rsb	r3, r3, #7
 8001456:	2b04      	cmp	r3, #4
 8001458:	bf28      	it	cs
 800145a:	2304      	movcs	r3, #4
 800145c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800145e:	69fb      	ldr	r3, [r7, #28]
 8001460:	3304      	adds	r3, #4
 8001462:	2b06      	cmp	r3, #6
 8001464:	d902      	bls.n	800146c <NVIC_EncodePriority+0x30>
 8001466:	69fb      	ldr	r3, [r7, #28]
 8001468:	3b03      	subs	r3, #3
 800146a:	e000      	b.n	800146e <NVIC_EncodePriority+0x32>
 800146c:	2300      	movs	r3, #0
 800146e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001470:	f04f 32ff 	mov.w	r2, #4294967295
 8001474:	69bb      	ldr	r3, [r7, #24]
 8001476:	fa02 f303 	lsl.w	r3, r2, r3
 800147a:	43da      	mvns	r2, r3
 800147c:	68bb      	ldr	r3, [r7, #8]
 800147e:	401a      	ands	r2, r3
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001484:	f04f 31ff 	mov.w	r1, #4294967295
 8001488:	697b      	ldr	r3, [r7, #20]
 800148a:	fa01 f303 	lsl.w	r3, r1, r3
 800148e:	43d9      	mvns	r1, r3
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001494:	4313      	orrs	r3, r2
         );
}
 8001496:	4618      	mov	r0, r3
 8001498:	3724      	adds	r7, #36	@ 0x24
 800149a:	46bd      	mov	sp, r7
 800149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a0:	4770      	bx	lr
	...

080014a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	3b01      	subs	r3, #1
 80014b0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80014b4:	d301      	bcc.n	80014ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014b6:	2301      	movs	r3, #1
 80014b8:	e00f      	b.n	80014da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014ba:	4a0a      	ldr	r2, [pc, #40]	@ (80014e4 <SysTick_Config+0x40>)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	3b01      	subs	r3, #1
 80014c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014c2:	210f      	movs	r1, #15
 80014c4:	f04f 30ff 	mov.w	r0, #4294967295
 80014c8:	f7ff ff8e 	bl	80013e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014cc:	4b05      	ldr	r3, [pc, #20]	@ (80014e4 <SysTick_Config+0x40>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014d2:	4b04      	ldr	r3, [pc, #16]	@ (80014e4 <SysTick_Config+0x40>)
 80014d4:	2207      	movs	r2, #7
 80014d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014d8:	2300      	movs	r3, #0
}
 80014da:	4618      	mov	r0, r3
 80014dc:	3708      	adds	r7, #8
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	e000e010 	.word	0xe000e010

080014e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b082      	sub	sp, #8
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014f0:	6878      	ldr	r0, [r7, #4]
 80014f2:	f7ff ff29 	bl	8001348 <__NVIC_SetPriorityGrouping>
}
 80014f6:	bf00      	nop
 80014f8:	3708      	adds	r7, #8
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}

080014fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014fe:	b580      	push	{r7, lr}
 8001500:	b086      	sub	sp, #24
 8001502:	af00      	add	r7, sp, #0
 8001504:	4603      	mov	r3, r0
 8001506:	60b9      	str	r1, [r7, #8]
 8001508:	607a      	str	r2, [r7, #4]
 800150a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800150c:	f7ff ff40 	bl	8001390 <__NVIC_GetPriorityGrouping>
 8001510:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001512:	687a      	ldr	r2, [r7, #4]
 8001514:	68b9      	ldr	r1, [r7, #8]
 8001516:	6978      	ldr	r0, [r7, #20]
 8001518:	f7ff ff90 	bl	800143c <NVIC_EncodePriority>
 800151c:	4602      	mov	r2, r0
 800151e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001522:	4611      	mov	r1, r2
 8001524:	4618      	mov	r0, r3
 8001526:	f7ff ff5f 	bl	80013e8 <__NVIC_SetPriority>
}
 800152a:	bf00      	nop
 800152c:	3718      	adds	r7, #24
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}

08001532 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001532:	b580      	push	{r7, lr}
 8001534:	b082      	sub	sp, #8
 8001536:	af00      	add	r7, sp, #0
 8001538:	4603      	mov	r3, r0
 800153a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800153c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001540:	4618      	mov	r0, r3
 8001542:	f7ff ff33 	bl	80013ac <__NVIC_EnableIRQ>
}
 8001546:	bf00      	nop
 8001548:	3708      	adds	r7, #8
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}

0800154e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800154e:	b580      	push	{r7, lr}
 8001550:	b082      	sub	sp, #8
 8001552:	af00      	add	r7, sp, #0
 8001554:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001556:	6878      	ldr	r0, [r7, #4]
 8001558:	f7ff ffa4 	bl	80014a4 <SysTick_Config>
 800155c:	4603      	mov	r3, r0
}
 800155e:	4618      	mov	r0, r3
 8001560:	3708      	adds	r7, #8
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
	...

08001568 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b084      	sub	sp, #16
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d101      	bne.n	800157a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001576:	2301      	movs	r3, #1
 8001578:	e08d      	b.n	8001696 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	461a      	mov	r2, r3
 8001580:	4b47      	ldr	r3, [pc, #284]	@ (80016a0 <HAL_DMA_Init+0x138>)
 8001582:	429a      	cmp	r2, r3
 8001584:	d80f      	bhi.n	80015a6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	461a      	mov	r2, r3
 800158c:	4b45      	ldr	r3, [pc, #276]	@ (80016a4 <HAL_DMA_Init+0x13c>)
 800158e:	4413      	add	r3, r2
 8001590:	4a45      	ldr	r2, [pc, #276]	@ (80016a8 <HAL_DMA_Init+0x140>)
 8001592:	fba2 2303 	umull	r2, r3, r2, r3
 8001596:	091b      	lsrs	r3, r3, #4
 8001598:	009a      	lsls	r2, r3, #2
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	4a42      	ldr	r2, [pc, #264]	@ (80016ac <HAL_DMA_Init+0x144>)
 80015a2:	641a      	str	r2, [r3, #64]	@ 0x40
 80015a4:	e00e      	b.n	80015c4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	461a      	mov	r2, r3
 80015ac:	4b40      	ldr	r3, [pc, #256]	@ (80016b0 <HAL_DMA_Init+0x148>)
 80015ae:	4413      	add	r3, r2
 80015b0:	4a3d      	ldr	r2, [pc, #244]	@ (80016a8 <HAL_DMA_Init+0x140>)
 80015b2:	fba2 2303 	umull	r2, r3, r2, r3
 80015b6:	091b      	lsrs	r3, r3, #4
 80015b8:	009a      	lsls	r2, r3, #2
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	4a3c      	ldr	r2, [pc, #240]	@ (80016b4 <HAL_DMA_Init+0x14c>)
 80015c2:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2202      	movs	r2, #2
 80015c8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80015da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80015de:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80015e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	691b      	ldr	r3, [r3, #16]
 80015ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	699b      	ldr	r3, [r3, #24]
 80015fa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001600:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6a1b      	ldr	r3, [r3, #32]
 8001606:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001608:	68fa      	ldr	r2, [r7, #12]
 800160a:	4313      	orrs	r3, r2
 800160c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	68fa      	ldr	r2, [r7, #12]
 8001614:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001616:	6878      	ldr	r0, [r7, #4]
 8001618:	f000 fa82 	bl	8001b20 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	689b      	ldr	r3, [r3, #8]
 8001620:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001624:	d102      	bne.n	800162c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	2200      	movs	r2, #0
 800162a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	685a      	ldr	r2, [r3, #4]
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001634:	b2d2      	uxtb	r2, r2
 8001636:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800163c:	687a      	ldr	r2, [r7, #4]
 800163e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001640:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d010      	beq.n	800166c <HAL_DMA_Init+0x104>
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	2b04      	cmp	r3, #4
 8001650:	d80c      	bhi.n	800166c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001652:	6878      	ldr	r0, [r7, #4]
 8001654:	f000 faa2 	bl	8001b9c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800165c:	2200      	movs	r2, #0
 800165e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001664:	687a      	ldr	r2, [r7, #4]
 8001666:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001668:	605a      	str	r2, [r3, #4]
 800166a:	e008      	b.n	800167e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2200      	movs	r2, #0
 8001670:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	2200      	movs	r2, #0
 8001676:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2200      	movs	r2, #0
 800167c:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2200      	movs	r2, #0
 8001682:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2201      	movs	r2, #1
 8001688:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2200      	movs	r2, #0
 8001690:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8001694:	2300      	movs	r3, #0
}
 8001696:	4618      	mov	r0, r3
 8001698:	3710      	adds	r7, #16
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	40020407 	.word	0x40020407
 80016a4:	bffdfff8 	.word	0xbffdfff8
 80016a8:	cccccccd 	.word	0xcccccccd
 80016ac:	40020000 	.word	0x40020000
 80016b0:	bffdfbf8 	.word	0xbffdfbf8
 80016b4:	40020400 	.word	0x40020400

080016b8 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b086      	sub	sp, #24
 80016bc:	af00      	add	r7, sp, #0
 80016be:	60f8      	str	r0, [r7, #12]
 80016c0:	60b9      	str	r1, [r7, #8]
 80016c2:	607a      	str	r2, [r7, #4]
 80016c4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80016c6:	2300      	movs	r3, #0
 80016c8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80016d0:	2b01      	cmp	r3, #1
 80016d2:	d101      	bne.n	80016d8 <HAL_DMA_Start_IT+0x20>
 80016d4:	2302      	movs	r3, #2
 80016d6:	e066      	b.n	80017a6 <HAL_DMA_Start_IT+0xee>
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	2201      	movs	r2, #1
 80016dc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80016e6:	b2db      	uxtb	r3, r3
 80016e8:	2b01      	cmp	r3, #1
 80016ea:	d155      	bne.n	8001798 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	2202      	movs	r2, #2
 80016f0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	2200      	movs	r2, #0
 80016f8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	681a      	ldr	r2, [r3, #0]
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f022 0201 	bic.w	r2, r2, #1
 8001708:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	687a      	ldr	r2, [r7, #4]
 800170e:	68b9      	ldr	r1, [r7, #8]
 8001710:	68f8      	ldr	r0, [r7, #12]
 8001712:	f000 f9c7 	bl	8001aa4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800171a:	2b00      	cmp	r3, #0
 800171c:	d008      	beq.n	8001730 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	681a      	ldr	r2, [r3, #0]
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f042 020e 	orr.w	r2, r2, #14
 800172c:	601a      	str	r2, [r3, #0]
 800172e:	e00f      	b.n	8001750 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	681a      	ldr	r2, [r3, #0]
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f022 0204 	bic.w	r2, r2, #4
 800173e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	681a      	ldr	r2, [r3, #0]
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f042 020a 	orr.w	r2, r2, #10
 800174e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800175a:	2b00      	cmp	r3, #0
 800175c:	d007      	beq.n	800176e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001762:	681a      	ldr	r2, [r3, #0]
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001768:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800176c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001772:	2b00      	cmp	r3, #0
 8001774:	d007      	beq.n	8001786 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800177a:	681a      	ldr	r2, [r3, #0]
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001780:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001784:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	681a      	ldr	r2, [r3, #0]
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f042 0201 	orr.w	r2, r2, #1
 8001794:	601a      	str	r2, [r3, #0]
 8001796:	e005      	b.n	80017a4 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	2200      	movs	r2, #0
 800179c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80017a0:	2302      	movs	r3, #2
 80017a2:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80017a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80017a6:	4618      	mov	r0, r3
 80017a8:	3718      	adds	r7, #24
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}

080017ae <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80017ae:	b480      	push	{r7}
 80017b0:	b085      	sub	sp, #20
 80017b2:	af00      	add	r7, sp, #0
 80017b4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80017b6:	2300      	movs	r3, #0
 80017b8:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80017c0:	b2db      	uxtb	r3, r3
 80017c2:	2b02      	cmp	r3, #2
 80017c4:	d005      	beq.n	80017d2 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	2204      	movs	r2, #4
 80017ca:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80017cc:	2301      	movs	r3, #1
 80017ce:	73fb      	strb	r3, [r7, #15]
 80017d0:	e037      	b.n	8001842 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	681a      	ldr	r2, [r3, #0]
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f022 020e 	bic.w	r2, r2, #14
 80017e0:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80017e6:	681a      	ldr	r2, [r3, #0]
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80017ec:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80017f0:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	681a      	ldr	r2, [r3, #0]
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f022 0201 	bic.w	r2, r2, #1
 8001800:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001806:	f003 021f 	and.w	r2, r3, #31
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800180e:	2101      	movs	r1, #1
 8001810:	fa01 f202 	lsl.w	r2, r1, r2
 8001814:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800181a:	687a      	ldr	r2, [r7, #4]
 800181c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800181e:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001824:	2b00      	cmp	r3, #0
 8001826:	d00c      	beq.n	8001842 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800182c:	681a      	ldr	r2, [r3, #0]
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001832:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001836:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800183c:	687a      	ldr	r2, [r7, #4]
 800183e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001840:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	2201      	movs	r2, #1
 8001846:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2200      	movs	r2, #0
 800184e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8001852:	7bfb      	ldrb	r3, [r7, #15]
}
 8001854:	4618      	mov	r0, r3
 8001856:	3714      	adds	r7, #20
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr

08001860 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b084      	sub	sp, #16
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001868:	2300      	movs	r3, #0
 800186a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001872:	b2db      	uxtb	r3, r3
 8001874:	2b02      	cmp	r3, #2
 8001876:	d00d      	beq.n	8001894 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2204      	movs	r2, #4
 800187c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	2201      	movs	r2, #1
 8001882:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2200      	movs	r2, #0
 800188a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 800188e:	2301      	movs	r3, #1
 8001890:	73fb      	strb	r3, [r7, #15]
 8001892:	e047      	b.n	8001924 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	681a      	ldr	r2, [r3, #0]
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f022 020e 	bic.w	r2, r2, #14
 80018a2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	681a      	ldr	r2, [r3, #0]
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f022 0201 	bic.w	r2, r2, #1
 80018b2:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80018b8:	681a      	ldr	r2, [r3, #0]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80018be:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80018c2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018c8:	f003 021f 	and.w	r2, r3, #31
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018d0:	2101      	movs	r1, #1
 80018d2:	fa01 f202 	lsl.w	r2, r1, r2
 80018d6:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018dc:	687a      	ldr	r2, [r7, #4]
 80018de:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80018e0:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d00c      	beq.n	8001904 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018ee:	681a      	ldr	r2, [r3, #0]
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018f4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80018f8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018fe:	687a      	ldr	r2, [r7, #4]
 8001900:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001902:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2201      	movs	r2, #1
 8001908:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2200      	movs	r2, #0
 8001910:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001918:	2b00      	cmp	r3, #0
 800191a:	d003      	beq.n	8001924 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001920:	6878      	ldr	r0, [r7, #4]
 8001922:	4798      	blx	r3
    }
  }
  return status;
 8001924:	7bfb      	ldrb	r3, [r7, #15]
}
 8001926:	4618      	mov	r0, r3
 8001928:	3710      	adds	r7, #16
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}

0800192e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800192e:	b580      	push	{r7, lr}
 8001930:	b084      	sub	sp, #16
 8001932:	af00      	add	r7, sp, #0
 8001934:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800194a:	f003 031f 	and.w	r3, r3, #31
 800194e:	2204      	movs	r2, #4
 8001950:	409a      	lsls	r2, r3
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	4013      	ands	r3, r2
 8001956:	2b00      	cmp	r3, #0
 8001958:	d026      	beq.n	80019a8 <HAL_DMA_IRQHandler+0x7a>
 800195a:	68bb      	ldr	r3, [r7, #8]
 800195c:	f003 0304 	and.w	r3, r3, #4
 8001960:	2b00      	cmp	r3, #0
 8001962:	d021      	beq.n	80019a8 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f003 0320 	and.w	r3, r3, #32
 800196e:	2b00      	cmp	r3, #0
 8001970:	d107      	bne.n	8001982 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	681a      	ldr	r2, [r3, #0]
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f022 0204 	bic.w	r2, r2, #4
 8001980:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001986:	f003 021f 	and.w	r2, r3, #31
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800198e:	2104      	movs	r1, #4
 8001990:	fa01 f202 	lsl.w	r2, r1, r2
 8001994:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800199a:	2b00      	cmp	r3, #0
 800199c:	d071      	beq.n	8001a82 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019a2:	6878      	ldr	r0, [r7, #4]
 80019a4:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80019a6:	e06c      	b.n	8001a82 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019ac:	f003 031f 	and.w	r3, r3, #31
 80019b0:	2202      	movs	r2, #2
 80019b2:	409a      	lsls	r2, r3
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	4013      	ands	r3, r2
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d02e      	beq.n	8001a1a <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80019bc:	68bb      	ldr	r3, [r7, #8]
 80019be:	f003 0302 	and.w	r3, r3, #2
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d029      	beq.n	8001a1a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f003 0320 	and.w	r3, r3, #32
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d10b      	bne.n	80019ec <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	681a      	ldr	r2, [r3, #0]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f022 020a 	bic.w	r2, r2, #10
 80019e2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2201      	movs	r2, #1
 80019e8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019f0:	f003 021f 	and.w	r2, r3, #31
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019f8:	2102      	movs	r1, #2
 80019fa:	fa01 f202 	lsl.w	r2, r1, r2
 80019fe:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2200      	movs	r2, #0
 8001a04:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d038      	beq.n	8001a82 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a14:	6878      	ldr	r0, [r7, #4]
 8001a16:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001a18:	e033      	b.n	8001a82 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a1e:	f003 031f 	and.w	r3, r3, #31
 8001a22:	2208      	movs	r2, #8
 8001a24:	409a      	lsls	r2, r3
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	4013      	ands	r3, r2
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d02a      	beq.n	8001a84 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8001a2e:	68bb      	ldr	r3, [r7, #8]
 8001a30:	f003 0308 	and.w	r3, r3, #8
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d025      	beq.n	8001a84 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	681a      	ldr	r2, [r3, #0]
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f022 020e 	bic.w	r2, r2, #14
 8001a46:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a4c:	f003 021f 	and.w	r2, r3, #31
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a54:	2101      	movs	r1, #1
 8001a56:	fa01 f202 	lsl.w	r2, r1, r2
 8001a5a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2201      	movs	r2, #1
 8001a60:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2201      	movs	r2, #1
 8001a66:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d004      	beq.n	8001a84 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a7e:	6878      	ldr	r0, [r7, #4]
 8001a80:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001a82:	bf00      	nop
 8001a84:	bf00      	nop
}
 8001a86:	3710      	adds	r7, #16
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}

08001a8c <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b083      	sub	sp, #12
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	370c      	adds	r7, #12
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa2:	4770      	bx	lr

08001aa4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b085      	sub	sp, #20
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	60f8      	str	r0, [r7, #12]
 8001aac:	60b9      	str	r1, [r7, #8]
 8001aae:	607a      	str	r2, [r7, #4]
 8001ab0:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ab6:	68fa      	ldr	r2, [r7, #12]
 8001ab8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001aba:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d004      	beq.n	8001ace <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ac8:	68fa      	ldr	r2, [r7, #12]
 8001aca:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001acc:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ad2:	f003 021f 	and.w	r2, r3, #31
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ada:	2101      	movs	r1, #1
 8001adc:	fa01 f202 	lsl.w	r2, r1, r2
 8001ae0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	683a      	ldr	r2, [r7, #0]
 8001ae8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	689b      	ldr	r3, [r3, #8]
 8001aee:	2b10      	cmp	r3, #16
 8001af0:	d108      	bne.n	8001b04 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	687a      	ldr	r2, [r7, #4]
 8001af8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	68ba      	ldr	r2, [r7, #8]
 8001b00:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001b02:	e007      	b.n	8001b14 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	68ba      	ldr	r2, [r7, #8]
 8001b0a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	687a      	ldr	r2, [r7, #4]
 8001b12:	60da      	str	r2, [r3, #12]
}
 8001b14:	bf00      	nop
 8001b16:	3714      	adds	r7, #20
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1e:	4770      	bx	lr

08001b20 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b087      	sub	sp, #28
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	461a      	mov	r2, r3
 8001b2e:	4b16      	ldr	r3, [pc, #88]	@ (8001b88 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8001b30:	429a      	cmp	r2, r3
 8001b32:	d802      	bhi.n	8001b3a <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8001b34:	4b15      	ldr	r3, [pc, #84]	@ (8001b8c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8001b36:	617b      	str	r3, [r7, #20]
 8001b38:	e001      	b.n	8001b3e <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8001b3a:	4b15      	ldr	r3, [pc, #84]	@ (8001b90 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8001b3c:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8001b3e:	697b      	ldr	r3, [r7, #20]
 8001b40:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	b2db      	uxtb	r3, r3
 8001b48:	3b08      	subs	r3, #8
 8001b4a:	4a12      	ldr	r2, [pc, #72]	@ (8001b94 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8001b4c:	fba2 2303 	umull	r2, r3, r2, r3
 8001b50:	091b      	lsrs	r3, r3, #4
 8001b52:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b58:	089b      	lsrs	r3, r3, #2
 8001b5a:	009a      	lsls	r2, r3, #2
 8001b5c:	693b      	ldr	r3, [r7, #16]
 8001b5e:	4413      	add	r3, r2
 8001b60:	461a      	mov	r2, r3
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	4a0b      	ldr	r2, [pc, #44]	@ (8001b98 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8001b6a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	f003 031f 	and.w	r3, r3, #31
 8001b72:	2201      	movs	r2, #1
 8001b74:	409a      	lsls	r2, r3
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8001b7a:	bf00      	nop
 8001b7c:	371c      	adds	r7, #28
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b84:	4770      	bx	lr
 8001b86:	bf00      	nop
 8001b88:	40020407 	.word	0x40020407
 8001b8c:	40020800 	.word	0x40020800
 8001b90:	40020820 	.word	0x40020820
 8001b94:	cccccccd 	.word	0xcccccccd
 8001b98:	40020880 	.word	0x40020880

08001b9c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b085      	sub	sp, #20
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	b2db      	uxtb	r3, r3
 8001baa:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001bac:	68fa      	ldr	r2, [r7, #12]
 8001bae:	4b0b      	ldr	r3, [pc, #44]	@ (8001bdc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001bb0:	4413      	add	r3, r2
 8001bb2:	009b      	lsls	r3, r3, #2
 8001bb4:	461a      	mov	r2, r3
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	4a08      	ldr	r2, [pc, #32]	@ (8001be0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001bbe:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	3b01      	subs	r3, #1
 8001bc4:	f003 031f 	and.w	r3, r3, #31
 8001bc8:	2201      	movs	r2, #1
 8001bca:	409a      	lsls	r2, r3
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8001bd0:	bf00      	nop
 8001bd2:	3714      	adds	r7, #20
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bda:	4770      	bx	lr
 8001bdc:	1000823f 	.word	0x1000823f
 8001be0:	40020940 	.word	0x40020940

08001be4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b087      	sub	sp, #28
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
 8001bec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001bf2:	e15a      	b.n	8001eaa <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	681a      	ldr	r2, [r3, #0]
 8001bf8:	2101      	movs	r1, #1
 8001bfa:	697b      	ldr	r3, [r7, #20]
 8001bfc:	fa01 f303 	lsl.w	r3, r1, r3
 8001c00:	4013      	ands	r3, r2
 8001c02:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	f000 814c 	beq.w	8001ea4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	f003 0303 	and.w	r3, r3, #3
 8001c14:	2b01      	cmp	r3, #1
 8001c16:	d005      	beq.n	8001c24 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001c20:	2b02      	cmp	r3, #2
 8001c22:	d130      	bne.n	8001c86 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	689b      	ldr	r3, [r3, #8]
 8001c28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001c2a:	697b      	ldr	r3, [r7, #20]
 8001c2c:	005b      	lsls	r3, r3, #1
 8001c2e:	2203      	movs	r2, #3
 8001c30:	fa02 f303 	lsl.w	r3, r2, r3
 8001c34:	43db      	mvns	r3, r3
 8001c36:	693a      	ldr	r2, [r7, #16]
 8001c38:	4013      	ands	r3, r2
 8001c3a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	68da      	ldr	r2, [r3, #12]
 8001c40:	697b      	ldr	r3, [r7, #20]
 8001c42:	005b      	lsls	r3, r3, #1
 8001c44:	fa02 f303 	lsl.w	r3, r2, r3
 8001c48:	693a      	ldr	r2, [r7, #16]
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	693a      	ldr	r2, [r7, #16]
 8001c52:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c62:	43db      	mvns	r3, r3
 8001c64:	693a      	ldr	r2, [r7, #16]
 8001c66:	4013      	ands	r3, r2
 8001c68:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	091b      	lsrs	r3, r3, #4
 8001c70:	f003 0201 	and.w	r2, r3, #1
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7a:	693a      	ldr	r2, [r7, #16]
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	693a      	ldr	r2, [r7, #16]
 8001c84:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	f003 0303 	and.w	r3, r3, #3
 8001c8e:	2b03      	cmp	r3, #3
 8001c90:	d017      	beq.n	8001cc2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	68db      	ldr	r3, [r3, #12]
 8001c96:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	005b      	lsls	r3, r3, #1
 8001c9c:	2203      	movs	r2, #3
 8001c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca2:	43db      	mvns	r3, r3
 8001ca4:	693a      	ldr	r2, [r7, #16]
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	689a      	ldr	r2, [r3, #8]
 8001cae:	697b      	ldr	r3, [r7, #20]
 8001cb0:	005b      	lsls	r3, r3, #1
 8001cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb6:	693a      	ldr	r2, [r7, #16]
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	693a      	ldr	r2, [r7, #16]
 8001cc0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	f003 0303 	and.w	r3, r3, #3
 8001cca:	2b02      	cmp	r3, #2
 8001ccc:	d123      	bne.n	8001d16 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	08da      	lsrs	r2, r3, #3
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	3208      	adds	r2, #8
 8001cd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cda:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001cdc:	697b      	ldr	r3, [r7, #20]
 8001cde:	f003 0307 	and.w	r3, r3, #7
 8001ce2:	009b      	lsls	r3, r3, #2
 8001ce4:	220f      	movs	r2, #15
 8001ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cea:	43db      	mvns	r3, r3
 8001cec:	693a      	ldr	r2, [r7, #16]
 8001cee:	4013      	ands	r3, r2
 8001cf0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	691a      	ldr	r2, [r3, #16]
 8001cf6:	697b      	ldr	r3, [r7, #20]
 8001cf8:	f003 0307 	and.w	r3, r3, #7
 8001cfc:	009b      	lsls	r3, r3, #2
 8001cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001d02:	693a      	ldr	r2, [r7, #16]
 8001d04:	4313      	orrs	r3, r2
 8001d06:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001d08:	697b      	ldr	r3, [r7, #20]
 8001d0a:	08da      	lsrs	r2, r3, #3
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	3208      	adds	r2, #8
 8001d10:	6939      	ldr	r1, [r7, #16]
 8001d12:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	005b      	lsls	r3, r3, #1
 8001d20:	2203      	movs	r2, #3
 8001d22:	fa02 f303 	lsl.w	r3, r2, r3
 8001d26:	43db      	mvns	r3, r3
 8001d28:	693a      	ldr	r2, [r7, #16]
 8001d2a:	4013      	ands	r3, r2
 8001d2c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	f003 0203 	and.w	r2, r3, #3
 8001d36:	697b      	ldr	r3, [r7, #20]
 8001d38:	005b      	lsls	r3, r3, #1
 8001d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3e:	693a      	ldr	r2, [r7, #16]
 8001d40:	4313      	orrs	r3, r2
 8001d42:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	693a      	ldr	r2, [r7, #16]
 8001d48:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	f000 80a6 	beq.w	8001ea4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d58:	4b5b      	ldr	r3, [pc, #364]	@ (8001ec8 <HAL_GPIO_Init+0x2e4>)
 8001d5a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d5c:	4a5a      	ldr	r2, [pc, #360]	@ (8001ec8 <HAL_GPIO_Init+0x2e4>)
 8001d5e:	f043 0301 	orr.w	r3, r3, #1
 8001d62:	6613      	str	r3, [r2, #96]	@ 0x60
 8001d64:	4b58      	ldr	r3, [pc, #352]	@ (8001ec8 <HAL_GPIO_Init+0x2e4>)
 8001d66:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d68:	f003 0301 	and.w	r3, r3, #1
 8001d6c:	60bb      	str	r3, [r7, #8]
 8001d6e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d70:	4a56      	ldr	r2, [pc, #344]	@ (8001ecc <HAL_GPIO_Init+0x2e8>)
 8001d72:	697b      	ldr	r3, [r7, #20]
 8001d74:	089b      	lsrs	r3, r3, #2
 8001d76:	3302      	adds	r3, #2
 8001d78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d7c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001d7e:	697b      	ldr	r3, [r7, #20]
 8001d80:	f003 0303 	and.w	r3, r3, #3
 8001d84:	009b      	lsls	r3, r3, #2
 8001d86:	220f      	movs	r2, #15
 8001d88:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8c:	43db      	mvns	r3, r3
 8001d8e:	693a      	ldr	r2, [r7, #16]
 8001d90:	4013      	ands	r3, r2
 8001d92:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001d9a:	d01f      	beq.n	8001ddc <HAL_GPIO_Init+0x1f8>
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	4a4c      	ldr	r2, [pc, #304]	@ (8001ed0 <HAL_GPIO_Init+0x2ec>)
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d019      	beq.n	8001dd8 <HAL_GPIO_Init+0x1f4>
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	4a4b      	ldr	r2, [pc, #300]	@ (8001ed4 <HAL_GPIO_Init+0x2f0>)
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d013      	beq.n	8001dd4 <HAL_GPIO_Init+0x1f0>
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	4a4a      	ldr	r2, [pc, #296]	@ (8001ed8 <HAL_GPIO_Init+0x2f4>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d00d      	beq.n	8001dd0 <HAL_GPIO_Init+0x1ec>
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	4a49      	ldr	r2, [pc, #292]	@ (8001edc <HAL_GPIO_Init+0x2f8>)
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d007      	beq.n	8001dcc <HAL_GPIO_Init+0x1e8>
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	4a48      	ldr	r2, [pc, #288]	@ (8001ee0 <HAL_GPIO_Init+0x2fc>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d101      	bne.n	8001dc8 <HAL_GPIO_Init+0x1e4>
 8001dc4:	2305      	movs	r3, #5
 8001dc6:	e00a      	b.n	8001dde <HAL_GPIO_Init+0x1fa>
 8001dc8:	2306      	movs	r3, #6
 8001dca:	e008      	b.n	8001dde <HAL_GPIO_Init+0x1fa>
 8001dcc:	2304      	movs	r3, #4
 8001dce:	e006      	b.n	8001dde <HAL_GPIO_Init+0x1fa>
 8001dd0:	2303      	movs	r3, #3
 8001dd2:	e004      	b.n	8001dde <HAL_GPIO_Init+0x1fa>
 8001dd4:	2302      	movs	r3, #2
 8001dd6:	e002      	b.n	8001dde <HAL_GPIO_Init+0x1fa>
 8001dd8:	2301      	movs	r3, #1
 8001dda:	e000      	b.n	8001dde <HAL_GPIO_Init+0x1fa>
 8001ddc:	2300      	movs	r3, #0
 8001dde:	697a      	ldr	r2, [r7, #20]
 8001de0:	f002 0203 	and.w	r2, r2, #3
 8001de4:	0092      	lsls	r2, r2, #2
 8001de6:	4093      	lsls	r3, r2
 8001de8:	693a      	ldr	r2, [r7, #16]
 8001dea:	4313      	orrs	r3, r2
 8001dec:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001dee:	4937      	ldr	r1, [pc, #220]	@ (8001ecc <HAL_GPIO_Init+0x2e8>)
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	089b      	lsrs	r3, r3, #2
 8001df4:	3302      	adds	r3, #2
 8001df6:	693a      	ldr	r2, [r7, #16]
 8001df8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001dfc:	4b39      	ldr	r3, [pc, #228]	@ (8001ee4 <HAL_GPIO_Init+0x300>)
 8001dfe:	689b      	ldr	r3, [r3, #8]
 8001e00:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	43db      	mvns	r3, r3
 8001e06:	693a      	ldr	r2, [r7, #16]
 8001e08:	4013      	ands	r3, r2
 8001e0a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d003      	beq.n	8001e20 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001e18:	693a      	ldr	r2, [r7, #16]
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001e20:	4a30      	ldr	r2, [pc, #192]	@ (8001ee4 <HAL_GPIO_Init+0x300>)
 8001e22:	693b      	ldr	r3, [r7, #16]
 8001e24:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001e26:	4b2f      	ldr	r3, [pc, #188]	@ (8001ee4 <HAL_GPIO_Init+0x300>)
 8001e28:	68db      	ldr	r3, [r3, #12]
 8001e2a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	43db      	mvns	r3, r3
 8001e30:	693a      	ldr	r2, [r7, #16]
 8001e32:	4013      	ands	r3, r2
 8001e34:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d003      	beq.n	8001e4a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001e42:	693a      	ldr	r2, [r7, #16]
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	4313      	orrs	r3, r2
 8001e48:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001e4a:	4a26      	ldr	r2, [pc, #152]	@ (8001ee4 <HAL_GPIO_Init+0x300>)
 8001e4c:	693b      	ldr	r3, [r7, #16]
 8001e4e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001e50:	4b24      	ldr	r3, [pc, #144]	@ (8001ee4 <HAL_GPIO_Init+0x300>)
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	43db      	mvns	r3, r3
 8001e5a:	693a      	ldr	r2, [r7, #16]
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d003      	beq.n	8001e74 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001e6c:	693a      	ldr	r2, [r7, #16]
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	4313      	orrs	r3, r2
 8001e72:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001e74:	4a1b      	ldr	r2, [pc, #108]	@ (8001ee4 <HAL_GPIO_Init+0x300>)
 8001e76:	693b      	ldr	r3, [r7, #16]
 8001e78:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001e7a:	4b1a      	ldr	r3, [pc, #104]	@ (8001ee4 <HAL_GPIO_Init+0x300>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	43db      	mvns	r3, r3
 8001e84:	693a      	ldr	r2, [r7, #16]
 8001e86:	4013      	ands	r3, r2
 8001e88:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d003      	beq.n	8001e9e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001e96:	693a      	ldr	r2, [r7, #16]
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	4313      	orrs	r3, r2
 8001e9c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001e9e:	4a11      	ldr	r2, [pc, #68]	@ (8001ee4 <HAL_GPIO_Init+0x300>)
 8001ea0:	693b      	ldr	r3, [r7, #16]
 8001ea2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	3301      	adds	r3, #1
 8001ea8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	681a      	ldr	r2, [r3, #0]
 8001eae:	697b      	ldr	r3, [r7, #20]
 8001eb0:	fa22 f303 	lsr.w	r3, r2, r3
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	f47f ae9d 	bne.w	8001bf4 <HAL_GPIO_Init+0x10>
  }
}
 8001eba:	bf00      	nop
 8001ebc:	bf00      	nop
 8001ebe:	371c      	adds	r7, #28
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec6:	4770      	bx	lr
 8001ec8:	40021000 	.word	0x40021000
 8001ecc:	40010000 	.word	0x40010000
 8001ed0:	48000400 	.word	0x48000400
 8001ed4:	48000800 	.word	0x48000800
 8001ed8:	48000c00 	.word	0x48000c00
 8001edc:	48001000 	.word	0x48001000
 8001ee0:	48001400 	.word	0x48001400
 8001ee4:	40010400 	.word	0x40010400

08001ee8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b082      	sub	sp, #8
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	4603      	mov	r3, r0
 8001ef0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001ef2:	4b08      	ldr	r3, [pc, #32]	@ (8001f14 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ef4:	695a      	ldr	r2, [r3, #20]
 8001ef6:	88fb      	ldrh	r3, [r7, #6]
 8001ef8:	4013      	ands	r3, r2
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d006      	beq.n	8001f0c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001efe:	4a05      	ldr	r2, [pc, #20]	@ (8001f14 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001f00:	88fb      	ldrh	r3, [r7, #6]
 8001f02:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001f04:	88fb      	ldrh	r3, [r7, #6]
 8001f06:	4618      	mov	r0, r3
 8001f08:	f000 f806 	bl	8001f18 <HAL_GPIO_EXTI_Callback>
  }
}
 8001f0c:	bf00      	nop
 8001f0e:	3708      	adds	r7, #8
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}
 8001f14:	40010400 	.word	0x40010400

08001f18 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b083      	sub	sp, #12
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	4603      	mov	r3, r0
 8001f20:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001f22:	bf00      	nop
 8001f24:	370c      	adds	r7, #12
 8001f26:	46bd      	mov	sp, r7
 8001f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2c:	4770      	bx	lr
	...

08001f30 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b085      	sub	sp, #20
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d141      	bne.n	8001fc2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001f3e:	4b4b      	ldr	r3, [pc, #300]	@ (800206c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001f46:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f4a:	d131      	bne.n	8001fb0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001f4c:	4b47      	ldr	r3, [pc, #284]	@ (800206c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001f52:	4a46      	ldr	r2, [pc, #280]	@ (800206c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f54:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001f58:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f5c:	4b43      	ldr	r3, [pc, #268]	@ (800206c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001f64:	4a41      	ldr	r2, [pc, #260]	@ (800206c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f66:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001f6a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001f6c:	4b40      	ldr	r3, [pc, #256]	@ (8002070 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	2232      	movs	r2, #50	@ 0x32
 8001f72:	fb02 f303 	mul.w	r3, r2, r3
 8001f76:	4a3f      	ldr	r2, [pc, #252]	@ (8002074 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001f78:	fba2 2303 	umull	r2, r3, r2, r3
 8001f7c:	0c9b      	lsrs	r3, r3, #18
 8001f7e:	3301      	adds	r3, #1
 8001f80:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f82:	e002      	b.n	8001f8a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	3b01      	subs	r3, #1
 8001f88:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f8a:	4b38      	ldr	r3, [pc, #224]	@ (800206c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f8c:	695b      	ldr	r3, [r3, #20]
 8001f8e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f92:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f96:	d102      	bne.n	8001f9e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d1f2      	bne.n	8001f84 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001f9e:	4b33      	ldr	r3, [pc, #204]	@ (800206c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fa0:	695b      	ldr	r3, [r3, #20]
 8001fa2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001fa6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001faa:	d158      	bne.n	800205e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001fac:	2303      	movs	r3, #3
 8001fae:	e057      	b.n	8002060 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001fb0:	4b2e      	ldr	r3, [pc, #184]	@ (800206c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001fb6:	4a2d      	ldr	r2, [pc, #180]	@ (800206c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fb8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001fbc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001fc0:	e04d      	b.n	800205e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001fc8:	d141      	bne.n	800204e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001fca:	4b28      	ldr	r3, [pc, #160]	@ (800206c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001fd2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001fd6:	d131      	bne.n	800203c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001fd8:	4b24      	ldr	r3, [pc, #144]	@ (800206c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fda:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001fde:	4a23      	ldr	r2, [pc, #140]	@ (800206c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fe0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001fe4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001fe8:	4b20      	ldr	r3, [pc, #128]	@ (800206c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001ff0:	4a1e      	ldr	r2, [pc, #120]	@ (800206c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ff2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001ff6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001ff8:	4b1d      	ldr	r3, [pc, #116]	@ (8002070 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	2232      	movs	r2, #50	@ 0x32
 8001ffe:	fb02 f303 	mul.w	r3, r2, r3
 8002002:	4a1c      	ldr	r2, [pc, #112]	@ (8002074 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002004:	fba2 2303 	umull	r2, r3, r2, r3
 8002008:	0c9b      	lsrs	r3, r3, #18
 800200a:	3301      	adds	r3, #1
 800200c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800200e:	e002      	b.n	8002016 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	3b01      	subs	r3, #1
 8002014:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002016:	4b15      	ldr	r3, [pc, #84]	@ (800206c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002018:	695b      	ldr	r3, [r3, #20]
 800201a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800201e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002022:	d102      	bne.n	800202a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d1f2      	bne.n	8002010 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800202a:	4b10      	ldr	r3, [pc, #64]	@ (800206c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800202c:	695b      	ldr	r3, [r3, #20]
 800202e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002032:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002036:	d112      	bne.n	800205e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002038:	2303      	movs	r3, #3
 800203a:	e011      	b.n	8002060 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800203c:	4b0b      	ldr	r3, [pc, #44]	@ (800206c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800203e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002042:	4a0a      	ldr	r2, [pc, #40]	@ (800206c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002044:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002048:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800204c:	e007      	b.n	800205e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800204e:	4b07      	ldr	r3, [pc, #28]	@ (800206c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002056:	4a05      	ldr	r2, [pc, #20]	@ (800206c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002058:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800205c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800205e:	2300      	movs	r3, #0
}
 8002060:	4618      	mov	r0, r3
 8002062:	3714      	adds	r7, #20
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr
 800206c:	40007000 	.word	0x40007000
 8002070:	20000200 	.word	0x20000200
 8002074:	431bde83 	.word	0x431bde83

08002078 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002078:	b480      	push	{r7}
 800207a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800207c:	4b05      	ldr	r3, [pc, #20]	@ (8002094 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800207e:	689b      	ldr	r3, [r3, #8]
 8002080:	4a04      	ldr	r2, [pc, #16]	@ (8002094 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002082:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002086:	6093      	str	r3, [r2, #8]
}
 8002088:	bf00      	nop
 800208a:	46bd      	mov	sp, r7
 800208c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002090:	4770      	bx	lr
 8002092:	bf00      	nop
 8002094:	40007000 	.word	0x40007000

08002098 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b088      	sub	sp, #32
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d101      	bne.n	80020aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020a6:	2301      	movs	r3, #1
 80020a8:	e2fe      	b.n	80026a8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f003 0301 	and.w	r3, r3, #1
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d075      	beq.n	80021a2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020b6:	4b97      	ldr	r3, [pc, #604]	@ (8002314 <HAL_RCC_OscConfig+0x27c>)
 80020b8:	689b      	ldr	r3, [r3, #8]
 80020ba:	f003 030c 	and.w	r3, r3, #12
 80020be:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80020c0:	4b94      	ldr	r3, [pc, #592]	@ (8002314 <HAL_RCC_OscConfig+0x27c>)
 80020c2:	68db      	ldr	r3, [r3, #12]
 80020c4:	f003 0303 	and.w	r3, r3, #3
 80020c8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80020ca:	69bb      	ldr	r3, [r7, #24]
 80020cc:	2b0c      	cmp	r3, #12
 80020ce:	d102      	bne.n	80020d6 <HAL_RCC_OscConfig+0x3e>
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	2b03      	cmp	r3, #3
 80020d4:	d002      	beq.n	80020dc <HAL_RCC_OscConfig+0x44>
 80020d6:	69bb      	ldr	r3, [r7, #24]
 80020d8:	2b08      	cmp	r3, #8
 80020da:	d10b      	bne.n	80020f4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020dc:	4b8d      	ldr	r3, [pc, #564]	@ (8002314 <HAL_RCC_OscConfig+0x27c>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d05b      	beq.n	80021a0 <HAL_RCC_OscConfig+0x108>
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d157      	bne.n	80021a0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80020f0:	2301      	movs	r3, #1
 80020f2:	e2d9      	b.n	80026a8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80020fc:	d106      	bne.n	800210c <HAL_RCC_OscConfig+0x74>
 80020fe:	4b85      	ldr	r3, [pc, #532]	@ (8002314 <HAL_RCC_OscConfig+0x27c>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4a84      	ldr	r2, [pc, #528]	@ (8002314 <HAL_RCC_OscConfig+0x27c>)
 8002104:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002108:	6013      	str	r3, [r2, #0]
 800210a:	e01d      	b.n	8002148 <HAL_RCC_OscConfig+0xb0>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002114:	d10c      	bne.n	8002130 <HAL_RCC_OscConfig+0x98>
 8002116:	4b7f      	ldr	r3, [pc, #508]	@ (8002314 <HAL_RCC_OscConfig+0x27c>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a7e      	ldr	r2, [pc, #504]	@ (8002314 <HAL_RCC_OscConfig+0x27c>)
 800211c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002120:	6013      	str	r3, [r2, #0]
 8002122:	4b7c      	ldr	r3, [pc, #496]	@ (8002314 <HAL_RCC_OscConfig+0x27c>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4a7b      	ldr	r2, [pc, #492]	@ (8002314 <HAL_RCC_OscConfig+0x27c>)
 8002128:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800212c:	6013      	str	r3, [r2, #0]
 800212e:	e00b      	b.n	8002148 <HAL_RCC_OscConfig+0xb0>
 8002130:	4b78      	ldr	r3, [pc, #480]	@ (8002314 <HAL_RCC_OscConfig+0x27c>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a77      	ldr	r2, [pc, #476]	@ (8002314 <HAL_RCC_OscConfig+0x27c>)
 8002136:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800213a:	6013      	str	r3, [r2, #0]
 800213c:	4b75      	ldr	r3, [pc, #468]	@ (8002314 <HAL_RCC_OscConfig+0x27c>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a74      	ldr	r2, [pc, #464]	@ (8002314 <HAL_RCC_OscConfig+0x27c>)
 8002142:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002146:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d013      	beq.n	8002178 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002150:	f7ff f8ee 	bl	8001330 <HAL_GetTick>
 8002154:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002156:	e008      	b.n	800216a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002158:	f7ff f8ea 	bl	8001330 <HAL_GetTick>
 800215c:	4602      	mov	r2, r0
 800215e:	693b      	ldr	r3, [r7, #16]
 8002160:	1ad3      	subs	r3, r2, r3
 8002162:	2b64      	cmp	r3, #100	@ 0x64
 8002164:	d901      	bls.n	800216a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002166:	2303      	movs	r3, #3
 8002168:	e29e      	b.n	80026a8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800216a:	4b6a      	ldr	r3, [pc, #424]	@ (8002314 <HAL_RCC_OscConfig+0x27c>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002172:	2b00      	cmp	r3, #0
 8002174:	d0f0      	beq.n	8002158 <HAL_RCC_OscConfig+0xc0>
 8002176:	e014      	b.n	80021a2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002178:	f7ff f8da 	bl	8001330 <HAL_GetTick>
 800217c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800217e:	e008      	b.n	8002192 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002180:	f7ff f8d6 	bl	8001330 <HAL_GetTick>
 8002184:	4602      	mov	r2, r0
 8002186:	693b      	ldr	r3, [r7, #16]
 8002188:	1ad3      	subs	r3, r2, r3
 800218a:	2b64      	cmp	r3, #100	@ 0x64
 800218c:	d901      	bls.n	8002192 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800218e:	2303      	movs	r3, #3
 8002190:	e28a      	b.n	80026a8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002192:	4b60      	ldr	r3, [pc, #384]	@ (8002314 <HAL_RCC_OscConfig+0x27c>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800219a:	2b00      	cmp	r3, #0
 800219c:	d1f0      	bne.n	8002180 <HAL_RCC_OscConfig+0xe8>
 800219e:	e000      	b.n	80021a2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f003 0302 	and.w	r3, r3, #2
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d075      	beq.n	800229a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80021ae:	4b59      	ldr	r3, [pc, #356]	@ (8002314 <HAL_RCC_OscConfig+0x27c>)
 80021b0:	689b      	ldr	r3, [r3, #8]
 80021b2:	f003 030c 	and.w	r3, r3, #12
 80021b6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80021b8:	4b56      	ldr	r3, [pc, #344]	@ (8002314 <HAL_RCC_OscConfig+0x27c>)
 80021ba:	68db      	ldr	r3, [r3, #12]
 80021bc:	f003 0303 	and.w	r3, r3, #3
 80021c0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80021c2:	69bb      	ldr	r3, [r7, #24]
 80021c4:	2b0c      	cmp	r3, #12
 80021c6:	d102      	bne.n	80021ce <HAL_RCC_OscConfig+0x136>
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	2b02      	cmp	r3, #2
 80021cc:	d002      	beq.n	80021d4 <HAL_RCC_OscConfig+0x13c>
 80021ce:	69bb      	ldr	r3, [r7, #24]
 80021d0:	2b04      	cmp	r3, #4
 80021d2:	d11f      	bne.n	8002214 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80021d4:	4b4f      	ldr	r3, [pc, #316]	@ (8002314 <HAL_RCC_OscConfig+0x27c>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d005      	beq.n	80021ec <HAL_RCC_OscConfig+0x154>
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	68db      	ldr	r3, [r3, #12]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d101      	bne.n	80021ec <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80021e8:	2301      	movs	r3, #1
 80021ea:	e25d      	b.n	80026a8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021ec:	4b49      	ldr	r3, [pc, #292]	@ (8002314 <HAL_RCC_OscConfig+0x27c>)
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	691b      	ldr	r3, [r3, #16]
 80021f8:	061b      	lsls	r3, r3, #24
 80021fa:	4946      	ldr	r1, [pc, #280]	@ (8002314 <HAL_RCC_OscConfig+0x27c>)
 80021fc:	4313      	orrs	r3, r2
 80021fe:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002200:	4b45      	ldr	r3, [pc, #276]	@ (8002318 <HAL_RCC_OscConfig+0x280>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4618      	mov	r0, r3
 8002206:	f7ff f847 	bl	8001298 <HAL_InitTick>
 800220a:	4603      	mov	r3, r0
 800220c:	2b00      	cmp	r3, #0
 800220e:	d043      	beq.n	8002298 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002210:	2301      	movs	r3, #1
 8002212:	e249      	b.n	80026a8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	68db      	ldr	r3, [r3, #12]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d023      	beq.n	8002264 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800221c:	4b3d      	ldr	r3, [pc, #244]	@ (8002314 <HAL_RCC_OscConfig+0x27c>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a3c      	ldr	r2, [pc, #240]	@ (8002314 <HAL_RCC_OscConfig+0x27c>)
 8002222:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002226:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002228:	f7ff f882 	bl	8001330 <HAL_GetTick>
 800222c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800222e:	e008      	b.n	8002242 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002230:	f7ff f87e 	bl	8001330 <HAL_GetTick>
 8002234:	4602      	mov	r2, r0
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	1ad3      	subs	r3, r2, r3
 800223a:	2b02      	cmp	r3, #2
 800223c:	d901      	bls.n	8002242 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800223e:	2303      	movs	r3, #3
 8002240:	e232      	b.n	80026a8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002242:	4b34      	ldr	r3, [pc, #208]	@ (8002314 <HAL_RCC_OscConfig+0x27c>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800224a:	2b00      	cmp	r3, #0
 800224c:	d0f0      	beq.n	8002230 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800224e:	4b31      	ldr	r3, [pc, #196]	@ (8002314 <HAL_RCC_OscConfig+0x27c>)
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	691b      	ldr	r3, [r3, #16]
 800225a:	061b      	lsls	r3, r3, #24
 800225c:	492d      	ldr	r1, [pc, #180]	@ (8002314 <HAL_RCC_OscConfig+0x27c>)
 800225e:	4313      	orrs	r3, r2
 8002260:	604b      	str	r3, [r1, #4]
 8002262:	e01a      	b.n	800229a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002264:	4b2b      	ldr	r3, [pc, #172]	@ (8002314 <HAL_RCC_OscConfig+0x27c>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a2a      	ldr	r2, [pc, #168]	@ (8002314 <HAL_RCC_OscConfig+0x27c>)
 800226a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800226e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002270:	f7ff f85e 	bl	8001330 <HAL_GetTick>
 8002274:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002276:	e008      	b.n	800228a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002278:	f7ff f85a 	bl	8001330 <HAL_GetTick>
 800227c:	4602      	mov	r2, r0
 800227e:	693b      	ldr	r3, [r7, #16]
 8002280:	1ad3      	subs	r3, r2, r3
 8002282:	2b02      	cmp	r3, #2
 8002284:	d901      	bls.n	800228a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002286:	2303      	movs	r3, #3
 8002288:	e20e      	b.n	80026a8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800228a:	4b22      	ldr	r3, [pc, #136]	@ (8002314 <HAL_RCC_OscConfig+0x27c>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002292:	2b00      	cmp	r3, #0
 8002294:	d1f0      	bne.n	8002278 <HAL_RCC_OscConfig+0x1e0>
 8002296:	e000      	b.n	800229a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002298:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f003 0308 	and.w	r3, r3, #8
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d041      	beq.n	800232a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	695b      	ldr	r3, [r3, #20]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d01c      	beq.n	80022e8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022ae:	4b19      	ldr	r3, [pc, #100]	@ (8002314 <HAL_RCC_OscConfig+0x27c>)
 80022b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80022b4:	4a17      	ldr	r2, [pc, #92]	@ (8002314 <HAL_RCC_OscConfig+0x27c>)
 80022b6:	f043 0301 	orr.w	r3, r3, #1
 80022ba:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022be:	f7ff f837 	bl	8001330 <HAL_GetTick>
 80022c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80022c4:	e008      	b.n	80022d8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022c6:	f7ff f833 	bl	8001330 <HAL_GetTick>
 80022ca:	4602      	mov	r2, r0
 80022cc:	693b      	ldr	r3, [r7, #16]
 80022ce:	1ad3      	subs	r3, r2, r3
 80022d0:	2b02      	cmp	r3, #2
 80022d2:	d901      	bls.n	80022d8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80022d4:	2303      	movs	r3, #3
 80022d6:	e1e7      	b.n	80026a8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80022d8:	4b0e      	ldr	r3, [pc, #56]	@ (8002314 <HAL_RCC_OscConfig+0x27c>)
 80022da:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80022de:	f003 0302 	and.w	r3, r3, #2
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d0ef      	beq.n	80022c6 <HAL_RCC_OscConfig+0x22e>
 80022e6:	e020      	b.n	800232a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022e8:	4b0a      	ldr	r3, [pc, #40]	@ (8002314 <HAL_RCC_OscConfig+0x27c>)
 80022ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80022ee:	4a09      	ldr	r2, [pc, #36]	@ (8002314 <HAL_RCC_OscConfig+0x27c>)
 80022f0:	f023 0301 	bic.w	r3, r3, #1
 80022f4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022f8:	f7ff f81a 	bl	8001330 <HAL_GetTick>
 80022fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80022fe:	e00d      	b.n	800231c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002300:	f7ff f816 	bl	8001330 <HAL_GetTick>
 8002304:	4602      	mov	r2, r0
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	1ad3      	subs	r3, r2, r3
 800230a:	2b02      	cmp	r3, #2
 800230c:	d906      	bls.n	800231c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800230e:	2303      	movs	r3, #3
 8002310:	e1ca      	b.n	80026a8 <HAL_RCC_OscConfig+0x610>
 8002312:	bf00      	nop
 8002314:	40021000 	.word	0x40021000
 8002318:	20000204 	.word	0x20000204
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800231c:	4b8c      	ldr	r3, [pc, #560]	@ (8002550 <HAL_RCC_OscConfig+0x4b8>)
 800231e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002322:	f003 0302 	and.w	r3, r3, #2
 8002326:	2b00      	cmp	r3, #0
 8002328:	d1ea      	bne.n	8002300 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f003 0304 	and.w	r3, r3, #4
 8002332:	2b00      	cmp	r3, #0
 8002334:	f000 80a6 	beq.w	8002484 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002338:	2300      	movs	r3, #0
 800233a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800233c:	4b84      	ldr	r3, [pc, #528]	@ (8002550 <HAL_RCC_OscConfig+0x4b8>)
 800233e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002340:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002344:	2b00      	cmp	r3, #0
 8002346:	d101      	bne.n	800234c <HAL_RCC_OscConfig+0x2b4>
 8002348:	2301      	movs	r3, #1
 800234a:	e000      	b.n	800234e <HAL_RCC_OscConfig+0x2b6>
 800234c:	2300      	movs	r3, #0
 800234e:	2b00      	cmp	r3, #0
 8002350:	d00d      	beq.n	800236e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002352:	4b7f      	ldr	r3, [pc, #508]	@ (8002550 <HAL_RCC_OscConfig+0x4b8>)
 8002354:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002356:	4a7e      	ldr	r2, [pc, #504]	@ (8002550 <HAL_RCC_OscConfig+0x4b8>)
 8002358:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800235c:	6593      	str	r3, [r2, #88]	@ 0x58
 800235e:	4b7c      	ldr	r3, [pc, #496]	@ (8002550 <HAL_RCC_OscConfig+0x4b8>)
 8002360:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002362:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002366:	60fb      	str	r3, [r7, #12]
 8002368:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800236a:	2301      	movs	r3, #1
 800236c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800236e:	4b79      	ldr	r3, [pc, #484]	@ (8002554 <HAL_RCC_OscConfig+0x4bc>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002376:	2b00      	cmp	r3, #0
 8002378:	d118      	bne.n	80023ac <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800237a:	4b76      	ldr	r3, [pc, #472]	@ (8002554 <HAL_RCC_OscConfig+0x4bc>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4a75      	ldr	r2, [pc, #468]	@ (8002554 <HAL_RCC_OscConfig+0x4bc>)
 8002380:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002384:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002386:	f7fe ffd3 	bl	8001330 <HAL_GetTick>
 800238a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800238c:	e008      	b.n	80023a0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800238e:	f7fe ffcf 	bl	8001330 <HAL_GetTick>
 8002392:	4602      	mov	r2, r0
 8002394:	693b      	ldr	r3, [r7, #16]
 8002396:	1ad3      	subs	r3, r2, r3
 8002398:	2b02      	cmp	r3, #2
 800239a:	d901      	bls.n	80023a0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800239c:	2303      	movs	r3, #3
 800239e:	e183      	b.n	80026a8 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023a0:	4b6c      	ldr	r3, [pc, #432]	@ (8002554 <HAL_RCC_OscConfig+0x4bc>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d0f0      	beq.n	800238e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	2b01      	cmp	r3, #1
 80023b2:	d108      	bne.n	80023c6 <HAL_RCC_OscConfig+0x32e>
 80023b4:	4b66      	ldr	r3, [pc, #408]	@ (8002550 <HAL_RCC_OscConfig+0x4b8>)
 80023b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023ba:	4a65      	ldr	r2, [pc, #404]	@ (8002550 <HAL_RCC_OscConfig+0x4b8>)
 80023bc:	f043 0301 	orr.w	r3, r3, #1
 80023c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80023c4:	e024      	b.n	8002410 <HAL_RCC_OscConfig+0x378>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	689b      	ldr	r3, [r3, #8]
 80023ca:	2b05      	cmp	r3, #5
 80023cc:	d110      	bne.n	80023f0 <HAL_RCC_OscConfig+0x358>
 80023ce:	4b60      	ldr	r3, [pc, #384]	@ (8002550 <HAL_RCC_OscConfig+0x4b8>)
 80023d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023d4:	4a5e      	ldr	r2, [pc, #376]	@ (8002550 <HAL_RCC_OscConfig+0x4b8>)
 80023d6:	f043 0304 	orr.w	r3, r3, #4
 80023da:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80023de:	4b5c      	ldr	r3, [pc, #368]	@ (8002550 <HAL_RCC_OscConfig+0x4b8>)
 80023e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023e4:	4a5a      	ldr	r2, [pc, #360]	@ (8002550 <HAL_RCC_OscConfig+0x4b8>)
 80023e6:	f043 0301 	orr.w	r3, r3, #1
 80023ea:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80023ee:	e00f      	b.n	8002410 <HAL_RCC_OscConfig+0x378>
 80023f0:	4b57      	ldr	r3, [pc, #348]	@ (8002550 <HAL_RCC_OscConfig+0x4b8>)
 80023f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023f6:	4a56      	ldr	r2, [pc, #344]	@ (8002550 <HAL_RCC_OscConfig+0x4b8>)
 80023f8:	f023 0301 	bic.w	r3, r3, #1
 80023fc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002400:	4b53      	ldr	r3, [pc, #332]	@ (8002550 <HAL_RCC_OscConfig+0x4b8>)
 8002402:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002406:	4a52      	ldr	r2, [pc, #328]	@ (8002550 <HAL_RCC_OscConfig+0x4b8>)
 8002408:	f023 0304 	bic.w	r3, r3, #4
 800240c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	689b      	ldr	r3, [r3, #8]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d016      	beq.n	8002446 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002418:	f7fe ff8a 	bl	8001330 <HAL_GetTick>
 800241c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800241e:	e00a      	b.n	8002436 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002420:	f7fe ff86 	bl	8001330 <HAL_GetTick>
 8002424:	4602      	mov	r2, r0
 8002426:	693b      	ldr	r3, [r7, #16]
 8002428:	1ad3      	subs	r3, r2, r3
 800242a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800242e:	4293      	cmp	r3, r2
 8002430:	d901      	bls.n	8002436 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002432:	2303      	movs	r3, #3
 8002434:	e138      	b.n	80026a8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002436:	4b46      	ldr	r3, [pc, #280]	@ (8002550 <HAL_RCC_OscConfig+0x4b8>)
 8002438:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800243c:	f003 0302 	and.w	r3, r3, #2
 8002440:	2b00      	cmp	r3, #0
 8002442:	d0ed      	beq.n	8002420 <HAL_RCC_OscConfig+0x388>
 8002444:	e015      	b.n	8002472 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002446:	f7fe ff73 	bl	8001330 <HAL_GetTick>
 800244a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800244c:	e00a      	b.n	8002464 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800244e:	f7fe ff6f 	bl	8001330 <HAL_GetTick>
 8002452:	4602      	mov	r2, r0
 8002454:	693b      	ldr	r3, [r7, #16]
 8002456:	1ad3      	subs	r3, r2, r3
 8002458:	f241 3288 	movw	r2, #5000	@ 0x1388
 800245c:	4293      	cmp	r3, r2
 800245e:	d901      	bls.n	8002464 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002460:	2303      	movs	r3, #3
 8002462:	e121      	b.n	80026a8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002464:	4b3a      	ldr	r3, [pc, #232]	@ (8002550 <HAL_RCC_OscConfig+0x4b8>)
 8002466:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800246a:	f003 0302 	and.w	r3, r3, #2
 800246e:	2b00      	cmp	r3, #0
 8002470:	d1ed      	bne.n	800244e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002472:	7ffb      	ldrb	r3, [r7, #31]
 8002474:	2b01      	cmp	r3, #1
 8002476:	d105      	bne.n	8002484 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002478:	4b35      	ldr	r3, [pc, #212]	@ (8002550 <HAL_RCC_OscConfig+0x4b8>)
 800247a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800247c:	4a34      	ldr	r2, [pc, #208]	@ (8002550 <HAL_RCC_OscConfig+0x4b8>)
 800247e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002482:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f003 0320 	and.w	r3, r3, #32
 800248c:	2b00      	cmp	r3, #0
 800248e:	d03c      	beq.n	800250a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	699b      	ldr	r3, [r3, #24]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d01c      	beq.n	80024d2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002498:	4b2d      	ldr	r3, [pc, #180]	@ (8002550 <HAL_RCC_OscConfig+0x4b8>)
 800249a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800249e:	4a2c      	ldr	r2, [pc, #176]	@ (8002550 <HAL_RCC_OscConfig+0x4b8>)
 80024a0:	f043 0301 	orr.w	r3, r3, #1
 80024a4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024a8:	f7fe ff42 	bl	8001330 <HAL_GetTick>
 80024ac:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80024ae:	e008      	b.n	80024c2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80024b0:	f7fe ff3e 	bl	8001330 <HAL_GetTick>
 80024b4:	4602      	mov	r2, r0
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	1ad3      	subs	r3, r2, r3
 80024ba:	2b02      	cmp	r3, #2
 80024bc:	d901      	bls.n	80024c2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80024be:	2303      	movs	r3, #3
 80024c0:	e0f2      	b.n	80026a8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80024c2:	4b23      	ldr	r3, [pc, #140]	@ (8002550 <HAL_RCC_OscConfig+0x4b8>)
 80024c4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80024c8:	f003 0302 	and.w	r3, r3, #2
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d0ef      	beq.n	80024b0 <HAL_RCC_OscConfig+0x418>
 80024d0:	e01b      	b.n	800250a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80024d2:	4b1f      	ldr	r3, [pc, #124]	@ (8002550 <HAL_RCC_OscConfig+0x4b8>)
 80024d4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80024d8:	4a1d      	ldr	r2, [pc, #116]	@ (8002550 <HAL_RCC_OscConfig+0x4b8>)
 80024da:	f023 0301 	bic.w	r3, r3, #1
 80024de:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024e2:	f7fe ff25 	bl	8001330 <HAL_GetTick>
 80024e6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80024e8:	e008      	b.n	80024fc <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80024ea:	f7fe ff21 	bl	8001330 <HAL_GetTick>
 80024ee:	4602      	mov	r2, r0
 80024f0:	693b      	ldr	r3, [r7, #16]
 80024f2:	1ad3      	subs	r3, r2, r3
 80024f4:	2b02      	cmp	r3, #2
 80024f6:	d901      	bls.n	80024fc <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80024f8:	2303      	movs	r3, #3
 80024fa:	e0d5      	b.n	80026a8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80024fc:	4b14      	ldr	r3, [pc, #80]	@ (8002550 <HAL_RCC_OscConfig+0x4b8>)
 80024fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002502:	f003 0302 	and.w	r3, r3, #2
 8002506:	2b00      	cmp	r3, #0
 8002508:	d1ef      	bne.n	80024ea <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	69db      	ldr	r3, [r3, #28]
 800250e:	2b00      	cmp	r3, #0
 8002510:	f000 80c9 	beq.w	80026a6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002514:	4b0e      	ldr	r3, [pc, #56]	@ (8002550 <HAL_RCC_OscConfig+0x4b8>)
 8002516:	689b      	ldr	r3, [r3, #8]
 8002518:	f003 030c 	and.w	r3, r3, #12
 800251c:	2b0c      	cmp	r3, #12
 800251e:	f000 8083 	beq.w	8002628 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	69db      	ldr	r3, [r3, #28]
 8002526:	2b02      	cmp	r3, #2
 8002528:	d15e      	bne.n	80025e8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800252a:	4b09      	ldr	r3, [pc, #36]	@ (8002550 <HAL_RCC_OscConfig+0x4b8>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4a08      	ldr	r2, [pc, #32]	@ (8002550 <HAL_RCC_OscConfig+0x4b8>)
 8002530:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002534:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002536:	f7fe fefb 	bl	8001330 <HAL_GetTick>
 800253a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800253c:	e00c      	b.n	8002558 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800253e:	f7fe fef7 	bl	8001330 <HAL_GetTick>
 8002542:	4602      	mov	r2, r0
 8002544:	693b      	ldr	r3, [r7, #16]
 8002546:	1ad3      	subs	r3, r2, r3
 8002548:	2b02      	cmp	r3, #2
 800254a:	d905      	bls.n	8002558 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800254c:	2303      	movs	r3, #3
 800254e:	e0ab      	b.n	80026a8 <HAL_RCC_OscConfig+0x610>
 8002550:	40021000 	.word	0x40021000
 8002554:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002558:	4b55      	ldr	r3, [pc, #340]	@ (80026b0 <HAL_RCC_OscConfig+0x618>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002560:	2b00      	cmp	r3, #0
 8002562:	d1ec      	bne.n	800253e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002564:	4b52      	ldr	r3, [pc, #328]	@ (80026b0 <HAL_RCC_OscConfig+0x618>)
 8002566:	68da      	ldr	r2, [r3, #12]
 8002568:	4b52      	ldr	r3, [pc, #328]	@ (80026b4 <HAL_RCC_OscConfig+0x61c>)
 800256a:	4013      	ands	r3, r2
 800256c:	687a      	ldr	r2, [r7, #4]
 800256e:	6a11      	ldr	r1, [r2, #32]
 8002570:	687a      	ldr	r2, [r7, #4]
 8002572:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002574:	3a01      	subs	r2, #1
 8002576:	0112      	lsls	r2, r2, #4
 8002578:	4311      	orrs	r1, r2
 800257a:	687a      	ldr	r2, [r7, #4]
 800257c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800257e:	0212      	lsls	r2, r2, #8
 8002580:	4311      	orrs	r1, r2
 8002582:	687a      	ldr	r2, [r7, #4]
 8002584:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002586:	0852      	lsrs	r2, r2, #1
 8002588:	3a01      	subs	r2, #1
 800258a:	0552      	lsls	r2, r2, #21
 800258c:	4311      	orrs	r1, r2
 800258e:	687a      	ldr	r2, [r7, #4]
 8002590:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002592:	0852      	lsrs	r2, r2, #1
 8002594:	3a01      	subs	r2, #1
 8002596:	0652      	lsls	r2, r2, #25
 8002598:	4311      	orrs	r1, r2
 800259a:	687a      	ldr	r2, [r7, #4]
 800259c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800259e:	06d2      	lsls	r2, r2, #27
 80025a0:	430a      	orrs	r2, r1
 80025a2:	4943      	ldr	r1, [pc, #268]	@ (80026b0 <HAL_RCC_OscConfig+0x618>)
 80025a4:	4313      	orrs	r3, r2
 80025a6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025a8:	4b41      	ldr	r3, [pc, #260]	@ (80026b0 <HAL_RCC_OscConfig+0x618>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a40      	ldr	r2, [pc, #256]	@ (80026b0 <HAL_RCC_OscConfig+0x618>)
 80025ae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80025b2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80025b4:	4b3e      	ldr	r3, [pc, #248]	@ (80026b0 <HAL_RCC_OscConfig+0x618>)
 80025b6:	68db      	ldr	r3, [r3, #12]
 80025b8:	4a3d      	ldr	r2, [pc, #244]	@ (80026b0 <HAL_RCC_OscConfig+0x618>)
 80025ba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80025be:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025c0:	f7fe feb6 	bl	8001330 <HAL_GetTick>
 80025c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025c6:	e008      	b.n	80025da <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025c8:	f7fe feb2 	bl	8001330 <HAL_GetTick>
 80025cc:	4602      	mov	r2, r0
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	1ad3      	subs	r3, r2, r3
 80025d2:	2b02      	cmp	r3, #2
 80025d4:	d901      	bls.n	80025da <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80025d6:	2303      	movs	r3, #3
 80025d8:	e066      	b.n	80026a8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025da:	4b35      	ldr	r3, [pc, #212]	@ (80026b0 <HAL_RCC_OscConfig+0x618>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d0f0      	beq.n	80025c8 <HAL_RCC_OscConfig+0x530>
 80025e6:	e05e      	b.n	80026a6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025e8:	4b31      	ldr	r3, [pc, #196]	@ (80026b0 <HAL_RCC_OscConfig+0x618>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a30      	ldr	r2, [pc, #192]	@ (80026b0 <HAL_RCC_OscConfig+0x618>)
 80025ee:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80025f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025f4:	f7fe fe9c 	bl	8001330 <HAL_GetTick>
 80025f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025fa:	e008      	b.n	800260e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025fc:	f7fe fe98 	bl	8001330 <HAL_GetTick>
 8002600:	4602      	mov	r2, r0
 8002602:	693b      	ldr	r3, [r7, #16]
 8002604:	1ad3      	subs	r3, r2, r3
 8002606:	2b02      	cmp	r3, #2
 8002608:	d901      	bls.n	800260e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800260a:	2303      	movs	r3, #3
 800260c:	e04c      	b.n	80026a8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800260e:	4b28      	ldr	r3, [pc, #160]	@ (80026b0 <HAL_RCC_OscConfig+0x618>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002616:	2b00      	cmp	r3, #0
 8002618:	d1f0      	bne.n	80025fc <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800261a:	4b25      	ldr	r3, [pc, #148]	@ (80026b0 <HAL_RCC_OscConfig+0x618>)
 800261c:	68da      	ldr	r2, [r3, #12]
 800261e:	4924      	ldr	r1, [pc, #144]	@ (80026b0 <HAL_RCC_OscConfig+0x618>)
 8002620:	4b25      	ldr	r3, [pc, #148]	@ (80026b8 <HAL_RCC_OscConfig+0x620>)
 8002622:	4013      	ands	r3, r2
 8002624:	60cb      	str	r3, [r1, #12]
 8002626:	e03e      	b.n	80026a6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	69db      	ldr	r3, [r3, #28]
 800262c:	2b01      	cmp	r3, #1
 800262e:	d101      	bne.n	8002634 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8002630:	2301      	movs	r3, #1
 8002632:	e039      	b.n	80026a8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002634:	4b1e      	ldr	r3, [pc, #120]	@ (80026b0 <HAL_RCC_OscConfig+0x618>)
 8002636:	68db      	ldr	r3, [r3, #12]
 8002638:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800263a:	697b      	ldr	r3, [r7, #20]
 800263c:	f003 0203 	and.w	r2, r3, #3
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6a1b      	ldr	r3, [r3, #32]
 8002644:	429a      	cmp	r2, r3
 8002646:	d12c      	bne.n	80026a2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002648:	697b      	ldr	r3, [r7, #20]
 800264a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002652:	3b01      	subs	r3, #1
 8002654:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002656:	429a      	cmp	r2, r3
 8002658:	d123      	bne.n	80026a2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800265a:	697b      	ldr	r3, [r7, #20]
 800265c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002664:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002666:	429a      	cmp	r2, r3
 8002668:	d11b      	bne.n	80026a2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800266a:	697b      	ldr	r3, [r7, #20]
 800266c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002674:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002676:	429a      	cmp	r2, r3
 8002678:	d113      	bne.n	80026a2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002684:	085b      	lsrs	r3, r3, #1
 8002686:	3b01      	subs	r3, #1
 8002688:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800268a:	429a      	cmp	r2, r3
 800268c:	d109      	bne.n	80026a2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800268e:	697b      	ldr	r3, [r7, #20]
 8002690:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002698:	085b      	lsrs	r3, r3, #1
 800269a:	3b01      	subs	r3, #1
 800269c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800269e:	429a      	cmp	r2, r3
 80026a0:	d001      	beq.n	80026a6 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80026a2:	2301      	movs	r3, #1
 80026a4:	e000      	b.n	80026a8 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80026a6:	2300      	movs	r3, #0
}
 80026a8:	4618      	mov	r0, r3
 80026aa:	3720      	adds	r7, #32
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bd80      	pop	{r7, pc}
 80026b0:	40021000 	.word	0x40021000
 80026b4:	019f800c 	.word	0x019f800c
 80026b8:	feeefffc 	.word	0xfeeefffc

080026bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b086      	sub	sp, #24
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
 80026c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80026c6:	2300      	movs	r3, #0
 80026c8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d101      	bne.n	80026d4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80026d0:	2301      	movs	r3, #1
 80026d2:	e11e      	b.n	8002912 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80026d4:	4b91      	ldr	r3, [pc, #580]	@ (800291c <HAL_RCC_ClockConfig+0x260>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f003 030f 	and.w	r3, r3, #15
 80026dc:	683a      	ldr	r2, [r7, #0]
 80026de:	429a      	cmp	r2, r3
 80026e0:	d910      	bls.n	8002704 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026e2:	4b8e      	ldr	r3, [pc, #568]	@ (800291c <HAL_RCC_ClockConfig+0x260>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f023 020f 	bic.w	r2, r3, #15
 80026ea:	498c      	ldr	r1, [pc, #560]	@ (800291c <HAL_RCC_ClockConfig+0x260>)
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	4313      	orrs	r3, r2
 80026f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026f2:	4b8a      	ldr	r3, [pc, #552]	@ (800291c <HAL_RCC_ClockConfig+0x260>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f003 030f 	and.w	r3, r3, #15
 80026fa:	683a      	ldr	r2, [r7, #0]
 80026fc:	429a      	cmp	r2, r3
 80026fe:	d001      	beq.n	8002704 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002700:	2301      	movs	r3, #1
 8002702:	e106      	b.n	8002912 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f003 0301 	and.w	r3, r3, #1
 800270c:	2b00      	cmp	r3, #0
 800270e:	d073      	beq.n	80027f8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	2b03      	cmp	r3, #3
 8002716:	d129      	bne.n	800276c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002718:	4b81      	ldr	r3, [pc, #516]	@ (8002920 <HAL_RCC_ClockConfig+0x264>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002720:	2b00      	cmp	r3, #0
 8002722:	d101      	bne.n	8002728 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002724:	2301      	movs	r3, #1
 8002726:	e0f4      	b.n	8002912 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002728:	f000 f99e 	bl	8002a68 <RCC_GetSysClockFreqFromPLLSource>
 800272c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	4a7c      	ldr	r2, [pc, #496]	@ (8002924 <HAL_RCC_ClockConfig+0x268>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d93f      	bls.n	80027b6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002736:	4b7a      	ldr	r3, [pc, #488]	@ (8002920 <HAL_RCC_ClockConfig+0x264>)
 8002738:	689b      	ldr	r3, [r3, #8]
 800273a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800273e:	2b00      	cmp	r3, #0
 8002740:	d009      	beq.n	8002756 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800274a:	2b00      	cmp	r3, #0
 800274c:	d033      	beq.n	80027b6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002752:	2b00      	cmp	r3, #0
 8002754:	d12f      	bne.n	80027b6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002756:	4b72      	ldr	r3, [pc, #456]	@ (8002920 <HAL_RCC_ClockConfig+0x264>)
 8002758:	689b      	ldr	r3, [r3, #8]
 800275a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800275e:	4a70      	ldr	r2, [pc, #448]	@ (8002920 <HAL_RCC_ClockConfig+0x264>)
 8002760:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002764:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002766:	2380      	movs	r3, #128	@ 0x80
 8002768:	617b      	str	r3, [r7, #20]
 800276a:	e024      	b.n	80027b6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	2b02      	cmp	r3, #2
 8002772:	d107      	bne.n	8002784 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002774:	4b6a      	ldr	r3, [pc, #424]	@ (8002920 <HAL_RCC_ClockConfig+0x264>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800277c:	2b00      	cmp	r3, #0
 800277e:	d109      	bne.n	8002794 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002780:	2301      	movs	r3, #1
 8002782:	e0c6      	b.n	8002912 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002784:	4b66      	ldr	r3, [pc, #408]	@ (8002920 <HAL_RCC_ClockConfig+0x264>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800278c:	2b00      	cmp	r3, #0
 800278e:	d101      	bne.n	8002794 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002790:	2301      	movs	r3, #1
 8002792:	e0be      	b.n	8002912 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002794:	f000 f8ce 	bl	8002934 <HAL_RCC_GetSysClockFreq>
 8002798:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800279a:	693b      	ldr	r3, [r7, #16]
 800279c:	4a61      	ldr	r2, [pc, #388]	@ (8002924 <HAL_RCC_ClockConfig+0x268>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d909      	bls.n	80027b6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80027a2:	4b5f      	ldr	r3, [pc, #380]	@ (8002920 <HAL_RCC_ClockConfig+0x264>)
 80027a4:	689b      	ldr	r3, [r3, #8]
 80027a6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80027aa:	4a5d      	ldr	r2, [pc, #372]	@ (8002920 <HAL_RCC_ClockConfig+0x264>)
 80027ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80027b0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80027b2:	2380      	movs	r3, #128	@ 0x80
 80027b4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80027b6:	4b5a      	ldr	r3, [pc, #360]	@ (8002920 <HAL_RCC_ClockConfig+0x264>)
 80027b8:	689b      	ldr	r3, [r3, #8]
 80027ba:	f023 0203 	bic.w	r2, r3, #3
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	4957      	ldr	r1, [pc, #348]	@ (8002920 <HAL_RCC_ClockConfig+0x264>)
 80027c4:	4313      	orrs	r3, r2
 80027c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027c8:	f7fe fdb2 	bl	8001330 <HAL_GetTick>
 80027cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027ce:	e00a      	b.n	80027e6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027d0:	f7fe fdae 	bl	8001330 <HAL_GetTick>
 80027d4:	4602      	mov	r2, r0
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	1ad3      	subs	r3, r2, r3
 80027da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027de:	4293      	cmp	r3, r2
 80027e0:	d901      	bls.n	80027e6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80027e2:	2303      	movs	r3, #3
 80027e4:	e095      	b.n	8002912 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027e6:	4b4e      	ldr	r3, [pc, #312]	@ (8002920 <HAL_RCC_ClockConfig+0x264>)
 80027e8:	689b      	ldr	r3, [r3, #8]
 80027ea:	f003 020c 	and.w	r2, r3, #12
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	009b      	lsls	r3, r3, #2
 80027f4:	429a      	cmp	r2, r3
 80027f6:	d1eb      	bne.n	80027d0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f003 0302 	and.w	r3, r3, #2
 8002800:	2b00      	cmp	r3, #0
 8002802:	d023      	beq.n	800284c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f003 0304 	and.w	r3, r3, #4
 800280c:	2b00      	cmp	r3, #0
 800280e:	d005      	beq.n	800281c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002810:	4b43      	ldr	r3, [pc, #268]	@ (8002920 <HAL_RCC_ClockConfig+0x264>)
 8002812:	689b      	ldr	r3, [r3, #8]
 8002814:	4a42      	ldr	r2, [pc, #264]	@ (8002920 <HAL_RCC_ClockConfig+0x264>)
 8002816:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800281a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f003 0308 	and.w	r3, r3, #8
 8002824:	2b00      	cmp	r3, #0
 8002826:	d007      	beq.n	8002838 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002828:	4b3d      	ldr	r3, [pc, #244]	@ (8002920 <HAL_RCC_ClockConfig+0x264>)
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002830:	4a3b      	ldr	r2, [pc, #236]	@ (8002920 <HAL_RCC_ClockConfig+0x264>)
 8002832:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002836:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002838:	4b39      	ldr	r3, [pc, #228]	@ (8002920 <HAL_RCC_ClockConfig+0x264>)
 800283a:	689b      	ldr	r3, [r3, #8]
 800283c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	689b      	ldr	r3, [r3, #8]
 8002844:	4936      	ldr	r1, [pc, #216]	@ (8002920 <HAL_RCC_ClockConfig+0x264>)
 8002846:	4313      	orrs	r3, r2
 8002848:	608b      	str	r3, [r1, #8]
 800284a:	e008      	b.n	800285e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	2b80      	cmp	r3, #128	@ 0x80
 8002850:	d105      	bne.n	800285e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002852:	4b33      	ldr	r3, [pc, #204]	@ (8002920 <HAL_RCC_ClockConfig+0x264>)
 8002854:	689b      	ldr	r3, [r3, #8]
 8002856:	4a32      	ldr	r2, [pc, #200]	@ (8002920 <HAL_RCC_ClockConfig+0x264>)
 8002858:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800285c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800285e:	4b2f      	ldr	r3, [pc, #188]	@ (800291c <HAL_RCC_ClockConfig+0x260>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f003 030f 	and.w	r3, r3, #15
 8002866:	683a      	ldr	r2, [r7, #0]
 8002868:	429a      	cmp	r2, r3
 800286a:	d21d      	bcs.n	80028a8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800286c:	4b2b      	ldr	r3, [pc, #172]	@ (800291c <HAL_RCC_ClockConfig+0x260>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f023 020f 	bic.w	r2, r3, #15
 8002874:	4929      	ldr	r1, [pc, #164]	@ (800291c <HAL_RCC_ClockConfig+0x260>)
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	4313      	orrs	r3, r2
 800287a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800287c:	f7fe fd58 	bl	8001330 <HAL_GetTick>
 8002880:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002882:	e00a      	b.n	800289a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002884:	f7fe fd54 	bl	8001330 <HAL_GetTick>
 8002888:	4602      	mov	r2, r0
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	1ad3      	subs	r3, r2, r3
 800288e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002892:	4293      	cmp	r3, r2
 8002894:	d901      	bls.n	800289a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002896:	2303      	movs	r3, #3
 8002898:	e03b      	b.n	8002912 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800289a:	4b20      	ldr	r3, [pc, #128]	@ (800291c <HAL_RCC_ClockConfig+0x260>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f003 030f 	and.w	r3, r3, #15
 80028a2:	683a      	ldr	r2, [r7, #0]
 80028a4:	429a      	cmp	r2, r3
 80028a6:	d1ed      	bne.n	8002884 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f003 0304 	and.w	r3, r3, #4
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d008      	beq.n	80028c6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028b4:	4b1a      	ldr	r3, [pc, #104]	@ (8002920 <HAL_RCC_ClockConfig+0x264>)
 80028b6:	689b      	ldr	r3, [r3, #8]
 80028b8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	68db      	ldr	r3, [r3, #12]
 80028c0:	4917      	ldr	r1, [pc, #92]	@ (8002920 <HAL_RCC_ClockConfig+0x264>)
 80028c2:	4313      	orrs	r3, r2
 80028c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f003 0308 	and.w	r3, r3, #8
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d009      	beq.n	80028e6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80028d2:	4b13      	ldr	r3, [pc, #76]	@ (8002920 <HAL_RCC_ClockConfig+0x264>)
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	691b      	ldr	r3, [r3, #16]
 80028de:	00db      	lsls	r3, r3, #3
 80028e0:	490f      	ldr	r1, [pc, #60]	@ (8002920 <HAL_RCC_ClockConfig+0x264>)
 80028e2:	4313      	orrs	r3, r2
 80028e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80028e6:	f000 f825 	bl	8002934 <HAL_RCC_GetSysClockFreq>
 80028ea:	4602      	mov	r2, r0
 80028ec:	4b0c      	ldr	r3, [pc, #48]	@ (8002920 <HAL_RCC_ClockConfig+0x264>)
 80028ee:	689b      	ldr	r3, [r3, #8]
 80028f0:	091b      	lsrs	r3, r3, #4
 80028f2:	f003 030f 	and.w	r3, r3, #15
 80028f6:	490c      	ldr	r1, [pc, #48]	@ (8002928 <HAL_RCC_ClockConfig+0x26c>)
 80028f8:	5ccb      	ldrb	r3, [r1, r3]
 80028fa:	f003 031f 	and.w	r3, r3, #31
 80028fe:	fa22 f303 	lsr.w	r3, r2, r3
 8002902:	4a0a      	ldr	r2, [pc, #40]	@ (800292c <HAL_RCC_ClockConfig+0x270>)
 8002904:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002906:	4b0a      	ldr	r3, [pc, #40]	@ (8002930 <HAL_RCC_ClockConfig+0x274>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4618      	mov	r0, r3
 800290c:	f7fe fcc4 	bl	8001298 <HAL_InitTick>
 8002910:	4603      	mov	r3, r0
}
 8002912:	4618      	mov	r0, r3
 8002914:	3718      	adds	r7, #24
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}
 800291a:	bf00      	nop
 800291c:	40022000 	.word	0x40022000
 8002920:	40021000 	.word	0x40021000
 8002924:	04c4b400 	.word	0x04c4b400
 8002928:	08006f74 	.word	0x08006f74
 800292c:	20000200 	.word	0x20000200
 8002930:	20000204 	.word	0x20000204

08002934 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002934:	b480      	push	{r7}
 8002936:	b087      	sub	sp, #28
 8002938:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800293a:	4b2c      	ldr	r3, [pc, #176]	@ (80029ec <HAL_RCC_GetSysClockFreq+0xb8>)
 800293c:	689b      	ldr	r3, [r3, #8]
 800293e:	f003 030c 	and.w	r3, r3, #12
 8002942:	2b04      	cmp	r3, #4
 8002944:	d102      	bne.n	800294c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002946:	4b2a      	ldr	r3, [pc, #168]	@ (80029f0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002948:	613b      	str	r3, [r7, #16]
 800294a:	e047      	b.n	80029dc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800294c:	4b27      	ldr	r3, [pc, #156]	@ (80029ec <HAL_RCC_GetSysClockFreq+0xb8>)
 800294e:	689b      	ldr	r3, [r3, #8]
 8002950:	f003 030c 	and.w	r3, r3, #12
 8002954:	2b08      	cmp	r3, #8
 8002956:	d102      	bne.n	800295e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002958:	4b26      	ldr	r3, [pc, #152]	@ (80029f4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800295a:	613b      	str	r3, [r7, #16]
 800295c:	e03e      	b.n	80029dc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800295e:	4b23      	ldr	r3, [pc, #140]	@ (80029ec <HAL_RCC_GetSysClockFreq+0xb8>)
 8002960:	689b      	ldr	r3, [r3, #8]
 8002962:	f003 030c 	and.w	r3, r3, #12
 8002966:	2b0c      	cmp	r3, #12
 8002968:	d136      	bne.n	80029d8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800296a:	4b20      	ldr	r3, [pc, #128]	@ (80029ec <HAL_RCC_GetSysClockFreq+0xb8>)
 800296c:	68db      	ldr	r3, [r3, #12]
 800296e:	f003 0303 	and.w	r3, r3, #3
 8002972:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002974:	4b1d      	ldr	r3, [pc, #116]	@ (80029ec <HAL_RCC_GetSysClockFreq+0xb8>)
 8002976:	68db      	ldr	r3, [r3, #12]
 8002978:	091b      	lsrs	r3, r3, #4
 800297a:	f003 030f 	and.w	r3, r3, #15
 800297e:	3301      	adds	r3, #1
 8002980:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	2b03      	cmp	r3, #3
 8002986:	d10c      	bne.n	80029a2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002988:	4a1a      	ldr	r2, [pc, #104]	@ (80029f4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800298a:	68bb      	ldr	r3, [r7, #8]
 800298c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002990:	4a16      	ldr	r2, [pc, #88]	@ (80029ec <HAL_RCC_GetSysClockFreq+0xb8>)
 8002992:	68d2      	ldr	r2, [r2, #12]
 8002994:	0a12      	lsrs	r2, r2, #8
 8002996:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800299a:	fb02 f303 	mul.w	r3, r2, r3
 800299e:	617b      	str	r3, [r7, #20]
      break;
 80029a0:	e00c      	b.n	80029bc <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80029a2:	4a13      	ldr	r2, [pc, #76]	@ (80029f0 <HAL_RCC_GetSysClockFreq+0xbc>)
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80029aa:	4a10      	ldr	r2, [pc, #64]	@ (80029ec <HAL_RCC_GetSysClockFreq+0xb8>)
 80029ac:	68d2      	ldr	r2, [r2, #12]
 80029ae:	0a12      	lsrs	r2, r2, #8
 80029b0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80029b4:	fb02 f303 	mul.w	r3, r2, r3
 80029b8:	617b      	str	r3, [r7, #20]
      break;
 80029ba:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80029bc:	4b0b      	ldr	r3, [pc, #44]	@ (80029ec <HAL_RCC_GetSysClockFreq+0xb8>)
 80029be:	68db      	ldr	r3, [r3, #12]
 80029c0:	0e5b      	lsrs	r3, r3, #25
 80029c2:	f003 0303 	and.w	r3, r3, #3
 80029c6:	3301      	adds	r3, #1
 80029c8:	005b      	lsls	r3, r3, #1
 80029ca:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80029cc:	697a      	ldr	r2, [r7, #20]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80029d4:	613b      	str	r3, [r7, #16]
 80029d6:	e001      	b.n	80029dc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80029d8:	2300      	movs	r3, #0
 80029da:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80029dc:	693b      	ldr	r3, [r7, #16]
}
 80029de:	4618      	mov	r0, r3
 80029e0:	371c      	adds	r7, #28
 80029e2:	46bd      	mov	sp, r7
 80029e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e8:	4770      	bx	lr
 80029ea:	bf00      	nop
 80029ec:	40021000 	.word	0x40021000
 80029f0:	00f42400 	.word	0x00f42400
 80029f4:	016e3600 	.word	0x016e3600

080029f8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029f8:	b480      	push	{r7}
 80029fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80029fc:	4b03      	ldr	r3, [pc, #12]	@ (8002a0c <HAL_RCC_GetHCLKFreq+0x14>)
 80029fe:	681b      	ldr	r3, [r3, #0]
}
 8002a00:	4618      	mov	r0, r3
 8002a02:	46bd      	mov	sp, r7
 8002a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a08:	4770      	bx	lr
 8002a0a:	bf00      	nop
 8002a0c:	20000200 	.word	0x20000200

08002a10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002a14:	f7ff fff0 	bl	80029f8 <HAL_RCC_GetHCLKFreq>
 8002a18:	4602      	mov	r2, r0
 8002a1a:	4b06      	ldr	r3, [pc, #24]	@ (8002a34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a1c:	689b      	ldr	r3, [r3, #8]
 8002a1e:	0a1b      	lsrs	r3, r3, #8
 8002a20:	f003 0307 	and.w	r3, r3, #7
 8002a24:	4904      	ldr	r1, [pc, #16]	@ (8002a38 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002a26:	5ccb      	ldrb	r3, [r1, r3]
 8002a28:	f003 031f 	and.w	r3, r3, #31
 8002a2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	bd80      	pop	{r7, pc}
 8002a34:	40021000 	.word	0x40021000
 8002a38:	08006f84 	.word	0x08006f84

08002a3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002a40:	f7ff ffda 	bl	80029f8 <HAL_RCC_GetHCLKFreq>
 8002a44:	4602      	mov	r2, r0
 8002a46:	4b06      	ldr	r3, [pc, #24]	@ (8002a60 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a48:	689b      	ldr	r3, [r3, #8]
 8002a4a:	0adb      	lsrs	r3, r3, #11
 8002a4c:	f003 0307 	and.w	r3, r3, #7
 8002a50:	4904      	ldr	r1, [pc, #16]	@ (8002a64 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002a52:	5ccb      	ldrb	r3, [r1, r3]
 8002a54:	f003 031f 	and.w	r3, r3, #31
 8002a58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	bd80      	pop	{r7, pc}
 8002a60:	40021000 	.word	0x40021000
 8002a64:	08006f84 	.word	0x08006f84

08002a68 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b087      	sub	sp, #28
 8002a6c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002a6e:	4b1e      	ldr	r3, [pc, #120]	@ (8002ae8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002a70:	68db      	ldr	r3, [r3, #12]
 8002a72:	f003 0303 	and.w	r3, r3, #3
 8002a76:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002a78:	4b1b      	ldr	r3, [pc, #108]	@ (8002ae8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002a7a:	68db      	ldr	r3, [r3, #12]
 8002a7c:	091b      	lsrs	r3, r3, #4
 8002a7e:	f003 030f 	and.w	r3, r3, #15
 8002a82:	3301      	adds	r3, #1
 8002a84:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002a86:	693b      	ldr	r3, [r7, #16]
 8002a88:	2b03      	cmp	r3, #3
 8002a8a:	d10c      	bne.n	8002aa6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002a8c:	4a17      	ldr	r2, [pc, #92]	@ (8002aec <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a94:	4a14      	ldr	r2, [pc, #80]	@ (8002ae8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002a96:	68d2      	ldr	r2, [r2, #12]
 8002a98:	0a12      	lsrs	r2, r2, #8
 8002a9a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002a9e:	fb02 f303 	mul.w	r3, r2, r3
 8002aa2:	617b      	str	r3, [r7, #20]
    break;
 8002aa4:	e00c      	b.n	8002ac0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002aa6:	4a12      	ldr	r2, [pc, #72]	@ (8002af0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8002aae:	4a0e      	ldr	r2, [pc, #56]	@ (8002ae8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002ab0:	68d2      	ldr	r2, [r2, #12]
 8002ab2:	0a12      	lsrs	r2, r2, #8
 8002ab4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002ab8:	fb02 f303 	mul.w	r3, r2, r3
 8002abc:	617b      	str	r3, [r7, #20]
    break;
 8002abe:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002ac0:	4b09      	ldr	r3, [pc, #36]	@ (8002ae8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002ac2:	68db      	ldr	r3, [r3, #12]
 8002ac4:	0e5b      	lsrs	r3, r3, #25
 8002ac6:	f003 0303 	and.w	r3, r3, #3
 8002aca:	3301      	adds	r3, #1
 8002acc:	005b      	lsls	r3, r3, #1
 8002ace:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002ad0:	697a      	ldr	r2, [r7, #20]
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ad8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002ada:	687b      	ldr	r3, [r7, #4]
}
 8002adc:	4618      	mov	r0, r3
 8002ade:	371c      	adds	r7, #28
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae6:	4770      	bx	lr
 8002ae8:	40021000 	.word	0x40021000
 8002aec:	016e3600 	.word	0x016e3600
 8002af0:	00f42400 	.word	0x00f42400

08002af4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b086      	sub	sp, #24
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002afc:	2300      	movs	r3, #0
 8002afe:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002b00:	2300      	movs	r3, #0
 8002b02:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	f000 8098 	beq.w	8002c42 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b12:	2300      	movs	r3, #0
 8002b14:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b16:	4b43      	ldr	r3, [pc, #268]	@ (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d10d      	bne.n	8002b3e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b22:	4b40      	ldr	r3, [pc, #256]	@ (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b26:	4a3f      	ldr	r2, [pc, #252]	@ (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b28:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b2c:	6593      	str	r3, [r2, #88]	@ 0x58
 8002b2e:	4b3d      	ldr	r3, [pc, #244]	@ (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b36:	60bb      	str	r3, [r7, #8]
 8002b38:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b3e:	4b3a      	ldr	r3, [pc, #232]	@ (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4a39      	ldr	r2, [pc, #228]	@ (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002b44:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b48:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002b4a:	f7fe fbf1 	bl	8001330 <HAL_GetTick>
 8002b4e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002b50:	e009      	b.n	8002b66 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b52:	f7fe fbed 	bl	8001330 <HAL_GetTick>
 8002b56:	4602      	mov	r2, r0
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	1ad3      	subs	r3, r2, r3
 8002b5c:	2b02      	cmp	r3, #2
 8002b5e:	d902      	bls.n	8002b66 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002b60:	2303      	movs	r3, #3
 8002b62:	74fb      	strb	r3, [r7, #19]
        break;
 8002b64:	e005      	b.n	8002b72 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002b66:	4b30      	ldr	r3, [pc, #192]	@ (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d0ef      	beq.n	8002b52 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002b72:	7cfb      	ldrb	r3, [r7, #19]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d159      	bne.n	8002c2c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002b78:	4b2a      	ldr	r3, [pc, #168]	@ (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b7e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002b82:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d01e      	beq.n	8002bc8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b8e:	697a      	ldr	r2, [r7, #20]
 8002b90:	429a      	cmp	r2, r3
 8002b92:	d019      	beq.n	8002bc8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002b94:	4b23      	ldr	r3, [pc, #140]	@ (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b9a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002b9e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002ba0:	4b20      	ldr	r3, [pc, #128]	@ (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ba2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ba6:	4a1f      	ldr	r2, [pc, #124]	@ (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ba8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002bac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002bb0:	4b1c      	ldr	r3, [pc, #112]	@ (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002bb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bb6:	4a1b      	ldr	r2, [pc, #108]	@ (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002bb8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002bbc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002bc0:	4a18      	ldr	r2, [pc, #96]	@ (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002bc2:	697b      	ldr	r3, [r7, #20]
 8002bc4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002bc8:	697b      	ldr	r3, [r7, #20]
 8002bca:	f003 0301 	and.w	r3, r3, #1
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d016      	beq.n	8002c00 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bd2:	f7fe fbad 	bl	8001330 <HAL_GetTick>
 8002bd6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002bd8:	e00b      	b.n	8002bf2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bda:	f7fe fba9 	bl	8001330 <HAL_GetTick>
 8002bde:	4602      	mov	r2, r0
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	1ad3      	subs	r3, r2, r3
 8002be4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d902      	bls.n	8002bf2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002bec:	2303      	movs	r3, #3
 8002bee:	74fb      	strb	r3, [r7, #19]
            break;
 8002bf0:	e006      	b.n	8002c00 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002bf2:	4b0c      	ldr	r3, [pc, #48]	@ (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002bf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bf8:	f003 0302 	and.w	r3, r3, #2
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d0ec      	beq.n	8002bda <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002c00:	7cfb      	ldrb	r3, [r7, #19]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d10b      	bne.n	8002c1e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c06:	4b07      	ldr	r3, [pc, #28]	@ (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c08:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c0c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c14:	4903      	ldr	r1, [pc, #12]	@ (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c16:	4313      	orrs	r3, r2
 8002c18:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002c1c:	e008      	b.n	8002c30 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002c1e:	7cfb      	ldrb	r3, [r7, #19]
 8002c20:	74bb      	strb	r3, [r7, #18]
 8002c22:	e005      	b.n	8002c30 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002c24:	40021000 	.word	0x40021000
 8002c28:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c2c:	7cfb      	ldrb	r3, [r7, #19]
 8002c2e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c30:	7c7b      	ldrb	r3, [r7, #17]
 8002c32:	2b01      	cmp	r3, #1
 8002c34:	d105      	bne.n	8002c42 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c36:	4ba7      	ldr	r3, [pc, #668]	@ (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c3a:	4aa6      	ldr	r2, [pc, #664]	@ (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c3c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002c40:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f003 0301 	and.w	r3, r3, #1
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d00a      	beq.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002c4e:	4ba1      	ldr	r3, [pc, #644]	@ (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c54:	f023 0203 	bic.w	r2, r3, #3
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	499d      	ldr	r1, [pc, #628]	@ (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f003 0302 	and.w	r3, r3, #2
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d00a      	beq.n	8002c86 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002c70:	4b98      	ldr	r3, [pc, #608]	@ (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c76:	f023 020c 	bic.w	r2, r3, #12
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	689b      	ldr	r3, [r3, #8]
 8002c7e:	4995      	ldr	r1, [pc, #596]	@ (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c80:	4313      	orrs	r3, r2
 8002c82:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f003 0304 	and.w	r3, r3, #4
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d00a      	beq.n	8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002c92:	4b90      	ldr	r3, [pc, #576]	@ (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c98:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	68db      	ldr	r3, [r3, #12]
 8002ca0:	498c      	ldr	r1, [pc, #560]	@ (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f003 0308 	and.w	r3, r3, #8
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d00a      	beq.n	8002cca <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002cb4:	4b87      	ldr	r3, [pc, #540]	@ (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002cb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cba:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	691b      	ldr	r3, [r3, #16]
 8002cc2:	4984      	ldr	r1, [pc, #528]	@ (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f003 0310 	and.w	r3, r3, #16
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d00a      	beq.n	8002cec <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002cd6:	4b7f      	ldr	r3, [pc, #508]	@ (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002cd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cdc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	695b      	ldr	r3, [r3, #20]
 8002ce4:	497b      	ldr	r1, [pc, #492]	@ (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f003 0320 	and.w	r3, r3, #32
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d00a      	beq.n	8002d0e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002cf8:	4b76      	ldr	r3, [pc, #472]	@ (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002cfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cfe:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	699b      	ldr	r3, [r3, #24]
 8002d06:	4973      	ldr	r1, [pc, #460]	@ (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d00a      	beq.n	8002d30 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002d1a:	4b6e      	ldr	r3, [pc, #440]	@ (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d20:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	69db      	ldr	r3, [r3, #28]
 8002d28:	496a      	ldr	r1, [pc, #424]	@ (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d00a      	beq.n	8002d52 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002d3c:	4b65      	ldr	r3, [pc, #404]	@ (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d42:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6a1b      	ldr	r3, [r3, #32]
 8002d4a:	4962      	ldr	r1, [pc, #392]	@ (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d00a      	beq.n	8002d74 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002d5e:	4b5d      	ldr	r3, [pc, #372]	@ (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d64:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d6c:	4959      	ldr	r1, [pc, #356]	@ (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d00a      	beq.n	8002d96 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002d80:	4b54      	ldr	r3, [pc, #336]	@ (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d82:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002d86:	f023 0203 	bic.w	r2, r3, #3
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d8e:	4951      	ldr	r1, [pc, #324]	@ (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d90:	4313      	orrs	r3, r2
 8002d92:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d00a      	beq.n	8002db8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002da2:	4b4c      	ldr	r3, [pc, #304]	@ (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002da4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002da8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002db0:	4948      	ldr	r1, [pc, #288]	@ (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002db2:	4313      	orrs	r3, r2
 8002db4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d015      	beq.n	8002df0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002dc4:	4b43      	ldr	r3, [pc, #268]	@ (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002dc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002dca:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dd2:	4940      	ldr	r1, [pc, #256]	@ (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dde:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002de2:	d105      	bne.n	8002df0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002de4:	4b3b      	ldr	r3, [pc, #236]	@ (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002de6:	68db      	ldr	r3, [r3, #12]
 8002de8:	4a3a      	ldr	r2, [pc, #232]	@ (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002dea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002dee:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d015      	beq.n	8002e28 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002dfc:	4b35      	ldr	r3, [pc, #212]	@ (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002dfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e02:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e0a:	4932      	ldr	r1, [pc, #200]	@ (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e16:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002e1a:	d105      	bne.n	8002e28 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e1c:	4b2d      	ldr	r3, [pc, #180]	@ (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e1e:	68db      	ldr	r3, [r3, #12]
 8002e20:	4a2c      	ldr	r2, [pc, #176]	@ (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e22:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002e26:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d015      	beq.n	8002e60 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002e34:	4b27      	ldr	r3, [pc, #156]	@ (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e3a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e42:	4924      	ldr	r1, [pc, #144]	@ (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e44:	4313      	orrs	r3, r2
 8002e46:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e4e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002e52:	d105      	bne.n	8002e60 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e54:	4b1f      	ldr	r3, [pc, #124]	@ (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e56:	68db      	ldr	r3, [r3, #12]
 8002e58:	4a1e      	ldr	r2, [pc, #120]	@ (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e5a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002e5e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d015      	beq.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002e6c:	4b19      	ldr	r3, [pc, #100]	@ (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e72:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e7a:	4916      	ldr	r1, [pc, #88]	@ (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e86:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002e8a:	d105      	bne.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e8c:	4b11      	ldr	r3, [pc, #68]	@ (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e8e:	68db      	ldr	r3, [r3, #12]
 8002e90:	4a10      	ldr	r2, [pc, #64]	@ (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e92:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002e96:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d019      	beq.n	8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002ea4:	4b0b      	ldr	r3, [pc, #44]	@ (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ea6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002eaa:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eb2:	4908      	ldr	r1, [pc, #32]	@ (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ebe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002ec2:	d109      	bne.n	8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ec4:	4b03      	ldr	r3, [pc, #12]	@ (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ec6:	68db      	ldr	r3, [r3, #12]
 8002ec8:	4a02      	ldr	r2, [pc, #8]	@ (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002eca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002ece:	60d3      	str	r3, [r2, #12]
 8002ed0:	e002      	b.n	8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8002ed2:	bf00      	nop
 8002ed4:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d015      	beq.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002ee4:	4b29      	ldr	r3, [pc, #164]	@ (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002ee6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002eea:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ef2:	4926      	ldr	r1, [pc, #152]	@ (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002efe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002f02:	d105      	bne.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002f04:	4b21      	ldr	r3, [pc, #132]	@ (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002f06:	68db      	ldr	r3, [r3, #12]
 8002f08:	4a20      	ldr	r2, [pc, #128]	@ (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002f0a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f0e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d015      	beq.n	8002f48 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8002f1c:	4b1b      	ldr	r3, [pc, #108]	@ (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002f1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f22:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f2a:	4918      	ldr	r1, [pc, #96]	@ (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f36:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f3a:	d105      	bne.n	8002f48 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002f3c:	4b13      	ldr	r3, [pc, #76]	@ (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002f3e:	68db      	ldr	r3, [r3, #12]
 8002f40:	4a12      	ldr	r2, [pc, #72]	@ (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002f42:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f46:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d015      	beq.n	8002f80 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002f54:	4b0d      	ldr	r3, [pc, #52]	@ (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002f56:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002f5a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f62:	490a      	ldr	r1, [pc, #40]	@ (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002f64:	4313      	orrs	r3, r2
 8002f66:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f6e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002f72:	d105      	bne.n	8002f80 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f74:	4b05      	ldr	r3, [pc, #20]	@ (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002f76:	68db      	ldr	r3, [r3, #12]
 8002f78:	4a04      	ldr	r2, [pc, #16]	@ (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002f7a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002f7e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002f80:	7cbb      	ldrb	r3, [r7, #18]
}
 8002f82:	4618      	mov	r0, r3
 8002f84:	3718      	adds	r7, #24
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bd80      	pop	{r7, pc}
 8002f8a:	bf00      	nop
 8002f8c:	40021000 	.word	0x40021000

08002f90 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b082      	sub	sp, #8
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d101      	bne.n	8002fa2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e054      	b.n	800304c <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002fa8:	b2db      	uxtb	r3, r3
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d111      	bne.n	8002fd2 <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8002fb6:	6878      	ldr	r0, [r7, #4]
 8002fb8:	f001 f9e6 	bl	8004388 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d102      	bne.n	8002fca <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	4a23      	ldr	r2, [pc, #140]	@ (8003054 <HAL_TIM_Base_Init+0xc4>)
 8002fc8:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fce:	6878      	ldr	r0, [r7, #4]
 8002fd0:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2202      	movs	r2, #2
 8002fd6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681a      	ldr	r2, [r3, #0]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	3304      	adds	r3, #4
 8002fe2:	4619      	mov	r1, r3
 8002fe4:	4610      	mov	r0, r2
 8002fe6:	f000 fdcb 	bl	8003b80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2201      	movs	r2, #1
 8002fee:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2201      	movs	r2, #1
 8002ff6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2201      	movs	r2, #1
 8002ffe:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2201      	movs	r2, #1
 8003006:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2201      	movs	r2, #1
 800300e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2201      	movs	r2, #1
 8003016:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2201      	movs	r2, #1
 800301e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2201      	movs	r2, #1
 8003026:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2201      	movs	r2, #1
 800302e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2201      	movs	r2, #1
 8003036:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2201      	movs	r2, #1
 800303e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2201      	movs	r2, #1
 8003046:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800304a:	2300      	movs	r3, #0
}
 800304c:	4618      	mov	r0, r3
 800304e:	3708      	adds	r7, #8
 8003050:	46bd      	mov	sp, r7
 8003052:	bd80      	pop	{r7, pc}
 8003054:	08000fe1 	.word	0x08000fe1

08003058 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003058:	b480      	push	{r7}
 800305a:	b085      	sub	sp, #20
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003066:	b2db      	uxtb	r3, r3
 8003068:	2b01      	cmp	r3, #1
 800306a:	d001      	beq.n	8003070 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800306c:	2301      	movs	r3, #1
 800306e:	e054      	b.n	800311a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2202      	movs	r2, #2
 8003074:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	68da      	ldr	r2, [r3, #12]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f042 0201 	orr.w	r2, r2, #1
 8003086:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a26      	ldr	r2, [pc, #152]	@ (8003128 <HAL_TIM_Base_Start_IT+0xd0>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d022      	beq.n	80030d8 <HAL_TIM_Base_Start_IT+0x80>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800309a:	d01d      	beq.n	80030d8 <HAL_TIM_Base_Start_IT+0x80>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a22      	ldr	r2, [pc, #136]	@ (800312c <HAL_TIM_Base_Start_IT+0xd4>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d018      	beq.n	80030d8 <HAL_TIM_Base_Start_IT+0x80>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a21      	ldr	r2, [pc, #132]	@ (8003130 <HAL_TIM_Base_Start_IT+0xd8>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d013      	beq.n	80030d8 <HAL_TIM_Base_Start_IT+0x80>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a1f      	ldr	r2, [pc, #124]	@ (8003134 <HAL_TIM_Base_Start_IT+0xdc>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d00e      	beq.n	80030d8 <HAL_TIM_Base_Start_IT+0x80>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4a1e      	ldr	r2, [pc, #120]	@ (8003138 <HAL_TIM_Base_Start_IT+0xe0>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d009      	beq.n	80030d8 <HAL_TIM_Base_Start_IT+0x80>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a1c      	ldr	r2, [pc, #112]	@ (800313c <HAL_TIM_Base_Start_IT+0xe4>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d004      	beq.n	80030d8 <HAL_TIM_Base_Start_IT+0x80>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a1b      	ldr	r2, [pc, #108]	@ (8003140 <HAL_TIM_Base_Start_IT+0xe8>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d115      	bne.n	8003104 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	689a      	ldr	r2, [r3, #8]
 80030de:	4b19      	ldr	r3, [pc, #100]	@ (8003144 <HAL_TIM_Base_Start_IT+0xec>)
 80030e0:	4013      	ands	r3, r2
 80030e2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	2b06      	cmp	r3, #6
 80030e8:	d015      	beq.n	8003116 <HAL_TIM_Base_Start_IT+0xbe>
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80030f0:	d011      	beq.n	8003116 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	681a      	ldr	r2, [r3, #0]
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f042 0201 	orr.w	r2, r2, #1
 8003100:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003102:	e008      	b.n	8003116 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	681a      	ldr	r2, [r3, #0]
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f042 0201 	orr.w	r2, r2, #1
 8003112:	601a      	str	r2, [r3, #0]
 8003114:	e000      	b.n	8003118 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003116:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003118:	2300      	movs	r3, #0
}
 800311a:	4618      	mov	r0, r3
 800311c:	3714      	adds	r7, #20
 800311e:	46bd      	mov	sp, r7
 8003120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003124:	4770      	bx	lr
 8003126:	bf00      	nop
 8003128:	40012c00 	.word	0x40012c00
 800312c:	40000400 	.word	0x40000400
 8003130:	40000800 	.word	0x40000800
 8003134:	40000c00 	.word	0x40000c00
 8003138:	40013400 	.word	0x40013400
 800313c:	40014000 	.word	0x40014000
 8003140:	40015000 	.word	0x40015000
 8003144:	00010007 	.word	0x00010007

08003148 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b082      	sub	sp, #8
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d101      	bne.n	800315a <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8003156:	2301      	movs	r3, #1
 8003158:	e054      	b.n	8003204 <HAL_TIM_OC_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003160:	b2db      	uxtb	r3, r3
 8003162:	2b00      	cmp	r3, #0
 8003164:	d111      	bne.n	800318a <HAL_TIM_OC_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2200      	movs	r2, #0
 800316a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800316e:	6878      	ldr	r0, [r7, #4]
 8003170:	f001 f90a 	bl	8004388 <TIM_ResetCallback>

    if (htim->OC_MspInitCallback == NULL)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003178:	2b00      	cmp	r3, #0
 800317a:	d102      	bne.n	8003182 <HAL_TIM_OC_Init+0x3a>
    {
      htim->OC_MspInitCallback = HAL_TIM_OC_MspInit;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	4a23      	ldr	r2, [pc, #140]	@ (800320c <HAL_TIM_OC_Init+0xc4>)
 8003180:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003186:	6878      	ldr	r0, [r7, #4]
 8003188:	4798      	blx	r3
    HAL_TIM_OC_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2202      	movs	r2, #2
 800318e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681a      	ldr	r2, [r3, #0]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	3304      	adds	r3, #4
 800319a:	4619      	mov	r1, r3
 800319c:	4610      	mov	r0, r2
 800319e:	f000 fcef 	bl	8003b80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2201      	movs	r2, #1
 80031a6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2201      	movs	r2, #1
 80031ae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2201      	movs	r2, #1
 80031b6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2201      	movs	r2, #1
 80031be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2201      	movs	r2, #1
 80031c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2201      	movs	r2, #1
 80031ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2201      	movs	r2, #1
 80031d6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2201      	movs	r2, #1
 80031de:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2201      	movs	r2, #1
 80031e6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2201      	movs	r2, #1
 80031ee:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2201      	movs	r2, #1
 80031f6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2201      	movs	r2, #1
 80031fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003202:	2300      	movs	r3, #0
}
 8003204:	4618      	mov	r0, r3
 8003206:	3708      	adds	r7, #8
 8003208:	46bd      	mov	sp, r7
 800320a:	bd80      	pop	{r7, pc}
 800320c:	08003211 	.word	0x08003211

08003210 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8003210:	b480      	push	{r7}
 8003212:	b083      	sub	sp, #12
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8003218:	bf00      	nop
 800321a:	370c      	adds	r7, #12
 800321c:	46bd      	mov	sp, r7
 800321e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003222:	4770      	bx	lr

08003224 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b082      	sub	sp, #8
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
 800322c:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d101      	bne.n	8003238 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8003234:	2301      	movs	r3, #1
 8003236:	e04c      	b.n	80032d2 <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800323e:	b2db      	uxtb	r3, r3
 8003240:	2b00      	cmp	r3, #0
 8003242:	d111      	bne.n	8003268 <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2200      	movs	r2, #0
 8003248:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800324c:	6878      	ldr	r0, [r7, #4]
 800324e:	f001 f89b 	bl	8004388 <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003256:	2b00      	cmp	r3, #0
 8003258:	d102      	bne.n	8003260 <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	4a1f      	ldr	r2, [pc, #124]	@ (80032dc <HAL_TIM_OnePulse_Init+0xb8>)
 800325e:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003264:	6878      	ldr	r0, [r7, #4]
 8003266:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2202      	movs	r2, #2
 800326c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681a      	ldr	r2, [r3, #0]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	3304      	adds	r3, #4
 8003278:	4619      	mov	r1, r3
 800327a:	4610      	mov	r0, r2
 800327c:	f000 fc80 	bl	8003b80 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	681a      	ldr	r2, [r3, #0]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f022 0208 	bic.w	r2, r2, #8
 800328e:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	6819      	ldr	r1, [r3, #0]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	683a      	ldr	r2, [r7, #0]
 800329c:	430a      	orrs	r2, r1
 800329e:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2201      	movs	r2, #1
 80032a4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2201      	movs	r2, #1
 80032ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2201      	movs	r2, #1
 80032b4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2201      	movs	r2, #1
 80032bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2201      	movs	r2, #1
 80032c4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2201      	movs	r2, #1
 80032cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80032d0:	2300      	movs	r3, #0
}
 80032d2:	4618      	mov	r0, r3
 80032d4:	3708      	adds	r7, #8
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}
 80032da:	bf00      	nop
 80032dc:	080032e1 	.word	0x080032e1

080032e0 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 80032e0:	b480      	push	{r7}
 80032e2:	b083      	sub	sp, #12
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 80032e8:	bf00      	nop
 80032ea:	370c      	adds	r7, #12
 80032ec:	46bd      	mov	sp, r7
 80032ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f2:	4770      	bx	lr

080032f4 <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b084      	sub	sp, #16
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
 80032fc:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003304:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800330c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003314:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800331c:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800331e:	7bfb      	ldrb	r3, [r7, #15]
 8003320:	2b01      	cmp	r3, #1
 8003322:	d108      	bne.n	8003336 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003324:	7bbb      	ldrb	r3, [r7, #14]
 8003326:	2b01      	cmp	r3, #1
 8003328:	d105      	bne.n	8003336 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800332a:	7b7b      	ldrb	r3, [r7, #13]
 800332c:	2b01      	cmp	r3, #1
 800332e:	d102      	bne.n	8003336 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003330:	7b3b      	ldrb	r3, [r7, #12]
 8003332:	2b01      	cmp	r3, #1
 8003334:	d001      	beq.n	800333a <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 8003336:	2301      	movs	r3, #1
 8003338:	e059      	b.n	80033ee <HAL_TIM_OnePulse_Start_IT+0xfa>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2202      	movs	r2, #2
 800333e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2202      	movs	r2, #2
 8003346:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2202      	movs	r2, #2
 800334e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2202      	movs	r2, #2
 8003356:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	68da      	ldr	r2, [r3, #12]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f042 0202 	orr.w	r2, r2, #2
 8003368:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	68da      	ldr	r2, [r3, #12]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f042 0204 	orr.w	r2, r2, #4
 8003378:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	2201      	movs	r2, #1
 8003380:	2100      	movs	r1, #0
 8003382:	4618      	mov	r0, r3
 8003384:	f000 ffda 	bl	800433c <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	2201      	movs	r2, #1
 800338e:	2104      	movs	r1, #4
 8003390:	4618      	mov	r0, r3
 8003392:	f000 ffd3 	bl	800433c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4a17      	ldr	r2, [pc, #92]	@ (80033f8 <HAL_TIM_OnePulse_Start_IT+0x104>)
 800339c:	4293      	cmp	r3, r2
 800339e:	d018      	beq.n	80033d2 <HAL_TIM_OnePulse_Start_IT+0xde>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a15      	ldr	r2, [pc, #84]	@ (80033fc <HAL_TIM_OnePulse_Start_IT+0x108>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d013      	beq.n	80033d2 <HAL_TIM_OnePulse_Start_IT+0xde>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a14      	ldr	r2, [pc, #80]	@ (8003400 <HAL_TIM_OnePulse_Start_IT+0x10c>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d00e      	beq.n	80033d2 <HAL_TIM_OnePulse_Start_IT+0xde>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a12      	ldr	r2, [pc, #72]	@ (8003404 <HAL_TIM_OnePulse_Start_IT+0x110>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d009      	beq.n	80033d2 <HAL_TIM_OnePulse_Start_IT+0xde>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a11      	ldr	r2, [pc, #68]	@ (8003408 <HAL_TIM_OnePulse_Start_IT+0x114>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d004      	beq.n	80033d2 <HAL_TIM_OnePulse_Start_IT+0xde>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a0f      	ldr	r2, [pc, #60]	@ (800340c <HAL_TIM_OnePulse_Start_IT+0x118>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d101      	bne.n	80033d6 <HAL_TIM_OnePulse_Start_IT+0xe2>
 80033d2:	2301      	movs	r3, #1
 80033d4:	e000      	b.n	80033d8 <HAL_TIM_OnePulse_Start_IT+0xe4>
 80033d6:	2300      	movs	r3, #0
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d007      	beq.n	80033ec <HAL_TIM_OnePulse_Start_IT+0xf8>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80033ea:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80033ec:	2300      	movs	r3, #0
}
 80033ee:	4618      	mov	r0, r3
 80033f0:	3710      	adds	r7, #16
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd80      	pop	{r7, pc}
 80033f6:	bf00      	nop
 80033f8:	40012c00 	.word	0x40012c00
 80033fc:	40013400 	.word	0x40013400
 8003400:	40014000 	.word	0x40014000
 8003404:	40014400 	.word	0x40014400
 8003408:	40014800 	.word	0x40014800
 800340c:	40015000 	.word	0x40015000

08003410 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b084      	sub	sp, #16
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	68db      	ldr	r3, [r3, #12]
 800341e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	691b      	ldr	r3, [r3, #16]
 8003426:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	f003 0302 	and.w	r3, r3, #2
 800342e:	2b00      	cmp	r3, #0
 8003430:	d026      	beq.n	8003480 <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	f003 0302 	and.w	r3, r3, #2
 8003438:	2b00      	cmp	r3, #0
 800343a:	d021      	beq.n	8003480 <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f06f 0202 	mvn.w	r2, #2
 8003444:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2201      	movs	r2, #1
 800344a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	699b      	ldr	r3, [r3, #24]
 8003452:	f003 0303 	and.w	r3, r3, #3
 8003456:	2b00      	cmp	r3, #0
 8003458:	d005      	beq.n	8003466 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003460:	6878      	ldr	r0, [r7, #4]
 8003462:	4798      	blx	r3
 8003464:	e009      	b.n	800347a <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800346c:	6878      	ldr	r0, [r7, #4]
 800346e:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003476:	6878      	ldr	r0, [r7, #4]
 8003478:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2200      	movs	r2, #0
 800347e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	f003 0304 	and.w	r3, r3, #4
 8003486:	2b00      	cmp	r3, #0
 8003488:	d026      	beq.n	80034d8 <HAL_TIM_IRQHandler+0xc8>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	f003 0304 	and.w	r3, r3, #4
 8003490:	2b00      	cmp	r3, #0
 8003492:	d021      	beq.n	80034d8 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f06f 0204 	mvn.w	r2, #4
 800349c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2202      	movs	r2, #2
 80034a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	699b      	ldr	r3, [r3, #24]
 80034aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d005      	beq.n	80034be <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80034b8:	6878      	ldr	r0, [r7, #4]
 80034ba:	4798      	blx	r3
 80034bc:	e009      	b.n	80034d2 <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80034c4:	6878      	ldr	r0, [r7, #4]
 80034c6:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80034ce:	6878      	ldr	r0, [r7, #4]
 80034d0:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2200      	movs	r2, #0
 80034d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	f003 0308 	and.w	r3, r3, #8
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d026      	beq.n	8003530 <HAL_TIM_IRQHandler+0x120>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	f003 0308 	and.w	r3, r3, #8
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d021      	beq.n	8003530 <HAL_TIM_IRQHandler+0x120>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f06f 0208 	mvn.w	r2, #8
 80034f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2204      	movs	r2, #4
 80034fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	69db      	ldr	r3, [r3, #28]
 8003502:	f003 0303 	and.w	r3, r3, #3
 8003506:	2b00      	cmp	r3, #0
 8003508:	d005      	beq.n	8003516 <HAL_TIM_IRQHandler+0x106>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003510:	6878      	ldr	r0, [r7, #4]
 8003512:	4798      	blx	r3
 8003514:	e009      	b.n	800352a <HAL_TIM_IRQHandler+0x11a>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800351c:	6878      	ldr	r0, [r7, #4]
 800351e:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003526:	6878      	ldr	r0, [r7, #4]
 8003528:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2200      	movs	r2, #0
 800352e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	f003 0310 	and.w	r3, r3, #16
 8003536:	2b00      	cmp	r3, #0
 8003538:	d026      	beq.n	8003588 <HAL_TIM_IRQHandler+0x178>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	f003 0310 	and.w	r3, r3, #16
 8003540:	2b00      	cmp	r3, #0
 8003542:	d021      	beq.n	8003588 <HAL_TIM_IRQHandler+0x178>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f06f 0210 	mvn.w	r2, #16
 800354c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2208      	movs	r2, #8
 8003552:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	69db      	ldr	r3, [r3, #28]
 800355a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800355e:	2b00      	cmp	r3, #0
 8003560:	d005      	beq.n	800356e <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003568:	6878      	ldr	r0, [r7, #4]
 800356a:	4798      	blx	r3
 800356c:	e009      	b.n	8003582 <HAL_TIM_IRQHandler+0x172>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003574:	6878      	ldr	r0, [r7, #4]
 8003576:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800357e:	6878      	ldr	r0, [r7, #4]
 8003580:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2200      	movs	r2, #0
 8003586:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003588:	68bb      	ldr	r3, [r7, #8]
 800358a:	f003 0301 	and.w	r3, r3, #1
 800358e:	2b00      	cmp	r3, #0
 8003590:	d00e      	beq.n	80035b0 <HAL_TIM_IRQHandler+0x1a0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	f003 0301 	and.w	r3, r3, #1
 8003598:	2b00      	cmp	r3, #0
 800359a:	d009      	beq.n	80035b0 <HAL_TIM_IRQHandler+0x1a0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f06f 0201 	mvn.w	r2, #1
 80035a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80035ac:	6878      	ldr	r0, [r7, #4]
 80035ae:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80035b0:	68bb      	ldr	r3, [r7, #8]
 80035b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d104      	bne.n	80035c4 <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80035ba:	68bb      	ldr	r3, [r7, #8]
 80035bc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d00e      	beq.n	80035e2 <HAL_TIM_IRQHandler+0x1d2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d009      	beq.n	80035e2 <HAL_TIM_IRQHandler+0x1d2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80035d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80035de:	6878      	ldr	r0, [r7, #4]
 80035e0:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80035e2:	68bb      	ldr	r3, [r7, #8]
 80035e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d00e      	beq.n	800360a <HAL_TIM_IRQHandler+0x1fa>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d009      	beq.n	800360a <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80035fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8003606:	6878      	ldr	r0, [r7, #4]
 8003608:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800360a:	68bb      	ldr	r3, [r7, #8]
 800360c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003610:	2b00      	cmp	r3, #0
 8003612:	d00e      	beq.n	8003632 <HAL_TIM_IRQHandler+0x222>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800361a:	2b00      	cmp	r3, #0
 800361c:	d009      	beq.n	8003632 <HAL_TIM_IRQHandler+0x222>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003626:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800362e:	6878      	ldr	r0, [r7, #4]
 8003630:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003632:	68bb      	ldr	r3, [r7, #8]
 8003634:	f003 0320 	and.w	r3, r3, #32
 8003638:	2b00      	cmp	r3, #0
 800363a:	d00e      	beq.n	800365a <HAL_TIM_IRQHandler+0x24a>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	f003 0320 	and.w	r3, r3, #32
 8003642:	2b00      	cmp	r3, #0
 8003644:	d009      	beq.n	800365a <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f06f 0220 	mvn.w	r2, #32
 800364e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003656:	6878      	ldr	r0, [r7, #4]
 8003658:	4798      	blx	r3
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800365a:	68bb      	ldr	r3, [r7, #8]
 800365c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003660:	2b00      	cmp	r3, #0
 8003662:	d00e      	beq.n	8003682 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800366a:	2b00      	cmp	r3, #0
 800366c:	d009      	beq.n	8003682 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8003676:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800367e:	6878      	ldr	r0, [r7, #4]
 8003680:	4798      	blx	r3
      HAL_TIMEx_EncoderIndexCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003688:	2b00      	cmp	r3, #0
 800368a:	d00e      	beq.n	80036aa <HAL_TIM_IRQHandler+0x29a>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003692:	2b00      	cmp	r3, #0
 8003694:	d009      	beq.n	80036aa <HAL_TIM_IRQHandler+0x29a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800369e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80036a6:	6878      	ldr	r0, [r7, #4]
 80036a8:	4798      	blx	r3
      HAL_TIMEx_DirectionChangeCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80036aa:	68bb      	ldr	r3, [r7, #8]
 80036ac:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d00e      	beq.n	80036d2 <HAL_TIM_IRQHandler+0x2c2>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d009      	beq.n	80036d2 <HAL_TIM_IRQHandler+0x2c2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 80036c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80036ce:	6878      	ldr	r0, [r7, #4]
 80036d0:	4798      	blx	r3
      HAL_TIMEx_IndexErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80036d2:	68bb      	ldr	r3, [r7, #8]
 80036d4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d00e      	beq.n	80036fa <HAL_TIM_IRQHandler+0x2ea>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d009      	beq.n	80036fa <HAL_TIM_IRQHandler+0x2ea>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 80036ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80036f6:	6878      	ldr	r0, [r7, #4]
 80036f8:	4798      	blx	r3
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80036fa:	bf00      	nop
 80036fc:	3710      	adds	r7, #16
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}
	...

08003704 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b086      	sub	sp, #24
 8003708:	af00      	add	r7, sp, #0
 800370a:	60f8      	str	r0, [r7, #12]
 800370c:	60b9      	str	r1, [r7, #8]
 800370e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003710:	2300      	movs	r3, #0
 8003712:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_CHANNEL_MODE(sConfig->OCMode, Channel));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800371a:	2b01      	cmp	r3, #1
 800371c:	d101      	bne.n	8003722 <HAL_TIM_OC_ConfigChannel+0x1e>
 800371e:	2302      	movs	r3, #2
 8003720:	e066      	b.n	80037f0 <HAL_TIM_OC_ConfigChannel+0xec>
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	2201      	movs	r2, #1
 8003726:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2b14      	cmp	r3, #20
 800372e:	d857      	bhi.n	80037e0 <HAL_TIM_OC_ConfigChannel+0xdc>
 8003730:	a201      	add	r2, pc, #4	@ (adr r2, 8003738 <HAL_TIM_OC_ConfigChannel+0x34>)
 8003732:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003736:	bf00      	nop
 8003738:	0800378d 	.word	0x0800378d
 800373c:	080037e1 	.word	0x080037e1
 8003740:	080037e1 	.word	0x080037e1
 8003744:	080037e1 	.word	0x080037e1
 8003748:	0800379b 	.word	0x0800379b
 800374c:	080037e1 	.word	0x080037e1
 8003750:	080037e1 	.word	0x080037e1
 8003754:	080037e1 	.word	0x080037e1
 8003758:	080037a9 	.word	0x080037a9
 800375c:	080037e1 	.word	0x080037e1
 8003760:	080037e1 	.word	0x080037e1
 8003764:	080037e1 	.word	0x080037e1
 8003768:	080037b7 	.word	0x080037b7
 800376c:	080037e1 	.word	0x080037e1
 8003770:	080037e1 	.word	0x080037e1
 8003774:	080037e1 	.word	0x080037e1
 8003778:	080037c5 	.word	0x080037c5
 800377c:	080037e1 	.word	0x080037e1
 8003780:	080037e1 	.word	0x080037e1
 8003784:	080037e1 	.word	0x080037e1
 8003788:	080037d3 	.word	0x080037d3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	68b9      	ldr	r1, [r7, #8]
 8003792:	4618      	mov	r0, r3
 8003794:	f000 faa8 	bl	8003ce8 <TIM_OC1_SetConfig>
      break;
 8003798:	e025      	b.n	80037e6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	68b9      	ldr	r1, [r7, #8]
 80037a0:	4618      	mov	r0, r3
 80037a2:	f000 fb3b 	bl	8003e1c <TIM_OC2_SetConfig>
      break;
 80037a6:	e01e      	b.n	80037e6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	68b9      	ldr	r1, [r7, #8]
 80037ae:	4618      	mov	r0, r3
 80037b0:	f000 fbc8 	bl	8003f44 <TIM_OC3_SetConfig>
      break;
 80037b4:	e017      	b.n	80037e6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	68b9      	ldr	r1, [r7, #8]
 80037bc:	4618      	mov	r0, r3
 80037be:	f000 fc53 	bl	8004068 <TIM_OC4_SetConfig>
      break;
 80037c2:	e010      	b.n	80037e6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	68b9      	ldr	r1, [r7, #8]
 80037ca:	4618      	mov	r0, r3
 80037cc:	f000 fce0 	bl	8004190 <TIM_OC5_SetConfig>
      break;
 80037d0:	e009      	b.n	80037e6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	68b9      	ldr	r1, [r7, #8]
 80037d8:	4618      	mov	r0, r3
 80037da:	f000 fd43 	bl	8004264 <TIM_OC6_SetConfig>
      break;
 80037de:	e002      	b.n	80037e6 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 80037e0:	2301      	movs	r3, #1
 80037e2:	75fb      	strb	r3, [r7, #23]
      break;
 80037e4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	2200      	movs	r2, #0
 80037ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80037ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80037f0:	4618      	mov	r0, r3
 80037f2:	3718      	adds	r7, #24
 80037f4:	46bd      	mov	sp, r7
 80037f6:	bd80      	pop	{r7, pc}

080037f8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80037f8:	b480      	push	{r7}
 80037fa:	b083      	sub	sp, #12
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003800:	bf00      	nop
 8003802:	370c      	adds	r7, #12
 8003804:	46bd      	mov	sp, r7
 8003806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380a:	4770      	bx	lr

0800380c <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800380c:	b480      	push	{r7}
 800380e:	b083      	sub	sp, #12
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8003814:	bf00      	nop
 8003816:	370c      	adds	r7, #12
 8003818:	46bd      	mov	sp, r7
 800381a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381e:	4770      	bx	lr

08003820 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003820:	b480      	push	{r7}
 8003822:	b083      	sub	sp, #12
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003828:	bf00      	nop
 800382a:	370c      	adds	r7, #12
 800382c:	46bd      	mov	sp, r7
 800382e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003832:	4770      	bx	lr

08003834 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003834:	b480      	push	{r7}
 8003836:	b083      	sub	sp, #12
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800383c:	bf00      	nop
 800383e:	370c      	adds	r7, #12
 8003840:	46bd      	mov	sp, r7
 8003842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003846:	4770      	bx	lr

08003848 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8003848:	b480      	push	{r7}
 800384a:	b083      	sub	sp, #12
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8003850:	bf00      	nop
 8003852:	370c      	adds	r7, #12
 8003854:	46bd      	mov	sp, r7
 8003856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385a:	4770      	bx	lr

0800385c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800385c:	b480      	push	{r7}
 800385e:	b083      	sub	sp, #12
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003864:	bf00      	nop
 8003866:	370c      	adds	r7, #12
 8003868:	46bd      	mov	sp, r7
 800386a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386e:	4770      	bx	lr

08003870 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8003870:	b480      	push	{r7}
 8003872:	b083      	sub	sp, #12
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8003878:	bf00      	nop
 800387a:	370c      	adds	r7, #12
 800387c:	46bd      	mov	sp, r7
 800387e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003882:	4770      	bx	lr

08003884 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003884:	b480      	push	{r7}
 8003886:	b083      	sub	sp, #12
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800388c:	bf00      	nop
 800388e:	370c      	adds	r7, #12
 8003890:	46bd      	mov	sp, r7
 8003892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003896:	4770      	bx	lr

08003898 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8003898:	b480      	push	{r7}
 800389a:	b083      	sub	sp, #12
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 80038a0:	bf00      	nop
 80038a2:	370c      	adds	r7, #12
 80038a4:	46bd      	mov	sp, r7
 80038a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038aa:	4770      	bx	lr

080038ac <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80038ac:	b480      	push	{r7}
 80038ae:	b083      	sub	sp, #12
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80038b4:	bf00      	nop
 80038b6:	370c      	adds	r7, #12
 80038b8:	46bd      	mov	sp, r7
 80038ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038be:	4770      	bx	lr

080038c0 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 80038c0:	b480      	push	{r7}
 80038c2:	b087      	sub	sp, #28
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	60f8      	str	r0, [r7, #12]
 80038c8:	460b      	mov	r3, r1
 80038ca:	607a      	str	r2, [r7, #4]
 80038cc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80038ce:	2300      	movs	r3, #0
 80038d0:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d101      	bne.n	80038dc <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 80038d8:	2301      	movs	r3, #1
 80038da:	e14a      	b.n	8003b72 <HAL_TIM_RegisterCallback+0x2b2>
  }

  if (htim->State == HAL_TIM_STATE_READY)
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80038e2:	b2db      	uxtb	r3, r3
 80038e4:	2b01      	cmp	r3, #1
 80038e6:	f040 80dd 	bne.w	8003aa4 <HAL_TIM_RegisterCallback+0x1e4>
  {
    switch (CallbackID)
 80038ea:	7afb      	ldrb	r3, [r7, #11]
 80038ec:	2b1f      	cmp	r3, #31
 80038ee:	f200 80d6 	bhi.w	8003a9e <HAL_TIM_RegisterCallback+0x1de>
 80038f2:	a201      	add	r2, pc, #4	@ (adr r2, 80038f8 <HAL_TIM_RegisterCallback+0x38>)
 80038f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038f8:	08003979 	.word	0x08003979
 80038fc:	08003981 	.word	0x08003981
 8003900:	08003989 	.word	0x08003989
 8003904:	08003991 	.word	0x08003991
 8003908:	08003999 	.word	0x08003999
 800390c:	080039a1 	.word	0x080039a1
 8003910:	080039a9 	.word	0x080039a9
 8003914:	080039b1 	.word	0x080039b1
 8003918:	080039b9 	.word	0x080039b9
 800391c:	080039c1 	.word	0x080039c1
 8003920:	080039c9 	.word	0x080039c9
 8003924:	080039d1 	.word	0x080039d1
 8003928:	080039d9 	.word	0x080039d9
 800392c:	080039e1 	.word	0x080039e1
 8003930:	080039eb 	.word	0x080039eb
 8003934:	080039f5 	.word	0x080039f5
 8003938:	080039ff 	.word	0x080039ff
 800393c:	08003a09 	.word	0x08003a09
 8003940:	08003a13 	.word	0x08003a13
 8003944:	08003a1d 	.word	0x08003a1d
 8003948:	08003a27 	.word	0x08003a27
 800394c:	08003a31 	.word	0x08003a31
 8003950:	08003a3b 	.word	0x08003a3b
 8003954:	08003a45 	.word	0x08003a45
 8003958:	08003a4f 	.word	0x08003a4f
 800395c:	08003a59 	.word	0x08003a59
 8003960:	08003a63 	.word	0x08003a63
 8003964:	08003a6d 	.word	0x08003a6d
 8003968:	08003a77 	.word	0x08003a77
 800396c:	08003a81 	.word	0x08003a81
 8003970:	08003a8b 	.word	0x08003a8b
 8003974:	08003a95 	.word	0x08003a95
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	687a      	ldr	r2, [r7, #4]
 800397c:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 800397e:	e0f7      	b.n	8003b70 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	687a      	ldr	r2, [r7, #4]
 8003984:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 8003986:	e0f3      	b.n	8003b70 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	687a      	ldr	r2, [r7, #4]
 800398c:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 800398e:	e0ef      	b.n	8003b70 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	687a      	ldr	r2, [r7, #4]
 8003994:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 8003996:	e0eb      	b.n	8003b70 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	687a      	ldr	r2, [r7, #4]
 800399c:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 800399e:	e0e7      	b.n	8003b70 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	687a      	ldr	r2, [r7, #4]
 80039a4:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 80039a6:	e0e3      	b.n	8003b70 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	687a      	ldr	r2, [r7, #4]
 80039ac:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 80039ae:	e0df      	b.n	8003b70 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	687a      	ldr	r2, [r7, #4]
 80039b4:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 80039b6:	e0db      	b.n	8003b70 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	687a      	ldr	r2, [r7, #4]
 80039bc:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 80039be:	e0d7      	b.n	8003b70 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	687a      	ldr	r2, [r7, #4]
 80039c4:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 80039c6:	e0d3      	b.n	8003b70 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	687a      	ldr	r2, [r7, #4]
 80039cc:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 80039ce:	e0cf      	b.n	8003b70 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	687a      	ldr	r2, [r7, #4]
 80039d4:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 80039d6:	e0cb      	b.n	8003b70 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	687a      	ldr	r2, [r7, #4]
 80039dc:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 80039de:	e0c7      	b.n	8003b70 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	687a      	ldr	r2, [r7, #4]
 80039e4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 80039e8:	e0c2      	b.n	8003b70 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	687a      	ldr	r2, [r7, #4]
 80039ee:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        break;
 80039f2:	e0bd      	b.n	8003b70 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	687a      	ldr	r2, [r7, #4]
 80039f8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        break;
 80039fc:	e0b8      	b.n	8003b70 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	687a      	ldr	r2, [r7, #4]
 8003a02:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        break;
 8003a06:	e0b3      	b.n	8003b70 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	687a      	ldr	r2, [r7, #4]
 8003a0c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        break;
 8003a10:	e0ae      	b.n	8003b70 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	687a      	ldr	r2, [r7, #4]
 8003a16:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 8003a1a:	e0a9      	b.n	8003b70 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	687a      	ldr	r2, [r7, #4]
 8003a20:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 8003a24:	e0a4      	b.n	8003b70 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	687a      	ldr	r2, [r7, #4]
 8003a2a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 8003a2e:	e09f      	b.n	8003b70 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	687a      	ldr	r2, [r7, #4]
 8003a34:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 8003a38:	e09a      	b.n	8003b70 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	687a      	ldr	r2, [r7, #4]
 8003a3e:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 8003a42:	e095      	b.n	8003b70 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	687a      	ldr	r2, [r7, #4]
 8003a48:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 8003a4c:	e090      	b.n	8003b70 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	687a      	ldr	r2, [r7, #4]
 8003a52:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 8003a56:	e08b      	b.n	8003b70 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	687a      	ldr	r2, [r7, #4]
 8003a5c:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 8003a60:	e086      	b.n	8003b70 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	687a      	ldr	r2, [r7, #4]
 8003a66:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 8003a6a:	e081      	b.n	8003b70 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK2_CB_ID :
        htim->Break2Callback                       = pCallback;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	687a      	ldr	r2, [r7, #4]
 8003a70:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 8003a74:	e07c      	b.n	8003b70 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_INDEX_CB_ID :
        htim->EncoderIndexCallback                 = pCallback;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	687a      	ldr	r2, [r7, #4]
 8003a7a:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 8003a7e:	e077      	b.n	8003b70 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_DIRECTION_CHANGE_CB_ID :
        htim->DirectionChangeCallback              = pCallback;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	687a      	ldr	r2, [r7, #4]
 8003a84:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
        break;
 8003a88:	e072      	b.n	8003b70 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_INDEX_ERROR_CB_ID :
        htim->IndexErrorCallback                   = pCallback;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	687a      	ldr	r2, [r7, #4]
 8003a8e:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 8003a92:	e06d      	b.n	8003b70 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRANSITION_ERROR_CB_ID :
        htim->TransitionErrorCallback              = pCallback;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	687a      	ldr	r2, [r7, #4]
 8003a98:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 8003a9c:	e068      	b.n	8003b70 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	75fb      	strb	r3, [r7, #23]
        break;
 8003aa2:	e065      	b.n	8003b70 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003aaa:	b2db      	uxtb	r3, r3
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d15d      	bne.n	8003b6c <HAL_TIM_RegisterCallback+0x2ac>
  {
    switch (CallbackID)
 8003ab0:	7afb      	ldrb	r3, [r7, #11]
 8003ab2:	2b0d      	cmp	r3, #13
 8003ab4:	d857      	bhi.n	8003b66 <HAL_TIM_RegisterCallback+0x2a6>
 8003ab6:	a201      	add	r2, pc, #4	@ (adr r2, 8003abc <HAL_TIM_RegisterCallback+0x1fc>)
 8003ab8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003abc:	08003af5 	.word	0x08003af5
 8003ac0:	08003afd 	.word	0x08003afd
 8003ac4:	08003b05 	.word	0x08003b05
 8003ac8:	08003b0d 	.word	0x08003b0d
 8003acc:	08003b15 	.word	0x08003b15
 8003ad0:	08003b1d 	.word	0x08003b1d
 8003ad4:	08003b25 	.word	0x08003b25
 8003ad8:	08003b2d 	.word	0x08003b2d
 8003adc:	08003b35 	.word	0x08003b35
 8003ae0:	08003b3d 	.word	0x08003b3d
 8003ae4:	08003b45 	.word	0x08003b45
 8003ae8:	08003b4d 	.word	0x08003b4d
 8003aec:	08003b55 	.word	0x08003b55
 8003af0:	08003b5d 	.word	0x08003b5d
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	687a      	ldr	r2, [r7, #4]
 8003af8:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 8003afa:	e039      	b.n	8003b70 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	687a      	ldr	r2, [r7, #4]
 8003b00:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 8003b02:	e035      	b.n	8003b70 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	687a      	ldr	r2, [r7, #4]
 8003b08:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8003b0a:	e031      	b.n	8003b70 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	687a      	ldr	r2, [r7, #4]
 8003b10:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 8003b12:	e02d      	b.n	8003b70 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	687a      	ldr	r2, [r7, #4]
 8003b18:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 8003b1a:	e029      	b.n	8003b70 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	687a      	ldr	r2, [r7, #4]
 8003b20:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 8003b22:	e025      	b.n	8003b70 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	687a      	ldr	r2, [r7, #4]
 8003b28:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 8003b2a:	e021      	b.n	8003b70 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	687a      	ldr	r2, [r7, #4]
 8003b30:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 8003b32:	e01d      	b.n	8003b70 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	687a      	ldr	r2, [r7, #4]
 8003b38:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 8003b3a:	e019      	b.n	8003b70 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	687a      	ldr	r2, [r7, #4]
 8003b40:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 8003b42:	e015      	b.n	8003b70 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	687a      	ldr	r2, [r7, #4]
 8003b48:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 8003b4a:	e011      	b.n	8003b70 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	687a      	ldr	r2, [r7, #4]
 8003b50:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 8003b52:	e00d      	b.n	8003b70 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	687a      	ldr	r2, [r7, #4]
 8003b58:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 8003b5a:	e009      	b.n	8003b70 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	687a      	ldr	r2, [r7, #4]
 8003b60:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 8003b64:	e004      	b.n	8003b70 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8003b66:	2301      	movs	r3, #1
 8003b68:	75fb      	strb	r3, [r7, #23]
        break;
 8003b6a:	e001      	b.n	8003b70 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003b70:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b72:	4618      	mov	r0, r3
 8003b74:	371c      	adds	r7, #28
 8003b76:	46bd      	mov	sp, r7
 8003b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7c:	4770      	bx	lr
 8003b7e:	bf00      	nop

08003b80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003b80:	b480      	push	{r7}
 8003b82:	b085      	sub	sp, #20
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
 8003b88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	4a4c      	ldr	r2, [pc, #304]	@ (8003cc4 <TIM_Base_SetConfig+0x144>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d017      	beq.n	8003bc8 <TIM_Base_SetConfig+0x48>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b9e:	d013      	beq.n	8003bc8 <TIM_Base_SetConfig+0x48>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	4a49      	ldr	r2, [pc, #292]	@ (8003cc8 <TIM_Base_SetConfig+0x148>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d00f      	beq.n	8003bc8 <TIM_Base_SetConfig+0x48>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	4a48      	ldr	r2, [pc, #288]	@ (8003ccc <TIM_Base_SetConfig+0x14c>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d00b      	beq.n	8003bc8 <TIM_Base_SetConfig+0x48>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	4a47      	ldr	r2, [pc, #284]	@ (8003cd0 <TIM_Base_SetConfig+0x150>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d007      	beq.n	8003bc8 <TIM_Base_SetConfig+0x48>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	4a46      	ldr	r2, [pc, #280]	@ (8003cd4 <TIM_Base_SetConfig+0x154>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d003      	beq.n	8003bc8 <TIM_Base_SetConfig+0x48>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	4a45      	ldr	r2, [pc, #276]	@ (8003cd8 <TIM_Base_SetConfig+0x158>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d108      	bne.n	8003bda <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003bce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	68fa      	ldr	r2, [r7, #12]
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	4a39      	ldr	r2, [pc, #228]	@ (8003cc4 <TIM_Base_SetConfig+0x144>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d023      	beq.n	8003c2a <TIM_Base_SetConfig+0xaa>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003be8:	d01f      	beq.n	8003c2a <TIM_Base_SetConfig+0xaa>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	4a36      	ldr	r2, [pc, #216]	@ (8003cc8 <TIM_Base_SetConfig+0x148>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d01b      	beq.n	8003c2a <TIM_Base_SetConfig+0xaa>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	4a35      	ldr	r2, [pc, #212]	@ (8003ccc <TIM_Base_SetConfig+0x14c>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d017      	beq.n	8003c2a <TIM_Base_SetConfig+0xaa>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	4a34      	ldr	r2, [pc, #208]	@ (8003cd0 <TIM_Base_SetConfig+0x150>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d013      	beq.n	8003c2a <TIM_Base_SetConfig+0xaa>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	4a33      	ldr	r2, [pc, #204]	@ (8003cd4 <TIM_Base_SetConfig+0x154>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d00f      	beq.n	8003c2a <TIM_Base_SetConfig+0xaa>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	4a33      	ldr	r2, [pc, #204]	@ (8003cdc <TIM_Base_SetConfig+0x15c>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d00b      	beq.n	8003c2a <TIM_Base_SetConfig+0xaa>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	4a32      	ldr	r2, [pc, #200]	@ (8003ce0 <TIM_Base_SetConfig+0x160>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d007      	beq.n	8003c2a <TIM_Base_SetConfig+0xaa>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	4a31      	ldr	r2, [pc, #196]	@ (8003ce4 <TIM_Base_SetConfig+0x164>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d003      	beq.n	8003c2a <TIM_Base_SetConfig+0xaa>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	4a2c      	ldr	r2, [pc, #176]	@ (8003cd8 <TIM_Base_SetConfig+0x158>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d108      	bne.n	8003c3c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003c30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	68db      	ldr	r3, [r3, #12]
 8003c36:	68fa      	ldr	r2, [r7, #12]
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	695b      	ldr	r3, [r3, #20]
 8003c46:	4313      	orrs	r3, r2
 8003c48:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	68fa      	ldr	r2, [r7, #12]
 8003c4e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	689a      	ldr	r2, [r3, #8]
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	681a      	ldr	r2, [r3, #0]
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	4a18      	ldr	r2, [pc, #96]	@ (8003cc4 <TIM_Base_SetConfig+0x144>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d013      	beq.n	8003c90 <TIM_Base_SetConfig+0x110>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	4a1a      	ldr	r2, [pc, #104]	@ (8003cd4 <TIM_Base_SetConfig+0x154>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d00f      	beq.n	8003c90 <TIM_Base_SetConfig+0x110>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	4a1a      	ldr	r2, [pc, #104]	@ (8003cdc <TIM_Base_SetConfig+0x15c>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d00b      	beq.n	8003c90 <TIM_Base_SetConfig+0x110>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	4a19      	ldr	r2, [pc, #100]	@ (8003ce0 <TIM_Base_SetConfig+0x160>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d007      	beq.n	8003c90 <TIM_Base_SetConfig+0x110>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	4a18      	ldr	r2, [pc, #96]	@ (8003ce4 <TIM_Base_SetConfig+0x164>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d003      	beq.n	8003c90 <TIM_Base_SetConfig+0x110>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	4a13      	ldr	r2, [pc, #76]	@ (8003cd8 <TIM_Base_SetConfig+0x158>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d103      	bne.n	8003c98 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	691a      	ldr	r2, [r3, #16]
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	691b      	ldr	r3, [r3, #16]
 8003ca2:	f003 0301 	and.w	r3, r3, #1
 8003ca6:	2b01      	cmp	r3, #1
 8003ca8:	d105      	bne.n	8003cb6 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	691b      	ldr	r3, [r3, #16]
 8003cae:	f023 0201 	bic.w	r2, r3, #1
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	611a      	str	r2, [r3, #16]
  }
}
 8003cb6:	bf00      	nop
 8003cb8:	3714      	adds	r7, #20
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc0:	4770      	bx	lr
 8003cc2:	bf00      	nop
 8003cc4:	40012c00 	.word	0x40012c00
 8003cc8:	40000400 	.word	0x40000400
 8003ccc:	40000800 	.word	0x40000800
 8003cd0:	40000c00 	.word	0x40000c00
 8003cd4:	40013400 	.word	0x40013400
 8003cd8:	40015000 	.word	0x40015000
 8003cdc:	40014000 	.word	0x40014000
 8003ce0:	40014400 	.word	0x40014400
 8003ce4:	40014800 	.word	0x40014800

08003ce8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b087      	sub	sp, #28
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
 8003cf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6a1b      	ldr	r3, [r3, #32]
 8003cf6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6a1b      	ldr	r3, [r3, #32]
 8003cfc:	f023 0201 	bic.w	r2, r3, #1
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	699b      	ldr	r3, [r3, #24]
 8003d0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d16:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	f023 0303 	bic.w	r3, r3, #3
 8003d22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	68fa      	ldr	r2, [r7, #12]
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	f023 0302 	bic.w	r3, r3, #2
 8003d34:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	689b      	ldr	r3, [r3, #8]
 8003d3a:	697a      	ldr	r2, [r7, #20]
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	4a30      	ldr	r2, [pc, #192]	@ (8003e04 <TIM_OC1_SetConfig+0x11c>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d013      	beq.n	8003d70 <TIM_OC1_SetConfig+0x88>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	4a2f      	ldr	r2, [pc, #188]	@ (8003e08 <TIM_OC1_SetConfig+0x120>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d00f      	beq.n	8003d70 <TIM_OC1_SetConfig+0x88>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	4a2e      	ldr	r2, [pc, #184]	@ (8003e0c <TIM_OC1_SetConfig+0x124>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d00b      	beq.n	8003d70 <TIM_OC1_SetConfig+0x88>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	4a2d      	ldr	r2, [pc, #180]	@ (8003e10 <TIM_OC1_SetConfig+0x128>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d007      	beq.n	8003d70 <TIM_OC1_SetConfig+0x88>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	4a2c      	ldr	r2, [pc, #176]	@ (8003e14 <TIM_OC1_SetConfig+0x12c>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d003      	beq.n	8003d70 <TIM_OC1_SetConfig+0x88>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	4a2b      	ldr	r2, [pc, #172]	@ (8003e18 <TIM_OC1_SetConfig+0x130>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d10c      	bne.n	8003d8a <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003d70:	697b      	ldr	r3, [r7, #20]
 8003d72:	f023 0308 	bic.w	r3, r3, #8
 8003d76:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	68db      	ldr	r3, [r3, #12]
 8003d7c:	697a      	ldr	r2, [r7, #20]
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003d82:	697b      	ldr	r3, [r7, #20]
 8003d84:	f023 0304 	bic.w	r3, r3, #4
 8003d88:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	4a1d      	ldr	r2, [pc, #116]	@ (8003e04 <TIM_OC1_SetConfig+0x11c>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d013      	beq.n	8003dba <TIM_OC1_SetConfig+0xd2>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	4a1c      	ldr	r2, [pc, #112]	@ (8003e08 <TIM_OC1_SetConfig+0x120>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d00f      	beq.n	8003dba <TIM_OC1_SetConfig+0xd2>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	4a1b      	ldr	r2, [pc, #108]	@ (8003e0c <TIM_OC1_SetConfig+0x124>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d00b      	beq.n	8003dba <TIM_OC1_SetConfig+0xd2>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	4a1a      	ldr	r2, [pc, #104]	@ (8003e10 <TIM_OC1_SetConfig+0x128>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d007      	beq.n	8003dba <TIM_OC1_SetConfig+0xd2>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	4a19      	ldr	r2, [pc, #100]	@ (8003e14 <TIM_OC1_SetConfig+0x12c>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d003      	beq.n	8003dba <TIM_OC1_SetConfig+0xd2>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	4a18      	ldr	r2, [pc, #96]	@ (8003e18 <TIM_OC1_SetConfig+0x130>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d111      	bne.n	8003dde <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003dba:	693b      	ldr	r3, [r7, #16]
 8003dbc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003dc0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003dc2:	693b      	ldr	r3, [r7, #16]
 8003dc4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003dc8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	695b      	ldr	r3, [r3, #20]
 8003dce:	693a      	ldr	r2, [r7, #16]
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	699b      	ldr	r3, [r3, #24]
 8003dd8:	693a      	ldr	r2, [r7, #16]
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	693a      	ldr	r2, [r7, #16]
 8003de2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	68fa      	ldr	r2, [r7, #12]
 8003de8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	685a      	ldr	r2, [r3, #4]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	697a      	ldr	r2, [r7, #20]
 8003df6:	621a      	str	r2, [r3, #32]
}
 8003df8:	bf00      	nop
 8003dfa:	371c      	adds	r7, #28
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e02:	4770      	bx	lr
 8003e04:	40012c00 	.word	0x40012c00
 8003e08:	40013400 	.word	0x40013400
 8003e0c:	40014000 	.word	0x40014000
 8003e10:	40014400 	.word	0x40014400
 8003e14:	40014800 	.word	0x40014800
 8003e18:	40015000 	.word	0x40015000

08003e1c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b087      	sub	sp, #28
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
 8003e24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6a1b      	ldr	r3, [r3, #32]
 8003e2a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6a1b      	ldr	r3, [r3, #32]
 8003e30:	f023 0210 	bic.w	r2, r3, #16
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	699b      	ldr	r3, [r3, #24]
 8003e42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003e4a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003e4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e56:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	021b      	lsls	r3, r3, #8
 8003e5e:	68fa      	ldr	r2, [r7, #12]
 8003e60:	4313      	orrs	r3, r2
 8003e62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003e64:	697b      	ldr	r3, [r7, #20]
 8003e66:	f023 0320 	bic.w	r3, r3, #32
 8003e6a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	689b      	ldr	r3, [r3, #8]
 8003e70:	011b      	lsls	r3, r3, #4
 8003e72:	697a      	ldr	r2, [r7, #20]
 8003e74:	4313      	orrs	r3, r2
 8003e76:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	4a2c      	ldr	r2, [pc, #176]	@ (8003f2c <TIM_OC2_SetConfig+0x110>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d007      	beq.n	8003e90 <TIM_OC2_SetConfig+0x74>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	4a2b      	ldr	r2, [pc, #172]	@ (8003f30 <TIM_OC2_SetConfig+0x114>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d003      	beq.n	8003e90 <TIM_OC2_SetConfig+0x74>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	4a2a      	ldr	r2, [pc, #168]	@ (8003f34 <TIM_OC2_SetConfig+0x118>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d10d      	bne.n	8003eac <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003e90:	697b      	ldr	r3, [r7, #20]
 8003e92:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003e96:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	68db      	ldr	r3, [r3, #12]
 8003e9c:	011b      	lsls	r3, r3, #4
 8003e9e:	697a      	ldr	r2, [r7, #20]
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003ea4:	697b      	ldr	r3, [r7, #20]
 8003ea6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003eaa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	4a1f      	ldr	r2, [pc, #124]	@ (8003f2c <TIM_OC2_SetConfig+0x110>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d013      	beq.n	8003edc <TIM_OC2_SetConfig+0xc0>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	4a1e      	ldr	r2, [pc, #120]	@ (8003f30 <TIM_OC2_SetConfig+0x114>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d00f      	beq.n	8003edc <TIM_OC2_SetConfig+0xc0>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	4a1e      	ldr	r2, [pc, #120]	@ (8003f38 <TIM_OC2_SetConfig+0x11c>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d00b      	beq.n	8003edc <TIM_OC2_SetConfig+0xc0>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	4a1d      	ldr	r2, [pc, #116]	@ (8003f3c <TIM_OC2_SetConfig+0x120>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d007      	beq.n	8003edc <TIM_OC2_SetConfig+0xc0>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	4a1c      	ldr	r2, [pc, #112]	@ (8003f40 <TIM_OC2_SetConfig+0x124>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d003      	beq.n	8003edc <TIM_OC2_SetConfig+0xc0>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	4a17      	ldr	r2, [pc, #92]	@ (8003f34 <TIM_OC2_SetConfig+0x118>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d113      	bne.n	8003f04 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003edc:	693b      	ldr	r3, [r7, #16]
 8003ede:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003ee2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003ee4:	693b      	ldr	r3, [r7, #16]
 8003ee6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003eea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	695b      	ldr	r3, [r3, #20]
 8003ef0:	009b      	lsls	r3, r3, #2
 8003ef2:	693a      	ldr	r2, [r7, #16]
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	699b      	ldr	r3, [r3, #24]
 8003efc:	009b      	lsls	r3, r3, #2
 8003efe:	693a      	ldr	r2, [r7, #16]
 8003f00:	4313      	orrs	r3, r2
 8003f02:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	693a      	ldr	r2, [r7, #16]
 8003f08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	68fa      	ldr	r2, [r7, #12]
 8003f0e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	685a      	ldr	r2, [r3, #4]
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	697a      	ldr	r2, [r7, #20]
 8003f1c:	621a      	str	r2, [r3, #32]
}
 8003f1e:	bf00      	nop
 8003f20:	371c      	adds	r7, #28
 8003f22:	46bd      	mov	sp, r7
 8003f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f28:	4770      	bx	lr
 8003f2a:	bf00      	nop
 8003f2c:	40012c00 	.word	0x40012c00
 8003f30:	40013400 	.word	0x40013400
 8003f34:	40015000 	.word	0x40015000
 8003f38:	40014000 	.word	0x40014000
 8003f3c:	40014400 	.word	0x40014400
 8003f40:	40014800 	.word	0x40014800

08003f44 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003f44:	b480      	push	{r7}
 8003f46:	b087      	sub	sp, #28
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
 8003f4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6a1b      	ldr	r3, [r3, #32]
 8003f52:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6a1b      	ldr	r3, [r3, #32]
 8003f58:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	69db      	ldr	r3, [r3, #28]
 8003f6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	f023 0303 	bic.w	r3, r3, #3
 8003f7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	68fa      	ldr	r2, [r7, #12]
 8003f86:	4313      	orrs	r3, r2
 8003f88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003f8a:	697b      	ldr	r3, [r7, #20]
 8003f8c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003f90:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	689b      	ldr	r3, [r3, #8]
 8003f96:	021b      	lsls	r3, r3, #8
 8003f98:	697a      	ldr	r2, [r7, #20]
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	4a2b      	ldr	r2, [pc, #172]	@ (8004050 <TIM_OC3_SetConfig+0x10c>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d007      	beq.n	8003fb6 <TIM_OC3_SetConfig+0x72>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	4a2a      	ldr	r2, [pc, #168]	@ (8004054 <TIM_OC3_SetConfig+0x110>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d003      	beq.n	8003fb6 <TIM_OC3_SetConfig+0x72>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	4a29      	ldr	r2, [pc, #164]	@ (8004058 <TIM_OC3_SetConfig+0x114>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d10d      	bne.n	8003fd2 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003fb6:	697b      	ldr	r3, [r7, #20]
 8003fb8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003fbc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	68db      	ldr	r3, [r3, #12]
 8003fc2:	021b      	lsls	r3, r3, #8
 8003fc4:	697a      	ldr	r2, [r7, #20]
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003fca:	697b      	ldr	r3, [r7, #20]
 8003fcc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003fd0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	4a1e      	ldr	r2, [pc, #120]	@ (8004050 <TIM_OC3_SetConfig+0x10c>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d013      	beq.n	8004002 <TIM_OC3_SetConfig+0xbe>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	4a1d      	ldr	r2, [pc, #116]	@ (8004054 <TIM_OC3_SetConfig+0x110>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d00f      	beq.n	8004002 <TIM_OC3_SetConfig+0xbe>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	4a1d      	ldr	r2, [pc, #116]	@ (800405c <TIM_OC3_SetConfig+0x118>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d00b      	beq.n	8004002 <TIM_OC3_SetConfig+0xbe>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	4a1c      	ldr	r2, [pc, #112]	@ (8004060 <TIM_OC3_SetConfig+0x11c>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d007      	beq.n	8004002 <TIM_OC3_SetConfig+0xbe>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	4a1b      	ldr	r2, [pc, #108]	@ (8004064 <TIM_OC3_SetConfig+0x120>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d003      	beq.n	8004002 <TIM_OC3_SetConfig+0xbe>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	4a16      	ldr	r2, [pc, #88]	@ (8004058 <TIM_OC3_SetConfig+0x114>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d113      	bne.n	800402a <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004002:	693b      	ldr	r3, [r7, #16]
 8004004:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004008:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800400a:	693b      	ldr	r3, [r7, #16]
 800400c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004010:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	695b      	ldr	r3, [r3, #20]
 8004016:	011b      	lsls	r3, r3, #4
 8004018:	693a      	ldr	r2, [r7, #16]
 800401a:	4313      	orrs	r3, r2
 800401c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	699b      	ldr	r3, [r3, #24]
 8004022:	011b      	lsls	r3, r3, #4
 8004024:	693a      	ldr	r2, [r7, #16]
 8004026:	4313      	orrs	r3, r2
 8004028:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	693a      	ldr	r2, [r7, #16]
 800402e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	68fa      	ldr	r2, [r7, #12]
 8004034:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	685a      	ldr	r2, [r3, #4]
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	697a      	ldr	r2, [r7, #20]
 8004042:	621a      	str	r2, [r3, #32]
}
 8004044:	bf00      	nop
 8004046:	371c      	adds	r7, #28
 8004048:	46bd      	mov	sp, r7
 800404a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404e:	4770      	bx	lr
 8004050:	40012c00 	.word	0x40012c00
 8004054:	40013400 	.word	0x40013400
 8004058:	40015000 	.word	0x40015000
 800405c:	40014000 	.word	0x40014000
 8004060:	40014400 	.word	0x40014400
 8004064:	40014800 	.word	0x40014800

08004068 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004068:	b480      	push	{r7}
 800406a:	b087      	sub	sp, #28
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
 8004070:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6a1b      	ldr	r3, [r3, #32]
 8004076:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6a1b      	ldr	r3, [r3, #32]
 800407c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	69db      	ldr	r3, [r3, #28]
 800408e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004096:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800409a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80040a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	021b      	lsls	r3, r3, #8
 80040aa:	68fa      	ldr	r2, [r7, #12]
 80040ac:	4313      	orrs	r3, r2
 80040ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80040b0:	697b      	ldr	r3, [r7, #20]
 80040b2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80040b6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	689b      	ldr	r3, [r3, #8]
 80040bc:	031b      	lsls	r3, r3, #12
 80040be:	697a      	ldr	r2, [r7, #20]
 80040c0:	4313      	orrs	r3, r2
 80040c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	4a2c      	ldr	r2, [pc, #176]	@ (8004178 <TIM_OC4_SetConfig+0x110>)
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d007      	beq.n	80040dc <TIM_OC4_SetConfig+0x74>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	4a2b      	ldr	r2, [pc, #172]	@ (800417c <TIM_OC4_SetConfig+0x114>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d003      	beq.n	80040dc <TIM_OC4_SetConfig+0x74>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	4a2a      	ldr	r2, [pc, #168]	@ (8004180 <TIM_OC4_SetConfig+0x118>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d10d      	bne.n	80040f8 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80040dc:	697b      	ldr	r3, [r7, #20]
 80040de:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80040e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	68db      	ldr	r3, [r3, #12]
 80040e8:	031b      	lsls	r3, r3, #12
 80040ea:	697a      	ldr	r2, [r7, #20]
 80040ec:	4313      	orrs	r3, r2
 80040ee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80040f0:	697b      	ldr	r3, [r7, #20]
 80040f2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80040f6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	4a1f      	ldr	r2, [pc, #124]	@ (8004178 <TIM_OC4_SetConfig+0x110>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d013      	beq.n	8004128 <TIM_OC4_SetConfig+0xc0>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	4a1e      	ldr	r2, [pc, #120]	@ (800417c <TIM_OC4_SetConfig+0x114>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d00f      	beq.n	8004128 <TIM_OC4_SetConfig+0xc0>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	4a1e      	ldr	r2, [pc, #120]	@ (8004184 <TIM_OC4_SetConfig+0x11c>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d00b      	beq.n	8004128 <TIM_OC4_SetConfig+0xc0>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	4a1d      	ldr	r2, [pc, #116]	@ (8004188 <TIM_OC4_SetConfig+0x120>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d007      	beq.n	8004128 <TIM_OC4_SetConfig+0xc0>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	4a1c      	ldr	r2, [pc, #112]	@ (800418c <TIM_OC4_SetConfig+0x124>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d003      	beq.n	8004128 <TIM_OC4_SetConfig+0xc0>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	4a17      	ldr	r2, [pc, #92]	@ (8004180 <TIM_OC4_SetConfig+0x118>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d113      	bne.n	8004150 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004128:	693b      	ldr	r3, [r7, #16]
 800412a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800412e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8004130:	693b      	ldr	r3, [r7, #16]
 8004132:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004136:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	695b      	ldr	r3, [r3, #20]
 800413c:	019b      	lsls	r3, r3, #6
 800413e:	693a      	ldr	r2, [r7, #16]
 8004140:	4313      	orrs	r3, r2
 8004142:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	699b      	ldr	r3, [r3, #24]
 8004148:	019b      	lsls	r3, r3, #6
 800414a:	693a      	ldr	r2, [r7, #16]
 800414c:	4313      	orrs	r3, r2
 800414e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	693a      	ldr	r2, [r7, #16]
 8004154:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	68fa      	ldr	r2, [r7, #12]
 800415a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	685a      	ldr	r2, [r3, #4]
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	697a      	ldr	r2, [r7, #20]
 8004168:	621a      	str	r2, [r3, #32]
}
 800416a:	bf00      	nop
 800416c:	371c      	adds	r7, #28
 800416e:	46bd      	mov	sp, r7
 8004170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004174:	4770      	bx	lr
 8004176:	bf00      	nop
 8004178:	40012c00 	.word	0x40012c00
 800417c:	40013400 	.word	0x40013400
 8004180:	40015000 	.word	0x40015000
 8004184:	40014000 	.word	0x40014000
 8004188:	40014400 	.word	0x40014400
 800418c:	40014800 	.word	0x40014800

08004190 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004190:	b480      	push	{r7}
 8004192:	b087      	sub	sp, #28
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
 8004198:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6a1b      	ldr	r3, [r3, #32]
 800419e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6a1b      	ldr	r3, [r3, #32]
 80041a4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80041b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80041be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80041c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	68fa      	ldr	r2, [r7, #12]
 80041ca:	4313      	orrs	r3, r2
 80041cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80041ce:	693b      	ldr	r3, [r7, #16]
 80041d0:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80041d4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	689b      	ldr	r3, [r3, #8]
 80041da:	041b      	lsls	r3, r3, #16
 80041dc:	693a      	ldr	r2, [r7, #16]
 80041de:	4313      	orrs	r3, r2
 80041e0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	4a19      	ldr	r2, [pc, #100]	@ (800424c <TIM_OC5_SetConfig+0xbc>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d013      	beq.n	8004212 <TIM_OC5_SetConfig+0x82>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	4a18      	ldr	r2, [pc, #96]	@ (8004250 <TIM_OC5_SetConfig+0xc0>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d00f      	beq.n	8004212 <TIM_OC5_SetConfig+0x82>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	4a17      	ldr	r2, [pc, #92]	@ (8004254 <TIM_OC5_SetConfig+0xc4>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d00b      	beq.n	8004212 <TIM_OC5_SetConfig+0x82>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	4a16      	ldr	r2, [pc, #88]	@ (8004258 <TIM_OC5_SetConfig+0xc8>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d007      	beq.n	8004212 <TIM_OC5_SetConfig+0x82>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	4a15      	ldr	r2, [pc, #84]	@ (800425c <TIM_OC5_SetConfig+0xcc>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d003      	beq.n	8004212 <TIM_OC5_SetConfig+0x82>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	4a14      	ldr	r2, [pc, #80]	@ (8004260 <TIM_OC5_SetConfig+0xd0>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d109      	bne.n	8004226 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004212:	697b      	ldr	r3, [r7, #20]
 8004214:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004218:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	695b      	ldr	r3, [r3, #20]
 800421e:	021b      	lsls	r3, r3, #8
 8004220:	697a      	ldr	r2, [r7, #20]
 8004222:	4313      	orrs	r3, r2
 8004224:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	697a      	ldr	r2, [r7, #20]
 800422a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	68fa      	ldr	r2, [r7, #12]
 8004230:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	685a      	ldr	r2, [r3, #4]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	693a      	ldr	r2, [r7, #16]
 800423e:	621a      	str	r2, [r3, #32]
}
 8004240:	bf00      	nop
 8004242:	371c      	adds	r7, #28
 8004244:	46bd      	mov	sp, r7
 8004246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424a:	4770      	bx	lr
 800424c:	40012c00 	.word	0x40012c00
 8004250:	40013400 	.word	0x40013400
 8004254:	40014000 	.word	0x40014000
 8004258:	40014400 	.word	0x40014400
 800425c:	40014800 	.word	0x40014800
 8004260:	40015000 	.word	0x40015000

08004264 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004264:	b480      	push	{r7}
 8004266:	b087      	sub	sp, #28
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
 800426c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6a1b      	ldr	r3, [r3, #32]
 8004272:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6a1b      	ldr	r3, [r3, #32]
 8004278:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	685b      	ldr	r3, [r3, #4]
 8004284:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800428a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004292:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004296:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	021b      	lsls	r3, r3, #8
 800429e:	68fa      	ldr	r2, [r7, #12]
 80042a0:	4313      	orrs	r3, r2
 80042a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80042a4:	693b      	ldr	r3, [r7, #16]
 80042a6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80042aa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	689b      	ldr	r3, [r3, #8]
 80042b0:	051b      	lsls	r3, r3, #20
 80042b2:	693a      	ldr	r2, [r7, #16]
 80042b4:	4313      	orrs	r3, r2
 80042b6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	4a1a      	ldr	r2, [pc, #104]	@ (8004324 <TIM_OC6_SetConfig+0xc0>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	d013      	beq.n	80042e8 <TIM_OC6_SetConfig+0x84>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	4a19      	ldr	r2, [pc, #100]	@ (8004328 <TIM_OC6_SetConfig+0xc4>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d00f      	beq.n	80042e8 <TIM_OC6_SetConfig+0x84>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	4a18      	ldr	r2, [pc, #96]	@ (800432c <TIM_OC6_SetConfig+0xc8>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d00b      	beq.n	80042e8 <TIM_OC6_SetConfig+0x84>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	4a17      	ldr	r2, [pc, #92]	@ (8004330 <TIM_OC6_SetConfig+0xcc>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d007      	beq.n	80042e8 <TIM_OC6_SetConfig+0x84>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	4a16      	ldr	r2, [pc, #88]	@ (8004334 <TIM_OC6_SetConfig+0xd0>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d003      	beq.n	80042e8 <TIM_OC6_SetConfig+0x84>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	4a15      	ldr	r2, [pc, #84]	@ (8004338 <TIM_OC6_SetConfig+0xd4>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d109      	bne.n	80042fc <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80042e8:	697b      	ldr	r3, [r7, #20]
 80042ea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80042ee:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	695b      	ldr	r3, [r3, #20]
 80042f4:	029b      	lsls	r3, r3, #10
 80042f6:	697a      	ldr	r2, [r7, #20]
 80042f8:	4313      	orrs	r3, r2
 80042fa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	697a      	ldr	r2, [r7, #20]
 8004300:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	68fa      	ldr	r2, [r7, #12]
 8004306:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	685a      	ldr	r2, [r3, #4]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	693a      	ldr	r2, [r7, #16]
 8004314:	621a      	str	r2, [r3, #32]
}
 8004316:	bf00      	nop
 8004318:	371c      	adds	r7, #28
 800431a:	46bd      	mov	sp, r7
 800431c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004320:	4770      	bx	lr
 8004322:	bf00      	nop
 8004324:	40012c00 	.word	0x40012c00
 8004328:	40013400 	.word	0x40013400
 800432c:	40014000 	.word	0x40014000
 8004330:	40014400 	.word	0x40014400
 8004334:	40014800 	.word	0x40014800
 8004338:	40015000 	.word	0x40015000

0800433c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800433c:	b480      	push	{r7}
 800433e:	b087      	sub	sp, #28
 8004340:	af00      	add	r7, sp, #0
 8004342:	60f8      	str	r0, [r7, #12]
 8004344:	60b9      	str	r1, [r7, #8]
 8004346:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004348:	68bb      	ldr	r3, [r7, #8]
 800434a:	f003 031f 	and.w	r3, r3, #31
 800434e:	2201      	movs	r2, #1
 8004350:	fa02 f303 	lsl.w	r3, r2, r3
 8004354:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	6a1a      	ldr	r2, [r3, #32]
 800435a:	697b      	ldr	r3, [r7, #20]
 800435c:	43db      	mvns	r3, r3
 800435e:	401a      	ands	r2, r3
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	6a1a      	ldr	r2, [r3, #32]
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	f003 031f 	and.w	r3, r3, #31
 800436e:	6879      	ldr	r1, [r7, #4]
 8004370:	fa01 f303 	lsl.w	r3, r1, r3
 8004374:	431a      	orrs	r2, r3
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	621a      	str	r2, [r3, #32]
}
 800437a:	bf00      	nop
 800437c:	371c      	adds	r7, #28
 800437e:	46bd      	mov	sp, r7
 8004380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004384:	4770      	bx	lr
	...

08004388 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8004388:	b480      	push	{r7}
 800438a:	b083      	sub	sp, #12
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	4a26      	ldr	r2, [pc, #152]	@ (800442c <TIM_ResetCallback+0xa4>)
 8004394:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	4a25      	ldr	r2, [pc, #148]	@ (8004430 <TIM_ResetCallback+0xa8>)
 800439c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	4a24      	ldr	r2, [pc, #144]	@ (8004434 <TIM_ResetCallback+0xac>)
 80043a4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	4a23      	ldr	r2, [pc, #140]	@ (8004438 <TIM_ResetCallback+0xb0>)
 80043ac:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	4a22      	ldr	r2, [pc, #136]	@ (800443c <TIM_ResetCallback+0xb4>)
 80043b4:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	4a21      	ldr	r2, [pc, #132]	@ (8004440 <TIM_ResetCallback+0xb8>)
 80043bc:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	4a20      	ldr	r2, [pc, #128]	@ (8004444 <TIM_ResetCallback+0xbc>)
 80043c4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	4a1f      	ldr	r2, [pc, #124]	@ (8004448 <TIM_ResetCallback+0xc0>)
 80043cc:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	4a1e      	ldr	r2, [pc, #120]	@ (800444c <TIM_ResetCallback+0xc4>)
 80043d4:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	4a1d      	ldr	r2, [pc, #116]	@ (8004450 <TIM_ResetCallback+0xc8>)
 80043dc:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	4a1c      	ldr	r2, [pc, #112]	@ (8004454 <TIM_ResetCallback+0xcc>)
 80043e4:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	4a1b      	ldr	r2, [pc, #108]	@ (8004458 <TIM_ResetCallback+0xd0>)
 80043ec:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	4a1a      	ldr	r2, [pc, #104]	@ (800445c <TIM_ResetCallback+0xd4>)
 80043f4:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	4a19      	ldr	r2, [pc, #100]	@ (8004460 <TIM_ResetCallback+0xd8>)
 80043fc:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  htim->EncoderIndexCallback              = HAL_TIMEx_EncoderIndexCallback;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	4a18      	ldr	r2, [pc, #96]	@ (8004464 <TIM_ResetCallback+0xdc>)
 8004404:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  htim->DirectionChangeCallback           = HAL_TIMEx_DirectionChangeCallback;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	4a17      	ldr	r2, [pc, #92]	@ (8004468 <TIM_ResetCallback+0xe0>)
 800440c:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  htim->IndexErrorCallback                = HAL_TIMEx_IndexErrorCallback;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	4a16      	ldr	r2, [pc, #88]	@ (800446c <TIM_ResetCallback+0xe4>)
 8004414:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  htim->TransitionErrorCallback           = HAL_TIMEx_TransitionErrorCallback;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	4a15      	ldr	r2, [pc, #84]	@ (8004470 <TIM_ResetCallback+0xe8>)
 800441c:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 8004420:	bf00      	nop
 8004422:	370c      	adds	r7, #12
 8004424:	46bd      	mov	sp, r7
 8004426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442a:	4770      	bx	lr
 800442c:	080037f9 	.word	0x080037f9
 8004430:	0800380d 	.word	0x0800380d
 8004434:	08003885 	.word	0x08003885
 8004438:	08003899 	.word	0x08003899
 800443c:	08003835 	.word	0x08003835
 8004440:	08003849 	.word	0x08003849
 8004444:	08003821 	.word	0x08003821
 8004448:	0800385d 	.word	0x0800385d
 800444c:	08003871 	.word	0x08003871
 8004450:	080038ad 	.word	0x080038ad
 8004454:	0800459d 	.word	0x0800459d
 8004458:	080045b1 	.word	0x080045b1
 800445c:	080045c5 	.word	0x080045c5
 8004460:	080045d9 	.word	0x080045d9
 8004464:	080045ed 	.word	0x080045ed
 8004468:	08004601 	.word	0x08004601
 800446c:	08004615 	.word	0x08004615
 8004470:	08004629 	.word	0x08004629

08004474 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004474:	b480      	push	{r7}
 8004476:	b085      	sub	sp, #20
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
 800447c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800447e:	2300      	movs	r3, #0
 8004480:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004488:	2b01      	cmp	r3, #1
 800448a:	d101      	bne.n	8004490 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800448c:	2302      	movs	r3, #2
 800448e:	e078      	b.n	8004582 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2201      	movs	r2, #1
 8004494:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	68db      	ldr	r3, [r3, #12]
 80044a2:	4313      	orrs	r3, r2
 80044a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	689b      	ldr	r3, [r3, #8]
 80044b0:	4313      	orrs	r3, r2
 80044b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	685b      	ldr	r3, [r3, #4]
 80044be:	4313      	orrs	r3, r2
 80044c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4313      	orrs	r3, r2
 80044ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	691b      	ldr	r3, [r3, #16]
 80044da:	4313      	orrs	r3, r2
 80044dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	695b      	ldr	r3, [r3, #20]
 80044e8:	4313      	orrs	r3, r2
 80044ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044f6:	4313      	orrs	r3, r2
 80044f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	699b      	ldr	r3, [r3, #24]
 8004504:	041b      	lsls	r3, r3, #16
 8004506:	4313      	orrs	r3, r2
 8004508:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	69db      	ldr	r3, [r3, #28]
 8004514:	4313      	orrs	r3, r2
 8004516:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4a1c      	ldr	r2, [pc, #112]	@ (8004590 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d009      	beq.n	8004536 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4a1b      	ldr	r2, [pc, #108]	@ (8004594 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8004528:	4293      	cmp	r3, r2
 800452a:	d004      	beq.n	8004536 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4a19      	ldr	r2, [pc, #100]	@ (8004598 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d11c      	bne.n	8004570 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004540:	051b      	lsls	r3, r3, #20
 8004542:	4313      	orrs	r3, r2
 8004544:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	6a1b      	ldr	r3, [r3, #32]
 8004550:	4313      	orrs	r3, r2
 8004552:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800455e:	4313      	orrs	r3, r2
 8004560:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800456c:	4313      	orrs	r3, r2
 800456e:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	68fa      	ldr	r2, [r7, #12]
 8004576:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2200      	movs	r2, #0
 800457c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004580:	2300      	movs	r3, #0
}
 8004582:	4618      	mov	r0, r3
 8004584:	3714      	adds	r7, #20
 8004586:	46bd      	mov	sp, r7
 8004588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458c:	4770      	bx	lr
 800458e:	bf00      	nop
 8004590:	40012c00 	.word	0x40012c00
 8004594:	40013400 	.word	0x40013400
 8004598:	40015000 	.word	0x40015000

0800459c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800459c:	b480      	push	{r7}
 800459e:	b083      	sub	sp, #12
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80045a4:	bf00      	nop
 80045a6:	370c      	adds	r7, #12
 80045a8:	46bd      	mov	sp, r7
 80045aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ae:	4770      	bx	lr

080045b0 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80045b0:	b480      	push	{r7}
 80045b2:	b083      	sub	sp, #12
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 80045b8:	bf00      	nop
 80045ba:	370c      	adds	r7, #12
 80045bc:	46bd      	mov	sp, r7
 80045be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c2:	4770      	bx	lr

080045c4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80045c4:	b480      	push	{r7}
 80045c6:	b083      	sub	sp, #12
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80045cc:	bf00      	nop
 80045ce:	370c      	adds	r7, #12
 80045d0:	46bd      	mov	sp, r7
 80045d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d6:	4770      	bx	lr

080045d8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80045d8:	b480      	push	{r7}
 80045da:	b083      	sub	sp, #12
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80045e0:	bf00      	nop
 80045e2:	370c      	adds	r7, #12
 80045e4:	46bd      	mov	sp, r7
 80045e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ea:	4770      	bx	lr

080045ec <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80045ec:	b480      	push	{r7}
 80045ee:	b083      	sub	sp, #12
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80045f4:	bf00      	nop
 80045f6:	370c      	adds	r7, #12
 80045f8:	46bd      	mov	sp, r7
 80045fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fe:	4770      	bx	lr

08004600 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8004600:	b480      	push	{r7}
 8004602:	b083      	sub	sp, #12
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8004608:	bf00      	nop
 800460a:	370c      	adds	r7, #12
 800460c:	46bd      	mov	sp, r7
 800460e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004612:	4770      	bx	lr

08004614 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8004614:	b480      	push	{r7}
 8004616:	b083      	sub	sp, #12
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800461c:	bf00      	nop
 800461e:	370c      	adds	r7, #12
 8004620:	46bd      	mov	sp, r7
 8004622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004626:	4770      	bx	lr

08004628 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8004628:	b480      	push	{r7}
 800462a:	b083      	sub	sp, #12
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8004630:	bf00      	nop
 8004632:	370c      	adds	r7, #12
 8004634:	46bd      	mov	sp, r7
 8004636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463a:	4770      	bx	lr

0800463c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b082      	sub	sp, #8
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d101      	bne.n	800464e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800464a:	2301      	movs	r3, #1
 800464c:	e050      	b.n	80046f0 <HAL_UART_Init+0xb4>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004654:	2b00      	cmp	r3, #0
 8004656:	d114      	bne.n	8004682 <HAL_UART_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2200      	movs	r2, #0
 800465c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 8004660:	6878      	ldr	r0, [r7, #4]
 8004662:	f000 fe37 	bl	80052d4 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800466c:	2b00      	cmp	r3, #0
 800466e:	d103      	bne.n	8004678 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	4a21      	ldr	r2, [pc, #132]	@ (80046f8 <HAL_UART_Init+0xbc>)
 8004674:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800467e:	6878      	ldr	r0, [r7, #4]
 8004680:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2224      	movs	r2, #36	@ 0x24
 8004686:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	681a      	ldr	r2, [r3, #0]
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f022 0201 	bic.w	r2, r2, #1
 8004698:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d002      	beq.n	80046a8 <HAL_UART_Init+0x6c>
  {
    UART_AdvFeatureConfig(huart);
 80046a2:	6878      	ldr	r0, [r7, #4]
 80046a4:	f001 f964 	bl	8005970 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80046a8:	6878      	ldr	r0, [r7, #4]
 80046aa:	f000 fe65 	bl	8005378 <UART_SetConfig>
 80046ae:	4603      	mov	r3, r0
 80046b0:	2b01      	cmp	r3, #1
 80046b2:	d101      	bne.n	80046b8 <HAL_UART_Init+0x7c>
  {
    return HAL_ERROR;
 80046b4:	2301      	movs	r3, #1
 80046b6:	e01b      	b.n	80046f0 <HAL_UART_Init+0xb4>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	685a      	ldr	r2, [r3, #4]
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80046c6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	689a      	ldr	r2, [r3, #8]
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80046d6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	681a      	ldr	r2, [r3, #0]
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f042 0201 	orr.w	r2, r2, #1
 80046e6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80046e8:	6878      	ldr	r0, [r7, #4]
 80046ea:	f001 f9e3 	bl	8005ab4 <UART_CheckIdleState>
 80046ee:	4603      	mov	r3, r0
}
 80046f0:	4618      	mov	r0, r3
 80046f2:	3708      	adds	r7, #8
 80046f4:	46bd      	mov	sp, r7
 80046f6:	bd80      	pop	{r7, pc}
 80046f8:	0800102d 	.word	0x0800102d

080046fc <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 80046fc:	b480      	push	{r7}
 80046fe:	b087      	sub	sp, #28
 8004700:	af00      	add	r7, sp, #0
 8004702:	60f8      	str	r0, [r7, #12]
 8004704:	460b      	mov	r3, r1
 8004706:	607a      	str	r2, [r7, #4]
 8004708:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800470a:	2300      	movs	r3, #0
 800470c:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d109      	bne.n	8004728 <HAL_UART_RegisterCallback+0x2c>
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800471a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    return HAL_ERROR;
 8004724:	2301      	movs	r3, #1
 8004726:	e09c      	b.n	8004862 <HAL_UART_RegisterCallback+0x166>
  }

  if (huart->gState == HAL_UART_STATE_READY)
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800472e:	2b20      	cmp	r3, #32
 8004730:	d16c      	bne.n	800480c <HAL_UART_RegisterCallback+0x110>
  {
    switch (CallbackID)
 8004732:	7afb      	ldrb	r3, [r7, #11]
 8004734:	2b0c      	cmp	r3, #12
 8004736:	d85e      	bhi.n	80047f6 <HAL_UART_RegisterCallback+0xfa>
 8004738:	a201      	add	r2, pc, #4	@ (adr r2, 8004740 <HAL_UART_RegisterCallback+0x44>)
 800473a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800473e:	bf00      	nop
 8004740:	08004775 	.word	0x08004775
 8004744:	0800477f 	.word	0x0800477f
 8004748:	08004789 	.word	0x08004789
 800474c:	08004793 	.word	0x08004793
 8004750:	0800479d 	.word	0x0800479d
 8004754:	080047a7 	.word	0x080047a7
 8004758:	080047b1 	.word	0x080047b1
 800475c:	080047bb 	.word	0x080047bb
 8004760:	080047c5 	.word	0x080047c5
 8004764:	080047cf 	.word	0x080047cf
 8004768:	080047d9 	.word	0x080047d9
 800476c:	080047e3 	.word	0x080047e3
 8004770:	080047ed 	.word	0x080047ed
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	687a      	ldr	r2, [r7, #4]
 8004778:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 800477c:	e070      	b.n	8004860 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	687a      	ldr	r2, [r7, #4]
 8004782:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 8004786:	e06b      	b.n	8004860 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	687a      	ldr	r2, [r7, #4]
 800478c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 8004790:	e066      	b.n	8004860 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	687a      	ldr	r2, [r7, #4]
 8004796:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 800479a:	e061      	b.n	8004860 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	687a      	ldr	r2, [r7, #4]
 80047a0:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 80047a4:	e05c      	b.n	8004860 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	687a      	ldr	r2, [r7, #4]
 80047aa:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 80047ae:	e057      	b.n	8004860 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	687a      	ldr	r2, [r7, #4]
 80047b4:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 80047b8:	e052      	b.n	8004860 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	687a      	ldr	r2, [r7, #4]
 80047be:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 80047c2:	e04d      	b.n	8004860 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_WAKEUP_CB_ID :
        huart->WakeupCallback = pCallback;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	687a      	ldr	r2, [r7, #4]
 80047c8:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 80047cc:	e048      	b.n	8004860 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_FIFO_FULL_CB_ID :
        huart->RxFifoFullCallback = pCallback;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	687a      	ldr	r2, [r7, #4]
 80047d2:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 80047d6:	e043      	b.n	8004860 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_FIFO_EMPTY_CB_ID :
        huart->TxFifoEmptyCallback = pCallback;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	687a      	ldr	r2, [r7, #4]
 80047dc:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 80047e0:	e03e      	b.n	8004860 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	687a      	ldr	r2, [r7, #4]
 80047e6:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 80047ea:	e039      	b.n	8004860 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	687a      	ldr	r2, [r7, #4]
 80047f0:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 80047f4:	e034      	b.n	8004860 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047fc:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 8004806:	2301      	movs	r3, #1
 8004808:	75fb      	strb	r3, [r7, #23]
        break;
 800480a:	e029      	b.n	8004860 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004812:	2b00      	cmp	r3, #0
 8004814:	d11a      	bne.n	800484c <HAL_UART_RegisterCallback+0x150>
  {
    switch (CallbackID)
 8004816:	7afb      	ldrb	r3, [r7, #11]
 8004818:	2b0b      	cmp	r3, #11
 800481a:	d002      	beq.n	8004822 <HAL_UART_RegisterCallback+0x126>
 800481c:	2b0c      	cmp	r3, #12
 800481e:	d005      	beq.n	800482c <HAL_UART_RegisterCallback+0x130>
 8004820:	e009      	b.n	8004836 <HAL_UART_RegisterCallback+0x13a>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	687a      	ldr	r2, [r7, #4]
 8004826:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800482a:	e019      	b.n	8004860 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	687a      	ldr	r2, [r7, #4]
 8004830:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 8004834:	e014      	b.n	8004860 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800483c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 8004846:	2301      	movs	r3, #1
 8004848:	75fb      	strb	r3, [r7, #23]
        break;
 800484a:	e009      	b.n	8004860 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004852:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    status =  HAL_ERROR;
 800485c:	2301      	movs	r3, #1
 800485e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8004860:	7dfb      	ldrb	r3, [r7, #23]
}
 8004862:	4618      	mov	r0, r3
 8004864:	371c      	adds	r7, #28
 8004866:	46bd      	mov	sp, r7
 8004868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486c:	4770      	bx	lr
 800486e:	bf00      	nop

08004870 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b08a      	sub	sp, #40	@ 0x28
 8004874:	af00      	add	r7, sp, #0
 8004876:	60f8      	str	r0, [r7, #12]
 8004878:	60b9      	str	r1, [r7, #8]
 800487a:	4613      	mov	r3, r2
 800487c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004884:	2b20      	cmp	r3, #32
 8004886:	d137      	bne.n	80048f8 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d002      	beq.n	8004894 <HAL_UART_Receive_IT+0x24>
 800488e:	88fb      	ldrh	r3, [r7, #6]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d101      	bne.n	8004898 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8004894:	2301      	movs	r3, #1
 8004896:	e030      	b.n	80048fa <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	2200      	movs	r2, #0
 800489c:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4a18      	ldr	r2, [pc, #96]	@ (8004904 <HAL_UART_Receive_IT+0x94>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d01f      	beq.n	80048e8 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d018      	beq.n	80048e8 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048bc:	697b      	ldr	r3, [r7, #20]
 80048be:	e853 3f00 	ldrex	r3, [r3]
 80048c2:	613b      	str	r3, [r7, #16]
   return(result);
 80048c4:	693b      	ldr	r3, [r7, #16]
 80048c6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80048ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	461a      	mov	r2, r3
 80048d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048d4:	623b      	str	r3, [r7, #32]
 80048d6:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048d8:	69f9      	ldr	r1, [r7, #28]
 80048da:	6a3a      	ldr	r2, [r7, #32]
 80048dc:	e841 2300 	strex	r3, r2, [r1]
 80048e0:	61bb      	str	r3, [r7, #24]
   return(result);
 80048e2:	69bb      	ldr	r3, [r7, #24]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d1e6      	bne.n	80048b6 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80048e8:	88fb      	ldrh	r3, [r7, #6]
 80048ea:	461a      	mov	r2, r3
 80048ec:	68b9      	ldr	r1, [r7, #8]
 80048ee:	68f8      	ldr	r0, [r7, #12]
 80048f0:	f001 f9f8 	bl	8005ce4 <UART_Start_Receive_IT>
 80048f4:	4603      	mov	r3, r0
 80048f6:	e000      	b.n	80048fa <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80048f8:	2302      	movs	r3, #2
  }
}
 80048fa:	4618      	mov	r0, r3
 80048fc:	3728      	adds	r7, #40	@ 0x28
 80048fe:	46bd      	mov	sp, r7
 8004900:	bd80      	pop	{r7, pc}
 8004902:	bf00      	nop
 8004904:	40008000 	.word	0x40008000

08004908 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b08a      	sub	sp, #40	@ 0x28
 800490c:	af00      	add	r7, sp, #0
 800490e:	60f8      	str	r0, [r7, #12]
 8004910:	60b9      	str	r1, [r7, #8]
 8004912:	4613      	mov	r3, r2
 8004914:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800491c:	2b20      	cmp	r3, #32
 800491e:	d167      	bne.n	80049f0 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8004920:	68bb      	ldr	r3, [r7, #8]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d002      	beq.n	800492c <HAL_UART_Transmit_DMA+0x24>
 8004926:	88fb      	ldrh	r3, [r7, #6]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d101      	bne.n	8004930 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800492c:	2301      	movs	r3, #1
 800492e:	e060      	b.n	80049f2 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	68ba      	ldr	r2, [r7, #8]
 8004934:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	88fa      	ldrh	r2, [r7, #6]
 800493a:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	88fa      	ldrh	r2, [r7, #6]
 8004942:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	2200      	movs	r2, #0
 800494a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	2221      	movs	r2, #33	@ 0x21
 8004952:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800495a:	2b00      	cmp	r3, #0
 800495c:	d028      	beq.n	80049b0 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004962:	4a26      	ldr	r2, [pc, #152]	@ (80049fc <HAL_UART_Transmit_DMA+0xf4>)
 8004964:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800496a:	4a25      	ldr	r2, [pc, #148]	@ (8004a00 <HAL_UART_Transmit_DMA+0xf8>)
 800496c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004972:	4a24      	ldr	r2, [pc, #144]	@ (8004a04 <HAL_UART_Transmit_DMA+0xfc>)
 8004974:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800497a:	2200      	movs	r2, #0
 800497c:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004986:	4619      	mov	r1, r3
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	3328      	adds	r3, #40	@ 0x28
 800498e:	461a      	mov	r2, r3
 8004990:	88fb      	ldrh	r3, [r7, #6]
 8004992:	f7fc fe91 	bl	80016b8 <HAL_DMA_Start_IT>
 8004996:	4603      	mov	r3, r0
 8004998:	2b00      	cmp	r3, #0
 800499a:	d009      	beq.n	80049b0 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	2210      	movs	r2, #16
 80049a0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	2220      	movs	r2, #32
 80049a8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 80049ac:	2301      	movs	r3, #1
 80049ae:	e020      	b.n	80049f2 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	2240      	movs	r2, #64	@ 0x40
 80049b6:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	3308      	adds	r3, #8
 80049be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049c0:	697b      	ldr	r3, [r7, #20]
 80049c2:	e853 3f00 	ldrex	r3, [r3]
 80049c6:	613b      	str	r3, [r7, #16]
   return(result);
 80049c8:	693b      	ldr	r3, [r7, #16]
 80049ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80049ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	3308      	adds	r3, #8
 80049d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80049d8:	623a      	str	r2, [r7, #32]
 80049da:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049dc:	69f9      	ldr	r1, [r7, #28]
 80049de:	6a3a      	ldr	r2, [r7, #32]
 80049e0:	e841 2300 	strex	r3, r2, [r1]
 80049e4:	61bb      	str	r3, [r7, #24]
   return(result);
 80049e6:	69bb      	ldr	r3, [r7, #24]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d1e5      	bne.n	80049b8 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 80049ec:	2300      	movs	r3, #0
 80049ee:	e000      	b.n	80049f2 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 80049f0:	2302      	movs	r3, #2
  }
}
 80049f2:	4618      	mov	r0, r3
 80049f4:	3728      	adds	r7, #40	@ 0x28
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bd80      	pop	{r7, pc}
 80049fa:	bf00      	nop
 80049fc:	08006077 	.word	0x08006077
 8004a00:	08006115 	.word	0x08006115
 8004a04:	08006135 	.word	0x08006135

08004a08 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b09a      	sub	sp, #104	@ 0x68
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
  /* Disable PEIE, EIE, RXNEIE and RXFTIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a16:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004a18:	e853 3f00 	ldrex	r3, [r3]
 8004a1c:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8004a1e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004a20:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004a24:	667b      	str	r3, [r7, #100]	@ 0x64
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	461a      	mov	r2, r3
 8004a2c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004a2e:	657b      	str	r3, [r7, #84]	@ 0x54
 8004a30:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a32:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004a34:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004a36:	e841 2300 	strex	r3, r2, [r1]
 8004a3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8004a3c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d1e6      	bne.n	8004a10 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	3308      	adds	r3, #8
 8004a48:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a4c:	e853 3f00 	ldrex	r3, [r3]
 8004a50:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004a52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a54:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004a58:	f023 0301 	bic.w	r3, r3, #1
 8004a5c:	663b      	str	r3, [r7, #96]	@ 0x60
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	3308      	adds	r3, #8
 8004a64:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004a66:	643a      	str	r2, [r7, #64]	@ 0x40
 8004a68:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a6a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004a6c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004a6e:	e841 2300 	strex	r3, r2, [r1]
 8004a72:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004a74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d1e3      	bne.n	8004a42 <HAL_UART_AbortReceive+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004a7e:	2b01      	cmp	r3, #1
 8004a80:	d118      	bne.n	8004ab4 <HAL_UART_AbortReceive+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a88:	6a3b      	ldr	r3, [r7, #32]
 8004a8a:	e853 3f00 	ldrex	r3, [r3]
 8004a8e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004a90:	69fb      	ldr	r3, [r7, #28]
 8004a92:	f023 0310 	bic.w	r3, r3, #16
 8004a96:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	461a      	mov	r2, r3
 8004a9e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004aa0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004aa2:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aa4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004aa6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004aa8:	e841 2300 	strex	r3, r2, [r1]
 8004aac:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004aae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d1e6      	bne.n	8004a82 <HAL_UART_AbortReceive+0x7a>
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	689b      	ldr	r3, [r3, #8]
 8004aba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004abe:	2b40      	cmp	r3, #64	@ 0x40
 8004ac0:	d13b      	bne.n	8004b3a <HAL_UART_AbortReceive+0x132>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	3308      	adds	r3, #8
 8004ac8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	e853 3f00 	ldrex	r3, [r3]
 8004ad0:	60bb      	str	r3, [r7, #8]
   return(result);
 8004ad2:	68bb      	ldr	r3, [r7, #8]
 8004ad4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004ad8:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	3308      	adds	r3, #8
 8004ae0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004ae2:	61ba      	str	r2, [r7, #24]
 8004ae4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ae6:	6979      	ldr	r1, [r7, #20]
 8004ae8:	69ba      	ldr	r2, [r7, #24]
 8004aea:	e841 2300 	strex	r3, r2, [r1]
 8004aee:	613b      	str	r3, [r7, #16]
   return(result);
 8004af0:	693b      	ldr	r3, [r7, #16]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d1e5      	bne.n	8004ac2 <HAL_UART_AbortReceive+0xba>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d01c      	beq.n	8004b3a <HAL_UART_AbortReceive+0x132>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004b06:	2200      	movs	r2, #0
 8004b08:	639a      	str	r2, [r3, #56]	@ 0x38

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004b10:	4618      	mov	r0, r3
 8004b12:	f7fc fe4c 	bl	80017ae <HAL_DMA_Abort>
 8004b16:	4603      	mov	r3, r0
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d00e      	beq.n	8004b3a <HAL_UART_AbortReceive+0x132>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004b22:	4618      	mov	r0, r3
 8004b24:	f7fc ffb2 	bl	8001a8c <HAL_DMA_GetError>
 8004b28:	4603      	mov	r3, r0
 8004b2a:	2b20      	cmp	r3, #32
 8004b2c:	d105      	bne.n	8004b3a <HAL_UART_AbortReceive+0x132>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2210      	movs	r2, #16
 8004b32:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 8004b36:	2303      	movs	r3, #3
 8004b38:	e017      	b.n	8004b6a <HAL_UART_AbortReceive+0x162>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0U;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	220f      	movs	r2, #15
 8004b48:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	699a      	ldr	r2, [r3, #24]
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f042 0208 	orr.w	r2, r2, #8
 8004b58:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2220      	movs	r2, #32
 8004b5e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2200      	movs	r2, #0
 8004b66:	66da      	str	r2, [r3, #108]	@ 0x6c

  return HAL_OK;
 8004b68:	2300      	movs	r3, #0
}
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	3768      	adds	r7, #104	@ 0x68
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	bd80      	pop	{r7, pc}
	...

08004b74 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b0ba      	sub	sp, #232	@ 0xe8
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	69db      	ldr	r3, [r3, #28]
 8004b82:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	689b      	ldr	r3, [r3, #8]
 8004b96:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004b9a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8004b9e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8004ba2:	4013      	ands	r3, r2
 8004ba4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8004ba8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d11b      	bne.n	8004be8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004bb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004bb4:	f003 0320 	and.w	r3, r3, #32
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d015      	beq.n	8004be8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004bbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004bc0:	f003 0320 	and.w	r3, r3, #32
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d105      	bne.n	8004bd4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004bc8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004bcc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d009      	beq.n	8004be8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	f000 8312 	beq.w	8005202 <HAL_UART_IRQHandler+0x68e>
      {
        huart->RxISR(huart);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004be2:	6878      	ldr	r0, [r7, #4]
 8004be4:	4798      	blx	r3
      }
      return;
 8004be6:	e30c      	b.n	8005202 <HAL_UART_IRQHandler+0x68e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004be8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	f000 8129 	beq.w	8004e44 <HAL_UART_IRQHandler+0x2d0>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8004bf2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8004bf6:	4b90      	ldr	r3, [pc, #576]	@ (8004e38 <HAL_UART_IRQHandler+0x2c4>)
 8004bf8:	4013      	ands	r3, r2
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d106      	bne.n	8004c0c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8004bfe:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8004c02:	4b8e      	ldr	r3, [pc, #568]	@ (8004e3c <HAL_UART_IRQHandler+0x2c8>)
 8004c04:	4013      	ands	r3, r2
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	f000 811c 	beq.w	8004e44 <HAL_UART_IRQHandler+0x2d0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004c0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c10:	f003 0301 	and.w	r3, r3, #1
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d011      	beq.n	8004c3c <HAL_UART_IRQHandler+0xc8>
 8004c18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004c1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d00b      	beq.n	8004c3c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	2201      	movs	r2, #1
 8004c2a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c32:	f043 0201 	orr.w	r2, r3, #1
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004c3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c40:	f003 0302 	and.w	r3, r3, #2
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d011      	beq.n	8004c6c <HAL_UART_IRQHandler+0xf8>
 8004c48:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004c4c:	f003 0301 	and.w	r3, r3, #1
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d00b      	beq.n	8004c6c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	2202      	movs	r2, #2
 8004c5a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c62:	f043 0204 	orr.w	r2, r3, #4
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004c6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c70:	f003 0304 	and.w	r3, r3, #4
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d011      	beq.n	8004c9c <HAL_UART_IRQHandler+0x128>
 8004c78:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004c7c:	f003 0301 	and.w	r3, r3, #1
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d00b      	beq.n	8004c9c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	2204      	movs	r2, #4
 8004c8a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c92:	f043 0202 	orr.w	r2, r3, #2
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004c9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ca0:	f003 0308 	and.w	r3, r3, #8
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d017      	beq.n	8004cd8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004ca8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004cac:	f003 0320 	and.w	r3, r3, #32
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d105      	bne.n	8004cc0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8004cb4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8004cb8:	4b5f      	ldr	r3, [pc, #380]	@ (8004e38 <HAL_UART_IRQHandler+0x2c4>)
 8004cba:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d00b      	beq.n	8004cd8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	2208      	movs	r2, #8
 8004cc6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cce:	f043 0208 	orr.w	r2, r3, #8
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004cd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004cdc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d012      	beq.n	8004d0a <HAL_UART_IRQHandler+0x196>
 8004ce4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ce8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d00c      	beq.n	8004d0a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004cf8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d00:	f043 0220 	orr.w	r2, r3, #32
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	f000 8278 	beq.w	8005206 <HAL_UART_IRQHandler+0x692>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004d16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d1a:	f003 0320 	and.w	r3, r3, #32
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d013      	beq.n	8004d4a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004d22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d26:	f003 0320 	and.w	r3, r3, #32
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d105      	bne.n	8004d3a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004d2e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004d32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d007      	beq.n	8004d4a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d003      	beq.n	8004d4a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d46:	6878      	ldr	r0, [r7, #4]
 8004d48:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d50:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	689b      	ldr	r3, [r3, #8]
 8004d5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d5e:	2b40      	cmp	r3, #64	@ 0x40
 8004d60:	d005      	beq.n	8004d6e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004d62:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004d66:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d058      	beq.n	8004e20 <HAL_UART_IRQHandler+0x2ac>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004d6e:	6878      	ldr	r0, [r7, #4]
 8004d70:	f001 f91b 	bl	8005faa <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	689b      	ldr	r3, [r3, #8]
 8004d7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d7e:	2b40      	cmp	r3, #64	@ 0x40
 8004d80:	d148      	bne.n	8004e14 <HAL_UART_IRQHandler+0x2a0>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	3308      	adds	r3, #8
 8004d88:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d8c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004d90:	e853 3f00 	ldrex	r3, [r3]
 8004d94:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004d98:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004d9c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004da0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	3308      	adds	r3, #8
 8004daa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004dae:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004db2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004db6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004dba:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004dbe:	e841 2300 	strex	r3, r2, [r1]
 8004dc2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004dc6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d1d9      	bne.n	8004d82 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d017      	beq.n	8004e08 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004dde:	4a18      	ldr	r2, [pc, #96]	@ (8004e40 <HAL_UART_IRQHandler+0x2cc>)
 8004de0:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004de8:	4618      	mov	r0, r3
 8004dea:	f7fc fd39 	bl	8001860 <HAL_DMA_Abort_IT>
 8004dee:	4603      	mov	r3, r0
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d01f      	beq.n	8004e34 <HAL_UART_IRQHandler+0x2c0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004dfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004dfc:	687a      	ldr	r2, [r7, #4]
 8004dfe:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8004e02:	4610      	mov	r0, r2
 8004e04:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e06:	e015      	b.n	8004e34 <HAL_UART_IRQHandler+0x2c0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004e0e:	6878      	ldr	r0, [r7, #4]
 8004e10:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e12:	e00f      	b.n	8004e34 <HAL_UART_IRQHandler+0x2c0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004e1a:	6878      	ldr	r0, [r7, #4]
 8004e1c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e1e:	e009      	b.n	8004e34 <HAL_UART_IRQHandler+0x2c0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004e26:	6878      	ldr	r0, [r7, #4]
 8004e28:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8004e32:	e1e8      	b.n	8005206 <HAL_UART_IRQHandler+0x692>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e34:	bf00      	nop
    return;
 8004e36:	e1e6      	b.n	8005206 <HAL_UART_IRQHandler+0x692>
 8004e38:	10000001 	.word	0x10000001
 8004e3c:	04000120 	.word	0x04000120
 8004e40:	080061b9 	.word	0x080061b9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004e48:	2b01      	cmp	r3, #1
 8004e4a:	f040 8176 	bne.w	800513a <HAL_UART_IRQHandler+0x5c6>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004e4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e52:	f003 0310 	and.w	r3, r3, #16
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	f000 816f 	beq.w	800513a <HAL_UART_IRQHandler+0x5c6>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004e5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e60:	f003 0310 	and.w	r3, r3, #16
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	f000 8168 	beq.w	800513a <HAL_UART_IRQHandler+0x5c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	2210      	movs	r2, #16
 8004e70:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	689b      	ldr	r3, [r3, #8]
 8004e78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e7c:	2b40      	cmp	r3, #64	@ 0x40
 8004e7e:	f040 80dc 	bne.w	800503a <HAL_UART_IRQHandler+0x4c6>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	685b      	ldr	r3, [r3, #4]
 8004e8c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004e90:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	f000 80b1 	beq.w	8004ffc <HAL_UART_IRQHandler+0x488>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004ea0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004ea4:	429a      	cmp	r2, r3
 8004ea6:	f080 80a9 	bcs.w	8004ffc <HAL_UART_IRQHandler+0x488>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004eb0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f003 0320 	and.w	r3, r3, #32
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	f040 8087 	bne.w	8004fd6 <HAL_UART_IRQHandler+0x462>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ed0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004ed4:	e853 3f00 	ldrex	r3, [r3]
 8004ed8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004edc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004ee0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004ee4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	461a      	mov	r2, r3
 8004eee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004ef2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004ef6:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004efa:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004efe:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004f02:	e841 2300 	strex	r3, r2, [r1]
 8004f06:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004f0a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d1da      	bne.n	8004ec8 <HAL_UART_IRQHandler+0x354>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	3308      	adds	r3, #8
 8004f18:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f1a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004f1c:	e853 3f00 	ldrex	r3, [r3]
 8004f20:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004f22:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004f24:	f023 0301 	bic.w	r3, r3, #1
 8004f28:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	3308      	adds	r3, #8
 8004f32:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004f36:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004f3a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f3c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004f3e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004f42:	e841 2300 	strex	r3, r2, [r1]
 8004f46:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004f48:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d1e1      	bne.n	8004f12 <HAL_UART_IRQHandler+0x39e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	3308      	adds	r3, #8
 8004f54:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f56:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004f58:	e853 3f00 	ldrex	r3, [r3]
 8004f5c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004f5e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004f60:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004f64:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	3308      	adds	r3, #8
 8004f6e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004f72:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004f74:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f76:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004f78:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004f7a:	e841 2300 	strex	r3, r2, [r1]
 8004f7e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004f80:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d1e3      	bne.n	8004f4e <HAL_UART_IRQHandler+0x3da>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2220      	movs	r2, #32
 8004f8a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2200      	movs	r2, #0
 8004f92:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f9a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004f9c:	e853 3f00 	ldrex	r3, [r3]
 8004fa0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004fa2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004fa4:	f023 0310 	bic.w	r3, r3, #16
 8004fa8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	461a      	mov	r2, r3
 8004fb2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004fb6:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004fb8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fba:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004fbc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004fbe:	e841 2300 	strex	r3, r2, [r1]
 8004fc2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004fc4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d1e4      	bne.n	8004f94 <HAL_UART_IRQHandler+0x420>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	f7fc fbec 	bl	80017ae <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2202      	movs	r2, #2
 8004fda:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004fe2:	687a      	ldr	r2, [r7, #4]
 8004fe4:	f8b2 105c 	ldrh.w	r1, [r2, #92]	@ 0x5c
 8004fe8:	687a      	ldr	r2, [r7, #4]
 8004fea:	f8b2 205e 	ldrh.w	r2, [r2, #94]	@ 0x5e
 8004fee:	b292      	uxth	r2, r2
 8004ff0:	1a8a      	subs	r2, r1, r2
 8004ff2:	b292      	uxth	r2, r2
 8004ff4:	4611      	mov	r1, r2
 8004ff6:	6878      	ldr	r0, [r7, #4]
 8004ff8:	4798      	blx	r3
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8004ffa:	e106      	b.n	800520a <HAL_UART_IRQHandler+0x696>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005002:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005006:	429a      	cmp	r2, r3
 8005008:	f040 80ff 	bne.w	800520a <HAL_UART_IRQHandler+0x696>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f003 0320 	and.w	r3, r3, #32
 800501a:	2b20      	cmp	r3, #32
 800501c:	f040 80f5 	bne.w	800520a <HAL_UART_IRQHandler+0x696>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2202      	movs	r2, #2
 8005024:	671a      	str	r2, [r3, #112]	@ 0x70
            huart->RxEventCallback(huart, huart->RxXferSize);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800502c:	687a      	ldr	r2, [r7, #4]
 800502e:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 8005032:	4611      	mov	r1, r2
 8005034:	6878      	ldr	r0, [r7, #4]
 8005036:	4798      	blx	r3
      return;
 8005038:	e0e7      	b.n	800520a <HAL_UART_IRQHandler+0x696>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005046:	b29b      	uxth	r3, r3
 8005048:	1ad3      	subs	r3, r2, r3
 800504a:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005054:	b29b      	uxth	r3, r3
 8005056:	2b00      	cmp	r3, #0
 8005058:	f000 80d9 	beq.w	800520e <HAL_UART_IRQHandler+0x69a>
          && (nb_rx_data > 0U))
 800505c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005060:	2b00      	cmp	r3, #0
 8005062:	f000 80d4 	beq.w	800520e <HAL_UART_IRQHandler+0x69a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800506c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800506e:	e853 3f00 	ldrex	r3, [r3]
 8005072:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005074:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005076:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800507a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	461a      	mov	r2, r3
 8005084:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005088:	647b      	str	r3, [r7, #68]	@ 0x44
 800508a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800508c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800508e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005090:	e841 2300 	strex	r3, r2, [r1]
 8005094:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005096:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005098:	2b00      	cmp	r3, #0
 800509a:	d1e4      	bne.n	8005066 <HAL_UART_IRQHandler+0x4f2>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	3308      	adds	r3, #8
 80050a2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050a6:	e853 3f00 	ldrex	r3, [r3]
 80050aa:	623b      	str	r3, [r7, #32]
   return(result);
 80050ac:	6a3b      	ldr	r3, [r7, #32]
 80050ae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80050b2:	f023 0301 	bic.w	r3, r3, #1
 80050b6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	3308      	adds	r3, #8
 80050c0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80050c4:	633a      	str	r2, [r7, #48]	@ 0x30
 80050c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050c8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80050ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80050cc:	e841 2300 	strex	r3, r2, [r1]
 80050d0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80050d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d1e1      	bne.n	800509c <HAL_UART_IRQHandler+0x528>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2220      	movs	r2, #32
 80050dc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2200      	movs	r2, #0
 80050e4:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2200      	movs	r2, #0
 80050ea:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050f2:	693b      	ldr	r3, [r7, #16]
 80050f4:	e853 3f00 	ldrex	r3, [r3]
 80050f8:	60fb      	str	r3, [r7, #12]
   return(result);
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	f023 0310 	bic.w	r3, r3, #16
 8005100:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	461a      	mov	r2, r3
 800510a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800510e:	61fb      	str	r3, [r7, #28]
 8005110:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005112:	69b9      	ldr	r1, [r7, #24]
 8005114:	69fa      	ldr	r2, [r7, #28]
 8005116:	e841 2300 	strex	r3, r2, [r1]
 800511a:	617b      	str	r3, [r7, #20]
   return(result);
 800511c:	697b      	ldr	r3, [r7, #20]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d1e4      	bne.n	80050ec <HAL_UART_IRQHandler+0x578>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2202      	movs	r2, #2
 8005126:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800512e:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	@ 0xce
 8005132:	4611      	mov	r1, r2
 8005134:	6878      	ldr	r0, [r7, #4]
 8005136:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005138:	e069      	b.n	800520e <HAL_UART_IRQHandler+0x69a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800513a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800513e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005142:	2b00      	cmp	r3, #0
 8005144:	d010      	beq.n	8005168 <HAL_UART_IRQHandler+0x5f4>
 8005146:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800514a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800514e:	2b00      	cmp	r3, #0
 8005150:	d00a      	beq.n	8005168 <HAL_UART_IRQHandler+0x5f4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800515a:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005162:	6878      	ldr	r0, [r7, #4]
 8005164:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005166:	e055      	b.n	8005214 <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005168:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800516c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005170:	2b00      	cmp	r3, #0
 8005172:	d014      	beq.n	800519e <HAL_UART_IRQHandler+0x62a>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005174:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005178:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800517c:	2b00      	cmp	r3, #0
 800517e:	d105      	bne.n	800518c <HAL_UART_IRQHandler+0x618>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005180:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005184:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005188:	2b00      	cmp	r3, #0
 800518a:	d008      	beq.n	800519e <HAL_UART_IRQHandler+0x62a>
  {
    if (huart->TxISR != NULL)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005190:	2b00      	cmp	r3, #0
 8005192:	d03e      	beq.n	8005212 <HAL_UART_IRQHandler+0x69e>
    {
      huart->TxISR(huart);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005198:	6878      	ldr	r0, [r7, #4]
 800519a:	4798      	blx	r3
    }
    return;
 800519c:	e039      	b.n	8005212 <HAL_UART_IRQHandler+0x69e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800519e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80051a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d009      	beq.n	80051be <HAL_UART_IRQHandler+0x64a>
 80051aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80051ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d003      	beq.n	80051be <HAL_UART_IRQHandler+0x64a>
  {
    UART_EndTransmit_IT(huart);
 80051b6:	6878      	ldr	r0, [r7, #4]
 80051b8:	f001 f812 	bl	80061e0 <UART_EndTransmit_IT>
    return;
 80051bc:	e02a      	b.n	8005214 <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80051be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80051c2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d00b      	beq.n	80051e2 <HAL_UART_IRQHandler+0x66e>
 80051ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80051ce:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d005      	beq.n	80051e2 <HAL_UART_IRQHandler+0x66e>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80051dc:	6878      	ldr	r0, [r7, #4]
 80051de:	4798      	blx	r3
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80051e0:	e018      	b.n	8005214 <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80051e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80051e6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d012      	beq.n	8005214 <HAL_UART_IRQHandler+0x6a0>
 80051ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	da0e      	bge.n	8005214 <HAL_UART_IRQHandler+0x6a0>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80051fc:	6878      	ldr	r0, [r7, #4]
 80051fe:	4798      	blx	r3
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005200:	e008      	b.n	8005214 <HAL_UART_IRQHandler+0x6a0>
      return;
 8005202:	bf00      	nop
 8005204:	e006      	b.n	8005214 <HAL_UART_IRQHandler+0x6a0>
    return;
 8005206:	bf00      	nop
 8005208:	e004      	b.n	8005214 <HAL_UART_IRQHandler+0x6a0>
      return;
 800520a:	bf00      	nop
 800520c:	e002      	b.n	8005214 <HAL_UART_IRQHandler+0x6a0>
      return;
 800520e:	bf00      	nop
 8005210:	e000      	b.n	8005214 <HAL_UART_IRQHandler+0x6a0>
    return;
 8005212:	bf00      	nop
  }
}
 8005214:	37e8      	adds	r7, #232	@ 0xe8
 8005216:	46bd      	mov	sp, r7
 8005218:	bd80      	pop	{r7, pc}
 800521a:	bf00      	nop

0800521c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800521c:	b480      	push	{r7}
 800521e:	b083      	sub	sp, #12
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005224:	bf00      	nop
 8005226:	370c      	adds	r7, #12
 8005228:	46bd      	mov	sp, r7
 800522a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522e:	4770      	bx	lr

08005230 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005230:	b480      	push	{r7}
 8005232:	b083      	sub	sp, #12
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8005238:	bf00      	nop
 800523a:	370c      	adds	r7, #12
 800523c:	46bd      	mov	sp, r7
 800523e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005242:	4770      	bx	lr

08005244 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005244:	b480      	push	{r7}
 8005246:	b083      	sub	sp, #12
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800524c:	bf00      	nop
 800524e:	370c      	adds	r7, #12
 8005250:	46bd      	mov	sp, r7
 8005252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005256:	4770      	bx	lr

08005258 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005258:	b480      	push	{r7}
 800525a:	b083      	sub	sp, #12
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8005260:	bf00      	nop
 8005262:	370c      	adds	r7, #12
 8005264:	46bd      	mov	sp, r7
 8005266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526a:	4770      	bx	lr

0800526c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800526c:	b480      	push	{r7}
 800526e:	b083      	sub	sp, #12
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005274:	bf00      	nop
 8005276:	370c      	adds	r7, #12
 8005278:	46bd      	mov	sp, r7
 800527a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527e:	4770      	bx	lr

08005280 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8005280:	b480      	push	{r7}
 8005282:	b083      	sub	sp, #12
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8005288:	bf00      	nop
 800528a:	370c      	adds	r7, #12
 800528c:	46bd      	mov	sp, r7
 800528e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005292:	4770      	bx	lr

08005294 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8005294:	b480      	push	{r7}
 8005296:	b083      	sub	sp, #12
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800529c:	bf00      	nop
 800529e:	370c      	adds	r7, #12
 80052a0:	46bd      	mov	sp, r7
 80052a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a6:	4770      	bx	lr

080052a8 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 80052a8:	b480      	push	{r7}
 80052aa:	b083      	sub	sp, #12
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 80052b0:	bf00      	nop
 80052b2:	370c      	adds	r7, #12
 80052b4:	46bd      	mov	sp, r7
 80052b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ba:	4770      	bx	lr

080052bc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80052bc:	b480      	push	{r7}
 80052be:	b083      	sub	sp, #12
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
 80052c4:	460b      	mov	r3, r1
 80052c6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80052c8:	bf00      	nop
 80052ca:	370c      	adds	r7, #12
 80052cc:	46bd      	mov	sp, r7
 80052ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d2:	4770      	bx	lr

080052d4 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 80052d4:	b480      	push	{r7}
 80052d6:	b083      	sub	sp, #12
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	4a1a      	ldr	r2, [pc, #104]	@ (8005348 <UART_InitCallbacksToDefault+0x74>)
 80052e0:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	4a19      	ldr	r2, [pc, #100]	@ (800534c <UART_InitCallbacksToDefault+0x78>)
 80052e8:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	4a18      	ldr	r2, [pc, #96]	@ (8005350 <UART_InitCallbacksToDefault+0x7c>)
 80052f0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	4a17      	ldr	r2, [pc, #92]	@ (8005354 <UART_InitCallbacksToDefault+0x80>)
 80052f8:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	4a16      	ldr	r2, [pc, #88]	@ (8005358 <UART_InitCallbacksToDefault+0x84>)
 8005300:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	4a15      	ldr	r2, [pc, #84]	@ (800535c <UART_InitCallbacksToDefault+0x88>)
 8005308:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	4a14      	ldr	r2, [pc, #80]	@ (8005360 <UART_InitCallbacksToDefault+0x8c>)
 8005310:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	4a13      	ldr	r2, [pc, #76]	@ (8005364 <UART_InitCallbacksToDefault+0x90>)
 8005318:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	4a12      	ldr	r2, [pc, #72]	@ (8005368 <UART_InitCallbacksToDefault+0x94>)
 8005320:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	4a11      	ldr	r2, [pc, #68]	@ (800536c <UART_InitCallbacksToDefault+0x98>)
 8005328:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	4a10      	ldr	r2, [pc, #64]	@ (8005370 <UART_InitCallbacksToDefault+0x9c>)
 8005330:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	4a0f      	ldr	r2, [pc, #60]	@ (8005374 <UART_InitCallbacksToDefault+0xa0>)
 8005338:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

}
 800533c:	bf00      	nop
 800533e:	370c      	adds	r7, #12
 8005340:	46bd      	mov	sp, r7
 8005342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005346:	4770      	bx	lr
 8005348:	08005231 	.word	0x08005231
 800534c:	0800521d 	.word	0x0800521d
 8005350:	08005259 	.word	0x08005259
 8005354:	08005245 	.word	0x08005245
 8005358:	0800526d 	.word	0x0800526d
 800535c:	08005281 	.word	0x08005281
 8005360:	08005295 	.word	0x08005295
 8005364:	080052a9 	.word	0x080052a9
 8005368:	08006ca5 	.word	0x08006ca5
 800536c:	08006cb9 	.word	0x08006cb9
 8005370:	08006ccd 	.word	0x08006ccd
 8005374:	080052bd 	.word	0x080052bd

08005378 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005378:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800537c:	b08c      	sub	sp, #48	@ 0x30
 800537e:	af00      	add	r7, sp, #0
 8005380:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005382:	2300      	movs	r3, #0
 8005384:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005388:	697b      	ldr	r3, [r7, #20]
 800538a:	689a      	ldr	r2, [r3, #8]
 800538c:	697b      	ldr	r3, [r7, #20]
 800538e:	691b      	ldr	r3, [r3, #16]
 8005390:	431a      	orrs	r2, r3
 8005392:	697b      	ldr	r3, [r7, #20]
 8005394:	695b      	ldr	r3, [r3, #20]
 8005396:	431a      	orrs	r2, r3
 8005398:	697b      	ldr	r3, [r7, #20]
 800539a:	69db      	ldr	r3, [r3, #28]
 800539c:	4313      	orrs	r3, r2
 800539e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80053a0:	697b      	ldr	r3, [r7, #20]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	681a      	ldr	r2, [r3, #0]
 80053a6:	4baa      	ldr	r3, [pc, #680]	@ (8005650 <UART_SetConfig+0x2d8>)
 80053a8:	4013      	ands	r3, r2
 80053aa:	697a      	ldr	r2, [r7, #20]
 80053ac:	6812      	ldr	r2, [r2, #0]
 80053ae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80053b0:	430b      	orrs	r3, r1
 80053b2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80053b4:	697b      	ldr	r3, [r7, #20]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	685b      	ldr	r3, [r3, #4]
 80053ba:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80053be:	697b      	ldr	r3, [r7, #20]
 80053c0:	68da      	ldr	r2, [r3, #12]
 80053c2:	697b      	ldr	r3, [r7, #20]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	430a      	orrs	r2, r1
 80053c8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80053ca:	697b      	ldr	r3, [r7, #20]
 80053cc:	699b      	ldr	r3, [r3, #24]
 80053ce:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80053d0:	697b      	ldr	r3, [r7, #20]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	4a9f      	ldr	r2, [pc, #636]	@ (8005654 <UART_SetConfig+0x2dc>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d004      	beq.n	80053e4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80053da:	697b      	ldr	r3, [r7, #20]
 80053dc:	6a1b      	ldr	r3, [r3, #32]
 80053de:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80053e0:	4313      	orrs	r3, r2
 80053e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80053e4:	697b      	ldr	r3, [r7, #20]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	689b      	ldr	r3, [r3, #8]
 80053ea:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80053ee:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80053f2:	697a      	ldr	r2, [r7, #20]
 80053f4:	6812      	ldr	r2, [r2, #0]
 80053f6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80053f8:	430b      	orrs	r3, r1
 80053fa:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80053fc:	697b      	ldr	r3, [r7, #20]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005402:	f023 010f 	bic.w	r1, r3, #15
 8005406:	697b      	ldr	r3, [r7, #20]
 8005408:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800540a:	697b      	ldr	r3, [r7, #20]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	430a      	orrs	r2, r1
 8005410:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005412:	697b      	ldr	r3, [r7, #20]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	4a90      	ldr	r2, [pc, #576]	@ (8005658 <UART_SetConfig+0x2e0>)
 8005418:	4293      	cmp	r3, r2
 800541a:	d125      	bne.n	8005468 <UART_SetConfig+0xf0>
 800541c:	4b8f      	ldr	r3, [pc, #572]	@ (800565c <UART_SetConfig+0x2e4>)
 800541e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005422:	f003 0303 	and.w	r3, r3, #3
 8005426:	2b03      	cmp	r3, #3
 8005428:	d81a      	bhi.n	8005460 <UART_SetConfig+0xe8>
 800542a:	a201      	add	r2, pc, #4	@ (adr r2, 8005430 <UART_SetConfig+0xb8>)
 800542c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005430:	08005441 	.word	0x08005441
 8005434:	08005451 	.word	0x08005451
 8005438:	08005449 	.word	0x08005449
 800543c:	08005459 	.word	0x08005459
 8005440:	2301      	movs	r3, #1
 8005442:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005446:	e116      	b.n	8005676 <UART_SetConfig+0x2fe>
 8005448:	2302      	movs	r3, #2
 800544a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800544e:	e112      	b.n	8005676 <UART_SetConfig+0x2fe>
 8005450:	2304      	movs	r3, #4
 8005452:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005456:	e10e      	b.n	8005676 <UART_SetConfig+0x2fe>
 8005458:	2308      	movs	r3, #8
 800545a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800545e:	e10a      	b.n	8005676 <UART_SetConfig+0x2fe>
 8005460:	2310      	movs	r3, #16
 8005462:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005466:	e106      	b.n	8005676 <UART_SetConfig+0x2fe>
 8005468:	697b      	ldr	r3, [r7, #20]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	4a7c      	ldr	r2, [pc, #496]	@ (8005660 <UART_SetConfig+0x2e8>)
 800546e:	4293      	cmp	r3, r2
 8005470:	d138      	bne.n	80054e4 <UART_SetConfig+0x16c>
 8005472:	4b7a      	ldr	r3, [pc, #488]	@ (800565c <UART_SetConfig+0x2e4>)
 8005474:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005478:	f003 030c 	and.w	r3, r3, #12
 800547c:	2b0c      	cmp	r3, #12
 800547e:	d82d      	bhi.n	80054dc <UART_SetConfig+0x164>
 8005480:	a201      	add	r2, pc, #4	@ (adr r2, 8005488 <UART_SetConfig+0x110>)
 8005482:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005486:	bf00      	nop
 8005488:	080054bd 	.word	0x080054bd
 800548c:	080054dd 	.word	0x080054dd
 8005490:	080054dd 	.word	0x080054dd
 8005494:	080054dd 	.word	0x080054dd
 8005498:	080054cd 	.word	0x080054cd
 800549c:	080054dd 	.word	0x080054dd
 80054a0:	080054dd 	.word	0x080054dd
 80054a4:	080054dd 	.word	0x080054dd
 80054a8:	080054c5 	.word	0x080054c5
 80054ac:	080054dd 	.word	0x080054dd
 80054b0:	080054dd 	.word	0x080054dd
 80054b4:	080054dd 	.word	0x080054dd
 80054b8:	080054d5 	.word	0x080054d5
 80054bc:	2300      	movs	r3, #0
 80054be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80054c2:	e0d8      	b.n	8005676 <UART_SetConfig+0x2fe>
 80054c4:	2302      	movs	r3, #2
 80054c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80054ca:	e0d4      	b.n	8005676 <UART_SetConfig+0x2fe>
 80054cc:	2304      	movs	r3, #4
 80054ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80054d2:	e0d0      	b.n	8005676 <UART_SetConfig+0x2fe>
 80054d4:	2308      	movs	r3, #8
 80054d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80054da:	e0cc      	b.n	8005676 <UART_SetConfig+0x2fe>
 80054dc:	2310      	movs	r3, #16
 80054de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80054e2:	e0c8      	b.n	8005676 <UART_SetConfig+0x2fe>
 80054e4:	697b      	ldr	r3, [r7, #20]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4a5e      	ldr	r2, [pc, #376]	@ (8005664 <UART_SetConfig+0x2ec>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d125      	bne.n	800553a <UART_SetConfig+0x1c2>
 80054ee:	4b5b      	ldr	r3, [pc, #364]	@ (800565c <UART_SetConfig+0x2e4>)
 80054f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054f4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80054f8:	2b30      	cmp	r3, #48	@ 0x30
 80054fa:	d016      	beq.n	800552a <UART_SetConfig+0x1b2>
 80054fc:	2b30      	cmp	r3, #48	@ 0x30
 80054fe:	d818      	bhi.n	8005532 <UART_SetConfig+0x1ba>
 8005500:	2b20      	cmp	r3, #32
 8005502:	d00a      	beq.n	800551a <UART_SetConfig+0x1a2>
 8005504:	2b20      	cmp	r3, #32
 8005506:	d814      	bhi.n	8005532 <UART_SetConfig+0x1ba>
 8005508:	2b00      	cmp	r3, #0
 800550a:	d002      	beq.n	8005512 <UART_SetConfig+0x19a>
 800550c:	2b10      	cmp	r3, #16
 800550e:	d008      	beq.n	8005522 <UART_SetConfig+0x1aa>
 8005510:	e00f      	b.n	8005532 <UART_SetConfig+0x1ba>
 8005512:	2300      	movs	r3, #0
 8005514:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005518:	e0ad      	b.n	8005676 <UART_SetConfig+0x2fe>
 800551a:	2302      	movs	r3, #2
 800551c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005520:	e0a9      	b.n	8005676 <UART_SetConfig+0x2fe>
 8005522:	2304      	movs	r3, #4
 8005524:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005528:	e0a5      	b.n	8005676 <UART_SetConfig+0x2fe>
 800552a:	2308      	movs	r3, #8
 800552c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005530:	e0a1      	b.n	8005676 <UART_SetConfig+0x2fe>
 8005532:	2310      	movs	r3, #16
 8005534:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005538:	e09d      	b.n	8005676 <UART_SetConfig+0x2fe>
 800553a:	697b      	ldr	r3, [r7, #20]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	4a4a      	ldr	r2, [pc, #296]	@ (8005668 <UART_SetConfig+0x2f0>)
 8005540:	4293      	cmp	r3, r2
 8005542:	d125      	bne.n	8005590 <UART_SetConfig+0x218>
 8005544:	4b45      	ldr	r3, [pc, #276]	@ (800565c <UART_SetConfig+0x2e4>)
 8005546:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800554a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800554e:	2bc0      	cmp	r3, #192	@ 0xc0
 8005550:	d016      	beq.n	8005580 <UART_SetConfig+0x208>
 8005552:	2bc0      	cmp	r3, #192	@ 0xc0
 8005554:	d818      	bhi.n	8005588 <UART_SetConfig+0x210>
 8005556:	2b80      	cmp	r3, #128	@ 0x80
 8005558:	d00a      	beq.n	8005570 <UART_SetConfig+0x1f8>
 800555a:	2b80      	cmp	r3, #128	@ 0x80
 800555c:	d814      	bhi.n	8005588 <UART_SetConfig+0x210>
 800555e:	2b00      	cmp	r3, #0
 8005560:	d002      	beq.n	8005568 <UART_SetConfig+0x1f0>
 8005562:	2b40      	cmp	r3, #64	@ 0x40
 8005564:	d008      	beq.n	8005578 <UART_SetConfig+0x200>
 8005566:	e00f      	b.n	8005588 <UART_SetConfig+0x210>
 8005568:	2300      	movs	r3, #0
 800556a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800556e:	e082      	b.n	8005676 <UART_SetConfig+0x2fe>
 8005570:	2302      	movs	r3, #2
 8005572:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005576:	e07e      	b.n	8005676 <UART_SetConfig+0x2fe>
 8005578:	2304      	movs	r3, #4
 800557a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800557e:	e07a      	b.n	8005676 <UART_SetConfig+0x2fe>
 8005580:	2308      	movs	r3, #8
 8005582:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005586:	e076      	b.n	8005676 <UART_SetConfig+0x2fe>
 8005588:	2310      	movs	r3, #16
 800558a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800558e:	e072      	b.n	8005676 <UART_SetConfig+0x2fe>
 8005590:	697b      	ldr	r3, [r7, #20]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	4a35      	ldr	r2, [pc, #212]	@ (800566c <UART_SetConfig+0x2f4>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d12a      	bne.n	80055f0 <UART_SetConfig+0x278>
 800559a:	4b30      	ldr	r3, [pc, #192]	@ (800565c <UART_SetConfig+0x2e4>)
 800559c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055a0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80055a4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80055a8:	d01a      	beq.n	80055e0 <UART_SetConfig+0x268>
 80055aa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80055ae:	d81b      	bhi.n	80055e8 <UART_SetConfig+0x270>
 80055b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80055b4:	d00c      	beq.n	80055d0 <UART_SetConfig+0x258>
 80055b6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80055ba:	d815      	bhi.n	80055e8 <UART_SetConfig+0x270>
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d003      	beq.n	80055c8 <UART_SetConfig+0x250>
 80055c0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80055c4:	d008      	beq.n	80055d8 <UART_SetConfig+0x260>
 80055c6:	e00f      	b.n	80055e8 <UART_SetConfig+0x270>
 80055c8:	2300      	movs	r3, #0
 80055ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80055ce:	e052      	b.n	8005676 <UART_SetConfig+0x2fe>
 80055d0:	2302      	movs	r3, #2
 80055d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80055d6:	e04e      	b.n	8005676 <UART_SetConfig+0x2fe>
 80055d8:	2304      	movs	r3, #4
 80055da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80055de:	e04a      	b.n	8005676 <UART_SetConfig+0x2fe>
 80055e0:	2308      	movs	r3, #8
 80055e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80055e6:	e046      	b.n	8005676 <UART_SetConfig+0x2fe>
 80055e8:	2310      	movs	r3, #16
 80055ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80055ee:	e042      	b.n	8005676 <UART_SetConfig+0x2fe>
 80055f0:	697b      	ldr	r3, [r7, #20]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	4a17      	ldr	r2, [pc, #92]	@ (8005654 <UART_SetConfig+0x2dc>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d13a      	bne.n	8005670 <UART_SetConfig+0x2f8>
 80055fa:	4b18      	ldr	r3, [pc, #96]	@ (800565c <UART_SetConfig+0x2e4>)
 80055fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005600:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005604:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005608:	d01a      	beq.n	8005640 <UART_SetConfig+0x2c8>
 800560a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800560e:	d81b      	bhi.n	8005648 <UART_SetConfig+0x2d0>
 8005610:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005614:	d00c      	beq.n	8005630 <UART_SetConfig+0x2b8>
 8005616:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800561a:	d815      	bhi.n	8005648 <UART_SetConfig+0x2d0>
 800561c:	2b00      	cmp	r3, #0
 800561e:	d003      	beq.n	8005628 <UART_SetConfig+0x2b0>
 8005620:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005624:	d008      	beq.n	8005638 <UART_SetConfig+0x2c0>
 8005626:	e00f      	b.n	8005648 <UART_SetConfig+0x2d0>
 8005628:	2300      	movs	r3, #0
 800562a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800562e:	e022      	b.n	8005676 <UART_SetConfig+0x2fe>
 8005630:	2302      	movs	r3, #2
 8005632:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005636:	e01e      	b.n	8005676 <UART_SetConfig+0x2fe>
 8005638:	2304      	movs	r3, #4
 800563a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800563e:	e01a      	b.n	8005676 <UART_SetConfig+0x2fe>
 8005640:	2308      	movs	r3, #8
 8005642:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005646:	e016      	b.n	8005676 <UART_SetConfig+0x2fe>
 8005648:	2310      	movs	r3, #16
 800564a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800564e:	e012      	b.n	8005676 <UART_SetConfig+0x2fe>
 8005650:	cfff69f3 	.word	0xcfff69f3
 8005654:	40008000 	.word	0x40008000
 8005658:	40013800 	.word	0x40013800
 800565c:	40021000 	.word	0x40021000
 8005660:	40004400 	.word	0x40004400
 8005664:	40004800 	.word	0x40004800
 8005668:	40004c00 	.word	0x40004c00
 800566c:	40005000 	.word	0x40005000
 8005670:	2310      	movs	r3, #16
 8005672:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005676:	697b      	ldr	r3, [r7, #20]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	4aae      	ldr	r2, [pc, #696]	@ (8005934 <UART_SetConfig+0x5bc>)
 800567c:	4293      	cmp	r3, r2
 800567e:	f040 8097 	bne.w	80057b0 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005682:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005686:	2b08      	cmp	r3, #8
 8005688:	d823      	bhi.n	80056d2 <UART_SetConfig+0x35a>
 800568a:	a201      	add	r2, pc, #4	@ (adr r2, 8005690 <UART_SetConfig+0x318>)
 800568c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005690:	080056b5 	.word	0x080056b5
 8005694:	080056d3 	.word	0x080056d3
 8005698:	080056bd 	.word	0x080056bd
 800569c:	080056d3 	.word	0x080056d3
 80056a0:	080056c3 	.word	0x080056c3
 80056a4:	080056d3 	.word	0x080056d3
 80056a8:	080056d3 	.word	0x080056d3
 80056ac:	080056d3 	.word	0x080056d3
 80056b0:	080056cb 	.word	0x080056cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80056b4:	f7fd f9ac 	bl	8002a10 <HAL_RCC_GetPCLK1Freq>
 80056b8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80056ba:	e010      	b.n	80056de <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80056bc:	4b9e      	ldr	r3, [pc, #632]	@ (8005938 <UART_SetConfig+0x5c0>)
 80056be:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80056c0:	e00d      	b.n	80056de <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80056c2:	f7fd f937 	bl	8002934 <HAL_RCC_GetSysClockFreq>
 80056c6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80056c8:	e009      	b.n	80056de <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80056ca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80056ce:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80056d0:	e005      	b.n	80056de <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80056d2:	2300      	movs	r3, #0
 80056d4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80056d6:	2301      	movs	r3, #1
 80056d8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80056dc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80056de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	f000 8130 	beq.w	8005946 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80056e6:	697b      	ldr	r3, [r7, #20]
 80056e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056ea:	4a94      	ldr	r2, [pc, #592]	@ (800593c <UART_SetConfig+0x5c4>)
 80056ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80056f0:	461a      	mov	r2, r3
 80056f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056f4:	fbb3 f3f2 	udiv	r3, r3, r2
 80056f8:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80056fa:	697b      	ldr	r3, [r7, #20]
 80056fc:	685a      	ldr	r2, [r3, #4]
 80056fe:	4613      	mov	r3, r2
 8005700:	005b      	lsls	r3, r3, #1
 8005702:	4413      	add	r3, r2
 8005704:	69ba      	ldr	r2, [r7, #24]
 8005706:	429a      	cmp	r2, r3
 8005708:	d305      	bcc.n	8005716 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800570a:	697b      	ldr	r3, [r7, #20]
 800570c:	685b      	ldr	r3, [r3, #4]
 800570e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005710:	69ba      	ldr	r2, [r7, #24]
 8005712:	429a      	cmp	r2, r3
 8005714:	d903      	bls.n	800571e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8005716:	2301      	movs	r3, #1
 8005718:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800571c:	e113      	b.n	8005946 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800571e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005720:	2200      	movs	r2, #0
 8005722:	60bb      	str	r3, [r7, #8]
 8005724:	60fa      	str	r2, [r7, #12]
 8005726:	697b      	ldr	r3, [r7, #20]
 8005728:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800572a:	4a84      	ldr	r2, [pc, #528]	@ (800593c <UART_SetConfig+0x5c4>)
 800572c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005730:	b29b      	uxth	r3, r3
 8005732:	2200      	movs	r2, #0
 8005734:	603b      	str	r3, [r7, #0]
 8005736:	607a      	str	r2, [r7, #4]
 8005738:	e9d7 2300 	ldrd	r2, r3, [r7]
 800573c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005740:	f7fa fd6a 	bl	8000218 <__aeabi_uldivmod>
 8005744:	4602      	mov	r2, r0
 8005746:	460b      	mov	r3, r1
 8005748:	4610      	mov	r0, r2
 800574a:	4619      	mov	r1, r3
 800574c:	f04f 0200 	mov.w	r2, #0
 8005750:	f04f 0300 	mov.w	r3, #0
 8005754:	020b      	lsls	r3, r1, #8
 8005756:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800575a:	0202      	lsls	r2, r0, #8
 800575c:	6979      	ldr	r1, [r7, #20]
 800575e:	6849      	ldr	r1, [r1, #4]
 8005760:	0849      	lsrs	r1, r1, #1
 8005762:	2000      	movs	r0, #0
 8005764:	460c      	mov	r4, r1
 8005766:	4605      	mov	r5, r0
 8005768:	eb12 0804 	adds.w	r8, r2, r4
 800576c:	eb43 0905 	adc.w	r9, r3, r5
 8005770:	697b      	ldr	r3, [r7, #20]
 8005772:	685b      	ldr	r3, [r3, #4]
 8005774:	2200      	movs	r2, #0
 8005776:	469a      	mov	sl, r3
 8005778:	4693      	mov	fp, r2
 800577a:	4652      	mov	r2, sl
 800577c:	465b      	mov	r3, fp
 800577e:	4640      	mov	r0, r8
 8005780:	4649      	mov	r1, r9
 8005782:	f7fa fd49 	bl	8000218 <__aeabi_uldivmod>
 8005786:	4602      	mov	r2, r0
 8005788:	460b      	mov	r3, r1
 800578a:	4613      	mov	r3, r2
 800578c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800578e:	6a3b      	ldr	r3, [r7, #32]
 8005790:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005794:	d308      	bcc.n	80057a8 <UART_SetConfig+0x430>
 8005796:	6a3b      	ldr	r3, [r7, #32]
 8005798:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800579c:	d204      	bcs.n	80057a8 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800579e:	697b      	ldr	r3, [r7, #20]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	6a3a      	ldr	r2, [r7, #32]
 80057a4:	60da      	str	r2, [r3, #12]
 80057a6:	e0ce      	b.n	8005946 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80057a8:	2301      	movs	r3, #1
 80057aa:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80057ae:	e0ca      	b.n	8005946 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80057b0:	697b      	ldr	r3, [r7, #20]
 80057b2:	69db      	ldr	r3, [r3, #28]
 80057b4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80057b8:	d166      	bne.n	8005888 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80057ba:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80057be:	2b08      	cmp	r3, #8
 80057c0:	d827      	bhi.n	8005812 <UART_SetConfig+0x49a>
 80057c2:	a201      	add	r2, pc, #4	@ (adr r2, 80057c8 <UART_SetConfig+0x450>)
 80057c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057c8:	080057ed 	.word	0x080057ed
 80057cc:	080057f5 	.word	0x080057f5
 80057d0:	080057fd 	.word	0x080057fd
 80057d4:	08005813 	.word	0x08005813
 80057d8:	08005803 	.word	0x08005803
 80057dc:	08005813 	.word	0x08005813
 80057e0:	08005813 	.word	0x08005813
 80057e4:	08005813 	.word	0x08005813
 80057e8:	0800580b 	.word	0x0800580b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80057ec:	f7fd f910 	bl	8002a10 <HAL_RCC_GetPCLK1Freq>
 80057f0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80057f2:	e014      	b.n	800581e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80057f4:	f7fd f922 	bl	8002a3c <HAL_RCC_GetPCLK2Freq>
 80057f8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80057fa:	e010      	b.n	800581e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80057fc:	4b4e      	ldr	r3, [pc, #312]	@ (8005938 <UART_SetConfig+0x5c0>)
 80057fe:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005800:	e00d      	b.n	800581e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005802:	f7fd f897 	bl	8002934 <HAL_RCC_GetSysClockFreq>
 8005806:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005808:	e009      	b.n	800581e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800580a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800580e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005810:	e005      	b.n	800581e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8005812:	2300      	movs	r3, #0
 8005814:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005816:	2301      	movs	r3, #1
 8005818:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800581c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800581e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005820:	2b00      	cmp	r3, #0
 8005822:	f000 8090 	beq.w	8005946 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005826:	697b      	ldr	r3, [r7, #20]
 8005828:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800582a:	4a44      	ldr	r2, [pc, #272]	@ (800593c <UART_SetConfig+0x5c4>)
 800582c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005830:	461a      	mov	r2, r3
 8005832:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005834:	fbb3 f3f2 	udiv	r3, r3, r2
 8005838:	005a      	lsls	r2, r3, #1
 800583a:	697b      	ldr	r3, [r7, #20]
 800583c:	685b      	ldr	r3, [r3, #4]
 800583e:	085b      	lsrs	r3, r3, #1
 8005840:	441a      	add	r2, r3
 8005842:	697b      	ldr	r3, [r7, #20]
 8005844:	685b      	ldr	r3, [r3, #4]
 8005846:	fbb2 f3f3 	udiv	r3, r2, r3
 800584a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800584c:	6a3b      	ldr	r3, [r7, #32]
 800584e:	2b0f      	cmp	r3, #15
 8005850:	d916      	bls.n	8005880 <UART_SetConfig+0x508>
 8005852:	6a3b      	ldr	r3, [r7, #32]
 8005854:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005858:	d212      	bcs.n	8005880 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800585a:	6a3b      	ldr	r3, [r7, #32]
 800585c:	b29b      	uxth	r3, r3
 800585e:	f023 030f 	bic.w	r3, r3, #15
 8005862:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005864:	6a3b      	ldr	r3, [r7, #32]
 8005866:	085b      	lsrs	r3, r3, #1
 8005868:	b29b      	uxth	r3, r3
 800586a:	f003 0307 	and.w	r3, r3, #7
 800586e:	b29a      	uxth	r2, r3
 8005870:	8bfb      	ldrh	r3, [r7, #30]
 8005872:	4313      	orrs	r3, r2
 8005874:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005876:	697b      	ldr	r3, [r7, #20]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	8bfa      	ldrh	r2, [r7, #30]
 800587c:	60da      	str	r2, [r3, #12]
 800587e:	e062      	b.n	8005946 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8005880:	2301      	movs	r3, #1
 8005882:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005886:	e05e      	b.n	8005946 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005888:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800588c:	2b08      	cmp	r3, #8
 800588e:	d828      	bhi.n	80058e2 <UART_SetConfig+0x56a>
 8005890:	a201      	add	r2, pc, #4	@ (adr r2, 8005898 <UART_SetConfig+0x520>)
 8005892:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005896:	bf00      	nop
 8005898:	080058bd 	.word	0x080058bd
 800589c:	080058c5 	.word	0x080058c5
 80058a0:	080058cd 	.word	0x080058cd
 80058a4:	080058e3 	.word	0x080058e3
 80058a8:	080058d3 	.word	0x080058d3
 80058ac:	080058e3 	.word	0x080058e3
 80058b0:	080058e3 	.word	0x080058e3
 80058b4:	080058e3 	.word	0x080058e3
 80058b8:	080058db 	.word	0x080058db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80058bc:	f7fd f8a8 	bl	8002a10 <HAL_RCC_GetPCLK1Freq>
 80058c0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80058c2:	e014      	b.n	80058ee <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80058c4:	f7fd f8ba 	bl	8002a3c <HAL_RCC_GetPCLK2Freq>
 80058c8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80058ca:	e010      	b.n	80058ee <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80058cc:	4b1a      	ldr	r3, [pc, #104]	@ (8005938 <UART_SetConfig+0x5c0>)
 80058ce:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80058d0:	e00d      	b.n	80058ee <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80058d2:	f7fd f82f 	bl	8002934 <HAL_RCC_GetSysClockFreq>
 80058d6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80058d8:	e009      	b.n	80058ee <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80058da:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80058de:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80058e0:	e005      	b.n	80058ee <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80058e2:	2300      	movs	r3, #0
 80058e4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80058e6:	2301      	movs	r3, #1
 80058e8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80058ec:	bf00      	nop
    }

    if (pclk != 0U)
 80058ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d028      	beq.n	8005946 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80058f4:	697b      	ldr	r3, [r7, #20]
 80058f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058f8:	4a10      	ldr	r2, [pc, #64]	@ (800593c <UART_SetConfig+0x5c4>)
 80058fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80058fe:	461a      	mov	r2, r3
 8005900:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005902:	fbb3 f2f2 	udiv	r2, r3, r2
 8005906:	697b      	ldr	r3, [r7, #20]
 8005908:	685b      	ldr	r3, [r3, #4]
 800590a:	085b      	lsrs	r3, r3, #1
 800590c:	441a      	add	r2, r3
 800590e:	697b      	ldr	r3, [r7, #20]
 8005910:	685b      	ldr	r3, [r3, #4]
 8005912:	fbb2 f3f3 	udiv	r3, r2, r3
 8005916:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005918:	6a3b      	ldr	r3, [r7, #32]
 800591a:	2b0f      	cmp	r3, #15
 800591c:	d910      	bls.n	8005940 <UART_SetConfig+0x5c8>
 800591e:	6a3b      	ldr	r3, [r7, #32]
 8005920:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005924:	d20c      	bcs.n	8005940 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005926:	6a3b      	ldr	r3, [r7, #32]
 8005928:	b29a      	uxth	r2, r3
 800592a:	697b      	ldr	r3, [r7, #20]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	60da      	str	r2, [r3, #12]
 8005930:	e009      	b.n	8005946 <UART_SetConfig+0x5ce>
 8005932:	bf00      	nop
 8005934:	40008000 	.word	0x40008000
 8005938:	00f42400 	.word	0x00f42400
 800593c:	08006f8c 	.word	0x08006f8c
      }
      else
      {
        ret = HAL_ERROR;
 8005940:	2301      	movs	r3, #1
 8005942:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005946:	697b      	ldr	r3, [r7, #20]
 8005948:	2201      	movs	r2, #1
 800594a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800594e:	697b      	ldr	r3, [r7, #20]
 8005950:	2201      	movs	r2, #1
 8005952:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005956:	697b      	ldr	r3, [r7, #20]
 8005958:	2200      	movs	r2, #0
 800595a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800595c:	697b      	ldr	r3, [r7, #20]
 800595e:	2200      	movs	r2, #0
 8005960:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005962:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8005966:	4618      	mov	r0, r3
 8005968:	3730      	adds	r7, #48	@ 0x30
 800596a:	46bd      	mov	sp, r7
 800596c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08005970 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005970:	b480      	push	{r7}
 8005972:	b083      	sub	sp, #12
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800597c:	f003 0308 	and.w	r3, r3, #8
 8005980:	2b00      	cmp	r3, #0
 8005982:	d00a      	beq.n	800599a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	685b      	ldr	r3, [r3, #4]
 800598a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	430a      	orrs	r2, r1
 8005998:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800599e:	f003 0301 	and.w	r3, r3, #1
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d00a      	beq.n	80059bc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	685b      	ldr	r3, [r3, #4]
 80059ac:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	430a      	orrs	r2, r1
 80059ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059c0:	f003 0302 	and.w	r3, r3, #2
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d00a      	beq.n	80059de <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	685b      	ldr	r3, [r3, #4]
 80059ce:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	430a      	orrs	r2, r1
 80059dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059e2:	f003 0304 	and.w	r3, r3, #4
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d00a      	beq.n	8005a00 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	685b      	ldr	r3, [r3, #4]
 80059f0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	430a      	orrs	r2, r1
 80059fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a04:	f003 0310 	and.w	r3, r3, #16
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d00a      	beq.n	8005a22 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	689b      	ldr	r3, [r3, #8]
 8005a12:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	430a      	orrs	r2, r1
 8005a20:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a26:	f003 0320 	and.w	r3, r3, #32
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d00a      	beq.n	8005a44 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	689b      	ldr	r3, [r3, #8]
 8005a34:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	430a      	orrs	r2, r1
 8005a42:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d01a      	beq.n	8005a86 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	685b      	ldr	r3, [r3, #4]
 8005a56:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	430a      	orrs	r2, r1
 8005a64:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a6a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005a6e:	d10a      	bne.n	8005a86 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	685b      	ldr	r3, [r3, #4]
 8005a76:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	430a      	orrs	r2, r1
 8005a84:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d00a      	beq.n	8005aa8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	685b      	ldr	r3, [r3, #4]
 8005a98:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	430a      	orrs	r2, r1
 8005aa6:	605a      	str	r2, [r3, #4]
  }
}
 8005aa8:	bf00      	nop
 8005aaa:	370c      	adds	r7, #12
 8005aac:	46bd      	mov	sp, r7
 8005aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab2:	4770      	bx	lr

08005ab4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b098      	sub	sp, #96	@ 0x60
 8005ab8:	af02      	add	r7, sp, #8
 8005aba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2200      	movs	r2, #0
 8005ac0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005ac4:	f7fb fc34 	bl	8001330 <HAL_GetTick>
 8005ac8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f003 0308 	and.w	r3, r3, #8
 8005ad4:	2b08      	cmp	r3, #8
 8005ad6:	d12f      	bne.n	8005b38 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005ad8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005adc:	9300      	str	r3, [sp, #0]
 8005ade:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005ae6:	6878      	ldr	r0, [r7, #4]
 8005ae8:	f000 f88e 	bl	8005c08 <UART_WaitOnFlagUntilTimeout>
 8005aec:	4603      	mov	r3, r0
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d022      	beq.n	8005b38 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005af8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005afa:	e853 3f00 	ldrex	r3, [r3]
 8005afe:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005b00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b02:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005b06:	653b      	str	r3, [r7, #80]	@ 0x50
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	461a      	mov	r2, r3
 8005b0e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005b10:	647b      	str	r3, [r7, #68]	@ 0x44
 8005b12:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b14:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005b16:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005b18:	e841 2300 	strex	r3, r2, [r1]
 8005b1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005b1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d1e6      	bne.n	8005af2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2220      	movs	r2, #32
 8005b28:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2200      	movs	r2, #0
 8005b30:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005b34:	2303      	movs	r3, #3
 8005b36:	e063      	b.n	8005c00 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f003 0304 	and.w	r3, r3, #4
 8005b42:	2b04      	cmp	r3, #4
 8005b44:	d149      	bne.n	8005bda <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005b46:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005b4a:	9300      	str	r3, [sp, #0]
 8005b4c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005b4e:	2200      	movs	r2, #0
 8005b50:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005b54:	6878      	ldr	r0, [r7, #4]
 8005b56:	f000 f857 	bl	8005c08 <UART_WaitOnFlagUntilTimeout>
 8005b5a:	4603      	mov	r3, r0
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d03c      	beq.n	8005bda <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b68:	e853 3f00 	ldrex	r3, [r3]
 8005b6c:	623b      	str	r3, [r7, #32]
   return(result);
 8005b6e:	6a3b      	ldr	r3, [r7, #32]
 8005b70:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005b74:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	461a      	mov	r2, r3
 8005b7c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005b7e:	633b      	str	r3, [r7, #48]	@ 0x30
 8005b80:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b82:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005b84:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005b86:	e841 2300 	strex	r3, r2, [r1]
 8005b8a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005b8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d1e6      	bne.n	8005b60 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	3308      	adds	r3, #8
 8005b98:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b9a:	693b      	ldr	r3, [r7, #16]
 8005b9c:	e853 3f00 	ldrex	r3, [r3]
 8005ba0:	60fb      	str	r3, [r7, #12]
   return(result);
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	f023 0301 	bic.w	r3, r3, #1
 8005ba8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	3308      	adds	r3, #8
 8005bb0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005bb2:	61fa      	str	r2, [r7, #28]
 8005bb4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bb6:	69b9      	ldr	r1, [r7, #24]
 8005bb8:	69fa      	ldr	r2, [r7, #28]
 8005bba:	e841 2300 	strex	r3, r2, [r1]
 8005bbe:	617b      	str	r3, [r7, #20]
   return(result);
 8005bc0:	697b      	ldr	r3, [r7, #20]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d1e5      	bne.n	8005b92 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2220      	movs	r2, #32
 8005bca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005bd6:	2303      	movs	r3, #3
 8005bd8:	e012      	b.n	8005c00 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2220      	movs	r2, #32
 8005bde:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2220      	movs	r2, #32
 8005be6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	2200      	movs	r2, #0
 8005bee:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005bfe:	2300      	movs	r3, #0
}
 8005c00:	4618      	mov	r0, r3
 8005c02:	3758      	adds	r7, #88	@ 0x58
 8005c04:	46bd      	mov	sp, r7
 8005c06:	bd80      	pop	{r7, pc}

08005c08 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b084      	sub	sp, #16
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	60f8      	str	r0, [r7, #12]
 8005c10:	60b9      	str	r1, [r7, #8]
 8005c12:	603b      	str	r3, [r7, #0]
 8005c14:	4613      	mov	r3, r2
 8005c16:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c18:	e04f      	b.n	8005cba <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c1a:	69bb      	ldr	r3, [r7, #24]
 8005c1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c20:	d04b      	beq.n	8005cba <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c22:	f7fb fb85 	bl	8001330 <HAL_GetTick>
 8005c26:	4602      	mov	r2, r0
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	1ad3      	subs	r3, r2, r3
 8005c2c:	69ba      	ldr	r2, [r7, #24]
 8005c2e:	429a      	cmp	r2, r3
 8005c30:	d302      	bcc.n	8005c38 <UART_WaitOnFlagUntilTimeout+0x30>
 8005c32:	69bb      	ldr	r3, [r7, #24]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d101      	bne.n	8005c3c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005c38:	2303      	movs	r3, #3
 8005c3a:	e04e      	b.n	8005cda <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f003 0304 	and.w	r3, r3, #4
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d037      	beq.n	8005cba <UART_WaitOnFlagUntilTimeout+0xb2>
 8005c4a:	68bb      	ldr	r3, [r7, #8]
 8005c4c:	2b80      	cmp	r3, #128	@ 0x80
 8005c4e:	d034      	beq.n	8005cba <UART_WaitOnFlagUntilTimeout+0xb2>
 8005c50:	68bb      	ldr	r3, [r7, #8]
 8005c52:	2b40      	cmp	r3, #64	@ 0x40
 8005c54:	d031      	beq.n	8005cba <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	69db      	ldr	r3, [r3, #28]
 8005c5c:	f003 0308 	and.w	r3, r3, #8
 8005c60:	2b08      	cmp	r3, #8
 8005c62:	d110      	bne.n	8005c86 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	2208      	movs	r2, #8
 8005c6a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005c6c:	68f8      	ldr	r0, [r7, #12]
 8005c6e:	f000 f99c 	bl	8005faa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	2208      	movs	r2, #8
 8005c76:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8005c82:	2301      	movs	r3, #1
 8005c84:	e029      	b.n	8005cda <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	69db      	ldr	r3, [r3, #28]
 8005c8c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005c90:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005c94:	d111      	bne.n	8005cba <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005c9e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005ca0:	68f8      	ldr	r0, [r7, #12]
 8005ca2:	f000 f982 	bl	8005faa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	2220      	movs	r2, #32
 8005caa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8005cb6:	2303      	movs	r3, #3
 8005cb8:	e00f      	b.n	8005cda <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	69da      	ldr	r2, [r3, #28]
 8005cc0:	68bb      	ldr	r3, [r7, #8]
 8005cc2:	4013      	ands	r3, r2
 8005cc4:	68ba      	ldr	r2, [r7, #8]
 8005cc6:	429a      	cmp	r2, r3
 8005cc8:	bf0c      	ite	eq
 8005cca:	2301      	moveq	r3, #1
 8005ccc:	2300      	movne	r3, #0
 8005cce:	b2db      	uxtb	r3, r3
 8005cd0:	461a      	mov	r2, r3
 8005cd2:	79fb      	ldrb	r3, [r7, #7]
 8005cd4:	429a      	cmp	r2, r3
 8005cd6:	d0a0      	beq.n	8005c1a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005cd8:	2300      	movs	r3, #0
}
 8005cda:	4618      	mov	r0, r3
 8005cdc:	3710      	adds	r7, #16
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	bd80      	pop	{r7, pc}
	...

08005ce4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005ce4:	b480      	push	{r7}
 8005ce6:	b0a3      	sub	sp, #140	@ 0x8c
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	60f8      	str	r0, [r7, #12]
 8005cec:	60b9      	str	r1, [r7, #8]
 8005cee:	4613      	mov	r3, r2
 8005cf0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	68ba      	ldr	r2, [r7, #8]
 8005cf6:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	88fa      	ldrh	r2, [r7, #6]
 8005cfc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	88fa      	ldrh	r2, [r7, #6]
 8005d04:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	689b      	ldr	r3, [r3, #8]
 8005d12:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d16:	d10e      	bne.n	8005d36 <UART_Start_Receive_IT+0x52>
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	691b      	ldr	r3, [r3, #16]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d105      	bne.n	8005d2c <UART_Start_Receive_IT+0x48>
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8005d26:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8005d2a:	e02d      	b.n	8005d88 <UART_Start_Receive_IT+0xa4>
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	22ff      	movs	r2, #255	@ 0xff
 8005d30:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8005d34:	e028      	b.n	8005d88 <UART_Start_Receive_IT+0xa4>
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	689b      	ldr	r3, [r3, #8]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d10d      	bne.n	8005d5a <UART_Start_Receive_IT+0x76>
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	691b      	ldr	r3, [r3, #16]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d104      	bne.n	8005d50 <UART_Start_Receive_IT+0x6c>
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	22ff      	movs	r2, #255	@ 0xff
 8005d4a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8005d4e:	e01b      	b.n	8005d88 <UART_Start_Receive_IT+0xa4>
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	227f      	movs	r2, #127	@ 0x7f
 8005d54:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8005d58:	e016      	b.n	8005d88 <UART_Start_Receive_IT+0xa4>
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	689b      	ldr	r3, [r3, #8]
 8005d5e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005d62:	d10d      	bne.n	8005d80 <UART_Start_Receive_IT+0x9c>
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	691b      	ldr	r3, [r3, #16]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d104      	bne.n	8005d76 <UART_Start_Receive_IT+0x92>
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	227f      	movs	r2, #127	@ 0x7f
 8005d70:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8005d74:	e008      	b.n	8005d88 <UART_Start_Receive_IT+0xa4>
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	223f      	movs	r2, #63	@ 0x3f
 8005d7a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8005d7e:	e003      	b.n	8005d88 <UART_Start_Receive_IT+0xa4>
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	2200      	movs	r2, #0
 8005d84:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	2222      	movs	r2, #34	@ 0x22
 8005d94:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	3308      	adds	r3, #8
 8005d9e:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005da0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005da2:	e853 3f00 	ldrex	r3, [r3]
 8005da6:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8005da8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005daa:	f043 0301 	orr.w	r3, r3, #1
 8005dae:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	3308      	adds	r3, #8
 8005db8:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8005dbc:	673a      	str	r2, [r7, #112]	@ 0x70
 8005dbe:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dc0:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8005dc2:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8005dc4:	e841 2300 	strex	r3, r2, [r1]
 8005dc8:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 8005dca:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d1e3      	bne.n	8005d98 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005dd4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005dd8:	d14f      	bne.n	8005e7a <UART_Start_Receive_IT+0x196>
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8005de0:	88fa      	ldrh	r2, [r7, #6]
 8005de2:	429a      	cmp	r2, r3
 8005de4:	d349      	bcc.n	8005e7a <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	689b      	ldr	r3, [r3, #8]
 8005dea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005dee:	d107      	bne.n	8005e00 <UART_Start_Receive_IT+0x11c>
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	691b      	ldr	r3, [r3, #16]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d103      	bne.n	8005e00 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	4a47      	ldr	r2, [pc, #284]	@ (8005f18 <UART_Start_Receive_IT+0x234>)
 8005dfc:	675a      	str	r2, [r3, #116]	@ 0x74
 8005dfe:	e002      	b.n	8005e06 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	4a46      	ldr	r2, [pc, #280]	@ (8005f1c <UART_Start_Receive_IT+0x238>)
 8005e04:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	691b      	ldr	r3, [r3, #16]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d01a      	beq.n	8005e44 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e14:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005e16:	e853 3f00 	ldrex	r3, [r3]
 8005e1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8005e1c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005e1e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005e22:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	461a      	mov	r2, r3
 8005e2c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005e30:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005e32:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e34:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8005e36:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8005e38:	e841 2300 	strex	r3, r2, [r1]
 8005e3c:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8005e3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d1e4      	bne.n	8005e0e <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	3308      	adds	r3, #8
 8005e4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e4c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e4e:	e853 3f00 	ldrex	r3, [r3]
 8005e52:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005e54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e56:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005e5a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	3308      	adds	r3, #8
 8005e62:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8005e64:	64ba      	str	r2, [r7, #72]	@ 0x48
 8005e66:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e68:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005e6a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005e6c:	e841 2300 	strex	r3, r2, [r1]
 8005e70:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8005e72:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d1e5      	bne.n	8005e44 <UART_Start_Receive_IT+0x160>
 8005e78:	e046      	b.n	8005f08 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	689b      	ldr	r3, [r3, #8]
 8005e7e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e82:	d107      	bne.n	8005e94 <UART_Start_Receive_IT+0x1b0>
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	691b      	ldr	r3, [r3, #16]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d103      	bne.n	8005e94 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	4a24      	ldr	r2, [pc, #144]	@ (8005f20 <UART_Start_Receive_IT+0x23c>)
 8005e90:	675a      	str	r2, [r3, #116]	@ 0x74
 8005e92:	e002      	b.n	8005e9a <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	4a23      	ldr	r2, [pc, #140]	@ (8005f24 <UART_Start_Receive_IT+0x240>)
 8005e98:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	691b      	ldr	r3, [r3, #16]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d019      	beq.n	8005ed6 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ea8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005eaa:	e853 3f00 	ldrex	r3, [r3]
 8005eae:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005eb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005eb2:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8005eb6:	677b      	str	r3, [r7, #116]	@ 0x74
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	461a      	mov	r2, r3
 8005ebe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005ec0:	637b      	str	r3, [r7, #52]	@ 0x34
 8005ec2:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ec4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005ec6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005ec8:	e841 2300 	strex	r3, r2, [r1]
 8005ecc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8005ece:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d1e6      	bne.n	8005ea2 <UART_Start_Receive_IT+0x1be>
 8005ed4:	e018      	b.n	8005f08 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005edc:	697b      	ldr	r3, [r7, #20]
 8005ede:	e853 3f00 	ldrex	r3, [r3]
 8005ee2:	613b      	str	r3, [r7, #16]
   return(result);
 8005ee4:	693b      	ldr	r3, [r7, #16]
 8005ee6:	f043 0320 	orr.w	r3, r3, #32
 8005eea:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	461a      	mov	r2, r3
 8005ef2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005ef4:	623b      	str	r3, [r7, #32]
 8005ef6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ef8:	69f9      	ldr	r1, [r7, #28]
 8005efa:	6a3a      	ldr	r2, [r7, #32]
 8005efc:	e841 2300 	strex	r3, r2, [r1]
 8005f00:	61bb      	str	r3, [r7, #24]
   return(result);
 8005f02:	69bb      	ldr	r3, [r7, #24]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d1e6      	bne.n	8005ed6 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8005f08:	2300      	movs	r3, #0
}
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	378c      	adds	r7, #140	@ 0x8c
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f14:	4770      	bx	lr
 8005f16:	bf00      	nop
 8005f18:	0800692d 	.word	0x0800692d
 8005f1c:	080065bd 	.word	0x080065bd
 8005f20:	080063fd 	.word	0x080063fd
 8005f24:	0800623d 	.word	0x0800623d

08005f28 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005f28:	b480      	push	{r7}
 8005f2a:	b08f      	sub	sp, #60	@ 0x3c
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f36:	6a3b      	ldr	r3, [r7, #32]
 8005f38:	e853 3f00 	ldrex	r3, [r3]
 8005f3c:	61fb      	str	r3, [r7, #28]
   return(result);
 8005f3e:	69fb      	ldr	r3, [r7, #28]
 8005f40:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8005f44:	637b      	str	r3, [r7, #52]	@ 0x34
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	461a      	mov	r2, r3
 8005f4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005f50:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f52:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005f54:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005f56:	e841 2300 	strex	r3, r2, [r1]
 8005f5a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005f5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d1e6      	bne.n	8005f30 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	3308      	adds	r3, #8
 8005f68:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	e853 3f00 	ldrex	r3, [r3]
 8005f70:	60bb      	str	r3, [r7, #8]
   return(result);
 8005f72:	68bb      	ldr	r3, [r7, #8]
 8005f74:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8005f78:	633b      	str	r3, [r7, #48]	@ 0x30
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	3308      	adds	r3, #8
 8005f80:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005f82:	61ba      	str	r2, [r7, #24]
 8005f84:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f86:	6979      	ldr	r1, [r7, #20]
 8005f88:	69ba      	ldr	r2, [r7, #24]
 8005f8a:	e841 2300 	strex	r3, r2, [r1]
 8005f8e:	613b      	str	r3, [r7, #16]
   return(result);
 8005f90:	693b      	ldr	r3, [r7, #16]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d1e5      	bne.n	8005f62 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2220      	movs	r2, #32
 8005f9a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8005f9e:	bf00      	nop
 8005fa0:	373c      	adds	r7, #60	@ 0x3c
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa8:	4770      	bx	lr

08005faa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005faa:	b480      	push	{r7}
 8005fac:	b095      	sub	sp, #84	@ 0x54
 8005fae:	af00      	add	r7, sp, #0
 8005fb0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fb8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005fba:	e853 3f00 	ldrex	r3, [r3]
 8005fbe:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005fc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fc2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005fc6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	461a      	mov	r2, r3
 8005fce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005fd0:	643b      	str	r3, [r7, #64]	@ 0x40
 8005fd2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fd4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005fd6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005fd8:	e841 2300 	strex	r3, r2, [r1]
 8005fdc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005fde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d1e6      	bne.n	8005fb2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	3308      	adds	r3, #8
 8005fea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fec:	6a3b      	ldr	r3, [r7, #32]
 8005fee:	e853 3f00 	ldrex	r3, [r3]
 8005ff2:	61fb      	str	r3, [r7, #28]
   return(result);
 8005ff4:	69fb      	ldr	r3, [r7, #28]
 8005ff6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005ffa:	f023 0301 	bic.w	r3, r3, #1
 8005ffe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	3308      	adds	r3, #8
 8006006:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006008:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800600a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800600c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800600e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006010:	e841 2300 	strex	r3, r2, [r1]
 8006014:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006018:	2b00      	cmp	r3, #0
 800601a:	d1e3      	bne.n	8005fe4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006020:	2b01      	cmp	r3, #1
 8006022:	d118      	bne.n	8006056 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	e853 3f00 	ldrex	r3, [r3]
 8006030:	60bb      	str	r3, [r7, #8]
   return(result);
 8006032:	68bb      	ldr	r3, [r7, #8]
 8006034:	f023 0310 	bic.w	r3, r3, #16
 8006038:	647b      	str	r3, [r7, #68]	@ 0x44
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	461a      	mov	r2, r3
 8006040:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006042:	61bb      	str	r3, [r7, #24]
 8006044:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006046:	6979      	ldr	r1, [r7, #20]
 8006048:	69ba      	ldr	r2, [r7, #24]
 800604a:	e841 2300 	strex	r3, r2, [r1]
 800604e:	613b      	str	r3, [r7, #16]
   return(result);
 8006050:	693b      	ldr	r3, [r7, #16]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d1e6      	bne.n	8006024 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	2220      	movs	r2, #32
 800605a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	2200      	movs	r2, #0
 8006062:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2200      	movs	r2, #0
 8006068:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800606a:	bf00      	nop
 800606c:	3754      	adds	r7, #84	@ 0x54
 800606e:	46bd      	mov	sp, r7
 8006070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006074:	4770      	bx	lr

08006076 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006076:	b580      	push	{r7, lr}
 8006078:	b090      	sub	sp, #64	@ 0x40
 800607a:	af00      	add	r7, sp, #0
 800607c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006082:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f003 0320 	and.w	r3, r3, #32
 800608e:	2b00      	cmp	r3, #0
 8006090:	d137      	bne.n	8006102 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8006092:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006094:	2200      	movs	r2, #0
 8006096:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800609a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	3308      	adds	r3, #8
 80060a0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060a4:	e853 3f00 	ldrex	r3, [r3]
 80060a8:	623b      	str	r3, [r7, #32]
   return(result);
 80060aa:	6a3b      	ldr	r3, [r7, #32]
 80060ac:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80060b0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80060b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	3308      	adds	r3, #8
 80060b8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80060ba:	633a      	str	r2, [r7, #48]	@ 0x30
 80060bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060be:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80060c0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80060c2:	e841 2300 	strex	r3, r2, [r1]
 80060c6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80060c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d1e5      	bne.n	800609a <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80060ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060d4:	693b      	ldr	r3, [r7, #16]
 80060d6:	e853 3f00 	ldrex	r3, [r3]
 80060da:	60fb      	str	r3, [r7, #12]
   return(result);
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80060e2:	637b      	str	r3, [r7, #52]	@ 0x34
 80060e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	461a      	mov	r2, r3
 80060ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80060ec:	61fb      	str	r3, [r7, #28]
 80060ee:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060f0:	69b9      	ldr	r1, [r7, #24]
 80060f2:	69fa      	ldr	r2, [r7, #28]
 80060f4:	e841 2300 	strex	r3, r2, [r1]
 80060f8:	617b      	str	r3, [r7, #20]
   return(result);
 80060fa:	697b      	ldr	r3, [r7, #20]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d1e6      	bne.n	80060ce <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006100:	e004      	b.n	800610c <UART_DMATransmitCplt+0x96>
    huart->TxCpltCallback(huart);
 8006102:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006104:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006108:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800610a:	4798      	blx	r3
}
 800610c:	bf00      	nop
 800610e:	3740      	adds	r7, #64	@ 0x40
 8006110:	46bd      	mov	sp, r7
 8006112:	bd80      	pop	{r7, pc}

08006114 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006114:	b580      	push	{r7, lr}
 8006116:	b084      	sub	sp, #16
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006120:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006128:	68f8      	ldr	r0, [r7, #12]
 800612a:	4798      	blx	r3
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800612c:	bf00      	nop
 800612e:	3710      	adds	r7, #16
 8006130:	46bd      	mov	sp, r7
 8006132:	bd80      	pop	{r7, pc}

08006134 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006134:	b580      	push	{r7, lr}
 8006136:	b086      	sub	sp, #24
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006140:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8006142:	697b      	ldr	r3, [r7, #20]
 8006144:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006148:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800614a:	697b      	ldr	r3, [r7, #20]
 800614c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006150:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8006152:	697b      	ldr	r3, [r7, #20]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	689b      	ldr	r3, [r3, #8]
 8006158:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800615c:	2b80      	cmp	r3, #128	@ 0x80
 800615e:	d109      	bne.n	8006174 <UART_DMAError+0x40>
 8006160:	693b      	ldr	r3, [r7, #16]
 8006162:	2b21      	cmp	r3, #33	@ 0x21
 8006164:	d106      	bne.n	8006174 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8006166:	697b      	ldr	r3, [r7, #20]
 8006168:	2200      	movs	r2, #0
 800616a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800616e:	6978      	ldr	r0, [r7, #20]
 8006170:	f7ff feda 	bl	8005f28 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8006174:	697b      	ldr	r3, [r7, #20]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	689b      	ldr	r3, [r3, #8]
 800617a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800617e:	2b40      	cmp	r3, #64	@ 0x40
 8006180:	d109      	bne.n	8006196 <UART_DMAError+0x62>
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	2b22      	cmp	r3, #34	@ 0x22
 8006186:	d106      	bne.n	8006196 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8006188:	697b      	ldr	r3, [r7, #20]
 800618a:	2200      	movs	r2, #0
 800618c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8006190:	6978      	ldr	r0, [r7, #20]
 8006192:	f7ff ff0a 	bl	8005faa <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006196:	697b      	ldr	r3, [r7, #20]
 8006198:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800619c:	f043 0210 	orr.w	r2, r3, #16
 80061a0:	697b      	ldr	r3, [r7, #20]
 80061a2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 80061a6:	697b      	ldr	r3, [r7, #20]
 80061a8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80061ac:	6978      	ldr	r0, [r7, #20]
 80061ae:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80061b0:	bf00      	nop
 80061b2:	3718      	adds	r7, #24
 80061b4:	46bd      	mov	sp, r7
 80061b6:	bd80      	pop	{r7, pc}

080061b8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b084      	sub	sp, #16
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061c4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	2200      	movs	r2, #0
 80061ca:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80061d4:	68f8      	ldr	r0, [r7, #12]
 80061d6:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80061d8:	bf00      	nop
 80061da:	3710      	adds	r7, #16
 80061dc:	46bd      	mov	sp, r7
 80061de:	bd80      	pop	{r7, pc}

080061e0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b088      	sub	sp, #32
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	e853 3f00 	ldrex	r3, [r3]
 80061f4:	60bb      	str	r3, [r7, #8]
   return(result);
 80061f6:	68bb      	ldr	r3, [r7, #8]
 80061f8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80061fc:	61fb      	str	r3, [r7, #28]
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	461a      	mov	r2, r3
 8006204:	69fb      	ldr	r3, [r7, #28]
 8006206:	61bb      	str	r3, [r7, #24]
 8006208:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800620a:	6979      	ldr	r1, [r7, #20]
 800620c:	69ba      	ldr	r2, [r7, #24]
 800620e:	e841 2300 	strex	r3, r2, [r1]
 8006212:	613b      	str	r3, [r7, #16]
   return(result);
 8006214:	693b      	ldr	r3, [r7, #16]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d1e6      	bne.n	80061e8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	2220      	movs	r2, #32
 800621e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	2200      	movs	r2, #0
 8006226:	679a      	str	r2, [r3, #120]	@ 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800622e:	6878      	ldr	r0, [r7, #4]
 8006230:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006232:	bf00      	nop
 8006234:	3720      	adds	r7, #32
 8006236:	46bd      	mov	sp, r7
 8006238:	bd80      	pop	{r7, pc}
	...

0800623c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800623c:	b580      	push	{r7, lr}
 800623e:	b09c      	sub	sp, #112	@ 0x70
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800624a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006254:	2b22      	cmp	r3, #34	@ 0x22
 8006256:	f040 80c2 	bne.w	80063de <UART_RxISR_8BIT+0x1a2>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006260:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006264:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006268:	b2d9      	uxtb	r1, r3
 800626a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800626e:	b2da      	uxtb	r2, r3
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006274:	400a      	ands	r2, r1
 8006276:	b2d2      	uxtb	r2, r2
 8006278:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800627e:	1c5a      	adds	r2, r3, #1
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800628a:	b29b      	uxth	r3, r3
 800628c:	3b01      	subs	r3, #1
 800628e:	b29a      	uxth	r2, r3
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800629c:	b29b      	uxth	r3, r3
 800629e:	2b00      	cmp	r3, #0
 80062a0:	f040 80a5 	bne.w	80063ee <UART_RxISR_8BIT+0x1b2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80062ac:	e853 3f00 	ldrex	r3, [r3]
 80062b0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80062b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80062b4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80062b8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	461a      	mov	r2, r3
 80062c0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80062c2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80062c4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062c6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80062c8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80062ca:	e841 2300 	strex	r3, r2, [r1]
 80062ce:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80062d0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d1e6      	bne.n	80062a4 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	3308      	adds	r3, #8
 80062dc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062e0:	e853 3f00 	ldrex	r3, [r3]
 80062e4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80062e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062e8:	f023 0301 	bic.w	r3, r3, #1
 80062ec:	667b      	str	r3, [r7, #100]	@ 0x64
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	3308      	adds	r3, #8
 80062f4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80062f6:	647a      	str	r2, [r7, #68]	@ 0x44
 80062f8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062fa:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80062fc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80062fe:	e841 2300 	strex	r3, r2, [r1]
 8006302:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006304:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006306:	2b00      	cmp	r3, #0
 8006308:	d1e5      	bne.n	80062d6 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	2220      	movs	r2, #32
 800630e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	2200      	movs	r2, #0
 8006316:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2200      	movs	r2, #0
 800631c:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	4a35      	ldr	r2, [pc, #212]	@ (80063f8 <UART_RxISR_8BIT+0x1bc>)
 8006324:	4293      	cmp	r3, r2
 8006326:	d01f      	beq.n	8006368 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	685b      	ldr	r3, [r3, #4]
 800632e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006332:	2b00      	cmp	r3, #0
 8006334:	d018      	beq.n	8006368 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800633c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800633e:	e853 3f00 	ldrex	r3, [r3]
 8006342:	623b      	str	r3, [r7, #32]
   return(result);
 8006344:	6a3b      	ldr	r3, [r7, #32]
 8006346:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800634a:	663b      	str	r3, [r7, #96]	@ 0x60
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	461a      	mov	r2, r3
 8006352:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006354:	633b      	str	r3, [r7, #48]	@ 0x30
 8006356:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006358:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800635a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800635c:	e841 2300 	strex	r3, r2, [r1]
 8006360:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006362:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006364:	2b00      	cmp	r3, #0
 8006366:	d1e6      	bne.n	8006336 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800636c:	2b01      	cmp	r3, #1
 800636e:	d130      	bne.n	80063d2 <UART_RxISR_8BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2200      	movs	r2, #0
 8006374:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800637c:	693b      	ldr	r3, [r7, #16]
 800637e:	e853 3f00 	ldrex	r3, [r3]
 8006382:	60fb      	str	r3, [r7, #12]
   return(result);
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	f023 0310 	bic.w	r3, r3, #16
 800638a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	461a      	mov	r2, r3
 8006392:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006394:	61fb      	str	r3, [r7, #28]
 8006396:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006398:	69b9      	ldr	r1, [r7, #24]
 800639a:	69fa      	ldr	r2, [r7, #28]
 800639c:	e841 2300 	strex	r3, r2, [r1]
 80063a0:	617b      	str	r3, [r7, #20]
   return(result);
 80063a2:	697b      	ldr	r3, [r7, #20]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d1e6      	bne.n	8006376 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	69db      	ldr	r3, [r3, #28]
 80063ae:	f003 0310 	and.w	r3, r3, #16
 80063b2:	2b10      	cmp	r3, #16
 80063b4:	d103      	bne.n	80063be <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	2210      	movs	r2, #16
 80063bc:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80063c4:	687a      	ldr	r2, [r7, #4]
 80063c6:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 80063ca:	4611      	mov	r1, r2
 80063cc:	6878      	ldr	r0, [r7, #4]
 80063ce:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80063d0:	e00d      	b.n	80063ee <UART_RxISR_8BIT+0x1b2>
        huart->RxCpltCallback(huart);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80063d8:	6878      	ldr	r0, [r7, #4]
 80063da:	4798      	blx	r3
}
 80063dc:	e007      	b.n	80063ee <UART_RxISR_8BIT+0x1b2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	699a      	ldr	r2, [r3, #24]
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f042 0208 	orr.w	r2, r2, #8
 80063ec:	619a      	str	r2, [r3, #24]
}
 80063ee:	bf00      	nop
 80063f0:	3770      	adds	r7, #112	@ 0x70
 80063f2:	46bd      	mov	sp, r7
 80063f4:	bd80      	pop	{r7, pc}
 80063f6:	bf00      	nop
 80063f8:	40008000 	.word	0x40008000

080063fc <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b09c      	sub	sp, #112	@ 0x70
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800640a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006414:	2b22      	cmp	r3, #34	@ 0x22
 8006416:	f040 80c2 	bne.w	800659e <UART_RxISR_16BIT+0x1a2>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006420:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006428:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800642a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800642e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8006432:	4013      	ands	r3, r2
 8006434:	b29a      	uxth	r2, r3
 8006436:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006438:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800643e:	1c9a      	adds	r2, r3, #2
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800644a:	b29b      	uxth	r3, r3
 800644c:	3b01      	subs	r3, #1
 800644e:	b29a      	uxth	r2, r3
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800645c:	b29b      	uxth	r3, r3
 800645e:	2b00      	cmp	r3, #0
 8006460:	f040 80a5 	bne.w	80065ae <UART_RxISR_16BIT+0x1b2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800646a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800646c:	e853 3f00 	ldrex	r3, [r3]
 8006470:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8006472:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006474:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006478:	667b      	str	r3, [r7, #100]	@ 0x64
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	461a      	mov	r2, r3
 8006480:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006482:	657b      	str	r3, [r7, #84]	@ 0x54
 8006484:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006486:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006488:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800648a:	e841 2300 	strex	r3, r2, [r1]
 800648e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8006490:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006492:	2b00      	cmp	r3, #0
 8006494:	d1e6      	bne.n	8006464 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	3308      	adds	r3, #8
 800649c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800649e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80064a0:	e853 3f00 	ldrex	r3, [r3]
 80064a4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80064a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064a8:	f023 0301 	bic.w	r3, r3, #1
 80064ac:	663b      	str	r3, [r7, #96]	@ 0x60
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	3308      	adds	r3, #8
 80064b4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80064b6:	643a      	str	r2, [r7, #64]	@ 0x40
 80064b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064ba:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80064bc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80064be:	e841 2300 	strex	r3, r2, [r1]
 80064c2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80064c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d1e5      	bne.n	8006496 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	2220      	movs	r2, #32
 80064ce:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	2200      	movs	r2, #0
 80064d6:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2200      	movs	r2, #0
 80064dc:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	4a35      	ldr	r2, [pc, #212]	@ (80065b8 <UART_RxISR_16BIT+0x1bc>)
 80064e4:	4293      	cmp	r3, r2
 80064e6:	d01f      	beq.n	8006528 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	685b      	ldr	r3, [r3, #4]
 80064ee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d018      	beq.n	8006528 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064fc:	6a3b      	ldr	r3, [r7, #32]
 80064fe:	e853 3f00 	ldrex	r3, [r3]
 8006502:	61fb      	str	r3, [r7, #28]
   return(result);
 8006504:	69fb      	ldr	r3, [r7, #28]
 8006506:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800650a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	461a      	mov	r2, r3
 8006512:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006514:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006516:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006518:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800651a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800651c:	e841 2300 	strex	r3, r2, [r1]
 8006520:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006522:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006524:	2b00      	cmp	r3, #0
 8006526:	d1e6      	bne.n	80064f6 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800652c:	2b01      	cmp	r3, #1
 800652e:	d130      	bne.n	8006592 <UART_RxISR_16BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2200      	movs	r2, #0
 8006534:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	e853 3f00 	ldrex	r3, [r3]
 8006542:	60bb      	str	r3, [r7, #8]
   return(result);
 8006544:	68bb      	ldr	r3, [r7, #8]
 8006546:	f023 0310 	bic.w	r3, r3, #16
 800654a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	461a      	mov	r2, r3
 8006552:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006554:	61bb      	str	r3, [r7, #24]
 8006556:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006558:	6979      	ldr	r1, [r7, #20]
 800655a:	69ba      	ldr	r2, [r7, #24]
 800655c:	e841 2300 	strex	r3, r2, [r1]
 8006560:	613b      	str	r3, [r7, #16]
   return(result);
 8006562:	693b      	ldr	r3, [r7, #16]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d1e6      	bne.n	8006536 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	69db      	ldr	r3, [r3, #28]
 800656e:	f003 0310 	and.w	r3, r3, #16
 8006572:	2b10      	cmp	r3, #16
 8006574:	d103      	bne.n	800657e <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	2210      	movs	r2, #16
 800657c:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8006584:	687a      	ldr	r2, [r7, #4]
 8006586:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800658a:	4611      	mov	r1, r2
 800658c:	6878      	ldr	r0, [r7, #4]
 800658e:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006590:	e00d      	b.n	80065ae <UART_RxISR_16BIT+0x1b2>
        huart->RxCpltCallback(huart);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006598:	6878      	ldr	r0, [r7, #4]
 800659a:	4798      	blx	r3
}
 800659c:	e007      	b.n	80065ae <UART_RxISR_16BIT+0x1b2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	699a      	ldr	r2, [r3, #24]
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f042 0208 	orr.w	r2, r2, #8
 80065ac:	619a      	str	r2, [r3, #24]
}
 80065ae:	bf00      	nop
 80065b0:	3770      	adds	r7, #112	@ 0x70
 80065b2:	46bd      	mov	sp, r7
 80065b4:	bd80      	pop	{r7, pc}
 80065b6:	bf00      	nop
 80065b8:	40008000 	.word	0x40008000

080065bc <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80065bc:	b580      	push	{r7, lr}
 80065be:	b0ac      	sub	sp, #176	@ 0xb0
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80065ca:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	69db      	ldr	r3, [r3, #28]
 80065d4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	689b      	ldr	r3, [r3, #8]
 80065e8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80065f2:	2b22      	cmp	r3, #34	@ 0x22
 80065f4:	f040 8189 	bne.w	800690a <UART_RxISR_8BIT_FIFOEN+0x34e>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80065fe:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006602:	e12c      	b.n	800685e <UART_RxISR_8BIT_FIFOEN+0x2a2>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800660a:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800660e:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8006612:	b2d9      	uxtb	r1, r3
 8006614:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8006618:	b2da      	uxtb	r2, r3
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800661e:	400a      	ands	r2, r1
 8006620:	b2d2      	uxtb	r2, r2
 8006622:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006628:	1c5a      	adds	r2, r3, #1
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006634:	b29b      	uxth	r3, r3
 8006636:	3b01      	subs	r3, #1
 8006638:	b29a      	uxth	r2, r3
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	69db      	ldr	r3, [r3, #28]
 8006646:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800664a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800664e:	f003 0307 	and.w	r3, r3, #7
 8006652:	2b00      	cmp	r3, #0
 8006654:	d055      	beq.n	8006702 <UART_RxISR_8BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006656:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800665a:	f003 0301 	and.w	r3, r3, #1
 800665e:	2b00      	cmp	r3, #0
 8006660:	d011      	beq.n	8006686 <UART_RxISR_8BIT_FIFOEN+0xca>
 8006662:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006666:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800666a:	2b00      	cmp	r3, #0
 800666c:	d00b      	beq.n	8006686 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	2201      	movs	r2, #1
 8006674:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800667c:	f043 0201 	orr.w	r2, r3, #1
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006686:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800668a:	f003 0302 	and.w	r3, r3, #2
 800668e:	2b00      	cmp	r3, #0
 8006690:	d011      	beq.n	80066b6 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8006692:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006696:	f003 0301 	and.w	r3, r3, #1
 800669a:	2b00      	cmp	r3, #0
 800669c:	d00b      	beq.n	80066b6 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	2202      	movs	r2, #2
 80066a4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80066ac:	f043 0204 	orr.w	r2, r3, #4
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80066b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80066ba:	f003 0304 	and.w	r3, r3, #4
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d011      	beq.n	80066e6 <UART_RxISR_8BIT_FIFOEN+0x12a>
 80066c2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80066c6:	f003 0301 	and.w	r3, r3, #1
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d00b      	beq.n	80066e6 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	2204      	movs	r2, #4
 80066d4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80066dc:	f043 0202 	orr.w	r2, r3, #2
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d008      	beq.n	8006702 <UART_RxISR_8BIT_FIFOEN+0x146>
        {
          /* Non Blocking error : transfer could go on.
          Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80066f6:	6878      	ldr	r0, [r7, #4]
 80066f8:	4798      	blx	r3
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	2200      	movs	r2, #0
 80066fe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006708:	b29b      	uxth	r3, r3
 800670a:	2b00      	cmp	r3, #0
 800670c:	f040 80a7 	bne.w	800685e <UART_RxISR_8BIT_FIFOEN+0x2a2>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006716:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006718:	e853 3f00 	ldrex	r3, [r3]
 800671c:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 800671e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006720:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006724:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	461a      	mov	r2, r3
 800672e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006732:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006734:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006736:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8006738:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800673a:	e841 2300 	strex	r3, r2, [r1]
 800673e:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8006740:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006742:	2b00      	cmp	r3, #0
 8006744:	d1e4      	bne.n	8006710 <UART_RxISR_8BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	3308      	adds	r3, #8
 800674c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800674e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006750:	e853 3f00 	ldrex	r3, [r3]
 8006754:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8006756:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006758:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800675c:	f023 0301 	bic.w	r3, r3, #1
 8006760:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	3308      	adds	r3, #8
 800676a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800676e:	66ba      	str	r2, [r7, #104]	@ 0x68
 8006770:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006772:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8006774:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8006776:	e841 2300 	strex	r3, r2, [r1]
 800677a:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800677c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800677e:	2b00      	cmp	r3, #0
 8006780:	d1e1      	bne.n	8006746 <UART_RxISR_8BIT_FIFOEN+0x18a>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	2220      	movs	r2, #32
 8006786:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	2200      	movs	r2, #0
 800678e:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2200      	movs	r2, #0
 8006794:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	4a62      	ldr	r2, [pc, #392]	@ (8006924 <UART_RxISR_8BIT_FIFOEN+0x368>)
 800679c:	4293      	cmp	r3, r2
 800679e:	d021      	beq.n	80067e4 <UART_RxISR_8BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	685b      	ldr	r3, [r3, #4]
 80067a6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d01a      	beq.n	80067e4 <UART_RxISR_8BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067b4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80067b6:	e853 3f00 	ldrex	r3, [r3]
 80067ba:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80067bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80067be:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80067c2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	461a      	mov	r2, r3
 80067cc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80067d0:	657b      	str	r3, [r7, #84]	@ 0x54
 80067d2:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067d4:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80067d6:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80067d8:	e841 2300 	strex	r3, r2, [r1]
 80067dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80067de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d1e4      	bne.n	80067ae <UART_RxISR_8BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80067e8:	2b01      	cmp	r3, #1
 80067ea:	d132      	bne.n	8006852 <UART_RxISR_8BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2200      	movs	r2, #0
 80067f0:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067fa:	e853 3f00 	ldrex	r3, [r3]
 80067fe:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006800:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006802:	f023 0310 	bic.w	r3, r3, #16
 8006806:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	461a      	mov	r2, r3
 8006810:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006814:	643b      	str	r3, [r7, #64]	@ 0x40
 8006816:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006818:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800681a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800681c:	e841 2300 	strex	r3, r2, [r1]
 8006820:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006822:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006824:	2b00      	cmp	r3, #0
 8006826:	d1e4      	bne.n	80067f2 <UART_RxISR_8BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	69db      	ldr	r3, [r3, #28]
 800682e:	f003 0310 	and.w	r3, r3, #16
 8006832:	2b10      	cmp	r3, #16
 8006834:	d103      	bne.n	800683e <UART_RxISR_8BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	2210      	movs	r2, #16
 800683c:	621a      	str	r2, [r3, #32]
          }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8006844:	687a      	ldr	r2, [r7, #4]
 8006846:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800684a:	4611      	mov	r1, r2
 800684c:	6878      	ldr	r0, [r7, #4]
 800684e:	4798      	blx	r3
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8006850:	e010      	b.n	8006874 <UART_RxISR_8BIT_FIFOEN+0x2b8>
          huart->RxCpltCallback(huart);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006858:	6878      	ldr	r0, [r7, #4]
 800685a:	4798      	blx	r3
        break;
 800685c:	e00a      	b.n	8006874 <UART_RxISR_8BIT_FIFOEN+0x2b8>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800685e:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8006862:	2b00      	cmp	r3, #0
 8006864:	d006      	beq.n	8006874 <UART_RxISR_8BIT_FIFOEN+0x2b8>
 8006866:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800686a:	f003 0320 	and.w	r3, r3, #32
 800686e:	2b00      	cmp	r3, #0
 8006870:	f47f aec8 	bne.w	8006604 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800687a:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800687e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8006882:	2b00      	cmp	r3, #0
 8006884:	d049      	beq.n	800691a <UART_RxISR_8BIT_FIFOEN+0x35e>
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800688c:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 8006890:	429a      	cmp	r2, r3
 8006892:	d242      	bcs.n	800691a <UART_RxISR_8BIT_FIFOEN+0x35e>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	3308      	adds	r3, #8
 800689a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800689c:	6a3b      	ldr	r3, [r7, #32]
 800689e:	e853 3f00 	ldrex	r3, [r3]
 80068a2:	61fb      	str	r3, [r7, #28]
   return(result);
 80068a4:	69fb      	ldr	r3, [r7, #28]
 80068a6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80068aa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	3308      	adds	r3, #8
 80068b4:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80068b8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80068ba:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068bc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80068be:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80068c0:	e841 2300 	strex	r3, r2, [r1]
 80068c4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80068c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d1e3      	bne.n	8006894 <UART_RxISR_8BIT_FIFOEN+0x2d8>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	4a16      	ldr	r2, [pc, #88]	@ (8006928 <UART_RxISR_8BIT_FIFOEN+0x36c>)
 80068d0:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	e853 3f00 	ldrex	r3, [r3]
 80068de:	60bb      	str	r3, [r7, #8]
   return(result);
 80068e0:	68bb      	ldr	r3, [r7, #8]
 80068e2:	f043 0320 	orr.w	r3, r3, #32
 80068e6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	461a      	mov	r2, r3
 80068f0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80068f4:	61bb      	str	r3, [r7, #24]
 80068f6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068f8:	6979      	ldr	r1, [r7, #20]
 80068fa:	69ba      	ldr	r2, [r7, #24]
 80068fc:	e841 2300 	strex	r3, r2, [r1]
 8006900:	613b      	str	r3, [r7, #16]
   return(result);
 8006902:	693b      	ldr	r3, [r7, #16]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d1e4      	bne.n	80068d2 <UART_RxISR_8BIT_FIFOEN+0x316>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006908:	e007      	b.n	800691a <UART_RxISR_8BIT_FIFOEN+0x35e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	699a      	ldr	r2, [r3, #24]
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	f042 0208 	orr.w	r2, r2, #8
 8006918:	619a      	str	r2, [r3, #24]
}
 800691a:	bf00      	nop
 800691c:	37b0      	adds	r7, #176	@ 0xb0
 800691e:	46bd      	mov	sp, r7
 8006920:	bd80      	pop	{r7, pc}
 8006922:	bf00      	nop
 8006924:	40008000 	.word	0x40008000
 8006928:	0800623d 	.word	0x0800623d

0800692c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800692c:	b580      	push	{r7, lr}
 800692e:	b0ae      	sub	sp, #184	@ 0xb8
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800693a:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	69db      	ldr	r3, [r3, #28]
 8006944:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	689b      	ldr	r3, [r3, #8]
 8006958:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006962:	2b22      	cmp	r3, #34	@ 0x22
 8006964:	f040 818d 	bne.w	8006c82 <UART_RxISR_16BIT_FIFOEN+0x356>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800696e:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006972:	e130      	b.n	8006bd6 <UART_RxISR_16BIT_FIFOEN+0x2aa>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800697a:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006982:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8006986:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800698a:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800698e:	4013      	ands	r3, r2
 8006990:	b29a      	uxth	r2, r3
 8006992:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006996:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800699c:	1c9a      	adds	r2, r3, #2
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80069a8:	b29b      	uxth	r3, r3
 80069aa:	3b01      	subs	r3, #1
 80069ac:	b29a      	uxth	r2, r3
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	69db      	ldr	r3, [r3, #28]
 80069ba:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80069be:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80069c2:	f003 0307 	and.w	r3, r3, #7
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d055      	beq.n	8006a76 <UART_RxISR_16BIT_FIFOEN+0x14a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80069ca:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80069ce:	f003 0301 	and.w	r3, r3, #1
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d011      	beq.n	80069fa <UART_RxISR_16BIT_FIFOEN+0xce>
 80069d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80069da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d00b      	beq.n	80069fa <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	2201      	movs	r2, #1
 80069e8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80069f0:	f043 0201 	orr.w	r2, r3, #1
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80069fa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80069fe:	f003 0302 	and.w	r3, r3, #2
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d011      	beq.n	8006a2a <UART_RxISR_16BIT_FIFOEN+0xfe>
 8006a06:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006a0a:	f003 0301 	and.w	r3, r3, #1
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d00b      	beq.n	8006a2a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	2202      	movs	r2, #2
 8006a18:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a20:	f043 0204 	orr.w	r2, r3, #4
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006a2a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006a2e:	f003 0304 	and.w	r3, r3, #4
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d011      	beq.n	8006a5a <UART_RxISR_16BIT_FIFOEN+0x12e>
 8006a36:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006a3a:	f003 0301 	and.w	r3, r3, #1
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d00b      	beq.n	8006a5a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	2204      	movs	r2, #4
 8006a48:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a50:	f043 0202 	orr.w	r2, r3, #2
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d008      	beq.n	8006a76 <UART_RxISR_16BIT_FIFOEN+0x14a>
        {
          /* Non Blocking error : transfer could go on.
          Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006a6a:	6878      	ldr	r0, [r7, #4]
 8006a6c:	4798      	blx	r3
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	2200      	movs	r2, #0
 8006a72:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006a7c:	b29b      	uxth	r3, r3
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	f040 80a9 	bne.w	8006bd6 <UART_RxISR_16BIT_FIFOEN+0x2aa>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a8a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006a8c:	e853 3f00 	ldrex	r3, [r3]
 8006a90:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006a92:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006a94:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006a98:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	461a      	mov	r2, r3
 8006aa2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006aa6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006aaa:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aac:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006aae:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006ab2:	e841 2300 	strex	r3, r2, [r1]
 8006ab6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006ab8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d1e2      	bne.n	8006a84 <UART_RxISR_16BIT_FIFOEN+0x158>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	3308      	adds	r3, #8
 8006ac4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ac6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006ac8:	e853 3f00 	ldrex	r3, [r3]
 8006acc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006ace:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006ad0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006ad4:	f023 0301 	bic.w	r3, r3, #1
 8006ad8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	3308      	adds	r3, #8
 8006ae2:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8006ae6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006ae8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aea:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006aec:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006aee:	e841 2300 	strex	r3, r2, [r1]
 8006af2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006af4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d1e1      	bne.n	8006abe <UART_RxISR_16BIT_FIFOEN+0x192>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	2220      	movs	r2, #32
 8006afe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	2200      	movs	r2, #0
 8006b06:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	4a62      	ldr	r2, [pc, #392]	@ (8006c9c <UART_RxISR_16BIT_FIFOEN+0x370>)
 8006b14:	4293      	cmp	r3, r2
 8006b16:	d021      	beq.n	8006b5c <UART_RxISR_16BIT_FIFOEN+0x230>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	685b      	ldr	r3, [r3, #4]
 8006b1e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d01a      	beq.n	8006b5c <UART_RxISR_16BIT_FIFOEN+0x230>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b2c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006b2e:	e853 3f00 	ldrex	r3, [r3]
 8006b32:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006b34:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006b36:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006b3a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	461a      	mov	r2, r3
 8006b44:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8006b48:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006b4a:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b4c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006b4e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006b50:	e841 2300 	strex	r3, r2, [r1]
 8006b54:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006b56:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d1e4      	bne.n	8006b26 <UART_RxISR_16BIT_FIFOEN+0x1fa>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006b60:	2b01      	cmp	r3, #1
 8006b62:	d132      	bne.n	8006bca <UART_RxISR_16BIT_FIFOEN+0x29e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2200      	movs	r2, #0
 8006b68:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b72:	e853 3f00 	ldrex	r3, [r3]
 8006b76:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006b78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b7a:	f023 0310 	bic.w	r3, r3, #16
 8006b7e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	461a      	mov	r2, r3
 8006b88:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006b8c:	647b      	str	r3, [r7, #68]	@ 0x44
 8006b8e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b90:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006b92:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006b94:	e841 2300 	strex	r3, r2, [r1]
 8006b98:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006b9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d1e4      	bne.n	8006b6a <UART_RxISR_16BIT_FIFOEN+0x23e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	69db      	ldr	r3, [r3, #28]
 8006ba6:	f003 0310 	and.w	r3, r3, #16
 8006baa:	2b10      	cmp	r3, #16
 8006bac:	d103      	bne.n	8006bb6 <UART_RxISR_16BIT_FIFOEN+0x28a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	2210      	movs	r2, #16
 8006bb4:	621a      	str	r2, [r3, #32]
          }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8006bbc:	687a      	ldr	r2, [r7, #4]
 8006bbe:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 8006bc2:	4611      	mov	r1, r2
 8006bc4:	6878      	ldr	r0, [r7, #4]
 8006bc6:	4798      	blx	r3
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8006bc8:	e010      	b.n	8006bec <UART_RxISR_16BIT_FIFOEN+0x2c0>
          huart->RxCpltCallback(huart);
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006bd0:	6878      	ldr	r0, [r7, #4]
 8006bd2:	4798      	blx	r3
        break;
 8006bd4:	e00a      	b.n	8006bec <UART_RxISR_16BIT_FIFOEN+0x2c0>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006bd6:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d006      	beq.n	8006bec <UART_RxISR_16BIT_FIFOEN+0x2c0>
 8006bde:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006be2:	f003 0320 	and.w	r3, r3, #32
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	f47f aec4 	bne.w	8006974 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006bf2:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8006bf6:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d049      	beq.n	8006c92 <UART_RxISR_16BIT_FIFOEN+0x366>
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8006c04:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8006c08:	429a      	cmp	r2, r3
 8006c0a:	d242      	bcs.n	8006c92 <UART_RxISR_16BIT_FIFOEN+0x366>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	3308      	adds	r3, #8
 8006c12:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c16:	e853 3f00 	ldrex	r3, [r3]
 8006c1a:	623b      	str	r3, [r7, #32]
   return(result);
 8006c1c:	6a3b      	ldr	r3, [r7, #32]
 8006c1e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006c22:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	3308      	adds	r3, #8
 8006c2c:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8006c30:	633a      	str	r2, [r7, #48]	@ 0x30
 8006c32:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c34:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006c36:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006c38:	e841 2300 	strex	r3, r2, [r1]
 8006c3c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006c3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d1e3      	bne.n	8006c0c <UART_RxISR_16BIT_FIFOEN+0x2e0>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	4a16      	ldr	r2, [pc, #88]	@ (8006ca0 <UART_RxISR_16BIT_FIFOEN+0x374>)
 8006c48:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c50:	693b      	ldr	r3, [r7, #16]
 8006c52:	e853 3f00 	ldrex	r3, [r3]
 8006c56:	60fb      	str	r3, [r7, #12]
   return(result);
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	f043 0320 	orr.w	r3, r3, #32
 8006c5e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	461a      	mov	r2, r3
 8006c68:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006c6c:	61fb      	str	r3, [r7, #28]
 8006c6e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c70:	69b9      	ldr	r1, [r7, #24]
 8006c72:	69fa      	ldr	r2, [r7, #28]
 8006c74:	e841 2300 	strex	r3, r2, [r1]
 8006c78:	617b      	str	r3, [r7, #20]
   return(result);
 8006c7a:	697b      	ldr	r3, [r7, #20]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d1e4      	bne.n	8006c4a <UART_RxISR_16BIT_FIFOEN+0x31e>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006c80:	e007      	b.n	8006c92 <UART_RxISR_16BIT_FIFOEN+0x366>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	699a      	ldr	r2, [r3, #24]
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f042 0208 	orr.w	r2, r2, #8
 8006c90:	619a      	str	r2, [r3, #24]
}
 8006c92:	bf00      	nop
 8006c94:	37b8      	adds	r7, #184	@ 0xb8
 8006c96:	46bd      	mov	sp, r7
 8006c98:	bd80      	pop	{r7, pc}
 8006c9a:	bf00      	nop
 8006c9c:	40008000 	.word	0x40008000
 8006ca0:	080063fd 	.word	0x080063fd

08006ca4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006ca4:	b480      	push	{r7}
 8006ca6:	b083      	sub	sp, #12
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006cac:	bf00      	nop
 8006cae:	370c      	adds	r7, #12
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb6:	4770      	bx	lr

08006cb8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8006cb8:	b480      	push	{r7}
 8006cba:	b083      	sub	sp, #12
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8006cc0:	bf00      	nop
 8006cc2:	370c      	adds	r7, #12
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cca:	4770      	bx	lr

08006ccc <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8006ccc:	b480      	push	{r7}
 8006cce:	b083      	sub	sp, #12
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8006cd4:	bf00      	nop
 8006cd6:	370c      	adds	r7, #12
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cde:	4770      	bx	lr

08006ce0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006ce0:	b480      	push	{r7}
 8006ce2:	b085      	sub	sp, #20
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006cee:	2b01      	cmp	r3, #1
 8006cf0:	d101      	bne.n	8006cf6 <HAL_UARTEx_DisableFifoMode+0x16>
 8006cf2:	2302      	movs	r3, #2
 8006cf4:	e027      	b.n	8006d46 <HAL_UARTEx_DisableFifoMode+0x66>
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	2201      	movs	r2, #1
 8006cfa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	2224      	movs	r2, #36	@ 0x24
 8006d02:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	681a      	ldr	r2, [r3, #0]
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	f022 0201 	bic.w	r2, r2, #1
 8006d1c:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006d24:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	2200      	movs	r2, #0
 8006d2a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	68fa      	ldr	r2, [r7, #12]
 8006d32:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2220      	movs	r2, #32
 8006d38:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	2200      	movs	r2, #0
 8006d40:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006d44:	2300      	movs	r3, #0
}
 8006d46:	4618      	mov	r0, r3
 8006d48:	3714      	adds	r7, #20
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d50:	4770      	bx	lr

08006d52 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006d52:	b580      	push	{r7, lr}
 8006d54:	b084      	sub	sp, #16
 8006d56:	af00      	add	r7, sp, #0
 8006d58:	6078      	str	r0, [r7, #4]
 8006d5a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006d62:	2b01      	cmp	r3, #1
 8006d64:	d101      	bne.n	8006d6a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006d66:	2302      	movs	r3, #2
 8006d68:	e02d      	b.n	8006dc6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	2201      	movs	r2, #1
 8006d6e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	2224      	movs	r2, #36	@ 0x24
 8006d76:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	681a      	ldr	r2, [r3, #0]
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	f022 0201 	bic.w	r2, r2, #1
 8006d90:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	689b      	ldr	r3, [r3, #8]
 8006d98:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	683a      	ldr	r2, [r7, #0]
 8006da2:	430a      	orrs	r2, r1
 8006da4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006da6:	6878      	ldr	r0, [r7, #4]
 8006da8:	f000 f850 	bl	8006e4c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	68fa      	ldr	r2, [r7, #12]
 8006db2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	2220      	movs	r2, #32
 8006db8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006dc4:	2300      	movs	r3, #0
}
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	3710      	adds	r7, #16
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	bd80      	pop	{r7, pc}

08006dce <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006dce:	b580      	push	{r7, lr}
 8006dd0:	b084      	sub	sp, #16
 8006dd2:	af00      	add	r7, sp, #0
 8006dd4:	6078      	str	r0, [r7, #4]
 8006dd6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006dde:	2b01      	cmp	r3, #1
 8006de0:	d101      	bne.n	8006de6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006de2:	2302      	movs	r3, #2
 8006de4:	e02d      	b.n	8006e42 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	2201      	movs	r2, #1
 8006dea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	2224      	movs	r2, #36	@ 0x24
 8006df2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	681a      	ldr	r2, [r3, #0]
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	f022 0201 	bic.w	r2, r2, #1
 8006e0c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	689b      	ldr	r3, [r3, #8]
 8006e14:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	683a      	ldr	r2, [r7, #0]
 8006e1e:	430a      	orrs	r2, r1
 8006e20:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006e22:	6878      	ldr	r0, [r7, #4]
 8006e24:	f000 f812 	bl	8006e4c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	68fa      	ldr	r2, [r7, #12]
 8006e2e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2220      	movs	r2, #32
 8006e34:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006e40:	2300      	movs	r3, #0
}
 8006e42:	4618      	mov	r0, r3
 8006e44:	3710      	adds	r7, #16
 8006e46:	46bd      	mov	sp, r7
 8006e48:	bd80      	pop	{r7, pc}
	...

08006e4c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006e4c:	b480      	push	{r7}
 8006e4e:	b085      	sub	sp, #20
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d108      	bne.n	8006e6e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2201      	movs	r2, #1
 8006e60:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2201      	movs	r2, #1
 8006e68:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006e6c:	e031      	b.n	8006ed2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006e6e:	2308      	movs	r3, #8
 8006e70:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006e72:	2308      	movs	r3, #8
 8006e74:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	689b      	ldr	r3, [r3, #8]
 8006e7c:	0e5b      	lsrs	r3, r3, #25
 8006e7e:	b2db      	uxtb	r3, r3
 8006e80:	f003 0307 	and.w	r3, r3, #7
 8006e84:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	689b      	ldr	r3, [r3, #8]
 8006e8c:	0f5b      	lsrs	r3, r3, #29
 8006e8e:	b2db      	uxtb	r3, r3
 8006e90:	f003 0307 	and.w	r3, r3, #7
 8006e94:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006e96:	7bbb      	ldrb	r3, [r7, #14]
 8006e98:	7b3a      	ldrb	r2, [r7, #12]
 8006e9a:	4911      	ldr	r1, [pc, #68]	@ (8006ee0 <UARTEx_SetNbDataToProcess+0x94>)
 8006e9c:	5c8a      	ldrb	r2, [r1, r2]
 8006e9e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006ea2:	7b3a      	ldrb	r2, [r7, #12]
 8006ea4:	490f      	ldr	r1, [pc, #60]	@ (8006ee4 <UARTEx_SetNbDataToProcess+0x98>)
 8006ea6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006ea8:	fb93 f3f2 	sdiv	r3, r3, r2
 8006eac:	b29a      	uxth	r2, r3
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006eb4:	7bfb      	ldrb	r3, [r7, #15]
 8006eb6:	7b7a      	ldrb	r2, [r7, #13]
 8006eb8:	4909      	ldr	r1, [pc, #36]	@ (8006ee0 <UARTEx_SetNbDataToProcess+0x94>)
 8006eba:	5c8a      	ldrb	r2, [r1, r2]
 8006ebc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006ec0:	7b7a      	ldrb	r2, [r7, #13]
 8006ec2:	4908      	ldr	r1, [pc, #32]	@ (8006ee4 <UARTEx_SetNbDataToProcess+0x98>)
 8006ec4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006ec6:	fb93 f3f2 	sdiv	r3, r3, r2
 8006eca:	b29a      	uxth	r2, r3
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8006ed2:	bf00      	nop
 8006ed4:	3714      	adds	r7, #20
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006edc:	4770      	bx	lr
 8006ede:	bf00      	nop
 8006ee0:	08006fa4 	.word	0x08006fa4
 8006ee4:	08006fac 	.word	0x08006fac

08006ee8 <memset>:
 8006ee8:	4402      	add	r2, r0
 8006eea:	4603      	mov	r3, r0
 8006eec:	4293      	cmp	r3, r2
 8006eee:	d100      	bne.n	8006ef2 <memset+0xa>
 8006ef0:	4770      	bx	lr
 8006ef2:	f803 1b01 	strb.w	r1, [r3], #1
 8006ef6:	e7f9      	b.n	8006eec <memset+0x4>

08006ef8 <__libc_init_array>:
 8006ef8:	b570      	push	{r4, r5, r6, lr}
 8006efa:	4d0d      	ldr	r5, [pc, #52]	@ (8006f30 <__libc_init_array+0x38>)
 8006efc:	4c0d      	ldr	r4, [pc, #52]	@ (8006f34 <__libc_init_array+0x3c>)
 8006efe:	1b64      	subs	r4, r4, r5
 8006f00:	10a4      	asrs	r4, r4, #2
 8006f02:	2600      	movs	r6, #0
 8006f04:	42a6      	cmp	r6, r4
 8006f06:	d109      	bne.n	8006f1c <__libc_init_array+0x24>
 8006f08:	4d0b      	ldr	r5, [pc, #44]	@ (8006f38 <__libc_init_array+0x40>)
 8006f0a:	4c0c      	ldr	r4, [pc, #48]	@ (8006f3c <__libc_init_array+0x44>)
 8006f0c:	f000 f826 	bl	8006f5c <_init>
 8006f10:	1b64      	subs	r4, r4, r5
 8006f12:	10a4      	asrs	r4, r4, #2
 8006f14:	2600      	movs	r6, #0
 8006f16:	42a6      	cmp	r6, r4
 8006f18:	d105      	bne.n	8006f26 <__libc_init_array+0x2e>
 8006f1a:	bd70      	pop	{r4, r5, r6, pc}
 8006f1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f20:	4798      	blx	r3
 8006f22:	3601      	adds	r6, #1
 8006f24:	e7ee      	b.n	8006f04 <__libc_init_array+0xc>
 8006f26:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f2a:	4798      	blx	r3
 8006f2c:	3601      	adds	r6, #1
 8006f2e:	e7f2      	b.n	8006f16 <__libc_init_array+0x1e>
 8006f30:	08006fbc 	.word	0x08006fbc
 8006f34:	08006fbc 	.word	0x08006fbc
 8006f38:	08006fbc 	.word	0x08006fbc
 8006f3c:	08006fc0 	.word	0x08006fc0

08006f40 <memcpy>:
 8006f40:	440a      	add	r2, r1
 8006f42:	4291      	cmp	r1, r2
 8006f44:	f100 33ff 	add.w	r3, r0, #4294967295
 8006f48:	d100      	bne.n	8006f4c <memcpy+0xc>
 8006f4a:	4770      	bx	lr
 8006f4c:	b510      	push	{r4, lr}
 8006f4e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006f52:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006f56:	4291      	cmp	r1, r2
 8006f58:	d1f9      	bne.n	8006f4e <memcpy+0xe>
 8006f5a:	bd10      	pop	{r4, pc}

08006f5c <_init>:
 8006f5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f5e:	bf00      	nop
 8006f60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f62:	bc08      	pop	{r3}
 8006f64:	469e      	mov	lr, r3
 8006f66:	4770      	bx	lr

08006f68 <_fini>:
 8006f68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f6a:	bf00      	nop
 8006f6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f6e:	bc08      	pop	{r3}
 8006f70:	469e      	mov	lr, r3
 8006f72:	4770      	bx	lr
