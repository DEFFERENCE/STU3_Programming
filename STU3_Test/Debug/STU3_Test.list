
STU3_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009674  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800984c  0800984c  0000a84c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800988c  0800988c  0000b20c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800988c  0800988c  0000a88c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009894  08009894  0000b20c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009894  08009894  0000a894  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009898  08009898  0000a898  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000020c  20000000  0800989c  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000df4  2000020c  08009aa8  0000b20c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001000  08009aa8  0000c000  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b20c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c467  00000000  00000000  0000b23c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000032ec  00000000  00000000  000276a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001660  00000000  00000000  0002a990  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001175  00000000  00000000  0002bff0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000281a5  00000000  00000000  0002d165  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019bf3  00000000  00000000  0005530a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00113929  00000000  00000000  0006eefd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00182826  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006110  00000000  00000000  0018286c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  0018897c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000020c 	.word	0x2000020c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08009834 	.word	0x08009834

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000210 	.word	0x20000210
 8000214:	08009834 	.word	0x08009834

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b988 	b.w	8000540 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	468e      	mov	lr, r1
 8000250:	4604      	mov	r4, r0
 8000252:	4688      	mov	r8, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4617      	mov	r7, r2
 800025c:	d962      	bls.n	8000324 <__udivmoddi4+0xdc>
 800025e:	fab2 f682 	clz	r6, r2
 8000262:	b14e      	cbz	r6, 8000278 <__udivmoddi4+0x30>
 8000264:	f1c6 0320 	rsb	r3, r6, #32
 8000268:	fa01 f806 	lsl.w	r8, r1, r6
 800026c:	fa20 f303 	lsr.w	r3, r0, r3
 8000270:	40b7      	lsls	r7, r6
 8000272:	ea43 0808 	orr.w	r8, r3, r8
 8000276:	40b4      	lsls	r4, r6
 8000278:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800027c:	fa1f fc87 	uxth.w	ip, r7
 8000280:	fbb8 f1fe 	udiv	r1, r8, lr
 8000284:	0c23      	lsrs	r3, r4, #16
 8000286:	fb0e 8811 	mls	r8, lr, r1, r8
 800028a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800028e:	fb01 f20c 	mul.w	r2, r1, ip
 8000292:	429a      	cmp	r2, r3
 8000294:	d909      	bls.n	80002aa <__udivmoddi4+0x62>
 8000296:	18fb      	adds	r3, r7, r3
 8000298:	f101 30ff 	add.w	r0, r1, #4294967295
 800029c:	f080 80ea 	bcs.w	8000474 <__udivmoddi4+0x22c>
 80002a0:	429a      	cmp	r2, r3
 80002a2:	f240 80e7 	bls.w	8000474 <__udivmoddi4+0x22c>
 80002a6:	3902      	subs	r1, #2
 80002a8:	443b      	add	r3, r7
 80002aa:	1a9a      	subs	r2, r3, r2
 80002ac:	b2a3      	uxth	r3, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002ba:	fb00 fc0c 	mul.w	ip, r0, ip
 80002be:	459c      	cmp	ip, r3
 80002c0:	d909      	bls.n	80002d6 <__udivmoddi4+0x8e>
 80002c2:	18fb      	adds	r3, r7, r3
 80002c4:	f100 32ff 	add.w	r2, r0, #4294967295
 80002c8:	f080 80d6 	bcs.w	8000478 <__udivmoddi4+0x230>
 80002cc:	459c      	cmp	ip, r3
 80002ce:	f240 80d3 	bls.w	8000478 <__udivmoddi4+0x230>
 80002d2:	443b      	add	r3, r7
 80002d4:	3802      	subs	r0, #2
 80002d6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002da:	eba3 030c 	sub.w	r3, r3, ip
 80002de:	2100      	movs	r1, #0
 80002e0:	b11d      	cbz	r5, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40f3      	lsrs	r3, r6
 80002e4:	2200      	movs	r2, #0
 80002e6:	e9c5 3200 	strd	r3, r2, [r5]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d905      	bls.n	80002fe <__udivmoddi4+0xb6>
 80002f2:	b10d      	cbz	r5, 80002f8 <__udivmoddi4+0xb0>
 80002f4:	e9c5 0100 	strd	r0, r1, [r5]
 80002f8:	2100      	movs	r1, #0
 80002fa:	4608      	mov	r0, r1
 80002fc:	e7f5      	b.n	80002ea <__udivmoddi4+0xa2>
 80002fe:	fab3 f183 	clz	r1, r3
 8000302:	2900      	cmp	r1, #0
 8000304:	d146      	bne.n	8000394 <__udivmoddi4+0x14c>
 8000306:	4573      	cmp	r3, lr
 8000308:	d302      	bcc.n	8000310 <__udivmoddi4+0xc8>
 800030a:	4282      	cmp	r2, r0
 800030c:	f200 8105 	bhi.w	800051a <__udivmoddi4+0x2d2>
 8000310:	1a84      	subs	r4, r0, r2
 8000312:	eb6e 0203 	sbc.w	r2, lr, r3
 8000316:	2001      	movs	r0, #1
 8000318:	4690      	mov	r8, r2
 800031a:	2d00      	cmp	r5, #0
 800031c:	d0e5      	beq.n	80002ea <__udivmoddi4+0xa2>
 800031e:	e9c5 4800 	strd	r4, r8, [r5]
 8000322:	e7e2      	b.n	80002ea <__udivmoddi4+0xa2>
 8000324:	2a00      	cmp	r2, #0
 8000326:	f000 8090 	beq.w	800044a <__udivmoddi4+0x202>
 800032a:	fab2 f682 	clz	r6, r2
 800032e:	2e00      	cmp	r6, #0
 8000330:	f040 80a4 	bne.w	800047c <__udivmoddi4+0x234>
 8000334:	1a8a      	subs	r2, r1, r2
 8000336:	0c03      	lsrs	r3, r0, #16
 8000338:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800033c:	b280      	uxth	r0, r0
 800033e:	b2bc      	uxth	r4, r7
 8000340:	2101      	movs	r1, #1
 8000342:	fbb2 fcfe 	udiv	ip, r2, lr
 8000346:	fb0e 221c 	mls	r2, lr, ip, r2
 800034a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800034e:	fb04 f20c 	mul.w	r2, r4, ip
 8000352:	429a      	cmp	r2, r3
 8000354:	d907      	bls.n	8000366 <__udivmoddi4+0x11e>
 8000356:	18fb      	adds	r3, r7, r3
 8000358:	f10c 38ff 	add.w	r8, ip, #4294967295
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x11c>
 800035e:	429a      	cmp	r2, r3
 8000360:	f200 80e0 	bhi.w	8000524 <__udivmoddi4+0x2dc>
 8000364:	46c4      	mov	ip, r8
 8000366:	1a9b      	subs	r3, r3, r2
 8000368:	fbb3 f2fe 	udiv	r2, r3, lr
 800036c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000370:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000374:	fb02 f404 	mul.w	r4, r2, r4
 8000378:	429c      	cmp	r4, r3
 800037a:	d907      	bls.n	800038c <__udivmoddi4+0x144>
 800037c:	18fb      	adds	r3, r7, r3
 800037e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x142>
 8000384:	429c      	cmp	r4, r3
 8000386:	f200 80ca 	bhi.w	800051e <__udivmoddi4+0x2d6>
 800038a:	4602      	mov	r2, r0
 800038c:	1b1b      	subs	r3, r3, r4
 800038e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000392:	e7a5      	b.n	80002e0 <__udivmoddi4+0x98>
 8000394:	f1c1 0620 	rsb	r6, r1, #32
 8000398:	408b      	lsls	r3, r1
 800039a:	fa22 f706 	lsr.w	r7, r2, r6
 800039e:	431f      	orrs	r7, r3
 80003a0:	fa0e f401 	lsl.w	r4, lr, r1
 80003a4:	fa20 f306 	lsr.w	r3, r0, r6
 80003a8:	fa2e fe06 	lsr.w	lr, lr, r6
 80003ac:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003b0:	4323      	orrs	r3, r4
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	fa1f fc87 	uxth.w	ip, r7
 80003ba:	fbbe f0f9 	udiv	r0, lr, r9
 80003be:	0c1c      	lsrs	r4, r3, #16
 80003c0:	fb09 ee10 	mls	lr, r9, r0, lr
 80003c4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003c8:	fb00 fe0c 	mul.w	lr, r0, ip
 80003cc:	45a6      	cmp	lr, r4
 80003ce:	fa02 f201 	lsl.w	r2, r2, r1
 80003d2:	d909      	bls.n	80003e8 <__udivmoddi4+0x1a0>
 80003d4:	193c      	adds	r4, r7, r4
 80003d6:	f100 3aff 	add.w	sl, r0, #4294967295
 80003da:	f080 809c 	bcs.w	8000516 <__udivmoddi4+0x2ce>
 80003de:	45a6      	cmp	lr, r4
 80003e0:	f240 8099 	bls.w	8000516 <__udivmoddi4+0x2ce>
 80003e4:	3802      	subs	r0, #2
 80003e6:	443c      	add	r4, r7
 80003e8:	eba4 040e 	sub.w	r4, r4, lr
 80003ec:	fa1f fe83 	uxth.w	lr, r3
 80003f0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003f4:	fb09 4413 	mls	r4, r9, r3, r4
 80003f8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003fc:	fb03 fc0c 	mul.w	ip, r3, ip
 8000400:	45a4      	cmp	ip, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1ce>
 8000404:	193c      	adds	r4, r7, r4
 8000406:	f103 3eff 	add.w	lr, r3, #4294967295
 800040a:	f080 8082 	bcs.w	8000512 <__udivmoddi4+0x2ca>
 800040e:	45a4      	cmp	ip, r4
 8000410:	d97f      	bls.n	8000512 <__udivmoddi4+0x2ca>
 8000412:	3b02      	subs	r3, #2
 8000414:	443c      	add	r4, r7
 8000416:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800041a:	eba4 040c 	sub.w	r4, r4, ip
 800041e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000422:	4564      	cmp	r4, ip
 8000424:	4673      	mov	r3, lr
 8000426:	46e1      	mov	r9, ip
 8000428:	d362      	bcc.n	80004f0 <__udivmoddi4+0x2a8>
 800042a:	d05f      	beq.n	80004ec <__udivmoddi4+0x2a4>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x1fe>
 800042e:	ebb8 0203 	subs.w	r2, r8, r3
 8000432:	eb64 0409 	sbc.w	r4, r4, r9
 8000436:	fa04 f606 	lsl.w	r6, r4, r6
 800043a:	fa22 f301 	lsr.w	r3, r2, r1
 800043e:	431e      	orrs	r6, r3
 8000440:	40cc      	lsrs	r4, r1
 8000442:	e9c5 6400 	strd	r6, r4, [r5]
 8000446:	2100      	movs	r1, #0
 8000448:	e74f      	b.n	80002ea <__udivmoddi4+0xa2>
 800044a:	fbb1 fcf2 	udiv	ip, r1, r2
 800044e:	0c01      	lsrs	r1, r0, #16
 8000450:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000454:	b280      	uxth	r0, r0
 8000456:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800045a:	463b      	mov	r3, r7
 800045c:	4638      	mov	r0, r7
 800045e:	463c      	mov	r4, r7
 8000460:	46b8      	mov	r8, r7
 8000462:	46be      	mov	lr, r7
 8000464:	2620      	movs	r6, #32
 8000466:	fbb1 f1f7 	udiv	r1, r1, r7
 800046a:	eba2 0208 	sub.w	r2, r2, r8
 800046e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000472:	e766      	b.n	8000342 <__udivmoddi4+0xfa>
 8000474:	4601      	mov	r1, r0
 8000476:	e718      	b.n	80002aa <__udivmoddi4+0x62>
 8000478:	4610      	mov	r0, r2
 800047a:	e72c      	b.n	80002d6 <__udivmoddi4+0x8e>
 800047c:	f1c6 0220 	rsb	r2, r6, #32
 8000480:	fa2e f302 	lsr.w	r3, lr, r2
 8000484:	40b7      	lsls	r7, r6
 8000486:	40b1      	lsls	r1, r6
 8000488:	fa20 f202 	lsr.w	r2, r0, r2
 800048c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000490:	430a      	orrs	r2, r1
 8000492:	fbb3 f8fe 	udiv	r8, r3, lr
 8000496:	b2bc      	uxth	r4, r7
 8000498:	fb0e 3318 	mls	r3, lr, r8, r3
 800049c:	0c11      	lsrs	r1, r2, #16
 800049e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a2:	fb08 f904 	mul.w	r9, r8, r4
 80004a6:	40b0      	lsls	r0, r6
 80004a8:	4589      	cmp	r9, r1
 80004aa:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004ae:	b280      	uxth	r0, r0
 80004b0:	d93e      	bls.n	8000530 <__udivmoddi4+0x2e8>
 80004b2:	1879      	adds	r1, r7, r1
 80004b4:	f108 3cff 	add.w	ip, r8, #4294967295
 80004b8:	d201      	bcs.n	80004be <__udivmoddi4+0x276>
 80004ba:	4589      	cmp	r9, r1
 80004bc:	d81f      	bhi.n	80004fe <__udivmoddi4+0x2b6>
 80004be:	eba1 0109 	sub.w	r1, r1, r9
 80004c2:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c6:	fb09 f804 	mul.w	r8, r9, r4
 80004ca:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ce:	b292      	uxth	r2, r2
 80004d0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004d4:	4542      	cmp	r2, r8
 80004d6:	d229      	bcs.n	800052c <__udivmoddi4+0x2e4>
 80004d8:	18ba      	adds	r2, r7, r2
 80004da:	f109 31ff 	add.w	r1, r9, #4294967295
 80004de:	d2c4      	bcs.n	800046a <__udivmoddi4+0x222>
 80004e0:	4542      	cmp	r2, r8
 80004e2:	d2c2      	bcs.n	800046a <__udivmoddi4+0x222>
 80004e4:	f1a9 0102 	sub.w	r1, r9, #2
 80004e8:	443a      	add	r2, r7
 80004ea:	e7be      	b.n	800046a <__udivmoddi4+0x222>
 80004ec:	45f0      	cmp	r8, lr
 80004ee:	d29d      	bcs.n	800042c <__udivmoddi4+0x1e4>
 80004f0:	ebbe 0302 	subs.w	r3, lr, r2
 80004f4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004f8:	3801      	subs	r0, #1
 80004fa:	46e1      	mov	r9, ip
 80004fc:	e796      	b.n	800042c <__udivmoddi4+0x1e4>
 80004fe:	eba7 0909 	sub.w	r9, r7, r9
 8000502:	4449      	add	r1, r9
 8000504:	f1a8 0c02 	sub.w	ip, r8, #2
 8000508:	fbb1 f9fe 	udiv	r9, r1, lr
 800050c:	fb09 f804 	mul.w	r8, r9, r4
 8000510:	e7db      	b.n	80004ca <__udivmoddi4+0x282>
 8000512:	4673      	mov	r3, lr
 8000514:	e77f      	b.n	8000416 <__udivmoddi4+0x1ce>
 8000516:	4650      	mov	r0, sl
 8000518:	e766      	b.n	80003e8 <__udivmoddi4+0x1a0>
 800051a:	4608      	mov	r0, r1
 800051c:	e6fd      	b.n	800031a <__udivmoddi4+0xd2>
 800051e:	443b      	add	r3, r7
 8000520:	3a02      	subs	r2, #2
 8000522:	e733      	b.n	800038c <__udivmoddi4+0x144>
 8000524:	f1ac 0c02 	sub.w	ip, ip, #2
 8000528:	443b      	add	r3, r7
 800052a:	e71c      	b.n	8000366 <__udivmoddi4+0x11e>
 800052c:	4649      	mov	r1, r9
 800052e:	e79c      	b.n	800046a <__udivmoddi4+0x222>
 8000530:	eba1 0109 	sub.w	r1, r1, r9
 8000534:	46c4      	mov	ip, r8
 8000536:	fbb1 f9fe 	udiv	r9, r1, lr
 800053a:	fb09 f804 	mul.w	r8, r9, r4
 800053e:	e7c4      	b.n	80004ca <__udivmoddi4+0x282>

08000540 <__aeabi_idiv0>:
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop

08000544 <modbus_r_position>:

uint8_t R_Theta_moving_Status(ModbusHandleTypedef* hmodbus,uint8_t Moving_Status) {
	return 0;
}

void modbus_r_position(ModbusHandleTypedef* hmodbus,float r_pos) {
 8000544:	b480      	push	{r7}
 8000546:	b083      	sub	sp, #12
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
 800054c:	ed87 0a00 	vstr	s0, [r7]
	hmodbus->RegisterAddress[0x11].U16 = r_pos;
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	685b      	ldr	r3, [r3, #4]
 8000554:	3322      	adds	r3, #34	@ 0x22
 8000556:	edd7 7a00 	vldr	s15, [r7]
 800055a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800055e:	ee17 2a90 	vmov	r2, s15
 8000562:	b292      	uxth	r2, r2
 8000564:	801a      	strh	r2, [r3, #0]
}
 8000566:	bf00      	nop
 8000568:	370c      	adds	r7, #12
 800056a:	46bd      	mov	sp, r7
 800056c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000570:	4770      	bx	lr

08000572 <Encoder_Init>:
#include "Encoder.h"

#define Count_PER_REV 12000.0f
#define TWO_PI 6.283185f

void Encoder_Init(Encoder *enc, TIM_HandleTypeDef *htim) {
 8000572:	b580      	push	{r7, lr}
 8000574:	b082      	sub	sp, #8
 8000576:	af00      	add	r7, sp, #0
 8000578:	6078      	str	r0, [r7, #4]
 800057a:	6039      	str	r1, [r7, #0]
    enc->htim = htim;
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	683a      	ldr	r2, [r7, #0]
 8000580:	601a      	str	r2, [r3, #0]
    HAL_TIM_Encoder_Start(htim, TIM_CHANNEL_ALL);
 8000582:	213c      	movs	r1, #60	@ 0x3c
 8000584:	6838      	ldr	r0, [r7, #0]
 8000586:	f004 ffc5 	bl	8005514 <HAL_TIM_Encoder_Start>

    enc->lastRawPosition = __HAL_TIM_GET_COUNTER(htim);
 800058a:	683b      	ldr	r3, [r7, #0]
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000590:	461a      	mov	r2, r3
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	605a      	str	r2, [r3, #4]
    enc->position = 0;
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	f04f 0200 	mov.w	r2, #0
 800059c:	609a      	str	r2, [r3, #8]
    enc->velocity = 0;
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	f04f 0200 	mov.w	r2, #0
 80005a4:	60da      	str	r2, [r3, #12]
    enc->acceleration = 0;
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	f04f 0200 	mov.w	r2, #0
 80005ac:	611a      	str	r2, [r3, #16]
    enc->lastPosition = 0;
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	f04f 0200 	mov.w	r2, #0
 80005b4:	615a      	str	r2, [r3, #20]
    enc->lastVelocity = 0;
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	f04f 0200 	mov.w	r2, #0
 80005bc:	619a      	str	r2, [r3, #24]
}
 80005be:	bf00      	nop
 80005c0:	3708      	adds	r7, #8
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bd80      	pop	{r7, pc}

080005c6 <Encoder_setLimit>:
    enc->lastPosition = enc->position;
    enc->lastVelocity = enc->velocity;
}

void Encoder_setLimit(Encoder *enc, float limit)
{
 80005c6:	b480      	push	{r7}
 80005c8:	b083      	sub	sp, #12
 80005ca:	af00      	add	r7, sp, #0
 80005cc:	6078      	str	r0, [r7, #4]
 80005ce:	ed87 0a00 	vstr	s0, [r7]
		enc->position = limit;
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	683a      	ldr	r2, [r7, #0]
 80005d6:	609a      	str	r2, [r3, #8]
}
 80005d8:	bf00      	nop
 80005da:	370c      	adds	r7, #12
 80005dc:	46bd      	mov	sp, r7
 80005de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e2:	4770      	bx	lr

080005e4 <modbus_1t5_Timeout>:
void Modbus_frame_response();


// function for interrupt
void modbus_1t5_Timeout(TIM_HandleTypeDef *htim)
{
 80005e4:	b480      	push	{r7}
 80005e6:	b083      	sub	sp, #12
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 80005ec:	4b04      	ldr	r3, [pc, #16]	@ (8000600 <modbus_1t5_Timeout+0x1c>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	2201      	movs	r2, #1
 80005f2:	751a      	strb	r2, [r3, #20]
}
 80005f4:	bf00      	nop
 80005f6:	370c      	adds	r7, #12
 80005f8:	46bd      	mov	sp, r7
 80005fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fe:	4770      	bx	lr
 8000600:	20000228 	.word	0x20000228

08000604 <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim)
{
 8000604:	b480      	push	{r7}
 8000606:	b083      	sub	sp, #12
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 800060c:	4b04      	ldr	r3, [pc, #16]	@ (8000620 <modbus_3t5_Timeout+0x1c>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	2201      	movs	r2, #1
 8000612:	755a      	strb	r2, [r3, #21]
}
 8000614:	bf00      	nop
 8000616:	370c      	adds	r7, #12
 8000618:	46bd      	mov	sp, r7
 800061a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061e:	4770      	bx	lr
 8000620:	20000228 	.word	0x20000228

08000624 <modbus_UART_Recived>:
void modbus_UART_Recived(UART_HandleTypeDef *huart,uint32_t pos)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b082      	sub	sp, #8
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
 800062c:	6039      	str	r1, [r7, #0]

	//restart timer / start timer of counting time with modbus RTU
	hModbus->Flag_URev =1;
 800062e:	4b15      	ldr	r3, [pc, #84]	@ (8000684 <modbus_UART_Recived+0x60>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	2201      	movs	r2, #1
 8000634:	759a      	strb	r2, [r3, #22]
	if(hModbus->modbusUartStructure.RxTail++<MODBUS_MESSAGEBUFFER_SIZE)
 8000636:	4b13      	ldr	r3, [pc, #76]	@ (8000684 <modbus_UART_Recived+0x60>)
 8000638:	681a      	ldr	r2, [r3, #0]
 800063a:	f8b2 33a2 	ldrh.w	r3, [r2, #930]	@ 0x3a2
 800063e:	1c59      	adds	r1, r3, #1
 8000640:	b289      	uxth	r1, r1
 8000642:	f8a2 13a2 	strh.w	r1, [r2, #930]	@ 0x3a2
 8000646:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 800064a:	d210      	bcs.n	800066e <modbus_UART_Recived+0x4a>
	{


	    HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 800064c:	4b0d      	ldr	r3, [pc, #52]	@ (8000684 <modbus_UART_Recived+0x60>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	68d8      	ldr	r0, [r3, #12]
 8000652:	4b0c      	ldr	r3, [pc, #48]	@ (8000684 <modbus_UART_Recived+0x60>)
 8000654:	681a      	ldr	r2, [r3, #0]
 8000656:	4b0b      	ldr	r3, [pc, #44]	@ (8000684 <modbus_UART_Recived+0x60>)
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 800065e:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 8000662:	4413      	add	r3, r2
 8000664:	3302      	adds	r3, #2
 8000666:	2201      	movs	r2, #1
 8000668:	4619      	mov	r1, r3
 800066a:	f006 fd6d 	bl	8007148 <HAL_UART_Receive_IT>
	}
	__HAL_TIM_SET_COUNTER(hModbus->htim,0);
 800066e:	4b05      	ldr	r3, [pc, #20]	@ (8000684 <modbus_UART_Recived+0x60>)
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	691b      	ldr	r3, [r3, #16]
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	2200      	movs	r2, #0
 8000678:	625a      	str	r2, [r3, #36]	@ 0x24

}
 800067a:	bf00      	nop
 800067c:	3708      	adds	r7, #8
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	20000228 	.word	0x20000228

08000688 <Modbus_init>:


void Modbus_init(ModbusHandleTypedef* hmodbus,u16u8_t* RegisterStartAddress)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b082      	sub	sp, #8
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
 8000690:	6039      	str	r1, [r7, #0]
	hModbus = hmodbus;
 8000692:	4a24      	ldr	r2, [pc, #144]	@ (8000724 <Modbus_init+0x9c>)
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	6013      	str	r3, [r2, #0]

	hModbus->RegisterAddress = RegisterStartAddress;
 8000698:	4b22      	ldr	r3, [pc, #136]	@ (8000724 <Modbus_init+0x9c>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	683a      	ldr	r2, [r7, #0]
 800069e:	605a      	str	r2, [r3, #4]

	//config timer interrupt
	HAL_TIM_RegisterCallback(hModbus->htim,HAL_TIM_OC_DELAY_ELAPSED_CB_ID,(void*)modbus_1t5_Timeout);
 80006a0:	4b20      	ldr	r3, [pc, #128]	@ (8000724 <Modbus_init+0x9c>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	691b      	ldr	r3, [r3, #16]
 80006a6:	4a20      	ldr	r2, [pc, #128]	@ (8000728 <Modbus_init+0xa0>)
 80006a8:	2114      	movs	r1, #20
 80006aa:	4618      	mov	r0, r3
 80006ac:	f005 fc42 	bl	8005f34 <HAL_TIM_RegisterCallback>
	HAL_TIM_RegisterCallback(hModbus->htim,HAL_TIM_PERIOD_ELAPSED_CB_ID ,(void*)modbus_3t5_Timeout);
 80006b0:	4b1c      	ldr	r3, [pc, #112]	@ (8000724 <Modbus_init+0x9c>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	691b      	ldr	r3, [r3, #16]
 80006b6:	4a1d      	ldr	r2, [pc, #116]	@ (800072c <Modbus_init+0xa4>)
 80006b8:	210e      	movs	r1, #14
 80006ba:	4618      	mov	r0, r3
 80006bc:	f005 fc3a 	bl	8005f34 <HAL_TIM_RegisterCallback>

	//config UART interrupt
	HAL_UART_RegisterCallback(hModbus->huart,HAL_UART_RX_COMPLETE_CB_ID,(void*)modbus_UART_Recived);
 80006c0:	4b18      	ldr	r3, [pc, #96]	@ (8000724 <Modbus_init+0x9c>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	68db      	ldr	r3, [r3, #12]
 80006c6:	4a1a      	ldr	r2, [pc, #104]	@ (8000730 <Modbus_init+0xa8>)
 80006c8:	2103      	movs	r1, #3
 80006ca:	4618      	mov	r0, r3
 80006cc:	f006 fc82 	bl	8006fd4 <HAL_UART_RegisterCallback>
	//start Receive
    HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 80006d0:	4b14      	ldr	r3, [pc, #80]	@ (8000724 <Modbus_init+0x9c>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	68d8      	ldr	r0, [r3, #12]
 80006d6:	4b13      	ldr	r3, [pc, #76]	@ (8000724 <Modbus_init+0x9c>)
 80006d8:	681a      	ldr	r2, [r3, #0]
 80006da:	4b12      	ldr	r3, [pc, #72]	@ (8000724 <Modbus_init+0x9c>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 80006e2:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 80006e6:	4413      	add	r3, r2
 80006e8:	3302      	adds	r3, #2
 80006ea:	2201      	movs	r2, #1
 80006ec:	4619      	mov	r1, r3
 80006ee:	f006 fd2b 	bl	8007148 <HAL_UART_Receive_IT>


    if(hModbus->htim->State == HAL_TIM_STATE_READY)
 80006f2:	4b0c      	ldr	r3, [pc, #48]	@ (8000724 <Modbus_init+0x9c>)
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	691b      	ldr	r3, [r3, #16]
 80006f8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80006fc:	b2db      	uxtb	r3, r3
 80006fe:	2b01      	cmp	r3, #1
 8000700:	d10c      	bne.n	800071c <Modbus_init+0x94>
    	{
    		HAL_TIM_Base_Start_IT(hModbus->htim);
 8000702:	4b08      	ldr	r3, [pc, #32]	@ (8000724 <Modbus_init+0x9c>)
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	691b      	ldr	r3, [r3, #16]
 8000708:	4618      	mov	r0, r3
 800070a:	f004 fc05 	bl	8004f18 <HAL_TIM_Base_Start_IT>
    		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 800070e:	4b05      	ldr	r3, [pc, #20]	@ (8000724 <Modbus_init+0x9c>)
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	691b      	ldr	r3, [r3, #16]
 8000714:	2100      	movs	r1, #0
 8000716:	4618      	mov	r0, r3
 8000718:	f004 fdba 	bl	8005290 <HAL_TIM_OnePulse_Start_IT>
    	}

}
 800071c:	bf00      	nop
 800071e:	3708      	adds	r7, #8
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}
 8000724:	20000228 	.word	0x20000228
 8000728:	080005e5 	.word	0x080005e5
 800072c:	08000605 	.word	0x08000605
 8000730:	08000625 	.word	0x08000625

08000734 <CRC16>:
} ;

unsigned short CRC16 ( puchMsg, usDataLen ) /* The function returns the CRC as a unsigned short type */
unsigned char *puchMsg ; /* message to calculate CRC upon */
unsigned short usDataLen ; /* quantity of bytes in message */
{
 8000734:	b480      	push	{r7}
 8000736:	b085      	sub	sp, #20
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
 800073c:	460b      	mov	r3, r1
 800073e:	803b      	strh	r3, [r7, #0]
	unsigned char uchCRCHi = 0xFF ; /* high byte of CRC initialized */
 8000740:	23ff      	movs	r3, #255	@ 0xff
 8000742:	73fb      	strb	r3, [r7, #15]
	unsigned char uchCRCLo = 0xFF ; /* low byte of CRC initialized */
 8000744:	23ff      	movs	r3, #255	@ 0xff
 8000746:	73bb      	strb	r3, [r7, #14]
	unsigned uIndex ; /* will index into CRC lookup table */
	while (usDataLen--) /* pass through message buffer */
 8000748:	e013      	b.n	8000772 <CRC16+0x3e>
	{
		uIndex = uchCRCLo ^ *puchMsg++ ; /* calculate the CRC */
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	1c5a      	adds	r2, r3, #1
 800074e:	607a      	str	r2, [r7, #4]
 8000750:	781a      	ldrb	r2, [r3, #0]
 8000752:	7bbb      	ldrb	r3, [r7, #14]
 8000754:	4053      	eors	r3, r2
 8000756:	b2db      	uxtb	r3, r3
 8000758:	60bb      	str	r3, [r7, #8]
		uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex] ;
 800075a:	4a10      	ldr	r2, [pc, #64]	@ (800079c <CRC16+0x68>)
 800075c:	68bb      	ldr	r3, [r7, #8]
 800075e:	4413      	add	r3, r2
 8000760:	781a      	ldrb	r2, [r3, #0]
 8000762:	7bfb      	ldrb	r3, [r7, #15]
 8000764:	4053      	eors	r3, r2
 8000766:	73bb      	strb	r3, [r7, #14]
		uchCRCHi = auchCRCLo[uIndex] ;
 8000768:	4a0d      	ldr	r2, [pc, #52]	@ (80007a0 <CRC16+0x6c>)
 800076a:	68bb      	ldr	r3, [r7, #8]
 800076c:	4413      	add	r3, r2
 800076e:	781b      	ldrb	r3, [r3, #0]
 8000770:	73fb      	strb	r3, [r7, #15]
	while (usDataLen--) /* pass through message buffer */
 8000772:	883b      	ldrh	r3, [r7, #0]
 8000774:	1e5a      	subs	r2, r3, #1
 8000776:	803a      	strh	r2, [r7, #0]
 8000778:	2b00      	cmp	r3, #0
 800077a:	d1e6      	bne.n	800074a <CRC16+0x16>
	}
	return (uchCRCHi << 8 | uchCRCLo) ;
 800077c:	7bfb      	ldrb	r3, [r7, #15]
 800077e:	b21b      	sxth	r3, r3
 8000780:	021b      	lsls	r3, r3, #8
 8000782:	b21a      	sxth	r2, r3
 8000784:	7bbb      	ldrb	r3, [r7, #14]
 8000786:	b21b      	sxth	r3, r3
 8000788:	4313      	orrs	r3, r2
 800078a:	b21b      	sxth	r3, r3
 800078c:	b29b      	uxth	r3, r3
}
 800078e:	4618      	mov	r0, r3
 8000790:	3714      	adds	r7, #20
 8000792:	46bd      	mov	sp, r7
 8000794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000798:	4770      	bx	lr
 800079a:	bf00      	nop
 800079c:	20000100 	.word	0x20000100
 80007a0:	20000000 	.word	0x20000000

080007a4 <Modbus_Protocal_Worker>:



void Modbus_Protocal_Worker()
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b082      	sub	sp, #8
 80007a8:	af00      	add	r7, sp, #0
	switch(hModbus->Mstatus)
 80007aa:	4b80      	ldr	r3, [pc, #512]	@ (80009ac <Modbus_Protocal_Worker+0x208>)
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	7e1b      	ldrb	r3, [r3, #24]
 80007b0:	3b01      	subs	r3, #1
 80007b2:	2b03      	cmp	r3, #3
 80007b4:	d80a      	bhi.n	80007cc <Modbus_Protocal_Worker+0x28>
 80007b6:	a201      	add	r2, pc, #4	@ (adr r2, 80007bc <Modbus_Protocal_Worker+0x18>)
 80007b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007bc:	080007d7 	.word	0x080007d7
 80007c0:	08000975 	.word	0x08000975
 80007c4:	08000861 	.word	0x08000861
 80007c8:	08000887 	.word	0x08000887
	{
	default:
	case Modbus_state_Init:
		/*init Modbus protocal*/

		hModbus->Mstatus = Modbus_state_Idle;
 80007cc:	4b77      	ldr	r3, [pc, #476]	@ (80009ac <Modbus_Protocal_Worker+0x208>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	2201      	movs	r2, #1
 80007d2:	761a      	strb	r2, [r3, #24]
		break;
 80007d4:	e0e6      	b.n	80009a4 <Modbus_Protocal_Worker+0x200>
	case Modbus_state_Idle:
		/*Idle state*/

		//check that we have response message
		if(hModbus->TxCount)
 80007d6:	4b75      	ldr	r3, [pc, #468]	@ (80009ac <Modbus_Protocal_Worker+0x208>)
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	f893 3271 	ldrb.w	r3, [r3, #625]	@ 0x271
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d002      	beq.n	80007e8 <Modbus_Protocal_Worker+0x44>
		{
			Modbus_Emission();
 80007e2:	f000 f9d5 	bl	8000b90 <Modbus_Emission>
 80007e6:	e01c      	b.n	8000822 <Modbus_Protocal_Worker+0x7e>
		}

		// Received character
		else if(hModbus->Flag_URev)
 80007e8:	4b70      	ldr	r3, [pc, #448]	@ (80009ac <Modbus_Protocal_Worker+0x208>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	7d9b      	ldrb	r3, [r3, #22]
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d017      	beq.n	8000822 <Modbus_Protocal_Worker+0x7e>
		{
			/*reset Timer flag*/
			hModbus->Flag_T15TimeOut = 0;
 80007f2:	4b6e      	ldr	r3, [pc, #440]	@ (80009ac <Modbus_Protocal_Worker+0x208>)
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	2200      	movs	r2, #0
 80007f8:	751a      	strb	r2, [r3, #20]
			hModbus->Flag_T35TimeOut = 0;
 80007fa:	4b6c      	ldr	r3, [pc, #432]	@ (80009ac <Modbus_Protocal_Worker+0x208>)
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	2200      	movs	r2, #0
 8000800:	755a      	strb	r2, [r3, #21]
			__HAL_TIM_ENABLE(hModbus->htim);
 8000802:	4b6a      	ldr	r3, [pc, #424]	@ (80009ac <Modbus_Protocal_Worker+0x208>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	691b      	ldr	r3, [r3, #16]
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	681a      	ldr	r2, [r3, #0]
 800080c:	4b67      	ldr	r3, [pc, #412]	@ (80009ac <Modbus_Protocal_Worker+0x208>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	691b      	ldr	r3, [r3, #16]
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	f042 0201 	orr.w	r2, r2, #1
 8000818:	601a      	str	r2, [r3, #0]
			/*set state*/
			hModbus->Mstatus= Modbus_state_Reception;
 800081a:	4b64      	ldr	r3, [pc, #400]	@ (80009ac <Modbus_Protocal_Worker+0x208>)
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	2203      	movs	r2, #3
 8000820:	761a      	strb	r2, [r3, #24]
		}

		//check that if UART RX not start, start receiving
		if(hModbus->huart->RxState == HAL_UART_STATE_READY)
 8000822:	4b62      	ldr	r3, [pc, #392]	@ (80009ac <Modbus_Protocal_Worker+0x208>)
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	68db      	ldr	r3, [r3, #12]
 8000828:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800082c:	2b20      	cmp	r3, #32
 800082e:	f040 80b2 	bne.w	8000996 <Modbus_Protocal_Worker+0x1f2>
		{
			hModbus->modbusUartStructure.RxTail =0;
 8000832:	4b5e      	ldr	r3, [pc, #376]	@ (80009ac <Modbus_Protocal_Worker+0x208>)
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	2200      	movs	r2, #0
 8000838:	f8a3 23a2 	strh.w	r2, [r3, #930]	@ 0x3a2
			HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 800083c:	4b5b      	ldr	r3, [pc, #364]	@ (80009ac <Modbus_Protocal_Worker+0x208>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	68d8      	ldr	r0, [r3, #12]
 8000842:	4b5a      	ldr	r3, [pc, #360]	@ (80009ac <Modbus_Protocal_Worker+0x208>)
 8000844:	681a      	ldr	r2, [r3, #0]
 8000846:	4b59      	ldr	r3, [pc, #356]	@ (80009ac <Modbus_Protocal_Worker+0x208>)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 800084e:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 8000852:	4413      	add	r3, r2
 8000854:	3302      	adds	r3, #2
 8000856:	2201      	movs	r2, #1
 8000858:	4619      	mov	r1, r3
 800085a:	f006 fc75 	bl	8007148 <HAL_UART_Receive_IT>
		}
		break;
 800085e:	e09a      	b.n	8000996 <Modbus_Protocal_Worker+0x1f2>
	case Modbus_state_Reception:

		if(hModbus->Flag_T15TimeOut)
 8000860:	4b52      	ldr	r3, [pc, #328]	@ (80009ac <Modbus_Protocal_Worker+0x208>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	7d1b      	ldrb	r3, [r3, #20]
 8000866:	2b00      	cmp	r3, #0
 8000868:	f000 8097 	beq.w	800099a <Modbus_Protocal_Worker+0x1f6>
		{
			/*reset recived flag*/
			hModbus->Flag_URev =0;
 800086c:	4b4f      	ldr	r3, [pc, #316]	@ (80009ac <Modbus_Protocal_Worker+0x208>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	2200      	movs	r2, #0
 8000872:	759a      	strb	r2, [r3, #22]
			hModbus->RecvStatus = Modbus_RecvFrame_Null;
 8000874:	4b4d      	ldr	r3, [pc, #308]	@ (80009ac <Modbus_Protocal_Worker+0x208>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	22fe      	movs	r2, #254	@ 0xfe
 800087a:	75da      	strb	r2, [r3, #23]

			/*compute CRC and Slave address*/



			hModbus->Mstatus = Modbus_state_ControlAndWaiting;
 800087c:	4b4b      	ldr	r3, [pc, #300]	@ (80009ac <Modbus_Protocal_Worker+0x208>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	2204      	movs	r2, #4
 8000882:	761a      	strb	r2, [r3, #24]
		}
		break;
 8000884:	e089      	b.n	800099a <Modbus_Protocal_Worker+0x1f6>
	case Modbus_state_ControlAndWaiting:
		/*Frame error , Not generate response , Clear buffer*/
		if(hModbus->Flag_URev)
 8000886:	4b49      	ldr	r3, [pc, #292]	@ (80009ac <Modbus_Protocal_Worker+0x208>)
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	7d9b      	ldrb	r3, [r3, #22]
 800088c:	2b00      	cmp	r3, #0
 800088e:	d009      	beq.n	80008a4 <Modbus_Protocal_Worker+0x100>
		{

			if(!hModbus->RecvStatus)
 8000890:	4b46      	ldr	r3, [pc, #280]	@ (80009ac <Modbus_Protocal_Worker+0x208>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	f993 3017 	ldrsb.w	r3, [r3, #23]
 8000898:	2b00      	cmp	r3, #0
 800089a:	d103      	bne.n	80008a4 <Modbus_Protocal_Worker+0x100>
			{
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 800089c:	4b43      	ldr	r3, [pc, #268]	@ (80009ac <Modbus_Protocal_Worker+0x208>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	22ff      	movs	r2, #255	@ 0xff
 80008a2:	75da      	strb	r2, [r3, #23]
			}
		}

		/*Frame Calculation , calculate once*/
		if(hModbus->RecvStatus == Modbus_RecvFrame_Null)
 80008a4:	4b41      	ldr	r3, [pc, #260]	@ (80009ac <Modbus_Protocal_Worker+0x208>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	f993 3017 	ldrsb.w	r3, [r3, #23]
 80008ac:	f113 0f02 	cmn.w	r3, #2
 80008b0:	d150      	bne.n	8000954 <Modbus_Protocal_Worker+0x1b0>
		{
			hModbus->RecvStatus = Modbus_RecvFrame_Normal;
 80008b2:	4b3e      	ldr	r3, [pc, #248]	@ (80009ac <Modbus_Protocal_Worker+0x208>)
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	2200      	movs	r2, #0
 80008b8:	75da      	strb	r2, [r3, #23]
			// check CRC
			u16u8_t CalculateCRC;
			CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferRx,hModbus->modbusUartStructure.RxTail - 2);
 80008ba:	4b3c      	ldr	r3, [pc, #240]	@ (80009ac <Modbus_Protocal_Worker+0x208>)
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	f203 2272 	addw	r2, r3, #626	@ 0x272
 80008c2:	4b3a      	ldr	r3, [pc, #232]	@ (80009ac <Modbus_Protocal_Worker+0x208>)
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 80008ca:	3b02      	subs	r3, #2
 80008cc:	4619      	mov	r1, r3
 80008ce:	4610      	mov	r0, r2
 80008d0:	f7ff ff30 	bl	8000734 <CRC16>
 80008d4:	4603      	mov	r3, r0
 80008d6:	80bb      	strh	r3, [r7, #4]

			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 80008d8:	793a      	ldrb	r2, [r7, #4]
 80008da:	4b34      	ldr	r3, [pc, #208]	@ (80009ac <Modbus_Protocal_Worker+0x208>)
 80008dc:	6819      	ldr	r1, [r3, #0]
 80008de:	4b33      	ldr	r3, [pc, #204]	@ (80009ac <Modbus_Protocal_Worker+0x208>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 80008e6:	3b02      	subs	r3, #2
 80008e8:	440b      	add	r3, r1
 80008ea:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
 80008ee:	429a      	cmp	r2, r3
 80008f0:	d10c      	bne.n	800090c <Modbus_Protocal_Worker+0x168>
			&& CalculateCRC.U8[1] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail -1]))
 80008f2:	797a      	ldrb	r2, [r7, #5]
 80008f4:	4b2d      	ldr	r3, [pc, #180]	@ (80009ac <Modbus_Protocal_Worker+0x208>)
 80008f6:	6819      	ldr	r1, [r3, #0]
 80008f8:	4b2c      	ldr	r3, [pc, #176]	@ (80009ac <Modbus_Protocal_Worker+0x208>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8000900:	3b01      	subs	r3, #1
 8000902:	440b      	add	r3, r1
 8000904:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 8000908:	429a      	cmp	r2, r3
 800090a:	d004      	beq.n	8000916 <Modbus_Protocal_Worker+0x172>
			{
				// communication unsuccessful
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 800090c:	4b27      	ldr	r3, [pc, #156]	@ (80009ac <Modbus_Protocal_Worker+0x208>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	22ff      	movs	r2, #255	@ 0xff
 8000912:	75da      	strb	r2, [r3, #23]
				break;
 8000914:	e046      	b.n	80009a4 <Modbus_Protocal_Worker+0x200>
			}

			//check Slave Address
			if(hModbus->modbusUartStructure.MessageBufferRx[0] != hModbus->slaveAddress)
 8000916:	4b25      	ldr	r3, [pc, #148]	@ (80009ac <Modbus_Protocal_Worker+0x208>)
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	f893 2272 	ldrb.w	r2, [r3, #626]	@ 0x272
 800091e:	4b23      	ldr	r3, [pc, #140]	@ (80009ac <Modbus_Protocal_Worker+0x208>)
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	781b      	ldrb	r3, [r3, #0]
 8000924:	429a      	cmp	r2, r3
 8000926:	d113      	bne.n	8000950 <Modbus_Protocal_Worker+0x1ac>
				break;

			//copy recivced frame
			memcpy(hModbus->Rxframe,
 8000928:	4b20      	ldr	r3, [pc, #128]	@ (80009ac <Modbus_Protocal_Worker+0x208>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	f103 0019 	add.w	r0, r3, #25
					hModbus->modbusUartStructure.MessageBufferRx+1,
 8000930:	4b1e      	ldr	r3, [pc, #120]	@ (80009ac <Modbus_Protocal_Worker+0x208>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	f203 2372 	addw	r3, r3, #626	@ 0x272
			memcpy(hModbus->Rxframe,
 8000938:	1c59      	adds	r1, r3, #1
					hModbus->modbusUartStructure.RxTail-3);
 800093a:	4b1c      	ldr	r3, [pc, #112]	@ (80009ac <Modbus_Protocal_Worker+0x208>)
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8000942:	3b03      	subs	r3, #3
			memcpy(hModbus->Rxframe,
 8000944:	461a      	mov	r2, r3
 8000946:	f008 ff67 	bl	8009818 <memcpy>

			//execute command
			Modbus_frame_response();
 800094a:	f000 f909 	bl	8000b60 <Modbus_frame_response>
 800094e:	e001      	b.n	8000954 <Modbus_Protocal_Worker+0x1b0>
				break;
 8000950:	bf00      	nop
					}
		break;


	}
}
 8000952:	e027      	b.n	80009a4 <Modbus_Protocal_Worker+0x200>
		if(hModbus->Flag_T35TimeOut)
 8000954:	4b15      	ldr	r3, [pc, #84]	@ (80009ac <Modbus_Protocal_Worker+0x208>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	7d5b      	ldrb	r3, [r3, #21]
 800095a:	2b00      	cmp	r3, #0
 800095c:	d01f      	beq.n	800099e <Modbus_Protocal_Worker+0x1fa>
			hModbus->Mstatus = Modbus_state_Idle;
 800095e:	4b13      	ldr	r3, [pc, #76]	@ (80009ac <Modbus_Protocal_Worker+0x208>)
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	2201      	movs	r2, #1
 8000964:	761a      	strb	r2, [r3, #24]
			HAL_UART_AbortReceive(hModbus->huart);
 8000966:	4b11      	ldr	r3, [pc, #68]	@ (80009ac <Modbus_Protocal_Worker+0x208>)
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	68db      	ldr	r3, [r3, #12]
 800096c:	4618      	mov	r0, r3
 800096e:	f006 fcb7 	bl	80072e0 <HAL_UART_AbortReceive>
		break;
 8000972:	e014      	b.n	800099e <Modbus_Protocal_Worker+0x1fa>
		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8000974:	4b0d      	ldr	r3, [pc, #52]	@ (80009ac <Modbus_Protocal_Worker+0x208>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	68db      	ldr	r3, [r3, #12]
 800097a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800097e:	2b20      	cmp	r3, #32
 8000980:	d10f      	bne.n	80009a2 <Modbus_Protocal_Worker+0x1fe>
			hModbus->TxCount=0;
 8000982:	4b0a      	ldr	r3, [pc, #40]	@ (80009ac <Modbus_Protocal_Worker+0x208>)
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	2200      	movs	r2, #0
 8000988:	f883 2271 	strb.w	r2, [r3, #625]	@ 0x271
			hModbus->Mstatus = Modbus_state_Idle;
 800098c:	4b07      	ldr	r3, [pc, #28]	@ (80009ac <Modbus_Protocal_Worker+0x208>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	2201      	movs	r2, #1
 8000992:	761a      	strb	r2, [r3, #24]
		break;
 8000994:	e005      	b.n	80009a2 <Modbus_Protocal_Worker+0x1fe>
		break;
 8000996:	bf00      	nop
 8000998:	e004      	b.n	80009a4 <Modbus_Protocal_Worker+0x200>
		break;
 800099a:	bf00      	nop
 800099c:	e002      	b.n	80009a4 <Modbus_Protocal_Worker+0x200>
		break;
 800099e:	bf00      	nop
 80009a0:	e000      	b.n	80009a4 <Modbus_Protocal_Worker+0x200>
		break;
 80009a2:	bf00      	nop
}
 80009a4:	bf00      	nop
 80009a6:	3708      	adds	r7, #8
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	20000228 	.word	0x20000228

080009b0 <modbusWrite1Register>:
void modbusWrite1Register() //function 06
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b082      	sub	sp, #8
 80009b4:	af00      	add	r7, sp, #0

	//write data to register
	uint16_t startAddress = (hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]);
 80009b6:	4b1d      	ldr	r3, [pc, #116]	@ (8000a2c <modbusWrite1Register+0x7c>)
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	7e9b      	ldrb	r3, [r3, #26]
 80009bc:	021b      	lsls	r3, r3, #8
 80009be:	b29b      	uxth	r3, r3
 80009c0:	4a1a      	ldr	r2, [pc, #104]	@ (8000a2c <modbusWrite1Register+0x7c>)
 80009c2:	6812      	ldr	r2, [r2, #0]
 80009c4:	7ed2      	ldrb	r2, [r2, #27]
 80009c6:	4413      	add	r3, r2
 80009c8:	80fb      	strh	r3, [r7, #6]

	if(startAddress > hModbus->RegisterSize)
 80009ca:	88fa      	ldrh	r2, [r7, #6]
 80009cc:	4b17      	ldr	r3, [pc, #92]	@ (8000a2c <modbusWrite1Register+0x7c>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	689b      	ldr	r3, [r3, #8]
 80009d2:	429a      	cmp	r2, r3
 80009d4:	d903      	bls.n	80009de <modbusWrite1Register+0x2e>
		{
			 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 80009d6:	2002      	movs	r0, #2
 80009d8:	f000 f8a0 	bl	8000b1c <ModbusErrorReply>
			 return;
 80009dc:	e023      	b.n	8000a26 <modbusWrite1Register+0x76>
		}


	hModbus->RegisterAddress[startAddress].U8[1] = hModbus->Rxframe[3];
 80009de:	4b13      	ldr	r3, [pc, #76]	@ (8000a2c <modbusWrite1Register+0x7c>)
 80009e0:	681a      	ldr	r2, [r3, #0]
 80009e2:	4b12      	ldr	r3, [pc, #72]	@ (8000a2c <modbusWrite1Register+0x7c>)
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	6859      	ldr	r1, [r3, #4]
 80009e8:	88fb      	ldrh	r3, [r7, #6]
 80009ea:	005b      	lsls	r3, r3, #1
 80009ec:	440b      	add	r3, r1
 80009ee:	7f12      	ldrb	r2, [r2, #28]
 80009f0:	705a      	strb	r2, [r3, #1]
	hModbus->RegisterAddress[startAddress].U8[0] = hModbus->Rxframe[4];
 80009f2:	4b0e      	ldr	r3, [pc, #56]	@ (8000a2c <modbusWrite1Register+0x7c>)
 80009f4:	681a      	ldr	r2, [r3, #0]
 80009f6:	4b0d      	ldr	r3, [pc, #52]	@ (8000a2c <modbusWrite1Register+0x7c>)
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	6859      	ldr	r1, [r3, #4]
 80009fc:	88fb      	ldrh	r3, [r7, #6]
 80009fe:	005b      	lsls	r3, r3, #1
 8000a00:	440b      	add	r3, r1
 8000a02:	7f52      	ldrb	r2, [r2, #29]
 8000a04:	701a      	strb	r2, [r3, #0]



	//generate response
	memcpy(hModbus->Txframe,
 8000a06:	4b09      	ldr	r3, [pc, #36]	@ (8000a2c <modbusWrite1Register+0x7c>)
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	f203 1045 	addw	r0, r3, #325	@ 0x145
			hModbus->Rxframe,
 8000a0e:	4b07      	ldr	r3, [pc, #28]	@ (8000a2c <modbusWrite1Register+0x7c>)
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	3319      	adds	r3, #25
	memcpy(hModbus->Txframe,
 8000a14:	2208      	movs	r2, #8
 8000a16:	4619      	mov	r1, r3
 8000a18:	f008 fefe 	bl	8009818 <memcpy>
			8);
	//set number of byte to sent
	hModbus->TxCount=5;
 8000a1c:	4b03      	ldr	r3, [pc, #12]	@ (8000a2c <modbusWrite1Register+0x7c>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	2205      	movs	r2, #5
 8000a22:	f883 2271 	strb.w	r2, [r3, #625]	@ 0x271



}
 8000a26:	3708      	adds	r7, #8
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	20000228 	.word	0x20000228

08000a30 <modbusRead1Register>:

void modbusRead1Register() // function 03
{
 8000a30:	b590      	push	{r4, r7, lr}
 8000a32:	b083      	sub	sp, #12
 8000a34:	af00      	add	r7, sp, #0



	uint16_t numberOfDataToRead =((hModbus->Rxframe[3]<<8)+(hModbus->Rxframe[4]));
 8000a36:	4b38      	ldr	r3, [pc, #224]	@ (8000b18 <modbusRead1Register+0xe8>)
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	7f1b      	ldrb	r3, [r3, #28]
 8000a3c:	021b      	lsls	r3, r3, #8
 8000a3e:	b29b      	uxth	r3, r3
 8000a40:	4a35      	ldr	r2, [pc, #212]	@ (8000b18 <modbusRead1Register+0xe8>)
 8000a42:	6812      	ldr	r2, [r2, #0]
 8000a44:	7f52      	ldrb	r2, [r2, #29]
 8000a46:	4413      	add	r3, r2
 8000a48:	80fb      	strh	r3, [r7, #6]
	uint16_t startAddress =((hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]));
 8000a4a:	4b33      	ldr	r3, [pc, #204]	@ (8000b18 <modbusRead1Register+0xe8>)
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	7e9b      	ldrb	r3, [r3, #26]
 8000a50:	021b      	lsls	r3, r3, #8
 8000a52:	b29b      	uxth	r3, r3
 8000a54:	4a30      	ldr	r2, [pc, #192]	@ (8000b18 <modbusRead1Register+0xe8>)
 8000a56:	6812      	ldr	r2, [r2, #0]
 8000a58:	7ed2      	ldrb	r2, [r2, #27]
 8000a5a:	4413      	add	r3, r2
 8000a5c:	80bb      	strh	r3, [r7, #4]

	//check quantity and address range

	if(numberOfDataToRead <1 ||numberOfDataToRead > 0x7D)
 8000a5e:	88fb      	ldrh	r3, [r7, #6]
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d002      	beq.n	8000a6a <modbusRead1Register+0x3a>
 8000a64:	88fb      	ldrh	r3, [r7, #6]
 8000a66:	2b7d      	cmp	r3, #125	@ 0x7d
 8000a68:	d903      	bls.n	8000a72 <modbusRead1Register+0x42>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataValue);
 8000a6a:	2003      	movs	r0, #3
 8000a6c:	f000 f856 	bl	8000b1c <ModbusErrorReply>
		 return;
 8000a70:	e04e      	b.n	8000b10 <modbusRead1Register+0xe0>
	}

	if(startAddress > hModbus->RegisterSize || (startAddress +  numberOfDataToRead) > hModbus->RegisterSize)
 8000a72:	88ba      	ldrh	r2, [r7, #4]
 8000a74:	4b28      	ldr	r3, [pc, #160]	@ (8000b18 <modbusRead1Register+0xe8>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	689b      	ldr	r3, [r3, #8]
 8000a7a:	429a      	cmp	r2, r3
 8000a7c:	d808      	bhi.n	8000a90 <modbusRead1Register+0x60>
 8000a7e:	88ba      	ldrh	r2, [r7, #4]
 8000a80:	88fb      	ldrh	r3, [r7, #6]
 8000a82:	4413      	add	r3, r2
 8000a84:	461a      	mov	r2, r3
 8000a86:	4b24      	ldr	r3, [pc, #144]	@ (8000b18 <modbusRead1Register+0xe8>)
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	689b      	ldr	r3, [r3, #8]
 8000a8c:	429a      	cmp	r2, r3
 8000a8e:	d903      	bls.n	8000a98 <modbusRead1Register+0x68>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 8000a90:	2002      	movs	r0, #2
 8000a92:	f000 f843 	bl	8000b1c <ModbusErrorReply>
		 return;
 8000a96:	e03b      	b.n	8000b10 <modbusRead1Register+0xe0>
	}


	//generate response
	hModbus->Txframe[0] = Modbus_function_Read_Holding_Register;
 8000a98:	4b1f      	ldr	r3, [pc, #124]	@ (8000b18 <modbusRead1Register+0xe8>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	2203      	movs	r2, #3
 8000a9e:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	hModbus->Txframe[1] = (2*numberOfDataToRead) & 0xFF;
 8000aa2:	88fb      	ldrh	r3, [r7, #6]
 8000aa4:	b2da      	uxtb	r2, r3
 8000aa6:	4b1c      	ldr	r3, [pc, #112]	@ (8000b18 <modbusRead1Register+0xe8>)
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	0052      	lsls	r2, r2, #1
 8000aac:	b2d2      	uxtb	r2, r2
 8000aae:	f883 2146 	strb.w	r2, [r3, #326]	@ 0x146
	register int i;
	for(i=0; i<numberOfDataToRead;i++)
 8000ab2:	2400      	movs	r4, #0
 8000ab4:	e020      	b.n	8000af8 <modbusRead1Register+0xc8>
	{
		hModbus->Txframe[2*i+2]=hModbus->RegisterAddress[startAddress+i].U8[1];
 8000ab6:	4b18      	ldr	r3, [pc, #96]	@ (8000b18 <modbusRead1Register+0xe8>)
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	685a      	ldr	r2, [r3, #4]
 8000abc:	88bb      	ldrh	r3, [r7, #4]
 8000abe:	4423      	add	r3, r4
 8000ac0:	005b      	lsls	r3, r3, #1
 8000ac2:	18d1      	adds	r1, r2, r3
 8000ac4:	4b14      	ldr	r3, [pc, #80]	@ (8000b18 <modbusRead1Register+0xe8>)
 8000ac6:	681a      	ldr	r2, [r3, #0]
 8000ac8:	1c63      	adds	r3, r4, #1
 8000aca:	005b      	lsls	r3, r3, #1
 8000acc:	7849      	ldrb	r1, [r1, #1]
 8000ace:	4413      	add	r3, r2
 8000ad0:	460a      	mov	r2, r1
 8000ad2:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
		hModbus->Txframe[2*i+3]=hModbus->RegisterAddress[startAddress+i].U8[0];
 8000ad6:	4b10      	ldr	r3, [pc, #64]	@ (8000b18 <modbusRead1Register+0xe8>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	685a      	ldr	r2, [r3, #4]
 8000adc:	88bb      	ldrh	r3, [r7, #4]
 8000ade:	4423      	add	r3, r4
 8000ae0:	005b      	lsls	r3, r3, #1
 8000ae2:	18d1      	adds	r1, r2, r3
 8000ae4:	4b0c      	ldr	r3, [pc, #48]	@ (8000b18 <modbusRead1Register+0xe8>)
 8000ae6:	681a      	ldr	r2, [r3, #0]
 8000ae8:	0063      	lsls	r3, r4, #1
 8000aea:	3303      	adds	r3, #3
 8000aec:	7809      	ldrb	r1, [r1, #0]
 8000aee:	4413      	add	r3, r2
 8000af0:	460a      	mov	r2, r1
 8000af2:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	for(i=0; i<numberOfDataToRead;i++)
 8000af6:	3401      	adds	r4, #1
 8000af8:	88fb      	ldrh	r3, [r7, #6]
 8000afa:	429c      	cmp	r4, r3
 8000afc:	dbdb      	blt.n	8000ab6 <modbusRead1Register+0x86>
	}
	hModbus->TxCount = 2+2*numberOfDataToRead;
 8000afe:	88fb      	ldrh	r3, [r7, #6]
 8000b00:	3301      	adds	r3, #1
 8000b02:	b2da      	uxtb	r2, r3
 8000b04:	4b04      	ldr	r3, [pc, #16]	@ (8000b18 <modbusRead1Register+0xe8>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	0052      	lsls	r2, r2, #1
 8000b0a:	b2d2      	uxtb	r2, r2
 8000b0c:	f883 2271 	strb.w	r2, [r3, #625]	@ 0x271

}
 8000b10:	370c      	adds	r7, #12
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd90      	pop	{r4, r7, pc}
 8000b16:	bf00      	nop
 8000b18:	20000228 	.word	0x20000228

08000b1c <ModbusErrorReply>:

void ModbusErrorReply(uint8_t Errorcode)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	b083      	sub	sp, #12
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	4603      	mov	r3, r0
 8000b24:	71fb      	strb	r3, [r7, #7]
	hModbus->Txframe[0] = hModbus->Rxframe[0] | 0x80;
 8000b26:	4b0d      	ldr	r3, [pc, #52]	@ (8000b5c <ModbusErrorReply+0x40>)
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	7e5a      	ldrb	r2, [r3, #25]
 8000b2c:	4b0b      	ldr	r3, [pc, #44]	@ (8000b5c <ModbusErrorReply+0x40>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8000b34:	b2d2      	uxtb	r2, r2
 8000b36:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	hModbus->Txframe[1] = Errorcode;
 8000b3a:	4b08      	ldr	r3, [pc, #32]	@ (8000b5c <ModbusErrorReply+0x40>)
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	79fa      	ldrb	r2, [r7, #7]
 8000b40:	f883 2146 	strb.w	r2, [r3, #326]	@ 0x146
	hModbus->TxCount = 2;
 8000b44:	4b05      	ldr	r3, [pc, #20]	@ (8000b5c <ModbusErrorReply+0x40>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	2202      	movs	r2, #2
 8000b4a:	f883 2271 	strb.w	r2, [r3, #625]	@ 0x271
}
 8000b4e:	bf00      	nop
 8000b50:	370c      	adds	r7, #12
 8000b52:	46bd      	mov	sp, r7
 8000b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b58:	4770      	bx	lr
 8000b5a:	bf00      	nop
 8000b5c:	20000228 	.word	0x20000228

08000b60 <Modbus_frame_response>:

void Modbus_frame_response()
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	af00      	add	r7, sp, #0
	switch(hModbus->Rxframe[0]) //check funcion
 8000b64:	4b09      	ldr	r3, [pc, #36]	@ (8000b8c <Modbus_frame_response+0x2c>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	7e5b      	ldrb	r3, [r3, #25]
 8000b6a:	2b03      	cmp	r3, #3
 8000b6c:	d004      	beq.n	8000b78 <Modbus_frame_response+0x18>
 8000b6e:	2b06      	cmp	r3, #6
 8000b70:	d105      	bne.n	8000b7e <Modbus_frame_response+0x1e>
	{
	case Modbus_function_Write_SingleRegister:
		modbusWrite1Register();
 8000b72:	f7ff ff1d 	bl	80009b0 <modbusWrite1Register>
		break;
 8000b76:	e006      	b.n	8000b86 <Modbus_frame_response+0x26>
	case Modbus_function_Read_Holding_Register:
		modbusRead1Register();
 8000b78:	f7ff ff5a 	bl	8000a30 <modbusRead1Register>
		break;
 8000b7c:	e003      	b.n	8000b86 <Modbus_frame_response+0x26>
	default:
		 ModbusErrorReply(Modbus_RecvFrame_IllegalFunction);
 8000b7e:	2001      	movs	r0, #1
 8000b80:	f7ff ffcc 	bl	8000b1c <ModbusErrorReply>
		break;
 8000b84:	bf00      	nop

	}
}
 8000b86:	bf00      	nop
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	20000228 	.word	0x20000228

08000b90 <Modbus_Emission>:

void Modbus_Emission()
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b082      	sub	sp, #8
 8000b94:	af00      	add	r7, sp, #0
	if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8000b96:	4b3c      	ldr	r3, [pc, #240]	@ (8000c88 <Modbus_Emission+0xf8>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	68db      	ldr	r3, [r3, #12]
 8000b9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ba0:	2b20      	cmp	r3, #32
 8000ba2:	d15d      	bne.n	8000c60 <Modbus_Emission+0xd0>
	{
		//generate response package
		hModbus->modbusUartStructure.MessageBufferTx[0] = hModbus->slaveAddress;
 8000ba4:	4b38      	ldr	r3, [pc, #224]	@ (8000c88 <Modbus_Emission+0xf8>)
 8000ba6:	681a      	ldr	r2, [r3, #0]
 8000ba8:	4b37      	ldr	r3, [pc, #220]	@ (8000c88 <Modbus_Emission+0xf8>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	7812      	ldrb	r2, [r2, #0]
 8000bae:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		memcpy
		(
				hModbus->modbusUartStructure.MessageBufferTx+1,
 8000bb2:	4b35      	ldr	r3, [pc, #212]	@ (8000c88 <Modbus_Emission+0xf8>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	f503 7369 	add.w	r3, r3, #932	@ 0x3a4
		memcpy
 8000bba:	1c58      	adds	r0, r3, #1
				hModbus->Txframe,
 8000bbc:	4b32      	ldr	r3, [pc, #200]	@ (8000c88 <Modbus_Emission+0xf8>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	f203 1145 	addw	r1, r3, #325	@ 0x145
				hModbus->TxCount
 8000bc4:	4b30      	ldr	r3, [pc, #192]	@ (8000c88 <Modbus_Emission+0xf8>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	f893 3271 	ldrb.w	r3, [r3, #625]	@ 0x271
		memcpy
 8000bcc:	461a      	mov	r2, r3
 8000bce:	f008 fe23 	bl	8009818 <memcpy>
		);

		hModbus->modbusUartStructure.TxTail = hModbus->TxCount+3;
 8000bd2:	4b2d      	ldr	r3, [pc, #180]	@ (8000c88 <Modbus_Emission+0xf8>)
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	f893 3271 	ldrb.w	r3, [r3, #625]	@ 0x271
 8000bda:	461a      	mov	r2, r3
 8000bdc:	4b2a      	ldr	r3, [pc, #168]	@ (8000c88 <Modbus_Emission+0xf8>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	3203      	adds	r2, #3
 8000be2:	b292      	uxth	r2, r2
 8000be4:	f8a3 24d4 	strh.w	r2, [r3, #1236]	@ 0x4d4

		u16u8_t CalculateCRC;
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 8000be8:	4b27      	ldr	r3, [pc, #156]	@ (8000c88 <Modbus_Emission+0xf8>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	f503 7269 	add.w	r2, r3, #932	@ 0x3a4
				hModbus->modbusUartStructure.TxTail - 2);
 8000bf0:	4b25      	ldr	r3, [pc, #148]	@ (8000c88 <Modbus_Emission+0xf8>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 8000bf8:	3b02      	subs	r3, #2
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	4610      	mov	r0, r2
 8000bfe:	f7ff fd99 	bl	8000734 <CRC16>
 8000c02:	4603      	mov	r3, r0
 8000c04:	80bb      	strh	r3, [r7, #4]

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-2]
 8000c06:	4b20      	ldr	r3, [pc, #128]	@ (8000c88 <Modbus_Emission+0xf8>)
 8000c08:	681a      	ldr	r2, [r3, #0]
 8000c0a:	4b1f      	ldr	r3, [pc, #124]	@ (8000c88 <Modbus_Emission+0xf8>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 8000c12:	3b02      	subs	r3, #2
													 =CalculateCRC.U8[0];
 8000c14:	7939      	ldrb	r1, [r7, #4]
 8000c16:	4413      	add	r3, r2
 8000c18:	460a      	mov	r2, r1
 8000c1a:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-1]
 8000c1e:	4b1a      	ldr	r3, [pc, #104]	@ (8000c88 <Modbus_Emission+0xf8>)
 8000c20:	681a      	ldr	r2, [r3, #0]
 8000c22:	4b19      	ldr	r3, [pc, #100]	@ (8000c88 <Modbus_Emission+0xf8>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 8000c2a:	3b01      	subs	r3, #1
													 =CalculateCRC.U8[1];
 8000c2c:	7979      	ldrb	r1, [r7, #5]
 8000c2e:	4413      	add	r3, r2
 8000c30:	460a      	mov	r2, r1
 8000c32:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4


		//sent modbus

		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8000c36:	4b14      	ldr	r3, [pc, #80]	@ (8000c88 <Modbus_Emission+0xf8>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	68db      	ldr	r3, [r3, #12]
 8000c3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c40:	2b20      	cmp	r3, #32
 8000c42:	d10d      	bne.n	8000c60 <Modbus_Emission+0xd0>
		{
			HAL_UART_Transmit_DMA(hModbus->huart
 8000c44:	4b10      	ldr	r3, [pc, #64]	@ (8000c88 <Modbus_Emission+0xf8>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	68d8      	ldr	r0, [r3, #12]
					,hModbus->modbusUartStructure.MessageBufferTx
 8000c4a:	4b0f      	ldr	r3, [pc, #60]	@ (8000c88 <Modbus_Emission+0xf8>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	f503 7169 	add.w	r1, r3, #932	@ 0x3a4
					,hModbus->modbusUartStructure.TxTail);
 8000c52:	4b0d      	ldr	r3, [pc, #52]	@ (8000c88 <Modbus_Emission+0xf8>)
 8000c54:	681b      	ldr	r3, [r3, #0]
			HAL_UART_Transmit_DMA(hModbus->huart
 8000c56:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 8000c5a:	461a      	mov	r2, r3
 8000c5c:	f006 fac0 	bl	80071e0 <HAL_UART_Transmit_DMA>



	}
	/*reset Timer flag*/
	hModbus->Flag_T15TimeOut = 0;
 8000c60:	4b09      	ldr	r3, [pc, #36]	@ (8000c88 <Modbus_Emission+0xf8>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	2200      	movs	r2, #0
 8000c66:	751a      	strb	r2, [r3, #20]
	hModbus->Flag_T35TimeOut = 0;
 8000c68:	4b07      	ldr	r3, [pc, #28]	@ (8000c88 <Modbus_Emission+0xf8>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	755a      	strb	r2, [r3, #21]
	hModbus->Flag_URev =0;
 8000c70:	4b05      	ldr	r3, [pc, #20]	@ (8000c88 <Modbus_Emission+0xf8>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	2200      	movs	r2, #0
 8000c76:	759a      	strb	r2, [r3, #22]
	/*set state*/
	hModbus->Mstatus= Modbus_state_Emission;
 8000c78:	4b03      	ldr	r3, [pc, #12]	@ (8000c88 <Modbus_Emission+0xf8>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	2202      	movs	r2, #2
 8000c7e:	761a      	strb	r2, [r3, #24]
}
 8000c80:	bf00      	nop
 8000c82:	3708      	adds	r7, #8
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	20000228 	.word	0x20000228

08000c8c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b082      	sub	sp, #8
 8000c90:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c92:	f001 f93c 	bl	8001f0e <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c96:	f000 f857 	bl	8000d48 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c9a:	f000 fccd 	bl	8001638 <MX_GPIO_Init>
  MX_DMA_Init();
 8000c9e:	f000 fca1 	bl	80015e4 <MX_DMA_Init>
  MX_TIM3_Init();
 8000ca2:	f000 f9b9 	bl	8001018 <MX_TIM3_Init>
  MX_ADC1_Init();
 8000ca6:	f000 f89b 	bl	8000de0 <MX_ADC1_Init>
  MX_TIM1_Init();
 8000caa:	f000 f913 	bl	8000ed4 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000cae:	f000 f965 	bl	8000f7c <MX_TIM2_Init>
  MX_TIM4_Init();
 8000cb2:	f000 fa07 	bl	80010c4 <MX_TIM4_Init>
  MX_TIM20_Init();
 8000cb6:	f000 fb8b 	bl	80013d0 <MX_TIM20_Init>
  MX_TIM8_Init();
 8000cba:	f000 fa59 	bl	8001170 <MX_TIM8_Init>
  MX_TIM16_Init();
 8000cbe:	f000 fb07 	bl	80012d0 <MX_TIM16_Init>
  MX_USART2_UART_Init();
 8000cc2:	f000 fc41 	bl	8001548 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
	Encoder_Init(&encoder1, &htim4);
 8000cc6:	4918      	ldr	r1, [pc, #96]	@ (8000d28 <main+0x9c>)
 8000cc8:	4818      	ldr	r0, [pc, #96]	@ (8000d2c <main+0xa0>)
 8000cca:	f7ff fc52 	bl	8000572 <Encoder_Init>
	Encoder_Init(&encoder2, &htim3);
 8000cce:	4918      	ldr	r1, [pc, #96]	@ (8000d30 <main+0xa4>)
 8000cd0:	4818      	ldr	r0, [pc, #96]	@ (8000d34 <main+0xa8>)
 8000cd2:	f7ff fc4e 	bl	8000572 <Encoder_Init>
	int lastTick = 0;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	607b      	str	r3, [r7, #4]
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8000cda:	213c      	movs	r1, #60	@ 0x3c
 8000cdc:	4814      	ldr	r0, [pc, #80]	@ (8000d30 <main+0xa4>)
 8000cde:	f004 fc19 	bl	8005514 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8000ce2:	213c      	movs	r1, #60	@ 0x3c
 8000ce4:	4810      	ldr	r0, [pc, #64]	@ (8000d28 <main+0x9c>)
 8000ce6:	f004 fc15 	bl	8005514 <HAL_TIM_Encoder_Start>

	hmodbus.huart = &huart2;
 8000cea:	4b13      	ldr	r3, [pc, #76]	@ (8000d38 <main+0xac>)
 8000cec:	4a13      	ldr	r2, [pc, #76]	@ (8000d3c <main+0xb0>)
 8000cee:	60da      	str	r2, [r3, #12]
	hmodbus.htim = &htim16;
 8000cf0:	4b11      	ldr	r3, [pc, #68]	@ (8000d38 <main+0xac>)
 8000cf2:	4a13      	ldr	r2, [pc, #76]	@ (8000d40 <main+0xb4>)
 8000cf4:	611a      	str	r2, [r3, #16]
	hmodbus.slaveAddress = 0x15;
 8000cf6:	4b10      	ldr	r3, [pc, #64]	@ (8000d38 <main+0xac>)
 8000cf8:	2215      	movs	r2, #21
 8000cfa:	701a      	strb	r2, [r3, #0]
	hmodbus.RegisterSize = 200;
 8000cfc:	4b0e      	ldr	r3, [pc, #56]	@ (8000d38 <main+0xac>)
 8000cfe:	22c8      	movs	r2, #200	@ 0xc8
 8000d00:	609a      	str	r2, [r3, #8]
	Modbus_init(&hmodbus, registerFrame);
 8000d02:	4910      	ldr	r1, [pc, #64]	@ (8000d44 <main+0xb8>)
 8000d04:	480c      	ldr	r0, [pc, #48]	@ (8000d38 <main+0xac>)
 8000d06:	f7ff fcbf 	bl	8000688 <Modbus_init>
  /* USER CODE BEGIN WHILE */
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		Modbus_Protocal_Worker();
 8000d0a:	f7ff fd4b 	bl	80007a4 <Modbus_Protocal_Worker>
		modbus_r_position(&hmodbus,7);
 8000d0e:	eeb1 0a0c 	vmov.f32	s0, #28	@ 0x40e00000  7.0
 8000d12:	4809      	ldr	r0, [pc, #36]	@ (8000d38 <main+0xac>)
 8000d14:	f7ff fc16 	bl	8000544 <modbus_r_position>
		hmodbus.RegisterAddress[0x00].U16 = 22881;
 8000d18:	4b07      	ldr	r3, [pc, #28]	@ (8000d38 <main+0xac>)
 8000d1a:	685b      	ldr	r3, [r3, #4]
 8000d1c:	f645 1261 	movw	r2, #22881	@ 0x5961
 8000d20:	801a      	strh	r2, [r3, #0]
		Modbus_Protocal_Worker();
 8000d22:	bf00      	nop
 8000d24:	e7f1      	b.n	8000d0a <main+0x7e>
 8000d26:	bf00      	nop
 8000d28:	200004fc 	.word	0x200004fc
 8000d2c:	20000958 	.word	0x20000958
 8000d30:	20000430 	.word	0x20000430
 8000d34:	20000974 	.word	0x20000974
 8000d38:	20000994 	.word	0x20000994
 8000d3c:	2000082c 	.word	0x2000082c
 8000d40:	20000694 	.word	0x20000694
 8000d44:	20000e6c 	.word	0x20000e6c

08000d48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b094      	sub	sp, #80	@ 0x50
 8000d4c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d4e:	f107 0318 	add.w	r3, r7, #24
 8000d52:	2238      	movs	r2, #56	@ 0x38
 8000d54:	2100      	movs	r1, #0
 8000d56:	4618      	mov	r0, r3
 8000d58:	f008 fd32 	bl	80097c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d5c:	1d3b      	adds	r3, r7, #4
 8000d5e:	2200      	movs	r2, #0
 8000d60:	601a      	str	r2, [r3, #0]
 8000d62:	605a      	str	r2, [r3, #4]
 8000d64:	609a      	str	r2, [r3, #8]
 8000d66:	60da      	str	r2, [r3, #12]
 8000d68:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000d6a:	2000      	movs	r0, #0
 8000d6c:	f003 f840 	bl	8003df0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d70:	2302      	movs	r3, #2
 8000d72:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d74:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000d78:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d7a:	2340      	movs	r3, #64	@ 0x40
 8000d7c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d7e:	2302      	movs	r3, #2
 8000d80:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d82:	2302      	movs	r3, #2
 8000d84:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000d86:	2304      	movs	r3, #4
 8000d88:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000d8a:	2355      	movs	r3, #85	@ 0x55
 8000d8c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d8e:	2302      	movs	r3, #2
 8000d90:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000d92:	2302      	movs	r3, #2
 8000d94:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000d96:	2302      	movs	r3, #2
 8000d98:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d9a:	f107 0318 	add.w	r3, r7, #24
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f003 f8da 	bl	8003f58 <HAL_RCC_OscConfig>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d001      	beq.n	8000dae <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000daa:	f000 fd3b 	bl	8001824 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dae:	230f      	movs	r3, #15
 8000db0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000db2:	2303      	movs	r3, #3
 8000db4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000db6:	2300      	movs	r3, #0
 8000db8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000dc2:	1d3b      	adds	r3, r7, #4
 8000dc4:	2104      	movs	r1, #4
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f003 fbd8 	bl	800457c <HAL_RCC_ClockConfig>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d001      	beq.n	8000dd6 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000dd2:	f000 fd27 	bl	8001824 <Error_Handler>
  }
}
 8000dd6:	bf00      	nop
 8000dd8:	3750      	adds	r7, #80	@ 0x50
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
	...

08000de0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b08c      	sub	sp, #48	@ 0x30
 8000de4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000de6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000dea:	2200      	movs	r2, #0
 8000dec:	601a      	str	r2, [r3, #0]
 8000dee:	605a      	str	r2, [r3, #4]
 8000df0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000df2:	1d3b      	adds	r3, r7, #4
 8000df4:	2220      	movs	r2, #32
 8000df6:	2100      	movs	r1, #0
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f008 fce1 	bl	80097c0 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000dfe:	4b32      	ldr	r3, [pc, #200]	@ (8000ec8 <MX_ADC1_Init+0xe8>)
 8000e00:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000e04:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000e06:	4b30      	ldr	r3, [pc, #192]	@ (8000ec8 <MX_ADC1_Init+0xe8>)
 8000e08:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000e0c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e0e:	4b2e      	ldr	r3, [pc, #184]	@ (8000ec8 <MX_ADC1_Init+0xe8>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e14:	4b2c      	ldr	r3, [pc, #176]	@ (8000ec8 <MX_ADC1_Init+0xe8>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000e1a:	4b2b      	ldr	r3, [pc, #172]	@ (8000ec8 <MX_ADC1_Init+0xe8>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000e20:	4b29      	ldr	r3, [pc, #164]	@ (8000ec8 <MX_ADC1_Init+0xe8>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e26:	4b28      	ldr	r3, [pc, #160]	@ (8000ec8 <MX_ADC1_Init+0xe8>)
 8000e28:	2204      	movs	r2, #4
 8000e2a:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000e2c:	4b26      	ldr	r3, [pc, #152]	@ (8000ec8 <MX_ADC1_Init+0xe8>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000e32:	4b25      	ldr	r3, [pc, #148]	@ (8000ec8 <MX_ADC1_Init+0xe8>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000e38:	4b23      	ldr	r3, [pc, #140]	@ (8000ec8 <MX_ADC1_Init+0xe8>)
 8000e3a:	2201      	movs	r2, #1
 8000e3c:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e3e:	4b22      	ldr	r3, [pc, #136]	@ (8000ec8 <MX_ADC1_Init+0xe8>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e46:	4b20      	ldr	r3, [pc, #128]	@ (8000ec8 <MX_ADC1_Init+0xe8>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e4c:	4b1e      	ldr	r3, [pc, #120]	@ (8000ec8 <MX_ADC1_Init+0xe8>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000e52:	4b1d      	ldr	r3, [pc, #116]	@ (8000ec8 <MX_ADC1_Init+0xe8>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000e5a:	4b1b      	ldr	r3, [pc, #108]	@ (8000ec8 <MX_ADC1_Init+0xe8>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000e60:	4b19      	ldr	r3, [pc, #100]	@ (8000ec8 <MX_ADC1_Init+0xe8>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e68:	4817      	ldr	r0, [pc, #92]	@ (8000ec8 <MX_ADC1_Init+0xe8>)
 8000e6a:	f001 fa97 	bl	800239c <HAL_ADC_Init>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d001      	beq.n	8000e78 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000e74:	f000 fcd6 	bl	8001824 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000e7c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e80:	4619      	mov	r1, r3
 8000e82:	4811      	ldr	r0, [pc, #68]	@ (8000ec8 <MX_ADC1_Init+0xe8>)
 8000e84:	f002 f8ac 	bl	8002fe0 <HAL_ADCEx_MultiModeConfigChannel>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d001      	beq.n	8000e92 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000e8e:	f000 fcc9 	bl	8001824 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000e92:	4b0e      	ldr	r3, [pc, #56]	@ (8000ecc <MX_ADC1_Init+0xec>)
 8000e94:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e96:	2306      	movs	r3, #6
 8000e98:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 8000e9e:	4b0c      	ldr	r3, [pc, #48]	@ (8000ed0 <MX_ADC1_Init+0xf0>)
 8000ea0:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000ea2:	2304      	movs	r3, #4
 8000ea4:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000eaa:	1d3b      	adds	r3, r7, #4
 8000eac:	4619      	mov	r1, r3
 8000eae:	4806      	ldr	r0, [pc, #24]	@ (8000ec8 <MX_ADC1_Init+0xe8>)
 8000eb0:	f001 fc30 	bl	8002714 <HAL_ADC_ConfigChannel>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d001      	beq.n	8000ebe <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000eba:	f000 fcb3 	bl	8001824 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ebe:	bf00      	nop
 8000ec0:	3730      	adds	r7, #48	@ 0x30
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	2000022c 	.word	0x2000022c
 8000ecc:	04300002 	.word	0x04300002
 8000ed0:	407f0000 	.word	0x407f0000

08000ed4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b088      	sub	sp, #32
 8000ed8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000eda:	f107 0310 	add.w	r3, r7, #16
 8000ede:	2200      	movs	r2, #0
 8000ee0:	601a      	str	r2, [r3, #0]
 8000ee2:	605a      	str	r2, [r3, #4]
 8000ee4:	609a      	str	r2, [r3, #8]
 8000ee6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ee8:	1d3b      	adds	r3, r7, #4
 8000eea:	2200      	movs	r2, #0
 8000eec:	601a      	str	r2, [r3, #0]
 8000eee:	605a      	str	r2, [r3, #4]
 8000ef0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000ef2:	4b20      	ldr	r3, [pc, #128]	@ (8000f74 <MX_TIM1_Init+0xa0>)
 8000ef4:	4a20      	ldr	r2, [pc, #128]	@ (8000f78 <MX_TIM1_Init+0xa4>)
 8000ef6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000ef8:	4b1e      	ldr	r3, [pc, #120]	@ (8000f74 <MX_TIM1_Init+0xa0>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000efe:	4b1d      	ldr	r3, [pc, #116]	@ (8000f74 <MX_TIM1_Init+0xa0>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 60000;
 8000f04:	4b1b      	ldr	r3, [pc, #108]	@ (8000f74 <MX_TIM1_Init+0xa0>)
 8000f06:	f64e 2260 	movw	r2, #60000	@ 0xea60
 8000f0a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f0c:	4b19      	ldr	r3, [pc, #100]	@ (8000f74 <MX_TIM1_Init+0xa0>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000f12:	4b18      	ldr	r3, [pc, #96]	@ (8000f74 <MX_TIM1_Init+0xa0>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f18:	4b16      	ldr	r3, [pc, #88]	@ (8000f74 <MX_TIM1_Init+0xa0>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000f1e:	4815      	ldr	r0, [pc, #84]	@ (8000f74 <MX_TIM1_Init+0xa0>)
 8000f20:	f003 ff96 	bl	8004e50 <HAL_TIM_Base_Init>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d001      	beq.n	8000f2e <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000f2a:	f000 fc7b 	bl	8001824 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f2e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f32:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000f34:	f107 0310 	add.w	r3, r7, #16
 8000f38:	4619      	mov	r1, r3
 8000f3a:	480e      	ldr	r0, [pc, #56]	@ (8000f74 <MX_TIM1_Init+0xa0>)
 8000f3c:	f004 fe80 	bl	8005c40 <HAL_TIM_ConfigClockSource>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d001      	beq.n	8000f4a <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000f46:	f000 fc6d 	bl	8001824 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f52:	2300      	movs	r3, #0
 8000f54:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000f56:	1d3b      	adds	r3, r7, #4
 8000f58:	4619      	mov	r1, r3
 8000f5a:	4806      	ldr	r0, [pc, #24]	@ (8000f74 <MX_TIM1_Init+0xa0>)
 8000f5c:	f005 fe60 	bl	8006c20 <HAL_TIMEx_MasterConfigSynchronization>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d001      	beq.n	8000f6a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000f66:	f000 fc5d 	bl	8001824 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000f6a:	bf00      	nop
 8000f6c:	3720      	adds	r7, #32
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	20000298 	.word	0x20000298
 8000f78:	40012c00 	.word	0x40012c00

08000f7c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b088      	sub	sp, #32
 8000f80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f82:	f107 0310 	add.w	r3, r7, #16
 8000f86:	2200      	movs	r2, #0
 8000f88:	601a      	str	r2, [r3, #0]
 8000f8a:	605a      	str	r2, [r3, #4]
 8000f8c:	609a      	str	r2, [r3, #8]
 8000f8e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f90:	1d3b      	adds	r3, r7, #4
 8000f92:	2200      	movs	r2, #0
 8000f94:	601a      	str	r2, [r3, #0]
 8000f96:	605a      	str	r2, [r3, #4]
 8000f98:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f9a:	4b1e      	ldr	r3, [pc, #120]	@ (8001014 <MX_TIM2_Init+0x98>)
 8000f9c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000fa0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000fa2:	4b1c      	ldr	r3, [pc, #112]	@ (8001014 <MX_TIM2_Init+0x98>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fa8:	4b1a      	ldr	r3, [pc, #104]	@ (8001014 <MX_TIM2_Init+0x98>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000fae:	4b19      	ldr	r3, [pc, #100]	@ (8001014 <MX_TIM2_Init+0x98>)
 8000fb0:	f04f 32ff 	mov.w	r2, #4294967295
 8000fb4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fb6:	4b17      	ldr	r3, [pc, #92]	@ (8001014 <MX_TIM2_Init+0x98>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fbc:	4b15      	ldr	r3, [pc, #84]	@ (8001014 <MX_TIM2_Init+0x98>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000fc2:	4814      	ldr	r0, [pc, #80]	@ (8001014 <MX_TIM2_Init+0x98>)
 8000fc4:	f003 ff44 	bl	8004e50 <HAL_TIM_Base_Init>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d001      	beq.n	8000fd2 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000fce:	f000 fc29 	bl	8001824 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fd2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000fd6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000fd8:	f107 0310 	add.w	r3, r7, #16
 8000fdc:	4619      	mov	r1, r3
 8000fde:	480d      	ldr	r0, [pc, #52]	@ (8001014 <MX_TIM2_Init+0x98>)
 8000fe0:	f004 fe2e 	bl	8005c40 <HAL_TIM_ConfigClockSource>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d001      	beq.n	8000fee <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000fea:	f000 fc1b 	bl	8001824 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ff6:	1d3b      	adds	r3, r7, #4
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	4806      	ldr	r0, [pc, #24]	@ (8001014 <MX_TIM2_Init+0x98>)
 8000ffc:	f005 fe10 	bl	8006c20 <HAL_TIMEx_MasterConfigSynchronization>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001006:	f000 fc0d 	bl	8001824 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800100a:	bf00      	nop
 800100c:	3720      	adds	r7, #32
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	20000364 	.word	0x20000364

08001018 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b08c      	sub	sp, #48	@ 0x30
 800101c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800101e:	f107 030c 	add.w	r3, r7, #12
 8001022:	2224      	movs	r2, #36	@ 0x24
 8001024:	2100      	movs	r1, #0
 8001026:	4618      	mov	r0, r3
 8001028:	f008 fbca 	bl	80097c0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800102c:	463b      	mov	r3, r7
 800102e:	2200      	movs	r2, #0
 8001030:	601a      	str	r2, [r3, #0]
 8001032:	605a      	str	r2, [r3, #4]
 8001034:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001036:	4b21      	ldr	r3, [pc, #132]	@ (80010bc <MX_TIM3_Init+0xa4>)
 8001038:	4a21      	ldr	r2, [pc, #132]	@ (80010c0 <MX_TIM3_Init+0xa8>)
 800103a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800103c:	4b1f      	ldr	r3, [pc, #124]	@ (80010bc <MX_TIM3_Init+0xa4>)
 800103e:	2200      	movs	r2, #0
 8001040:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001042:	4b1e      	ldr	r3, [pc, #120]	@ (80010bc <MX_TIM3_Init+0xa4>)
 8001044:	2200      	movs	r2, #0
 8001046:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 59999;
 8001048:	4b1c      	ldr	r3, [pc, #112]	@ (80010bc <MX_TIM3_Init+0xa4>)
 800104a:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 800104e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001050:	4b1a      	ldr	r3, [pc, #104]	@ (80010bc <MX_TIM3_Init+0xa4>)
 8001052:	2200      	movs	r2, #0
 8001054:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001056:	4b19      	ldr	r3, [pc, #100]	@ (80010bc <MX_TIM3_Init+0xa4>)
 8001058:	2200      	movs	r2, #0
 800105a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800105c:	2303      	movs	r3, #3
 800105e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001060:	2300      	movs	r3, #0
 8001062:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001064:	2301      	movs	r3, #1
 8001066:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001068:	2300      	movs	r3, #0
 800106a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800106c:	2300      	movs	r3, #0
 800106e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001070:	2300      	movs	r3, #0
 8001072:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001074:	2301      	movs	r3, #1
 8001076:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001078:	2300      	movs	r3, #0
 800107a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800107c:	2300      	movs	r3, #0
 800107e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001080:	f107 030c 	add.w	r3, r7, #12
 8001084:	4619      	mov	r1, r3
 8001086:	480d      	ldr	r0, [pc, #52]	@ (80010bc <MX_TIM3_Init+0xa4>)
 8001088:	f004 f990 	bl	80053ac <HAL_TIM_Encoder_Init>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d001      	beq.n	8001096 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8001092:	f000 fbc7 	bl	8001824 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001096:	2300      	movs	r3, #0
 8001098:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800109a:	2300      	movs	r3, #0
 800109c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800109e:	463b      	mov	r3, r7
 80010a0:	4619      	mov	r1, r3
 80010a2:	4806      	ldr	r0, [pc, #24]	@ (80010bc <MX_TIM3_Init+0xa4>)
 80010a4:	f005 fdbc 	bl	8006c20 <HAL_TIMEx_MasterConfigSynchronization>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d001      	beq.n	80010b2 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 80010ae:	f000 fbb9 	bl	8001824 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80010b2:	bf00      	nop
 80010b4:	3730      	adds	r7, #48	@ 0x30
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	20000430 	.word	0x20000430
 80010c0:	40000400 	.word	0x40000400

080010c4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b08c      	sub	sp, #48	@ 0x30
 80010c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80010ca:	f107 030c 	add.w	r3, r7, #12
 80010ce:	2224      	movs	r2, #36	@ 0x24
 80010d0:	2100      	movs	r1, #0
 80010d2:	4618      	mov	r0, r3
 80010d4:	f008 fb74 	bl	80097c0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010d8:	463b      	mov	r3, r7
 80010da:	2200      	movs	r2, #0
 80010dc:	601a      	str	r2, [r3, #0]
 80010de:	605a      	str	r2, [r3, #4]
 80010e0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80010e2:	4b21      	ldr	r3, [pc, #132]	@ (8001168 <MX_TIM4_Init+0xa4>)
 80010e4:	4a21      	ldr	r2, [pc, #132]	@ (800116c <MX_TIM4_Init+0xa8>)
 80010e6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80010e8:	4b1f      	ldr	r3, [pc, #124]	@ (8001168 <MX_TIM4_Init+0xa4>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010ee:	4b1e      	ldr	r3, [pc, #120]	@ (8001168 <MX_TIM4_Init+0xa4>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 59999;
 80010f4:	4b1c      	ldr	r3, [pc, #112]	@ (8001168 <MX_TIM4_Init+0xa4>)
 80010f6:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 80010fa:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010fc:	4b1a      	ldr	r3, [pc, #104]	@ (8001168 <MX_TIM4_Init+0xa4>)
 80010fe:	2200      	movs	r2, #0
 8001100:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001102:	4b19      	ldr	r3, [pc, #100]	@ (8001168 <MX_TIM4_Init+0xa4>)
 8001104:	2200      	movs	r2, #0
 8001106:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001108:	2301      	movs	r3, #1
 800110a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800110c:	2300      	movs	r3, #0
 800110e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001110:	2301      	movs	r3, #1
 8001112:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001114:	2300      	movs	r3, #0
 8001116:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001118:	2300      	movs	r3, #0
 800111a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800111c:	2300      	movs	r3, #0
 800111e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001120:	2301      	movs	r3, #1
 8001122:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001124:	2300      	movs	r3, #0
 8001126:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001128:	2300      	movs	r3, #0
 800112a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800112c:	f107 030c 	add.w	r3, r7, #12
 8001130:	4619      	mov	r1, r3
 8001132:	480d      	ldr	r0, [pc, #52]	@ (8001168 <MX_TIM4_Init+0xa4>)
 8001134:	f004 f93a 	bl	80053ac <HAL_TIM_Encoder_Init>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d001      	beq.n	8001142 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 800113e:	f000 fb71 	bl	8001824 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001142:	2300      	movs	r3, #0
 8001144:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001146:	2300      	movs	r3, #0
 8001148:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800114a:	463b      	mov	r3, r7
 800114c:	4619      	mov	r1, r3
 800114e:	4806      	ldr	r0, [pc, #24]	@ (8001168 <MX_TIM4_Init+0xa4>)
 8001150:	f005 fd66 	bl	8006c20 <HAL_TIMEx_MasterConfigSynchronization>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d001      	beq.n	800115e <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 800115a:	f000 fb63 	bl	8001824 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800115e:	bf00      	nop
 8001160:	3730      	adds	r7, #48	@ 0x30
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	200004fc 	.word	0x200004fc
 800116c:	40000800 	.word	0x40000800

08001170 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b09c      	sub	sp, #112	@ 0x70
 8001174:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001176:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800117a:	2200      	movs	r2, #0
 800117c:	601a      	str	r2, [r3, #0]
 800117e:	605a      	str	r2, [r3, #4]
 8001180:	609a      	str	r2, [r3, #8]
 8001182:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001184:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001188:	2200      	movs	r2, #0
 800118a:	601a      	str	r2, [r3, #0]
 800118c:	605a      	str	r2, [r3, #4]
 800118e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001190:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001194:	2200      	movs	r2, #0
 8001196:	601a      	str	r2, [r3, #0]
 8001198:	605a      	str	r2, [r3, #4]
 800119a:	609a      	str	r2, [r3, #8]
 800119c:	60da      	str	r2, [r3, #12]
 800119e:	611a      	str	r2, [r3, #16]
 80011a0:	615a      	str	r2, [r3, #20]
 80011a2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80011a4:	1d3b      	adds	r3, r7, #4
 80011a6:	2234      	movs	r2, #52	@ 0x34
 80011a8:	2100      	movs	r1, #0
 80011aa:	4618      	mov	r0, r3
 80011ac:	f008 fb08 	bl	80097c0 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80011b0:	4b45      	ldr	r3, [pc, #276]	@ (80012c8 <MX_TIM8_Init+0x158>)
 80011b2:	4a46      	ldr	r2, [pc, #280]	@ (80012cc <MX_TIM8_Init+0x15c>)
 80011b4:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80011b6:	4b44      	ldr	r3, [pc, #272]	@ (80012c8 <MX_TIM8_Init+0x158>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011bc:	4b42      	ldr	r3, [pc, #264]	@ (80012c8 <MX_TIM8_Init+0x158>)
 80011be:	2200      	movs	r2, #0
 80011c0:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80011c2:	4b41      	ldr	r3, [pc, #260]	@ (80012c8 <MX_TIM8_Init+0x158>)
 80011c4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80011c8:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011ca:	4b3f      	ldr	r3, [pc, #252]	@ (80012c8 <MX_TIM8_Init+0x158>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80011d0:	4b3d      	ldr	r3, [pc, #244]	@ (80012c8 <MX_TIM8_Init+0x158>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011d6:	4b3c      	ldr	r3, [pc, #240]	@ (80012c8 <MX_TIM8_Init+0x158>)
 80011d8:	2200      	movs	r2, #0
 80011da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80011dc:	483a      	ldr	r0, [pc, #232]	@ (80012c8 <MX_TIM8_Init+0x158>)
 80011de:	f003 fe37 	bl	8004e50 <HAL_TIM_Base_Init>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d001      	beq.n	80011ec <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 80011e8:	f000 fb1c 	bl	8001824 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011ec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011f0:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80011f2:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80011f6:	4619      	mov	r1, r3
 80011f8:	4833      	ldr	r0, [pc, #204]	@ (80012c8 <MX_TIM8_Init+0x158>)
 80011fa:	f004 fd21 	bl	8005c40 <HAL_TIM_ConfigClockSource>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d001      	beq.n	8001208 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 8001204:	f000 fb0e 	bl	8001824 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001208:	482f      	ldr	r0, [pc, #188]	@ (80012c8 <MX_TIM8_Init+0x158>)
 800120a:	f003 ff6b 	bl	80050e4 <HAL_TIM_PWM_Init>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d001      	beq.n	8001218 <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 8001214:	f000 fb06 	bl	8001824 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001218:	2300      	movs	r3, #0
 800121a:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800121c:	2300      	movs	r3, #0
 800121e:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001220:	2300      	movs	r3, #0
 8001222:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001224:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001228:	4619      	mov	r1, r3
 800122a:	4827      	ldr	r0, [pc, #156]	@ (80012c8 <MX_TIM8_Init+0x158>)
 800122c:	f005 fcf8 	bl	8006c20 <HAL_TIMEx_MasterConfigSynchronization>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d001      	beq.n	800123a <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 8001236:	f000 faf5 	bl	8001824 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800123a:	2360      	movs	r3, #96	@ 0x60
 800123c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 800123e:	2300      	movs	r3, #0
 8001240:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001242:	2300      	movs	r3, #0
 8001244:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001246:	2300      	movs	r3, #0
 8001248:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800124a:	2300      	movs	r3, #0
 800124c:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800124e:	2300      	movs	r3, #0
 8001250:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001252:	2300      	movs	r3, #0
 8001254:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001256:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800125a:	220c      	movs	r2, #12
 800125c:	4619      	mov	r1, r3
 800125e:	481a      	ldr	r0, [pc, #104]	@ (80012c8 <MX_TIM8_Init+0x158>)
 8001260:	f004 fbda 	bl	8005a18 <HAL_TIM_PWM_ConfigChannel>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d001      	beq.n	800126e <MX_TIM8_Init+0xfe>
  {
    Error_Handler();
 800126a:	f000 fadb 	bl	8001824 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800126e:	2300      	movs	r3, #0
 8001270:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001272:	2300      	movs	r3, #0
 8001274:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001276:	2300      	movs	r3, #0
 8001278:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800127a:	2300      	movs	r3, #0
 800127c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800127e:	2300      	movs	r3, #0
 8001280:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001282:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001286:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001288:	2300      	movs	r3, #0
 800128a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800128c:	2300      	movs	r3, #0
 800128e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001290:	2300      	movs	r3, #0
 8001292:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001294:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001298:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800129a:	2300      	movs	r3, #0
 800129c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800129e:	2300      	movs	r3, #0
 80012a0:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80012a2:	2300      	movs	r3, #0
 80012a4:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80012a6:	1d3b      	adds	r3, r7, #4
 80012a8:	4619      	mov	r1, r3
 80012aa:	4807      	ldr	r0, [pc, #28]	@ (80012c8 <MX_TIM8_Init+0x158>)
 80012ac:	f005 fd4e 	bl	8006d4c <HAL_TIMEx_ConfigBreakDeadTime>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d001      	beq.n	80012ba <MX_TIM8_Init+0x14a>
  {
    Error_Handler();
 80012b6:	f000 fab5 	bl	8001824 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80012ba:	4803      	ldr	r0, [pc, #12]	@ (80012c8 <MX_TIM8_Init+0x158>)
 80012bc:	f000 fc64 	bl	8001b88 <HAL_TIM_MspPostInit>

}
 80012c0:	bf00      	nop
 80012c2:	3770      	adds	r7, #112	@ 0x70
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	200005c8 	.word	0x200005c8
 80012cc:	40013400 	.word	0x40013400

080012d0 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b094      	sub	sp, #80	@ 0x50
 80012d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80012d6:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80012da:	2200      	movs	r2, #0
 80012dc:	601a      	str	r2, [r3, #0]
 80012de:	605a      	str	r2, [r3, #4]
 80012e0:	609a      	str	r2, [r3, #8]
 80012e2:	60da      	str	r2, [r3, #12]
 80012e4:	611a      	str	r2, [r3, #16]
 80012e6:	615a      	str	r2, [r3, #20]
 80012e8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80012ea:	463b      	mov	r3, r7
 80012ec:	2234      	movs	r2, #52	@ 0x34
 80012ee:	2100      	movs	r1, #0
 80012f0:	4618      	mov	r0, r3
 80012f2:	f008 fa65 	bl	80097c0 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80012f6:	4b34      	ldr	r3, [pc, #208]	@ (80013c8 <MX_TIM16_Init+0xf8>)
 80012f8:	4a34      	ldr	r2, [pc, #208]	@ (80013cc <MX_TIM16_Init+0xfc>)
 80012fa:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 169;
 80012fc:	4b32      	ldr	r3, [pc, #200]	@ (80013c8 <MX_TIM16_Init+0xf8>)
 80012fe:	22a9      	movs	r2, #169	@ 0xa9
 8001300:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001302:	4b31      	ldr	r3, [pc, #196]	@ (80013c8 <MX_TIM16_Init+0xf8>)
 8001304:	2200      	movs	r2, #0
 8001306:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 2005;
 8001308:	4b2f      	ldr	r3, [pc, #188]	@ (80013c8 <MX_TIM16_Init+0xf8>)
 800130a:	f240 72d5 	movw	r2, #2005	@ 0x7d5
 800130e:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001310:	4b2d      	ldr	r3, [pc, #180]	@ (80013c8 <MX_TIM16_Init+0xf8>)
 8001312:	2200      	movs	r2, #0
 8001314:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001316:	4b2c      	ldr	r3, [pc, #176]	@ (80013c8 <MX_TIM16_Init+0xf8>)
 8001318:	2200      	movs	r2, #0
 800131a:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800131c:	4b2a      	ldr	r3, [pc, #168]	@ (80013c8 <MX_TIM16_Init+0xf8>)
 800131e:	2200      	movs	r2, #0
 8001320:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001322:	4829      	ldr	r0, [pc, #164]	@ (80013c8 <MX_TIM16_Init+0xf8>)
 8001324:	f003 fd94 	bl	8004e50 <HAL_TIM_Base_Init>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d001      	beq.n	8001332 <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 800132e:	f000 fa79 	bl	8001824 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim16) != HAL_OK)
 8001332:	4825      	ldr	r0, [pc, #148]	@ (80013c8 <MX_TIM16_Init+0xf8>)
 8001334:	f003 fe68 	bl	8005008 <HAL_TIM_OC_Init>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 800133e:	f000 fa71 	bl	8001824 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim16, TIM_OPMODE_SINGLE) != HAL_OK)
 8001342:	2108      	movs	r1, #8
 8001344:	4820      	ldr	r0, [pc, #128]	@ (80013c8 <MX_TIM16_Init+0xf8>)
 8001346:	f003 ff3b 	bl	80051c0 <HAL_TIM_OnePulse_Init>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d001      	beq.n	8001354 <MX_TIM16_Init+0x84>
  {
    Error_Handler();
 8001350:	f000 fa68 	bl	8001824 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_ACTIVE;
 8001354:	2310      	movs	r3, #16
 8001356:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.Pulse = 1433;
 8001358:	f240 5399 	movw	r3, #1433	@ 0x599
 800135c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800135e:	2300      	movs	r3, #0
 8001360:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001362:	2300      	movs	r3, #0
 8001364:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001366:	2300      	movs	r3, #0
 8001368:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800136a:	2300      	movs	r3, #0
 800136c:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800136e:	2300      	movs	r3, #0
 8001370:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_TIM_OC_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001372:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001376:	2200      	movs	r2, #0
 8001378:	4619      	mov	r1, r3
 800137a:	4813      	ldr	r0, [pc, #76]	@ (80013c8 <MX_TIM16_Init+0xf8>)
 800137c:	f004 fad2 	bl	8005924 <HAL_TIM_OC_ConfigChannel>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d001      	beq.n	800138a <MX_TIM16_Init+0xba>
  {
    Error_Handler();
 8001386:	f000 fa4d 	bl	8001824 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800138a:	2300      	movs	r3, #0
 800138c:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800138e:	2300      	movs	r3, #0
 8001390:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001392:	2300      	movs	r3, #0
 8001394:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001396:	2300      	movs	r3, #0
 8001398:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800139a:	2300      	movs	r3, #0
 800139c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800139e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80013a2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80013a4:	2300      	movs	r3, #0
 80013a6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80013a8:	2300      	movs	r3, #0
 80013aa:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 80013ac:	463b      	mov	r3, r7
 80013ae:	4619      	mov	r1, r3
 80013b0:	4805      	ldr	r0, [pc, #20]	@ (80013c8 <MX_TIM16_Init+0xf8>)
 80013b2:	f005 fccb 	bl	8006d4c <HAL_TIMEx_ConfigBreakDeadTime>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d001      	beq.n	80013c0 <MX_TIM16_Init+0xf0>
  {
    Error_Handler();
 80013bc:	f000 fa32 	bl	8001824 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80013c0:	bf00      	nop
 80013c2:	3750      	adds	r7, #80	@ 0x50
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	20000694 	.word	0x20000694
 80013cc:	40014400 	.word	0x40014400

080013d0 <MX_TIM20_Init>:
  * @brief TIM20 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM20_Init(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b09c      	sub	sp, #112	@ 0x70
 80013d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM20_Init 0 */

  /* USER CODE END TIM20_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013d6:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80013da:	2200      	movs	r2, #0
 80013dc:	601a      	str	r2, [r3, #0]
 80013de:	605a      	str	r2, [r3, #4]
 80013e0:	609a      	str	r2, [r3, #8]
 80013e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013e4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80013e8:	2200      	movs	r2, #0
 80013ea:	601a      	str	r2, [r3, #0]
 80013ec:	605a      	str	r2, [r3, #4]
 80013ee:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013f0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80013f4:	2200      	movs	r2, #0
 80013f6:	601a      	str	r2, [r3, #0]
 80013f8:	605a      	str	r2, [r3, #4]
 80013fa:	609a      	str	r2, [r3, #8]
 80013fc:	60da      	str	r2, [r3, #12]
 80013fe:	611a      	str	r2, [r3, #16]
 8001400:	615a      	str	r2, [r3, #20]
 8001402:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001404:	1d3b      	adds	r3, r7, #4
 8001406:	2234      	movs	r2, #52	@ 0x34
 8001408:	2100      	movs	r1, #0
 800140a:	4618      	mov	r0, r3
 800140c:	f008 f9d8 	bl	80097c0 <memset>

  /* USER CODE BEGIN TIM20_Init 1 */

  /* USER CODE END TIM20_Init 1 */
  htim20.Instance = TIM20;
 8001410:	4b4b      	ldr	r3, [pc, #300]	@ (8001540 <MX_TIM20_Init+0x170>)
 8001412:	4a4c      	ldr	r2, [pc, #304]	@ (8001544 <MX_TIM20_Init+0x174>)
 8001414:	601a      	str	r2, [r3, #0]
  htim20.Init.Prescaler = 0;
 8001416:	4b4a      	ldr	r3, [pc, #296]	@ (8001540 <MX_TIM20_Init+0x170>)
 8001418:	2200      	movs	r2, #0
 800141a:	605a      	str	r2, [r3, #4]
  htim20.Init.CounterMode = TIM_COUNTERMODE_UP;
 800141c:	4b48      	ldr	r3, [pc, #288]	@ (8001540 <MX_TIM20_Init+0x170>)
 800141e:	2200      	movs	r2, #0
 8001420:	609a      	str	r2, [r3, #8]
  htim20.Init.Period = 65535;
 8001422:	4b47      	ldr	r3, [pc, #284]	@ (8001540 <MX_TIM20_Init+0x170>)
 8001424:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001428:	60da      	str	r2, [r3, #12]
  htim20.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800142a:	4b45      	ldr	r3, [pc, #276]	@ (8001540 <MX_TIM20_Init+0x170>)
 800142c:	2200      	movs	r2, #0
 800142e:	611a      	str	r2, [r3, #16]
  htim20.Init.RepetitionCounter = 0;
 8001430:	4b43      	ldr	r3, [pc, #268]	@ (8001540 <MX_TIM20_Init+0x170>)
 8001432:	2200      	movs	r2, #0
 8001434:	615a      	str	r2, [r3, #20]
  htim20.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001436:	4b42      	ldr	r3, [pc, #264]	@ (8001540 <MX_TIM20_Init+0x170>)
 8001438:	2200      	movs	r2, #0
 800143a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim20) != HAL_OK)
 800143c:	4840      	ldr	r0, [pc, #256]	@ (8001540 <MX_TIM20_Init+0x170>)
 800143e:	f003 fd07 	bl	8004e50 <HAL_TIM_Base_Init>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d001      	beq.n	800144c <MX_TIM20_Init+0x7c>
  {
    Error_Handler();
 8001448:	f000 f9ec 	bl	8001824 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800144c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001450:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim20, &sClockSourceConfig) != HAL_OK)
 8001452:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001456:	4619      	mov	r1, r3
 8001458:	4839      	ldr	r0, [pc, #228]	@ (8001540 <MX_TIM20_Init+0x170>)
 800145a:	f004 fbf1 	bl	8005c40 <HAL_TIM_ConfigClockSource>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d001      	beq.n	8001468 <MX_TIM20_Init+0x98>
  {
    Error_Handler();
 8001464:	f000 f9de 	bl	8001824 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim20) != HAL_OK)
 8001468:	4835      	ldr	r0, [pc, #212]	@ (8001540 <MX_TIM20_Init+0x170>)
 800146a:	f003 fe3b 	bl	80050e4 <HAL_TIM_PWM_Init>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d001      	beq.n	8001478 <MX_TIM20_Init+0xa8>
  {
    Error_Handler();
 8001474:	f000 f9d6 	bl	8001824 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001478:	2300      	movs	r3, #0
 800147a:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800147c:	2300      	movs	r3, #0
 800147e:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001480:	2300      	movs	r3, #0
 8001482:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim20, &sMasterConfig) != HAL_OK)
 8001484:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001488:	4619      	mov	r1, r3
 800148a:	482d      	ldr	r0, [pc, #180]	@ (8001540 <MX_TIM20_Init+0x170>)
 800148c:	f005 fbc8 	bl	8006c20 <HAL_TIMEx_MasterConfigSynchronization>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d001      	beq.n	800149a <MX_TIM20_Init+0xca>
  {
    Error_Handler();
 8001496:	f000 f9c5 	bl	8001824 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800149a:	2360      	movs	r3, #96	@ 0x60
 800149c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 800149e:	2300      	movs	r3, #0
 80014a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014a2:	2300      	movs	r3, #0
 80014a4:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80014a6:	2300      	movs	r3, #0
 80014a8:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014aa:	2300      	movs	r3, #0
 80014ac:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80014ae:	2300      	movs	r3, #0
 80014b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80014b2:	2300      	movs	r3, #0
 80014b4:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim20, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014b6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80014ba:	2200      	movs	r2, #0
 80014bc:	4619      	mov	r1, r3
 80014be:	4820      	ldr	r0, [pc, #128]	@ (8001540 <MX_TIM20_Init+0x170>)
 80014c0:	f004 faaa 	bl	8005a18 <HAL_TIM_PWM_ConfigChannel>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d001      	beq.n	80014ce <MX_TIM20_Init+0xfe>
  {
    Error_Handler();
 80014ca:	f000 f9ab 	bl	8001824 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim20, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80014ce:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80014d2:	2208      	movs	r2, #8
 80014d4:	4619      	mov	r1, r3
 80014d6:	481a      	ldr	r0, [pc, #104]	@ (8001540 <MX_TIM20_Init+0x170>)
 80014d8:	f004 fa9e 	bl	8005a18 <HAL_TIM_PWM_ConfigChannel>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d001      	beq.n	80014e6 <MX_TIM20_Init+0x116>
  {
    Error_Handler();
 80014e2:	f000 f99f 	bl	8001824 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80014e6:	2300      	movs	r3, #0
 80014e8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80014ea:	2300      	movs	r3, #0
 80014ec:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80014ee:	2300      	movs	r3, #0
 80014f0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80014f2:	2300      	movs	r3, #0
 80014f4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80014f6:	2300      	movs	r3, #0
 80014f8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80014fa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80014fe:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001500:	2300      	movs	r3, #0
 8001502:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001504:	2300      	movs	r3, #0
 8001506:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001508:	2300      	movs	r3, #0
 800150a:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800150c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001510:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001512:	2300      	movs	r3, #0
 8001514:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001516:	2300      	movs	r3, #0
 8001518:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800151a:	2300      	movs	r3, #0
 800151c:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim20, &sBreakDeadTimeConfig) != HAL_OK)
 800151e:	1d3b      	adds	r3, r7, #4
 8001520:	4619      	mov	r1, r3
 8001522:	4807      	ldr	r0, [pc, #28]	@ (8001540 <MX_TIM20_Init+0x170>)
 8001524:	f005 fc12 	bl	8006d4c <HAL_TIMEx_ConfigBreakDeadTime>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d001      	beq.n	8001532 <MX_TIM20_Init+0x162>
  {
    Error_Handler();
 800152e:	f000 f979 	bl	8001824 <Error_Handler>
  }
  /* USER CODE BEGIN TIM20_Init 2 */

  /* USER CODE END TIM20_Init 2 */
  HAL_TIM_MspPostInit(&htim20);
 8001532:	4803      	ldr	r0, [pc, #12]	@ (8001540 <MX_TIM20_Init+0x170>)
 8001534:	f000 fb28 	bl	8001b88 <HAL_TIM_MspPostInit>

}
 8001538:	bf00      	nop
 800153a:	3770      	adds	r7, #112	@ 0x70
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}
 8001540:	20000760 	.word	0x20000760
 8001544:	40015000 	.word	0x40015000

08001548 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800154c:	4b23      	ldr	r3, [pc, #140]	@ (80015dc <MX_USART2_UART_Init+0x94>)
 800154e:	4a24      	ldr	r2, [pc, #144]	@ (80015e0 <MX_USART2_UART_Init+0x98>)
 8001550:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 8001552:	4b22      	ldr	r3, [pc, #136]	@ (80015dc <MX_USART2_UART_Init+0x94>)
 8001554:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 8001558:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 800155a:	4b20      	ldr	r3, [pc, #128]	@ (80015dc <MX_USART2_UART_Init+0x94>)
 800155c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001560:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001562:	4b1e      	ldr	r3, [pc, #120]	@ (80015dc <MX_USART2_UART_Init+0x94>)
 8001564:	2200      	movs	r2, #0
 8001566:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8001568:	4b1c      	ldr	r3, [pc, #112]	@ (80015dc <MX_USART2_UART_Init+0x94>)
 800156a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800156e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001570:	4b1a      	ldr	r3, [pc, #104]	@ (80015dc <MX_USART2_UART_Init+0x94>)
 8001572:	220c      	movs	r2, #12
 8001574:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001576:	4b19      	ldr	r3, [pc, #100]	@ (80015dc <MX_USART2_UART_Init+0x94>)
 8001578:	2200      	movs	r2, #0
 800157a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800157c:	4b17      	ldr	r3, [pc, #92]	@ (80015dc <MX_USART2_UART_Init+0x94>)
 800157e:	2200      	movs	r2, #0
 8001580:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001582:	4b16      	ldr	r3, [pc, #88]	@ (80015dc <MX_USART2_UART_Init+0x94>)
 8001584:	2200      	movs	r2, #0
 8001586:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001588:	4b14      	ldr	r3, [pc, #80]	@ (80015dc <MX_USART2_UART_Init+0x94>)
 800158a:	2200      	movs	r2, #0
 800158c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800158e:	4b13      	ldr	r3, [pc, #76]	@ (80015dc <MX_USART2_UART_Init+0x94>)
 8001590:	2200      	movs	r2, #0
 8001592:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001594:	4811      	ldr	r0, [pc, #68]	@ (80015dc <MX_USART2_UART_Init+0x94>)
 8001596:	f005 fcbd 	bl	8006f14 <HAL_UART_Init>
 800159a:	4603      	mov	r3, r0
 800159c:	2b00      	cmp	r3, #0
 800159e:	d001      	beq.n	80015a4 <MX_USART2_UART_Init+0x5c>
  {
    Error_Handler();
 80015a0:	f000 f940 	bl	8001824 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015a4:	2100      	movs	r1, #0
 80015a6:	480d      	ldr	r0, [pc, #52]	@ (80015dc <MX_USART2_UART_Init+0x94>)
 80015a8:	f008 f83f 	bl	800962a <HAL_UARTEx_SetTxFifoThreshold>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d001      	beq.n	80015b6 <MX_USART2_UART_Init+0x6e>
  {
    Error_Handler();
 80015b2:	f000 f937 	bl	8001824 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015b6:	2100      	movs	r1, #0
 80015b8:	4808      	ldr	r0, [pc, #32]	@ (80015dc <MX_USART2_UART_Init+0x94>)
 80015ba:	f008 f874 	bl	80096a6 <HAL_UARTEx_SetRxFifoThreshold>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d001      	beq.n	80015c8 <MX_USART2_UART_Init+0x80>
  {
    Error_Handler();
 80015c4:	f000 f92e 	bl	8001824 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80015c8:	4804      	ldr	r0, [pc, #16]	@ (80015dc <MX_USART2_UART_Init+0x94>)
 80015ca:	f007 fff5 	bl	80095b8 <HAL_UARTEx_DisableFifoMode>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d001      	beq.n	80015d8 <MX_USART2_UART_Init+0x90>
  {
    Error_Handler();
 80015d4:	f000 f926 	bl	8001824 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80015d8:	bf00      	nop
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	2000082c 	.word	0x2000082c
 80015e0:	40004400 	.word	0x40004400

080015e4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b082      	sub	sp, #8
 80015e8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80015ea:	4b12      	ldr	r3, [pc, #72]	@ (8001634 <MX_DMA_Init+0x50>)
 80015ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80015ee:	4a11      	ldr	r2, [pc, #68]	@ (8001634 <MX_DMA_Init+0x50>)
 80015f0:	f043 0304 	orr.w	r3, r3, #4
 80015f4:	6493      	str	r3, [r2, #72]	@ 0x48
 80015f6:	4b0f      	ldr	r3, [pc, #60]	@ (8001634 <MX_DMA_Init+0x50>)
 80015f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80015fa:	f003 0304 	and.w	r3, r3, #4
 80015fe:	607b      	str	r3, [r7, #4]
 8001600:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001602:	4b0c      	ldr	r3, [pc, #48]	@ (8001634 <MX_DMA_Init+0x50>)
 8001604:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001606:	4a0b      	ldr	r2, [pc, #44]	@ (8001634 <MX_DMA_Init+0x50>)
 8001608:	f043 0301 	orr.w	r3, r3, #1
 800160c:	6493      	str	r3, [r2, #72]	@ 0x48
 800160e:	4b09      	ldr	r3, [pc, #36]	@ (8001634 <MX_DMA_Init+0x50>)
 8001610:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001612:	f003 0301 	and.w	r3, r3, #1
 8001616:	603b      	str	r3, [r7, #0]
 8001618:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800161a:	2200      	movs	r2, #0
 800161c:	2100      	movs	r1, #0
 800161e:	200b      	movs	r0, #11
 8001620:	f001 fec1 	bl	80033a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001624:	200b      	movs	r0, #11
 8001626:	f001 fed8 	bl	80033da <HAL_NVIC_EnableIRQ>

}
 800162a:	bf00      	nop
 800162c:	3708      	adds	r7, #8
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	40021000 	.word	0x40021000

08001638 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b08a      	sub	sp, #40	@ 0x28
 800163c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800163e:	f107 0314 	add.w	r3, r7, #20
 8001642:	2200      	movs	r2, #0
 8001644:	601a      	str	r2, [r3, #0]
 8001646:	605a      	str	r2, [r3, #4]
 8001648:	609a      	str	r2, [r3, #8]
 800164a:	60da      	str	r2, [r3, #12]
 800164c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800164e:	4b60      	ldr	r3, [pc, #384]	@ (80017d0 <MX_GPIO_Init+0x198>)
 8001650:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001652:	4a5f      	ldr	r2, [pc, #380]	@ (80017d0 <MX_GPIO_Init+0x198>)
 8001654:	f043 0304 	orr.w	r3, r3, #4
 8001658:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800165a:	4b5d      	ldr	r3, [pc, #372]	@ (80017d0 <MX_GPIO_Init+0x198>)
 800165c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800165e:	f003 0304 	and.w	r3, r3, #4
 8001662:	613b      	str	r3, [r7, #16]
 8001664:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001666:	4b5a      	ldr	r3, [pc, #360]	@ (80017d0 <MX_GPIO_Init+0x198>)
 8001668:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800166a:	4a59      	ldr	r2, [pc, #356]	@ (80017d0 <MX_GPIO_Init+0x198>)
 800166c:	f043 0320 	orr.w	r3, r3, #32
 8001670:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001672:	4b57      	ldr	r3, [pc, #348]	@ (80017d0 <MX_GPIO_Init+0x198>)
 8001674:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001676:	f003 0320 	and.w	r3, r3, #32
 800167a:	60fb      	str	r3, [r7, #12]
 800167c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800167e:	4b54      	ldr	r3, [pc, #336]	@ (80017d0 <MX_GPIO_Init+0x198>)
 8001680:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001682:	4a53      	ldr	r2, [pc, #332]	@ (80017d0 <MX_GPIO_Init+0x198>)
 8001684:	f043 0301 	orr.w	r3, r3, #1
 8001688:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800168a:	4b51      	ldr	r3, [pc, #324]	@ (80017d0 <MX_GPIO_Init+0x198>)
 800168c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800168e:	f003 0301 	and.w	r3, r3, #1
 8001692:	60bb      	str	r3, [r7, #8]
 8001694:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001696:	4b4e      	ldr	r3, [pc, #312]	@ (80017d0 <MX_GPIO_Init+0x198>)
 8001698:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800169a:	4a4d      	ldr	r2, [pc, #308]	@ (80017d0 <MX_GPIO_Init+0x198>)
 800169c:	f043 0302 	orr.w	r3, r3, #2
 80016a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016a2:	4b4b      	ldr	r3, [pc, #300]	@ (80017d0 <MX_GPIO_Init+0x198>)
 80016a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016a6:	f003 0302 	and.w	r3, r3, #2
 80016aa:	607b      	str	r3, [r7, #4]
 80016ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DIR_MD20A_24V_Pin|DIR_MD20A_18V_Pin, GPIO_PIN_RESET);
 80016ae:	2200      	movs	r2, #0
 80016b0:	f241 0102 	movw	r1, #4098	@ 0x1002
 80016b4:	4847      	ldr	r0, [pc, #284]	@ (80017d4 <MX_GPIO_Init+0x19c>)
 80016b6:	f002 fb6b 	bl	8003d90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80016ba:	2320      	movs	r3, #32
 80016bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016be:	2302      	movs	r3, #2
 80016c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c2:	2300      	movs	r3, #0
 80016c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016c6:	2300      	movs	r3, #0
 80016c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80016ca:	2305      	movs	r3, #5
 80016cc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016ce:	f107 0314 	add.w	r3, r7, #20
 80016d2:	4619      	mov	r1, r3
 80016d4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80016d8:	f002 f9d8 	bl	8003a8c <HAL_GPIO_Init>

  /*Configure GPIO pins : DIR_MD20A_24V_Pin DIR_MD20A_18V_Pin */
  GPIO_InitStruct.Pin = DIR_MD20A_24V_Pin|DIR_MD20A_18V_Pin;
 80016dc:	f241 0302 	movw	r3, #4098	@ 0x1002
 80016e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016e2:	2301      	movs	r3, #1
 80016e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e6:	2300      	movs	r3, #0
 80016e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ea:	2300      	movs	r3, #0
 80016ec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016ee:	f107 0314 	add.w	r3, r7, #20
 80016f2:	4619      	mov	r1, r3
 80016f4:	4837      	ldr	r0, [pc, #220]	@ (80017d4 <MX_GPIO_Init+0x19c>)
 80016f6:	f002 f9c9 	bl	8003a8c <HAL_GPIO_Init>

  /*Configure GPIO pins : Limit_Switch_pen_2_Pin Proximity_Sensor_Pin Limit_Switch_Prismatic1_Pin Limit_Switch_pen_1_Pin */
  GPIO_InitStruct.Pin = Limit_Switch_pen_2_Pin|Proximity_Sensor_Pin|Limit_Switch_Prismatic1_Pin|Limit_Switch_pen_1_Pin;
 80016fa:	f44f 43cc 	mov.w	r3, #26112	@ 0x6600
 80016fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001700:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001704:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001706:	2300      	movs	r3, #0
 8001708:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800170a:	f107 0314 	add.w	r3, r7, #20
 800170e:	4619      	mov	r1, r3
 8001710:	4830      	ldr	r0, [pc, #192]	@ (80017d4 <MX_GPIO_Init+0x19c>)
 8001712:	f002 f9bb 	bl	8003a8c <HAL_GPIO_Init>

  /*Configure GPIO pin : Limit_Switch_Prismatic2_Pin */
  GPIO_InitStruct.Pin = Limit_Switch_Prismatic2_Pin;
 8001716:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800171a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800171c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001720:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001722:	2300      	movs	r3, #0
 8001724:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Limit_Switch_Prismatic2_GPIO_Port, &GPIO_InitStruct);
 8001726:	f107 0314 	add.w	r3, r7, #20
 800172a:	4619      	mov	r1, r3
 800172c:	4829      	ldr	r0, [pc, #164]	@ (80017d4 <MX_GPIO_Init+0x19c>)
 800172e:	f002 f9ad 	bl	8003a8c <HAL_GPIO_Init>

  /*Configure GPIO pin : Proximity_sensor_Pin */
  GPIO_InitStruct.Pin = Proximity_sensor_Pin;
 8001732:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001736:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001738:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800173c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800173e:	2300      	movs	r3, #0
 8001740:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Proximity_sensor_GPIO_Port, &GPIO_InitStruct);
 8001742:	f107 0314 	add.w	r3, r7, #20
 8001746:	4619      	mov	r1, r3
 8001748:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800174c:	f002 f99e 	bl	8003a8c <HAL_GPIO_Init>

  /*Configure GPIO pin : PS2_Joy_stick_Attention_Pin */
  GPIO_InitStruct.Pin = PS2_Joy_stick_Attention_Pin;
 8001750:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001754:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001756:	2300      	movs	r3, #0
 8001758:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800175a:	2300      	movs	r3, #0
 800175c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PS2_Joy_stick_Attention_GPIO_Port, &GPIO_InitStruct);
 800175e:	f107 0314 	add.w	r3, r7, #20
 8001762:	4619      	mov	r1, r3
 8001764:	481c      	ldr	r0, [pc, #112]	@ (80017d8 <MX_GPIO_Init+0x1a0>)
 8001766:	f002 f991 	bl	8003a8c <HAL_GPIO_Init>

  /*Configure GPIO pin : Emergency_Pin */
  GPIO_InitStruct.Pin = Emergency_Pin;
 800176a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800176e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001770:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001774:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001776:	2300      	movs	r3, #0
 8001778:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Emergency_GPIO_Port, &GPIO_InitStruct);
 800177a:	f107 0314 	add.w	r3, r7, #20
 800177e:	4619      	mov	r1, r3
 8001780:	4815      	ldr	r0, [pc, #84]	@ (80017d8 <MX_GPIO_Init+0x1a0>)
 8001782:	f002 f983 	bl	8003a8c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001786:	2330      	movs	r3, #48	@ 0x30
 8001788:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800178a:	2302      	movs	r3, #2
 800178c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800178e:	2300      	movs	r3, #0
 8001790:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001792:	2300      	movs	r3, #0
 8001794:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001796:	2305      	movs	r3, #5
 8001798:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800179a:	f107 0314 	add.w	r3, r7, #20
 800179e:	4619      	mov	r1, r3
 80017a0:	480c      	ldr	r0, [pc, #48]	@ (80017d4 <MX_GPIO_Init+0x19c>)
 80017a2:	f002 f973 	bl	8003a8c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80017a6:	2200      	movs	r2, #0
 80017a8:	2100      	movs	r1, #0
 80017aa:	2017      	movs	r0, #23
 80017ac:	f001 fdfb 	bl	80033a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80017b0:	2017      	movs	r0, #23
 80017b2:	f001 fe12 	bl	80033da <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80017b6:	2200      	movs	r2, #0
 80017b8:	2100      	movs	r1, #0
 80017ba:	2028      	movs	r0, #40	@ 0x28
 80017bc:	f001 fdf3 	bl	80033a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80017c0:	2028      	movs	r0, #40	@ 0x28
 80017c2:	f001 fe0a 	bl	80033da <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 80017c6:	bf00      	nop
 80017c8:	3728      	adds	r7, #40	@ 0x28
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	40021000 	.word	0x40021000
 80017d4:	48000400 	.word	0x48000400
 80017d8:	48000800 	.word	0x48000800

080017dc <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80017dc:	b580      	push	{r7, lr}
 80017de:	b082      	sub	sp, #8
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	4603      	mov	r3, r0
 80017e4:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_10) {
 80017e6:	88fb      	ldrh	r3, [r7, #6]
 80017e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80017ec:	d10e      	bne.n	800180c <HAL_GPIO_EXTI_Callback+0x30>
		Encoder_setLimit(&encoder1, 180);
 80017ee:	ed9f 0a09 	vldr	s0, [pc, #36]	@ 8001814 <HAL_GPIO_EXTI_Callback+0x38>
 80017f2:	4809      	ldr	r0, [pc, #36]	@ (8001818 <HAL_GPIO_EXTI_Callback+0x3c>)
 80017f4:	f7fe fee7 	bl	80005c6 <Encoder_setLimit>
		Encoder_setLimit(&encoder2, 180);
 80017f8:	ed9f 0a06 	vldr	s0, [pc, #24]	@ 8001814 <HAL_GPIO_EXTI_Callback+0x38>
 80017fc:	4807      	ldr	r0, [pc, #28]	@ (800181c <HAL_GPIO_EXTI_Callback+0x40>)
 80017fe:	f7fe fee2 	bl	80005c6 <Encoder_setLimit>
		check += 1;
 8001802:	4b07      	ldr	r3, [pc, #28]	@ (8001820 <HAL_GPIO_EXTI_Callback+0x44>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	3301      	adds	r3, #1
 8001808:	4a05      	ldr	r2, [pc, #20]	@ (8001820 <HAL_GPIO_EXTI_Callback+0x44>)
 800180a:	6013      	str	r3, [r2, #0]
	}
}
 800180c:	bf00      	nop
 800180e:	3708      	adds	r7, #8
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}
 8001814:	43340000 	.word	0x43340000
 8001818:	20000958 	.word	0x20000958
 800181c:	20000974 	.word	0x20000974
 8001820:	20000990 	.word	0x20000990

08001824 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001824:	b480      	push	{r7}
 8001826:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001828:	b672      	cpsid	i
}
 800182a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800182c:	bf00      	nop
 800182e:	e7fd      	b.n	800182c <Error_Handler+0x8>

08001830 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b082      	sub	sp, #8
 8001834:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001836:	4b0f      	ldr	r3, [pc, #60]	@ (8001874 <HAL_MspInit+0x44>)
 8001838:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800183a:	4a0e      	ldr	r2, [pc, #56]	@ (8001874 <HAL_MspInit+0x44>)
 800183c:	f043 0301 	orr.w	r3, r3, #1
 8001840:	6613      	str	r3, [r2, #96]	@ 0x60
 8001842:	4b0c      	ldr	r3, [pc, #48]	@ (8001874 <HAL_MspInit+0x44>)
 8001844:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001846:	f003 0301 	and.w	r3, r3, #1
 800184a:	607b      	str	r3, [r7, #4]
 800184c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800184e:	4b09      	ldr	r3, [pc, #36]	@ (8001874 <HAL_MspInit+0x44>)
 8001850:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001852:	4a08      	ldr	r2, [pc, #32]	@ (8001874 <HAL_MspInit+0x44>)
 8001854:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001858:	6593      	str	r3, [r2, #88]	@ 0x58
 800185a:	4b06      	ldr	r3, [pc, #24]	@ (8001874 <HAL_MspInit+0x44>)
 800185c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800185e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001862:	603b      	str	r3, [r7, #0]
 8001864:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001866:	f002 fb67 	bl	8003f38 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800186a:	bf00      	nop
 800186c:	3708      	adds	r7, #8
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	40021000 	.word	0x40021000

08001878 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b09e      	sub	sp, #120	@ 0x78
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001880:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001884:	2200      	movs	r2, #0
 8001886:	601a      	str	r2, [r3, #0]
 8001888:	605a      	str	r2, [r3, #4]
 800188a:	609a      	str	r2, [r3, #8]
 800188c:	60da      	str	r2, [r3, #12]
 800188e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001890:	f107 0310 	add.w	r3, r7, #16
 8001894:	2254      	movs	r2, #84	@ 0x54
 8001896:	2100      	movs	r1, #0
 8001898:	4618      	mov	r0, r3
 800189a:	f007 ff91 	bl	80097c0 <memset>
  if(hadc->Instance==ADC1)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80018a6:	d134      	bne.n	8001912 <HAL_ADC_MspInit+0x9a>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80018a8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80018ac:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80018ae:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80018b2:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018b4:	f107 0310 	add.w	r3, r7, #16
 80018b8:	4618      	mov	r0, r3
 80018ba:	f003 f87b 	bl	80049b4 <HAL_RCCEx_PeriphCLKConfig>
 80018be:	4603      	mov	r3, r0
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d001      	beq.n	80018c8 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80018c4:	f7ff ffae 	bl	8001824 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80018c8:	4b14      	ldr	r3, [pc, #80]	@ (800191c <HAL_ADC_MspInit+0xa4>)
 80018ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018cc:	4a13      	ldr	r2, [pc, #76]	@ (800191c <HAL_ADC_MspInit+0xa4>)
 80018ce:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80018d2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80018d4:	4b11      	ldr	r3, [pc, #68]	@ (800191c <HAL_ADC_MspInit+0xa4>)
 80018d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018d8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80018dc:	60fb      	str	r3, [r7, #12]
 80018de:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018e0:	4b0e      	ldr	r3, [pc, #56]	@ (800191c <HAL_ADC_MspInit+0xa4>)
 80018e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018e4:	4a0d      	ldr	r2, [pc, #52]	@ (800191c <HAL_ADC_MspInit+0xa4>)
 80018e6:	f043 0301 	orr.w	r3, r3, #1
 80018ea:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80018ec:	4b0b      	ldr	r3, [pc, #44]	@ (800191c <HAL_ADC_MspInit+0xa4>)
 80018ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018f0:	f003 0301 	and.w	r3, r3, #1
 80018f4:	60bb      	str	r3, [r7, #8]
 80018f6:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = Current_Sensor_Pin|Current_SensorA1_Pin;
 80018f8:	2303      	movs	r3, #3
 80018fa:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018fc:	2303      	movs	r3, #3
 80018fe:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001900:	2300      	movs	r3, #0
 8001902:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001904:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001908:	4619      	mov	r1, r3
 800190a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800190e:	f002 f8bd 	bl	8003a8c <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001912:	bf00      	nop
 8001914:	3778      	adds	r7, #120	@ 0x78
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	40021000 	.word	0x40021000

08001920 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b088      	sub	sp, #32
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a39      	ldr	r2, [pc, #228]	@ (8001a14 <HAL_TIM_Base_MspInit+0xf4>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d11c      	bne.n	800196c <HAL_TIM_Base_MspInit+0x4c>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001932:	4b39      	ldr	r3, [pc, #228]	@ (8001a18 <HAL_TIM_Base_MspInit+0xf8>)
 8001934:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001936:	4a38      	ldr	r2, [pc, #224]	@ (8001a18 <HAL_TIM_Base_MspInit+0xf8>)
 8001938:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800193c:	6613      	str	r3, [r2, #96]	@ 0x60
 800193e:	4b36      	ldr	r3, [pc, #216]	@ (8001a18 <HAL_TIM_Base_MspInit+0xf8>)
 8001940:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001942:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001946:	61fb      	str	r3, [r7, #28]
 8001948:	69fb      	ldr	r3, [r7, #28]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 800194a:	2200      	movs	r2, #0
 800194c:	2100      	movs	r1, #0
 800194e:	2018      	movs	r0, #24
 8001950:	f001 fd29 	bl	80033a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8001954:	2018      	movs	r0, #24
 8001956:	f001 fd40 	bl	80033da <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800195a:	2200      	movs	r2, #0
 800195c:	2100      	movs	r1, #0
 800195e:	2019      	movs	r0, #25
 8001960:	f001 fd21 	bl	80033a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001964:	2019      	movs	r0, #25
 8001966:	f001 fd38 	bl	80033da <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM20_MspInit 1 */

    /* USER CODE END TIM20_MspInit 1 */
  }

}
 800196a:	e04e      	b.n	8001a0a <HAL_TIM_Base_MspInit+0xea>
  else if(htim_base->Instance==TIM2)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001974:	d10c      	bne.n	8001990 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001976:	4b28      	ldr	r3, [pc, #160]	@ (8001a18 <HAL_TIM_Base_MspInit+0xf8>)
 8001978:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800197a:	4a27      	ldr	r2, [pc, #156]	@ (8001a18 <HAL_TIM_Base_MspInit+0xf8>)
 800197c:	f043 0301 	orr.w	r3, r3, #1
 8001980:	6593      	str	r3, [r2, #88]	@ 0x58
 8001982:	4b25      	ldr	r3, [pc, #148]	@ (8001a18 <HAL_TIM_Base_MspInit+0xf8>)
 8001984:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001986:	f003 0301 	and.w	r3, r3, #1
 800198a:	61bb      	str	r3, [r7, #24]
 800198c:	69bb      	ldr	r3, [r7, #24]
}
 800198e:	e03c      	b.n	8001a0a <HAL_TIM_Base_MspInit+0xea>
  else if(htim_base->Instance==TIM8)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a21      	ldr	r2, [pc, #132]	@ (8001a1c <HAL_TIM_Base_MspInit+0xfc>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d10c      	bne.n	80019b4 <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800199a:	4b1f      	ldr	r3, [pc, #124]	@ (8001a18 <HAL_TIM_Base_MspInit+0xf8>)
 800199c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800199e:	4a1e      	ldr	r2, [pc, #120]	@ (8001a18 <HAL_TIM_Base_MspInit+0xf8>)
 80019a0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80019a4:	6613      	str	r3, [r2, #96]	@ 0x60
 80019a6:	4b1c      	ldr	r3, [pc, #112]	@ (8001a18 <HAL_TIM_Base_MspInit+0xf8>)
 80019a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019aa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80019ae:	617b      	str	r3, [r7, #20]
 80019b0:	697b      	ldr	r3, [r7, #20]
}
 80019b2:	e02a      	b.n	8001a0a <HAL_TIM_Base_MspInit+0xea>
  else if(htim_base->Instance==TIM16)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a19      	ldr	r2, [pc, #100]	@ (8001a20 <HAL_TIM_Base_MspInit+0x100>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d114      	bne.n	80019e8 <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80019be:	4b16      	ldr	r3, [pc, #88]	@ (8001a18 <HAL_TIM_Base_MspInit+0xf8>)
 80019c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019c2:	4a15      	ldr	r2, [pc, #84]	@ (8001a18 <HAL_TIM_Base_MspInit+0xf8>)
 80019c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80019c8:	6613      	str	r3, [r2, #96]	@ 0x60
 80019ca:	4b13      	ldr	r3, [pc, #76]	@ (8001a18 <HAL_TIM_Base_MspInit+0xf8>)
 80019cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019d2:	613b      	str	r3, [r7, #16]
 80019d4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80019d6:	2200      	movs	r2, #0
 80019d8:	2100      	movs	r1, #0
 80019da:	2019      	movs	r0, #25
 80019dc:	f001 fce3 	bl	80033a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80019e0:	2019      	movs	r0, #25
 80019e2:	f001 fcfa 	bl	80033da <HAL_NVIC_EnableIRQ>
}
 80019e6:	e010      	b.n	8001a0a <HAL_TIM_Base_MspInit+0xea>
  else if(htim_base->Instance==TIM20)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a0d      	ldr	r2, [pc, #52]	@ (8001a24 <HAL_TIM_Base_MspInit+0x104>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d10b      	bne.n	8001a0a <HAL_TIM_Base_MspInit+0xea>
    __HAL_RCC_TIM20_CLK_ENABLE();
 80019f2:	4b09      	ldr	r3, [pc, #36]	@ (8001a18 <HAL_TIM_Base_MspInit+0xf8>)
 80019f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019f6:	4a08      	ldr	r2, [pc, #32]	@ (8001a18 <HAL_TIM_Base_MspInit+0xf8>)
 80019f8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80019fc:	6613      	str	r3, [r2, #96]	@ 0x60
 80019fe:	4b06      	ldr	r3, [pc, #24]	@ (8001a18 <HAL_TIM_Base_MspInit+0xf8>)
 8001a00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a02:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001a06:	60fb      	str	r3, [r7, #12]
 8001a08:	68fb      	ldr	r3, [r7, #12]
}
 8001a0a:	bf00      	nop
 8001a0c:	3720      	adds	r7, #32
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	40012c00 	.word	0x40012c00
 8001a18:	40021000 	.word	0x40021000
 8001a1c:	40013400 	.word	0x40013400
 8001a20:	40014400 	.word	0x40014400
 8001a24:	40015000 	.word	0x40015000

08001a28 <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b08e      	sub	sp, #56	@ 0x38
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a30:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a34:	2200      	movs	r2, #0
 8001a36:	601a      	str	r2, [r3, #0]
 8001a38:	605a      	str	r2, [r3, #4]
 8001a3a:	609a      	str	r2, [r3, #8]
 8001a3c:	60da      	str	r2, [r3, #12]
 8001a3e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a4b      	ldr	r2, [pc, #300]	@ (8001b74 <HAL_TIM_Encoder_MspInit+0x14c>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d145      	bne.n	8001ad6 <HAL_TIM_Encoder_MspInit+0xae>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001a4a:	4b4b      	ldr	r3, [pc, #300]	@ (8001b78 <HAL_TIM_Encoder_MspInit+0x150>)
 8001a4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a4e:	4a4a      	ldr	r2, [pc, #296]	@ (8001b78 <HAL_TIM_Encoder_MspInit+0x150>)
 8001a50:	f043 0302 	orr.w	r3, r3, #2
 8001a54:	6593      	str	r3, [r2, #88]	@ 0x58
 8001a56:	4b48      	ldr	r3, [pc, #288]	@ (8001b78 <HAL_TIM_Encoder_MspInit+0x150>)
 8001a58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a5a:	f003 0302 	and.w	r3, r3, #2
 8001a5e:	623b      	str	r3, [r7, #32]
 8001a60:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a62:	4b45      	ldr	r3, [pc, #276]	@ (8001b78 <HAL_TIM_Encoder_MspInit+0x150>)
 8001a64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a66:	4a44      	ldr	r2, [pc, #272]	@ (8001b78 <HAL_TIM_Encoder_MspInit+0x150>)
 8001a68:	f043 0301 	orr.w	r3, r3, #1
 8001a6c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a6e:	4b42      	ldr	r3, [pc, #264]	@ (8001b78 <HAL_TIM_Encoder_MspInit+0x150>)
 8001a70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a72:	f003 0301 	and.w	r3, r3, #1
 8001a76:	61fb      	str	r3, [r7, #28]
 8001a78:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a7a:	4b3f      	ldr	r3, [pc, #252]	@ (8001b78 <HAL_TIM_Encoder_MspInit+0x150>)
 8001a7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a7e:	4a3e      	ldr	r2, [pc, #248]	@ (8001b78 <HAL_TIM_Encoder_MspInit+0x150>)
 8001a80:	f043 0304 	orr.w	r3, r3, #4
 8001a84:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a86:	4b3c      	ldr	r3, [pc, #240]	@ (8001b78 <HAL_TIM_Encoder_MspInit+0x150>)
 8001a88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a8a:	f003 0304 	and.w	r3, r3, #4
 8001a8e:	61bb      	str	r3, [r7, #24]
 8001a90:	69bb      	ldr	r3, [r7, #24]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = Encoder_1_Pin;
 8001a92:	2340      	movs	r3, #64	@ 0x40
 8001a94:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a96:	2302      	movs	r3, #2
 8001a98:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001aa2:	2302      	movs	r3, #2
 8001aa4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(Encoder_1_GPIO_Port, &GPIO_InitStruct);
 8001aa6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001aaa:	4619      	mov	r1, r3
 8001aac:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ab0:	f001 ffec 	bl	8003a8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Encoder_1C7_Pin;
 8001ab4:	2380      	movs	r3, #128	@ 0x80
 8001ab6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ab8:	2302      	movs	r3, #2
 8001aba:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001abc:	2300      	movs	r3, #0
 8001abe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001ac4:	2302      	movs	r3, #2
 8001ac6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(Encoder_1C7_GPIO_Port, &GPIO_InitStruct);
 8001ac8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001acc:	4619      	mov	r1, r3
 8001ace:	482b      	ldr	r0, [pc, #172]	@ (8001b7c <HAL_TIM_Encoder_MspInit+0x154>)
 8001ad0:	f001 ffdc 	bl	8003a8c <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001ad4:	e04a      	b.n	8001b6c <HAL_TIM_Encoder_MspInit+0x144>
  else if(htim_encoder->Instance==TIM4)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4a29      	ldr	r2, [pc, #164]	@ (8001b80 <HAL_TIM_Encoder_MspInit+0x158>)
 8001adc:	4293      	cmp	r3, r2
 8001ade:	d145      	bne.n	8001b6c <HAL_TIM_Encoder_MspInit+0x144>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001ae0:	4b25      	ldr	r3, [pc, #148]	@ (8001b78 <HAL_TIM_Encoder_MspInit+0x150>)
 8001ae2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ae4:	4a24      	ldr	r2, [pc, #144]	@ (8001b78 <HAL_TIM_Encoder_MspInit+0x150>)
 8001ae6:	f043 0304 	orr.w	r3, r3, #4
 8001aea:	6593      	str	r3, [r2, #88]	@ 0x58
 8001aec:	4b22      	ldr	r3, [pc, #136]	@ (8001b78 <HAL_TIM_Encoder_MspInit+0x150>)
 8001aee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001af0:	f003 0304 	and.w	r3, r3, #4
 8001af4:	617b      	str	r3, [r7, #20]
 8001af6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001af8:	4b1f      	ldr	r3, [pc, #124]	@ (8001b78 <HAL_TIM_Encoder_MspInit+0x150>)
 8001afa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001afc:	4a1e      	ldr	r2, [pc, #120]	@ (8001b78 <HAL_TIM_Encoder_MspInit+0x150>)
 8001afe:	f043 0301 	orr.w	r3, r3, #1
 8001b02:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b04:	4b1c      	ldr	r3, [pc, #112]	@ (8001b78 <HAL_TIM_Encoder_MspInit+0x150>)
 8001b06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b08:	f003 0301 	and.w	r3, r3, #1
 8001b0c:	613b      	str	r3, [r7, #16]
 8001b0e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b10:	4b19      	ldr	r3, [pc, #100]	@ (8001b78 <HAL_TIM_Encoder_MspInit+0x150>)
 8001b12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b14:	4a18      	ldr	r2, [pc, #96]	@ (8001b78 <HAL_TIM_Encoder_MspInit+0x150>)
 8001b16:	f043 0302 	orr.w	r3, r3, #2
 8001b1a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b1c:	4b16      	ldr	r3, [pc, #88]	@ (8001b78 <HAL_TIM_Encoder_MspInit+0x150>)
 8001b1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b20:	f003 0302 	and.w	r3, r3, #2
 8001b24:	60fb      	str	r3, [r7, #12]
 8001b26:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Encoder_2_Pin;
 8001b28:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001b2c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b2e:	2302      	movs	r3, #2
 8001b30:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b32:	2300      	movs	r3, #0
 8001b34:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b36:	2300      	movs	r3, #0
 8001b38:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8001b3a:	230a      	movs	r3, #10
 8001b3c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(Encoder_2_GPIO_Port, &GPIO_InitStruct);
 8001b3e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b42:	4619      	mov	r1, r3
 8001b44:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b48:	f001 ffa0 	bl	8003a8c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = Encoder_2B7_Pin;
 8001b4c:	2380      	movs	r3, #128	@ 0x80
 8001b4e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b50:	2302      	movs	r3, #2
 8001b52:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b54:	2300      	movs	r3, #0
 8001b56:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001b5c:	2302      	movs	r3, #2
 8001b5e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(Encoder_2B7_GPIO_Port, &GPIO_InitStruct);
 8001b60:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b64:	4619      	mov	r1, r3
 8001b66:	4807      	ldr	r0, [pc, #28]	@ (8001b84 <HAL_TIM_Encoder_MspInit+0x15c>)
 8001b68:	f001 ff90 	bl	8003a8c <HAL_GPIO_Init>
}
 8001b6c:	bf00      	nop
 8001b6e:	3738      	adds	r7, #56	@ 0x38
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	40000400 	.word	0x40000400
 8001b78:	40021000 	.word	0x40021000
 8001b7c:	48000800 	.word	0x48000800
 8001b80:	40000800 	.word	0x40000800
 8001b84:	48000400 	.word	0x48000400

08001b88 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b08a      	sub	sp, #40	@ 0x28
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b90:	f107 0314 	add.w	r3, r7, #20
 8001b94:	2200      	movs	r2, #0
 8001b96:	601a      	str	r2, [r3, #0]
 8001b98:	605a      	str	r2, [r3, #4]
 8001b9a:	609a      	str	r2, [r3, #8]
 8001b9c:	60da      	str	r2, [r3, #12]
 8001b9e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM8)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a31      	ldr	r2, [pc, #196]	@ (8001c6c <HAL_TIM_MspPostInit+0xe4>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d11d      	bne.n	8001be6 <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM8_MspPostInit 0 */

    /* USER CODE END TIM8_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001baa:	4b31      	ldr	r3, [pc, #196]	@ (8001c70 <HAL_TIM_MspPostInit+0xe8>)
 8001bac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bae:	4a30      	ldr	r2, [pc, #192]	@ (8001c70 <HAL_TIM_MspPostInit+0xe8>)
 8001bb0:	f043 0304 	orr.w	r3, r3, #4
 8001bb4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001bb6:	4b2e      	ldr	r3, [pc, #184]	@ (8001c70 <HAL_TIM_MspPostInit+0xe8>)
 8001bb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bba:	f003 0304 	and.w	r3, r3, #4
 8001bbe:	613b      	str	r3, [r7, #16]
 8001bc0:	693b      	ldr	r3, [r7, #16]
    /**TIM8 GPIO Configuration
    PC9     ------> TIM8_CH4
    */
    GPIO_InitStruct.Pin = PWM_Servo_Pin;
 8001bc2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001bc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bc8:	2302      	movs	r3, #2
 8001bca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8001bd4:	2304      	movs	r3, #4
 8001bd6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(PWM_Servo_GPIO_Port, &GPIO_InitStruct);
 8001bd8:	f107 0314 	add.w	r3, r7, #20
 8001bdc:	4619      	mov	r1, r3
 8001bde:	4825      	ldr	r0, [pc, #148]	@ (8001c74 <HAL_TIM_MspPostInit+0xec>)
 8001be0:	f001 ff54 	bl	8003a8c <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM20_MspPostInit 1 */

    /* USER CODE END TIM20_MspPostInit 1 */
  }

}
 8001be4:	e03d      	b.n	8001c62 <HAL_TIM_MspPostInit+0xda>
  else if(htim->Instance==TIM20)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4a23      	ldr	r2, [pc, #140]	@ (8001c78 <HAL_TIM_MspPostInit+0xf0>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d138      	bne.n	8001c62 <HAL_TIM_MspPostInit+0xda>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bf0:	4b1f      	ldr	r3, [pc, #124]	@ (8001c70 <HAL_TIM_MspPostInit+0xe8>)
 8001bf2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bf4:	4a1e      	ldr	r2, [pc, #120]	@ (8001c70 <HAL_TIM_MspPostInit+0xe8>)
 8001bf6:	f043 0302 	orr.w	r3, r3, #2
 8001bfa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001bfc:	4b1c      	ldr	r3, [pc, #112]	@ (8001c70 <HAL_TIM_MspPostInit+0xe8>)
 8001bfe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c00:	f003 0302 	and.w	r3, r3, #2
 8001c04:	60fb      	str	r3, [r7, #12]
 8001c06:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c08:	4b19      	ldr	r3, [pc, #100]	@ (8001c70 <HAL_TIM_MspPostInit+0xe8>)
 8001c0a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c0c:	4a18      	ldr	r2, [pc, #96]	@ (8001c70 <HAL_TIM_MspPostInit+0xe8>)
 8001c0e:	f043 0304 	orr.w	r3, r3, #4
 8001c12:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c14:	4b16      	ldr	r3, [pc, #88]	@ (8001c70 <HAL_TIM_MspPostInit+0xe8>)
 8001c16:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c18:	f003 0304 	and.w	r3, r3, #4
 8001c1c:	60bb      	str	r3, [r7, #8]
 8001c1e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWM_MD20A_24V_Pin;
 8001c20:	2304      	movs	r3, #4
 8001c22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c24:	2302      	movs	r3, #2
 8001c26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM20;
 8001c30:	2303      	movs	r3, #3
 8001c32:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(PWM_MD20A_24V_GPIO_Port, &GPIO_InitStruct);
 8001c34:	f107 0314 	add.w	r3, r7, #20
 8001c38:	4619      	mov	r1, r3
 8001c3a:	4810      	ldr	r0, [pc, #64]	@ (8001c7c <HAL_TIM_MspPostInit+0xf4>)
 8001c3c:	f001 ff26 	bl	8003a8c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = PWM_MD20A_18V_Pin;
 8001c40:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001c44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c46:	2302      	movs	r3, #2
 8001c48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM20;
 8001c52:	2306      	movs	r3, #6
 8001c54:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(PWM_MD20A_18V_GPIO_Port, &GPIO_InitStruct);
 8001c56:	f107 0314 	add.w	r3, r7, #20
 8001c5a:	4619      	mov	r1, r3
 8001c5c:	4805      	ldr	r0, [pc, #20]	@ (8001c74 <HAL_TIM_MspPostInit+0xec>)
 8001c5e:	f001 ff15 	bl	8003a8c <HAL_GPIO_Init>
}
 8001c62:	bf00      	nop
 8001c64:	3728      	adds	r7, #40	@ 0x28
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	40013400 	.word	0x40013400
 8001c70:	40021000 	.word	0x40021000
 8001c74:	48000800 	.word	0x48000800
 8001c78:	40015000 	.word	0x40015000
 8001c7c:	48000400 	.word	0x48000400

08001c80 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b09e      	sub	sp, #120	@ 0x78
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c88:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	601a      	str	r2, [r3, #0]
 8001c90:	605a      	str	r2, [r3, #4]
 8001c92:	609a      	str	r2, [r3, #8]
 8001c94:	60da      	str	r2, [r3, #12]
 8001c96:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c98:	f107 0310 	add.w	r3, r7, #16
 8001c9c:	2254      	movs	r2, #84	@ 0x54
 8001c9e:	2100      	movs	r1, #0
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f007 fd8d 	bl	80097c0 <memset>
  if(huart->Instance==USART2)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4a37      	ldr	r2, [pc, #220]	@ (8001d88 <HAL_UART_MspInit+0x108>)
 8001cac:	4293      	cmp	r3, r2
 8001cae:	d167      	bne.n	8001d80 <HAL_UART_MspInit+0x100>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001cb0:	2302      	movs	r3, #2
 8001cb2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001cb8:	f107 0310 	add.w	r3, r7, #16
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f002 fe79 	bl	80049b4 <HAL_RCCEx_PeriphCLKConfig>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d001      	beq.n	8001ccc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001cc8:	f7ff fdac 	bl	8001824 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001ccc:	4b2f      	ldr	r3, [pc, #188]	@ (8001d8c <HAL_UART_MspInit+0x10c>)
 8001cce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cd0:	4a2e      	ldr	r2, [pc, #184]	@ (8001d8c <HAL_UART_MspInit+0x10c>)
 8001cd2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001cd6:	6593      	str	r3, [r2, #88]	@ 0x58
 8001cd8:	4b2c      	ldr	r3, [pc, #176]	@ (8001d8c <HAL_UART_MspInit+0x10c>)
 8001cda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cdc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ce0:	60fb      	str	r3, [r7, #12]
 8001ce2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ce4:	4b29      	ldr	r3, [pc, #164]	@ (8001d8c <HAL_UART_MspInit+0x10c>)
 8001ce6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ce8:	4a28      	ldr	r2, [pc, #160]	@ (8001d8c <HAL_UART_MspInit+0x10c>)
 8001cea:	f043 0301 	orr.w	r3, r3, #1
 8001cee:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001cf0:	4b26      	ldr	r3, [pc, #152]	@ (8001d8c <HAL_UART_MspInit+0x10c>)
 8001cf2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cf4:	f003 0301 	and.w	r3, r3, #1
 8001cf8:	60bb      	str	r3, [r7, #8]
 8001cfa:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001cfc:	230c      	movs	r3, #12
 8001cfe:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d00:	2302      	movs	r3, #2
 8001d02:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d04:	2300      	movs	r3, #0
 8001d06:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001d0c:	2307      	movs	r3, #7
 8001d0e:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d10:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001d14:	4619      	mov	r1, r3
 8001d16:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001d1a:	f001 feb7 	bl	8003a8c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel1;
 8001d1e:	4b1c      	ldr	r3, [pc, #112]	@ (8001d90 <HAL_UART_MspInit+0x110>)
 8001d20:	4a1c      	ldr	r2, [pc, #112]	@ (8001d94 <HAL_UART_MspInit+0x114>)
 8001d22:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8001d24:	4b1a      	ldr	r3, [pc, #104]	@ (8001d90 <HAL_UART_MspInit+0x110>)
 8001d26:	221b      	movs	r2, #27
 8001d28:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001d2a:	4b19      	ldr	r3, [pc, #100]	@ (8001d90 <HAL_UART_MspInit+0x110>)
 8001d2c:	2210      	movs	r2, #16
 8001d2e:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d30:	4b17      	ldr	r3, [pc, #92]	@ (8001d90 <HAL_UART_MspInit+0x110>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001d36:	4b16      	ldr	r3, [pc, #88]	@ (8001d90 <HAL_UART_MspInit+0x110>)
 8001d38:	2280      	movs	r2, #128	@ 0x80
 8001d3a:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001d3c:	4b14      	ldr	r3, [pc, #80]	@ (8001d90 <HAL_UART_MspInit+0x110>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001d42:	4b13      	ldr	r3, [pc, #76]	@ (8001d90 <HAL_UART_MspInit+0x110>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001d48:	4b11      	ldr	r3, [pc, #68]	@ (8001d90 <HAL_UART_MspInit+0x110>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001d4e:	4b10      	ldr	r3, [pc, #64]	@ (8001d90 <HAL_UART_MspInit+0x110>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001d54:	480e      	ldr	r0, [pc, #56]	@ (8001d90 <HAL_UART_MspInit+0x110>)
 8001d56:	f001 fb5b 	bl	8003410 <HAL_DMA_Init>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d001      	beq.n	8001d64 <HAL_UART_MspInit+0xe4>
    {
      Error_Handler();
 8001d60:	f7ff fd60 	bl	8001824 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	4a0a      	ldr	r2, [pc, #40]	@ (8001d90 <HAL_UART_MspInit+0x110>)
 8001d68:	67da      	str	r2, [r3, #124]	@ 0x7c
 8001d6a:	4a09      	ldr	r2, [pc, #36]	@ (8001d90 <HAL_UART_MspInit+0x110>)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001d70:	2200      	movs	r2, #0
 8001d72:	2100      	movs	r1, #0
 8001d74:	2026      	movs	r0, #38	@ 0x26
 8001d76:	f001 fb16 	bl	80033a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001d7a:	2026      	movs	r0, #38	@ 0x26
 8001d7c:	f001 fb2d 	bl	80033da <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8001d80:	bf00      	nop
 8001d82:	3778      	adds	r7, #120	@ 0x78
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}
 8001d88:	40004400 	.word	0x40004400
 8001d8c:	40021000 	.word	0x40021000
 8001d90:	200008f8 	.word	0x200008f8
 8001d94:	40020008 	.word	0x40020008

08001d98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001d9c:	bf00      	nop
 8001d9e:	e7fd      	b.n	8001d9c <NMI_Handler+0x4>

08001da0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001da0:	b480      	push	{r7}
 8001da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001da4:	bf00      	nop
 8001da6:	e7fd      	b.n	8001da4 <HardFault_Handler+0x4>

08001da8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001da8:	b480      	push	{r7}
 8001daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001dac:	bf00      	nop
 8001dae:	e7fd      	b.n	8001dac <MemManage_Handler+0x4>

08001db0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001db0:	b480      	push	{r7}
 8001db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001db4:	bf00      	nop
 8001db6:	e7fd      	b.n	8001db4 <BusFault_Handler+0x4>

08001db8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001db8:	b480      	push	{r7}
 8001dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001dbc:	bf00      	nop
 8001dbe:	e7fd      	b.n	8001dbc <UsageFault_Handler+0x4>

08001dc0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001dc4:	bf00      	nop
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr

08001dce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001dce:	b480      	push	{r7}
 8001dd0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001dd2:	bf00      	nop
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dda:	4770      	bx	lr

08001ddc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001de0:	bf00      	nop
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr

08001dea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001dea:	b580      	push	{r7, lr}
 8001dec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001dee:	f000 f8e1 	bl	8001fb4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001df2:	bf00      	nop
 8001df4:	bd80      	pop	{r7, pc}
	...

08001df8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001dfc:	4802      	ldr	r0, [pc, #8]	@ (8001e08 <DMA1_Channel1_IRQHandler+0x10>)
 8001dfe:	f001 fcea 	bl	80037d6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001e02:	bf00      	nop
 8001e04:	bd80      	pop	{r7, pc}
 8001e06:	bf00      	nop
 8001e08:	200008f8 	.word	0x200008f8

08001e0c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Limit_Switch_pen_1_Pin);
 8001e10:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001e14:	f001 ffd4 	bl	8003dc0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001e18:	bf00      	nop
 8001e1a:	bd80      	pop	{r7, pc}

08001e1c <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001e20:	4802      	ldr	r0, [pc, #8]	@ (8001e2c <TIM1_BRK_TIM15_IRQHandler+0x10>)
 8001e22:	f003 fc05 	bl	8005630 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8001e26:	bf00      	nop
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	20000298 	.word	0x20000298

08001e30 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001e34:	4803      	ldr	r0, [pc, #12]	@ (8001e44 <TIM1_UP_TIM16_IRQHandler+0x14>)
 8001e36:	f003 fbfb 	bl	8005630 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 8001e3a:	4803      	ldr	r0, [pc, #12]	@ (8001e48 <TIM1_UP_TIM16_IRQHandler+0x18>)
 8001e3c:	f003 fbf8 	bl	8005630 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001e40:	bf00      	nop
 8001e42:	bd80      	pop	{r7, pc}
 8001e44:	20000298 	.word	0x20000298
 8001e48:	20000694 	.word	0x20000694

08001e4c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001e50:	4802      	ldr	r0, [pc, #8]	@ (8001e5c <USART2_IRQHandler+0x10>)
 8001e52:	f005 fafb 	bl	800744c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001e56:	bf00      	nop
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	2000082c 	.word	0x2000082c

08001e60 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Limit_Switch_pen_2_Pin);
 8001e64:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8001e68:	f001 ffaa 	bl	8003dc0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Emergency_Pin);
 8001e6c:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8001e70:	f001 ffa6 	bl	8003dc0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Proximity_sensor_Pin);
 8001e74:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8001e78:	f001 ffa2 	bl	8003dc0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Proximity_Sensor_Pin);
 8001e7c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001e80:	f001 ff9e 	bl	8003dc0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Limit_Switch_Prismatic1_Pin);
 8001e84:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001e88:	f001 ff9a 	bl	8003dc0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Limit_Switch_Prismatic2_Pin);
 8001e8c:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8001e90:	f001 ff96 	bl	8003dc0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001e94:	bf00      	nop
 8001e96:	bd80      	pop	{r7, pc}

08001e98 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001e9c:	4b06      	ldr	r3, [pc, #24]	@ (8001eb8 <SystemInit+0x20>)
 8001e9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ea2:	4a05      	ldr	r2, [pc, #20]	@ (8001eb8 <SystemInit+0x20>)
 8001ea4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001ea8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001eac:	bf00      	nop
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb4:	4770      	bx	lr
 8001eb6:	bf00      	nop
 8001eb8:	e000ed00 	.word	0xe000ed00

08001ebc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001ebc:	480d      	ldr	r0, [pc, #52]	@ (8001ef4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001ebe:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001ec0:	f7ff ffea 	bl	8001e98 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ec4:	480c      	ldr	r0, [pc, #48]	@ (8001ef8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001ec6:	490d      	ldr	r1, [pc, #52]	@ (8001efc <LoopForever+0xa>)
  ldr r2, =_sidata
 8001ec8:	4a0d      	ldr	r2, [pc, #52]	@ (8001f00 <LoopForever+0xe>)
  movs r3, #0
 8001eca:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001ecc:	e002      	b.n	8001ed4 <LoopCopyDataInit>

08001ece <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ece:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ed0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ed2:	3304      	adds	r3, #4

08001ed4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ed4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ed6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ed8:	d3f9      	bcc.n	8001ece <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001eda:	4a0a      	ldr	r2, [pc, #40]	@ (8001f04 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001edc:	4c0a      	ldr	r4, [pc, #40]	@ (8001f08 <LoopForever+0x16>)
  movs r3, #0
 8001ede:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ee0:	e001      	b.n	8001ee6 <LoopFillZerobss>

08001ee2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ee2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ee4:	3204      	adds	r2, #4

08001ee6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ee6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ee8:	d3fb      	bcc.n	8001ee2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001eea:	f007 fc71 	bl	80097d0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001eee:	f7fe fecd 	bl	8000c8c <main>

08001ef2 <LoopForever>:

LoopForever:
    b LoopForever
 8001ef2:	e7fe      	b.n	8001ef2 <LoopForever>
  ldr   r0, =_estack
 8001ef4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001ef8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001efc:	2000020c 	.word	0x2000020c
  ldr r2, =_sidata
 8001f00:	0800989c 	.word	0x0800989c
  ldr r2, =_sbss
 8001f04:	2000020c 	.word	0x2000020c
  ldr r4, =_ebss
 8001f08:	20001000 	.word	0x20001000

08001f0c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001f0c:	e7fe      	b.n	8001f0c <ADC1_2_IRQHandler>

08001f0e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f0e:	b580      	push	{r7, lr}
 8001f10:	b082      	sub	sp, #8
 8001f12:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001f14:	2300      	movs	r3, #0
 8001f16:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f18:	2003      	movs	r0, #3
 8001f1a:	f001 fa39 	bl	8003390 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001f1e:	2000      	movs	r0, #0
 8001f20:	f000 f80e 	bl	8001f40 <HAL_InitTick>
 8001f24:	4603      	mov	r3, r0
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d002      	beq.n	8001f30 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	71fb      	strb	r3, [r7, #7]
 8001f2e:	e001      	b.n	8001f34 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001f30:	f7ff fc7e 	bl	8001830 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001f34:	79fb      	ldrb	r3, [r7, #7]

}
 8001f36:	4618      	mov	r0, r3
 8001f38:	3708      	adds	r7, #8
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}
	...

08001f40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b084      	sub	sp, #16
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001f4c:	4b16      	ldr	r3, [pc, #88]	@ (8001fa8 <HAL_InitTick+0x68>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d022      	beq.n	8001f9a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001f54:	4b15      	ldr	r3, [pc, #84]	@ (8001fac <HAL_InitTick+0x6c>)
 8001f56:	681a      	ldr	r2, [r3, #0]
 8001f58:	4b13      	ldr	r3, [pc, #76]	@ (8001fa8 <HAL_InitTick+0x68>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001f60:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f64:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f001 fa44 	bl	80033f6 <HAL_SYSTICK_Config>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d10f      	bne.n	8001f94 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2b0f      	cmp	r3, #15
 8001f78:	d809      	bhi.n	8001f8e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	6879      	ldr	r1, [r7, #4]
 8001f7e:	f04f 30ff 	mov.w	r0, #4294967295
 8001f82:	f001 fa10 	bl	80033a6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001f86:	4a0a      	ldr	r2, [pc, #40]	@ (8001fb0 <HAL_InitTick+0x70>)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6013      	str	r3, [r2, #0]
 8001f8c:	e007      	b.n	8001f9e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	73fb      	strb	r3, [r7, #15]
 8001f92:	e004      	b.n	8001f9e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001f94:	2301      	movs	r3, #1
 8001f96:	73fb      	strb	r3, [r7, #15]
 8001f98:	e001      	b.n	8001f9e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001f9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	3710      	adds	r7, #16
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd80      	pop	{r7, pc}
 8001fa8:	20000208 	.word	0x20000208
 8001fac:	20000200 	.word	0x20000200
 8001fb0:	20000204 	.word	0x20000204

08001fb4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001fb8:	4b05      	ldr	r3, [pc, #20]	@ (8001fd0 <HAL_IncTick+0x1c>)
 8001fba:	681a      	ldr	r2, [r3, #0]
 8001fbc:	4b05      	ldr	r3, [pc, #20]	@ (8001fd4 <HAL_IncTick+0x20>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4413      	add	r3, r2
 8001fc2:	4a03      	ldr	r2, [pc, #12]	@ (8001fd0 <HAL_IncTick+0x1c>)
 8001fc4:	6013      	str	r3, [r2, #0]
}
 8001fc6:	bf00      	nop
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fce:	4770      	bx	lr
 8001fd0:	20000ffc 	.word	0x20000ffc
 8001fd4:	20000208 	.word	0x20000208

08001fd8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	af00      	add	r7, sp, #0
  return uwTick;
 8001fdc:	4b03      	ldr	r3, [pc, #12]	@ (8001fec <HAL_GetTick+0x14>)
 8001fde:	681b      	ldr	r3, [r3, #0]
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe8:	4770      	bx	lr
 8001fea:	bf00      	nop
 8001fec:	20000ffc 	.word	0x20000ffc

08001ff0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b083      	sub	sp, #12
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
 8001ff8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	689b      	ldr	r3, [r3, #8]
 8001ffe:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	431a      	orrs	r2, r3
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	609a      	str	r2, [r3, #8]
}
 800200a:	bf00      	nop
 800200c:	370c      	adds	r7, #12
 800200e:	46bd      	mov	sp, r7
 8002010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002014:	4770      	bx	lr

08002016 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002016:	b480      	push	{r7}
 8002018:	b083      	sub	sp, #12
 800201a:	af00      	add	r7, sp, #0
 800201c:	6078      	str	r0, [r7, #4]
 800201e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	689b      	ldr	r3, [r3, #8]
 8002024:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	431a      	orrs	r2, r3
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	609a      	str	r2, [r3, #8]
}
 8002030:	bf00      	nop
 8002032:	370c      	adds	r7, #12
 8002034:	46bd      	mov	sp, r7
 8002036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203a:	4770      	bx	lr

0800203c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800203c:	b480      	push	{r7}
 800203e:	b083      	sub	sp, #12
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	689b      	ldr	r3, [r3, #8]
 8002048:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800204c:	4618      	mov	r0, r3
 800204e:	370c      	adds	r7, #12
 8002050:	46bd      	mov	sp, r7
 8002052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002056:	4770      	bx	lr

08002058 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002058:	b480      	push	{r7}
 800205a:	b087      	sub	sp, #28
 800205c:	af00      	add	r7, sp, #0
 800205e:	60f8      	str	r0, [r7, #12]
 8002060:	60b9      	str	r1, [r7, #8]
 8002062:	607a      	str	r2, [r7, #4]
 8002064:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	3360      	adds	r3, #96	@ 0x60
 800206a:	461a      	mov	r2, r3
 800206c:	68bb      	ldr	r3, [r7, #8]
 800206e:	009b      	lsls	r3, r3, #2
 8002070:	4413      	add	r3, r2
 8002072:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	681a      	ldr	r2, [r3, #0]
 8002078:	4b08      	ldr	r3, [pc, #32]	@ (800209c <LL_ADC_SetOffset+0x44>)
 800207a:	4013      	ands	r3, r2
 800207c:	687a      	ldr	r2, [r7, #4]
 800207e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8002082:	683a      	ldr	r2, [r7, #0]
 8002084:	430a      	orrs	r2, r1
 8002086:	4313      	orrs	r3, r2
 8002088:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800208c:	697b      	ldr	r3, [r7, #20]
 800208e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002090:	bf00      	nop
 8002092:	371c      	adds	r7, #28
 8002094:	46bd      	mov	sp, r7
 8002096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209a:	4770      	bx	lr
 800209c:	03fff000 	.word	0x03fff000

080020a0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b085      	sub	sp, #20
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
 80020a8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	3360      	adds	r3, #96	@ 0x60
 80020ae:	461a      	mov	r2, r3
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	009b      	lsls	r3, r3, #2
 80020b4:	4413      	add	r3, r2
 80020b6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	3714      	adds	r7, #20
 80020c4:	46bd      	mov	sp, r7
 80020c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ca:	4770      	bx	lr

080020cc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b087      	sub	sp, #28
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	60f8      	str	r0, [r7, #12]
 80020d4:	60b9      	str	r1, [r7, #8]
 80020d6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	3360      	adds	r3, #96	@ 0x60
 80020dc:	461a      	mov	r2, r3
 80020de:	68bb      	ldr	r3, [r7, #8]
 80020e0:	009b      	lsls	r3, r3, #2
 80020e2:	4413      	add	r3, r2
 80020e4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80020e6:	697b      	ldr	r3, [r7, #20]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	431a      	orrs	r2, r3
 80020f2:	697b      	ldr	r3, [r7, #20]
 80020f4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80020f6:	bf00      	nop
 80020f8:	371c      	adds	r7, #28
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr

08002102 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002102:	b480      	push	{r7}
 8002104:	b087      	sub	sp, #28
 8002106:	af00      	add	r7, sp, #0
 8002108:	60f8      	str	r0, [r7, #12]
 800210a:	60b9      	str	r1, [r7, #8]
 800210c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	3360      	adds	r3, #96	@ 0x60
 8002112:	461a      	mov	r2, r3
 8002114:	68bb      	ldr	r3, [r7, #8]
 8002116:	009b      	lsls	r3, r3, #2
 8002118:	4413      	add	r3, r2
 800211a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	431a      	orrs	r2, r3
 8002128:	697b      	ldr	r3, [r7, #20]
 800212a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 800212c:	bf00      	nop
 800212e:	371c      	adds	r7, #28
 8002130:	46bd      	mov	sp, r7
 8002132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002136:	4770      	bx	lr

08002138 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002138:	b480      	push	{r7}
 800213a:	b087      	sub	sp, #28
 800213c:	af00      	add	r7, sp, #0
 800213e:	60f8      	str	r0, [r7, #12]
 8002140:	60b9      	str	r1, [r7, #8]
 8002142:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	3360      	adds	r3, #96	@ 0x60
 8002148:	461a      	mov	r2, r3
 800214a:	68bb      	ldr	r3, [r7, #8]
 800214c:	009b      	lsls	r3, r3, #2
 800214e:	4413      	add	r3, r2
 8002150:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002152:	697b      	ldr	r3, [r7, #20]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	431a      	orrs	r2, r3
 800215e:	697b      	ldr	r3, [r7, #20]
 8002160:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8002162:	bf00      	nop
 8002164:	371c      	adds	r7, #28
 8002166:	46bd      	mov	sp, r7
 8002168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216c:	4770      	bx	lr

0800216e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800216e:	b480      	push	{r7}
 8002170:	b083      	sub	sp, #12
 8002172:	af00      	add	r7, sp, #0
 8002174:	6078      	str	r0, [r7, #4]
 8002176:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	695b      	ldr	r3, [r3, #20]
 800217c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	431a      	orrs	r2, r3
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	615a      	str	r2, [r3, #20]
}
 8002188:	bf00      	nop
 800218a:	370c      	adds	r7, #12
 800218c:	46bd      	mov	sp, r7
 800218e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002192:	4770      	bx	lr

08002194 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002194:	b480      	push	{r7}
 8002196:	b087      	sub	sp, #28
 8002198:	af00      	add	r7, sp, #0
 800219a:	60f8      	str	r0, [r7, #12]
 800219c:	60b9      	str	r1, [r7, #8]
 800219e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	3330      	adds	r3, #48	@ 0x30
 80021a4:	461a      	mov	r2, r3
 80021a6:	68bb      	ldr	r3, [r7, #8]
 80021a8:	0a1b      	lsrs	r3, r3, #8
 80021aa:	009b      	lsls	r3, r3, #2
 80021ac:	f003 030c 	and.w	r3, r3, #12
 80021b0:	4413      	add	r3, r2
 80021b2:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	681a      	ldr	r2, [r3, #0]
 80021b8:	68bb      	ldr	r3, [r7, #8]
 80021ba:	f003 031f 	and.w	r3, r3, #31
 80021be:	211f      	movs	r1, #31
 80021c0:	fa01 f303 	lsl.w	r3, r1, r3
 80021c4:	43db      	mvns	r3, r3
 80021c6:	401a      	ands	r2, r3
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	0e9b      	lsrs	r3, r3, #26
 80021cc:	f003 011f 	and.w	r1, r3, #31
 80021d0:	68bb      	ldr	r3, [r7, #8]
 80021d2:	f003 031f 	and.w	r3, r3, #31
 80021d6:	fa01 f303 	lsl.w	r3, r1, r3
 80021da:	431a      	orrs	r2, r3
 80021dc:	697b      	ldr	r3, [r7, #20]
 80021de:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80021e0:	bf00      	nop
 80021e2:	371c      	adds	r7, #28
 80021e4:	46bd      	mov	sp, r7
 80021e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ea:	4770      	bx	lr

080021ec <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80021ec:	b480      	push	{r7}
 80021ee:	b087      	sub	sp, #28
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	60f8      	str	r0, [r7, #12]
 80021f4:	60b9      	str	r1, [r7, #8]
 80021f6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	3314      	adds	r3, #20
 80021fc:	461a      	mov	r2, r3
 80021fe:	68bb      	ldr	r3, [r7, #8]
 8002200:	0e5b      	lsrs	r3, r3, #25
 8002202:	009b      	lsls	r3, r3, #2
 8002204:	f003 0304 	and.w	r3, r3, #4
 8002208:	4413      	add	r3, r2
 800220a:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800220c:	697b      	ldr	r3, [r7, #20]
 800220e:	681a      	ldr	r2, [r3, #0]
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	0d1b      	lsrs	r3, r3, #20
 8002214:	f003 031f 	and.w	r3, r3, #31
 8002218:	2107      	movs	r1, #7
 800221a:	fa01 f303 	lsl.w	r3, r1, r3
 800221e:	43db      	mvns	r3, r3
 8002220:	401a      	ands	r2, r3
 8002222:	68bb      	ldr	r3, [r7, #8]
 8002224:	0d1b      	lsrs	r3, r3, #20
 8002226:	f003 031f 	and.w	r3, r3, #31
 800222a:	6879      	ldr	r1, [r7, #4]
 800222c:	fa01 f303 	lsl.w	r3, r1, r3
 8002230:	431a      	orrs	r2, r3
 8002232:	697b      	ldr	r3, [r7, #20]
 8002234:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002236:	bf00      	nop
 8002238:	371c      	adds	r7, #28
 800223a:	46bd      	mov	sp, r7
 800223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002240:	4770      	bx	lr
	...

08002244 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002244:	b480      	push	{r7}
 8002246:	b085      	sub	sp, #20
 8002248:	af00      	add	r7, sp, #0
 800224a:	60f8      	str	r0, [r7, #12]
 800224c:	60b9      	str	r1, [r7, #8]
 800224e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002256:	68bb      	ldr	r3, [r7, #8]
 8002258:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800225c:	43db      	mvns	r3, r3
 800225e:	401a      	ands	r2, r3
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	f003 0318 	and.w	r3, r3, #24
 8002266:	4908      	ldr	r1, [pc, #32]	@ (8002288 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002268:	40d9      	lsrs	r1, r3
 800226a:	68bb      	ldr	r3, [r7, #8]
 800226c:	400b      	ands	r3, r1
 800226e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002272:	431a      	orrs	r2, r3
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800227a:	bf00      	nop
 800227c:	3714      	adds	r7, #20
 800227e:	46bd      	mov	sp, r7
 8002280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002284:	4770      	bx	lr
 8002286:	bf00      	nop
 8002288:	0007ffff 	.word	0x0007ffff

0800228c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800228c:	b480      	push	{r7}
 800228e:	b083      	sub	sp, #12
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	689b      	ldr	r3, [r3, #8]
 8002298:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 800229c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80022a0:	687a      	ldr	r2, [r7, #4]
 80022a2:	6093      	str	r3, [r2, #8]
}
 80022a4:	bf00      	nop
 80022a6:	370c      	adds	r7, #12
 80022a8:	46bd      	mov	sp, r7
 80022aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ae:	4770      	bx	lr

080022b0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b083      	sub	sp, #12
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	689b      	ldr	r3, [r3, #8]
 80022bc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80022c0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80022c4:	d101      	bne.n	80022ca <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80022c6:	2301      	movs	r3, #1
 80022c8:	e000      	b.n	80022cc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80022ca:	2300      	movs	r3, #0
}
 80022cc:	4618      	mov	r0, r3
 80022ce:	370c      	adds	r7, #12
 80022d0:	46bd      	mov	sp, r7
 80022d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d6:	4770      	bx	lr

080022d8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80022d8:	b480      	push	{r7}
 80022da:	b083      	sub	sp, #12
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	689b      	ldr	r3, [r3, #8]
 80022e4:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80022e8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80022ec:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80022f4:	bf00      	nop
 80022f6:	370c      	adds	r7, #12
 80022f8:	46bd      	mov	sp, r7
 80022fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fe:	4770      	bx	lr

08002300 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002300:	b480      	push	{r7}
 8002302:	b083      	sub	sp, #12
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	689b      	ldr	r3, [r3, #8]
 800230c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002310:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002314:	d101      	bne.n	800231a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002316:	2301      	movs	r3, #1
 8002318:	e000      	b.n	800231c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800231a:	2300      	movs	r3, #0
}
 800231c:	4618      	mov	r0, r3
 800231e:	370c      	adds	r7, #12
 8002320:	46bd      	mov	sp, r7
 8002322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002326:	4770      	bx	lr

08002328 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002328:	b480      	push	{r7}
 800232a:	b083      	sub	sp, #12
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	689b      	ldr	r3, [r3, #8]
 8002334:	f003 0301 	and.w	r3, r3, #1
 8002338:	2b01      	cmp	r3, #1
 800233a:	d101      	bne.n	8002340 <LL_ADC_IsEnabled+0x18>
 800233c:	2301      	movs	r3, #1
 800233e:	e000      	b.n	8002342 <LL_ADC_IsEnabled+0x1a>
 8002340:	2300      	movs	r3, #0
}
 8002342:	4618      	mov	r0, r3
 8002344:	370c      	adds	r7, #12
 8002346:	46bd      	mov	sp, r7
 8002348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234c:	4770      	bx	lr

0800234e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800234e:	b480      	push	{r7}
 8002350:	b083      	sub	sp, #12
 8002352:	af00      	add	r7, sp, #0
 8002354:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	689b      	ldr	r3, [r3, #8]
 800235a:	f003 0304 	and.w	r3, r3, #4
 800235e:	2b04      	cmp	r3, #4
 8002360:	d101      	bne.n	8002366 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002362:	2301      	movs	r3, #1
 8002364:	e000      	b.n	8002368 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002366:	2300      	movs	r3, #0
}
 8002368:	4618      	mov	r0, r3
 800236a:	370c      	adds	r7, #12
 800236c:	46bd      	mov	sp, r7
 800236e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002372:	4770      	bx	lr

08002374 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002374:	b480      	push	{r7}
 8002376:	b083      	sub	sp, #12
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	f003 0308 	and.w	r3, r3, #8
 8002384:	2b08      	cmp	r3, #8
 8002386:	d101      	bne.n	800238c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002388:	2301      	movs	r3, #1
 800238a:	e000      	b.n	800238e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800238c:	2300      	movs	r3, #0
}
 800238e:	4618      	mov	r0, r3
 8002390:	370c      	adds	r7, #12
 8002392:	46bd      	mov	sp, r7
 8002394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002398:	4770      	bx	lr
	...

0800239c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800239c:	b590      	push	{r4, r7, lr}
 800239e:	b089      	sub	sp, #36	@ 0x24
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023a4:	2300      	movs	r3, #0
 80023a6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80023a8:	2300      	movs	r3, #0
 80023aa:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d101      	bne.n	80023b6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
 80023b4:	e1a9      	b.n	800270a <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	695b      	ldr	r3, [r3, #20]
 80023ba:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d109      	bne.n	80023d8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80023c4:	6878      	ldr	r0, [r7, #4]
 80023c6:	f7ff fa57 	bl	8001878 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2200      	movs	r2, #0
 80023ce:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2200      	movs	r2, #0
 80023d4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4618      	mov	r0, r3
 80023de:	f7ff ff67 	bl	80022b0 <LL_ADC_IsDeepPowerDownEnabled>
 80023e2:	4603      	mov	r3, r0
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d004      	beq.n	80023f2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4618      	mov	r0, r3
 80023ee:	f7ff ff4d 	bl	800228c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4618      	mov	r0, r3
 80023f8:	f7ff ff82 	bl	8002300 <LL_ADC_IsInternalRegulatorEnabled>
 80023fc:	4603      	mov	r3, r0
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d115      	bne.n	800242e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4618      	mov	r0, r3
 8002408:	f7ff ff66 	bl	80022d8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800240c:	4b9c      	ldr	r3, [pc, #624]	@ (8002680 <HAL_ADC_Init+0x2e4>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	099b      	lsrs	r3, r3, #6
 8002412:	4a9c      	ldr	r2, [pc, #624]	@ (8002684 <HAL_ADC_Init+0x2e8>)
 8002414:	fba2 2303 	umull	r2, r3, r2, r3
 8002418:	099b      	lsrs	r3, r3, #6
 800241a:	3301      	adds	r3, #1
 800241c:	005b      	lsls	r3, r3, #1
 800241e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002420:	e002      	b.n	8002428 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	3b01      	subs	r3, #1
 8002426:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d1f9      	bne.n	8002422 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4618      	mov	r0, r3
 8002434:	f7ff ff64 	bl	8002300 <LL_ADC_IsInternalRegulatorEnabled>
 8002438:	4603      	mov	r3, r0
 800243a:	2b00      	cmp	r3, #0
 800243c:	d10d      	bne.n	800245a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002442:	f043 0210 	orr.w	r2, r3, #16
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800244e:	f043 0201 	orr.w	r2, r3, #1
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8002456:	2301      	movs	r3, #1
 8002458:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4618      	mov	r0, r3
 8002460:	f7ff ff75 	bl	800234e <LL_ADC_REG_IsConversionOngoing>
 8002464:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800246a:	f003 0310 	and.w	r3, r3, #16
 800246e:	2b00      	cmp	r3, #0
 8002470:	f040 8142 	bne.w	80026f8 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002474:	697b      	ldr	r3, [r7, #20]
 8002476:	2b00      	cmp	r3, #0
 8002478:	f040 813e 	bne.w	80026f8 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002480:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002484:	f043 0202 	orr.w	r2, r3, #2
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4618      	mov	r0, r3
 8002492:	f7ff ff49 	bl	8002328 <LL_ADC_IsEnabled>
 8002496:	4603      	mov	r3, r0
 8002498:	2b00      	cmp	r3, #0
 800249a:	d141      	bne.n	8002520 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80024a4:	d004      	beq.n	80024b0 <HAL_ADC_Init+0x114>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4a77      	ldr	r2, [pc, #476]	@ (8002688 <HAL_ADC_Init+0x2ec>)
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d10f      	bne.n	80024d0 <HAL_ADC_Init+0x134>
 80024b0:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80024b4:	f7ff ff38 	bl	8002328 <LL_ADC_IsEnabled>
 80024b8:	4604      	mov	r4, r0
 80024ba:	4873      	ldr	r0, [pc, #460]	@ (8002688 <HAL_ADC_Init+0x2ec>)
 80024bc:	f7ff ff34 	bl	8002328 <LL_ADC_IsEnabled>
 80024c0:	4603      	mov	r3, r0
 80024c2:	4323      	orrs	r3, r4
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	bf0c      	ite	eq
 80024c8:	2301      	moveq	r3, #1
 80024ca:	2300      	movne	r3, #0
 80024cc:	b2db      	uxtb	r3, r3
 80024ce:	e012      	b.n	80024f6 <HAL_ADC_Init+0x15a>
 80024d0:	486e      	ldr	r0, [pc, #440]	@ (800268c <HAL_ADC_Init+0x2f0>)
 80024d2:	f7ff ff29 	bl	8002328 <LL_ADC_IsEnabled>
 80024d6:	4604      	mov	r4, r0
 80024d8:	486d      	ldr	r0, [pc, #436]	@ (8002690 <HAL_ADC_Init+0x2f4>)
 80024da:	f7ff ff25 	bl	8002328 <LL_ADC_IsEnabled>
 80024de:	4603      	mov	r3, r0
 80024e0:	431c      	orrs	r4, r3
 80024e2:	486c      	ldr	r0, [pc, #432]	@ (8002694 <HAL_ADC_Init+0x2f8>)
 80024e4:	f7ff ff20 	bl	8002328 <LL_ADC_IsEnabled>
 80024e8:	4603      	mov	r3, r0
 80024ea:	4323      	orrs	r3, r4
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	bf0c      	ite	eq
 80024f0:	2301      	moveq	r3, #1
 80024f2:	2300      	movne	r3, #0
 80024f4:	b2db      	uxtb	r3, r3
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d012      	beq.n	8002520 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002502:	d004      	beq.n	800250e <HAL_ADC_Init+0x172>
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a5f      	ldr	r2, [pc, #380]	@ (8002688 <HAL_ADC_Init+0x2ec>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d101      	bne.n	8002512 <HAL_ADC_Init+0x176>
 800250e:	4a62      	ldr	r2, [pc, #392]	@ (8002698 <HAL_ADC_Init+0x2fc>)
 8002510:	e000      	b.n	8002514 <HAL_ADC_Init+0x178>
 8002512:	4a62      	ldr	r2, [pc, #392]	@ (800269c <HAL_ADC_Init+0x300>)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	4619      	mov	r1, r3
 800251a:	4610      	mov	r0, r2
 800251c:	f7ff fd68 	bl	8001ff0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	7f5b      	ldrb	r3, [r3, #29]
 8002524:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800252a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002530:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002536:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800253e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002540:	4313      	orrs	r3, r2
 8002542:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800254a:	2b01      	cmp	r3, #1
 800254c:	d106      	bne.n	800255c <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002552:	3b01      	subs	r3, #1
 8002554:	045b      	lsls	r3, r3, #17
 8002556:	69ba      	ldr	r2, [r7, #24]
 8002558:	4313      	orrs	r3, r2
 800255a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002560:	2b00      	cmp	r3, #0
 8002562:	d009      	beq.n	8002578 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002568:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002570:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002572:	69ba      	ldr	r2, [r7, #24]
 8002574:	4313      	orrs	r3, r2
 8002576:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	68da      	ldr	r2, [r3, #12]
 800257e:	4b48      	ldr	r3, [pc, #288]	@ (80026a0 <HAL_ADC_Init+0x304>)
 8002580:	4013      	ands	r3, r2
 8002582:	687a      	ldr	r2, [r7, #4]
 8002584:	6812      	ldr	r2, [r2, #0]
 8002586:	69b9      	ldr	r1, [r7, #24]
 8002588:	430b      	orrs	r3, r1
 800258a:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	691b      	ldr	r3, [r3, #16]
 8002592:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	430a      	orrs	r2, r1
 80025a0:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4618      	mov	r0, r3
 80025a8:	f7ff fee4 	bl	8002374 <LL_ADC_INJ_IsConversionOngoing>
 80025ac:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d17f      	bne.n	80026b4 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80025b4:	693b      	ldr	r3, [r7, #16]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d17c      	bne.n	80026b4 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80025be:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80025c6:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80025c8:	4313      	orrs	r3, r2
 80025ca:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	68db      	ldr	r3, [r3, #12]
 80025d2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80025d6:	f023 0302 	bic.w	r3, r3, #2
 80025da:	687a      	ldr	r2, [r7, #4]
 80025dc:	6812      	ldr	r2, [r2, #0]
 80025de:	69b9      	ldr	r1, [r7, #24]
 80025e0:	430b      	orrs	r3, r1
 80025e2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	691b      	ldr	r3, [r3, #16]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d017      	beq.n	800261c <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	691a      	ldr	r2, [r3, #16]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80025fa:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002604:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002608:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800260c:	687a      	ldr	r2, [r7, #4]
 800260e:	6911      	ldr	r1, [r2, #16]
 8002610:	687a      	ldr	r2, [r7, #4]
 8002612:	6812      	ldr	r2, [r2, #0]
 8002614:	430b      	orrs	r3, r1
 8002616:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 800261a:	e013      	b.n	8002644 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	691a      	ldr	r2, [r3, #16]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800262a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002634:	687a      	ldr	r2, [r7, #4]
 8002636:	6812      	ldr	r2, [r2, #0]
 8002638:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800263c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002640:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800264a:	2b01      	cmp	r3, #1
 800264c:	d12a      	bne.n	80026a4 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	691b      	ldr	r3, [r3, #16]
 8002654:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002658:	f023 0304 	bic.w	r3, r3, #4
 800265c:	687a      	ldr	r2, [r7, #4]
 800265e:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8002660:	687a      	ldr	r2, [r7, #4]
 8002662:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002664:	4311      	orrs	r1, r2
 8002666:	687a      	ldr	r2, [r7, #4]
 8002668:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800266a:	4311      	orrs	r1, r2
 800266c:	687a      	ldr	r2, [r7, #4]
 800266e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002670:	430a      	orrs	r2, r1
 8002672:	431a      	orrs	r2, r3
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f042 0201 	orr.w	r2, r2, #1
 800267c:	611a      	str	r2, [r3, #16]
 800267e:	e019      	b.n	80026b4 <HAL_ADC_Init+0x318>
 8002680:	20000200 	.word	0x20000200
 8002684:	053e2d63 	.word	0x053e2d63
 8002688:	50000100 	.word	0x50000100
 800268c:	50000400 	.word	0x50000400
 8002690:	50000500 	.word	0x50000500
 8002694:	50000600 	.word	0x50000600
 8002698:	50000300 	.word	0x50000300
 800269c:	50000700 	.word	0x50000700
 80026a0:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	691a      	ldr	r2, [r3, #16]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f022 0201 	bic.w	r2, r2, #1
 80026b2:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	695b      	ldr	r3, [r3, #20]
 80026b8:	2b01      	cmp	r3, #1
 80026ba:	d10c      	bne.n	80026d6 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026c2:	f023 010f 	bic.w	r1, r3, #15
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6a1b      	ldr	r3, [r3, #32]
 80026ca:	1e5a      	subs	r2, r3, #1
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	430a      	orrs	r2, r1
 80026d2:	631a      	str	r2, [r3, #48]	@ 0x30
 80026d4:	e007      	b.n	80026e6 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f022 020f 	bic.w	r2, r2, #15
 80026e4:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026ea:	f023 0303 	bic.w	r3, r3, #3
 80026ee:	f043 0201 	orr.w	r2, r3, #1
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	65da      	str	r2, [r3, #92]	@ 0x5c
 80026f6:	e007      	b.n	8002708 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026fc:	f043 0210 	orr.w	r2, r3, #16
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002704:	2301      	movs	r3, #1
 8002706:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002708:	7ffb      	ldrb	r3, [r7, #31]
}
 800270a:	4618      	mov	r0, r3
 800270c:	3724      	adds	r7, #36	@ 0x24
 800270e:	46bd      	mov	sp, r7
 8002710:	bd90      	pop	{r4, r7, pc}
 8002712:	bf00      	nop

08002714 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b0b6      	sub	sp, #216	@ 0xd8
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
 800271c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800271e:	2300      	movs	r3, #0
 8002720:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002724:	2300      	movs	r3, #0
 8002726:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800272e:	2b01      	cmp	r3, #1
 8002730:	d102      	bne.n	8002738 <HAL_ADC_ConfigChannel+0x24>
 8002732:	2302      	movs	r3, #2
 8002734:	f000 bc13 	b.w	8002f5e <HAL_ADC_ConfigChannel+0x84a>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2201      	movs	r2, #1
 800273c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4618      	mov	r0, r3
 8002746:	f7ff fe02 	bl	800234e <LL_ADC_REG_IsConversionOngoing>
 800274a:	4603      	mov	r3, r0
 800274c:	2b00      	cmp	r3, #0
 800274e:	f040 83f3 	bne.w	8002f38 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6818      	ldr	r0, [r3, #0]
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	6859      	ldr	r1, [r3, #4]
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	461a      	mov	r2, r3
 8002760:	f7ff fd18 	bl	8002194 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4618      	mov	r0, r3
 800276a:	f7ff fdf0 	bl	800234e <LL_ADC_REG_IsConversionOngoing>
 800276e:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4618      	mov	r0, r3
 8002778:	f7ff fdfc 	bl	8002374 <LL_ADC_INJ_IsConversionOngoing>
 800277c:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002780:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002784:	2b00      	cmp	r3, #0
 8002786:	f040 81d9 	bne.w	8002b3c <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800278a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800278e:	2b00      	cmp	r3, #0
 8002790:	f040 81d4 	bne.w	8002b3c <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	689b      	ldr	r3, [r3, #8]
 8002798:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800279c:	d10f      	bne.n	80027be <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6818      	ldr	r0, [r3, #0]
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	2200      	movs	r2, #0
 80027a8:	4619      	mov	r1, r3
 80027aa:	f7ff fd1f 	bl	80021ec <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80027b6:	4618      	mov	r0, r3
 80027b8:	f7ff fcd9 	bl	800216e <LL_ADC_SetSamplingTimeCommonConfig>
 80027bc:	e00e      	b.n	80027dc <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6818      	ldr	r0, [r3, #0]
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	6819      	ldr	r1, [r3, #0]
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	689b      	ldr	r3, [r3, #8]
 80027ca:	461a      	mov	r2, r3
 80027cc:	f7ff fd0e 	bl	80021ec <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	2100      	movs	r1, #0
 80027d6:	4618      	mov	r0, r3
 80027d8:	f7ff fcc9 	bl	800216e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	695a      	ldr	r2, [r3, #20]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	68db      	ldr	r3, [r3, #12]
 80027e6:	08db      	lsrs	r3, r3, #3
 80027e8:	f003 0303 	and.w	r3, r3, #3
 80027ec:	005b      	lsls	r3, r3, #1
 80027ee:	fa02 f303 	lsl.w	r3, r2, r3
 80027f2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	691b      	ldr	r3, [r3, #16]
 80027fa:	2b04      	cmp	r3, #4
 80027fc:	d022      	beq.n	8002844 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6818      	ldr	r0, [r3, #0]
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	6919      	ldr	r1, [r3, #16]
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	681a      	ldr	r2, [r3, #0]
 800280a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800280e:	f7ff fc23 	bl	8002058 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6818      	ldr	r0, [r3, #0]
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	6919      	ldr	r1, [r3, #16]
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	699b      	ldr	r3, [r3, #24]
 800281e:	461a      	mov	r2, r3
 8002820:	f7ff fc6f 	bl	8002102 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6818      	ldr	r0, [r3, #0]
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002830:	2b01      	cmp	r3, #1
 8002832:	d102      	bne.n	800283a <HAL_ADC_ConfigChannel+0x126>
 8002834:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002838:	e000      	b.n	800283c <HAL_ADC_ConfigChannel+0x128>
 800283a:	2300      	movs	r3, #0
 800283c:	461a      	mov	r2, r3
 800283e:	f7ff fc7b 	bl	8002138 <LL_ADC_SetOffsetSaturation>
 8002842:	e17b      	b.n	8002b3c <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	2100      	movs	r1, #0
 800284a:	4618      	mov	r0, r3
 800284c:	f7ff fc28 	bl	80020a0 <LL_ADC_GetOffsetChannel>
 8002850:	4603      	mov	r3, r0
 8002852:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002856:	2b00      	cmp	r3, #0
 8002858:	d10a      	bne.n	8002870 <HAL_ADC_ConfigChannel+0x15c>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	2100      	movs	r1, #0
 8002860:	4618      	mov	r0, r3
 8002862:	f7ff fc1d 	bl	80020a0 <LL_ADC_GetOffsetChannel>
 8002866:	4603      	mov	r3, r0
 8002868:	0e9b      	lsrs	r3, r3, #26
 800286a:	f003 021f 	and.w	r2, r3, #31
 800286e:	e01e      	b.n	80028ae <HAL_ADC_ConfigChannel+0x19a>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	2100      	movs	r1, #0
 8002876:	4618      	mov	r0, r3
 8002878:	f7ff fc12 	bl	80020a0 <LL_ADC_GetOffsetChannel>
 800287c:	4603      	mov	r3, r0
 800287e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002882:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002886:	fa93 f3a3 	rbit	r3, r3
 800288a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800288e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002892:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002896:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800289a:	2b00      	cmp	r3, #0
 800289c:	d101      	bne.n	80028a2 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 800289e:	2320      	movs	r3, #32
 80028a0:	e004      	b.n	80028ac <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 80028a2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80028a6:	fab3 f383 	clz	r3, r3
 80028aa:	b2db      	uxtb	r3, r3
 80028ac:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d105      	bne.n	80028c6 <HAL_ADC_ConfigChannel+0x1b2>
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	0e9b      	lsrs	r3, r3, #26
 80028c0:	f003 031f 	and.w	r3, r3, #31
 80028c4:	e018      	b.n	80028f8 <HAL_ADC_ConfigChannel+0x1e4>
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028ce:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80028d2:	fa93 f3a3 	rbit	r3, r3
 80028d6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 80028da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80028de:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 80028e2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d101      	bne.n	80028ee <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 80028ea:	2320      	movs	r3, #32
 80028ec:	e004      	b.n	80028f8 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 80028ee:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80028f2:	fab3 f383 	clz	r3, r3
 80028f6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80028f8:	429a      	cmp	r2, r3
 80028fa:	d106      	bne.n	800290a <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	2200      	movs	r2, #0
 8002902:	2100      	movs	r1, #0
 8002904:	4618      	mov	r0, r3
 8002906:	f7ff fbe1 	bl	80020cc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	2101      	movs	r1, #1
 8002910:	4618      	mov	r0, r3
 8002912:	f7ff fbc5 	bl	80020a0 <LL_ADC_GetOffsetChannel>
 8002916:	4603      	mov	r3, r0
 8002918:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800291c:	2b00      	cmp	r3, #0
 800291e:	d10a      	bne.n	8002936 <HAL_ADC_ConfigChannel+0x222>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	2101      	movs	r1, #1
 8002926:	4618      	mov	r0, r3
 8002928:	f7ff fbba 	bl	80020a0 <LL_ADC_GetOffsetChannel>
 800292c:	4603      	mov	r3, r0
 800292e:	0e9b      	lsrs	r3, r3, #26
 8002930:	f003 021f 	and.w	r2, r3, #31
 8002934:	e01e      	b.n	8002974 <HAL_ADC_ConfigChannel+0x260>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	2101      	movs	r1, #1
 800293c:	4618      	mov	r0, r3
 800293e:	f7ff fbaf 	bl	80020a0 <LL_ADC_GetOffsetChannel>
 8002942:	4603      	mov	r3, r0
 8002944:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002948:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800294c:	fa93 f3a3 	rbit	r3, r3
 8002950:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8002954:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002958:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 800295c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002960:	2b00      	cmp	r3, #0
 8002962:	d101      	bne.n	8002968 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8002964:	2320      	movs	r3, #32
 8002966:	e004      	b.n	8002972 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8002968:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800296c:	fab3 f383 	clz	r3, r3
 8002970:	b2db      	uxtb	r3, r3
 8002972:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800297c:	2b00      	cmp	r3, #0
 800297e:	d105      	bne.n	800298c <HAL_ADC_ConfigChannel+0x278>
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	0e9b      	lsrs	r3, r3, #26
 8002986:	f003 031f 	and.w	r3, r3, #31
 800298a:	e018      	b.n	80029be <HAL_ADC_ConfigChannel+0x2aa>
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002994:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002998:	fa93 f3a3 	rbit	r3, r3
 800299c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 80029a0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80029a4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 80029a8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d101      	bne.n	80029b4 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 80029b0:	2320      	movs	r3, #32
 80029b2:	e004      	b.n	80029be <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 80029b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80029b8:	fab3 f383 	clz	r3, r3
 80029bc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80029be:	429a      	cmp	r2, r3
 80029c0:	d106      	bne.n	80029d0 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	2200      	movs	r2, #0
 80029c8:	2101      	movs	r1, #1
 80029ca:	4618      	mov	r0, r3
 80029cc:	f7ff fb7e 	bl	80020cc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	2102      	movs	r1, #2
 80029d6:	4618      	mov	r0, r3
 80029d8:	f7ff fb62 	bl	80020a0 <LL_ADC_GetOffsetChannel>
 80029dc:	4603      	mov	r3, r0
 80029de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d10a      	bne.n	80029fc <HAL_ADC_ConfigChannel+0x2e8>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	2102      	movs	r1, #2
 80029ec:	4618      	mov	r0, r3
 80029ee:	f7ff fb57 	bl	80020a0 <LL_ADC_GetOffsetChannel>
 80029f2:	4603      	mov	r3, r0
 80029f4:	0e9b      	lsrs	r3, r3, #26
 80029f6:	f003 021f 	and.w	r2, r3, #31
 80029fa:	e01e      	b.n	8002a3a <HAL_ADC_ConfigChannel+0x326>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	2102      	movs	r1, #2
 8002a02:	4618      	mov	r0, r3
 8002a04:	f7ff fb4c 	bl	80020a0 <LL_ADC_GetOffsetChannel>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a0e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002a12:	fa93 f3a3 	rbit	r3, r3
 8002a16:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8002a1a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002a1e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8002a22:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d101      	bne.n	8002a2e <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8002a2a:	2320      	movs	r3, #32
 8002a2c:	e004      	b.n	8002a38 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8002a2e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002a32:	fab3 f383 	clz	r3, r3
 8002a36:	b2db      	uxtb	r3, r3
 8002a38:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d105      	bne.n	8002a52 <HAL_ADC_ConfigChannel+0x33e>
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	0e9b      	lsrs	r3, r3, #26
 8002a4c:	f003 031f 	and.w	r3, r3, #31
 8002a50:	e016      	b.n	8002a80 <HAL_ADC_ConfigChannel+0x36c>
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a5a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002a5e:	fa93 f3a3 	rbit	r3, r3
 8002a62:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8002a64:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002a66:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8002a6a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d101      	bne.n	8002a76 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8002a72:	2320      	movs	r3, #32
 8002a74:	e004      	b.n	8002a80 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8002a76:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002a7a:	fab3 f383 	clz	r3, r3
 8002a7e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002a80:	429a      	cmp	r2, r3
 8002a82:	d106      	bne.n	8002a92 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	2102      	movs	r1, #2
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f7ff fb1d 	bl	80020cc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	2103      	movs	r1, #3
 8002a98:	4618      	mov	r0, r3
 8002a9a:	f7ff fb01 	bl	80020a0 <LL_ADC_GetOffsetChannel>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d10a      	bne.n	8002abe <HAL_ADC_ConfigChannel+0x3aa>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	2103      	movs	r1, #3
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f7ff faf6 	bl	80020a0 <LL_ADC_GetOffsetChannel>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	0e9b      	lsrs	r3, r3, #26
 8002ab8:	f003 021f 	and.w	r2, r3, #31
 8002abc:	e017      	b.n	8002aee <HAL_ADC_ConfigChannel+0x3da>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	2103      	movs	r1, #3
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f7ff faeb 	bl	80020a0 <LL_ADC_GetOffsetChannel>
 8002aca:	4603      	mov	r3, r0
 8002acc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ace:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002ad0:	fa93 f3a3 	rbit	r3, r3
 8002ad4:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8002ad6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002ad8:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8002ada:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d101      	bne.n	8002ae4 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8002ae0:	2320      	movs	r3, #32
 8002ae2:	e003      	b.n	8002aec <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8002ae4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002ae6:	fab3 f383 	clz	r3, r3
 8002aea:	b2db      	uxtb	r3, r3
 8002aec:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d105      	bne.n	8002b06 <HAL_ADC_ConfigChannel+0x3f2>
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	0e9b      	lsrs	r3, r3, #26
 8002b00:	f003 031f 	and.w	r3, r3, #31
 8002b04:	e011      	b.n	8002b2a <HAL_ADC_ConfigChannel+0x416>
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b0c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002b0e:	fa93 f3a3 	rbit	r3, r3
 8002b12:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8002b14:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002b16:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8002b18:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d101      	bne.n	8002b22 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8002b1e:	2320      	movs	r3, #32
 8002b20:	e003      	b.n	8002b2a <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8002b22:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002b24:	fab3 f383 	clz	r3, r3
 8002b28:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002b2a:	429a      	cmp	r2, r3
 8002b2c:	d106      	bne.n	8002b3c <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	2200      	movs	r2, #0
 8002b34:	2103      	movs	r1, #3
 8002b36:	4618      	mov	r0, r3
 8002b38:	f7ff fac8 	bl	80020cc <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4618      	mov	r0, r3
 8002b42:	f7ff fbf1 	bl	8002328 <LL_ADC_IsEnabled>
 8002b46:	4603      	mov	r3, r0
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	f040 813d 	bne.w	8002dc8 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6818      	ldr	r0, [r3, #0]
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	6819      	ldr	r1, [r3, #0]
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	68db      	ldr	r3, [r3, #12]
 8002b5a:	461a      	mov	r2, r3
 8002b5c:	f7ff fb72 	bl	8002244 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	68db      	ldr	r3, [r3, #12]
 8002b64:	4aa2      	ldr	r2, [pc, #648]	@ (8002df0 <HAL_ADC_ConfigChannel+0x6dc>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	f040 812e 	bne.w	8002dc8 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d10b      	bne.n	8002b94 <HAL_ADC_ConfigChannel+0x480>
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	0e9b      	lsrs	r3, r3, #26
 8002b82:	3301      	adds	r3, #1
 8002b84:	f003 031f 	and.w	r3, r3, #31
 8002b88:	2b09      	cmp	r3, #9
 8002b8a:	bf94      	ite	ls
 8002b8c:	2301      	movls	r3, #1
 8002b8e:	2300      	movhi	r3, #0
 8002b90:	b2db      	uxtb	r3, r3
 8002b92:	e019      	b.n	8002bc8 <HAL_ADC_ConfigChannel+0x4b4>
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b9a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002b9c:	fa93 f3a3 	rbit	r3, r3
 8002ba0:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8002ba2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002ba4:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8002ba6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d101      	bne.n	8002bb0 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8002bac:	2320      	movs	r3, #32
 8002bae:	e003      	b.n	8002bb8 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8002bb0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002bb2:	fab3 f383 	clz	r3, r3
 8002bb6:	b2db      	uxtb	r3, r3
 8002bb8:	3301      	adds	r3, #1
 8002bba:	f003 031f 	and.w	r3, r3, #31
 8002bbe:	2b09      	cmp	r3, #9
 8002bc0:	bf94      	ite	ls
 8002bc2:	2301      	movls	r3, #1
 8002bc4:	2300      	movhi	r3, #0
 8002bc6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d079      	beq.n	8002cc0 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d107      	bne.n	8002be8 <HAL_ADC_ConfigChannel+0x4d4>
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	0e9b      	lsrs	r3, r3, #26
 8002bde:	3301      	adds	r3, #1
 8002be0:	069b      	lsls	r3, r3, #26
 8002be2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002be6:	e015      	b.n	8002c14 <HAL_ADC_ConfigChannel+0x500>
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002bf0:	fa93 f3a3 	rbit	r3, r3
 8002bf4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002bf6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002bf8:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8002bfa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d101      	bne.n	8002c04 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8002c00:	2320      	movs	r3, #32
 8002c02:	e003      	b.n	8002c0c <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8002c04:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c06:	fab3 f383 	clz	r3, r3
 8002c0a:	b2db      	uxtb	r3, r3
 8002c0c:	3301      	adds	r3, #1
 8002c0e:	069b      	lsls	r3, r3, #26
 8002c10:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d109      	bne.n	8002c34 <HAL_ADC_ConfigChannel+0x520>
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	0e9b      	lsrs	r3, r3, #26
 8002c26:	3301      	adds	r3, #1
 8002c28:	f003 031f 	and.w	r3, r3, #31
 8002c2c:	2101      	movs	r1, #1
 8002c2e:	fa01 f303 	lsl.w	r3, r1, r3
 8002c32:	e017      	b.n	8002c64 <HAL_ADC_ConfigChannel+0x550>
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c3a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002c3c:	fa93 f3a3 	rbit	r3, r3
 8002c40:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8002c42:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002c44:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8002c46:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d101      	bne.n	8002c50 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8002c4c:	2320      	movs	r3, #32
 8002c4e:	e003      	b.n	8002c58 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8002c50:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002c52:	fab3 f383 	clz	r3, r3
 8002c56:	b2db      	uxtb	r3, r3
 8002c58:	3301      	adds	r3, #1
 8002c5a:	f003 031f 	and.w	r3, r3, #31
 8002c5e:	2101      	movs	r1, #1
 8002c60:	fa01 f303 	lsl.w	r3, r1, r3
 8002c64:	ea42 0103 	orr.w	r1, r2, r3
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d10a      	bne.n	8002c8a <HAL_ADC_ConfigChannel+0x576>
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	0e9b      	lsrs	r3, r3, #26
 8002c7a:	3301      	adds	r3, #1
 8002c7c:	f003 021f 	and.w	r2, r3, #31
 8002c80:	4613      	mov	r3, r2
 8002c82:	005b      	lsls	r3, r3, #1
 8002c84:	4413      	add	r3, r2
 8002c86:	051b      	lsls	r3, r3, #20
 8002c88:	e018      	b.n	8002cbc <HAL_ADC_ConfigChannel+0x5a8>
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c92:	fa93 f3a3 	rbit	r3, r3
 8002c96:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002c98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8002c9c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d101      	bne.n	8002ca6 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8002ca2:	2320      	movs	r3, #32
 8002ca4:	e003      	b.n	8002cae <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8002ca6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002ca8:	fab3 f383 	clz	r3, r3
 8002cac:	b2db      	uxtb	r3, r3
 8002cae:	3301      	adds	r3, #1
 8002cb0:	f003 021f 	and.w	r2, r3, #31
 8002cb4:	4613      	mov	r3, r2
 8002cb6:	005b      	lsls	r3, r3, #1
 8002cb8:	4413      	add	r3, r2
 8002cba:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002cbc:	430b      	orrs	r3, r1
 8002cbe:	e07e      	b.n	8002dbe <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d107      	bne.n	8002cdc <HAL_ADC_ConfigChannel+0x5c8>
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	0e9b      	lsrs	r3, r3, #26
 8002cd2:	3301      	adds	r3, #1
 8002cd4:	069b      	lsls	r3, r3, #26
 8002cd6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002cda:	e015      	b.n	8002d08 <HAL_ADC_ConfigChannel+0x5f4>
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ce2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ce4:	fa93 f3a3 	rbit	r3, r3
 8002ce8:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8002cea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cec:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8002cee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d101      	bne.n	8002cf8 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8002cf4:	2320      	movs	r3, #32
 8002cf6:	e003      	b.n	8002d00 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8002cf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cfa:	fab3 f383 	clz	r3, r3
 8002cfe:	b2db      	uxtb	r3, r3
 8002d00:	3301      	adds	r3, #1
 8002d02:	069b      	lsls	r3, r3, #26
 8002d04:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d109      	bne.n	8002d28 <HAL_ADC_ConfigChannel+0x614>
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	0e9b      	lsrs	r3, r3, #26
 8002d1a:	3301      	adds	r3, #1
 8002d1c:	f003 031f 	and.w	r3, r3, #31
 8002d20:	2101      	movs	r1, #1
 8002d22:	fa01 f303 	lsl.w	r3, r1, r3
 8002d26:	e017      	b.n	8002d58 <HAL_ADC_ConfigChannel+0x644>
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d2e:	6a3b      	ldr	r3, [r7, #32]
 8002d30:	fa93 f3a3 	rbit	r3, r3
 8002d34:	61fb      	str	r3, [r7, #28]
  return result;
 8002d36:	69fb      	ldr	r3, [r7, #28]
 8002d38:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002d3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d101      	bne.n	8002d44 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8002d40:	2320      	movs	r3, #32
 8002d42:	e003      	b.n	8002d4c <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8002d44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d46:	fab3 f383 	clz	r3, r3
 8002d4a:	b2db      	uxtb	r3, r3
 8002d4c:	3301      	adds	r3, #1
 8002d4e:	f003 031f 	and.w	r3, r3, #31
 8002d52:	2101      	movs	r1, #1
 8002d54:	fa01 f303 	lsl.w	r3, r1, r3
 8002d58:	ea42 0103 	orr.w	r1, r2, r3
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d10d      	bne.n	8002d84 <HAL_ADC_ConfigChannel+0x670>
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	0e9b      	lsrs	r3, r3, #26
 8002d6e:	3301      	adds	r3, #1
 8002d70:	f003 021f 	and.w	r2, r3, #31
 8002d74:	4613      	mov	r3, r2
 8002d76:	005b      	lsls	r3, r3, #1
 8002d78:	4413      	add	r3, r2
 8002d7a:	3b1e      	subs	r3, #30
 8002d7c:	051b      	lsls	r3, r3, #20
 8002d7e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002d82:	e01b      	b.n	8002dbc <HAL_ADC_ConfigChannel+0x6a8>
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d8a:	697b      	ldr	r3, [r7, #20]
 8002d8c:	fa93 f3a3 	rbit	r3, r3
 8002d90:	613b      	str	r3, [r7, #16]
  return result;
 8002d92:	693b      	ldr	r3, [r7, #16]
 8002d94:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002d96:	69bb      	ldr	r3, [r7, #24]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d101      	bne.n	8002da0 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8002d9c:	2320      	movs	r3, #32
 8002d9e:	e003      	b.n	8002da8 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8002da0:	69bb      	ldr	r3, [r7, #24]
 8002da2:	fab3 f383 	clz	r3, r3
 8002da6:	b2db      	uxtb	r3, r3
 8002da8:	3301      	adds	r3, #1
 8002daa:	f003 021f 	and.w	r2, r3, #31
 8002dae:	4613      	mov	r3, r2
 8002db0:	005b      	lsls	r3, r3, #1
 8002db2:	4413      	add	r3, r2
 8002db4:	3b1e      	subs	r3, #30
 8002db6:	051b      	lsls	r3, r3, #20
 8002db8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002dbc:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002dbe:	683a      	ldr	r2, [r7, #0]
 8002dc0:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002dc2:	4619      	mov	r1, r3
 8002dc4:	f7ff fa12 	bl	80021ec <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	681a      	ldr	r2, [r3, #0]
 8002dcc:	4b09      	ldr	r3, [pc, #36]	@ (8002df4 <HAL_ADC_ConfigChannel+0x6e0>)
 8002dce:	4013      	ands	r3, r2
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	f000 80be 	beq.w	8002f52 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002dde:	d004      	beq.n	8002dea <HAL_ADC_ConfigChannel+0x6d6>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a04      	ldr	r2, [pc, #16]	@ (8002df8 <HAL_ADC_ConfigChannel+0x6e4>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d10a      	bne.n	8002e00 <HAL_ADC_ConfigChannel+0x6ec>
 8002dea:	4b04      	ldr	r3, [pc, #16]	@ (8002dfc <HAL_ADC_ConfigChannel+0x6e8>)
 8002dec:	e009      	b.n	8002e02 <HAL_ADC_ConfigChannel+0x6ee>
 8002dee:	bf00      	nop
 8002df0:	407f0000 	.word	0x407f0000
 8002df4:	80080000 	.word	0x80080000
 8002df8:	50000100 	.word	0x50000100
 8002dfc:	50000300 	.word	0x50000300
 8002e00:	4b59      	ldr	r3, [pc, #356]	@ (8002f68 <HAL_ADC_ConfigChannel+0x854>)
 8002e02:	4618      	mov	r0, r3
 8002e04:	f7ff f91a 	bl	800203c <LL_ADC_GetCommonPathInternalCh>
 8002e08:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a56      	ldr	r2, [pc, #344]	@ (8002f6c <HAL_ADC_ConfigChannel+0x858>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d004      	beq.n	8002e20 <HAL_ADC_ConfigChannel+0x70c>
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4a55      	ldr	r2, [pc, #340]	@ (8002f70 <HAL_ADC_ConfigChannel+0x85c>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d13a      	bne.n	8002e96 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002e20:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002e24:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d134      	bne.n	8002e96 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002e34:	d005      	beq.n	8002e42 <HAL_ADC_ConfigChannel+0x72e>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a4e      	ldr	r2, [pc, #312]	@ (8002f74 <HAL_ADC_ConfigChannel+0x860>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	f040 8085 	bne.w	8002f4c <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002e4a:	d004      	beq.n	8002e56 <HAL_ADC_ConfigChannel+0x742>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a49      	ldr	r2, [pc, #292]	@ (8002f78 <HAL_ADC_ConfigChannel+0x864>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d101      	bne.n	8002e5a <HAL_ADC_ConfigChannel+0x746>
 8002e56:	4a49      	ldr	r2, [pc, #292]	@ (8002f7c <HAL_ADC_ConfigChannel+0x868>)
 8002e58:	e000      	b.n	8002e5c <HAL_ADC_ConfigChannel+0x748>
 8002e5a:	4a43      	ldr	r2, [pc, #268]	@ (8002f68 <HAL_ADC_ConfigChannel+0x854>)
 8002e5c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002e60:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002e64:	4619      	mov	r1, r3
 8002e66:	4610      	mov	r0, r2
 8002e68:	f7ff f8d5 	bl	8002016 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002e6c:	4b44      	ldr	r3, [pc, #272]	@ (8002f80 <HAL_ADC_ConfigChannel+0x86c>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	099b      	lsrs	r3, r3, #6
 8002e72:	4a44      	ldr	r2, [pc, #272]	@ (8002f84 <HAL_ADC_ConfigChannel+0x870>)
 8002e74:	fba2 2303 	umull	r2, r3, r2, r3
 8002e78:	099b      	lsrs	r3, r3, #6
 8002e7a:	1c5a      	adds	r2, r3, #1
 8002e7c:	4613      	mov	r3, r2
 8002e7e:	005b      	lsls	r3, r3, #1
 8002e80:	4413      	add	r3, r2
 8002e82:	009b      	lsls	r3, r3, #2
 8002e84:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002e86:	e002      	b.n	8002e8e <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	3b01      	subs	r3, #1
 8002e8c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d1f9      	bne.n	8002e88 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002e94:	e05a      	b.n	8002f4c <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4a3b      	ldr	r2, [pc, #236]	@ (8002f88 <HAL_ADC_ConfigChannel+0x874>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d125      	bne.n	8002eec <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002ea0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002ea4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d11f      	bne.n	8002eec <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a31      	ldr	r2, [pc, #196]	@ (8002f78 <HAL_ADC_ConfigChannel+0x864>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d104      	bne.n	8002ec0 <HAL_ADC_ConfigChannel+0x7ac>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a34      	ldr	r2, [pc, #208]	@ (8002f8c <HAL_ADC_ConfigChannel+0x878>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d047      	beq.n	8002f50 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002ec8:	d004      	beq.n	8002ed4 <HAL_ADC_ConfigChannel+0x7c0>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a2a      	ldr	r2, [pc, #168]	@ (8002f78 <HAL_ADC_ConfigChannel+0x864>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d101      	bne.n	8002ed8 <HAL_ADC_ConfigChannel+0x7c4>
 8002ed4:	4a29      	ldr	r2, [pc, #164]	@ (8002f7c <HAL_ADC_ConfigChannel+0x868>)
 8002ed6:	e000      	b.n	8002eda <HAL_ADC_ConfigChannel+0x7c6>
 8002ed8:	4a23      	ldr	r2, [pc, #140]	@ (8002f68 <HAL_ADC_ConfigChannel+0x854>)
 8002eda:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002ede:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002ee2:	4619      	mov	r1, r3
 8002ee4:	4610      	mov	r0, r2
 8002ee6:	f7ff f896 	bl	8002016 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002eea:	e031      	b.n	8002f50 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a27      	ldr	r2, [pc, #156]	@ (8002f90 <HAL_ADC_ConfigChannel+0x87c>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d12d      	bne.n	8002f52 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002ef6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002efa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d127      	bne.n	8002f52 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a1c      	ldr	r2, [pc, #112]	@ (8002f78 <HAL_ADC_ConfigChannel+0x864>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d022      	beq.n	8002f52 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002f14:	d004      	beq.n	8002f20 <HAL_ADC_ConfigChannel+0x80c>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a17      	ldr	r2, [pc, #92]	@ (8002f78 <HAL_ADC_ConfigChannel+0x864>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d101      	bne.n	8002f24 <HAL_ADC_ConfigChannel+0x810>
 8002f20:	4a16      	ldr	r2, [pc, #88]	@ (8002f7c <HAL_ADC_ConfigChannel+0x868>)
 8002f22:	e000      	b.n	8002f26 <HAL_ADC_ConfigChannel+0x812>
 8002f24:	4a10      	ldr	r2, [pc, #64]	@ (8002f68 <HAL_ADC_ConfigChannel+0x854>)
 8002f26:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002f2a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002f2e:	4619      	mov	r1, r3
 8002f30:	4610      	mov	r0, r2
 8002f32:	f7ff f870 	bl	8002016 <LL_ADC_SetCommonPathInternalCh>
 8002f36:	e00c      	b.n	8002f52 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f3c:	f043 0220 	orr.w	r2, r3, #32
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002f44:	2301      	movs	r3, #1
 8002f46:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8002f4a:	e002      	b.n	8002f52 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002f4c:	bf00      	nop
 8002f4e:	e000      	b.n	8002f52 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002f50:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2200      	movs	r2, #0
 8002f56:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8002f5a:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002f5e:	4618      	mov	r0, r3
 8002f60:	37d8      	adds	r7, #216	@ 0xd8
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}
 8002f66:	bf00      	nop
 8002f68:	50000700 	.word	0x50000700
 8002f6c:	c3210000 	.word	0xc3210000
 8002f70:	90c00010 	.word	0x90c00010
 8002f74:	50000600 	.word	0x50000600
 8002f78:	50000100 	.word	0x50000100
 8002f7c:	50000300 	.word	0x50000300
 8002f80:	20000200 	.word	0x20000200
 8002f84:	053e2d63 	.word	0x053e2d63
 8002f88:	c7520000 	.word	0xc7520000
 8002f8c:	50000500 	.word	0x50000500
 8002f90:	cb840000 	.word	0xcb840000

08002f94 <LL_ADC_IsEnabled>:
{
 8002f94:	b480      	push	{r7}
 8002f96:	b083      	sub	sp, #12
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	689b      	ldr	r3, [r3, #8]
 8002fa0:	f003 0301 	and.w	r3, r3, #1
 8002fa4:	2b01      	cmp	r3, #1
 8002fa6:	d101      	bne.n	8002fac <LL_ADC_IsEnabled+0x18>
 8002fa8:	2301      	movs	r3, #1
 8002faa:	e000      	b.n	8002fae <LL_ADC_IsEnabled+0x1a>
 8002fac:	2300      	movs	r3, #0
}
 8002fae:	4618      	mov	r0, r3
 8002fb0:	370c      	adds	r7, #12
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb8:	4770      	bx	lr

08002fba <LL_ADC_REG_IsConversionOngoing>:
{
 8002fba:	b480      	push	{r7}
 8002fbc:	b083      	sub	sp, #12
 8002fbe:	af00      	add	r7, sp, #0
 8002fc0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	689b      	ldr	r3, [r3, #8]
 8002fc6:	f003 0304 	and.w	r3, r3, #4
 8002fca:	2b04      	cmp	r3, #4
 8002fcc:	d101      	bne.n	8002fd2 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e000      	b.n	8002fd4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002fd2:	2300      	movs	r3, #0
}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	370c      	adds	r7, #12
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fde:	4770      	bx	lr

08002fe0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002fe0:	b590      	push	{r4, r7, lr}
 8002fe2:	b0a1      	sub	sp, #132	@ 0x84
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
 8002fe8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002fea:	2300      	movs	r3, #0
 8002fec:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002ff6:	2b01      	cmp	r3, #1
 8002ff8:	d101      	bne.n	8002ffe <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002ffa:	2302      	movs	r3, #2
 8002ffc:	e0e7      	b.n	80031ce <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2201      	movs	r2, #1
 8003002:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8003006:	2300      	movs	r3, #0
 8003008:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800300a:	2300      	movs	r3, #0
 800300c:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003016:	d102      	bne.n	800301e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003018:	4b6f      	ldr	r3, [pc, #444]	@ (80031d8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800301a:	60bb      	str	r3, [r7, #8]
 800301c:	e009      	b.n	8003032 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4a6e      	ldr	r2, [pc, #440]	@ (80031dc <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d102      	bne.n	800302e <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8003028:	4b6d      	ldr	r3, [pc, #436]	@ (80031e0 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800302a:	60bb      	str	r3, [r7, #8]
 800302c:	e001      	b.n	8003032 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800302e:	2300      	movs	r3, #0
 8003030:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8003032:	68bb      	ldr	r3, [r7, #8]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d10b      	bne.n	8003050 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800303c:	f043 0220 	orr.w	r2, r3, #32
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2200      	movs	r2, #0
 8003048:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 800304c:	2301      	movs	r3, #1
 800304e:	e0be      	b.n	80031ce <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003050:	68bb      	ldr	r3, [r7, #8]
 8003052:	4618      	mov	r0, r3
 8003054:	f7ff ffb1 	bl	8002fba <LL_ADC_REG_IsConversionOngoing>
 8003058:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4618      	mov	r0, r3
 8003060:	f7ff ffab 	bl	8002fba <LL_ADC_REG_IsConversionOngoing>
 8003064:	4603      	mov	r3, r0
 8003066:	2b00      	cmp	r3, #0
 8003068:	f040 80a0 	bne.w	80031ac <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800306c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800306e:	2b00      	cmp	r3, #0
 8003070:	f040 809c 	bne.w	80031ac <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800307c:	d004      	beq.n	8003088 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a55      	ldr	r2, [pc, #340]	@ (80031d8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d101      	bne.n	800308c <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8003088:	4b56      	ldr	r3, [pc, #344]	@ (80031e4 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 800308a:	e000      	b.n	800308e <HAL_ADCEx_MultiModeConfigChannel+0xae>
 800308c:	4b56      	ldr	r3, [pc, #344]	@ (80031e8 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 800308e:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d04b      	beq.n	8003130 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003098:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800309a:	689b      	ldr	r3, [r3, #8]
 800309c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	6859      	ldr	r1, [r3, #4]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80030aa:	035b      	lsls	r3, r3, #13
 80030ac:	430b      	orrs	r3, r1
 80030ae:	431a      	orrs	r2, r3
 80030b0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80030b2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80030bc:	d004      	beq.n	80030c8 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a45      	ldr	r2, [pc, #276]	@ (80031d8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d10f      	bne.n	80030e8 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 80030c8:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80030cc:	f7ff ff62 	bl	8002f94 <LL_ADC_IsEnabled>
 80030d0:	4604      	mov	r4, r0
 80030d2:	4841      	ldr	r0, [pc, #260]	@ (80031d8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80030d4:	f7ff ff5e 	bl	8002f94 <LL_ADC_IsEnabled>
 80030d8:	4603      	mov	r3, r0
 80030da:	4323      	orrs	r3, r4
 80030dc:	2b00      	cmp	r3, #0
 80030de:	bf0c      	ite	eq
 80030e0:	2301      	moveq	r3, #1
 80030e2:	2300      	movne	r3, #0
 80030e4:	b2db      	uxtb	r3, r3
 80030e6:	e012      	b.n	800310e <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 80030e8:	483c      	ldr	r0, [pc, #240]	@ (80031dc <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80030ea:	f7ff ff53 	bl	8002f94 <LL_ADC_IsEnabled>
 80030ee:	4604      	mov	r4, r0
 80030f0:	483b      	ldr	r0, [pc, #236]	@ (80031e0 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80030f2:	f7ff ff4f 	bl	8002f94 <LL_ADC_IsEnabled>
 80030f6:	4603      	mov	r3, r0
 80030f8:	431c      	orrs	r4, r3
 80030fa:	483c      	ldr	r0, [pc, #240]	@ (80031ec <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80030fc:	f7ff ff4a 	bl	8002f94 <LL_ADC_IsEnabled>
 8003100:	4603      	mov	r3, r0
 8003102:	4323      	orrs	r3, r4
 8003104:	2b00      	cmp	r3, #0
 8003106:	bf0c      	ite	eq
 8003108:	2301      	moveq	r3, #1
 800310a:	2300      	movne	r3, #0
 800310c:	b2db      	uxtb	r3, r3
 800310e:	2b00      	cmp	r3, #0
 8003110:	d056      	beq.n	80031c0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003112:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003114:	689b      	ldr	r3, [r3, #8]
 8003116:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800311a:	f023 030f 	bic.w	r3, r3, #15
 800311e:	683a      	ldr	r2, [r7, #0]
 8003120:	6811      	ldr	r1, [r2, #0]
 8003122:	683a      	ldr	r2, [r7, #0]
 8003124:	6892      	ldr	r2, [r2, #8]
 8003126:	430a      	orrs	r2, r1
 8003128:	431a      	orrs	r2, r3
 800312a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800312c:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800312e:	e047      	b.n	80031c0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003130:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003132:	689b      	ldr	r3, [r3, #8]
 8003134:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003138:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800313a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003144:	d004      	beq.n	8003150 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a23      	ldr	r2, [pc, #140]	@ (80031d8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d10f      	bne.n	8003170 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8003150:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003154:	f7ff ff1e 	bl	8002f94 <LL_ADC_IsEnabled>
 8003158:	4604      	mov	r4, r0
 800315a:	481f      	ldr	r0, [pc, #124]	@ (80031d8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800315c:	f7ff ff1a 	bl	8002f94 <LL_ADC_IsEnabled>
 8003160:	4603      	mov	r3, r0
 8003162:	4323      	orrs	r3, r4
 8003164:	2b00      	cmp	r3, #0
 8003166:	bf0c      	ite	eq
 8003168:	2301      	moveq	r3, #1
 800316a:	2300      	movne	r3, #0
 800316c:	b2db      	uxtb	r3, r3
 800316e:	e012      	b.n	8003196 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8003170:	481a      	ldr	r0, [pc, #104]	@ (80031dc <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003172:	f7ff ff0f 	bl	8002f94 <LL_ADC_IsEnabled>
 8003176:	4604      	mov	r4, r0
 8003178:	4819      	ldr	r0, [pc, #100]	@ (80031e0 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800317a:	f7ff ff0b 	bl	8002f94 <LL_ADC_IsEnabled>
 800317e:	4603      	mov	r3, r0
 8003180:	431c      	orrs	r4, r3
 8003182:	481a      	ldr	r0, [pc, #104]	@ (80031ec <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003184:	f7ff ff06 	bl	8002f94 <LL_ADC_IsEnabled>
 8003188:	4603      	mov	r3, r0
 800318a:	4323      	orrs	r3, r4
 800318c:	2b00      	cmp	r3, #0
 800318e:	bf0c      	ite	eq
 8003190:	2301      	moveq	r3, #1
 8003192:	2300      	movne	r3, #0
 8003194:	b2db      	uxtb	r3, r3
 8003196:	2b00      	cmp	r3, #0
 8003198:	d012      	beq.n	80031c0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800319a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800319c:	689b      	ldr	r3, [r3, #8]
 800319e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80031a2:	f023 030f 	bic.w	r3, r3, #15
 80031a6:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80031a8:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80031aa:	e009      	b.n	80031c0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031b0:	f043 0220 	orr.w	r2, r3, #32
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80031b8:	2301      	movs	r3, #1
 80031ba:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80031be:	e000      	b.n	80031c2 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80031c0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2200      	movs	r2, #0
 80031c6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80031ca:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80031ce:	4618      	mov	r0, r3
 80031d0:	3784      	adds	r7, #132	@ 0x84
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd90      	pop	{r4, r7, pc}
 80031d6:	bf00      	nop
 80031d8:	50000100 	.word	0x50000100
 80031dc:	50000400 	.word	0x50000400
 80031e0:	50000500 	.word	0x50000500
 80031e4:	50000300 	.word	0x50000300
 80031e8:	50000700 	.word	0x50000700
 80031ec:	50000600 	.word	0x50000600

080031f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031f0:	b480      	push	{r7}
 80031f2:	b085      	sub	sp, #20
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	f003 0307 	and.w	r3, r3, #7
 80031fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003200:	4b0c      	ldr	r3, [pc, #48]	@ (8003234 <__NVIC_SetPriorityGrouping+0x44>)
 8003202:	68db      	ldr	r3, [r3, #12]
 8003204:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003206:	68ba      	ldr	r2, [r7, #8]
 8003208:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800320c:	4013      	ands	r3, r2
 800320e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003218:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800321c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003220:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003222:	4a04      	ldr	r2, [pc, #16]	@ (8003234 <__NVIC_SetPriorityGrouping+0x44>)
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	60d3      	str	r3, [r2, #12]
}
 8003228:	bf00      	nop
 800322a:	3714      	adds	r7, #20
 800322c:	46bd      	mov	sp, r7
 800322e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003232:	4770      	bx	lr
 8003234:	e000ed00 	.word	0xe000ed00

08003238 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003238:	b480      	push	{r7}
 800323a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800323c:	4b04      	ldr	r3, [pc, #16]	@ (8003250 <__NVIC_GetPriorityGrouping+0x18>)
 800323e:	68db      	ldr	r3, [r3, #12]
 8003240:	0a1b      	lsrs	r3, r3, #8
 8003242:	f003 0307 	and.w	r3, r3, #7
}
 8003246:	4618      	mov	r0, r3
 8003248:	46bd      	mov	sp, r7
 800324a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324e:	4770      	bx	lr
 8003250:	e000ed00 	.word	0xe000ed00

08003254 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003254:	b480      	push	{r7}
 8003256:	b083      	sub	sp, #12
 8003258:	af00      	add	r7, sp, #0
 800325a:	4603      	mov	r3, r0
 800325c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800325e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003262:	2b00      	cmp	r3, #0
 8003264:	db0b      	blt.n	800327e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003266:	79fb      	ldrb	r3, [r7, #7]
 8003268:	f003 021f 	and.w	r2, r3, #31
 800326c:	4907      	ldr	r1, [pc, #28]	@ (800328c <__NVIC_EnableIRQ+0x38>)
 800326e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003272:	095b      	lsrs	r3, r3, #5
 8003274:	2001      	movs	r0, #1
 8003276:	fa00 f202 	lsl.w	r2, r0, r2
 800327a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800327e:	bf00      	nop
 8003280:	370c      	adds	r7, #12
 8003282:	46bd      	mov	sp, r7
 8003284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003288:	4770      	bx	lr
 800328a:	bf00      	nop
 800328c:	e000e100 	.word	0xe000e100

08003290 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003290:	b480      	push	{r7}
 8003292:	b083      	sub	sp, #12
 8003294:	af00      	add	r7, sp, #0
 8003296:	4603      	mov	r3, r0
 8003298:	6039      	str	r1, [r7, #0]
 800329a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800329c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	db0a      	blt.n	80032ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	b2da      	uxtb	r2, r3
 80032a8:	490c      	ldr	r1, [pc, #48]	@ (80032dc <__NVIC_SetPriority+0x4c>)
 80032aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032ae:	0112      	lsls	r2, r2, #4
 80032b0:	b2d2      	uxtb	r2, r2
 80032b2:	440b      	add	r3, r1
 80032b4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80032b8:	e00a      	b.n	80032d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	b2da      	uxtb	r2, r3
 80032be:	4908      	ldr	r1, [pc, #32]	@ (80032e0 <__NVIC_SetPriority+0x50>)
 80032c0:	79fb      	ldrb	r3, [r7, #7]
 80032c2:	f003 030f 	and.w	r3, r3, #15
 80032c6:	3b04      	subs	r3, #4
 80032c8:	0112      	lsls	r2, r2, #4
 80032ca:	b2d2      	uxtb	r2, r2
 80032cc:	440b      	add	r3, r1
 80032ce:	761a      	strb	r2, [r3, #24]
}
 80032d0:	bf00      	nop
 80032d2:	370c      	adds	r7, #12
 80032d4:	46bd      	mov	sp, r7
 80032d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032da:	4770      	bx	lr
 80032dc:	e000e100 	.word	0xe000e100
 80032e0:	e000ed00 	.word	0xe000ed00

080032e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032e4:	b480      	push	{r7}
 80032e6:	b089      	sub	sp, #36	@ 0x24
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	60f8      	str	r0, [r7, #12]
 80032ec:	60b9      	str	r1, [r7, #8]
 80032ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	f003 0307 	and.w	r3, r3, #7
 80032f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80032f8:	69fb      	ldr	r3, [r7, #28]
 80032fa:	f1c3 0307 	rsb	r3, r3, #7
 80032fe:	2b04      	cmp	r3, #4
 8003300:	bf28      	it	cs
 8003302:	2304      	movcs	r3, #4
 8003304:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003306:	69fb      	ldr	r3, [r7, #28]
 8003308:	3304      	adds	r3, #4
 800330a:	2b06      	cmp	r3, #6
 800330c:	d902      	bls.n	8003314 <NVIC_EncodePriority+0x30>
 800330e:	69fb      	ldr	r3, [r7, #28]
 8003310:	3b03      	subs	r3, #3
 8003312:	e000      	b.n	8003316 <NVIC_EncodePriority+0x32>
 8003314:	2300      	movs	r3, #0
 8003316:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003318:	f04f 32ff 	mov.w	r2, #4294967295
 800331c:	69bb      	ldr	r3, [r7, #24]
 800331e:	fa02 f303 	lsl.w	r3, r2, r3
 8003322:	43da      	mvns	r2, r3
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	401a      	ands	r2, r3
 8003328:	697b      	ldr	r3, [r7, #20]
 800332a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800332c:	f04f 31ff 	mov.w	r1, #4294967295
 8003330:	697b      	ldr	r3, [r7, #20]
 8003332:	fa01 f303 	lsl.w	r3, r1, r3
 8003336:	43d9      	mvns	r1, r3
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800333c:	4313      	orrs	r3, r2
         );
}
 800333e:	4618      	mov	r0, r3
 8003340:	3724      	adds	r7, #36	@ 0x24
 8003342:	46bd      	mov	sp, r7
 8003344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003348:	4770      	bx	lr
	...

0800334c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b082      	sub	sp, #8
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	3b01      	subs	r3, #1
 8003358:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800335c:	d301      	bcc.n	8003362 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800335e:	2301      	movs	r3, #1
 8003360:	e00f      	b.n	8003382 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003362:	4a0a      	ldr	r2, [pc, #40]	@ (800338c <SysTick_Config+0x40>)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	3b01      	subs	r3, #1
 8003368:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800336a:	210f      	movs	r1, #15
 800336c:	f04f 30ff 	mov.w	r0, #4294967295
 8003370:	f7ff ff8e 	bl	8003290 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003374:	4b05      	ldr	r3, [pc, #20]	@ (800338c <SysTick_Config+0x40>)
 8003376:	2200      	movs	r2, #0
 8003378:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800337a:	4b04      	ldr	r3, [pc, #16]	@ (800338c <SysTick_Config+0x40>)
 800337c:	2207      	movs	r2, #7
 800337e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003380:	2300      	movs	r3, #0
}
 8003382:	4618      	mov	r0, r3
 8003384:	3708      	adds	r7, #8
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}
 800338a:	bf00      	nop
 800338c:	e000e010 	.word	0xe000e010

08003390 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b082      	sub	sp, #8
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003398:	6878      	ldr	r0, [r7, #4]
 800339a:	f7ff ff29 	bl	80031f0 <__NVIC_SetPriorityGrouping>
}
 800339e:	bf00      	nop
 80033a0:	3708      	adds	r7, #8
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bd80      	pop	{r7, pc}

080033a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033a6:	b580      	push	{r7, lr}
 80033a8:	b086      	sub	sp, #24
 80033aa:	af00      	add	r7, sp, #0
 80033ac:	4603      	mov	r3, r0
 80033ae:	60b9      	str	r1, [r7, #8]
 80033b0:	607a      	str	r2, [r7, #4]
 80033b2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80033b4:	f7ff ff40 	bl	8003238 <__NVIC_GetPriorityGrouping>
 80033b8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80033ba:	687a      	ldr	r2, [r7, #4]
 80033bc:	68b9      	ldr	r1, [r7, #8]
 80033be:	6978      	ldr	r0, [r7, #20]
 80033c0:	f7ff ff90 	bl	80032e4 <NVIC_EncodePriority>
 80033c4:	4602      	mov	r2, r0
 80033c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033ca:	4611      	mov	r1, r2
 80033cc:	4618      	mov	r0, r3
 80033ce:	f7ff ff5f 	bl	8003290 <__NVIC_SetPriority>
}
 80033d2:	bf00      	nop
 80033d4:	3718      	adds	r7, #24
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}

080033da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033da:	b580      	push	{r7, lr}
 80033dc:	b082      	sub	sp, #8
 80033de:	af00      	add	r7, sp, #0
 80033e0:	4603      	mov	r3, r0
 80033e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80033e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033e8:	4618      	mov	r0, r3
 80033ea:	f7ff ff33 	bl	8003254 <__NVIC_EnableIRQ>
}
 80033ee:	bf00      	nop
 80033f0:	3708      	adds	r7, #8
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd80      	pop	{r7, pc}

080033f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80033f6:	b580      	push	{r7, lr}
 80033f8:	b082      	sub	sp, #8
 80033fa:	af00      	add	r7, sp, #0
 80033fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80033fe:	6878      	ldr	r0, [r7, #4]
 8003400:	f7ff ffa4 	bl	800334c <SysTick_Config>
 8003404:	4603      	mov	r3, r0
}
 8003406:	4618      	mov	r0, r3
 8003408:	3708      	adds	r7, #8
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}
	...

08003410 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b084      	sub	sp, #16
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d101      	bne.n	8003422 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800341e:	2301      	movs	r3, #1
 8003420:	e08d      	b.n	800353e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	461a      	mov	r2, r3
 8003428:	4b47      	ldr	r3, [pc, #284]	@ (8003548 <HAL_DMA_Init+0x138>)
 800342a:	429a      	cmp	r2, r3
 800342c:	d80f      	bhi.n	800344e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	461a      	mov	r2, r3
 8003434:	4b45      	ldr	r3, [pc, #276]	@ (800354c <HAL_DMA_Init+0x13c>)
 8003436:	4413      	add	r3, r2
 8003438:	4a45      	ldr	r2, [pc, #276]	@ (8003550 <HAL_DMA_Init+0x140>)
 800343a:	fba2 2303 	umull	r2, r3, r2, r3
 800343e:	091b      	lsrs	r3, r3, #4
 8003440:	009a      	lsls	r2, r3, #2
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	4a42      	ldr	r2, [pc, #264]	@ (8003554 <HAL_DMA_Init+0x144>)
 800344a:	641a      	str	r2, [r3, #64]	@ 0x40
 800344c:	e00e      	b.n	800346c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	461a      	mov	r2, r3
 8003454:	4b40      	ldr	r3, [pc, #256]	@ (8003558 <HAL_DMA_Init+0x148>)
 8003456:	4413      	add	r3, r2
 8003458:	4a3d      	ldr	r2, [pc, #244]	@ (8003550 <HAL_DMA_Init+0x140>)
 800345a:	fba2 2303 	umull	r2, r3, r2, r3
 800345e:	091b      	lsrs	r3, r3, #4
 8003460:	009a      	lsls	r2, r3, #2
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	4a3c      	ldr	r2, [pc, #240]	@ (800355c <HAL_DMA_Init+0x14c>)
 800346a:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2202      	movs	r2, #2
 8003470:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8003482:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003486:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003490:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	691b      	ldr	r3, [r3, #16]
 8003496:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800349c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	699b      	ldr	r3, [r3, #24]
 80034a2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034a8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6a1b      	ldr	r3, [r3, #32]
 80034ae:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80034b0:	68fa      	ldr	r2, [r7, #12]
 80034b2:	4313      	orrs	r3, r2
 80034b4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	68fa      	ldr	r2, [r7, #12]
 80034bc:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80034be:	6878      	ldr	r0, [r7, #4]
 80034c0:	f000 fa82 	bl	80039c8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	689b      	ldr	r3, [r3, #8]
 80034c8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80034cc:	d102      	bne.n	80034d4 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2200      	movs	r2, #0
 80034d2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	685a      	ldr	r2, [r3, #4]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80034dc:	b2d2      	uxtb	r2, r2
 80034de:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034e4:	687a      	ldr	r2, [r7, #4]
 80034e6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80034e8:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d010      	beq.n	8003514 <HAL_DMA_Init+0x104>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	2b04      	cmp	r3, #4
 80034f8:	d80c      	bhi.n	8003514 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80034fa:	6878      	ldr	r0, [r7, #4]
 80034fc:	f000 faa2 	bl	8003a44 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003504:	2200      	movs	r2, #0
 8003506:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800350c:	687a      	ldr	r2, [r7, #4]
 800350e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003510:	605a      	str	r2, [r3, #4]
 8003512:	e008      	b.n	8003526 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2200      	movs	r2, #0
 8003518:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2200      	movs	r2, #0
 800351e:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2200      	movs	r2, #0
 8003524:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2200      	movs	r2, #0
 800352a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2201      	movs	r2, #1
 8003530:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2200      	movs	r2, #0
 8003538:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800353c:	2300      	movs	r3, #0
}
 800353e:	4618      	mov	r0, r3
 8003540:	3710      	adds	r7, #16
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}
 8003546:	bf00      	nop
 8003548:	40020407 	.word	0x40020407
 800354c:	bffdfff8 	.word	0xbffdfff8
 8003550:	cccccccd 	.word	0xcccccccd
 8003554:	40020000 	.word	0x40020000
 8003558:	bffdfbf8 	.word	0xbffdfbf8
 800355c:	40020400 	.word	0x40020400

08003560 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b086      	sub	sp, #24
 8003564:	af00      	add	r7, sp, #0
 8003566:	60f8      	str	r0, [r7, #12]
 8003568:	60b9      	str	r1, [r7, #8]
 800356a:	607a      	str	r2, [r7, #4]
 800356c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800356e:	2300      	movs	r3, #0
 8003570:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003578:	2b01      	cmp	r3, #1
 800357a:	d101      	bne.n	8003580 <HAL_DMA_Start_IT+0x20>
 800357c:	2302      	movs	r3, #2
 800357e:	e066      	b.n	800364e <HAL_DMA_Start_IT+0xee>
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	2201      	movs	r2, #1
 8003584:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800358e:	b2db      	uxtb	r3, r3
 8003590:	2b01      	cmp	r3, #1
 8003592:	d155      	bne.n	8003640 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	2202      	movs	r2, #2
 8003598:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	2200      	movs	r2, #0
 80035a0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	681a      	ldr	r2, [r3, #0]
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f022 0201 	bic.w	r2, r2, #1
 80035b0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	687a      	ldr	r2, [r7, #4]
 80035b6:	68b9      	ldr	r1, [r7, #8]
 80035b8:	68f8      	ldr	r0, [r7, #12]
 80035ba:	f000 f9c7 	bl	800394c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d008      	beq.n	80035d8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	681a      	ldr	r2, [r3, #0]
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f042 020e 	orr.w	r2, r2, #14
 80035d4:	601a      	str	r2, [r3, #0]
 80035d6:	e00f      	b.n	80035f8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	681a      	ldr	r2, [r3, #0]
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f022 0204 	bic.w	r2, r2, #4
 80035e6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	681a      	ldr	r2, [r3, #0]
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f042 020a 	orr.w	r2, r2, #10
 80035f6:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003602:	2b00      	cmp	r3, #0
 8003604:	d007      	beq.n	8003616 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800360a:	681a      	ldr	r2, [r3, #0]
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003610:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003614:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800361a:	2b00      	cmp	r3, #0
 800361c:	d007      	beq.n	800362e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003622:	681a      	ldr	r2, [r3, #0]
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003628:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800362c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	681a      	ldr	r2, [r3, #0]
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f042 0201 	orr.w	r2, r2, #1
 800363c:	601a      	str	r2, [r3, #0]
 800363e:	e005      	b.n	800364c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	2200      	movs	r2, #0
 8003644:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003648:	2302      	movs	r3, #2
 800364a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800364c:	7dfb      	ldrb	r3, [r7, #23]
}
 800364e:	4618      	mov	r0, r3
 8003650:	3718      	adds	r7, #24
 8003652:	46bd      	mov	sp, r7
 8003654:	bd80      	pop	{r7, pc}

08003656 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003656:	b480      	push	{r7}
 8003658:	b085      	sub	sp, #20
 800365a:	af00      	add	r7, sp, #0
 800365c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800365e:	2300      	movs	r3, #0
 8003660:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003668:	b2db      	uxtb	r3, r3
 800366a:	2b02      	cmp	r3, #2
 800366c:	d005      	beq.n	800367a <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2204      	movs	r2, #4
 8003672:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8003674:	2301      	movs	r3, #1
 8003676:	73fb      	strb	r3, [r7, #15]
 8003678:	e037      	b.n	80036ea <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	681a      	ldr	r2, [r3, #0]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f022 020e 	bic.w	r2, r2, #14
 8003688:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800368e:	681a      	ldr	r2, [r3, #0]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003694:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003698:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	681a      	ldr	r2, [r3, #0]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f022 0201 	bic.w	r2, r2, #1
 80036a8:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036ae:	f003 021f 	and.w	r2, r3, #31
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036b6:	2101      	movs	r1, #1
 80036b8:	fa01 f202 	lsl.w	r2, r1, r2
 80036bc:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036c2:	687a      	ldr	r2, [r7, #4]
 80036c4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80036c6:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d00c      	beq.n	80036ea <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036d4:	681a      	ldr	r2, [r3, #0]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036da:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80036de:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036e4:	687a      	ldr	r2, [r7, #4]
 80036e6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80036e8:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2201      	movs	r2, #1
 80036ee:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2200      	movs	r2, #0
 80036f6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 80036fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80036fc:	4618      	mov	r0, r3
 80036fe:	3714      	adds	r7, #20
 8003700:	46bd      	mov	sp, r7
 8003702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003706:	4770      	bx	lr

08003708 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b084      	sub	sp, #16
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003710:	2300      	movs	r3, #0
 8003712:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800371a:	b2db      	uxtb	r3, r3
 800371c:	2b02      	cmp	r3, #2
 800371e:	d00d      	beq.n	800373c <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2204      	movs	r2, #4
 8003724:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2201      	movs	r2, #1
 800372a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2200      	movs	r2, #0
 8003732:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8003736:	2301      	movs	r3, #1
 8003738:	73fb      	strb	r3, [r7, #15]
 800373a:	e047      	b.n	80037cc <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	681a      	ldr	r2, [r3, #0]
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f022 020e 	bic.w	r2, r2, #14
 800374a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	681a      	ldr	r2, [r3, #0]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f022 0201 	bic.w	r2, r2, #1
 800375a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003760:	681a      	ldr	r2, [r3, #0]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003766:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800376a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003770:	f003 021f 	and.w	r2, r3, #31
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003778:	2101      	movs	r1, #1
 800377a:	fa01 f202 	lsl.w	r2, r1, r2
 800377e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003784:	687a      	ldr	r2, [r7, #4]
 8003786:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003788:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800378e:	2b00      	cmp	r3, #0
 8003790:	d00c      	beq.n	80037ac <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003796:	681a      	ldr	r2, [r3, #0]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800379c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80037a0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037a6:	687a      	ldr	r2, [r7, #4]
 80037a8:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80037aa:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2201      	movs	r2, #1
 80037b0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2200      	movs	r2, #0
 80037b8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d003      	beq.n	80037cc <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037c8:	6878      	ldr	r0, [r7, #4]
 80037ca:	4798      	blx	r3
    }
  }
  return status;
 80037cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80037ce:	4618      	mov	r0, r3
 80037d0:	3710      	adds	r7, #16
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bd80      	pop	{r7, pc}

080037d6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80037d6:	b580      	push	{r7, lr}
 80037d8:	b084      	sub	sp, #16
 80037da:	af00      	add	r7, sp, #0
 80037dc:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037f2:	f003 031f 	and.w	r3, r3, #31
 80037f6:	2204      	movs	r2, #4
 80037f8:	409a      	lsls	r2, r3
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	4013      	ands	r3, r2
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d026      	beq.n	8003850 <HAL_DMA_IRQHandler+0x7a>
 8003802:	68bb      	ldr	r3, [r7, #8]
 8003804:	f003 0304 	and.w	r3, r3, #4
 8003808:	2b00      	cmp	r3, #0
 800380a:	d021      	beq.n	8003850 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f003 0320 	and.w	r3, r3, #32
 8003816:	2b00      	cmp	r3, #0
 8003818:	d107      	bne.n	800382a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	681a      	ldr	r2, [r3, #0]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f022 0204 	bic.w	r2, r2, #4
 8003828:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800382e:	f003 021f 	and.w	r2, r3, #31
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003836:	2104      	movs	r1, #4
 8003838:	fa01 f202 	lsl.w	r2, r1, r2
 800383c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003842:	2b00      	cmp	r3, #0
 8003844:	d071      	beq.n	800392a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800384a:	6878      	ldr	r0, [r7, #4]
 800384c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800384e:	e06c      	b.n	800392a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003854:	f003 031f 	and.w	r3, r3, #31
 8003858:	2202      	movs	r2, #2
 800385a:	409a      	lsls	r2, r3
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	4013      	ands	r3, r2
 8003860:	2b00      	cmp	r3, #0
 8003862:	d02e      	beq.n	80038c2 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8003864:	68bb      	ldr	r3, [r7, #8]
 8003866:	f003 0302 	and.w	r3, r3, #2
 800386a:	2b00      	cmp	r3, #0
 800386c:	d029      	beq.n	80038c2 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f003 0320 	and.w	r3, r3, #32
 8003878:	2b00      	cmp	r3, #0
 800387a:	d10b      	bne.n	8003894 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	681a      	ldr	r2, [r3, #0]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f022 020a 	bic.w	r2, r2, #10
 800388a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2201      	movs	r2, #1
 8003890:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003898:	f003 021f 	and.w	r2, r3, #31
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038a0:	2102      	movs	r1, #2
 80038a2:	fa01 f202 	lsl.w	r2, r1, r2
 80038a6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2200      	movs	r2, #0
 80038ac:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d038      	beq.n	800392a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038bc:	6878      	ldr	r0, [r7, #4]
 80038be:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80038c0:	e033      	b.n	800392a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038c6:	f003 031f 	and.w	r3, r3, #31
 80038ca:	2208      	movs	r2, #8
 80038cc:	409a      	lsls	r2, r3
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	4013      	ands	r3, r2
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d02a      	beq.n	800392c <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80038d6:	68bb      	ldr	r3, [r7, #8]
 80038d8:	f003 0308 	and.w	r3, r3, #8
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d025      	beq.n	800392c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	681a      	ldr	r2, [r3, #0]
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f022 020e 	bic.w	r2, r2, #14
 80038ee:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038f4:	f003 021f 	and.w	r2, r3, #31
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038fc:	2101      	movs	r1, #1
 80038fe:	fa01 f202 	lsl.w	r2, r1, r2
 8003902:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2201      	movs	r2, #1
 8003908:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2201      	movs	r2, #1
 800390e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2200      	movs	r2, #0
 8003916:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800391e:	2b00      	cmp	r3, #0
 8003920:	d004      	beq.n	800392c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003926:	6878      	ldr	r0, [r7, #4]
 8003928:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800392a:	bf00      	nop
 800392c:	bf00      	nop
}
 800392e:	3710      	adds	r7, #16
 8003930:	46bd      	mov	sp, r7
 8003932:	bd80      	pop	{r7, pc}

08003934 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003934:	b480      	push	{r7}
 8003936:	b083      	sub	sp, #12
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 8003940:	4618      	mov	r0, r3
 8003942:	370c      	adds	r7, #12
 8003944:	46bd      	mov	sp, r7
 8003946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394a:	4770      	bx	lr

0800394c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800394c:	b480      	push	{r7}
 800394e:	b085      	sub	sp, #20
 8003950:	af00      	add	r7, sp, #0
 8003952:	60f8      	str	r0, [r7, #12]
 8003954:	60b9      	str	r1, [r7, #8]
 8003956:	607a      	str	r2, [r7, #4]
 8003958:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800395e:	68fa      	ldr	r2, [r7, #12]
 8003960:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003962:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003968:	2b00      	cmp	r3, #0
 800396a:	d004      	beq.n	8003976 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003970:	68fa      	ldr	r2, [r7, #12]
 8003972:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003974:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800397a:	f003 021f 	and.w	r2, r3, #31
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003982:	2101      	movs	r1, #1
 8003984:	fa01 f202 	lsl.w	r2, r1, r2
 8003988:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	683a      	ldr	r2, [r7, #0]
 8003990:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	689b      	ldr	r3, [r3, #8]
 8003996:	2b10      	cmp	r3, #16
 8003998:	d108      	bne.n	80039ac <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	687a      	ldr	r2, [r7, #4]
 80039a0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	68ba      	ldr	r2, [r7, #8]
 80039a8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80039aa:	e007      	b.n	80039bc <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	68ba      	ldr	r2, [r7, #8]
 80039b2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	687a      	ldr	r2, [r7, #4]
 80039ba:	60da      	str	r2, [r3, #12]
}
 80039bc:	bf00      	nop
 80039be:	3714      	adds	r7, #20
 80039c0:	46bd      	mov	sp, r7
 80039c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c6:	4770      	bx	lr

080039c8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80039c8:	b480      	push	{r7}
 80039ca:	b087      	sub	sp, #28
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	461a      	mov	r2, r3
 80039d6:	4b16      	ldr	r3, [pc, #88]	@ (8003a30 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80039d8:	429a      	cmp	r2, r3
 80039da:	d802      	bhi.n	80039e2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80039dc:	4b15      	ldr	r3, [pc, #84]	@ (8003a34 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80039de:	617b      	str	r3, [r7, #20]
 80039e0:	e001      	b.n	80039e6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 80039e2:	4b15      	ldr	r3, [pc, #84]	@ (8003a38 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80039e4:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80039e6:	697b      	ldr	r3, [r7, #20]
 80039e8:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	b2db      	uxtb	r3, r3
 80039f0:	3b08      	subs	r3, #8
 80039f2:	4a12      	ldr	r2, [pc, #72]	@ (8003a3c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80039f4:	fba2 2303 	umull	r2, r3, r2, r3
 80039f8:	091b      	lsrs	r3, r3, #4
 80039fa:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a00:	089b      	lsrs	r3, r3, #2
 8003a02:	009a      	lsls	r2, r3, #2
 8003a04:	693b      	ldr	r3, [r7, #16]
 8003a06:	4413      	add	r3, r2
 8003a08:	461a      	mov	r2, r3
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	4a0b      	ldr	r2, [pc, #44]	@ (8003a40 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003a12:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	f003 031f 	and.w	r3, r3, #31
 8003a1a:	2201      	movs	r2, #1
 8003a1c:	409a      	lsls	r2, r3
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003a22:	bf00      	nop
 8003a24:	371c      	adds	r7, #28
 8003a26:	46bd      	mov	sp, r7
 8003a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2c:	4770      	bx	lr
 8003a2e:	bf00      	nop
 8003a30:	40020407 	.word	0x40020407
 8003a34:	40020800 	.word	0x40020800
 8003a38:	40020820 	.word	0x40020820
 8003a3c:	cccccccd 	.word	0xcccccccd
 8003a40:	40020880 	.word	0x40020880

08003a44 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003a44:	b480      	push	{r7}
 8003a46:	b085      	sub	sp, #20
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	b2db      	uxtb	r3, r3
 8003a52:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003a54:	68fa      	ldr	r2, [r7, #12]
 8003a56:	4b0b      	ldr	r3, [pc, #44]	@ (8003a84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003a58:	4413      	add	r3, r2
 8003a5a:	009b      	lsls	r3, r3, #2
 8003a5c:	461a      	mov	r2, r3
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	4a08      	ldr	r2, [pc, #32]	@ (8003a88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003a66:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	3b01      	subs	r3, #1
 8003a6c:	f003 031f 	and.w	r3, r3, #31
 8003a70:	2201      	movs	r2, #1
 8003a72:	409a      	lsls	r2, r3
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8003a78:	bf00      	nop
 8003a7a:	3714      	adds	r7, #20
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a82:	4770      	bx	lr
 8003a84:	1000823f 	.word	0x1000823f
 8003a88:	40020940 	.word	0x40020940

08003a8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	b087      	sub	sp, #28
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
 8003a94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003a96:	2300      	movs	r3, #0
 8003a98:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003a9a:	e15a      	b.n	8003d52 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	681a      	ldr	r2, [r3, #0]
 8003aa0:	2101      	movs	r1, #1
 8003aa2:	697b      	ldr	r3, [r7, #20]
 8003aa4:	fa01 f303 	lsl.w	r3, r1, r3
 8003aa8:	4013      	ands	r3, r2
 8003aaa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	f000 814c 	beq.w	8003d4c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	f003 0303 	and.w	r3, r3, #3
 8003abc:	2b01      	cmp	r3, #1
 8003abe:	d005      	beq.n	8003acc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003ac8:	2b02      	cmp	r3, #2
 8003aca:	d130      	bne.n	8003b2e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	689b      	ldr	r3, [r3, #8]
 8003ad0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003ad2:	697b      	ldr	r3, [r7, #20]
 8003ad4:	005b      	lsls	r3, r3, #1
 8003ad6:	2203      	movs	r2, #3
 8003ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8003adc:	43db      	mvns	r3, r3
 8003ade:	693a      	ldr	r2, [r7, #16]
 8003ae0:	4013      	ands	r3, r2
 8003ae2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	68da      	ldr	r2, [r3, #12]
 8003ae8:	697b      	ldr	r3, [r7, #20]
 8003aea:	005b      	lsls	r3, r3, #1
 8003aec:	fa02 f303 	lsl.w	r3, r2, r3
 8003af0:	693a      	ldr	r2, [r7, #16]
 8003af2:	4313      	orrs	r3, r2
 8003af4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	693a      	ldr	r2, [r7, #16]
 8003afa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003b02:	2201      	movs	r2, #1
 8003b04:	697b      	ldr	r3, [r7, #20]
 8003b06:	fa02 f303 	lsl.w	r3, r2, r3
 8003b0a:	43db      	mvns	r3, r3
 8003b0c:	693a      	ldr	r2, [r7, #16]
 8003b0e:	4013      	ands	r3, r2
 8003b10:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	091b      	lsrs	r3, r3, #4
 8003b18:	f003 0201 	and.w	r2, r3, #1
 8003b1c:	697b      	ldr	r3, [r7, #20]
 8003b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b22:	693a      	ldr	r2, [r7, #16]
 8003b24:	4313      	orrs	r3, r2
 8003b26:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	693a      	ldr	r2, [r7, #16]
 8003b2c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	f003 0303 	and.w	r3, r3, #3
 8003b36:	2b03      	cmp	r3, #3
 8003b38:	d017      	beq.n	8003b6a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	68db      	ldr	r3, [r3, #12]
 8003b3e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003b40:	697b      	ldr	r3, [r7, #20]
 8003b42:	005b      	lsls	r3, r3, #1
 8003b44:	2203      	movs	r2, #3
 8003b46:	fa02 f303 	lsl.w	r3, r2, r3
 8003b4a:	43db      	mvns	r3, r3
 8003b4c:	693a      	ldr	r2, [r7, #16]
 8003b4e:	4013      	ands	r3, r2
 8003b50:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	689a      	ldr	r2, [r3, #8]
 8003b56:	697b      	ldr	r3, [r7, #20]
 8003b58:	005b      	lsls	r3, r3, #1
 8003b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b5e:	693a      	ldr	r2, [r7, #16]
 8003b60:	4313      	orrs	r3, r2
 8003b62:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	693a      	ldr	r2, [r7, #16]
 8003b68:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	f003 0303 	and.w	r3, r3, #3
 8003b72:	2b02      	cmp	r3, #2
 8003b74:	d123      	bne.n	8003bbe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003b76:	697b      	ldr	r3, [r7, #20]
 8003b78:	08da      	lsrs	r2, r3, #3
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	3208      	adds	r2, #8
 8003b7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b82:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003b84:	697b      	ldr	r3, [r7, #20]
 8003b86:	f003 0307 	and.w	r3, r3, #7
 8003b8a:	009b      	lsls	r3, r3, #2
 8003b8c:	220f      	movs	r2, #15
 8003b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b92:	43db      	mvns	r3, r3
 8003b94:	693a      	ldr	r2, [r7, #16]
 8003b96:	4013      	ands	r3, r2
 8003b98:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	691a      	ldr	r2, [r3, #16]
 8003b9e:	697b      	ldr	r3, [r7, #20]
 8003ba0:	f003 0307 	and.w	r3, r3, #7
 8003ba4:	009b      	lsls	r3, r3, #2
 8003ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8003baa:	693a      	ldr	r2, [r7, #16]
 8003bac:	4313      	orrs	r3, r2
 8003bae:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003bb0:	697b      	ldr	r3, [r7, #20]
 8003bb2:	08da      	lsrs	r2, r3, #3
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	3208      	adds	r2, #8
 8003bb8:	6939      	ldr	r1, [r7, #16]
 8003bba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003bc4:	697b      	ldr	r3, [r7, #20]
 8003bc6:	005b      	lsls	r3, r3, #1
 8003bc8:	2203      	movs	r2, #3
 8003bca:	fa02 f303 	lsl.w	r3, r2, r3
 8003bce:	43db      	mvns	r3, r3
 8003bd0:	693a      	ldr	r2, [r7, #16]
 8003bd2:	4013      	ands	r3, r2
 8003bd4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	f003 0203 	and.w	r2, r3, #3
 8003bde:	697b      	ldr	r3, [r7, #20]
 8003be0:	005b      	lsls	r3, r3, #1
 8003be2:	fa02 f303 	lsl.w	r3, r2, r3
 8003be6:	693a      	ldr	r2, [r7, #16]
 8003be8:	4313      	orrs	r3, r2
 8003bea:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	693a      	ldr	r2, [r7, #16]
 8003bf0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	f000 80a6 	beq.w	8003d4c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c00:	4b5b      	ldr	r3, [pc, #364]	@ (8003d70 <HAL_GPIO_Init+0x2e4>)
 8003c02:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c04:	4a5a      	ldr	r2, [pc, #360]	@ (8003d70 <HAL_GPIO_Init+0x2e4>)
 8003c06:	f043 0301 	orr.w	r3, r3, #1
 8003c0a:	6613      	str	r3, [r2, #96]	@ 0x60
 8003c0c:	4b58      	ldr	r3, [pc, #352]	@ (8003d70 <HAL_GPIO_Init+0x2e4>)
 8003c0e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c10:	f003 0301 	and.w	r3, r3, #1
 8003c14:	60bb      	str	r3, [r7, #8]
 8003c16:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003c18:	4a56      	ldr	r2, [pc, #344]	@ (8003d74 <HAL_GPIO_Init+0x2e8>)
 8003c1a:	697b      	ldr	r3, [r7, #20]
 8003c1c:	089b      	lsrs	r3, r3, #2
 8003c1e:	3302      	adds	r3, #2
 8003c20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c24:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	f003 0303 	and.w	r3, r3, #3
 8003c2c:	009b      	lsls	r3, r3, #2
 8003c2e:	220f      	movs	r2, #15
 8003c30:	fa02 f303 	lsl.w	r3, r2, r3
 8003c34:	43db      	mvns	r3, r3
 8003c36:	693a      	ldr	r2, [r7, #16]
 8003c38:	4013      	ands	r3, r2
 8003c3a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003c42:	d01f      	beq.n	8003c84 <HAL_GPIO_Init+0x1f8>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	4a4c      	ldr	r2, [pc, #304]	@ (8003d78 <HAL_GPIO_Init+0x2ec>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d019      	beq.n	8003c80 <HAL_GPIO_Init+0x1f4>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	4a4b      	ldr	r2, [pc, #300]	@ (8003d7c <HAL_GPIO_Init+0x2f0>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d013      	beq.n	8003c7c <HAL_GPIO_Init+0x1f0>
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	4a4a      	ldr	r2, [pc, #296]	@ (8003d80 <HAL_GPIO_Init+0x2f4>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d00d      	beq.n	8003c78 <HAL_GPIO_Init+0x1ec>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	4a49      	ldr	r2, [pc, #292]	@ (8003d84 <HAL_GPIO_Init+0x2f8>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d007      	beq.n	8003c74 <HAL_GPIO_Init+0x1e8>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	4a48      	ldr	r2, [pc, #288]	@ (8003d88 <HAL_GPIO_Init+0x2fc>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d101      	bne.n	8003c70 <HAL_GPIO_Init+0x1e4>
 8003c6c:	2305      	movs	r3, #5
 8003c6e:	e00a      	b.n	8003c86 <HAL_GPIO_Init+0x1fa>
 8003c70:	2306      	movs	r3, #6
 8003c72:	e008      	b.n	8003c86 <HAL_GPIO_Init+0x1fa>
 8003c74:	2304      	movs	r3, #4
 8003c76:	e006      	b.n	8003c86 <HAL_GPIO_Init+0x1fa>
 8003c78:	2303      	movs	r3, #3
 8003c7a:	e004      	b.n	8003c86 <HAL_GPIO_Init+0x1fa>
 8003c7c:	2302      	movs	r3, #2
 8003c7e:	e002      	b.n	8003c86 <HAL_GPIO_Init+0x1fa>
 8003c80:	2301      	movs	r3, #1
 8003c82:	e000      	b.n	8003c86 <HAL_GPIO_Init+0x1fa>
 8003c84:	2300      	movs	r3, #0
 8003c86:	697a      	ldr	r2, [r7, #20]
 8003c88:	f002 0203 	and.w	r2, r2, #3
 8003c8c:	0092      	lsls	r2, r2, #2
 8003c8e:	4093      	lsls	r3, r2
 8003c90:	693a      	ldr	r2, [r7, #16]
 8003c92:	4313      	orrs	r3, r2
 8003c94:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003c96:	4937      	ldr	r1, [pc, #220]	@ (8003d74 <HAL_GPIO_Init+0x2e8>)
 8003c98:	697b      	ldr	r3, [r7, #20]
 8003c9a:	089b      	lsrs	r3, r3, #2
 8003c9c:	3302      	adds	r3, #2
 8003c9e:	693a      	ldr	r2, [r7, #16]
 8003ca0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003ca4:	4b39      	ldr	r3, [pc, #228]	@ (8003d8c <HAL_GPIO_Init+0x300>)
 8003ca6:	689b      	ldr	r3, [r3, #8]
 8003ca8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	43db      	mvns	r3, r3
 8003cae:	693a      	ldr	r2, [r7, #16]
 8003cb0:	4013      	ands	r3, r2
 8003cb2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d003      	beq.n	8003cc8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003cc0:	693a      	ldr	r2, [r7, #16]
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003cc8:	4a30      	ldr	r2, [pc, #192]	@ (8003d8c <HAL_GPIO_Init+0x300>)
 8003cca:	693b      	ldr	r3, [r7, #16]
 8003ccc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003cce:	4b2f      	ldr	r3, [pc, #188]	@ (8003d8c <HAL_GPIO_Init+0x300>)
 8003cd0:	68db      	ldr	r3, [r3, #12]
 8003cd2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	43db      	mvns	r3, r3
 8003cd8:	693a      	ldr	r2, [r7, #16]
 8003cda:	4013      	ands	r3, r2
 8003cdc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d003      	beq.n	8003cf2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003cea:	693a      	ldr	r2, [r7, #16]
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003cf2:	4a26      	ldr	r2, [pc, #152]	@ (8003d8c <HAL_GPIO_Init+0x300>)
 8003cf4:	693b      	ldr	r3, [r7, #16]
 8003cf6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003cf8:	4b24      	ldr	r3, [pc, #144]	@ (8003d8c <HAL_GPIO_Init+0x300>)
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	43db      	mvns	r3, r3
 8003d02:	693a      	ldr	r2, [r7, #16]
 8003d04:	4013      	ands	r3, r2
 8003d06:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d003      	beq.n	8003d1c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003d14:	693a      	ldr	r2, [r7, #16]
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003d1c:	4a1b      	ldr	r2, [pc, #108]	@ (8003d8c <HAL_GPIO_Init+0x300>)
 8003d1e:	693b      	ldr	r3, [r7, #16]
 8003d20:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003d22:	4b1a      	ldr	r3, [pc, #104]	@ (8003d8c <HAL_GPIO_Init+0x300>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	43db      	mvns	r3, r3
 8003d2c:	693a      	ldr	r2, [r7, #16]
 8003d2e:	4013      	ands	r3, r2
 8003d30:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d003      	beq.n	8003d46 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003d3e:	693a      	ldr	r2, [r7, #16]
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	4313      	orrs	r3, r2
 8003d44:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003d46:	4a11      	ldr	r2, [pc, #68]	@ (8003d8c <HAL_GPIO_Init+0x300>)
 8003d48:	693b      	ldr	r3, [r7, #16]
 8003d4a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003d4c:	697b      	ldr	r3, [r7, #20]
 8003d4e:	3301      	adds	r3, #1
 8003d50:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	681a      	ldr	r2, [r3, #0]
 8003d56:	697b      	ldr	r3, [r7, #20]
 8003d58:	fa22 f303 	lsr.w	r3, r2, r3
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	f47f ae9d 	bne.w	8003a9c <HAL_GPIO_Init+0x10>
  }
}
 8003d62:	bf00      	nop
 8003d64:	bf00      	nop
 8003d66:	371c      	adds	r7, #28
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6e:	4770      	bx	lr
 8003d70:	40021000 	.word	0x40021000
 8003d74:	40010000 	.word	0x40010000
 8003d78:	48000400 	.word	0x48000400
 8003d7c:	48000800 	.word	0x48000800
 8003d80:	48000c00 	.word	0x48000c00
 8003d84:	48001000 	.word	0x48001000
 8003d88:	48001400 	.word	0x48001400
 8003d8c:	40010400 	.word	0x40010400

08003d90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d90:	b480      	push	{r7}
 8003d92:	b083      	sub	sp, #12
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
 8003d98:	460b      	mov	r3, r1
 8003d9a:	807b      	strh	r3, [r7, #2]
 8003d9c:	4613      	mov	r3, r2
 8003d9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003da0:	787b      	ldrb	r3, [r7, #1]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d003      	beq.n	8003dae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003da6:	887a      	ldrh	r2, [r7, #2]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003dac:	e002      	b.n	8003db4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003dae:	887a      	ldrh	r2, [r7, #2]
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003db4:	bf00      	nop
 8003db6:	370c      	adds	r7, #12
 8003db8:	46bd      	mov	sp, r7
 8003dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbe:	4770      	bx	lr

08003dc0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b082      	sub	sp, #8
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003dca:	4b08      	ldr	r3, [pc, #32]	@ (8003dec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003dcc:	695a      	ldr	r2, [r3, #20]
 8003dce:	88fb      	ldrh	r3, [r7, #6]
 8003dd0:	4013      	ands	r3, r2
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d006      	beq.n	8003de4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003dd6:	4a05      	ldr	r2, [pc, #20]	@ (8003dec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003dd8:	88fb      	ldrh	r3, [r7, #6]
 8003dda:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003ddc:	88fb      	ldrh	r3, [r7, #6]
 8003dde:	4618      	mov	r0, r3
 8003de0:	f7fd fcfc 	bl	80017dc <HAL_GPIO_EXTI_Callback>
  }
}
 8003de4:	bf00      	nop
 8003de6:	3708      	adds	r7, #8
 8003de8:	46bd      	mov	sp, r7
 8003dea:	bd80      	pop	{r7, pc}
 8003dec:	40010400 	.word	0x40010400

08003df0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003df0:	b480      	push	{r7}
 8003df2:	b085      	sub	sp, #20
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d141      	bne.n	8003e82 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003dfe:	4b4b      	ldr	r3, [pc, #300]	@ (8003f2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003e06:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e0a:	d131      	bne.n	8003e70 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003e0c:	4b47      	ldr	r3, [pc, #284]	@ (8003f2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003e12:	4a46      	ldr	r2, [pc, #280]	@ (8003f2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e14:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003e18:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003e1c:	4b43      	ldr	r3, [pc, #268]	@ (8003f2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003e24:	4a41      	ldr	r2, [pc, #260]	@ (8003f2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e26:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003e2a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003e2c:	4b40      	ldr	r3, [pc, #256]	@ (8003f30 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	2232      	movs	r2, #50	@ 0x32
 8003e32:	fb02 f303 	mul.w	r3, r2, r3
 8003e36:	4a3f      	ldr	r2, [pc, #252]	@ (8003f34 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003e38:	fba2 2303 	umull	r2, r3, r2, r3
 8003e3c:	0c9b      	lsrs	r3, r3, #18
 8003e3e:	3301      	adds	r3, #1
 8003e40:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003e42:	e002      	b.n	8003e4a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	3b01      	subs	r3, #1
 8003e48:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003e4a:	4b38      	ldr	r3, [pc, #224]	@ (8003f2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e4c:	695b      	ldr	r3, [r3, #20]
 8003e4e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e52:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e56:	d102      	bne.n	8003e5e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d1f2      	bne.n	8003e44 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003e5e:	4b33      	ldr	r3, [pc, #204]	@ (8003f2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e60:	695b      	ldr	r3, [r3, #20]
 8003e62:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e66:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e6a:	d158      	bne.n	8003f1e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003e6c:	2303      	movs	r3, #3
 8003e6e:	e057      	b.n	8003f20 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003e70:	4b2e      	ldr	r3, [pc, #184]	@ (8003f2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e72:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003e76:	4a2d      	ldr	r2, [pc, #180]	@ (8003f2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e78:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003e7c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003e80:	e04d      	b.n	8003f1e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003e88:	d141      	bne.n	8003f0e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003e8a:	4b28      	ldr	r3, [pc, #160]	@ (8003f2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003e92:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e96:	d131      	bne.n	8003efc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003e98:	4b24      	ldr	r3, [pc, #144]	@ (8003f2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003e9e:	4a23      	ldr	r2, [pc, #140]	@ (8003f2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ea0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ea4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003ea8:	4b20      	ldr	r3, [pc, #128]	@ (8003f2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003eb0:	4a1e      	ldr	r2, [pc, #120]	@ (8003f2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003eb2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003eb6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003eb8:	4b1d      	ldr	r3, [pc, #116]	@ (8003f30 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	2232      	movs	r2, #50	@ 0x32
 8003ebe:	fb02 f303 	mul.w	r3, r2, r3
 8003ec2:	4a1c      	ldr	r2, [pc, #112]	@ (8003f34 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003ec4:	fba2 2303 	umull	r2, r3, r2, r3
 8003ec8:	0c9b      	lsrs	r3, r3, #18
 8003eca:	3301      	adds	r3, #1
 8003ecc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003ece:	e002      	b.n	8003ed6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	3b01      	subs	r3, #1
 8003ed4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003ed6:	4b15      	ldr	r3, [pc, #84]	@ (8003f2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ed8:	695b      	ldr	r3, [r3, #20]
 8003eda:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ede:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ee2:	d102      	bne.n	8003eea <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d1f2      	bne.n	8003ed0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003eea:	4b10      	ldr	r3, [pc, #64]	@ (8003f2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003eec:	695b      	ldr	r3, [r3, #20]
 8003eee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ef2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ef6:	d112      	bne.n	8003f1e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003ef8:	2303      	movs	r3, #3
 8003efa:	e011      	b.n	8003f20 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003efc:	4b0b      	ldr	r3, [pc, #44]	@ (8003f2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003efe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003f02:	4a0a      	ldr	r2, [pc, #40]	@ (8003f2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f04:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f08:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003f0c:	e007      	b.n	8003f1e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003f0e:	4b07      	ldr	r3, [pc, #28]	@ (8003f2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003f16:	4a05      	ldr	r2, [pc, #20]	@ (8003f2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f18:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003f1c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003f1e:	2300      	movs	r3, #0
}
 8003f20:	4618      	mov	r0, r3
 8003f22:	3714      	adds	r7, #20
 8003f24:	46bd      	mov	sp, r7
 8003f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2a:	4770      	bx	lr
 8003f2c:	40007000 	.word	0x40007000
 8003f30:	20000200 	.word	0x20000200
 8003f34:	431bde83 	.word	0x431bde83

08003f38 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003f3c:	4b05      	ldr	r3, [pc, #20]	@ (8003f54 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003f3e:	689b      	ldr	r3, [r3, #8]
 8003f40:	4a04      	ldr	r2, [pc, #16]	@ (8003f54 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003f42:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003f46:	6093      	str	r3, [r2, #8]
}
 8003f48:	bf00      	nop
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f50:	4770      	bx	lr
 8003f52:	bf00      	nop
 8003f54:	40007000 	.word	0x40007000

08003f58 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b088      	sub	sp, #32
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d101      	bne.n	8003f6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f66:	2301      	movs	r3, #1
 8003f68:	e2fe      	b.n	8004568 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f003 0301 	and.w	r3, r3, #1
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d075      	beq.n	8004062 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f76:	4b97      	ldr	r3, [pc, #604]	@ (80041d4 <HAL_RCC_OscConfig+0x27c>)
 8003f78:	689b      	ldr	r3, [r3, #8]
 8003f7a:	f003 030c 	and.w	r3, r3, #12
 8003f7e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003f80:	4b94      	ldr	r3, [pc, #592]	@ (80041d4 <HAL_RCC_OscConfig+0x27c>)
 8003f82:	68db      	ldr	r3, [r3, #12]
 8003f84:	f003 0303 	and.w	r3, r3, #3
 8003f88:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003f8a:	69bb      	ldr	r3, [r7, #24]
 8003f8c:	2b0c      	cmp	r3, #12
 8003f8e:	d102      	bne.n	8003f96 <HAL_RCC_OscConfig+0x3e>
 8003f90:	697b      	ldr	r3, [r7, #20]
 8003f92:	2b03      	cmp	r3, #3
 8003f94:	d002      	beq.n	8003f9c <HAL_RCC_OscConfig+0x44>
 8003f96:	69bb      	ldr	r3, [r7, #24]
 8003f98:	2b08      	cmp	r3, #8
 8003f9a:	d10b      	bne.n	8003fb4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f9c:	4b8d      	ldr	r3, [pc, #564]	@ (80041d4 <HAL_RCC_OscConfig+0x27c>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d05b      	beq.n	8004060 <HAL_RCC_OscConfig+0x108>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d157      	bne.n	8004060 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	e2d9      	b.n	8004568 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003fbc:	d106      	bne.n	8003fcc <HAL_RCC_OscConfig+0x74>
 8003fbe:	4b85      	ldr	r3, [pc, #532]	@ (80041d4 <HAL_RCC_OscConfig+0x27c>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4a84      	ldr	r2, [pc, #528]	@ (80041d4 <HAL_RCC_OscConfig+0x27c>)
 8003fc4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003fc8:	6013      	str	r3, [r2, #0]
 8003fca:	e01d      	b.n	8004008 <HAL_RCC_OscConfig+0xb0>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003fd4:	d10c      	bne.n	8003ff0 <HAL_RCC_OscConfig+0x98>
 8003fd6:	4b7f      	ldr	r3, [pc, #508]	@ (80041d4 <HAL_RCC_OscConfig+0x27c>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a7e      	ldr	r2, [pc, #504]	@ (80041d4 <HAL_RCC_OscConfig+0x27c>)
 8003fdc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003fe0:	6013      	str	r3, [r2, #0]
 8003fe2:	4b7c      	ldr	r3, [pc, #496]	@ (80041d4 <HAL_RCC_OscConfig+0x27c>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4a7b      	ldr	r2, [pc, #492]	@ (80041d4 <HAL_RCC_OscConfig+0x27c>)
 8003fe8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003fec:	6013      	str	r3, [r2, #0]
 8003fee:	e00b      	b.n	8004008 <HAL_RCC_OscConfig+0xb0>
 8003ff0:	4b78      	ldr	r3, [pc, #480]	@ (80041d4 <HAL_RCC_OscConfig+0x27c>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a77      	ldr	r2, [pc, #476]	@ (80041d4 <HAL_RCC_OscConfig+0x27c>)
 8003ff6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ffa:	6013      	str	r3, [r2, #0]
 8003ffc:	4b75      	ldr	r3, [pc, #468]	@ (80041d4 <HAL_RCC_OscConfig+0x27c>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a74      	ldr	r2, [pc, #464]	@ (80041d4 <HAL_RCC_OscConfig+0x27c>)
 8004002:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004006:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	685b      	ldr	r3, [r3, #4]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d013      	beq.n	8004038 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004010:	f7fd ffe2 	bl	8001fd8 <HAL_GetTick>
 8004014:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004016:	e008      	b.n	800402a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004018:	f7fd ffde 	bl	8001fd8 <HAL_GetTick>
 800401c:	4602      	mov	r2, r0
 800401e:	693b      	ldr	r3, [r7, #16]
 8004020:	1ad3      	subs	r3, r2, r3
 8004022:	2b64      	cmp	r3, #100	@ 0x64
 8004024:	d901      	bls.n	800402a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004026:	2303      	movs	r3, #3
 8004028:	e29e      	b.n	8004568 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800402a:	4b6a      	ldr	r3, [pc, #424]	@ (80041d4 <HAL_RCC_OscConfig+0x27c>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004032:	2b00      	cmp	r3, #0
 8004034:	d0f0      	beq.n	8004018 <HAL_RCC_OscConfig+0xc0>
 8004036:	e014      	b.n	8004062 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004038:	f7fd ffce 	bl	8001fd8 <HAL_GetTick>
 800403c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800403e:	e008      	b.n	8004052 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004040:	f7fd ffca 	bl	8001fd8 <HAL_GetTick>
 8004044:	4602      	mov	r2, r0
 8004046:	693b      	ldr	r3, [r7, #16]
 8004048:	1ad3      	subs	r3, r2, r3
 800404a:	2b64      	cmp	r3, #100	@ 0x64
 800404c:	d901      	bls.n	8004052 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800404e:	2303      	movs	r3, #3
 8004050:	e28a      	b.n	8004568 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004052:	4b60      	ldr	r3, [pc, #384]	@ (80041d4 <HAL_RCC_OscConfig+0x27c>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800405a:	2b00      	cmp	r3, #0
 800405c:	d1f0      	bne.n	8004040 <HAL_RCC_OscConfig+0xe8>
 800405e:	e000      	b.n	8004062 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004060:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f003 0302 	and.w	r3, r3, #2
 800406a:	2b00      	cmp	r3, #0
 800406c:	d075      	beq.n	800415a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800406e:	4b59      	ldr	r3, [pc, #356]	@ (80041d4 <HAL_RCC_OscConfig+0x27c>)
 8004070:	689b      	ldr	r3, [r3, #8]
 8004072:	f003 030c 	and.w	r3, r3, #12
 8004076:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004078:	4b56      	ldr	r3, [pc, #344]	@ (80041d4 <HAL_RCC_OscConfig+0x27c>)
 800407a:	68db      	ldr	r3, [r3, #12]
 800407c:	f003 0303 	and.w	r3, r3, #3
 8004080:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004082:	69bb      	ldr	r3, [r7, #24]
 8004084:	2b0c      	cmp	r3, #12
 8004086:	d102      	bne.n	800408e <HAL_RCC_OscConfig+0x136>
 8004088:	697b      	ldr	r3, [r7, #20]
 800408a:	2b02      	cmp	r3, #2
 800408c:	d002      	beq.n	8004094 <HAL_RCC_OscConfig+0x13c>
 800408e:	69bb      	ldr	r3, [r7, #24]
 8004090:	2b04      	cmp	r3, #4
 8004092:	d11f      	bne.n	80040d4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004094:	4b4f      	ldr	r3, [pc, #316]	@ (80041d4 <HAL_RCC_OscConfig+0x27c>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800409c:	2b00      	cmp	r3, #0
 800409e:	d005      	beq.n	80040ac <HAL_RCC_OscConfig+0x154>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	68db      	ldr	r3, [r3, #12]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d101      	bne.n	80040ac <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80040a8:	2301      	movs	r3, #1
 80040aa:	e25d      	b.n	8004568 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040ac:	4b49      	ldr	r3, [pc, #292]	@ (80041d4 <HAL_RCC_OscConfig+0x27c>)
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	691b      	ldr	r3, [r3, #16]
 80040b8:	061b      	lsls	r3, r3, #24
 80040ba:	4946      	ldr	r1, [pc, #280]	@ (80041d4 <HAL_RCC_OscConfig+0x27c>)
 80040bc:	4313      	orrs	r3, r2
 80040be:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80040c0:	4b45      	ldr	r3, [pc, #276]	@ (80041d8 <HAL_RCC_OscConfig+0x280>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4618      	mov	r0, r3
 80040c6:	f7fd ff3b 	bl	8001f40 <HAL_InitTick>
 80040ca:	4603      	mov	r3, r0
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d043      	beq.n	8004158 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80040d0:	2301      	movs	r3, #1
 80040d2:	e249      	b.n	8004568 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	68db      	ldr	r3, [r3, #12]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d023      	beq.n	8004124 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80040dc:	4b3d      	ldr	r3, [pc, #244]	@ (80041d4 <HAL_RCC_OscConfig+0x27c>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4a3c      	ldr	r2, [pc, #240]	@ (80041d4 <HAL_RCC_OscConfig+0x27c>)
 80040e2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80040e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040e8:	f7fd ff76 	bl	8001fd8 <HAL_GetTick>
 80040ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80040ee:	e008      	b.n	8004102 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80040f0:	f7fd ff72 	bl	8001fd8 <HAL_GetTick>
 80040f4:	4602      	mov	r2, r0
 80040f6:	693b      	ldr	r3, [r7, #16]
 80040f8:	1ad3      	subs	r3, r2, r3
 80040fa:	2b02      	cmp	r3, #2
 80040fc:	d901      	bls.n	8004102 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80040fe:	2303      	movs	r3, #3
 8004100:	e232      	b.n	8004568 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004102:	4b34      	ldr	r3, [pc, #208]	@ (80041d4 <HAL_RCC_OscConfig+0x27c>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800410a:	2b00      	cmp	r3, #0
 800410c:	d0f0      	beq.n	80040f0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800410e:	4b31      	ldr	r3, [pc, #196]	@ (80041d4 <HAL_RCC_OscConfig+0x27c>)
 8004110:	685b      	ldr	r3, [r3, #4]
 8004112:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	691b      	ldr	r3, [r3, #16]
 800411a:	061b      	lsls	r3, r3, #24
 800411c:	492d      	ldr	r1, [pc, #180]	@ (80041d4 <HAL_RCC_OscConfig+0x27c>)
 800411e:	4313      	orrs	r3, r2
 8004120:	604b      	str	r3, [r1, #4]
 8004122:	e01a      	b.n	800415a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004124:	4b2b      	ldr	r3, [pc, #172]	@ (80041d4 <HAL_RCC_OscConfig+0x27c>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a2a      	ldr	r2, [pc, #168]	@ (80041d4 <HAL_RCC_OscConfig+0x27c>)
 800412a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800412e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004130:	f7fd ff52 	bl	8001fd8 <HAL_GetTick>
 8004134:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004136:	e008      	b.n	800414a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004138:	f7fd ff4e 	bl	8001fd8 <HAL_GetTick>
 800413c:	4602      	mov	r2, r0
 800413e:	693b      	ldr	r3, [r7, #16]
 8004140:	1ad3      	subs	r3, r2, r3
 8004142:	2b02      	cmp	r3, #2
 8004144:	d901      	bls.n	800414a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004146:	2303      	movs	r3, #3
 8004148:	e20e      	b.n	8004568 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800414a:	4b22      	ldr	r3, [pc, #136]	@ (80041d4 <HAL_RCC_OscConfig+0x27c>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004152:	2b00      	cmp	r3, #0
 8004154:	d1f0      	bne.n	8004138 <HAL_RCC_OscConfig+0x1e0>
 8004156:	e000      	b.n	800415a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004158:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f003 0308 	and.w	r3, r3, #8
 8004162:	2b00      	cmp	r3, #0
 8004164:	d041      	beq.n	80041ea <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	695b      	ldr	r3, [r3, #20]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d01c      	beq.n	80041a8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800416e:	4b19      	ldr	r3, [pc, #100]	@ (80041d4 <HAL_RCC_OscConfig+0x27c>)
 8004170:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004174:	4a17      	ldr	r2, [pc, #92]	@ (80041d4 <HAL_RCC_OscConfig+0x27c>)
 8004176:	f043 0301 	orr.w	r3, r3, #1
 800417a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800417e:	f7fd ff2b 	bl	8001fd8 <HAL_GetTick>
 8004182:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004184:	e008      	b.n	8004198 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004186:	f7fd ff27 	bl	8001fd8 <HAL_GetTick>
 800418a:	4602      	mov	r2, r0
 800418c:	693b      	ldr	r3, [r7, #16]
 800418e:	1ad3      	subs	r3, r2, r3
 8004190:	2b02      	cmp	r3, #2
 8004192:	d901      	bls.n	8004198 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004194:	2303      	movs	r3, #3
 8004196:	e1e7      	b.n	8004568 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004198:	4b0e      	ldr	r3, [pc, #56]	@ (80041d4 <HAL_RCC_OscConfig+0x27c>)
 800419a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800419e:	f003 0302 	and.w	r3, r3, #2
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d0ef      	beq.n	8004186 <HAL_RCC_OscConfig+0x22e>
 80041a6:	e020      	b.n	80041ea <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80041a8:	4b0a      	ldr	r3, [pc, #40]	@ (80041d4 <HAL_RCC_OscConfig+0x27c>)
 80041aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80041ae:	4a09      	ldr	r2, [pc, #36]	@ (80041d4 <HAL_RCC_OscConfig+0x27c>)
 80041b0:	f023 0301 	bic.w	r3, r3, #1
 80041b4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041b8:	f7fd ff0e 	bl	8001fd8 <HAL_GetTick>
 80041bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80041be:	e00d      	b.n	80041dc <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041c0:	f7fd ff0a 	bl	8001fd8 <HAL_GetTick>
 80041c4:	4602      	mov	r2, r0
 80041c6:	693b      	ldr	r3, [r7, #16]
 80041c8:	1ad3      	subs	r3, r2, r3
 80041ca:	2b02      	cmp	r3, #2
 80041cc:	d906      	bls.n	80041dc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80041ce:	2303      	movs	r3, #3
 80041d0:	e1ca      	b.n	8004568 <HAL_RCC_OscConfig+0x610>
 80041d2:	bf00      	nop
 80041d4:	40021000 	.word	0x40021000
 80041d8:	20000204 	.word	0x20000204
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80041dc:	4b8c      	ldr	r3, [pc, #560]	@ (8004410 <HAL_RCC_OscConfig+0x4b8>)
 80041de:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80041e2:	f003 0302 	and.w	r3, r3, #2
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d1ea      	bne.n	80041c0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f003 0304 	and.w	r3, r3, #4
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	f000 80a6 	beq.w	8004344 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041f8:	2300      	movs	r3, #0
 80041fa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80041fc:	4b84      	ldr	r3, [pc, #528]	@ (8004410 <HAL_RCC_OscConfig+0x4b8>)
 80041fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004200:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004204:	2b00      	cmp	r3, #0
 8004206:	d101      	bne.n	800420c <HAL_RCC_OscConfig+0x2b4>
 8004208:	2301      	movs	r3, #1
 800420a:	e000      	b.n	800420e <HAL_RCC_OscConfig+0x2b6>
 800420c:	2300      	movs	r3, #0
 800420e:	2b00      	cmp	r3, #0
 8004210:	d00d      	beq.n	800422e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004212:	4b7f      	ldr	r3, [pc, #508]	@ (8004410 <HAL_RCC_OscConfig+0x4b8>)
 8004214:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004216:	4a7e      	ldr	r2, [pc, #504]	@ (8004410 <HAL_RCC_OscConfig+0x4b8>)
 8004218:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800421c:	6593      	str	r3, [r2, #88]	@ 0x58
 800421e:	4b7c      	ldr	r3, [pc, #496]	@ (8004410 <HAL_RCC_OscConfig+0x4b8>)
 8004220:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004222:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004226:	60fb      	str	r3, [r7, #12]
 8004228:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800422a:	2301      	movs	r3, #1
 800422c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800422e:	4b79      	ldr	r3, [pc, #484]	@ (8004414 <HAL_RCC_OscConfig+0x4bc>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004236:	2b00      	cmp	r3, #0
 8004238:	d118      	bne.n	800426c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800423a:	4b76      	ldr	r3, [pc, #472]	@ (8004414 <HAL_RCC_OscConfig+0x4bc>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4a75      	ldr	r2, [pc, #468]	@ (8004414 <HAL_RCC_OscConfig+0x4bc>)
 8004240:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004244:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004246:	f7fd fec7 	bl	8001fd8 <HAL_GetTick>
 800424a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800424c:	e008      	b.n	8004260 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800424e:	f7fd fec3 	bl	8001fd8 <HAL_GetTick>
 8004252:	4602      	mov	r2, r0
 8004254:	693b      	ldr	r3, [r7, #16]
 8004256:	1ad3      	subs	r3, r2, r3
 8004258:	2b02      	cmp	r3, #2
 800425a:	d901      	bls.n	8004260 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800425c:	2303      	movs	r3, #3
 800425e:	e183      	b.n	8004568 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004260:	4b6c      	ldr	r3, [pc, #432]	@ (8004414 <HAL_RCC_OscConfig+0x4bc>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004268:	2b00      	cmp	r3, #0
 800426a:	d0f0      	beq.n	800424e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	689b      	ldr	r3, [r3, #8]
 8004270:	2b01      	cmp	r3, #1
 8004272:	d108      	bne.n	8004286 <HAL_RCC_OscConfig+0x32e>
 8004274:	4b66      	ldr	r3, [pc, #408]	@ (8004410 <HAL_RCC_OscConfig+0x4b8>)
 8004276:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800427a:	4a65      	ldr	r2, [pc, #404]	@ (8004410 <HAL_RCC_OscConfig+0x4b8>)
 800427c:	f043 0301 	orr.w	r3, r3, #1
 8004280:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004284:	e024      	b.n	80042d0 <HAL_RCC_OscConfig+0x378>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	689b      	ldr	r3, [r3, #8]
 800428a:	2b05      	cmp	r3, #5
 800428c:	d110      	bne.n	80042b0 <HAL_RCC_OscConfig+0x358>
 800428e:	4b60      	ldr	r3, [pc, #384]	@ (8004410 <HAL_RCC_OscConfig+0x4b8>)
 8004290:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004294:	4a5e      	ldr	r2, [pc, #376]	@ (8004410 <HAL_RCC_OscConfig+0x4b8>)
 8004296:	f043 0304 	orr.w	r3, r3, #4
 800429a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800429e:	4b5c      	ldr	r3, [pc, #368]	@ (8004410 <HAL_RCC_OscConfig+0x4b8>)
 80042a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042a4:	4a5a      	ldr	r2, [pc, #360]	@ (8004410 <HAL_RCC_OscConfig+0x4b8>)
 80042a6:	f043 0301 	orr.w	r3, r3, #1
 80042aa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80042ae:	e00f      	b.n	80042d0 <HAL_RCC_OscConfig+0x378>
 80042b0:	4b57      	ldr	r3, [pc, #348]	@ (8004410 <HAL_RCC_OscConfig+0x4b8>)
 80042b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042b6:	4a56      	ldr	r2, [pc, #344]	@ (8004410 <HAL_RCC_OscConfig+0x4b8>)
 80042b8:	f023 0301 	bic.w	r3, r3, #1
 80042bc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80042c0:	4b53      	ldr	r3, [pc, #332]	@ (8004410 <HAL_RCC_OscConfig+0x4b8>)
 80042c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042c6:	4a52      	ldr	r2, [pc, #328]	@ (8004410 <HAL_RCC_OscConfig+0x4b8>)
 80042c8:	f023 0304 	bic.w	r3, r3, #4
 80042cc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	689b      	ldr	r3, [r3, #8]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d016      	beq.n	8004306 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042d8:	f7fd fe7e 	bl	8001fd8 <HAL_GetTick>
 80042dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80042de:	e00a      	b.n	80042f6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042e0:	f7fd fe7a 	bl	8001fd8 <HAL_GetTick>
 80042e4:	4602      	mov	r2, r0
 80042e6:	693b      	ldr	r3, [r7, #16]
 80042e8:	1ad3      	subs	r3, r2, r3
 80042ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d901      	bls.n	80042f6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80042f2:	2303      	movs	r3, #3
 80042f4:	e138      	b.n	8004568 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80042f6:	4b46      	ldr	r3, [pc, #280]	@ (8004410 <HAL_RCC_OscConfig+0x4b8>)
 80042f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042fc:	f003 0302 	and.w	r3, r3, #2
 8004300:	2b00      	cmp	r3, #0
 8004302:	d0ed      	beq.n	80042e0 <HAL_RCC_OscConfig+0x388>
 8004304:	e015      	b.n	8004332 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004306:	f7fd fe67 	bl	8001fd8 <HAL_GetTick>
 800430a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800430c:	e00a      	b.n	8004324 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800430e:	f7fd fe63 	bl	8001fd8 <HAL_GetTick>
 8004312:	4602      	mov	r2, r0
 8004314:	693b      	ldr	r3, [r7, #16]
 8004316:	1ad3      	subs	r3, r2, r3
 8004318:	f241 3288 	movw	r2, #5000	@ 0x1388
 800431c:	4293      	cmp	r3, r2
 800431e:	d901      	bls.n	8004324 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004320:	2303      	movs	r3, #3
 8004322:	e121      	b.n	8004568 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004324:	4b3a      	ldr	r3, [pc, #232]	@ (8004410 <HAL_RCC_OscConfig+0x4b8>)
 8004326:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800432a:	f003 0302 	and.w	r3, r3, #2
 800432e:	2b00      	cmp	r3, #0
 8004330:	d1ed      	bne.n	800430e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004332:	7ffb      	ldrb	r3, [r7, #31]
 8004334:	2b01      	cmp	r3, #1
 8004336:	d105      	bne.n	8004344 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004338:	4b35      	ldr	r3, [pc, #212]	@ (8004410 <HAL_RCC_OscConfig+0x4b8>)
 800433a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800433c:	4a34      	ldr	r2, [pc, #208]	@ (8004410 <HAL_RCC_OscConfig+0x4b8>)
 800433e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004342:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f003 0320 	and.w	r3, r3, #32
 800434c:	2b00      	cmp	r3, #0
 800434e:	d03c      	beq.n	80043ca <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	699b      	ldr	r3, [r3, #24]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d01c      	beq.n	8004392 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004358:	4b2d      	ldr	r3, [pc, #180]	@ (8004410 <HAL_RCC_OscConfig+0x4b8>)
 800435a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800435e:	4a2c      	ldr	r2, [pc, #176]	@ (8004410 <HAL_RCC_OscConfig+0x4b8>)
 8004360:	f043 0301 	orr.w	r3, r3, #1
 8004364:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004368:	f7fd fe36 	bl	8001fd8 <HAL_GetTick>
 800436c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800436e:	e008      	b.n	8004382 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004370:	f7fd fe32 	bl	8001fd8 <HAL_GetTick>
 8004374:	4602      	mov	r2, r0
 8004376:	693b      	ldr	r3, [r7, #16]
 8004378:	1ad3      	subs	r3, r2, r3
 800437a:	2b02      	cmp	r3, #2
 800437c:	d901      	bls.n	8004382 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800437e:	2303      	movs	r3, #3
 8004380:	e0f2      	b.n	8004568 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004382:	4b23      	ldr	r3, [pc, #140]	@ (8004410 <HAL_RCC_OscConfig+0x4b8>)
 8004384:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004388:	f003 0302 	and.w	r3, r3, #2
 800438c:	2b00      	cmp	r3, #0
 800438e:	d0ef      	beq.n	8004370 <HAL_RCC_OscConfig+0x418>
 8004390:	e01b      	b.n	80043ca <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004392:	4b1f      	ldr	r3, [pc, #124]	@ (8004410 <HAL_RCC_OscConfig+0x4b8>)
 8004394:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004398:	4a1d      	ldr	r2, [pc, #116]	@ (8004410 <HAL_RCC_OscConfig+0x4b8>)
 800439a:	f023 0301 	bic.w	r3, r3, #1
 800439e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043a2:	f7fd fe19 	bl	8001fd8 <HAL_GetTick>
 80043a6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80043a8:	e008      	b.n	80043bc <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80043aa:	f7fd fe15 	bl	8001fd8 <HAL_GetTick>
 80043ae:	4602      	mov	r2, r0
 80043b0:	693b      	ldr	r3, [r7, #16]
 80043b2:	1ad3      	subs	r3, r2, r3
 80043b4:	2b02      	cmp	r3, #2
 80043b6:	d901      	bls.n	80043bc <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80043b8:	2303      	movs	r3, #3
 80043ba:	e0d5      	b.n	8004568 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80043bc:	4b14      	ldr	r3, [pc, #80]	@ (8004410 <HAL_RCC_OscConfig+0x4b8>)
 80043be:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80043c2:	f003 0302 	and.w	r3, r3, #2
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d1ef      	bne.n	80043aa <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	69db      	ldr	r3, [r3, #28]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	f000 80c9 	beq.w	8004566 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80043d4:	4b0e      	ldr	r3, [pc, #56]	@ (8004410 <HAL_RCC_OscConfig+0x4b8>)
 80043d6:	689b      	ldr	r3, [r3, #8]
 80043d8:	f003 030c 	and.w	r3, r3, #12
 80043dc:	2b0c      	cmp	r3, #12
 80043de:	f000 8083 	beq.w	80044e8 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	69db      	ldr	r3, [r3, #28]
 80043e6:	2b02      	cmp	r3, #2
 80043e8:	d15e      	bne.n	80044a8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043ea:	4b09      	ldr	r3, [pc, #36]	@ (8004410 <HAL_RCC_OscConfig+0x4b8>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	4a08      	ldr	r2, [pc, #32]	@ (8004410 <HAL_RCC_OscConfig+0x4b8>)
 80043f0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80043f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043f6:	f7fd fdef 	bl	8001fd8 <HAL_GetTick>
 80043fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80043fc:	e00c      	b.n	8004418 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043fe:	f7fd fdeb 	bl	8001fd8 <HAL_GetTick>
 8004402:	4602      	mov	r2, r0
 8004404:	693b      	ldr	r3, [r7, #16]
 8004406:	1ad3      	subs	r3, r2, r3
 8004408:	2b02      	cmp	r3, #2
 800440a:	d905      	bls.n	8004418 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800440c:	2303      	movs	r3, #3
 800440e:	e0ab      	b.n	8004568 <HAL_RCC_OscConfig+0x610>
 8004410:	40021000 	.word	0x40021000
 8004414:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004418:	4b55      	ldr	r3, [pc, #340]	@ (8004570 <HAL_RCC_OscConfig+0x618>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004420:	2b00      	cmp	r3, #0
 8004422:	d1ec      	bne.n	80043fe <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004424:	4b52      	ldr	r3, [pc, #328]	@ (8004570 <HAL_RCC_OscConfig+0x618>)
 8004426:	68da      	ldr	r2, [r3, #12]
 8004428:	4b52      	ldr	r3, [pc, #328]	@ (8004574 <HAL_RCC_OscConfig+0x61c>)
 800442a:	4013      	ands	r3, r2
 800442c:	687a      	ldr	r2, [r7, #4]
 800442e:	6a11      	ldr	r1, [r2, #32]
 8004430:	687a      	ldr	r2, [r7, #4]
 8004432:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004434:	3a01      	subs	r2, #1
 8004436:	0112      	lsls	r2, r2, #4
 8004438:	4311      	orrs	r1, r2
 800443a:	687a      	ldr	r2, [r7, #4]
 800443c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800443e:	0212      	lsls	r2, r2, #8
 8004440:	4311      	orrs	r1, r2
 8004442:	687a      	ldr	r2, [r7, #4]
 8004444:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004446:	0852      	lsrs	r2, r2, #1
 8004448:	3a01      	subs	r2, #1
 800444a:	0552      	lsls	r2, r2, #21
 800444c:	4311      	orrs	r1, r2
 800444e:	687a      	ldr	r2, [r7, #4]
 8004450:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004452:	0852      	lsrs	r2, r2, #1
 8004454:	3a01      	subs	r2, #1
 8004456:	0652      	lsls	r2, r2, #25
 8004458:	4311      	orrs	r1, r2
 800445a:	687a      	ldr	r2, [r7, #4]
 800445c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800445e:	06d2      	lsls	r2, r2, #27
 8004460:	430a      	orrs	r2, r1
 8004462:	4943      	ldr	r1, [pc, #268]	@ (8004570 <HAL_RCC_OscConfig+0x618>)
 8004464:	4313      	orrs	r3, r2
 8004466:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004468:	4b41      	ldr	r3, [pc, #260]	@ (8004570 <HAL_RCC_OscConfig+0x618>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4a40      	ldr	r2, [pc, #256]	@ (8004570 <HAL_RCC_OscConfig+0x618>)
 800446e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004472:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004474:	4b3e      	ldr	r3, [pc, #248]	@ (8004570 <HAL_RCC_OscConfig+0x618>)
 8004476:	68db      	ldr	r3, [r3, #12]
 8004478:	4a3d      	ldr	r2, [pc, #244]	@ (8004570 <HAL_RCC_OscConfig+0x618>)
 800447a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800447e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004480:	f7fd fdaa 	bl	8001fd8 <HAL_GetTick>
 8004484:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004486:	e008      	b.n	800449a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004488:	f7fd fda6 	bl	8001fd8 <HAL_GetTick>
 800448c:	4602      	mov	r2, r0
 800448e:	693b      	ldr	r3, [r7, #16]
 8004490:	1ad3      	subs	r3, r2, r3
 8004492:	2b02      	cmp	r3, #2
 8004494:	d901      	bls.n	800449a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8004496:	2303      	movs	r3, #3
 8004498:	e066      	b.n	8004568 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800449a:	4b35      	ldr	r3, [pc, #212]	@ (8004570 <HAL_RCC_OscConfig+0x618>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d0f0      	beq.n	8004488 <HAL_RCC_OscConfig+0x530>
 80044a6:	e05e      	b.n	8004566 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044a8:	4b31      	ldr	r3, [pc, #196]	@ (8004570 <HAL_RCC_OscConfig+0x618>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4a30      	ldr	r2, [pc, #192]	@ (8004570 <HAL_RCC_OscConfig+0x618>)
 80044ae:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80044b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044b4:	f7fd fd90 	bl	8001fd8 <HAL_GetTick>
 80044b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80044ba:	e008      	b.n	80044ce <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044bc:	f7fd fd8c 	bl	8001fd8 <HAL_GetTick>
 80044c0:	4602      	mov	r2, r0
 80044c2:	693b      	ldr	r3, [r7, #16]
 80044c4:	1ad3      	subs	r3, r2, r3
 80044c6:	2b02      	cmp	r3, #2
 80044c8:	d901      	bls.n	80044ce <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80044ca:	2303      	movs	r3, #3
 80044cc:	e04c      	b.n	8004568 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80044ce:	4b28      	ldr	r3, [pc, #160]	@ (8004570 <HAL_RCC_OscConfig+0x618>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d1f0      	bne.n	80044bc <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80044da:	4b25      	ldr	r3, [pc, #148]	@ (8004570 <HAL_RCC_OscConfig+0x618>)
 80044dc:	68da      	ldr	r2, [r3, #12]
 80044de:	4924      	ldr	r1, [pc, #144]	@ (8004570 <HAL_RCC_OscConfig+0x618>)
 80044e0:	4b25      	ldr	r3, [pc, #148]	@ (8004578 <HAL_RCC_OscConfig+0x620>)
 80044e2:	4013      	ands	r3, r2
 80044e4:	60cb      	str	r3, [r1, #12]
 80044e6:	e03e      	b.n	8004566 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	69db      	ldr	r3, [r3, #28]
 80044ec:	2b01      	cmp	r3, #1
 80044ee:	d101      	bne.n	80044f4 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80044f0:	2301      	movs	r3, #1
 80044f2:	e039      	b.n	8004568 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80044f4:	4b1e      	ldr	r3, [pc, #120]	@ (8004570 <HAL_RCC_OscConfig+0x618>)
 80044f6:	68db      	ldr	r3, [r3, #12]
 80044f8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044fa:	697b      	ldr	r3, [r7, #20]
 80044fc:	f003 0203 	and.w	r2, r3, #3
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6a1b      	ldr	r3, [r3, #32]
 8004504:	429a      	cmp	r2, r3
 8004506:	d12c      	bne.n	8004562 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004508:	697b      	ldr	r3, [r7, #20]
 800450a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004512:	3b01      	subs	r3, #1
 8004514:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004516:	429a      	cmp	r2, r3
 8004518:	d123      	bne.n	8004562 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800451a:	697b      	ldr	r3, [r7, #20]
 800451c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004524:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004526:	429a      	cmp	r2, r3
 8004528:	d11b      	bne.n	8004562 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800452a:	697b      	ldr	r3, [r7, #20]
 800452c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004534:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004536:	429a      	cmp	r2, r3
 8004538:	d113      	bne.n	8004562 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800453a:	697b      	ldr	r3, [r7, #20]
 800453c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004544:	085b      	lsrs	r3, r3, #1
 8004546:	3b01      	subs	r3, #1
 8004548:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800454a:	429a      	cmp	r2, r3
 800454c:	d109      	bne.n	8004562 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800454e:	697b      	ldr	r3, [r7, #20]
 8004550:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004558:	085b      	lsrs	r3, r3, #1
 800455a:	3b01      	subs	r3, #1
 800455c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800455e:	429a      	cmp	r2, r3
 8004560:	d001      	beq.n	8004566 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8004562:	2301      	movs	r3, #1
 8004564:	e000      	b.n	8004568 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8004566:	2300      	movs	r3, #0
}
 8004568:	4618      	mov	r0, r3
 800456a:	3720      	adds	r7, #32
 800456c:	46bd      	mov	sp, r7
 800456e:	bd80      	pop	{r7, pc}
 8004570:	40021000 	.word	0x40021000
 8004574:	019f800c 	.word	0x019f800c
 8004578:	feeefffc 	.word	0xfeeefffc

0800457c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b086      	sub	sp, #24
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
 8004584:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004586:	2300      	movs	r3, #0
 8004588:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d101      	bne.n	8004594 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004590:	2301      	movs	r3, #1
 8004592:	e11e      	b.n	80047d2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004594:	4b91      	ldr	r3, [pc, #580]	@ (80047dc <HAL_RCC_ClockConfig+0x260>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f003 030f 	and.w	r3, r3, #15
 800459c:	683a      	ldr	r2, [r7, #0]
 800459e:	429a      	cmp	r2, r3
 80045a0:	d910      	bls.n	80045c4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045a2:	4b8e      	ldr	r3, [pc, #568]	@ (80047dc <HAL_RCC_ClockConfig+0x260>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f023 020f 	bic.w	r2, r3, #15
 80045aa:	498c      	ldr	r1, [pc, #560]	@ (80047dc <HAL_RCC_ClockConfig+0x260>)
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	4313      	orrs	r3, r2
 80045b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80045b2:	4b8a      	ldr	r3, [pc, #552]	@ (80047dc <HAL_RCC_ClockConfig+0x260>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f003 030f 	and.w	r3, r3, #15
 80045ba:	683a      	ldr	r2, [r7, #0]
 80045bc:	429a      	cmp	r2, r3
 80045be:	d001      	beq.n	80045c4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80045c0:	2301      	movs	r3, #1
 80045c2:	e106      	b.n	80047d2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f003 0301 	and.w	r3, r3, #1
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d073      	beq.n	80046b8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	685b      	ldr	r3, [r3, #4]
 80045d4:	2b03      	cmp	r3, #3
 80045d6:	d129      	bne.n	800462c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80045d8:	4b81      	ldr	r3, [pc, #516]	@ (80047e0 <HAL_RCC_ClockConfig+0x264>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d101      	bne.n	80045e8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80045e4:	2301      	movs	r3, #1
 80045e6:	e0f4      	b.n	80047d2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80045e8:	f000 f99e 	bl	8004928 <RCC_GetSysClockFreqFromPLLSource>
 80045ec:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80045ee:	693b      	ldr	r3, [r7, #16]
 80045f0:	4a7c      	ldr	r2, [pc, #496]	@ (80047e4 <HAL_RCC_ClockConfig+0x268>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d93f      	bls.n	8004676 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80045f6:	4b7a      	ldr	r3, [pc, #488]	@ (80047e0 <HAL_RCC_ClockConfig+0x264>)
 80045f8:	689b      	ldr	r3, [r3, #8]
 80045fa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d009      	beq.n	8004616 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800460a:	2b00      	cmp	r3, #0
 800460c:	d033      	beq.n	8004676 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004612:	2b00      	cmp	r3, #0
 8004614:	d12f      	bne.n	8004676 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004616:	4b72      	ldr	r3, [pc, #456]	@ (80047e0 <HAL_RCC_ClockConfig+0x264>)
 8004618:	689b      	ldr	r3, [r3, #8]
 800461a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800461e:	4a70      	ldr	r2, [pc, #448]	@ (80047e0 <HAL_RCC_ClockConfig+0x264>)
 8004620:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004624:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004626:	2380      	movs	r3, #128	@ 0x80
 8004628:	617b      	str	r3, [r7, #20]
 800462a:	e024      	b.n	8004676 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	2b02      	cmp	r3, #2
 8004632:	d107      	bne.n	8004644 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004634:	4b6a      	ldr	r3, [pc, #424]	@ (80047e0 <HAL_RCC_ClockConfig+0x264>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800463c:	2b00      	cmp	r3, #0
 800463e:	d109      	bne.n	8004654 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004640:	2301      	movs	r3, #1
 8004642:	e0c6      	b.n	80047d2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004644:	4b66      	ldr	r3, [pc, #408]	@ (80047e0 <HAL_RCC_ClockConfig+0x264>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800464c:	2b00      	cmp	r3, #0
 800464e:	d101      	bne.n	8004654 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004650:	2301      	movs	r3, #1
 8004652:	e0be      	b.n	80047d2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004654:	f000 f8ce 	bl	80047f4 <HAL_RCC_GetSysClockFreq>
 8004658:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800465a:	693b      	ldr	r3, [r7, #16]
 800465c:	4a61      	ldr	r2, [pc, #388]	@ (80047e4 <HAL_RCC_ClockConfig+0x268>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d909      	bls.n	8004676 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004662:	4b5f      	ldr	r3, [pc, #380]	@ (80047e0 <HAL_RCC_ClockConfig+0x264>)
 8004664:	689b      	ldr	r3, [r3, #8]
 8004666:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800466a:	4a5d      	ldr	r2, [pc, #372]	@ (80047e0 <HAL_RCC_ClockConfig+0x264>)
 800466c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004670:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004672:	2380      	movs	r3, #128	@ 0x80
 8004674:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004676:	4b5a      	ldr	r3, [pc, #360]	@ (80047e0 <HAL_RCC_ClockConfig+0x264>)
 8004678:	689b      	ldr	r3, [r3, #8]
 800467a:	f023 0203 	bic.w	r2, r3, #3
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	685b      	ldr	r3, [r3, #4]
 8004682:	4957      	ldr	r1, [pc, #348]	@ (80047e0 <HAL_RCC_ClockConfig+0x264>)
 8004684:	4313      	orrs	r3, r2
 8004686:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004688:	f7fd fca6 	bl	8001fd8 <HAL_GetTick>
 800468c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800468e:	e00a      	b.n	80046a6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004690:	f7fd fca2 	bl	8001fd8 <HAL_GetTick>
 8004694:	4602      	mov	r2, r0
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	1ad3      	subs	r3, r2, r3
 800469a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800469e:	4293      	cmp	r3, r2
 80046a0:	d901      	bls.n	80046a6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80046a2:	2303      	movs	r3, #3
 80046a4:	e095      	b.n	80047d2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046a6:	4b4e      	ldr	r3, [pc, #312]	@ (80047e0 <HAL_RCC_ClockConfig+0x264>)
 80046a8:	689b      	ldr	r3, [r3, #8]
 80046aa:	f003 020c 	and.w	r2, r3, #12
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	685b      	ldr	r3, [r3, #4]
 80046b2:	009b      	lsls	r3, r3, #2
 80046b4:	429a      	cmp	r2, r3
 80046b6:	d1eb      	bne.n	8004690 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f003 0302 	and.w	r3, r3, #2
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d023      	beq.n	800470c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f003 0304 	and.w	r3, r3, #4
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d005      	beq.n	80046dc <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80046d0:	4b43      	ldr	r3, [pc, #268]	@ (80047e0 <HAL_RCC_ClockConfig+0x264>)
 80046d2:	689b      	ldr	r3, [r3, #8]
 80046d4:	4a42      	ldr	r2, [pc, #264]	@ (80047e0 <HAL_RCC_ClockConfig+0x264>)
 80046d6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80046da:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f003 0308 	and.w	r3, r3, #8
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d007      	beq.n	80046f8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80046e8:	4b3d      	ldr	r3, [pc, #244]	@ (80047e0 <HAL_RCC_ClockConfig+0x264>)
 80046ea:	689b      	ldr	r3, [r3, #8]
 80046ec:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80046f0:	4a3b      	ldr	r2, [pc, #236]	@ (80047e0 <HAL_RCC_ClockConfig+0x264>)
 80046f2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80046f6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80046f8:	4b39      	ldr	r3, [pc, #228]	@ (80047e0 <HAL_RCC_ClockConfig+0x264>)
 80046fa:	689b      	ldr	r3, [r3, #8]
 80046fc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	689b      	ldr	r3, [r3, #8]
 8004704:	4936      	ldr	r1, [pc, #216]	@ (80047e0 <HAL_RCC_ClockConfig+0x264>)
 8004706:	4313      	orrs	r3, r2
 8004708:	608b      	str	r3, [r1, #8]
 800470a:	e008      	b.n	800471e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800470c:	697b      	ldr	r3, [r7, #20]
 800470e:	2b80      	cmp	r3, #128	@ 0x80
 8004710:	d105      	bne.n	800471e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004712:	4b33      	ldr	r3, [pc, #204]	@ (80047e0 <HAL_RCC_ClockConfig+0x264>)
 8004714:	689b      	ldr	r3, [r3, #8]
 8004716:	4a32      	ldr	r2, [pc, #200]	@ (80047e0 <HAL_RCC_ClockConfig+0x264>)
 8004718:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800471c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800471e:	4b2f      	ldr	r3, [pc, #188]	@ (80047dc <HAL_RCC_ClockConfig+0x260>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f003 030f 	and.w	r3, r3, #15
 8004726:	683a      	ldr	r2, [r7, #0]
 8004728:	429a      	cmp	r2, r3
 800472a:	d21d      	bcs.n	8004768 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800472c:	4b2b      	ldr	r3, [pc, #172]	@ (80047dc <HAL_RCC_ClockConfig+0x260>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f023 020f 	bic.w	r2, r3, #15
 8004734:	4929      	ldr	r1, [pc, #164]	@ (80047dc <HAL_RCC_ClockConfig+0x260>)
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	4313      	orrs	r3, r2
 800473a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800473c:	f7fd fc4c 	bl	8001fd8 <HAL_GetTick>
 8004740:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004742:	e00a      	b.n	800475a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004744:	f7fd fc48 	bl	8001fd8 <HAL_GetTick>
 8004748:	4602      	mov	r2, r0
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	1ad3      	subs	r3, r2, r3
 800474e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004752:	4293      	cmp	r3, r2
 8004754:	d901      	bls.n	800475a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004756:	2303      	movs	r3, #3
 8004758:	e03b      	b.n	80047d2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800475a:	4b20      	ldr	r3, [pc, #128]	@ (80047dc <HAL_RCC_ClockConfig+0x260>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f003 030f 	and.w	r3, r3, #15
 8004762:	683a      	ldr	r2, [r7, #0]
 8004764:	429a      	cmp	r2, r3
 8004766:	d1ed      	bne.n	8004744 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f003 0304 	and.w	r3, r3, #4
 8004770:	2b00      	cmp	r3, #0
 8004772:	d008      	beq.n	8004786 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004774:	4b1a      	ldr	r3, [pc, #104]	@ (80047e0 <HAL_RCC_ClockConfig+0x264>)
 8004776:	689b      	ldr	r3, [r3, #8]
 8004778:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	68db      	ldr	r3, [r3, #12]
 8004780:	4917      	ldr	r1, [pc, #92]	@ (80047e0 <HAL_RCC_ClockConfig+0x264>)
 8004782:	4313      	orrs	r3, r2
 8004784:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f003 0308 	and.w	r3, r3, #8
 800478e:	2b00      	cmp	r3, #0
 8004790:	d009      	beq.n	80047a6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004792:	4b13      	ldr	r3, [pc, #76]	@ (80047e0 <HAL_RCC_ClockConfig+0x264>)
 8004794:	689b      	ldr	r3, [r3, #8]
 8004796:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	691b      	ldr	r3, [r3, #16]
 800479e:	00db      	lsls	r3, r3, #3
 80047a0:	490f      	ldr	r1, [pc, #60]	@ (80047e0 <HAL_RCC_ClockConfig+0x264>)
 80047a2:	4313      	orrs	r3, r2
 80047a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80047a6:	f000 f825 	bl	80047f4 <HAL_RCC_GetSysClockFreq>
 80047aa:	4602      	mov	r2, r0
 80047ac:	4b0c      	ldr	r3, [pc, #48]	@ (80047e0 <HAL_RCC_ClockConfig+0x264>)
 80047ae:	689b      	ldr	r3, [r3, #8]
 80047b0:	091b      	lsrs	r3, r3, #4
 80047b2:	f003 030f 	and.w	r3, r3, #15
 80047b6:	490c      	ldr	r1, [pc, #48]	@ (80047e8 <HAL_RCC_ClockConfig+0x26c>)
 80047b8:	5ccb      	ldrb	r3, [r1, r3]
 80047ba:	f003 031f 	and.w	r3, r3, #31
 80047be:	fa22 f303 	lsr.w	r3, r2, r3
 80047c2:	4a0a      	ldr	r2, [pc, #40]	@ (80047ec <HAL_RCC_ClockConfig+0x270>)
 80047c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80047c6:	4b0a      	ldr	r3, [pc, #40]	@ (80047f0 <HAL_RCC_ClockConfig+0x274>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4618      	mov	r0, r3
 80047cc:	f7fd fbb8 	bl	8001f40 <HAL_InitTick>
 80047d0:	4603      	mov	r3, r0
}
 80047d2:	4618      	mov	r0, r3
 80047d4:	3718      	adds	r7, #24
 80047d6:	46bd      	mov	sp, r7
 80047d8:	bd80      	pop	{r7, pc}
 80047da:	bf00      	nop
 80047dc:	40022000 	.word	0x40022000
 80047e0:	40021000 	.word	0x40021000
 80047e4:	04c4b400 	.word	0x04c4b400
 80047e8:	0800984c 	.word	0x0800984c
 80047ec:	20000200 	.word	0x20000200
 80047f0:	20000204 	.word	0x20000204

080047f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80047f4:	b480      	push	{r7}
 80047f6:	b087      	sub	sp, #28
 80047f8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80047fa:	4b2c      	ldr	r3, [pc, #176]	@ (80048ac <HAL_RCC_GetSysClockFreq+0xb8>)
 80047fc:	689b      	ldr	r3, [r3, #8]
 80047fe:	f003 030c 	and.w	r3, r3, #12
 8004802:	2b04      	cmp	r3, #4
 8004804:	d102      	bne.n	800480c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004806:	4b2a      	ldr	r3, [pc, #168]	@ (80048b0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004808:	613b      	str	r3, [r7, #16]
 800480a:	e047      	b.n	800489c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800480c:	4b27      	ldr	r3, [pc, #156]	@ (80048ac <HAL_RCC_GetSysClockFreq+0xb8>)
 800480e:	689b      	ldr	r3, [r3, #8]
 8004810:	f003 030c 	and.w	r3, r3, #12
 8004814:	2b08      	cmp	r3, #8
 8004816:	d102      	bne.n	800481e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004818:	4b26      	ldr	r3, [pc, #152]	@ (80048b4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800481a:	613b      	str	r3, [r7, #16]
 800481c:	e03e      	b.n	800489c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800481e:	4b23      	ldr	r3, [pc, #140]	@ (80048ac <HAL_RCC_GetSysClockFreq+0xb8>)
 8004820:	689b      	ldr	r3, [r3, #8]
 8004822:	f003 030c 	and.w	r3, r3, #12
 8004826:	2b0c      	cmp	r3, #12
 8004828:	d136      	bne.n	8004898 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800482a:	4b20      	ldr	r3, [pc, #128]	@ (80048ac <HAL_RCC_GetSysClockFreq+0xb8>)
 800482c:	68db      	ldr	r3, [r3, #12]
 800482e:	f003 0303 	and.w	r3, r3, #3
 8004832:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004834:	4b1d      	ldr	r3, [pc, #116]	@ (80048ac <HAL_RCC_GetSysClockFreq+0xb8>)
 8004836:	68db      	ldr	r3, [r3, #12]
 8004838:	091b      	lsrs	r3, r3, #4
 800483a:	f003 030f 	and.w	r3, r3, #15
 800483e:	3301      	adds	r3, #1
 8004840:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	2b03      	cmp	r3, #3
 8004846:	d10c      	bne.n	8004862 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004848:	4a1a      	ldr	r2, [pc, #104]	@ (80048b4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800484a:	68bb      	ldr	r3, [r7, #8]
 800484c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004850:	4a16      	ldr	r2, [pc, #88]	@ (80048ac <HAL_RCC_GetSysClockFreq+0xb8>)
 8004852:	68d2      	ldr	r2, [r2, #12]
 8004854:	0a12      	lsrs	r2, r2, #8
 8004856:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800485a:	fb02 f303 	mul.w	r3, r2, r3
 800485e:	617b      	str	r3, [r7, #20]
      break;
 8004860:	e00c      	b.n	800487c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004862:	4a13      	ldr	r2, [pc, #76]	@ (80048b0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004864:	68bb      	ldr	r3, [r7, #8]
 8004866:	fbb2 f3f3 	udiv	r3, r2, r3
 800486a:	4a10      	ldr	r2, [pc, #64]	@ (80048ac <HAL_RCC_GetSysClockFreq+0xb8>)
 800486c:	68d2      	ldr	r2, [r2, #12]
 800486e:	0a12      	lsrs	r2, r2, #8
 8004870:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004874:	fb02 f303 	mul.w	r3, r2, r3
 8004878:	617b      	str	r3, [r7, #20]
      break;
 800487a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800487c:	4b0b      	ldr	r3, [pc, #44]	@ (80048ac <HAL_RCC_GetSysClockFreq+0xb8>)
 800487e:	68db      	ldr	r3, [r3, #12]
 8004880:	0e5b      	lsrs	r3, r3, #25
 8004882:	f003 0303 	and.w	r3, r3, #3
 8004886:	3301      	adds	r3, #1
 8004888:	005b      	lsls	r3, r3, #1
 800488a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800488c:	697a      	ldr	r2, [r7, #20]
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	fbb2 f3f3 	udiv	r3, r2, r3
 8004894:	613b      	str	r3, [r7, #16]
 8004896:	e001      	b.n	800489c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004898:	2300      	movs	r3, #0
 800489a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800489c:	693b      	ldr	r3, [r7, #16]
}
 800489e:	4618      	mov	r0, r3
 80048a0:	371c      	adds	r7, #28
 80048a2:	46bd      	mov	sp, r7
 80048a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a8:	4770      	bx	lr
 80048aa:	bf00      	nop
 80048ac:	40021000 	.word	0x40021000
 80048b0:	00f42400 	.word	0x00f42400
 80048b4:	016e3600 	.word	0x016e3600

080048b8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80048b8:	b480      	push	{r7}
 80048ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80048bc:	4b03      	ldr	r3, [pc, #12]	@ (80048cc <HAL_RCC_GetHCLKFreq+0x14>)
 80048be:	681b      	ldr	r3, [r3, #0]
}
 80048c0:	4618      	mov	r0, r3
 80048c2:	46bd      	mov	sp, r7
 80048c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c8:	4770      	bx	lr
 80048ca:	bf00      	nop
 80048cc:	20000200 	.word	0x20000200

080048d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80048d4:	f7ff fff0 	bl	80048b8 <HAL_RCC_GetHCLKFreq>
 80048d8:	4602      	mov	r2, r0
 80048da:	4b06      	ldr	r3, [pc, #24]	@ (80048f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80048dc:	689b      	ldr	r3, [r3, #8]
 80048de:	0a1b      	lsrs	r3, r3, #8
 80048e0:	f003 0307 	and.w	r3, r3, #7
 80048e4:	4904      	ldr	r1, [pc, #16]	@ (80048f8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80048e6:	5ccb      	ldrb	r3, [r1, r3]
 80048e8:	f003 031f 	and.w	r3, r3, #31
 80048ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80048f0:	4618      	mov	r0, r3
 80048f2:	bd80      	pop	{r7, pc}
 80048f4:	40021000 	.word	0x40021000
 80048f8:	0800985c 	.word	0x0800985c

080048fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004900:	f7ff ffda 	bl	80048b8 <HAL_RCC_GetHCLKFreq>
 8004904:	4602      	mov	r2, r0
 8004906:	4b06      	ldr	r3, [pc, #24]	@ (8004920 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004908:	689b      	ldr	r3, [r3, #8]
 800490a:	0adb      	lsrs	r3, r3, #11
 800490c:	f003 0307 	and.w	r3, r3, #7
 8004910:	4904      	ldr	r1, [pc, #16]	@ (8004924 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004912:	5ccb      	ldrb	r3, [r1, r3]
 8004914:	f003 031f 	and.w	r3, r3, #31
 8004918:	fa22 f303 	lsr.w	r3, r2, r3
}
 800491c:	4618      	mov	r0, r3
 800491e:	bd80      	pop	{r7, pc}
 8004920:	40021000 	.word	0x40021000
 8004924:	0800985c 	.word	0x0800985c

08004928 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004928:	b480      	push	{r7}
 800492a:	b087      	sub	sp, #28
 800492c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800492e:	4b1e      	ldr	r3, [pc, #120]	@ (80049a8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004930:	68db      	ldr	r3, [r3, #12]
 8004932:	f003 0303 	and.w	r3, r3, #3
 8004936:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004938:	4b1b      	ldr	r3, [pc, #108]	@ (80049a8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800493a:	68db      	ldr	r3, [r3, #12]
 800493c:	091b      	lsrs	r3, r3, #4
 800493e:	f003 030f 	and.w	r3, r3, #15
 8004942:	3301      	adds	r3, #1
 8004944:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004946:	693b      	ldr	r3, [r7, #16]
 8004948:	2b03      	cmp	r3, #3
 800494a:	d10c      	bne.n	8004966 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800494c:	4a17      	ldr	r2, [pc, #92]	@ (80049ac <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	fbb2 f3f3 	udiv	r3, r2, r3
 8004954:	4a14      	ldr	r2, [pc, #80]	@ (80049a8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004956:	68d2      	ldr	r2, [r2, #12]
 8004958:	0a12      	lsrs	r2, r2, #8
 800495a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800495e:	fb02 f303 	mul.w	r3, r2, r3
 8004962:	617b      	str	r3, [r7, #20]
    break;
 8004964:	e00c      	b.n	8004980 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004966:	4a12      	ldr	r2, [pc, #72]	@ (80049b0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	fbb2 f3f3 	udiv	r3, r2, r3
 800496e:	4a0e      	ldr	r2, [pc, #56]	@ (80049a8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004970:	68d2      	ldr	r2, [r2, #12]
 8004972:	0a12      	lsrs	r2, r2, #8
 8004974:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004978:	fb02 f303 	mul.w	r3, r2, r3
 800497c:	617b      	str	r3, [r7, #20]
    break;
 800497e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004980:	4b09      	ldr	r3, [pc, #36]	@ (80049a8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004982:	68db      	ldr	r3, [r3, #12]
 8004984:	0e5b      	lsrs	r3, r3, #25
 8004986:	f003 0303 	and.w	r3, r3, #3
 800498a:	3301      	adds	r3, #1
 800498c:	005b      	lsls	r3, r3, #1
 800498e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004990:	697a      	ldr	r2, [r7, #20]
 8004992:	68bb      	ldr	r3, [r7, #8]
 8004994:	fbb2 f3f3 	udiv	r3, r2, r3
 8004998:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800499a:	687b      	ldr	r3, [r7, #4]
}
 800499c:	4618      	mov	r0, r3
 800499e:	371c      	adds	r7, #28
 80049a0:	46bd      	mov	sp, r7
 80049a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a6:	4770      	bx	lr
 80049a8:	40021000 	.word	0x40021000
 80049ac:	016e3600 	.word	0x016e3600
 80049b0:	00f42400 	.word	0x00f42400

080049b4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b086      	sub	sp, #24
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80049bc:	2300      	movs	r3, #0
 80049be:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80049c0:	2300      	movs	r3, #0
 80049c2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	f000 8098 	beq.w	8004b02 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80049d2:	2300      	movs	r3, #0
 80049d4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80049d6:	4b43      	ldr	r3, [pc, #268]	@ (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80049d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d10d      	bne.n	80049fe <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80049e2:	4b40      	ldr	r3, [pc, #256]	@ (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80049e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049e6:	4a3f      	ldr	r2, [pc, #252]	@ (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80049e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80049ec:	6593      	str	r3, [r2, #88]	@ 0x58
 80049ee:	4b3d      	ldr	r3, [pc, #244]	@ (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80049f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80049f6:	60bb      	str	r3, [r7, #8]
 80049f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80049fa:	2301      	movs	r3, #1
 80049fc:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80049fe:	4b3a      	ldr	r3, [pc, #232]	@ (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4a39      	ldr	r2, [pc, #228]	@ (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004a04:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004a08:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004a0a:	f7fd fae5 	bl	8001fd8 <HAL_GetTick>
 8004a0e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004a10:	e009      	b.n	8004a26 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a12:	f7fd fae1 	bl	8001fd8 <HAL_GetTick>
 8004a16:	4602      	mov	r2, r0
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	1ad3      	subs	r3, r2, r3
 8004a1c:	2b02      	cmp	r3, #2
 8004a1e:	d902      	bls.n	8004a26 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004a20:	2303      	movs	r3, #3
 8004a22:	74fb      	strb	r3, [r7, #19]
        break;
 8004a24:	e005      	b.n	8004a32 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004a26:	4b30      	ldr	r3, [pc, #192]	@ (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d0ef      	beq.n	8004a12 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004a32:	7cfb      	ldrb	r3, [r7, #19]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d159      	bne.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004a38:	4b2a      	ldr	r3, [pc, #168]	@ (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a3e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004a42:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004a44:	697b      	ldr	r3, [r7, #20]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d01e      	beq.n	8004a88 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a4e:	697a      	ldr	r2, [r7, #20]
 8004a50:	429a      	cmp	r2, r3
 8004a52:	d019      	beq.n	8004a88 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004a54:	4b23      	ldr	r3, [pc, #140]	@ (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a5a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004a5e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004a60:	4b20      	ldr	r3, [pc, #128]	@ (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a66:	4a1f      	ldr	r2, [pc, #124]	@ (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a68:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a6c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004a70:	4b1c      	ldr	r3, [pc, #112]	@ (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a76:	4a1b      	ldr	r2, [pc, #108]	@ (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a78:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004a7c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004a80:	4a18      	ldr	r2, [pc, #96]	@ (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a82:	697b      	ldr	r3, [r7, #20]
 8004a84:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004a88:	697b      	ldr	r3, [r7, #20]
 8004a8a:	f003 0301 	and.w	r3, r3, #1
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d016      	beq.n	8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a92:	f7fd faa1 	bl	8001fd8 <HAL_GetTick>
 8004a96:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a98:	e00b      	b.n	8004ab2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a9a:	f7fd fa9d 	bl	8001fd8 <HAL_GetTick>
 8004a9e:	4602      	mov	r2, r0
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	1ad3      	subs	r3, r2, r3
 8004aa4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d902      	bls.n	8004ab2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004aac:	2303      	movs	r3, #3
 8004aae:	74fb      	strb	r3, [r7, #19]
            break;
 8004ab0:	e006      	b.n	8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ab2:	4b0c      	ldr	r3, [pc, #48]	@ (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ab4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ab8:	f003 0302 	and.w	r3, r3, #2
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d0ec      	beq.n	8004a9a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004ac0:	7cfb      	ldrb	r3, [r7, #19]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d10b      	bne.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004ac6:	4b07      	ldr	r3, [pc, #28]	@ (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ac8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004acc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ad4:	4903      	ldr	r1, [pc, #12]	@ (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004adc:	e008      	b.n	8004af0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004ade:	7cfb      	ldrb	r3, [r7, #19]
 8004ae0:	74bb      	strb	r3, [r7, #18]
 8004ae2:	e005      	b.n	8004af0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004ae4:	40021000 	.word	0x40021000
 8004ae8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004aec:	7cfb      	ldrb	r3, [r7, #19]
 8004aee:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004af0:	7c7b      	ldrb	r3, [r7, #17]
 8004af2:	2b01      	cmp	r3, #1
 8004af4:	d105      	bne.n	8004b02 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004af6:	4ba7      	ldr	r3, [pc, #668]	@ (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004af8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004afa:	4aa6      	ldr	r2, [pc, #664]	@ (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004afc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004b00:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f003 0301 	and.w	r3, r3, #1
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d00a      	beq.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004b0e:	4ba1      	ldr	r3, [pc, #644]	@ (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b14:	f023 0203 	bic.w	r2, r3, #3
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	685b      	ldr	r3, [r3, #4]
 8004b1c:	499d      	ldr	r1, [pc, #628]	@ (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b1e:	4313      	orrs	r3, r2
 8004b20:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f003 0302 	and.w	r3, r3, #2
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d00a      	beq.n	8004b46 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004b30:	4b98      	ldr	r3, [pc, #608]	@ (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b36:	f023 020c 	bic.w	r2, r3, #12
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	689b      	ldr	r3, [r3, #8]
 8004b3e:	4995      	ldr	r1, [pc, #596]	@ (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b40:	4313      	orrs	r3, r2
 8004b42:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f003 0304 	and.w	r3, r3, #4
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d00a      	beq.n	8004b68 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004b52:	4b90      	ldr	r3, [pc, #576]	@ (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b58:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	68db      	ldr	r3, [r3, #12]
 8004b60:	498c      	ldr	r1, [pc, #560]	@ (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b62:	4313      	orrs	r3, r2
 8004b64:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f003 0308 	and.w	r3, r3, #8
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d00a      	beq.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004b74:	4b87      	ldr	r3, [pc, #540]	@ (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b7a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	691b      	ldr	r3, [r3, #16]
 8004b82:	4984      	ldr	r1, [pc, #528]	@ (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b84:	4313      	orrs	r3, r2
 8004b86:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f003 0310 	and.w	r3, r3, #16
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d00a      	beq.n	8004bac <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004b96:	4b7f      	ldr	r3, [pc, #508]	@ (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b9c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	695b      	ldr	r3, [r3, #20]
 8004ba4:	497b      	ldr	r1, [pc, #492]	@ (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f003 0320 	and.w	r3, r3, #32
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d00a      	beq.n	8004bce <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004bb8:	4b76      	ldr	r3, [pc, #472]	@ (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004bba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bbe:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	699b      	ldr	r3, [r3, #24]
 8004bc6:	4973      	ldr	r1, [pc, #460]	@ (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004bc8:	4313      	orrs	r3, r2
 8004bca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d00a      	beq.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004bda:	4b6e      	ldr	r3, [pc, #440]	@ (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004bdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004be0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	69db      	ldr	r3, [r3, #28]
 8004be8:	496a      	ldr	r1, [pc, #424]	@ (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004bea:	4313      	orrs	r3, r2
 8004bec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d00a      	beq.n	8004c12 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004bfc:	4b65      	ldr	r3, [pc, #404]	@ (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004bfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c02:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6a1b      	ldr	r3, [r3, #32]
 8004c0a:	4962      	ldr	r1, [pc, #392]	@ (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c0c:	4313      	orrs	r3, r2
 8004c0e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d00a      	beq.n	8004c34 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004c1e:	4b5d      	ldr	r3, [pc, #372]	@ (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c24:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c2c:	4959      	ldr	r1, [pc, #356]	@ (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c2e:	4313      	orrs	r3, r2
 8004c30:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d00a      	beq.n	8004c56 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004c40:	4b54      	ldr	r3, [pc, #336]	@ (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c42:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004c46:	f023 0203 	bic.w	r2, r3, #3
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c4e:	4951      	ldr	r1, [pc, #324]	@ (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c50:	4313      	orrs	r3, r2
 8004c52:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d00a      	beq.n	8004c78 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004c62:	4b4c      	ldr	r3, [pc, #304]	@ (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c68:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c70:	4948      	ldr	r1, [pc, #288]	@ (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c72:	4313      	orrs	r3, r2
 8004c74:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d015      	beq.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004c84:	4b43      	ldr	r3, [pc, #268]	@ (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c8a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c92:	4940      	ldr	r1, [pc, #256]	@ (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c94:	4313      	orrs	r3, r2
 8004c96:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c9e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004ca2:	d105      	bne.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ca4:	4b3b      	ldr	r3, [pc, #236]	@ (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ca6:	68db      	ldr	r3, [r3, #12]
 8004ca8:	4a3a      	ldr	r2, [pc, #232]	@ (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004caa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004cae:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d015      	beq.n	8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004cbc:	4b35      	ldr	r3, [pc, #212]	@ (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cc2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004cca:	4932      	ldr	r1, [pc, #200]	@ (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ccc:	4313      	orrs	r3, r2
 8004cce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004cd6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004cda:	d105      	bne.n	8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004cdc:	4b2d      	ldr	r3, [pc, #180]	@ (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cde:	68db      	ldr	r3, [r3, #12]
 8004ce0:	4a2c      	ldr	r2, [pc, #176]	@ (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ce2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004ce6:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d015      	beq.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004cf4:	4b27      	ldr	r3, [pc, #156]	@ (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cfa:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d02:	4924      	ldr	r1, [pc, #144]	@ (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d04:	4313      	orrs	r3, r2
 8004d06:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d0e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004d12:	d105      	bne.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004d14:	4b1f      	ldr	r3, [pc, #124]	@ (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d16:	68db      	ldr	r3, [r3, #12]
 8004d18:	4a1e      	ldr	r2, [pc, #120]	@ (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d1a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004d1e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d015      	beq.n	8004d58 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004d2c:	4b19      	ldr	r3, [pc, #100]	@ (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d32:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d3a:	4916      	ldr	r1, [pc, #88]	@ (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d3c:	4313      	orrs	r3, r2
 8004d3e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d46:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004d4a:	d105      	bne.n	8004d58 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004d4c:	4b11      	ldr	r3, [pc, #68]	@ (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d4e:	68db      	ldr	r3, [r3, #12]
 8004d50:	4a10      	ldr	r2, [pc, #64]	@ (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d52:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004d56:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d019      	beq.n	8004d98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004d64:	4b0b      	ldr	r3, [pc, #44]	@ (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d6a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d72:	4908      	ldr	r1, [pc, #32]	@ (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d74:	4313      	orrs	r3, r2
 8004d76:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d7e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004d82:	d109      	bne.n	8004d98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004d84:	4b03      	ldr	r3, [pc, #12]	@ (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d86:	68db      	ldr	r3, [r3, #12]
 8004d88:	4a02      	ldr	r2, [pc, #8]	@ (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d8a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004d8e:	60d3      	str	r3, [r2, #12]
 8004d90:	e002      	b.n	8004d98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8004d92:	bf00      	nop
 8004d94:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d015      	beq.n	8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004da4:	4b29      	ldr	r3, [pc, #164]	@ (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004da6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004daa:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004db2:	4926      	ldr	r1, [pc, #152]	@ (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004db4:	4313      	orrs	r3, r2
 8004db6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004dbe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004dc2:	d105      	bne.n	8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004dc4:	4b21      	ldr	r3, [pc, #132]	@ (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004dc6:	68db      	ldr	r3, [r3, #12]
 8004dc8:	4a20      	ldr	r2, [pc, #128]	@ (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004dca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004dce:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d015      	beq.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8004ddc:	4b1b      	ldr	r3, [pc, #108]	@ (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004dde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004de2:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004dea:	4918      	ldr	r1, [pc, #96]	@ (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004dec:	4313      	orrs	r3, r2
 8004dee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004df6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004dfa:	d105      	bne.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004dfc:	4b13      	ldr	r3, [pc, #76]	@ (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004dfe:	68db      	ldr	r3, [r3, #12]
 8004e00:	4a12      	ldr	r2, [pc, #72]	@ (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004e02:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004e06:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d015      	beq.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004e14:	4b0d      	ldr	r3, [pc, #52]	@ (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004e16:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004e1a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004e22:	490a      	ldr	r1, [pc, #40]	@ (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004e24:	4313      	orrs	r3, r2
 8004e26:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004e2e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004e32:	d105      	bne.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e34:	4b05      	ldr	r3, [pc, #20]	@ (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004e36:	68db      	ldr	r3, [r3, #12]
 8004e38:	4a04      	ldr	r2, [pc, #16]	@ (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004e3a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004e3e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004e40:	7cbb      	ldrb	r3, [r7, #18]
}
 8004e42:	4618      	mov	r0, r3
 8004e44:	3718      	adds	r7, #24
 8004e46:	46bd      	mov	sp, r7
 8004e48:	bd80      	pop	{r7, pc}
 8004e4a:	bf00      	nop
 8004e4c:	40021000 	.word	0x40021000

08004e50 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b082      	sub	sp, #8
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d101      	bne.n	8004e62 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004e5e:	2301      	movs	r3, #1
 8004e60:	e054      	b.n	8004f0c <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e68:	b2db      	uxtb	r3, r3
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d111      	bne.n	8004e92 <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2200      	movs	r2, #0
 8004e72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8004e76:	6878      	ldr	r0, [r7, #4]
 8004e78:	f001 fe5c 	bl	8006b34 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d102      	bne.n	8004e8a <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	4a23      	ldr	r2, [pc, #140]	@ (8004f14 <HAL_TIM_Base_Init+0xc4>)
 8004e88:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004e8e:	6878      	ldr	r0, [r7, #4]
 8004e90:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2202      	movs	r2, #2
 8004e96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681a      	ldr	r2, [r3, #0]
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	3304      	adds	r3, #4
 8004ea2:	4619      	mov	r1, r3
 8004ea4:	4610      	mov	r0, r2
 8004ea6:	f001 f9a5 	bl	80061f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2201      	movs	r2, #1
 8004eae:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2201      	movs	r2, #1
 8004eb6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2201      	movs	r2, #1
 8004ebe:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2201      	movs	r2, #1
 8004ec6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2201      	movs	r2, #1
 8004ece:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2201      	movs	r2, #1
 8004ed6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2201      	movs	r2, #1
 8004ede:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2201      	movs	r2, #1
 8004ee6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2201      	movs	r2, #1
 8004eee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2201      	movs	r2, #1
 8004ef6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2201      	movs	r2, #1
 8004efe:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2201      	movs	r2, #1
 8004f06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004f0a:	2300      	movs	r3, #0
}
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	3708      	adds	r7, #8
 8004f10:	46bd      	mov	sp, r7
 8004f12:	bd80      	pop	{r7, pc}
 8004f14:	08001921 	.word	0x08001921

08004f18 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004f18:	b480      	push	{r7}
 8004f1a:	b085      	sub	sp, #20
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f26:	b2db      	uxtb	r3, r3
 8004f28:	2b01      	cmp	r3, #1
 8004f2a:	d001      	beq.n	8004f30 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004f2c:	2301      	movs	r3, #1
 8004f2e:	e054      	b.n	8004fda <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2202      	movs	r2, #2
 8004f34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	68da      	ldr	r2, [r3, #12]
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f042 0201 	orr.w	r2, r2, #1
 8004f46:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	4a26      	ldr	r2, [pc, #152]	@ (8004fe8 <HAL_TIM_Base_Start_IT+0xd0>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d022      	beq.n	8004f98 <HAL_TIM_Base_Start_IT+0x80>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f5a:	d01d      	beq.n	8004f98 <HAL_TIM_Base_Start_IT+0x80>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4a22      	ldr	r2, [pc, #136]	@ (8004fec <HAL_TIM_Base_Start_IT+0xd4>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d018      	beq.n	8004f98 <HAL_TIM_Base_Start_IT+0x80>
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	4a21      	ldr	r2, [pc, #132]	@ (8004ff0 <HAL_TIM_Base_Start_IT+0xd8>)
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d013      	beq.n	8004f98 <HAL_TIM_Base_Start_IT+0x80>
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	4a1f      	ldr	r2, [pc, #124]	@ (8004ff4 <HAL_TIM_Base_Start_IT+0xdc>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d00e      	beq.n	8004f98 <HAL_TIM_Base_Start_IT+0x80>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	4a1e      	ldr	r2, [pc, #120]	@ (8004ff8 <HAL_TIM_Base_Start_IT+0xe0>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d009      	beq.n	8004f98 <HAL_TIM_Base_Start_IT+0x80>
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	4a1c      	ldr	r2, [pc, #112]	@ (8004ffc <HAL_TIM_Base_Start_IT+0xe4>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d004      	beq.n	8004f98 <HAL_TIM_Base_Start_IT+0x80>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	4a1b      	ldr	r2, [pc, #108]	@ (8005000 <HAL_TIM_Base_Start_IT+0xe8>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d115      	bne.n	8004fc4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	689a      	ldr	r2, [r3, #8]
 8004f9e:	4b19      	ldr	r3, [pc, #100]	@ (8005004 <HAL_TIM_Base_Start_IT+0xec>)
 8004fa0:	4013      	ands	r3, r2
 8004fa2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	2b06      	cmp	r3, #6
 8004fa8:	d015      	beq.n	8004fd6 <HAL_TIM_Base_Start_IT+0xbe>
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004fb0:	d011      	beq.n	8004fd6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	681a      	ldr	r2, [r3, #0]
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f042 0201 	orr.w	r2, r2, #1
 8004fc0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fc2:	e008      	b.n	8004fd6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	681a      	ldr	r2, [r3, #0]
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f042 0201 	orr.w	r2, r2, #1
 8004fd2:	601a      	str	r2, [r3, #0]
 8004fd4:	e000      	b.n	8004fd8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fd6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004fd8:	2300      	movs	r3, #0
}
 8004fda:	4618      	mov	r0, r3
 8004fdc:	3714      	adds	r7, #20
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe4:	4770      	bx	lr
 8004fe6:	bf00      	nop
 8004fe8:	40012c00 	.word	0x40012c00
 8004fec:	40000400 	.word	0x40000400
 8004ff0:	40000800 	.word	0x40000800
 8004ff4:	40000c00 	.word	0x40000c00
 8004ff8:	40013400 	.word	0x40013400
 8004ffc:	40014000 	.word	0x40014000
 8005000:	40015000 	.word	0x40015000
 8005004:	00010007 	.word	0x00010007

08005008 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b082      	sub	sp, #8
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d101      	bne.n	800501a <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8005016:	2301      	movs	r3, #1
 8005018:	e054      	b.n	80050c4 <HAL_TIM_OC_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005020:	b2db      	uxtb	r3, r3
 8005022:	2b00      	cmp	r3, #0
 8005024:	d111      	bne.n	800504a <HAL_TIM_OC_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2200      	movs	r2, #0
 800502a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800502e:	6878      	ldr	r0, [r7, #4]
 8005030:	f001 fd80 	bl	8006b34 <TIM_ResetCallback>

    if (htim->OC_MspInitCallback == NULL)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005038:	2b00      	cmp	r3, #0
 800503a:	d102      	bne.n	8005042 <HAL_TIM_OC_Init+0x3a>
    {
      htim->OC_MspInitCallback = HAL_TIM_OC_MspInit;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	4a23      	ldr	r2, [pc, #140]	@ (80050cc <HAL_TIM_OC_Init+0xc4>)
 8005040:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005046:	6878      	ldr	r0, [r7, #4]
 8005048:	4798      	blx	r3
    HAL_TIM_OC_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2202      	movs	r2, #2
 800504e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681a      	ldr	r2, [r3, #0]
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	3304      	adds	r3, #4
 800505a:	4619      	mov	r1, r3
 800505c:	4610      	mov	r0, r2
 800505e:	f001 f8c9 	bl	80061f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2201      	movs	r2, #1
 8005066:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2201      	movs	r2, #1
 800506e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2201      	movs	r2, #1
 8005076:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2201      	movs	r2, #1
 800507e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2201      	movs	r2, #1
 8005086:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2201      	movs	r2, #1
 800508e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2201      	movs	r2, #1
 8005096:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2201      	movs	r2, #1
 800509e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2201      	movs	r2, #1
 80050a6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2201      	movs	r2, #1
 80050ae:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2201      	movs	r2, #1
 80050b6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2201      	movs	r2, #1
 80050be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80050c2:	2300      	movs	r3, #0
}
 80050c4:	4618      	mov	r0, r3
 80050c6:	3708      	adds	r7, #8
 80050c8:	46bd      	mov	sp, r7
 80050ca:	bd80      	pop	{r7, pc}
 80050cc:	080050d1 	.word	0x080050d1

080050d0 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80050d0:	b480      	push	{r7}
 80050d2:	b083      	sub	sp, #12
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80050d8:	bf00      	nop
 80050da:	370c      	adds	r7, #12
 80050dc:	46bd      	mov	sp, r7
 80050de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e2:	4770      	bx	lr

080050e4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b082      	sub	sp, #8
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d101      	bne.n	80050f6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80050f2:	2301      	movs	r3, #1
 80050f4:	e054      	b.n	80051a0 <HAL_TIM_PWM_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80050fc:	b2db      	uxtb	r3, r3
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d111      	bne.n	8005126 <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2200      	movs	r2, #0
 8005106:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800510a:	6878      	ldr	r0, [r7, #4]
 800510c:	f001 fd12 	bl	8006b34 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005114:	2b00      	cmp	r3, #0
 8005116:	d102      	bne.n	800511e <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	4a23      	ldr	r2, [pc, #140]	@ (80051a8 <HAL_TIM_PWM_Init+0xc4>)
 800511c:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005122:	6878      	ldr	r0, [r7, #4]
 8005124:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2202      	movs	r2, #2
 800512a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681a      	ldr	r2, [r3, #0]
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	3304      	adds	r3, #4
 8005136:	4619      	mov	r1, r3
 8005138:	4610      	mov	r0, r2
 800513a:	f001 f85b 	bl	80061f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2201      	movs	r2, #1
 8005142:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2201      	movs	r2, #1
 800514a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2201      	movs	r2, #1
 8005152:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2201      	movs	r2, #1
 800515a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2201      	movs	r2, #1
 8005162:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2201      	movs	r2, #1
 800516a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2201      	movs	r2, #1
 8005172:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2201      	movs	r2, #1
 800517a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2201      	movs	r2, #1
 8005182:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2201      	movs	r2, #1
 800518a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2201      	movs	r2, #1
 8005192:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2201      	movs	r2, #1
 800519a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800519e:	2300      	movs	r3, #0
}
 80051a0:	4618      	mov	r0, r3
 80051a2:	3708      	adds	r7, #8
 80051a4:	46bd      	mov	sp, r7
 80051a6:	bd80      	pop	{r7, pc}
 80051a8:	080051ad 	.word	0x080051ad

080051ac <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80051ac:	b480      	push	{r7}
 80051ae:	b083      	sub	sp, #12
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80051b4:	bf00      	nop
 80051b6:	370c      	adds	r7, #12
 80051b8:	46bd      	mov	sp, r7
 80051ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051be:	4770      	bx	lr

080051c0 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b082      	sub	sp, #8
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
 80051c8:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d101      	bne.n	80051d4 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 80051d0:	2301      	movs	r3, #1
 80051d2:	e04c      	b.n	800526e <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80051da:	b2db      	uxtb	r3, r3
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d111      	bne.n	8005204 <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2200      	movs	r2, #0
 80051e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80051e8:	6878      	ldr	r0, [r7, #4]
 80051ea:	f001 fca3 	bl	8006b34 <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d102      	bne.n	80051fc <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	4a1f      	ldr	r2, [pc, #124]	@ (8005278 <HAL_TIM_OnePulse_Init+0xb8>)
 80051fa:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005200:	6878      	ldr	r0, [r7, #4]
 8005202:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2202      	movs	r2, #2
 8005208:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681a      	ldr	r2, [r3, #0]
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	3304      	adds	r3, #4
 8005214:	4619      	mov	r1, r3
 8005216:	4610      	mov	r0, r2
 8005218:	f000 ffec 	bl	80061f4 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	681a      	ldr	r2, [r3, #0]
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f022 0208 	bic.w	r2, r2, #8
 800522a:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	6819      	ldr	r1, [r3, #0]
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	683a      	ldr	r2, [r7, #0]
 8005238:	430a      	orrs	r2, r1
 800523a:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2201      	movs	r2, #1
 8005240:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2201      	movs	r2, #1
 8005248:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2201      	movs	r2, #1
 8005250:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2201      	movs	r2, #1
 8005258:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2201      	movs	r2, #1
 8005260:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2201      	movs	r2, #1
 8005268:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800526c:	2300      	movs	r3, #0
}
 800526e:	4618      	mov	r0, r3
 8005270:	3708      	adds	r7, #8
 8005272:	46bd      	mov	sp, r7
 8005274:	bd80      	pop	{r7, pc}
 8005276:	bf00      	nop
 8005278:	0800527d 	.word	0x0800527d

0800527c <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 800527c:	b480      	push	{r7}
 800527e:	b083      	sub	sp, #12
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8005284:	bf00      	nop
 8005286:	370c      	adds	r7, #12
 8005288:	46bd      	mov	sp, r7
 800528a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528e:	4770      	bx	lr

08005290 <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b084      	sub	sp, #16
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
 8005298:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80052a0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80052a8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80052b0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80052b8:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80052ba:	7bfb      	ldrb	r3, [r7, #15]
 80052bc:	2b01      	cmp	r3, #1
 80052be:	d108      	bne.n	80052d2 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80052c0:	7bbb      	ldrb	r3, [r7, #14]
 80052c2:	2b01      	cmp	r3, #1
 80052c4:	d105      	bne.n	80052d2 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80052c6:	7b7b      	ldrb	r3, [r7, #13]
 80052c8:	2b01      	cmp	r3, #1
 80052ca:	d102      	bne.n	80052d2 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80052cc:	7b3b      	ldrb	r3, [r7, #12]
 80052ce:	2b01      	cmp	r3, #1
 80052d0:	d001      	beq.n	80052d6 <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 80052d2:	2301      	movs	r3, #1
 80052d4:	e059      	b.n	800538a <HAL_TIM_OnePulse_Start_IT+0xfa>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2202      	movs	r2, #2
 80052da:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2202      	movs	r2, #2
 80052e2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2202      	movs	r2, #2
 80052ea:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2202      	movs	r2, #2
 80052f2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	68da      	ldr	r2, [r3, #12]
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f042 0202 	orr.w	r2, r2, #2
 8005304:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	68da      	ldr	r2, [r3, #12]
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f042 0204 	orr.w	r2, r2, #4
 8005314:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	2201      	movs	r2, #1
 800531c:	2100      	movs	r1, #0
 800531e:	4618      	mov	r0, r3
 8005320:	f001 fbe2 	bl	8006ae8 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	2201      	movs	r2, #1
 800532a:	2104      	movs	r1, #4
 800532c:	4618      	mov	r0, r3
 800532e:	f001 fbdb 	bl	8006ae8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	4a17      	ldr	r2, [pc, #92]	@ (8005394 <HAL_TIM_OnePulse_Start_IT+0x104>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d018      	beq.n	800536e <HAL_TIM_OnePulse_Start_IT+0xde>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4a15      	ldr	r2, [pc, #84]	@ (8005398 <HAL_TIM_OnePulse_Start_IT+0x108>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d013      	beq.n	800536e <HAL_TIM_OnePulse_Start_IT+0xde>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	4a14      	ldr	r2, [pc, #80]	@ (800539c <HAL_TIM_OnePulse_Start_IT+0x10c>)
 800534c:	4293      	cmp	r3, r2
 800534e:	d00e      	beq.n	800536e <HAL_TIM_OnePulse_Start_IT+0xde>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4a12      	ldr	r2, [pc, #72]	@ (80053a0 <HAL_TIM_OnePulse_Start_IT+0x110>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d009      	beq.n	800536e <HAL_TIM_OnePulse_Start_IT+0xde>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	4a11      	ldr	r2, [pc, #68]	@ (80053a4 <HAL_TIM_OnePulse_Start_IT+0x114>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d004      	beq.n	800536e <HAL_TIM_OnePulse_Start_IT+0xde>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4a0f      	ldr	r2, [pc, #60]	@ (80053a8 <HAL_TIM_OnePulse_Start_IT+0x118>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d101      	bne.n	8005372 <HAL_TIM_OnePulse_Start_IT+0xe2>
 800536e:	2301      	movs	r3, #1
 8005370:	e000      	b.n	8005374 <HAL_TIM_OnePulse_Start_IT+0xe4>
 8005372:	2300      	movs	r3, #0
 8005374:	2b00      	cmp	r3, #0
 8005376:	d007      	beq.n	8005388 <HAL_TIM_OnePulse_Start_IT+0xf8>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005386:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8005388:	2300      	movs	r3, #0
}
 800538a:	4618      	mov	r0, r3
 800538c:	3710      	adds	r7, #16
 800538e:	46bd      	mov	sp, r7
 8005390:	bd80      	pop	{r7, pc}
 8005392:	bf00      	nop
 8005394:	40012c00 	.word	0x40012c00
 8005398:	40013400 	.word	0x40013400
 800539c:	40014000 	.word	0x40014000
 80053a0:	40014400 	.word	0x40014400
 80053a4:	40014800 	.word	0x40014800
 80053a8:	40015000 	.word	0x40015000

080053ac <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b086      	sub	sp, #24
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
 80053b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d101      	bne.n	80053c0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80053bc:	2301      	movs	r3, #1
 80053be:	e0a2      	b.n	8005506 <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80053c6:	b2db      	uxtb	r3, r3
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d111      	bne.n	80053f0 <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2200      	movs	r2, #0
 80053d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80053d4:	6878      	ldr	r0, [r7, #4]
 80053d6:	f001 fbad 	bl	8006b34 <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d102      	bne.n	80053e8 <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	4a4a      	ldr	r2, [pc, #296]	@ (8005510 <HAL_TIM_Encoder_Init+0x164>)
 80053e6:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80053ec:	6878      	ldr	r0, [r7, #4]
 80053ee:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2202      	movs	r2, #2
 80053f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	689b      	ldr	r3, [r3, #8]
 80053fe:	687a      	ldr	r2, [r7, #4]
 8005400:	6812      	ldr	r2, [r2, #0]
 8005402:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8005406:	f023 0307 	bic.w	r3, r3, #7
 800540a:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681a      	ldr	r2, [r3, #0]
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	3304      	adds	r3, #4
 8005414:	4619      	mov	r1, r3
 8005416:	4610      	mov	r0, r2
 8005418:	f000 feec 	bl	80061f4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	689b      	ldr	r3, [r3, #8]
 8005422:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	699b      	ldr	r3, [r3, #24]
 800542a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	6a1b      	ldr	r3, [r3, #32]
 8005432:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	697a      	ldr	r2, [r7, #20]
 800543a:	4313      	orrs	r3, r2
 800543c:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800543e:	693b      	ldr	r3, [r7, #16]
 8005440:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005444:	f023 0303 	bic.w	r3, r3, #3
 8005448:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	689a      	ldr	r2, [r3, #8]
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	699b      	ldr	r3, [r3, #24]
 8005452:	021b      	lsls	r3, r3, #8
 8005454:	4313      	orrs	r3, r2
 8005456:	693a      	ldr	r2, [r7, #16]
 8005458:	4313      	orrs	r3, r2
 800545a:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800545c:	693b      	ldr	r3, [r7, #16]
 800545e:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8005462:	f023 030c 	bic.w	r3, r3, #12
 8005466:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005468:	693b      	ldr	r3, [r7, #16]
 800546a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800546e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005472:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	68da      	ldr	r2, [r3, #12]
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	69db      	ldr	r3, [r3, #28]
 800547c:	021b      	lsls	r3, r3, #8
 800547e:	4313      	orrs	r3, r2
 8005480:	693a      	ldr	r2, [r7, #16]
 8005482:	4313      	orrs	r3, r2
 8005484:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	691b      	ldr	r3, [r3, #16]
 800548a:	011a      	lsls	r2, r3, #4
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	6a1b      	ldr	r3, [r3, #32]
 8005490:	031b      	lsls	r3, r3, #12
 8005492:	4313      	orrs	r3, r2
 8005494:	693a      	ldr	r2, [r7, #16]
 8005496:	4313      	orrs	r3, r2
 8005498:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80054a0:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 80054a8:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	685a      	ldr	r2, [r3, #4]
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	695b      	ldr	r3, [r3, #20]
 80054b2:	011b      	lsls	r3, r3, #4
 80054b4:	4313      	orrs	r3, r2
 80054b6:	68fa      	ldr	r2, [r7, #12]
 80054b8:	4313      	orrs	r3, r2
 80054ba:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	697a      	ldr	r2, [r7, #20]
 80054c2:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	693a      	ldr	r2, [r7, #16]
 80054ca:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	68fa      	ldr	r2, [r7, #12]
 80054d2:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2201      	movs	r2, #1
 80054d8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2201      	movs	r2, #1
 80054e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2201      	movs	r2, #1
 80054e8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2201      	movs	r2, #1
 80054f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2201      	movs	r2, #1
 80054f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2201      	movs	r2, #1
 8005500:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005504:	2300      	movs	r3, #0
}
 8005506:	4618      	mov	r0, r3
 8005508:	3718      	adds	r7, #24
 800550a:	46bd      	mov	sp, r7
 800550c:	bd80      	pop	{r7, pc}
 800550e:	bf00      	nop
 8005510:	08001a29 	.word	0x08001a29

08005514 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005514:	b580      	push	{r7, lr}
 8005516:	b084      	sub	sp, #16
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
 800551c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005524:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800552c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005534:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800553c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d110      	bne.n	8005566 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005544:	7bfb      	ldrb	r3, [r7, #15]
 8005546:	2b01      	cmp	r3, #1
 8005548:	d102      	bne.n	8005550 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800554a:	7b7b      	ldrb	r3, [r7, #13]
 800554c:	2b01      	cmp	r3, #1
 800554e:	d001      	beq.n	8005554 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005550:	2301      	movs	r3, #1
 8005552:	e069      	b.n	8005628 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2202      	movs	r2, #2
 8005558:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2202      	movs	r2, #2
 8005560:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005564:	e031      	b.n	80055ca <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	2b04      	cmp	r3, #4
 800556a:	d110      	bne.n	800558e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800556c:	7bbb      	ldrb	r3, [r7, #14]
 800556e:	2b01      	cmp	r3, #1
 8005570:	d102      	bne.n	8005578 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005572:	7b3b      	ldrb	r3, [r7, #12]
 8005574:	2b01      	cmp	r3, #1
 8005576:	d001      	beq.n	800557c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005578:	2301      	movs	r3, #1
 800557a:	e055      	b.n	8005628 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2202      	movs	r2, #2
 8005580:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2202      	movs	r2, #2
 8005588:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800558c:	e01d      	b.n	80055ca <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800558e:	7bfb      	ldrb	r3, [r7, #15]
 8005590:	2b01      	cmp	r3, #1
 8005592:	d108      	bne.n	80055a6 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005594:	7bbb      	ldrb	r3, [r7, #14]
 8005596:	2b01      	cmp	r3, #1
 8005598:	d105      	bne.n	80055a6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800559a:	7b7b      	ldrb	r3, [r7, #13]
 800559c:	2b01      	cmp	r3, #1
 800559e:	d102      	bne.n	80055a6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80055a0:	7b3b      	ldrb	r3, [r7, #12]
 80055a2:	2b01      	cmp	r3, #1
 80055a4:	d001      	beq.n	80055aa <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80055a6:	2301      	movs	r3, #1
 80055a8:	e03e      	b.n	8005628 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2202      	movs	r2, #2
 80055ae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2202      	movs	r2, #2
 80055b6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2202      	movs	r2, #2
 80055be:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2202      	movs	r2, #2
 80055c6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d003      	beq.n	80055d8 <HAL_TIM_Encoder_Start+0xc4>
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	2b04      	cmp	r3, #4
 80055d4:	d008      	beq.n	80055e8 <HAL_TIM_Encoder_Start+0xd4>
 80055d6:	e00f      	b.n	80055f8 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	2201      	movs	r2, #1
 80055de:	2100      	movs	r1, #0
 80055e0:	4618      	mov	r0, r3
 80055e2:	f001 fa81 	bl	8006ae8 <TIM_CCxChannelCmd>
      break;
 80055e6:	e016      	b.n	8005616 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	2201      	movs	r2, #1
 80055ee:	2104      	movs	r1, #4
 80055f0:	4618      	mov	r0, r3
 80055f2:	f001 fa79 	bl	8006ae8 <TIM_CCxChannelCmd>
      break;
 80055f6:	e00e      	b.n	8005616 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	2201      	movs	r2, #1
 80055fe:	2100      	movs	r1, #0
 8005600:	4618      	mov	r0, r3
 8005602:	f001 fa71 	bl	8006ae8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	2201      	movs	r2, #1
 800560c:	2104      	movs	r1, #4
 800560e:	4618      	mov	r0, r3
 8005610:	f001 fa6a 	bl	8006ae8 <TIM_CCxChannelCmd>
      break;
 8005614:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	681a      	ldr	r2, [r3, #0]
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f042 0201 	orr.w	r2, r2, #1
 8005624:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005626:	2300      	movs	r3, #0
}
 8005628:	4618      	mov	r0, r3
 800562a:	3710      	adds	r7, #16
 800562c:	46bd      	mov	sp, r7
 800562e:	bd80      	pop	{r7, pc}

08005630 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005630:	b580      	push	{r7, lr}
 8005632:	b084      	sub	sp, #16
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	68db      	ldr	r3, [r3, #12]
 800563e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	691b      	ldr	r3, [r3, #16]
 8005646:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005648:	68bb      	ldr	r3, [r7, #8]
 800564a:	f003 0302 	and.w	r3, r3, #2
 800564e:	2b00      	cmp	r3, #0
 8005650:	d026      	beq.n	80056a0 <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	f003 0302 	and.w	r3, r3, #2
 8005658:	2b00      	cmp	r3, #0
 800565a:	d021      	beq.n	80056a0 <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f06f 0202 	mvn.w	r2, #2
 8005664:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2201      	movs	r2, #1
 800566a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	699b      	ldr	r3, [r3, #24]
 8005672:	f003 0303 	and.w	r3, r3, #3
 8005676:	2b00      	cmp	r3, #0
 8005678:	d005      	beq.n	8005686 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005680:	6878      	ldr	r0, [r7, #4]
 8005682:	4798      	blx	r3
 8005684:	e009      	b.n	800569a <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800568c:	6878      	ldr	r0, [r7, #4]
 800568e:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005696:	6878      	ldr	r0, [r7, #4]
 8005698:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2200      	movs	r2, #0
 800569e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80056a0:	68bb      	ldr	r3, [r7, #8]
 80056a2:	f003 0304 	and.w	r3, r3, #4
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d026      	beq.n	80056f8 <HAL_TIM_IRQHandler+0xc8>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	f003 0304 	and.w	r3, r3, #4
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d021      	beq.n	80056f8 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f06f 0204 	mvn.w	r2, #4
 80056bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2202      	movs	r2, #2
 80056c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	699b      	ldr	r3, [r3, #24]
 80056ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d005      	beq.n	80056de <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80056d8:	6878      	ldr	r0, [r7, #4]
 80056da:	4798      	blx	r3
 80056dc:	e009      	b.n	80056f2 <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80056e4:	6878      	ldr	r0, [r7, #4]
 80056e6:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80056ee:	6878      	ldr	r0, [r7, #4]
 80056f0:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2200      	movs	r2, #0
 80056f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	f003 0308 	and.w	r3, r3, #8
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d026      	beq.n	8005750 <HAL_TIM_IRQHandler+0x120>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	f003 0308 	and.w	r3, r3, #8
 8005708:	2b00      	cmp	r3, #0
 800570a:	d021      	beq.n	8005750 <HAL_TIM_IRQHandler+0x120>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f06f 0208 	mvn.w	r2, #8
 8005714:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2204      	movs	r2, #4
 800571a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	69db      	ldr	r3, [r3, #28]
 8005722:	f003 0303 	and.w	r3, r3, #3
 8005726:	2b00      	cmp	r3, #0
 8005728:	d005      	beq.n	8005736 <HAL_TIM_IRQHandler+0x106>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005730:	6878      	ldr	r0, [r7, #4]
 8005732:	4798      	blx	r3
 8005734:	e009      	b.n	800574a <HAL_TIM_IRQHandler+0x11a>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800573c:	6878      	ldr	r0, [r7, #4]
 800573e:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005746:	6878      	ldr	r0, [r7, #4]
 8005748:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	2200      	movs	r2, #0
 800574e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005750:	68bb      	ldr	r3, [r7, #8]
 8005752:	f003 0310 	and.w	r3, r3, #16
 8005756:	2b00      	cmp	r3, #0
 8005758:	d026      	beq.n	80057a8 <HAL_TIM_IRQHandler+0x178>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	f003 0310 	and.w	r3, r3, #16
 8005760:	2b00      	cmp	r3, #0
 8005762:	d021      	beq.n	80057a8 <HAL_TIM_IRQHandler+0x178>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f06f 0210 	mvn.w	r2, #16
 800576c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2208      	movs	r2, #8
 8005772:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	69db      	ldr	r3, [r3, #28]
 800577a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800577e:	2b00      	cmp	r3, #0
 8005780:	d005      	beq.n	800578e <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005788:	6878      	ldr	r0, [r7, #4]
 800578a:	4798      	blx	r3
 800578c:	e009      	b.n	80057a2 <HAL_TIM_IRQHandler+0x172>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005794:	6878      	ldr	r0, [r7, #4]
 8005796:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800579e:	6878      	ldr	r0, [r7, #4]
 80057a0:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2200      	movs	r2, #0
 80057a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80057a8:	68bb      	ldr	r3, [r7, #8]
 80057aa:	f003 0301 	and.w	r3, r3, #1
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d00e      	beq.n	80057d0 <HAL_TIM_IRQHandler+0x1a0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	f003 0301 	and.w	r3, r3, #1
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d009      	beq.n	80057d0 <HAL_TIM_IRQHandler+0x1a0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f06f 0201 	mvn.w	r2, #1
 80057c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80057cc:	6878      	ldr	r0, [r7, #4]
 80057ce:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80057d0:	68bb      	ldr	r3, [r7, #8]
 80057d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d104      	bne.n	80057e4 <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80057da:	68bb      	ldr	r3, [r7, #8]
 80057dc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d00e      	beq.n	8005802 <HAL_TIM_IRQHandler+0x1d2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d009      	beq.n	8005802 <HAL_TIM_IRQHandler+0x1d2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80057f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80057fe:	6878      	ldr	r0, [r7, #4]
 8005800:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005802:	68bb      	ldr	r3, [r7, #8]
 8005804:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005808:	2b00      	cmp	r3, #0
 800580a:	d00e      	beq.n	800582a <HAL_TIM_IRQHandler+0x1fa>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005812:	2b00      	cmp	r3, #0
 8005814:	d009      	beq.n	800582a <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800581e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005826:	6878      	ldr	r0, [r7, #4]
 8005828:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800582a:	68bb      	ldr	r3, [r7, #8]
 800582c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005830:	2b00      	cmp	r3, #0
 8005832:	d00e      	beq.n	8005852 <HAL_TIM_IRQHandler+0x222>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800583a:	2b00      	cmp	r3, #0
 800583c:	d009      	beq.n	8005852 <HAL_TIM_IRQHandler+0x222>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005846:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800584e:	6878      	ldr	r0, [r7, #4]
 8005850:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005852:	68bb      	ldr	r3, [r7, #8]
 8005854:	f003 0320 	and.w	r3, r3, #32
 8005858:	2b00      	cmp	r3, #0
 800585a:	d00e      	beq.n	800587a <HAL_TIM_IRQHandler+0x24a>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	f003 0320 	and.w	r3, r3, #32
 8005862:	2b00      	cmp	r3, #0
 8005864:	d009      	beq.n	800587a <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f06f 0220 	mvn.w	r2, #32
 800586e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005876:	6878      	ldr	r0, [r7, #4]
 8005878:	4798      	blx	r3
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800587a:	68bb      	ldr	r3, [r7, #8]
 800587c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005880:	2b00      	cmp	r3, #0
 8005882:	d00e      	beq.n	80058a2 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800588a:	2b00      	cmp	r3, #0
 800588c:	d009      	beq.n	80058a2 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8005896:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800589e:	6878      	ldr	r0, [r7, #4]
 80058a0:	4798      	blx	r3
      HAL_TIMEx_EncoderIndexCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80058a2:	68bb      	ldr	r3, [r7, #8]
 80058a4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d00e      	beq.n	80058ca <HAL_TIM_IRQHandler+0x29a>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d009      	beq.n	80058ca <HAL_TIM_IRQHandler+0x29a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 80058be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80058c6:	6878      	ldr	r0, [r7, #4]
 80058c8:	4798      	blx	r3
      HAL_TIMEx_DirectionChangeCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80058ca:	68bb      	ldr	r3, [r7, #8]
 80058cc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d00e      	beq.n	80058f2 <HAL_TIM_IRQHandler+0x2c2>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d009      	beq.n	80058f2 <HAL_TIM_IRQHandler+0x2c2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 80058e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80058ee:	6878      	ldr	r0, [r7, #4]
 80058f0:	4798      	blx	r3
      HAL_TIMEx_IndexErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80058f2:	68bb      	ldr	r3, [r7, #8]
 80058f4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d00e      	beq.n	800591a <HAL_TIM_IRQHandler+0x2ea>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005902:	2b00      	cmp	r3, #0
 8005904:	d009      	beq.n	800591a <HAL_TIM_IRQHandler+0x2ea>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800590e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8005916:	6878      	ldr	r0, [r7, #4]
 8005918:	4798      	blx	r3
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800591a:	bf00      	nop
 800591c:	3710      	adds	r7, #16
 800591e:	46bd      	mov	sp, r7
 8005920:	bd80      	pop	{r7, pc}
	...

08005924 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8005924:	b580      	push	{r7, lr}
 8005926:	b086      	sub	sp, #24
 8005928:	af00      	add	r7, sp, #0
 800592a:	60f8      	str	r0, [r7, #12]
 800592c:	60b9      	str	r1, [r7, #8]
 800592e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005930:	2300      	movs	r3, #0
 8005932:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_CHANNEL_MODE(sConfig->OCMode, Channel));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800593a:	2b01      	cmp	r3, #1
 800593c:	d101      	bne.n	8005942 <HAL_TIM_OC_ConfigChannel+0x1e>
 800593e:	2302      	movs	r3, #2
 8005940:	e066      	b.n	8005a10 <HAL_TIM_OC_ConfigChannel+0xec>
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	2201      	movs	r2, #1
 8005946:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2b14      	cmp	r3, #20
 800594e:	d857      	bhi.n	8005a00 <HAL_TIM_OC_ConfigChannel+0xdc>
 8005950:	a201      	add	r2, pc, #4	@ (adr r2, 8005958 <HAL_TIM_OC_ConfigChannel+0x34>)
 8005952:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005956:	bf00      	nop
 8005958:	080059ad 	.word	0x080059ad
 800595c:	08005a01 	.word	0x08005a01
 8005960:	08005a01 	.word	0x08005a01
 8005964:	08005a01 	.word	0x08005a01
 8005968:	080059bb 	.word	0x080059bb
 800596c:	08005a01 	.word	0x08005a01
 8005970:	08005a01 	.word	0x08005a01
 8005974:	08005a01 	.word	0x08005a01
 8005978:	080059c9 	.word	0x080059c9
 800597c:	08005a01 	.word	0x08005a01
 8005980:	08005a01 	.word	0x08005a01
 8005984:	08005a01 	.word	0x08005a01
 8005988:	080059d7 	.word	0x080059d7
 800598c:	08005a01 	.word	0x08005a01
 8005990:	08005a01 	.word	0x08005a01
 8005994:	08005a01 	.word	0x08005a01
 8005998:	080059e5 	.word	0x080059e5
 800599c:	08005a01 	.word	0x08005a01
 80059a0:	08005a01 	.word	0x08005a01
 80059a4:	08005a01 	.word	0x08005a01
 80059a8:	080059f3 	.word	0x080059f3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	68b9      	ldr	r1, [r7, #8]
 80059b2:	4618      	mov	r0, r3
 80059b4:	f000 fcd2 	bl	800635c <TIM_OC1_SetConfig>
      break;
 80059b8:	e025      	b.n	8005a06 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	68b9      	ldr	r1, [r7, #8]
 80059c0:	4618      	mov	r0, r3
 80059c2:	f000 fd65 	bl	8006490 <TIM_OC2_SetConfig>
      break;
 80059c6:	e01e      	b.n	8005a06 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	68b9      	ldr	r1, [r7, #8]
 80059ce:	4618      	mov	r0, r3
 80059d0:	f000 fdf2 	bl	80065b8 <TIM_OC3_SetConfig>
      break;
 80059d4:	e017      	b.n	8005a06 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	68b9      	ldr	r1, [r7, #8]
 80059dc:	4618      	mov	r0, r3
 80059de:	f000 fe7d 	bl	80066dc <TIM_OC4_SetConfig>
      break;
 80059e2:	e010      	b.n	8005a06 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	68b9      	ldr	r1, [r7, #8]
 80059ea:	4618      	mov	r0, r3
 80059ec:	f000 ff0a 	bl	8006804 <TIM_OC5_SetConfig>
      break;
 80059f0:	e009      	b.n	8005a06 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	68b9      	ldr	r1, [r7, #8]
 80059f8:	4618      	mov	r0, r3
 80059fa:	f000 ff6d 	bl	80068d8 <TIM_OC6_SetConfig>
      break;
 80059fe:	e002      	b.n	8005a06 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8005a00:	2301      	movs	r3, #1
 8005a02:	75fb      	strb	r3, [r7, #23]
      break;
 8005a04:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	2200      	movs	r2, #0
 8005a0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005a0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a10:	4618      	mov	r0, r3
 8005a12:	3718      	adds	r7, #24
 8005a14:	46bd      	mov	sp, r7
 8005a16:	bd80      	pop	{r7, pc}

08005a18 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b086      	sub	sp, #24
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	60f8      	str	r0, [r7, #12]
 8005a20:	60b9      	str	r1, [r7, #8]
 8005a22:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005a24:	2300      	movs	r3, #0
 8005a26:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005a2e:	2b01      	cmp	r3, #1
 8005a30:	d101      	bne.n	8005a36 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005a32:	2302      	movs	r3, #2
 8005a34:	e0ff      	b.n	8005c36 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	2201      	movs	r2, #1
 8005a3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2b14      	cmp	r3, #20
 8005a42:	f200 80f0 	bhi.w	8005c26 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005a46:	a201      	add	r2, pc, #4	@ (adr r2, 8005a4c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005a48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a4c:	08005aa1 	.word	0x08005aa1
 8005a50:	08005c27 	.word	0x08005c27
 8005a54:	08005c27 	.word	0x08005c27
 8005a58:	08005c27 	.word	0x08005c27
 8005a5c:	08005ae1 	.word	0x08005ae1
 8005a60:	08005c27 	.word	0x08005c27
 8005a64:	08005c27 	.word	0x08005c27
 8005a68:	08005c27 	.word	0x08005c27
 8005a6c:	08005b23 	.word	0x08005b23
 8005a70:	08005c27 	.word	0x08005c27
 8005a74:	08005c27 	.word	0x08005c27
 8005a78:	08005c27 	.word	0x08005c27
 8005a7c:	08005b63 	.word	0x08005b63
 8005a80:	08005c27 	.word	0x08005c27
 8005a84:	08005c27 	.word	0x08005c27
 8005a88:	08005c27 	.word	0x08005c27
 8005a8c:	08005ba5 	.word	0x08005ba5
 8005a90:	08005c27 	.word	0x08005c27
 8005a94:	08005c27 	.word	0x08005c27
 8005a98:	08005c27 	.word	0x08005c27
 8005a9c:	08005be5 	.word	0x08005be5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	68b9      	ldr	r1, [r7, #8]
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	f000 fc58 	bl	800635c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	699a      	ldr	r2, [r3, #24]
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f042 0208 	orr.w	r2, r2, #8
 8005aba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	699a      	ldr	r2, [r3, #24]
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f022 0204 	bic.w	r2, r2, #4
 8005aca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	6999      	ldr	r1, [r3, #24]
 8005ad2:	68bb      	ldr	r3, [r7, #8]
 8005ad4:	691a      	ldr	r2, [r3, #16]
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	430a      	orrs	r2, r1
 8005adc:	619a      	str	r2, [r3, #24]
      break;
 8005ade:	e0a5      	b.n	8005c2c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	68b9      	ldr	r1, [r7, #8]
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	f000 fcd2 	bl	8006490 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	699a      	ldr	r2, [r3, #24]
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005afa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	699a      	ldr	r2, [r3, #24]
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005b0a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	6999      	ldr	r1, [r3, #24]
 8005b12:	68bb      	ldr	r3, [r7, #8]
 8005b14:	691b      	ldr	r3, [r3, #16]
 8005b16:	021a      	lsls	r2, r3, #8
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	430a      	orrs	r2, r1
 8005b1e:	619a      	str	r2, [r3, #24]
      break;
 8005b20:	e084      	b.n	8005c2c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	68b9      	ldr	r1, [r7, #8]
 8005b28:	4618      	mov	r0, r3
 8005b2a:	f000 fd45 	bl	80065b8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	69da      	ldr	r2, [r3, #28]
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f042 0208 	orr.w	r2, r2, #8
 8005b3c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	69da      	ldr	r2, [r3, #28]
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f022 0204 	bic.w	r2, r2, #4
 8005b4c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	69d9      	ldr	r1, [r3, #28]
 8005b54:	68bb      	ldr	r3, [r7, #8]
 8005b56:	691a      	ldr	r2, [r3, #16]
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	430a      	orrs	r2, r1
 8005b5e:	61da      	str	r2, [r3, #28]
      break;
 8005b60:	e064      	b.n	8005c2c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	68b9      	ldr	r1, [r7, #8]
 8005b68:	4618      	mov	r0, r3
 8005b6a:	f000 fdb7 	bl	80066dc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	69da      	ldr	r2, [r3, #28]
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005b7c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	69da      	ldr	r2, [r3, #28]
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005b8c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	69d9      	ldr	r1, [r3, #28]
 8005b94:	68bb      	ldr	r3, [r7, #8]
 8005b96:	691b      	ldr	r3, [r3, #16]
 8005b98:	021a      	lsls	r2, r3, #8
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	430a      	orrs	r2, r1
 8005ba0:	61da      	str	r2, [r3, #28]
      break;
 8005ba2:	e043      	b.n	8005c2c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	68b9      	ldr	r1, [r7, #8]
 8005baa:	4618      	mov	r0, r3
 8005bac:	f000 fe2a 	bl	8006804 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f042 0208 	orr.w	r2, r2, #8
 8005bbe:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f022 0204 	bic.w	r2, r2, #4
 8005bce:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8005bd6:	68bb      	ldr	r3, [r7, #8]
 8005bd8:	691a      	ldr	r2, [r3, #16]
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	430a      	orrs	r2, r1
 8005be0:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8005be2:	e023      	b.n	8005c2c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	68b9      	ldr	r1, [r7, #8]
 8005bea:	4618      	mov	r0, r3
 8005bec:	f000 fe74 	bl	80068d8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005bfe:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005c0e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8005c16:	68bb      	ldr	r3, [r7, #8]
 8005c18:	691b      	ldr	r3, [r3, #16]
 8005c1a:	021a      	lsls	r2, r3, #8
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	430a      	orrs	r2, r1
 8005c22:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8005c24:	e002      	b.n	8005c2c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005c26:	2301      	movs	r3, #1
 8005c28:	75fb      	strb	r3, [r7, #23]
      break;
 8005c2a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	2200      	movs	r2, #0
 8005c30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005c34:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c36:	4618      	mov	r0, r3
 8005c38:	3718      	adds	r7, #24
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	bd80      	pop	{r7, pc}
 8005c3e:	bf00      	nop

08005c40 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b084      	sub	sp, #16
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
 8005c48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005c54:	2b01      	cmp	r3, #1
 8005c56:	d101      	bne.n	8005c5c <HAL_TIM_ConfigClockSource+0x1c>
 8005c58:	2302      	movs	r3, #2
 8005c5a:	e0f6      	b.n	8005e4a <HAL_TIM_ConfigClockSource+0x20a>
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2201      	movs	r2, #1
 8005c60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2202      	movs	r2, #2
 8005c68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	689b      	ldr	r3, [r3, #8]
 8005c72:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005c74:	68bb      	ldr	r3, [r7, #8]
 8005c76:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8005c7a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005c7e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c80:	68bb      	ldr	r3, [r7, #8]
 8005c82:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005c86:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	68ba      	ldr	r2, [r7, #8]
 8005c8e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	4a6f      	ldr	r2, [pc, #444]	@ (8005e54 <HAL_TIM_ConfigClockSource+0x214>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	f000 80c1 	beq.w	8005e1e <HAL_TIM_ConfigClockSource+0x1de>
 8005c9c:	4a6d      	ldr	r2, [pc, #436]	@ (8005e54 <HAL_TIM_ConfigClockSource+0x214>)
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	f200 80c6 	bhi.w	8005e30 <HAL_TIM_ConfigClockSource+0x1f0>
 8005ca4:	4a6c      	ldr	r2, [pc, #432]	@ (8005e58 <HAL_TIM_ConfigClockSource+0x218>)
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	f000 80b9 	beq.w	8005e1e <HAL_TIM_ConfigClockSource+0x1de>
 8005cac:	4a6a      	ldr	r2, [pc, #424]	@ (8005e58 <HAL_TIM_ConfigClockSource+0x218>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	f200 80be 	bhi.w	8005e30 <HAL_TIM_ConfigClockSource+0x1f0>
 8005cb4:	4a69      	ldr	r2, [pc, #420]	@ (8005e5c <HAL_TIM_ConfigClockSource+0x21c>)
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	f000 80b1 	beq.w	8005e1e <HAL_TIM_ConfigClockSource+0x1de>
 8005cbc:	4a67      	ldr	r2, [pc, #412]	@ (8005e5c <HAL_TIM_ConfigClockSource+0x21c>)
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	f200 80b6 	bhi.w	8005e30 <HAL_TIM_ConfigClockSource+0x1f0>
 8005cc4:	4a66      	ldr	r2, [pc, #408]	@ (8005e60 <HAL_TIM_ConfigClockSource+0x220>)
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	f000 80a9 	beq.w	8005e1e <HAL_TIM_ConfigClockSource+0x1de>
 8005ccc:	4a64      	ldr	r2, [pc, #400]	@ (8005e60 <HAL_TIM_ConfigClockSource+0x220>)
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	f200 80ae 	bhi.w	8005e30 <HAL_TIM_ConfigClockSource+0x1f0>
 8005cd4:	4a63      	ldr	r2, [pc, #396]	@ (8005e64 <HAL_TIM_ConfigClockSource+0x224>)
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	f000 80a1 	beq.w	8005e1e <HAL_TIM_ConfigClockSource+0x1de>
 8005cdc:	4a61      	ldr	r2, [pc, #388]	@ (8005e64 <HAL_TIM_ConfigClockSource+0x224>)
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	f200 80a6 	bhi.w	8005e30 <HAL_TIM_ConfigClockSource+0x1f0>
 8005ce4:	4a60      	ldr	r2, [pc, #384]	@ (8005e68 <HAL_TIM_ConfigClockSource+0x228>)
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	f000 8099 	beq.w	8005e1e <HAL_TIM_ConfigClockSource+0x1de>
 8005cec:	4a5e      	ldr	r2, [pc, #376]	@ (8005e68 <HAL_TIM_ConfigClockSource+0x228>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	f200 809e 	bhi.w	8005e30 <HAL_TIM_ConfigClockSource+0x1f0>
 8005cf4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005cf8:	f000 8091 	beq.w	8005e1e <HAL_TIM_ConfigClockSource+0x1de>
 8005cfc:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005d00:	f200 8096 	bhi.w	8005e30 <HAL_TIM_ConfigClockSource+0x1f0>
 8005d04:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005d08:	f000 8089 	beq.w	8005e1e <HAL_TIM_ConfigClockSource+0x1de>
 8005d0c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005d10:	f200 808e 	bhi.w	8005e30 <HAL_TIM_ConfigClockSource+0x1f0>
 8005d14:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005d18:	d03e      	beq.n	8005d98 <HAL_TIM_ConfigClockSource+0x158>
 8005d1a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005d1e:	f200 8087 	bhi.w	8005e30 <HAL_TIM_ConfigClockSource+0x1f0>
 8005d22:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d26:	f000 8086 	beq.w	8005e36 <HAL_TIM_ConfigClockSource+0x1f6>
 8005d2a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d2e:	d87f      	bhi.n	8005e30 <HAL_TIM_ConfigClockSource+0x1f0>
 8005d30:	2b70      	cmp	r3, #112	@ 0x70
 8005d32:	d01a      	beq.n	8005d6a <HAL_TIM_ConfigClockSource+0x12a>
 8005d34:	2b70      	cmp	r3, #112	@ 0x70
 8005d36:	d87b      	bhi.n	8005e30 <HAL_TIM_ConfigClockSource+0x1f0>
 8005d38:	2b60      	cmp	r3, #96	@ 0x60
 8005d3a:	d050      	beq.n	8005dde <HAL_TIM_ConfigClockSource+0x19e>
 8005d3c:	2b60      	cmp	r3, #96	@ 0x60
 8005d3e:	d877      	bhi.n	8005e30 <HAL_TIM_ConfigClockSource+0x1f0>
 8005d40:	2b50      	cmp	r3, #80	@ 0x50
 8005d42:	d03c      	beq.n	8005dbe <HAL_TIM_ConfigClockSource+0x17e>
 8005d44:	2b50      	cmp	r3, #80	@ 0x50
 8005d46:	d873      	bhi.n	8005e30 <HAL_TIM_ConfigClockSource+0x1f0>
 8005d48:	2b40      	cmp	r3, #64	@ 0x40
 8005d4a:	d058      	beq.n	8005dfe <HAL_TIM_ConfigClockSource+0x1be>
 8005d4c:	2b40      	cmp	r3, #64	@ 0x40
 8005d4e:	d86f      	bhi.n	8005e30 <HAL_TIM_ConfigClockSource+0x1f0>
 8005d50:	2b30      	cmp	r3, #48	@ 0x30
 8005d52:	d064      	beq.n	8005e1e <HAL_TIM_ConfigClockSource+0x1de>
 8005d54:	2b30      	cmp	r3, #48	@ 0x30
 8005d56:	d86b      	bhi.n	8005e30 <HAL_TIM_ConfigClockSource+0x1f0>
 8005d58:	2b20      	cmp	r3, #32
 8005d5a:	d060      	beq.n	8005e1e <HAL_TIM_ConfigClockSource+0x1de>
 8005d5c:	2b20      	cmp	r3, #32
 8005d5e:	d867      	bhi.n	8005e30 <HAL_TIM_ConfigClockSource+0x1f0>
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d05c      	beq.n	8005e1e <HAL_TIM_ConfigClockSource+0x1de>
 8005d64:	2b10      	cmp	r3, #16
 8005d66:	d05a      	beq.n	8005e1e <HAL_TIM_ConfigClockSource+0x1de>
 8005d68:	e062      	b.n	8005e30 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005d7a:	f000 fe95 	bl	8006aa8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	689b      	ldr	r3, [r3, #8]
 8005d84:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005d86:	68bb      	ldr	r3, [r7, #8]
 8005d88:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005d8c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	68ba      	ldr	r2, [r7, #8]
 8005d94:	609a      	str	r2, [r3, #8]
      break;
 8005d96:	e04f      	b.n	8005e38 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005da8:	f000 fe7e 	bl	8006aa8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	689a      	ldr	r2, [r3, #8]
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005dba:	609a      	str	r2, [r3, #8]
      break;
 8005dbc:	e03c      	b.n	8005e38 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005dca:	461a      	mov	r2, r3
 8005dcc:	f000 fdf0 	bl	80069b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	2150      	movs	r1, #80	@ 0x50
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	f000 fe49 	bl	8006a6e <TIM_ITRx_SetConfig>
      break;
 8005ddc:	e02c      	b.n	8005e38 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005dea:	461a      	mov	r2, r3
 8005dec:	f000 fe0f 	bl	8006a0e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	2160      	movs	r1, #96	@ 0x60
 8005df6:	4618      	mov	r0, r3
 8005df8:	f000 fe39 	bl	8006a6e <TIM_ITRx_SetConfig>
      break;
 8005dfc:	e01c      	b.n	8005e38 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e0a:	461a      	mov	r2, r3
 8005e0c:	f000 fdd0 	bl	80069b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	2140      	movs	r1, #64	@ 0x40
 8005e16:	4618      	mov	r0, r3
 8005e18:	f000 fe29 	bl	8006a6e <TIM_ITRx_SetConfig>
      break;
 8005e1c:	e00c      	b.n	8005e38 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681a      	ldr	r2, [r3, #0]
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	4619      	mov	r1, r3
 8005e28:	4610      	mov	r0, r2
 8005e2a:	f000 fe20 	bl	8006a6e <TIM_ITRx_SetConfig>
      break;
 8005e2e:	e003      	b.n	8005e38 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8005e30:	2301      	movs	r3, #1
 8005e32:	73fb      	strb	r3, [r7, #15]
      break;
 8005e34:	e000      	b.n	8005e38 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8005e36:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2201      	movs	r2, #1
 8005e3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2200      	movs	r2, #0
 8005e44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005e48:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	3710      	adds	r7, #16
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	bd80      	pop	{r7, pc}
 8005e52:	bf00      	nop
 8005e54:	00100070 	.word	0x00100070
 8005e58:	00100060 	.word	0x00100060
 8005e5c:	00100050 	.word	0x00100050
 8005e60:	00100040 	.word	0x00100040
 8005e64:	00100030 	.word	0x00100030
 8005e68:	00100020 	.word	0x00100020

08005e6c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005e6c:	b480      	push	{r7}
 8005e6e:	b083      	sub	sp, #12
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005e74:	bf00      	nop
 8005e76:	370c      	adds	r7, #12
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7e:	4770      	bx	lr

08005e80 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8005e80:	b480      	push	{r7}
 8005e82:	b083      	sub	sp, #12
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8005e88:	bf00      	nop
 8005e8a:	370c      	adds	r7, #12
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e92:	4770      	bx	lr

08005e94 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005e94:	b480      	push	{r7}
 8005e96:	b083      	sub	sp, #12
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005e9c:	bf00      	nop
 8005e9e:	370c      	adds	r7, #12
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea6:	4770      	bx	lr

08005ea8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005ea8:	b480      	push	{r7}
 8005eaa:	b083      	sub	sp, #12
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005eb0:	bf00      	nop
 8005eb2:	370c      	adds	r7, #12
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eba:	4770      	bx	lr

08005ebc <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8005ebc:	b480      	push	{r7}
 8005ebe:	b083      	sub	sp, #12
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8005ec4:	bf00      	nop
 8005ec6:	370c      	adds	r7, #12
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ece:	4770      	bx	lr

08005ed0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005ed0:	b480      	push	{r7}
 8005ed2:	b083      	sub	sp, #12
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005ed8:	bf00      	nop
 8005eda:	370c      	adds	r7, #12
 8005edc:	46bd      	mov	sp, r7
 8005ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee2:	4770      	bx	lr

08005ee4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8005ee4:	b480      	push	{r7}
 8005ee6:	b083      	sub	sp, #12
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8005eec:	bf00      	nop
 8005eee:	370c      	adds	r7, #12
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef6:	4770      	bx	lr

08005ef8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005ef8:	b480      	push	{r7}
 8005efa:	b083      	sub	sp, #12
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005f00:	bf00      	nop
 8005f02:	370c      	adds	r7, #12
 8005f04:	46bd      	mov	sp, r7
 8005f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0a:	4770      	bx	lr

08005f0c <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8005f0c:	b480      	push	{r7}
 8005f0e:	b083      	sub	sp, #12
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8005f14:	bf00      	nop
 8005f16:	370c      	adds	r7, #12
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1e:	4770      	bx	lr

08005f20 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8005f20:	b480      	push	{r7}
 8005f22:	b083      	sub	sp, #12
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8005f28:	bf00      	nop
 8005f2a:	370c      	adds	r7, #12
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f32:	4770      	bx	lr

08005f34 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 8005f34:	b480      	push	{r7}
 8005f36:	b087      	sub	sp, #28
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	60f8      	str	r0, [r7, #12]
 8005f3c:	460b      	mov	r3, r1
 8005f3e:	607a      	str	r2, [r7, #4]
 8005f40:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8005f42:	2300      	movs	r3, #0
 8005f44:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d101      	bne.n	8005f50 <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8005f4c:	2301      	movs	r3, #1
 8005f4e:	e14a      	b.n	80061e6 <HAL_TIM_RegisterCallback+0x2b2>
  }

  if (htim->State == HAL_TIM_STATE_READY)
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005f56:	b2db      	uxtb	r3, r3
 8005f58:	2b01      	cmp	r3, #1
 8005f5a:	f040 80dd 	bne.w	8006118 <HAL_TIM_RegisterCallback+0x1e4>
  {
    switch (CallbackID)
 8005f5e:	7afb      	ldrb	r3, [r7, #11]
 8005f60:	2b1f      	cmp	r3, #31
 8005f62:	f200 80d6 	bhi.w	8006112 <HAL_TIM_RegisterCallback+0x1de>
 8005f66:	a201      	add	r2, pc, #4	@ (adr r2, 8005f6c <HAL_TIM_RegisterCallback+0x38>)
 8005f68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f6c:	08005fed 	.word	0x08005fed
 8005f70:	08005ff5 	.word	0x08005ff5
 8005f74:	08005ffd 	.word	0x08005ffd
 8005f78:	08006005 	.word	0x08006005
 8005f7c:	0800600d 	.word	0x0800600d
 8005f80:	08006015 	.word	0x08006015
 8005f84:	0800601d 	.word	0x0800601d
 8005f88:	08006025 	.word	0x08006025
 8005f8c:	0800602d 	.word	0x0800602d
 8005f90:	08006035 	.word	0x08006035
 8005f94:	0800603d 	.word	0x0800603d
 8005f98:	08006045 	.word	0x08006045
 8005f9c:	0800604d 	.word	0x0800604d
 8005fa0:	08006055 	.word	0x08006055
 8005fa4:	0800605f 	.word	0x0800605f
 8005fa8:	08006069 	.word	0x08006069
 8005fac:	08006073 	.word	0x08006073
 8005fb0:	0800607d 	.word	0x0800607d
 8005fb4:	08006087 	.word	0x08006087
 8005fb8:	08006091 	.word	0x08006091
 8005fbc:	0800609b 	.word	0x0800609b
 8005fc0:	080060a5 	.word	0x080060a5
 8005fc4:	080060af 	.word	0x080060af
 8005fc8:	080060b9 	.word	0x080060b9
 8005fcc:	080060c3 	.word	0x080060c3
 8005fd0:	080060cd 	.word	0x080060cd
 8005fd4:	080060d7 	.word	0x080060d7
 8005fd8:	080060e1 	.word	0x080060e1
 8005fdc:	080060eb 	.word	0x080060eb
 8005fe0:	080060f5 	.word	0x080060f5
 8005fe4:	080060ff 	.word	0x080060ff
 8005fe8:	08006109 	.word	0x08006109
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	687a      	ldr	r2, [r7, #4]
 8005ff0:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 8005ff2:	e0f7      	b.n	80061e4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	687a      	ldr	r2, [r7, #4]
 8005ff8:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 8005ffa:	e0f3      	b.n	80061e4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	687a      	ldr	r2, [r7, #4]
 8006000:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8006002:	e0ef      	b.n	80061e4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	687a      	ldr	r2, [r7, #4]
 8006008:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 800600a:	e0eb      	b.n	80061e4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	687a      	ldr	r2, [r7, #4]
 8006010:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 8006012:	e0e7      	b.n	80061e4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	687a      	ldr	r2, [r7, #4]
 8006018:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 800601a:	e0e3      	b.n	80061e4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	687a      	ldr	r2, [r7, #4]
 8006020:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 8006022:	e0df      	b.n	80061e4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	687a      	ldr	r2, [r7, #4]
 8006028:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 800602a:	e0db      	b.n	80061e4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	687a      	ldr	r2, [r7, #4]
 8006030:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 8006032:	e0d7      	b.n	80061e4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	687a      	ldr	r2, [r7, #4]
 8006038:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 800603a:	e0d3      	b.n	80061e4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	687a      	ldr	r2, [r7, #4]
 8006040:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 8006042:	e0cf      	b.n	80061e4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	687a      	ldr	r2, [r7, #4]
 8006048:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 800604a:	e0cb      	b.n	80061e4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	687a      	ldr	r2, [r7, #4]
 8006050:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 8006052:	e0c7      	b.n	80061e4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	687a      	ldr	r2, [r7, #4]
 8006058:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 800605c:	e0c2      	b.n	80061e4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	687a      	ldr	r2, [r7, #4]
 8006062:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        break;
 8006066:	e0bd      	b.n	80061e4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	687a      	ldr	r2, [r7, #4]
 800606c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        break;
 8006070:	e0b8      	b.n	80061e4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	687a      	ldr	r2, [r7, #4]
 8006076:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        break;
 800607a:	e0b3      	b.n	80061e4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	687a      	ldr	r2, [r7, #4]
 8006080:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        break;
 8006084:	e0ae      	b.n	80061e4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	687a      	ldr	r2, [r7, #4]
 800608a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 800608e:	e0a9      	b.n	80061e4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	687a      	ldr	r2, [r7, #4]
 8006094:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 8006098:	e0a4      	b.n	80061e4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	687a      	ldr	r2, [r7, #4]
 800609e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 80060a2:	e09f      	b.n	80061e4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	687a      	ldr	r2, [r7, #4]
 80060a8:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 80060ac:	e09a      	b.n	80061e4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	687a      	ldr	r2, [r7, #4]
 80060b2:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 80060b6:	e095      	b.n	80061e4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	687a      	ldr	r2, [r7, #4]
 80060bc:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 80060c0:	e090      	b.n	80061e4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	687a      	ldr	r2, [r7, #4]
 80060c6:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 80060ca:	e08b      	b.n	80061e4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	687a      	ldr	r2, [r7, #4]
 80060d0:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 80060d4:	e086      	b.n	80061e4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	687a      	ldr	r2, [r7, #4]
 80060da:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 80060de:	e081      	b.n	80061e4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK2_CB_ID :
        htim->Break2Callback                       = pCallback;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	687a      	ldr	r2, [r7, #4]
 80060e4:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 80060e8:	e07c      	b.n	80061e4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_INDEX_CB_ID :
        htim->EncoderIndexCallback                 = pCallback;
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	687a      	ldr	r2, [r7, #4]
 80060ee:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 80060f2:	e077      	b.n	80061e4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_DIRECTION_CHANGE_CB_ID :
        htim->DirectionChangeCallback              = pCallback;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	687a      	ldr	r2, [r7, #4]
 80060f8:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
        break;
 80060fc:	e072      	b.n	80061e4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_INDEX_ERROR_CB_ID :
        htim->IndexErrorCallback                   = pCallback;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	687a      	ldr	r2, [r7, #4]
 8006102:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 8006106:	e06d      	b.n	80061e4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRANSITION_ERROR_CB_ID :
        htim->TransitionErrorCallback              = pCallback;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	687a      	ldr	r2, [r7, #4]
 800610c:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 8006110:	e068      	b.n	80061e4 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8006112:	2301      	movs	r3, #1
 8006114:	75fb      	strb	r3, [r7, #23]
        break;
 8006116:	e065      	b.n	80061e4 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800611e:	b2db      	uxtb	r3, r3
 8006120:	2b00      	cmp	r3, #0
 8006122:	d15d      	bne.n	80061e0 <HAL_TIM_RegisterCallback+0x2ac>
  {
    switch (CallbackID)
 8006124:	7afb      	ldrb	r3, [r7, #11]
 8006126:	2b0d      	cmp	r3, #13
 8006128:	d857      	bhi.n	80061da <HAL_TIM_RegisterCallback+0x2a6>
 800612a:	a201      	add	r2, pc, #4	@ (adr r2, 8006130 <HAL_TIM_RegisterCallback+0x1fc>)
 800612c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006130:	08006169 	.word	0x08006169
 8006134:	08006171 	.word	0x08006171
 8006138:	08006179 	.word	0x08006179
 800613c:	08006181 	.word	0x08006181
 8006140:	08006189 	.word	0x08006189
 8006144:	08006191 	.word	0x08006191
 8006148:	08006199 	.word	0x08006199
 800614c:	080061a1 	.word	0x080061a1
 8006150:	080061a9 	.word	0x080061a9
 8006154:	080061b1 	.word	0x080061b1
 8006158:	080061b9 	.word	0x080061b9
 800615c:	080061c1 	.word	0x080061c1
 8006160:	080061c9 	.word	0x080061c9
 8006164:	080061d1 	.word	0x080061d1
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	687a      	ldr	r2, [r7, #4]
 800616c:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 800616e:	e039      	b.n	80061e4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	687a      	ldr	r2, [r7, #4]
 8006174:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 8006176:	e035      	b.n	80061e4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	687a      	ldr	r2, [r7, #4]
 800617c:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 800617e:	e031      	b.n	80061e4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	687a      	ldr	r2, [r7, #4]
 8006184:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 8006186:	e02d      	b.n	80061e4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	687a      	ldr	r2, [r7, #4]
 800618c:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 800618e:	e029      	b.n	80061e4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	687a      	ldr	r2, [r7, #4]
 8006194:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 8006196:	e025      	b.n	80061e4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	687a      	ldr	r2, [r7, #4]
 800619c:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 800619e:	e021      	b.n	80061e4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	687a      	ldr	r2, [r7, #4]
 80061a4:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 80061a6:	e01d      	b.n	80061e4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	687a      	ldr	r2, [r7, #4]
 80061ac:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 80061ae:	e019      	b.n	80061e4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	687a      	ldr	r2, [r7, #4]
 80061b4:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 80061b6:	e015      	b.n	80061e4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	687a      	ldr	r2, [r7, #4]
 80061bc:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 80061be:	e011      	b.n	80061e4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	687a      	ldr	r2, [r7, #4]
 80061c4:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 80061c6:	e00d      	b.n	80061e4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	687a      	ldr	r2, [r7, #4]
 80061cc:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 80061ce:	e009      	b.n	80061e4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	687a      	ldr	r2, [r7, #4]
 80061d4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 80061d8:	e004      	b.n	80061e4 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 80061da:	2301      	movs	r3, #1
 80061dc:	75fb      	strb	r3, [r7, #23]
        break;
 80061de:	e001      	b.n	80061e4 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 80061e0:	2301      	movs	r3, #1
 80061e2:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80061e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80061e6:	4618      	mov	r0, r3
 80061e8:	371c      	adds	r7, #28
 80061ea:	46bd      	mov	sp, r7
 80061ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f0:	4770      	bx	lr
 80061f2:	bf00      	nop

080061f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80061f4:	b480      	push	{r7}
 80061f6:	b085      	sub	sp, #20
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
 80061fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	4a4c      	ldr	r2, [pc, #304]	@ (8006338 <TIM_Base_SetConfig+0x144>)
 8006208:	4293      	cmp	r3, r2
 800620a:	d017      	beq.n	800623c <TIM_Base_SetConfig+0x48>
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006212:	d013      	beq.n	800623c <TIM_Base_SetConfig+0x48>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	4a49      	ldr	r2, [pc, #292]	@ (800633c <TIM_Base_SetConfig+0x148>)
 8006218:	4293      	cmp	r3, r2
 800621a:	d00f      	beq.n	800623c <TIM_Base_SetConfig+0x48>
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	4a48      	ldr	r2, [pc, #288]	@ (8006340 <TIM_Base_SetConfig+0x14c>)
 8006220:	4293      	cmp	r3, r2
 8006222:	d00b      	beq.n	800623c <TIM_Base_SetConfig+0x48>
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	4a47      	ldr	r2, [pc, #284]	@ (8006344 <TIM_Base_SetConfig+0x150>)
 8006228:	4293      	cmp	r3, r2
 800622a:	d007      	beq.n	800623c <TIM_Base_SetConfig+0x48>
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	4a46      	ldr	r2, [pc, #280]	@ (8006348 <TIM_Base_SetConfig+0x154>)
 8006230:	4293      	cmp	r3, r2
 8006232:	d003      	beq.n	800623c <TIM_Base_SetConfig+0x48>
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	4a45      	ldr	r2, [pc, #276]	@ (800634c <TIM_Base_SetConfig+0x158>)
 8006238:	4293      	cmp	r3, r2
 800623a:	d108      	bne.n	800624e <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006242:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	685b      	ldr	r3, [r3, #4]
 8006248:	68fa      	ldr	r2, [r7, #12]
 800624a:	4313      	orrs	r3, r2
 800624c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	4a39      	ldr	r2, [pc, #228]	@ (8006338 <TIM_Base_SetConfig+0x144>)
 8006252:	4293      	cmp	r3, r2
 8006254:	d023      	beq.n	800629e <TIM_Base_SetConfig+0xaa>
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800625c:	d01f      	beq.n	800629e <TIM_Base_SetConfig+0xaa>
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	4a36      	ldr	r2, [pc, #216]	@ (800633c <TIM_Base_SetConfig+0x148>)
 8006262:	4293      	cmp	r3, r2
 8006264:	d01b      	beq.n	800629e <TIM_Base_SetConfig+0xaa>
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	4a35      	ldr	r2, [pc, #212]	@ (8006340 <TIM_Base_SetConfig+0x14c>)
 800626a:	4293      	cmp	r3, r2
 800626c:	d017      	beq.n	800629e <TIM_Base_SetConfig+0xaa>
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	4a34      	ldr	r2, [pc, #208]	@ (8006344 <TIM_Base_SetConfig+0x150>)
 8006272:	4293      	cmp	r3, r2
 8006274:	d013      	beq.n	800629e <TIM_Base_SetConfig+0xaa>
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	4a33      	ldr	r2, [pc, #204]	@ (8006348 <TIM_Base_SetConfig+0x154>)
 800627a:	4293      	cmp	r3, r2
 800627c:	d00f      	beq.n	800629e <TIM_Base_SetConfig+0xaa>
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	4a33      	ldr	r2, [pc, #204]	@ (8006350 <TIM_Base_SetConfig+0x15c>)
 8006282:	4293      	cmp	r3, r2
 8006284:	d00b      	beq.n	800629e <TIM_Base_SetConfig+0xaa>
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	4a32      	ldr	r2, [pc, #200]	@ (8006354 <TIM_Base_SetConfig+0x160>)
 800628a:	4293      	cmp	r3, r2
 800628c:	d007      	beq.n	800629e <TIM_Base_SetConfig+0xaa>
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	4a31      	ldr	r2, [pc, #196]	@ (8006358 <TIM_Base_SetConfig+0x164>)
 8006292:	4293      	cmp	r3, r2
 8006294:	d003      	beq.n	800629e <TIM_Base_SetConfig+0xaa>
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	4a2c      	ldr	r2, [pc, #176]	@ (800634c <TIM_Base_SetConfig+0x158>)
 800629a:	4293      	cmp	r3, r2
 800629c:	d108      	bne.n	80062b0 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80062a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	68db      	ldr	r3, [r3, #12]
 80062aa:	68fa      	ldr	r2, [r7, #12]
 80062ac:	4313      	orrs	r3, r2
 80062ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80062b6:	683b      	ldr	r3, [r7, #0]
 80062b8:	695b      	ldr	r3, [r3, #20]
 80062ba:	4313      	orrs	r3, r2
 80062bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	68fa      	ldr	r2, [r7, #12]
 80062c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	689a      	ldr	r2, [r3, #8]
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	681a      	ldr	r2, [r3, #0]
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	4a18      	ldr	r2, [pc, #96]	@ (8006338 <TIM_Base_SetConfig+0x144>)
 80062d8:	4293      	cmp	r3, r2
 80062da:	d013      	beq.n	8006304 <TIM_Base_SetConfig+0x110>
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	4a1a      	ldr	r2, [pc, #104]	@ (8006348 <TIM_Base_SetConfig+0x154>)
 80062e0:	4293      	cmp	r3, r2
 80062e2:	d00f      	beq.n	8006304 <TIM_Base_SetConfig+0x110>
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	4a1a      	ldr	r2, [pc, #104]	@ (8006350 <TIM_Base_SetConfig+0x15c>)
 80062e8:	4293      	cmp	r3, r2
 80062ea:	d00b      	beq.n	8006304 <TIM_Base_SetConfig+0x110>
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	4a19      	ldr	r2, [pc, #100]	@ (8006354 <TIM_Base_SetConfig+0x160>)
 80062f0:	4293      	cmp	r3, r2
 80062f2:	d007      	beq.n	8006304 <TIM_Base_SetConfig+0x110>
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	4a18      	ldr	r2, [pc, #96]	@ (8006358 <TIM_Base_SetConfig+0x164>)
 80062f8:	4293      	cmp	r3, r2
 80062fa:	d003      	beq.n	8006304 <TIM_Base_SetConfig+0x110>
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	4a13      	ldr	r2, [pc, #76]	@ (800634c <TIM_Base_SetConfig+0x158>)
 8006300:	4293      	cmp	r3, r2
 8006302:	d103      	bne.n	800630c <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006304:	683b      	ldr	r3, [r7, #0]
 8006306:	691a      	ldr	r2, [r3, #16]
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2201      	movs	r2, #1
 8006310:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	691b      	ldr	r3, [r3, #16]
 8006316:	f003 0301 	and.w	r3, r3, #1
 800631a:	2b01      	cmp	r3, #1
 800631c:	d105      	bne.n	800632a <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	691b      	ldr	r3, [r3, #16]
 8006322:	f023 0201 	bic.w	r2, r3, #1
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	611a      	str	r2, [r3, #16]
  }
}
 800632a:	bf00      	nop
 800632c:	3714      	adds	r7, #20
 800632e:	46bd      	mov	sp, r7
 8006330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006334:	4770      	bx	lr
 8006336:	bf00      	nop
 8006338:	40012c00 	.word	0x40012c00
 800633c:	40000400 	.word	0x40000400
 8006340:	40000800 	.word	0x40000800
 8006344:	40000c00 	.word	0x40000c00
 8006348:	40013400 	.word	0x40013400
 800634c:	40015000 	.word	0x40015000
 8006350:	40014000 	.word	0x40014000
 8006354:	40014400 	.word	0x40014400
 8006358:	40014800 	.word	0x40014800

0800635c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800635c:	b480      	push	{r7}
 800635e:	b087      	sub	sp, #28
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
 8006364:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	6a1b      	ldr	r3, [r3, #32]
 800636a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	6a1b      	ldr	r3, [r3, #32]
 8006370:	f023 0201 	bic.w	r2, r3, #1
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	685b      	ldr	r3, [r3, #4]
 800637c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	699b      	ldr	r3, [r3, #24]
 8006382:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800638a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800638e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	f023 0303 	bic.w	r3, r3, #3
 8006396:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	68fa      	ldr	r2, [r7, #12]
 800639e:	4313      	orrs	r3, r2
 80063a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80063a2:	697b      	ldr	r3, [r7, #20]
 80063a4:	f023 0302 	bic.w	r3, r3, #2
 80063a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	689b      	ldr	r3, [r3, #8]
 80063ae:	697a      	ldr	r2, [r7, #20]
 80063b0:	4313      	orrs	r3, r2
 80063b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	4a30      	ldr	r2, [pc, #192]	@ (8006478 <TIM_OC1_SetConfig+0x11c>)
 80063b8:	4293      	cmp	r3, r2
 80063ba:	d013      	beq.n	80063e4 <TIM_OC1_SetConfig+0x88>
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	4a2f      	ldr	r2, [pc, #188]	@ (800647c <TIM_OC1_SetConfig+0x120>)
 80063c0:	4293      	cmp	r3, r2
 80063c2:	d00f      	beq.n	80063e4 <TIM_OC1_SetConfig+0x88>
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	4a2e      	ldr	r2, [pc, #184]	@ (8006480 <TIM_OC1_SetConfig+0x124>)
 80063c8:	4293      	cmp	r3, r2
 80063ca:	d00b      	beq.n	80063e4 <TIM_OC1_SetConfig+0x88>
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	4a2d      	ldr	r2, [pc, #180]	@ (8006484 <TIM_OC1_SetConfig+0x128>)
 80063d0:	4293      	cmp	r3, r2
 80063d2:	d007      	beq.n	80063e4 <TIM_OC1_SetConfig+0x88>
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	4a2c      	ldr	r2, [pc, #176]	@ (8006488 <TIM_OC1_SetConfig+0x12c>)
 80063d8:	4293      	cmp	r3, r2
 80063da:	d003      	beq.n	80063e4 <TIM_OC1_SetConfig+0x88>
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	4a2b      	ldr	r2, [pc, #172]	@ (800648c <TIM_OC1_SetConfig+0x130>)
 80063e0:	4293      	cmp	r3, r2
 80063e2:	d10c      	bne.n	80063fe <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80063e4:	697b      	ldr	r3, [r7, #20]
 80063e6:	f023 0308 	bic.w	r3, r3, #8
 80063ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	68db      	ldr	r3, [r3, #12]
 80063f0:	697a      	ldr	r2, [r7, #20]
 80063f2:	4313      	orrs	r3, r2
 80063f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80063f6:	697b      	ldr	r3, [r7, #20]
 80063f8:	f023 0304 	bic.w	r3, r3, #4
 80063fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	4a1d      	ldr	r2, [pc, #116]	@ (8006478 <TIM_OC1_SetConfig+0x11c>)
 8006402:	4293      	cmp	r3, r2
 8006404:	d013      	beq.n	800642e <TIM_OC1_SetConfig+0xd2>
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	4a1c      	ldr	r2, [pc, #112]	@ (800647c <TIM_OC1_SetConfig+0x120>)
 800640a:	4293      	cmp	r3, r2
 800640c:	d00f      	beq.n	800642e <TIM_OC1_SetConfig+0xd2>
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	4a1b      	ldr	r2, [pc, #108]	@ (8006480 <TIM_OC1_SetConfig+0x124>)
 8006412:	4293      	cmp	r3, r2
 8006414:	d00b      	beq.n	800642e <TIM_OC1_SetConfig+0xd2>
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	4a1a      	ldr	r2, [pc, #104]	@ (8006484 <TIM_OC1_SetConfig+0x128>)
 800641a:	4293      	cmp	r3, r2
 800641c:	d007      	beq.n	800642e <TIM_OC1_SetConfig+0xd2>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	4a19      	ldr	r2, [pc, #100]	@ (8006488 <TIM_OC1_SetConfig+0x12c>)
 8006422:	4293      	cmp	r3, r2
 8006424:	d003      	beq.n	800642e <TIM_OC1_SetConfig+0xd2>
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	4a18      	ldr	r2, [pc, #96]	@ (800648c <TIM_OC1_SetConfig+0x130>)
 800642a:	4293      	cmp	r3, r2
 800642c:	d111      	bne.n	8006452 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800642e:	693b      	ldr	r3, [r7, #16]
 8006430:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006434:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006436:	693b      	ldr	r3, [r7, #16]
 8006438:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800643c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	695b      	ldr	r3, [r3, #20]
 8006442:	693a      	ldr	r2, [r7, #16]
 8006444:	4313      	orrs	r3, r2
 8006446:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	699b      	ldr	r3, [r3, #24]
 800644c:	693a      	ldr	r2, [r7, #16]
 800644e:	4313      	orrs	r3, r2
 8006450:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	693a      	ldr	r2, [r7, #16]
 8006456:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	68fa      	ldr	r2, [r7, #12]
 800645c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	685a      	ldr	r2, [r3, #4]
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	697a      	ldr	r2, [r7, #20]
 800646a:	621a      	str	r2, [r3, #32]
}
 800646c:	bf00      	nop
 800646e:	371c      	adds	r7, #28
 8006470:	46bd      	mov	sp, r7
 8006472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006476:	4770      	bx	lr
 8006478:	40012c00 	.word	0x40012c00
 800647c:	40013400 	.word	0x40013400
 8006480:	40014000 	.word	0x40014000
 8006484:	40014400 	.word	0x40014400
 8006488:	40014800 	.word	0x40014800
 800648c:	40015000 	.word	0x40015000

08006490 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006490:	b480      	push	{r7}
 8006492:	b087      	sub	sp, #28
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
 8006498:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	6a1b      	ldr	r3, [r3, #32]
 800649e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	6a1b      	ldr	r3, [r3, #32]
 80064a4:	f023 0210 	bic.w	r2, r3, #16
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	685b      	ldr	r3, [r3, #4]
 80064b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	699b      	ldr	r3, [r3, #24]
 80064b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80064be:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80064c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80064ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	021b      	lsls	r3, r3, #8
 80064d2:	68fa      	ldr	r2, [r7, #12]
 80064d4:	4313      	orrs	r3, r2
 80064d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80064d8:	697b      	ldr	r3, [r7, #20]
 80064da:	f023 0320 	bic.w	r3, r3, #32
 80064de:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	689b      	ldr	r3, [r3, #8]
 80064e4:	011b      	lsls	r3, r3, #4
 80064e6:	697a      	ldr	r2, [r7, #20]
 80064e8:	4313      	orrs	r3, r2
 80064ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	4a2c      	ldr	r2, [pc, #176]	@ (80065a0 <TIM_OC2_SetConfig+0x110>)
 80064f0:	4293      	cmp	r3, r2
 80064f2:	d007      	beq.n	8006504 <TIM_OC2_SetConfig+0x74>
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	4a2b      	ldr	r2, [pc, #172]	@ (80065a4 <TIM_OC2_SetConfig+0x114>)
 80064f8:	4293      	cmp	r3, r2
 80064fa:	d003      	beq.n	8006504 <TIM_OC2_SetConfig+0x74>
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	4a2a      	ldr	r2, [pc, #168]	@ (80065a8 <TIM_OC2_SetConfig+0x118>)
 8006500:	4293      	cmp	r3, r2
 8006502:	d10d      	bne.n	8006520 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006504:	697b      	ldr	r3, [r7, #20]
 8006506:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800650a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800650c:	683b      	ldr	r3, [r7, #0]
 800650e:	68db      	ldr	r3, [r3, #12]
 8006510:	011b      	lsls	r3, r3, #4
 8006512:	697a      	ldr	r2, [r7, #20]
 8006514:	4313      	orrs	r3, r2
 8006516:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006518:	697b      	ldr	r3, [r7, #20]
 800651a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800651e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	4a1f      	ldr	r2, [pc, #124]	@ (80065a0 <TIM_OC2_SetConfig+0x110>)
 8006524:	4293      	cmp	r3, r2
 8006526:	d013      	beq.n	8006550 <TIM_OC2_SetConfig+0xc0>
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	4a1e      	ldr	r2, [pc, #120]	@ (80065a4 <TIM_OC2_SetConfig+0x114>)
 800652c:	4293      	cmp	r3, r2
 800652e:	d00f      	beq.n	8006550 <TIM_OC2_SetConfig+0xc0>
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	4a1e      	ldr	r2, [pc, #120]	@ (80065ac <TIM_OC2_SetConfig+0x11c>)
 8006534:	4293      	cmp	r3, r2
 8006536:	d00b      	beq.n	8006550 <TIM_OC2_SetConfig+0xc0>
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	4a1d      	ldr	r2, [pc, #116]	@ (80065b0 <TIM_OC2_SetConfig+0x120>)
 800653c:	4293      	cmp	r3, r2
 800653e:	d007      	beq.n	8006550 <TIM_OC2_SetConfig+0xc0>
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	4a1c      	ldr	r2, [pc, #112]	@ (80065b4 <TIM_OC2_SetConfig+0x124>)
 8006544:	4293      	cmp	r3, r2
 8006546:	d003      	beq.n	8006550 <TIM_OC2_SetConfig+0xc0>
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	4a17      	ldr	r2, [pc, #92]	@ (80065a8 <TIM_OC2_SetConfig+0x118>)
 800654c:	4293      	cmp	r3, r2
 800654e:	d113      	bne.n	8006578 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006550:	693b      	ldr	r3, [r7, #16]
 8006552:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006556:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006558:	693b      	ldr	r3, [r7, #16]
 800655a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800655e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	695b      	ldr	r3, [r3, #20]
 8006564:	009b      	lsls	r3, r3, #2
 8006566:	693a      	ldr	r2, [r7, #16]
 8006568:	4313      	orrs	r3, r2
 800656a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	699b      	ldr	r3, [r3, #24]
 8006570:	009b      	lsls	r3, r3, #2
 8006572:	693a      	ldr	r2, [r7, #16]
 8006574:	4313      	orrs	r3, r2
 8006576:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	693a      	ldr	r2, [r7, #16]
 800657c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	68fa      	ldr	r2, [r7, #12]
 8006582:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	685a      	ldr	r2, [r3, #4]
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	697a      	ldr	r2, [r7, #20]
 8006590:	621a      	str	r2, [r3, #32]
}
 8006592:	bf00      	nop
 8006594:	371c      	adds	r7, #28
 8006596:	46bd      	mov	sp, r7
 8006598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659c:	4770      	bx	lr
 800659e:	bf00      	nop
 80065a0:	40012c00 	.word	0x40012c00
 80065a4:	40013400 	.word	0x40013400
 80065a8:	40015000 	.word	0x40015000
 80065ac:	40014000 	.word	0x40014000
 80065b0:	40014400 	.word	0x40014400
 80065b4:	40014800 	.word	0x40014800

080065b8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80065b8:	b480      	push	{r7}
 80065ba:	b087      	sub	sp, #28
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
 80065c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	6a1b      	ldr	r3, [r3, #32]
 80065c6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	6a1b      	ldr	r3, [r3, #32]
 80065cc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	685b      	ldr	r3, [r3, #4]
 80065d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	69db      	ldr	r3, [r3, #28]
 80065de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80065e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80065ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	f023 0303 	bic.w	r3, r3, #3
 80065f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	68fa      	ldr	r2, [r7, #12]
 80065fa:	4313      	orrs	r3, r2
 80065fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80065fe:	697b      	ldr	r3, [r7, #20]
 8006600:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006604:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006606:	683b      	ldr	r3, [r7, #0]
 8006608:	689b      	ldr	r3, [r3, #8]
 800660a:	021b      	lsls	r3, r3, #8
 800660c:	697a      	ldr	r2, [r7, #20]
 800660e:	4313      	orrs	r3, r2
 8006610:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	4a2b      	ldr	r2, [pc, #172]	@ (80066c4 <TIM_OC3_SetConfig+0x10c>)
 8006616:	4293      	cmp	r3, r2
 8006618:	d007      	beq.n	800662a <TIM_OC3_SetConfig+0x72>
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	4a2a      	ldr	r2, [pc, #168]	@ (80066c8 <TIM_OC3_SetConfig+0x110>)
 800661e:	4293      	cmp	r3, r2
 8006620:	d003      	beq.n	800662a <TIM_OC3_SetConfig+0x72>
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	4a29      	ldr	r2, [pc, #164]	@ (80066cc <TIM_OC3_SetConfig+0x114>)
 8006626:	4293      	cmp	r3, r2
 8006628:	d10d      	bne.n	8006646 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800662a:	697b      	ldr	r3, [r7, #20]
 800662c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006630:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006632:	683b      	ldr	r3, [r7, #0]
 8006634:	68db      	ldr	r3, [r3, #12]
 8006636:	021b      	lsls	r3, r3, #8
 8006638:	697a      	ldr	r2, [r7, #20]
 800663a:	4313      	orrs	r3, r2
 800663c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800663e:	697b      	ldr	r3, [r7, #20]
 8006640:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006644:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	4a1e      	ldr	r2, [pc, #120]	@ (80066c4 <TIM_OC3_SetConfig+0x10c>)
 800664a:	4293      	cmp	r3, r2
 800664c:	d013      	beq.n	8006676 <TIM_OC3_SetConfig+0xbe>
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	4a1d      	ldr	r2, [pc, #116]	@ (80066c8 <TIM_OC3_SetConfig+0x110>)
 8006652:	4293      	cmp	r3, r2
 8006654:	d00f      	beq.n	8006676 <TIM_OC3_SetConfig+0xbe>
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	4a1d      	ldr	r2, [pc, #116]	@ (80066d0 <TIM_OC3_SetConfig+0x118>)
 800665a:	4293      	cmp	r3, r2
 800665c:	d00b      	beq.n	8006676 <TIM_OC3_SetConfig+0xbe>
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	4a1c      	ldr	r2, [pc, #112]	@ (80066d4 <TIM_OC3_SetConfig+0x11c>)
 8006662:	4293      	cmp	r3, r2
 8006664:	d007      	beq.n	8006676 <TIM_OC3_SetConfig+0xbe>
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	4a1b      	ldr	r2, [pc, #108]	@ (80066d8 <TIM_OC3_SetConfig+0x120>)
 800666a:	4293      	cmp	r3, r2
 800666c:	d003      	beq.n	8006676 <TIM_OC3_SetConfig+0xbe>
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	4a16      	ldr	r2, [pc, #88]	@ (80066cc <TIM_OC3_SetConfig+0x114>)
 8006672:	4293      	cmp	r3, r2
 8006674:	d113      	bne.n	800669e <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006676:	693b      	ldr	r3, [r7, #16]
 8006678:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800667c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800667e:	693b      	ldr	r3, [r7, #16]
 8006680:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006684:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006686:	683b      	ldr	r3, [r7, #0]
 8006688:	695b      	ldr	r3, [r3, #20]
 800668a:	011b      	lsls	r3, r3, #4
 800668c:	693a      	ldr	r2, [r7, #16]
 800668e:	4313      	orrs	r3, r2
 8006690:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006692:	683b      	ldr	r3, [r7, #0]
 8006694:	699b      	ldr	r3, [r3, #24]
 8006696:	011b      	lsls	r3, r3, #4
 8006698:	693a      	ldr	r2, [r7, #16]
 800669a:	4313      	orrs	r3, r2
 800669c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	693a      	ldr	r2, [r7, #16]
 80066a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	68fa      	ldr	r2, [r7, #12]
 80066a8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80066aa:	683b      	ldr	r3, [r7, #0]
 80066ac:	685a      	ldr	r2, [r3, #4]
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	697a      	ldr	r2, [r7, #20]
 80066b6:	621a      	str	r2, [r3, #32]
}
 80066b8:	bf00      	nop
 80066ba:	371c      	adds	r7, #28
 80066bc:	46bd      	mov	sp, r7
 80066be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c2:	4770      	bx	lr
 80066c4:	40012c00 	.word	0x40012c00
 80066c8:	40013400 	.word	0x40013400
 80066cc:	40015000 	.word	0x40015000
 80066d0:	40014000 	.word	0x40014000
 80066d4:	40014400 	.word	0x40014400
 80066d8:	40014800 	.word	0x40014800

080066dc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80066dc:	b480      	push	{r7}
 80066de:	b087      	sub	sp, #28
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	6078      	str	r0, [r7, #4]
 80066e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	6a1b      	ldr	r3, [r3, #32]
 80066ea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	6a1b      	ldr	r3, [r3, #32]
 80066f0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	685b      	ldr	r3, [r3, #4]
 80066fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	69db      	ldr	r3, [r3, #28]
 8006702:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800670a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800670e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006716:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	021b      	lsls	r3, r3, #8
 800671e:	68fa      	ldr	r2, [r7, #12]
 8006720:	4313      	orrs	r3, r2
 8006722:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006724:	697b      	ldr	r3, [r7, #20]
 8006726:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800672a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	689b      	ldr	r3, [r3, #8]
 8006730:	031b      	lsls	r3, r3, #12
 8006732:	697a      	ldr	r2, [r7, #20]
 8006734:	4313      	orrs	r3, r2
 8006736:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	4a2c      	ldr	r2, [pc, #176]	@ (80067ec <TIM_OC4_SetConfig+0x110>)
 800673c:	4293      	cmp	r3, r2
 800673e:	d007      	beq.n	8006750 <TIM_OC4_SetConfig+0x74>
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	4a2b      	ldr	r2, [pc, #172]	@ (80067f0 <TIM_OC4_SetConfig+0x114>)
 8006744:	4293      	cmp	r3, r2
 8006746:	d003      	beq.n	8006750 <TIM_OC4_SetConfig+0x74>
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	4a2a      	ldr	r2, [pc, #168]	@ (80067f4 <TIM_OC4_SetConfig+0x118>)
 800674c:	4293      	cmp	r3, r2
 800674e:	d10d      	bne.n	800676c <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8006750:	697b      	ldr	r3, [r7, #20]
 8006752:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006756:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	68db      	ldr	r3, [r3, #12]
 800675c:	031b      	lsls	r3, r3, #12
 800675e:	697a      	ldr	r2, [r7, #20]
 8006760:	4313      	orrs	r3, r2
 8006762:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8006764:	697b      	ldr	r3, [r7, #20]
 8006766:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800676a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	4a1f      	ldr	r2, [pc, #124]	@ (80067ec <TIM_OC4_SetConfig+0x110>)
 8006770:	4293      	cmp	r3, r2
 8006772:	d013      	beq.n	800679c <TIM_OC4_SetConfig+0xc0>
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	4a1e      	ldr	r2, [pc, #120]	@ (80067f0 <TIM_OC4_SetConfig+0x114>)
 8006778:	4293      	cmp	r3, r2
 800677a:	d00f      	beq.n	800679c <TIM_OC4_SetConfig+0xc0>
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	4a1e      	ldr	r2, [pc, #120]	@ (80067f8 <TIM_OC4_SetConfig+0x11c>)
 8006780:	4293      	cmp	r3, r2
 8006782:	d00b      	beq.n	800679c <TIM_OC4_SetConfig+0xc0>
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	4a1d      	ldr	r2, [pc, #116]	@ (80067fc <TIM_OC4_SetConfig+0x120>)
 8006788:	4293      	cmp	r3, r2
 800678a:	d007      	beq.n	800679c <TIM_OC4_SetConfig+0xc0>
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	4a1c      	ldr	r2, [pc, #112]	@ (8006800 <TIM_OC4_SetConfig+0x124>)
 8006790:	4293      	cmp	r3, r2
 8006792:	d003      	beq.n	800679c <TIM_OC4_SetConfig+0xc0>
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	4a17      	ldr	r2, [pc, #92]	@ (80067f4 <TIM_OC4_SetConfig+0x118>)
 8006798:	4293      	cmp	r3, r2
 800679a:	d113      	bne.n	80067c4 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800679c:	693b      	ldr	r3, [r7, #16]
 800679e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80067a2:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80067a4:	693b      	ldr	r3, [r7, #16]
 80067a6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80067aa:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	695b      	ldr	r3, [r3, #20]
 80067b0:	019b      	lsls	r3, r3, #6
 80067b2:	693a      	ldr	r2, [r7, #16]
 80067b4:	4313      	orrs	r3, r2
 80067b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	699b      	ldr	r3, [r3, #24]
 80067bc:	019b      	lsls	r3, r3, #6
 80067be:	693a      	ldr	r2, [r7, #16]
 80067c0:	4313      	orrs	r3, r2
 80067c2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	693a      	ldr	r2, [r7, #16]
 80067c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	68fa      	ldr	r2, [r7, #12]
 80067ce:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80067d0:	683b      	ldr	r3, [r7, #0]
 80067d2:	685a      	ldr	r2, [r3, #4]
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	697a      	ldr	r2, [r7, #20]
 80067dc:	621a      	str	r2, [r3, #32]
}
 80067de:	bf00      	nop
 80067e0:	371c      	adds	r7, #28
 80067e2:	46bd      	mov	sp, r7
 80067e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e8:	4770      	bx	lr
 80067ea:	bf00      	nop
 80067ec:	40012c00 	.word	0x40012c00
 80067f0:	40013400 	.word	0x40013400
 80067f4:	40015000 	.word	0x40015000
 80067f8:	40014000 	.word	0x40014000
 80067fc:	40014400 	.word	0x40014400
 8006800:	40014800 	.word	0x40014800

08006804 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006804:	b480      	push	{r7}
 8006806:	b087      	sub	sp, #28
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
 800680c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	6a1b      	ldr	r3, [r3, #32]
 8006812:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	6a1b      	ldr	r3, [r3, #32]
 8006818:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	685b      	ldr	r3, [r3, #4]
 8006824:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800682a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006832:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006836:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	68fa      	ldr	r2, [r7, #12]
 800683e:	4313      	orrs	r3, r2
 8006840:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006842:	693b      	ldr	r3, [r7, #16]
 8006844:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006848:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	689b      	ldr	r3, [r3, #8]
 800684e:	041b      	lsls	r3, r3, #16
 8006850:	693a      	ldr	r2, [r7, #16]
 8006852:	4313      	orrs	r3, r2
 8006854:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	4a19      	ldr	r2, [pc, #100]	@ (80068c0 <TIM_OC5_SetConfig+0xbc>)
 800685a:	4293      	cmp	r3, r2
 800685c:	d013      	beq.n	8006886 <TIM_OC5_SetConfig+0x82>
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	4a18      	ldr	r2, [pc, #96]	@ (80068c4 <TIM_OC5_SetConfig+0xc0>)
 8006862:	4293      	cmp	r3, r2
 8006864:	d00f      	beq.n	8006886 <TIM_OC5_SetConfig+0x82>
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	4a17      	ldr	r2, [pc, #92]	@ (80068c8 <TIM_OC5_SetConfig+0xc4>)
 800686a:	4293      	cmp	r3, r2
 800686c:	d00b      	beq.n	8006886 <TIM_OC5_SetConfig+0x82>
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	4a16      	ldr	r2, [pc, #88]	@ (80068cc <TIM_OC5_SetConfig+0xc8>)
 8006872:	4293      	cmp	r3, r2
 8006874:	d007      	beq.n	8006886 <TIM_OC5_SetConfig+0x82>
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	4a15      	ldr	r2, [pc, #84]	@ (80068d0 <TIM_OC5_SetConfig+0xcc>)
 800687a:	4293      	cmp	r3, r2
 800687c:	d003      	beq.n	8006886 <TIM_OC5_SetConfig+0x82>
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	4a14      	ldr	r2, [pc, #80]	@ (80068d4 <TIM_OC5_SetConfig+0xd0>)
 8006882:	4293      	cmp	r3, r2
 8006884:	d109      	bne.n	800689a <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006886:	697b      	ldr	r3, [r7, #20]
 8006888:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800688c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	695b      	ldr	r3, [r3, #20]
 8006892:	021b      	lsls	r3, r3, #8
 8006894:	697a      	ldr	r2, [r7, #20]
 8006896:	4313      	orrs	r3, r2
 8006898:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	697a      	ldr	r2, [r7, #20]
 800689e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	68fa      	ldr	r2, [r7, #12]
 80068a4:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	685a      	ldr	r2, [r3, #4]
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	693a      	ldr	r2, [r7, #16]
 80068b2:	621a      	str	r2, [r3, #32]
}
 80068b4:	bf00      	nop
 80068b6:	371c      	adds	r7, #28
 80068b8:	46bd      	mov	sp, r7
 80068ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068be:	4770      	bx	lr
 80068c0:	40012c00 	.word	0x40012c00
 80068c4:	40013400 	.word	0x40013400
 80068c8:	40014000 	.word	0x40014000
 80068cc:	40014400 	.word	0x40014400
 80068d0:	40014800 	.word	0x40014800
 80068d4:	40015000 	.word	0x40015000

080068d8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80068d8:	b480      	push	{r7}
 80068da:	b087      	sub	sp, #28
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
 80068e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	6a1b      	ldr	r3, [r3, #32]
 80068e6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	6a1b      	ldr	r3, [r3, #32]
 80068ec:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	685b      	ldr	r3, [r3, #4]
 80068f8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80068fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006906:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800690a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	021b      	lsls	r3, r3, #8
 8006912:	68fa      	ldr	r2, [r7, #12]
 8006914:	4313      	orrs	r3, r2
 8006916:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006918:	693b      	ldr	r3, [r7, #16]
 800691a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800691e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	689b      	ldr	r3, [r3, #8]
 8006924:	051b      	lsls	r3, r3, #20
 8006926:	693a      	ldr	r2, [r7, #16]
 8006928:	4313      	orrs	r3, r2
 800692a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	4a1a      	ldr	r2, [pc, #104]	@ (8006998 <TIM_OC6_SetConfig+0xc0>)
 8006930:	4293      	cmp	r3, r2
 8006932:	d013      	beq.n	800695c <TIM_OC6_SetConfig+0x84>
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	4a19      	ldr	r2, [pc, #100]	@ (800699c <TIM_OC6_SetConfig+0xc4>)
 8006938:	4293      	cmp	r3, r2
 800693a:	d00f      	beq.n	800695c <TIM_OC6_SetConfig+0x84>
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	4a18      	ldr	r2, [pc, #96]	@ (80069a0 <TIM_OC6_SetConfig+0xc8>)
 8006940:	4293      	cmp	r3, r2
 8006942:	d00b      	beq.n	800695c <TIM_OC6_SetConfig+0x84>
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	4a17      	ldr	r2, [pc, #92]	@ (80069a4 <TIM_OC6_SetConfig+0xcc>)
 8006948:	4293      	cmp	r3, r2
 800694a:	d007      	beq.n	800695c <TIM_OC6_SetConfig+0x84>
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	4a16      	ldr	r2, [pc, #88]	@ (80069a8 <TIM_OC6_SetConfig+0xd0>)
 8006950:	4293      	cmp	r3, r2
 8006952:	d003      	beq.n	800695c <TIM_OC6_SetConfig+0x84>
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	4a15      	ldr	r2, [pc, #84]	@ (80069ac <TIM_OC6_SetConfig+0xd4>)
 8006958:	4293      	cmp	r3, r2
 800695a:	d109      	bne.n	8006970 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800695c:	697b      	ldr	r3, [r7, #20]
 800695e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006962:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	695b      	ldr	r3, [r3, #20]
 8006968:	029b      	lsls	r3, r3, #10
 800696a:	697a      	ldr	r2, [r7, #20]
 800696c:	4313      	orrs	r3, r2
 800696e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	697a      	ldr	r2, [r7, #20]
 8006974:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	68fa      	ldr	r2, [r7, #12]
 800697a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800697c:	683b      	ldr	r3, [r7, #0]
 800697e:	685a      	ldr	r2, [r3, #4]
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	693a      	ldr	r2, [r7, #16]
 8006988:	621a      	str	r2, [r3, #32]
}
 800698a:	bf00      	nop
 800698c:	371c      	adds	r7, #28
 800698e:	46bd      	mov	sp, r7
 8006990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006994:	4770      	bx	lr
 8006996:	bf00      	nop
 8006998:	40012c00 	.word	0x40012c00
 800699c:	40013400 	.word	0x40013400
 80069a0:	40014000 	.word	0x40014000
 80069a4:	40014400 	.word	0x40014400
 80069a8:	40014800 	.word	0x40014800
 80069ac:	40015000 	.word	0x40015000

080069b0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80069b0:	b480      	push	{r7}
 80069b2:	b087      	sub	sp, #28
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	60f8      	str	r0, [r7, #12]
 80069b8:	60b9      	str	r1, [r7, #8]
 80069ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	6a1b      	ldr	r3, [r3, #32]
 80069c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	6a1b      	ldr	r3, [r3, #32]
 80069c6:	f023 0201 	bic.w	r2, r3, #1
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	699b      	ldr	r3, [r3, #24]
 80069d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80069d4:	693b      	ldr	r3, [r7, #16]
 80069d6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80069da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	011b      	lsls	r3, r3, #4
 80069e0:	693a      	ldr	r2, [r7, #16]
 80069e2:	4313      	orrs	r3, r2
 80069e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80069e6:	697b      	ldr	r3, [r7, #20]
 80069e8:	f023 030a 	bic.w	r3, r3, #10
 80069ec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80069ee:	697a      	ldr	r2, [r7, #20]
 80069f0:	68bb      	ldr	r3, [r7, #8]
 80069f2:	4313      	orrs	r3, r2
 80069f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	693a      	ldr	r2, [r7, #16]
 80069fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	697a      	ldr	r2, [r7, #20]
 8006a00:	621a      	str	r2, [r3, #32]
}
 8006a02:	bf00      	nop
 8006a04:	371c      	adds	r7, #28
 8006a06:	46bd      	mov	sp, r7
 8006a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0c:	4770      	bx	lr

08006a0e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006a0e:	b480      	push	{r7}
 8006a10:	b087      	sub	sp, #28
 8006a12:	af00      	add	r7, sp, #0
 8006a14:	60f8      	str	r0, [r7, #12]
 8006a16:	60b9      	str	r1, [r7, #8]
 8006a18:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	6a1b      	ldr	r3, [r3, #32]
 8006a1e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	6a1b      	ldr	r3, [r3, #32]
 8006a24:	f023 0210 	bic.w	r2, r3, #16
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	699b      	ldr	r3, [r3, #24]
 8006a30:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006a32:	693b      	ldr	r3, [r7, #16]
 8006a34:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006a38:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	031b      	lsls	r3, r3, #12
 8006a3e:	693a      	ldr	r2, [r7, #16]
 8006a40:	4313      	orrs	r3, r2
 8006a42:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006a44:	697b      	ldr	r3, [r7, #20]
 8006a46:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006a4a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006a4c:	68bb      	ldr	r3, [r7, #8]
 8006a4e:	011b      	lsls	r3, r3, #4
 8006a50:	697a      	ldr	r2, [r7, #20]
 8006a52:	4313      	orrs	r3, r2
 8006a54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	693a      	ldr	r2, [r7, #16]
 8006a5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	697a      	ldr	r2, [r7, #20]
 8006a60:	621a      	str	r2, [r3, #32]
}
 8006a62:	bf00      	nop
 8006a64:	371c      	adds	r7, #28
 8006a66:	46bd      	mov	sp, r7
 8006a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6c:	4770      	bx	lr

08006a6e <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006a6e:	b480      	push	{r7}
 8006a70:	b085      	sub	sp, #20
 8006a72:	af00      	add	r7, sp, #0
 8006a74:	6078      	str	r0, [r7, #4]
 8006a76:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	689b      	ldr	r3, [r3, #8]
 8006a7c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8006a84:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a88:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006a8a:	683a      	ldr	r2, [r7, #0]
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	4313      	orrs	r3, r2
 8006a90:	f043 0307 	orr.w	r3, r3, #7
 8006a94:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	68fa      	ldr	r2, [r7, #12]
 8006a9a:	609a      	str	r2, [r3, #8]
}
 8006a9c:	bf00      	nop
 8006a9e:	3714      	adds	r7, #20
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa6:	4770      	bx	lr

08006aa8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006aa8:	b480      	push	{r7}
 8006aaa:	b087      	sub	sp, #28
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	60f8      	str	r0, [r7, #12]
 8006ab0:	60b9      	str	r1, [r7, #8]
 8006ab2:	607a      	str	r2, [r7, #4]
 8006ab4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	689b      	ldr	r3, [r3, #8]
 8006aba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006abc:	697b      	ldr	r3, [r7, #20]
 8006abe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006ac2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	021a      	lsls	r2, r3, #8
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	431a      	orrs	r2, r3
 8006acc:	68bb      	ldr	r3, [r7, #8]
 8006ace:	4313      	orrs	r3, r2
 8006ad0:	697a      	ldr	r2, [r7, #20]
 8006ad2:	4313      	orrs	r3, r2
 8006ad4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	697a      	ldr	r2, [r7, #20]
 8006ada:	609a      	str	r2, [r3, #8]
}
 8006adc:	bf00      	nop
 8006ade:	371c      	adds	r7, #28
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae6:	4770      	bx	lr

08006ae8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006ae8:	b480      	push	{r7}
 8006aea:	b087      	sub	sp, #28
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	60f8      	str	r0, [r7, #12]
 8006af0:	60b9      	str	r1, [r7, #8]
 8006af2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006af4:	68bb      	ldr	r3, [r7, #8]
 8006af6:	f003 031f 	and.w	r3, r3, #31
 8006afa:	2201      	movs	r2, #1
 8006afc:	fa02 f303 	lsl.w	r3, r2, r3
 8006b00:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	6a1a      	ldr	r2, [r3, #32]
 8006b06:	697b      	ldr	r3, [r7, #20]
 8006b08:	43db      	mvns	r3, r3
 8006b0a:	401a      	ands	r2, r3
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	6a1a      	ldr	r2, [r3, #32]
 8006b14:	68bb      	ldr	r3, [r7, #8]
 8006b16:	f003 031f 	and.w	r3, r3, #31
 8006b1a:	6879      	ldr	r1, [r7, #4]
 8006b1c:	fa01 f303 	lsl.w	r3, r1, r3
 8006b20:	431a      	orrs	r2, r3
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	621a      	str	r2, [r3, #32]
}
 8006b26:	bf00      	nop
 8006b28:	371c      	adds	r7, #28
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b30:	4770      	bx	lr
	...

08006b34 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8006b34:	b480      	push	{r7}
 8006b36:	b083      	sub	sp, #12
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	4a26      	ldr	r2, [pc, #152]	@ (8006bd8 <TIM_ResetCallback+0xa4>)
 8006b40:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	4a25      	ldr	r2, [pc, #148]	@ (8006bdc <TIM_ResetCallback+0xa8>)
 8006b48:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	4a24      	ldr	r2, [pc, #144]	@ (8006be0 <TIM_ResetCallback+0xac>)
 8006b50:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	4a23      	ldr	r2, [pc, #140]	@ (8006be4 <TIM_ResetCallback+0xb0>)
 8006b58:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	4a22      	ldr	r2, [pc, #136]	@ (8006be8 <TIM_ResetCallback+0xb4>)
 8006b60:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	4a21      	ldr	r2, [pc, #132]	@ (8006bec <TIM_ResetCallback+0xb8>)
 8006b68:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	4a20      	ldr	r2, [pc, #128]	@ (8006bf0 <TIM_ResetCallback+0xbc>)
 8006b70:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	4a1f      	ldr	r2, [pc, #124]	@ (8006bf4 <TIM_ResetCallback+0xc0>)
 8006b78:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	4a1e      	ldr	r2, [pc, #120]	@ (8006bf8 <TIM_ResetCallback+0xc4>)
 8006b80:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	4a1d      	ldr	r2, [pc, #116]	@ (8006bfc <TIM_ResetCallback+0xc8>)
 8006b88:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	4a1c      	ldr	r2, [pc, #112]	@ (8006c00 <TIM_ResetCallback+0xcc>)
 8006b90:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	4a1b      	ldr	r2, [pc, #108]	@ (8006c04 <TIM_ResetCallback+0xd0>)
 8006b98:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	4a1a      	ldr	r2, [pc, #104]	@ (8006c08 <TIM_ResetCallback+0xd4>)
 8006ba0:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	4a19      	ldr	r2, [pc, #100]	@ (8006c0c <TIM_ResetCallback+0xd8>)
 8006ba8:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  htim->EncoderIndexCallback              = HAL_TIMEx_EncoderIndexCallback;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	4a18      	ldr	r2, [pc, #96]	@ (8006c10 <TIM_ResetCallback+0xdc>)
 8006bb0:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  htim->DirectionChangeCallback           = HAL_TIMEx_DirectionChangeCallback;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	4a17      	ldr	r2, [pc, #92]	@ (8006c14 <TIM_ResetCallback+0xe0>)
 8006bb8:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  htim->IndexErrorCallback                = HAL_TIMEx_IndexErrorCallback;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	4a16      	ldr	r2, [pc, #88]	@ (8006c18 <TIM_ResetCallback+0xe4>)
 8006bc0:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  htim->TransitionErrorCallback           = HAL_TIMEx_TransitionErrorCallback;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	4a15      	ldr	r2, [pc, #84]	@ (8006c1c <TIM_ResetCallback+0xe8>)
 8006bc8:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 8006bcc:	bf00      	nop
 8006bce:	370c      	adds	r7, #12
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd6:	4770      	bx	lr
 8006bd8:	08005e6d 	.word	0x08005e6d
 8006bdc:	08005e81 	.word	0x08005e81
 8006be0:	08005ef9 	.word	0x08005ef9
 8006be4:	08005f0d 	.word	0x08005f0d
 8006be8:	08005ea9 	.word	0x08005ea9
 8006bec:	08005ebd 	.word	0x08005ebd
 8006bf0:	08005e95 	.word	0x08005e95
 8006bf4:	08005ed1 	.word	0x08005ed1
 8006bf8:	08005ee5 	.word	0x08005ee5
 8006bfc:	08005f21 	.word	0x08005f21
 8006c00:	08006e75 	.word	0x08006e75
 8006c04:	08006e89 	.word	0x08006e89
 8006c08:	08006e9d 	.word	0x08006e9d
 8006c0c:	08006eb1 	.word	0x08006eb1
 8006c10:	08006ec5 	.word	0x08006ec5
 8006c14:	08006ed9 	.word	0x08006ed9
 8006c18:	08006eed 	.word	0x08006eed
 8006c1c:	08006f01 	.word	0x08006f01

08006c20 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006c20:	b480      	push	{r7}
 8006c22:	b085      	sub	sp, #20
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
 8006c28:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006c30:	2b01      	cmp	r3, #1
 8006c32:	d101      	bne.n	8006c38 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006c34:	2302      	movs	r3, #2
 8006c36:	e074      	b.n	8006d22 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2201      	movs	r2, #1
 8006c3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2202      	movs	r2, #2
 8006c44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	685b      	ldr	r3, [r3, #4]
 8006c4e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	689b      	ldr	r3, [r3, #8]
 8006c56:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	4a34      	ldr	r2, [pc, #208]	@ (8006d30 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006c5e:	4293      	cmp	r3, r2
 8006c60:	d009      	beq.n	8006c76 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	4a33      	ldr	r2, [pc, #204]	@ (8006d34 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006c68:	4293      	cmp	r3, r2
 8006c6a:	d004      	beq.n	8006c76 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	4a31      	ldr	r2, [pc, #196]	@ (8006d38 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006c72:	4293      	cmp	r3, r2
 8006c74:	d108      	bne.n	8006c88 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006c7c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006c7e:	683b      	ldr	r3, [r7, #0]
 8006c80:	685b      	ldr	r3, [r3, #4]
 8006c82:	68fa      	ldr	r2, [r7, #12]
 8006c84:	4313      	orrs	r3, r2
 8006c86:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8006c8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c92:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006c94:	683b      	ldr	r3, [r7, #0]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	68fa      	ldr	r2, [r7, #12]
 8006c9a:	4313      	orrs	r3, r2
 8006c9c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	68fa      	ldr	r2, [r7, #12]
 8006ca4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	4a21      	ldr	r2, [pc, #132]	@ (8006d30 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006cac:	4293      	cmp	r3, r2
 8006cae:	d022      	beq.n	8006cf6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006cb8:	d01d      	beq.n	8006cf6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	4a1f      	ldr	r2, [pc, #124]	@ (8006d3c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8006cc0:	4293      	cmp	r3, r2
 8006cc2:	d018      	beq.n	8006cf6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	4a1d      	ldr	r2, [pc, #116]	@ (8006d40 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8006cca:	4293      	cmp	r3, r2
 8006ccc:	d013      	beq.n	8006cf6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	4a1c      	ldr	r2, [pc, #112]	@ (8006d44 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8006cd4:	4293      	cmp	r3, r2
 8006cd6:	d00e      	beq.n	8006cf6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	4a15      	ldr	r2, [pc, #84]	@ (8006d34 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006cde:	4293      	cmp	r3, r2
 8006ce0:	d009      	beq.n	8006cf6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	4a18      	ldr	r2, [pc, #96]	@ (8006d48 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8006ce8:	4293      	cmp	r3, r2
 8006cea:	d004      	beq.n	8006cf6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	4a11      	ldr	r2, [pc, #68]	@ (8006d38 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006cf2:	4293      	cmp	r3, r2
 8006cf4:	d10c      	bne.n	8006d10 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006cf6:	68bb      	ldr	r3, [r7, #8]
 8006cf8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006cfc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006cfe:	683b      	ldr	r3, [r7, #0]
 8006d00:	689b      	ldr	r3, [r3, #8]
 8006d02:	68ba      	ldr	r2, [r7, #8]
 8006d04:	4313      	orrs	r3, r2
 8006d06:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	68ba      	ldr	r2, [r7, #8]
 8006d0e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2201      	movs	r2, #1
 8006d14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006d20:	2300      	movs	r3, #0
}
 8006d22:	4618      	mov	r0, r3
 8006d24:	3714      	adds	r7, #20
 8006d26:	46bd      	mov	sp, r7
 8006d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2c:	4770      	bx	lr
 8006d2e:	bf00      	nop
 8006d30:	40012c00 	.word	0x40012c00
 8006d34:	40013400 	.word	0x40013400
 8006d38:	40015000 	.word	0x40015000
 8006d3c:	40000400 	.word	0x40000400
 8006d40:	40000800 	.word	0x40000800
 8006d44:	40000c00 	.word	0x40000c00
 8006d48:	40014000 	.word	0x40014000

08006d4c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006d4c:	b480      	push	{r7}
 8006d4e:	b085      	sub	sp, #20
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]
 8006d54:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006d56:	2300      	movs	r3, #0
 8006d58:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006d60:	2b01      	cmp	r3, #1
 8006d62:	d101      	bne.n	8006d68 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006d64:	2302      	movs	r3, #2
 8006d66:	e078      	b.n	8006e5a <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2201      	movs	r2, #1
 8006d6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006d76:	683b      	ldr	r3, [r7, #0]
 8006d78:	68db      	ldr	r3, [r3, #12]
 8006d7a:	4313      	orrs	r3, r2
 8006d7c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006d84:	683b      	ldr	r3, [r7, #0]
 8006d86:	689b      	ldr	r3, [r3, #8]
 8006d88:	4313      	orrs	r3, r2
 8006d8a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006d92:	683b      	ldr	r3, [r7, #0]
 8006d94:	685b      	ldr	r3, [r3, #4]
 8006d96:	4313      	orrs	r3, r2
 8006d98:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006da0:	683b      	ldr	r3, [r7, #0]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	4313      	orrs	r3, r2
 8006da6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	691b      	ldr	r3, [r3, #16]
 8006db2:	4313      	orrs	r3, r2
 8006db4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006dbc:	683b      	ldr	r3, [r7, #0]
 8006dbe:	695b      	ldr	r3, [r3, #20]
 8006dc0:	4313      	orrs	r3, r2
 8006dc2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006dce:	4313      	orrs	r3, r2
 8006dd0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	699b      	ldr	r3, [r3, #24]
 8006ddc:	041b      	lsls	r3, r3, #16
 8006dde:	4313      	orrs	r3, r2
 8006de0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	69db      	ldr	r3, [r3, #28]
 8006dec:	4313      	orrs	r3, r2
 8006dee:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	4a1c      	ldr	r2, [pc, #112]	@ (8006e68 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8006df6:	4293      	cmp	r3, r2
 8006df8:	d009      	beq.n	8006e0e <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	4a1b      	ldr	r2, [pc, #108]	@ (8006e6c <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8006e00:	4293      	cmp	r3, r2
 8006e02:	d004      	beq.n	8006e0e <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	4a19      	ldr	r2, [pc, #100]	@ (8006e70 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8006e0a:	4293      	cmp	r3, r2
 8006e0c:	d11c      	bne.n	8006e48 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8006e14:	683b      	ldr	r3, [r7, #0]
 8006e16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e18:	051b      	lsls	r3, r3, #20
 8006e1a:	4313      	orrs	r3, r2
 8006e1c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8006e24:	683b      	ldr	r3, [r7, #0]
 8006e26:	6a1b      	ldr	r3, [r3, #32]
 8006e28:	4313      	orrs	r3, r2
 8006e2a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8006e32:	683b      	ldr	r3, [r7, #0]
 8006e34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e36:	4313      	orrs	r3, r2
 8006e38:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8006e40:	683b      	ldr	r3, [r7, #0]
 8006e42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e44:	4313      	orrs	r3, r2
 8006e46:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	68fa      	ldr	r2, [r7, #12]
 8006e4e:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2200      	movs	r2, #0
 8006e54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006e58:	2300      	movs	r3, #0
}
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	3714      	adds	r7, #20
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e64:	4770      	bx	lr
 8006e66:	bf00      	nop
 8006e68:	40012c00 	.word	0x40012c00
 8006e6c:	40013400 	.word	0x40013400
 8006e70:	40015000 	.word	0x40015000

08006e74 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006e74:	b480      	push	{r7}
 8006e76:	b083      	sub	sp, #12
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006e7c:	bf00      	nop
 8006e7e:	370c      	adds	r7, #12
 8006e80:	46bd      	mov	sp, r7
 8006e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e86:	4770      	bx	lr

08006e88 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8006e88:	b480      	push	{r7}
 8006e8a:	b083      	sub	sp, #12
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 8006e90:	bf00      	nop
 8006e92:	370c      	adds	r7, #12
 8006e94:	46bd      	mov	sp, r7
 8006e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9a:	4770      	bx	lr

08006e9c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006e9c:	b480      	push	{r7}
 8006e9e:	b083      	sub	sp, #12
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006ea4:	bf00      	nop
 8006ea6:	370c      	adds	r7, #12
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eae:	4770      	bx	lr

08006eb0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006eb0:	b480      	push	{r7}
 8006eb2:	b083      	sub	sp, #12
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006eb8:	bf00      	nop
 8006eba:	370c      	adds	r7, #12
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec2:	4770      	bx	lr

08006ec4 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8006ec4:	b480      	push	{r7}
 8006ec6:	b083      	sub	sp, #12
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8006ecc:	bf00      	nop
 8006ece:	370c      	adds	r7, #12
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed6:	4770      	bx	lr

08006ed8 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8006ed8:	b480      	push	{r7}
 8006eda:	b083      	sub	sp, #12
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8006ee0:	bf00      	nop
 8006ee2:	370c      	adds	r7, #12
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eea:	4770      	bx	lr

08006eec <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8006eec:	b480      	push	{r7}
 8006eee:	b083      	sub	sp, #12
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8006ef4:	bf00      	nop
 8006ef6:	370c      	adds	r7, #12
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efe:	4770      	bx	lr

08006f00 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8006f00:	b480      	push	{r7}
 8006f02:	b083      	sub	sp, #12
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8006f08:	bf00      	nop
 8006f0a:	370c      	adds	r7, #12
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f12:	4770      	bx	lr

08006f14 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006f14:	b580      	push	{r7, lr}
 8006f16:	b082      	sub	sp, #8
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d101      	bne.n	8006f26 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006f22:	2301      	movs	r3, #1
 8006f24:	e050      	b.n	8006fc8 <HAL_UART_Init+0xb4>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d114      	bne.n	8006f5a <HAL_UART_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2200      	movs	r2, #0
 8006f34:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 8006f38:	6878      	ldr	r0, [r7, #4]
 8006f3a:	f000 fe37 	bl	8007bac <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d103      	bne.n	8006f50 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	4a21      	ldr	r2, [pc, #132]	@ (8006fd0 <HAL_UART_Init+0xbc>)
 8006f4c:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8006f56:	6878      	ldr	r0, [r7, #4]
 8006f58:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	2224      	movs	r2, #36	@ 0x24
 8006f5e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	681a      	ldr	r2, [r3, #0]
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	f022 0201 	bic.w	r2, r2, #1
 8006f70:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d002      	beq.n	8006f80 <HAL_UART_Init+0x6c>
  {
    UART_AdvFeatureConfig(huart);
 8006f7a:	6878      	ldr	r0, [r7, #4]
 8006f7c:	f001 f964 	bl	8008248 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006f80:	6878      	ldr	r0, [r7, #4]
 8006f82:	f000 fe65 	bl	8007c50 <UART_SetConfig>
 8006f86:	4603      	mov	r3, r0
 8006f88:	2b01      	cmp	r3, #1
 8006f8a:	d101      	bne.n	8006f90 <HAL_UART_Init+0x7c>
  {
    return HAL_ERROR;
 8006f8c:	2301      	movs	r3, #1
 8006f8e:	e01b      	b.n	8006fc8 <HAL_UART_Init+0xb4>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	685a      	ldr	r2, [r3, #4]
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006f9e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	689a      	ldr	r2, [r3, #8]
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006fae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	681a      	ldr	r2, [r3, #0]
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	f042 0201 	orr.w	r2, r2, #1
 8006fbe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006fc0:	6878      	ldr	r0, [r7, #4]
 8006fc2:	f001 f9e3 	bl	800838c <UART_CheckIdleState>
 8006fc6:	4603      	mov	r3, r0
}
 8006fc8:	4618      	mov	r0, r3
 8006fca:	3708      	adds	r7, #8
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	bd80      	pop	{r7, pc}
 8006fd0:	08001c81 	.word	0x08001c81

08006fd4 <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 8006fd4:	b480      	push	{r7}
 8006fd6:	b087      	sub	sp, #28
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	60f8      	str	r0, [r7, #12]
 8006fdc:	460b      	mov	r3, r1
 8006fde:	607a      	str	r2, [r7, #4]
 8006fe0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d109      	bne.n	8007000 <HAL_UART_RegisterCallback+0x2c>
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ff2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    return HAL_ERROR;
 8006ffc:	2301      	movs	r3, #1
 8006ffe:	e09c      	b.n	800713a <HAL_UART_RegisterCallback+0x166>
  }

  if (huart->gState == HAL_UART_STATE_READY)
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007006:	2b20      	cmp	r3, #32
 8007008:	d16c      	bne.n	80070e4 <HAL_UART_RegisterCallback+0x110>
  {
    switch (CallbackID)
 800700a:	7afb      	ldrb	r3, [r7, #11]
 800700c:	2b0c      	cmp	r3, #12
 800700e:	d85e      	bhi.n	80070ce <HAL_UART_RegisterCallback+0xfa>
 8007010:	a201      	add	r2, pc, #4	@ (adr r2, 8007018 <HAL_UART_RegisterCallback+0x44>)
 8007012:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007016:	bf00      	nop
 8007018:	0800704d 	.word	0x0800704d
 800701c:	08007057 	.word	0x08007057
 8007020:	08007061 	.word	0x08007061
 8007024:	0800706b 	.word	0x0800706b
 8007028:	08007075 	.word	0x08007075
 800702c:	0800707f 	.word	0x0800707f
 8007030:	08007089 	.word	0x08007089
 8007034:	08007093 	.word	0x08007093
 8007038:	0800709d 	.word	0x0800709d
 800703c:	080070a7 	.word	0x080070a7
 8007040:	080070b1 	.word	0x080070b1
 8007044:	080070bb 	.word	0x080070bb
 8007048:	080070c5 	.word	0x080070c5
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	687a      	ldr	r2, [r7, #4]
 8007050:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 8007054:	e070      	b.n	8007138 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	687a      	ldr	r2, [r7, #4]
 800705a:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 800705e:	e06b      	b.n	8007138 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	687a      	ldr	r2, [r7, #4]
 8007064:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 8007068:	e066      	b.n	8007138 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	687a      	ldr	r2, [r7, #4]
 800706e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 8007072:	e061      	b.n	8007138 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	687a      	ldr	r2, [r7, #4]
 8007078:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 800707c:	e05c      	b.n	8007138 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	687a      	ldr	r2, [r7, #4]
 8007082:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 8007086:	e057      	b.n	8007138 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	687a      	ldr	r2, [r7, #4]
 800708c:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 8007090:	e052      	b.n	8007138 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	687a      	ldr	r2, [r7, #4]
 8007096:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 800709a:	e04d      	b.n	8007138 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_WAKEUP_CB_ID :
        huart->WakeupCallback = pCallback;
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	687a      	ldr	r2, [r7, #4]
 80070a0:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 80070a4:	e048      	b.n	8007138 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_FIFO_FULL_CB_ID :
        huart->RxFifoFullCallback = pCallback;
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	687a      	ldr	r2, [r7, #4]
 80070aa:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 80070ae:	e043      	b.n	8007138 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_FIFO_EMPTY_CB_ID :
        huart->TxFifoEmptyCallback = pCallback;
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	687a      	ldr	r2, [r7, #4]
 80070b4:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 80070b8:	e03e      	b.n	8007138 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	687a      	ldr	r2, [r7, #4]
 80070be:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 80070c2:	e039      	b.n	8007138 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	687a      	ldr	r2, [r7, #4]
 80070c8:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 80070cc:	e034      	b.n	8007138 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80070d4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 80070de:	2301      	movs	r3, #1
 80070e0:	75fb      	strb	r3, [r7, #23]
        break;
 80070e2:	e029      	b.n	8007138 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d11a      	bne.n	8007124 <HAL_UART_RegisterCallback+0x150>
  {
    switch (CallbackID)
 80070ee:	7afb      	ldrb	r3, [r7, #11]
 80070f0:	2b0b      	cmp	r3, #11
 80070f2:	d002      	beq.n	80070fa <HAL_UART_RegisterCallback+0x126>
 80070f4:	2b0c      	cmp	r3, #12
 80070f6:	d005      	beq.n	8007104 <HAL_UART_RegisterCallback+0x130>
 80070f8:	e009      	b.n	800710e <HAL_UART_RegisterCallback+0x13a>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	687a      	ldr	r2, [r7, #4]
 80070fe:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 8007102:	e019      	b.n	8007138 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	687a      	ldr	r2, [r7, #4]
 8007108:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 800710c:	e014      	b.n	8007138 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007114:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 800711e:	2301      	movs	r3, #1
 8007120:	75fb      	strb	r3, [r7, #23]
        break;
 8007122:	e009      	b.n	8007138 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800712a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    status =  HAL_ERROR;
 8007134:	2301      	movs	r3, #1
 8007136:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8007138:	7dfb      	ldrb	r3, [r7, #23]
}
 800713a:	4618      	mov	r0, r3
 800713c:	371c      	adds	r7, #28
 800713e:	46bd      	mov	sp, r7
 8007140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007144:	4770      	bx	lr
 8007146:	bf00      	nop

08007148 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007148:	b580      	push	{r7, lr}
 800714a:	b08a      	sub	sp, #40	@ 0x28
 800714c:	af00      	add	r7, sp, #0
 800714e:	60f8      	str	r0, [r7, #12]
 8007150:	60b9      	str	r1, [r7, #8]
 8007152:	4613      	mov	r3, r2
 8007154:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800715c:	2b20      	cmp	r3, #32
 800715e:	d137      	bne.n	80071d0 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8007160:	68bb      	ldr	r3, [r7, #8]
 8007162:	2b00      	cmp	r3, #0
 8007164:	d002      	beq.n	800716c <HAL_UART_Receive_IT+0x24>
 8007166:	88fb      	ldrh	r3, [r7, #6]
 8007168:	2b00      	cmp	r3, #0
 800716a:	d101      	bne.n	8007170 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800716c:	2301      	movs	r3, #1
 800716e:	e030      	b.n	80071d2 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	2200      	movs	r2, #0
 8007174:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	4a18      	ldr	r2, [pc, #96]	@ (80071dc <HAL_UART_Receive_IT+0x94>)
 800717c:	4293      	cmp	r3, r2
 800717e:	d01f      	beq.n	80071c0 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	685b      	ldr	r3, [r3, #4]
 8007186:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800718a:	2b00      	cmp	r3, #0
 800718c:	d018      	beq.n	80071c0 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007194:	697b      	ldr	r3, [r7, #20]
 8007196:	e853 3f00 	ldrex	r3, [r3]
 800719a:	613b      	str	r3, [r7, #16]
   return(result);
 800719c:	693b      	ldr	r3, [r7, #16]
 800719e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80071a2:	627b      	str	r3, [r7, #36]	@ 0x24
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	461a      	mov	r2, r3
 80071aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071ac:	623b      	str	r3, [r7, #32]
 80071ae:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071b0:	69f9      	ldr	r1, [r7, #28]
 80071b2:	6a3a      	ldr	r2, [r7, #32]
 80071b4:	e841 2300 	strex	r3, r2, [r1]
 80071b8:	61bb      	str	r3, [r7, #24]
   return(result);
 80071ba:	69bb      	ldr	r3, [r7, #24]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d1e6      	bne.n	800718e <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80071c0:	88fb      	ldrh	r3, [r7, #6]
 80071c2:	461a      	mov	r2, r3
 80071c4:	68b9      	ldr	r1, [r7, #8]
 80071c6:	68f8      	ldr	r0, [r7, #12]
 80071c8:	f001 f9f8 	bl	80085bc <UART_Start_Receive_IT>
 80071cc:	4603      	mov	r3, r0
 80071ce:	e000      	b.n	80071d2 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80071d0:	2302      	movs	r3, #2
  }
}
 80071d2:	4618      	mov	r0, r3
 80071d4:	3728      	adds	r7, #40	@ 0x28
 80071d6:	46bd      	mov	sp, r7
 80071d8:	bd80      	pop	{r7, pc}
 80071da:	bf00      	nop
 80071dc:	40008000 	.word	0x40008000

080071e0 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80071e0:	b580      	push	{r7, lr}
 80071e2:	b08a      	sub	sp, #40	@ 0x28
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	60f8      	str	r0, [r7, #12]
 80071e8:	60b9      	str	r1, [r7, #8]
 80071ea:	4613      	mov	r3, r2
 80071ec:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80071f4:	2b20      	cmp	r3, #32
 80071f6:	d167      	bne.n	80072c8 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 80071f8:	68bb      	ldr	r3, [r7, #8]
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d002      	beq.n	8007204 <HAL_UART_Transmit_DMA+0x24>
 80071fe:	88fb      	ldrh	r3, [r7, #6]
 8007200:	2b00      	cmp	r3, #0
 8007202:	d101      	bne.n	8007208 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8007204:	2301      	movs	r3, #1
 8007206:	e060      	b.n	80072ca <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	68ba      	ldr	r2, [r7, #8]
 800720c:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	88fa      	ldrh	r2, [r7, #6]
 8007212:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	88fa      	ldrh	r2, [r7, #6]
 800721a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	2200      	movs	r2, #0
 8007222:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	2221      	movs	r2, #33	@ 0x21
 800722a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007232:	2b00      	cmp	r3, #0
 8007234:	d028      	beq.n	8007288 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800723a:	4a26      	ldr	r2, [pc, #152]	@ (80072d4 <HAL_UART_Transmit_DMA+0xf4>)
 800723c:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007242:	4a25      	ldr	r2, [pc, #148]	@ (80072d8 <HAL_UART_Transmit_DMA+0xf8>)
 8007244:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800724a:	4a24      	ldr	r2, [pc, #144]	@ (80072dc <HAL_UART_Transmit_DMA+0xfc>)
 800724c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007252:	2200      	movs	r2, #0
 8007254:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800725e:	4619      	mov	r1, r3
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	3328      	adds	r3, #40	@ 0x28
 8007266:	461a      	mov	r2, r3
 8007268:	88fb      	ldrh	r3, [r7, #6]
 800726a:	f7fc f979 	bl	8003560 <HAL_DMA_Start_IT>
 800726e:	4603      	mov	r3, r0
 8007270:	2b00      	cmp	r3, #0
 8007272:	d009      	beq.n	8007288 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	2210      	movs	r2, #16
 8007278:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	2220      	movs	r2, #32
 8007280:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 8007284:	2301      	movs	r3, #1
 8007286:	e020      	b.n	80072ca <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	2240      	movs	r2, #64	@ 0x40
 800728e:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	3308      	adds	r3, #8
 8007296:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007298:	697b      	ldr	r3, [r7, #20]
 800729a:	e853 3f00 	ldrex	r3, [r3]
 800729e:	613b      	str	r3, [r7, #16]
   return(result);
 80072a0:	693b      	ldr	r3, [r7, #16]
 80072a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80072a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	3308      	adds	r3, #8
 80072ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80072b0:	623a      	str	r2, [r7, #32]
 80072b2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072b4:	69f9      	ldr	r1, [r7, #28]
 80072b6:	6a3a      	ldr	r2, [r7, #32]
 80072b8:	e841 2300 	strex	r3, r2, [r1]
 80072bc:	61bb      	str	r3, [r7, #24]
   return(result);
 80072be:	69bb      	ldr	r3, [r7, #24]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d1e5      	bne.n	8007290 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 80072c4:	2300      	movs	r3, #0
 80072c6:	e000      	b.n	80072ca <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 80072c8:	2302      	movs	r3, #2
  }
}
 80072ca:	4618      	mov	r0, r3
 80072cc:	3728      	adds	r7, #40	@ 0x28
 80072ce:	46bd      	mov	sp, r7
 80072d0:	bd80      	pop	{r7, pc}
 80072d2:	bf00      	nop
 80072d4:	0800894f 	.word	0x0800894f
 80072d8:	080089ed 	.word	0x080089ed
 80072dc:	08008a0d 	.word	0x08008a0d

080072e0 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 80072e0:	b580      	push	{r7, lr}
 80072e2:	b09a      	sub	sp, #104	@ 0x68
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	6078      	str	r0, [r7, #4]
  /* Disable PEIE, EIE, RXNEIE and RXFTIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80072f0:	e853 3f00 	ldrex	r3, [r3]
 80072f4:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80072f6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80072f8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80072fc:	667b      	str	r3, [r7, #100]	@ 0x64
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	461a      	mov	r2, r3
 8007304:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007306:	657b      	str	r3, [r7, #84]	@ 0x54
 8007308:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800730a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800730c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800730e:	e841 2300 	strex	r3, r2, [r1]
 8007312:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8007314:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007316:	2b00      	cmp	r3, #0
 8007318:	d1e6      	bne.n	80072e8 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE);
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	3308      	adds	r3, #8
 8007320:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007322:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007324:	e853 3f00 	ldrex	r3, [r3]
 8007328:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800732a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800732c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007330:	f023 0301 	bic.w	r3, r3, #1
 8007334:	663b      	str	r3, [r7, #96]	@ 0x60
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	3308      	adds	r3, #8
 800733c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800733e:	643a      	str	r2, [r7, #64]	@ 0x40
 8007340:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007342:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007344:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007346:	e841 2300 	strex	r3, r2, [r1]
 800734a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800734c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800734e:	2b00      	cmp	r3, #0
 8007350:	d1e3      	bne.n	800731a <HAL_UART_AbortReceive+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007356:	2b01      	cmp	r3, #1
 8007358:	d118      	bne.n	800738c <HAL_UART_AbortReceive+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007360:	6a3b      	ldr	r3, [r7, #32]
 8007362:	e853 3f00 	ldrex	r3, [r3]
 8007366:	61fb      	str	r3, [r7, #28]
   return(result);
 8007368:	69fb      	ldr	r3, [r7, #28]
 800736a:	f023 0310 	bic.w	r3, r3, #16
 800736e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	461a      	mov	r2, r3
 8007376:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007378:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800737a:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800737c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800737e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007380:	e841 2300 	strex	r3, r2, [r1]
 8007384:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007386:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007388:	2b00      	cmp	r3, #0
 800738a:	d1e6      	bne.n	800735a <HAL_UART_AbortReceive+0x7a>
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	689b      	ldr	r3, [r3, #8]
 8007392:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007396:	2b40      	cmp	r3, #64	@ 0x40
 8007398:	d13b      	bne.n	8007412 <HAL_UART_AbortReceive+0x132>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	3308      	adds	r3, #8
 80073a0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	e853 3f00 	ldrex	r3, [r3]
 80073a8:	60bb      	str	r3, [r7, #8]
   return(result);
 80073aa:	68bb      	ldr	r3, [r7, #8]
 80073ac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80073b0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	3308      	adds	r3, #8
 80073b8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80073ba:	61ba      	str	r2, [r7, #24]
 80073bc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073be:	6979      	ldr	r1, [r7, #20]
 80073c0:	69ba      	ldr	r2, [r7, #24]
 80073c2:	e841 2300 	strex	r3, r2, [r1]
 80073c6:	613b      	str	r3, [r7, #16]
   return(result);
 80073c8:	693b      	ldr	r3, [r7, #16]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d1e5      	bne.n	800739a <HAL_UART_AbortReceive+0xba>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d01c      	beq.n	8007412 <HAL_UART_AbortReceive+0x132>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80073de:	2200      	movs	r2, #0
 80073e0:	639a      	str	r2, [r3, #56]	@ 0x38

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80073e8:	4618      	mov	r0, r3
 80073ea:	f7fc f934 	bl	8003656 <HAL_DMA_Abort>
 80073ee:	4603      	mov	r3, r0
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d00e      	beq.n	8007412 <HAL_UART_AbortReceive+0x132>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80073fa:	4618      	mov	r0, r3
 80073fc:	f7fc fa9a 	bl	8003934 <HAL_DMA_GetError>
 8007400:	4603      	mov	r3, r0
 8007402:	2b20      	cmp	r3, #32
 8007404:	d105      	bne.n	8007412 <HAL_UART_AbortReceive+0x132>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	2210      	movs	r2, #16
 800740a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 800740e:	2303      	movs	r3, #3
 8007410:	e017      	b.n	8007442 <HAL_UART_AbortReceive+0x162>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0U;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	2200      	movs	r2, #0
 8007416:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	220f      	movs	r2, #15
 8007420:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	699a      	ldr	r2, [r3, #24]
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	f042 0208 	orr.w	r2, r2, #8
 8007430:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	2220      	movs	r2, #32
 8007436:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	2200      	movs	r2, #0
 800743e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return HAL_OK;
 8007440:	2300      	movs	r3, #0
}
 8007442:	4618      	mov	r0, r3
 8007444:	3768      	adds	r7, #104	@ 0x68
 8007446:	46bd      	mov	sp, r7
 8007448:	bd80      	pop	{r7, pc}
	...

0800744c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800744c:	b580      	push	{r7, lr}
 800744e:	b0ba      	sub	sp, #232	@ 0xe8
 8007450:	af00      	add	r7, sp, #0
 8007452:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	69db      	ldr	r3, [r3, #28]
 800745a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	689b      	ldr	r3, [r3, #8]
 800746e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007472:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8007476:	f640 030f 	movw	r3, #2063	@ 0x80f
 800747a:	4013      	ands	r3, r2
 800747c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8007480:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007484:	2b00      	cmp	r3, #0
 8007486:	d11b      	bne.n	80074c0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007488:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800748c:	f003 0320 	and.w	r3, r3, #32
 8007490:	2b00      	cmp	r3, #0
 8007492:	d015      	beq.n	80074c0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007494:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007498:	f003 0320 	and.w	r3, r3, #32
 800749c:	2b00      	cmp	r3, #0
 800749e:	d105      	bne.n	80074ac <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80074a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80074a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d009      	beq.n	80074c0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	f000 8312 	beq.w	8007ada <HAL_UART_IRQHandler+0x68e>
      {
        huart->RxISR(huart);
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80074ba:	6878      	ldr	r0, [r7, #4]
 80074bc:	4798      	blx	r3
      }
      return;
 80074be:	e30c      	b.n	8007ada <HAL_UART_IRQHandler+0x68e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80074c0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	f000 8129 	beq.w	800771c <HAL_UART_IRQHandler+0x2d0>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80074ca:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80074ce:	4b90      	ldr	r3, [pc, #576]	@ (8007710 <HAL_UART_IRQHandler+0x2c4>)
 80074d0:	4013      	ands	r3, r2
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d106      	bne.n	80074e4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80074d6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80074da:	4b8e      	ldr	r3, [pc, #568]	@ (8007714 <HAL_UART_IRQHandler+0x2c8>)
 80074dc:	4013      	ands	r3, r2
 80074de:	2b00      	cmp	r3, #0
 80074e0:	f000 811c 	beq.w	800771c <HAL_UART_IRQHandler+0x2d0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80074e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80074e8:	f003 0301 	and.w	r3, r3, #1
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d011      	beq.n	8007514 <HAL_UART_IRQHandler+0xc8>
 80074f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80074f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d00b      	beq.n	8007514 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	2201      	movs	r2, #1
 8007502:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800750a:	f043 0201 	orr.w	r2, r3, #1
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007514:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007518:	f003 0302 	and.w	r3, r3, #2
 800751c:	2b00      	cmp	r3, #0
 800751e:	d011      	beq.n	8007544 <HAL_UART_IRQHandler+0xf8>
 8007520:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007524:	f003 0301 	and.w	r3, r3, #1
 8007528:	2b00      	cmp	r3, #0
 800752a:	d00b      	beq.n	8007544 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	2202      	movs	r2, #2
 8007532:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800753a:	f043 0204 	orr.w	r2, r3, #4
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007544:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007548:	f003 0304 	and.w	r3, r3, #4
 800754c:	2b00      	cmp	r3, #0
 800754e:	d011      	beq.n	8007574 <HAL_UART_IRQHandler+0x128>
 8007550:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007554:	f003 0301 	and.w	r3, r3, #1
 8007558:	2b00      	cmp	r3, #0
 800755a:	d00b      	beq.n	8007574 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	2204      	movs	r2, #4
 8007562:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800756a:	f043 0202 	orr.w	r2, r3, #2
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007574:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007578:	f003 0308 	and.w	r3, r3, #8
 800757c:	2b00      	cmp	r3, #0
 800757e:	d017      	beq.n	80075b0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007580:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007584:	f003 0320 	and.w	r3, r3, #32
 8007588:	2b00      	cmp	r3, #0
 800758a:	d105      	bne.n	8007598 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800758c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8007590:	4b5f      	ldr	r3, [pc, #380]	@ (8007710 <HAL_UART_IRQHandler+0x2c4>)
 8007592:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007594:	2b00      	cmp	r3, #0
 8007596:	d00b      	beq.n	80075b0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	2208      	movs	r2, #8
 800759e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80075a6:	f043 0208 	orr.w	r2, r3, #8
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80075b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80075b4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d012      	beq.n	80075e2 <HAL_UART_IRQHandler+0x196>
 80075bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80075c0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d00c      	beq.n	80075e2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80075d0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80075d8:	f043 0220 	orr.w	r2, r3, #32
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	f000 8278 	beq.w	8007ade <HAL_UART_IRQHandler+0x692>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80075ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80075f2:	f003 0320 	and.w	r3, r3, #32
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d013      	beq.n	8007622 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80075fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80075fe:	f003 0320 	and.w	r3, r3, #32
 8007602:	2b00      	cmp	r3, #0
 8007604:	d105      	bne.n	8007612 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007606:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800760a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800760e:	2b00      	cmp	r3, #0
 8007610:	d007      	beq.n	8007622 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007616:	2b00      	cmp	r3, #0
 8007618:	d003      	beq.n	8007622 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800761e:	6878      	ldr	r0, [r7, #4]
 8007620:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007628:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	689b      	ldr	r3, [r3, #8]
 8007632:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007636:	2b40      	cmp	r3, #64	@ 0x40
 8007638:	d005      	beq.n	8007646 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800763a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800763e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007642:	2b00      	cmp	r3, #0
 8007644:	d058      	beq.n	80076f8 <HAL_UART_IRQHandler+0x2ac>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007646:	6878      	ldr	r0, [r7, #4]
 8007648:	f001 f91b 	bl	8008882 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	689b      	ldr	r3, [r3, #8]
 8007652:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007656:	2b40      	cmp	r3, #64	@ 0x40
 8007658:	d148      	bne.n	80076ec <HAL_UART_IRQHandler+0x2a0>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	3308      	adds	r3, #8
 8007660:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007664:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007668:	e853 3f00 	ldrex	r3, [r3]
 800766c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007670:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007674:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007678:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	3308      	adds	r3, #8
 8007682:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007686:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800768a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800768e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007692:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007696:	e841 2300 	strex	r3, r2, [r1]
 800769a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800769e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d1d9      	bne.n	800765a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d017      	beq.n	80076e0 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80076b6:	4a18      	ldr	r2, [pc, #96]	@ (8007718 <HAL_UART_IRQHandler+0x2cc>)
 80076b8:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80076c0:	4618      	mov	r0, r3
 80076c2:	f7fc f821 	bl	8003708 <HAL_DMA_Abort_IT>
 80076c6:	4603      	mov	r3, r0
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d01f      	beq.n	800770c <HAL_UART_IRQHandler+0x2c0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80076d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076d4:	687a      	ldr	r2, [r7, #4]
 80076d6:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80076da:	4610      	mov	r0, r2
 80076dc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80076de:	e015      	b.n	800770c <HAL_UART_IRQHandler+0x2c0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80076e6:	6878      	ldr	r0, [r7, #4]
 80076e8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80076ea:	e00f      	b.n	800770c <HAL_UART_IRQHandler+0x2c0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80076f2:	6878      	ldr	r0, [r7, #4]
 80076f4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80076f6:	e009      	b.n	800770c <HAL_UART_IRQHandler+0x2c0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80076fe:	6878      	ldr	r0, [r7, #4]
 8007700:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	2200      	movs	r2, #0
 8007706:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800770a:	e1e8      	b.n	8007ade <HAL_UART_IRQHandler+0x692>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800770c:	bf00      	nop
    return;
 800770e:	e1e6      	b.n	8007ade <HAL_UART_IRQHandler+0x692>
 8007710:	10000001 	.word	0x10000001
 8007714:	04000120 	.word	0x04000120
 8007718:	08008a91 	.word	0x08008a91

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007720:	2b01      	cmp	r3, #1
 8007722:	f040 8176 	bne.w	8007a12 <HAL_UART_IRQHandler+0x5c6>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007726:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800772a:	f003 0310 	and.w	r3, r3, #16
 800772e:	2b00      	cmp	r3, #0
 8007730:	f000 816f 	beq.w	8007a12 <HAL_UART_IRQHandler+0x5c6>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007734:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007738:	f003 0310 	and.w	r3, r3, #16
 800773c:	2b00      	cmp	r3, #0
 800773e:	f000 8168 	beq.w	8007a12 <HAL_UART_IRQHandler+0x5c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	2210      	movs	r2, #16
 8007748:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	689b      	ldr	r3, [r3, #8]
 8007750:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007754:	2b40      	cmp	r3, #64	@ 0x40
 8007756:	f040 80dc 	bne.w	8007912 <HAL_UART_IRQHandler+0x4c6>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	685b      	ldr	r3, [r3, #4]
 8007764:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007768:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800776c:	2b00      	cmp	r3, #0
 800776e:	f000 80b1 	beq.w	80078d4 <HAL_UART_IRQHandler+0x488>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007778:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800777c:	429a      	cmp	r2, r3
 800777e:	f080 80a9 	bcs.w	80078d4 <HAL_UART_IRQHandler+0x488>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007788:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	f003 0320 	and.w	r3, r3, #32
 800779a:	2b00      	cmp	r3, #0
 800779c:	f040 8087 	bne.w	80078ae <HAL_UART_IRQHandler+0x462>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077a8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80077ac:	e853 3f00 	ldrex	r3, [r3]
 80077b0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80077b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80077b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80077bc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	461a      	mov	r2, r3
 80077c6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80077ca:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80077ce:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077d2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80077d6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80077da:	e841 2300 	strex	r3, r2, [r1]
 80077de:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80077e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d1da      	bne.n	80077a0 <HAL_UART_IRQHandler+0x354>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	3308      	adds	r3, #8
 80077f0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077f2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80077f4:	e853 3f00 	ldrex	r3, [r3]
 80077f8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80077fa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80077fc:	f023 0301 	bic.w	r3, r3, #1
 8007800:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	3308      	adds	r3, #8
 800780a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800780e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007812:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007814:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007816:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800781a:	e841 2300 	strex	r3, r2, [r1]
 800781e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007820:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007822:	2b00      	cmp	r3, #0
 8007824:	d1e1      	bne.n	80077ea <HAL_UART_IRQHandler+0x39e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	3308      	adds	r3, #8
 800782c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800782e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007830:	e853 3f00 	ldrex	r3, [r3]
 8007834:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007836:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007838:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800783c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	3308      	adds	r3, #8
 8007846:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800784a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800784c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800784e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007850:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007852:	e841 2300 	strex	r3, r2, [r1]
 8007856:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007858:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800785a:	2b00      	cmp	r3, #0
 800785c:	d1e3      	bne.n	8007826 <HAL_UART_IRQHandler+0x3da>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	2220      	movs	r2, #32
 8007862:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	2200      	movs	r2, #0
 800786a:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007872:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007874:	e853 3f00 	ldrex	r3, [r3]
 8007878:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800787a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800787c:	f023 0310 	bic.w	r3, r3, #16
 8007880:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	461a      	mov	r2, r3
 800788a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800788e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007890:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007892:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007894:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007896:	e841 2300 	strex	r3, r2, [r1]
 800789a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800789c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d1e4      	bne.n	800786c <HAL_UART_IRQHandler+0x420>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80078a8:	4618      	mov	r0, r3
 80078aa:	f7fb fed4 	bl	8003656 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	2202      	movs	r2, #2
 80078b2:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80078ba:	687a      	ldr	r2, [r7, #4]
 80078bc:	f8b2 105c 	ldrh.w	r1, [r2, #92]	@ 0x5c
 80078c0:	687a      	ldr	r2, [r7, #4]
 80078c2:	f8b2 205e 	ldrh.w	r2, [r2, #94]	@ 0x5e
 80078c6:	b292      	uxth	r2, r2
 80078c8:	1a8a      	subs	r2, r1, r2
 80078ca:	b292      	uxth	r2, r2
 80078cc:	4611      	mov	r1, r2
 80078ce:	6878      	ldr	r0, [r7, #4]
 80078d0:	4798      	blx	r3
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80078d2:	e106      	b.n	8007ae2 <HAL_UART_IRQHandler+0x696>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80078da:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80078de:	429a      	cmp	r2, r3
 80078e0:	f040 80ff 	bne.w	8007ae2 <HAL_UART_IRQHandler+0x696>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	f003 0320 	and.w	r3, r3, #32
 80078f2:	2b20      	cmp	r3, #32
 80078f4:	f040 80f5 	bne.w	8007ae2 <HAL_UART_IRQHandler+0x696>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	2202      	movs	r2, #2
 80078fc:	671a      	str	r2, [r3, #112]	@ 0x70
            huart->RxEventCallback(huart, huart->RxXferSize);
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8007904:	687a      	ldr	r2, [r7, #4]
 8007906:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800790a:	4611      	mov	r1, r2
 800790c:	6878      	ldr	r0, [r7, #4]
 800790e:	4798      	blx	r3
      return;
 8007910:	e0e7      	b.n	8007ae2 <HAL_UART_IRQHandler+0x696>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800791e:	b29b      	uxth	r3, r3
 8007920:	1ad3      	subs	r3, r2, r3
 8007922:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800792c:	b29b      	uxth	r3, r3
 800792e:	2b00      	cmp	r3, #0
 8007930:	f000 80d9 	beq.w	8007ae6 <HAL_UART_IRQHandler+0x69a>
          && (nb_rx_data > 0U))
 8007934:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007938:	2b00      	cmp	r3, #0
 800793a:	f000 80d4 	beq.w	8007ae6 <HAL_UART_IRQHandler+0x69a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007944:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007946:	e853 3f00 	ldrex	r3, [r3]
 800794a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800794c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800794e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007952:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	461a      	mov	r2, r3
 800795c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007960:	647b      	str	r3, [r7, #68]	@ 0x44
 8007962:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007964:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007966:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007968:	e841 2300 	strex	r3, r2, [r1]
 800796c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800796e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007970:	2b00      	cmp	r3, #0
 8007972:	d1e4      	bne.n	800793e <HAL_UART_IRQHandler+0x4f2>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	3308      	adds	r3, #8
 800797a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800797c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800797e:	e853 3f00 	ldrex	r3, [r3]
 8007982:	623b      	str	r3, [r7, #32]
   return(result);
 8007984:	6a3b      	ldr	r3, [r7, #32]
 8007986:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800798a:	f023 0301 	bic.w	r3, r3, #1
 800798e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	3308      	adds	r3, #8
 8007998:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800799c:	633a      	str	r2, [r7, #48]	@ 0x30
 800799e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079a0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80079a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80079a4:	e841 2300 	strex	r3, r2, [r1]
 80079a8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80079aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d1e1      	bne.n	8007974 <HAL_UART_IRQHandler+0x528>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	2220      	movs	r2, #32
 80079b4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	2200      	movs	r2, #0
 80079bc:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	2200      	movs	r2, #0
 80079c2:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079ca:	693b      	ldr	r3, [r7, #16]
 80079cc:	e853 3f00 	ldrex	r3, [r3]
 80079d0:	60fb      	str	r3, [r7, #12]
   return(result);
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	f023 0310 	bic.w	r3, r3, #16
 80079d8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	461a      	mov	r2, r3
 80079e2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80079e6:	61fb      	str	r3, [r7, #28]
 80079e8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079ea:	69b9      	ldr	r1, [r7, #24]
 80079ec:	69fa      	ldr	r2, [r7, #28]
 80079ee:	e841 2300 	strex	r3, r2, [r1]
 80079f2:	617b      	str	r3, [r7, #20]
   return(result);
 80079f4:	697b      	ldr	r3, [r7, #20]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d1e4      	bne.n	80079c4 <HAL_UART_IRQHandler+0x578>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	2202      	movs	r2, #2
 80079fe:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8007a06:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	@ 0xce
 8007a0a:	4611      	mov	r1, r2
 8007a0c:	6878      	ldr	r0, [r7, #4]
 8007a0e:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007a10:	e069      	b.n	8007ae6 <HAL_UART_IRQHandler+0x69a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007a12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007a16:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d010      	beq.n	8007a40 <HAL_UART_IRQHandler+0x5f4>
 8007a1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007a22:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d00a      	beq.n	8007a40 <HAL_UART_IRQHandler+0x5f4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8007a32:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007a3a:	6878      	ldr	r0, [r7, #4]
 8007a3c:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007a3e:	e055      	b.n	8007aec <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007a40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007a44:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d014      	beq.n	8007a76 <HAL_UART_IRQHandler+0x62a>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007a4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007a50:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d105      	bne.n	8007a64 <HAL_UART_IRQHandler+0x618>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007a58:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007a5c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d008      	beq.n	8007a76 <HAL_UART_IRQHandler+0x62a>
  {
    if (huart->TxISR != NULL)
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d03e      	beq.n	8007aea <HAL_UART_IRQHandler+0x69e>
    {
      huart->TxISR(huart);
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007a70:	6878      	ldr	r0, [r7, #4]
 8007a72:	4798      	blx	r3
    }
    return;
 8007a74:	e039      	b.n	8007aea <HAL_UART_IRQHandler+0x69e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007a76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007a7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d009      	beq.n	8007a96 <HAL_UART_IRQHandler+0x64a>
 8007a82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007a86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d003      	beq.n	8007a96 <HAL_UART_IRQHandler+0x64a>
  {
    UART_EndTransmit_IT(huart);
 8007a8e:	6878      	ldr	r0, [r7, #4]
 8007a90:	f001 f812 	bl	8008ab8 <UART_EndTransmit_IT>
    return;
 8007a94:	e02a      	b.n	8007aec <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007a96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007a9a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d00b      	beq.n	8007aba <HAL_UART_IRQHandler+0x66e>
 8007aa2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007aa6:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d005      	beq.n	8007aba <HAL_UART_IRQHandler+0x66e>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8007ab4:	6878      	ldr	r0, [r7, #4]
 8007ab6:	4798      	blx	r3
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007ab8:	e018      	b.n	8007aec <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007aba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007abe:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d012      	beq.n	8007aec <HAL_UART_IRQHandler+0x6a0>
 8007ac6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	da0e      	bge.n	8007aec <HAL_UART_IRQHandler+0x6a0>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8007ad4:	6878      	ldr	r0, [r7, #4]
 8007ad6:	4798      	blx	r3
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007ad8:	e008      	b.n	8007aec <HAL_UART_IRQHandler+0x6a0>
      return;
 8007ada:	bf00      	nop
 8007adc:	e006      	b.n	8007aec <HAL_UART_IRQHandler+0x6a0>
    return;
 8007ade:	bf00      	nop
 8007ae0:	e004      	b.n	8007aec <HAL_UART_IRQHandler+0x6a0>
      return;
 8007ae2:	bf00      	nop
 8007ae4:	e002      	b.n	8007aec <HAL_UART_IRQHandler+0x6a0>
      return;
 8007ae6:	bf00      	nop
 8007ae8:	e000      	b.n	8007aec <HAL_UART_IRQHandler+0x6a0>
    return;
 8007aea:	bf00      	nop
  }
}
 8007aec:	37e8      	adds	r7, #232	@ 0xe8
 8007aee:	46bd      	mov	sp, r7
 8007af0:	bd80      	pop	{r7, pc}
 8007af2:	bf00      	nop

08007af4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007af4:	b480      	push	{r7}
 8007af6:	b083      	sub	sp, #12
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007afc:	bf00      	nop
 8007afe:	370c      	adds	r7, #12
 8007b00:	46bd      	mov	sp, r7
 8007b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b06:	4770      	bx	lr

08007b08 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007b08:	b480      	push	{r7}
 8007b0a:	b083      	sub	sp, #12
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8007b10:	bf00      	nop
 8007b12:	370c      	adds	r7, #12
 8007b14:	46bd      	mov	sp, r7
 8007b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1a:	4770      	bx	lr

08007b1c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007b1c:	b480      	push	{r7}
 8007b1e:	b083      	sub	sp, #12
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8007b24:	bf00      	nop
 8007b26:	370c      	adds	r7, #12
 8007b28:	46bd      	mov	sp, r7
 8007b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2e:	4770      	bx	lr

08007b30 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007b30:	b480      	push	{r7}
 8007b32:	b083      	sub	sp, #12
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8007b38:	bf00      	nop
 8007b3a:	370c      	adds	r7, #12
 8007b3c:	46bd      	mov	sp, r7
 8007b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b42:	4770      	bx	lr

08007b44 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007b44:	b480      	push	{r7}
 8007b46:	b083      	sub	sp, #12
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007b4c:	bf00      	nop
 8007b4e:	370c      	adds	r7, #12
 8007b50:	46bd      	mov	sp, r7
 8007b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b56:	4770      	bx	lr

08007b58 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8007b58:	b480      	push	{r7}
 8007b5a:	b083      	sub	sp, #12
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8007b60:	bf00      	nop
 8007b62:	370c      	adds	r7, #12
 8007b64:	46bd      	mov	sp, r7
 8007b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6a:	4770      	bx	lr

08007b6c <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8007b6c:	b480      	push	{r7}
 8007b6e:	b083      	sub	sp, #12
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8007b74:	bf00      	nop
 8007b76:	370c      	adds	r7, #12
 8007b78:	46bd      	mov	sp, r7
 8007b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b7e:	4770      	bx	lr

08007b80 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8007b80:	b480      	push	{r7}
 8007b82:	b083      	sub	sp, #12
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8007b88:	bf00      	nop
 8007b8a:	370c      	adds	r7, #12
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b92:	4770      	bx	lr

08007b94 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007b94:	b480      	push	{r7}
 8007b96:	b083      	sub	sp, #12
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	6078      	str	r0, [r7, #4]
 8007b9c:	460b      	mov	r3, r1
 8007b9e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007ba0:	bf00      	nop
 8007ba2:	370c      	adds	r7, #12
 8007ba4:	46bd      	mov	sp, r7
 8007ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007baa:	4770      	bx	lr

08007bac <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8007bac:	b480      	push	{r7}
 8007bae:	b083      	sub	sp, #12
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	4a1a      	ldr	r2, [pc, #104]	@ (8007c20 <UART_InitCallbacksToDefault+0x74>)
 8007bb8:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	4a19      	ldr	r2, [pc, #100]	@ (8007c24 <UART_InitCallbacksToDefault+0x78>)
 8007bc0:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	4a18      	ldr	r2, [pc, #96]	@ (8007c28 <UART_InitCallbacksToDefault+0x7c>)
 8007bc8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	4a17      	ldr	r2, [pc, #92]	@ (8007c2c <UART_InitCallbacksToDefault+0x80>)
 8007bd0:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	4a16      	ldr	r2, [pc, #88]	@ (8007c30 <UART_InitCallbacksToDefault+0x84>)
 8007bd8:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	4a15      	ldr	r2, [pc, #84]	@ (8007c34 <UART_InitCallbacksToDefault+0x88>)
 8007be0:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	4a14      	ldr	r2, [pc, #80]	@ (8007c38 <UART_InitCallbacksToDefault+0x8c>)
 8007be8:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	4a13      	ldr	r2, [pc, #76]	@ (8007c3c <UART_InitCallbacksToDefault+0x90>)
 8007bf0:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	4a12      	ldr	r2, [pc, #72]	@ (8007c40 <UART_InitCallbacksToDefault+0x94>)
 8007bf8:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	4a11      	ldr	r2, [pc, #68]	@ (8007c44 <UART_InitCallbacksToDefault+0x98>)
 8007c00:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	4a10      	ldr	r2, [pc, #64]	@ (8007c48 <UART_InitCallbacksToDefault+0x9c>)
 8007c08:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	4a0f      	ldr	r2, [pc, #60]	@ (8007c4c <UART_InitCallbacksToDefault+0xa0>)
 8007c10:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

}
 8007c14:	bf00      	nop
 8007c16:	370c      	adds	r7, #12
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1e:	4770      	bx	lr
 8007c20:	08007b09 	.word	0x08007b09
 8007c24:	08007af5 	.word	0x08007af5
 8007c28:	08007b31 	.word	0x08007b31
 8007c2c:	08007b1d 	.word	0x08007b1d
 8007c30:	08007b45 	.word	0x08007b45
 8007c34:	08007b59 	.word	0x08007b59
 8007c38:	08007b6d 	.word	0x08007b6d
 8007c3c:	08007b81 	.word	0x08007b81
 8007c40:	0800957d 	.word	0x0800957d
 8007c44:	08009591 	.word	0x08009591
 8007c48:	080095a5 	.word	0x080095a5
 8007c4c:	08007b95 	.word	0x08007b95

08007c50 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007c50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007c54:	b08c      	sub	sp, #48	@ 0x30
 8007c56:	af00      	add	r7, sp, #0
 8007c58:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007c5a:	2300      	movs	r3, #0
 8007c5c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007c60:	697b      	ldr	r3, [r7, #20]
 8007c62:	689a      	ldr	r2, [r3, #8]
 8007c64:	697b      	ldr	r3, [r7, #20]
 8007c66:	691b      	ldr	r3, [r3, #16]
 8007c68:	431a      	orrs	r2, r3
 8007c6a:	697b      	ldr	r3, [r7, #20]
 8007c6c:	695b      	ldr	r3, [r3, #20]
 8007c6e:	431a      	orrs	r2, r3
 8007c70:	697b      	ldr	r3, [r7, #20]
 8007c72:	69db      	ldr	r3, [r3, #28]
 8007c74:	4313      	orrs	r3, r2
 8007c76:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007c78:	697b      	ldr	r3, [r7, #20]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	681a      	ldr	r2, [r3, #0]
 8007c7e:	4baa      	ldr	r3, [pc, #680]	@ (8007f28 <UART_SetConfig+0x2d8>)
 8007c80:	4013      	ands	r3, r2
 8007c82:	697a      	ldr	r2, [r7, #20]
 8007c84:	6812      	ldr	r2, [r2, #0]
 8007c86:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007c88:	430b      	orrs	r3, r1
 8007c8a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007c8c:	697b      	ldr	r3, [r7, #20]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	685b      	ldr	r3, [r3, #4]
 8007c92:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007c96:	697b      	ldr	r3, [r7, #20]
 8007c98:	68da      	ldr	r2, [r3, #12]
 8007c9a:	697b      	ldr	r3, [r7, #20]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	430a      	orrs	r2, r1
 8007ca0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007ca2:	697b      	ldr	r3, [r7, #20]
 8007ca4:	699b      	ldr	r3, [r3, #24]
 8007ca6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007ca8:	697b      	ldr	r3, [r7, #20]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	4a9f      	ldr	r2, [pc, #636]	@ (8007f2c <UART_SetConfig+0x2dc>)
 8007cae:	4293      	cmp	r3, r2
 8007cb0:	d004      	beq.n	8007cbc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007cb2:	697b      	ldr	r3, [r7, #20]
 8007cb4:	6a1b      	ldr	r3, [r3, #32]
 8007cb6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007cb8:	4313      	orrs	r3, r2
 8007cba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007cbc:	697b      	ldr	r3, [r7, #20]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	689b      	ldr	r3, [r3, #8]
 8007cc2:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8007cc6:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8007cca:	697a      	ldr	r2, [r7, #20]
 8007ccc:	6812      	ldr	r2, [r2, #0]
 8007cce:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007cd0:	430b      	orrs	r3, r1
 8007cd2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007cd4:	697b      	ldr	r3, [r7, #20]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cda:	f023 010f 	bic.w	r1, r3, #15
 8007cde:	697b      	ldr	r3, [r7, #20]
 8007ce0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007ce2:	697b      	ldr	r3, [r7, #20]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	430a      	orrs	r2, r1
 8007ce8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007cea:	697b      	ldr	r3, [r7, #20]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	4a90      	ldr	r2, [pc, #576]	@ (8007f30 <UART_SetConfig+0x2e0>)
 8007cf0:	4293      	cmp	r3, r2
 8007cf2:	d125      	bne.n	8007d40 <UART_SetConfig+0xf0>
 8007cf4:	4b8f      	ldr	r3, [pc, #572]	@ (8007f34 <UART_SetConfig+0x2e4>)
 8007cf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007cfa:	f003 0303 	and.w	r3, r3, #3
 8007cfe:	2b03      	cmp	r3, #3
 8007d00:	d81a      	bhi.n	8007d38 <UART_SetConfig+0xe8>
 8007d02:	a201      	add	r2, pc, #4	@ (adr r2, 8007d08 <UART_SetConfig+0xb8>)
 8007d04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d08:	08007d19 	.word	0x08007d19
 8007d0c:	08007d29 	.word	0x08007d29
 8007d10:	08007d21 	.word	0x08007d21
 8007d14:	08007d31 	.word	0x08007d31
 8007d18:	2301      	movs	r3, #1
 8007d1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007d1e:	e116      	b.n	8007f4e <UART_SetConfig+0x2fe>
 8007d20:	2302      	movs	r3, #2
 8007d22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007d26:	e112      	b.n	8007f4e <UART_SetConfig+0x2fe>
 8007d28:	2304      	movs	r3, #4
 8007d2a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007d2e:	e10e      	b.n	8007f4e <UART_SetConfig+0x2fe>
 8007d30:	2308      	movs	r3, #8
 8007d32:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007d36:	e10a      	b.n	8007f4e <UART_SetConfig+0x2fe>
 8007d38:	2310      	movs	r3, #16
 8007d3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007d3e:	e106      	b.n	8007f4e <UART_SetConfig+0x2fe>
 8007d40:	697b      	ldr	r3, [r7, #20]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	4a7c      	ldr	r2, [pc, #496]	@ (8007f38 <UART_SetConfig+0x2e8>)
 8007d46:	4293      	cmp	r3, r2
 8007d48:	d138      	bne.n	8007dbc <UART_SetConfig+0x16c>
 8007d4a:	4b7a      	ldr	r3, [pc, #488]	@ (8007f34 <UART_SetConfig+0x2e4>)
 8007d4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d50:	f003 030c 	and.w	r3, r3, #12
 8007d54:	2b0c      	cmp	r3, #12
 8007d56:	d82d      	bhi.n	8007db4 <UART_SetConfig+0x164>
 8007d58:	a201      	add	r2, pc, #4	@ (adr r2, 8007d60 <UART_SetConfig+0x110>)
 8007d5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d5e:	bf00      	nop
 8007d60:	08007d95 	.word	0x08007d95
 8007d64:	08007db5 	.word	0x08007db5
 8007d68:	08007db5 	.word	0x08007db5
 8007d6c:	08007db5 	.word	0x08007db5
 8007d70:	08007da5 	.word	0x08007da5
 8007d74:	08007db5 	.word	0x08007db5
 8007d78:	08007db5 	.word	0x08007db5
 8007d7c:	08007db5 	.word	0x08007db5
 8007d80:	08007d9d 	.word	0x08007d9d
 8007d84:	08007db5 	.word	0x08007db5
 8007d88:	08007db5 	.word	0x08007db5
 8007d8c:	08007db5 	.word	0x08007db5
 8007d90:	08007dad 	.word	0x08007dad
 8007d94:	2300      	movs	r3, #0
 8007d96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007d9a:	e0d8      	b.n	8007f4e <UART_SetConfig+0x2fe>
 8007d9c:	2302      	movs	r3, #2
 8007d9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007da2:	e0d4      	b.n	8007f4e <UART_SetConfig+0x2fe>
 8007da4:	2304      	movs	r3, #4
 8007da6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007daa:	e0d0      	b.n	8007f4e <UART_SetConfig+0x2fe>
 8007dac:	2308      	movs	r3, #8
 8007dae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007db2:	e0cc      	b.n	8007f4e <UART_SetConfig+0x2fe>
 8007db4:	2310      	movs	r3, #16
 8007db6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007dba:	e0c8      	b.n	8007f4e <UART_SetConfig+0x2fe>
 8007dbc:	697b      	ldr	r3, [r7, #20]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	4a5e      	ldr	r2, [pc, #376]	@ (8007f3c <UART_SetConfig+0x2ec>)
 8007dc2:	4293      	cmp	r3, r2
 8007dc4:	d125      	bne.n	8007e12 <UART_SetConfig+0x1c2>
 8007dc6:	4b5b      	ldr	r3, [pc, #364]	@ (8007f34 <UART_SetConfig+0x2e4>)
 8007dc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007dcc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007dd0:	2b30      	cmp	r3, #48	@ 0x30
 8007dd2:	d016      	beq.n	8007e02 <UART_SetConfig+0x1b2>
 8007dd4:	2b30      	cmp	r3, #48	@ 0x30
 8007dd6:	d818      	bhi.n	8007e0a <UART_SetConfig+0x1ba>
 8007dd8:	2b20      	cmp	r3, #32
 8007dda:	d00a      	beq.n	8007df2 <UART_SetConfig+0x1a2>
 8007ddc:	2b20      	cmp	r3, #32
 8007dde:	d814      	bhi.n	8007e0a <UART_SetConfig+0x1ba>
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d002      	beq.n	8007dea <UART_SetConfig+0x19a>
 8007de4:	2b10      	cmp	r3, #16
 8007de6:	d008      	beq.n	8007dfa <UART_SetConfig+0x1aa>
 8007de8:	e00f      	b.n	8007e0a <UART_SetConfig+0x1ba>
 8007dea:	2300      	movs	r3, #0
 8007dec:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007df0:	e0ad      	b.n	8007f4e <UART_SetConfig+0x2fe>
 8007df2:	2302      	movs	r3, #2
 8007df4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007df8:	e0a9      	b.n	8007f4e <UART_SetConfig+0x2fe>
 8007dfa:	2304      	movs	r3, #4
 8007dfc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007e00:	e0a5      	b.n	8007f4e <UART_SetConfig+0x2fe>
 8007e02:	2308      	movs	r3, #8
 8007e04:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007e08:	e0a1      	b.n	8007f4e <UART_SetConfig+0x2fe>
 8007e0a:	2310      	movs	r3, #16
 8007e0c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007e10:	e09d      	b.n	8007f4e <UART_SetConfig+0x2fe>
 8007e12:	697b      	ldr	r3, [r7, #20]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	4a4a      	ldr	r2, [pc, #296]	@ (8007f40 <UART_SetConfig+0x2f0>)
 8007e18:	4293      	cmp	r3, r2
 8007e1a:	d125      	bne.n	8007e68 <UART_SetConfig+0x218>
 8007e1c:	4b45      	ldr	r3, [pc, #276]	@ (8007f34 <UART_SetConfig+0x2e4>)
 8007e1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007e22:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007e26:	2bc0      	cmp	r3, #192	@ 0xc0
 8007e28:	d016      	beq.n	8007e58 <UART_SetConfig+0x208>
 8007e2a:	2bc0      	cmp	r3, #192	@ 0xc0
 8007e2c:	d818      	bhi.n	8007e60 <UART_SetConfig+0x210>
 8007e2e:	2b80      	cmp	r3, #128	@ 0x80
 8007e30:	d00a      	beq.n	8007e48 <UART_SetConfig+0x1f8>
 8007e32:	2b80      	cmp	r3, #128	@ 0x80
 8007e34:	d814      	bhi.n	8007e60 <UART_SetConfig+0x210>
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d002      	beq.n	8007e40 <UART_SetConfig+0x1f0>
 8007e3a:	2b40      	cmp	r3, #64	@ 0x40
 8007e3c:	d008      	beq.n	8007e50 <UART_SetConfig+0x200>
 8007e3e:	e00f      	b.n	8007e60 <UART_SetConfig+0x210>
 8007e40:	2300      	movs	r3, #0
 8007e42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007e46:	e082      	b.n	8007f4e <UART_SetConfig+0x2fe>
 8007e48:	2302      	movs	r3, #2
 8007e4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007e4e:	e07e      	b.n	8007f4e <UART_SetConfig+0x2fe>
 8007e50:	2304      	movs	r3, #4
 8007e52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007e56:	e07a      	b.n	8007f4e <UART_SetConfig+0x2fe>
 8007e58:	2308      	movs	r3, #8
 8007e5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007e5e:	e076      	b.n	8007f4e <UART_SetConfig+0x2fe>
 8007e60:	2310      	movs	r3, #16
 8007e62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007e66:	e072      	b.n	8007f4e <UART_SetConfig+0x2fe>
 8007e68:	697b      	ldr	r3, [r7, #20]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	4a35      	ldr	r2, [pc, #212]	@ (8007f44 <UART_SetConfig+0x2f4>)
 8007e6e:	4293      	cmp	r3, r2
 8007e70:	d12a      	bne.n	8007ec8 <UART_SetConfig+0x278>
 8007e72:	4b30      	ldr	r3, [pc, #192]	@ (8007f34 <UART_SetConfig+0x2e4>)
 8007e74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007e78:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007e7c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007e80:	d01a      	beq.n	8007eb8 <UART_SetConfig+0x268>
 8007e82:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007e86:	d81b      	bhi.n	8007ec0 <UART_SetConfig+0x270>
 8007e88:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007e8c:	d00c      	beq.n	8007ea8 <UART_SetConfig+0x258>
 8007e8e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007e92:	d815      	bhi.n	8007ec0 <UART_SetConfig+0x270>
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d003      	beq.n	8007ea0 <UART_SetConfig+0x250>
 8007e98:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007e9c:	d008      	beq.n	8007eb0 <UART_SetConfig+0x260>
 8007e9e:	e00f      	b.n	8007ec0 <UART_SetConfig+0x270>
 8007ea0:	2300      	movs	r3, #0
 8007ea2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007ea6:	e052      	b.n	8007f4e <UART_SetConfig+0x2fe>
 8007ea8:	2302      	movs	r3, #2
 8007eaa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007eae:	e04e      	b.n	8007f4e <UART_SetConfig+0x2fe>
 8007eb0:	2304      	movs	r3, #4
 8007eb2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007eb6:	e04a      	b.n	8007f4e <UART_SetConfig+0x2fe>
 8007eb8:	2308      	movs	r3, #8
 8007eba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007ebe:	e046      	b.n	8007f4e <UART_SetConfig+0x2fe>
 8007ec0:	2310      	movs	r3, #16
 8007ec2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007ec6:	e042      	b.n	8007f4e <UART_SetConfig+0x2fe>
 8007ec8:	697b      	ldr	r3, [r7, #20]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	4a17      	ldr	r2, [pc, #92]	@ (8007f2c <UART_SetConfig+0x2dc>)
 8007ece:	4293      	cmp	r3, r2
 8007ed0:	d13a      	bne.n	8007f48 <UART_SetConfig+0x2f8>
 8007ed2:	4b18      	ldr	r3, [pc, #96]	@ (8007f34 <UART_SetConfig+0x2e4>)
 8007ed4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007ed8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007edc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007ee0:	d01a      	beq.n	8007f18 <UART_SetConfig+0x2c8>
 8007ee2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007ee6:	d81b      	bhi.n	8007f20 <UART_SetConfig+0x2d0>
 8007ee8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007eec:	d00c      	beq.n	8007f08 <UART_SetConfig+0x2b8>
 8007eee:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007ef2:	d815      	bhi.n	8007f20 <UART_SetConfig+0x2d0>
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d003      	beq.n	8007f00 <UART_SetConfig+0x2b0>
 8007ef8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007efc:	d008      	beq.n	8007f10 <UART_SetConfig+0x2c0>
 8007efe:	e00f      	b.n	8007f20 <UART_SetConfig+0x2d0>
 8007f00:	2300      	movs	r3, #0
 8007f02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007f06:	e022      	b.n	8007f4e <UART_SetConfig+0x2fe>
 8007f08:	2302      	movs	r3, #2
 8007f0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007f0e:	e01e      	b.n	8007f4e <UART_SetConfig+0x2fe>
 8007f10:	2304      	movs	r3, #4
 8007f12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007f16:	e01a      	b.n	8007f4e <UART_SetConfig+0x2fe>
 8007f18:	2308      	movs	r3, #8
 8007f1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007f1e:	e016      	b.n	8007f4e <UART_SetConfig+0x2fe>
 8007f20:	2310      	movs	r3, #16
 8007f22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007f26:	e012      	b.n	8007f4e <UART_SetConfig+0x2fe>
 8007f28:	cfff69f3 	.word	0xcfff69f3
 8007f2c:	40008000 	.word	0x40008000
 8007f30:	40013800 	.word	0x40013800
 8007f34:	40021000 	.word	0x40021000
 8007f38:	40004400 	.word	0x40004400
 8007f3c:	40004800 	.word	0x40004800
 8007f40:	40004c00 	.word	0x40004c00
 8007f44:	40005000 	.word	0x40005000
 8007f48:	2310      	movs	r3, #16
 8007f4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007f4e:	697b      	ldr	r3, [r7, #20]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	4aae      	ldr	r2, [pc, #696]	@ (800820c <UART_SetConfig+0x5bc>)
 8007f54:	4293      	cmp	r3, r2
 8007f56:	f040 8097 	bne.w	8008088 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007f5a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007f5e:	2b08      	cmp	r3, #8
 8007f60:	d823      	bhi.n	8007faa <UART_SetConfig+0x35a>
 8007f62:	a201      	add	r2, pc, #4	@ (adr r2, 8007f68 <UART_SetConfig+0x318>)
 8007f64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f68:	08007f8d 	.word	0x08007f8d
 8007f6c:	08007fab 	.word	0x08007fab
 8007f70:	08007f95 	.word	0x08007f95
 8007f74:	08007fab 	.word	0x08007fab
 8007f78:	08007f9b 	.word	0x08007f9b
 8007f7c:	08007fab 	.word	0x08007fab
 8007f80:	08007fab 	.word	0x08007fab
 8007f84:	08007fab 	.word	0x08007fab
 8007f88:	08007fa3 	.word	0x08007fa3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007f8c:	f7fc fca0 	bl	80048d0 <HAL_RCC_GetPCLK1Freq>
 8007f90:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007f92:	e010      	b.n	8007fb6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007f94:	4b9e      	ldr	r3, [pc, #632]	@ (8008210 <UART_SetConfig+0x5c0>)
 8007f96:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007f98:	e00d      	b.n	8007fb6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007f9a:	f7fc fc2b 	bl	80047f4 <HAL_RCC_GetSysClockFreq>
 8007f9e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007fa0:	e009      	b.n	8007fb6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007fa2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007fa6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007fa8:	e005      	b.n	8007fb6 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8007faa:	2300      	movs	r3, #0
 8007fac:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007fae:	2301      	movs	r3, #1
 8007fb0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007fb4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007fb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	f000 8130 	beq.w	800821e <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007fbe:	697b      	ldr	r3, [r7, #20]
 8007fc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fc2:	4a94      	ldr	r2, [pc, #592]	@ (8008214 <UART_SetConfig+0x5c4>)
 8007fc4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007fc8:	461a      	mov	r2, r3
 8007fca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fcc:	fbb3 f3f2 	udiv	r3, r3, r2
 8007fd0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007fd2:	697b      	ldr	r3, [r7, #20]
 8007fd4:	685a      	ldr	r2, [r3, #4]
 8007fd6:	4613      	mov	r3, r2
 8007fd8:	005b      	lsls	r3, r3, #1
 8007fda:	4413      	add	r3, r2
 8007fdc:	69ba      	ldr	r2, [r7, #24]
 8007fde:	429a      	cmp	r2, r3
 8007fe0:	d305      	bcc.n	8007fee <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007fe2:	697b      	ldr	r3, [r7, #20]
 8007fe4:	685b      	ldr	r3, [r3, #4]
 8007fe6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007fe8:	69ba      	ldr	r2, [r7, #24]
 8007fea:	429a      	cmp	r2, r3
 8007fec:	d903      	bls.n	8007ff6 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8007fee:	2301      	movs	r3, #1
 8007ff0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007ff4:	e113      	b.n	800821e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007ff6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ff8:	2200      	movs	r2, #0
 8007ffa:	60bb      	str	r3, [r7, #8]
 8007ffc:	60fa      	str	r2, [r7, #12]
 8007ffe:	697b      	ldr	r3, [r7, #20]
 8008000:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008002:	4a84      	ldr	r2, [pc, #528]	@ (8008214 <UART_SetConfig+0x5c4>)
 8008004:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008008:	b29b      	uxth	r3, r3
 800800a:	2200      	movs	r2, #0
 800800c:	603b      	str	r3, [r7, #0]
 800800e:	607a      	str	r2, [r7, #4]
 8008010:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008014:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008018:	f7f8 f8fe 	bl	8000218 <__aeabi_uldivmod>
 800801c:	4602      	mov	r2, r0
 800801e:	460b      	mov	r3, r1
 8008020:	4610      	mov	r0, r2
 8008022:	4619      	mov	r1, r3
 8008024:	f04f 0200 	mov.w	r2, #0
 8008028:	f04f 0300 	mov.w	r3, #0
 800802c:	020b      	lsls	r3, r1, #8
 800802e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008032:	0202      	lsls	r2, r0, #8
 8008034:	6979      	ldr	r1, [r7, #20]
 8008036:	6849      	ldr	r1, [r1, #4]
 8008038:	0849      	lsrs	r1, r1, #1
 800803a:	2000      	movs	r0, #0
 800803c:	460c      	mov	r4, r1
 800803e:	4605      	mov	r5, r0
 8008040:	eb12 0804 	adds.w	r8, r2, r4
 8008044:	eb43 0905 	adc.w	r9, r3, r5
 8008048:	697b      	ldr	r3, [r7, #20]
 800804a:	685b      	ldr	r3, [r3, #4]
 800804c:	2200      	movs	r2, #0
 800804e:	469a      	mov	sl, r3
 8008050:	4693      	mov	fp, r2
 8008052:	4652      	mov	r2, sl
 8008054:	465b      	mov	r3, fp
 8008056:	4640      	mov	r0, r8
 8008058:	4649      	mov	r1, r9
 800805a:	f7f8 f8dd 	bl	8000218 <__aeabi_uldivmod>
 800805e:	4602      	mov	r2, r0
 8008060:	460b      	mov	r3, r1
 8008062:	4613      	mov	r3, r2
 8008064:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008066:	6a3b      	ldr	r3, [r7, #32]
 8008068:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800806c:	d308      	bcc.n	8008080 <UART_SetConfig+0x430>
 800806e:	6a3b      	ldr	r3, [r7, #32]
 8008070:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008074:	d204      	bcs.n	8008080 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8008076:	697b      	ldr	r3, [r7, #20]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	6a3a      	ldr	r2, [r7, #32]
 800807c:	60da      	str	r2, [r3, #12]
 800807e:	e0ce      	b.n	800821e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8008080:	2301      	movs	r3, #1
 8008082:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008086:	e0ca      	b.n	800821e <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008088:	697b      	ldr	r3, [r7, #20]
 800808a:	69db      	ldr	r3, [r3, #28]
 800808c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008090:	d166      	bne.n	8008160 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8008092:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008096:	2b08      	cmp	r3, #8
 8008098:	d827      	bhi.n	80080ea <UART_SetConfig+0x49a>
 800809a:	a201      	add	r2, pc, #4	@ (adr r2, 80080a0 <UART_SetConfig+0x450>)
 800809c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080a0:	080080c5 	.word	0x080080c5
 80080a4:	080080cd 	.word	0x080080cd
 80080a8:	080080d5 	.word	0x080080d5
 80080ac:	080080eb 	.word	0x080080eb
 80080b0:	080080db 	.word	0x080080db
 80080b4:	080080eb 	.word	0x080080eb
 80080b8:	080080eb 	.word	0x080080eb
 80080bc:	080080eb 	.word	0x080080eb
 80080c0:	080080e3 	.word	0x080080e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80080c4:	f7fc fc04 	bl	80048d0 <HAL_RCC_GetPCLK1Freq>
 80080c8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80080ca:	e014      	b.n	80080f6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80080cc:	f7fc fc16 	bl	80048fc <HAL_RCC_GetPCLK2Freq>
 80080d0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80080d2:	e010      	b.n	80080f6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80080d4:	4b4e      	ldr	r3, [pc, #312]	@ (8008210 <UART_SetConfig+0x5c0>)
 80080d6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80080d8:	e00d      	b.n	80080f6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80080da:	f7fc fb8b 	bl	80047f4 <HAL_RCC_GetSysClockFreq>
 80080de:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80080e0:	e009      	b.n	80080f6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80080e2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80080e6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80080e8:	e005      	b.n	80080f6 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80080ea:	2300      	movs	r3, #0
 80080ec:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80080ee:	2301      	movs	r3, #1
 80080f0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80080f4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80080f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	f000 8090 	beq.w	800821e <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80080fe:	697b      	ldr	r3, [r7, #20]
 8008100:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008102:	4a44      	ldr	r2, [pc, #272]	@ (8008214 <UART_SetConfig+0x5c4>)
 8008104:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008108:	461a      	mov	r2, r3
 800810a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800810c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008110:	005a      	lsls	r2, r3, #1
 8008112:	697b      	ldr	r3, [r7, #20]
 8008114:	685b      	ldr	r3, [r3, #4]
 8008116:	085b      	lsrs	r3, r3, #1
 8008118:	441a      	add	r2, r3
 800811a:	697b      	ldr	r3, [r7, #20]
 800811c:	685b      	ldr	r3, [r3, #4]
 800811e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008122:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008124:	6a3b      	ldr	r3, [r7, #32]
 8008126:	2b0f      	cmp	r3, #15
 8008128:	d916      	bls.n	8008158 <UART_SetConfig+0x508>
 800812a:	6a3b      	ldr	r3, [r7, #32]
 800812c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008130:	d212      	bcs.n	8008158 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008132:	6a3b      	ldr	r3, [r7, #32]
 8008134:	b29b      	uxth	r3, r3
 8008136:	f023 030f 	bic.w	r3, r3, #15
 800813a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800813c:	6a3b      	ldr	r3, [r7, #32]
 800813e:	085b      	lsrs	r3, r3, #1
 8008140:	b29b      	uxth	r3, r3
 8008142:	f003 0307 	and.w	r3, r3, #7
 8008146:	b29a      	uxth	r2, r3
 8008148:	8bfb      	ldrh	r3, [r7, #30]
 800814a:	4313      	orrs	r3, r2
 800814c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800814e:	697b      	ldr	r3, [r7, #20]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	8bfa      	ldrh	r2, [r7, #30]
 8008154:	60da      	str	r2, [r3, #12]
 8008156:	e062      	b.n	800821e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8008158:	2301      	movs	r3, #1
 800815a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800815e:	e05e      	b.n	800821e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008160:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008164:	2b08      	cmp	r3, #8
 8008166:	d828      	bhi.n	80081ba <UART_SetConfig+0x56a>
 8008168:	a201      	add	r2, pc, #4	@ (adr r2, 8008170 <UART_SetConfig+0x520>)
 800816a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800816e:	bf00      	nop
 8008170:	08008195 	.word	0x08008195
 8008174:	0800819d 	.word	0x0800819d
 8008178:	080081a5 	.word	0x080081a5
 800817c:	080081bb 	.word	0x080081bb
 8008180:	080081ab 	.word	0x080081ab
 8008184:	080081bb 	.word	0x080081bb
 8008188:	080081bb 	.word	0x080081bb
 800818c:	080081bb 	.word	0x080081bb
 8008190:	080081b3 	.word	0x080081b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008194:	f7fc fb9c 	bl	80048d0 <HAL_RCC_GetPCLK1Freq>
 8008198:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800819a:	e014      	b.n	80081c6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800819c:	f7fc fbae 	bl	80048fc <HAL_RCC_GetPCLK2Freq>
 80081a0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80081a2:	e010      	b.n	80081c6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80081a4:	4b1a      	ldr	r3, [pc, #104]	@ (8008210 <UART_SetConfig+0x5c0>)
 80081a6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80081a8:	e00d      	b.n	80081c6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80081aa:	f7fc fb23 	bl	80047f4 <HAL_RCC_GetSysClockFreq>
 80081ae:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80081b0:	e009      	b.n	80081c6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80081b2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80081b6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80081b8:	e005      	b.n	80081c6 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80081ba:	2300      	movs	r3, #0
 80081bc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80081be:	2301      	movs	r3, #1
 80081c0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80081c4:	bf00      	nop
    }

    if (pclk != 0U)
 80081c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d028      	beq.n	800821e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80081cc:	697b      	ldr	r3, [r7, #20]
 80081ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80081d0:	4a10      	ldr	r2, [pc, #64]	@ (8008214 <UART_SetConfig+0x5c4>)
 80081d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80081d6:	461a      	mov	r2, r3
 80081d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081da:	fbb3 f2f2 	udiv	r2, r3, r2
 80081de:	697b      	ldr	r3, [r7, #20]
 80081e0:	685b      	ldr	r3, [r3, #4]
 80081e2:	085b      	lsrs	r3, r3, #1
 80081e4:	441a      	add	r2, r3
 80081e6:	697b      	ldr	r3, [r7, #20]
 80081e8:	685b      	ldr	r3, [r3, #4]
 80081ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80081ee:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80081f0:	6a3b      	ldr	r3, [r7, #32]
 80081f2:	2b0f      	cmp	r3, #15
 80081f4:	d910      	bls.n	8008218 <UART_SetConfig+0x5c8>
 80081f6:	6a3b      	ldr	r3, [r7, #32]
 80081f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80081fc:	d20c      	bcs.n	8008218 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80081fe:	6a3b      	ldr	r3, [r7, #32]
 8008200:	b29a      	uxth	r2, r3
 8008202:	697b      	ldr	r3, [r7, #20]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	60da      	str	r2, [r3, #12]
 8008208:	e009      	b.n	800821e <UART_SetConfig+0x5ce>
 800820a:	bf00      	nop
 800820c:	40008000 	.word	0x40008000
 8008210:	00f42400 	.word	0x00f42400
 8008214:	08009864 	.word	0x08009864
      }
      else
      {
        ret = HAL_ERROR;
 8008218:	2301      	movs	r3, #1
 800821a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800821e:	697b      	ldr	r3, [r7, #20]
 8008220:	2201      	movs	r2, #1
 8008222:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8008226:	697b      	ldr	r3, [r7, #20]
 8008228:	2201      	movs	r2, #1
 800822a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800822e:	697b      	ldr	r3, [r7, #20]
 8008230:	2200      	movs	r2, #0
 8008232:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8008234:	697b      	ldr	r3, [r7, #20]
 8008236:	2200      	movs	r2, #0
 8008238:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800823a:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800823e:	4618      	mov	r0, r3
 8008240:	3730      	adds	r7, #48	@ 0x30
 8008242:	46bd      	mov	sp, r7
 8008244:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08008248 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008248:	b480      	push	{r7}
 800824a:	b083      	sub	sp, #12
 800824c:	af00      	add	r7, sp, #0
 800824e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008254:	f003 0308 	and.w	r3, r3, #8
 8008258:	2b00      	cmp	r3, #0
 800825a:	d00a      	beq.n	8008272 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	685b      	ldr	r3, [r3, #4]
 8008262:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	430a      	orrs	r2, r1
 8008270:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008276:	f003 0301 	and.w	r3, r3, #1
 800827a:	2b00      	cmp	r3, #0
 800827c:	d00a      	beq.n	8008294 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	685b      	ldr	r3, [r3, #4]
 8008284:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	430a      	orrs	r2, r1
 8008292:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008298:	f003 0302 	and.w	r3, r3, #2
 800829c:	2b00      	cmp	r3, #0
 800829e:	d00a      	beq.n	80082b6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	685b      	ldr	r3, [r3, #4]
 80082a6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	430a      	orrs	r2, r1
 80082b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082ba:	f003 0304 	and.w	r3, r3, #4
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d00a      	beq.n	80082d8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	685b      	ldr	r3, [r3, #4]
 80082c8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	430a      	orrs	r2, r1
 80082d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082dc:	f003 0310 	and.w	r3, r3, #16
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d00a      	beq.n	80082fa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	689b      	ldr	r3, [r3, #8]
 80082ea:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	430a      	orrs	r2, r1
 80082f8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082fe:	f003 0320 	and.w	r3, r3, #32
 8008302:	2b00      	cmp	r3, #0
 8008304:	d00a      	beq.n	800831c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	689b      	ldr	r3, [r3, #8]
 800830c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	430a      	orrs	r2, r1
 800831a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008320:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008324:	2b00      	cmp	r3, #0
 8008326:	d01a      	beq.n	800835e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	685b      	ldr	r3, [r3, #4]
 800832e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	430a      	orrs	r2, r1
 800833c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008342:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008346:	d10a      	bne.n	800835e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	685b      	ldr	r3, [r3, #4]
 800834e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	430a      	orrs	r2, r1
 800835c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008362:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008366:	2b00      	cmp	r3, #0
 8008368:	d00a      	beq.n	8008380 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	685b      	ldr	r3, [r3, #4]
 8008370:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	430a      	orrs	r2, r1
 800837e:	605a      	str	r2, [r3, #4]
  }
}
 8008380:	bf00      	nop
 8008382:	370c      	adds	r7, #12
 8008384:	46bd      	mov	sp, r7
 8008386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800838a:	4770      	bx	lr

0800838c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800838c:	b580      	push	{r7, lr}
 800838e:	b098      	sub	sp, #96	@ 0x60
 8008390:	af02      	add	r7, sp, #8
 8008392:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	2200      	movs	r2, #0
 8008398:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800839c:	f7f9 fe1c 	bl	8001fd8 <HAL_GetTick>
 80083a0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	f003 0308 	and.w	r3, r3, #8
 80083ac:	2b08      	cmp	r3, #8
 80083ae:	d12f      	bne.n	8008410 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80083b0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80083b4:	9300      	str	r3, [sp, #0]
 80083b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80083b8:	2200      	movs	r2, #0
 80083ba:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80083be:	6878      	ldr	r0, [r7, #4]
 80083c0:	f000 f88e 	bl	80084e0 <UART_WaitOnFlagUntilTimeout>
 80083c4:	4603      	mov	r3, r0
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d022      	beq.n	8008410 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083d2:	e853 3f00 	ldrex	r3, [r3]
 80083d6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80083d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80083da:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80083de:	653b      	str	r3, [r7, #80]	@ 0x50
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	461a      	mov	r2, r3
 80083e6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80083e8:	647b      	str	r3, [r7, #68]	@ 0x44
 80083ea:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083ec:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80083ee:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80083f0:	e841 2300 	strex	r3, r2, [r1]
 80083f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80083f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d1e6      	bne.n	80083ca <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	2220      	movs	r2, #32
 8008400:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	2200      	movs	r2, #0
 8008408:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800840c:	2303      	movs	r3, #3
 800840e:	e063      	b.n	80084d8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	f003 0304 	and.w	r3, r3, #4
 800841a:	2b04      	cmp	r3, #4
 800841c:	d149      	bne.n	80084b2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800841e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008422:	9300      	str	r3, [sp, #0]
 8008424:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008426:	2200      	movs	r2, #0
 8008428:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800842c:	6878      	ldr	r0, [r7, #4]
 800842e:	f000 f857 	bl	80084e0 <UART_WaitOnFlagUntilTimeout>
 8008432:	4603      	mov	r3, r0
 8008434:	2b00      	cmp	r3, #0
 8008436:	d03c      	beq.n	80084b2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800843e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008440:	e853 3f00 	ldrex	r3, [r3]
 8008444:	623b      	str	r3, [r7, #32]
   return(result);
 8008446:	6a3b      	ldr	r3, [r7, #32]
 8008448:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800844c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	461a      	mov	r2, r3
 8008454:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008456:	633b      	str	r3, [r7, #48]	@ 0x30
 8008458:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800845a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800845c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800845e:	e841 2300 	strex	r3, r2, [r1]
 8008462:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008464:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008466:	2b00      	cmp	r3, #0
 8008468:	d1e6      	bne.n	8008438 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	3308      	adds	r3, #8
 8008470:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008472:	693b      	ldr	r3, [r7, #16]
 8008474:	e853 3f00 	ldrex	r3, [r3]
 8008478:	60fb      	str	r3, [r7, #12]
   return(result);
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	f023 0301 	bic.w	r3, r3, #1
 8008480:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	3308      	adds	r3, #8
 8008488:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800848a:	61fa      	str	r2, [r7, #28]
 800848c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800848e:	69b9      	ldr	r1, [r7, #24]
 8008490:	69fa      	ldr	r2, [r7, #28]
 8008492:	e841 2300 	strex	r3, r2, [r1]
 8008496:	617b      	str	r3, [r7, #20]
   return(result);
 8008498:	697b      	ldr	r3, [r7, #20]
 800849a:	2b00      	cmp	r3, #0
 800849c:	d1e5      	bne.n	800846a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	2220      	movs	r2, #32
 80084a2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	2200      	movs	r2, #0
 80084aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80084ae:	2303      	movs	r3, #3
 80084b0:	e012      	b.n	80084d8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	2220      	movs	r2, #32
 80084b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	2220      	movs	r2, #32
 80084be:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	2200      	movs	r2, #0
 80084c6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	2200      	movs	r2, #0
 80084cc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	2200      	movs	r2, #0
 80084d2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80084d6:	2300      	movs	r3, #0
}
 80084d8:	4618      	mov	r0, r3
 80084da:	3758      	adds	r7, #88	@ 0x58
 80084dc:	46bd      	mov	sp, r7
 80084de:	bd80      	pop	{r7, pc}

080084e0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80084e0:	b580      	push	{r7, lr}
 80084e2:	b084      	sub	sp, #16
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	60f8      	str	r0, [r7, #12]
 80084e8:	60b9      	str	r1, [r7, #8]
 80084ea:	603b      	str	r3, [r7, #0]
 80084ec:	4613      	mov	r3, r2
 80084ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80084f0:	e04f      	b.n	8008592 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80084f2:	69bb      	ldr	r3, [r7, #24]
 80084f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084f8:	d04b      	beq.n	8008592 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80084fa:	f7f9 fd6d 	bl	8001fd8 <HAL_GetTick>
 80084fe:	4602      	mov	r2, r0
 8008500:	683b      	ldr	r3, [r7, #0]
 8008502:	1ad3      	subs	r3, r2, r3
 8008504:	69ba      	ldr	r2, [r7, #24]
 8008506:	429a      	cmp	r2, r3
 8008508:	d302      	bcc.n	8008510 <UART_WaitOnFlagUntilTimeout+0x30>
 800850a:	69bb      	ldr	r3, [r7, #24]
 800850c:	2b00      	cmp	r3, #0
 800850e:	d101      	bne.n	8008514 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008510:	2303      	movs	r3, #3
 8008512:	e04e      	b.n	80085b2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	f003 0304 	and.w	r3, r3, #4
 800851e:	2b00      	cmp	r3, #0
 8008520:	d037      	beq.n	8008592 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008522:	68bb      	ldr	r3, [r7, #8]
 8008524:	2b80      	cmp	r3, #128	@ 0x80
 8008526:	d034      	beq.n	8008592 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008528:	68bb      	ldr	r3, [r7, #8]
 800852a:	2b40      	cmp	r3, #64	@ 0x40
 800852c:	d031      	beq.n	8008592 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	69db      	ldr	r3, [r3, #28]
 8008534:	f003 0308 	and.w	r3, r3, #8
 8008538:	2b08      	cmp	r3, #8
 800853a:	d110      	bne.n	800855e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	2208      	movs	r2, #8
 8008542:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008544:	68f8      	ldr	r0, [r7, #12]
 8008546:	f000 f99c 	bl	8008882 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	2208      	movs	r2, #8
 800854e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	2200      	movs	r2, #0
 8008556:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800855a:	2301      	movs	r3, #1
 800855c:	e029      	b.n	80085b2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	69db      	ldr	r3, [r3, #28]
 8008564:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008568:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800856c:	d111      	bne.n	8008592 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008576:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008578:	68f8      	ldr	r0, [r7, #12]
 800857a:	f000 f982 	bl	8008882 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	2220      	movs	r2, #32
 8008582:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	2200      	movs	r2, #0
 800858a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800858e:	2303      	movs	r3, #3
 8008590:	e00f      	b.n	80085b2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	69da      	ldr	r2, [r3, #28]
 8008598:	68bb      	ldr	r3, [r7, #8]
 800859a:	4013      	ands	r3, r2
 800859c:	68ba      	ldr	r2, [r7, #8]
 800859e:	429a      	cmp	r2, r3
 80085a0:	bf0c      	ite	eq
 80085a2:	2301      	moveq	r3, #1
 80085a4:	2300      	movne	r3, #0
 80085a6:	b2db      	uxtb	r3, r3
 80085a8:	461a      	mov	r2, r3
 80085aa:	79fb      	ldrb	r3, [r7, #7]
 80085ac:	429a      	cmp	r2, r3
 80085ae:	d0a0      	beq.n	80084f2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80085b0:	2300      	movs	r3, #0
}
 80085b2:	4618      	mov	r0, r3
 80085b4:	3710      	adds	r7, #16
 80085b6:	46bd      	mov	sp, r7
 80085b8:	bd80      	pop	{r7, pc}
	...

080085bc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80085bc:	b480      	push	{r7}
 80085be:	b0a3      	sub	sp, #140	@ 0x8c
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	60f8      	str	r0, [r7, #12]
 80085c4:	60b9      	str	r1, [r7, #8]
 80085c6:	4613      	mov	r3, r2
 80085c8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	68ba      	ldr	r2, [r7, #8]
 80085ce:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	88fa      	ldrh	r2, [r7, #6]
 80085d4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	88fa      	ldrh	r2, [r7, #6]
 80085dc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	2200      	movs	r2, #0
 80085e4:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	689b      	ldr	r3, [r3, #8]
 80085ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80085ee:	d10e      	bne.n	800860e <UART_Start_Receive_IT+0x52>
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	691b      	ldr	r3, [r3, #16]
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d105      	bne.n	8008604 <UART_Start_Receive_IT+0x48>
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80085fe:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008602:	e02d      	b.n	8008660 <UART_Start_Receive_IT+0xa4>
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	22ff      	movs	r2, #255	@ 0xff
 8008608:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800860c:	e028      	b.n	8008660 <UART_Start_Receive_IT+0xa4>
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	689b      	ldr	r3, [r3, #8]
 8008612:	2b00      	cmp	r3, #0
 8008614:	d10d      	bne.n	8008632 <UART_Start_Receive_IT+0x76>
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	691b      	ldr	r3, [r3, #16]
 800861a:	2b00      	cmp	r3, #0
 800861c:	d104      	bne.n	8008628 <UART_Start_Receive_IT+0x6c>
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	22ff      	movs	r2, #255	@ 0xff
 8008622:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008626:	e01b      	b.n	8008660 <UART_Start_Receive_IT+0xa4>
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	227f      	movs	r2, #127	@ 0x7f
 800862c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008630:	e016      	b.n	8008660 <UART_Start_Receive_IT+0xa4>
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	689b      	ldr	r3, [r3, #8]
 8008636:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800863a:	d10d      	bne.n	8008658 <UART_Start_Receive_IT+0x9c>
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	691b      	ldr	r3, [r3, #16]
 8008640:	2b00      	cmp	r3, #0
 8008642:	d104      	bne.n	800864e <UART_Start_Receive_IT+0x92>
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	227f      	movs	r2, #127	@ 0x7f
 8008648:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800864c:	e008      	b.n	8008660 <UART_Start_Receive_IT+0xa4>
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	223f      	movs	r2, #63	@ 0x3f
 8008652:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008656:	e003      	b.n	8008660 <UART_Start_Receive_IT+0xa4>
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	2200      	movs	r2, #0
 800865c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	2200      	movs	r2, #0
 8008664:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	2222      	movs	r2, #34	@ 0x22
 800866c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	3308      	adds	r3, #8
 8008676:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008678:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800867a:	e853 3f00 	ldrex	r3, [r3]
 800867e:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8008680:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008682:	f043 0301 	orr.w	r3, r3, #1
 8008686:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	3308      	adds	r3, #8
 8008690:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8008694:	673a      	str	r2, [r7, #112]	@ 0x70
 8008696:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008698:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800869a:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800869c:	e841 2300 	strex	r3, r2, [r1]
 80086a0:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 80086a2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d1e3      	bne.n	8008670 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80086ac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80086b0:	d14f      	bne.n	8008752 <UART_Start_Receive_IT+0x196>
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80086b8:	88fa      	ldrh	r2, [r7, #6]
 80086ba:	429a      	cmp	r2, r3
 80086bc:	d349      	bcc.n	8008752 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	689b      	ldr	r3, [r3, #8]
 80086c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80086c6:	d107      	bne.n	80086d8 <UART_Start_Receive_IT+0x11c>
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	691b      	ldr	r3, [r3, #16]
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d103      	bne.n	80086d8 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	4a47      	ldr	r2, [pc, #284]	@ (80087f0 <UART_Start_Receive_IT+0x234>)
 80086d4:	675a      	str	r2, [r3, #116]	@ 0x74
 80086d6:	e002      	b.n	80086de <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	4a46      	ldr	r2, [pc, #280]	@ (80087f4 <UART_Start_Receive_IT+0x238>)
 80086dc:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	691b      	ldr	r3, [r3, #16]
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d01a      	beq.n	800871c <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086ec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80086ee:	e853 3f00 	ldrex	r3, [r3]
 80086f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80086f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80086f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80086fa:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	461a      	mov	r2, r3
 8008704:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8008708:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800870a:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800870c:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800870e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8008710:	e841 2300 	strex	r3, r2, [r1]
 8008714:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8008716:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008718:	2b00      	cmp	r3, #0
 800871a:	d1e4      	bne.n	80086e6 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	3308      	adds	r3, #8
 8008722:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008724:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008726:	e853 3f00 	ldrex	r3, [r3]
 800872a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800872c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800872e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008732:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	3308      	adds	r3, #8
 800873a:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800873c:	64ba      	str	r2, [r7, #72]	@ 0x48
 800873e:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008740:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008742:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008744:	e841 2300 	strex	r3, r2, [r1]
 8008748:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800874a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800874c:	2b00      	cmp	r3, #0
 800874e:	d1e5      	bne.n	800871c <UART_Start_Receive_IT+0x160>
 8008750:	e046      	b.n	80087e0 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	689b      	ldr	r3, [r3, #8]
 8008756:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800875a:	d107      	bne.n	800876c <UART_Start_Receive_IT+0x1b0>
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	691b      	ldr	r3, [r3, #16]
 8008760:	2b00      	cmp	r3, #0
 8008762:	d103      	bne.n	800876c <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	4a24      	ldr	r2, [pc, #144]	@ (80087f8 <UART_Start_Receive_IT+0x23c>)
 8008768:	675a      	str	r2, [r3, #116]	@ 0x74
 800876a:	e002      	b.n	8008772 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	4a23      	ldr	r2, [pc, #140]	@ (80087fc <UART_Start_Receive_IT+0x240>)
 8008770:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	691b      	ldr	r3, [r3, #16]
 8008776:	2b00      	cmp	r3, #0
 8008778:	d019      	beq.n	80087ae <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008780:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008782:	e853 3f00 	ldrex	r3, [r3]
 8008786:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008788:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800878a:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800878e:	677b      	str	r3, [r7, #116]	@ 0x74
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	461a      	mov	r2, r3
 8008796:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008798:	637b      	str	r3, [r7, #52]	@ 0x34
 800879a:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800879c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800879e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80087a0:	e841 2300 	strex	r3, r2, [r1]
 80087a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80087a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d1e6      	bne.n	800877a <UART_Start_Receive_IT+0x1be>
 80087ac:	e018      	b.n	80087e0 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087b4:	697b      	ldr	r3, [r7, #20]
 80087b6:	e853 3f00 	ldrex	r3, [r3]
 80087ba:	613b      	str	r3, [r7, #16]
   return(result);
 80087bc:	693b      	ldr	r3, [r7, #16]
 80087be:	f043 0320 	orr.w	r3, r3, #32
 80087c2:	67bb      	str	r3, [r7, #120]	@ 0x78
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	461a      	mov	r2, r3
 80087ca:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80087cc:	623b      	str	r3, [r7, #32]
 80087ce:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087d0:	69f9      	ldr	r1, [r7, #28]
 80087d2:	6a3a      	ldr	r2, [r7, #32]
 80087d4:	e841 2300 	strex	r3, r2, [r1]
 80087d8:	61bb      	str	r3, [r7, #24]
   return(result);
 80087da:	69bb      	ldr	r3, [r7, #24]
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d1e6      	bne.n	80087ae <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 80087e0:	2300      	movs	r3, #0
}
 80087e2:	4618      	mov	r0, r3
 80087e4:	378c      	adds	r7, #140	@ 0x8c
 80087e6:	46bd      	mov	sp, r7
 80087e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ec:	4770      	bx	lr
 80087ee:	bf00      	nop
 80087f0:	08009205 	.word	0x08009205
 80087f4:	08008e95 	.word	0x08008e95
 80087f8:	08008cd5 	.word	0x08008cd5
 80087fc:	08008b15 	.word	0x08008b15

08008800 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008800:	b480      	push	{r7}
 8008802:	b08f      	sub	sp, #60	@ 0x3c
 8008804:	af00      	add	r7, sp, #0
 8008806:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800880e:	6a3b      	ldr	r3, [r7, #32]
 8008810:	e853 3f00 	ldrex	r3, [r3]
 8008814:	61fb      	str	r3, [r7, #28]
   return(result);
 8008816:	69fb      	ldr	r3, [r7, #28]
 8008818:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800881c:	637b      	str	r3, [r7, #52]	@ 0x34
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	461a      	mov	r2, r3
 8008824:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008826:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008828:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800882a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800882c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800882e:	e841 2300 	strex	r3, r2, [r1]
 8008832:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008834:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008836:	2b00      	cmp	r3, #0
 8008838:	d1e6      	bne.n	8008808 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	3308      	adds	r3, #8
 8008840:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	e853 3f00 	ldrex	r3, [r3]
 8008848:	60bb      	str	r3, [r7, #8]
   return(result);
 800884a:	68bb      	ldr	r3, [r7, #8]
 800884c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8008850:	633b      	str	r3, [r7, #48]	@ 0x30
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	3308      	adds	r3, #8
 8008858:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800885a:	61ba      	str	r2, [r7, #24]
 800885c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800885e:	6979      	ldr	r1, [r7, #20]
 8008860:	69ba      	ldr	r2, [r7, #24]
 8008862:	e841 2300 	strex	r3, r2, [r1]
 8008866:	613b      	str	r3, [r7, #16]
   return(result);
 8008868:	693b      	ldr	r3, [r7, #16]
 800886a:	2b00      	cmp	r3, #0
 800886c:	d1e5      	bne.n	800883a <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	2220      	movs	r2, #32
 8008872:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8008876:	bf00      	nop
 8008878:	373c      	adds	r7, #60	@ 0x3c
 800887a:	46bd      	mov	sp, r7
 800887c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008880:	4770      	bx	lr

08008882 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008882:	b480      	push	{r7}
 8008884:	b095      	sub	sp, #84	@ 0x54
 8008886:	af00      	add	r7, sp, #0
 8008888:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008890:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008892:	e853 3f00 	ldrex	r3, [r3]
 8008896:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008898:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800889a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800889e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	461a      	mov	r2, r3
 80088a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80088a8:	643b      	str	r3, [r7, #64]	@ 0x40
 80088aa:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088ac:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80088ae:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80088b0:	e841 2300 	strex	r3, r2, [r1]
 80088b4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80088b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d1e6      	bne.n	800888a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	3308      	adds	r3, #8
 80088c2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088c4:	6a3b      	ldr	r3, [r7, #32]
 80088c6:	e853 3f00 	ldrex	r3, [r3]
 80088ca:	61fb      	str	r3, [r7, #28]
   return(result);
 80088cc:	69fb      	ldr	r3, [r7, #28]
 80088ce:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80088d2:	f023 0301 	bic.w	r3, r3, #1
 80088d6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	3308      	adds	r3, #8
 80088de:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80088e0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80088e2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088e4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80088e6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80088e8:	e841 2300 	strex	r3, r2, [r1]
 80088ec:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80088ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d1e3      	bne.n	80088bc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80088f8:	2b01      	cmp	r3, #1
 80088fa:	d118      	bne.n	800892e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	e853 3f00 	ldrex	r3, [r3]
 8008908:	60bb      	str	r3, [r7, #8]
   return(result);
 800890a:	68bb      	ldr	r3, [r7, #8]
 800890c:	f023 0310 	bic.w	r3, r3, #16
 8008910:	647b      	str	r3, [r7, #68]	@ 0x44
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	461a      	mov	r2, r3
 8008918:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800891a:	61bb      	str	r3, [r7, #24]
 800891c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800891e:	6979      	ldr	r1, [r7, #20]
 8008920:	69ba      	ldr	r2, [r7, #24]
 8008922:	e841 2300 	strex	r3, r2, [r1]
 8008926:	613b      	str	r3, [r7, #16]
   return(result);
 8008928:	693b      	ldr	r3, [r7, #16]
 800892a:	2b00      	cmp	r3, #0
 800892c:	d1e6      	bne.n	80088fc <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	2220      	movs	r2, #32
 8008932:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	2200      	movs	r2, #0
 800893a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	2200      	movs	r2, #0
 8008940:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8008942:	bf00      	nop
 8008944:	3754      	adds	r7, #84	@ 0x54
 8008946:	46bd      	mov	sp, r7
 8008948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800894c:	4770      	bx	lr

0800894e <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800894e:	b580      	push	{r7, lr}
 8008950:	b090      	sub	sp, #64	@ 0x40
 8008952:	af00      	add	r7, sp, #0
 8008954:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800895a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	f003 0320 	and.w	r3, r3, #32
 8008966:	2b00      	cmp	r3, #0
 8008968:	d137      	bne.n	80089da <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800896a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800896c:	2200      	movs	r2, #0
 800896e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008972:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	3308      	adds	r3, #8
 8008978:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800897a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800897c:	e853 3f00 	ldrex	r3, [r3]
 8008980:	623b      	str	r3, [r7, #32]
   return(result);
 8008982:	6a3b      	ldr	r3, [r7, #32]
 8008984:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008988:	63bb      	str	r3, [r7, #56]	@ 0x38
 800898a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	3308      	adds	r3, #8
 8008990:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008992:	633a      	str	r2, [r7, #48]	@ 0x30
 8008994:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008996:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008998:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800899a:	e841 2300 	strex	r3, r2, [r1]
 800899e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80089a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d1e5      	bne.n	8008972 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80089a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089ac:	693b      	ldr	r3, [r7, #16]
 80089ae:	e853 3f00 	ldrex	r3, [r3]
 80089b2:	60fb      	str	r3, [r7, #12]
   return(result);
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80089ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80089bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	461a      	mov	r2, r3
 80089c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80089c4:	61fb      	str	r3, [r7, #28]
 80089c6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089c8:	69b9      	ldr	r1, [r7, #24]
 80089ca:	69fa      	ldr	r2, [r7, #28]
 80089cc:	e841 2300 	strex	r3, r2, [r1]
 80089d0:	617b      	str	r3, [r7, #20]
   return(result);
 80089d2:	697b      	ldr	r3, [r7, #20]
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d1e6      	bne.n	80089a6 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80089d8:	e004      	b.n	80089e4 <UART_DMATransmitCplt+0x96>
    huart->TxCpltCallback(huart);
 80089da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80089dc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80089e0:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80089e2:	4798      	blx	r3
}
 80089e4:	bf00      	nop
 80089e6:	3740      	adds	r7, #64	@ 0x40
 80089e8:	46bd      	mov	sp, r7
 80089ea:	bd80      	pop	{r7, pc}

080089ec <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80089ec:	b580      	push	{r7, lr}
 80089ee:	b084      	sub	sp, #16
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089f8:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008a00:	68f8      	ldr	r0, [r7, #12]
 8008a02:	4798      	blx	r3
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008a04:	bf00      	nop
 8008a06:	3710      	adds	r7, #16
 8008a08:	46bd      	mov	sp, r7
 8008a0a:	bd80      	pop	{r7, pc}

08008a0c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008a0c:	b580      	push	{r7, lr}
 8008a0e:	b086      	sub	sp, #24
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a18:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8008a1a:	697b      	ldr	r3, [r7, #20]
 8008a1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008a20:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8008a22:	697b      	ldr	r3, [r7, #20]
 8008a24:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008a28:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8008a2a:	697b      	ldr	r3, [r7, #20]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	689b      	ldr	r3, [r3, #8]
 8008a30:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008a34:	2b80      	cmp	r3, #128	@ 0x80
 8008a36:	d109      	bne.n	8008a4c <UART_DMAError+0x40>
 8008a38:	693b      	ldr	r3, [r7, #16]
 8008a3a:	2b21      	cmp	r3, #33	@ 0x21
 8008a3c:	d106      	bne.n	8008a4c <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8008a3e:	697b      	ldr	r3, [r7, #20]
 8008a40:	2200      	movs	r2, #0
 8008a42:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8008a46:	6978      	ldr	r0, [r7, #20]
 8008a48:	f7ff feda 	bl	8008800 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8008a4c:	697b      	ldr	r3, [r7, #20]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	689b      	ldr	r3, [r3, #8]
 8008a52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a56:	2b40      	cmp	r3, #64	@ 0x40
 8008a58:	d109      	bne.n	8008a6e <UART_DMAError+0x62>
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	2b22      	cmp	r3, #34	@ 0x22
 8008a5e:	d106      	bne.n	8008a6e <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8008a60:	697b      	ldr	r3, [r7, #20]
 8008a62:	2200      	movs	r2, #0
 8008a64:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8008a68:	6978      	ldr	r0, [r7, #20]
 8008a6a:	f7ff ff0a 	bl	8008882 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008a6e:	697b      	ldr	r3, [r7, #20]
 8008a70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008a74:	f043 0210 	orr.w	r2, r3, #16
 8008a78:	697b      	ldr	r3, [r7, #20]
 8008a7a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8008a7e:	697b      	ldr	r3, [r7, #20]
 8008a80:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008a84:	6978      	ldr	r0, [r7, #20]
 8008a86:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008a88:	bf00      	nop
 8008a8a:	3718      	adds	r7, #24
 8008a8c:	46bd      	mov	sp, r7
 8008a8e:	bd80      	pop	{r7, pc}

08008a90 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008a90:	b580      	push	{r7, lr}
 8008a92:	b084      	sub	sp, #16
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a9c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	2200      	movs	r2, #0
 8008aa2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008aac:	68f8      	ldr	r0, [r7, #12]
 8008aae:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008ab0:	bf00      	nop
 8008ab2:	3710      	adds	r7, #16
 8008ab4:	46bd      	mov	sp, r7
 8008ab6:	bd80      	pop	{r7, pc}

08008ab8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008ab8:	b580      	push	{r7, lr}
 8008aba:	b088      	sub	sp, #32
 8008abc:	af00      	add	r7, sp, #0
 8008abe:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	e853 3f00 	ldrex	r3, [r3]
 8008acc:	60bb      	str	r3, [r7, #8]
   return(result);
 8008ace:	68bb      	ldr	r3, [r7, #8]
 8008ad0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008ad4:	61fb      	str	r3, [r7, #28]
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	461a      	mov	r2, r3
 8008adc:	69fb      	ldr	r3, [r7, #28]
 8008ade:	61bb      	str	r3, [r7, #24]
 8008ae0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ae2:	6979      	ldr	r1, [r7, #20]
 8008ae4:	69ba      	ldr	r2, [r7, #24]
 8008ae6:	e841 2300 	strex	r3, r2, [r1]
 8008aea:	613b      	str	r3, [r7, #16]
   return(result);
 8008aec:	693b      	ldr	r3, [r7, #16]
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d1e6      	bne.n	8008ac0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	2220      	movs	r2, #32
 8008af6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	2200      	movs	r2, #0
 8008afe:	679a      	str	r2, [r3, #120]	@ 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008b06:	6878      	ldr	r0, [r7, #4]
 8008b08:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008b0a:	bf00      	nop
 8008b0c:	3720      	adds	r7, #32
 8008b0e:	46bd      	mov	sp, r7
 8008b10:	bd80      	pop	{r7, pc}
	...

08008b14 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008b14:	b580      	push	{r7, lr}
 8008b16:	b09c      	sub	sp, #112	@ 0x70
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008b22:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008b2c:	2b22      	cmp	r3, #34	@ 0x22
 8008b2e:	f040 80c2 	bne.w	8008cb6 <UART_RxISR_8BIT+0x1a2>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b38:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008b3c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8008b40:	b2d9      	uxtb	r1, r3
 8008b42:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8008b46:	b2da      	uxtb	r2, r3
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008b4c:	400a      	ands	r2, r1
 8008b4e:	b2d2      	uxtb	r2, r2
 8008b50:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008b56:	1c5a      	adds	r2, r3, #1
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008b62:	b29b      	uxth	r3, r3
 8008b64:	3b01      	subs	r3, #1
 8008b66:	b29a      	uxth	r2, r3
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008b74:	b29b      	uxth	r3, r3
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	f040 80a5 	bne.w	8008cc6 <UART_RxISR_8BIT+0x1b2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b82:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008b84:	e853 3f00 	ldrex	r3, [r3]
 8008b88:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008b8a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008b8c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008b90:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	461a      	mov	r2, r3
 8008b98:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008b9a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008b9c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b9e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008ba0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008ba2:	e841 2300 	strex	r3, r2, [r1]
 8008ba6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008ba8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d1e6      	bne.n	8008b7c <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	3308      	adds	r3, #8
 8008bb4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bb8:	e853 3f00 	ldrex	r3, [r3]
 8008bbc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008bbe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008bc0:	f023 0301 	bic.w	r3, r3, #1
 8008bc4:	667b      	str	r3, [r7, #100]	@ 0x64
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	3308      	adds	r3, #8
 8008bcc:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8008bce:	647a      	str	r2, [r7, #68]	@ 0x44
 8008bd0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bd2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008bd4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008bd6:	e841 2300 	strex	r3, r2, [r1]
 8008bda:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008bdc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d1e5      	bne.n	8008bae <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	2220      	movs	r2, #32
 8008be6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	2200      	movs	r2, #0
 8008bee:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	2200      	movs	r2, #0
 8008bf4:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	4a35      	ldr	r2, [pc, #212]	@ (8008cd0 <UART_RxISR_8BIT+0x1bc>)
 8008bfc:	4293      	cmp	r3, r2
 8008bfe:	d01f      	beq.n	8008c40 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	685b      	ldr	r3, [r3, #4]
 8008c06:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d018      	beq.n	8008c40 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c16:	e853 3f00 	ldrex	r3, [r3]
 8008c1a:	623b      	str	r3, [r7, #32]
   return(result);
 8008c1c:	6a3b      	ldr	r3, [r7, #32]
 8008c1e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008c22:	663b      	str	r3, [r7, #96]	@ 0x60
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	461a      	mov	r2, r3
 8008c2a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008c2c:	633b      	str	r3, [r7, #48]	@ 0x30
 8008c2e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c30:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008c32:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008c34:	e841 2300 	strex	r3, r2, [r1]
 8008c38:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008c3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d1e6      	bne.n	8008c0e <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008c44:	2b01      	cmp	r3, #1
 8008c46:	d130      	bne.n	8008caa <UART_RxISR_8BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	2200      	movs	r2, #0
 8008c4c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c54:	693b      	ldr	r3, [r7, #16]
 8008c56:	e853 3f00 	ldrex	r3, [r3]
 8008c5a:	60fb      	str	r3, [r7, #12]
   return(result);
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	f023 0310 	bic.w	r3, r3, #16
 8008c62:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	461a      	mov	r2, r3
 8008c6a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008c6c:	61fb      	str	r3, [r7, #28]
 8008c6e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c70:	69b9      	ldr	r1, [r7, #24]
 8008c72:	69fa      	ldr	r2, [r7, #28]
 8008c74:	e841 2300 	strex	r3, r2, [r1]
 8008c78:	617b      	str	r3, [r7, #20]
   return(result);
 8008c7a:	697b      	ldr	r3, [r7, #20]
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d1e6      	bne.n	8008c4e <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	69db      	ldr	r3, [r3, #28]
 8008c86:	f003 0310 	and.w	r3, r3, #16
 8008c8a:	2b10      	cmp	r3, #16
 8008c8c:	d103      	bne.n	8008c96 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	2210      	movs	r2, #16
 8008c94:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8008c9c:	687a      	ldr	r2, [r7, #4]
 8008c9e:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 8008ca2:	4611      	mov	r1, r2
 8008ca4:	6878      	ldr	r0, [r7, #4]
 8008ca6:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008ca8:	e00d      	b.n	8008cc6 <UART_RxISR_8BIT+0x1b2>
        huart->RxCpltCallback(huart);
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008cb0:	6878      	ldr	r0, [r7, #4]
 8008cb2:	4798      	blx	r3
}
 8008cb4:	e007      	b.n	8008cc6 <UART_RxISR_8BIT+0x1b2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	699a      	ldr	r2, [r3, #24]
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	f042 0208 	orr.w	r2, r2, #8
 8008cc4:	619a      	str	r2, [r3, #24]
}
 8008cc6:	bf00      	nop
 8008cc8:	3770      	adds	r7, #112	@ 0x70
 8008cca:	46bd      	mov	sp, r7
 8008ccc:	bd80      	pop	{r7, pc}
 8008cce:	bf00      	nop
 8008cd0:	40008000 	.word	0x40008000

08008cd4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008cd4:	b580      	push	{r7, lr}
 8008cd6:	b09c      	sub	sp, #112	@ 0x70
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008ce2:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008cec:	2b22      	cmp	r3, #34	@ 0x22
 8008cee:	f040 80c2 	bne.w	8008e76 <UART_RxISR_16BIT+0x1a2>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008cf8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008d00:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8008d02:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8008d06:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8008d0a:	4013      	ands	r3, r2
 8008d0c:	b29a      	uxth	r2, r3
 8008d0e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008d10:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008d16:	1c9a      	adds	r2, r3, #2
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008d22:	b29b      	uxth	r3, r3
 8008d24:	3b01      	subs	r3, #1
 8008d26:	b29a      	uxth	r2, r3
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008d34:	b29b      	uxth	r3, r3
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	f040 80a5 	bne.w	8008e86 <UART_RxISR_16BIT+0x1b2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d42:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008d44:	e853 3f00 	ldrex	r3, [r3]
 8008d48:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8008d4a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008d4c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008d50:	667b      	str	r3, [r7, #100]	@ 0x64
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	461a      	mov	r2, r3
 8008d58:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008d5a:	657b      	str	r3, [r7, #84]	@ 0x54
 8008d5c:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d5e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008d60:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008d62:	e841 2300 	strex	r3, r2, [r1]
 8008d66:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8008d68:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d1e6      	bne.n	8008d3c <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	3308      	adds	r3, #8
 8008d74:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d78:	e853 3f00 	ldrex	r3, [r3]
 8008d7c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008d7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d80:	f023 0301 	bic.w	r3, r3, #1
 8008d84:	663b      	str	r3, [r7, #96]	@ 0x60
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	3308      	adds	r3, #8
 8008d8c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8008d8e:	643a      	str	r2, [r7, #64]	@ 0x40
 8008d90:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d92:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008d94:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008d96:	e841 2300 	strex	r3, r2, [r1]
 8008d9a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008d9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d1e5      	bne.n	8008d6e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	2220      	movs	r2, #32
 8008da6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	2200      	movs	r2, #0
 8008dae:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	2200      	movs	r2, #0
 8008db4:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	4a35      	ldr	r2, [pc, #212]	@ (8008e90 <UART_RxISR_16BIT+0x1bc>)
 8008dbc:	4293      	cmp	r3, r2
 8008dbe:	d01f      	beq.n	8008e00 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	685b      	ldr	r3, [r3, #4]
 8008dc6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d018      	beq.n	8008e00 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dd4:	6a3b      	ldr	r3, [r7, #32]
 8008dd6:	e853 3f00 	ldrex	r3, [r3]
 8008dda:	61fb      	str	r3, [r7, #28]
   return(result);
 8008ddc:	69fb      	ldr	r3, [r7, #28]
 8008dde:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008de2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	461a      	mov	r2, r3
 8008dea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008dec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008dee:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008df0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008df2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008df4:	e841 2300 	strex	r3, r2, [r1]
 8008df8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008dfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d1e6      	bne.n	8008dce <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008e04:	2b01      	cmp	r3, #1
 8008e06:	d130      	bne.n	8008e6a <UART_RxISR_16BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	2200      	movs	r2, #0
 8008e0c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	e853 3f00 	ldrex	r3, [r3]
 8008e1a:	60bb      	str	r3, [r7, #8]
   return(result);
 8008e1c:	68bb      	ldr	r3, [r7, #8]
 8008e1e:	f023 0310 	bic.w	r3, r3, #16
 8008e22:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	461a      	mov	r2, r3
 8008e2a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008e2c:	61bb      	str	r3, [r7, #24]
 8008e2e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e30:	6979      	ldr	r1, [r7, #20]
 8008e32:	69ba      	ldr	r2, [r7, #24]
 8008e34:	e841 2300 	strex	r3, r2, [r1]
 8008e38:	613b      	str	r3, [r7, #16]
   return(result);
 8008e3a:	693b      	ldr	r3, [r7, #16]
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d1e6      	bne.n	8008e0e <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	69db      	ldr	r3, [r3, #28]
 8008e46:	f003 0310 	and.w	r3, r3, #16
 8008e4a:	2b10      	cmp	r3, #16
 8008e4c:	d103      	bne.n	8008e56 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	2210      	movs	r2, #16
 8008e54:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8008e5c:	687a      	ldr	r2, [r7, #4]
 8008e5e:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 8008e62:	4611      	mov	r1, r2
 8008e64:	6878      	ldr	r0, [r7, #4]
 8008e66:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008e68:	e00d      	b.n	8008e86 <UART_RxISR_16BIT+0x1b2>
        huart->RxCpltCallback(huart);
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008e70:	6878      	ldr	r0, [r7, #4]
 8008e72:	4798      	blx	r3
}
 8008e74:	e007      	b.n	8008e86 <UART_RxISR_16BIT+0x1b2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	699a      	ldr	r2, [r3, #24]
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	f042 0208 	orr.w	r2, r2, #8
 8008e84:	619a      	str	r2, [r3, #24]
}
 8008e86:	bf00      	nop
 8008e88:	3770      	adds	r7, #112	@ 0x70
 8008e8a:	46bd      	mov	sp, r7
 8008e8c:	bd80      	pop	{r7, pc}
 8008e8e:	bf00      	nop
 8008e90:	40008000 	.word	0x40008000

08008e94 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008e94:	b580      	push	{r7, lr}
 8008e96:	b0ac      	sub	sp, #176	@ 0xb0
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008ea2:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	69db      	ldr	r3, [r3, #28]
 8008eac:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	689b      	ldr	r3, [r3, #8]
 8008ec0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008eca:	2b22      	cmp	r3, #34	@ 0x22
 8008ecc:	f040 8189 	bne.w	80091e2 <UART_RxISR_8BIT_FIFOEN+0x34e>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8008ed6:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008eda:	e12c      	b.n	8009136 <UART_RxISR_8BIT_FIFOEN+0x2a2>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ee2:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008ee6:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8008eea:	b2d9      	uxtb	r1, r3
 8008eec:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8008ef0:	b2da      	uxtb	r2, r3
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008ef6:	400a      	ands	r2, r1
 8008ef8:	b2d2      	uxtb	r2, r2
 8008efa:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008f00:	1c5a      	adds	r2, r3, #1
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008f0c:	b29b      	uxth	r3, r3
 8008f0e:	3b01      	subs	r3, #1
 8008f10:	b29a      	uxth	r2, r3
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	69db      	ldr	r3, [r3, #28]
 8008f1e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008f22:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008f26:	f003 0307 	and.w	r3, r3, #7
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d055      	beq.n	8008fda <UART_RxISR_8BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008f2e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008f32:	f003 0301 	and.w	r3, r3, #1
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d011      	beq.n	8008f5e <UART_RxISR_8BIT_FIFOEN+0xca>
 8008f3a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8008f3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d00b      	beq.n	8008f5e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	2201      	movs	r2, #1
 8008f4c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008f54:	f043 0201 	orr.w	r2, r3, #1
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008f5e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008f62:	f003 0302 	and.w	r3, r3, #2
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d011      	beq.n	8008f8e <UART_RxISR_8BIT_FIFOEN+0xfa>
 8008f6a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008f6e:	f003 0301 	and.w	r3, r3, #1
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d00b      	beq.n	8008f8e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	2202      	movs	r2, #2
 8008f7c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008f84:	f043 0204 	orr.w	r2, r3, #4
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008f8e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008f92:	f003 0304 	and.w	r3, r3, #4
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d011      	beq.n	8008fbe <UART_RxISR_8BIT_FIFOEN+0x12a>
 8008f9a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008f9e:	f003 0301 	and.w	r3, r3, #1
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d00b      	beq.n	8008fbe <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	2204      	movs	r2, #4
 8008fac:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008fb4:	f043 0202 	orr.w	r2, r3, #2
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d008      	beq.n	8008fda <UART_RxISR_8BIT_FIFOEN+0x146>
        {
          /* Non Blocking error : transfer could go on.
          Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008fce:	6878      	ldr	r0, [r7, #4]
 8008fd0:	4798      	blx	r3
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	2200      	movs	r2, #0
 8008fd6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008fe0:	b29b      	uxth	r3, r3
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	f040 80a7 	bne.w	8009136 <UART_RxISR_8BIT_FIFOEN+0x2a2>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fee:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008ff0:	e853 3f00 	ldrex	r3, [r3]
 8008ff4:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 8008ff6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008ff8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008ffc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	461a      	mov	r2, r3
 8009006:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800900a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800900c:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800900e:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8009010:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8009012:	e841 2300 	strex	r3, r2, [r1]
 8009016:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8009018:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800901a:	2b00      	cmp	r3, #0
 800901c:	d1e4      	bne.n	8008fe8 <UART_RxISR_8BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	3308      	adds	r3, #8
 8009024:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009026:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009028:	e853 3f00 	ldrex	r3, [r3]
 800902c:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800902e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009030:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009034:	f023 0301 	bic.w	r3, r3, #1
 8009038:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	3308      	adds	r3, #8
 8009042:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009046:	66ba      	str	r2, [r7, #104]	@ 0x68
 8009048:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800904a:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800904c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800904e:	e841 2300 	strex	r3, r2, [r1]
 8009052:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8009054:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009056:	2b00      	cmp	r3, #0
 8009058:	d1e1      	bne.n	800901e <UART_RxISR_8BIT_FIFOEN+0x18a>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	2220      	movs	r2, #32
 800905e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	2200      	movs	r2, #0
 8009066:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	2200      	movs	r2, #0
 800906c:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	4a62      	ldr	r2, [pc, #392]	@ (80091fc <UART_RxISR_8BIT_FIFOEN+0x368>)
 8009074:	4293      	cmp	r3, r2
 8009076:	d021      	beq.n	80090bc <UART_RxISR_8BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	685b      	ldr	r3, [r3, #4]
 800907e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009082:	2b00      	cmp	r3, #0
 8009084:	d01a      	beq.n	80090bc <UART_RxISR_8BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800908c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800908e:	e853 3f00 	ldrex	r3, [r3]
 8009092:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8009094:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009096:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800909a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	461a      	mov	r2, r3
 80090a4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80090a8:	657b      	str	r3, [r7, #84]	@ 0x54
 80090aa:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090ac:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80090ae:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80090b0:	e841 2300 	strex	r3, r2, [r1]
 80090b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80090b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d1e4      	bne.n	8009086 <UART_RxISR_8BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80090c0:	2b01      	cmp	r3, #1
 80090c2:	d132      	bne.n	800912a <UART_RxISR_8BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	2200      	movs	r2, #0
 80090c8:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80090d2:	e853 3f00 	ldrex	r3, [r3]
 80090d6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80090d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090da:	f023 0310 	bic.w	r3, r3, #16
 80090de:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	461a      	mov	r2, r3
 80090e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80090ec:	643b      	str	r3, [r7, #64]	@ 0x40
 80090ee:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090f0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80090f2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80090f4:	e841 2300 	strex	r3, r2, [r1]
 80090f8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80090fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d1e4      	bne.n	80090ca <UART_RxISR_8BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	69db      	ldr	r3, [r3, #28]
 8009106:	f003 0310 	and.w	r3, r3, #16
 800910a:	2b10      	cmp	r3, #16
 800910c:	d103      	bne.n	8009116 <UART_RxISR_8BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	2210      	movs	r2, #16
 8009114:	621a      	str	r2, [r3, #32]
          }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800911c:	687a      	ldr	r2, [r7, #4]
 800911e:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 8009122:	4611      	mov	r1, r2
 8009124:	6878      	ldr	r0, [r7, #4]
 8009126:	4798      	blx	r3
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8009128:	e010      	b.n	800914c <UART_RxISR_8BIT_FIFOEN+0x2b8>
          huart->RxCpltCallback(huart);
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009130:	6878      	ldr	r0, [r7, #4]
 8009132:	4798      	blx	r3
        break;
 8009134:	e00a      	b.n	800914c <UART_RxISR_8BIT_FIFOEN+0x2b8>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009136:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800913a:	2b00      	cmp	r3, #0
 800913c:	d006      	beq.n	800914c <UART_RxISR_8BIT_FIFOEN+0x2b8>
 800913e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009142:	f003 0320 	and.w	r3, r3, #32
 8009146:	2b00      	cmp	r3, #0
 8009148:	f47f aec8 	bne.w	8008edc <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009152:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009156:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800915a:	2b00      	cmp	r3, #0
 800915c:	d049      	beq.n	80091f2 <UART_RxISR_8BIT_FIFOEN+0x35e>
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009164:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 8009168:	429a      	cmp	r2, r3
 800916a:	d242      	bcs.n	80091f2 <UART_RxISR_8BIT_FIFOEN+0x35e>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	3308      	adds	r3, #8
 8009172:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009174:	6a3b      	ldr	r3, [r7, #32]
 8009176:	e853 3f00 	ldrex	r3, [r3]
 800917a:	61fb      	str	r3, [r7, #28]
   return(result);
 800917c:	69fb      	ldr	r3, [r7, #28]
 800917e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009182:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	3308      	adds	r3, #8
 800918c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8009190:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009192:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009194:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009196:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009198:	e841 2300 	strex	r3, r2, [r1]
 800919c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800919e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d1e3      	bne.n	800916c <UART_RxISR_8BIT_FIFOEN+0x2d8>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	4a16      	ldr	r2, [pc, #88]	@ (8009200 <UART_RxISR_8BIT_FIFOEN+0x36c>)
 80091a8:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	e853 3f00 	ldrex	r3, [r3]
 80091b6:	60bb      	str	r3, [r7, #8]
   return(result);
 80091b8:	68bb      	ldr	r3, [r7, #8]
 80091ba:	f043 0320 	orr.w	r3, r3, #32
 80091be:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	461a      	mov	r2, r3
 80091c8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80091cc:	61bb      	str	r3, [r7, #24]
 80091ce:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091d0:	6979      	ldr	r1, [r7, #20]
 80091d2:	69ba      	ldr	r2, [r7, #24]
 80091d4:	e841 2300 	strex	r3, r2, [r1]
 80091d8:	613b      	str	r3, [r7, #16]
   return(result);
 80091da:	693b      	ldr	r3, [r7, #16]
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d1e4      	bne.n	80091aa <UART_RxISR_8BIT_FIFOEN+0x316>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80091e0:	e007      	b.n	80091f2 <UART_RxISR_8BIT_FIFOEN+0x35e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	699a      	ldr	r2, [r3, #24]
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	f042 0208 	orr.w	r2, r2, #8
 80091f0:	619a      	str	r2, [r3, #24]
}
 80091f2:	bf00      	nop
 80091f4:	37b0      	adds	r7, #176	@ 0xb0
 80091f6:	46bd      	mov	sp, r7
 80091f8:	bd80      	pop	{r7, pc}
 80091fa:	bf00      	nop
 80091fc:	40008000 	.word	0x40008000
 8009200:	08008b15 	.word	0x08008b15

08009204 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009204:	b580      	push	{r7, lr}
 8009206:	b0ae      	sub	sp, #184	@ 0xb8
 8009208:	af00      	add	r7, sp, #0
 800920a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009212:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	69db      	ldr	r3, [r3, #28]
 800921c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	689b      	ldr	r3, [r3, #8]
 8009230:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800923a:	2b22      	cmp	r3, #34	@ 0x22
 800923c:	f040 818d 	bne.w	800955a <UART_RxISR_16BIT_FIFOEN+0x356>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009246:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800924a:	e130      	b.n	80094ae <UART_RxISR_16BIT_FIFOEN+0x2aa>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009252:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800925a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800925e:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 8009262:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8009266:	4013      	ands	r3, r2
 8009268:	b29a      	uxth	r2, r3
 800926a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800926e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009274:	1c9a      	adds	r2, r3, #2
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009280:	b29b      	uxth	r3, r3
 8009282:	3b01      	subs	r3, #1
 8009284:	b29a      	uxth	r2, r3
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	69db      	ldr	r3, [r3, #28]
 8009292:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009296:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800929a:	f003 0307 	and.w	r3, r3, #7
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d055      	beq.n	800934e <UART_RxISR_16BIT_FIFOEN+0x14a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80092a2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80092a6:	f003 0301 	and.w	r3, r3, #1
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d011      	beq.n	80092d2 <UART_RxISR_16BIT_FIFOEN+0xce>
 80092ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80092b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d00b      	beq.n	80092d2 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	2201      	movs	r2, #1
 80092c0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80092c8:	f043 0201 	orr.w	r2, r3, #1
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80092d2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80092d6:	f003 0302 	and.w	r3, r3, #2
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d011      	beq.n	8009302 <UART_RxISR_16BIT_FIFOEN+0xfe>
 80092de:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80092e2:	f003 0301 	and.w	r3, r3, #1
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d00b      	beq.n	8009302 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	2202      	movs	r2, #2
 80092f0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80092f8:	f043 0204 	orr.w	r2, r3, #4
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009302:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009306:	f003 0304 	and.w	r3, r3, #4
 800930a:	2b00      	cmp	r3, #0
 800930c:	d011      	beq.n	8009332 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800930e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009312:	f003 0301 	and.w	r3, r3, #1
 8009316:	2b00      	cmp	r3, #0
 8009318:	d00b      	beq.n	8009332 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	2204      	movs	r2, #4
 8009320:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009328:	f043 0202 	orr.w	r2, r3, #2
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009338:	2b00      	cmp	r3, #0
 800933a:	d008      	beq.n	800934e <UART_RxISR_16BIT_FIFOEN+0x14a>
        {
          /* Non Blocking error : transfer could go on.
          Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009342:	6878      	ldr	r0, [r7, #4]
 8009344:	4798      	blx	r3
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	2200      	movs	r2, #0
 800934a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009354:	b29b      	uxth	r3, r3
 8009356:	2b00      	cmp	r3, #0
 8009358:	f040 80a9 	bne.w	80094ae <UART_RxISR_16BIT_FIFOEN+0x2aa>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009362:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009364:	e853 3f00 	ldrex	r3, [r3]
 8009368:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800936a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800936c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009370:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	461a      	mov	r2, r3
 800937a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800937e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009382:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009384:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009386:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800938a:	e841 2300 	strex	r3, r2, [r1]
 800938e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009390:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009392:	2b00      	cmp	r3, #0
 8009394:	d1e2      	bne.n	800935c <UART_RxISR_16BIT_FIFOEN+0x158>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	3308      	adds	r3, #8
 800939c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800939e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80093a0:	e853 3f00 	ldrex	r3, [r3]
 80093a4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80093a6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80093a8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80093ac:	f023 0301 	bic.w	r3, r3, #1
 80093b0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	3308      	adds	r3, #8
 80093ba:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 80093be:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80093c0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093c2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80093c4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80093c6:	e841 2300 	strex	r3, r2, [r1]
 80093ca:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80093cc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d1e1      	bne.n	8009396 <UART_RxISR_16BIT_FIFOEN+0x192>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	2220      	movs	r2, #32
 80093d6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	2200      	movs	r2, #0
 80093de:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	2200      	movs	r2, #0
 80093e4:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	4a62      	ldr	r2, [pc, #392]	@ (8009574 <UART_RxISR_16BIT_FIFOEN+0x370>)
 80093ec:	4293      	cmp	r3, r2
 80093ee:	d021      	beq.n	8009434 <UART_RxISR_16BIT_FIFOEN+0x230>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	685b      	ldr	r3, [r3, #4]
 80093f6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d01a      	beq.n	8009434 <UART_RxISR_16BIT_FIFOEN+0x230>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009404:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009406:	e853 3f00 	ldrex	r3, [r3]
 800940a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800940c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800940e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009412:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	461a      	mov	r2, r3
 800941c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8009420:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009422:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009424:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009426:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009428:	e841 2300 	strex	r3, r2, [r1]
 800942c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800942e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009430:	2b00      	cmp	r3, #0
 8009432:	d1e4      	bne.n	80093fe <UART_RxISR_16BIT_FIFOEN+0x1fa>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009438:	2b01      	cmp	r3, #1
 800943a:	d132      	bne.n	80094a2 <UART_RxISR_16BIT_FIFOEN+0x29e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	2200      	movs	r2, #0
 8009440:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009448:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800944a:	e853 3f00 	ldrex	r3, [r3]
 800944e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009450:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009452:	f023 0310 	bic.w	r3, r3, #16
 8009456:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	461a      	mov	r2, r3
 8009460:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009464:	647b      	str	r3, [r7, #68]	@ 0x44
 8009466:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009468:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800946a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800946c:	e841 2300 	strex	r3, r2, [r1]
 8009470:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009472:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009474:	2b00      	cmp	r3, #0
 8009476:	d1e4      	bne.n	8009442 <UART_RxISR_16BIT_FIFOEN+0x23e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	69db      	ldr	r3, [r3, #28]
 800947e:	f003 0310 	and.w	r3, r3, #16
 8009482:	2b10      	cmp	r3, #16
 8009484:	d103      	bne.n	800948e <UART_RxISR_16BIT_FIFOEN+0x28a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	2210      	movs	r2, #16
 800948c:	621a      	str	r2, [r3, #32]
          }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8009494:	687a      	ldr	r2, [r7, #4]
 8009496:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800949a:	4611      	mov	r1, r2
 800949c:	6878      	ldr	r0, [r7, #4]
 800949e:	4798      	blx	r3
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 80094a0:	e010      	b.n	80094c4 <UART_RxISR_16BIT_FIFOEN+0x2c0>
          huart->RxCpltCallback(huart);
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80094a8:	6878      	ldr	r0, [r7, #4]
 80094aa:	4798      	blx	r3
        break;
 80094ac:	e00a      	b.n	80094c4 <UART_RxISR_16BIT_FIFOEN+0x2c0>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80094ae:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d006      	beq.n	80094c4 <UART_RxISR_16BIT_FIFOEN+0x2c0>
 80094b6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80094ba:	f003 0320 	and.w	r3, r3, #32
 80094be:	2b00      	cmp	r3, #0
 80094c0:	f47f aec4 	bne.w	800924c <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80094ca:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80094ce:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d049      	beq.n	800956a <UART_RxISR_16BIT_FIFOEN+0x366>
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80094dc:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 80094e0:	429a      	cmp	r2, r3
 80094e2:	d242      	bcs.n	800956a <UART_RxISR_16BIT_FIFOEN+0x366>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	3308      	adds	r3, #8
 80094ea:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094ee:	e853 3f00 	ldrex	r3, [r3]
 80094f2:	623b      	str	r3, [r7, #32]
   return(result);
 80094f4:	6a3b      	ldr	r3, [r7, #32]
 80094f6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80094fa:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	3308      	adds	r3, #8
 8009504:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8009508:	633a      	str	r2, [r7, #48]	@ 0x30
 800950a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800950c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800950e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009510:	e841 2300 	strex	r3, r2, [r1]
 8009514:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009516:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009518:	2b00      	cmp	r3, #0
 800951a:	d1e3      	bne.n	80094e4 <UART_RxISR_16BIT_FIFOEN+0x2e0>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	4a16      	ldr	r2, [pc, #88]	@ (8009578 <UART_RxISR_16BIT_FIFOEN+0x374>)
 8009520:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009528:	693b      	ldr	r3, [r7, #16]
 800952a:	e853 3f00 	ldrex	r3, [r3]
 800952e:	60fb      	str	r3, [r7, #12]
   return(result);
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	f043 0320 	orr.w	r3, r3, #32
 8009536:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	461a      	mov	r2, r3
 8009540:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009544:	61fb      	str	r3, [r7, #28]
 8009546:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009548:	69b9      	ldr	r1, [r7, #24]
 800954a:	69fa      	ldr	r2, [r7, #28]
 800954c:	e841 2300 	strex	r3, r2, [r1]
 8009550:	617b      	str	r3, [r7, #20]
   return(result);
 8009552:	697b      	ldr	r3, [r7, #20]
 8009554:	2b00      	cmp	r3, #0
 8009556:	d1e4      	bne.n	8009522 <UART_RxISR_16BIT_FIFOEN+0x31e>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009558:	e007      	b.n	800956a <UART_RxISR_16BIT_FIFOEN+0x366>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	699a      	ldr	r2, [r3, #24]
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	f042 0208 	orr.w	r2, r2, #8
 8009568:	619a      	str	r2, [r3, #24]
}
 800956a:	bf00      	nop
 800956c:	37b8      	adds	r7, #184	@ 0xb8
 800956e:	46bd      	mov	sp, r7
 8009570:	bd80      	pop	{r7, pc}
 8009572:	bf00      	nop
 8009574:	40008000 	.word	0x40008000
 8009578:	08008cd5 	.word	0x08008cd5

0800957c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800957c:	b480      	push	{r7}
 800957e:	b083      	sub	sp, #12
 8009580:	af00      	add	r7, sp, #0
 8009582:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009584:	bf00      	nop
 8009586:	370c      	adds	r7, #12
 8009588:	46bd      	mov	sp, r7
 800958a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800958e:	4770      	bx	lr

08009590 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009590:	b480      	push	{r7}
 8009592:	b083      	sub	sp, #12
 8009594:	af00      	add	r7, sp, #0
 8009596:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009598:	bf00      	nop
 800959a:	370c      	adds	r7, #12
 800959c:	46bd      	mov	sp, r7
 800959e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a2:	4770      	bx	lr

080095a4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80095a4:	b480      	push	{r7}
 80095a6:	b083      	sub	sp, #12
 80095a8:	af00      	add	r7, sp, #0
 80095aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80095ac:	bf00      	nop
 80095ae:	370c      	adds	r7, #12
 80095b0:	46bd      	mov	sp, r7
 80095b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b6:	4770      	bx	lr

080095b8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80095b8:	b480      	push	{r7}
 80095ba:	b085      	sub	sp, #20
 80095bc:	af00      	add	r7, sp, #0
 80095be:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80095c6:	2b01      	cmp	r3, #1
 80095c8:	d101      	bne.n	80095ce <HAL_UARTEx_DisableFifoMode+0x16>
 80095ca:	2302      	movs	r3, #2
 80095cc:	e027      	b.n	800961e <HAL_UARTEx_DisableFifoMode+0x66>
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	2201      	movs	r2, #1
 80095d2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	2224      	movs	r2, #36	@ 0x24
 80095da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	681a      	ldr	r2, [r3, #0]
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	f022 0201 	bic.w	r2, r2, #1
 80095f4:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80095fc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	2200      	movs	r2, #0
 8009602:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	68fa      	ldr	r2, [r7, #12]
 800960a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	2220      	movs	r2, #32
 8009610:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	2200      	movs	r2, #0
 8009618:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800961c:	2300      	movs	r3, #0
}
 800961e:	4618      	mov	r0, r3
 8009620:	3714      	adds	r7, #20
 8009622:	46bd      	mov	sp, r7
 8009624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009628:	4770      	bx	lr

0800962a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800962a:	b580      	push	{r7, lr}
 800962c:	b084      	sub	sp, #16
 800962e:	af00      	add	r7, sp, #0
 8009630:	6078      	str	r0, [r7, #4]
 8009632:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800963a:	2b01      	cmp	r3, #1
 800963c:	d101      	bne.n	8009642 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800963e:	2302      	movs	r3, #2
 8009640:	e02d      	b.n	800969e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	2201      	movs	r2, #1
 8009646:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	2224      	movs	r2, #36	@ 0x24
 800964e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	681a      	ldr	r2, [r3, #0]
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	f022 0201 	bic.w	r2, r2, #1
 8009668:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	689b      	ldr	r3, [r3, #8]
 8009670:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	683a      	ldr	r2, [r7, #0]
 800967a:	430a      	orrs	r2, r1
 800967c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800967e:	6878      	ldr	r0, [r7, #4]
 8009680:	f000 f850 	bl	8009724 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	68fa      	ldr	r2, [r7, #12]
 800968a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	2220      	movs	r2, #32
 8009690:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	2200      	movs	r2, #0
 8009698:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800969c:	2300      	movs	r3, #0
}
 800969e:	4618      	mov	r0, r3
 80096a0:	3710      	adds	r7, #16
 80096a2:	46bd      	mov	sp, r7
 80096a4:	bd80      	pop	{r7, pc}

080096a6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80096a6:	b580      	push	{r7, lr}
 80096a8:	b084      	sub	sp, #16
 80096aa:	af00      	add	r7, sp, #0
 80096ac:	6078      	str	r0, [r7, #4]
 80096ae:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80096b6:	2b01      	cmp	r3, #1
 80096b8:	d101      	bne.n	80096be <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80096ba:	2302      	movs	r3, #2
 80096bc:	e02d      	b.n	800971a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	2201      	movs	r2, #1
 80096c2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	2224      	movs	r2, #36	@ 0x24
 80096ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	681a      	ldr	r2, [r3, #0]
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	f022 0201 	bic.w	r2, r2, #1
 80096e4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	689b      	ldr	r3, [r3, #8]
 80096ec:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	683a      	ldr	r2, [r7, #0]
 80096f6:	430a      	orrs	r2, r1
 80096f8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80096fa:	6878      	ldr	r0, [r7, #4]
 80096fc:	f000 f812 	bl	8009724 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	68fa      	ldr	r2, [r7, #12]
 8009706:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	2220      	movs	r2, #32
 800970c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	2200      	movs	r2, #0
 8009714:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009718:	2300      	movs	r3, #0
}
 800971a:	4618      	mov	r0, r3
 800971c:	3710      	adds	r7, #16
 800971e:	46bd      	mov	sp, r7
 8009720:	bd80      	pop	{r7, pc}
	...

08009724 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009724:	b480      	push	{r7}
 8009726:	b085      	sub	sp, #20
 8009728:	af00      	add	r7, sp, #0
 800972a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009730:	2b00      	cmp	r3, #0
 8009732:	d108      	bne.n	8009746 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	2201      	movs	r2, #1
 8009738:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	2201      	movs	r2, #1
 8009740:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009744:	e031      	b.n	80097aa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009746:	2308      	movs	r3, #8
 8009748:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800974a:	2308      	movs	r3, #8
 800974c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	689b      	ldr	r3, [r3, #8]
 8009754:	0e5b      	lsrs	r3, r3, #25
 8009756:	b2db      	uxtb	r3, r3
 8009758:	f003 0307 	and.w	r3, r3, #7
 800975c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	689b      	ldr	r3, [r3, #8]
 8009764:	0f5b      	lsrs	r3, r3, #29
 8009766:	b2db      	uxtb	r3, r3
 8009768:	f003 0307 	and.w	r3, r3, #7
 800976c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800976e:	7bbb      	ldrb	r3, [r7, #14]
 8009770:	7b3a      	ldrb	r2, [r7, #12]
 8009772:	4911      	ldr	r1, [pc, #68]	@ (80097b8 <UARTEx_SetNbDataToProcess+0x94>)
 8009774:	5c8a      	ldrb	r2, [r1, r2]
 8009776:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800977a:	7b3a      	ldrb	r2, [r7, #12]
 800977c:	490f      	ldr	r1, [pc, #60]	@ (80097bc <UARTEx_SetNbDataToProcess+0x98>)
 800977e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009780:	fb93 f3f2 	sdiv	r3, r3, r2
 8009784:	b29a      	uxth	r2, r3
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800978c:	7bfb      	ldrb	r3, [r7, #15]
 800978e:	7b7a      	ldrb	r2, [r7, #13]
 8009790:	4909      	ldr	r1, [pc, #36]	@ (80097b8 <UARTEx_SetNbDataToProcess+0x94>)
 8009792:	5c8a      	ldrb	r2, [r1, r2]
 8009794:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009798:	7b7a      	ldrb	r2, [r7, #13]
 800979a:	4908      	ldr	r1, [pc, #32]	@ (80097bc <UARTEx_SetNbDataToProcess+0x98>)
 800979c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800979e:	fb93 f3f2 	sdiv	r3, r3, r2
 80097a2:	b29a      	uxth	r2, r3
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80097aa:	bf00      	nop
 80097ac:	3714      	adds	r7, #20
 80097ae:	46bd      	mov	sp, r7
 80097b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b4:	4770      	bx	lr
 80097b6:	bf00      	nop
 80097b8:	0800987c 	.word	0x0800987c
 80097bc:	08009884 	.word	0x08009884

080097c0 <memset>:
 80097c0:	4402      	add	r2, r0
 80097c2:	4603      	mov	r3, r0
 80097c4:	4293      	cmp	r3, r2
 80097c6:	d100      	bne.n	80097ca <memset+0xa>
 80097c8:	4770      	bx	lr
 80097ca:	f803 1b01 	strb.w	r1, [r3], #1
 80097ce:	e7f9      	b.n	80097c4 <memset+0x4>

080097d0 <__libc_init_array>:
 80097d0:	b570      	push	{r4, r5, r6, lr}
 80097d2:	4d0d      	ldr	r5, [pc, #52]	@ (8009808 <__libc_init_array+0x38>)
 80097d4:	4c0d      	ldr	r4, [pc, #52]	@ (800980c <__libc_init_array+0x3c>)
 80097d6:	1b64      	subs	r4, r4, r5
 80097d8:	10a4      	asrs	r4, r4, #2
 80097da:	2600      	movs	r6, #0
 80097dc:	42a6      	cmp	r6, r4
 80097de:	d109      	bne.n	80097f4 <__libc_init_array+0x24>
 80097e0:	4d0b      	ldr	r5, [pc, #44]	@ (8009810 <__libc_init_array+0x40>)
 80097e2:	4c0c      	ldr	r4, [pc, #48]	@ (8009814 <__libc_init_array+0x44>)
 80097e4:	f000 f826 	bl	8009834 <_init>
 80097e8:	1b64      	subs	r4, r4, r5
 80097ea:	10a4      	asrs	r4, r4, #2
 80097ec:	2600      	movs	r6, #0
 80097ee:	42a6      	cmp	r6, r4
 80097f0:	d105      	bne.n	80097fe <__libc_init_array+0x2e>
 80097f2:	bd70      	pop	{r4, r5, r6, pc}
 80097f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80097f8:	4798      	blx	r3
 80097fa:	3601      	adds	r6, #1
 80097fc:	e7ee      	b.n	80097dc <__libc_init_array+0xc>
 80097fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8009802:	4798      	blx	r3
 8009804:	3601      	adds	r6, #1
 8009806:	e7f2      	b.n	80097ee <__libc_init_array+0x1e>
 8009808:	08009894 	.word	0x08009894
 800980c:	08009894 	.word	0x08009894
 8009810:	08009894 	.word	0x08009894
 8009814:	08009898 	.word	0x08009898

08009818 <memcpy>:
 8009818:	440a      	add	r2, r1
 800981a:	4291      	cmp	r1, r2
 800981c:	f100 33ff 	add.w	r3, r0, #4294967295
 8009820:	d100      	bne.n	8009824 <memcpy+0xc>
 8009822:	4770      	bx	lr
 8009824:	b510      	push	{r4, lr}
 8009826:	f811 4b01 	ldrb.w	r4, [r1], #1
 800982a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800982e:	4291      	cmp	r1, r2
 8009830:	d1f9      	bne.n	8009826 <memcpy+0xe>
 8009832:	bd10      	pop	{r4, pc}

08009834 <_init>:
 8009834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009836:	bf00      	nop
 8009838:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800983a:	bc08      	pop	{r3}
 800983c:	469e      	mov	lr, r3
 800983e:	4770      	bx	lr

08009840 <_fini>:
 8009840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009842:	bf00      	nop
 8009844:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009846:	bc08      	pop	{r3}
 8009848:	469e      	mov	lr, r3
 800984a:	4770      	bx	lr
