
STU3_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001116c  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000458  08011348  08011348  00012348  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080117a0  080117a0  000132c0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080117a0  080117a0  000127a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080117a8  080117a8  000132c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080117a8  080117a8  000127a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080117ac  080117ac  000127ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002c0  20000000  080117b0  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c20  200002c0  08011a70  000132c0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20001ee0  08011a70  00013ee0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000132c0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002974b  00000000  00000000  000132f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004d3e  00000000  00000000  0003ca3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ce8  00000000  00000000  00041780  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001671  00000000  00000000  00043468  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b510  00000000  00000000  00044ad9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00028600  00000000  00000000  0006ffe9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011ab07  00000000  00000000  000985e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001b30f0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000084e4  00000000  00000000  001b3134  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007e  00000000  00000000  001bb618  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	200002c0 	.word	0x200002c0
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0801132c 	.word	0x0801132c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	200002c4 	.word	0x200002c4
 8000214:	0801132c 	.word	0x0801132c

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_dcmpun>:
 8000ac4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__aeabi_dcmpun+0x10>
 8000ace:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad2:	d10a      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ad4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000adc:	d102      	bne.n	8000ae4 <__aeabi_dcmpun+0x20>
 8000ade:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae2:	d102      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	f04f 0001 	mov.w	r0, #1
 8000aee:	4770      	bx	lr

08000af0 <__aeabi_d2uiz>:
 8000af0:	004a      	lsls	r2, r1, #1
 8000af2:	d211      	bcs.n	8000b18 <__aeabi_d2uiz+0x28>
 8000af4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000af8:	d211      	bcs.n	8000b1e <__aeabi_d2uiz+0x2e>
 8000afa:	d50d      	bpl.n	8000b18 <__aeabi_d2uiz+0x28>
 8000afc:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b00:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b04:	d40e      	bmi.n	8000b24 <__aeabi_d2uiz+0x34>
 8000b06:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b0a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b0e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b12:	fa23 f002 	lsr.w	r0, r3, r2
 8000b16:	4770      	bx	lr
 8000b18:	f04f 0000 	mov.w	r0, #0
 8000b1c:	4770      	bx	lr
 8000b1e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b22:	d102      	bne.n	8000b2a <__aeabi_d2uiz+0x3a>
 8000b24:	f04f 30ff 	mov.w	r0, #4294967295
 8000b28:	4770      	bx	lr
 8000b2a:	f04f 0000 	mov.w	r0, #0
 8000b2e:	4770      	bx	lr

08000b30 <__aeabi_d2f>:
 8000b30:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b34:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b38:	bf24      	itt	cs
 8000b3a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b3e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b42:	d90d      	bls.n	8000b60 <__aeabi_d2f+0x30>
 8000b44:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b48:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b4c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b50:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b54:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b58:	bf08      	it	eq
 8000b5a:	f020 0001 	biceq.w	r0, r0, #1
 8000b5e:	4770      	bx	lr
 8000b60:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b64:	d121      	bne.n	8000baa <__aeabi_d2f+0x7a>
 8000b66:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b6a:	bfbc      	itt	lt
 8000b6c:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b70:	4770      	bxlt	lr
 8000b72:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b76:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b7a:	f1c2 0218 	rsb	r2, r2, #24
 8000b7e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b82:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b86:	fa20 f002 	lsr.w	r0, r0, r2
 8000b8a:	bf18      	it	ne
 8000b8c:	f040 0001 	orrne.w	r0, r0, #1
 8000b90:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b94:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b98:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b9c:	ea40 000c 	orr.w	r0, r0, ip
 8000ba0:	fa23 f302 	lsr.w	r3, r3, r2
 8000ba4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ba8:	e7cc      	b.n	8000b44 <__aeabi_d2f+0x14>
 8000baa:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bae:	d107      	bne.n	8000bc0 <__aeabi_d2f+0x90>
 8000bb0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bb4:	bf1e      	ittt	ne
 8000bb6:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000bba:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000bbe:	4770      	bxne	lr
 8000bc0:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000bc4:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000bc8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop

08000bd0 <__aeabi_frsub>:
 8000bd0:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000bd4:	e002      	b.n	8000bdc <__addsf3>
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_fsub>:
 8000bd8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000bdc <__addsf3>:
 8000bdc:	0042      	lsls	r2, r0, #1
 8000bde:	bf1f      	itttt	ne
 8000be0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000be4:	ea92 0f03 	teqne	r2, r3
 8000be8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bec:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bf0:	d06a      	beq.n	8000cc8 <__addsf3+0xec>
 8000bf2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bf6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bfa:	bfc1      	itttt	gt
 8000bfc:	18d2      	addgt	r2, r2, r3
 8000bfe:	4041      	eorgt	r1, r0
 8000c00:	4048      	eorgt	r0, r1
 8000c02:	4041      	eorgt	r1, r0
 8000c04:	bfb8      	it	lt
 8000c06:	425b      	neglt	r3, r3
 8000c08:	2b19      	cmp	r3, #25
 8000c0a:	bf88      	it	hi
 8000c0c:	4770      	bxhi	lr
 8000c0e:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000c12:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c16:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000c1a:	bf18      	it	ne
 8000c1c:	4240      	negne	r0, r0
 8000c1e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000c22:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000c26:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000c2a:	bf18      	it	ne
 8000c2c:	4249      	negne	r1, r1
 8000c2e:	ea92 0f03 	teq	r2, r3
 8000c32:	d03f      	beq.n	8000cb4 <__addsf3+0xd8>
 8000c34:	f1a2 0201 	sub.w	r2, r2, #1
 8000c38:	fa41 fc03 	asr.w	ip, r1, r3
 8000c3c:	eb10 000c 	adds.w	r0, r0, ip
 8000c40:	f1c3 0320 	rsb	r3, r3, #32
 8000c44:	fa01 f103 	lsl.w	r1, r1, r3
 8000c48:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c4c:	d502      	bpl.n	8000c54 <__addsf3+0x78>
 8000c4e:	4249      	negs	r1, r1
 8000c50:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c54:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000c58:	d313      	bcc.n	8000c82 <__addsf3+0xa6>
 8000c5a:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000c5e:	d306      	bcc.n	8000c6e <__addsf3+0x92>
 8000c60:	0840      	lsrs	r0, r0, #1
 8000c62:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c66:	f102 0201 	add.w	r2, r2, #1
 8000c6a:	2afe      	cmp	r2, #254	@ 0xfe
 8000c6c:	d251      	bcs.n	8000d12 <__addsf3+0x136>
 8000c6e:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c72:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c76:	bf08      	it	eq
 8000c78:	f020 0001 	biceq.w	r0, r0, #1
 8000c7c:	ea40 0003 	orr.w	r0, r0, r3
 8000c80:	4770      	bx	lr
 8000c82:	0049      	lsls	r1, r1, #1
 8000c84:	eb40 0000 	adc.w	r0, r0, r0
 8000c88:	3a01      	subs	r2, #1
 8000c8a:	bf28      	it	cs
 8000c8c:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c90:	d2ed      	bcs.n	8000c6e <__addsf3+0x92>
 8000c92:	fab0 fc80 	clz	ip, r0
 8000c96:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c9a:	ebb2 020c 	subs.w	r2, r2, ip
 8000c9e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000ca2:	bfaa      	itet	ge
 8000ca4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ca8:	4252      	neglt	r2, r2
 8000caa:	4318      	orrge	r0, r3
 8000cac:	bfbc      	itt	lt
 8000cae:	40d0      	lsrlt	r0, r2
 8000cb0:	4318      	orrlt	r0, r3
 8000cb2:	4770      	bx	lr
 8000cb4:	f092 0f00 	teq	r2, #0
 8000cb8:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000cbc:	bf06      	itte	eq
 8000cbe:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000cc2:	3201      	addeq	r2, #1
 8000cc4:	3b01      	subne	r3, #1
 8000cc6:	e7b5      	b.n	8000c34 <__addsf3+0x58>
 8000cc8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ccc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000cd0:	bf18      	it	ne
 8000cd2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cd6:	d021      	beq.n	8000d1c <__addsf3+0x140>
 8000cd8:	ea92 0f03 	teq	r2, r3
 8000cdc:	d004      	beq.n	8000ce8 <__addsf3+0x10c>
 8000cde:	f092 0f00 	teq	r2, #0
 8000ce2:	bf08      	it	eq
 8000ce4:	4608      	moveq	r0, r1
 8000ce6:	4770      	bx	lr
 8000ce8:	ea90 0f01 	teq	r0, r1
 8000cec:	bf1c      	itt	ne
 8000cee:	2000      	movne	r0, #0
 8000cf0:	4770      	bxne	lr
 8000cf2:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000cf6:	d104      	bne.n	8000d02 <__addsf3+0x126>
 8000cf8:	0040      	lsls	r0, r0, #1
 8000cfa:	bf28      	it	cs
 8000cfc:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000d00:	4770      	bx	lr
 8000d02:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000d06:	bf3c      	itt	cc
 8000d08:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000d0c:	4770      	bxcc	lr
 8000d0e:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000d12:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000d16:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d1a:	4770      	bx	lr
 8000d1c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d20:	bf16      	itet	ne
 8000d22:	4608      	movne	r0, r1
 8000d24:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d28:	4601      	movne	r1, r0
 8000d2a:	0242      	lsls	r2, r0, #9
 8000d2c:	bf06      	itte	eq
 8000d2e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d32:	ea90 0f01 	teqeq	r0, r1
 8000d36:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000d3a:	4770      	bx	lr

08000d3c <__aeabi_ui2f>:
 8000d3c:	f04f 0300 	mov.w	r3, #0
 8000d40:	e004      	b.n	8000d4c <__aeabi_i2f+0x8>
 8000d42:	bf00      	nop

08000d44 <__aeabi_i2f>:
 8000d44:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000d48:	bf48      	it	mi
 8000d4a:	4240      	negmi	r0, r0
 8000d4c:	ea5f 0c00 	movs.w	ip, r0
 8000d50:	bf08      	it	eq
 8000d52:	4770      	bxeq	lr
 8000d54:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000d58:	4601      	mov	r1, r0
 8000d5a:	f04f 0000 	mov.w	r0, #0
 8000d5e:	e01c      	b.n	8000d9a <__aeabi_l2f+0x2a>

08000d60 <__aeabi_ul2f>:
 8000d60:	ea50 0201 	orrs.w	r2, r0, r1
 8000d64:	bf08      	it	eq
 8000d66:	4770      	bxeq	lr
 8000d68:	f04f 0300 	mov.w	r3, #0
 8000d6c:	e00a      	b.n	8000d84 <__aeabi_l2f+0x14>
 8000d6e:	bf00      	nop

08000d70 <__aeabi_l2f>:
 8000d70:	ea50 0201 	orrs.w	r2, r0, r1
 8000d74:	bf08      	it	eq
 8000d76:	4770      	bxeq	lr
 8000d78:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d7c:	d502      	bpl.n	8000d84 <__aeabi_l2f+0x14>
 8000d7e:	4240      	negs	r0, r0
 8000d80:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d84:	ea5f 0c01 	movs.w	ip, r1
 8000d88:	bf02      	ittt	eq
 8000d8a:	4684      	moveq	ip, r0
 8000d8c:	4601      	moveq	r1, r0
 8000d8e:	2000      	moveq	r0, #0
 8000d90:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d94:	bf08      	it	eq
 8000d96:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d9a:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d9e:	fabc f28c 	clz	r2, ip
 8000da2:	3a08      	subs	r2, #8
 8000da4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000da8:	db10      	blt.n	8000dcc <__aeabi_l2f+0x5c>
 8000daa:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dae:	4463      	add	r3, ip
 8000db0:	fa00 fc02 	lsl.w	ip, r0, r2
 8000db4:	f1c2 0220 	rsb	r2, r2, #32
 8000db8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000dbc:	fa20 f202 	lsr.w	r2, r0, r2
 8000dc0:	eb43 0002 	adc.w	r0, r3, r2
 8000dc4:	bf08      	it	eq
 8000dc6:	f020 0001 	biceq.w	r0, r0, #1
 8000dca:	4770      	bx	lr
 8000dcc:	f102 0220 	add.w	r2, r2, #32
 8000dd0:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dd4:	f1c2 0220 	rsb	r2, r2, #32
 8000dd8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ddc:	fa21 f202 	lsr.w	r2, r1, r2
 8000de0:	eb43 0002 	adc.w	r0, r3, r2
 8000de4:	bf08      	it	eq
 8000de6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dea:	4770      	bx	lr

08000dec <__aeabi_uldivmod>:
 8000dec:	b953      	cbnz	r3, 8000e04 <__aeabi_uldivmod+0x18>
 8000dee:	b94a      	cbnz	r2, 8000e04 <__aeabi_uldivmod+0x18>
 8000df0:	2900      	cmp	r1, #0
 8000df2:	bf08      	it	eq
 8000df4:	2800      	cmpeq	r0, #0
 8000df6:	bf1c      	itt	ne
 8000df8:	f04f 31ff 	movne.w	r1, #4294967295
 8000dfc:	f04f 30ff 	movne.w	r0, #4294967295
 8000e00:	f000 b988 	b.w	8001114 <__aeabi_idiv0>
 8000e04:	f1ad 0c08 	sub.w	ip, sp, #8
 8000e08:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000e0c:	f000 f806 	bl	8000e1c <__udivmoddi4>
 8000e10:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e18:	b004      	add	sp, #16
 8000e1a:	4770      	bx	lr

08000e1c <__udivmoddi4>:
 8000e1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e20:	9d08      	ldr	r5, [sp, #32]
 8000e22:	468e      	mov	lr, r1
 8000e24:	4604      	mov	r4, r0
 8000e26:	4688      	mov	r8, r1
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d14a      	bne.n	8000ec2 <__udivmoddi4+0xa6>
 8000e2c:	428a      	cmp	r2, r1
 8000e2e:	4617      	mov	r7, r2
 8000e30:	d962      	bls.n	8000ef8 <__udivmoddi4+0xdc>
 8000e32:	fab2 f682 	clz	r6, r2
 8000e36:	b14e      	cbz	r6, 8000e4c <__udivmoddi4+0x30>
 8000e38:	f1c6 0320 	rsb	r3, r6, #32
 8000e3c:	fa01 f806 	lsl.w	r8, r1, r6
 8000e40:	fa20 f303 	lsr.w	r3, r0, r3
 8000e44:	40b7      	lsls	r7, r6
 8000e46:	ea43 0808 	orr.w	r8, r3, r8
 8000e4a:	40b4      	lsls	r4, r6
 8000e4c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e50:	fa1f fc87 	uxth.w	ip, r7
 8000e54:	fbb8 f1fe 	udiv	r1, r8, lr
 8000e58:	0c23      	lsrs	r3, r4, #16
 8000e5a:	fb0e 8811 	mls	r8, lr, r1, r8
 8000e5e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e62:	fb01 f20c 	mul.w	r2, r1, ip
 8000e66:	429a      	cmp	r2, r3
 8000e68:	d909      	bls.n	8000e7e <__udivmoddi4+0x62>
 8000e6a:	18fb      	adds	r3, r7, r3
 8000e6c:	f101 30ff 	add.w	r0, r1, #4294967295
 8000e70:	f080 80ea 	bcs.w	8001048 <__udivmoddi4+0x22c>
 8000e74:	429a      	cmp	r2, r3
 8000e76:	f240 80e7 	bls.w	8001048 <__udivmoddi4+0x22c>
 8000e7a:	3902      	subs	r1, #2
 8000e7c:	443b      	add	r3, r7
 8000e7e:	1a9a      	subs	r2, r3, r2
 8000e80:	b2a3      	uxth	r3, r4
 8000e82:	fbb2 f0fe 	udiv	r0, r2, lr
 8000e86:	fb0e 2210 	mls	r2, lr, r0, r2
 8000e8a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e8e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000e92:	459c      	cmp	ip, r3
 8000e94:	d909      	bls.n	8000eaa <__udivmoddi4+0x8e>
 8000e96:	18fb      	adds	r3, r7, r3
 8000e98:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e9c:	f080 80d6 	bcs.w	800104c <__udivmoddi4+0x230>
 8000ea0:	459c      	cmp	ip, r3
 8000ea2:	f240 80d3 	bls.w	800104c <__udivmoddi4+0x230>
 8000ea6:	443b      	add	r3, r7
 8000ea8:	3802      	subs	r0, #2
 8000eaa:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000eae:	eba3 030c 	sub.w	r3, r3, ip
 8000eb2:	2100      	movs	r1, #0
 8000eb4:	b11d      	cbz	r5, 8000ebe <__udivmoddi4+0xa2>
 8000eb6:	40f3      	lsrs	r3, r6
 8000eb8:	2200      	movs	r2, #0
 8000eba:	e9c5 3200 	strd	r3, r2, [r5]
 8000ebe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ec2:	428b      	cmp	r3, r1
 8000ec4:	d905      	bls.n	8000ed2 <__udivmoddi4+0xb6>
 8000ec6:	b10d      	cbz	r5, 8000ecc <__udivmoddi4+0xb0>
 8000ec8:	e9c5 0100 	strd	r0, r1, [r5]
 8000ecc:	2100      	movs	r1, #0
 8000ece:	4608      	mov	r0, r1
 8000ed0:	e7f5      	b.n	8000ebe <__udivmoddi4+0xa2>
 8000ed2:	fab3 f183 	clz	r1, r3
 8000ed6:	2900      	cmp	r1, #0
 8000ed8:	d146      	bne.n	8000f68 <__udivmoddi4+0x14c>
 8000eda:	4573      	cmp	r3, lr
 8000edc:	d302      	bcc.n	8000ee4 <__udivmoddi4+0xc8>
 8000ede:	4282      	cmp	r2, r0
 8000ee0:	f200 8105 	bhi.w	80010ee <__udivmoddi4+0x2d2>
 8000ee4:	1a84      	subs	r4, r0, r2
 8000ee6:	eb6e 0203 	sbc.w	r2, lr, r3
 8000eea:	2001      	movs	r0, #1
 8000eec:	4690      	mov	r8, r2
 8000eee:	2d00      	cmp	r5, #0
 8000ef0:	d0e5      	beq.n	8000ebe <__udivmoddi4+0xa2>
 8000ef2:	e9c5 4800 	strd	r4, r8, [r5]
 8000ef6:	e7e2      	b.n	8000ebe <__udivmoddi4+0xa2>
 8000ef8:	2a00      	cmp	r2, #0
 8000efa:	f000 8090 	beq.w	800101e <__udivmoddi4+0x202>
 8000efe:	fab2 f682 	clz	r6, r2
 8000f02:	2e00      	cmp	r6, #0
 8000f04:	f040 80a4 	bne.w	8001050 <__udivmoddi4+0x234>
 8000f08:	1a8a      	subs	r2, r1, r2
 8000f0a:	0c03      	lsrs	r3, r0, #16
 8000f0c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f10:	b280      	uxth	r0, r0
 8000f12:	b2bc      	uxth	r4, r7
 8000f14:	2101      	movs	r1, #1
 8000f16:	fbb2 fcfe 	udiv	ip, r2, lr
 8000f1a:	fb0e 221c 	mls	r2, lr, ip, r2
 8000f1e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000f22:	fb04 f20c 	mul.w	r2, r4, ip
 8000f26:	429a      	cmp	r2, r3
 8000f28:	d907      	bls.n	8000f3a <__udivmoddi4+0x11e>
 8000f2a:	18fb      	adds	r3, r7, r3
 8000f2c:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000f30:	d202      	bcs.n	8000f38 <__udivmoddi4+0x11c>
 8000f32:	429a      	cmp	r2, r3
 8000f34:	f200 80e0 	bhi.w	80010f8 <__udivmoddi4+0x2dc>
 8000f38:	46c4      	mov	ip, r8
 8000f3a:	1a9b      	subs	r3, r3, r2
 8000f3c:	fbb3 f2fe 	udiv	r2, r3, lr
 8000f40:	fb0e 3312 	mls	r3, lr, r2, r3
 8000f44:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000f48:	fb02 f404 	mul.w	r4, r2, r4
 8000f4c:	429c      	cmp	r4, r3
 8000f4e:	d907      	bls.n	8000f60 <__udivmoddi4+0x144>
 8000f50:	18fb      	adds	r3, r7, r3
 8000f52:	f102 30ff 	add.w	r0, r2, #4294967295
 8000f56:	d202      	bcs.n	8000f5e <__udivmoddi4+0x142>
 8000f58:	429c      	cmp	r4, r3
 8000f5a:	f200 80ca 	bhi.w	80010f2 <__udivmoddi4+0x2d6>
 8000f5e:	4602      	mov	r2, r0
 8000f60:	1b1b      	subs	r3, r3, r4
 8000f62:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000f66:	e7a5      	b.n	8000eb4 <__udivmoddi4+0x98>
 8000f68:	f1c1 0620 	rsb	r6, r1, #32
 8000f6c:	408b      	lsls	r3, r1
 8000f6e:	fa22 f706 	lsr.w	r7, r2, r6
 8000f72:	431f      	orrs	r7, r3
 8000f74:	fa0e f401 	lsl.w	r4, lr, r1
 8000f78:	fa20 f306 	lsr.w	r3, r0, r6
 8000f7c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000f80:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000f84:	4323      	orrs	r3, r4
 8000f86:	fa00 f801 	lsl.w	r8, r0, r1
 8000f8a:	fa1f fc87 	uxth.w	ip, r7
 8000f8e:	fbbe f0f9 	udiv	r0, lr, r9
 8000f92:	0c1c      	lsrs	r4, r3, #16
 8000f94:	fb09 ee10 	mls	lr, r9, r0, lr
 8000f98:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000f9c:	fb00 fe0c 	mul.w	lr, r0, ip
 8000fa0:	45a6      	cmp	lr, r4
 8000fa2:	fa02 f201 	lsl.w	r2, r2, r1
 8000fa6:	d909      	bls.n	8000fbc <__udivmoddi4+0x1a0>
 8000fa8:	193c      	adds	r4, r7, r4
 8000faa:	f100 3aff 	add.w	sl, r0, #4294967295
 8000fae:	f080 809c 	bcs.w	80010ea <__udivmoddi4+0x2ce>
 8000fb2:	45a6      	cmp	lr, r4
 8000fb4:	f240 8099 	bls.w	80010ea <__udivmoddi4+0x2ce>
 8000fb8:	3802      	subs	r0, #2
 8000fba:	443c      	add	r4, r7
 8000fbc:	eba4 040e 	sub.w	r4, r4, lr
 8000fc0:	fa1f fe83 	uxth.w	lr, r3
 8000fc4:	fbb4 f3f9 	udiv	r3, r4, r9
 8000fc8:	fb09 4413 	mls	r4, r9, r3, r4
 8000fcc:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000fd0:	fb03 fc0c 	mul.w	ip, r3, ip
 8000fd4:	45a4      	cmp	ip, r4
 8000fd6:	d908      	bls.n	8000fea <__udivmoddi4+0x1ce>
 8000fd8:	193c      	adds	r4, r7, r4
 8000fda:	f103 3eff 	add.w	lr, r3, #4294967295
 8000fde:	f080 8082 	bcs.w	80010e6 <__udivmoddi4+0x2ca>
 8000fe2:	45a4      	cmp	ip, r4
 8000fe4:	d97f      	bls.n	80010e6 <__udivmoddi4+0x2ca>
 8000fe6:	3b02      	subs	r3, #2
 8000fe8:	443c      	add	r4, r7
 8000fea:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000fee:	eba4 040c 	sub.w	r4, r4, ip
 8000ff2:	fba0 ec02 	umull	lr, ip, r0, r2
 8000ff6:	4564      	cmp	r4, ip
 8000ff8:	4673      	mov	r3, lr
 8000ffa:	46e1      	mov	r9, ip
 8000ffc:	d362      	bcc.n	80010c4 <__udivmoddi4+0x2a8>
 8000ffe:	d05f      	beq.n	80010c0 <__udivmoddi4+0x2a4>
 8001000:	b15d      	cbz	r5, 800101a <__udivmoddi4+0x1fe>
 8001002:	ebb8 0203 	subs.w	r2, r8, r3
 8001006:	eb64 0409 	sbc.w	r4, r4, r9
 800100a:	fa04 f606 	lsl.w	r6, r4, r6
 800100e:	fa22 f301 	lsr.w	r3, r2, r1
 8001012:	431e      	orrs	r6, r3
 8001014:	40cc      	lsrs	r4, r1
 8001016:	e9c5 6400 	strd	r6, r4, [r5]
 800101a:	2100      	movs	r1, #0
 800101c:	e74f      	b.n	8000ebe <__udivmoddi4+0xa2>
 800101e:	fbb1 fcf2 	udiv	ip, r1, r2
 8001022:	0c01      	lsrs	r1, r0, #16
 8001024:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8001028:	b280      	uxth	r0, r0
 800102a:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800102e:	463b      	mov	r3, r7
 8001030:	4638      	mov	r0, r7
 8001032:	463c      	mov	r4, r7
 8001034:	46b8      	mov	r8, r7
 8001036:	46be      	mov	lr, r7
 8001038:	2620      	movs	r6, #32
 800103a:	fbb1 f1f7 	udiv	r1, r1, r7
 800103e:	eba2 0208 	sub.w	r2, r2, r8
 8001042:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8001046:	e766      	b.n	8000f16 <__udivmoddi4+0xfa>
 8001048:	4601      	mov	r1, r0
 800104a:	e718      	b.n	8000e7e <__udivmoddi4+0x62>
 800104c:	4610      	mov	r0, r2
 800104e:	e72c      	b.n	8000eaa <__udivmoddi4+0x8e>
 8001050:	f1c6 0220 	rsb	r2, r6, #32
 8001054:	fa2e f302 	lsr.w	r3, lr, r2
 8001058:	40b7      	lsls	r7, r6
 800105a:	40b1      	lsls	r1, r6
 800105c:	fa20 f202 	lsr.w	r2, r0, r2
 8001060:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8001064:	430a      	orrs	r2, r1
 8001066:	fbb3 f8fe 	udiv	r8, r3, lr
 800106a:	b2bc      	uxth	r4, r7
 800106c:	fb0e 3318 	mls	r3, lr, r8, r3
 8001070:	0c11      	lsrs	r1, r2, #16
 8001072:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001076:	fb08 f904 	mul.w	r9, r8, r4
 800107a:	40b0      	lsls	r0, r6
 800107c:	4589      	cmp	r9, r1
 800107e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8001082:	b280      	uxth	r0, r0
 8001084:	d93e      	bls.n	8001104 <__udivmoddi4+0x2e8>
 8001086:	1879      	adds	r1, r7, r1
 8001088:	f108 3cff 	add.w	ip, r8, #4294967295
 800108c:	d201      	bcs.n	8001092 <__udivmoddi4+0x276>
 800108e:	4589      	cmp	r9, r1
 8001090:	d81f      	bhi.n	80010d2 <__udivmoddi4+0x2b6>
 8001092:	eba1 0109 	sub.w	r1, r1, r9
 8001096:	fbb1 f9fe 	udiv	r9, r1, lr
 800109a:	fb09 f804 	mul.w	r8, r9, r4
 800109e:	fb0e 1119 	mls	r1, lr, r9, r1
 80010a2:	b292      	uxth	r2, r2
 80010a4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80010a8:	4542      	cmp	r2, r8
 80010aa:	d229      	bcs.n	8001100 <__udivmoddi4+0x2e4>
 80010ac:	18ba      	adds	r2, r7, r2
 80010ae:	f109 31ff 	add.w	r1, r9, #4294967295
 80010b2:	d2c4      	bcs.n	800103e <__udivmoddi4+0x222>
 80010b4:	4542      	cmp	r2, r8
 80010b6:	d2c2      	bcs.n	800103e <__udivmoddi4+0x222>
 80010b8:	f1a9 0102 	sub.w	r1, r9, #2
 80010bc:	443a      	add	r2, r7
 80010be:	e7be      	b.n	800103e <__udivmoddi4+0x222>
 80010c0:	45f0      	cmp	r8, lr
 80010c2:	d29d      	bcs.n	8001000 <__udivmoddi4+0x1e4>
 80010c4:	ebbe 0302 	subs.w	r3, lr, r2
 80010c8:	eb6c 0c07 	sbc.w	ip, ip, r7
 80010cc:	3801      	subs	r0, #1
 80010ce:	46e1      	mov	r9, ip
 80010d0:	e796      	b.n	8001000 <__udivmoddi4+0x1e4>
 80010d2:	eba7 0909 	sub.w	r9, r7, r9
 80010d6:	4449      	add	r1, r9
 80010d8:	f1a8 0c02 	sub.w	ip, r8, #2
 80010dc:	fbb1 f9fe 	udiv	r9, r1, lr
 80010e0:	fb09 f804 	mul.w	r8, r9, r4
 80010e4:	e7db      	b.n	800109e <__udivmoddi4+0x282>
 80010e6:	4673      	mov	r3, lr
 80010e8:	e77f      	b.n	8000fea <__udivmoddi4+0x1ce>
 80010ea:	4650      	mov	r0, sl
 80010ec:	e766      	b.n	8000fbc <__udivmoddi4+0x1a0>
 80010ee:	4608      	mov	r0, r1
 80010f0:	e6fd      	b.n	8000eee <__udivmoddi4+0xd2>
 80010f2:	443b      	add	r3, r7
 80010f4:	3a02      	subs	r2, #2
 80010f6:	e733      	b.n	8000f60 <__udivmoddi4+0x144>
 80010f8:	f1ac 0c02 	sub.w	ip, ip, #2
 80010fc:	443b      	add	r3, r7
 80010fe:	e71c      	b.n	8000f3a <__udivmoddi4+0x11e>
 8001100:	4649      	mov	r1, r9
 8001102:	e79c      	b.n	800103e <__udivmoddi4+0x222>
 8001104:	eba1 0109 	sub.w	r1, r1, r9
 8001108:	46c4      	mov	ip, r8
 800110a:	fbb1 f9fe 	udiv	r9, r1, lr
 800110e:	fb09 f804 	mul.w	r8, r9, r4
 8001112:	e7c4      	b.n	800109e <__udivmoddi4+0x282>

08001114 <__aeabi_idiv0>:
 8001114:	4770      	bx	lr
 8001116:	bf00      	nop

08001118 <sign>:
#include <math.h>

/**
 * @brief Sign function: returns +1, -1, or 0 based on input value.
 */
int8_t sign(float32_t x) {
 8001118:	b480      	push	{r7}
 800111a:	b083      	sub	sp, #12
 800111c:	af00      	add	r7, sp, #0
 800111e:	ed87 0a01 	vstr	s0, [r7, #4]
    if (x > 0.0f) {
 8001122:	edd7 7a01 	vldr	s15, [r7, #4]
 8001126:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800112a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800112e:	dd01      	ble.n	8001134 <sign+0x1c>
        return 1;
 8001130:	2301      	movs	r3, #1
 8001132:	e00a      	b.n	800114a <sign+0x32>
    } else if (x < 0.0f) {
 8001134:	edd7 7a01 	vldr	s15, [r7, #4]
 8001138:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800113c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001140:	d502      	bpl.n	8001148 <sign+0x30>
        return -1;
 8001142:	f04f 33ff 	mov.w	r3, #4294967295
 8001146:	e000      	b.n	800114a <sign+0x32>
    } else {
        return 0;
 8001148:	2300      	movs	r3, #0
    }
}
 800114a:	4618      	mov	r0, r3
 800114c:	370c      	adds	r7, #12
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr

08001156 <Backlash_Init>:
/**
 * @brief Initialize the backlash controller.
 * @param ctrl Pointer to controller structure.
 * @param backlash_width Estimated or measured backlash gap.
 */
void Backlash_Init(BacklashController *ctrl, float32_t backlash_width) {
 8001156:	b480      	push	{r7}
 8001158:	b083      	sub	sp, #12
 800115a:	af00      	add	r7, sp, #0
 800115c:	6078      	str	r0, [r7, #4]
 800115e:	ed87 0a00 	vstr	s0, [r7]
    ctrl->backlash_width = backlash_width;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	683a      	ldr	r2, [r7, #0]
 8001166:	601a      	str	r2, [r3, #0]
    ctrl->backlash_offset = 0.0f;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	f04f 0200 	mov.w	r2, #0
 800116e:	605a      	str	r2, [r3, #4]
    ctrl->direction_prev = 0;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	2200      	movs	r2, #0
 8001174:	721a      	strb	r2, [r3, #8]
    ctrl->state = TRANSITION;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	2200      	movs	r2, #0
 800117a:	725a      	strb	r2, [r3, #9]
}
 800117c:	bf00      	nop
 800117e:	370c      	adds	r7, #12
 8001180:	46bd      	mov	sp, r7
 8001182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001186:	4770      	bx	lr

08001188 <Backlash_Update>:
 * @param pos_ref Desired reference position.
 * @param pos_act Actual measured position.
 * @param vel Measured or estimated velocity.
 * @return Compensated position to use in control.
 */
float32_t Backlash_Update(BacklashController *ctrl, float32_t pos_ref, float32_t pos_act, float32_t vel) {
 8001188:	b580      	push	{r7, lr}
 800118a:	b086      	sub	sp, #24
 800118c:	af00      	add	r7, sp, #0
 800118e:	60f8      	str	r0, [r7, #12]
 8001190:	ed87 0a02 	vstr	s0, [r7, #8]
 8001194:	edc7 0a01 	vstr	s1, [r7, #4]
 8001198:	ed87 1a00 	vstr	s2, [r7]
    int8_t direction_now = sign(vel);
 800119c:	ed97 0a00 	vldr	s0, [r7]
 80011a0:	f7ff ffba 	bl	8001118 <sign>
 80011a4:	4603      	mov	r3, r0
 80011a6:	75fb      	strb	r3, [r7, #23]

    // Detect direction change
    if (direction_now != ctrl->direction_prev && direction_now != 0) {
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80011ae:	f997 2017 	ldrsb.w	r2, [r7, #23]
 80011b2:	429a      	cmp	r2, r3
 80011b4:	d01a      	beq.n	80011ec <Backlash_Update+0x64>
 80011b6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d016      	beq.n	80011ec <Backlash_Update+0x64>
        ctrl->direction_prev = direction_now;
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	7dfa      	ldrb	r2, [r7, #23]
 80011c2:	721a      	strb	r2, [r3, #8]
        ctrl->state = TRANSITION;
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	2200      	movs	r2, #0
 80011c8:	725a      	strb	r2, [r3, #9]

        if (direction_now > 0) {
 80011ca:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	dd04      	ble.n	80011dc <Backlash_Update+0x54>
            ctrl->backlash_offset = ctrl->backlash_width;
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	681a      	ldr	r2, [r3, #0]
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	605a      	str	r2, [r3, #4]
 80011da:	e007      	b.n	80011ec <Backlash_Update+0x64>
        } else {
            ctrl->backlash_offset = -ctrl->backlash_width;
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	edd3 7a00 	vldr	s15, [r3]
 80011e2:	eef1 7a67 	vneg.f32	s15, s15
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	edc3 7a01 	vstr	s15, [r3, #4]
        }
    }

    // Apply backlash offset to reference
    float32_t pos_ref_compensated = pos_ref + ctrl->backlash_offset;
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	edd3 7a01 	vldr	s15, [r3, #4]
 80011f2:	ed97 7a02 	vldr	s14, [r7, #8]
 80011f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011fa:	edc7 7a04 	vstr	s15, [r7, #16]

    // Check if backlash has been taken up
    if (ctrl->state == TRANSITION) {
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8001204:	2b00      	cmp	r3, #0
 8001206:	d11e      	bne.n	8001246 <Backlash_Update+0xbe>
        if (fabsf(pos_ref - pos_act) >= ctrl->backlash_width) {
 8001208:	ed97 7a02 	vldr	s14, [r7, #8]
 800120c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001210:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001214:	eeb0 7ae7 	vabs.f32	s14, s15
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	edd3 7a00 	vldr	s15, [r3]
 800121e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001222:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001226:	db0e      	blt.n	8001246 <Backlash_Update+0xbe>
            if (direction_now > 0) {
 8001228:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800122c:	2b00      	cmp	r3, #0
 800122e:	dd03      	ble.n	8001238 <Backlash_Update+0xb0>
                ctrl->state = ENGAGED_POS;
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	2201      	movs	r2, #1
 8001234:	725a      	strb	r2, [r3, #9]
 8001236:	e002      	b.n	800123e <Backlash_Update+0xb6>
            } else {
                ctrl->state = ENGAGED_NEG;
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	22ff      	movs	r2, #255	@ 0xff
 800123c:	725a      	strb	r2, [r3, #9]
            }
            ctrl->backlash_offset = 0.0f;
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	f04f 0200 	mov.w	r2, #0
 8001244:	605a      	str	r2, [r3, #4]
        }
    }

    return pos_ref_compensated;
 8001246:	693b      	ldr	r3, [r7, #16]
 8001248:	ee07 3a90 	vmov	s15, r3
}
 800124c:	eeb0 0a67 	vmov.f32	s0, s15
 8001250:	3718      	adds	r7, #24
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}

08001256 <modbus_heartbeat_init>:

#include "Based_System_Communication.h"

#define Offet 480.0f

void modbus_heartbeat_init(ModbusHandleTypedef *hmodbus) {
 8001256:	b480      	push	{r7}
 8001258:	b083      	sub	sp, #12
 800125a:	af00      	add	r7, sp, #0
 800125c:	6078      	str	r0, [r7, #4]
	hmodbus->RegisterAddress[0x00].U16 = 22881;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	f645 1261 	movw	r2, #22881	@ 0x5961
 8001266:	801a      	strh	r2, [r3, #0]
}
 8001268:	bf00      	nop
 800126a:	370c      	adds	r7, #12
 800126c:	46bd      	mov	sp, r7
 800126e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001272:	4770      	bx	lr

08001274 <modbus_heartbeat>:

void modbus_heartbeat(ModbusHandleTypedef *hmodbus) {
 8001274:	b480      	push	{r7}
 8001276:	b083      	sub	sp, #12
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
	if (hmodbus->RegisterAddress[0x00].U16 == 18537) {
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	881b      	ldrh	r3, [r3, #0]
 8001282:	f644 0269 	movw	r2, #18537	@ 0x4869
 8001286:	4293      	cmp	r3, r2
 8001288:	d104      	bne.n	8001294 <modbus_heartbeat+0x20>
		hmodbus->RegisterAddress[0x00].U16 = 22881;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	f645 1261 	movw	r2, #22881	@ 0x5961
 8001292:	801a      	strh	r2, [r3, #0]
	}
}
 8001294:	bf00      	nop
 8001296:	370c      	adds	r7, #12
 8001298:	46bd      	mov	sp, r7
 800129a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129e:	4770      	bx	lr

080012a0 <modbus_Base_System_Status>:

uint8_t modbus_Base_System_Status(ModbusHandleTypedef *hmodbus) {
 80012a0:	b480      	push	{r7}
 80012a2:	b085      	sub	sp, #20
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
	uint8_t status = hmodbus->RegisterAddress[0x01].U16;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	3302      	adds	r3, #2
 80012ae:	881b      	ldrh	r3, [r3, #0]
 80012b0:	73fb      	strb	r3, [r7, #15]
	return status;
 80012b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80012b4:	4618      	mov	r0, r3
 80012b6:	3714      	adds	r7, #20
 80012b8:	46bd      	mov	sp, r7
 80012ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012be:	4770      	bx	lr

080012c0 <R_Theta_moving_Status>:
//
//	}
	return status;
}

void R_Theta_moving_Status(ModbusHandleTypedef *hmodbus, uint8_t Moving_Status) {
 80012c0:	b480      	push	{r7}
 80012c2:	b083      	sub	sp, #12
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
 80012c8:	460b      	mov	r3, r1
 80012ca:	70fb      	strb	r3, [r7, #3]
	hmodbus->RegisterAddress[0x10].U16 = Moving_Status;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	3320      	adds	r3, #32
 80012d2:	78fa      	ldrb	r2, [r7, #3]
 80012d4:	b292      	uxth	r2, r2
 80012d6:	801a      	strh	r2, [r3, #0]
}
 80012d8:	bf00      	nop
 80012da:	370c      	adds	r7, #12
 80012dc:	46bd      	mov	sp, r7
 80012de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e2:	4770      	bx	lr

080012e4 <modbus_Update_All>:
void modbus_theta_acceleration(ModbusHandleTypedef *hmodbus, float theta_accel) {
	hmodbus->RegisterAddress[0x16].U16 = theta_accel * 10.0;
}
void modbus_Update_All(ModbusHandleTypedef *hmodbus, float r_pos,
		float theta_pos, float r_Velo, float theta_Velo, float r_accel,
		float theta_accel) {
 80012e4:	b480      	push	{r7}
 80012e6:	b089      	sub	sp, #36	@ 0x24
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	61f8      	str	r0, [r7, #28]
 80012ec:	ed87 0a06 	vstr	s0, [r7, #24]
 80012f0:	edc7 0a05 	vstr	s1, [r7, #20]
 80012f4:	ed87 1a04 	vstr	s2, [r7, #16]
 80012f8:	edc7 1a03 	vstr	s3, [r7, #12]
 80012fc:	ed87 2a02 	vstr	s4, [r7, #8]
 8001300:	edc7 2a01 	vstr	s5, [r7, #4]
	hmodbus->RegisterAddress[0x11].U16 = r_pos;
 8001304:	69fb      	ldr	r3, [r7, #28]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	3322      	adds	r3, #34	@ 0x22
 800130a:	edd7 7a06 	vldr	s15, [r7, #24]
 800130e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001312:	ee17 2a90 	vmov	r2, s15
 8001316:	b292      	uxth	r2, r2
 8001318:	801a      	strh	r2, [r3, #0]
	hmodbus->RegisterAddress[0x12].U16 = theta_pos;
 800131a:	69fb      	ldr	r3, [r7, #28]
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	3324      	adds	r3, #36	@ 0x24
 8001320:	edd7 7a05 	vldr	s15, [r7, #20]
 8001324:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001328:	ee17 2a90 	vmov	r2, s15
 800132c:	b292      	uxth	r2, r2
 800132e:	801a      	strh	r2, [r3, #0]
	hmodbus->RegisterAddress[0x13].U16 = r_Velo;
 8001330:	69fb      	ldr	r3, [r7, #28]
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	3326      	adds	r3, #38	@ 0x26
 8001336:	edd7 7a04 	vldr	s15, [r7, #16]
 800133a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800133e:	ee17 2a90 	vmov	r2, s15
 8001342:	b292      	uxth	r2, r2
 8001344:	801a      	strh	r2, [r3, #0]
	hmodbus->RegisterAddress[0x14].U16 = theta_Velo;
 8001346:	69fb      	ldr	r3, [r7, #28]
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	3328      	adds	r3, #40	@ 0x28
 800134c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001350:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001354:	ee17 2a90 	vmov	r2, s15
 8001358:	b292      	uxth	r2, r2
 800135a:	801a      	strh	r2, [r3, #0]
	hmodbus->RegisterAddress[0x15].U16 = r_accel;
 800135c:	69fb      	ldr	r3, [r7, #28]
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	332a      	adds	r3, #42	@ 0x2a
 8001362:	edd7 7a02 	vldr	s15, [r7, #8]
 8001366:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800136a:	ee17 2a90 	vmov	r2, s15
 800136e:	b292      	uxth	r2, r2
 8001370:	801a      	strh	r2, [r3, #0]
	hmodbus->RegisterAddress[0x16].U16 = theta_accel;
 8001372:	69fb      	ldr	r3, [r7, #28]
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	332c      	adds	r3, #44	@ 0x2c
 8001378:	edd7 7a01 	vldr	s15, [r7, #4]
 800137c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001380:	ee17 2a90 	vmov	r2, s15
 8001384:	b292      	uxth	r2, r2
 8001386:	801a      	strh	r2, [r3, #0]
}
 8001388:	bf00      	nop
 800138a:	3724      	adds	r7, #36	@ 0x24
 800138c:	46bd      	mov	sp, r7
 800138e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001392:	4770      	bx	lr

08001394 <set_Target_Position_ten_points>:

void set_Target_Position_ten_points(ModbusHandleTypedef *hmodbus, float r_pos,
		float theta_pos, uint8_t index) //
{
 8001394:	b480      	push	{r7}
 8001396:	b085      	sub	sp, #20
 8001398:	af00      	add	r7, sp, #0
 800139a:	60f8      	str	r0, [r7, #12]
 800139c:	ed87 0a02 	vstr	s0, [r7, #8]
 80013a0:	edc7 0a01 	vstr	s1, [r7, #4]
 80013a4:	460b      	mov	r3, r1
 80013a6:	70fb      	strb	r3, [r7, #3]
	if (index >= 0 && index <= 9) {
 80013a8:	78fb      	ldrb	r3, [r7, #3]
 80013aa:	2b09      	cmp	r3, #9
 80013ac:	d81c      	bhi.n	80013e8 <set_Target_Position_ten_points+0x54>
		hmodbus->RegisterAddress[0x20 + index * 2].U16 = r_pos;
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	685a      	ldr	r2, [r3, #4]
 80013b2:	78fb      	ldrb	r3, [r7, #3]
 80013b4:	3310      	adds	r3, #16
 80013b6:	009b      	lsls	r3, r3, #2
 80013b8:	4413      	add	r3, r2
 80013ba:	edd7 7a02 	vldr	s15, [r7, #8]
 80013be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80013c2:	ee17 2a90 	vmov	r2, s15
 80013c6:	b292      	uxth	r2, r2
 80013c8:	801a      	strh	r2, [r3, #0]
		hmodbus->RegisterAddress[0x20 + (index * 2) + 1].U16 = theta_pos;
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	685a      	ldr	r2, [r3, #4]
 80013ce:	78fb      	ldrb	r3, [r7, #3]
 80013d0:	005b      	lsls	r3, r3, #1
 80013d2:	3321      	adds	r3, #33	@ 0x21
 80013d4:	005b      	lsls	r3, r3, #1
 80013d6:	4413      	add	r3, r2
 80013d8:	edd7 7a01 	vldr	s15, [r7, #4]
 80013dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80013e0:	ee17 2a90 	vmov	r2, s15
 80013e4:	b292      	uxth	r2, r2
 80013e6:	801a      	strh	r2, [r3, #0]
	}
}
 80013e8:	bf00      	nop
 80013ea:	3714      	adds	r7, #20
 80013ec:	46bd      	mov	sp, r7
 80013ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f2:	4770      	bx	lr

080013f4 <modbus_set_goal_r_position>:
uint16_t modbus_set_goal_r_position(ModbusHandleTypedef *hmodbus) {
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b084      	sub	sp, #16
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
	uint16_t goal_r_position = hmodbus->RegisterAddress[0x40].U16;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	3380      	adds	r3, #128	@ 0x80
 8001402:	881b      	ldrh	r3, [r3, #0]
 8001404:	81fb      	strh	r3, [r7, #14]
	return goal_r_position / 10.0;
 8001406:	89fb      	ldrh	r3, [r7, #14]
 8001408:	4618      	mov	r0, r3
 800140a:	f7ff f857 	bl	80004bc <__aeabi_i2d>
 800140e:	f04f 0200 	mov.w	r2, #0
 8001412:	4b07      	ldr	r3, [pc, #28]	@ (8001430 <modbus_set_goal_r_position+0x3c>)
 8001414:	f7ff f9e6 	bl	80007e4 <__aeabi_ddiv>
 8001418:	4602      	mov	r2, r0
 800141a:	460b      	mov	r3, r1
 800141c:	4610      	mov	r0, r2
 800141e:	4619      	mov	r1, r3
 8001420:	f7ff fb66 	bl	8000af0 <__aeabi_d2uiz>
 8001424:	4603      	mov	r3, r0
 8001426:	b29b      	uxth	r3, r3
}
 8001428:	4618      	mov	r0, r3
 800142a:	3710      	adds	r7, #16
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}
 8001430:	40240000 	.word	0x40240000

08001434 <modbus_set_goal_theta_position>:
uint16_t modbus_set_goal_theta_position(ModbusHandleTypedef *hmodbus) {
 8001434:	b580      	push	{r7, lr}
 8001436:	b084      	sub	sp, #16
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
	uint16_t goal_theta_position = hmodbus->RegisterAddress[0x41].U16;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	3382      	adds	r3, #130	@ 0x82
 8001442:	881b      	ldrh	r3, [r3, #0]
 8001444:	81fb      	strh	r3, [r7, #14]
	return goal_theta_position / 10.0;
 8001446:	89fb      	ldrh	r3, [r7, #14]
 8001448:	4618      	mov	r0, r3
 800144a:	f7ff f837 	bl	80004bc <__aeabi_i2d>
 800144e:	f04f 0200 	mov.w	r2, #0
 8001452:	4b07      	ldr	r3, [pc, #28]	@ (8001470 <modbus_set_goal_theta_position+0x3c>)
 8001454:	f7ff f9c6 	bl	80007e4 <__aeabi_ddiv>
 8001458:	4602      	mov	r2, r0
 800145a:	460b      	mov	r3, r1
 800145c:	4610      	mov	r0, r2
 800145e:	4619      	mov	r1, r3
 8001460:	f7ff fb46 	bl	8000af0 <__aeabi_d2uiz>
 8001464:	4603      	mov	r3, r0
 8001466:	b29b      	uxth	r3, r3
}
 8001468:	4618      	mov	r0, r3
 800146a:	3710      	adds	r7, #16
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}
 8001470:	40240000 	.word	0x40240000
 8001474:	00000000 	.word	0x00000000

08001478 <Coordinate_Base_to_Robot>:

Robot_goal_point Coordinate_Base_to_Robot(Robot_goal_point *Goal_point,
		float r_position, float theta_position) {
 8001478:	b5b0      	push	{r4, r5, r7, lr}
 800147a:	b08c      	sub	sp, #48	@ 0x30
 800147c:	af00      	add	r7, sp, #0
 800147e:	6178      	str	r0, [r7, #20]
 8001480:	ed87 0a04 	vstr	s0, [r7, #16]
 8001484:	edc7 0a03 	vstr	s1, [r7, #12]

	Goal_point->r_goal_position = 0;
 8001488:	697b      	ldr	r3, [r7, #20]
 800148a:	f04f 0200 	mov.w	r2, #0
 800148e:	601a      	str	r2, [r3, #0]
	Goal_point->theta_goal_position = 0;
 8001490:	697b      	ldr	r3, [r7, #20]
 8001492:	f04f 0200 	mov.w	r2, #0
 8001496:	605a      	str	r2, [r3, #4]

	float prismatic_pos;
	float beta = pow(r_position, 2) + pow(Offet, 2);
 8001498:	6938      	ldr	r0, [r7, #16]
 800149a:	f7ff f821 	bl	80004e0 <__aeabi_f2d>
 800149e:	4602      	mov	r2, r0
 80014a0:	460b      	mov	r3, r1
 80014a2:	ed9f 1bc9 	vldr	d1, [pc, #804]	@ 80017c8 <Coordinate_Base_to_Robot+0x350>
 80014a6:	ec43 2b10 	vmov	d0, r2, r3
 80014aa:	f00d ffb7 	bl	800f41c <pow>
 80014ae:	ec51 0b10 	vmov	r0, r1, d0
 80014b2:	f04f 0200 	mov.w	r2, #0
 80014b6:	4bc6      	ldr	r3, [pc, #792]	@ (80017d0 <Coordinate_Base_to_Robot+0x358>)
 80014b8:	f7fe feb4 	bl	8000224 <__adddf3>
 80014bc:	4602      	mov	r2, r0
 80014be:	460b      	mov	r3, r1
 80014c0:	4610      	mov	r0, r2
 80014c2:	4619      	mov	r1, r3
 80014c4:	f7ff fb34 	bl	8000b30 <__aeabi_d2f>
 80014c8:	4603      	mov	r3, r0
 80014ca:	62bb      	str	r3, [r7, #40]	@ 0x28
	float gamma = -2 * r_position * Offet;
 80014cc:	edd7 7a04 	vldr	s15, [r7, #16]
 80014d0:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 80014d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014d8:	ed9f 7abe 	vldr	s14, [pc, #760]	@ 80017d4 <Coordinate_Base_to_Robot+0x35c>
 80014dc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014e0:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

	if (theta_position >= 0 && theta_position <= 90) // quadrant 1
 80014e4:	edd7 7a03 	vldr	s15, [r7, #12]
 80014e8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80014ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014f0:	db2f      	blt.n	8001552 <Coordinate_Base_to_Robot+0xda>
 80014f2:	edd7 7a03 	vldr	s15, [r7, #12]
 80014f6:	ed9f 7abb 	vldr	s14, [pc, #748]	@ 80017e4 <Coordinate_Base_to_Robot+0x36c>
 80014fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001502:	d826      	bhi.n	8001552 <Coordinate_Base_to_Robot+0xda>
			{
		//Goal_point->theta_goal_position = degree_to_rad(90 - alpha);
		prismatic_pos = sqrt(beta - gamma * cosf(theta_position + 90));
 8001504:	edd7 7a03 	vldr	s15, [r7, #12]
 8001508:	ed9f 7ab6 	vldr	s14, [pc, #728]	@ 80017e4 <Coordinate_Base_to_Robot+0x36c>
 800150c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001510:	eeb0 0a67 	vmov.f32	s0, s15
 8001514:	f00e f844 	bl	800f5a0 <cosf>
 8001518:	eeb0 7a40 	vmov.f32	s14, s0
 800151c:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001520:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001524:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8001528:	ee77 7a67 	vsub.f32	s15, s14, s15
 800152c:	ee17 0a90 	vmov	r0, s15
 8001530:	f7fe ffd6 	bl	80004e0 <__aeabi_f2d>
 8001534:	4602      	mov	r2, r0
 8001536:	460b      	mov	r3, r1
 8001538:	ec43 2b10 	vmov	d0, r2, r3
 800153c:	f00d ffde 	bl	800f4fc <sqrt>
 8001540:	ec53 2b10 	vmov	r2, r3, d0
 8001544:	4610      	mov	r0, r2
 8001546:	4619      	mov	r1, r3
 8001548:	f7ff faf2 	bl	8000b30 <__aeabi_d2f>
 800154c:	4603      	mov	r3, r0
 800154e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001550:	e0a7      	b.n	80016a2 <Coordinate_Base_to_Robot+0x22a>
//		Goal_point->r_goal_position = sqrt(
//				beta - gamma * cosf(theta_position + 90));
	} else if (theta_position >= 90 && theta_position <= 180) // quadrant 2
 8001552:	edd7 7a03 	vldr	s15, [r7, #12]
 8001556:	ed9f 7aa3 	vldr	s14, [pc, #652]	@ 80017e4 <Coordinate_Base_to_Robot+0x36c>
 800155a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800155e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001562:	db2f      	blt.n	80015c4 <Coordinate_Base_to_Robot+0x14c>
 8001564:	edd7 7a03 	vldr	s15, [r7, #12]
 8001568:	ed9f 7a9b 	vldr	s14, [pc, #620]	@ 80017d8 <Coordinate_Base_to_Robot+0x360>
 800156c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001570:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001574:	d826      	bhi.n	80015c4 <Coordinate_Base_to_Robot+0x14c>
			{
		//Goal_point->theta_goal_position = degree_to_rad(alpha + 90);
		prismatic_pos = sqrt(beta - gamma * cosf(180 - theta_position));
 8001576:	ed9f 7a98 	vldr	s14, [pc, #608]	@ 80017d8 <Coordinate_Base_to_Robot+0x360>
 800157a:	edd7 7a03 	vldr	s15, [r7, #12]
 800157e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001582:	eeb0 0a67 	vmov.f32	s0, s15
 8001586:	f00e f80b 	bl	800f5a0 <cosf>
 800158a:	eeb0 7a40 	vmov.f32	s14, s0
 800158e:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001592:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001596:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800159a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800159e:	ee17 0a90 	vmov	r0, s15
 80015a2:	f7fe ff9d 	bl	80004e0 <__aeabi_f2d>
 80015a6:	4602      	mov	r2, r0
 80015a8:	460b      	mov	r3, r1
 80015aa:	ec43 2b10 	vmov	d0, r2, r3
 80015ae:	f00d ffa5 	bl	800f4fc <sqrt>
 80015b2:	ec53 2b10 	vmov	r2, r3, d0
 80015b6:	4610      	mov	r0, r2
 80015b8:	4619      	mov	r1, r3
 80015ba:	f7ff fab9 	bl	8000b30 <__aeabi_d2f>
 80015be:	4603      	mov	r3, r0
 80015c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80015c2:	e06e      	b.n	80016a2 <Coordinate_Base_to_Robot+0x22a>
//		Goal_point->r_goal_position = sqrt(
//				beta - gamma * cosf(180 - theta_position));
	} else if (theta_position <= 0 && theta_position >= -90) // quadrant 3
 80015c4:	edd7 7a03 	vldr	s15, [r7, #12]
 80015c8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80015cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015d0:	d82f      	bhi.n	8001632 <Coordinate_Base_to_Robot+0x1ba>
 80015d2:	edd7 7a03 	vldr	s15, [r7, #12]
 80015d6:	ed9f 7a81 	vldr	s14, [pc, #516]	@ 80017dc <Coordinate_Base_to_Robot+0x364>
 80015da:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015e2:	db26      	blt.n	8001632 <Coordinate_Base_to_Robot+0x1ba>
			{
		//Goal_point->theta_goal_position = degree_to_rad(alpha + 90);
		prismatic_pos = sqrt(beta - gamma * cosf(theta_position - 90));
 80015e4:	edd7 7a03 	vldr	s15, [r7, #12]
 80015e8:	ed9f 7a7e 	vldr	s14, [pc, #504]	@ 80017e4 <Coordinate_Base_to_Robot+0x36c>
 80015ec:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80015f0:	eeb0 0a67 	vmov.f32	s0, s15
 80015f4:	f00d ffd4 	bl	800f5a0 <cosf>
 80015f8:	eeb0 7a40 	vmov.f32	s14, s0
 80015fc:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001600:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001604:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8001608:	ee77 7a67 	vsub.f32	s15, s14, s15
 800160c:	ee17 0a90 	vmov	r0, s15
 8001610:	f7fe ff66 	bl	80004e0 <__aeabi_f2d>
 8001614:	4602      	mov	r2, r0
 8001616:	460b      	mov	r3, r1
 8001618:	ec43 2b10 	vmov	d0, r2, r3
 800161c:	f00d ff6e 	bl	800f4fc <sqrt>
 8001620:	ec53 2b10 	vmov	r2, r3, d0
 8001624:	4610      	mov	r0, r2
 8001626:	4619      	mov	r1, r3
 8001628:	f7ff fa82 	bl	8000b30 <__aeabi_d2f>
 800162c:	4603      	mov	r3, r0
 800162e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001630:	e037      	b.n	80016a2 <Coordinate_Base_to_Robot+0x22a>
//		Goal_point->r_goal_position = sqrt(
//				beta - gamma * cosf(theta_position - 90));
	} else if (theta_position <= -90 && theta_position >= -180) // quadrant 4
 8001632:	edd7 7a03 	vldr	s15, [r7, #12]
 8001636:	ed9f 7a69 	vldr	s14, [pc, #420]	@ 80017dc <Coordinate_Base_to_Robot+0x364>
 800163a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800163e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001642:	d82e      	bhi.n	80016a2 <Coordinate_Base_to_Robot+0x22a>
 8001644:	edd7 7a03 	vldr	s15, [r7, #12]
 8001648:	ed9f 7a65 	vldr	s14, [pc, #404]	@ 80017e0 <Coordinate_Base_to_Robot+0x368>
 800164c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001650:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001654:	db25      	blt.n	80016a2 <Coordinate_Base_to_Robot+0x22a>
			{
//		Goal_point->theta_goal_position = degree_to_rad(90 - alpha);
//		Goal_point->r_goal_position = sqrt(
//				beta - gamma * cosf(90 - theta_position));
		prismatic_pos = sqrt(beta - gamma * cosf(90 - theta_position));
 8001656:	ed9f 7a63 	vldr	s14, [pc, #396]	@ 80017e4 <Coordinate_Base_to_Robot+0x36c>
 800165a:	edd7 7a03 	vldr	s15, [r7, #12]
 800165e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001662:	eeb0 0a67 	vmov.f32	s0, s15
 8001666:	f00d ff9b 	bl	800f5a0 <cosf>
 800166a:	eeb0 7a40 	vmov.f32	s14, s0
 800166e:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001672:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001676:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800167a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800167e:	ee17 0a90 	vmov	r0, s15
 8001682:	f7fe ff2d 	bl	80004e0 <__aeabi_f2d>
 8001686:	4602      	mov	r2, r0
 8001688:	460b      	mov	r3, r1
 800168a:	ec43 2b10 	vmov	d0, r2, r3
 800168e:	f00d ff35 	bl	800f4fc <sqrt>
 8001692:	ec53 2b10 	vmov	r2, r3, d0
 8001696:	4610      	mov	r0, r2
 8001698:	4619      	mov	r1, r3
 800169a:	f7ff fa49 	bl	8000b30 <__aeabi_d2f>
 800169e:	4603      	mov	r3, r0
 80016a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	}

	float alpha = acos(
			pow(r_position, 2) - pow(prismatic_pos, 2)
 80016a2:	6938      	ldr	r0, [r7, #16]
 80016a4:	f7fe ff1c 	bl	80004e0 <__aeabi_f2d>
 80016a8:	4602      	mov	r2, r0
 80016aa:	460b      	mov	r3, r1
 80016ac:	ed9f 1b46 	vldr	d1, [pc, #280]	@ 80017c8 <Coordinate_Base_to_Robot+0x350>
 80016b0:	ec43 2b10 	vmov	d0, r2, r3
 80016b4:	f00d feb2 	bl	800f41c <pow>
 80016b8:	ec55 4b10 	vmov	r4, r5, d0
 80016bc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80016be:	f7fe ff0f 	bl	80004e0 <__aeabi_f2d>
 80016c2:	4602      	mov	r2, r0
 80016c4:	460b      	mov	r3, r1
 80016c6:	ed9f 1b40 	vldr	d1, [pc, #256]	@ 80017c8 <Coordinate_Base_to_Robot+0x350>
 80016ca:	ec43 2b10 	vmov	d0, r2, r3
 80016ce:	f00d fea5 	bl	800f41c <pow>
 80016d2:	ec53 2b10 	vmov	r2, r3, d0
 80016d6:	4620      	mov	r0, r4
 80016d8:	4629      	mov	r1, r5
 80016da:	f7fe fda1 	bl	8000220 <__aeabi_dsub>
 80016de:	4602      	mov	r2, r0
 80016e0:	460b      	mov	r3, r1
 80016e2:	4614      	mov	r4, r2
 80016e4:	461d      	mov	r5, r3
					- pow(Offet, 2) / (-2 * prismatic_pos * Offet));
 80016e6:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80016ea:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80016ee:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 80017d4 <Coordinate_Base_to_Robot+0x35c>
 80016f2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016f6:	ee17 0a90 	vmov	r0, s15
 80016fa:	f7fe fef1 	bl	80004e0 <__aeabi_f2d>
 80016fe:	4602      	mov	r2, r0
 8001700:	460b      	mov	r3, r1
 8001702:	f04f 0000 	mov.w	r0, #0
 8001706:	4932      	ldr	r1, [pc, #200]	@ (80017d0 <Coordinate_Base_to_Robot+0x358>)
 8001708:	f7ff f86c 	bl	80007e4 <__aeabi_ddiv>
 800170c:	4602      	mov	r2, r0
 800170e:	460b      	mov	r3, r1
	float alpha = acos(
 8001710:	4620      	mov	r0, r4
 8001712:	4629      	mov	r1, r5
 8001714:	f7fe fd86 	bl	8000224 <__adddf3>
 8001718:	4602      	mov	r2, r0
 800171a:	460b      	mov	r3, r1
 800171c:	ec43 2b17 	vmov	d7, r2, r3
 8001720:	eeb0 0a47 	vmov.f32	s0, s14
 8001724:	eef0 0a67 	vmov.f32	s1, s15
 8001728:	f00d fe44 	bl	800f3b4 <acos>
 800172c:	ec53 2b10 	vmov	r2, r3, d0
 8001730:	4610      	mov	r0, r2
 8001732:	4619      	mov	r1, r3
 8001734:	f7ff f9fc 	bl	8000b30 <__aeabi_d2f>
 8001738:	4603      	mov	r3, r0
 800173a:	623b      	str	r3, [r7, #32]

	if (theta_position >= 0 && theta_position <= 90) // quadrant 1
 800173c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001740:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001744:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001748:	db4e      	blt.n	80017e8 <Coordinate_Base_to_Robot+0x370>
 800174a:	edd7 7a03 	vldr	s15, [r7, #12]
 800174e:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 80017e4 <Coordinate_Base_to_Robot+0x36c>
 8001752:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001756:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800175a:	d845      	bhi.n	80017e8 <Coordinate_Base_to_Robot+0x370>
			{
		Goal_point->theta_goal_position = degree_to_rad(90 - alpha);
 800175c:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 80017e4 <Coordinate_Base_to_Robot+0x36c>
 8001760:	edd7 7a08 	vldr	s15, [r7, #32]
 8001764:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001768:	eeb0 0a67 	vmov.f32	s0, s15
 800176c:	f000 fb4c 	bl	8001e08 <degree_to_rad>
 8001770:	eef0 7a40 	vmov.f32	s15, s0
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	edc3 7a01 	vstr	s15, [r3, #4]
		prismatic_pos = sqrt(beta - gamma * cosf(theta_position + 90));
 800177a:	edd7 7a03 	vldr	s15, [r7, #12]
 800177e:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 80017e4 <Coordinate_Base_to_Robot+0x36c>
 8001782:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001786:	eeb0 0a67 	vmov.f32	s0, s15
 800178a:	f00d ff09 	bl	800f5a0 <cosf>
 800178e:	eeb0 7a40 	vmov.f32	s14, s0
 8001792:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001796:	ee67 7a27 	vmul.f32	s15, s14, s15
 800179a:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800179e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017a2:	ee17 0a90 	vmov	r0, s15
 80017a6:	f7fe fe9b 	bl	80004e0 <__aeabi_f2d>
 80017aa:	4602      	mov	r2, r0
 80017ac:	460b      	mov	r3, r1
 80017ae:	ec43 2b10 	vmov	d0, r2, r3
 80017b2:	f00d fea3 	bl	800f4fc <sqrt>
 80017b6:	ec53 2b10 	vmov	r2, r3, d0
 80017ba:	4610      	mov	r0, r2
 80017bc:	4619      	mov	r1, r3
 80017be:	f7ff f9b7 	bl	8000b30 <__aeabi_d2f>
 80017c2:	4603      	mov	r3, r0
 80017c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80017c6:	e0e4      	b.n	8001992 <Coordinate_Base_to_Robot+0x51a>
 80017c8:	00000000 	.word	0x00000000
 80017cc:	40000000 	.word	0x40000000
 80017d0:	410c2000 	.word	0x410c2000
 80017d4:	43f00000 	.word	0x43f00000
 80017d8:	43340000 	.word	0x43340000
 80017dc:	c2b40000 	.word	0xc2b40000
 80017e0:	c3340000 	.word	0xc3340000
 80017e4:	42b40000 	.word	0x42b40000
	} else if (theta_position >= 90 && theta_position <= 180) // quadrant 2
 80017e8:	edd7 7a03 	vldr	s15, [r7, #12]
 80017ec:	ed1f 7a03 	vldr	s14, [pc, #-12]	@ 80017e4 <Coordinate_Base_to_Robot+0x36c>
 80017f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017f8:	db3e      	blt.n	8001878 <Coordinate_Base_to_Robot+0x400>
 80017fa:	edd7 7a03 	vldr	s15, [r7, #12]
 80017fe:	ed1f 7a0a 	vldr	s14, [pc, #-40]	@ 80017d8 <Coordinate_Base_to_Robot+0x360>
 8001802:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001806:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800180a:	d835      	bhi.n	8001878 <Coordinate_Base_to_Robot+0x400>
			{
		Goal_point->theta_goal_position = degree_to_rad(alpha + 90);
 800180c:	edd7 7a08 	vldr	s15, [r7, #32]
 8001810:	ed1f 7a0c 	vldr	s14, [pc, #-48]	@ 80017e4 <Coordinate_Base_to_Robot+0x36c>
 8001814:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001818:	eeb0 0a67 	vmov.f32	s0, s15
 800181c:	f000 faf4 	bl	8001e08 <degree_to_rad>
 8001820:	eef0 7a40 	vmov.f32	s15, s0
 8001824:	697b      	ldr	r3, [r7, #20]
 8001826:	edc3 7a01 	vstr	s15, [r3, #4]
		prismatic_pos = sqrt(beta - gamma * cosf(180 - theta_position));
 800182a:	ed1f 7a15 	vldr	s14, [pc, #-84]	@ 80017d8 <Coordinate_Base_to_Robot+0x360>
 800182e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001832:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001836:	eeb0 0a67 	vmov.f32	s0, s15
 800183a:	f00d feb1 	bl	800f5a0 <cosf>
 800183e:	eeb0 7a40 	vmov.f32	s14, s0
 8001842:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001846:	ee67 7a27 	vmul.f32	s15, s14, s15
 800184a:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800184e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001852:	ee17 0a90 	vmov	r0, s15
 8001856:	f7fe fe43 	bl	80004e0 <__aeabi_f2d>
 800185a:	4602      	mov	r2, r0
 800185c:	460b      	mov	r3, r1
 800185e:	ec43 2b10 	vmov	d0, r2, r3
 8001862:	f00d fe4b 	bl	800f4fc <sqrt>
 8001866:	ec53 2b10 	vmov	r2, r3, d0
 800186a:	4610      	mov	r0, r2
 800186c:	4619      	mov	r1, r3
 800186e:	f7ff f95f 	bl	8000b30 <__aeabi_d2f>
 8001872:	4603      	mov	r3, r0
 8001874:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001876:	e08c      	b.n	8001992 <Coordinate_Base_to_Robot+0x51a>
	} else if (theta_position <= 0 && theta_position >= -90) // quadrant 3
 8001878:	edd7 7a03 	vldr	s15, [r7, #12]
 800187c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001880:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001884:	d83e      	bhi.n	8001904 <Coordinate_Base_to_Robot+0x48c>
 8001886:	edd7 7a03 	vldr	s15, [r7, #12]
 800188a:	ed1f 7a2c 	vldr	s14, [pc, #-176]	@ 80017dc <Coordinate_Base_to_Robot+0x364>
 800188e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001892:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001896:	db35      	blt.n	8001904 <Coordinate_Base_to_Robot+0x48c>
			{
		Goal_point->theta_goal_position = degree_to_rad(alpha + 90);
 8001898:	edd7 7a08 	vldr	s15, [r7, #32]
 800189c:	ed1f 7a2f 	vldr	s14, [pc, #-188]	@ 80017e4 <Coordinate_Base_to_Robot+0x36c>
 80018a0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80018a4:	eeb0 0a67 	vmov.f32	s0, s15
 80018a8:	f000 faae 	bl	8001e08 <degree_to_rad>
 80018ac:	eef0 7a40 	vmov.f32	s15, s0
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	edc3 7a01 	vstr	s15, [r3, #4]
		prismatic_pos = sqrt(beta - gamma * cosf(theta_position - 90));
 80018b6:	edd7 7a03 	vldr	s15, [r7, #12]
 80018ba:	ed1f 7a36 	vldr	s14, [pc, #-216]	@ 80017e4 <Coordinate_Base_to_Robot+0x36c>
 80018be:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80018c2:	eeb0 0a67 	vmov.f32	s0, s15
 80018c6:	f00d fe6b 	bl	800f5a0 <cosf>
 80018ca:	eeb0 7a40 	vmov.f32	s14, s0
 80018ce:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80018d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018d6:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 80018da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018de:	ee17 0a90 	vmov	r0, s15
 80018e2:	f7fe fdfd 	bl	80004e0 <__aeabi_f2d>
 80018e6:	4602      	mov	r2, r0
 80018e8:	460b      	mov	r3, r1
 80018ea:	ec43 2b10 	vmov	d0, r2, r3
 80018ee:	f00d fe05 	bl	800f4fc <sqrt>
 80018f2:	ec53 2b10 	vmov	r2, r3, d0
 80018f6:	4610      	mov	r0, r2
 80018f8:	4619      	mov	r1, r3
 80018fa:	f7ff f919 	bl	8000b30 <__aeabi_d2f>
 80018fe:	4603      	mov	r3, r0
 8001900:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001902:	e046      	b.n	8001992 <Coordinate_Base_to_Robot+0x51a>
	} else if (theta_position <= -90 && theta_position >= -180) // quadrant 4
 8001904:	edd7 7a03 	vldr	s15, [r7, #12]
 8001908:	ed1f 7a4c 	vldr	s14, [pc, #-304]	@ 80017dc <Coordinate_Base_to_Robot+0x364>
 800190c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001910:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001914:	d83d      	bhi.n	8001992 <Coordinate_Base_to_Robot+0x51a>
 8001916:	edd7 7a03 	vldr	s15, [r7, #12]
 800191a:	ed1f 7a4f 	vldr	s14, [pc, #-316]	@ 80017e0 <Coordinate_Base_to_Robot+0x368>
 800191e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001922:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001926:	db34      	blt.n	8001992 <Coordinate_Base_to_Robot+0x51a>
			{
		Goal_point->theta_goal_position = degree_to_rad(90 - alpha);
 8001928:	ed1f 7a52 	vldr	s14, [pc, #-328]	@ 80017e4 <Coordinate_Base_to_Robot+0x36c>
 800192c:	edd7 7a08 	vldr	s15, [r7, #32]
 8001930:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001934:	eeb0 0a67 	vmov.f32	s0, s15
 8001938:	f000 fa66 	bl	8001e08 <degree_to_rad>
 800193c:	eef0 7a40 	vmov.f32	s15, s0
 8001940:	697b      	ldr	r3, [r7, #20]
 8001942:	edc3 7a01 	vstr	s15, [r3, #4]
		prismatic_pos = sqrt(beta - gamma * cosf(90 - theta_position));
 8001946:	ed1f 7a59 	vldr	s14, [pc, #-356]	@ 80017e4 <Coordinate_Base_to_Robot+0x36c>
 800194a:	edd7 7a03 	vldr	s15, [r7, #12]
 800194e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001952:	eeb0 0a67 	vmov.f32	s0, s15
 8001956:	f00d fe23 	bl	800f5a0 <cosf>
 800195a:	eeb0 7a40 	vmov.f32	s14, s0
 800195e:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001962:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001966:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800196a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800196e:	ee17 0a90 	vmov	r0, s15
 8001972:	f7fe fdb5 	bl	80004e0 <__aeabi_f2d>
 8001976:	4602      	mov	r2, r0
 8001978:	460b      	mov	r3, r1
 800197a:	ec43 2b10 	vmov	d0, r2, r3
 800197e:	f00d fdbd 	bl	800f4fc <sqrt>
 8001982:	ec53 2b10 	vmov	r2, r3, d0
 8001986:	4610      	mov	r0, r2
 8001988:	4619      	mov	r1, r3
 800198a:	f7ff f8d1 	bl	8000b30 <__aeabi_d2f>
 800198e:	4603      	mov	r3, r0
 8001990:	62fb      	str	r3, [r7, #44]	@ 0x2c
	}

	Goal_point->r_goal_position = prismatic_pos;
 8001992:	697b      	ldr	r3, [r7, #20]
 8001994:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001996:	601a      	str	r2, [r3, #0]

	return *Goal_point;
 8001998:	697a      	ldr	r2, [r7, #20]
 800199a:	f107 0318 	add.w	r3, r7, #24
 800199e:	e892 0003 	ldmia.w	r2, {r0, r1}
 80019a2:	e883 0003 	stmia.w	r3, {r0, r1}
 80019a6:	69ba      	ldr	r2, [r7, #24]
 80019a8:	69fb      	ldr	r3, [r7, #28]
 80019aa:	ee07 2a10 	vmov	s14, r2
 80019ae:	ee07 3a90 	vmov	s15, r3
}
 80019b2:	eeb0 0a47 	vmov.f32	s0, s14
 80019b6:	eef0 0a67 	vmov.f32	s1, s15
 80019ba:	3730      	adds	r7, #48	@ 0x30
 80019bc:	46bd      	mov	sp, r7
 80019be:	bdb0      	pop	{r4, r5, r7, pc}

080019c0 <Coordinate_Robot_to_Base>:

Robot_goal_point Coordinate_Robot_to_Base(Robot_goal_point *Goal_point,
		float r_position, float theta_position) {
 80019c0:	b5b0      	push	{r4, r5, r7, lr}
 80019c2:	b090      	sub	sp, #64	@ 0x40
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6178      	str	r0, [r7, #20]
 80019c8:	ed87 0a04 	vstr	s0, [r7, #16]
 80019cc:	edc7 0a03 	vstr	s1, [r7, #12]

	float theta_position_deg = rad_to_degree(theta_position);
 80019d0:	ed97 0a03 	vldr	s0, [r7, #12]
 80019d4:	f000 f9ec 	bl	8001db0 <rad_to_degree>
 80019d8:	ed87 0a0c 	vstr	s0, [r7, #48]	@ 0x30
	Goal_point->r_goal_position = 0;
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	f04f 0200 	mov.w	r2, #0
 80019e2:	601a      	str	r2, [r3, #0]
	Goal_point->theta_goal_position = 0;
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	f04f 0200 	mov.w	r2, #0
 80019ea:	605a      	str	r2, [r3, #4]

	int quadrant = 0;
 80019ec:	2300      	movs	r3, #0
 80019ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
	if (theta_position_deg >= 0 && theta_position_deg <= 90) {
 80019f0:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80019f4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80019f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019fc:	db1f      	blt.n	8001a3e <Coordinate_Robot_to_Base+0x7e>
 80019fe:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001a02:	ed9f 7ad6 	vldr	s14, [pc, #856]	@ 8001d5c <Coordinate_Robot_to_Base+0x39c>
 8001a06:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a0e:	d816      	bhi.n	8001a3e <Coordinate_Robot_to_Base+0x7e>
		if (sinf(theta_position) * r_position >= Offet) {
 8001a10:	ed97 0a03 	vldr	s0, [r7, #12]
 8001a14:	f00d fe08 	bl	800f628 <sinf>
 8001a18:	eeb0 7a40 	vmov.f32	s14, s0
 8001a1c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001a20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a24:	ed9f 7ac8 	vldr	s14, [pc, #800]	@ 8001d48 <Coordinate_Robot_to_Base+0x388>
 8001a28:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a30:	db02      	blt.n	8001a38 <Coordinate_Robot_to_Base+0x78>
			quadrant = 1;
 8001a32:	2301      	movs	r3, #1
 8001a34:	63fb      	str	r3, [r7, #60]	@ 0x3c
		if (sinf(theta_position) * r_position >= Offet) {
 8001a36:	e022      	b.n	8001a7e <Coordinate_Robot_to_Base+0xbe>
		} else {
			quadrant = 4;
 8001a38:	2304      	movs	r3, #4
 8001a3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		if (sinf(theta_position) * r_position >= Offet) {
 8001a3c:	e01f      	b.n	8001a7e <Coordinate_Robot_to_Base+0xbe>
		}
	} else {
		if (cosf(theta_position - degree_to_rad(90.0)) * r_position >= Offet) {
 8001a3e:	ed9f 0ac7 	vldr	s0, [pc, #796]	@ 8001d5c <Coordinate_Robot_to_Base+0x39c>
 8001a42:	f000 f9e1 	bl	8001e08 <degree_to_rad>
 8001a46:	eeb0 7a40 	vmov.f32	s14, s0
 8001a4a:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a4e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001a52:	eeb0 0a67 	vmov.f32	s0, s15
 8001a56:	f00d fda3 	bl	800f5a0 <cosf>
 8001a5a:	eeb0 7a40 	vmov.f32	s14, s0
 8001a5e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001a62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a66:	ed9f 7ab8 	vldr	s14, [pc, #736]	@ 8001d48 <Coordinate_Robot_to_Base+0x388>
 8001a6a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a72:	db02      	blt.n	8001a7a <Coordinate_Robot_to_Base+0xba>
			quadrant = 2;
 8001a74:	2302      	movs	r3, #2
 8001a76:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001a78:	e001      	b.n	8001a7e <Coordinate_Robot_to_Base+0xbe>
		} else {
			quadrant = 3;
 8001a7a:	2303      	movs	r3, #3
 8001a7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
		}
	}
	float beta = pow(r_position, 2) + pow(Offet, 2);
 8001a7e:	6938      	ldr	r0, [r7, #16]
 8001a80:	f7fe fd2e 	bl	80004e0 <__aeabi_f2d>
 8001a84:	4602      	mov	r2, r0
 8001a86:	460b      	mov	r3, r1
 8001a88:	ed9f 1bad 	vldr	d1, [pc, #692]	@ 8001d40 <Coordinate_Robot_to_Base+0x380>
 8001a8c:	ec43 2b10 	vmov	d0, r2, r3
 8001a90:	f00d fcc4 	bl	800f41c <pow>
 8001a94:	ec51 0b10 	vmov	r0, r1, d0
 8001a98:	f04f 0200 	mov.w	r2, #0
 8001a9c:	4bab      	ldr	r3, [pc, #684]	@ (8001d4c <Coordinate_Robot_to_Base+0x38c>)
 8001a9e:	f7fe fbc1 	bl	8000224 <__adddf3>
 8001aa2:	4602      	mov	r2, r0
 8001aa4:	460b      	mov	r3, r1
 8001aa6:	4610      	mov	r0, r2
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	f7ff f841 	bl	8000b30 <__aeabi_d2f>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	float gamma = -2 * r_position * Offet;
 8001ab2:	edd7 7a04 	vldr	s15, [r7, #16]
 8001ab6:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 8001aba:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001abe:	ed9f 7aa2 	vldr	s14, [pc, #648]	@ 8001d48 <Coordinate_Robot_to_Base+0x388>
 8001ac2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ac6:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
	float Prismatic_pos;
	float theta;
	if (quadrant == 1) // quadrant 1
 8001aca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001acc:	2b01      	cmp	r3, #1
 8001ace:	d12a      	bne.n	8001b26 <Coordinate_Robot_to_Base+0x166>
			{
		Prismatic_pos = sqrt(
				beta + gamma * cosf(degree_to_rad(90.0) - theta_position));
 8001ad0:	ed9f 0aa2 	vldr	s0, [pc, #648]	@ 8001d5c <Coordinate_Robot_to_Base+0x39c>
 8001ad4:	f000 f998 	bl	8001e08 <degree_to_rad>
 8001ad8:	eeb0 7a40 	vmov.f32	s14, s0
 8001adc:	edd7 7a03 	vldr	s15, [r7, #12]
 8001ae0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ae4:	eeb0 0a67 	vmov.f32	s0, s15
 8001ae8:	f00d fd5a 	bl	800f5a0 <cosf>
 8001aec:	eeb0 7a40 	vmov.f32	s14, s0
 8001af0:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001af4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001af8:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001afc:	ee77 7a27 	vadd.f32	s15, s14, s15
		Prismatic_pos = sqrt(
 8001b00:	ee17 0a90 	vmov	r0, s15
 8001b04:	f7fe fcec 	bl	80004e0 <__aeabi_f2d>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	460b      	mov	r3, r1
 8001b0c:	ec43 2b10 	vmov	d0, r2, r3
 8001b10:	f00d fcf4 	bl	800f4fc <sqrt>
 8001b14:	ec53 2b10 	vmov	r2, r3, d0
 8001b18:	4610      	mov	r0, r2
 8001b1a:	4619      	mov	r1, r3
 8001b1c:	f7ff f808 	bl	8000b30 <__aeabi_d2f>
 8001b20:	4603      	mov	r3, r0
 8001b22:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001b24:	e085      	b.n	8001c32 <Coordinate_Robot_to_Base+0x272>

	} else if (quadrant == 2) // quadrant 2
 8001b26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001b28:	2b02      	cmp	r3, #2
 8001b2a:	d12a      	bne.n	8001b82 <Coordinate_Robot_to_Base+0x1c2>
			{
		Prismatic_pos = sqrt(
				beta + gamma * cosf(theta_position - degree_to_rad(90.0)));
 8001b2c:	ed9f 0a8b 	vldr	s0, [pc, #556]	@ 8001d5c <Coordinate_Robot_to_Base+0x39c>
 8001b30:	f000 f96a 	bl	8001e08 <degree_to_rad>
 8001b34:	eeb0 7a40 	vmov.f32	s14, s0
 8001b38:	edd7 7a03 	vldr	s15, [r7, #12]
 8001b3c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001b40:	eeb0 0a67 	vmov.f32	s0, s15
 8001b44:	f00d fd2c 	bl	800f5a0 <cosf>
 8001b48:	eeb0 7a40 	vmov.f32	s14, s0
 8001b4c:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001b50:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b54:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001b58:	ee77 7a27 	vadd.f32	s15, s14, s15
		Prismatic_pos = sqrt(
 8001b5c:	ee17 0a90 	vmov	r0, s15
 8001b60:	f7fe fcbe 	bl	80004e0 <__aeabi_f2d>
 8001b64:	4602      	mov	r2, r0
 8001b66:	460b      	mov	r3, r1
 8001b68:	ec43 2b10 	vmov	d0, r2, r3
 8001b6c:	f00d fcc6 	bl	800f4fc <sqrt>
 8001b70:	ec53 2b10 	vmov	r2, r3, d0
 8001b74:	4610      	mov	r0, r2
 8001b76:	4619      	mov	r1, r3
 8001b78:	f7fe ffda 	bl	8000b30 <__aeabi_d2f>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001b80:	e057      	b.n	8001c32 <Coordinate_Robot_to_Base+0x272>

	} else if (quadrant == 3) // quadrant 3
 8001b82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001b84:	2b03      	cmp	r3, #3
 8001b86:	d12a      	bne.n	8001bde <Coordinate_Robot_to_Base+0x21e>
			{
		Prismatic_pos = sqrt(
				beta + gamma * cosf(theta_position - degree_to_rad(90.0)));
 8001b88:	ed9f 0a74 	vldr	s0, [pc, #464]	@ 8001d5c <Coordinate_Robot_to_Base+0x39c>
 8001b8c:	f000 f93c 	bl	8001e08 <degree_to_rad>
 8001b90:	eeb0 7a40 	vmov.f32	s14, s0
 8001b94:	edd7 7a03 	vldr	s15, [r7, #12]
 8001b98:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001b9c:	eeb0 0a67 	vmov.f32	s0, s15
 8001ba0:	f00d fcfe 	bl	800f5a0 <cosf>
 8001ba4:	eeb0 7a40 	vmov.f32	s14, s0
 8001ba8:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001bac:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001bb0:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001bb4:	ee77 7a27 	vadd.f32	s15, s14, s15
		Prismatic_pos = sqrt(
 8001bb8:	ee17 0a90 	vmov	r0, s15
 8001bbc:	f7fe fc90 	bl	80004e0 <__aeabi_f2d>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	460b      	mov	r3, r1
 8001bc4:	ec43 2b10 	vmov	d0, r2, r3
 8001bc8:	f00d fc98 	bl	800f4fc <sqrt>
 8001bcc:	ec53 2b10 	vmov	r2, r3, d0
 8001bd0:	4610      	mov	r0, r2
 8001bd2:	4619      	mov	r1, r3
 8001bd4:	f7fe ffac 	bl	8000b30 <__aeabi_d2f>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001bdc:	e029      	b.n	8001c32 <Coordinate_Robot_to_Base+0x272>
	} else  // quadrant 4
	{
		Prismatic_pos = sqrt(
				beta + gamma * cosf(degree_to_rad(90.0) - theta_position));
 8001bde:	ed9f 0a5f 	vldr	s0, [pc, #380]	@ 8001d5c <Coordinate_Robot_to_Base+0x39c>
 8001be2:	f000 f911 	bl	8001e08 <degree_to_rad>
 8001be6:	eeb0 7a40 	vmov.f32	s14, s0
 8001bea:	edd7 7a03 	vldr	s15, [r7, #12]
 8001bee:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001bf2:	eeb0 0a67 	vmov.f32	s0, s15
 8001bf6:	f00d fcd3 	bl	800f5a0 <cosf>
 8001bfa:	eeb0 7a40 	vmov.f32	s14, s0
 8001bfe:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001c02:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c06:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001c0a:	ee77 7a27 	vadd.f32	s15, s14, s15
		Prismatic_pos = sqrt(
 8001c0e:	ee17 0a90 	vmov	r0, s15
 8001c12:	f7fe fc65 	bl	80004e0 <__aeabi_f2d>
 8001c16:	4602      	mov	r2, r0
 8001c18:	460b      	mov	r3, r1
 8001c1a:	ec43 2b10 	vmov	d0, r2, r3
 8001c1e:	f00d fc6d 	bl	800f4fc <sqrt>
 8001c22:	ec53 2b10 	vmov	r2, r3, d0
 8001c26:	4610      	mov	r0, r2
 8001c28:	4619      	mov	r1, r3
 8001c2a:	f7fe ff81 	bl	8000b30 <__aeabi_d2f>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	63bb      	str	r3, [r7, #56]	@ 0x38
	}
	float alpha = acos(
			pow(r_position, 2) - pow(Prismatic_pos, 2)
 8001c32:	6938      	ldr	r0, [r7, #16]
 8001c34:	f7fe fc54 	bl	80004e0 <__aeabi_f2d>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	460b      	mov	r3, r1
 8001c3c:	ed9f 1b40 	vldr	d1, [pc, #256]	@ 8001d40 <Coordinate_Robot_to_Base+0x380>
 8001c40:	ec43 2b10 	vmov	d0, r2, r3
 8001c44:	f00d fbea 	bl	800f41c <pow>
 8001c48:	ec55 4b10 	vmov	r4, r5, d0
 8001c4c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8001c4e:	f7fe fc47 	bl	80004e0 <__aeabi_f2d>
 8001c52:	4602      	mov	r2, r0
 8001c54:	460b      	mov	r3, r1
 8001c56:	ed9f 1b3a 	vldr	d1, [pc, #232]	@ 8001d40 <Coordinate_Robot_to_Base+0x380>
 8001c5a:	ec43 2b10 	vmov	d0, r2, r3
 8001c5e:	f00d fbdd 	bl	800f41c <pow>
 8001c62:	ec53 2b10 	vmov	r2, r3, d0
 8001c66:	4620      	mov	r0, r4
 8001c68:	4629      	mov	r1, r5
 8001c6a:	f7fe fad9 	bl	8000220 <__aeabi_dsub>
 8001c6e:	4602      	mov	r2, r0
 8001c70:	460b      	mov	r3, r1
 8001c72:	4614      	mov	r4, r2
 8001c74:	461d      	mov	r5, r3
					- pow(Offet, 2) / (-2 * Prismatic_pos * Offet));
 8001c76:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8001c7a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001c7e:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8001d48 <Coordinate_Robot_to_Base+0x388>
 8001c82:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c86:	ee17 0a90 	vmov	r0, s15
 8001c8a:	f7fe fc29 	bl	80004e0 <__aeabi_f2d>
 8001c8e:	4602      	mov	r2, r0
 8001c90:	460b      	mov	r3, r1
 8001c92:	f04f 0000 	mov.w	r0, #0
 8001c96:	492d      	ldr	r1, [pc, #180]	@ (8001d4c <Coordinate_Robot_to_Base+0x38c>)
 8001c98:	f7fe fda4 	bl	80007e4 <__aeabi_ddiv>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	460b      	mov	r3, r1
	float alpha = acos(
 8001ca0:	4620      	mov	r0, r4
 8001ca2:	4629      	mov	r1, r5
 8001ca4:	f7fe fabe 	bl	8000224 <__adddf3>
 8001ca8:	4602      	mov	r2, r0
 8001caa:	460b      	mov	r3, r1
 8001cac:	ec43 2b17 	vmov	d7, r2, r3
 8001cb0:	eeb0 0a47 	vmov.f32	s0, s14
 8001cb4:	eef0 0a67 	vmov.f32	s1, s15
 8001cb8:	f00d fb7c 	bl	800f3b4 <acos>
 8001cbc:	ec53 2b10 	vmov	r2, r3, d0
 8001cc0:	4610      	mov	r0, r2
 8001cc2:	4619      	mov	r1, r3
 8001cc4:	f7fe ff34 	bl	8000b30 <__aeabi_d2f>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	627b      	str	r3, [r7, #36]	@ 0x24

	if (quadrant == 1) // quadrant 1
 8001ccc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001cce:	2b01      	cmp	r3, #1
 8001cd0:	d116      	bne.n	8001d00 <Coordinate_Robot_to_Base+0x340>
			{
		theta = rad_to_degree(alpha) - 90.0;
 8001cd2:	ed97 0a09 	vldr	s0, [r7, #36]	@ 0x24
 8001cd6:	f000 f86b 	bl	8001db0 <rad_to_degree>
 8001cda:	ee10 3a10 	vmov	r3, s0
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f7fe fbfe 	bl	80004e0 <__aeabi_f2d>
 8001ce4:	f04f 0200 	mov.w	r2, #0
 8001ce8:	4b19      	ldr	r3, [pc, #100]	@ (8001d50 <Coordinate_Robot_to_Base+0x390>)
 8001cea:	f7fe fa99 	bl	8000220 <__aeabi_dsub>
 8001cee:	4602      	mov	r2, r0
 8001cf0:	460b      	mov	r3, r1
 8001cf2:	4610      	mov	r0, r2
 8001cf4:	4619      	mov	r1, r3
 8001cf6:	f7fe ff1b 	bl	8000b30 <__aeabi_d2f>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	637b      	str	r3, [r7, #52]	@ 0x34
 8001cfe:	e03d      	b.n	8001d7c <Coordinate_Robot_to_Base+0x3bc>

	} else if (quadrant == 2) // quadrant 2
 8001d00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001d02:	2b02      	cmp	r3, #2
 8001d04:	d10c      	bne.n	8001d20 <Coordinate_Robot_to_Base+0x360>
			{
		theta = 270 - rad_to_degree(alpha);
 8001d06:	ed97 0a09 	vldr	s0, [r7, #36]	@ 0x24
 8001d0a:	f000 f851 	bl	8001db0 <rad_to_degree>
 8001d0e:	eef0 7a40 	vmov.f32	s15, s0
 8001d12:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 8001d54 <Coordinate_Robot_to_Base+0x394>
 8001d16:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d1a:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
 8001d1e:	e02d      	b.n	8001d7c <Coordinate_Robot_to_Base+0x3bc>

	} else if (quadrant == 3) // quadrant 3
 8001d20:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001d22:	2b03      	cmp	r3, #3
 8001d24:	d11c      	bne.n	8001d60 <Coordinate_Robot_to_Base+0x3a0>
			{
		theta = -90 - rad_to_degree(alpha);
 8001d26:	ed97 0a09 	vldr	s0, [r7, #36]	@ 0x24
 8001d2a:	f000 f841 	bl	8001db0 <rad_to_degree>
 8001d2e:	eef0 7a40 	vmov.f32	s15, s0
 8001d32:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8001d58 <Coordinate_Robot_to_Base+0x398>
 8001d36:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d3a:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
 8001d3e:	e01d      	b.n	8001d7c <Coordinate_Robot_to_Base+0x3bc>
 8001d40:	00000000 	.word	0x00000000
 8001d44:	40000000 	.word	0x40000000
 8001d48:	43f00000 	.word	0x43f00000
 8001d4c:	410c2000 	.word	0x410c2000
 8001d50:	40568000 	.word	0x40568000
 8001d54:	43870000 	.word	0x43870000
 8001d58:	c2b40000 	.word	0xc2b40000
 8001d5c:	42b40000 	.word	0x42b40000
	} else  // quadrant 4
	{
		theta = -1 * (90 - rad_to_degree(alpha));
 8001d60:	ed97 0a09 	vldr	s0, [r7, #36]	@ 0x24
 8001d64:	f000 f824 	bl	8001db0 <rad_to_degree>
 8001d68:	eef0 7a40 	vmov.f32	s15, s0
 8001d6c:	ed1f 7a05 	vldr	s14, [pc, #-20]	@ 8001d5c <Coordinate_Robot_to_Base+0x39c>
 8001d70:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d74:	eef1 7a67 	vneg.f32	s15, s15
 8001d78:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
	}
	Goal_point->r_goal_position = Prismatic_pos;
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001d80:	601a      	str	r2, [r3, #0]
	Goal_point->theta_goal_position = theta;
 8001d82:	697b      	ldr	r3, [r7, #20]
 8001d84:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001d86:	605a      	str	r2, [r3, #4]
	return *Goal_point;
 8001d88:	697a      	ldr	r2, [r7, #20]
 8001d8a:	f107 031c 	add.w	r3, r7, #28
 8001d8e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001d92:	e883 0003 	stmia.w	r3, {r0, r1}
 8001d96:	69fa      	ldr	r2, [r7, #28]
 8001d98:	6a3b      	ldr	r3, [r7, #32]
 8001d9a:	ee07 2a10 	vmov	s14, r2
 8001d9e:	ee07 3a90 	vmov	s15, r3
}
 8001da2:	eeb0 0a47 	vmov.f32	s0, s14
 8001da6:	eef0 0a67 	vmov.f32	s1, s15
 8001daa:	3740      	adds	r7, #64	@ 0x40
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bdb0      	pop	{r4, r5, r7, pc}

08001db0 <rad_to_degree>:

float rad_to_degree(float rad) {
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b082      	sub	sp, #8
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	ed87 0a01 	vstr	s0, [r7, #4]
	return (rad * 180.0) / 3.142;
 8001dba:	6878      	ldr	r0, [r7, #4]
 8001dbc:	f7fe fb90 	bl	80004e0 <__aeabi_f2d>
 8001dc0:	f04f 0200 	mov.w	r2, #0
 8001dc4:	4b0e      	ldr	r3, [pc, #56]	@ (8001e00 <rad_to_degree+0x50>)
 8001dc6:	f7fe fbe3 	bl	8000590 <__aeabi_dmul>
 8001dca:	4602      	mov	r2, r0
 8001dcc:	460b      	mov	r3, r1
 8001dce:	4610      	mov	r0, r2
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	a309      	add	r3, pc, #36	@ (adr r3, 8001df8 <rad_to_degree+0x48>)
 8001dd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dd8:	f7fe fd04 	bl	80007e4 <__aeabi_ddiv>
 8001ddc:	4602      	mov	r2, r0
 8001dde:	460b      	mov	r3, r1
 8001de0:	4610      	mov	r0, r2
 8001de2:	4619      	mov	r1, r3
 8001de4:	f7fe fea4 	bl	8000b30 <__aeabi_d2f>
 8001de8:	4603      	mov	r3, r0
 8001dea:	ee07 3a90 	vmov	s15, r3
}
 8001dee:	eeb0 0a67 	vmov.f32	s0, s15
 8001df2:	3708      	adds	r7, #8
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}
 8001df8:	e5604189 	.word	0xe5604189
 8001dfc:	400922d0 	.word	0x400922d0
 8001e00:	40668000 	.word	0x40668000
 8001e04:	00000000 	.word	0x00000000

08001e08 <degree_to_rad>:
float degree_to_rad(float degree) {
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b082      	sub	sp, #8
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	ed87 0a01 	vstr	s0, [r7, #4]
	return (degree * 3.142) / 180.0;
 8001e12:	6878      	ldr	r0, [r7, #4]
 8001e14:	f7fe fb64 	bl	80004e0 <__aeabi_f2d>
 8001e18:	a30e      	add	r3, pc, #56	@ (adr r3, 8001e54 <degree_to_rad+0x4c>)
 8001e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e1e:	f7fe fbb7 	bl	8000590 <__aeabi_dmul>
 8001e22:	4602      	mov	r2, r0
 8001e24:	460b      	mov	r3, r1
 8001e26:	4610      	mov	r0, r2
 8001e28:	4619      	mov	r1, r3
 8001e2a:	f04f 0200 	mov.w	r2, #0
 8001e2e:	4b08      	ldr	r3, [pc, #32]	@ (8001e50 <degree_to_rad+0x48>)
 8001e30:	f7fe fcd8 	bl	80007e4 <__aeabi_ddiv>
 8001e34:	4602      	mov	r2, r0
 8001e36:	460b      	mov	r3, r1
 8001e38:	4610      	mov	r0, r2
 8001e3a:	4619      	mov	r1, r3
 8001e3c:	f7fe fe78 	bl	8000b30 <__aeabi_d2f>
 8001e40:	4603      	mov	r3, r0
 8001e42:	ee07 3a90 	vmov	s15, r3
}
 8001e46:	eeb0 0a67 	vmov.f32	s0, s15
 8001e4a:	3708      	adds	r7, #8
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd80      	pop	{r7, pc}
 8001e50:	40668000 	.word	0x40668000
 8001e54:	e5604189 	.word	0xe5604189
 8001e58:	400922d0 	.word	0x400922d0

08001e5c <Encoder_Init>:
#define Count_PER_REV 12000.0f
#define TWO_PI 6.283185f
#define PI 3.14286f
#define Lead 11.0f

void Encoder_Init(Encoder *enc, TIM_HandleTypeDef *htim) {
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b082      	sub	sp, #8
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
 8001e64:	6039      	str	r1, [r7, #0]
    enc->htim = htim;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	683a      	ldr	r2, [r7, #0]
 8001e6a:	601a      	str	r2, [r3, #0]
    HAL_TIM_Encoder_Start(htim, TIM_CHANNEL_ALL);
 8001e6c:	213c      	movs	r1, #60	@ 0x3c
 8001e6e:	6838      	ldr	r0, [r7, #0]
 8001e70:	f008 fc1e 	bl	800a6b0 <HAL_TIM_Encoder_Start>

    enc->lastRawPosition = __HAL_TIM_GET_COUNTER(htim);
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e7a:	461a      	mov	r2, r3
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	605a      	str	r2, [r3, #4]
    enc->position = 0;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	f04f 0200 	mov.w	r2, #0
 8001e86:	609a      	str	r2, [r3, #8]
    enc->velocity = 0;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	f04f 0200 	mov.w	r2, #0
 8001e8e:	60da      	str	r2, [r3, #12]
    enc->acceleration = 0;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	f04f 0200 	mov.w	r2, #0
 8001e96:	611a      	str	r2, [r3, #16]
    enc->lastPosition = 0;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	f04f 0200 	mov.w	r2, #0
 8001e9e:	619a      	str	r2, [r3, #24]
    enc->lastVelocity = 0;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	f04f 0200 	mov.w	r2, #0
 8001ea6:	61da      	str	r2, [r3, #28]
}
 8001ea8:	bf00      	nop
 8001eaa:	3708      	adds	r7, #8
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd80      	pop	{r7, pc}

08001eb0 <Encoder_Update>:

void Encoder_Update(Encoder *enc, float dt) {
 8001eb0:	b480      	push	{r7}
 8001eb2:	b085      	sub	sp, #20
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
 8001eb8:	ed87 0a00 	vstr	s0, [r7]
    int32_t rawPosition = __HAL_TIM_GET_COUNTER(enc->htim);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ec4:	60bb      	str	r3, [r7, #8]
    int32_t deltaRaw = rawPosition - enc->lastRawPosition;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	68ba      	ldr	r2, [r7, #8]
 8001ecc:	1ad3      	subs	r3, r2, r3
 8001ece:	60fb      	str	r3, [r7, #12]

    // Handle 16-bit counter wrap-around
    if (deltaRaw > 30000) {
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	f247 5230 	movw	r2, #30000	@ 0x7530
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	dd05      	ble.n	8001ee6 <Encoder_Update+0x36>
        deltaRaw -= 60000;
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	f5a3 436a 	sub.w	r3, r3, #59904	@ 0xea00
 8001ee0:	3b60      	subs	r3, #96	@ 0x60
 8001ee2:	60fb      	str	r3, [r7, #12]
 8001ee4:	e008      	b.n	8001ef8 <Encoder_Update+0x48>
    } else if (deltaRaw < -30000) {
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	4a48      	ldr	r2, [pc, #288]	@ (800200c <Encoder_Update+0x15c>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	da04      	bge.n	8001ef8 <Encoder_Update+0x48>
        deltaRaw += 60000;
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	f503 436a 	add.w	r3, r3, #59904	@ 0xea00
 8001ef4:	3360      	adds	r3, #96	@ 0x60
 8001ef6:	60fb      	str	r3, [r7, #12]
    }

    enc->position += ((float)deltaRaw * TWO_PI) / Count_PER_REV;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	ed93 7a02 	vldr	s14, [r3, #8]
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	ee07 3a90 	vmov	s15, r3
 8001f04:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f08:	eddf 6a41 	vldr	s13, [pc, #260]	@ 8002010 <Encoder_Update+0x160>
 8001f0c:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001f10:	ed9f 6a40 	vldr	s12, [pc, #256]	@ 8002014 <Encoder_Update+0x164>
 8001f14:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001f18:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	edc3 7a02 	vstr	s15, [r3, #8]
    enc->velocity = (enc->position - enc->lastPosition) / dt;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	ed93 7a02 	vldr	s14, [r3, #8]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	edd3 7a06 	vldr	s15, [r3, #24]
 8001f2e:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001f32:	ed97 7a00 	vldr	s14, [r7]
 8001f36:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	edc3 7a03 	vstr	s15, [r3, #12]
    enc->acceleration = (enc->velocity - enc->lastVelocity) / dt;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	ed93 7a03 	vldr	s14, [r3, #12]
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	edd3 7a07 	vldr	s15, [r3, #28]
 8001f4c:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001f50:	ed97 7a00 	vldr	s14, [r7]
 8001f54:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	edc3 7a04 	vstr	s15, [r3, #16]
    enc->position_degree = enc->position * (180.0f / PI);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	edd3 7a02 	vldr	s15, [r3, #8]
 8001f64:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 8002018 <Encoder_Update+0x168>
 8001f68:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	edc3 7a05 	vstr	s15, [r3, #20]

    enc->lastRawPosition = rawPosition;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	68ba      	ldr	r2, [r7, #8]
 8001f76:	605a      	str	r2, [r3, #4]
    enc->lastPosition = enc->position;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	689a      	ldr	r2, [r3, #8]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	619a      	str	r2, [r3, #24]
    enc->lastVelocity = enc->velocity;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	68da      	ldr	r2, [r3, #12]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	61da      	str	r2, [r3, #28]

    enc->position_mm += ((float)deltaRaw / Count_PER_REV) * Lead;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	ed93 7a08 	vldr	s14, [r3, #32]
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	ee07 3a90 	vmov	s15, r3
 8001f94:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001f98:	ed9f 6a1e 	vldr	s12, [pc, #120]	@ 8002014 <Encoder_Update+0x164>
 8001f9c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001fa0:	eef2 6a06 	vmov.f32	s13, #38	@ 0x41300000  11.0
 8001fa4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001fa8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	edc3 7a08 	vstr	s15, [r3, #32]
    enc->velocity_mm = (enc->position_mm - enc->lastPosition_mm) / dt;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	ed93 7a08 	vldr	s14, [r3, #32]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8001fbe:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001fc2:	ed97 7a00 	vldr	s14, [r7]
 8001fc6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
    enc->acceleration_mm = (enc->velocity_mm - enc->lastVelocity_mm) / dt;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8001fdc:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001fe0:	ed97 7a00 	vldr	s14, [r7]
 8001fe4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28

    enc->lastPosition_mm = enc->position_mm;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6a1a      	ldr	r2, [r3, #32]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	62da      	str	r2, [r3, #44]	@ 0x2c
    enc->lastVelocity_mm = enc->velocity_mm;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8001ffe:	bf00      	nop
 8002000:	3714      	adds	r7, #20
 8002002:	46bd      	mov	sp, r7
 8002004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002008:	4770      	bx	lr
 800200a:	bf00      	nop
 800200c:	ffff8ad0 	.word	0xffff8ad0
 8002010:	40c90fda 	.word	0x40c90fda
 8002014:	463b8000 	.word	0x463b8000
 8002018:	42651738 	.word	0x42651738

0800201c <Encoder_GetPosition>:

void Encoder_setLimit(Encoder *enc, float limit) {
		enc->position = limit;
}

float Encoder_GetPosition(Encoder *enc) {
 800201c:	b480      	push	{r7}
 800201e:	b083      	sub	sp, #12
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
    return enc->position;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	689b      	ldr	r3, [r3, #8]
 8002028:	ee07 3a90 	vmov	s15, r3
}
 800202c:	eeb0 0a67 	vmov.f32	s0, s15
 8002030:	370c      	adds	r7, #12
 8002032:	46bd      	mov	sp, r7
 8002034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002038:	4770      	bx	lr

0800203a <Encoder_GetVelocity>:

float Encoder_GetVelocity(Encoder *enc) {
 800203a:	b480      	push	{r7}
 800203c:	b083      	sub	sp, #12
 800203e:	af00      	add	r7, sp, #0
 8002040:	6078      	str	r0, [r7, #4]
    return enc->velocity;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	68db      	ldr	r3, [r3, #12]
 8002046:	ee07 3a90 	vmov	s15, r3
}
 800204a:	eeb0 0a67 	vmov.f32	s0, s15
 800204e:	370c      	adds	r7, #12
 8002050:	46bd      	mov	sp, r7
 8002052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002056:	4770      	bx	lr

08002058 <Encoder_GetAcceleration>:

float Encoder_GetAcceleration(Encoder *enc) {
 8002058:	b480      	push	{r7}
 800205a:	b083      	sub	sp, #12
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
    return enc->acceleration;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	691b      	ldr	r3, [r3, #16]
 8002064:	ee07 3a90 	vmov	s15, r3
}
 8002068:	eeb0 0a67 	vmov.f32	s0, s15
 800206c:	370c      	adds	r7, #12
 800206e:	46bd      	mov	sp, r7
 8002070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002074:	4770      	bx	lr

08002076 <Encoder_GetDegree>:

float Encoder_GetDegree(Encoder *enc) {
 8002076:	b480      	push	{r7}
 8002078:	b083      	sub	sp, #12
 800207a:	af00      	add	r7, sp, #0
 800207c:	6078      	str	r0, [r7, #4]
	return enc->position_degree;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	695b      	ldr	r3, [r3, #20]
 8002082:	ee07 3a90 	vmov	s15, r3
}
 8002086:	eeb0 0a67 	vmov.f32	s0, s15
 800208a:	370c      	adds	r7, #12
 800208c:	46bd      	mov	sp, r7
 800208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002092:	4770      	bx	lr

08002094 <Encoder_GetPosition_mm>:

float Encoder_GetPosition_mm(Encoder *enc) {
 8002094:	b480      	push	{r7}
 8002096:	b083      	sub	sp, #12
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
    return enc->position_mm;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6a1b      	ldr	r3, [r3, #32]
 80020a0:	ee07 3a90 	vmov	s15, r3
}
 80020a4:	eeb0 0a67 	vmov.f32	s0, s15
 80020a8:	370c      	adds	r7, #12
 80020aa:	46bd      	mov	sp, r7
 80020ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b0:	4770      	bx	lr

080020b2 <Encoder_GetVelocity_mm>:

float Encoder_GetVelocity_mm(Encoder *enc) {
 80020b2:	b480      	push	{r7}
 80020b4:	b083      	sub	sp, #12
 80020b6:	af00      	add	r7, sp, #0
 80020b8:	6078      	str	r0, [r7, #4]
    return enc->velocity_mm;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020be:	ee07 3a90 	vmov	s15, r3
}
 80020c2:	eeb0 0a67 	vmov.f32	s0, s15
 80020c6:	370c      	adds	r7, #12
 80020c8:	46bd      	mov	sp, r7
 80020ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ce:	4770      	bx	lr

080020d0 <Encoder_GetAcceleration_mm>:

float Encoder_GetAcceleration_mm(Encoder *enc) {
 80020d0:	b480      	push	{r7}
 80020d2:	b083      	sub	sp, #12
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
    return enc->acceleration_mm;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020dc:	ee07 3a90 	vmov	s15, r3
}
 80020e0:	eeb0 0a67 	vmov.f32	s0, s15
 80020e4:	370c      	adds	r7, #12
 80020e6:	46bd      	mov	sp, r7
 80020e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ec:	4770      	bx	lr
	...

080020f0 <PS2_ReadData>:
uint8_t SPIRx[PS2_DATA_LENGTH];

#define PS2_CS_PORT GPIOC
#define PS2_CS_PIN  GPIO_PIN_10

void PS2_ReadData() {
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b084      	sub	sp, #16
 80020f4:	af02      	add	r7, sp, #8
//	HAL_Delay(1);
	HAL_GPIO_WritePin(PS2_CS_PORT, PS2_CS_PIN, GPIO_PIN_RESET);
 80020f6:	2200      	movs	r2, #0
 80020f8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80020fc:	4811      	ldr	r0, [pc, #68]	@ (8002144 <PS2_ReadData+0x54>)
 80020fe:	f006 f965 	bl	80083cc <HAL_GPIO_WritePin>

	for (int i = 0; i < PS2_DATA_LENGTH; i++) {
 8002102:	2300      	movs	r3, #0
 8002104:	607b      	str	r3, [r7, #4]
 8002106:	e00f      	b.n	8002128 <PS2_ReadData+0x38>
		HAL_SPI_TransmitReceive(&hspi1, &SPITx[i], &SPIRx[i], 1, HAL_MAX_DELAY);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	4a0f      	ldr	r2, [pc, #60]	@ (8002148 <PS2_ReadData+0x58>)
 800210c:	1899      	adds	r1, r3, r2
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	4a0e      	ldr	r2, [pc, #56]	@ (800214c <PS2_ReadData+0x5c>)
 8002112:	441a      	add	r2, r3
 8002114:	f04f 33ff 	mov.w	r3, #4294967295
 8002118:	9300      	str	r3, [sp, #0]
 800211a:	2301      	movs	r3, #1
 800211c:	480c      	ldr	r0, [pc, #48]	@ (8002150 <PS2_ReadData+0x60>)
 800211e:	f007 fa60 	bl	80095e2 <HAL_SPI_TransmitReceive>
	for (int i = 0; i < PS2_DATA_LENGTH; i++) {
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	3301      	adds	r3, #1
 8002126:	607b      	str	r3, [r7, #4]
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2b07      	cmp	r3, #7
 800212c:	ddec      	ble.n	8002108 <PS2_ReadData+0x18>
//		HAL_Delay(5);
	}

	HAL_GPIO_WritePin(PS2_CS_PORT, PS2_CS_PIN, GPIO_PIN_SET);
 800212e:	2201      	movs	r2, #1
 8002130:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002134:	4803      	ldr	r0, [pc, #12]	@ (8002144 <PS2_ReadData+0x54>)
 8002136:	f006 f949 	bl	80083cc <HAL_GPIO_WritePin>
//	HAL_Delay(5);
}
 800213a:	bf00      	nop
 800213c:	3708      	adds	r7, #8
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}
 8002142:	bf00      	nop
 8002144:	48000800 	.word	0x48000800
 8002148:	20000000 	.word	0x20000000
 800214c:	200002dc 	.word	0x200002dc
 8002150:	20001680 	.word	0x20001680

08002154 <PS2_ButtonCircle>:

uint8_t PS2_ButtonCircle() {
 8002154:	b480      	push	{r7}
 8002156:	af00      	add	r7, sp, #0
	return !(SPIRx[4] & 0x20);
 8002158:	4b06      	ldr	r3, [pc, #24]	@ (8002174 <PS2_ButtonCircle+0x20>)
 800215a:	791b      	ldrb	r3, [r3, #4]
 800215c:	f003 0320 	and.w	r3, r3, #32
 8002160:	2b00      	cmp	r3, #0
 8002162:	bf0c      	ite	eq
 8002164:	2301      	moveq	r3, #1
 8002166:	2300      	movne	r3, #0
 8002168:	b2db      	uxtb	r3, r3
}
 800216a:	4618      	mov	r0, r3
 800216c:	46bd      	mov	sp, r7
 800216e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002172:	4770      	bx	lr
 8002174:	200002dc 	.word	0x200002dc

08002178 <PS2_ButtonSquare>:

uint8_t PS2_ButtonSquare() {
 8002178:	b480      	push	{r7}
 800217a:	af00      	add	r7, sp, #0
	return !(SPIRx[4] & 0x80);
 800217c:	4b05      	ldr	r3, [pc, #20]	@ (8002194 <PS2_ButtonSquare+0x1c>)
 800217e:	791b      	ldrb	r3, [r3, #4]
 8002180:	b25b      	sxtb	r3, r3
 8002182:	43db      	mvns	r3, r3
 8002184:	b2db      	uxtb	r3, r3
 8002186:	09db      	lsrs	r3, r3, #7
 8002188:	b2db      	uxtb	r3, r3
}
 800218a:	4618      	mov	r0, r3
 800218c:	46bd      	mov	sp, r7
 800218e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002192:	4770      	bx	lr
 8002194:	200002dc 	.word	0x200002dc

08002198 <PS2_ButtonTriangle>:

uint8_t PS2_ButtonTriangle() {
 8002198:	b480      	push	{r7}
 800219a:	af00      	add	r7, sp, #0
	return !(SPIRx[4] & 0x10);
 800219c:	4b06      	ldr	r3, [pc, #24]	@ (80021b8 <PS2_ButtonTriangle+0x20>)
 800219e:	791b      	ldrb	r3, [r3, #4]
 80021a0:	f003 0310 	and.w	r3, r3, #16
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	bf0c      	ite	eq
 80021a8:	2301      	moveq	r3, #1
 80021aa:	2300      	movne	r3, #0
 80021ac:	b2db      	uxtb	r3, r3
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	46bd      	mov	sp, r7
 80021b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b6:	4770      	bx	lr
 80021b8:	200002dc 	.word	0x200002dc

080021bc <PS2_ButtonCross>:

uint8_t PS2_ButtonCross() {
 80021bc:	b480      	push	{r7}
 80021be:	af00      	add	r7, sp, #0
	return !(SPIRx[4] & 0x40);
 80021c0:	4b06      	ldr	r3, [pc, #24]	@ (80021dc <PS2_ButtonCross+0x20>)
 80021c2:	791b      	ldrb	r3, [r3, #4]
 80021c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	bf0c      	ite	eq
 80021cc:	2301      	moveq	r3, #1
 80021ce:	2300      	movne	r3, #0
 80021d0:	b2db      	uxtb	r3, r3
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	46bd      	mov	sp, r7
 80021d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021da:	4770      	bx	lr
 80021dc:	200002dc 	.word	0x200002dc

080021e0 <PS2_ButtonR1>:

uint8_t PS2_ButtonR1() {
 80021e0:	b480      	push	{r7}
 80021e2:	af00      	add	r7, sp, #0
	return !(SPIRx[4] & 0x08);
 80021e4:	4b06      	ldr	r3, [pc, #24]	@ (8002200 <PS2_ButtonR1+0x20>)
 80021e6:	791b      	ldrb	r3, [r3, #4]
 80021e8:	f003 0308 	and.w	r3, r3, #8
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	bf0c      	ite	eq
 80021f0:	2301      	moveq	r3, #1
 80021f2:	2300      	movne	r3, #0
 80021f4:	b2db      	uxtb	r3, r3
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	46bd      	mov	sp, r7
 80021fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fe:	4770      	bx	lr
 8002200:	200002dc 	.word	0x200002dc

08002204 <PS2_ButtonR2>:

uint8_t PS2_ButtonR2() {
 8002204:	b480      	push	{r7}
 8002206:	af00      	add	r7, sp, #0
	return !(SPIRx[4] & 0x02);
 8002208:	4b06      	ldr	r3, [pc, #24]	@ (8002224 <PS2_ButtonR2+0x20>)
 800220a:	791b      	ldrb	r3, [r3, #4]
 800220c:	f003 0302 	and.w	r3, r3, #2
 8002210:	2b00      	cmp	r3, #0
 8002212:	bf0c      	ite	eq
 8002214:	2301      	moveq	r3, #1
 8002216:	2300      	movne	r3, #0
 8002218:	b2db      	uxtb	r3, r3
}
 800221a:	4618      	mov	r0, r3
 800221c:	46bd      	mov	sp, r7
 800221e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002222:	4770      	bx	lr
 8002224:	200002dc 	.word	0x200002dc

08002228 <PS2_ButtonSelect>:

uint8_t PS2_ButtonSelect() {
 8002228:	b480      	push	{r7}
 800222a:	af00      	add	r7, sp, #0
	return !(SPIRx[3] & 0x01);
 800222c:	4b06      	ldr	r3, [pc, #24]	@ (8002248 <PS2_ButtonSelect+0x20>)
 800222e:	78db      	ldrb	r3, [r3, #3]
 8002230:	f003 0301 	and.w	r3, r3, #1
 8002234:	2b00      	cmp	r3, #0
 8002236:	bf0c      	ite	eq
 8002238:	2301      	moveq	r3, #1
 800223a:	2300      	movne	r3, #0
 800223c:	b2db      	uxtb	r3, r3
}
 800223e:	4618      	mov	r0, r3
 8002240:	46bd      	mov	sp, r7
 8002242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002246:	4770      	bx	lr
 8002248:	200002dc 	.word	0x200002dc

0800224c <PS2_ButtonStart>:

uint8_t PS2_ButtonStart() {
 800224c:	b480      	push	{r7}
 800224e:	af00      	add	r7, sp, #0
	return !(SPIRx[3] & 0x08);
 8002250:	4b06      	ldr	r3, [pc, #24]	@ (800226c <PS2_ButtonStart+0x20>)
 8002252:	78db      	ldrb	r3, [r3, #3]
 8002254:	f003 0308 	and.w	r3, r3, #8
 8002258:	2b00      	cmp	r3, #0
 800225a:	bf0c      	ite	eq
 800225c:	2301      	moveq	r3, #1
 800225e:	2300      	movne	r3, #0
 8002260:	b2db      	uxtb	r3, r3
}
 8002262:	4618      	mov	r0, r3
 8002264:	46bd      	mov	sp, r7
 8002266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226a:	4770      	bx	lr
 800226c:	200002dc 	.word	0x200002dc

08002270 <PS2_ButtonL2>:

uint8_t PS2_ButtonL2() {
 8002270:	b480      	push	{r7}
 8002272:	af00      	add	r7, sp, #0
	 return !(SPIRx[4] & 0x01);
 8002274:	4b06      	ldr	r3, [pc, #24]	@ (8002290 <PS2_ButtonL2+0x20>)
 8002276:	791b      	ldrb	r3, [r3, #4]
 8002278:	f003 0301 	and.w	r3, r3, #1
 800227c:	2b00      	cmp	r3, #0
 800227e:	bf0c      	ite	eq
 8002280:	2301      	moveq	r3, #1
 8002282:	2300      	movne	r3, #0
 8002284:	b2db      	uxtb	r3, r3
}
 8002286:	4618      	mov	r0, r3
 8002288:	46bd      	mov	sp, r7
 800228a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228e:	4770      	bx	lr
 8002290:	200002dc 	.word	0x200002dc

08002294 <Kalman_Init>:
#include "Kalman_Filter.h"

void Kalman_Init(KalmanFilter *kf) {
 8002294:	b580      	push	{r7, lr}
 8002296:	b084      	sub	sp, #16
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
    arm_mat_init_f32(&kf->A, KALMAN_STATE_DIM, KALMAN_STATE_DIM, kf->A_data);
 800229c:	6878      	ldr	r0, [r7, #4]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	3370      	adds	r3, #112	@ 0x70
 80022a2:	2204      	movs	r2, #4
 80022a4:	2104      	movs	r1, #4
 80022a6:	f00c fbc0 	bl	800ea2a <arm_mat_init_f32>
    arm_mat_init_f32(&kf->B, KALMAN_STATE_DIM, KALMAN_MEAS_DIM, kf->B_data);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	f103 0008 	add.w	r0, r3, #8
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	33b0      	adds	r3, #176	@ 0xb0
 80022b4:	2204      	movs	r2, #4
 80022b6:	2104      	movs	r1, #4
 80022b8:	f00c fbb7 	bl	800ea2a <arm_mat_init_f32>
    arm_mat_init_f32(&kf->H, KALMAN_MEAS_DIM, KALMAN_STATE_DIM, kf->H_data);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	f103 0010 	add.w	r0, r3, #16
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	33f0      	adds	r3, #240	@ 0xf0
 80022c6:	2204      	movs	r2, #4
 80022c8:	2104      	movs	r1, #4
 80022ca:	f00c fbae 	bl	800ea2a <arm_mat_init_f32>
    arm_mat_init_f32(&kf->Q, KALMAN_STATE_DIM, KALMAN_STATE_DIM, kf->Q_data);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	f103 0018 	add.w	r0, r3, #24
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 80022da:	2204      	movs	r2, #4
 80022dc:	2104      	movs	r1, #4
 80022de:	f00c fba4 	bl	800ea2a <arm_mat_init_f32>
    arm_mat_init_f32(&kf->R, KALMAN_MEAS_DIM, KALMAN_MEAS_DIM, kf->R_data);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	f103 0020 	add.w	r0, r3, #32
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	f503 73b8 	add.w	r3, r3, #368	@ 0x170
 80022ee:	2204      	movs	r2, #4
 80022f0:	2104      	movs	r1, #4
 80022f2:	f00c fb9a 	bl	800ea2a <arm_mat_init_f32>
    arm_mat_init_f32(&kf->P, KALMAN_STATE_DIM, KALMAN_STATE_DIM, kf->P_data);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	f503 73d8 	add.w	r3, r3, #432	@ 0x1b0
 8002302:	2204      	movs	r2, #4
 8002304:	2104      	movs	r1, #4
 8002306:	f00c fb90 	bl	800ea2a <arm_mat_init_f32>
    arm_mat_init_f32(&kf->K, KALMAN_STATE_DIM, KALMAN_MEAS_DIM, kf->K_data);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	f503 73f8 	add.w	r3, r3, #496	@ 0x1f0
 8002316:	2204      	movs	r2, #4
 8002318:	2104      	movs	r1, #4
 800231a:	f00c fb86 	bl	800ea2a <arm_mat_init_f32>
    arm_mat_init_f32(&kf->Input, KALMAN_STATE_DIM, 1, kf->Input_data);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800232a:	2201      	movs	r2, #1
 800232c:	2104      	movs	r1, #4
 800232e:	f00c fb7c 	bl	800ea2a <arm_mat_init_f32>

    arm_mat_init_f32(&kf->x, KALMAN_STATE_DIM, 1, kf->x_data);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	f103 0040 	add.w	r0, r3, #64	@ 0x40
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 800233e:	2201      	movs	r2, #1
 8002340:	2104      	movs	r1, #4
 8002342:	f00c fb72 	bl	800ea2a <arm_mat_init_f32>
    arm_mat_init_f32(&kf->u, KALMAN_MEAS_DIM, 1, kf->u_data);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	f103 0048 	add.w	r0, r3, #72	@ 0x48
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	f503 7311 	add.w	r3, r3, #580	@ 0x244
 8002352:	2201      	movs	r2, #1
 8002354:	2104      	movs	r1, #4
 8002356:	f00c fb68 	bl	800ea2a <arm_mat_init_f32>
    arm_mat_init_f32(&kf->z, KALMAN_MEAS_DIM, 1, kf->z_data);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	f103 0050 	add.w	r0, r3, #80	@ 0x50
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002366:	2201      	movs	r2, #1
 8002368:	2104      	movs	r1, #4
 800236a:	f00c fb5e 	bl	800ea2a <arm_mat_init_f32>

    arm_mat_init_f32(&kf->temp1, KALMAN_STATE_DIM, KALMAN_STATE_DIM, kf->temp1_data);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	f103 0058 	add.w	r0, r3, #88	@ 0x58
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800237a:	2204      	movs	r2, #4
 800237c:	2104      	movs	r1, #4
 800237e:	f00c fb54 	bl	800ea2a <arm_mat_init_f32>
    arm_mat_init_f32(&kf->temp2, KALMAN_STATE_DIM, KALMAN_MEAS_DIM, kf->temp2_data);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	f103 0060 	add.w	r0, r3, #96	@ 0x60
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	f503 7329 	add.w	r3, r3, #676	@ 0x2a4
 800238e:	2204      	movs	r2, #4
 8002390:	2104      	movs	r1, #4
 8002392:	f00c fb4a 	bl	800ea2a <arm_mat_init_f32>
    arm_mat_init_f32(&kf->temp3, KALMAN_MEAS_DIM, KALMAN_MEAS_DIM, kf->temp3_data);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	f103 0068 	add.w	r0, r3, #104	@ 0x68
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	f503 7339 	add.w	r3, r3, #740	@ 0x2e4
 80023a2:	2204      	movs	r2, #4
 80023a4:	2104      	movs	r1, #4
 80023a6:	f00c fb40 	bl	800ea2a <arm_mat_init_f32>

    // Clear state
    for (int i = 0; i < KALMAN_STATE_DIM; i++) {
 80023aa:	2300      	movs	r3, #0
 80023ac:	60fb      	str	r3, [r7, #12]
 80023ae:	e00b      	b.n	80023c8 <Kalman_Init+0x134>
        kf->x_data[i] = 0.0f;
 80023b0:	687a      	ldr	r2, [r7, #4]
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	338c      	adds	r3, #140	@ 0x8c
 80023b6:	009b      	lsls	r3, r3, #2
 80023b8:	4413      	add	r3, r2
 80023ba:	3304      	adds	r3, #4
 80023bc:	f04f 0200 	mov.w	r2, #0
 80023c0:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < KALMAN_STATE_DIM; i++) {
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	3301      	adds	r3, #1
 80023c6:	60fb      	str	r3, [r7, #12]
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	2b03      	cmp	r3, #3
 80023cc:	ddf0      	ble.n	80023b0 <Kalman_Init+0x11c>
    }
}
 80023ce:	bf00      	nop
 80023d0:	bf00      	nop
 80023d2:	3710      	adds	r7, #16
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}

080023d8 <Kalman_SetProcessNoise>:

void Kalman_SetProcessNoise(KalmanFilter *kf, float value) {
 80023d8:	b480      	push	{r7}
 80023da:	b085      	sub	sp, #20
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
 80023e0:	ed87 0a00 	vstr	s0, [r7]
    for (int i = 0; i < KALMAN_STATE_DIM; i++) {
 80023e4:	2300      	movs	r3, #0
 80023e6:	60fb      	str	r3, [r7, #12]
 80023e8:	e01c      	b.n	8002424 <Kalman_SetProcessNoise+0x4c>
        for (int j = 0; j < KALMAN_STATE_DIM; j++) {
 80023ea:	2300      	movs	r3, #0
 80023ec:	60bb      	str	r3, [r7, #8]
 80023ee:	e013      	b.n	8002418 <Kalman_SetProcessNoise+0x40>
            kf->Q_data[i * KALMAN_STATE_DIM + j] = (i == j) ? value : 0.0f;
 80023f0:	68fa      	ldr	r2, [r7, #12]
 80023f2:	68bb      	ldr	r3, [r7, #8]
 80023f4:	429a      	cmp	r2, r3
 80023f6:	d101      	bne.n	80023fc <Kalman_SetProcessNoise+0x24>
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	e001      	b.n	8002400 <Kalman_SetProcessNoise+0x28>
 80023fc:	f04f 0300 	mov.w	r3, #0
 8002400:	68fa      	ldr	r2, [r7, #12]
 8002402:	0091      	lsls	r1, r2, #2
 8002404:	68ba      	ldr	r2, [r7, #8]
 8002406:	440a      	add	r2, r1
 8002408:	6879      	ldr	r1, [r7, #4]
 800240a:	324c      	adds	r2, #76	@ 0x4c
 800240c:	0092      	lsls	r2, r2, #2
 800240e:	440a      	add	r2, r1
 8002410:	6013      	str	r3, [r2, #0]
        for (int j = 0; j < KALMAN_STATE_DIM; j++) {
 8002412:	68bb      	ldr	r3, [r7, #8]
 8002414:	3301      	adds	r3, #1
 8002416:	60bb      	str	r3, [r7, #8]
 8002418:	68bb      	ldr	r3, [r7, #8]
 800241a:	2b03      	cmp	r3, #3
 800241c:	dde8      	ble.n	80023f0 <Kalman_SetProcessNoise+0x18>
    for (int i = 0; i < KALMAN_STATE_DIM; i++) {
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	3301      	adds	r3, #1
 8002422:	60fb      	str	r3, [r7, #12]
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	2b03      	cmp	r3, #3
 8002428:	dddf      	ble.n	80023ea <Kalman_SetProcessNoise+0x12>
        }
    }
}
 800242a:	bf00      	nop
 800242c:	bf00      	nop
 800242e:	3714      	adds	r7, #20
 8002430:	46bd      	mov	sp, r7
 8002432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002436:	4770      	bx	lr

08002438 <Kalman_SetMeasurementNoise>:

void Kalman_SetMeasurementNoise(KalmanFilter *kf, float value) {
 8002438:	b480      	push	{r7}
 800243a:	b085      	sub	sp, #20
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
 8002440:	ed87 0a00 	vstr	s0, [r7]
    for (int i = 0; i < KALMAN_MEAS_DIM; i++) {
 8002444:	2300      	movs	r3, #0
 8002446:	60fb      	str	r3, [r7, #12]
 8002448:	e01c      	b.n	8002484 <Kalman_SetMeasurementNoise+0x4c>
        for (int j = 0; j < KALMAN_MEAS_DIM; j++) {
 800244a:	2300      	movs	r3, #0
 800244c:	60bb      	str	r3, [r7, #8]
 800244e:	e013      	b.n	8002478 <Kalman_SetMeasurementNoise+0x40>
            kf->R_data[i * KALMAN_MEAS_DIM + j] = (i == j) ? value : 0.0f;
 8002450:	68fa      	ldr	r2, [r7, #12]
 8002452:	68bb      	ldr	r3, [r7, #8]
 8002454:	429a      	cmp	r2, r3
 8002456:	d101      	bne.n	800245c <Kalman_SetMeasurementNoise+0x24>
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	e001      	b.n	8002460 <Kalman_SetMeasurementNoise+0x28>
 800245c:	f04f 0300 	mov.w	r3, #0
 8002460:	68fa      	ldr	r2, [r7, #12]
 8002462:	0091      	lsls	r1, r2, #2
 8002464:	68ba      	ldr	r2, [r7, #8]
 8002466:	440a      	add	r2, r1
 8002468:	6879      	ldr	r1, [r7, #4]
 800246a:	325c      	adds	r2, #92	@ 0x5c
 800246c:	0092      	lsls	r2, r2, #2
 800246e:	440a      	add	r2, r1
 8002470:	6013      	str	r3, [r2, #0]
        for (int j = 0; j < KALMAN_MEAS_DIM; j++) {
 8002472:	68bb      	ldr	r3, [r7, #8]
 8002474:	3301      	adds	r3, #1
 8002476:	60bb      	str	r3, [r7, #8]
 8002478:	68bb      	ldr	r3, [r7, #8]
 800247a:	2b03      	cmp	r3, #3
 800247c:	dde8      	ble.n	8002450 <Kalman_SetMeasurementNoise+0x18>
    for (int i = 0; i < KALMAN_MEAS_DIM; i++) {
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	3301      	adds	r3, #1
 8002482:	60fb      	str	r3, [r7, #12]
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	2b03      	cmp	r3, #3
 8002488:	dddf      	ble.n	800244a <Kalman_SetMeasurementNoise+0x12>
        }
    }
}
 800248a:	bf00      	nop
 800248c:	bf00      	nop
 800248e:	3714      	adds	r7, #20
 8002490:	46bd      	mov	sp, r7
 8002492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002496:	4770      	bx	lr

08002498 <Kalman_SetInput>:

void Kalman_SetInput(KalmanFilter *kf, float value)
{
 8002498:	b480      	push	{r7}
 800249a:	b083      	sub	sp, #12
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
 80024a0:	ed87 0a00 	vstr	s0, [r7]
	kf->Input_data[0] = value;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	683a      	ldr	r2, [r7, #0]
 80024a8:	f8c3 2230 	str.w	r2, [r3, #560]	@ 0x230
}
 80024ac:	bf00      	nop
 80024ae:	370c      	adds	r7, #12
 80024b0:	46bd      	mov	sp, r7
 80024b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b6:	4770      	bx	lr

080024b8 <Kalman_Predict>:
void Kalman_Predict(KalmanFilter *kf) {
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b082      	sub	sp, #8
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
	// x = A * x + B * u
	arm_mat_mult_f32(&kf->A, &kf->x, &kf->temp1);   // temp1 = A * x
 80024c0:	6878      	ldr	r0, [r7, #4]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	3358      	adds	r3, #88	@ 0x58
 80024cc:	461a      	mov	r2, r3
 80024ce:	f00c fe3b 	bl	800f148 <arm_mat_mult_f32>
	arm_mat_mult_f32(&kf->B, &kf->Input, &kf->temp2);   // temp2 = B * u
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	f103 0008 	add.w	r0, r3, #8
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	3360      	adds	r3, #96	@ 0x60
 80024e2:	461a      	mov	r2, r3
 80024e4:	f00c fe30 	bl	800f148 <arm_mat_mult_f32>
	arm_mat_add_f32(&kf->temp1, &kf->temp2, &kf->x); // x = temp1 + temp2
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	f103 0058 	add.w	r0, r3, #88	@ 0x58
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	f103 0160 	add.w	r1, r3, #96	@ 0x60
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	3340      	adds	r3, #64	@ 0x40
 80024f8:	461a      	mov	r2, r3
 80024fa:	f00c fa5b 	bl	800e9b4 <arm_mat_add_f32>

    // P = A * P * A' + Q
    arm_mat_mult_f32(&kf->A, &kf->P, &kf->temp1);
 80024fe:	6878      	ldr	r0, [r7, #4]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	3358      	adds	r3, #88	@ 0x58
 800250a:	461a      	mov	r2, r3
 800250c:	f00c fe1c 	bl	800f148 <arm_mat_mult_f32>
    arm_mat_trans_f32(&kf->A, &kf->temp2);  // reuse temp2
 8002510:	687a      	ldr	r2, [r7, #4]
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	3360      	adds	r3, #96	@ 0x60
 8002516:	4619      	mov	r1, r3
 8002518:	4610      	mov	r0, r2
 800251a:	f00c feca 	bl	800f2b2 <arm_mat_trans_f32>
    arm_mat_mult_f32(&kf->temp1, &kf->temp2, &kf->P);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	f103 0058 	add.w	r0, r3, #88	@ 0x58
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	f103 0160 	add.w	r1, r3, #96	@ 0x60
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	3328      	adds	r3, #40	@ 0x28
 800252e:	461a      	mov	r2, r3
 8002530:	f00c fe0a 	bl	800f148 <arm_mat_mult_f32>
    arm_mat_add_f32(&kf->P, &kf->Q, &kf->P);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	f103 0118 	add.w	r1, r3, #24
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	3328      	adds	r3, #40	@ 0x28
 8002544:	461a      	mov	r2, r3
 8002546:	f00c fa35 	bl	800e9b4 <arm_mat_add_f32>
}
 800254a:	bf00      	nop
 800254c:	3708      	adds	r7, #8
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}

08002552 <Kalman_Update>:

void Kalman_Update(KalmanFilter *kf, float32_t *measurement) {
 8002552:	b580      	push	{r7, lr}
 8002554:	b088      	sub	sp, #32
 8002556:	af00      	add	r7, sp, #0
 8002558:	6078      	str	r0, [r7, #4]
 800255a:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < KALMAN_MEAS_DIM; i++) {
 800255c:	2300      	movs	r3, #0
 800255e:	61fb      	str	r3, [r7, #28]
 8002560:	e00e      	b.n	8002580 <Kalman_Update+0x2e>
        kf->z_data[i] = measurement[i];
 8002562:	69fb      	ldr	r3, [r7, #28]
 8002564:	009b      	lsls	r3, r3, #2
 8002566:	683a      	ldr	r2, [r7, #0]
 8002568:	4413      	add	r3, r2
 800256a:	681a      	ldr	r2, [r3, #0]
 800256c:	6879      	ldr	r1, [r7, #4]
 800256e:	69fb      	ldr	r3, [r7, #28]
 8002570:	3394      	adds	r3, #148	@ 0x94
 8002572:	009b      	lsls	r3, r3, #2
 8002574:	440b      	add	r3, r1
 8002576:	3304      	adds	r3, #4
 8002578:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < KALMAN_MEAS_DIM; i++) {
 800257a:	69fb      	ldr	r3, [r7, #28]
 800257c:	3301      	adds	r3, #1
 800257e:	61fb      	str	r3, [r7, #28]
 8002580:	69fb      	ldr	r3, [r7, #28]
 8002582:	2b03      	cmp	r3, #3
 8002584:	dded      	ble.n	8002562 <Kalman_Update+0x10>
    }

    // K = P * H' * (H * P * H' + R)^-1
    arm_mat_trans_f32(&kf->H, &kf->temp2);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	f103 0210 	add.w	r2, r3, #16
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	3360      	adds	r3, #96	@ 0x60
 8002590:	4619      	mov	r1, r3
 8002592:	4610      	mov	r0, r2
 8002594:	f00c fe8d 	bl	800f2b2 <arm_mat_trans_f32>
    arm_mat_mult_f32(&kf->P, &kf->temp2, &kf->temp1);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	f103 0160 	add.w	r1, r3, #96	@ 0x60
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	3358      	adds	r3, #88	@ 0x58
 80025a8:	461a      	mov	r2, r3
 80025aa:	f00c fdcd 	bl	800f148 <arm_mat_mult_f32>
    arm_mat_mult_f32(&kf->H, &kf->temp1, &kf->temp3);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	f103 0010 	add.w	r0, r3, #16
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	f103 0158 	add.w	r1, r3, #88	@ 0x58
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	3368      	adds	r3, #104	@ 0x68
 80025be:	461a      	mov	r2, r3
 80025c0:	f00c fdc2 	bl	800f148 <arm_mat_mult_f32>
    arm_mat_add_f32(&kf->temp3, &kf->R, &kf->temp3);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	f103 0068 	add.w	r0, r3, #104	@ 0x68
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	f103 0120 	add.w	r1, r3, #32
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	3368      	adds	r3, #104	@ 0x68
 80025d4:	461a      	mov	r2, r3
 80025d6:	f00c f9ed 	bl	800e9b4 <arm_mat_add_f32>
    arm_mat_inverse_f32(&kf->temp3, &kf->temp3);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	3368      	adds	r3, #104	@ 0x68
 80025e4:	4619      	mov	r1, r3
 80025e6:	4610      	mov	r0, r2
 80025e8:	f00c fa37 	bl	800ea5a <arm_mat_inverse_f32>
    arm_mat_mult_f32(&kf->temp1, &kf->temp3, &kf->K);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	f103 0058 	add.w	r0, r3, #88	@ 0x58
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	f103 0168 	add.w	r1, r3, #104	@ 0x68
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	3330      	adds	r3, #48	@ 0x30
 80025fc:	461a      	mov	r2, r3
 80025fe:	f00c fda3 	bl	800f148 <arm_mat_mult_f32>

    // x = x + K * (z - H * x)
    arm_mat_mult_f32(&kf->H, &kf->x, &kf->u);         // reuse u for Hx
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	f103 0010 	add.w	r0, r3, #16
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	3348      	adds	r3, #72	@ 0x48
 8002612:	461a      	mov	r2, r3
 8002614:	f00c fd98 	bl	800f148 <arm_mat_mult_f32>
    for (int i = 0; i < KALMAN_MEAS_DIM; i++) {
 8002618:	2300      	movs	r3, #0
 800261a:	61bb      	str	r3, [r7, #24]
 800261c:	e01c      	b.n	8002658 <Kalman_Update+0x106>
        kf->u_data[i] = kf->z_data[i] - kf->u_data[i]; // z - Hx
 800261e:	687a      	ldr	r2, [r7, #4]
 8002620:	69bb      	ldr	r3, [r7, #24]
 8002622:	3394      	adds	r3, #148	@ 0x94
 8002624:	009b      	lsls	r3, r3, #2
 8002626:	4413      	add	r3, r2
 8002628:	3304      	adds	r3, #4
 800262a:	ed93 7a00 	vldr	s14, [r3]
 800262e:	687a      	ldr	r2, [r7, #4]
 8002630:	69bb      	ldr	r3, [r7, #24]
 8002632:	3390      	adds	r3, #144	@ 0x90
 8002634:	009b      	lsls	r3, r3, #2
 8002636:	4413      	add	r3, r2
 8002638:	3304      	adds	r3, #4
 800263a:	edd3 7a00 	vldr	s15, [r3]
 800263e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002642:	687a      	ldr	r2, [r7, #4]
 8002644:	69bb      	ldr	r3, [r7, #24]
 8002646:	3390      	adds	r3, #144	@ 0x90
 8002648:	009b      	lsls	r3, r3, #2
 800264a:	4413      	add	r3, r2
 800264c:	3304      	adds	r3, #4
 800264e:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < KALMAN_MEAS_DIM; i++) {
 8002652:	69bb      	ldr	r3, [r7, #24]
 8002654:	3301      	adds	r3, #1
 8002656:	61bb      	str	r3, [r7, #24]
 8002658:	69bb      	ldr	r3, [r7, #24]
 800265a:	2b03      	cmp	r3, #3
 800265c:	dddf      	ble.n	800261e <Kalman_Update+0xcc>
    }
    arm_mat_mult_f32(&kf->K, &kf->u, &kf->u);         // reuse u for K*(z-Hx)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	f103 0148 	add.w	r1, r3, #72	@ 0x48
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	3348      	adds	r3, #72	@ 0x48
 800266e:	461a      	mov	r2, r3
 8002670:	f00c fd6a 	bl	800f148 <arm_mat_mult_f32>
    for (int i = 0; i < KALMAN_STATE_DIM; i++) {
 8002674:	2300      	movs	r3, #0
 8002676:	617b      	str	r3, [r7, #20]
 8002678:	e01c      	b.n	80026b4 <Kalman_Update+0x162>
        kf->x_data[i] += kf->u_data[i];
 800267a:	687a      	ldr	r2, [r7, #4]
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	338c      	adds	r3, #140	@ 0x8c
 8002680:	009b      	lsls	r3, r3, #2
 8002682:	4413      	add	r3, r2
 8002684:	3304      	adds	r3, #4
 8002686:	ed93 7a00 	vldr	s14, [r3]
 800268a:	687a      	ldr	r2, [r7, #4]
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	3390      	adds	r3, #144	@ 0x90
 8002690:	009b      	lsls	r3, r3, #2
 8002692:	4413      	add	r3, r2
 8002694:	3304      	adds	r3, #4
 8002696:	edd3 7a00 	vldr	s15, [r3]
 800269a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800269e:	687a      	ldr	r2, [r7, #4]
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	338c      	adds	r3, #140	@ 0x8c
 80026a4:	009b      	lsls	r3, r3, #2
 80026a6:	4413      	add	r3, r2
 80026a8:	3304      	adds	r3, #4
 80026aa:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < KALMAN_STATE_DIM; i++) {
 80026ae:	697b      	ldr	r3, [r7, #20]
 80026b0:	3301      	adds	r3, #1
 80026b2:	617b      	str	r3, [r7, #20]
 80026b4:	697b      	ldr	r3, [r7, #20]
 80026b6:	2b03      	cmp	r3, #3
 80026b8:	dddf      	ble.n	800267a <Kalman_Update+0x128>
    }

    // P = (I - K * H) * P
    for (int i = 0; i < KALMAN_STATE_DIM * KALMAN_STATE_DIM; i++) {
 80026ba:	2300      	movs	r3, #0
 80026bc:	613b      	str	r3, [r7, #16]
 80026be:	e00b      	b.n	80026d8 <Kalman_Update+0x186>
        kf->temp1_data[i] = 0.0f;
 80026c0:	687a      	ldr	r2, [r7, #4]
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	3398      	adds	r3, #152	@ 0x98
 80026c6:	009b      	lsls	r3, r3, #2
 80026c8:	4413      	add	r3, r2
 80026ca:	3304      	adds	r3, #4
 80026cc:	f04f 0200 	mov.w	r2, #0
 80026d0:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < KALMAN_STATE_DIM * KALMAN_STATE_DIM; i++) {
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	3301      	adds	r3, #1
 80026d6:	613b      	str	r3, [r7, #16]
 80026d8:	693b      	ldr	r3, [r7, #16]
 80026da:	2b0f      	cmp	r3, #15
 80026dc:	ddf0      	ble.n	80026c0 <Kalman_Update+0x16e>
    }
    for (int i = 0; i < KALMAN_STATE_DIM; i++) {
 80026de:	2300      	movs	r3, #0
 80026e0:	60fb      	str	r3, [r7, #12]
 80026e2:	e00e      	b.n	8002702 <Kalman_Update+0x1b0>
        kf->temp1_data[i * KALMAN_STATE_DIM + i] = 1.0f;
 80026e4:	68fa      	ldr	r2, [r7, #12]
 80026e6:	4613      	mov	r3, r2
 80026e8:	009b      	lsls	r3, r3, #2
 80026ea:	4413      	add	r3, r2
 80026ec:	687a      	ldr	r2, [r7, #4]
 80026ee:	3398      	adds	r3, #152	@ 0x98
 80026f0:	009b      	lsls	r3, r3, #2
 80026f2:	4413      	add	r3, r2
 80026f4:	3304      	adds	r3, #4
 80026f6:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80026fa:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < KALMAN_STATE_DIM; i++) {
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	3301      	adds	r3, #1
 8002700:	60fb      	str	r3, [r7, #12]
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	2b03      	cmp	r3, #3
 8002706:	dded      	ble.n	80026e4 <Kalman_Update+0x192>
    }
    arm_mat_mult_f32(&kf->K, &kf->H, &kf->temp2);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	f103 0110 	add.w	r1, r3, #16
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	3360      	adds	r3, #96	@ 0x60
 8002718:	461a      	mov	r2, r3
 800271a:	f00c fd15 	bl	800f148 <arm_mat_mult_f32>
    arm_mat_sub_f32(&kf->temp1, &kf->temp2, &kf->temp1);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	f103 0058 	add.w	r0, r3, #88	@ 0x58
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	f103 0160 	add.w	r1, r3, #96	@ 0x60
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	3358      	adds	r3, #88	@ 0x58
 800272e:	461a      	mov	r2, r3
 8002730:	f00c fd84 	bl	800f23c <arm_mat_sub_f32>
    arm_mat_mult_f32(&kf->temp1, &kf->P, &kf->P);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	f103 0058 	add.w	r0, r3, #88	@ 0x58
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	3328      	adds	r3, #40	@ 0x28
 8002744:	461a      	mov	r2, r3
 8002746:	f00c fcff 	bl	800f148 <arm_mat_mult_f32>
}
 800274a:	bf00      	nop
 800274c:	3720      	adds	r7, #32
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}
	...

08002754 <modbus_1t5_Timeout>:
void Modbus_frame_response();


// function for interrupt
void modbus_1t5_Timeout(TIM_HandleTypeDef *htim)
{
 8002754:	b480      	push	{r7}
 8002756:	b083      	sub	sp, #12
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 800275c:	4b04      	ldr	r3, [pc, #16]	@ (8002770 <modbus_1t5_Timeout+0x1c>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	2201      	movs	r2, #1
 8002762:	751a      	strb	r2, [r3, #20]
}
 8002764:	bf00      	nop
 8002766:	370c      	adds	r7, #12
 8002768:	46bd      	mov	sp, r7
 800276a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276e:	4770      	bx	lr
 8002770:	200002e4 	.word	0x200002e4

08002774 <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim)
{
 8002774:	b480      	push	{r7}
 8002776:	b083      	sub	sp, #12
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 800277c:	4b04      	ldr	r3, [pc, #16]	@ (8002790 <modbus_3t5_Timeout+0x1c>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	2201      	movs	r2, #1
 8002782:	755a      	strb	r2, [r3, #21]
}
 8002784:	bf00      	nop
 8002786:	370c      	adds	r7, #12
 8002788:	46bd      	mov	sp, r7
 800278a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278e:	4770      	bx	lr
 8002790:	200002e4 	.word	0x200002e4

08002794 <modbus_UART_Recived>:
void modbus_UART_Recived(UART_HandleTypeDef *huart,uint32_t pos)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b082      	sub	sp, #8
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
 800279c:	6039      	str	r1, [r7, #0]

	//restart timer / start timer of counting time with modbus RTU
	hModbus->Flag_URev =1;
 800279e:	4b15      	ldr	r3, [pc, #84]	@ (80027f4 <modbus_UART_Recived+0x60>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	2201      	movs	r2, #1
 80027a4:	759a      	strb	r2, [r3, #22]
	if(hModbus->modbusUartStructure.RxTail++<MODBUS_MESSAGEBUFFER_SIZE)
 80027a6:	4b13      	ldr	r3, [pc, #76]	@ (80027f4 <modbus_UART_Recived+0x60>)
 80027a8:	681a      	ldr	r2, [r3, #0]
 80027aa:	f8b2 33a2 	ldrh.w	r3, [r2, #930]	@ 0x3a2
 80027ae:	1c59      	adds	r1, r3, #1
 80027b0:	b289      	uxth	r1, r1
 80027b2:	f8a2 13a2 	strh.w	r1, [r2, #930]	@ 0x3a2
 80027b6:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 80027ba:	d210      	bcs.n	80027de <modbus_UART_Recived+0x4a>
	{


	    HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 80027bc:	4b0d      	ldr	r3, [pc, #52]	@ (80027f4 <modbus_UART_Recived+0x60>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	68d8      	ldr	r0, [r3, #12]
 80027c2:	4b0c      	ldr	r3, [pc, #48]	@ (80027f4 <modbus_UART_Recived+0x60>)
 80027c4:	681a      	ldr	r2, [r3, #0]
 80027c6:	4b0b      	ldr	r3, [pc, #44]	@ (80027f4 <modbus_UART_Recived+0x60>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 80027ce:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 80027d2:	4413      	add	r3, r2
 80027d4:	3302      	adds	r3, #2
 80027d6:	2201      	movs	r2, #1
 80027d8:	4619      	mov	r1, r3
 80027da:	f009 fd79 	bl	800c2d0 <HAL_UART_Receive_IT>
	}
	__HAL_TIM_SET_COUNTER(hModbus->htim,0);
 80027de:	4b05      	ldr	r3, [pc, #20]	@ (80027f4 <modbus_UART_Recived+0x60>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	691b      	ldr	r3, [r3, #16]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	2200      	movs	r2, #0
 80027e8:	625a      	str	r2, [r3, #36]	@ 0x24

}
 80027ea:	bf00      	nop
 80027ec:	3708      	adds	r7, #8
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}
 80027f2:	bf00      	nop
 80027f4:	200002e4 	.word	0x200002e4

080027f8 <Modbus_init>:


void Modbus_init(ModbusHandleTypedef* hmodbus,u16u8_t* RegisterStartAddress)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b082      	sub	sp, #8
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
 8002800:	6039      	str	r1, [r7, #0]
	hModbus = hmodbus;
 8002802:	4a24      	ldr	r2, [pc, #144]	@ (8002894 <Modbus_init+0x9c>)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6013      	str	r3, [r2, #0]

	hModbus->RegisterAddress = RegisterStartAddress;
 8002808:	4b22      	ldr	r3, [pc, #136]	@ (8002894 <Modbus_init+0x9c>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	683a      	ldr	r2, [r7, #0]
 800280e:	605a      	str	r2, [r3, #4]

	//config timer interrupt
	HAL_TIM_RegisterCallback(hModbus->htim,HAL_TIM_OC_DELAY_ELAPSED_CB_ID,(void*)modbus_1t5_Timeout);
 8002810:	4b20      	ldr	r3, [pc, #128]	@ (8002894 <Modbus_init+0x9c>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	691b      	ldr	r3, [r3, #16]
 8002816:	4a20      	ldr	r2, [pc, #128]	@ (8002898 <Modbus_init+0xa0>)
 8002818:	2114      	movs	r1, #20
 800281a:	4618      	mov	r0, r3
 800281c:	f008 fc4e 	bl	800b0bc <HAL_TIM_RegisterCallback>
	HAL_TIM_RegisterCallback(hModbus->htim,HAL_TIM_PERIOD_ELAPSED_CB_ID ,(void*)modbus_3t5_Timeout);
 8002820:	4b1c      	ldr	r3, [pc, #112]	@ (8002894 <Modbus_init+0x9c>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	691b      	ldr	r3, [r3, #16]
 8002826:	4a1d      	ldr	r2, [pc, #116]	@ (800289c <Modbus_init+0xa4>)
 8002828:	210e      	movs	r1, #14
 800282a:	4618      	mov	r0, r3
 800282c:	f008 fc46 	bl	800b0bc <HAL_TIM_RegisterCallback>

	//config UART interrupt
	HAL_UART_RegisterCallback(hModbus->huart,HAL_UART_RX_COMPLETE_CB_ID,(void*)modbus_UART_Recived);
 8002830:	4b18      	ldr	r3, [pc, #96]	@ (8002894 <Modbus_init+0x9c>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	68db      	ldr	r3, [r3, #12]
 8002836:	4a1a      	ldr	r2, [pc, #104]	@ (80028a0 <Modbus_init+0xa8>)
 8002838:	2103      	movs	r1, #3
 800283a:	4618      	mov	r0, r3
 800283c:	f009 fc8e 	bl	800c15c <HAL_UART_RegisterCallback>
	//start Receive
    HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 8002840:	4b14      	ldr	r3, [pc, #80]	@ (8002894 <Modbus_init+0x9c>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	68d8      	ldr	r0, [r3, #12]
 8002846:	4b13      	ldr	r3, [pc, #76]	@ (8002894 <Modbus_init+0x9c>)
 8002848:	681a      	ldr	r2, [r3, #0]
 800284a:	4b12      	ldr	r3, [pc, #72]	@ (8002894 <Modbus_init+0x9c>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8002852:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 8002856:	4413      	add	r3, r2
 8002858:	3302      	adds	r3, #2
 800285a:	2201      	movs	r2, #1
 800285c:	4619      	mov	r1, r3
 800285e:	f009 fd37 	bl	800c2d0 <HAL_UART_Receive_IT>


    if(hModbus->htim->State == HAL_TIM_STATE_READY)
 8002862:	4b0c      	ldr	r3, [pc, #48]	@ (8002894 <Modbus_init+0x9c>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	691b      	ldr	r3, [r3, #16]
 8002868:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800286c:	b2db      	uxtb	r3, r3
 800286e:	2b01      	cmp	r3, #1
 8002870:	d10c      	bne.n	800288c <Modbus_init+0x94>
    	{
    		HAL_TIM_Base_Start_IT(hModbus->htim);
 8002872:	4b08      	ldr	r3, [pc, #32]	@ (8002894 <Modbus_init+0x9c>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	691b      	ldr	r3, [r3, #16]
 8002878:	4618      	mov	r0, r3
 800287a:	f007 fb09 	bl	8009e90 <HAL_TIM_Base_Start_IT>
    		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 800287e:	4b05      	ldr	r3, [pc, #20]	@ (8002894 <Modbus_init+0x9c>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	691b      	ldr	r3, [r3, #16]
 8002884:	2100      	movs	r1, #0
 8002886:	4618      	mov	r0, r3
 8002888:	f007 fdd0 	bl	800a42c <HAL_TIM_OnePulse_Start_IT>
    	}

}
 800288c:	bf00      	nop
 800288e:	3708      	adds	r7, #8
 8002890:	46bd      	mov	sp, r7
 8002892:	bd80      	pop	{r7, pc}
 8002894:	200002e4 	.word	0x200002e4
 8002898:	08002755 	.word	0x08002755
 800289c:	08002775 	.word	0x08002775
 80028a0:	08002795 	.word	0x08002795

080028a4 <CRC16>:
} ;

unsigned short CRC16 ( puchMsg, usDataLen ) /* The function returns the CRC as a unsigned short type */
unsigned char *puchMsg ; /* message to calculate CRC upon */
unsigned short usDataLen ; /* quantity of bytes in message */
{
 80028a4:	b480      	push	{r7}
 80028a6:	b085      	sub	sp, #20
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
 80028ac:	460b      	mov	r3, r1
 80028ae:	803b      	strh	r3, [r7, #0]
	unsigned char uchCRCHi = 0xFF ; /* high byte of CRC initialized */
 80028b0:	23ff      	movs	r3, #255	@ 0xff
 80028b2:	73fb      	strb	r3, [r7, #15]
	unsigned char uchCRCLo = 0xFF ; /* low byte of CRC initialized */
 80028b4:	23ff      	movs	r3, #255	@ 0xff
 80028b6:	73bb      	strb	r3, [r7, #14]
	unsigned uIndex ; /* will index into CRC lookup table */
	while (usDataLen--) /* pass through message buffer */
 80028b8:	e013      	b.n	80028e2 <CRC16+0x3e>
	{
		uIndex = uchCRCLo ^ *puchMsg++ ; /* calculate the CRC */
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	1c5a      	adds	r2, r3, #1
 80028be:	607a      	str	r2, [r7, #4]
 80028c0:	781a      	ldrb	r2, [r3, #0]
 80028c2:	7bbb      	ldrb	r3, [r7, #14]
 80028c4:	4053      	eors	r3, r2
 80028c6:	b2db      	uxtb	r3, r3
 80028c8:	60bb      	str	r3, [r7, #8]
		uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex] ;
 80028ca:	4a10      	ldr	r2, [pc, #64]	@ (800290c <CRC16+0x68>)
 80028cc:	68bb      	ldr	r3, [r7, #8]
 80028ce:	4413      	add	r3, r2
 80028d0:	781a      	ldrb	r2, [r3, #0]
 80028d2:	7bfb      	ldrb	r3, [r7, #15]
 80028d4:	4053      	eors	r3, r2
 80028d6:	73bb      	strb	r3, [r7, #14]
		uchCRCHi = auchCRCLo[uIndex] ;
 80028d8:	4a0d      	ldr	r2, [pc, #52]	@ (8002910 <CRC16+0x6c>)
 80028da:	68bb      	ldr	r3, [r7, #8]
 80028dc:	4413      	add	r3, r2
 80028de:	781b      	ldrb	r3, [r3, #0]
 80028e0:	73fb      	strb	r3, [r7, #15]
	while (usDataLen--) /* pass through message buffer */
 80028e2:	883b      	ldrh	r3, [r7, #0]
 80028e4:	1e5a      	subs	r2, r3, #1
 80028e6:	803a      	strh	r2, [r7, #0]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d1e6      	bne.n	80028ba <CRC16+0x16>
	}
	return (uchCRCHi << 8 | uchCRCLo) ;
 80028ec:	7bfb      	ldrb	r3, [r7, #15]
 80028ee:	b21b      	sxth	r3, r3
 80028f0:	021b      	lsls	r3, r3, #8
 80028f2:	b21a      	sxth	r2, r3
 80028f4:	7bbb      	ldrb	r3, [r7, #14]
 80028f6:	b21b      	sxth	r3, r3
 80028f8:	4313      	orrs	r3, r2
 80028fa:	b21b      	sxth	r3, r3
 80028fc:	b29b      	uxth	r3, r3
}
 80028fe:	4618      	mov	r0, r3
 8002900:	3714      	adds	r7, #20
 8002902:	46bd      	mov	sp, r7
 8002904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002908:	4770      	bx	lr
 800290a:	bf00      	nop
 800290c:	20000108 	.word	0x20000108
 8002910:	20000008 	.word	0x20000008

08002914 <Modbus_Protocal_Worker>:



void Modbus_Protocal_Worker()
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b082      	sub	sp, #8
 8002918:	af00      	add	r7, sp, #0
	switch(hModbus->Mstatus)
 800291a:	4b80      	ldr	r3, [pc, #512]	@ (8002b1c <Modbus_Protocal_Worker+0x208>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	7e1b      	ldrb	r3, [r3, #24]
 8002920:	3b01      	subs	r3, #1
 8002922:	2b03      	cmp	r3, #3
 8002924:	d80a      	bhi.n	800293c <Modbus_Protocal_Worker+0x28>
 8002926:	a201      	add	r2, pc, #4	@ (adr r2, 800292c <Modbus_Protocal_Worker+0x18>)
 8002928:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800292c:	08002947 	.word	0x08002947
 8002930:	08002ae5 	.word	0x08002ae5
 8002934:	080029d1 	.word	0x080029d1
 8002938:	080029f7 	.word	0x080029f7
	{
	default:
	case Modbus_state_Init:
		/*init Modbus protocal*/

		hModbus->Mstatus = Modbus_state_Idle;
 800293c:	4b77      	ldr	r3, [pc, #476]	@ (8002b1c <Modbus_Protocal_Worker+0x208>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	2201      	movs	r2, #1
 8002942:	761a      	strb	r2, [r3, #24]
		break;
 8002944:	e0e6      	b.n	8002b14 <Modbus_Protocal_Worker+0x200>
	case Modbus_state_Idle:
		/*Idle state*/

		//check that we have response message
		if(hModbus->TxCount)
 8002946:	4b75      	ldr	r3, [pc, #468]	@ (8002b1c <Modbus_Protocal_Worker+0x208>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f893 3271 	ldrb.w	r3, [r3, #625]	@ 0x271
 800294e:	2b00      	cmp	r3, #0
 8002950:	d002      	beq.n	8002958 <Modbus_Protocal_Worker+0x44>
		{
			Modbus_Emission();
 8002952:	f000 f9d5 	bl	8002d00 <Modbus_Emission>
 8002956:	e01c      	b.n	8002992 <Modbus_Protocal_Worker+0x7e>
		}

		// Received character
		else if(hModbus->Flag_URev)
 8002958:	4b70      	ldr	r3, [pc, #448]	@ (8002b1c <Modbus_Protocal_Worker+0x208>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	7d9b      	ldrb	r3, [r3, #22]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d017      	beq.n	8002992 <Modbus_Protocal_Worker+0x7e>
		{
			/*reset Timer flag*/
			hModbus->Flag_T15TimeOut = 0;
 8002962:	4b6e      	ldr	r3, [pc, #440]	@ (8002b1c <Modbus_Protocal_Worker+0x208>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	2200      	movs	r2, #0
 8002968:	751a      	strb	r2, [r3, #20]
			hModbus->Flag_T35TimeOut = 0;
 800296a:	4b6c      	ldr	r3, [pc, #432]	@ (8002b1c <Modbus_Protocal_Worker+0x208>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	2200      	movs	r2, #0
 8002970:	755a      	strb	r2, [r3, #21]
			__HAL_TIM_ENABLE(hModbus->htim);
 8002972:	4b6a      	ldr	r3, [pc, #424]	@ (8002b1c <Modbus_Protocal_Worker+0x208>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	691b      	ldr	r3, [r3, #16]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	681a      	ldr	r2, [r3, #0]
 800297c:	4b67      	ldr	r3, [pc, #412]	@ (8002b1c <Modbus_Protocal_Worker+0x208>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	691b      	ldr	r3, [r3, #16]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f042 0201 	orr.w	r2, r2, #1
 8002988:	601a      	str	r2, [r3, #0]
			/*set state*/
			hModbus->Mstatus= Modbus_state_Reception;
 800298a:	4b64      	ldr	r3, [pc, #400]	@ (8002b1c <Modbus_Protocal_Worker+0x208>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	2203      	movs	r2, #3
 8002990:	761a      	strb	r2, [r3, #24]
		}

		//check that if UART RX not start, start receiving
		if(hModbus->huart->RxState == HAL_UART_STATE_READY)
 8002992:	4b62      	ldr	r3, [pc, #392]	@ (8002b1c <Modbus_Protocal_Worker+0x208>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	68db      	ldr	r3, [r3, #12]
 8002998:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800299c:	2b20      	cmp	r3, #32
 800299e:	f040 80b2 	bne.w	8002b06 <Modbus_Protocal_Worker+0x1f2>
		{
			hModbus->modbusUartStructure.RxTail =0;
 80029a2:	4b5e      	ldr	r3, [pc, #376]	@ (8002b1c <Modbus_Protocal_Worker+0x208>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	2200      	movs	r2, #0
 80029a8:	f8a3 23a2 	strh.w	r2, [r3, #930]	@ 0x3a2
			HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 80029ac:	4b5b      	ldr	r3, [pc, #364]	@ (8002b1c <Modbus_Protocal_Worker+0x208>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	68d8      	ldr	r0, [r3, #12]
 80029b2:	4b5a      	ldr	r3, [pc, #360]	@ (8002b1c <Modbus_Protocal_Worker+0x208>)
 80029b4:	681a      	ldr	r2, [r3, #0]
 80029b6:	4b59      	ldr	r3, [pc, #356]	@ (8002b1c <Modbus_Protocal_Worker+0x208>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 80029be:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 80029c2:	4413      	add	r3, r2
 80029c4:	3302      	adds	r3, #2
 80029c6:	2201      	movs	r2, #1
 80029c8:	4619      	mov	r1, r3
 80029ca:	f009 fc81 	bl	800c2d0 <HAL_UART_Receive_IT>
		}
		break;
 80029ce:	e09a      	b.n	8002b06 <Modbus_Protocal_Worker+0x1f2>
	case Modbus_state_Reception:

		if(hModbus->Flag_T15TimeOut)
 80029d0:	4b52      	ldr	r3, [pc, #328]	@ (8002b1c <Modbus_Protocal_Worker+0x208>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	7d1b      	ldrb	r3, [r3, #20]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	f000 8097 	beq.w	8002b0a <Modbus_Protocal_Worker+0x1f6>
		{
			/*reset recived flag*/
			hModbus->Flag_URev =0;
 80029dc:	4b4f      	ldr	r3, [pc, #316]	@ (8002b1c <Modbus_Protocal_Worker+0x208>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	2200      	movs	r2, #0
 80029e2:	759a      	strb	r2, [r3, #22]
			hModbus->RecvStatus = Modbus_RecvFrame_Null;
 80029e4:	4b4d      	ldr	r3, [pc, #308]	@ (8002b1c <Modbus_Protocal_Worker+0x208>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	22fe      	movs	r2, #254	@ 0xfe
 80029ea:	75da      	strb	r2, [r3, #23]

			/*compute CRC and Slave address*/



			hModbus->Mstatus = Modbus_state_ControlAndWaiting;
 80029ec:	4b4b      	ldr	r3, [pc, #300]	@ (8002b1c <Modbus_Protocal_Worker+0x208>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	2204      	movs	r2, #4
 80029f2:	761a      	strb	r2, [r3, #24]
		}
		break;
 80029f4:	e089      	b.n	8002b0a <Modbus_Protocal_Worker+0x1f6>
	case Modbus_state_ControlAndWaiting:
		/*Frame error , Not generate response , Clear buffer*/
		if(hModbus->Flag_URev)
 80029f6:	4b49      	ldr	r3, [pc, #292]	@ (8002b1c <Modbus_Protocal_Worker+0x208>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	7d9b      	ldrb	r3, [r3, #22]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d009      	beq.n	8002a14 <Modbus_Protocal_Worker+0x100>
		{

			if(!hModbus->RecvStatus)
 8002a00:	4b46      	ldr	r3, [pc, #280]	@ (8002b1c <Modbus_Protocal_Worker+0x208>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f993 3017 	ldrsb.w	r3, [r3, #23]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d103      	bne.n	8002a14 <Modbus_Protocal_Worker+0x100>
			{
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 8002a0c:	4b43      	ldr	r3, [pc, #268]	@ (8002b1c <Modbus_Protocal_Worker+0x208>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	22ff      	movs	r2, #255	@ 0xff
 8002a12:	75da      	strb	r2, [r3, #23]
			}
		}

		/*Frame Calculation , calculate once*/
		if(hModbus->RecvStatus == Modbus_RecvFrame_Null)
 8002a14:	4b41      	ldr	r3, [pc, #260]	@ (8002b1c <Modbus_Protocal_Worker+0x208>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f993 3017 	ldrsb.w	r3, [r3, #23]
 8002a1c:	f113 0f02 	cmn.w	r3, #2
 8002a20:	d150      	bne.n	8002ac4 <Modbus_Protocal_Worker+0x1b0>
		{
			hModbus->RecvStatus = Modbus_RecvFrame_Normal;
 8002a22:	4b3e      	ldr	r3, [pc, #248]	@ (8002b1c <Modbus_Protocal_Worker+0x208>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	2200      	movs	r2, #0
 8002a28:	75da      	strb	r2, [r3, #23]
			// check CRC
			u16u8_t CalculateCRC;
			CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferRx,hModbus->modbusUartStructure.RxTail - 2);
 8002a2a:	4b3c      	ldr	r3, [pc, #240]	@ (8002b1c <Modbus_Protocal_Worker+0x208>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f203 2272 	addw	r2, r3, #626	@ 0x272
 8002a32:	4b3a      	ldr	r3, [pc, #232]	@ (8002b1c <Modbus_Protocal_Worker+0x208>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8002a3a:	3b02      	subs	r3, #2
 8002a3c:	4619      	mov	r1, r3
 8002a3e:	4610      	mov	r0, r2
 8002a40:	f7ff ff30 	bl	80028a4 <CRC16>
 8002a44:	4603      	mov	r3, r0
 8002a46:	80bb      	strh	r3, [r7, #4]

			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 8002a48:	793a      	ldrb	r2, [r7, #4]
 8002a4a:	4b34      	ldr	r3, [pc, #208]	@ (8002b1c <Modbus_Protocal_Worker+0x208>)
 8002a4c:	6819      	ldr	r1, [r3, #0]
 8002a4e:	4b33      	ldr	r3, [pc, #204]	@ (8002b1c <Modbus_Protocal_Worker+0x208>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8002a56:	3b02      	subs	r3, #2
 8002a58:	440b      	add	r3, r1
 8002a5a:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
 8002a5e:	429a      	cmp	r2, r3
 8002a60:	d10c      	bne.n	8002a7c <Modbus_Protocal_Worker+0x168>
			&& CalculateCRC.U8[1] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail -1]))
 8002a62:	797a      	ldrb	r2, [r7, #5]
 8002a64:	4b2d      	ldr	r3, [pc, #180]	@ (8002b1c <Modbus_Protocal_Worker+0x208>)
 8002a66:	6819      	ldr	r1, [r3, #0]
 8002a68:	4b2c      	ldr	r3, [pc, #176]	@ (8002b1c <Modbus_Protocal_Worker+0x208>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8002a70:	3b01      	subs	r3, #1
 8002a72:	440b      	add	r3, r1
 8002a74:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 8002a78:	429a      	cmp	r2, r3
 8002a7a:	d004      	beq.n	8002a86 <Modbus_Protocal_Worker+0x172>
			{
				// communication unsuccessful
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 8002a7c:	4b27      	ldr	r3, [pc, #156]	@ (8002b1c <Modbus_Protocal_Worker+0x208>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	22ff      	movs	r2, #255	@ 0xff
 8002a82:	75da      	strb	r2, [r3, #23]
				break;
 8002a84:	e046      	b.n	8002b14 <Modbus_Protocal_Worker+0x200>
			}

			//check Slave Address
			if(hModbus->modbusUartStructure.MessageBufferRx[0] != hModbus->slaveAddress)
 8002a86:	4b25      	ldr	r3, [pc, #148]	@ (8002b1c <Modbus_Protocal_Worker+0x208>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f893 2272 	ldrb.w	r2, [r3, #626]	@ 0x272
 8002a8e:	4b23      	ldr	r3, [pc, #140]	@ (8002b1c <Modbus_Protocal_Worker+0x208>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	781b      	ldrb	r3, [r3, #0]
 8002a94:	429a      	cmp	r2, r3
 8002a96:	d113      	bne.n	8002ac0 <Modbus_Protocal_Worker+0x1ac>
				break;

			//copy recivced frame
			memcpy(hModbus->Rxframe,
 8002a98:	4b20      	ldr	r3, [pc, #128]	@ (8002b1c <Modbus_Protocal_Worker+0x208>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f103 0019 	add.w	r0, r3, #25
					hModbus->modbusUartStructure.MessageBufferRx+1,
 8002aa0:	4b1e      	ldr	r3, [pc, #120]	@ (8002b1c <Modbus_Protocal_Worker+0x208>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f203 2372 	addw	r3, r3, #626	@ 0x272
			memcpy(hModbus->Rxframe,
 8002aa8:	1c59      	adds	r1, r3, #1
					hModbus->modbusUartStructure.RxTail-3);
 8002aaa:	4b1c      	ldr	r3, [pc, #112]	@ (8002b1c <Modbus_Protocal_Worker+0x208>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8002ab2:	3b03      	subs	r3, #3
			memcpy(hModbus->Rxframe,
 8002ab4:	461a      	mov	r2, r3
 8002ab6:	f00c fc6f 	bl	800f398 <memcpy>

			//execute command
			Modbus_frame_response();
 8002aba:	f000 f909 	bl	8002cd0 <Modbus_frame_response>
 8002abe:	e001      	b.n	8002ac4 <Modbus_Protocal_Worker+0x1b0>
				break;
 8002ac0:	bf00      	nop
					}
		break;


	}
}
 8002ac2:	e027      	b.n	8002b14 <Modbus_Protocal_Worker+0x200>
		if(hModbus->Flag_T35TimeOut)
 8002ac4:	4b15      	ldr	r3, [pc, #84]	@ (8002b1c <Modbus_Protocal_Worker+0x208>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	7d5b      	ldrb	r3, [r3, #21]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d01f      	beq.n	8002b0e <Modbus_Protocal_Worker+0x1fa>
			hModbus->Mstatus = Modbus_state_Idle;
 8002ace:	4b13      	ldr	r3, [pc, #76]	@ (8002b1c <Modbus_Protocal_Worker+0x208>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	2201      	movs	r2, #1
 8002ad4:	761a      	strb	r2, [r3, #24]
			HAL_UART_AbortReceive(hModbus->huart);
 8002ad6:	4b11      	ldr	r3, [pc, #68]	@ (8002b1c <Modbus_Protocal_Worker+0x208>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	68db      	ldr	r3, [r3, #12]
 8002adc:	4618      	mov	r0, r3
 8002ade:	f009 fcc3 	bl	800c468 <HAL_UART_AbortReceive>
		break;
 8002ae2:	e014      	b.n	8002b0e <Modbus_Protocal_Worker+0x1fa>
		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8002ae4:	4b0d      	ldr	r3, [pc, #52]	@ (8002b1c <Modbus_Protocal_Worker+0x208>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	68db      	ldr	r3, [r3, #12]
 8002aea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002aee:	2b20      	cmp	r3, #32
 8002af0:	d10f      	bne.n	8002b12 <Modbus_Protocal_Worker+0x1fe>
			hModbus->TxCount=0;
 8002af2:	4b0a      	ldr	r3, [pc, #40]	@ (8002b1c <Modbus_Protocal_Worker+0x208>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	2200      	movs	r2, #0
 8002af8:	f883 2271 	strb.w	r2, [r3, #625]	@ 0x271
			hModbus->Mstatus = Modbus_state_Idle;
 8002afc:	4b07      	ldr	r3, [pc, #28]	@ (8002b1c <Modbus_Protocal_Worker+0x208>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	2201      	movs	r2, #1
 8002b02:	761a      	strb	r2, [r3, #24]
		break;
 8002b04:	e005      	b.n	8002b12 <Modbus_Protocal_Worker+0x1fe>
		break;
 8002b06:	bf00      	nop
 8002b08:	e004      	b.n	8002b14 <Modbus_Protocal_Worker+0x200>
		break;
 8002b0a:	bf00      	nop
 8002b0c:	e002      	b.n	8002b14 <Modbus_Protocal_Worker+0x200>
		break;
 8002b0e:	bf00      	nop
 8002b10:	e000      	b.n	8002b14 <Modbus_Protocal_Worker+0x200>
		break;
 8002b12:	bf00      	nop
}
 8002b14:	bf00      	nop
 8002b16:	3708      	adds	r7, #8
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bd80      	pop	{r7, pc}
 8002b1c:	200002e4 	.word	0x200002e4

08002b20 <modbusWrite1Register>:
void modbusWrite1Register() //function 06
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b082      	sub	sp, #8
 8002b24:	af00      	add	r7, sp, #0

	//write data to register
	uint16_t startAddress = (hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]);
 8002b26:	4b1d      	ldr	r3, [pc, #116]	@ (8002b9c <modbusWrite1Register+0x7c>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	7e9b      	ldrb	r3, [r3, #26]
 8002b2c:	021b      	lsls	r3, r3, #8
 8002b2e:	b29b      	uxth	r3, r3
 8002b30:	4a1a      	ldr	r2, [pc, #104]	@ (8002b9c <modbusWrite1Register+0x7c>)
 8002b32:	6812      	ldr	r2, [r2, #0]
 8002b34:	7ed2      	ldrb	r2, [r2, #27]
 8002b36:	4413      	add	r3, r2
 8002b38:	80fb      	strh	r3, [r7, #6]

	if(startAddress > hModbus->RegisterSize)
 8002b3a:	88fa      	ldrh	r2, [r7, #6]
 8002b3c:	4b17      	ldr	r3, [pc, #92]	@ (8002b9c <modbusWrite1Register+0x7c>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	689b      	ldr	r3, [r3, #8]
 8002b42:	429a      	cmp	r2, r3
 8002b44:	d903      	bls.n	8002b4e <modbusWrite1Register+0x2e>
		{
			 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 8002b46:	2002      	movs	r0, #2
 8002b48:	f000 f8a0 	bl	8002c8c <ModbusErrorReply>
			 return;
 8002b4c:	e023      	b.n	8002b96 <modbusWrite1Register+0x76>
		}


	hModbus->RegisterAddress[startAddress].U8[1] = hModbus->Rxframe[3];
 8002b4e:	4b13      	ldr	r3, [pc, #76]	@ (8002b9c <modbusWrite1Register+0x7c>)
 8002b50:	681a      	ldr	r2, [r3, #0]
 8002b52:	4b12      	ldr	r3, [pc, #72]	@ (8002b9c <modbusWrite1Register+0x7c>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	6859      	ldr	r1, [r3, #4]
 8002b58:	88fb      	ldrh	r3, [r7, #6]
 8002b5a:	005b      	lsls	r3, r3, #1
 8002b5c:	440b      	add	r3, r1
 8002b5e:	7f12      	ldrb	r2, [r2, #28]
 8002b60:	705a      	strb	r2, [r3, #1]
	hModbus->RegisterAddress[startAddress].U8[0] = hModbus->Rxframe[4];
 8002b62:	4b0e      	ldr	r3, [pc, #56]	@ (8002b9c <modbusWrite1Register+0x7c>)
 8002b64:	681a      	ldr	r2, [r3, #0]
 8002b66:	4b0d      	ldr	r3, [pc, #52]	@ (8002b9c <modbusWrite1Register+0x7c>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	6859      	ldr	r1, [r3, #4]
 8002b6c:	88fb      	ldrh	r3, [r7, #6]
 8002b6e:	005b      	lsls	r3, r3, #1
 8002b70:	440b      	add	r3, r1
 8002b72:	7f52      	ldrb	r2, [r2, #29]
 8002b74:	701a      	strb	r2, [r3, #0]



	//generate response
	memcpy(hModbus->Txframe,
 8002b76:	4b09      	ldr	r3, [pc, #36]	@ (8002b9c <modbusWrite1Register+0x7c>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f203 1045 	addw	r0, r3, #325	@ 0x145
			hModbus->Rxframe,
 8002b7e:	4b07      	ldr	r3, [pc, #28]	@ (8002b9c <modbusWrite1Register+0x7c>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	3319      	adds	r3, #25
	memcpy(hModbus->Txframe,
 8002b84:	2208      	movs	r2, #8
 8002b86:	4619      	mov	r1, r3
 8002b88:	f00c fc06 	bl	800f398 <memcpy>
			8);
	//set number of byte to sent
	hModbus->TxCount=5;
 8002b8c:	4b03      	ldr	r3, [pc, #12]	@ (8002b9c <modbusWrite1Register+0x7c>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	2205      	movs	r2, #5
 8002b92:	f883 2271 	strb.w	r2, [r3, #625]	@ 0x271



}
 8002b96:	3708      	adds	r7, #8
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}
 8002b9c:	200002e4 	.word	0x200002e4

08002ba0 <modbusRead1Register>:

void modbusRead1Register() // function 03
{
 8002ba0:	b590      	push	{r4, r7, lr}
 8002ba2:	b083      	sub	sp, #12
 8002ba4:	af00      	add	r7, sp, #0



	uint16_t numberOfDataToRead =((hModbus->Rxframe[3]<<8)+(hModbus->Rxframe[4]));
 8002ba6:	4b38      	ldr	r3, [pc, #224]	@ (8002c88 <modbusRead1Register+0xe8>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	7f1b      	ldrb	r3, [r3, #28]
 8002bac:	021b      	lsls	r3, r3, #8
 8002bae:	b29b      	uxth	r3, r3
 8002bb0:	4a35      	ldr	r2, [pc, #212]	@ (8002c88 <modbusRead1Register+0xe8>)
 8002bb2:	6812      	ldr	r2, [r2, #0]
 8002bb4:	7f52      	ldrb	r2, [r2, #29]
 8002bb6:	4413      	add	r3, r2
 8002bb8:	80fb      	strh	r3, [r7, #6]
	uint16_t startAddress =((hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]));
 8002bba:	4b33      	ldr	r3, [pc, #204]	@ (8002c88 <modbusRead1Register+0xe8>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	7e9b      	ldrb	r3, [r3, #26]
 8002bc0:	021b      	lsls	r3, r3, #8
 8002bc2:	b29b      	uxth	r3, r3
 8002bc4:	4a30      	ldr	r2, [pc, #192]	@ (8002c88 <modbusRead1Register+0xe8>)
 8002bc6:	6812      	ldr	r2, [r2, #0]
 8002bc8:	7ed2      	ldrb	r2, [r2, #27]
 8002bca:	4413      	add	r3, r2
 8002bcc:	80bb      	strh	r3, [r7, #4]

	//check quantity and address range

	if(numberOfDataToRead <1 ||numberOfDataToRead > 0x7D)
 8002bce:	88fb      	ldrh	r3, [r7, #6]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d002      	beq.n	8002bda <modbusRead1Register+0x3a>
 8002bd4:	88fb      	ldrh	r3, [r7, #6]
 8002bd6:	2b7d      	cmp	r3, #125	@ 0x7d
 8002bd8:	d903      	bls.n	8002be2 <modbusRead1Register+0x42>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataValue);
 8002bda:	2003      	movs	r0, #3
 8002bdc:	f000 f856 	bl	8002c8c <ModbusErrorReply>
		 return;
 8002be0:	e04e      	b.n	8002c80 <modbusRead1Register+0xe0>
	}

	if(startAddress > hModbus->RegisterSize || (startAddress +  numberOfDataToRead) > hModbus->RegisterSize)
 8002be2:	88ba      	ldrh	r2, [r7, #4]
 8002be4:	4b28      	ldr	r3, [pc, #160]	@ (8002c88 <modbusRead1Register+0xe8>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	429a      	cmp	r2, r3
 8002bec:	d808      	bhi.n	8002c00 <modbusRead1Register+0x60>
 8002bee:	88ba      	ldrh	r2, [r7, #4]
 8002bf0:	88fb      	ldrh	r3, [r7, #6]
 8002bf2:	4413      	add	r3, r2
 8002bf4:	461a      	mov	r2, r3
 8002bf6:	4b24      	ldr	r3, [pc, #144]	@ (8002c88 <modbusRead1Register+0xe8>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	689b      	ldr	r3, [r3, #8]
 8002bfc:	429a      	cmp	r2, r3
 8002bfe:	d903      	bls.n	8002c08 <modbusRead1Register+0x68>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 8002c00:	2002      	movs	r0, #2
 8002c02:	f000 f843 	bl	8002c8c <ModbusErrorReply>
		 return;
 8002c06:	e03b      	b.n	8002c80 <modbusRead1Register+0xe0>
	}


	//generate response
	hModbus->Txframe[0] = Modbus_function_Read_Holding_Register;
 8002c08:	4b1f      	ldr	r3, [pc, #124]	@ (8002c88 <modbusRead1Register+0xe8>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	2203      	movs	r2, #3
 8002c0e:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	hModbus->Txframe[1] = (2*numberOfDataToRead) & 0xFF;
 8002c12:	88fb      	ldrh	r3, [r7, #6]
 8002c14:	b2da      	uxtb	r2, r3
 8002c16:	4b1c      	ldr	r3, [pc, #112]	@ (8002c88 <modbusRead1Register+0xe8>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	0052      	lsls	r2, r2, #1
 8002c1c:	b2d2      	uxtb	r2, r2
 8002c1e:	f883 2146 	strb.w	r2, [r3, #326]	@ 0x146
	register int i;
	for(i=0; i<numberOfDataToRead;i++)
 8002c22:	2400      	movs	r4, #0
 8002c24:	e020      	b.n	8002c68 <modbusRead1Register+0xc8>
	{
		hModbus->Txframe[2*i+2]=hModbus->RegisterAddress[startAddress+i].U8[1];
 8002c26:	4b18      	ldr	r3, [pc, #96]	@ (8002c88 <modbusRead1Register+0xe8>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	685a      	ldr	r2, [r3, #4]
 8002c2c:	88bb      	ldrh	r3, [r7, #4]
 8002c2e:	4423      	add	r3, r4
 8002c30:	005b      	lsls	r3, r3, #1
 8002c32:	18d1      	adds	r1, r2, r3
 8002c34:	4b14      	ldr	r3, [pc, #80]	@ (8002c88 <modbusRead1Register+0xe8>)
 8002c36:	681a      	ldr	r2, [r3, #0]
 8002c38:	1c63      	adds	r3, r4, #1
 8002c3a:	005b      	lsls	r3, r3, #1
 8002c3c:	7849      	ldrb	r1, [r1, #1]
 8002c3e:	4413      	add	r3, r2
 8002c40:	460a      	mov	r2, r1
 8002c42:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
		hModbus->Txframe[2*i+3]=hModbus->RegisterAddress[startAddress+i].U8[0];
 8002c46:	4b10      	ldr	r3, [pc, #64]	@ (8002c88 <modbusRead1Register+0xe8>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	685a      	ldr	r2, [r3, #4]
 8002c4c:	88bb      	ldrh	r3, [r7, #4]
 8002c4e:	4423      	add	r3, r4
 8002c50:	005b      	lsls	r3, r3, #1
 8002c52:	18d1      	adds	r1, r2, r3
 8002c54:	4b0c      	ldr	r3, [pc, #48]	@ (8002c88 <modbusRead1Register+0xe8>)
 8002c56:	681a      	ldr	r2, [r3, #0]
 8002c58:	0063      	lsls	r3, r4, #1
 8002c5a:	3303      	adds	r3, #3
 8002c5c:	7809      	ldrb	r1, [r1, #0]
 8002c5e:	4413      	add	r3, r2
 8002c60:	460a      	mov	r2, r1
 8002c62:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	for(i=0; i<numberOfDataToRead;i++)
 8002c66:	3401      	adds	r4, #1
 8002c68:	88fb      	ldrh	r3, [r7, #6]
 8002c6a:	429c      	cmp	r4, r3
 8002c6c:	dbdb      	blt.n	8002c26 <modbusRead1Register+0x86>
	}
	hModbus->TxCount = 2+2*numberOfDataToRead;
 8002c6e:	88fb      	ldrh	r3, [r7, #6]
 8002c70:	3301      	adds	r3, #1
 8002c72:	b2da      	uxtb	r2, r3
 8002c74:	4b04      	ldr	r3, [pc, #16]	@ (8002c88 <modbusRead1Register+0xe8>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	0052      	lsls	r2, r2, #1
 8002c7a:	b2d2      	uxtb	r2, r2
 8002c7c:	f883 2271 	strb.w	r2, [r3, #625]	@ 0x271

}
 8002c80:	370c      	adds	r7, #12
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bd90      	pop	{r4, r7, pc}
 8002c86:	bf00      	nop
 8002c88:	200002e4 	.word	0x200002e4

08002c8c <ModbusErrorReply>:

void ModbusErrorReply(uint8_t Errorcode)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	b083      	sub	sp, #12
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	4603      	mov	r3, r0
 8002c94:	71fb      	strb	r3, [r7, #7]
	hModbus->Txframe[0] = hModbus->Rxframe[0] | 0x80;
 8002c96:	4b0d      	ldr	r3, [pc, #52]	@ (8002ccc <ModbusErrorReply+0x40>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	7e5a      	ldrb	r2, [r3, #25]
 8002c9c:	4b0b      	ldr	r3, [pc, #44]	@ (8002ccc <ModbusErrorReply+0x40>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8002ca4:	b2d2      	uxtb	r2, r2
 8002ca6:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	hModbus->Txframe[1] = Errorcode;
 8002caa:	4b08      	ldr	r3, [pc, #32]	@ (8002ccc <ModbusErrorReply+0x40>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	79fa      	ldrb	r2, [r7, #7]
 8002cb0:	f883 2146 	strb.w	r2, [r3, #326]	@ 0x146
	hModbus->TxCount = 2;
 8002cb4:	4b05      	ldr	r3, [pc, #20]	@ (8002ccc <ModbusErrorReply+0x40>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	2202      	movs	r2, #2
 8002cba:	f883 2271 	strb.w	r2, [r3, #625]	@ 0x271
}
 8002cbe:	bf00      	nop
 8002cc0:	370c      	adds	r7, #12
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc8:	4770      	bx	lr
 8002cca:	bf00      	nop
 8002ccc:	200002e4 	.word	0x200002e4

08002cd0 <Modbus_frame_response>:

void Modbus_frame_response()
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	af00      	add	r7, sp, #0
	switch(hModbus->Rxframe[0]) //check funcion
 8002cd4:	4b09      	ldr	r3, [pc, #36]	@ (8002cfc <Modbus_frame_response+0x2c>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	7e5b      	ldrb	r3, [r3, #25]
 8002cda:	2b03      	cmp	r3, #3
 8002cdc:	d004      	beq.n	8002ce8 <Modbus_frame_response+0x18>
 8002cde:	2b06      	cmp	r3, #6
 8002ce0:	d105      	bne.n	8002cee <Modbus_frame_response+0x1e>
	{
	case Modbus_function_Write_SingleRegister:
		modbusWrite1Register();
 8002ce2:	f7ff ff1d 	bl	8002b20 <modbusWrite1Register>
		break;
 8002ce6:	e006      	b.n	8002cf6 <Modbus_frame_response+0x26>
	case Modbus_function_Read_Holding_Register:
		modbusRead1Register();
 8002ce8:	f7ff ff5a 	bl	8002ba0 <modbusRead1Register>
		break;
 8002cec:	e003      	b.n	8002cf6 <Modbus_frame_response+0x26>
	default:
		 ModbusErrorReply(Modbus_RecvFrame_IllegalFunction);
 8002cee:	2001      	movs	r0, #1
 8002cf0:	f7ff ffcc 	bl	8002c8c <ModbusErrorReply>
		break;
 8002cf4:	bf00      	nop

	}
}
 8002cf6:	bf00      	nop
 8002cf8:	bd80      	pop	{r7, pc}
 8002cfa:	bf00      	nop
 8002cfc:	200002e4 	.word	0x200002e4

08002d00 <Modbus_Emission>:

void Modbus_Emission()
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b082      	sub	sp, #8
 8002d04:	af00      	add	r7, sp, #0
	if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8002d06:	4b3c      	ldr	r3, [pc, #240]	@ (8002df8 <Modbus_Emission+0xf8>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	68db      	ldr	r3, [r3, #12]
 8002d0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d10:	2b20      	cmp	r3, #32
 8002d12:	d15d      	bne.n	8002dd0 <Modbus_Emission+0xd0>
	{
		//generate response package
		hModbus->modbusUartStructure.MessageBufferTx[0] = hModbus->slaveAddress;
 8002d14:	4b38      	ldr	r3, [pc, #224]	@ (8002df8 <Modbus_Emission+0xf8>)
 8002d16:	681a      	ldr	r2, [r3, #0]
 8002d18:	4b37      	ldr	r3, [pc, #220]	@ (8002df8 <Modbus_Emission+0xf8>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	7812      	ldrb	r2, [r2, #0]
 8002d1e:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		memcpy
		(
				hModbus->modbusUartStructure.MessageBufferTx+1,
 8002d22:	4b35      	ldr	r3, [pc, #212]	@ (8002df8 <Modbus_Emission+0xf8>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f503 7369 	add.w	r3, r3, #932	@ 0x3a4
		memcpy
 8002d2a:	1c58      	adds	r0, r3, #1
				hModbus->Txframe,
 8002d2c:	4b32      	ldr	r3, [pc, #200]	@ (8002df8 <Modbus_Emission+0xf8>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f203 1145 	addw	r1, r3, #325	@ 0x145
				hModbus->TxCount
 8002d34:	4b30      	ldr	r3, [pc, #192]	@ (8002df8 <Modbus_Emission+0xf8>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f893 3271 	ldrb.w	r3, [r3, #625]	@ 0x271
		memcpy
 8002d3c:	461a      	mov	r2, r3
 8002d3e:	f00c fb2b 	bl	800f398 <memcpy>
		);

		hModbus->modbusUartStructure.TxTail = hModbus->TxCount+3;
 8002d42:	4b2d      	ldr	r3, [pc, #180]	@ (8002df8 <Modbus_Emission+0xf8>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f893 3271 	ldrb.w	r3, [r3, #625]	@ 0x271
 8002d4a:	461a      	mov	r2, r3
 8002d4c:	4b2a      	ldr	r3, [pc, #168]	@ (8002df8 <Modbus_Emission+0xf8>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	3203      	adds	r2, #3
 8002d52:	b292      	uxth	r2, r2
 8002d54:	f8a3 24d4 	strh.w	r2, [r3, #1236]	@ 0x4d4

		u16u8_t CalculateCRC;
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 8002d58:	4b27      	ldr	r3, [pc, #156]	@ (8002df8 <Modbus_Emission+0xf8>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f503 7269 	add.w	r2, r3, #932	@ 0x3a4
				hModbus->modbusUartStructure.TxTail - 2);
 8002d60:	4b25      	ldr	r3, [pc, #148]	@ (8002df8 <Modbus_Emission+0xf8>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 8002d68:	3b02      	subs	r3, #2
 8002d6a:	4619      	mov	r1, r3
 8002d6c:	4610      	mov	r0, r2
 8002d6e:	f7ff fd99 	bl	80028a4 <CRC16>
 8002d72:	4603      	mov	r3, r0
 8002d74:	80bb      	strh	r3, [r7, #4]

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-2]
 8002d76:	4b20      	ldr	r3, [pc, #128]	@ (8002df8 <Modbus_Emission+0xf8>)
 8002d78:	681a      	ldr	r2, [r3, #0]
 8002d7a:	4b1f      	ldr	r3, [pc, #124]	@ (8002df8 <Modbus_Emission+0xf8>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 8002d82:	3b02      	subs	r3, #2
													 =CalculateCRC.U8[0];
 8002d84:	7939      	ldrb	r1, [r7, #4]
 8002d86:	4413      	add	r3, r2
 8002d88:	460a      	mov	r2, r1
 8002d8a:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-1]
 8002d8e:	4b1a      	ldr	r3, [pc, #104]	@ (8002df8 <Modbus_Emission+0xf8>)
 8002d90:	681a      	ldr	r2, [r3, #0]
 8002d92:	4b19      	ldr	r3, [pc, #100]	@ (8002df8 <Modbus_Emission+0xf8>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 8002d9a:	3b01      	subs	r3, #1
													 =CalculateCRC.U8[1];
 8002d9c:	7979      	ldrb	r1, [r7, #5]
 8002d9e:	4413      	add	r3, r2
 8002da0:	460a      	mov	r2, r1
 8002da2:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4


		//sent modbus

		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8002da6:	4b14      	ldr	r3, [pc, #80]	@ (8002df8 <Modbus_Emission+0xf8>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	68db      	ldr	r3, [r3, #12]
 8002dac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002db0:	2b20      	cmp	r3, #32
 8002db2:	d10d      	bne.n	8002dd0 <Modbus_Emission+0xd0>
		{
			HAL_UART_Transmit_DMA(hModbus->huart
 8002db4:	4b10      	ldr	r3, [pc, #64]	@ (8002df8 <Modbus_Emission+0xf8>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	68d8      	ldr	r0, [r3, #12]
					,hModbus->modbusUartStructure.MessageBufferTx
 8002dba:	4b0f      	ldr	r3, [pc, #60]	@ (8002df8 <Modbus_Emission+0xf8>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f503 7169 	add.w	r1, r3, #932	@ 0x3a4
					,hModbus->modbusUartStructure.TxTail);
 8002dc2:	4b0d      	ldr	r3, [pc, #52]	@ (8002df8 <Modbus_Emission+0xf8>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
			HAL_UART_Transmit_DMA(hModbus->huart
 8002dc6:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 8002dca:	461a      	mov	r2, r3
 8002dcc:	f009 facc 	bl	800c368 <HAL_UART_Transmit_DMA>



	}
	/*reset Timer flag*/
	hModbus->Flag_T15TimeOut = 0;
 8002dd0:	4b09      	ldr	r3, [pc, #36]	@ (8002df8 <Modbus_Emission+0xf8>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	751a      	strb	r2, [r3, #20]
	hModbus->Flag_T35TimeOut = 0;
 8002dd8:	4b07      	ldr	r3, [pc, #28]	@ (8002df8 <Modbus_Emission+0xf8>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	755a      	strb	r2, [r3, #21]
	hModbus->Flag_URev =0;
 8002de0:	4b05      	ldr	r3, [pc, #20]	@ (8002df8 <Modbus_Emission+0xf8>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	2200      	movs	r2, #0
 8002de6:	759a      	strb	r2, [r3, #22]
	/*set state*/
	hModbus->Mstatus= Modbus_state_Emission;
 8002de8:	4b03      	ldr	r3, [pc, #12]	@ (8002df8 <Modbus_Emission+0xf8>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	2202      	movs	r2, #2
 8002dee:	761a      	strb	r2, [r3, #24]
}
 8002df0:	bf00      	nop
 8002df2:	3708      	adds	r7, #8
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd80      	pop	{r7, pc}
 8002df8:	200002e4 	.word	0x200002e4

08002dfc <create_prismatic_motor>:

float v_pris_dis[2] = {0, 0};
float v_pris_ref[3] = {0, 0, 0};

PrismaticMotor create_prismatic_motor(double J, double B, double Eff, double Ke,
		double Kt, double R, double L) {
 8002dfc:	b4b0      	push	{r4, r5, r7}
 8002dfe:	b09f      	sub	sp, #124	@ 0x7c
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8002e04:	ed87 0b0c 	vstr	d0, [r7, #48]	@ 0x30
 8002e08:	ed87 1b0a 	vstr	d1, [r7, #40]	@ 0x28
 8002e0c:	ed87 2b08 	vstr	d2, [r7, #32]
 8002e10:	ed87 3b06 	vstr	d3, [r7, #24]
 8002e14:	ed87 4b04 	vstr	d4, [r7, #16]
 8002e18:	ed87 5b02 	vstr	d5, [r7, #8]
 8002e1c:	ed87 6b00 	vstr	d6, [r7]
	PrismaticMotor motor = { J, B, Eff, Ke, Kt, R, L };
 8002e20:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8002e24:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
 8002e28:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002e2c:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
 8002e30:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002e34:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
 8002e38:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e3c:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
 8002e40:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002e44:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
 8002e48:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002e4c:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
 8002e50:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002e54:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
	return motor;
 8002e58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002e5a:	461d      	mov	r5, r3
 8002e5c:	f107 0440 	add.w	r4, r7, #64	@ 0x40
 8002e60:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e62:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e64:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e66:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e68:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e6a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e6c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002e70:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8002e74:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8002e76:	377c      	adds	r7, #124	@ 0x7c
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bcb0      	pop	{r4, r5, r7}
 8002e7c:	4770      	bx	lr

08002e7e <create_motor>:
#include "revolute.h"

float v_rev_dis[2] = {0, 0};
float v_rev_ref[3] = {0, 0, 0};

RevoluteMotor create_motor(double J, double B, double Eff, double Ke, double Kt, double R, double L) {
 8002e7e:	b4b0      	push	{r4, r5, r7}
 8002e80:	b09f      	sub	sp, #124	@ 0x7c
 8002e82:	af00      	add	r7, sp, #0
 8002e84:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8002e86:	ed87 0b0c 	vstr	d0, [r7, #48]	@ 0x30
 8002e8a:	ed87 1b0a 	vstr	d1, [r7, #40]	@ 0x28
 8002e8e:	ed87 2b08 	vstr	d2, [r7, #32]
 8002e92:	ed87 3b06 	vstr	d3, [r7, #24]
 8002e96:	ed87 4b04 	vstr	d4, [r7, #16]
 8002e9a:	ed87 5b02 	vstr	d5, [r7, #8]
 8002e9e:	ed87 6b00 	vstr	d6, [r7]
    RevoluteMotor motor = { J, B, Eff, Ke, Kt, R, L };
 8002ea2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8002ea6:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
 8002eaa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002eae:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
 8002eb2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002eb6:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
 8002eba:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002ebe:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
 8002ec2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002ec6:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
 8002eca:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002ece:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
 8002ed2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002ed6:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
    return motor;
 8002eda:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002edc:	461d      	mov	r5, r3
 8002ede:	f107 0440 	add.w	r4, r7, #64	@ 0x40
 8002ee2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ee4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ee6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ee8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002eea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002eec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002eee:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002ef2:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8002ef6:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8002ef8:	377c      	adds	r7, #124	@ 0x7c
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bcb0      	pop	{r4, r5, r7}
 8002efe:	4770      	bx	lr

08002f00 <InitTrajectorySegment>:
#include "Trajectory.h"
#include <math.h>

void InitTrajectorySegment(TrajectorySegment *seg, float start, float end, float v_max, float a_max, float t_start) {
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b08c      	sub	sp, #48	@ 0x30
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6178      	str	r0, [r7, #20]
 8002f08:	ed87 0a04 	vstr	s0, [r7, #16]
 8002f0c:	edc7 0a03 	vstr	s1, [r7, #12]
 8002f10:	ed87 1a02 	vstr	s2, [r7, #8]
 8002f14:	edc7 1a01 	vstr	s3, [r7, #4]
 8002f18:	ed87 2a00 	vstr	s4, [r7]
    float D = end - start;
 8002f1c:	ed97 7a03 	vldr	s14, [r7, #12]
 8002f20:	edd7 7a04 	vldr	s15, [r7, #16]
 8002f24:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f28:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
    float dir = (D >= 0) ? 1.0f : -1.0f;
 8002f2c:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8002f30:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002f34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f38:	db02      	blt.n	8002f40 <InitTrajectorySegment+0x40>
 8002f3a:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8002f3e:	e000      	b.n	8002f42 <InitTrajectorySegment+0x42>
 8002f40:	4b49      	ldr	r3, [pc, #292]	@ (8003068 <InitTrajectorySegment+0x168>)
 8002f42:	627b      	str	r3, [r7, #36]	@ 0x24
    D = fabsf(D);
 8002f44:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8002f48:	eef0 7ae7 	vabs.f32	s15, s15
 8002f4c:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28

    float t_accel = v_max / a_max;
 8002f50:	edd7 6a02 	vldr	s13, [r7, #8]
 8002f54:	ed97 7a01 	vldr	s14, [r7, #4]
 8002f58:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002f5c:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    float d_accel = 0.5f * a_max * t_accel * t_accel;
 8002f60:	edd7 7a01 	vldr	s15, [r7, #4]
 8002f64:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002f68:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002f6c:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8002f70:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f74:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8002f78:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f7c:	edc7 7a08 	vstr	s15, [r7, #32]

    if (2 * d_accel > D) {
 8002f80:	edd7 7a08 	vldr	s15, [r7, #32]
 8002f84:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002f88:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8002f8c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002f90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f94:	d524      	bpl.n	8002fe0 <InitTrajectorySegment+0xe0>
        // Triangular profile
        t_accel = sqrtf(D / a_max);
 8002f96:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8002f9a:	edd7 7a01 	vldr	s15, [r7, #4]
 8002f9e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002fa2:	eeb0 0a66 	vmov.f32	s0, s13
 8002fa6:	f00c fadd 	bl	800f564 <sqrtf>
 8002faa:	ed87 0a0b 	vstr	s0, [r7, #44]	@ 0x2c
        seg->t_const = 0;
 8002fae:	697b      	ldr	r3, [r7, #20]
 8002fb0:	f04f 0200 	mov.w	r2, #0
 8002fb4:	615a      	str	r2, [r3, #20]
        seg->t_total = 2 * t_accel;
 8002fb6:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8002fba:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002fbe:	697b      	ldr	r3, [r7, #20]
 8002fc0:	edc3 7a07 	vstr	s15, [r3, #28]
        seg->v_max = a_max * t_accel * dir;
 8002fc4:	ed97 7a01 	vldr	s14, [r7, #4]
 8002fc8:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8002fcc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002fd0:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002fd4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fd8:	697b      	ldr	r3, [r7, #20]
 8002fda:	edc3 7a02 	vstr	s15, [r3, #8]
 8002fde:	e027      	b.n	8003030 <InitTrajectorySegment+0x130>
    } else {
        // Trapezoidal profile
        float d_const = D - 2 * d_accel;
 8002fe0:	edd7 7a08 	vldr	s15, [r7, #32]
 8002fe4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002fe8:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8002fec:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ff0:	edc7 7a07 	vstr	s15, [r7, #28]
        seg->t_const = d_const / v_max;
 8002ff4:	edd7 6a07 	vldr	s13, [r7, #28]
 8002ff8:	ed97 7a02 	vldr	s14, [r7, #8]
 8002ffc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003000:	697b      	ldr	r3, [r7, #20]
 8003002:	edc3 7a05 	vstr	s15, [r3, #20]
        seg->t_total = 2 * t_accel + seg->t_const;
 8003006:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800300a:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	edd3 7a05 	vldr	s15, [r3, #20]
 8003014:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003018:	697b      	ldr	r3, [r7, #20]
 800301a:	edc3 7a07 	vstr	s15, [r3, #28]
        seg->v_max = v_max * dir;
 800301e:	ed97 7a02 	vldr	s14, [r7, #8]
 8003022:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003026:	ee67 7a27 	vmul.f32	s15, s14, s15
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	edc3 7a02 	vstr	s15, [r3, #8]
    }

    seg->start_pos = start;
 8003030:	697b      	ldr	r3, [r7, #20]
 8003032:	693a      	ldr	r2, [r7, #16]
 8003034:	601a      	str	r2, [r3, #0]
    seg->end_pos = end;
 8003036:	697b      	ldr	r3, [r7, #20]
 8003038:	68fa      	ldr	r2, [r7, #12]
 800303a:	605a      	str	r2, [r3, #4]
//    seg->v_max = v_max * dir;
    seg->a_max = a_max * dir;
 800303c:	ed97 7a01 	vldr	s14, [r7, #4]
 8003040:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003044:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003048:	697b      	ldr	r3, [r7, #20]
 800304a:	edc3 7a03 	vstr	s15, [r3, #12]
    seg->t_accel = t_accel;
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003052:	611a      	str	r2, [r3, #16]
    seg->t_decel = t_accel;
 8003054:	697b      	ldr	r3, [r7, #20]
 8003056:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003058:	619a      	str	r2, [r3, #24]
    seg->t_start = t_start;
 800305a:	697b      	ldr	r3, [r7, #20]
 800305c:	683a      	ldr	r2, [r7, #0]
 800305e:	621a      	str	r2, [r3, #32]
}
 8003060:	bf00      	nop
 8003062:	3730      	adds	r7, #48	@ 0x30
 8003064:	46bd      	mov	sp, r7
 8003066:	bd80      	pop	{r7, pc}
 8003068:	bf800000 	.word	0xbf800000

0800306c <GetTrajectoryPosition>:

float GetTrajectoryPosition(const TrajectorySegment *seg, float t_global) {
 800306c:	b480      	push	{r7}
 800306e:	b08f      	sub	sp, #60	@ 0x3c
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
 8003074:	ed87 0a00 	vstr	s0, [r7]
    float t = t_global - seg->t_start;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	edd3 7a08 	vldr	s15, [r3, #32]
 800307e:	ed97 7a00 	vldr	s14, [r7]
 8003082:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003086:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
    if (t < 0) return seg->start_pos;
 800308a:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800308e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003092:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003096:	d503      	bpl.n	80030a0 <GetTrajectoryPosition+0x34>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	edd3 7a00 	vldr	s15, [r3]
 800309e:	e0b4      	b.n	800320a <GetTrajectoryPosition+0x19e>
    if (t >= seg->t_total) return seg->end_pos;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	edd3 7a07 	vldr	s15, [r3, #28]
 80030a6:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 80030aa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80030ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030b2:	db03      	blt.n	80030bc <GetTrajectoryPosition+0x50>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	edd3 7a01 	vldr	s15, [r3, #4]
 80030ba:	e0a6      	b.n	800320a <GetTrajectoryPosition+0x19e>

    float a = seg->a_max;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	68db      	ldr	r3, [r3, #12]
 80030c0:	633b      	str	r3, [r7, #48]	@ 0x30
    float v = seg->v_max;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	689b      	ldr	r3, [r3, #8]
 80030c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    float p0 = seg->start_pos;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	62bb      	str	r3, [r7, #40]	@ 0x28

    if (t < seg->t_accel) {
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	edd3 7a04 	vldr	s15, [r3, #16]
 80030d4:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 80030d8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80030dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030e0:	d512      	bpl.n	8003108 <GetTrajectoryPosition+0x9c>
        return p0 + 0.5f * a * t * t;
 80030e2:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80030e6:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80030ea:	ee27 7a87 	vmul.f32	s14, s15, s14
 80030ee:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80030f2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80030f6:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80030fa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80030fe:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8003102:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003106:	e080      	b.n	800320a <GetTrajectoryPosition+0x19e>
    } else if (t < seg->t_accel + seg->t_const) {
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	ed93 7a04 	vldr	s14, [r3, #16]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	edd3 7a05 	vldr	s15, [r3, #20]
 8003114:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003118:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 800311c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003120:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003124:	d525      	bpl.n	8003172 <GetTrajectoryPosition+0x106>
        float t1 = seg->t_accel;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	691b      	ldr	r3, [r3, #16]
 800312a:	613b      	str	r3, [r7, #16]
        float p1 = p0 + 0.5f * a * t1 * t1;
 800312c:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8003130:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8003134:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003138:	edd7 7a04 	vldr	s15, [r7, #16]
 800313c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003140:	edd7 7a04 	vldr	s15, [r7, #16]
 8003144:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003148:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800314c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003150:	edc7 7a03 	vstr	s15, [r7, #12]
        return p1 + v * (t - t1);
 8003154:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8003158:	edd7 7a04 	vldr	s15, [r7, #16]
 800315c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003160:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8003164:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003168:	edd7 7a03 	vldr	s15, [r7, #12]
 800316c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003170:	e04b      	b.n	800320a <GetTrajectoryPosition+0x19e>
    } else {
        float t1 = seg->t_accel;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	691b      	ldr	r3, [r3, #16]
 8003176:	627b      	str	r3, [r7, #36]	@ 0x24
        float t2 = seg->t_const;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	695b      	ldr	r3, [r3, #20]
 800317c:	623b      	str	r3, [r7, #32]
        float p1 = p0 + 0.5f * a * t1 * t1;
 800317e:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8003182:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8003186:	ee27 7a87 	vmul.f32	s14, s15, s14
 800318a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800318e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003192:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003196:	ee67 7a27 	vmul.f32	s15, s14, s15
 800319a:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800319e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031a2:	edc7 7a07 	vstr	s15, [r7, #28]
        float p2 = p1 + v * t2;
 80031a6:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80031aa:	edd7 7a08 	vldr	s15, [r7, #32]
 80031ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031b2:	ed97 7a07 	vldr	s14, [r7, #28]
 80031b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031ba:	edc7 7a06 	vstr	s15, [r7, #24]
        float td = t - t1 - t2;
 80031be:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 80031c2:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80031c6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80031ca:	edd7 7a08 	vldr	s15, [r7, #32]
 80031ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80031d2:	edc7 7a05 	vstr	s15, [r7, #20]
        return p2 + v * td - 0.5f * a * td * td;
 80031d6:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80031da:	edd7 7a05 	vldr	s15, [r7, #20]
 80031de:	ee27 7a27 	vmul.f32	s14, s14, s15
 80031e2:	edd7 7a06 	vldr	s15, [r7, #24]
 80031e6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80031ea:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80031ee:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 80031f2:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80031f6:	edd7 7a05 	vldr	s15, [r7, #20]
 80031fa:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80031fe:	edd7 7a05 	vldr	s15, [r7, #20]
 8003202:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003206:	ee77 7a67 	vsub.f32	s15, s14, s15
    }
}
 800320a:	eeb0 0a67 	vmov.f32	s0, s15
 800320e:	373c      	adds	r7, #60	@ 0x3c
 8003210:	46bd      	mov	sp, r7
 8003212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003216:	4770      	bx	lr

08003218 <GetTrajectoryVelocity>:

float GetTrajectoryVelocity(const TrajectorySegment *seg, float t_global) {
 8003218:	b480      	push	{r7}
 800321a:	b087      	sub	sp, #28
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
 8003220:	ed87 0a00 	vstr	s0, [r7]
    float t = t_global - seg->t_start;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	edd3 7a08 	vldr	s15, [r3, #32]
 800322a:	ed97 7a00 	vldr	s14, [r7]
 800322e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003232:	edc7 7a05 	vstr	s15, [r7, #20]
    if (t < 0) return 0;
 8003236:	edd7 7a05 	vldr	s15, [r7, #20]
 800323a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800323e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003242:	d502      	bpl.n	800324a <GetTrajectoryVelocity+0x32>
 8003244:	eddf 7a2b 	vldr	s15, [pc, #172]	@ 80032f4 <GetTrajectoryVelocity+0xdc>
 8003248:	e04d      	b.n	80032e6 <GetTrajectoryVelocity+0xce>
    if (t >= seg->t_total) return 0;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	edd3 7a07 	vldr	s15, [r3, #28]
 8003250:	ed97 7a05 	vldr	s14, [r7, #20]
 8003254:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003258:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800325c:	db02      	blt.n	8003264 <GetTrajectoryVelocity+0x4c>
 800325e:	eddf 7a25 	vldr	s15, [pc, #148]	@ 80032f4 <GetTrajectoryVelocity+0xdc>
 8003262:	e040      	b.n	80032e6 <GetTrajectoryVelocity+0xce>

    float a = seg->a_max;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	68db      	ldr	r3, [r3, #12]
 8003268:	613b      	str	r3, [r7, #16]
    float v = seg->v_max;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	689b      	ldr	r3, [r3, #8]
 800326e:	60fb      	str	r3, [r7, #12]

    if (t < seg->t_accel) {
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	edd3 7a04 	vldr	s15, [r3, #16]
 8003276:	ed97 7a05 	vldr	s14, [r7, #20]
 800327a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800327e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003282:	d506      	bpl.n	8003292 <GetTrajectoryVelocity+0x7a>
        return a * t;
 8003284:	ed97 7a04 	vldr	s14, [r7, #16]
 8003288:	edd7 7a05 	vldr	s15, [r7, #20]
 800328c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003290:	e029      	b.n	80032e6 <GetTrajectoryVelocity+0xce>
    } else if (t < seg->t_accel + seg->t_const) {
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	ed93 7a04 	vldr	s14, [r3, #16]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	edd3 7a05 	vldr	s15, [r3, #20]
 800329e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032a2:	ed97 7a05 	vldr	s14, [r7, #20]
 80032a6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80032aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032ae:	d502      	bpl.n	80032b6 <GetTrajectoryVelocity+0x9e>
        return v;
 80032b0:	edd7 7a03 	vldr	s15, [r7, #12]
 80032b4:	e017      	b.n	80032e6 <GetTrajectoryVelocity+0xce>
    } else {
        float td = t - seg->t_accel - seg->t_const;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	edd3 7a04 	vldr	s15, [r3, #16]
 80032bc:	ed97 7a05 	vldr	s14, [r7, #20]
 80032c0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	edd3 7a05 	vldr	s15, [r3, #20]
 80032ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 80032ce:	edc7 7a02 	vstr	s15, [r7, #8]
        return v - a * td;
 80032d2:	ed97 7a04 	vldr	s14, [r7, #16]
 80032d6:	edd7 7a02 	vldr	s15, [r7, #8]
 80032da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032de:	ed97 7a03 	vldr	s14, [r7, #12]
 80032e2:	ee77 7a67 	vsub.f32	s15, s14, s15
    }
}
 80032e6:	eeb0 0a67 	vmov.f32	s0, s15
 80032ea:	371c      	adds	r7, #28
 80032ec:	46bd      	mov	sp, r7
 80032ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f2:	4770      	bx	lr
 80032f4:	00000000 	.word	0x00000000

080032f8 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b08c      	sub	sp, #48	@ 0x30
 80032fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80032fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003302:	2200      	movs	r2, #0
 8003304:	601a      	str	r2, [r3, #0]
 8003306:	605a      	str	r2, [r3, #4]
 8003308:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800330a:	1d3b      	adds	r3, r7, #4
 800330c:	2220      	movs	r2, #32
 800330e:	2100      	movs	r1, #0
 8003310:	4618      	mov	r0, r3
 8003312:	f00c f80f 	bl	800f334 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8003316:	4b32      	ldr	r3, [pc, #200]	@ (80033e0 <MX_ADC1_Init+0xe8>)
 8003318:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800331c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800331e:	4b30      	ldr	r3, [pc, #192]	@ (80033e0 <MX_ADC1_Init+0xe8>)
 8003320:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8003324:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003326:	4b2e      	ldr	r3, [pc, #184]	@ (80033e0 <MX_ADC1_Init+0xe8>)
 8003328:	2200      	movs	r2, #0
 800332a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800332c:	4b2c      	ldr	r3, [pc, #176]	@ (80033e0 <MX_ADC1_Init+0xe8>)
 800332e:	2200      	movs	r2, #0
 8003330:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8003332:	4b2b      	ldr	r3, [pc, #172]	@ (80033e0 <MX_ADC1_Init+0xe8>)
 8003334:	2200      	movs	r2, #0
 8003336:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8003338:	4b29      	ldr	r3, [pc, #164]	@ (80033e0 <MX_ADC1_Init+0xe8>)
 800333a:	2200      	movs	r2, #0
 800333c:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800333e:	4b28      	ldr	r3, [pc, #160]	@ (80033e0 <MX_ADC1_Init+0xe8>)
 8003340:	2204      	movs	r2, #4
 8003342:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8003344:	4b26      	ldr	r3, [pc, #152]	@ (80033e0 <MX_ADC1_Init+0xe8>)
 8003346:	2200      	movs	r2, #0
 8003348:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800334a:	4b25      	ldr	r3, [pc, #148]	@ (80033e0 <MX_ADC1_Init+0xe8>)
 800334c:	2200      	movs	r2, #0
 800334e:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8003350:	4b23      	ldr	r3, [pc, #140]	@ (80033e0 <MX_ADC1_Init+0xe8>)
 8003352:	2201      	movs	r2, #1
 8003354:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003356:	4b22      	ldr	r3, [pc, #136]	@ (80033e0 <MX_ADC1_Init+0xe8>)
 8003358:	2200      	movs	r2, #0
 800335a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800335e:	4b20      	ldr	r3, [pc, #128]	@ (80033e0 <MX_ADC1_Init+0xe8>)
 8003360:	2200      	movs	r2, #0
 8003362:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003364:	4b1e      	ldr	r3, [pc, #120]	@ (80033e0 <MX_ADC1_Init+0xe8>)
 8003366:	2200      	movs	r2, #0
 8003368:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800336a:	4b1d      	ldr	r3, [pc, #116]	@ (80033e0 <MX_ADC1_Init+0xe8>)
 800336c:	2200      	movs	r2, #0
 800336e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8003372:	4b1b      	ldr	r3, [pc, #108]	@ (80033e0 <MX_ADC1_Init+0xe8>)
 8003374:	2200      	movs	r2, #0
 8003376:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8003378:	4b19      	ldr	r3, [pc, #100]	@ (80033e0 <MX_ADC1_Init+0xe8>)
 800337a:	2200      	movs	r2, #0
 800337c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003380:	4817      	ldr	r0, [pc, #92]	@ (80033e0 <MX_ADC1_Init+0xe8>)
 8003382:	f003 f9a1 	bl	80066c8 <HAL_ADC_Init>
 8003386:	4603      	mov	r3, r0
 8003388:	2b00      	cmp	r3, #0
 800338a:	d001      	beq.n	8003390 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 800338c:	f002 f802 	bl	8005394 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8003390:	2300      	movs	r3, #0
 8003392:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8003394:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003398:	4619      	mov	r1, r3
 800339a:	4811      	ldr	r0, [pc, #68]	@ (80033e0 <MX_ADC1_Init+0xe8>)
 800339c:	f004 f93e 	bl	800761c <HAL_ADCEx_MultiModeConfigChannel>
 80033a0:	4603      	mov	r3, r0
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d001      	beq.n	80033aa <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80033a6:	f001 fff5 	bl	8005394 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80033aa:	4b0e      	ldr	r3, [pc, #56]	@ (80033e4 <MX_ADC1_Init+0xec>)
 80033ac:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80033ae:	2306      	movs	r3, #6
 80033b0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80033b2:	2300      	movs	r3, #0
 80033b4:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80033b6:	237f      	movs	r3, #127	@ 0x7f
 80033b8:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80033ba:	2304      	movs	r3, #4
 80033bc:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80033be:	2300      	movs	r3, #0
 80033c0:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80033c2:	1d3b      	adds	r3, r7, #4
 80033c4:	4619      	mov	r1, r3
 80033c6:	4806      	ldr	r0, [pc, #24]	@ (80033e0 <MX_ADC1_Init+0xe8>)
 80033c8:	f003 fc2c 	bl	8006c24 <HAL_ADC_ConfigChannel>
 80033cc:	4603      	mov	r3, r0
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d001      	beq.n	80033d6 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80033d2:	f001 ffdf 	bl	8005394 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80033d6:	bf00      	nop
 80033d8:	3730      	adds	r7, #48	@ 0x30
 80033da:	46bd      	mov	sp, r7
 80033dc:	bd80      	pop	{r7, pc}
 80033de:	bf00      	nop
 80033e0:	200002e8 	.word	0x200002e8
 80033e4:	04300002 	.word	0x04300002

080033e8 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b088      	sub	sp, #32
 80033ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80033ee:	463b      	mov	r3, r7
 80033f0:	2220      	movs	r2, #32
 80033f2:	2100      	movs	r1, #0
 80033f4:	4618      	mov	r0, r3
 80033f6:	f00b ff9d 	bl	800f334 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80033fa:	4b2b      	ldr	r3, [pc, #172]	@ (80034a8 <MX_ADC2_Init+0xc0>)
 80033fc:	4a2b      	ldr	r2, [pc, #172]	@ (80034ac <MX_ADC2_Init+0xc4>)
 80033fe:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8003400:	4b29      	ldr	r3, [pc, #164]	@ (80034a8 <MX_ADC2_Init+0xc0>)
 8003402:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8003406:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8003408:	4b27      	ldr	r3, [pc, #156]	@ (80034a8 <MX_ADC2_Init+0xc0>)
 800340a:	2200      	movs	r2, #0
 800340c:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800340e:	4b26      	ldr	r3, [pc, #152]	@ (80034a8 <MX_ADC2_Init+0xc0>)
 8003410:	2200      	movs	r2, #0
 8003412:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8003414:	4b24      	ldr	r3, [pc, #144]	@ (80034a8 <MX_ADC2_Init+0xc0>)
 8003416:	2200      	movs	r2, #0
 8003418:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800341a:	4b23      	ldr	r3, [pc, #140]	@ (80034a8 <MX_ADC2_Init+0xc0>)
 800341c:	2200      	movs	r2, #0
 800341e:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003420:	4b21      	ldr	r3, [pc, #132]	@ (80034a8 <MX_ADC2_Init+0xc0>)
 8003422:	2204      	movs	r2, #4
 8003424:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8003426:	4b20      	ldr	r3, [pc, #128]	@ (80034a8 <MX_ADC2_Init+0xc0>)
 8003428:	2200      	movs	r2, #0
 800342a:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800342c:	4b1e      	ldr	r3, [pc, #120]	@ (80034a8 <MX_ADC2_Init+0xc0>)
 800342e:	2200      	movs	r2, #0
 8003430:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8003432:	4b1d      	ldr	r3, [pc, #116]	@ (80034a8 <MX_ADC2_Init+0xc0>)
 8003434:	2201      	movs	r2, #1
 8003436:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8003438:	4b1b      	ldr	r3, [pc, #108]	@ (80034a8 <MX_ADC2_Init+0xc0>)
 800343a:	2200      	movs	r2, #0
 800343c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003440:	4b19      	ldr	r3, [pc, #100]	@ (80034a8 <MX_ADC2_Init+0xc0>)
 8003442:	2200      	movs	r2, #0
 8003444:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003446:	4b18      	ldr	r3, [pc, #96]	@ (80034a8 <MX_ADC2_Init+0xc0>)
 8003448:	2200      	movs	r2, #0
 800344a:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800344c:	4b16      	ldr	r3, [pc, #88]	@ (80034a8 <MX_ADC2_Init+0xc0>)
 800344e:	2200      	movs	r2, #0
 8003450:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8003454:	4b14      	ldr	r3, [pc, #80]	@ (80034a8 <MX_ADC2_Init+0xc0>)
 8003456:	2200      	movs	r2, #0
 8003458:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 800345a:	4b13      	ldr	r3, [pc, #76]	@ (80034a8 <MX_ADC2_Init+0xc0>)
 800345c:	2200      	movs	r2, #0
 800345e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8003462:	4811      	ldr	r0, [pc, #68]	@ (80034a8 <MX_ADC2_Init+0xc0>)
 8003464:	f003 f930 	bl	80066c8 <HAL_ADC_Init>
 8003468:	4603      	mov	r3, r0
 800346a:	2b00      	cmp	r3, #0
 800346c:	d001      	beq.n	8003472 <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 800346e:	f001 ff91 	bl	8005394 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8003472:	4b0f      	ldr	r3, [pc, #60]	@ (80034b0 <MX_ADC2_Init+0xc8>)
 8003474:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003476:	2306      	movs	r3, #6
 8003478:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800347a:	2300      	movs	r3, #0
 800347c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800347e:	237f      	movs	r3, #127	@ 0x7f
 8003480:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8003482:	2304      	movs	r3, #4
 8003484:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8003486:	2300      	movs	r3, #0
 8003488:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800348a:	463b      	mov	r3, r7
 800348c:	4619      	mov	r1, r3
 800348e:	4806      	ldr	r0, [pc, #24]	@ (80034a8 <MX_ADC2_Init+0xc0>)
 8003490:	f003 fbc8 	bl	8006c24 <HAL_ADC_ConfigChannel>
 8003494:	4603      	mov	r3, r0
 8003496:	2b00      	cmp	r3, #0
 8003498:	d001      	beq.n	800349e <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 800349a:	f001 ff7b 	bl	8005394 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800349e:	bf00      	nop
 80034a0:	3720      	adds	r7, #32
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}
 80034a6:	bf00      	nop
 80034a8:	20000354 	.word	0x20000354
 80034ac:	50000100 	.word	0x50000100
 80034b0:	08600004 	.word	0x08600004

080034b4 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b0a0      	sub	sp, #128	@ 0x80
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034bc:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80034c0:	2200      	movs	r2, #0
 80034c2:	601a      	str	r2, [r3, #0]
 80034c4:	605a      	str	r2, [r3, #4]
 80034c6:	609a      	str	r2, [r3, #8]
 80034c8:	60da      	str	r2, [r3, #12]
 80034ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80034cc:	f107 0318 	add.w	r3, r7, #24
 80034d0:	2254      	movs	r2, #84	@ 0x54
 80034d2:	2100      	movs	r1, #0
 80034d4:	4618      	mov	r0, r3
 80034d6:	f00b ff2d 	bl	800f334 <memset>
  if(adcHandle->Instance==ADC1)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80034e2:	d13e      	bne.n	8003562 <HAL_ADC_MspInit+0xae>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80034e4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80034e8:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80034ea:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80034ee:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80034f0:	f107 0318 	add.w	r3, r7, #24
 80034f4:	4618      	mov	r0, r3
 80034f6:	f005 fd7b 	bl	8008ff0 <HAL_RCCEx_PeriphCLKConfig>
 80034fa:	4603      	mov	r3, r0
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d001      	beq.n	8003504 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8003500:	f001 ff48 	bl	8005394 <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8003504:	4b3a      	ldr	r3, [pc, #232]	@ (80035f0 <HAL_ADC_MspInit+0x13c>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	3301      	adds	r3, #1
 800350a:	4a39      	ldr	r2, [pc, #228]	@ (80035f0 <HAL_ADC_MspInit+0x13c>)
 800350c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800350e:	4b38      	ldr	r3, [pc, #224]	@ (80035f0 <HAL_ADC_MspInit+0x13c>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	2b01      	cmp	r3, #1
 8003514:	d10b      	bne.n	800352e <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8003516:	4b37      	ldr	r3, [pc, #220]	@ (80035f4 <HAL_ADC_MspInit+0x140>)
 8003518:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800351a:	4a36      	ldr	r2, [pc, #216]	@ (80035f4 <HAL_ADC_MspInit+0x140>)
 800351c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003520:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003522:	4b34      	ldr	r3, [pc, #208]	@ (80035f4 <HAL_ADC_MspInit+0x140>)
 8003524:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003526:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800352a:	617b      	str	r3, [r7, #20]
 800352c:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800352e:	4b31      	ldr	r3, [pc, #196]	@ (80035f4 <HAL_ADC_MspInit+0x140>)
 8003530:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003532:	4a30      	ldr	r2, [pc, #192]	@ (80035f4 <HAL_ADC_MspInit+0x140>)
 8003534:	f043 0301 	orr.w	r3, r3, #1
 8003538:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800353a:	4b2e      	ldr	r3, [pc, #184]	@ (80035f4 <HAL_ADC_MspInit+0x140>)
 800353c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800353e:	f003 0301 	and.w	r3, r3, #1
 8003542:	613b      	str	r3, [r7, #16]
 8003544:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = Current_Sensor_Pin|Current_SensorA1_Pin;
 8003546:	2303      	movs	r3, #3
 8003548:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800354a:	2303      	movs	r3, #3
 800354c:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800354e:	2300      	movs	r3, #0
 8003550:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003552:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8003556:	4619      	mov	r1, r3
 8003558:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800355c:	f004 fdb4 	bl	80080c8 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8003560:	e042      	b.n	80035e8 <HAL_ADC_MspInit+0x134>
  else if(adcHandle->Instance==ADC2)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4a24      	ldr	r2, [pc, #144]	@ (80035f8 <HAL_ADC_MspInit+0x144>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d13d      	bne.n	80035e8 <HAL_ADC_MspInit+0x134>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800356c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003570:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8003572:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8003576:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003578:	f107 0318 	add.w	r3, r7, #24
 800357c:	4618      	mov	r0, r3
 800357e:	f005 fd37 	bl	8008ff0 <HAL_RCCEx_PeriphCLKConfig>
 8003582:	4603      	mov	r3, r0
 8003584:	2b00      	cmp	r3, #0
 8003586:	d001      	beq.n	800358c <HAL_ADC_MspInit+0xd8>
      Error_Handler();
 8003588:	f001 ff04 	bl	8005394 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 800358c:	4b18      	ldr	r3, [pc, #96]	@ (80035f0 <HAL_ADC_MspInit+0x13c>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	3301      	adds	r3, #1
 8003592:	4a17      	ldr	r2, [pc, #92]	@ (80035f0 <HAL_ADC_MspInit+0x13c>)
 8003594:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8003596:	4b16      	ldr	r3, [pc, #88]	@ (80035f0 <HAL_ADC_MspInit+0x13c>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	2b01      	cmp	r3, #1
 800359c:	d10b      	bne.n	80035b6 <HAL_ADC_MspInit+0x102>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800359e:	4b15      	ldr	r3, [pc, #84]	@ (80035f4 <HAL_ADC_MspInit+0x140>)
 80035a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035a2:	4a14      	ldr	r2, [pc, #80]	@ (80035f4 <HAL_ADC_MspInit+0x140>)
 80035a4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80035a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80035aa:	4b12      	ldr	r3, [pc, #72]	@ (80035f4 <HAL_ADC_MspInit+0x140>)
 80035ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035ae:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80035b2:	60fb      	str	r3, [r7, #12]
 80035b4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035b6:	4b0f      	ldr	r3, [pc, #60]	@ (80035f4 <HAL_ADC_MspInit+0x140>)
 80035b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035ba:	4a0e      	ldr	r2, [pc, #56]	@ (80035f4 <HAL_ADC_MspInit+0x140>)
 80035bc:	f043 0301 	orr.w	r3, r3, #1
 80035c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80035c2:	4b0c      	ldr	r3, [pc, #48]	@ (80035f4 <HAL_ADC_MspInit+0x140>)
 80035c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035c6:	f003 0301 	and.w	r3, r3, #1
 80035ca:	60bb      	str	r3, [r7, #8]
 80035cc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = Current_SensorA1_Pin;
 80035ce:	2302      	movs	r3, #2
 80035d0:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80035d2:	2303      	movs	r3, #3
 80035d4:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035d6:	2300      	movs	r3, #0
 80035d8:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(Current_SensorA1_GPIO_Port, &GPIO_InitStruct);
 80035da:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80035de:	4619      	mov	r1, r3
 80035e0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80035e4:	f004 fd70 	bl	80080c8 <HAL_GPIO_Init>
}
 80035e8:	bf00      	nop
 80035ea:	3780      	adds	r7, #128	@ 0x80
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bd80      	pop	{r7, pc}
 80035f0:	200003c0 	.word	0x200003c0
 80035f4:	40021000 	.word	0x40021000
 80035f8:	50000100 	.word	0x50000100

080035fc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b082      	sub	sp, #8
 8003600:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8003602:	4b12      	ldr	r3, [pc, #72]	@ (800364c <MX_DMA_Init+0x50>)
 8003604:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003606:	4a11      	ldr	r2, [pc, #68]	@ (800364c <MX_DMA_Init+0x50>)
 8003608:	f043 0304 	orr.w	r3, r3, #4
 800360c:	6493      	str	r3, [r2, #72]	@ 0x48
 800360e:	4b0f      	ldr	r3, [pc, #60]	@ (800364c <MX_DMA_Init+0x50>)
 8003610:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003612:	f003 0304 	and.w	r3, r3, #4
 8003616:	607b      	str	r3, [r7, #4]
 8003618:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800361a:	4b0c      	ldr	r3, [pc, #48]	@ (800364c <MX_DMA_Init+0x50>)
 800361c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800361e:	4a0b      	ldr	r2, [pc, #44]	@ (800364c <MX_DMA_Init+0x50>)
 8003620:	f043 0301 	orr.w	r3, r3, #1
 8003624:	6493      	str	r3, [r2, #72]	@ 0x48
 8003626:	4b09      	ldr	r3, [pc, #36]	@ (800364c <MX_DMA_Init+0x50>)
 8003628:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800362a:	f003 0301 	and.w	r3, r3, #1
 800362e:	603b      	str	r3, [r7, #0]
 8003630:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8003632:	2200      	movs	r2, #0
 8003634:	2100      	movs	r1, #0
 8003636:	200b      	movs	r0, #11
 8003638:	f004 f9d3 	bl	80079e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800363c:	200b      	movs	r0, #11
 800363e:	f004 f9ea 	bl	8007a16 <HAL_NVIC_EnableIRQ>

}
 8003642:	bf00      	nop
 8003644:	3708      	adds	r7, #8
 8003646:	46bd      	mov	sp, r7
 8003648:	bd80      	pop	{r7, pc}
 800364a:	bf00      	nop
 800364c:	40021000 	.word	0x40021000

08003650 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b08a      	sub	sp, #40	@ 0x28
 8003654:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003656:	f107 0314 	add.w	r3, r7, #20
 800365a:	2200      	movs	r2, #0
 800365c:	601a      	str	r2, [r3, #0]
 800365e:	605a      	str	r2, [r3, #4]
 8003660:	609a      	str	r2, [r3, #8]
 8003662:	60da      	str	r2, [r3, #12]
 8003664:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003666:	4b54      	ldr	r3, [pc, #336]	@ (80037b8 <MX_GPIO_Init+0x168>)
 8003668:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800366a:	4a53      	ldr	r2, [pc, #332]	@ (80037b8 <MX_GPIO_Init+0x168>)
 800366c:	f043 0304 	orr.w	r3, r3, #4
 8003670:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003672:	4b51      	ldr	r3, [pc, #324]	@ (80037b8 <MX_GPIO_Init+0x168>)
 8003674:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003676:	f003 0304 	and.w	r3, r3, #4
 800367a:	613b      	str	r3, [r7, #16]
 800367c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800367e:	4b4e      	ldr	r3, [pc, #312]	@ (80037b8 <MX_GPIO_Init+0x168>)
 8003680:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003682:	4a4d      	ldr	r2, [pc, #308]	@ (80037b8 <MX_GPIO_Init+0x168>)
 8003684:	f043 0320 	orr.w	r3, r3, #32
 8003688:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800368a:	4b4b      	ldr	r3, [pc, #300]	@ (80037b8 <MX_GPIO_Init+0x168>)
 800368c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800368e:	f003 0320 	and.w	r3, r3, #32
 8003692:	60fb      	str	r3, [r7, #12]
 8003694:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003696:	4b48      	ldr	r3, [pc, #288]	@ (80037b8 <MX_GPIO_Init+0x168>)
 8003698:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800369a:	4a47      	ldr	r2, [pc, #284]	@ (80037b8 <MX_GPIO_Init+0x168>)
 800369c:	f043 0301 	orr.w	r3, r3, #1
 80036a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80036a2:	4b45      	ldr	r3, [pc, #276]	@ (80037b8 <MX_GPIO_Init+0x168>)
 80036a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036a6:	f003 0301 	and.w	r3, r3, #1
 80036aa:	60bb      	str	r3, [r7, #8]
 80036ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80036ae:	4b42      	ldr	r3, [pc, #264]	@ (80037b8 <MX_GPIO_Init+0x168>)
 80036b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036b2:	4a41      	ldr	r2, [pc, #260]	@ (80037b8 <MX_GPIO_Init+0x168>)
 80036b4:	f043 0302 	orr.w	r3, r3, #2
 80036b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80036ba:	4b3f      	ldr	r3, [pc, #252]	@ (80037b8 <MX_GPIO_Init+0x168>)
 80036bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036be:	f003 0302 	and.w	r3, r3, #2
 80036c2:	607b      	str	r3, [r7, #4]
 80036c4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIR_MD20A_24V_GPIO_Port, DIR_MD20A_24V_Pin, GPIO_PIN_RESET);
 80036c6:	2200      	movs	r2, #0
 80036c8:	2102      	movs	r1, #2
 80036ca:	483c      	ldr	r0, [pc, #240]	@ (80037bc <MX_GPIO_Init+0x16c>)
 80036cc:	f004 fe7e 	bl	80083cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIR_MD20A_18V_GPIO_Port, DIR_MD20A_18V_Pin, GPIO_PIN_RESET);
 80036d0:	2200      	movs	r2, #0
 80036d2:	2140      	movs	r1, #64	@ 0x40
 80036d4:	483a      	ldr	r0, [pc, #232]	@ (80037c0 <MX_GPIO_Init+0x170>)
 80036d6:	f004 fe79 	bl	80083cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PS2_Attention_GPIO_Port, PS2_Attention_Pin, GPIO_PIN_SET);
 80036da:	2201      	movs	r2, #1
 80036dc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80036e0:	4837      	ldr	r0, [pc, #220]	@ (80037c0 <MX_GPIO_Init+0x170>)
 80036e2:	f004 fe73 	bl	80083cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DIR_MD20A_24V_Pin */
  GPIO_InitStruct.Pin = DIR_MD20A_24V_Pin;
 80036e6:	2302      	movs	r3, #2
 80036e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80036ea:	2301      	movs	r3, #1
 80036ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036ee:	2300      	movs	r3, #0
 80036f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036f2:	2300      	movs	r3, #0
 80036f4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DIR_MD20A_24V_GPIO_Port, &GPIO_InitStruct);
 80036f6:	f107 0314 	add.w	r3, r7, #20
 80036fa:	4619      	mov	r1, r3
 80036fc:	482f      	ldr	r0, [pc, #188]	@ (80037bc <MX_GPIO_Init+0x16c>)
 80036fe:	f004 fce3 	bl	80080c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : Limit_Switch_pen_2_Pin Limit_Switch_Prismatic1_Pin Limit_Switch_Prismatic2_Pin Limit_Switch_pen_1_Pin */
  GPIO_InitStruct.Pin = Limit_Switch_pen_2_Pin|Limit_Switch_Prismatic1_Pin|Limit_Switch_Prismatic2_Pin|Limit_Switch_pen_1_Pin;
 8003702:	f44f 4346 	mov.w	r3, #50688	@ 0xc600
 8003706:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003708:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800370c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800370e:	2300      	movs	r3, #0
 8003710:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003712:	f107 0314 	add.w	r3, r7, #20
 8003716:	4619      	mov	r1, r3
 8003718:	4828      	ldr	r0, [pc, #160]	@ (80037bc <MX_GPIO_Init+0x16c>)
 800371a:	f004 fcd5 	bl	80080c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Proximity_Left_Pin */
  GPIO_InitStruct.Pin = Proximity_Left_Pin;
 800371e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003722:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003724:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8003728:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800372a:	2300      	movs	r3, #0
 800372c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Proximity_Left_GPIO_Port, &GPIO_InitStruct);
 800372e:	f107 0314 	add.w	r3, r7, #20
 8003732:	4619      	mov	r1, r3
 8003734:	4821      	ldr	r0, [pc, #132]	@ (80037bc <MX_GPIO_Init+0x16c>)
 8003736:	f004 fcc7 	bl	80080c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIR_MD20A_18V_Pin PS2_Attention_Pin */
  GPIO_InitStruct.Pin = DIR_MD20A_18V_Pin|PS2_Attention_Pin;
 800373a:	f44f 6388 	mov.w	r3, #1088	@ 0x440
 800373e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003740:	2301      	movs	r3, #1
 8003742:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003744:	2300      	movs	r3, #0
 8003746:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003748:	2300      	movs	r3, #0
 800374a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800374c:	f107 0314 	add.w	r3, r7, #20
 8003750:	4619      	mov	r1, r3
 8003752:	481b      	ldr	r0, [pc, #108]	@ (80037c0 <MX_GPIO_Init+0x170>)
 8003754:	f004 fcb8 	bl	80080c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Emergency_Pin */
  GPIO_InitStruct.Pin = Emergency_Pin;
 8003758:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800375c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800375e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8003762:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003764:	2300      	movs	r3, #0
 8003766:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Emergency_GPIO_Port, &GPIO_InitStruct);
 8003768:	f107 0314 	add.w	r3, r7, #20
 800376c:	4619      	mov	r1, r3
 800376e:	4814      	ldr	r0, [pc, #80]	@ (80037c0 <MX_GPIO_Init+0x170>)
 8003770:	f004 fcaa 	bl	80080c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Proximity_sensor_Pin */
  GPIO_InitStruct.Pin = Proximity_sensor_Pin;
 8003774:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003778:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800377a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800377e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003780:	2300      	movs	r3, #0
 8003782:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Proximity_sensor_GPIO_Port, &GPIO_InitStruct);
 8003784:	f107 0314 	add.w	r3, r7, #20
 8003788:	4619      	mov	r1, r3
 800378a:	480d      	ldr	r0, [pc, #52]	@ (80037c0 <MX_GPIO_Init+0x170>)
 800378c:	f004 fc9c 	bl	80080c8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8003790:	2200      	movs	r2, #0
 8003792:	2100      	movs	r1, #0
 8003794:	2017      	movs	r0, #23
 8003796:	f004 f924 	bl	80079e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800379a:	2017      	movs	r0, #23
 800379c:	f004 f93b 	bl	8007a16 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80037a0:	2200      	movs	r2, #0
 80037a2:	2100      	movs	r1, #0
 80037a4:	2028      	movs	r0, #40	@ 0x28
 80037a6:	f004 f91c 	bl	80079e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80037aa:	2028      	movs	r0, #40	@ 0x28
 80037ac:	f004 f933 	bl	8007a16 <HAL_NVIC_EnableIRQ>

}
 80037b0:	bf00      	nop
 80037b2:	3728      	adds	r7, #40	@ 0x28
 80037b4:	46bd      	mov	sp, r7
 80037b6:	bd80      	pop	{r7, pc}
 80037b8:	40021000 	.word	0x40021000
 80037bc:	48000400 	.word	0x48000400
 80037c0:	48000800 	.word	0x48000800
 80037c4:	00000000 	.word	0x00000000

080037c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80037c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80037cc:	ed2d 8b04 	vpush	{d8-d9}
 80037d0:	b0a0      	sub	sp, #128	@ 0x80
 80037d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80037d4:	f002 fcfb 	bl	80061ce <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80037d8:	f001 f9f6 	bl	8004bc8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80037dc:	f7ff ff38 	bl	8003650 <MX_GPIO_Init>
  MX_DMA_Init();
 80037e0:	f7ff ff0c 	bl	80035fc <MX_DMA_Init>
  MX_TIM3_Init();
 80037e4:	f001 ffdc 	bl	80057a0 <MX_TIM3_Init>
  MX_ADC1_Init();
 80037e8:	f7ff fd86 	bl	80032f8 <MX_ADC1_Init>
  MX_TIM1_Init();
 80037ec:	f001 ff36 	bl	800565c <MX_TIM1_Init>
  MX_TIM2_Init();
 80037f0:	f001 ff88 	bl	8005704 <MX_TIM2_Init>
  MX_TIM4_Init();
 80037f4:	f002 f82a 	bl	800584c <MX_TIM4_Init>
  MX_TIM20_Init();
 80037f8:	f002 f9ae 	bl	8005b58 <MX_TIM20_Init>
  MX_TIM8_Init();
 80037fc:	f002 f87c 	bl	80058f8 <MX_TIM8_Init>
  MX_TIM16_Init();
 8003800:	f002 f92a 	bl	8005a58 <MX_TIM16_Init>
  MX_USART2_UART_Init();
 8003804:	f002 fbe0 	bl	8005fc8 <MX_USART2_UART_Init>
  MX_ADC2_Init();
 8003808:	f7ff fdee 	bl	80033e8 <MX_ADC2_Init>
  MX_SPI1_Init();
 800380c:	f001 fdc8 	bl	80053a0 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start(&htim20);
 8003810:	48a1      	ldr	r0, [pc, #644]	@ (8003a98 <main+0x2d0>)
 8003812:	f006 facd 	bl	8009db0 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim8);
 8003816:	48a1      	ldr	r0, [pc, #644]	@ (8003a9c <main+0x2d4>)
 8003818:	f006 faca 	bl	8009db0 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 800381c:	210c      	movs	r1, #12
 800381e:	489f      	ldr	r0, [pc, #636]	@ (8003a9c <main+0x2d4>)
 8003820:	f006 fc8a 	bl	800a138 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim20, TIM_CHANNEL_1);
 8003824:	2100      	movs	r1, #0
 8003826:	489c      	ldr	r0, [pc, #624]	@ (8003a98 <main+0x2d0>)
 8003828:	f006 fc86 	bl	800a138 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim20, TIM_CHANNEL_3);
 800382c:	2108      	movs	r1, #8
 800382e:	489a      	ldr	r0, [pc, #616]	@ (8003a98 <main+0x2d0>)
 8003830:	f006 fc82 	bl	800a138 <HAL_TIM_PWM_Start>
	Encoder_Init(&encoder1, &htim4);
 8003834:	499a      	ldr	r1, [pc, #616]	@ (8003aa0 <main+0x2d8>)
 8003836:	489b      	ldr	r0, [pc, #620]	@ (8003aa4 <main+0x2dc>)
 8003838:	f7fe fb10 	bl	8001e5c <Encoder_Init>
	Encoder_Init(&encoder2, &htim3);
 800383c:	499a      	ldr	r1, [pc, #616]	@ (8003aa8 <main+0x2e0>)
 800383e:	489b      	ldr	r0, [pc, #620]	@ (8003aac <main+0x2e4>)
 8003840:	f7fe fb0c 	bl	8001e5c <Encoder_Init>
	HAL_ADC_Start(&hadc1);
 8003844:	489a      	ldr	r0, [pc, #616]	@ (8003ab0 <main+0x2e8>)
 8003846:	f003 f8fb 	bl	8006a40 <HAL_ADC_Start>
	HAL_TIM_Base_Start_IT(&htim2);
 800384a:	489a      	ldr	r0, [pc, #616]	@ (8003ab4 <main+0x2ec>)
 800384c:	f006 fb20 	bl	8009e90 <HAL_TIM_Base_Start_IT>

	uint64_t lastTick = 0;
 8003850:	f04f 0200 	mov.w	r2, #0
 8003854:	f04f 0300 	mov.w	r3, #0
 8003858:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60

	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 800385c:	213c      	movs	r1, #60	@ 0x3c
 800385e:	4892      	ldr	r0, [pc, #584]	@ (8003aa8 <main+0x2e0>)
 8003860:	f006 ff26 	bl	800a6b0 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8003864:	213c      	movs	r1, #60	@ 0x3c
 8003866:	488e      	ldr	r0, [pc, #568]	@ (8003aa0 <main+0x2d8>)
 8003868:	f006 ff22 	bl	800a6b0 <HAL_TIM_Encoder_Start>

	hmodbus.huart = &huart2;
 800386c:	4b92      	ldr	r3, [pc, #584]	@ (8003ab8 <main+0x2f0>)
 800386e:	4a93      	ldr	r2, [pc, #588]	@ (8003abc <main+0x2f4>)
 8003870:	60da      	str	r2, [r3, #12]
	hmodbus.htim = &htim16;
 8003872:	4b91      	ldr	r3, [pc, #580]	@ (8003ab8 <main+0x2f0>)
 8003874:	4a92      	ldr	r2, [pc, #584]	@ (8003ac0 <main+0x2f8>)
 8003876:	611a      	str	r2, [r3, #16]
	hmodbus.slaveAddress = 0x15;
 8003878:	4b8f      	ldr	r3, [pc, #572]	@ (8003ab8 <main+0x2f0>)
 800387a:	2215      	movs	r2, #21
 800387c:	701a      	strb	r2, [r3, #0]
	hmodbus.RegisterSize = 200;
 800387e:	4b8e      	ldr	r3, [pc, #568]	@ (8003ab8 <main+0x2f0>)
 8003880:	22c8      	movs	r2, #200	@ 0xc8
 8003882:	609a      	str	r2, [r3, #8]
	Modbus_init(&hmodbus, registerFrame);
 8003884:	498f      	ldr	r1, [pc, #572]	@ (8003ac4 <main+0x2fc>)
 8003886:	488c      	ldr	r0, [pc, #560]	@ (8003ab8 <main+0x2f0>)
 8003888:	f7fe ffb6 	bl	80027f8 <Modbus_init>

	Kalman_Init(&kf_pris);
 800388c:	488e      	ldr	r0, [pc, #568]	@ (8003ac8 <main+0x300>)
 800388e:	f7fe fd01 	bl	8002294 <Kalman_Init>

	kf_pris.A_data[0] = 1;
 8003892:	4b8d      	ldr	r3, [pc, #564]	@ (8003ac8 <main+0x300>)
 8003894:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8003898:	671a      	str	r2, [r3, #112]	@ 0x70
	kf_pris.A_data[1] = 0.0008395;
 800389a:	4b8b      	ldr	r3, [pc, #556]	@ (8003ac8 <main+0x300>)
 800389c:	4a8b      	ldr	r2, [pc, #556]	@ (8003acc <main+0x304>)
 800389e:	675a      	str	r2, [r3, #116]	@ 0x74
	kf_pris.A_data[2] = -4.198e-07;
 80038a0:	4b89      	ldr	r3, [pc, #548]	@ (8003ac8 <main+0x300>)
 80038a2:	4a8b      	ldr	r2, [pc, #556]	@ (8003ad0 <main+0x308>)
 80038a4:	679a      	str	r2, [r3, #120]	@ 0x78
	kf_pris.A_data[3] = 1.282e-05;
 80038a6:	4b88      	ldr	r3, [pc, #544]	@ (8003ac8 <main+0x300>)
 80038a8:	4a8a      	ldr	r2, [pc, #552]	@ (8003ad4 <main+0x30c>)
 80038aa:	67da      	str	r2, [r3, #124]	@ 0x7c
	kf_pris.A_data[4] = 0;
 80038ac:	4b86      	ldr	r3, [pc, #536]	@ (8003ac8 <main+0x300>)
 80038ae:	f04f 0200 	mov.w	r2, #0
 80038b2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
	kf_pris.A_data[5] = 0.6791;
 80038b6:	4b84      	ldr	r3, [pc, #528]	@ (8003ac8 <main+0x300>)
 80038b8:	4a87      	ldr	r2, [pc, #540]	@ (8003ad8 <main+0x310>)
 80038ba:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
	kf_pris.A_data[6] = -0.0008395;
 80038be:	4b82      	ldr	r3, [pc, #520]	@ (8003ac8 <main+0x300>)
 80038c0:	4a86      	ldr	r2, [pc, #536]	@ (8003adc <main+0x314>)
 80038c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
	kf_pris.A_data[7] = 0.02564;
 80038c6:	4b80      	ldr	r3, [pc, #512]	@ (8003ac8 <main+0x300>)
 80038c8:	4a85      	ldr	r2, [pc, #532]	@ (8003ae0 <main+0x318>)
 80038ca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
	kf_pris.A_data[8] = 0;
 80038ce:	4b7e      	ldr	r3, [pc, #504]	@ (8003ac8 <main+0x300>)
 80038d0:	f04f 0200 	mov.w	r2, #0
 80038d4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
	kf_pris.A_data[9] = 0;
 80038d8:	4b7b      	ldr	r3, [pc, #492]	@ (8003ac8 <main+0x300>)
 80038da:	f04f 0200 	mov.w	r2, #0
 80038de:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
	kf_pris.A_data[10] = 1;
 80038e2:	4b79      	ldr	r3, [pc, #484]	@ (8003ac8 <main+0x300>)
 80038e4:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80038e8:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
	kf_pris.A_data[11] = 0;
 80038ec:	4b76      	ldr	r3, [pc, #472]	@ (8003ac8 <main+0x300>)
 80038ee:	f04f 0200 	mov.w	r2, #0
 80038f2:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
	kf_pris.A_data[12] = 0;
 80038f6:	4b74      	ldr	r3, [pc, #464]	@ (8003ac8 <main+0x300>)
 80038f8:	f04f 0200 	mov.w	r2, #0
 80038fc:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
	kf_pris.A_data[13] = -0.04203;
 8003900:	4b71      	ldr	r3, [pc, #452]	@ (8003ac8 <main+0x300>)
 8003902:	4a78      	ldr	r2, [pc, #480]	@ (8003ae4 <main+0x31c>)
 8003904:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
	kf_pris.A_data[14] = 2.101e-05;
 8003908:	4b6f      	ldr	r3, [pc, #444]	@ (8003ac8 <main+0x300>)
 800390a:	4a77      	ldr	r2, [pc, #476]	@ (8003ae8 <main+0x320>)
 800390c:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
	kf_pris.A_data[15] = -0.09565;
 8003910:	4b6d      	ldr	r3, [pc, #436]	@ (8003ac8 <main+0x300>)
 8003912:	4a76      	ldr	r2, [pc, #472]	@ (8003aec <main+0x324>)
 8003914:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac

	kf_pris.B_data[0] = 4.006e-06;
 8003918:	4b6b      	ldr	r3, [pc, #428]	@ (8003ac8 <main+0x300>)
 800391a:	4a75      	ldr	r2, [pc, #468]	@ (8003af0 <main+0x328>)
 800391c:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
	kf_pris.B_data[1] = 0.008011;
 8003920:	4b69      	ldr	r3, [pc, #420]	@ (8003ac8 <main+0x300>)
 8003922:	4a74      	ldr	r2, [pc, #464]	@ (8003af4 <main+0x32c>)
 8003924:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
	kf_pris.B_data[2] = 0;
 8003928:	4b67      	ldr	r3, [pc, #412]	@ (8003ac8 <main+0x300>)
 800392a:	f04f 0200 	mov.w	r2, #0
 800392e:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
	kf_pris.B_data[3] = 0.2826;
 8003932:	4b65      	ldr	r3, [pc, #404]	@ (8003ac8 <main+0x300>)
 8003934:	4a70      	ldr	r2, [pc, #448]	@ (8003af8 <main+0x330>)
 8003936:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc

	// Identity H
	for (int i = 0; i < KALMAN_MEAS_DIM; i++) {
 800393a:	2300      	movs	r3, #0
 800393c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800393e:	e01d      	b.n	800397c <main+0x1b4>
		for (int j = 0; j < KALMAN_STATE_DIM; j++) {
 8003940:	2300      	movs	r3, #0
 8003942:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003944:	e014      	b.n	8003970 <main+0x1a8>
			kf_pris.H_data[i * KALMAN_STATE_DIM + j] = (i == j) ? 1.0f : 0.0f;
 8003946:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8003948:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800394a:	429a      	cmp	r2, r3
 800394c:	d102      	bne.n	8003954 <main+0x18c>
 800394e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8003952:	e001      	b.n	8003958 <main+0x190>
 8003954:	f04f 0200 	mov.w	r2, #0
 8003958:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800395a:	0099      	lsls	r1, r3, #2
 800395c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800395e:	440b      	add	r3, r1
 8003960:	4959      	ldr	r1, [pc, #356]	@ (8003ac8 <main+0x300>)
 8003962:	333c      	adds	r3, #60	@ 0x3c
 8003964:	009b      	lsls	r3, r3, #2
 8003966:	440b      	add	r3, r1
 8003968:	601a      	str	r2, [r3, #0]
		for (int j = 0; j < KALMAN_STATE_DIM; j++) {
 800396a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800396c:	3301      	adds	r3, #1
 800396e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003970:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003972:	2b03      	cmp	r3, #3
 8003974:	dde7      	ble.n	8003946 <main+0x17e>
	for (int i = 0; i < KALMAN_MEAS_DIM; i++) {
 8003976:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003978:	3301      	adds	r3, #1
 800397a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800397c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800397e:	2b03      	cmp	r3, #3
 8003980:	ddde      	ble.n	8003940 <main+0x178>
		}
	}

	// Prismatic
	kf_pris.x_data[0] = 0;
 8003982:	4b51      	ldr	r3, [pc, #324]	@ (8003ac8 <main+0x300>)
 8003984:	f04f 0200 	mov.w	r2, #0
 8003988:	f8c3 2234 	str.w	r2, [r3, #564]	@ 0x234
	kf_pris.x_data[1] = 0;
 800398c:	4b4e      	ldr	r3, [pc, #312]	@ (8003ac8 <main+0x300>)
 800398e:	f04f 0200 	mov.w	r2, #0
 8003992:	f8c3 2238 	str.w	r2, [r3, #568]	@ 0x238
	kf_pris.x_data[2] = 0;
 8003996:	4b4c      	ldr	r3, [pc, #304]	@ (8003ac8 <main+0x300>)
 8003998:	f04f 0200 	mov.w	r2, #0
 800399c:	f8c3 223c 	str.w	r2, [r3, #572]	@ 0x23c
	kf_pris.x_data[3] = 0;
 80039a0:	4b49      	ldr	r3, [pc, #292]	@ (8003ac8 <main+0x300>)
 80039a2:	f04f 0200 	mov.w	r2, #0
 80039a6:	f8c3 2240 	str.w	r2, [r3, #576]	@ 0x240

	Kalman_SetMeasurementNoise(&kf_pris, 0.01f);
 80039aa:	ed9f 0a54 	vldr	s0, [pc, #336]	@ 8003afc <main+0x334>
 80039ae:	4846      	ldr	r0, [pc, #280]	@ (8003ac8 <main+0x300>)
 80039b0:	f7fe fd42 	bl	8002438 <Kalman_SetMeasurementNoise>
	Kalman_SetProcessNoise(&kf_pris, 0.9f);
 80039b4:	ed9f 0a52 	vldr	s0, [pc, #328]	@ 8003b00 <main+0x338>
 80039b8:	4843      	ldr	r0, [pc, #268]	@ (8003ac8 <main+0x300>)
 80039ba:	f7fe fd0d 	bl	80023d8 <Kalman_SetProcessNoise>

	Kalman_Init(&kf_rev);
 80039be:	4851      	ldr	r0, [pc, #324]	@ (8003b04 <main+0x33c>)
 80039c0:	f7fe fc68 	bl	8002294 <Kalman_Init>

	kf_rev.A_data[0] = 1;
 80039c4:	4b4f      	ldr	r3, [pc, #316]	@ (8003b04 <main+0x33c>)
 80039c6:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80039ca:	671a      	str	r2, [r3, #112]	@ 0x70
	kf_rev.A_data[1] = 0.0009998;
 80039cc:	4b4d      	ldr	r3, [pc, #308]	@ (8003b04 <main+0x33c>)
 80039ce:	4a4e      	ldr	r2, [pc, #312]	@ (8003b08 <main+0x340>)
 80039d0:	675a      	str	r2, [r3, #116]	@ 0x74
	kf_rev.A_data[2] = -2.659e-06;
 80039d2:	4b4c      	ldr	r3, [pc, #304]	@ (8003b04 <main+0x33c>)
 80039d4:	4a4d      	ldr	r2, [pc, #308]	@ (8003b0c <main+0x344>)
 80039d6:	679a      	str	r2, [r3, #120]	@ 0x78
	kf_rev.A_data[3] = 8.108e-08;
 80039d8:	4b4a      	ldr	r3, [pc, #296]	@ (8003b04 <main+0x33c>)
 80039da:	4a4d      	ldr	r2, [pc, #308]	@ (8003b10 <main+0x348>)
 80039dc:	67da      	str	r2, [r3, #124]	@ 0x7c
	kf_rev.A_data[4] = 0;
 80039de:	4b49      	ldr	r3, [pc, #292]	@ (8003b04 <main+0x33c>)
 80039e0:	f04f 0200 	mov.w	r2, #0
 80039e4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
	kf_rev.A_data[5] = 0.9996;
 80039e8:	4b46      	ldr	r3, [pc, #280]	@ (8003b04 <main+0x33c>)
 80039ea:	4a4a      	ldr	r2, [pc, #296]	@ (8003b14 <main+0x34c>)
 80039ec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
	kf_rev.A_data[6] = -0.005318;
 80039f0:	4b44      	ldr	r3, [pc, #272]	@ (8003b04 <main+0x33c>)
 80039f2:	4a49      	ldr	r2, [pc, #292]	@ (8003b18 <main+0x350>)
 80039f4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
	kf_rev.A_data[7] = 0.0001622;
 80039f8:	4b42      	ldr	r3, [pc, #264]	@ (8003b04 <main+0x33c>)
 80039fa:	4a48      	ldr	r2, [pc, #288]	@ (8003b1c <main+0x354>)
 80039fc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
	kf_rev.A_data[8] = 0;
 8003a00:	4b40      	ldr	r3, [pc, #256]	@ (8003b04 <main+0x33c>)
 8003a02:	f04f 0200 	mov.w	r2, #0
 8003a06:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
	kf_rev.A_data[9] = 0;
 8003a0a:	4b3e      	ldr	r3, [pc, #248]	@ (8003b04 <main+0x33c>)
 8003a0c:	f04f 0200 	mov.w	r2, #0
 8003a10:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
	kf_rev.A_data[10] = 1;
 8003a14:	4b3b      	ldr	r3, [pc, #236]	@ (8003b04 <main+0x33c>)
 8003a16:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8003a1a:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
	kf_rev.A_data[11] = 0;
 8003a1e:	4b39      	ldr	r3, [pc, #228]	@ (8003b04 <main+0x33c>)
 8003a20:	f04f 0200 	mov.w	r2, #0
 8003a24:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
	kf_rev.A_data[12] = 0;
 8003a28:	4b36      	ldr	r3, [pc, #216]	@ (8003b04 <main+0x33c>)
 8003a2a:	f04f 0200 	mov.w	r2, #0
 8003a2e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
	kf_rev.A_data[13] = -2.746;
 8003a32:	4b34      	ldr	r3, [pc, #208]	@ (8003b04 <main+0x33c>)
 8003a34:	4a3a      	ldr	r2, [pc, #232]	@ (8003b20 <main+0x358>)
 8003a36:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
	kf_rev.A_data[14] = 0.007303;
 8003a3a:	4b32      	ldr	r3, [pc, #200]	@ (8003b04 <main+0x33c>)
 8003a3c:	4a39      	ldr	r2, [pc, #228]	@ (8003b24 <main+0x35c>)
 8003a3e:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
	kf_rev.A_data[15] = 0.1354;
 8003a42:	4b30      	ldr	r3, [pc, #192]	@ (8003b04 <main+0x33c>)
 8003a44:	4a38      	ldr	r2, [pc, #224]	@ (8003b28 <main+0x360>)
 8003a46:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac

	kf_rev.B_data[0] = 1.203e-07;
 8003a4a:	4b2e      	ldr	r3, [pc, #184]	@ (8003b04 <main+0x33c>)
 8003a4c:	4a37      	ldr	r2, [pc, #220]	@ (8003b2c <main+0x364>)
 8003a4e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
	kf_rev.B_data[1] = 0.0002406;
 8003a52:	4b2c      	ldr	r3, [pc, #176]	@ (8003b04 <main+0x33c>)
 8003a54:	4a36      	ldr	r2, [pc, #216]	@ (8003b30 <main+0x368>)
 8003a56:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
	kf_rev.B_data[2] = 0;
 8003a5a:	4b2a      	ldr	r3, [pc, #168]	@ (8003b04 <main+0x33c>)
 8003a5c:	f04f 0200 	mov.w	r2, #0
 8003a60:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
	kf_rev.B_data[3] = 1.685;
 8003a64:	4b27      	ldr	r3, [pc, #156]	@ (8003b04 <main+0x33c>)
 8003a66:	4a33      	ldr	r2, [pc, #204]	@ (8003b34 <main+0x36c>)
 8003a68:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc

	// Identity H
	for (int i = 0; i < 2; i++) {
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	677b      	str	r3, [r7, #116]	@ 0x74
 8003a70:	e076      	b.n	8003b60 <main+0x398>
		for (int j = 0; j < 4; j++) {
 8003a72:	2300      	movs	r3, #0
 8003a74:	673b      	str	r3, [r7, #112]	@ 0x70
 8003a76:	e06d      	b.n	8003b54 <main+0x38c>
			if (i == j) {
 8003a78:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8003a7a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003a7c:	429a      	cmp	r2, r3
 8003a7e:	d15b      	bne.n	8003b38 <main+0x370>
				kf_rev.H_data[i * 4 + j] = 1.0f;
 8003a80:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003a82:	009a      	lsls	r2, r3, #2
 8003a84:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003a86:	4413      	add	r3, r2
 8003a88:	4a1e      	ldr	r2, [pc, #120]	@ (8003b04 <main+0x33c>)
 8003a8a:	333c      	adds	r3, #60	@ 0x3c
 8003a8c:	009b      	lsls	r3, r3, #2
 8003a8e:	4413      	add	r3, r2
 8003a90:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8003a94:	601a      	str	r2, [r3, #0]
 8003a96:	e05a      	b.n	8003b4e <main+0x386>
 8003a98:	20001bac 	.word	0x20001bac
 8003a9c:	20001a14 	.word	0x20001a14
 8003aa0:	20001948 	.word	0x20001948
 8003aa4:	200003c4 	.word	0x200003c4
 8003aa8:	2000187c 	.word	0x2000187c
 8003aac:	200003f8 	.word	0x200003f8
 8003ab0:	200002e8 	.word	0x200002e8
 8003ab4:	200017b0 	.word	0x200017b0
 8003ab8:	2000073c 	.word	0x2000073c
 8003abc:	20001c78 	.word	0x20001c78
 8003ac0:	20001ae0 	.word	0x20001ae0
 8003ac4:	20000c14 	.word	0x20000c14
 8003ac8:	20000ed0 	.word	0x20000ed0
 8003acc:	3a5c11e4 	.word	0x3a5c11e4
 8003ad0:	b4e160df 	.word	0xb4e160df
 8003ad4:	3757157b 	.word	0x3757157b
 8003ad8:	3f2dd97f 	.word	0x3f2dd97f
 8003adc:	ba5c11e4 	.word	0xba5c11e4
 8003ae0:	3cd20afa 	.word	0x3cd20afa
 8003ae4:	bd2c27a6 	.word	0xbd2c27a6
 8003ae8:	37b03ea2 	.word	0x37b03ea2
 8003aec:	bdc3e426 	.word	0xbdc3e426
 8003af0:	36866b47 	.word	0x36866b47
 8003af4:	3c034092 	.word	0x3c034092
 8003af8:	3e90b0f2 	.word	0x3e90b0f2
 8003afc:	3c23d70a 	.word	0x3c23d70a
 8003b00:	3f666666 	.word	0x3f666666
 8003b04:	200011f4 	.word	0x200011f4
 8003b08:	3a830bb9 	.word	0x3a830bb9
 8003b0c:	b6327146 	.word	0xb6327146
 8003b10:	33ae1e34 	.word	0x33ae1e34
 8003b14:	3f7fe5c9 	.word	0x3f7fe5c9
 8003b18:	bbae429e 	.word	0xbbae429e
 8003b1c:	392a143b 	.word	0x392a143b
 8003b20:	c02fbe77 	.word	0xc02fbe77
 8003b24:	3bef4e01 	.word	0x3bef4e01
 8003b28:	3e0aa64c 	.word	0x3e0aa64c
 8003b2c:	34012bd0 	.word	0x34012bd0
 8003b30:	397c4992 	.word	0x397c4992
 8003b34:	3fd7ae14 	.word	0x3fd7ae14
			} else {
				kf_rev.H_data[i * 4 + j] = 0.0f;
 8003b38:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003b3a:	009a      	lsls	r2, r3, #2
 8003b3c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003b3e:	4413      	add	r3, r2
 8003b40:	4ac1      	ldr	r2, [pc, #772]	@ (8003e48 <main+0x680>)
 8003b42:	333c      	adds	r3, #60	@ 0x3c
 8003b44:	009b      	lsls	r3, r3, #2
 8003b46:	4413      	add	r3, r2
 8003b48:	f04f 0200 	mov.w	r2, #0
 8003b4c:	601a      	str	r2, [r3, #0]
		for (int j = 0; j < 4; j++) {
 8003b4e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003b50:	3301      	adds	r3, #1
 8003b52:	673b      	str	r3, [r7, #112]	@ 0x70
 8003b54:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003b56:	2b03      	cmp	r3, #3
 8003b58:	dd8e      	ble.n	8003a78 <main+0x2b0>
	for (int i = 0; i < 2; i++) {
 8003b5a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003b5c:	3301      	adds	r3, #1
 8003b5e:	677b      	str	r3, [r7, #116]	@ 0x74
 8003b60:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003b62:	2b01      	cmp	r3, #1
 8003b64:	dd85      	ble.n	8003a72 <main+0x2aa>
			}
		}
	}

	// Revolute
	kf_rev.x_data[0] = 0;
 8003b66:	4bb8      	ldr	r3, [pc, #736]	@ (8003e48 <main+0x680>)
 8003b68:	f04f 0200 	mov.w	r2, #0
 8003b6c:	f8c3 2234 	str.w	r2, [r3, #564]	@ 0x234
	kf_rev.x_data[1] = 0;
 8003b70:	4bb5      	ldr	r3, [pc, #724]	@ (8003e48 <main+0x680>)
 8003b72:	f04f 0200 	mov.w	r2, #0
 8003b76:	f8c3 2238 	str.w	r2, [r3, #568]	@ 0x238
	kf_rev.x_data[2] = 0;
 8003b7a:	4bb3      	ldr	r3, [pc, #716]	@ (8003e48 <main+0x680>)
 8003b7c:	f04f 0200 	mov.w	r2, #0
 8003b80:	f8c3 223c 	str.w	r2, [r3, #572]	@ 0x23c
	kf_rev.x_data[3] = 0;
 8003b84:	4bb0      	ldr	r3, [pc, #704]	@ (8003e48 <main+0x680>)
 8003b86:	f04f 0200 	mov.w	r2, #0
 8003b8a:	f8c3 2240 	str.w	r2, [r3, #576]	@ 0x240

	Kalman_SetMeasurementNoise(&kf_rev, 0.08f);
 8003b8e:	ed9f 0aaf 	vldr	s0, [pc, #700]	@ 8003e4c <main+0x684>
 8003b92:	48ad      	ldr	r0, [pc, #692]	@ (8003e48 <main+0x680>)
 8003b94:	f7fe fc50 	bl	8002438 <Kalman_SetMeasurementNoise>
	Kalman_SetProcessNoise(&kf_rev, 0.12f);
 8003b98:	ed9f 0aad 	vldr	s0, [pc, #692]	@ 8003e50 <main+0x688>
 8003b9c:	48aa      	ldr	r0, [pc, #680]	@ (8003e48 <main+0x680>)
 8003b9e:	f7fe fc1b 	bl	80023d8 <Kalman_SetProcessNoise>

	Pris_motor = create_prismatic_motor(2.29e-04, 4.82e-04, 8.75e-01, 1.77e-01,
 8003ba2:	4cac      	ldr	r4, [pc, #688]	@ (8003e54 <main+0x68c>)
 8003ba4:	463b      	mov	r3, r7
 8003ba6:	ed9f 6b8e 	vldr	d6, [pc, #568]	@ 8003de0 <main+0x618>
 8003baa:	ed9f 5b8f 	vldr	d5, [pc, #572]	@ 8003de8 <main+0x620>
 8003bae:	ed9f 4b90 	vldr	d4, [pc, #576]	@ 8003df0 <main+0x628>
 8003bb2:	ed9f 3b8f 	vldr	d3, [pc, #572]	@ 8003df0 <main+0x628>
 8003bb6:	ed9f 2b90 	vldr	d2, [pc, #576]	@ 8003df8 <main+0x630>
 8003bba:	ed9f 1b91 	vldr	d1, [pc, #580]	@ 8003e00 <main+0x638>
 8003bbe:	ed9f 0b92 	vldr	d0, [pc, #584]	@ 8003e08 <main+0x640>
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	f7ff f91a 	bl	8002dfc <create_prismatic_motor>
 8003bc8:	4625      	mov	r5, r4
 8003bca:	463c      	mov	r4, r7
 8003bcc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003bce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003bd0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003bd2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003bd4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003bd6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003bd8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003bdc:	e885 0003 	stmia.w	r5, {r0, r1}
			1.77e-01, 3.8719, 0.0016);
	Rev_motor = create_motor(1.88E-01, 6.91E-03, 7.36E-01, 1.63E+00,
 8003be0:	4c9d      	ldr	r4, [pc, #628]	@ (8003e58 <main+0x690>)
 8003be2:	463b      	mov	r3, r7
 8003be4:	ed9f 6b8a 	vldr	d6, [pc, #552]	@ 8003e10 <main+0x648>
 8003be8:	ed9f 5b8b 	vldr	d5, [pc, #556]	@ 8003e18 <main+0x650>
 8003bec:	ed9f 4b8c 	vldr	d4, [pc, #560]	@ 8003e20 <main+0x658>
 8003bf0:	ed9f 3b8d 	vldr	d3, [pc, #564]	@ 8003e28 <main+0x660>
 8003bf4:	ed9f 2b8e 	vldr	d2, [pc, #568]	@ 8003e30 <main+0x668>
 8003bf8:	ed9f 1b8f 	vldr	d1, [pc, #572]	@ 8003e38 <main+0x670>
 8003bfc:	ed9f 0b90 	vldr	d0, [pc, #576]	@ 8003e40 <main+0x678>
 8003c00:	4618      	mov	r0, r3
 8003c02:	f7ff f93c 	bl	8002e7e <create_motor>
 8003c06:	4625      	mov	r5, r4
 8003c08:	463c      	mov	r4, r7
 8003c0a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003c0c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003c0e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003c10:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003c12:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003c14:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003c16:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003c1a:	e885 0003 	stmia.w	r5, {r0, r1}
			1.63E+00 * 7.36E-01, 5.13E-01, 3.37E-04);

	// Prismatic Position
	Pris_posi_PID.Kp = 0.3;
 8003c1e:	4b8f      	ldr	r3, [pc, #572]	@ (8003e5c <main+0x694>)
 8003c20:	4a8f      	ldr	r2, [pc, #572]	@ (8003e60 <main+0x698>)
 8003c22:	619a      	str	r2, [r3, #24]
	Pris_posi_PID.Ki = 0.01;
 8003c24:	4b8d      	ldr	r3, [pc, #564]	@ (8003e5c <main+0x694>)
 8003c26:	4a8f      	ldr	r2, [pc, #572]	@ (8003e64 <main+0x69c>)
 8003c28:	61da      	str	r2, [r3, #28]
	Pris_posi_PID.Kd = 0.3;
 8003c2a:	4b8c      	ldr	r3, [pc, #560]	@ (8003e5c <main+0x694>)
 8003c2c:	4a8c      	ldr	r2, [pc, #560]	@ (8003e60 <main+0x698>)
 8003c2e:	621a      	str	r2, [r3, #32]
	arm_pid_init_f32(&Pris_posi_PID, 0);
 8003c30:	2100      	movs	r1, #0
 8003c32:	488a      	ldr	r0, [pc, #552]	@ (8003e5c <main+0x694>)
 8003c34:	f00a fe88 	bl	800e948 <arm_pid_init_f32>

	// Prismatic Velocity
	Pris_velo_PID.Kp = 0.08;
 8003c38:	4b8b      	ldr	r3, [pc, #556]	@ (8003e68 <main+0x6a0>)
 8003c3a:	4a8c      	ldr	r2, [pc, #560]	@ (8003e6c <main+0x6a4>)
 8003c3c:	619a      	str	r2, [r3, #24]
	Pris_velo_PID.Ki = 0.01;
 8003c3e:	4b8a      	ldr	r3, [pc, #552]	@ (8003e68 <main+0x6a0>)
 8003c40:	4a88      	ldr	r2, [pc, #544]	@ (8003e64 <main+0x69c>)
 8003c42:	61da      	str	r2, [r3, #28]
	Pris_velo_PID.Kd = 0;
 8003c44:	4b88      	ldr	r3, [pc, #544]	@ (8003e68 <main+0x6a0>)
 8003c46:	f04f 0200 	mov.w	r2, #0
 8003c4a:	621a      	str	r2, [r3, #32]
	arm_pid_init_f32(&Pris_velo_PID, 0);
 8003c4c:	2100      	movs	r1, #0
 8003c4e:	4886      	ldr	r0, [pc, #536]	@ (8003e68 <main+0x6a0>)
 8003c50:	f00a fe7a 	bl	800e948 <arm_pid_init_f32>

	// Revolute Position
	Rev_posi_PID.Kp = 100.0;
 8003c54:	4b86      	ldr	r3, [pc, #536]	@ (8003e70 <main+0x6a8>)
 8003c56:	4a87      	ldr	r2, [pc, #540]	@ (8003e74 <main+0x6ac>)
 8003c58:	619a      	str	r2, [r3, #24]
	Rev_posi_PID.Ki = 40.0;
 8003c5a:	4b85      	ldr	r3, [pc, #532]	@ (8003e70 <main+0x6a8>)
 8003c5c:	4a86      	ldr	r2, [pc, #536]	@ (8003e78 <main+0x6b0>)
 8003c5e:	61da      	str	r2, [r3, #28]
	Rev_posi_PID.Kd = 4.0;
 8003c60:	4b83      	ldr	r3, [pc, #524]	@ (8003e70 <main+0x6a8>)
 8003c62:	f04f 4281 	mov.w	r2, #1082130432	@ 0x40800000
 8003c66:	621a      	str	r2, [r3, #32]
	arm_pid_init_f32(&Rev_posi_PID, 0);
 8003c68:	2100      	movs	r1, #0
 8003c6a:	4881      	ldr	r0, [pc, #516]	@ (8003e70 <main+0x6a8>)
 8003c6c:	f00a fe6c 	bl	800e948 <arm_pid_init_f32>

	// Revolute Velocity
	Rev_velo_PID.Kp = 3.0;
 8003c70:	4b82      	ldr	r3, [pc, #520]	@ (8003e7c <main+0x6b4>)
 8003c72:	4a83      	ldr	r2, [pc, #524]	@ (8003e80 <main+0x6b8>)
 8003c74:	619a      	str	r2, [r3, #24]
	Rev_velo_PID.Ki = 0.1;
 8003c76:	4b81      	ldr	r3, [pc, #516]	@ (8003e7c <main+0x6b4>)
 8003c78:	4a82      	ldr	r2, [pc, #520]	@ (8003e84 <main+0x6bc>)
 8003c7a:	61da      	str	r2, [r3, #28]
	Rev_velo_PID.Kd = 0;
 8003c7c:	4b7f      	ldr	r3, [pc, #508]	@ (8003e7c <main+0x6b4>)
 8003c7e:	f04f 0200 	mov.w	r2, #0
 8003c82:	621a      	str	r2, [r3, #32]
	arm_pid_init_f32(&Rev_velo_PID, 0);
 8003c84:	2100      	movs	r1, #0
 8003c86:	487d      	ldr	r0, [pc, #500]	@ (8003e7c <main+0x6b4>)
 8003c88:	f00a fe5e 	bl	800e948 <arm_pid_init_f32>

	Backlash_Init(&Rev_backlash, 0.0349066);
 8003c8c:	ed9f 0a7e 	vldr	s0, [pc, #504]	@ 8003e88 <main+0x6c0>
 8003c90:	487e      	ldr	r0, [pc, #504]	@ (8003e8c <main+0x6c4>)
 8003c92:	f7fd fa60 	bl	8001156 <Backlash_Init>
	modbus_heartbeat_init(&hmodbus);
 8003c96:	487e      	ldr	r0, [pc, #504]	@ (8003e90 <main+0x6c8>)
 8003c98:	f7fd fadd 	bl	8001256 <modbus_heartbeat_init>
  /* USER CODE BEGIN WHILE */
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		uint64_t currentTick = HAL_GetTick();
 8003c9c:	f002 fafc 	bl	8006298 <HAL_GetTick>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	469a      	mov	sl, r3
 8003ca6:	4693      	mov	fp, r2
 8003ca8:	e9c7 ab16 	strd	sl, fp, [r7, #88]	@ 0x58
		float dt = (currentTick - lastTick) / 1000.0f;
 8003cac:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 8003cb0:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8003cb4:	ebb0 0802 	subs.w	r8, r0, r2
 8003cb8:	eb61 0903 	sbc.w	r9, r1, r3
 8003cbc:	4640      	mov	r0, r8
 8003cbe:	4649      	mov	r1, r9
 8003cc0:	f7fd f84e 	bl	8000d60 <__aeabi_ul2f>
 8003cc4:	ee06 0a90 	vmov	s13, r0
 8003cc8:	ed9f 7a72 	vldr	s14, [pc, #456]	@ 8003e94 <main+0x6cc>
 8003ccc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003cd0:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
		Modbus_Protocal_Worker();
 8003cd4:	f7fe fe1e 	bl	8002914 <Modbus_Protocal_Worker>
		modbus_heartbeat(&hmodbus);
 8003cd8:	486d      	ldr	r0, [pc, #436]	@ (8003e90 <main+0x6c8>)
 8003cda:	f7fd facb 	bl	8001274 <modbus_heartbeat>
		Base_Sysytem_status = modbus_Base_System_Status(&hmodbus);
 8003cde:	486c      	ldr	r0, [pc, #432]	@ (8003e90 <main+0x6c8>)
 8003ce0:	f7fd fade 	bl	80012a0 <modbus_Base_System_Status>
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	461a      	mov	r2, r3
 8003ce8:	4b6b      	ldr	r3, [pc, #428]	@ (8003e98 <main+0x6d0>)
 8003cea:	701a      	strb	r2, [r3, #0]

		t_global = HAL_GetTick() / 1000.0f;
 8003cec:	f002 fad4 	bl	8006298 <HAL_GetTick>
 8003cf0:	ee07 0a90 	vmov	s15, r0
 8003cf4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003cf8:	eddf 6a66 	vldr	s13, [pc, #408]	@ 8003e94 <main+0x6cc>
 8003cfc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003d00:	4b66      	ldr	r3, [pc, #408]	@ (8003e9c <main+0x6d4>)
 8003d02:	edc3 7a00 	vstr	s15, [r3]

		if (dt >= 0.001f) {
 8003d06:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8003d0a:	ed9f 7a65 	vldr	s14, [pc, #404]	@ 8003ea0 <main+0x6d8>
 8003d0e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003d12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d16:	f2c0 8687 	blt.w	8004a28 <main+0x1260>

			HAL_ADC_Start(&hadc1);
 8003d1a:	4862      	ldr	r0, [pc, #392]	@ (8003ea4 <main+0x6dc>)
 8003d1c:	f002 fe90 	bl	8006a40 <HAL_ADC_Start>
			HAL_ADC_Start(&hadc2);
 8003d20:	4861      	ldr	r0, [pc, #388]	@ (8003ea8 <main+0x6e0>)
 8003d22:	f002 fe8d 	bl	8006a40 <HAL_ADC_Start>
			adc_1 = HAL_ADC_GetValue(&hadc1);
 8003d26:	485f      	ldr	r0, [pc, #380]	@ (8003ea4 <main+0x6dc>)
 8003d28:	f002 ff6e 	bl	8006c08 <HAL_ADC_GetValue>
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	b29a      	uxth	r2, r3
 8003d30:	4b5e      	ldr	r3, [pc, #376]	@ (8003eac <main+0x6e4>)
 8003d32:	801a      	strh	r2, [r3, #0]
			adc_2 = HAL_ADC_GetValue(&hadc2);
 8003d34:	485c      	ldr	r0, [pc, #368]	@ (8003ea8 <main+0x6e0>)
 8003d36:	f002 ff67 	bl	8006c08 <HAL_ADC_GetValue>
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	b29a      	uxth	r2, r3
 8003d3e:	4b5c      	ldr	r3, [pc, #368]	@ (8003eb0 <main+0x6e8>)
 8003d40:	801a      	strh	r2, [r3, #0]

			Encoder_Update(&encoder1, dt);
 8003d42:	ed97 0a15 	vldr	s0, [r7, #84]	@ 0x54
 8003d46:	485b      	ldr	r0, [pc, #364]	@ (8003eb4 <main+0x6ec>)
 8003d48:	f7fe f8b2 	bl	8001eb0 <Encoder_Update>
			Encoder_Update(&encoder2, dt);
 8003d4c:	ed97 0a15 	vldr	s0, [r7, #84]	@ 0x54
 8003d50:	4859      	ldr	r0, [pc, #356]	@ (8003eb8 <main+0x6f0>)
 8003d52:	f7fe f8ad 	bl	8001eb0 <Encoder_Update>
			QEIReadRaw3 = __HAL_TIM_GET_COUNTER(&htim3);
 8003d56:	4b59      	ldr	r3, [pc, #356]	@ (8003ebc <main+0x6f4>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d5c:	4a58      	ldr	r2, [pc, #352]	@ (8003ec0 <main+0x6f8>)
 8003d5e:	6013      	str	r3, [r2, #0]
			QEIReadRaw4 = __HAL_TIM_GET_COUNTER(&htim4);
 8003d60:	4b58      	ldr	r3, [pc, #352]	@ (8003ec4 <main+0x6fc>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d66:	4a58      	ldr	r2, [pc, #352]	@ (8003ec8 <main+0x700>)
 8003d68:	6013      	str	r3, [r2, #0]

			p1 = Encoder_GetPosition(&encoder1);
 8003d6a:	4852      	ldr	r0, [pc, #328]	@ (8003eb4 <main+0x6ec>)
 8003d6c:	f7fe f956 	bl	800201c <Encoder_GetPosition>
 8003d70:	eef0 7a40 	vmov.f32	s15, s0
 8003d74:	4b55      	ldr	r3, [pc, #340]	@ (8003ecc <main+0x704>)
 8003d76:	edc3 7a00 	vstr	s15, [r3]
			v1 = Encoder_GetVelocity(&encoder1);
 8003d7a:	484e      	ldr	r0, [pc, #312]	@ (8003eb4 <main+0x6ec>)
 8003d7c:	f7fe f95d 	bl	800203a <Encoder_GetVelocity>
 8003d80:	eef0 7a40 	vmov.f32	s15, s0
 8003d84:	4b52      	ldr	r3, [pc, #328]	@ (8003ed0 <main+0x708>)
 8003d86:	edc3 7a00 	vstr	s15, [r3]
			a1 = Encoder_GetAcceleration(&encoder1);
 8003d8a:	484a      	ldr	r0, [pc, #296]	@ (8003eb4 <main+0x6ec>)
 8003d8c:	f7fe f964 	bl	8002058 <Encoder_GetAcceleration>
 8003d90:	eef0 7a40 	vmov.f32	s15, s0
 8003d94:	4b4f      	ldr	r3, [pc, #316]	@ (8003ed4 <main+0x70c>)
 8003d96:	edc3 7a00 	vstr	s15, [r3]

			p2 = Encoder_GetPosition(&encoder2);
 8003d9a:	4847      	ldr	r0, [pc, #284]	@ (8003eb8 <main+0x6f0>)
 8003d9c:	f7fe f93e 	bl	800201c <Encoder_GetPosition>
 8003da0:	eef0 7a40 	vmov.f32	s15, s0
 8003da4:	4b4c      	ldr	r3, [pc, #304]	@ (8003ed8 <main+0x710>)
 8003da6:	edc3 7a00 	vstr	s15, [r3]
			v2 = Encoder_GetVelocity(&encoder2);
 8003daa:	4843      	ldr	r0, [pc, #268]	@ (8003eb8 <main+0x6f0>)
 8003dac:	f7fe f945 	bl	800203a <Encoder_GetVelocity>
 8003db0:	eef0 7a40 	vmov.f32	s15, s0
 8003db4:	4b49      	ldr	r3, [pc, #292]	@ (8003edc <main+0x714>)
 8003db6:	edc3 7a00 	vstr	s15, [r3]
			a2 = Encoder_GetAcceleration(&encoder2);
 8003dba:	483f      	ldr	r0, [pc, #252]	@ (8003eb8 <main+0x6f0>)
 8003dbc:	f7fe f94c 	bl	8002058 <Encoder_GetAcceleration>
 8003dc0:	eef0 7a40 	vmov.f32	s15, s0
 8003dc4:	4b46      	ldr	r3, [pc, #280]	@ (8003ee0 <main+0x718>)
 8003dc6:	edc3 7a00 	vstr	s15, [r3]

			if (Base_Sysytem_status == Base_Home) {
 8003dca:	4b33      	ldr	r3, [pc, #204]	@ (8003e98 <main+0x6d0>)
 8003dcc:	781b      	ldrb	r3, [r3, #0]
 8003dce:	2b01      	cmp	r3, #1
 8003dd0:	f040 8088 	bne.w	8003ee4 <main+0x71c>

				R_Theta_moving_Status(&hmodbus, Home);
 8003dd4:	2101      	movs	r1, #1
 8003dd6:	482e      	ldr	r0, [pc, #184]	@ (8003e90 <main+0x6c8>)
 8003dd8:	f7fd fa72 	bl	80012c0 <R_Theta_moving_Status>
 8003ddc:	e3a3      	b.n	8004526 <main+0xd5e>
 8003dde:	bf00      	nop
 8003de0:	eb1c432d 	.word	0xeb1c432d
 8003de4:	3f5a36e2 	.word	0x3f5a36e2
 8003de8:	b50b0f28 	.word	0xb50b0f28
 8003dec:	400ef9a6 	.word	0x400ef9a6
 8003df0:	9db22d0e 	.word	0x9db22d0e
 8003df4:	3fc6a7ef 	.word	0x3fc6a7ef
 8003df8:	00000000 	.word	0x00000000
 8003dfc:	3fec0000 	.word	0x3fec0000
 8003e00:	3c968944 	.word	0x3c968944
 8003e04:	3f3f969e 	.word	0x3f3f969e
 8003e08:	05857aff 	.word	0x05857aff
 8003e0c:	3f2e03f7 	.word	0x3f2e03f7
 8003e10:	fa8f7db7 	.word	0xfa8f7db7
 8003e14:	3f3615eb 	.word	0x3f3615eb
 8003e18:	f9db22d1 	.word	0xf9db22d1
 8003e1c:	3fe06a7e 	.word	0x3fe06a7e
 8003e20:	a7daa4fc 	.word	0xa7daa4fc
 8003e24:	3ff331e3 	.word	0x3ff331e3
 8003e28:	e147ae14 	.word	0xe147ae14
 8003e2c:	3ffa147a 	.word	0x3ffa147a
 8003e30:	df3b645a 	.word	0xdf3b645a
 8003e34:	3fe78d4f 	.word	0x3fe78d4f
 8003e38:	003eea21 	.word	0x003eea21
 8003e3c:	3f7c4da9 	.word	0x3f7c4da9
 8003e40:	4dd2f1aa 	.word	0x4dd2f1aa
 8003e44:	3fc81062 	.word	0x3fc81062
 8003e48:	200011f4 	.word	0x200011f4
 8003e4c:	3da3d70a 	.word	0x3da3d70a
 8003e50:	3df5c28f 	.word	0x3df5c28f
 8003e54:	20001518 	.word	0x20001518
 8003e58:	20001550 	.word	0x20001550
 8003e5c:	20000dcc 	.word	0x20000dcc
 8003e60:	3e99999a 	.word	0x3e99999a
 8003e64:	3c23d70a 	.word	0x3c23d70a
 8003e68:	20000e0c 	.word	0x20000e0c
 8003e6c:	3da3d70a 	.word	0x3da3d70a
 8003e70:	20000e4c 	.word	0x20000e4c
 8003e74:	42c80000 	.word	0x42c80000
 8003e78:	42200000 	.word	0x42200000
 8003e7c:	20000e88 	.word	0x20000e88
 8003e80:	40400000 	.word	0x40400000
 8003e84:	3dcccccd 	.word	0x3dcccccd
 8003e88:	3d0efa39 	.word	0x3d0efa39
 8003e8c:	20000dc0 	.word	0x20000dc0
 8003e90:	2000073c 	.word	0x2000073c
 8003e94:	447a0000 	.word	0x447a0000
 8003e98:	20000da4 	.word	0x20000da4
 8003e9c:	20000718 	.word	0x20000718
 8003ea0:	3a83126f 	.word	0x3a83126f
 8003ea4:	200002e8 	.word	0x200002e8
 8003ea8:	20000354 	.word	0x20000354
 8003eac:	20000738 	.word	0x20000738
 8003eb0:	2000073a 	.word	0x2000073a
 8003eb4:	200003c4 	.word	0x200003c4
 8003eb8:	200003f8 	.word	0x200003f8
 8003ebc:	2000187c 	.word	0x2000187c
 8003ec0:	2000042c 	.word	0x2000042c
 8003ec4:	20001948 	.word	0x20001948
 8003ec8:	20000430 	.word	0x20000430
 8003ecc:	2000071c 	.word	0x2000071c
 8003ed0:	20000720 	.word	0x20000720
 8003ed4:	20000724 	.word	0x20000724
 8003ed8:	20000728 	.word	0x20000728
 8003edc:	2000072c 	.word	0x2000072c
 8003ee0:	20000730 	.word	0x20000730

			} else if (Base_Sysytem_status == Base_Run_Jog_mode) {
 8003ee4:	4b86      	ldr	r3, [pc, #536]	@ (8004100 <main+0x938>)
 8003ee6:	781b      	ldrb	r3, [r3, #0]
 8003ee8:	2b02      	cmp	r3, #2
 8003eea:	f040 8265 	bne.w	80043b8 <main+0xbf0>

				R_Theta_moving_Status(&hmodbus, Run_Jog_mode);
 8003eee:	2102      	movs	r1, #2
 8003ef0:	4884      	ldr	r0, [pc, #528]	@ (8004104 <main+0x93c>)
 8003ef2:	f7fd f9e5 	bl	80012c0 <R_Theta_moving_Status>

				Circle = PS2_ButtonCircle();
 8003ef6:	f7fe f92d 	bl	8002154 <PS2_ButtonCircle>
 8003efa:	4603      	mov	r3, r0
 8003efc:	461a      	mov	r2, r3
 8003efe:	4b82      	ldr	r3, [pc, #520]	@ (8004108 <main+0x940>)
 8003f00:	601a      	str	r2, [r3, #0]
				Square = PS2_ButtonSquare();
 8003f02:	f7fe f939 	bl	8002178 <PS2_ButtonSquare>
 8003f06:	4603      	mov	r3, r0
 8003f08:	461a      	mov	r2, r3
 8003f0a:	4b80      	ldr	r3, [pc, #512]	@ (800410c <main+0x944>)
 8003f0c:	601a      	str	r2, [r3, #0]
				Triangle = PS2_ButtonTriangle();
 8003f0e:	f7fe f943 	bl	8002198 <PS2_ButtonTriangle>
 8003f12:	4603      	mov	r3, r0
 8003f14:	461a      	mov	r2, r3
 8003f16:	4b7e      	ldr	r3, [pc, #504]	@ (8004110 <main+0x948>)
 8003f18:	601a      	str	r2, [r3, #0]
				Cross = PS2_ButtonCross();
 8003f1a:	f7fe f94f 	bl	80021bc <PS2_ButtonCross>
 8003f1e:	4603      	mov	r3, r0
 8003f20:	461a      	mov	r2, r3
 8003f22:	4b7c      	ldr	r3, [pc, #496]	@ (8004114 <main+0x94c>)
 8003f24:	601a      	str	r2, [r3, #0]
				R1 = PS2_ButtonR1();
 8003f26:	f7fe f95b 	bl	80021e0 <PS2_ButtonR1>
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	461a      	mov	r2, r3
 8003f2e:	4b7a      	ldr	r3, [pc, #488]	@ (8004118 <main+0x950>)
 8003f30:	601a      	str	r2, [r3, #0]
				R2 = PS2_ButtonR2();
 8003f32:	f7fe f967 	bl	8002204 <PS2_ButtonR2>
 8003f36:	4603      	mov	r3, r0
 8003f38:	461a      	mov	r2, r3
 8003f3a:	4b78      	ldr	r3, [pc, #480]	@ (800411c <main+0x954>)
 8003f3c:	601a      	str	r2, [r3, #0]
				Select = PS2_ButtonSelect();
 8003f3e:	f7fe f973 	bl	8002228 <PS2_ButtonSelect>
 8003f42:	4603      	mov	r3, r0
 8003f44:	461a      	mov	r2, r3
 8003f46:	4b76      	ldr	r3, [pc, #472]	@ (8004120 <main+0x958>)
 8003f48:	601a      	str	r2, [r3, #0]
				Start = PS2_ButtonStart();
 8003f4a:	f7fe f97f 	bl	800224c <PS2_ButtonStart>
 8003f4e:	4603      	mov	r3, r0
 8003f50:	461a      	mov	r2, r3
 8003f52:	4b74      	ldr	r3, [pc, #464]	@ (8004124 <main+0x95c>)
 8003f54:	601a      	str	r2, [r3, #0]
				L2 = PS2_ButtonL2();
 8003f56:	f7fe f98b 	bl	8002270 <PS2_ButtonL2>
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	461a      	mov	r2, r3
 8003f5e:	4b72      	ldr	r3, [pc, #456]	@ (8004128 <main+0x960>)
 8003f60:	601a      	str	r2, [r3, #0]
//				} else if (PS2_ButtonR2()) {
//					// Servo/Pen Move Down
//					__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4, 0);
//				}

				uint8_t selectPressed = PS2_ButtonL2();
 8003f62:	f7fe f985 	bl	8002270 <PS2_ButtonL2>
 8003f66:	4603      	mov	r3, r0
 8003f68:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
				static uint8_t prevSelect = 0;
				if (selectPressed && !prevSelect) {
 8003f6c:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d026      	beq.n	8003fc2 <main+0x7fa>
 8003f74:	4b6d      	ldr	r3, [pc, #436]	@ (800412c <main+0x964>)
 8003f76:	781b      	ldrb	r3, [r3, #0]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d122      	bne.n	8003fc2 <main+0x7fa>
					if (count < 11) {
 8003f7c:	4b6c      	ldr	r3, [pc, #432]	@ (8004130 <main+0x968>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	2b0a      	cmp	r3, #10
 8003f82:	dc1e      	bgt.n	8003fc2 <main+0x7fa>
//						PrismaticTenPoints[count] = roundf(Encoder_GetPosition_mm(&encoder1) * 10.0f);
//						RevoluteTenPoints[count] = roundf(Encoder_GetDegree(&encoder2) * 10.0f);
						PrismaticTenPoints[count] = count;
 8003f84:	4b6a      	ldr	r3, [pc, #424]	@ (8004130 <main+0x968>)
 8003f86:	681a      	ldr	r2, [r3, #0]
 8003f88:	4b69      	ldr	r3, [pc, #420]	@ (8004130 <main+0x968>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	ee07 2a90 	vmov	s15, r2
 8003f90:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003f94:	4a67      	ldr	r2, [pc, #412]	@ (8004134 <main+0x96c>)
 8003f96:	009b      	lsls	r3, r3, #2
 8003f98:	4413      	add	r3, r2
 8003f9a:	edc3 7a00 	vstr	s15, [r3]
						RevoluteTenPoints[count] = count;
 8003f9e:	4b64      	ldr	r3, [pc, #400]	@ (8004130 <main+0x968>)
 8003fa0:	681a      	ldr	r2, [r3, #0]
 8003fa2:	4b63      	ldr	r3, [pc, #396]	@ (8004130 <main+0x968>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	ee07 2a90 	vmov	s15, r2
 8003faa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003fae:	4a62      	ldr	r2, [pc, #392]	@ (8004138 <main+0x970>)
 8003fb0:	009b      	lsls	r3, r3, #2
 8003fb2:	4413      	add	r3, r2
 8003fb4:	edc3 7a00 	vstr	s15, [r3]
						count += 1;
 8003fb8:	4b5d      	ldr	r3, [pc, #372]	@ (8004130 <main+0x968>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	3301      	adds	r3, #1
 8003fbe:	4a5c      	ldr	r2, [pc, #368]	@ (8004130 <main+0x968>)
 8003fc0:	6013      	str	r3, [r2, #0]
					}
				}
				prevSelect = selectPressed;
 8003fc2:	4a5a      	ldr	r2, [pc, #360]	@ (800412c <main+0x964>)
 8003fc4:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8003fc8:	7013      	strb	r3, [r2, #0]

				if (PS2_ButtonStart()) { // Auto Mode
 8003fca:	f7fe f93f 	bl	800224c <PS2_ButtonStart>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	f000 811c 	beq.w	800420e <main+0xa46>
					for (int i = 0; i < 10; i++) {
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003fda:	e111      	b.n	8004200 <main+0xa38>
						float start_pris = PrismaticTenPoints[i];
 8003fdc:	4a55      	ldr	r2, [pc, #340]	@ (8004134 <main+0x96c>)
 8003fde:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003fe0:	009b      	lsls	r3, r3, #2
 8003fe2:	4413      	add	r3, r2
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	64fb      	str	r3, [r7, #76]	@ 0x4c
						float end_pris = PrismaticTenPoints[i + 1];
 8003fe8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003fea:	3301      	adds	r3, #1
 8003fec:	4a51      	ldr	r2, [pc, #324]	@ (8004134 <main+0x96c>)
 8003fee:	009b      	lsls	r3, r3, #2
 8003ff0:	4413      	add	r3, r2
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	64bb      	str	r3, [r7, #72]	@ 0x48
						float start_rev = RevoluteTenPoints[i];
 8003ff6:	4a50      	ldr	r2, [pc, #320]	@ (8004138 <main+0x970>)
 8003ff8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003ffa:	009b      	lsls	r3, r3, #2
 8003ffc:	4413      	add	r3, r2
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	647b      	str	r3, [r7, #68]	@ 0x44
						float end_rev = RevoluteTenPoints[i + 1];
 8004002:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004004:	3301      	adds	r3, #1
 8004006:	4a4c      	ldr	r2, [pc, #304]	@ (8004138 <main+0x970>)
 8004008:	009b      	lsls	r3, r3, #2
 800400a:	4413      	add	r3, r2
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	643b      	str	r3, [r7, #64]	@ 0x40
						// กำหนดเวลาเริ่มต้นของ segment นี้
						float t_start_pris = (i == 0) ? t_global : Prismatic[i - 1].t_start +
 8004010:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004012:	2b00      	cmp	r3, #0
 8004014:	d021      	beq.n	800405a <main+0x892>
 8004016:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004018:	1e5a      	subs	r2, r3, #1
 800401a:	4948      	ldr	r1, [pc, #288]	@ (800413c <main+0x974>)
 800401c:	4613      	mov	r3, r2
 800401e:	00db      	lsls	r3, r3, #3
 8004020:	4413      	add	r3, r2
 8004022:	009b      	lsls	r3, r3, #2
 8004024:	440b      	add	r3, r1
 8004026:	3320      	adds	r3, #32
 8004028:	ed93 7a00 	vldr	s14, [r3]
								Prismatic[i - 1].t_total + delay_pris[i - 1];
 800402c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800402e:	1e5a      	subs	r2, r3, #1
 8004030:	4942      	ldr	r1, [pc, #264]	@ (800413c <main+0x974>)
 8004032:	4613      	mov	r3, r2
 8004034:	00db      	lsls	r3, r3, #3
 8004036:	4413      	add	r3, r2
 8004038:	009b      	lsls	r3, r3, #2
 800403a:	440b      	add	r3, r1
 800403c:	331c      	adds	r3, #28
 800403e:	edd3 7a00 	vldr	s15, [r3]
						float t_start_pris = (i == 0) ? t_global : Prismatic[i - 1].t_start +
 8004042:	ee37 7a27 	vadd.f32	s14, s14, s15
								Prismatic[i - 1].t_total + delay_pris[i - 1];
 8004046:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004048:	3b01      	subs	r3, #1
 800404a:	4a3d      	ldr	r2, [pc, #244]	@ (8004140 <main+0x978>)
 800404c:	009b      	lsls	r3, r3, #2
 800404e:	4413      	add	r3, r2
 8004050:	edd3 7a00 	vldr	s15, [r3]
						float t_start_pris = (i == 0) ? t_global : Prismatic[i - 1].t_start +
 8004054:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004058:	e002      	b.n	8004060 <main+0x898>
 800405a:	4b3a      	ldr	r3, [pc, #232]	@ (8004144 <main+0x97c>)
 800405c:	edd3 7a00 	vldr	s15, [r3]
 8004060:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
						InitTrajectorySegment(&Prismatic[i], start_pris, end_pris, v_max_pris, a_max_pris, t_start_pris);
 8004064:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004066:	4613      	mov	r3, r2
 8004068:	00db      	lsls	r3, r3, #3
 800406a:	4413      	add	r3, r2
 800406c:	009b      	lsls	r3, r3, #2
 800406e:	4a33      	ldr	r2, [pc, #204]	@ (800413c <main+0x974>)
 8004070:	4413      	add	r3, r2
 8004072:	ed97 2a0f 	vldr	s4, [r7, #60]	@ 0x3c
 8004076:	eddf 1a34 	vldr	s3, [pc, #208]	@ 8004148 <main+0x980>
 800407a:	ed9f 1a34 	vldr	s2, [pc, #208]	@ 800414c <main+0x984>
 800407e:	edd7 0a12 	vldr	s1, [r7, #72]	@ 0x48
 8004082:	ed97 0a13 	vldr	s0, [r7, #76]	@ 0x4c
 8004086:	4618      	mov	r0, r3
 8004088:	f7fe ff3a 	bl	8002f00 <InitTrajectorySegment>
						delay_pris[i] = 5.5f - Prismatic[i].t_total;
 800408c:	492b      	ldr	r1, [pc, #172]	@ (800413c <main+0x974>)
 800408e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004090:	4613      	mov	r3, r2
 8004092:	00db      	lsls	r3, r3, #3
 8004094:	4413      	add	r3, r2
 8004096:	009b      	lsls	r3, r3, #2
 8004098:	440b      	add	r3, r1
 800409a:	331c      	adds	r3, #28
 800409c:	edd3 7a00 	vldr	s15, [r3]
 80040a0:	eeb1 7a06 	vmov.f32	s14, #22	@ 0x40b00000  5.5
 80040a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80040a8:	4a25      	ldr	r2, [pc, #148]	@ (8004140 <main+0x978>)
 80040aa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80040ac:	009b      	lsls	r3, r3, #2
 80040ae:	4413      	add	r3, r2
 80040b0:	edc3 7a00 	vstr	s15, [r3]
						float t_start_rev = (i == 0) ? t_global : Revolute[i - 1].t_start +
 80040b4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d04e      	beq.n	8004158 <main+0x990>
 80040ba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80040bc:	1e5a      	subs	r2, r3, #1
 80040be:	4924      	ldr	r1, [pc, #144]	@ (8004150 <main+0x988>)
 80040c0:	4613      	mov	r3, r2
 80040c2:	00db      	lsls	r3, r3, #3
 80040c4:	4413      	add	r3, r2
 80040c6:	009b      	lsls	r3, r3, #2
 80040c8:	440b      	add	r3, r1
 80040ca:	3320      	adds	r3, #32
 80040cc:	ed93 7a00 	vldr	s14, [r3]
								Revolute[i - 1].t_total + delay_rev[i - 1];
 80040d0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80040d2:	1e5a      	subs	r2, r3, #1
 80040d4:	491e      	ldr	r1, [pc, #120]	@ (8004150 <main+0x988>)
 80040d6:	4613      	mov	r3, r2
 80040d8:	00db      	lsls	r3, r3, #3
 80040da:	4413      	add	r3, r2
 80040dc:	009b      	lsls	r3, r3, #2
 80040de:	440b      	add	r3, r1
 80040e0:	331c      	adds	r3, #28
 80040e2:	edd3 7a00 	vldr	s15, [r3]
						float t_start_rev = (i == 0) ? t_global : Revolute[i - 1].t_start +
 80040e6:	ee37 7a27 	vadd.f32	s14, s14, s15
								Revolute[i - 1].t_total + delay_rev[i - 1];
 80040ea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80040ec:	3b01      	subs	r3, #1
 80040ee:	4a19      	ldr	r2, [pc, #100]	@ (8004154 <main+0x98c>)
 80040f0:	009b      	lsls	r3, r3, #2
 80040f2:	4413      	add	r3, r2
 80040f4:	edd3 7a00 	vldr	s15, [r3]
						float t_start_rev = (i == 0) ? t_global : Revolute[i - 1].t_start +
 80040f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80040fc:	e02f      	b.n	800415e <main+0x996>
 80040fe:	bf00      	nop
 8004100:	20000da4 	.word	0x20000da4
 8004104:	2000073c 	.word	0x2000073c
 8004108:	200015b4 	.word	0x200015b4
 800410c:	200015b8 	.word	0x200015b8
 8004110:	200015bc 	.word	0x200015bc
 8004114:	200015c0 	.word	0x200015c0
 8004118:	200015c4 	.word	0x200015c4
 800411c:	200015c8 	.word	0x200015c8
 8004120:	200015cc 	.word	0x200015cc
 8004124:	200015d0 	.word	0x200015d0
 8004128:	200015d4 	.word	0x200015d4
 800412c:	2000167c 	.word	0x2000167c
 8004130:	20000260 	.word	0x20000260
 8004134:	20000208 	.word	0x20000208
 8004138:	20000234 	.word	0x20000234
 800413c:	20000448 	.word	0x20000448
 8004140:	200015d8 	.word	0x200015d8
 8004144:	20000718 	.word	0x20000718
 8004148:	437a0000 	.word	0x437a0000
 800414c:	43fa0000 	.word	0x43fa0000
 8004150:	200005b0 	.word	0x200005b0
 8004154:	20001600 	.word	0x20001600
 8004158:	4ba7      	ldr	r3, [pc, #668]	@ (80043f8 <main+0xc30>)
 800415a:	edd3 7a00 	vldr	s15, [r3]
 800415e:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
						InitTrajectorySegment(&Revolute[i], start_rev, end_rev, v_max_rev, a_max_rev, t_start_rev);
 8004162:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004164:	4613      	mov	r3, r2
 8004166:	00db      	lsls	r3, r3, #3
 8004168:	4413      	add	r3, r2
 800416a:	009b      	lsls	r3, r3, #2
 800416c:	4aa3      	ldr	r2, [pc, #652]	@ (80043fc <main+0xc34>)
 800416e:	4413      	add	r3, r2
 8004170:	ed97 2a0e 	vldr	s4, [r7, #56]	@ 0x38
 8004174:	eddf 1aa2 	vldr	s3, [pc, #648]	@ 8004400 <main+0xc38>
 8004178:	eeb7 1a00 	vmov.f32	s2, #112	@ 0x3f800000  1.0
 800417c:	edd7 0a10 	vldr	s1, [r7, #64]	@ 0x40
 8004180:	ed97 0a11 	vldr	s0, [r7, #68]	@ 0x44
 8004184:	4618      	mov	r0, r3
 8004186:	f7fe febb 	bl	8002f00 <InitTrajectorySegment>
						delay_rev[i] = 5.5f - Revolute[i].t_total;
 800418a:	499c      	ldr	r1, [pc, #624]	@ (80043fc <main+0xc34>)
 800418c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800418e:	4613      	mov	r3, r2
 8004190:	00db      	lsls	r3, r3, #3
 8004192:	4413      	add	r3, r2
 8004194:	009b      	lsls	r3, r3, #2
 8004196:	440b      	add	r3, r1
 8004198:	331c      	adds	r3, #28
 800419a:	edd3 7a00 	vldr	s15, [r3]
 800419e:	eeb1 7a06 	vmov.f32	s14, #22	@ 0x40b00000  5.5
 80041a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80041a6:	4a97      	ldr	r2, [pc, #604]	@ (8004404 <main+0xc3c>)
 80041a8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80041aa:	009b      	lsls	r3, r3, #2
 80041ac:	4413      	add	r3, r2
 80041ae:	edc3 7a00 	vstr	s15, [r3]
						// ป้องกันกรณีเคลื่อนที่ช้ามากจน delay < 0
						if (delay_pris[i] < 0.0f) {
 80041b2:	4a95      	ldr	r2, [pc, #596]	@ (8004408 <main+0xc40>)
 80041b4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80041b6:	009b      	lsls	r3, r3, #2
 80041b8:	4413      	add	r3, r2
 80041ba:	edd3 7a00 	vldr	s15, [r3]
 80041be:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80041c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041c6:	d506      	bpl.n	80041d6 <main+0xa0e>
							delay_pris[i] = 0.0f;
 80041c8:	4a8f      	ldr	r2, [pc, #572]	@ (8004408 <main+0xc40>)
 80041ca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80041cc:	009b      	lsls	r3, r3, #2
 80041ce:	4413      	add	r3, r2
 80041d0:	f04f 0200 	mov.w	r2, #0
 80041d4:	601a      	str	r2, [r3, #0]
						}
						if (delay_rev[i] < 0.0f) {
 80041d6:	4a8b      	ldr	r2, [pc, #556]	@ (8004404 <main+0xc3c>)
 80041d8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80041da:	009b      	lsls	r3, r3, #2
 80041dc:	4413      	add	r3, r2
 80041de:	edd3 7a00 	vldr	s15, [r3]
 80041e2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80041e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041ea:	d506      	bpl.n	80041fa <main+0xa32>
							delay_rev[i] = 0.0f;
 80041ec:	4a85      	ldr	r2, [pc, #532]	@ (8004404 <main+0xc3c>)
 80041ee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80041f0:	009b      	lsls	r3, r3, #2
 80041f2:	4413      	add	r3, r2
 80041f4:	f04f 0200 	mov.w	r2, #0
 80041f8:	601a      	str	r2, [r3, #0]
					for (int i = 0; i < 10; i++) {
 80041fa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80041fc:	3301      	adds	r3, #1
 80041fe:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004200:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004202:	2b09      	cmp	r3, #9
 8004204:	f77f aeea 	ble.w	8003fdc <main+0x814>
						}
					}
					current_segment = 0;
 8004208:	4b80      	ldr	r3, [pc, #512]	@ (800440c <main+0xc44>)
 800420a:	2200      	movs	r2, #0
 800420c:	601a      	str	r2, [r3, #0]
				}

				if (current_segment < 10) {
 800420e:	4b7f      	ldr	r3, [pc, #508]	@ (800440c <main+0xc44>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	2b09      	cmp	r3, #9
 8004214:	dc54      	bgt.n	80042c0 <main+0xaf8>
					pos_pris = GetTrajectoryPosition(&Prismatic[current_segment], t_global);
 8004216:	4b7d      	ldr	r3, [pc, #500]	@ (800440c <main+0xc44>)
 8004218:	681a      	ldr	r2, [r3, #0]
 800421a:	4613      	mov	r3, r2
 800421c:	00db      	lsls	r3, r3, #3
 800421e:	4413      	add	r3, r2
 8004220:	009b      	lsls	r3, r3, #2
 8004222:	4a7b      	ldr	r2, [pc, #492]	@ (8004410 <main+0xc48>)
 8004224:	4413      	add	r3, r2
 8004226:	4a74      	ldr	r2, [pc, #464]	@ (80043f8 <main+0xc30>)
 8004228:	edd2 7a00 	vldr	s15, [r2]
 800422c:	eeb0 0a67 	vmov.f32	s0, s15
 8004230:	4618      	mov	r0, r3
 8004232:	f7fe ff1b 	bl	800306c <GetTrajectoryPosition>
 8004236:	eef0 7a40 	vmov.f32	s15, s0
 800423a:	4b76      	ldr	r3, [pc, #472]	@ (8004414 <main+0xc4c>)
 800423c:	edc3 7a00 	vstr	s15, [r3]
					vel_pris = GetTrajectoryVelocity(&Prismatic[current_segment], t_global);
 8004240:	4b72      	ldr	r3, [pc, #456]	@ (800440c <main+0xc44>)
 8004242:	681a      	ldr	r2, [r3, #0]
 8004244:	4613      	mov	r3, r2
 8004246:	00db      	lsls	r3, r3, #3
 8004248:	4413      	add	r3, r2
 800424a:	009b      	lsls	r3, r3, #2
 800424c:	4a70      	ldr	r2, [pc, #448]	@ (8004410 <main+0xc48>)
 800424e:	4413      	add	r3, r2
 8004250:	4a69      	ldr	r2, [pc, #420]	@ (80043f8 <main+0xc30>)
 8004252:	edd2 7a00 	vldr	s15, [r2]
 8004256:	eeb0 0a67 	vmov.f32	s0, s15
 800425a:	4618      	mov	r0, r3
 800425c:	f7fe ffdc 	bl	8003218 <GetTrajectoryVelocity>
 8004260:	eef0 7a40 	vmov.f32	s15, s0
 8004264:	4b6c      	ldr	r3, [pc, #432]	@ (8004418 <main+0xc50>)
 8004266:	edc3 7a00 	vstr	s15, [r3]
					pos_rev = GetTrajectoryPosition(&Revolute[current_segment], t_global);
 800426a:	4b68      	ldr	r3, [pc, #416]	@ (800440c <main+0xc44>)
 800426c:	681a      	ldr	r2, [r3, #0]
 800426e:	4613      	mov	r3, r2
 8004270:	00db      	lsls	r3, r3, #3
 8004272:	4413      	add	r3, r2
 8004274:	009b      	lsls	r3, r3, #2
 8004276:	4a61      	ldr	r2, [pc, #388]	@ (80043fc <main+0xc34>)
 8004278:	4413      	add	r3, r2
 800427a:	4a5f      	ldr	r2, [pc, #380]	@ (80043f8 <main+0xc30>)
 800427c:	edd2 7a00 	vldr	s15, [r2]
 8004280:	eeb0 0a67 	vmov.f32	s0, s15
 8004284:	4618      	mov	r0, r3
 8004286:	f7fe fef1 	bl	800306c <GetTrajectoryPosition>
 800428a:	eef0 7a40 	vmov.f32	s15, s0
 800428e:	4b63      	ldr	r3, [pc, #396]	@ (800441c <main+0xc54>)
 8004290:	edc3 7a00 	vstr	s15, [r3]
					vel_rev = GetTrajectoryVelocity(&Revolute[current_segment], t_global);
 8004294:	4b5d      	ldr	r3, [pc, #372]	@ (800440c <main+0xc44>)
 8004296:	681a      	ldr	r2, [r3, #0]
 8004298:	4613      	mov	r3, r2
 800429a:	00db      	lsls	r3, r3, #3
 800429c:	4413      	add	r3, r2
 800429e:	009b      	lsls	r3, r3, #2
 80042a0:	4a56      	ldr	r2, [pc, #344]	@ (80043fc <main+0xc34>)
 80042a2:	4413      	add	r3, r2
 80042a4:	4a54      	ldr	r2, [pc, #336]	@ (80043f8 <main+0xc30>)
 80042a6:	edd2 7a00 	vldr	s15, [r2]
 80042aa:	eeb0 0a67 	vmov.f32	s0, s15
 80042ae:	4618      	mov	r0, r3
 80042b0:	f7fe ffb2 	bl	8003218 <GetTrajectoryVelocity>
 80042b4:	eef0 7a40 	vmov.f32	s15, s0
 80042b8:	4b59      	ldr	r3, [pc, #356]	@ (8004420 <main+0xc58>)
 80042ba:	edc3 7a00 	vstr	s15, [r3]
 80042be:	e011      	b.n	80042e4 <main+0xb1c>
				} else {
					pos_pris = Prismatic[9].end_pos;
 80042c0:	4b53      	ldr	r3, [pc, #332]	@ (8004410 <main+0xc48>)
 80042c2:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80042c6:	4a53      	ldr	r2, [pc, #332]	@ (8004414 <main+0xc4c>)
 80042c8:	6013      	str	r3, [r2, #0]
					vel_pris = 0.0f;
 80042ca:	4b53      	ldr	r3, [pc, #332]	@ (8004418 <main+0xc50>)
 80042cc:	f04f 0200 	mov.w	r2, #0
 80042d0:	601a      	str	r2, [r3, #0]
					pos_rev = Revolute[9].end_pos;
 80042d2:	4b4a      	ldr	r3, [pc, #296]	@ (80043fc <main+0xc34>)
 80042d4:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80042d8:	4a50      	ldr	r2, [pc, #320]	@ (800441c <main+0xc54>)
 80042da:	6013      	str	r3, [r2, #0]
					vel_rev = 0.0f;
 80042dc:	4b50      	ldr	r3, [pc, #320]	@ (8004420 <main+0xc58>)
 80042de:	f04f 0200 	mov.w	r2, #0
 80042e2:	601a      	str	r2, [r3, #0]
				}

				if (t_global > Prismatic[current_segment].t_start + Prismatic[current_segment].t_total) {
 80042e4:	4b49      	ldr	r3, [pc, #292]	@ (800440c <main+0xc44>)
 80042e6:	681a      	ldr	r2, [r3, #0]
 80042e8:	4949      	ldr	r1, [pc, #292]	@ (8004410 <main+0xc48>)
 80042ea:	4613      	mov	r3, r2
 80042ec:	00db      	lsls	r3, r3, #3
 80042ee:	4413      	add	r3, r2
 80042f0:	009b      	lsls	r3, r3, #2
 80042f2:	440b      	add	r3, r1
 80042f4:	3320      	adds	r3, #32
 80042f6:	ed93 7a00 	vldr	s14, [r3]
 80042fa:	4b44      	ldr	r3, [pc, #272]	@ (800440c <main+0xc44>)
 80042fc:	681a      	ldr	r2, [r3, #0]
 80042fe:	4944      	ldr	r1, [pc, #272]	@ (8004410 <main+0xc48>)
 8004300:	4613      	mov	r3, r2
 8004302:	00db      	lsls	r3, r3, #3
 8004304:	4413      	add	r3, r2
 8004306:	009b      	lsls	r3, r3, #2
 8004308:	440b      	add	r3, r1
 800430a:	331c      	adds	r3, #28
 800430c:	edd3 7a00 	vldr	s15, [r3]
 8004310:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004314:	4b38      	ldr	r3, [pc, #224]	@ (80043f8 <main+0xc30>)
 8004316:	edd3 7a00 	vldr	s15, [r3]
 800431a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800431e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004322:	d508      	bpl.n	8004336 <main+0xb6e>
					if (current_segment < 9) {
 8004324:	4b39      	ldr	r3, [pc, #228]	@ (800440c <main+0xc44>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	2b08      	cmp	r3, #8
 800432a:	dc04      	bgt.n	8004336 <main+0xb6e>
						current_segment++;
 800432c:	4b37      	ldr	r3, [pc, #220]	@ (800440c <main+0xc44>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	3301      	adds	r3, #1
 8004332:	4a36      	ldr	r2, [pc, #216]	@ (800440c <main+0xc44>)
 8004334:	6013      	str	r3, [r2, #0]
//				{
//					__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4, 0);
//					modbus_servo_Status(&hmodbus, Limit_Down);
//				}

				if (count == 10) {  /// Set_Target 10 points
 8004336:	4b3b      	ldr	r3, [pc, #236]	@ (8004424 <main+0xc5c>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	2b0a      	cmp	r3, #10
 800433c:	f040 80f3 	bne.w	8004526 <main+0xd5e>
					Coordinate_Robot_to_Base(&Goal_point[Num_point], PrismaticTenPoints[Num_point + 1],
 8004340:	4b39      	ldr	r3, [pc, #228]	@ (8004428 <main+0xc60>)
 8004342:	781b      	ldrb	r3, [r3, #0]
 8004344:	00db      	lsls	r3, r3, #3
 8004346:	4a39      	ldr	r2, [pc, #228]	@ (800442c <main+0xc64>)
 8004348:	441a      	add	r2, r3
 800434a:	4b37      	ldr	r3, [pc, #220]	@ (8004428 <main+0xc60>)
 800434c:	781b      	ldrb	r3, [r3, #0]
 800434e:	3301      	adds	r3, #1
 8004350:	4937      	ldr	r1, [pc, #220]	@ (8004430 <main+0xc68>)
 8004352:	009b      	lsls	r3, r3, #2
 8004354:	440b      	add	r3, r1
 8004356:	edd3 7a00 	vldr	s15, [r3]
							RevoluteTenPoints[Num_point + 1]);
 800435a:	4b33      	ldr	r3, [pc, #204]	@ (8004428 <main+0xc60>)
 800435c:	781b      	ldrb	r3, [r3, #0]
 800435e:	3301      	adds	r3, #1
					Coordinate_Robot_to_Base(&Goal_point[Num_point], PrismaticTenPoints[Num_point + 1],
 8004360:	4934      	ldr	r1, [pc, #208]	@ (8004434 <main+0xc6c>)
 8004362:	009b      	lsls	r3, r3, #2
 8004364:	440b      	add	r3, r1
 8004366:	ed93 7a00 	vldr	s14, [r3]
 800436a:	eef0 0a47 	vmov.f32	s1, s14
 800436e:	eeb0 0a67 	vmov.f32	s0, s15
 8004372:	4610      	mov	r0, r2
 8004374:	f7fd fb24 	bl	80019c0 <Coordinate_Robot_to_Base>
					set_Target_Position_ten_points(&hmodbus, Goal_point[Num_point].r_goal_position,
 8004378:	4b2b      	ldr	r3, [pc, #172]	@ (8004428 <main+0xc60>)
 800437a:	781b      	ldrb	r3, [r3, #0]
 800437c:	4a2b      	ldr	r2, [pc, #172]	@ (800442c <main+0xc64>)
 800437e:	00db      	lsls	r3, r3, #3
 8004380:	4413      	add	r3, r2
 8004382:	edd3 7a00 	vldr	s15, [r3]
 8004386:	4b28      	ldr	r3, [pc, #160]	@ (8004428 <main+0xc60>)
 8004388:	781b      	ldrb	r3, [r3, #0]
 800438a:	4a28      	ldr	r2, [pc, #160]	@ (800442c <main+0xc64>)
 800438c:	00db      	lsls	r3, r3, #3
 800438e:	4413      	add	r3, r2
 8004390:	3304      	adds	r3, #4
 8004392:	ed93 7a00 	vldr	s14, [r3]
 8004396:	4b24      	ldr	r3, [pc, #144]	@ (8004428 <main+0xc60>)
 8004398:	781b      	ldrb	r3, [r3, #0]
 800439a:	4619      	mov	r1, r3
 800439c:	eef0 0a47 	vmov.f32	s1, s14
 80043a0:	eeb0 0a67 	vmov.f32	s0, s15
 80043a4:	4824      	ldr	r0, [pc, #144]	@ (8004438 <main+0xc70>)
 80043a6:	f7fc fff5 	bl	8001394 <set_Target_Position_ten_points>
							Goal_point[Num_point].theta_goal_position, Num_point);
					Num_point += 1;
 80043aa:	4b1f      	ldr	r3, [pc, #124]	@ (8004428 <main+0xc60>)
 80043ac:	781b      	ldrb	r3, [r3, #0]
 80043ae:	3301      	adds	r3, #1
 80043b0:	b2da      	uxtb	r2, r3
 80043b2:	4b1d      	ldr	r3, [pc, #116]	@ (8004428 <main+0xc60>)
 80043b4:	701a      	strb	r2, [r3, #0]
 80043b6:	e0b6      	b.n	8004526 <main+0xd5e>
//				} else {
//					__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4, 2000);
//					modbus_servo_Status(&hmodbus, Limit_Up);
//				}

			} else if (Base_Sysytem_status == Base_Run_Point_mode) {
 80043b8:	4b20      	ldr	r3, [pc, #128]	@ (800443c <main+0xc74>)
 80043ba:	781b      	ldrb	r3, [r3, #0]
 80043bc:	2b04      	cmp	r3, #4
 80043be:	d143      	bne.n	8004448 <main+0xc80>

				Goal_r_position = modbus_set_goal_r_position(&hmodbus);
 80043c0:	481d      	ldr	r0, [pc, #116]	@ (8004438 <main+0xc70>)
 80043c2:	f7fd f817 	bl	80013f4 <modbus_set_goal_r_position>
 80043c6:	4603      	mov	r3, r0
 80043c8:	ee07 3a90 	vmov	s15, r3
 80043cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043d0:	4b1b      	ldr	r3, [pc, #108]	@ (8004440 <main+0xc78>)
 80043d2:	edc3 7a00 	vstr	s15, [r3]
				Goal_theta_position = modbus_set_goal_theta_position(&hmodbus);
 80043d6:	4818      	ldr	r0, [pc, #96]	@ (8004438 <main+0xc70>)
 80043d8:	f7fd f82c 	bl	8001434 <modbus_set_goal_theta_position>
 80043dc:	4603      	mov	r3, r0
 80043de:	ee07 3a90 	vmov	s15, r3
 80043e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043e6:	4b17      	ldr	r3, [pc, #92]	@ (8004444 <main+0xc7c>)
 80043e8:	edc3 7a00 	vstr	s15, [r3]
				R_Theta_moving_Status(&hmodbus, Run_Point_mode);
 80043ec:	2104      	movs	r1, #4
 80043ee:	4812      	ldr	r0, [pc, #72]	@ (8004438 <main+0xc70>)
 80043f0:	f7fc ff66 	bl	80012c0 <R_Theta_moving_Status>
 80043f4:	e097      	b.n	8004526 <main+0xd5e>
 80043f6:	bf00      	nop
 80043f8:	20000718 	.word	0x20000718
 80043fc:	200005b0 	.word	0x200005b0
 8004400:	3ecccccd 	.word	0x3ecccccd
 8004404:	20001600 	.word	0x20001600
 8004408:	200015d8 	.word	0x200015d8
 800440c:	20000444 	.word	0x20000444
 8004410:	20000448 	.word	0x20000448
 8004414:	20000434 	.word	0x20000434
 8004418:	20000438 	.word	0x20000438
 800441c:	2000043c 	.word	0x2000043c
 8004420:	20000440 	.word	0x20000440
 8004424:	20000260 	.word	0x20000260
 8004428:	20001628 	.word	0x20001628
 800442c:	2000162c 	.word	0x2000162c
 8004430:	20000208 	.word	0x20000208
 8004434:	20000234 	.word	0x20000234
 8004438:	2000073c 	.word	0x2000073c
 800443c:	20000da4 	.word	0x20000da4
 8004440:	20000da8 	.word	0x20000da8
 8004444:	20000dac 	.word	0x20000dac

			}

			else if (Base_Sysytem_status == Base_Go_to_Target) {
 8004448:	4bcb      	ldr	r3, [pc, #812]	@ (8004778 <main+0xfb0>)
 800444a:	781b      	ldrb	r3, [r3, #0]
 800444c:	2b08      	cmp	r3, #8
 800444e:	d16a      	bne.n	8004526 <main+0xd5e>

				R_Theta_moving_Status(&hmodbus, Go_to_Target);
 8004450:	2108      	movs	r1, #8
 8004452:	48ca      	ldr	r0, [pc, #808]	@ (800477c <main+0xfb4>)
 8004454:	f7fc ff34 	bl	80012c0 <R_Theta_moving_Status>

				Coordinate_Base_to_Robot(&Goal_point[0], Goal_r_position, Goal_theta_position);
 8004458:	4bc9      	ldr	r3, [pc, #804]	@ (8004780 <main+0xfb8>)
 800445a:	edd3 7a00 	vldr	s15, [r3]
 800445e:	4bc9      	ldr	r3, [pc, #804]	@ (8004784 <main+0xfbc>)
 8004460:	ed93 7a00 	vldr	s14, [r3]
 8004464:	eef0 0a47 	vmov.f32	s1, s14
 8004468:	eeb0 0a67 	vmov.f32	s0, s15
 800446c:	48c6      	ldr	r0, [pc, #792]	@ (8004788 <main+0xfc0>)
 800446e:	f7fd f803 	bl	8001478 <Coordinate_Base_to_Robot>

				// Trajectory Target
				InitTrajectorySegment(&Prismatic[0], 0.0f, Goal_point[0].r_goal_position, v_max_pris, a_max_pris, t_global);
 8004472:	4bc5      	ldr	r3, [pc, #788]	@ (8004788 <main+0xfc0>)
 8004474:	edd3 7a00 	vldr	s15, [r3]
 8004478:	4bc4      	ldr	r3, [pc, #784]	@ (800478c <main+0xfc4>)
 800447a:	ed93 7a00 	vldr	s14, [r3]
 800447e:	eeb0 2a47 	vmov.f32	s4, s14
 8004482:	eddf 1ac3 	vldr	s3, [pc, #780]	@ 8004790 <main+0xfc8>
 8004486:	ed9f 1ac3 	vldr	s2, [pc, #780]	@ 8004794 <main+0xfcc>
 800448a:	eef0 0a67 	vmov.f32	s1, s15
 800448e:	ed9f 0ac2 	vldr	s0, [pc, #776]	@ 8004798 <main+0xfd0>
 8004492:	48c2      	ldr	r0, [pc, #776]	@ (800479c <main+0xfd4>)
 8004494:	f7fe fd34 	bl	8002f00 <InitTrajectorySegment>
				InitTrajectorySegment(&Revolute[0], 0.0f, Goal_point[0].theta_goal_position, v_max_rev, a_max_rev, t_global);
 8004498:	4bbb      	ldr	r3, [pc, #748]	@ (8004788 <main+0xfc0>)
 800449a:	edd3 7a01 	vldr	s15, [r3, #4]
 800449e:	4bbb      	ldr	r3, [pc, #748]	@ (800478c <main+0xfc4>)
 80044a0:	ed93 7a00 	vldr	s14, [r3]
 80044a4:	eeb0 2a47 	vmov.f32	s4, s14
 80044a8:	eddf 1abd 	vldr	s3, [pc, #756]	@ 80047a0 <main+0xfd8>
 80044ac:	eeb7 1a00 	vmov.f32	s2, #112	@ 0x3f800000  1.0
 80044b0:	eef0 0a67 	vmov.f32	s1, s15
 80044b4:	ed9f 0ab8 	vldr	s0, [pc, #736]	@ 8004798 <main+0xfd0>
 80044b8:	48ba      	ldr	r0, [pc, #744]	@ (80047a4 <main+0xfdc>)
 80044ba:	f7fe fd21 	bl	8002f00 <InitTrajectorySegment>

				pos_pris = GetTrajectoryPosition(&Prismatic[0], t_global);
 80044be:	4bb3      	ldr	r3, [pc, #716]	@ (800478c <main+0xfc4>)
 80044c0:	edd3 7a00 	vldr	s15, [r3]
 80044c4:	eeb0 0a67 	vmov.f32	s0, s15
 80044c8:	48b4      	ldr	r0, [pc, #720]	@ (800479c <main+0xfd4>)
 80044ca:	f7fe fdcf 	bl	800306c <GetTrajectoryPosition>
 80044ce:	eef0 7a40 	vmov.f32	s15, s0
 80044d2:	4bb5      	ldr	r3, [pc, #724]	@ (80047a8 <main+0xfe0>)
 80044d4:	edc3 7a00 	vstr	s15, [r3]
				vel_pris = GetTrajectoryVelocity(&Prismatic[0], t_global);
 80044d8:	4bac      	ldr	r3, [pc, #688]	@ (800478c <main+0xfc4>)
 80044da:	edd3 7a00 	vldr	s15, [r3]
 80044de:	eeb0 0a67 	vmov.f32	s0, s15
 80044e2:	48ae      	ldr	r0, [pc, #696]	@ (800479c <main+0xfd4>)
 80044e4:	f7fe fe98 	bl	8003218 <GetTrajectoryVelocity>
 80044e8:	eef0 7a40 	vmov.f32	s15, s0
 80044ec:	4baf      	ldr	r3, [pc, #700]	@ (80047ac <main+0xfe4>)
 80044ee:	edc3 7a00 	vstr	s15, [r3]
				pos_rev = GetTrajectoryPosition(&Revolute[0], t_global);
 80044f2:	4ba6      	ldr	r3, [pc, #664]	@ (800478c <main+0xfc4>)
 80044f4:	edd3 7a00 	vldr	s15, [r3]
 80044f8:	eeb0 0a67 	vmov.f32	s0, s15
 80044fc:	48a9      	ldr	r0, [pc, #676]	@ (80047a4 <main+0xfdc>)
 80044fe:	f7fe fdb5 	bl	800306c <GetTrajectoryPosition>
 8004502:	eef0 7a40 	vmov.f32	s15, s0
 8004506:	4baa      	ldr	r3, [pc, #680]	@ (80047b0 <main+0xfe8>)
 8004508:	edc3 7a00 	vstr	s15, [r3]
				vel_rev = GetTrajectoryVelocity(&Revolute[0], t_global);
 800450c:	4b9f      	ldr	r3, [pc, #636]	@ (800478c <main+0xfc4>)
 800450e:	edd3 7a00 	vldr	s15, [r3]
 8004512:	eeb0 0a67 	vmov.f32	s0, s15
 8004516:	48a3      	ldr	r0, [pc, #652]	@ (80047a4 <main+0xfdc>)
 8004518:	f7fe fe7e 	bl	8003218 <GetTrajectoryVelocity>
 800451c:	eef0 7a40 	vmov.f32	s15, s0
 8004520:	4ba4      	ldr	r3, [pc, #656]	@ (80047b4 <main+0xfec>)
 8004522:	edc3 7a00 	vstr	s15, [r3]
//					__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4, 0);
//					modbus_servo_Status(&hmodbus, Limit_Down);
//				}
			}

			Measurement_Pris[0] = Encoder_GetPosition_mm(&encoder1);
 8004526:	48a4      	ldr	r0, [pc, #656]	@ (80047b8 <main+0xff0>)
 8004528:	f7fd fdb4 	bl	8002094 <Encoder_GetPosition_mm>
 800452c:	eef0 7a40 	vmov.f32	s15, s0
 8004530:	4ba2      	ldr	r3, [pc, #648]	@ (80047bc <main+0xff4>)
 8004532:	edc3 7a00 	vstr	s15, [r3]
			Measurement_Pris[1] = Encoder_GetVelocity_mm(&encoder1);
 8004536:	48a0      	ldr	r0, [pc, #640]	@ (80047b8 <main+0xff0>)
 8004538:	f7fd fdbb 	bl	80020b2 <Encoder_GetVelocity_mm>
 800453c:	eef0 7a40 	vmov.f32	s15, s0
 8004540:	4b9e      	ldr	r3, [pc, #632]	@ (80047bc <main+0xff4>)
 8004542:	edc3 7a01 	vstr	s15, [r3, #4]
			Measurement_Pris[2] = 0;
 8004546:	4b9d      	ldr	r3, [pc, #628]	@ (80047bc <main+0xff4>)
 8004548:	f04f 0200 	mov.w	r2, #0
 800454c:	609a      	str	r2, [r3, #8]
			Measurement_Pris[3] = 0;
 800454e:	4b9b      	ldr	r3, [pc, #620]	@ (80047bc <main+0xff4>)
 8004550:	f04f 0200 	mov.w	r2, #0
 8004554:	60da      	str	r2, [r3, #12]

			Kalman_SetInput(&kf_pris, V_pris_velo_PID);
 8004556:	4b9a      	ldr	r3, [pc, #616]	@ (80047c0 <main+0xff8>)
 8004558:	edd3 7a00 	vldr	s15, [r3]
 800455c:	eeb0 0a67 	vmov.f32	s0, s15
 8004560:	4898      	ldr	r0, [pc, #608]	@ (80047c4 <main+0xffc>)
 8004562:	f7fd ff99 	bl	8002498 <Kalman_SetInput>
			Kalman_Predict(&kf_pris);
 8004566:	4897      	ldr	r0, [pc, #604]	@ (80047c4 <main+0xffc>)
 8004568:	f7fd ffa6 	bl	80024b8 <Kalman_Predict>
			Kalman_Update(&kf_pris, Measurement_Pris);
 800456c:	4993      	ldr	r1, [pc, #588]	@ (80047bc <main+0xff4>)
 800456e:	4895      	ldr	r0, [pc, #596]	@ (80047c4 <main+0xffc>)
 8004570:	f7fd ffef 	bl	8002552 <Kalman_Update>

			Measurement_Rev[0] = Encoder_GetPosition(&encoder2) / (100.0 / 30.0);
 8004574:	4894      	ldr	r0, [pc, #592]	@ (80047c8 <main+0x1000>)
 8004576:	f7fd fd51 	bl	800201c <Encoder_GetPosition>
 800457a:	ee10 3a10 	vmov	r3, s0
 800457e:	4618      	mov	r0, r3
 8004580:	f7fb ffae 	bl	80004e0 <__aeabi_f2d>
 8004584:	a378      	add	r3, pc, #480	@ (adr r3, 8004768 <main+0xfa0>)
 8004586:	e9d3 2300 	ldrd	r2, r3, [r3]
 800458a:	f7fc f92b 	bl	80007e4 <__aeabi_ddiv>
 800458e:	4602      	mov	r2, r0
 8004590:	460b      	mov	r3, r1
 8004592:	4610      	mov	r0, r2
 8004594:	4619      	mov	r1, r3
 8004596:	f7fc facb 	bl	8000b30 <__aeabi_d2f>
 800459a:	4603      	mov	r3, r0
 800459c:	4a8b      	ldr	r2, [pc, #556]	@ (80047cc <main+0x1004>)
 800459e:	6013      	str	r3, [r2, #0]
			Measurement_Rev[1] = Encoder_GetVelocity(&encoder2) / (100.0 / 30.0);
 80045a0:	4889      	ldr	r0, [pc, #548]	@ (80047c8 <main+0x1000>)
 80045a2:	f7fd fd4a 	bl	800203a <Encoder_GetVelocity>
 80045a6:	ee10 3a10 	vmov	r3, s0
 80045aa:	4618      	mov	r0, r3
 80045ac:	f7fb ff98 	bl	80004e0 <__aeabi_f2d>
 80045b0:	a36d      	add	r3, pc, #436	@ (adr r3, 8004768 <main+0xfa0>)
 80045b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045b6:	f7fc f915 	bl	80007e4 <__aeabi_ddiv>
 80045ba:	4602      	mov	r2, r0
 80045bc:	460b      	mov	r3, r1
 80045be:	4610      	mov	r0, r2
 80045c0:	4619      	mov	r1, r3
 80045c2:	f7fc fab5 	bl	8000b30 <__aeabi_d2f>
 80045c6:	4603      	mov	r3, r0
 80045c8:	4a80      	ldr	r2, [pc, #512]	@ (80047cc <main+0x1004>)
 80045ca:	6053      	str	r3, [r2, #4]
			Measurement_Rev[2] = 0;
 80045cc:	4b7f      	ldr	r3, [pc, #508]	@ (80047cc <main+0x1004>)
 80045ce:	f04f 0200 	mov.w	r2, #0
 80045d2:	609a      	str	r2, [r3, #8]
			Measurement_Rev[3] = 0;
 80045d4:	4b7d      	ldr	r3, [pc, #500]	@ (80047cc <main+0x1004>)
 80045d6:	f04f 0200 	mov.w	r2, #0
 80045da:	60da      	str	r2, [r3, #12]

			Kalman_SetInput(&kf_rev, V_rev_velo_PID);
 80045dc:	4b7c      	ldr	r3, [pc, #496]	@ (80047d0 <main+0x1008>)
 80045de:	edd3 7a00 	vldr	s15, [r3]
 80045e2:	eeb0 0a67 	vmov.f32	s0, s15
 80045e6:	487b      	ldr	r0, [pc, #492]	@ (80047d4 <main+0x100c>)
 80045e8:	f7fd ff56 	bl	8002498 <Kalman_SetInput>
			Kalman_Predict(&kf_rev);
 80045ec:	4879      	ldr	r0, [pc, #484]	@ (80047d4 <main+0x100c>)
 80045ee:	f7fd ff63 	bl	80024b8 <Kalman_Predict>
			Kalman_Update(&kf_rev, Measurement_Rev);
 80045f2:	4976      	ldr	r1, [pc, #472]	@ (80047cc <main+0x1004>)
 80045f4:	4877      	ldr	r0, [pc, #476]	@ (80047d4 <main+0x100c>)
 80045f6:	f7fd ffac 	bl	8002552 <Kalman_Update>

			modbus_Update_All(&hmodbus, Encoder_GetPosition_mm(&encoder1), // r_pos
 80045fa:	486f      	ldr	r0, [pc, #444]	@ (80047b8 <main+0xff0>)
 80045fc:	f7fd fd4a 	bl	8002094 <Encoder_GetPosition_mm>
 8004600:	eeb0 8a40 	vmov.f32	s16, s0
 8004604:	4870      	ldr	r0, [pc, #448]	@ (80047c8 <main+0x1000>)
 8004606:	f7fd fd36 	bl	8002076 <Encoder_GetDegree>
 800460a:	eef0 8a40 	vmov.f32	s17, s0
 800460e:	486a      	ldr	r0, [pc, #424]	@ (80047b8 <main+0xff0>)
 8004610:	f7fd fd4f 	bl	80020b2 <Encoder_GetVelocity_mm>
 8004614:	eeb0 9a40 	vmov.f32	s18, s0
			Encoder_GetDegree(&encoder2), // theta_pos
			Encoder_GetVelocity_mm(&encoder1), // r_velo
			Encoder_GetVelocity(&encoder2) * 180.0 / 3.142, // theta_velo
 8004618:	486b      	ldr	r0, [pc, #428]	@ (80047c8 <main+0x1000>)
 800461a:	f7fd fd0e 	bl	800203a <Encoder_GetVelocity>
 800461e:	ee10 3a10 	vmov	r3, s0
 8004622:	4618      	mov	r0, r3
 8004624:	f7fb ff5c 	bl	80004e0 <__aeabi_f2d>
 8004628:	f04f 0200 	mov.w	r2, #0
 800462c:	4b6a      	ldr	r3, [pc, #424]	@ (80047d8 <main+0x1010>)
 800462e:	f7fb ffaf 	bl	8000590 <__aeabi_dmul>
 8004632:	4602      	mov	r2, r0
 8004634:	460b      	mov	r3, r1
 8004636:	4610      	mov	r0, r2
 8004638:	4619      	mov	r1, r3
 800463a:	a34d      	add	r3, pc, #308	@ (adr r3, 8004770 <main+0xfa8>)
 800463c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004640:	f7fc f8d0 	bl	80007e4 <__aeabi_ddiv>
 8004644:	4602      	mov	r2, r0
 8004646:	460b      	mov	r3, r1
			modbus_Update_All(&hmodbus, Encoder_GetPosition_mm(&encoder1), // r_pos
 8004648:	4610      	mov	r0, r2
 800464a:	4619      	mov	r1, r3
 800464c:	f7fc fa70 	bl	8000b30 <__aeabi_d2f>
 8004650:	4604      	mov	r4, r0
 8004652:	4859      	ldr	r0, [pc, #356]	@ (80047b8 <main+0xff0>)
 8004654:	f7fd fd3c 	bl	80020d0 <Encoder_GetAcceleration_mm>
 8004658:	eef0 9a40 	vmov.f32	s19, s0
			Encoder_GetAcceleration_mm(&encoder1), // r_accel
			Encoder_GetAcceleration(&encoder2) * 180.0 / 3.142); // theta_accel
 800465c:	485a      	ldr	r0, [pc, #360]	@ (80047c8 <main+0x1000>)
 800465e:	f7fd fcfb 	bl	8002058 <Encoder_GetAcceleration>
 8004662:	ee10 3a10 	vmov	r3, s0
 8004666:	4618      	mov	r0, r3
 8004668:	f7fb ff3a 	bl	80004e0 <__aeabi_f2d>
 800466c:	f04f 0200 	mov.w	r2, #0
 8004670:	4b59      	ldr	r3, [pc, #356]	@ (80047d8 <main+0x1010>)
 8004672:	f7fb ff8d 	bl	8000590 <__aeabi_dmul>
 8004676:	4602      	mov	r2, r0
 8004678:	460b      	mov	r3, r1
 800467a:	4610      	mov	r0, r2
 800467c:	4619      	mov	r1, r3
 800467e:	a33c      	add	r3, pc, #240	@ (adr r3, 8004770 <main+0xfa8>)
 8004680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004684:	f7fc f8ae 	bl	80007e4 <__aeabi_ddiv>
 8004688:	4602      	mov	r2, r0
 800468a:	460b      	mov	r3, r1
			modbus_Update_All(&hmodbus, Encoder_GetPosition_mm(&encoder1), // r_pos
 800468c:	4610      	mov	r0, r2
 800468e:	4619      	mov	r1, r3
 8004690:	f7fc fa4e 	bl	8000b30 <__aeabi_d2f>
 8004694:	4603      	mov	r3, r0
 8004696:	ee02 3a90 	vmov	s5, r3
 800469a:	eeb0 2a69 	vmov.f32	s4, s19
 800469e:	ee01 4a90 	vmov	s3, r4
 80046a2:	eeb0 1a49 	vmov.f32	s2, s18
 80046a6:	eef0 0a68 	vmov.f32	s1, s17
 80046aa:	eeb0 0a48 	vmov.f32	s0, s16
 80046ae:	4833      	ldr	r0, [pc, #204]	@ (800477c <main+0xfb4>)
 80046b0:	f7fc fe18 	bl	80012e4 <modbus_Update_All>

			count_Tim2 += 1;
 80046b4:	4b49      	ldr	r3, [pc, #292]	@ (80047dc <main+0x1014>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	3301      	adds	r3, #1
 80046ba:	4a48      	ldr	r2, [pc, #288]	@ (80047dc <main+0x1014>)
 80046bc:	6013      	str	r3, [r2, #0]
			// Velocity Control
			velocity_pris = Encoder_GetVelocity_mm(&encoder1);
 80046be:	483e      	ldr	r0, [pc, #248]	@ (80047b8 <main+0xff0>)
 80046c0:	f7fd fcf7 	bl	80020b2 <Encoder_GetVelocity_mm>
 80046c4:	eef0 7a40 	vmov.f32	s15, s0
 80046c8:	4b45      	ldr	r3, [pc, #276]	@ (80047e0 <main+0x1018>)
 80046ca:	edc3 7a00 	vstr	s15, [r3]
			setvelocity_pris = GetTrajectoryVelocity(&Prismatic[current_segment], t_global) + V_pris_posi_PID;
 80046ce:	4b45      	ldr	r3, [pc, #276]	@ (80047e4 <main+0x101c>)
 80046d0:	681a      	ldr	r2, [r3, #0]
 80046d2:	4613      	mov	r3, r2
 80046d4:	00db      	lsls	r3, r3, #3
 80046d6:	4413      	add	r3, r2
 80046d8:	009b      	lsls	r3, r3, #2
 80046da:	4a30      	ldr	r2, [pc, #192]	@ (800479c <main+0xfd4>)
 80046dc:	4413      	add	r3, r2
 80046de:	4a2b      	ldr	r2, [pc, #172]	@ (800478c <main+0xfc4>)
 80046e0:	edd2 7a00 	vldr	s15, [r2]
 80046e4:	eeb0 0a67 	vmov.f32	s0, s15
 80046e8:	4618      	mov	r0, r3
 80046ea:	f7fe fd95 	bl	8003218 <GetTrajectoryVelocity>
 80046ee:	eeb0 7a40 	vmov.f32	s14, s0
 80046f2:	4b3d      	ldr	r3, [pc, #244]	@ (80047e8 <main+0x1020>)
 80046f4:	edd3 7a00 	vldr	s15, [r3]
 80046f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80046fc:	4b3b      	ldr	r3, [pc, #236]	@ (80047ec <main+0x1024>)
 80046fe:	edc3 7a00 	vstr	s15, [r3]
//			setvelocity_pris = vel_pris + V_pris_posi_PID;
			delta_velo_pris = setvelocity_pris - velocity_pris;
 8004702:	4b3a      	ldr	r3, [pc, #232]	@ (80047ec <main+0x1024>)
 8004704:	ed93 7a00 	vldr	s14, [r3]
 8004708:	4b35      	ldr	r3, [pc, #212]	@ (80047e0 <main+0x1018>)
 800470a:	edd3 7a00 	vldr	s15, [r3]
 800470e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004712:	4b37      	ldr	r3, [pc, #220]	@ (80047f0 <main+0x1028>)
 8004714:	edc3 7a00 	vstr	s15, [r3]
//			delta_velo_pris = setvelocity_pris - kf_pris.x_data[1];
			V_pris_velo_PID = Prismatic_velocity_control(delta_velo_pris);
 8004718:	4b35      	ldr	r3, [pc, #212]	@ (80047f0 <main+0x1028>)
 800471a:	edd3 7a00 	vldr	s15, [r3]
 800471e:	eeb0 0a67 	vmov.f32	s0, s15
 8004722:	f000 fb69 	bl	8004df8 <Prismatic_velocity_control>
 8004726:	eef0 7a40 	vmov.f32	s15, s0
 800472a:	4b25      	ldr	r3, [pc, #148]	@ (80047c0 <main+0xff8>)
 800472c:	edc3 7a00 	vstr	s15, [r3]
			if (count_Tim2 >= 10) {
 8004730:	4b2a      	ldr	r3, [pc, #168]	@ (80047dc <main+0x1014>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	2b09      	cmp	r3, #9
 8004736:	f340 80a6 	ble.w	8004886 <main+0x10be>
				// Position Control
				position_pris = Encoder_GetPosition_mm(&encoder1);
 800473a:	481f      	ldr	r0, [pc, #124]	@ (80047b8 <main+0xff0>)
 800473c:	f7fd fcaa 	bl	8002094 <Encoder_GetPosition_mm>
 8004740:	eef0 7a40 	vmov.f32	s15, s0
 8004744:	4b2b      	ldr	r3, [pc, #172]	@ (80047f4 <main+0x102c>)
 8004746:	edc3 7a00 	vstr	s15, [r3]
				setposition_pris = GetTrajectoryPosition(&Prismatic[current_segment], t_global);
 800474a:	4b26      	ldr	r3, [pc, #152]	@ (80047e4 <main+0x101c>)
 800474c:	681a      	ldr	r2, [r3, #0]
 800474e:	4613      	mov	r3, r2
 8004750:	00db      	lsls	r3, r3, #3
 8004752:	4413      	add	r3, r2
 8004754:	009b      	lsls	r3, r3, #2
 8004756:	4a11      	ldr	r2, [pc, #68]	@ (800479c <main+0xfd4>)
 8004758:	4413      	add	r3, r2
 800475a:	4a0c      	ldr	r2, [pc, #48]	@ (800478c <main+0xfc4>)
 800475c:	edd2 7a00 	vldr	s15, [r2]
 8004760:	e04a      	b.n	80047f8 <main+0x1030>
 8004762:	bf00      	nop
 8004764:	f3af 8000 	nop.w
 8004768:	aaaaaaab 	.word	0xaaaaaaab
 800476c:	400aaaaa 	.word	0x400aaaaa
 8004770:	e5604189 	.word	0xe5604189
 8004774:	400922d0 	.word	0x400922d0
 8004778:	20000da4 	.word	0x20000da4
 800477c:	2000073c 	.word	0x2000073c
 8004780:	20000da8 	.word	0x20000da8
 8004784:	20000dac 	.word	0x20000dac
 8004788:	2000162c 	.word	0x2000162c
 800478c:	20000718 	.word	0x20000718
 8004790:	437a0000 	.word	0x437a0000
 8004794:	43fa0000 	.word	0x43fa0000
 8004798:	00000000 	.word	0x00000000
 800479c:	20000448 	.word	0x20000448
 80047a0:	3ecccccd 	.word	0x3ecccccd
 80047a4:	200005b0 	.word	0x200005b0
 80047a8:	20000434 	.word	0x20000434
 80047ac:	20000438 	.word	0x20000438
 80047b0:	2000043c 	.word	0x2000043c
 80047b4:	20000440 	.word	0x20000440
 80047b8:	200003c4 	.word	0x200003c4
 80047bc:	20001588 	.word	0x20001588
 80047c0:	20000e38 	.word	0x20000e38
 80047c4:	20000ed0 	.word	0x20000ed0
 80047c8:	200003f8 	.word	0x200003f8
 80047cc:	20001598 	.word	0x20001598
 80047d0:	20000eb4 	.word	0x20000eb4
 80047d4:	200011f4 	.word	0x200011f4
 80047d8:	40668000 	.word	0x40668000
 80047dc:	20000dbc 	.word	0x20000dbc
 80047e0:	20000e30 	.word	0x20000e30
 80047e4:	20000444 	.word	0x20000444
 80047e8:	20000df8 	.word	0x20000df8
 80047ec:	20000e34 	.word	0x20000e34
 80047f0:	20000e48 	.word	0x20000e48
 80047f4:	20000df0 	.word	0x20000df0
 80047f8:	eeb0 0a67 	vmov.f32	s0, s15
 80047fc:	4618      	mov	r0, r3
 80047fe:	f7fe fc35 	bl	800306c <GetTrajectoryPosition>
 8004802:	eef0 7a40 	vmov.f32	s15, s0
 8004806:	4bb0      	ldr	r3, [pc, #704]	@ (8004ac8 <main+0x1300>)
 8004808:	edc3 7a00 	vstr	s15, [r3]
//				setposition_pris = pos_pris;
				delta_posi_pris = setposition_pris - position_pris;
 800480c:	4bae      	ldr	r3, [pc, #696]	@ (8004ac8 <main+0x1300>)
 800480e:	ed93 7a00 	vldr	s14, [r3]
 8004812:	4bae      	ldr	r3, [pc, #696]	@ (8004acc <main+0x1304>)
 8004814:	edd3 7a00 	vldr	s15, [r3]
 8004818:	ee77 7a67 	vsub.f32	s15, s14, s15
 800481c:	4bac      	ldr	r3, [pc, #688]	@ (8004ad0 <main+0x1308>)
 800481e:	edc3 7a00 	vstr	s15, [r3]
				if (delta_posi_pris <= 0.1 && delta_posi_pris >= -0.1) {
 8004822:	4bab      	ldr	r3, [pc, #684]	@ (8004ad0 <main+0x1308>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4618      	mov	r0, r3
 8004828:	f7fb fe5a 	bl	80004e0 <__aeabi_f2d>
 800482c:	a3a0      	add	r3, pc, #640	@ (adr r3, 8004ab0 <main+0x12e8>)
 800482e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004832:	f7fc f929 	bl	8000a88 <__aeabi_dcmple>
 8004836:	4603      	mov	r3, r0
 8004838:	2b00      	cmp	r3, #0
 800483a:	d015      	beq.n	8004868 <main+0x10a0>
 800483c:	4ba4      	ldr	r3, [pc, #656]	@ (8004ad0 <main+0x1308>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4618      	mov	r0, r3
 8004842:	f7fb fe4d 	bl	80004e0 <__aeabi_f2d>
 8004846:	a39c      	add	r3, pc, #624	@ (adr r3, 8004ab8 <main+0x12f0>)
 8004848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800484c:	f7fc f926 	bl	8000a9c <__aeabi_dcmpge>
 8004850:	4603      	mov	r3, r0
 8004852:	2b00      	cmp	r3, #0
 8004854:	d008      	beq.n	8004868 <main+0x10a0>
					V_pris_posi_PID = 0;
 8004856:	4b9f      	ldr	r3, [pc, #636]	@ (8004ad4 <main+0x130c>)
 8004858:	f04f 0200 	mov.w	r2, #0
 800485c:	601a      	str	r2, [r3, #0]
					V_pris_velo_PID = 0;
 800485e:	4b9e      	ldr	r3, [pc, #632]	@ (8004ad8 <main+0x1310>)
 8004860:	f04f 0200 	mov.w	r2, #0
 8004864:	601a      	str	r2, [r3, #0]
 8004866:	e00b      	b.n	8004880 <main+0x10b8>
				} else {
					V_pris_posi_PID = Prismatic_position_control(
 8004868:	4b99      	ldr	r3, [pc, #612]	@ (8004ad0 <main+0x1308>)
 800486a:	edd3 7a00 	vldr	s15, [r3]
 800486e:	eeb0 0a67 	vmov.f32	s0, s15
 8004872:	f000 fa49 	bl	8004d08 <Prismatic_position_control>
 8004876:	eef0 7a40 	vmov.f32	s15, s0
 800487a:	4b96      	ldr	r3, [pc, #600]	@ (8004ad4 <main+0x130c>)
 800487c:	edc3 7a00 	vstr	s15, [r3]
							delta_posi_pris);
				}
//				V_pris_posi_PID = Prismatic_position_control(delta_posi_pris);
				count_Tim2 = 0;
 8004880:	4b96      	ldr	r3, [pc, #600]	@ (8004adc <main+0x1314>)
 8004882:	2200      	movs	r2, #0
 8004884:	601a      	str	r2, [r3, #0]
			}

			Revolute_dis();
 8004886:	f000 fc9b 	bl	80051c0 <Revolute_dis>
			count_Tim2 += 1;
 800488a:	4b94      	ldr	r3, [pc, #592]	@ (8004adc <main+0x1314>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	3301      	adds	r3, #1
 8004890:	4a92      	ldr	r2, [pc, #584]	@ (8004adc <main+0x1314>)
 8004892:	6013      	str	r3, [r2, #0]
			// Velocity Control
			velocity_rev = Encoder_GetVelocity(&encoder2) / (100.0 / 30.0);
 8004894:	4892      	ldr	r0, [pc, #584]	@ (8004ae0 <main+0x1318>)
 8004896:	f7fd fbd0 	bl	800203a <Encoder_GetVelocity>
 800489a:	ee10 3a10 	vmov	r3, s0
 800489e:	4618      	mov	r0, r3
 80048a0:	f7fb fe1e 	bl	80004e0 <__aeabi_f2d>
 80048a4:	a386      	add	r3, pc, #536	@ (adr r3, 8004ac0 <main+0x12f8>)
 80048a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048aa:	f7fb ff9b 	bl	80007e4 <__aeabi_ddiv>
 80048ae:	4602      	mov	r2, r0
 80048b0:	460b      	mov	r3, r1
 80048b2:	4610      	mov	r0, r2
 80048b4:	4619      	mov	r1, r3
 80048b6:	f7fc f93b 	bl	8000b30 <__aeabi_d2f>
 80048ba:	4603      	mov	r3, r0
 80048bc:	4a89      	ldr	r2, [pc, #548]	@ (8004ae4 <main+0x131c>)
 80048be:	6013      	str	r3, [r2, #0]
			setvelocity_rev = GetTrajectoryVelocity(&Revolute[current_segment], t_global) + V_rev_posi_PID;
 80048c0:	4b89      	ldr	r3, [pc, #548]	@ (8004ae8 <main+0x1320>)
 80048c2:	681a      	ldr	r2, [r3, #0]
 80048c4:	4613      	mov	r3, r2
 80048c6:	00db      	lsls	r3, r3, #3
 80048c8:	4413      	add	r3, r2
 80048ca:	009b      	lsls	r3, r3, #2
 80048cc:	4a87      	ldr	r2, [pc, #540]	@ (8004aec <main+0x1324>)
 80048ce:	4413      	add	r3, r2
 80048d0:	4a87      	ldr	r2, [pc, #540]	@ (8004af0 <main+0x1328>)
 80048d2:	edd2 7a00 	vldr	s15, [r2]
 80048d6:	eeb0 0a67 	vmov.f32	s0, s15
 80048da:	4618      	mov	r0, r3
 80048dc:	f7fe fc9c 	bl	8003218 <GetTrajectoryVelocity>
 80048e0:	eeb0 7a40 	vmov.f32	s14, s0
 80048e4:	4b83      	ldr	r3, [pc, #524]	@ (8004af4 <main+0x132c>)
 80048e6:	edd3 7a00 	vldr	s15, [r3]
 80048ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80048ee:	4b82      	ldr	r3, [pc, #520]	@ (8004af8 <main+0x1330>)
 80048f0:	edc3 7a00 	vstr	s15, [r3]
//			setvelocity_rev = vel_rev + V_rev_posi_PID;
//			delta_velo_rev = setvelocity_rev - velocity_rev;
			delta_velo_rev = setvelocity_rev - kf_rev.x_data[1];
 80048f4:	4b80      	ldr	r3, [pc, #512]	@ (8004af8 <main+0x1330>)
 80048f6:	ed93 7a00 	vldr	s14, [r3]
 80048fa:	4b80      	ldr	r3, [pc, #512]	@ (8004afc <main+0x1334>)
 80048fc:	edd3 7a8e 	vldr	s15, [r3, #568]	@ 0x238
 8004900:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004904:	4b7e      	ldr	r3, [pc, #504]	@ (8004b00 <main+0x1338>)
 8004906:	edc3 7a00 	vstr	s15, [r3]
			V_rev_velo_PID = Revolute_velocity_control(delta_velo_rev);
 800490a:	4b7d      	ldr	r3, [pc, #500]	@ (8004b00 <main+0x1338>)
 800490c:	edd3 7a00 	vldr	s15, [r3]
 8004910:	eeb0 0a67 	vmov.f32	s0, s15
 8004914:	f000 fb96 	bl	8005044 <Revolute_velocity_control>
 8004918:	eef0 7a40 	vmov.f32	s15, s0
 800491c:	4b79      	ldr	r3, [pc, #484]	@ (8004b04 <main+0x133c>)
 800491e:	edc3 7a00 	vstr	s15, [r3]
			if (count_Tim2 >= 10) {
 8004922:	4b6e      	ldr	r3, [pc, #440]	@ (8004adc <main+0x1314>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	2b09      	cmp	r3, #9
 8004928:	dd7e      	ble.n	8004a28 <main+0x1260>
				// Position Control
				position_rev = Encoder_GetPosition(&encoder2) / (100.0 / 30.0);
 800492a:	486d      	ldr	r0, [pc, #436]	@ (8004ae0 <main+0x1318>)
 800492c:	f7fd fb76 	bl	800201c <Encoder_GetPosition>
 8004930:	ee10 3a10 	vmov	r3, s0
 8004934:	4618      	mov	r0, r3
 8004936:	f7fb fdd3 	bl	80004e0 <__aeabi_f2d>
 800493a:	a361      	add	r3, pc, #388	@ (adr r3, 8004ac0 <main+0x12f8>)
 800493c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004940:	f7fb ff50 	bl	80007e4 <__aeabi_ddiv>
 8004944:	4602      	mov	r2, r0
 8004946:	460b      	mov	r3, r1
 8004948:	4610      	mov	r0, r2
 800494a:	4619      	mov	r1, r3
 800494c:	f7fc f8f0 	bl	8000b30 <__aeabi_d2f>
 8004950:	4603      	mov	r3, r0
 8004952:	4a6d      	ldr	r2, [pc, #436]	@ (8004b08 <main+0x1340>)
 8004954:	6013      	str	r3, [r2, #0]
				setposition_rev = GetTrajectoryPosition(&Revolute[current_segment], t_global) + Rev_backlash.backlash_offset;
 8004956:	4b64      	ldr	r3, [pc, #400]	@ (8004ae8 <main+0x1320>)
 8004958:	681a      	ldr	r2, [r3, #0]
 800495a:	4613      	mov	r3, r2
 800495c:	00db      	lsls	r3, r3, #3
 800495e:	4413      	add	r3, r2
 8004960:	009b      	lsls	r3, r3, #2
 8004962:	4a62      	ldr	r2, [pc, #392]	@ (8004aec <main+0x1324>)
 8004964:	4413      	add	r3, r2
 8004966:	4a62      	ldr	r2, [pc, #392]	@ (8004af0 <main+0x1328>)
 8004968:	edd2 7a00 	vldr	s15, [r2]
 800496c:	eeb0 0a67 	vmov.f32	s0, s15
 8004970:	4618      	mov	r0, r3
 8004972:	f7fe fb7b 	bl	800306c <GetTrajectoryPosition>
 8004976:	eeb0 7a40 	vmov.f32	s14, s0
 800497a:	4b64      	ldr	r3, [pc, #400]	@ (8004b0c <main+0x1344>)
 800497c:	edd3 7a01 	vldr	s15, [r3, #4]
 8004980:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004984:	4b62      	ldr	r3, [pc, #392]	@ (8004b10 <main+0x1348>)
 8004986:	edc3 7a00 	vstr	s15, [r3]
//				setposition_rev = pos_rev;
				Backlash_Update(&Rev_backlash, pos_rev, p2, v2);
 800498a:	4b62      	ldr	r3, [pc, #392]	@ (8004b14 <main+0x134c>)
 800498c:	edd3 7a00 	vldr	s15, [r3]
 8004990:	4b61      	ldr	r3, [pc, #388]	@ (8004b18 <main+0x1350>)
 8004992:	ed93 7a00 	vldr	s14, [r3]
 8004996:	4b61      	ldr	r3, [pc, #388]	@ (8004b1c <main+0x1354>)
 8004998:	edd3 6a00 	vldr	s13, [r3]
 800499c:	eeb0 1a66 	vmov.f32	s2, s13
 80049a0:	eef0 0a47 	vmov.f32	s1, s14
 80049a4:	eeb0 0a67 	vmov.f32	s0, s15
 80049a8:	4858      	ldr	r0, [pc, #352]	@ (8004b0c <main+0x1344>)
 80049aa:	f7fc fbed 	bl	8001188 <Backlash_Update>
				delta_posi_rev = setposition_rev - position_rev;
 80049ae:	4b58      	ldr	r3, [pc, #352]	@ (8004b10 <main+0x1348>)
 80049b0:	ed93 7a00 	vldr	s14, [r3]
 80049b4:	4b54      	ldr	r3, [pc, #336]	@ (8004b08 <main+0x1340>)
 80049b6:	edd3 7a00 	vldr	s15, [r3]
 80049ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80049be:	4b58      	ldr	r3, [pc, #352]	@ (8004b20 <main+0x1358>)
 80049c0:	edc3 7a00 	vstr	s15, [r3]
				if (delta_posi_rev <= 0.1 && delta_posi_rev >= -0.1) {
 80049c4:	4b56      	ldr	r3, [pc, #344]	@ (8004b20 <main+0x1358>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4618      	mov	r0, r3
 80049ca:	f7fb fd89 	bl	80004e0 <__aeabi_f2d>
 80049ce:	a338      	add	r3, pc, #224	@ (adr r3, 8004ab0 <main+0x12e8>)
 80049d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049d4:	f7fc f858 	bl	8000a88 <__aeabi_dcmple>
 80049d8:	4603      	mov	r3, r0
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d015      	beq.n	8004a0a <main+0x1242>
 80049de:	4b50      	ldr	r3, [pc, #320]	@ (8004b20 <main+0x1358>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	4618      	mov	r0, r3
 80049e4:	f7fb fd7c 	bl	80004e0 <__aeabi_f2d>
 80049e8:	a333      	add	r3, pc, #204	@ (adr r3, 8004ab8 <main+0x12f0>)
 80049ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049ee:	f7fc f855 	bl	8000a9c <__aeabi_dcmpge>
 80049f2:	4603      	mov	r3, r0
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d008      	beq.n	8004a0a <main+0x1242>
					V_rev_posi_PID = 0;
 80049f8:	4b3e      	ldr	r3, [pc, #248]	@ (8004af4 <main+0x132c>)
 80049fa:	f04f 0200 	mov.w	r2, #0
 80049fe:	601a      	str	r2, [r3, #0]
					V_rev_velo_PID = 0;
 8004a00:	4b40      	ldr	r3, [pc, #256]	@ (8004b04 <main+0x133c>)
 8004a02:	f04f 0200 	mov.w	r2, #0
 8004a06:	601a      	str	r2, [r3, #0]
 8004a08:	e00b      	b.n	8004a22 <main+0x125a>
				} else {
					V_rev_posi_PID = Revolute_position_control(delta_posi_rev);
 8004a0a:	4b45      	ldr	r3, [pc, #276]	@ (8004b20 <main+0x1358>)
 8004a0c:	edd3 7a00 	vldr	s15, [r3]
 8004a10:	eeb0 0a67 	vmov.f32	s0, s15
 8004a14:	f000 fa9e 	bl	8004f54 <Revolute_position_control>
 8004a18:	eef0 7a40 	vmov.f32	s15, s0
 8004a1c:	4b35      	ldr	r3, [pc, #212]	@ (8004af4 <main+0x132c>)
 8004a1e:	edc3 7a00 	vstr	s15, [r3]
				}
//				V_pris_posi_PID = Prismatic_position_control(delta_posi_pris);
				count_Tim2 = 0;
 8004a22:	4b2e      	ldr	r3, [pc, #184]	@ (8004adc <main+0x1314>)
 8004a24:	2200      	movs	r2, #0
 8004a26:	601a      	str	r2, [r3, #0]
			}
		}

		if (V_pris_velo_PID < 0) {
 8004a28:	4b2b      	ldr	r3, [pc, #172]	@ (8004ad8 <main+0x1310>)
 8004a2a:	edd3 7a00 	vldr	s15, [r3]
 8004a2e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004a32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a36:	d50b      	bpl.n	8004a50 <main+0x1288>
			DIR_24V = 0;
 8004a38:	4b3a      	ldr	r3, [pc, #232]	@ (8004b24 <main+0x135c>)
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	601a      	str	r2, [r3, #0]
			V_absoulte_pris = fabsf(V_pris_velo_PID);
 8004a3e:	4b26      	ldr	r3, [pc, #152]	@ (8004ad8 <main+0x1310>)
 8004a40:	edd3 7a00 	vldr	s15, [r3]
 8004a44:	eef0 7ae7 	vabs.f32	s15, s15
 8004a48:	4b37      	ldr	r3, [pc, #220]	@ (8004b28 <main+0x1360>)
 8004a4a:	edc3 7a00 	vstr	s15, [r3]
 8004a4e:	e00e      	b.n	8004a6e <main+0x12a6>
		} else if (V_pris_velo_PID > 0) {
 8004a50:	4b21      	ldr	r3, [pc, #132]	@ (8004ad8 <main+0x1310>)
 8004a52:	edd3 7a00 	vldr	s15, [r3]
 8004a56:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004a5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a5e:	dd06      	ble.n	8004a6e <main+0x12a6>
			DIR_24V = 1;
 8004a60:	4b30      	ldr	r3, [pc, #192]	@ (8004b24 <main+0x135c>)
 8004a62:	2201      	movs	r2, #1
 8004a64:	601a      	str	r2, [r3, #0]
			V_absoulte_pris = V_pris_velo_PID;
 8004a66:	4b1c      	ldr	r3, [pc, #112]	@ (8004ad8 <main+0x1310>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4a2f      	ldr	r2, [pc, #188]	@ (8004b28 <main+0x1360>)
 8004a6c:	6013      	str	r3, [r2, #0]
		}
		pwm_pris_velo = voltage_to_pwm(V_absoulte_pris);
 8004a6e:	4b2e      	ldr	r3, [pc, #184]	@ (8004b28 <main+0x1360>)
 8004a70:	edd3 7a00 	vldr	s15, [r3]
 8004a74:	eeb0 0a67 	vmov.f32	s0, s15
 8004a78:	f000 fb82 	bl	8005180 <voltage_to_pwm>
 8004a7c:	eef0 7a40 	vmov.f32	s15, s0
 8004a80:	4b2a      	ldr	r3, [pc, #168]	@ (8004b2c <main+0x1364>)
 8004a82:	edc3 7a00 	vstr	s15, [r3]
//		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, DIR_24V);
//		__HAL_TIM_SET_COMPARE(&htim20, TIM_CHANNEL_1, pwm_pris_velo);

		if (V_rev_velo_PID < 0) {
 8004a86:	4b1f      	ldr	r3, [pc, #124]	@ (8004b04 <main+0x133c>)
 8004a88:	edd3 7a00 	vldr	s15, [r3]
 8004a8c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004a90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a94:	d550      	bpl.n	8004b38 <main+0x1370>
			DIR_18V = 0;
 8004a96:	4b26      	ldr	r3, [pc, #152]	@ (8004b30 <main+0x1368>)
 8004a98:	2200      	movs	r2, #0
 8004a9a:	601a      	str	r2, [r3, #0]
			V_absolute_rev = fabsf(V_rev_velo_PID);
 8004a9c:	4b19      	ldr	r3, [pc, #100]	@ (8004b04 <main+0x133c>)
 8004a9e:	edd3 7a00 	vldr	s15, [r3]
 8004aa2:	eef0 7ae7 	vabs.f32	s15, s15
 8004aa6:	4b23      	ldr	r3, [pc, #140]	@ (8004b34 <main+0x136c>)
 8004aa8:	edc3 7a00 	vstr	s15, [r3]
 8004aac:	e053      	b.n	8004b56 <main+0x138e>
 8004aae:	bf00      	nop
 8004ab0:	9999999a 	.word	0x9999999a
 8004ab4:	3fb99999 	.word	0x3fb99999
 8004ab8:	9999999a 	.word	0x9999999a
 8004abc:	bfb99999 	.word	0xbfb99999
 8004ac0:	aaaaaaab 	.word	0xaaaaaaab
 8004ac4:	400aaaaa 	.word	0x400aaaaa
 8004ac8:	20000df4 	.word	0x20000df4
 8004acc:	20000df0 	.word	0x20000df0
 8004ad0:	20000e08 	.word	0x20000e08
 8004ad4:	20000df8 	.word	0x20000df8
 8004ad8:	20000e38 	.word	0x20000e38
 8004adc:	20000dbc 	.word	0x20000dbc
 8004ae0:	200003f8 	.word	0x200003f8
 8004ae4:	20000eac 	.word	0x20000eac
 8004ae8:	20000444 	.word	0x20000444
 8004aec:	200005b0 	.word	0x200005b0
 8004af0:	20000718 	.word	0x20000718
 8004af4:	20000e78 	.word	0x20000e78
 8004af8:	20000eb0 	.word	0x20000eb0
 8004afc:	200011f4 	.word	0x200011f4
 8004b00:	20000ec4 	.word	0x20000ec4
 8004b04:	20000eb4 	.word	0x20000eb4
 8004b08:	20000e70 	.word	0x20000e70
 8004b0c:	20000dc0 	.word	0x20000dc0
 8004b10:	20000e74 	.word	0x20000e74
 8004b14:	2000043c 	.word	0x2000043c
 8004b18:	20000728 	.word	0x20000728
 8004b1c:	2000072c 	.word	0x2000072c
 8004b20:	20000e84 	.word	0x20000e84
 8004b24:	20000db4 	.word	0x20000db4
 8004b28:	20000dfc 	.word	0x20000dfc
 8004b2c:	20000e3c 	.word	0x20000e3c
 8004b30:	20000db0 	.word	0x20000db0
 8004b34:	20000ec8 	.word	0x20000ec8
		} else if (V_rev_velo_PID > 0) {
 8004b38:	4b1b      	ldr	r3, [pc, #108]	@ (8004ba8 <main+0x13e0>)
 8004b3a:	edd3 7a00 	vldr	s15, [r3]
 8004b3e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004b42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b46:	dd06      	ble.n	8004b56 <main+0x138e>
			DIR_18V = 1;
 8004b48:	4b18      	ldr	r3, [pc, #96]	@ (8004bac <main+0x13e4>)
 8004b4a:	2201      	movs	r2, #1
 8004b4c:	601a      	str	r2, [r3, #0]
			V_absolute_rev = V_rev_velo_PID;
 8004b4e:	4b16      	ldr	r3, [pc, #88]	@ (8004ba8 <main+0x13e0>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	4a17      	ldr	r2, [pc, #92]	@ (8004bb0 <main+0x13e8>)
 8004b54:	6013      	str	r3, [r2, #0]
		}
		V_plant = V_absolute_rev + voltage_dis_rev;
 8004b56:	4b16      	ldr	r3, [pc, #88]	@ (8004bb0 <main+0x13e8>)
 8004b58:	ed93 7a00 	vldr	s14, [r3]
 8004b5c:	4b15      	ldr	r3, [pc, #84]	@ (8004bb4 <main+0x13ec>)
 8004b5e:	edd3 7a00 	vldr	s15, [r3]
 8004b62:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004b66:	4b14      	ldr	r3, [pc, #80]	@ (8004bb8 <main+0x13f0>)
 8004b68:	edc3 7a00 	vstr	s15, [r3]
		if (V_plant > 18) {
 8004b6c:	4b12      	ldr	r3, [pc, #72]	@ (8004bb8 <main+0x13f0>)
 8004b6e:	edd3 7a00 	vldr	s15, [r3]
 8004b72:	eeb3 7a02 	vmov.f32	s14, #50	@ 0x41900000  18.0
 8004b76:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004b7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b7e:	dd02      	ble.n	8004b86 <main+0x13be>
			V_plant = 18;
 8004b80:	4b0d      	ldr	r3, [pc, #52]	@ (8004bb8 <main+0x13f0>)
 8004b82:	4a0e      	ldr	r2, [pc, #56]	@ (8004bbc <main+0x13f4>)
 8004b84:	601a      	str	r2, [r3, #0]
		}
		pwm_rev_velo = (V_plant / 18) * 65535;
 8004b86:	4b0c      	ldr	r3, [pc, #48]	@ (8004bb8 <main+0x13f0>)
 8004b88:	ed93 7a00 	vldr	s14, [r3]
 8004b8c:	eef3 6a02 	vmov.f32	s13, #50	@ 0x41900000  18.0
 8004b90:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004b94:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8004bc0 <main+0x13f8>
 8004b98:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004b9c:	4b09      	ldr	r3, [pc, #36]	@ (8004bc4 <main+0x13fc>)
 8004b9e:	edc3 7a00 	vstr	s15, [r3]
	while (1) {
 8004ba2:	f7ff b87b 	b.w	8003c9c <main+0x4d4>
 8004ba6:	bf00      	nop
 8004ba8:	20000eb4 	.word	0x20000eb4
 8004bac:	20000db0 	.word	0x20000db0
 8004bb0:	20000ec8 	.word	0x20000ec8
 8004bb4:	20000db8 	.word	0x20000db8
 8004bb8:	20000ecc 	.word	0x20000ecc
 8004bbc:	41900000 	.word	0x41900000
 8004bc0:	477fff00 	.word	0x477fff00
 8004bc4:	20000eb8 	.word	0x20000eb8

08004bc8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b094      	sub	sp, #80	@ 0x50
 8004bcc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004bce:	f107 0318 	add.w	r3, r7, #24
 8004bd2:	2238      	movs	r2, #56	@ 0x38
 8004bd4:	2100      	movs	r1, #0
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	f00a fbac 	bl	800f334 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004bdc:	1d3b      	adds	r3, r7, #4
 8004bde:	2200      	movs	r2, #0
 8004be0:	601a      	str	r2, [r3, #0]
 8004be2:	605a      	str	r2, [r3, #4]
 8004be4:	609a      	str	r2, [r3, #8]
 8004be6:	60da      	str	r2, [r3, #12]
 8004be8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8004bea:	2000      	movs	r0, #0
 8004bec:	f003 fc1e 	bl	800842c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004bf0:	2302      	movs	r3, #2
 8004bf2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004bf4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004bf8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004bfa:	2340      	movs	r3, #64	@ 0x40
 8004bfc:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004bfe:	2302      	movs	r3, #2
 8004c00:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004c02:	2302      	movs	r3, #2
 8004c04:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8004c06:	2304      	movs	r3, #4
 8004c08:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8004c0a:	2355      	movs	r3, #85	@ 0x55
 8004c0c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004c0e:	2302      	movs	r3, #2
 8004c10:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8004c12:	2302      	movs	r3, #2
 8004c14:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8004c16:	2302      	movs	r3, #2
 8004c18:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004c1a:	f107 0318 	add.w	r3, r7, #24
 8004c1e:	4618      	mov	r0, r3
 8004c20:	f003 fcb8 	bl	8008594 <HAL_RCC_OscConfig>
 8004c24:	4603      	mov	r3, r0
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d001      	beq.n	8004c2e <SystemClock_Config+0x66>
  {
    Error_Handler();
 8004c2a:	f000 fbb3 	bl	8005394 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004c2e:	230f      	movs	r3, #15
 8004c30:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004c32:	2303      	movs	r3, #3
 8004c34:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004c36:	2300      	movs	r3, #0
 8004c38:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004c3e:	2300      	movs	r3, #0
 8004c40:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8004c42:	1d3b      	adds	r3, r7, #4
 8004c44:	2104      	movs	r1, #4
 8004c46:	4618      	mov	r0, r3
 8004c48:	f003 ffb6 	bl	8008bb8 <HAL_RCC_ClockConfig>
 8004c4c:	4603      	mov	r3, r0
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d001      	beq.n	8004c56 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8004c52:	f000 fb9f 	bl	8005394 <Error_Handler>
  }
}
 8004c56:	bf00      	nop
 8004c58:	3750      	adds	r7, #80	@ 0x50
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	bd80      	pop	{r7, pc}
	...

08004c60 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8004c60:	b480      	push	{r7}
 8004c62:	b083      	sub	sp, #12
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	4603      	mov	r3, r0
 8004c68:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_9) { // Back Limit
 8004c6a:	88fb      	ldrh	r3, [r7, #6]
 8004c6c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004c70:	d103      	bne.n	8004c7a <HAL_GPIO_EXTI_Callback+0x1a>
		State = 9;
 8004c72:	4b1c      	ldr	r3, [pc, #112]	@ (8004ce4 <HAL_GPIO_EXTI_Callback+0x84>)
 8004c74:	2209      	movs	r2, #9
 8004c76:	601a      	str	r2, [r3, #0]
	} else if (GPIO_Pin == GPIO_PIN_14) { // Upper Limit
		State = 14;
	} else if (GPIO_Pin == GPIO_PIN_15) { // Bottom Limit
		State = 15;
	}
}
 8004c78:	e02e      	b.n	8004cd8 <HAL_GPIO_EXTI_Callback+0x78>
	} else if (GPIO_Pin == GPIO_PIN_10) { // Front Limit
 8004c7a:	88fb      	ldrh	r3, [r7, #6]
 8004c7c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c80:	d103      	bne.n	8004c8a <HAL_GPIO_EXTI_Callback+0x2a>
		State = 10;
 8004c82:	4b18      	ldr	r3, [pc, #96]	@ (8004ce4 <HAL_GPIO_EXTI_Callback+0x84>)
 8004c84:	220a      	movs	r2, #10
 8004c86:	601a      	str	r2, [r3, #0]
}
 8004c88:	e026      	b.n	8004cd8 <HAL_GPIO_EXTI_Callback+0x78>
	} else if (GPIO_Pin == GPIO_PIN_11) { // Emergency
 8004c8a:	88fb      	ldrh	r3, [r7, #6]
 8004c8c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004c90:	d103      	bne.n	8004c9a <HAL_GPIO_EXTI_Callback+0x3a>
		State = 11;
 8004c92:	4b14      	ldr	r3, [pc, #80]	@ (8004ce4 <HAL_GPIO_EXTI_Callback+0x84>)
 8004c94:	220b      	movs	r2, #11
 8004c96:	601a      	str	r2, [r3, #0]
}
 8004c98:	e01e      	b.n	8004cd8 <HAL_GPIO_EXTI_Callback+0x78>
	} else if (GPIO_Pin == GPIO_PIN_12) { // Right Proximity
 8004c9a:	88fb      	ldrh	r3, [r7, #6]
 8004c9c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ca0:	d103      	bne.n	8004caa <HAL_GPIO_EXTI_Callback+0x4a>
		State = 12;
 8004ca2:	4b10      	ldr	r3, [pc, #64]	@ (8004ce4 <HAL_GPIO_EXTI_Callback+0x84>)
 8004ca4:	220c      	movs	r2, #12
 8004ca6:	601a      	str	r2, [r3, #0]
}
 8004ca8:	e016      	b.n	8004cd8 <HAL_GPIO_EXTI_Callback+0x78>
	} else if (GPIO_Pin == GPIO_PIN_13) { // Left Proximity
 8004caa:	88fb      	ldrh	r3, [r7, #6]
 8004cac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004cb0:	d103      	bne.n	8004cba <HAL_GPIO_EXTI_Callback+0x5a>
		State = 13;
 8004cb2:	4b0c      	ldr	r3, [pc, #48]	@ (8004ce4 <HAL_GPIO_EXTI_Callback+0x84>)
 8004cb4:	220d      	movs	r2, #13
 8004cb6:	601a      	str	r2, [r3, #0]
}
 8004cb8:	e00e      	b.n	8004cd8 <HAL_GPIO_EXTI_Callback+0x78>
	} else if (GPIO_Pin == GPIO_PIN_14) { // Upper Limit
 8004cba:	88fb      	ldrh	r3, [r7, #6]
 8004cbc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004cc0:	d103      	bne.n	8004cca <HAL_GPIO_EXTI_Callback+0x6a>
		State = 14;
 8004cc2:	4b08      	ldr	r3, [pc, #32]	@ (8004ce4 <HAL_GPIO_EXTI_Callback+0x84>)
 8004cc4:	220e      	movs	r2, #14
 8004cc6:	601a      	str	r2, [r3, #0]
}
 8004cc8:	e006      	b.n	8004cd8 <HAL_GPIO_EXTI_Callback+0x78>
	} else if (GPIO_Pin == GPIO_PIN_15) { // Bottom Limit
 8004cca:	88fb      	ldrh	r3, [r7, #6]
 8004ccc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004cd0:	d102      	bne.n	8004cd8 <HAL_GPIO_EXTI_Callback+0x78>
		State = 15;
 8004cd2:	4b04      	ldr	r3, [pc, #16]	@ (8004ce4 <HAL_GPIO_EXTI_Callback+0x84>)
 8004cd4:	220f      	movs	r2, #15
 8004cd6:	601a      	str	r2, [r3, #0]
}
 8004cd8:	bf00      	nop
 8004cda:	370c      	adds	r7, #12
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce2:	4770      	bx	lr
 8004ce4:	20000734 	.word	0x20000734

08004ce8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b082      	sub	sp, #8
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
	if (htim == &htim2) {
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	4a04      	ldr	r2, [pc, #16]	@ (8004d04 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d101      	bne.n	8004cfc <HAL_TIM_PeriodElapsedCallback+0x14>
		PS2_ReadData();
 8004cf8:	f7fd f9fa 	bl	80020f0 <PS2_ReadData>
	}
}
 8004cfc:	bf00      	nop
 8004cfe:	3708      	adds	r7, #8
 8004d00:	46bd      	mov	sp, r7
 8004d02:	bd80      	pop	{r7, pc}
 8004d04:	200017b0 	.word	0x200017b0

08004d08 <Prismatic_position_control>:

float Prismatic_position_control(float delta_posi) {
 8004d08:	b480      	push	{r7}
 8004d0a:	b087      	sub	sp, #28
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	ed87 0a01 	vstr	s0, [r7, #4]
	int anti_windup;
	error_posi_pris[0] = delta_posi;
 8004d12:	4a36      	ldr	r2, [pc, #216]	@ (8004dec <Prismatic_position_control+0xe4>)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6013      	str	r3, [r2, #0]
//	Pris_posi_PID.Kp = 1;
//	Pris_posi_PID.Kd = 1;

	if (error_posi_pris[0] < 0 && error_posi_pris[1] > 0) {
 8004d18:	4b34      	ldr	r3, [pc, #208]	@ (8004dec <Prismatic_position_control+0xe4>)
 8004d1a:	edd3 7a00 	vldr	s15, [r3]
 8004d1e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004d22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d26:	d50a      	bpl.n	8004d3e <Prismatic_position_control+0x36>
 8004d28:	4b30      	ldr	r3, [pc, #192]	@ (8004dec <Prismatic_position_control+0xe4>)
 8004d2a:	edd3 7a01 	vldr	s15, [r3, #4]
 8004d2e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004d32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d36:	dd02      	ble.n	8004d3e <Prismatic_position_control+0x36>
		anti_windup = 0;
 8004d38:	2300      	movs	r3, #0
 8004d3a:	617b      	str	r3, [r7, #20]
 8004d3c:	e014      	b.n	8004d68 <Prismatic_position_control+0x60>
	} else if (error_posi_pris[0] > 0 && error_posi_pris[1] < 0) {
 8004d3e:	4b2b      	ldr	r3, [pc, #172]	@ (8004dec <Prismatic_position_control+0xe4>)
 8004d40:	edd3 7a00 	vldr	s15, [r3]
 8004d44:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004d48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d4c:	dd0a      	ble.n	8004d64 <Prismatic_position_control+0x5c>
 8004d4e:	4b27      	ldr	r3, [pc, #156]	@ (8004dec <Prismatic_position_control+0xe4>)
 8004d50:	edd3 7a01 	vldr	s15, [r3, #4]
 8004d54:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004d58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d5c:	d502      	bpl.n	8004d64 <Prismatic_position_control+0x5c>
		anti_windup = 0;
 8004d5e:	2300      	movs	r3, #0
 8004d60:	617b      	str	r3, [r7, #20]
 8004d62:	e001      	b.n	8004d68 <Prismatic_position_control+0x60>
	} else {
		anti_windup = 1;
 8004d64:	2301      	movs	r3, #1
 8004d66:	617b      	str	r3, [r7, #20]
 8004d68:	4b21      	ldr	r3, [pc, #132]	@ (8004df0 <Prismatic_position_control+0xe8>)
 8004d6a:	613b      	str	r3, [r7, #16]
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	60fb      	str	r3, [r7, #12]
  float32_t in)
  {
    float32_t out;

    /* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2]  */
    out = (S->A0 * in) +
 8004d70:	693b      	ldr	r3, [r7, #16]
 8004d72:	ed93 7a00 	vldr	s14, [r3]
 8004d76:	edd7 7a03 	vldr	s15, [r7, #12]
 8004d7a:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8004d7e:	693b      	ldr	r3, [r7, #16]
 8004d80:	edd3 6a01 	vldr	s13, [r3, #4]
 8004d84:	693b      	ldr	r3, [r7, #16]
 8004d86:	edd3 7a03 	vldr	s15, [r3, #12]
 8004d8a:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8004d8e:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8004d92:	693b      	ldr	r3, [r7, #16]
 8004d94:	edd3 6a02 	vldr	s13, [r3, #8]
 8004d98:	693b      	ldr	r3, [r7, #16]
 8004d9a:	edd3 7a04 	vldr	s15, [r3, #16]
 8004d9e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004da2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004da6:	693b      	ldr	r3, [r7, #16]
 8004da8:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 8004dac:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004db0:	edc7 7a02 	vstr	s15, [r7, #8]

    /* Update state */
    S->state[1] = S->state[0];
 8004db4:	693b      	ldr	r3, [r7, #16]
 8004db6:	68da      	ldr	r2, [r3, #12]
 8004db8:	693b      	ldr	r3, [r7, #16]
 8004dba:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 8004dbc:	693b      	ldr	r3, [r7, #16]
 8004dbe:	68fa      	ldr	r2, [r7, #12]
 8004dc0:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8004dc2:	693b      	ldr	r3, [r7, #16]
 8004dc4:	68ba      	ldr	r2, [r7, #8]
 8004dc6:	615a      	str	r2, [r3, #20]

    /* return to application */
    return (out);
 8004dc8:	68bb      	ldr	r3, [r7, #8]
//		Pris_posi_PID.Ki = 0;
//	} else {
//		Pris_posi_PID.Ki = 1;
//	}

	V_pris_posi_PID = arm_pid_f32(&Pris_posi_PID, delta_posi);
 8004dca:	4a0a      	ldr	r2, [pc, #40]	@ (8004df4 <Prismatic_position_control+0xec>)
 8004dcc:	6013      	str	r3, [r2, #0]

//	if (V_pris_posi_PID > 24) {
//		V_pris_posi_PID = 24;
//	}

	error_posi_pris[1] = error_posi_pris[0];
 8004dce:	4b07      	ldr	r3, [pc, #28]	@ (8004dec <Prismatic_position_control+0xe4>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	4a06      	ldr	r2, [pc, #24]	@ (8004dec <Prismatic_position_control+0xe4>)
 8004dd4:	6053      	str	r3, [r2, #4]
	return V_pris_posi_PID;
 8004dd6:	4b07      	ldr	r3, [pc, #28]	@ (8004df4 <Prismatic_position_control+0xec>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	ee07 3a90 	vmov	s15, r3
}
 8004dde:	eeb0 0a67 	vmov.f32	s0, s15
 8004de2:	371c      	adds	r7, #28
 8004de4:	46bd      	mov	sp, r7
 8004de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dea:	4770      	bx	lr
 8004dec:	20000e00 	.word	0x20000e00
 8004df0:	20000dcc 	.word	0x20000dcc
 8004df4:	20000df8 	.word	0x20000df8

08004df8 <Prismatic_velocity_control>:

float Prismatic_velocity_control(float delta_velo) {
 8004df8:	b480      	push	{r7}
 8004dfa:	b087      	sub	sp, #28
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	ed87 0a01 	vstr	s0, [r7, #4]
	int anti_windup;
	error_velo_pris[0] = delta_velo;
 8004e02:	4a4e      	ldr	r2, [pc, #312]	@ (8004f3c <Prismatic_velocity_control+0x144>)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6013      	str	r3, [r2, #0]
//	Pris_velo_PID.Kp = 0.01;

	if (error_velo_pris[0] < 0 && error_velo_pris[1] > 0) {
 8004e08:	4b4c      	ldr	r3, [pc, #304]	@ (8004f3c <Prismatic_velocity_control+0x144>)
 8004e0a:	edd3 7a00 	vldr	s15, [r3]
 8004e0e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004e12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e16:	d50a      	bpl.n	8004e2e <Prismatic_velocity_control+0x36>
 8004e18:	4b48      	ldr	r3, [pc, #288]	@ (8004f3c <Prismatic_velocity_control+0x144>)
 8004e1a:	edd3 7a01 	vldr	s15, [r3, #4]
 8004e1e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004e22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e26:	dd02      	ble.n	8004e2e <Prismatic_velocity_control+0x36>
		anti_windup = 0;
 8004e28:	2300      	movs	r3, #0
 8004e2a:	617b      	str	r3, [r7, #20]
 8004e2c:	e014      	b.n	8004e58 <Prismatic_velocity_control+0x60>
	} else if (error_velo_pris[0] > 0 && error_velo_pris[1] < 0) {
 8004e2e:	4b43      	ldr	r3, [pc, #268]	@ (8004f3c <Prismatic_velocity_control+0x144>)
 8004e30:	edd3 7a00 	vldr	s15, [r3]
 8004e34:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004e38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e3c:	dd0a      	ble.n	8004e54 <Prismatic_velocity_control+0x5c>
 8004e3e:	4b3f      	ldr	r3, [pc, #252]	@ (8004f3c <Prismatic_velocity_control+0x144>)
 8004e40:	edd3 7a01 	vldr	s15, [r3, #4]
 8004e44:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004e48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e4c:	d502      	bpl.n	8004e54 <Prismatic_velocity_control+0x5c>
		anti_windup = 0;
 8004e4e:	2300      	movs	r3, #0
 8004e50:	617b      	str	r3, [r7, #20]
 8004e52:	e001      	b.n	8004e58 <Prismatic_velocity_control+0x60>
	} else {
		anti_windup = 1;
 8004e54:	2301      	movs	r3, #1
 8004e56:	617b      	str	r3, [r7, #20]
	}

	if (V_pris_velo_PID >= 24 && anti_windup == 0) {
 8004e58:	4b39      	ldr	r3, [pc, #228]	@ (8004f40 <Prismatic_velocity_control+0x148>)
 8004e5a:	edd3 7a00 	vldr	s15, [r3]
 8004e5e:	eeb3 7a08 	vmov.f32	s14, #56	@ 0x41c00000  24.0
 8004e62:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004e66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e6a:	db07      	blt.n	8004e7c <Prismatic_velocity_control+0x84>
 8004e6c:	697b      	ldr	r3, [r7, #20]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d104      	bne.n	8004e7c <Prismatic_velocity_control+0x84>
		Pris_velo_PID.Ki = 0;
 8004e72:	4b34      	ldr	r3, [pc, #208]	@ (8004f44 <Prismatic_velocity_control+0x14c>)
 8004e74:	f04f 0200 	mov.w	r2, #0
 8004e78:	61da      	str	r2, [r3, #28]
 8004e7a:	e002      	b.n	8004e82 <Prismatic_velocity_control+0x8a>
	} else {
		Pris_velo_PID.Ki = 0.001;
 8004e7c:	4b31      	ldr	r3, [pc, #196]	@ (8004f44 <Prismatic_velocity_control+0x14c>)
 8004e7e:	4a32      	ldr	r2, [pc, #200]	@ (8004f48 <Prismatic_velocity_control+0x150>)
 8004e80:	61da      	str	r2, [r3, #28]
 8004e82:	4b30      	ldr	r3, [pc, #192]	@ (8004f44 <Prismatic_velocity_control+0x14c>)
 8004e84:	613b      	str	r3, [r7, #16]
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	60fb      	str	r3, [r7, #12]
    out = (S->A0 * in) +
 8004e8a:	693b      	ldr	r3, [r7, #16]
 8004e8c:	ed93 7a00 	vldr	s14, [r3]
 8004e90:	edd7 7a03 	vldr	s15, [r7, #12]
 8004e94:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8004e98:	693b      	ldr	r3, [r7, #16]
 8004e9a:	edd3 6a01 	vldr	s13, [r3, #4]
 8004e9e:	693b      	ldr	r3, [r7, #16]
 8004ea0:	edd3 7a03 	vldr	s15, [r3, #12]
 8004ea4:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8004ea8:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8004eac:	693b      	ldr	r3, [r7, #16]
 8004eae:	edd3 6a02 	vldr	s13, [r3, #8]
 8004eb2:	693b      	ldr	r3, [r7, #16]
 8004eb4:	edd3 7a04 	vldr	s15, [r3, #16]
 8004eb8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004ebc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004ec0:	693b      	ldr	r3, [r7, #16]
 8004ec2:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 8004ec6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004eca:	edc7 7a02 	vstr	s15, [r7, #8]
    S->state[1] = S->state[0];
 8004ece:	693b      	ldr	r3, [r7, #16]
 8004ed0:	68da      	ldr	r2, [r3, #12]
 8004ed2:	693b      	ldr	r3, [r7, #16]
 8004ed4:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 8004ed6:	693b      	ldr	r3, [r7, #16]
 8004ed8:	68fa      	ldr	r2, [r7, #12]
 8004eda:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8004edc:	693b      	ldr	r3, [r7, #16]
 8004ede:	68ba      	ldr	r2, [r7, #8]
 8004ee0:	615a      	str	r2, [r3, #20]
    return (out);
 8004ee2:	68bb      	ldr	r3, [r7, #8]
	}

	V_pris_velo_PID = arm_pid_f32(&Pris_velo_PID, delta_velo);
 8004ee4:	4a16      	ldr	r2, [pc, #88]	@ (8004f40 <Prismatic_velocity_control+0x148>)
 8004ee6:	6013      	str	r3, [r2, #0]

	if (V_pris_velo_PID > 24) {
 8004ee8:	4b15      	ldr	r3, [pc, #84]	@ (8004f40 <Prismatic_velocity_control+0x148>)
 8004eea:	edd3 7a00 	vldr	s15, [r3]
 8004eee:	eeb3 7a08 	vmov.f32	s14, #56	@ 0x41c00000  24.0
 8004ef2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004ef6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004efa:	dd03      	ble.n	8004f04 <Prismatic_velocity_control+0x10c>
		V_pris_velo_PID = 24;
 8004efc:	4b10      	ldr	r3, [pc, #64]	@ (8004f40 <Prismatic_velocity_control+0x148>)
 8004efe:	4a13      	ldr	r2, [pc, #76]	@ (8004f4c <Prismatic_velocity_control+0x154>)
 8004f00:	601a      	str	r2, [r3, #0]
 8004f02:	e00c      	b.n	8004f1e <Prismatic_velocity_control+0x126>
	} else if (V_pris_velo_PID < -24) {
 8004f04:	4b0e      	ldr	r3, [pc, #56]	@ (8004f40 <Prismatic_velocity_control+0x148>)
 8004f06:	edd3 7a00 	vldr	s15, [r3]
 8004f0a:	eebb 7a08 	vmov.f32	s14, #184	@ 0xc1c00000 -24.0
 8004f0e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004f12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f16:	d502      	bpl.n	8004f1e <Prismatic_velocity_control+0x126>
		V_pris_velo_PID = -24;
 8004f18:	4b09      	ldr	r3, [pc, #36]	@ (8004f40 <Prismatic_velocity_control+0x148>)
 8004f1a:	4a0d      	ldr	r2, [pc, #52]	@ (8004f50 <Prismatic_velocity_control+0x158>)
 8004f1c:	601a      	str	r2, [r3, #0]
	}

	error_velo_pris[1] = error_velo_pris[0];
 8004f1e:	4b07      	ldr	r3, [pc, #28]	@ (8004f3c <Prismatic_velocity_control+0x144>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	4a06      	ldr	r2, [pc, #24]	@ (8004f3c <Prismatic_velocity_control+0x144>)
 8004f24:	6053      	str	r3, [r2, #4]
	return V_pris_velo_PID;
 8004f26:	4b06      	ldr	r3, [pc, #24]	@ (8004f40 <Prismatic_velocity_control+0x148>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	ee07 3a90 	vmov	s15, r3
}
 8004f2e:	eeb0 0a67 	vmov.f32	s0, s15
 8004f32:	371c      	adds	r7, #28
 8004f34:	46bd      	mov	sp, r7
 8004f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3a:	4770      	bx	lr
 8004f3c:	20000e40 	.word	0x20000e40
 8004f40:	20000e38 	.word	0x20000e38
 8004f44:	20000e0c 	.word	0x20000e0c
 8004f48:	3a83126f 	.word	0x3a83126f
 8004f4c:	41c00000 	.word	0x41c00000
 8004f50:	c1c00000 	.word	0xc1c00000

08004f54 <Revolute_position_control>:

float Revolute_position_control(float delta_posi) {
 8004f54:	b480      	push	{r7}
 8004f56:	b087      	sub	sp, #28
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	ed87 0a01 	vstr	s0, [r7, #4]
	int anti_windup;
	error_posi_rev[0] = delta_posi;
 8004f5e:	4a36      	ldr	r2, [pc, #216]	@ (8005038 <Revolute_position_control+0xe4>)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6013      	str	r3, [r2, #0]
//	Rev_posi_PID.Kp = 1;
//	Rev_posi_PID.Kd = 1;

	if (error_posi_rev[0] < 0 && error_posi_rev[1] > 0) {
 8004f64:	4b34      	ldr	r3, [pc, #208]	@ (8005038 <Revolute_position_control+0xe4>)
 8004f66:	edd3 7a00 	vldr	s15, [r3]
 8004f6a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004f6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f72:	d50a      	bpl.n	8004f8a <Revolute_position_control+0x36>
 8004f74:	4b30      	ldr	r3, [pc, #192]	@ (8005038 <Revolute_position_control+0xe4>)
 8004f76:	edd3 7a01 	vldr	s15, [r3, #4]
 8004f7a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004f7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f82:	dd02      	ble.n	8004f8a <Revolute_position_control+0x36>
		anti_windup = 0;
 8004f84:	2300      	movs	r3, #0
 8004f86:	617b      	str	r3, [r7, #20]
 8004f88:	e014      	b.n	8004fb4 <Revolute_position_control+0x60>
	} else if (error_posi_rev[0] > 0 && error_posi_rev[1] < 0) {
 8004f8a:	4b2b      	ldr	r3, [pc, #172]	@ (8005038 <Revolute_position_control+0xe4>)
 8004f8c:	edd3 7a00 	vldr	s15, [r3]
 8004f90:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004f94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f98:	dd0a      	ble.n	8004fb0 <Revolute_position_control+0x5c>
 8004f9a:	4b27      	ldr	r3, [pc, #156]	@ (8005038 <Revolute_position_control+0xe4>)
 8004f9c:	edd3 7a01 	vldr	s15, [r3, #4]
 8004fa0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004fa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fa8:	d502      	bpl.n	8004fb0 <Revolute_position_control+0x5c>
		anti_windup = 0;
 8004faa:	2300      	movs	r3, #0
 8004fac:	617b      	str	r3, [r7, #20]
 8004fae:	e001      	b.n	8004fb4 <Revolute_position_control+0x60>
	} else {
		anti_windup = 1;
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	617b      	str	r3, [r7, #20]
 8004fb4:	4b21      	ldr	r3, [pc, #132]	@ (800503c <Revolute_position_control+0xe8>)
 8004fb6:	613b      	str	r3, [r7, #16]
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	60fb      	str	r3, [r7, #12]
    out = (S->A0 * in) +
 8004fbc:	693b      	ldr	r3, [r7, #16]
 8004fbe:	ed93 7a00 	vldr	s14, [r3]
 8004fc2:	edd7 7a03 	vldr	s15, [r7, #12]
 8004fc6:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8004fca:	693b      	ldr	r3, [r7, #16]
 8004fcc:	edd3 6a01 	vldr	s13, [r3, #4]
 8004fd0:	693b      	ldr	r3, [r7, #16]
 8004fd2:	edd3 7a03 	vldr	s15, [r3, #12]
 8004fd6:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8004fda:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8004fde:	693b      	ldr	r3, [r7, #16]
 8004fe0:	edd3 6a02 	vldr	s13, [r3, #8]
 8004fe4:	693b      	ldr	r3, [r7, #16]
 8004fe6:	edd3 7a04 	vldr	s15, [r3, #16]
 8004fea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004fee:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004ff2:	693b      	ldr	r3, [r7, #16]
 8004ff4:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 8004ff8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004ffc:	edc7 7a02 	vstr	s15, [r7, #8]
    S->state[1] = S->state[0];
 8005000:	693b      	ldr	r3, [r7, #16]
 8005002:	68da      	ldr	r2, [r3, #12]
 8005004:	693b      	ldr	r3, [r7, #16]
 8005006:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 8005008:	693b      	ldr	r3, [r7, #16]
 800500a:	68fa      	ldr	r2, [r7, #12]
 800500c:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 800500e:	693b      	ldr	r3, [r7, #16]
 8005010:	68ba      	ldr	r2, [r7, #8]
 8005012:	615a      	str	r2, [r3, #20]
    return (out);
 8005014:	68bb      	ldr	r3, [r7, #8]
//		Rev_posi_PID.Ki = 0;
//	} else {
//		Rev_posi_PID.Ki = 1;
//	}

	V_rev_posi_PID = arm_pid_f32(&Rev_posi_PID, delta_posi);
 8005016:	4a0a      	ldr	r2, [pc, #40]	@ (8005040 <Revolute_position_control+0xec>)
 8005018:	6013      	str	r3, [r2, #0]

//	if (V_rev_posi_PID > 24) {
//		V_rev_posi_PID = 24;
//	}

	error_posi_rev[1] = error_posi_rev[0];
 800501a:	4b07      	ldr	r3, [pc, #28]	@ (8005038 <Revolute_position_control+0xe4>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	4a06      	ldr	r2, [pc, #24]	@ (8005038 <Revolute_position_control+0xe4>)
 8005020:	6053      	str	r3, [r2, #4]
	return V_rev_posi_PID;
 8005022:	4b07      	ldr	r3, [pc, #28]	@ (8005040 <Revolute_position_control+0xec>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	ee07 3a90 	vmov	s15, r3
}
 800502a:	eeb0 0a67 	vmov.f32	s0, s15
 800502e:	371c      	adds	r7, #28
 8005030:	46bd      	mov	sp, r7
 8005032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005036:	4770      	bx	lr
 8005038:	20000e7c 	.word	0x20000e7c
 800503c:	20000e4c 	.word	0x20000e4c
 8005040:	20000e78 	.word	0x20000e78

08005044 <Revolute_velocity_control>:

float Revolute_velocity_control(float delta_velo) {
 8005044:	b480      	push	{r7}
 8005046:	b087      	sub	sp, #28
 8005048:	af00      	add	r7, sp, #0
 800504a:	ed87 0a01 	vstr	s0, [r7, #4]
	int anti_windup;
	error_velo_rev[0] = delta_velo;
 800504e:	4a47      	ldr	r2, [pc, #284]	@ (800516c <Revolute_velocity_control+0x128>)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6013      	str	r3, [r2, #0]
//	Rev_velo_PID.Kp = 0.01;

	if (error_velo_rev[0] < 0 && error_velo_rev[1] > 0) {
 8005054:	4b45      	ldr	r3, [pc, #276]	@ (800516c <Revolute_velocity_control+0x128>)
 8005056:	edd3 7a00 	vldr	s15, [r3]
 800505a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800505e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005062:	d50a      	bpl.n	800507a <Revolute_velocity_control+0x36>
 8005064:	4b41      	ldr	r3, [pc, #260]	@ (800516c <Revolute_velocity_control+0x128>)
 8005066:	edd3 7a01 	vldr	s15, [r3, #4]
 800506a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800506e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005072:	dd02      	ble.n	800507a <Revolute_velocity_control+0x36>
		anti_windup = 0;
 8005074:	2300      	movs	r3, #0
 8005076:	617b      	str	r3, [r7, #20]
 8005078:	e014      	b.n	80050a4 <Revolute_velocity_control+0x60>
	} else if (error_velo_rev[0] > 0 && error_velo_rev[1] < 0) {
 800507a:	4b3c      	ldr	r3, [pc, #240]	@ (800516c <Revolute_velocity_control+0x128>)
 800507c:	edd3 7a00 	vldr	s15, [r3]
 8005080:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005084:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005088:	dd0a      	ble.n	80050a0 <Revolute_velocity_control+0x5c>
 800508a:	4b38      	ldr	r3, [pc, #224]	@ (800516c <Revolute_velocity_control+0x128>)
 800508c:	edd3 7a01 	vldr	s15, [r3, #4]
 8005090:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005094:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005098:	d502      	bpl.n	80050a0 <Revolute_velocity_control+0x5c>
		anti_windup = 0;
 800509a:	2300      	movs	r3, #0
 800509c:	617b      	str	r3, [r7, #20]
 800509e:	e001      	b.n	80050a4 <Revolute_velocity_control+0x60>
	} else {
		anti_windup = 1;
 80050a0:	2301      	movs	r3, #1
 80050a2:	617b      	str	r3, [r7, #20]
	}

	if (V_rev_velo_PID >= 18 && anti_windup == 0) {
 80050a4:	4b32      	ldr	r3, [pc, #200]	@ (8005170 <Revolute_velocity_control+0x12c>)
 80050a6:	edd3 7a00 	vldr	s15, [r3]
 80050aa:	eeb3 7a02 	vmov.f32	s14, #50	@ 0x41900000  18.0
 80050ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 80050b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050b6:	db07      	blt.n	80050c8 <Revolute_velocity_control+0x84>
 80050b8:	697b      	ldr	r3, [r7, #20]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d104      	bne.n	80050c8 <Revolute_velocity_control+0x84>
		Rev_velo_PID.Ki = 0;
 80050be:	4b2d      	ldr	r3, [pc, #180]	@ (8005174 <Revolute_velocity_control+0x130>)
 80050c0:	f04f 0200 	mov.w	r2, #0
 80050c4:	61da      	str	r2, [r3, #28]
 80050c6:	e002      	b.n	80050ce <Revolute_velocity_control+0x8a>
	} else {
		Rev_velo_PID.Ki = 0.001;
 80050c8:	4b2a      	ldr	r3, [pc, #168]	@ (8005174 <Revolute_velocity_control+0x130>)
 80050ca:	4a2b      	ldr	r2, [pc, #172]	@ (8005178 <Revolute_velocity_control+0x134>)
 80050cc:	61da      	str	r2, [r3, #28]
	}

	if (V_rev_velo_PID > 18) {
 80050ce:	4b28      	ldr	r3, [pc, #160]	@ (8005170 <Revolute_velocity_control+0x12c>)
 80050d0:	edd3 7a00 	vldr	s15, [r3]
 80050d4:	eeb3 7a02 	vmov.f32	s14, #50	@ 0x41900000  18.0
 80050d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80050dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050e0:	dd02      	ble.n	80050e8 <Revolute_velocity_control+0xa4>
		V_rev_velo_PID = 18;
 80050e2:	4b23      	ldr	r3, [pc, #140]	@ (8005170 <Revolute_velocity_control+0x12c>)
 80050e4:	4a25      	ldr	r2, [pc, #148]	@ (800517c <Revolute_velocity_control+0x138>)
 80050e6:	601a      	str	r2, [r3, #0]
 80050e8:	4b22      	ldr	r3, [pc, #136]	@ (8005174 <Revolute_velocity_control+0x130>)
 80050ea:	613b      	str	r3, [r7, #16]
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	60fb      	str	r3, [r7, #12]
    out = (S->A0 * in) +
 80050f0:	693b      	ldr	r3, [r7, #16]
 80050f2:	ed93 7a00 	vldr	s14, [r3]
 80050f6:	edd7 7a03 	vldr	s15, [r7, #12]
 80050fa:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 80050fe:	693b      	ldr	r3, [r7, #16]
 8005100:	edd3 6a01 	vldr	s13, [r3, #4]
 8005104:	693b      	ldr	r3, [r7, #16]
 8005106:	edd3 7a03 	vldr	s15, [r3, #12]
 800510a:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 800510e:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8005112:	693b      	ldr	r3, [r7, #16]
 8005114:	edd3 6a02 	vldr	s13, [r3, #8]
 8005118:	693b      	ldr	r3, [r7, #16]
 800511a:	edd3 7a04 	vldr	s15, [r3, #16]
 800511e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005122:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005126:	693b      	ldr	r3, [r7, #16]
 8005128:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 800512c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005130:	edc7 7a02 	vstr	s15, [r7, #8]
    S->state[1] = S->state[0];
 8005134:	693b      	ldr	r3, [r7, #16]
 8005136:	68da      	ldr	r2, [r3, #12]
 8005138:	693b      	ldr	r3, [r7, #16]
 800513a:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 800513c:	693b      	ldr	r3, [r7, #16]
 800513e:	68fa      	ldr	r2, [r7, #12]
 8005140:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8005142:	693b      	ldr	r3, [r7, #16]
 8005144:	68ba      	ldr	r2, [r7, #8]
 8005146:	615a      	str	r2, [r3, #20]
    return (out);
 8005148:	68bb      	ldr	r3, [r7, #8]
	}

	V_rev_velo_PID = arm_pid_f32(&Rev_velo_PID, delta_velo);
 800514a:	4a09      	ldr	r2, [pc, #36]	@ (8005170 <Revolute_velocity_control+0x12c>)
 800514c:	6013      	str	r3, [r2, #0]
	error_velo_rev[1] = error_velo_rev[0];
 800514e:	4b07      	ldr	r3, [pc, #28]	@ (800516c <Revolute_velocity_control+0x128>)
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	4a06      	ldr	r2, [pc, #24]	@ (800516c <Revolute_velocity_control+0x128>)
 8005154:	6053      	str	r3, [r2, #4]
	return V_rev_velo_PID;
 8005156:	4b06      	ldr	r3, [pc, #24]	@ (8005170 <Revolute_velocity_control+0x12c>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	ee07 3a90 	vmov	s15, r3
}
 800515e:	eeb0 0a67 	vmov.f32	s0, s15
 8005162:	371c      	adds	r7, #28
 8005164:	46bd      	mov	sp, r7
 8005166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516a:	4770      	bx	lr
 800516c:	20000ebc 	.word	0x20000ebc
 8005170:	20000eb4 	.word	0x20000eb4
 8005174:	20000e88 	.word	0x20000e88
 8005178:	3a83126f 	.word	0x3a83126f
 800517c:	41900000 	.word	0x41900000

08005180 <voltage_to_pwm>:

float voltage_to_pwm(float voltage) {
 8005180:	b480      	push	{r7}
 8005182:	b085      	sub	sp, #20
 8005184:	af00      	add	r7, sp, #0
 8005186:	ed87 0a01 	vstr	s0, [r7, #4]
	float pwm = (voltage * 65535) / 24;
 800518a:	edd7 7a01 	vldr	s15, [r7, #4]
 800518e:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 80051b8 <voltage_to_pwm+0x38>
 8005192:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005196:	eef3 6a08 	vmov.f32	s13, #56	@ 0x41c00000  24.0
 800519a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800519e:	edc7 7a03 	vstr	s15, [r7, #12]
	return pwm;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	ee07 3a90 	vmov	s15, r3
}
 80051a8:	eeb0 0a67 	vmov.f32	s0, s15
 80051ac:	3714      	adds	r7, #20
 80051ae:	46bd      	mov	sp, r7
 80051b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b4:	4770      	bx	lr
 80051b6:	bf00      	nop
 80051b8:	477fff00 	.word	0x477fff00
 80051bc:	00000000 	.word	0x00000000

080051c0 <Revolute_dis>:
//	float load = 0.01 / (2.0 * (22.0/7.0) * 4.0 * motor.Kt_Pri);
//	voltage_dis = (disturbance_feedforward_pri(&motor, load)) * (0.3*9.81) * gain_disturbance; // อย่าลืมคูณ sin(theta)
//	return voltage_dis;
//}

float Revolute_dis() {
 80051c0:	b5b0      	push	{r4, r5, r7, lr}
 80051c2:	af00      	add	r7, sp, #0
	load = (8.2 * 9.81 * 0.45
			* sinf(Encoder_GetPosition(&encoder2) / (100.0 / 30.0)))
 80051c4:	486c      	ldr	r0, [pc, #432]	@ (8005378 <Revolute_dis+0x1b8>)
 80051c6:	f7fc ff29 	bl	800201c <Encoder_GetPosition>
 80051ca:	ee10 3a10 	vmov	r3, s0
 80051ce:	4618      	mov	r0, r3
 80051d0:	f7fb f986 	bl	80004e0 <__aeabi_f2d>
 80051d4:	a35e      	add	r3, pc, #376	@ (adr r3, 8005350 <Revolute_dis+0x190>)
 80051d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051da:	f7fb fb03 	bl	80007e4 <__aeabi_ddiv>
 80051de:	4602      	mov	r2, r0
 80051e0:	460b      	mov	r3, r1
 80051e2:	4610      	mov	r0, r2
 80051e4:	4619      	mov	r1, r3
 80051e6:	f7fb fca3 	bl	8000b30 <__aeabi_d2f>
 80051ea:	4603      	mov	r3, r0
 80051ec:	ee00 3a10 	vmov	s0, r3
 80051f0:	f00a fa1a 	bl	800f628 <sinf>
 80051f4:	ee10 3a10 	vmov	r3, s0
 80051f8:	4618      	mov	r0, r3
 80051fa:	f7fb f971 	bl	80004e0 <__aeabi_f2d>
 80051fe:	a356      	add	r3, pc, #344	@ (adr r3, 8005358 <Revolute_dis+0x198>)
 8005200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005204:	f7fb f9c4 	bl	8000590 <__aeabi_dmul>
 8005208:	4602      	mov	r2, r0
 800520a:	460b      	mov	r3, r1
 800520c:	4614      	mov	r4, r2
 800520e:	461d      	mov	r5, r3
			+ (0.3 * 9.81
					* sinf(Encoder_GetPosition(&encoder2) / (100.0 / 30.0))
 8005210:	4859      	ldr	r0, [pc, #356]	@ (8005378 <Revolute_dis+0x1b8>)
 8005212:	f7fc ff03 	bl	800201c <Encoder_GetPosition>
 8005216:	ee10 3a10 	vmov	r3, s0
 800521a:	4618      	mov	r0, r3
 800521c:	f7fb f960 	bl	80004e0 <__aeabi_f2d>
 8005220:	a34b      	add	r3, pc, #300	@ (adr r3, 8005350 <Revolute_dis+0x190>)
 8005222:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005226:	f7fb fadd 	bl	80007e4 <__aeabi_ddiv>
 800522a:	4602      	mov	r2, r0
 800522c:	460b      	mov	r3, r1
 800522e:	4610      	mov	r0, r2
 8005230:	4619      	mov	r1, r3
 8005232:	f7fb fc7d 	bl	8000b30 <__aeabi_d2f>
 8005236:	4603      	mov	r3, r0
 8005238:	ee00 3a10 	vmov	s0, r3
 800523c:	f00a f9f4 	bl	800f628 <sinf>
 8005240:	ee10 3a10 	vmov	r3, s0
 8005244:	4618      	mov	r0, r3
 8005246:	f7fb f94b 	bl	80004e0 <__aeabi_f2d>
 800524a:	a345      	add	r3, pc, #276	@ (adr r3, 8005360 <Revolute_dis+0x1a0>)
 800524c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005250:	f7fb f99e 	bl	8000590 <__aeabi_dmul>
 8005254:	4602      	mov	r2, r0
 8005256:	460b      	mov	r3, r1
 8005258:	4610      	mov	r0, r2
 800525a:	4619      	mov	r1, r3
					* 0.4);
 800525c:	a342      	add	r3, pc, #264	@ (adr r3, 8005368 <Revolute_dis+0x1a8>)
 800525e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005262:	f7fb f995 	bl	8000590 <__aeabi_dmul>
 8005266:	4602      	mov	r2, r0
 8005268:	460b      	mov	r3, r1
			+ (0.3 * 9.81
 800526a:	4620      	mov	r0, r4
 800526c:	4629      	mov	r1, r5
 800526e:	f7fa ffd9 	bl	8000224 <__adddf3>
 8005272:	4602      	mov	r2, r0
 8005274:	460b      	mov	r3, r1
 8005276:	4610      	mov	r0, r2
 8005278:	4619      	mov	r1, r3
 800527a:	f7fb fc59 	bl	8000b30 <__aeabi_d2f>
 800527e:	4603      	mov	r3, r0
	load = (8.2 * 9.81 * 0.45
 8005280:	4a3e      	ldr	r2, [pc, #248]	@ (800537c <Revolute_dis+0x1bc>)
 8005282:	6013      	str	r3, [r2, #0]
	sine = sinf(Encoder_GetPosition(&encoder2) / (100.0 / 30.0));
 8005284:	483c      	ldr	r0, [pc, #240]	@ (8005378 <Revolute_dis+0x1b8>)
 8005286:	f7fc fec9 	bl	800201c <Encoder_GetPosition>
 800528a:	ee10 3a10 	vmov	r3, s0
 800528e:	4618      	mov	r0, r3
 8005290:	f7fb f926 	bl	80004e0 <__aeabi_f2d>
 8005294:	a32e      	add	r3, pc, #184	@ (adr r3, 8005350 <Revolute_dis+0x190>)
 8005296:	e9d3 2300 	ldrd	r2, r3, [r3]
 800529a:	f7fb faa3 	bl	80007e4 <__aeabi_ddiv>
 800529e:	4602      	mov	r2, r0
 80052a0:	460b      	mov	r3, r1
 80052a2:	4610      	mov	r0, r2
 80052a4:	4619      	mov	r1, r3
 80052a6:	f7fb fc43 	bl	8000b30 <__aeabi_d2f>
 80052aa:	4603      	mov	r3, r0
 80052ac:	ee00 3a10 	vmov	s0, r3
 80052b0:	f00a f9ba 	bl	800f628 <sinf>
 80052b4:	eef0 7a40 	vmov.f32	s15, s0
 80052b8:	4b31      	ldr	r3, [pc, #196]	@ (8005380 <Revolute_dis+0x1c0>)
 80052ba:	edc3 7a00 	vstr	s15, [r3]
	encoder = Encoder_GetPosition(&encoder2) / (100.0 / 30.0);
 80052be:	482e      	ldr	r0, [pc, #184]	@ (8005378 <Revolute_dis+0x1b8>)
 80052c0:	f7fc feac 	bl	800201c <Encoder_GetPosition>
 80052c4:	ee10 3a10 	vmov	r3, s0
 80052c8:	4618      	mov	r0, r3
 80052ca:	f7fb f909 	bl	80004e0 <__aeabi_f2d>
 80052ce:	a320      	add	r3, pc, #128	@ (adr r3, 8005350 <Revolute_dis+0x190>)
 80052d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052d4:	f7fb fa86 	bl	80007e4 <__aeabi_ddiv>
 80052d8:	4602      	mov	r2, r0
 80052da:	460b      	mov	r3, r1
 80052dc:	4610      	mov	r0, r2
 80052de:	4619      	mov	r1, r3
 80052e0:	f7fb fc26 	bl	8000b30 <__aeabi_d2f>
 80052e4:	4603      	mov	r3, r0
 80052e6:	4a27      	ldr	r2, [pc, #156]	@ (8005384 <Revolute_dis+0x1c4>)
 80052e8:	6013      	str	r3, [r2, #0]
//	load = (8.2 * 9.81 * 0.45 * cosf(1.57)) + (0.3 * 9.81 * cosf(1.57) * 0.4);
//	voltage_dis_rev = (disturbance_feedforward(&Rev_motor, load)) * gain_disturbance_rev;
	voltage_dis_rev = (Rev_motor.R_Rev / Rev_motor.Ke_Rev) * kf_rev.x_data[2]
 80052ea:	4b27      	ldr	r3, [pc, #156]	@ (8005388 <Revolute_dis+0x1c8>)
 80052ec:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 80052f0:	4b25      	ldr	r3, [pc, #148]	@ (8005388 <Revolute_dis+0x1c8>)
 80052f2:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80052f6:	f7fb fa75 	bl	80007e4 <__aeabi_ddiv>
 80052fa:	4602      	mov	r2, r0
 80052fc:	460b      	mov	r3, r1
 80052fe:	4614      	mov	r4, r2
 8005300:	461d      	mov	r5, r3
 8005302:	4b22      	ldr	r3, [pc, #136]	@ (800538c <Revolute_dis+0x1cc>)
 8005304:	f8d3 323c 	ldr.w	r3, [r3, #572]	@ 0x23c
 8005308:	4618      	mov	r0, r3
 800530a:	f7fb f8e9 	bl	80004e0 <__aeabi_f2d>
 800530e:	4602      	mov	r2, r0
 8005310:	460b      	mov	r3, r1
			* 1.0 / 3.3;
 8005312:	4620      	mov	r0, r4
 8005314:	4629      	mov	r1, r5
 8005316:	f7fb f93b 	bl	8000590 <__aeabi_dmul>
 800531a:	4602      	mov	r2, r0
 800531c:	460b      	mov	r3, r1
 800531e:	4610      	mov	r0, r2
 8005320:	4619      	mov	r1, r3
 8005322:	a313      	add	r3, pc, #76	@ (adr r3, 8005370 <Revolute_dis+0x1b0>)
 8005324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005328:	f7fb fa5c 	bl	80007e4 <__aeabi_ddiv>
 800532c:	4602      	mov	r2, r0
 800532e:	460b      	mov	r3, r1
 8005330:	4610      	mov	r0, r2
 8005332:	4619      	mov	r1, r3
 8005334:	f7fb fbfc 	bl	8000b30 <__aeabi_d2f>
 8005338:	4603      	mov	r3, r0
	voltage_dis_rev = (Rev_motor.R_Rev / Rev_motor.Ke_Rev) * kf_rev.x_data[2]
 800533a:	4a15      	ldr	r2, [pc, #84]	@ (8005390 <Revolute_dis+0x1d0>)
 800533c:	6013      	str	r3, [r2, #0]
	return voltage_dis_rev;
 800533e:	4b14      	ldr	r3, [pc, #80]	@ (8005390 <Revolute_dis+0x1d0>)
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	ee07 3a90 	vmov	s15, r3
}
 8005346:	eeb0 0a67 	vmov.f32	s0, s15
 800534a:	bdb0      	pop	{r4, r5, r7, pc}
 800534c:	f3af 8000 	nop.w
 8005350:	aaaaaaab 	.word	0xaaaaaaab
 8005354:	400aaaaa 	.word	0x400aaaaa
 8005358:	8e219652 	.word	0x8e219652
 800535c:	40421975 	.word	0x40421975
 8005360:	95810625 	.word	0x95810625
 8005364:	40078b43 	.word	0x40078b43
 8005368:	9999999a 	.word	0x9999999a
 800536c:	3fd99999 	.word	0x3fd99999
 8005370:	66666666 	.word	0x66666666
 8005374:	400a6666 	.word	0x400a6666
 8005378:	200003f8 	.word	0x200003f8
 800537c:	200015a8 	.word	0x200015a8
 8005380:	200015ac 	.word	0x200015ac
 8005384:	200015b0 	.word	0x200015b0
 8005388:	20001550 	.word	0x20001550
 800538c:	200011f4 	.word	0x200011f4
 8005390:	20000db8 	.word	0x20000db8

08005394 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005394:	b480      	push	{r7}
 8005396:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005398:	b672      	cpsid	i
}
 800539a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800539c:	bf00      	nop
 800539e:	e7fd      	b.n	800539c <Error_Handler+0x8>

080053a0 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80053a4:	4b1b      	ldr	r3, [pc, #108]	@ (8005414 <MX_SPI1_Init+0x74>)
 80053a6:	4a1c      	ldr	r2, [pc, #112]	@ (8005418 <MX_SPI1_Init+0x78>)
 80053a8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80053aa:	4b1a      	ldr	r3, [pc, #104]	@ (8005414 <MX_SPI1_Init+0x74>)
 80053ac:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80053b0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80053b2:	4b18      	ldr	r3, [pc, #96]	@ (8005414 <MX_SPI1_Init+0x74>)
 80053b4:	2200      	movs	r2, #0
 80053b6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80053b8:	4b16      	ldr	r3, [pc, #88]	@ (8005414 <MX_SPI1_Init+0x74>)
 80053ba:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80053be:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80053c0:	4b14      	ldr	r3, [pc, #80]	@ (8005414 <MX_SPI1_Init+0x74>)
 80053c2:	2202      	movs	r2, #2
 80053c4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80053c6:	4b13      	ldr	r3, [pc, #76]	@ (8005414 <MX_SPI1_Init+0x74>)
 80053c8:	2201      	movs	r2, #1
 80053ca:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80053cc:	4b11      	ldr	r3, [pc, #68]	@ (8005414 <MX_SPI1_Init+0x74>)
 80053ce:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80053d2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80053d4:	4b0f      	ldr	r3, [pc, #60]	@ (8005414 <MX_SPI1_Init+0x74>)
 80053d6:	2238      	movs	r2, #56	@ 0x38
 80053d8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_LSB;
 80053da:	4b0e      	ldr	r3, [pc, #56]	@ (8005414 <MX_SPI1_Init+0x74>)
 80053dc:	2280      	movs	r2, #128	@ 0x80
 80053de:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80053e0:	4b0c      	ldr	r3, [pc, #48]	@ (8005414 <MX_SPI1_Init+0x74>)
 80053e2:	2200      	movs	r2, #0
 80053e4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80053e6:	4b0b      	ldr	r3, [pc, #44]	@ (8005414 <MX_SPI1_Init+0x74>)
 80053e8:	2200      	movs	r2, #0
 80053ea:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80053ec:	4b09      	ldr	r3, [pc, #36]	@ (8005414 <MX_SPI1_Init+0x74>)
 80053ee:	2207      	movs	r2, #7
 80053f0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80053f2:	4b08      	ldr	r3, [pc, #32]	@ (8005414 <MX_SPI1_Init+0x74>)
 80053f4:	2200      	movs	r2, #0
 80053f6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80053f8:	4b06      	ldr	r3, [pc, #24]	@ (8005414 <MX_SPI1_Init+0x74>)
 80053fa:	2200      	movs	r2, #0
 80053fc:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80053fe:	4805      	ldr	r0, [pc, #20]	@ (8005414 <MX_SPI1_Init+0x74>)
 8005400:	f004 f844 	bl	800948c <HAL_SPI_Init>
 8005404:	4603      	mov	r3, r0
 8005406:	2b00      	cmp	r3, #0
 8005408:	d001      	beq.n	800540e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800540a:	f7ff ffc3 	bl	8005394 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800540e:	bf00      	nop
 8005410:	bd80      	pop	{r7, pc}
 8005412:	bf00      	nop
 8005414:	20001680 	.word	0x20001680
 8005418:	40013000 	.word	0x40013000

0800541c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800541c:	b580      	push	{r7, lr}
 800541e:	b08a      	sub	sp, #40	@ 0x28
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005424:	f107 0314 	add.w	r3, r7, #20
 8005428:	2200      	movs	r2, #0
 800542a:	601a      	str	r2, [r3, #0]
 800542c:	605a      	str	r2, [r3, #4]
 800542e:	609a      	str	r2, [r3, #8]
 8005430:	60da      	str	r2, [r3, #12]
 8005432:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	4a25      	ldr	r2, [pc, #148]	@ (80054d0 <HAL_SPI_MspInit+0xb4>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d144      	bne.n	80054c8 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800543e:	4b25      	ldr	r3, [pc, #148]	@ (80054d4 <HAL_SPI_MspInit+0xb8>)
 8005440:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005442:	4a24      	ldr	r2, [pc, #144]	@ (80054d4 <HAL_SPI_MspInit+0xb8>)
 8005444:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005448:	6613      	str	r3, [r2, #96]	@ 0x60
 800544a:	4b22      	ldr	r3, [pc, #136]	@ (80054d4 <HAL_SPI_MspInit+0xb8>)
 800544c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800544e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005452:	613b      	str	r3, [r7, #16]
 8005454:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005456:	4b1f      	ldr	r3, [pc, #124]	@ (80054d4 <HAL_SPI_MspInit+0xb8>)
 8005458:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800545a:	4a1e      	ldr	r2, [pc, #120]	@ (80054d4 <HAL_SPI_MspInit+0xb8>)
 800545c:	f043 0301 	orr.w	r3, r3, #1
 8005460:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005462:	4b1c      	ldr	r3, [pc, #112]	@ (80054d4 <HAL_SPI_MspInit+0xb8>)
 8005464:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005466:	f003 0301 	and.w	r3, r3, #1
 800546a:	60fb      	str	r3, [r7, #12]
 800546c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800546e:	4b19      	ldr	r3, [pc, #100]	@ (80054d4 <HAL_SPI_MspInit+0xb8>)
 8005470:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005472:	4a18      	ldr	r2, [pc, #96]	@ (80054d4 <HAL_SPI_MspInit+0xb8>)
 8005474:	f043 0302 	orr.w	r3, r3, #2
 8005478:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800547a:	4b16      	ldr	r3, [pc, #88]	@ (80054d4 <HAL_SPI_MspInit+0xb8>)
 800547c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800547e:	f003 0302 	and.w	r3, r3, #2
 8005482:	60bb      	str	r3, [r7, #8]
 8005484:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8005486:	2320      	movs	r3, #32
 8005488:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800548a:	2302      	movs	r3, #2
 800548c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800548e:	2300      	movs	r3, #0
 8005490:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005492:	2300      	movs	r3, #0
 8005494:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8005496:	2305      	movs	r3, #5
 8005498:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800549a:	f107 0314 	add.w	r3, r7, #20
 800549e:	4619      	mov	r1, r3
 80054a0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80054a4:	f002 fe10 	bl	80080c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80054a8:	2330      	movs	r3, #48	@ 0x30
 80054aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054ac:	2302      	movs	r3, #2
 80054ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054b0:	2300      	movs	r3, #0
 80054b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80054b4:	2300      	movs	r3, #0
 80054b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80054b8:	2305      	movs	r3, #5
 80054ba:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80054bc:	f107 0314 	add.w	r3, r7, #20
 80054c0:	4619      	mov	r1, r3
 80054c2:	4805      	ldr	r0, [pc, #20]	@ (80054d8 <HAL_SPI_MspInit+0xbc>)
 80054c4:	f002 fe00 	bl	80080c8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80054c8:	bf00      	nop
 80054ca:	3728      	adds	r7, #40	@ 0x28
 80054cc:	46bd      	mov	sp, r7
 80054ce:	bd80      	pop	{r7, pc}
 80054d0:	40013000 	.word	0x40013000
 80054d4:	40021000 	.word	0x40021000
 80054d8:	48000400 	.word	0x48000400

080054dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	b082      	sub	sp, #8
 80054e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80054e2:	4b0f      	ldr	r3, [pc, #60]	@ (8005520 <HAL_MspInit+0x44>)
 80054e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80054e6:	4a0e      	ldr	r2, [pc, #56]	@ (8005520 <HAL_MspInit+0x44>)
 80054e8:	f043 0301 	orr.w	r3, r3, #1
 80054ec:	6613      	str	r3, [r2, #96]	@ 0x60
 80054ee:	4b0c      	ldr	r3, [pc, #48]	@ (8005520 <HAL_MspInit+0x44>)
 80054f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80054f2:	f003 0301 	and.w	r3, r3, #1
 80054f6:	607b      	str	r3, [r7, #4]
 80054f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80054fa:	4b09      	ldr	r3, [pc, #36]	@ (8005520 <HAL_MspInit+0x44>)
 80054fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054fe:	4a08      	ldr	r2, [pc, #32]	@ (8005520 <HAL_MspInit+0x44>)
 8005500:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005504:	6593      	str	r3, [r2, #88]	@ 0x58
 8005506:	4b06      	ldr	r3, [pc, #24]	@ (8005520 <HAL_MspInit+0x44>)
 8005508:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800550a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800550e:	603b      	str	r3, [r7, #0]
 8005510:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8005512:	f003 f82f 	bl	8008574 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005516:	bf00      	nop
 8005518:	3708      	adds	r7, #8
 800551a:	46bd      	mov	sp, r7
 800551c:	bd80      	pop	{r7, pc}
 800551e:	bf00      	nop
 8005520:	40021000 	.word	0x40021000

08005524 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005524:	b480      	push	{r7}
 8005526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8005528:	bf00      	nop
 800552a:	e7fd      	b.n	8005528 <NMI_Handler+0x4>

0800552c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800552c:	b480      	push	{r7}
 800552e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005530:	bf00      	nop
 8005532:	e7fd      	b.n	8005530 <HardFault_Handler+0x4>

08005534 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005534:	b480      	push	{r7}
 8005536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005538:	bf00      	nop
 800553a:	e7fd      	b.n	8005538 <MemManage_Handler+0x4>

0800553c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800553c:	b480      	push	{r7}
 800553e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005540:	bf00      	nop
 8005542:	e7fd      	b.n	8005540 <BusFault_Handler+0x4>

08005544 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005544:	b480      	push	{r7}
 8005546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005548:	bf00      	nop
 800554a:	e7fd      	b.n	8005548 <UsageFault_Handler+0x4>

0800554c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800554c:	b480      	push	{r7}
 800554e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005550:	bf00      	nop
 8005552:	46bd      	mov	sp, r7
 8005554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005558:	4770      	bx	lr

0800555a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800555a:	b480      	push	{r7}
 800555c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800555e:	bf00      	nop
 8005560:	46bd      	mov	sp, r7
 8005562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005566:	4770      	bx	lr

08005568 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005568:	b480      	push	{r7}
 800556a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800556c:	bf00      	nop
 800556e:	46bd      	mov	sp, r7
 8005570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005574:	4770      	bx	lr

08005576 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005576:	b580      	push	{r7, lr}
 8005578:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800557a:	f000 fe7b 	bl	8006274 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800557e:	bf00      	nop
 8005580:	bd80      	pop	{r7, pc}
	...

08005584 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8005584:	b580      	push	{r7, lr}
 8005586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8005588:	4802      	ldr	r0, [pc, #8]	@ (8005594 <DMA1_Channel1_IRQHandler+0x10>)
 800558a:	f002 fc42 	bl	8007e12 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800558e:	bf00      	nop
 8005590:	bd80      	pop	{r7, pc}
 8005592:	bf00      	nop
 8005594:	20001d44 	.word	0x20001d44

08005598 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8005598:	b580      	push	{r7, lr}
 800559a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Limit_Switch_pen_1_Pin);
 800559c:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80055a0:	f002 ff2c 	bl	80083fc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80055a4:	bf00      	nop
 80055a6:	bd80      	pop	{r7, pc}

080055a8 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80055ac:	4802      	ldr	r0, [pc, #8]	@ (80055b8 <TIM1_BRK_TIM15_IRQHandler+0x10>)
 80055ae:	f005 f90d 	bl	800a7cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 80055b2:	bf00      	nop
 80055b4:	bd80      	pop	{r7, pc}
 80055b6:	bf00      	nop
 80055b8:	200016e4 	.word	0x200016e4

080055bc <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80055c0:	4803      	ldr	r0, [pc, #12]	@ (80055d0 <TIM1_UP_TIM16_IRQHandler+0x14>)
 80055c2:	f005 f903 	bl	800a7cc <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 80055c6:	4803      	ldr	r0, [pc, #12]	@ (80055d4 <TIM1_UP_TIM16_IRQHandler+0x18>)
 80055c8:	f005 f900 	bl	800a7cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80055cc:	bf00      	nop
 80055ce:	bd80      	pop	{r7, pc}
 80055d0:	200016e4 	.word	0x200016e4
 80055d4:	20001ae0 	.word	0x20001ae0

080055d8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80055dc:	4802      	ldr	r0, [pc, #8]	@ (80055e8 <TIM2_IRQHandler+0x10>)
 80055de:	f005 f8f5 	bl	800a7cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80055e2:	bf00      	nop
 80055e4:	bd80      	pop	{r7, pc}
 80055e6:	bf00      	nop
 80055e8:	200017b0 	.word	0x200017b0

080055ec <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80055f0:	4802      	ldr	r0, [pc, #8]	@ (80055fc <USART2_IRQHandler+0x10>)
 80055f2:	f006 ffef 	bl	800c5d4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80055f6:	bf00      	nop
 80055f8:	bd80      	pop	{r7, pc}
 80055fa:	bf00      	nop
 80055fc:	20001c78 	.word	0x20001c78

08005600 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8005600:	b580      	push	{r7, lr}
 8005602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Limit_Switch_pen_2_Pin);
 8005604:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8005608:	f002 fef8 	bl	80083fc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Emergency_Pin);
 800560c:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8005610:	f002 fef4 	bl	80083fc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Proximity_sensor_Pin);
 8005614:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8005618:	f002 fef0 	bl	80083fc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Proximity_Left_Pin);
 800561c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8005620:	f002 feec 	bl	80083fc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Limit_Switch_Prismatic1_Pin);
 8005624:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8005628:	f002 fee8 	bl	80083fc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Limit_Switch_Prismatic2_Pin);
 800562c:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8005630:	f002 fee4 	bl	80083fc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8005634:	bf00      	nop
 8005636:	bd80      	pop	{r7, pc}

08005638 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8005638:	b480      	push	{r7}
 800563a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800563c:	4b06      	ldr	r3, [pc, #24]	@ (8005658 <SystemInit+0x20>)
 800563e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005642:	4a05      	ldr	r2, [pc, #20]	@ (8005658 <SystemInit+0x20>)
 8005644:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005648:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800564c:	bf00      	nop
 800564e:	46bd      	mov	sp, r7
 8005650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005654:	4770      	bx	lr
 8005656:	bf00      	nop
 8005658:	e000ed00 	.word	0xe000ed00

0800565c <MX_TIM1_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim20;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800565c:	b580      	push	{r7, lr}
 800565e:	b088      	sub	sp, #32
 8005660:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005662:	f107 0310 	add.w	r3, r7, #16
 8005666:	2200      	movs	r2, #0
 8005668:	601a      	str	r2, [r3, #0]
 800566a:	605a      	str	r2, [r3, #4]
 800566c:	609a      	str	r2, [r3, #8]
 800566e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005670:	1d3b      	adds	r3, r7, #4
 8005672:	2200      	movs	r2, #0
 8005674:	601a      	str	r2, [r3, #0]
 8005676:	605a      	str	r2, [r3, #4]
 8005678:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800567a:	4b20      	ldr	r3, [pc, #128]	@ (80056fc <MX_TIM1_Init+0xa0>)
 800567c:	4a20      	ldr	r2, [pc, #128]	@ (8005700 <MX_TIM1_Init+0xa4>)
 800567e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8005680:	4b1e      	ldr	r3, [pc, #120]	@ (80056fc <MX_TIM1_Init+0xa0>)
 8005682:	2200      	movs	r2, #0
 8005684:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005686:	4b1d      	ldr	r3, [pc, #116]	@ (80056fc <MX_TIM1_Init+0xa0>)
 8005688:	2200      	movs	r2, #0
 800568a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 60000;
 800568c:	4b1b      	ldr	r3, [pc, #108]	@ (80056fc <MX_TIM1_Init+0xa0>)
 800568e:	f64e 2260 	movw	r2, #60000	@ 0xea60
 8005692:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005694:	4b19      	ldr	r3, [pc, #100]	@ (80056fc <MX_TIM1_Init+0xa0>)
 8005696:	2200      	movs	r2, #0
 8005698:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800569a:	4b18      	ldr	r3, [pc, #96]	@ (80056fc <MX_TIM1_Init+0xa0>)
 800569c:	2200      	movs	r2, #0
 800569e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80056a0:	4b16      	ldr	r3, [pc, #88]	@ (80056fc <MX_TIM1_Init+0xa0>)
 80056a2:	2200      	movs	r2, #0
 80056a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80056a6:	4815      	ldr	r0, [pc, #84]	@ (80056fc <MX_TIM1_Init+0xa0>)
 80056a8:	f004 fb1e 	bl	8009ce8 <HAL_TIM_Base_Init>
 80056ac:	4603      	mov	r3, r0
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d001      	beq.n	80056b6 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80056b2:	f7ff fe6f 	bl	8005394 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80056b6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80056ba:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80056bc:	f107 0310 	add.w	r3, r7, #16
 80056c0:	4619      	mov	r1, r3
 80056c2:	480e      	ldr	r0, [pc, #56]	@ (80056fc <MX_TIM1_Init+0xa0>)
 80056c4:	f005 fb8a 	bl	800addc <HAL_TIM_ConfigClockSource>
 80056c8:	4603      	mov	r3, r0
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d001      	beq.n	80056d2 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80056ce:	f7ff fe61 	bl	8005394 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80056d2:	2300      	movs	r3, #0
 80056d4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80056d6:	2300      	movs	r3, #0
 80056d8:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80056da:	2300      	movs	r3, #0
 80056dc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80056de:	1d3b      	adds	r3, r7, #4
 80056e0:	4619      	mov	r1, r3
 80056e2:	4806      	ldr	r0, [pc, #24]	@ (80056fc <MX_TIM1_Init+0xa0>)
 80056e4:	f006 fb60 	bl	800bda8 <HAL_TIMEx_MasterConfigSynchronization>
 80056e8:	4603      	mov	r3, r0
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d001      	beq.n	80056f2 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80056ee:	f7ff fe51 	bl	8005394 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80056f2:	bf00      	nop
 80056f4:	3720      	adds	r7, #32
 80056f6:	46bd      	mov	sp, r7
 80056f8:	bd80      	pop	{r7, pc}
 80056fa:	bf00      	nop
 80056fc:	200016e4 	.word	0x200016e4
 8005700:	40012c00 	.word	0x40012c00

08005704 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8005704:	b580      	push	{r7, lr}
 8005706:	b088      	sub	sp, #32
 8005708:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800570a:	f107 0310 	add.w	r3, r7, #16
 800570e:	2200      	movs	r2, #0
 8005710:	601a      	str	r2, [r3, #0]
 8005712:	605a      	str	r2, [r3, #4]
 8005714:	609a      	str	r2, [r3, #8]
 8005716:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005718:	1d3b      	adds	r3, r7, #4
 800571a:	2200      	movs	r2, #0
 800571c:	601a      	str	r2, [r3, #0]
 800571e:	605a      	str	r2, [r3, #4]
 8005720:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8005722:	4b1e      	ldr	r3, [pc, #120]	@ (800579c <MX_TIM2_Init+0x98>)
 8005724:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8005728:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 169;
 800572a:	4b1c      	ldr	r3, [pc, #112]	@ (800579c <MX_TIM2_Init+0x98>)
 800572c:	22a9      	movs	r2, #169	@ 0xa9
 800572e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005730:	4b1a      	ldr	r3, [pc, #104]	@ (800579c <MX_TIM2_Init+0x98>)
 8005732:	2200      	movs	r2, #0
 8005734:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8005736:	4b19      	ldr	r3, [pc, #100]	@ (800579c <MX_TIM2_Init+0x98>)
 8005738:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800573c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800573e:	4b17      	ldr	r3, [pc, #92]	@ (800579c <MX_TIM2_Init+0x98>)
 8005740:	2200      	movs	r2, #0
 8005742:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005744:	4b15      	ldr	r3, [pc, #84]	@ (800579c <MX_TIM2_Init+0x98>)
 8005746:	2200      	movs	r2, #0
 8005748:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800574a:	4814      	ldr	r0, [pc, #80]	@ (800579c <MX_TIM2_Init+0x98>)
 800574c:	f004 facc 	bl	8009ce8 <HAL_TIM_Base_Init>
 8005750:	4603      	mov	r3, r0
 8005752:	2b00      	cmp	r3, #0
 8005754:	d001      	beq.n	800575a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8005756:	f7ff fe1d 	bl	8005394 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800575a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800575e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8005760:	f107 0310 	add.w	r3, r7, #16
 8005764:	4619      	mov	r1, r3
 8005766:	480d      	ldr	r0, [pc, #52]	@ (800579c <MX_TIM2_Init+0x98>)
 8005768:	f005 fb38 	bl	800addc <HAL_TIM_ConfigClockSource>
 800576c:	4603      	mov	r3, r0
 800576e:	2b00      	cmp	r3, #0
 8005770:	d001      	beq.n	8005776 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8005772:	f7ff fe0f 	bl	8005394 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005776:	2300      	movs	r3, #0
 8005778:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800577a:	2300      	movs	r3, #0
 800577c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800577e:	1d3b      	adds	r3, r7, #4
 8005780:	4619      	mov	r1, r3
 8005782:	4806      	ldr	r0, [pc, #24]	@ (800579c <MX_TIM2_Init+0x98>)
 8005784:	f006 fb10 	bl	800bda8 <HAL_TIMEx_MasterConfigSynchronization>
 8005788:	4603      	mov	r3, r0
 800578a:	2b00      	cmp	r3, #0
 800578c:	d001      	beq.n	8005792 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800578e:	f7ff fe01 	bl	8005394 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8005792:	bf00      	nop
 8005794:	3720      	adds	r7, #32
 8005796:	46bd      	mov	sp, r7
 8005798:	bd80      	pop	{r7, pc}
 800579a:	bf00      	nop
 800579c:	200017b0 	.word	0x200017b0

080057a0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b08c      	sub	sp, #48	@ 0x30
 80057a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80057a6:	f107 030c 	add.w	r3, r7, #12
 80057aa:	2224      	movs	r2, #36	@ 0x24
 80057ac:	2100      	movs	r1, #0
 80057ae:	4618      	mov	r0, r3
 80057b0:	f009 fdc0 	bl	800f334 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80057b4:	463b      	mov	r3, r7
 80057b6:	2200      	movs	r2, #0
 80057b8:	601a      	str	r2, [r3, #0]
 80057ba:	605a      	str	r2, [r3, #4]
 80057bc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80057be:	4b21      	ldr	r3, [pc, #132]	@ (8005844 <MX_TIM3_Init+0xa4>)
 80057c0:	4a21      	ldr	r2, [pc, #132]	@ (8005848 <MX_TIM3_Init+0xa8>)
 80057c2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80057c4:	4b1f      	ldr	r3, [pc, #124]	@ (8005844 <MX_TIM3_Init+0xa4>)
 80057c6:	2200      	movs	r2, #0
 80057c8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80057ca:	4b1e      	ldr	r3, [pc, #120]	@ (8005844 <MX_TIM3_Init+0xa4>)
 80057cc:	2200      	movs	r2, #0
 80057ce:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 59999;
 80057d0:	4b1c      	ldr	r3, [pc, #112]	@ (8005844 <MX_TIM3_Init+0xa4>)
 80057d2:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 80057d6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80057d8:	4b1a      	ldr	r3, [pc, #104]	@ (8005844 <MX_TIM3_Init+0xa4>)
 80057da:	2200      	movs	r2, #0
 80057dc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80057de:	4b19      	ldr	r3, [pc, #100]	@ (8005844 <MX_TIM3_Init+0xa4>)
 80057e0:	2200      	movs	r2, #0
 80057e2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80057e4:	2303      	movs	r3, #3
 80057e6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80057e8:	2300      	movs	r3, #0
 80057ea:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80057ec:	2301      	movs	r3, #1
 80057ee:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80057f0:	2300      	movs	r3, #0
 80057f2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80057f4:	2300      	movs	r3, #0
 80057f6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80057f8:	2300      	movs	r3, #0
 80057fa:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80057fc:	2301      	movs	r3, #1
 80057fe:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8005800:	2300      	movs	r3, #0
 8005802:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8005804:	2300      	movs	r3, #0
 8005806:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8005808:	f107 030c 	add.w	r3, r7, #12
 800580c:	4619      	mov	r1, r3
 800580e:	480d      	ldr	r0, [pc, #52]	@ (8005844 <MX_TIM3_Init+0xa4>)
 8005810:	f004 fe9a 	bl	800a548 <HAL_TIM_Encoder_Init>
 8005814:	4603      	mov	r3, r0
 8005816:	2b00      	cmp	r3, #0
 8005818:	d001      	beq.n	800581e <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 800581a:	f7ff fdbb 	bl	8005394 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800581e:	2300      	movs	r3, #0
 8005820:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005822:	2300      	movs	r3, #0
 8005824:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8005826:	463b      	mov	r3, r7
 8005828:	4619      	mov	r1, r3
 800582a:	4806      	ldr	r0, [pc, #24]	@ (8005844 <MX_TIM3_Init+0xa4>)
 800582c:	f006 fabc 	bl	800bda8 <HAL_TIMEx_MasterConfigSynchronization>
 8005830:	4603      	mov	r3, r0
 8005832:	2b00      	cmp	r3, #0
 8005834:	d001      	beq.n	800583a <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8005836:	f7ff fdad 	bl	8005394 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800583a:	bf00      	nop
 800583c:	3730      	adds	r7, #48	@ 0x30
 800583e:	46bd      	mov	sp, r7
 8005840:	bd80      	pop	{r7, pc}
 8005842:	bf00      	nop
 8005844:	2000187c 	.word	0x2000187c
 8005848:	40000400 	.word	0x40000400

0800584c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800584c:	b580      	push	{r7, lr}
 800584e:	b08c      	sub	sp, #48	@ 0x30
 8005850:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8005852:	f107 030c 	add.w	r3, r7, #12
 8005856:	2224      	movs	r2, #36	@ 0x24
 8005858:	2100      	movs	r1, #0
 800585a:	4618      	mov	r0, r3
 800585c:	f009 fd6a 	bl	800f334 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005860:	463b      	mov	r3, r7
 8005862:	2200      	movs	r2, #0
 8005864:	601a      	str	r2, [r3, #0]
 8005866:	605a      	str	r2, [r3, #4]
 8005868:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800586a:	4b21      	ldr	r3, [pc, #132]	@ (80058f0 <MX_TIM4_Init+0xa4>)
 800586c:	4a21      	ldr	r2, [pc, #132]	@ (80058f4 <MX_TIM4_Init+0xa8>)
 800586e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8005870:	4b1f      	ldr	r3, [pc, #124]	@ (80058f0 <MX_TIM4_Init+0xa4>)
 8005872:	2200      	movs	r2, #0
 8005874:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005876:	4b1e      	ldr	r3, [pc, #120]	@ (80058f0 <MX_TIM4_Init+0xa4>)
 8005878:	2200      	movs	r2, #0
 800587a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 59999;
 800587c:	4b1c      	ldr	r3, [pc, #112]	@ (80058f0 <MX_TIM4_Init+0xa4>)
 800587e:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 8005882:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005884:	4b1a      	ldr	r3, [pc, #104]	@ (80058f0 <MX_TIM4_Init+0xa4>)
 8005886:	2200      	movs	r2, #0
 8005888:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800588a:	4b19      	ldr	r3, [pc, #100]	@ (80058f0 <MX_TIM4_Init+0xa4>)
 800588c:	2200      	movs	r2, #0
 800588e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8005890:	2303      	movs	r3, #3
 8005892:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8005894:	2300      	movs	r3, #0
 8005896:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8005898:	2301      	movs	r3, #1
 800589a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800589c:	2300      	movs	r3, #0
 800589e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80058a0:	2300      	movs	r3, #0
 80058a2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80058a4:	2300      	movs	r3, #0
 80058a6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80058a8:	2301      	movs	r3, #1
 80058aa:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80058ac:	2300      	movs	r3, #0
 80058ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80058b0:	2300      	movs	r3, #0
 80058b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80058b4:	f107 030c 	add.w	r3, r7, #12
 80058b8:	4619      	mov	r1, r3
 80058ba:	480d      	ldr	r0, [pc, #52]	@ (80058f0 <MX_TIM4_Init+0xa4>)
 80058bc:	f004 fe44 	bl	800a548 <HAL_TIM_Encoder_Init>
 80058c0:	4603      	mov	r3, r0
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d001      	beq.n	80058ca <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 80058c6:	f7ff fd65 	bl	8005394 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80058ca:	2300      	movs	r3, #0
 80058cc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80058ce:	2300      	movs	r3, #0
 80058d0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80058d2:	463b      	mov	r3, r7
 80058d4:	4619      	mov	r1, r3
 80058d6:	4806      	ldr	r0, [pc, #24]	@ (80058f0 <MX_TIM4_Init+0xa4>)
 80058d8:	f006 fa66 	bl	800bda8 <HAL_TIMEx_MasterConfigSynchronization>
 80058dc:	4603      	mov	r3, r0
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d001      	beq.n	80058e6 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 80058e2:	f7ff fd57 	bl	8005394 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80058e6:	bf00      	nop
 80058e8:	3730      	adds	r7, #48	@ 0x30
 80058ea:	46bd      	mov	sp, r7
 80058ec:	bd80      	pop	{r7, pc}
 80058ee:	bf00      	nop
 80058f0:	20001948 	.word	0x20001948
 80058f4:	40000800 	.word	0x40000800

080058f8 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b09c      	sub	sp, #112	@ 0x70
 80058fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80058fe:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8005902:	2200      	movs	r2, #0
 8005904:	601a      	str	r2, [r3, #0]
 8005906:	605a      	str	r2, [r3, #4]
 8005908:	609a      	str	r2, [r3, #8]
 800590a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800590c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8005910:	2200      	movs	r2, #0
 8005912:	601a      	str	r2, [r3, #0]
 8005914:	605a      	str	r2, [r3, #4]
 8005916:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005918:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800591c:	2200      	movs	r2, #0
 800591e:	601a      	str	r2, [r3, #0]
 8005920:	605a      	str	r2, [r3, #4]
 8005922:	609a      	str	r2, [r3, #8]
 8005924:	60da      	str	r2, [r3, #12]
 8005926:	611a      	str	r2, [r3, #16]
 8005928:	615a      	str	r2, [r3, #20]
 800592a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800592c:	1d3b      	adds	r3, r7, #4
 800592e:	2234      	movs	r2, #52	@ 0x34
 8005930:	2100      	movs	r1, #0
 8005932:	4618      	mov	r0, r3
 8005934:	f009 fcfe 	bl	800f334 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8005938:	4b45      	ldr	r3, [pc, #276]	@ (8005a50 <MX_TIM8_Init+0x158>)
 800593a:	4a46      	ldr	r2, [pc, #280]	@ (8005a54 <MX_TIM8_Init+0x15c>)
 800593c:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800593e:	4b44      	ldr	r3, [pc, #272]	@ (8005a50 <MX_TIM8_Init+0x158>)
 8005940:	2200      	movs	r2, #0
 8005942:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005944:	4b42      	ldr	r3, [pc, #264]	@ (8005a50 <MX_TIM8_Init+0x158>)
 8005946:	2200      	movs	r2, #0
 8005948:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 800594a:	4b41      	ldr	r3, [pc, #260]	@ (8005a50 <MX_TIM8_Init+0x158>)
 800594c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005950:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005952:	4b3f      	ldr	r3, [pc, #252]	@ (8005a50 <MX_TIM8_Init+0x158>)
 8005954:	2200      	movs	r2, #0
 8005956:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8005958:	4b3d      	ldr	r3, [pc, #244]	@ (8005a50 <MX_TIM8_Init+0x158>)
 800595a:	2200      	movs	r2, #0
 800595c:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800595e:	4b3c      	ldr	r3, [pc, #240]	@ (8005a50 <MX_TIM8_Init+0x158>)
 8005960:	2200      	movs	r2, #0
 8005962:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8005964:	483a      	ldr	r0, [pc, #232]	@ (8005a50 <MX_TIM8_Init+0x158>)
 8005966:	f004 f9bf 	bl	8009ce8 <HAL_TIM_Base_Init>
 800596a:	4603      	mov	r3, r0
 800596c:	2b00      	cmp	r3, #0
 800596e:	d001      	beq.n	8005974 <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 8005970:	f7ff fd10 	bl	8005394 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005974:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005978:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800597a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800597e:	4619      	mov	r1, r3
 8005980:	4833      	ldr	r0, [pc, #204]	@ (8005a50 <MX_TIM8_Init+0x158>)
 8005982:	f005 fa2b 	bl	800addc <HAL_TIM_ConfigClockSource>
 8005986:	4603      	mov	r3, r0
 8005988:	2b00      	cmp	r3, #0
 800598a:	d001      	beq.n	8005990 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 800598c:	f7ff fd02 	bl	8005394 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8005990:	482f      	ldr	r0, [pc, #188]	@ (8005a50 <MX_TIM8_Init+0x158>)
 8005992:	f004 fb63 	bl	800a05c <HAL_TIM_PWM_Init>
 8005996:	4603      	mov	r3, r0
 8005998:	2b00      	cmp	r3, #0
 800599a:	d001      	beq.n	80059a0 <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 800599c:	f7ff fcfa 	bl	8005394 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80059a0:	2300      	movs	r3, #0
 80059a2:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80059a4:	2300      	movs	r3, #0
 80059a6:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80059a8:	2300      	movs	r3, #0
 80059aa:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80059ac:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80059b0:	4619      	mov	r1, r3
 80059b2:	4827      	ldr	r0, [pc, #156]	@ (8005a50 <MX_TIM8_Init+0x158>)
 80059b4:	f006 f9f8 	bl	800bda8 <HAL_TIMEx_MasterConfigSynchronization>
 80059b8:	4603      	mov	r3, r0
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d001      	beq.n	80059c2 <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 80059be:	f7ff fce9 	bl	8005394 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80059c2:	2360      	movs	r3, #96	@ 0x60
 80059c4:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 80059c6:	2300      	movs	r3, #0
 80059c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80059ca:	2300      	movs	r3, #0
 80059cc:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80059ce:	2300      	movs	r3, #0
 80059d0:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80059d2:	2300      	movs	r3, #0
 80059d4:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80059d6:	2300      	movs	r3, #0
 80059d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80059da:	2300      	movs	r3, #0
 80059dc:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80059de:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80059e2:	220c      	movs	r2, #12
 80059e4:	4619      	mov	r1, r3
 80059e6:	481a      	ldr	r0, [pc, #104]	@ (8005a50 <MX_TIM8_Init+0x158>)
 80059e8:	f005 f8e4 	bl	800abb4 <HAL_TIM_PWM_ConfigChannel>
 80059ec:	4603      	mov	r3, r0
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d001      	beq.n	80059f6 <MX_TIM8_Init+0xfe>
  {
    Error_Handler();
 80059f2:	f7ff fccf 	bl	8005394 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80059f6:	2300      	movs	r3, #0
 80059f8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80059fa:	2300      	movs	r3, #0
 80059fc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80059fe:	2300      	movs	r3, #0
 8005a00:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8005a02:	2300      	movs	r3, #0
 8005a04:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8005a06:	2300      	movs	r3, #0
 8005a08:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8005a0a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005a0e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8005a10:	2300      	movs	r3, #0
 8005a12:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8005a14:	2300      	movs	r3, #0
 8005a16:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8005a18:	2300      	movs	r3, #0
 8005a1a:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8005a1c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005a20:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8005a22:	2300      	movs	r3, #0
 8005a24:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8005a26:	2300      	movs	r3, #0
 8005a28:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8005a2e:	1d3b      	adds	r3, r7, #4
 8005a30:	4619      	mov	r1, r3
 8005a32:	4807      	ldr	r0, [pc, #28]	@ (8005a50 <MX_TIM8_Init+0x158>)
 8005a34:	f006 fa4e 	bl	800bed4 <HAL_TIMEx_ConfigBreakDeadTime>
 8005a38:	4603      	mov	r3, r0
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d001      	beq.n	8005a42 <MX_TIM8_Init+0x14a>
  {
    Error_Handler();
 8005a3e:	f7ff fca9 	bl	8005394 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8005a42:	4803      	ldr	r0, [pc, #12]	@ (8005a50 <MX_TIM8_Init+0x158>)
 8005a44:	f000 fa44 	bl	8005ed0 <HAL_TIM_MspPostInit>

}
 8005a48:	bf00      	nop
 8005a4a:	3770      	adds	r7, #112	@ 0x70
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	bd80      	pop	{r7, pc}
 8005a50:	20001a14 	.word	0x20001a14
 8005a54:	40013400 	.word	0x40013400

08005a58 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b094      	sub	sp, #80	@ 0x50
 8005a5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8005a5e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8005a62:	2200      	movs	r2, #0
 8005a64:	601a      	str	r2, [r3, #0]
 8005a66:	605a      	str	r2, [r3, #4]
 8005a68:	609a      	str	r2, [r3, #8]
 8005a6a:	60da      	str	r2, [r3, #12]
 8005a6c:	611a      	str	r2, [r3, #16]
 8005a6e:	615a      	str	r2, [r3, #20]
 8005a70:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8005a72:	463b      	mov	r3, r7
 8005a74:	2234      	movs	r2, #52	@ 0x34
 8005a76:	2100      	movs	r1, #0
 8005a78:	4618      	mov	r0, r3
 8005a7a:	f009 fc5b 	bl	800f334 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8005a7e:	4b34      	ldr	r3, [pc, #208]	@ (8005b50 <MX_TIM16_Init+0xf8>)
 8005a80:	4a34      	ldr	r2, [pc, #208]	@ (8005b54 <MX_TIM16_Init+0xfc>)
 8005a82:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 169;
 8005a84:	4b32      	ldr	r3, [pc, #200]	@ (8005b50 <MX_TIM16_Init+0xf8>)
 8005a86:	22a9      	movs	r2, #169	@ 0xa9
 8005a88:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005a8a:	4b31      	ldr	r3, [pc, #196]	@ (8005b50 <MX_TIM16_Init+0xf8>)
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 2005;
 8005a90:	4b2f      	ldr	r3, [pc, #188]	@ (8005b50 <MX_TIM16_Init+0xf8>)
 8005a92:	f240 72d5 	movw	r2, #2005	@ 0x7d5
 8005a96:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005a98:	4b2d      	ldr	r3, [pc, #180]	@ (8005b50 <MX_TIM16_Init+0xf8>)
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8005a9e:	4b2c      	ldr	r3, [pc, #176]	@ (8005b50 <MX_TIM16_Init+0xf8>)
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005aa4:	4b2a      	ldr	r3, [pc, #168]	@ (8005b50 <MX_TIM16_Init+0xf8>)
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8005aaa:	4829      	ldr	r0, [pc, #164]	@ (8005b50 <MX_TIM16_Init+0xf8>)
 8005aac:	f004 f91c 	bl	8009ce8 <HAL_TIM_Base_Init>
 8005ab0:	4603      	mov	r3, r0
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d001      	beq.n	8005aba <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 8005ab6:	f7ff fc6d 	bl	8005394 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim16) != HAL_OK)
 8005aba:	4825      	ldr	r0, [pc, #148]	@ (8005b50 <MX_TIM16_Init+0xf8>)
 8005abc:	f004 fa60 	bl	8009f80 <HAL_TIM_OC_Init>
 8005ac0:	4603      	mov	r3, r0
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d001      	beq.n	8005aca <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 8005ac6:	f7ff fc65 	bl	8005394 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim16, TIM_OPMODE_SINGLE) != HAL_OK)
 8005aca:	2108      	movs	r1, #8
 8005acc:	4820      	ldr	r0, [pc, #128]	@ (8005b50 <MX_TIM16_Init+0xf8>)
 8005ace:	f004 fc45 	bl	800a35c <HAL_TIM_OnePulse_Init>
 8005ad2:	4603      	mov	r3, r0
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d001      	beq.n	8005adc <MX_TIM16_Init+0x84>
  {
    Error_Handler();
 8005ad8:	f7ff fc5c 	bl	8005394 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_ACTIVE;
 8005adc:	2310      	movs	r3, #16
 8005ade:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.Pulse = 1433;
 8005ae0:	f240 5399 	movw	r3, #1433	@ 0x599
 8005ae4:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8005aea:	2300      	movs	r3, #0
 8005aec:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005aee:	2300      	movs	r3, #0
 8005af0:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8005af2:	2300      	movs	r3, #0
 8005af4:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8005af6:	2300      	movs	r3, #0
 8005af8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_TIM_OC_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005afa:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8005afe:	2200      	movs	r2, #0
 8005b00:	4619      	mov	r1, r3
 8005b02:	4813      	ldr	r0, [pc, #76]	@ (8005b50 <MX_TIM16_Init+0xf8>)
 8005b04:	f004 ffdc 	bl	800aac0 <HAL_TIM_OC_ConfigChannel>
 8005b08:	4603      	mov	r3, r0
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d001      	beq.n	8005b12 <MX_TIM16_Init+0xba>
  {
    Error_Handler();
 8005b0e:	f7ff fc41 	bl	8005394 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8005b12:	2300      	movs	r3, #0
 8005b14:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8005b16:	2300      	movs	r3, #0
 8005b18:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8005b1e:	2300      	movs	r3, #0
 8005b20:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8005b22:	2300      	movs	r3, #0
 8005b24:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8005b26:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005b2a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8005b30:	2300      	movs	r3, #0
 8005b32:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8005b34:	463b      	mov	r3, r7
 8005b36:	4619      	mov	r1, r3
 8005b38:	4805      	ldr	r0, [pc, #20]	@ (8005b50 <MX_TIM16_Init+0xf8>)
 8005b3a:	f006 f9cb 	bl	800bed4 <HAL_TIMEx_ConfigBreakDeadTime>
 8005b3e:	4603      	mov	r3, r0
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d001      	beq.n	8005b48 <MX_TIM16_Init+0xf0>
  {
    Error_Handler();
 8005b44:	f7ff fc26 	bl	8005394 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8005b48:	bf00      	nop
 8005b4a:	3750      	adds	r7, #80	@ 0x50
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	bd80      	pop	{r7, pc}
 8005b50:	20001ae0 	.word	0x20001ae0
 8005b54:	40014400 	.word	0x40014400

08005b58 <MX_TIM20_Init>:
/* TIM20 init function */
void MX_TIM20_Init(void)
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b09c      	sub	sp, #112	@ 0x70
 8005b5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM20_Init 0 */

  /* USER CODE END TIM20_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005b5e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8005b62:	2200      	movs	r2, #0
 8005b64:	601a      	str	r2, [r3, #0]
 8005b66:	605a      	str	r2, [r3, #4]
 8005b68:	609a      	str	r2, [r3, #8]
 8005b6a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005b6c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8005b70:	2200      	movs	r2, #0
 8005b72:	601a      	str	r2, [r3, #0]
 8005b74:	605a      	str	r2, [r3, #4]
 8005b76:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005b78:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	601a      	str	r2, [r3, #0]
 8005b80:	605a      	str	r2, [r3, #4]
 8005b82:	609a      	str	r2, [r3, #8]
 8005b84:	60da      	str	r2, [r3, #12]
 8005b86:	611a      	str	r2, [r3, #16]
 8005b88:	615a      	str	r2, [r3, #20]
 8005b8a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8005b8c:	1d3b      	adds	r3, r7, #4
 8005b8e:	2234      	movs	r2, #52	@ 0x34
 8005b90:	2100      	movs	r1, #0
 8005b92:	4618      	mov	r0, r3
 8005b94:	f009 fbce 	bl	800f334 <memset>

  /* USER CODE BEGIN TIM20_Init 1 */

  /* USER CODE END TIM20_Init 1 */
  htim20.Instance = TIM20;
 8005b98:	4b4b      	ldr	r3, [pc, #300]	@ (8005cc8 <MX_TIM20_Init+0x170>)
 8005b9a:	4a4c      	ldr	r2, [pc, #304]	@ (8005ccc <MX_TIM20_Init+0x174>)
 8005b9c:	601a      	str	r2, [r3, #0]
  htim20.Init.Prescaler = 0;
 8005b9e:	4b4a      	ldr	r3, [pc, #296]	@ (8005cc8 <MX_TIM20_Init+0x170>)
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	605a      	str	r2, [r3, #4]
  htim20.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005ba4:	4b48      	ldr	r3, [pc, #288]	@ (8005cc8 <MX_TIM20_Init+0x170>)
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	609a      	str	r2, [r3, #8]
  htim20.Init.Period = 65535;
 8005baa:	4b47      	ldr	r3, [pc, #284]	@ (8005cc8 <MX_TIM20_Init+0x170>)
 8005bac:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005bb0:	60da      	str	r2, [r3, #12]
  htim20.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005bb2:	4b45      	ldr	r3, [pc, #276]	@ (8005cc8 <MX_TIM20_Init+0x170>)
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	611a      	str	r2, [r3, #16]
  htim20.Init.RepetitionCounter = 0;
 8005bb8:	4b43      	ldr	r3, [pc, #268]	@ (8005cc8 <MX_TIM20_Init+0x170>)
 8005bba:	2200      	movs	r2, #0
 8005bbc:	615a      	str	r2, [r3, #20]
  htim20.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005bbe:	4b42      	ldr	r3, [pc, #264]	@ (8005cc8 <MX_TIM20_Init+0x170>)
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim20) != HAL_OK)
 8005bc4:	4840      	ldr	r0, [pc, #256]	@ (8005cc8 <MX_TIM20_Init+0x170>)
 8005bc6:	f004 f88f 	bl	8009ce8 <HAL_TIM_Base_Init>
 8005bca:	4603      	mov	r3, r0
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d001      	beq.n	8005bd4 <MX_TIM20_Init+0x7c>
  {
    Error_Handler();
 8005bd0:	f7ff fbe0 	bl	8005394 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005bd4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005bd8:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim20, &sClockSourceConfig) != HAL_OK)
 8005bda:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8005bde:	4619      	mov	r1, r3
 8005be0:	4839      	ldr	r0, [pc, #228]	@ (8005cc8 <MX_TIM20_Init+0x170>)
 8005be2:	f005 f8fb 	bl	800addc <HAL_TIM_ConfigClockSource>
 8005be6:	4603      	mov	r3, r0
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d001      	beq.n	8005bf0 <MX_TIM20_Init+0x98>
  {
    Error_Handler();
 8005bec:	f7ff fbd2 	bl	8005394 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim20) != HAL_OK)
 8005bf0:	4835      	ldr	r0, [pc, #212]	@ (8005cc8 <MX_TIM20_Init+0x170>)
 8005bf2:	f004 fa33 	bl	800a05c <HAL_TIM_PWM_Init>
 8005bf6:	4603      	mov	r3, r0
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d001      	beq.n	8005c00 <MX_TIM20_Init+0xa8>
  {
    Error_Handler();
 8005bfc:	f7ff fbca 	bl	8005394 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005c00:	2300      	movs	r3, #0
 8005c02:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8005c04:	2300      	movs	r3, #0
 8005c06:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005c08:	2300      	movs	r3, #0
 8005c0a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim20, &sMasterConfig) != HAL_OK)
 8005c0c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8005c10:	4619      	mov	r1, r3
 8005c12:	482d      	ldr	r0, [pc, #180]	@ (8005cc8 <MX_TIM20_Init+0x170>)
 8005c14:	f006 f8c8 	bl	800bda8 <HAL_TIMEx_MasterConfigSynchronization>
 8005c18:	4603      	mov	r3, r0
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d001      	beq.n	8005c22 <MX_TIM20_Init+0xca>
  {
    Error_Handler();
 8005c1e:	f7ff fbb9 	bl	8005394 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005c22:	2360      	movs	r3, #96	@ 0x60
 8005c24:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8005c26:	2300      	movs	r3, #0
 8005c28:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8005c2e:	2300      	movs	r3, #0
 8005c30:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005c32:	2300      	movs	r3, #0
 8005c34:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8005c36:	2300      	movs	r3, #0
 8005c38:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim20, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005c3e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8005c42:	2200      	movs	r2, #0
 8005c44:	4619      	mov	r1, r3
 8005c46:	4820      	ldr	r0, [pc, #128]	@ (8005cc8 <MX_TIM20_Init+0x170>)
 8005c48:	f004 ffb4 	bl	800abb4 <HAL_TIM_PWM_ConfigChannel>
 8005c4c:	4603      	mov	r3, r0
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d001      	beq.n	8005c56 <MX_TIM20_Init+0xfe>
  {
    Error_Handler();
 8005c52:	f7ff fb9f 	bl	8005394 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim20, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8005c56:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8005c5a:	2208      	movs	r2, #8
 8005c5c:	4619      	mov	r1, r3
 8005c5e:	481a      	ldr	r0, [pc, #104]	@ (8005cc8 <MX_TIM20_Init+0x170>)
 8005c60:	f004 ffa8 	bl	800abb4 <HAL_TIM_PWM_ConfigChannel>
 8005c64:	4603      	mov	r3, r0
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d001      	beq.n	8005c6e <MX_TIM20_Init+0x116>
  {
    Error_Handler();
 8005c6a:	f7ff fb93 	bl	8005394 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8005c6e:	2300      	movs	r3, #0
 8005c70:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8005c72:	2300      	movs	r3, #0
 8005c74:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8005c76:	2300      	movs	r3, #0
 8005c78:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8005c7e:	2300      	movs	r3, #0
 8005c80:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8005c82:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005c86:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8005c88:	2300      	movs	r3, #0
 8005c8a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8005c90:	2300      	movs	r3, #0
 8005c92:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8005c94:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005c98:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim20, &sBreakDeadTimeConfig) != HAL_OK)
 8005ca6:	1d3b      	adds	r3, r7, #4
 8005ca8:	4619      	mov	r1, r3
 8005caa:	4807      	ldr	r0, [pc, #28]	@ (8005cc8 <MX_TIM20_Init+0x170>)
 8005cac:	f006 f912 	bl	800bed4 <HAL_TIMEx_ConfigBreakDeadTime>
 8005cb0:	4603      	mov	r3, r0
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d001      	beq.n	8005cba <MX_TIM20_Init+0x162>
  {
    Error_Handler();
 8005cb6:	f7ff fb6d 	bl	8005394 <Error_Handler>
  }
  /* USER CODE BEGIN TIM20_Init 2 */

  /* USER CODE END TIM20_Init 2 */
  HAL_TIM_MspPostInit(&htim20);
 8005cba:	4803      	ldr	r0, [pc, #12]	@ (8005cc8 <MX_TIM20_Init+0x170>)
 8005cbc:	f000 f908 	bl	8005ed0 <HAL_TIM_MspPostInit>

}
 8005cc0:	bf00      	nop
 8005cc2:	3770      	adds	r7, #112	@ 0x70
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	bd80      	pop	{r7, pc}
 8005cc8:	20001bac 	.word	0x20001bac
 8005ccc:	40015000 	.word	0x40015000

08005cd0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b088      	sub	sp, #32
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	4a3d      	ldr	r2, [pc, #244]	@ (8005dd4 <HAL_TIM_Base_MspInit+0x104>)
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d11c      	bne.n	8005d1c <HAL_TIM_Base_MspInit+0x4c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005ce2:	4b3d      	ldr	r3, [pc, #244]	@ (8005dd8 <HAL_TIM_Base_MspInit+0x108>)
 8005ce4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005ce6:	4a3c      	ldr	r2, [pc, #240]	@ (8005dd8 <HAL_TIM_Base_MspInit+0x108>)
 8005ce8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8005cec:	6613      	str	r3, [r2, #96]	@ 0x60
 8005cee:	4b3a      	ldr	r3, [pc, #232]	@ (8005dd8 <HAL_TIM_Base_MspInit+0x108>)
 8005cf0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005cf2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005cf6:	61fb      	str	r3, [r7, #28]
 8005cf8:	69fb      	ldr	r3, [r7, #28]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	2100      	movs	r1, #0
 8005cfe:	2018      	movs	r0, #24
 8005d00:	f001 fe6f 	bl	80079e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8005d04:	2018      	movs	r0, #24
 8005d06:	f001 fe86 	bl	8007a16 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	2100      	movs	r1, #0
 8005d0e:	2019      	movs	r0, #25
 8005d10:	f001 fe67 	bl	80079e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8005d14:	2019      	movs	r0, #25
 8005d16:	f001 fe7e 	bl	8007a16 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM20_CLK_ENABLE();
  /* USER CODE BEGIN TIM20_MspInit 1 */

  /* USER CODE END TIM20_MspInit 1 */
  }
}
 8005d1a:	e056      	b.n	8005dca <HAL_TIM_Base_MspInit+0xfa>
  else if(tim_baseHandle->Instance==TIM2)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d24:	d114      	bne.n	8005d50 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005d26:	4b2c      	ldr	r3, [pc, #176]	@ (8005dd8 <HAL_TIM_Base_MspInit+0x108>)
 8005d28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d2a:	4a2b      	ldr	r2, [pc, #172]	@ (8005dd8 <HAL_TIM_Base_MspInit+0x108>)
 8005d2c:	f043 0301 	orr.w	r3, r3, #1
 8005d30:	6593      	str	r3, [r2, #88]	@ 0x58
 8005d32:	4b29      	ldr	r3, [pc, #164]	@ (8005dd8 <HAL_TIM_Base_MspInit+0x108>)
 8005d34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d36:	f003 0301 	and.w	r3, r3, #1
 8005d3a:	61bb      	str	r3, [r7, #24]
 8005d3c:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8005d3e:	2200      	movs	r2, #0
 8005d40:	2100      	movs	r1, #0
 8005d42:	201c      	movs	r0, #28
 8005d44:	f001 fe4d 	bl	80079e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8005d48:	201c      	movs	r0, #28
 8005d4a:	f001 fe64 	bl	8007a16 <HAL_NVIC_EnableIRQ>
}
 8005d4e:	e03c      	b.n	8005dca <HAL_TIM_Base_MspInit+0xfa>
  else if(tim_baseHandle->Instance==TIM8)
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	4a21      	ldr	r2, [pc, #132]	@ (8005ddc <HAL_TIM_Base_MspInit+0x10c>)
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d10c      	bne.n	8005d74 <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8005d5a:	4b1f      	ldr	r3, [pc, #124]	@ (8005dd8 <HAL_TIM_Base_MspInit+0x108>)
 8005d5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d5e:	4a1e      	ldr	r2, [pc, #120]	@ (8005dd8 <HAL_TIM_Base_MspInit+0x108>)
 8005d60:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8005d64:	6613      	str	r3, [r2, #96]	@ 0x60
 8005d66:	4b1c      	ldr	r3, [pc, #112]	@ (8005dd8 <HAL_TIM_Base_MspInit+0x108>)
 8005d68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d6a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005d6e:	617b      	str	r3, [r7, #20]
 8005d70:	697b      	ldr	r3, [r7, #20]
}
 8005d72:	e02a      	b.n	8005dca <HAL_TIM_Base_MspInit+0xfa>
  else if(tim_baseHandle->Instance==TIM16)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	4a19      	ldr	r2, [pc, #100]	@ (8005de0 <HAL_TIM_Base_MspInit+0x110>)
 8005d7a:	4293      	cmp	r3, r2
 8005d7c:	d114      	bne.n	8005da8 <HAL_TIM_Base_MspInit+0xd8>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8005d7e:	4b16      	ldr	r3, [pc, #88]	@ (8005dd8 <HAL_TIM_Base_MspInit+0x108>)
 8005d80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d82:	4a15      	ldr	r2, [pc, #84]	@ (8005dd8 <HAL_TIM_Base_MspInit+0x108>)
 8005d84:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005d88:	6613      	str	r3, [r2, #96]	@ 0x60
 8005d8a:	4b13      	ldr	r3, [pc, #76]	@ (8005dd8 <HAL_TIM_Base_MspInit+0x108>)
 8005d8c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d92:	613b      	str	r3, [r7, #16]
 8005d94:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8005d96:	2200      	movs	r2, #0
 8005d98:	2100      	movs	r1, #0
 8005d9a:	2019      	movs	r0, #25
 8005d9c:	f001 fe21 	bl	80079e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8005da0:	2019      	movs	r0, #25
 8005da2:	f001 fe38 	bl	8007a16 <HAL_NVIC_EnableIRQ>
}
 8005da6:	e010      	b.n	8005dca <HAL_TIM_Base_MspInit+0xfa>
  else if(tim_baseHandle->Instance==TIM20)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	4a0d      	ldr	r2, [pc, #52]	@ (8005de4 <HAL_TIM_Base_MspInit+0x114>)
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d10b      	bne.n	8005dca <HAL_TIM_Base_MspInit+0xfa>
    __HAL_RCC_TIM20_CLK_ENABLE();
 8005db2:	4b09      	ldr	r3, [pc, #36]	@ (8005dd8 <HAL_TIM_Base_MspInit+0x108>)
 8005db4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005db6:	4a08      	ldr	r2, [pc, #32]	@ (8005dd8 <HAL_TIM_Base_MspInit+0x108>)
 8005db8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005dbc:	6613      	str	r3, [r2, #96]	@ 0x60
 8005dbe:	4b06      	ldr	r3, [pc, #24]	@ (8005dd8 <HAL_TIM_Base_MspInit+0x108>)
 8005dc0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005dc2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005dc6:	60fb      	str	r3, [r7, #12]
 8005dc8:	68fb      	ldr	r3, [r7, #12]
}
 8005dca:	bf00      	nop
 8005dcc:	3720      	adds	r7, #32
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	bd80      	pop	{r7, pc}
 8005dd2:	bf00      	nop
 8005dd4:	40012c00 	.word	0x40012c00
 8005dd8:	40021000 	.word	0x40021000
 8005ddc:	40013400 	.word	0x40013400
 8005de0:	40014400 	.word	0x40014400
 8005de4:	40015000 	.word	0x40015000

08005de8 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b08c      	sub	sp, #48	@ 0x30
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005df0:	f107 031c 	add.w	r3, r7, #28
 8005df4:	2200      	movs	r2, #0
 8005df6:	601a      	str	r2, [r3, #0]
 8005df8:	605a      	str	r2, [r3, #4]
 8005dfa:	609a      	str	r2, [r3, #8]
 8005dfc:	60da      	str	r2, [r3, #12]
 8005dfe:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	4a2f      	ldr	r2, [pc, #188]	@ (8005ec4 <HAL_TIM_Encoder_MspInit+0xdc>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d129      	bne.n	8005e5e <HAL_TIM_Encoder_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005e0a:	4b2f      	ldr	r3, [pc, #188]	@ (8005ec8 <HAL_TIM_Encoder_MspInit+0xe0>)
 8005e0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e0e:	4a2e      	ldr	r2, [pc, #184]	@ (8005ec8 <HAL_TIM_Encoder_MspInit+0xe0>)
 8005e10:	f043 0302 	orr.w	r3, r3, #2
 8005e14:	6593      	str	r3, [r2, #88]	@ 0x58
 8005e16:	4b2c      	ldr	r3, [pc, #176]	@ (8005ec8 <HAL_TIM_Encoder_MspInit+0xe0>)
 8005e18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e1a:	f003 0302 	and.w	r3, r3, #2
 8005e1e:	61bb      	str	r3, [r7, #24]
 8005e20:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005e22:	4b29      	ldr	r3, [pc, #164]	@ (8005ec8 <HAL_TIM_Encoder_MspInit+0xe0>)
 8005e24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e26:	4a28      	ldr	r2, [pc, #160]	@ (8005ec8 <HAL_TIM_Encoder_MspInit+0xe0>)
 8005e28:	f043 0301 	orr.w	r3, r3, #1
 8005e2c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005e2e:	4b26      	ldr	r3, [pc, #152]	@ (8005ec8 <HAL_TIM_Encoder_MspInit+0xe0>)
 8005e30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e32:	f003 0301 	and.w	r3, r3, #1
 8005e36:	617b      	str	r3, [r7, #20]
 8005e38:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = Encoder_1_Pin|Encoder_1A7_Pin;
 8005e3a:	23c0      	movs	r3, #192	@ 0xc0
 8005e3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e3e:	2302      	movs	r3, #2
 8005e40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e42:	2300      	movs	r3, #0
 8005e44:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005e46:	2300      	movs	r3, #0
 8005e48:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005e4a:	2302      	movs	r3, #2
 8005e4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005e4e:	f107 031c 	add.w	r3, r7, #28
 8005e52:	4619      	mov	r1, r3
 8005e54:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8005e58:	f002 f936 	bl	80080c8 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8005e5c:	e02e      	b.n	8005ebc <HAL_TIM_Encoder_MspInit+0xd4>
  else if(tim_encoderHandle->Instance==TIM4)
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	4a1a      	ldr	r2, [pc, #104]	@ (8005ecc <HAL_TIM_Encoder_MspInit+0xe4>)
 8005e64:	4293      	cmp	r3, r2
 8005e66:	d129      	bne.n	8005ebc <HAL_TIM_Encoder_MspInit+0xd4>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8005e68:	4b17      	ldr	r3, [pc, #92]	@ (8005ec8 <HAL_TIM_Encoder_MspInit+0xe0>)
 8005e6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e6c:	4a16      	ldr	r2, [pc, #88]	@ (8005ec8 <HAL_TIM_Encoder_MspInit+0xe0>)
 8005e6e:	f043 0304 	orr.w	r3, r3, #4
 8005e72:	6593      	str	r3, [r2, #88]	@ 0x58
 8005e74:	4b14      	ldr	r3, [pc, #80]	@ (8005ec8 <HAL_TIM_Encoder_MspInit+0xe0>)
 8005e76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e78:	f003 0304 	and.w	r3, r3, #4
 8005e7c:	613b      	str	r3, [r7, #16]
 8005e7e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005e80:	4b11      	ldr	r3, [pc, #68]	@ (8005ec8 <HAL_TIM_Encoder_MspInit+0xe0>)
 8005e82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e84:	4a10      	ldr	r2, [pc, #64]	@ (8005ec8 <HAL_TIM_Encoder_MspInit+0xe0>)
 8005e86:	f043 0301 	orr.w	r3, r3, #1
 8005e8a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005e8c:	4b0e      	ldr	r3, [pc, #56]	@ (8005ec8 <HAL_TIM_Encoder_MspInit+0xe0>)
 8005e8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e90:	f003 0301 	and.w	r3, r3, #1
 8005e94:	60fb      	str	r3, [r7, #12]
 8005e96:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Encoder_2_Pin|Encoder_2A12_Pin;
 8005e98:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8005e9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e9e:	2302      	movs	r3, #2
 8005ea0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8005eaa:	230a      	movs	r3, #10
 8005eac:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005eae:	f107 031c 	add.w	r3, r7, #28
 8005eb2:	4619      	mov	r1, r3
 8005eb4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8005eb8:	f002 f906 	bl	80080c8 <HAL_GPIO_Init>
}
 8005ebc:	bf00      	nop
 8005ebe:	3730      	adds	r7, #48	@ 0x30
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	bd80      	pop	{r7, pc}
 8005ec4:	40000400 	.word	0x40000400
 8005ec8:	40021000 	.word	0x40021000
 8005ecc:	40000800 	.word	0x40000800

08005ed0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b08a      	sub	sp, #40	@ 0x28
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005ed8:	f107 0314 	add.w	r3, r7, #20
 8005edc:	2200      	movs	r2, #0
 8005ede:	601a      	str	r2, [r3, #0]
 8005ee0:	605a      	str	r2, [r3, #4]
 8005ee2:	609a      	str	r2, [r3, #8]
 8005ee4:	60da      	str	r2, [r3, #12]
 8005ee6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM8)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	4a31      	ldr	r2, [pc, #196]	@ (8005fb4 <HAL_TIM_MspPostInit+0xe4>)
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d11d      	bne.n	8005f2e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005ef2:	4b31      	ldr	r3, [pc, #196]	@ (8005fb8 <HAL_TIM_MspPostInit+0xe8>)
 8005ef4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ef6:	4a30      	ldr	r2, [pc, #192]	@ (8005fb8 <HAL_TIM_MspPostInit+0xe8>)
 8005ef8:	f043 0304 	orr.w	r3, r3, #4
 8005efc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005efe:	4b2e      	ldr	r3, [pc, #184]	@ (8005fb8 <HAL_TIM_MspPostInit+0xe8>)
 8005f00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005f02:	f003 0304 	and.w	r3, r3, #4
 8005f06:	613b      	str	r3, [r7, #16]
 8005f08:	693b      	ldr	r3, [r7, #16]
    /**TIM8 GPIO Configuration
    PC9     ------> TIM8_CH4
    */
    GPIO_InitStruct.Pin = PWM_Servo_Pin;
 8005f0a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005f0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005f10:	2302      	movs	r3, #2
 8005f12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f14:	2300      	movs	r3, #0
 8005f16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005f18:	2300      	movs	r3, #0
 8005f1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8005f1c:	2304      	movs	r3, #4
 8005f1e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(PWM_Servo_GPIO_Port, &GPIO_InitStruct);
 8005f20:	f107 0314 	add.w	r3, r7, #20
 8005f24:	4619      	mov	r1, r3
 8005f26:	4825      	ldr	r0, [pc, #148]	@ (8005fbc <HAL_TIM_MspPostInit+0xec>)
 8005f28:	f002 f8ce 	bl	80080c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM20_MspPostInit 1 */

  /* USER CODE END TIM20_MspPostInit 1 */
  }

}
 8005f2c:	e03d      	b.n	8005faa <HAL_TIM_MspPostInit+0xda>
  else if(timHandle->Instance==TIM20)
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	4a23      	ldr	r2, [pc, #140]	@ (8005fc0 <HAL_TIM_MspPostInit+0xf0>)
 8005f34:	4293      	cmp	r3, r2
 8005f36:	d138      	bne.n	8005faa <HAL_TIM_MspPostInit+0xda>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005f38:	4b1f      	ldr	r3, [pc, #124]	@ (8005fb8 <HAL_TIM_MspPostInit+0xe8>)
 8005f3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005f3c:	4a1e      	ldr	r2, [pc, #120]	@ (8005fb8 <HAL_TIM_MspPostInit+0xe8>)
 8005f3e:	f043 0302 	orr.w	r3, r3, #2
 8005f42:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005f44:	4b1c      	ldr	r3, [pc, #112]	@ (8005fb8 <HAL_TIM_MspPostInit+0xe8>)
 8005f46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005f48:	f003 0302 	and.w	r3, r3, #2
 8005f4c:	60fb      	str	r3, [r7, #12]
 8005f4e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005f50:	4b19      	ldr	r3, [pc, #100]	@ (8005fb8 <HAL_TIM_MspPostInit+0xe8>)
 8005f52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005f54:	4a18      	ldr	r2, [pc, #96]	@ (8005fb8 <HAL_TIM_MspPostInit+0xe8>)
 8005f56:	f043 0304 	orr.w	r3, r3, #4
 8005f5a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005f5c:	4b16      	ldr	r3, [pc, #88]	@ (8005fb8 <HAL_TIM_MspPostInit+0xe8>)
 8005f5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005f60:	f003 0304 	and.w	r3, r3, #4
 8005f64:	60bb      	str	r3, [r7, #8]
 8005f66:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWM_MD20A_24V_Pin;
 8005f68:	2304      	movs	r3, #4
 8005f6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005f6c:	2302      	movs	r3, #2
 8005f6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f70:	2300      	movs	r3, #0
 8005f72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005f74:	2300      	movs	r3, #0
 8005f76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM20;
 8005f78:	2303      	movs	r3, #3
 8005f7a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(PWM_MD20A_24V_GPIO_Port, &GPIO_InitStruct);
 8005f7c:	f107 0314 	add.w	r3, r7, #20
 8005f80:	4619      	mov	r1, r3
 8005f82:	4810      	ldr	r0, [pc, #64]	@ (8005fc4 <HAL_TIM_MspPostInit+0xf4>)
 8005f84:	f002 f8a0 	bl	80080c8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = PWM_MD20A_18V_Pin;
 8005f88:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005f8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005f8e:	2302      	movs	r3, #2
 8005f90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f92:	2300      	movs	r3, #0
 8005f94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005f96:	2300      	movs	r3, #0
 8005f98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM20;
 8005f9a:	2306      	movs	r3, #6
 8005f9c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(PWM_MD20A_18V_GPIO_Port, &GPIO_InitStruct);
 8005f9e:	f107 0314 	add.w	r3, r7, #20
 8005fa2:	4619      	mov	r1, r3
 8005fa4:	4805      	ldr	r0, [pc, #20]	@ (8005fbc <HAL_TIM_MspPostInit+0xec>)
 8005fa6:	f002 f88f 	bl	80080c8 <HAL_GPIO_Init>
}
 8005faa:	bf00      	nop
 8005fac:	3728      	adds	r7, #40	@ 0x28
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	bd80      	pop	{r7, pc}
 8005fb2:	bf00      	nop
 8005fb4:	40013400 	.word	0x40013400
 8005fb8:	40021000 	.word	0x40021000
 8005fbc:	48000800 	.word	0x48000800
 8005fc0:	40015000 	.word	0x40015000
 8005fc4:	48000400 	.word	0x48000400

08005fc8 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8005fcc:	4b23      	ldr	r3, [pc, #140]	@ (800605c <MX_USART2_UART_Init+0x94>)
 8005fce:	4a24      	ldr	r2, [pc, #144]	@ (8006060 <MX_USART2_UART_Init+0x98>)
 8005fd0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 8005fd2:	4b22      	ldr	r3, [pc, #136]	@ (800605c <MX_USART2_UART_Init+0x94>)
 8005fd4:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 8005fd8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8005fda:	4b20      	ldr	r3, [pc, #128]	@ (800605c <MX_USART2_UART_Init+0x94>)
 8005fdc:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8005fe0:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8005fe2:	4b1e      	ldr	r3, [pc, #120]	@ (800605c <MX_USART2_UART_Init+0x94>)
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8005fe8:	4b1c      	ldr	r3, [pc, #112]	@ (800605c <MX_USART2_UART_Init+0x94>)
 8005fea:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005fee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8005ff0:	4b1a      	ldr	r3, [pc, #104]	@ (800605c <MX_USART2_UART_Init+0x94>)
 8005ff2:	220c      	movs	r2, #12
 8005ff4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005ff6:	4b19      	ldr	r3, [pc, #100]	@ (800605c <MX_USART2_UART_Init+0x94>)
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005ffc:	4b17      	ldr	r3, [pc, #92]	@ (800605c <MX_USART2_UART_Init+0x94>)
 8005ffe:	2200      	movs	r2, #0
 8006000:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8006002:	4b16      	ldr	r3, [pc, #88]	@ (800605c <MX_USART2_UART_Init+0x94>)
 8006004:	2200      	movs	r2, #0
 8006006:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8006008:	4b14      	ldr	r3, [pc, #80]	@ (800605c <MX_USART2_UART_Init+0x94>)
 800600a:	2200      	movs	r2, #0
 800600c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800600e:	4b13      	ldr	r3, [pc, #76]	@ (800605c <MX_USART2_UART_Init+0x94>)
 8006010:	2200      	movs	r2, #0
 8006012:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8006014:	4811      	ldr	r0, [pc, #68]	@ (800605c <MX_USART2_UART_Init+0x94>)
 8006016:	f006 f841 	bl	800c09c <HAL_UART_Init>
 800601a:	4603      	mov	r3, r0
 800601c:	2b00      	cmp	r3, #0
 800601e:	d001      	beq.n	8006024 <MX_USART2_UART_Init+0x5c>
  {
    Error_Handler();
 8006020:	f7ff f9b8 	bl	8005394 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006024:	2100      	movs	r1, #0
 8006026:	480d      	ldr	r0, [pc, #52]	@ (800605c <MX_USART2_UART_Init+0x94>)
 8006028:	f008 fbc3 	bl	800e7b2 <HAL_UARTEx_SetTxFifoThreshold>
 800602c:	4603      	mov	r3, r0
 800602e:	2b00      	cmp	r3, #0
 8006030:	d001      	beq.n	8006036 <MX_USART2_UART_Init+0x6e>
  {
    Error_Handler();
 8006032:	f7ff f9af 	bl	8005394 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006036:	2100      	movs	r1, #0
 8006038:	4808      	ldr	r0, [pc, #32]	@ (800605c <MX_USART2_UART_Init+0x94>)
 800603a:	f008 fbf8 	bl	800e82e <HAL_UARTEx_SetRxFifoThreshold>
 800603e:	4603      	mov	r3, r0
 8006040:	2b00      	cmp	r3, #0
 8006042:	d001      	beq.n	8006048 <MX_USART2_UART_Init+0x80>
  {
    Error_Handler();
 8006044:	f7ff f9a6 	bl	8005394 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8006048:	4804      	ldr	r0, [pc, #16]	@ (800605c <MX_USART2_UART_Init+0x94>)
 800604a:	f008 fb79 	bl	800e740 <HAL_UARTEx_DisableFifoMode>
 800604e:	4603      	mov	r3, r0
 8006050:	2b00      	cmp	r3, #0
 8006052:	d001      	beq.n	8006058 <MX_USART2_UART_Init+0x90>
  {
    Error_Handler();
 8006054:	f7ff f99e 	bl	8005394 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8006058:	bf00      	nop
 800605a:	bd80      	pop	{r7, pc}
 800605c:	20001c78 	.word	0x20001c78
 8006060:	40004400 	.word	0x40004400

08006064 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8006064:	b580      	push	{r7, lr}
 8006066:	b09e      	sub	sp, #120	@ 0x78
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800606c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8006070:	2200      	movs	r2, #0
 8006072:	601a      	str	r2, [r3, #0]
 8006074:	605a      	str	r2, [r3, #4]
 8006076:	609a      	str	r2, [r3, #8]
 8006078:	60da      	str	r2, [r3, #12]
 800607a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800607c:	f107 0310 	add.w	r3, r7, #16
 8006080:	2254      	movs	r2, #84	@ 0x54
 8006082:	2100      	movs	r1, #0
 8006084:	4618      	mov	r0, r3
 8006086:	f009 f955 	bl	800f334 <memset>
  if(uartHandle->Instance==USART2)
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	4a37      	ldr	r2, [pc, #220]	@ (800616c <HAL_UART_MspInit+0x108>)
 8006090:	4293      	cmp	r3, r2
 8006092:	d167      	bne.n	8006164 <HAL_UART_MspInit+0x100>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8006094:	2302      	movs	r3, #2
 8006096:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8006098:	2300      	movs	r3, #0
 800609a:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800609c:	f107 0310 	add.w	r3, r7, #16
 80060a0:	4618      	mov	r0, r3
 80060a2:	f002 ffa5 	bl	8008ff0 <HAL_RCCEx_PeriphCLKConfig>
 80060a6:	4603      	mov	r3, r0
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d001      	beq.n	80060b0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80060ac:	f7ff f972 	bl	8005394 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80060b0:	4b2f      	ldr	r3, [pc, #188]	@ (8006170 <HAL_UART_MspInit+0x10c>)
 80060b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80060b4:	4a2e      	ldr	r2, [pc, #184]	@ (8006170 <HAL_UART_MspInit+0x10c>)
 80060b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80060ba:	6593      	str	r3, [r2, #88]	@ 0x58
 80060bc:	4b2c      	ldr	r3, [pc, #176]	@ (8006170 <HAL_UART_MspInit+0x10c>)
 80060be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80060c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80060c4:	60fb      	str	r3, [r7, #12]
 80060c6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80060c8:	4b29      	ldr	r3, [pc, #164]	@ (8006170 <HAL_UART_MspInit+0x10c>)
 80060ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80060cc:	4a28      	ldr	r2, [pc, #160]	@ (8006170 <HAL_UART_MspInit+0x10c>)
 80060ce:	f043 0301 	orr.w	r3, r3, #1
 80060d2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80060d4:	4b26      	ldr	r3, [pc, #152]	@ (8006170 <HAL_UART_MspInit+0x10c>)
 80060d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80060d8:	f003 0301 	and.w	r3, r3, #1
 80060dc:	60bb      	str	r3, [r7, #8]
 80060de:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80060e0:	230c      	movs	r3, #12
 80060e2:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80060e4:	2302      	movs	r3, #2
 80060e6:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80060e8:	2300      	movs	r3, #0
 80060ea:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80060ec:	2300      	movs	r3, #0
 80060ee:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80060f0:	2307      	movs	r3, #7
 80060f2:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80060f4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80060f8:	4619      	mov	r1, r3
 80060fa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80060fe:	f001 ffe3 	bl	80080c8 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel1;
 8006102:	4b1c      	ldr	r3, [pc, #112]	@ (8006174 <HAL_UART_MspInit+0x110>)
 8006104:	4a1c      	ldr	r2, [pc, #112]	@ (8006178 <HAL_UART_MspInit+0x114>)
 8006106:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8006108:	4b1a      	ldr	r3, [pc, #104]	@ (8006174 <HAL_UART_MspInit+0x110>)
 800610a:	221b      	movs	r2, #27
 800610c:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800610e:	4b19      	ldr	r3, [pc, #100]	@ (8006174 <HAL_UART_MspInit+0x110>)
 8006110:	2210      	movs	r2, #16
 8006112:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006114:	4b17      	ldr	r3, [pc, #92]	@ (8006174 <HAL_UART_MspInit+0x110>)
 8006116:	2200      	movs	r2, #0
 8006118:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800611a:	4b16      	ldr	r3, [pc, #88]	@ (8006174 <HAL_UART_MspInit+0x110>)
 800611c:	2280      	movs	r2, #128	@ 0x80
 800611e:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006120:	4b14      	ldr	r3, [pc, #80]	@ (8006174 <HAL_UART_MspInit+0x110>)
 8006122:	2200      	movs	r2, #0
 8006124:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006126:	4b13      	ldr	r3, [pc, #76]	@ (8006174 <HAL_UART_MspInit+0x110>)
 8006128:	2200      	movs	r2, #0
 800612a:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800612c:	4b11      	ldr	r3, [pc, #68]	@ (8006174 <HAL_UART_MspInit+0x110>)
 800612e:	2200      	movs	r2, #0
 8006130:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8006132:	4b10      	ldr	r3, [pc, #64]	@ (8006174 <HAL_UART_MspInit+0x110>)
 8006134:	2200      	movs	r2, #0
 8006136:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8006138:	480e      	ldr	r0, [pc, #56]	@ (8006174 <HAL_UART_MspInit+0x110>)
 800613a:	f001 fc87 	bl	8007a4c <HAL_DMA_Init>
 800613e:	4603      	mov	r3, r0
 8006140:	2b00      	cmp	r3, #0
 8006142:	d001      	beq.n	8006148 <HAL_UART_MspInit+0xe4>
    {
      Error_Handler();
 8006144:	f7ff f926 	bl	8005394 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	4a0a      	ldr	r2, [pc, #40]	@ (8006174 <HAL_UART_MspInit+0x110>)
 800614c:	67da      	str	r2, [r3, #124]	@ 0x7c
 800614e:	4a09      	ldr	r2, [pc, #36]	@ (8006174 <HAL_UART_MspInit+0x110>)
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8006154:	2200      	movs	r2, #0
 8006156:	2100      	movs	r1, #0
 8006158:	2026      	movs	r0, #38	@ 0x26
 800615a:	f001 fc42 	bl	80079e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800615e:	2026      	movs	r0, #38	@ 0x26
 8006160:	f001 fc59 	bl	8007a16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8006164:	bf00      	nop
 8006166:	3778      	adds	r7, #120	@ 0x78
 8006168:	46bd      	mov	sp, r7
 800616a:	bd80      	pop	{r7, pc}
 800616c:	40004400 	.word	0x40004400
 8006170:	40021000 	.word	0x40021000
 8006174:	20001d44 	.word	0x20001d44
 8006178:	40020008 	.word	0x40020008

0800617c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800617c:	480d      	ldr	r0, [pc, #52]	@ (80061b4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800617e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8006180:	f7ff fa5a 	bl	8005638 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006184:	480c      	ldr	r0, [pc, #48]	@ (80061b8 <LoopForever+0x6>)
  ldr r1, =_edata
 8006186:	490d      	ldr	r1, [pc, #52]	@ (80061bc <LoopForever+0xa>)
  ldr r2, =_sidata
 8006188:	4a0d      	ldr	r2, [pc, #52]	@ (80061c0 <LoopForever+0xe>)
  movs r3, #0
 800618a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800618c:	e002      	b.n	8006194 <LoopCopyDataInit>

0800618e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800618e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006190:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006192:	3304      	adds	r3, #4

08006194 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006194:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006196:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006198:	d3f9      	bcc.n	800618e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800619a:	4a0a      	ldr	r2, [pc, #40]	@ (80061c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800619c:	4c0a      	ldr	r4, [pc, #40]	@ (80061c8 <LoopForever+0x16>)
  movs r3, #0
 800619e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80061a0:	e001      	b.n	80061a6 <LoopFillZerobss>

080061a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80061a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80061a4:	3204      	adds	r2, #4

080061a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80061a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80061a8:	d3fb      	bcc.n	80061a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80061aa:	f009 f8d1 	bl	800f350 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80061ae:	f7fd fb0b 	bl	80037c8 <main>

080061b2 <LoopForever>:

LoopForever:
    b LoopForever
 80061b2:	e7fe      	b.n	80061b2 <LoopForever>
  ldr   r0, =_estack
 80061b4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80061b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80061bc:	200002c0 	.word	0x200002c0
  ldr r2, =_sidata
 80061c0:	080117b0 	.word	0x080117b0
  ldr r2, =_sbss
 80061c4:	200002c0 	.word	0x200002c0
  ldr r4, =_ebss
 80061c8:	20001ee0 	.word	0x20001ee0

080061cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80061cc:	e7fe      	b.n	80061cc <ADC1_2_IRQHandler>

080061ce <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80061ce:	b580      	push	{r7, lr}
 80061d0:	b082      	sub	sp, #8
 80061d2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80061d4:	2300      	movs	r3, #0
 80061d6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80061d8:	2003      	movs	r0, #3
 80061da:	f001 fbf7 	bl	80079cc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80061de:	2000      	movs	r0, #0
 80061e0:	f000 f80e 	bl	8006200 <HAL_InitTick>
 80061e4:	4603      	mov	r3, r0
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d002      	beq.n	80061f0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80061ea:	2301      	movs	r3, #1
 80061ec:	71fb      	strb	r3, [r7, #7]
 80061ee:	e001      	b.n	80061f4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80061f0:	f7ff f974 	bl	80054dc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80061f4:	79fb      	ldrb	r3, [r7, #7]

}
 80061f6:	4618      	mov	r0, r3
 80061f8:	3708      	adds	r7, #8
 80061fa:	46bd      	mov	sp, r7
 80061fc:	bd80      	pop	{r7, pc}
	...

08006200 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006200:	b580      	push	{r7, lr}
 8006202:	b084      	sub	sp, #16
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8006208:	2300      	movs	r3, #0
 800620a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800620c:	4b16      	ldr	r3, [pc, #88]	@ (8006268 <HAL_InitTick+0x68>)
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d022      	beq.n	800625a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8006214:	4b15      	ldr	r3, [pc, #84]	@ (800626c <HAL_InitTick+0x6c>)
 8006216:	681a      	ldr	r2, [r3, #0]
 8006218:	4b13      	ldr	r3, [pc, #76]	@ (8006268 <HAL_InitTick+0x68>)
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8006220:	fbb1 f3f3 	udiv	r3, r1, r3
 8006224:	fbb2 f3f3 	udiv	r3, r2, r3
 8006228:	4618      	mov	r0, r3
 800622a:	f001 fc02 	bl	8007a32 <HAL_SYSTICK_Config>
 800622e:	4603      	mov	r3, r0
 8006230:	2b00      	cmp	r3, #0
 8006232:	d10f      	bne.n	8006254 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2b0f      	cmp	r3, #15
 8006238:	d809      	bhi.n	800624e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800623a:	2200      	movs	r2, #0
 800623c:	6879      	ldr	r1, [r7, #4]
 800623e:	f04f 30ff 	mov.w	r0, #4294967295
 8006242:	f001 fbce 	bl	80079e2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8006246:	4a0a      	ldr	r2, [pc, #40]	@ (8006270 <HAL_InitTick+0x70>)
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	6013      	str	r3, [r2, #0]
 800624c:	e007      	b.n	800625e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800624e:	2301      	movs	r3, #1
 8006250:	73fb      	strb	r3, [r7, #15]
 8006252:	e004      	b.n	800625e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8006254:	2301      	movs	r3, #1
 8006256:	73fb      	strb	r3, [r7, #15]
 8006258:	e001      	b.n	800625e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800625a:	2301      	movs	r3, #1
 800625c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800625e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006260:	4618      	mov	r0, r3
 8006262:	3710      	adds	r7, #16
 8006264:	46bd      	mov	sp, r7
 8006266:	bd80      	pop	{r7, pc}
 8006268:	2000026c 	.word	0x2000026c
 800626c:	20000264 	.word	0x20000264
 8006270:	20000268 	.word	0x20000268

08006274 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006274:	b480      	push	{r7}
 8006276:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006278:	4b05      	ldr	r3, [pc, #20]	@ (8006290 <HAL_IncTick+0x1c>)
 800627a:	681a      	ldr	r2, [r3, #0]
 800627c:	4b05      	ldr	r3, [pc, #20]	@ (8006294 <HAL_IncTick+0x20>)
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	4413      	add	r3, r2
 8006282:	4a03      	ldr	r2, [pc, #12]	@ (8006290 <HAL_IncTick+0x1c>)
 8006284:	6013      	str	r3, [r2, #0]
}
 8006286:	bf00      	nop
 8006288:	46bd      	mov	sp, r7
 800628a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628e:	4770      	bx	lr
 8006290:	20001da4 	.word	0x20001da4
 8006294:	2000026c 	.word	0x2000026c

08006298 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006298:	b480      	push	{r7}
 800629a:	af00      	add	r7, sp, #0
  return uwTick;
 800629c:	4b03      	ldr	r3, [pc, #12]	@ (80062ac <HAL_GetTick+0x14>)
 800629e:	681b      	ldr	r3, [r3, #0]
}
 80062a0:	4618      	mov	r0, r3
 80062a2:	46bd      	mov	sp, r7
 80062a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a8:	4770      	bx	lr
 80062aa:	bf00      	nop
 80062ac:	20001da4 	.word	0x20001da4

080062b0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80062b0:	b480      	push	{r7}
 80062b2:	b083      	sub	sp, #12
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
 80062b8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	689b      	ldr	r3, [r3, #8]
 80062be:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	431a      	orrs	r2, r3
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	609a      	str	r2, [r3, #8]
}
 80062ca:	bf00      	nop
 80062cc:	370c      	adds	r7, #12
 80062ce:	46bd      	mov	sp, r7
 80062d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d4:	4770      	bx	lr

080062d6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80062d6:	b480      	push	{r7}
 80062d8:	b083      	sub	sp, #12
 80062da:	af00      	add	r7, sp, #0
 80062dc:	6078      	str	r0, [r7, #4]
 80062de:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	689b      	ldr	r3, [r3, #8]
 80062e4:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	431a      	orrs	r2, r3
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	609a      	str	r2, [r3, #8]
}
 80062f0:	bf00      	nop
 80062f2:	370c      	adds	r7, #12
 80062f4:	46bd      	mov	sp, r7
 80062f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fa:	4770      	bx	lr

080062fc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80062fc:	b480      	push	{r7}
 80062fe:	b083      	sub	sp, #12
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	689b      	ldr	r3, [r3, #8]
 8006308:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800630c:	4618      	mov	r0, r3
 800630e:	370c      	adds	r7, #12
 8006310:	46bd      	mov	sp, r7
 8006312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006316:	4770      	bx	lr

08006318 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8006318:	b480      	push	{r7}
 800631a:	b087      	sub	sp, #28
 800631c:	af00      	add	r7, sp, #0
 800631e:	60f8      	str	r0, [r7, #12]
 8006320:	60b9      	str	r1, [r7, #8]
 8006322:	607a      	str	r2, [r7, #4]
 8006324:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	3360      	adds	r3, #96	@ 0x60
 800632a:	461a      	mov	r2, r3
 800632c:	68bb      	ldr	r3, [r7, #8]
 800632e:	009b      	lsls	r3, r3, #2
 8006330:	4413      	add	r3, r2
 8006332:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8006334:	697b      	ldr	r3, [r7, #20]
 8006336:	681a      	ldr	r2, [r3, #0]
 8006338:	4b08      	ldr	r3, [pc, #32]	@ (800635c <LL_ADC_SetOffset+0x44>)
 800633a:	4013      	ands	r3, r2
 800633c:	687a      	ldr	r2, [r7, #4]
 800633e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8006342:	683a      	ldr	r2, [r7, #0]
 8006344:	430a      	orrs	r2, r1
 8006346:	4313      	orrs	r3, r2
 8006348:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800634c:	697b      	ldr	r3, [r7, #20]
 800634e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8006350:	bf00      	nop
 8006352:	371c      	adds	r7, #28
 8006354:	46bd      	mov	sp, r7
 8006356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635a:	4770      	bx	lr
 800635c:	03fff000 	.word	0x03fff000

08006360 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8006360:	b480      	push	{r7}
 8006362:	b085      	sub	sp, #20
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
 8006368:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	3360      	adds	r3, #96	@ 0x60
 800636e:	461a      	mov	r2, r3
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	009b      	lsls	r3, r3, #2
 8006374:	4413      	add	r3, r2
 8006376:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8006380:	4618      	mov	r0, r3
 8006382:	3714      	adds	r7, #20
 8006384:	46bd      	mov	sp, r7
 8006386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638a:	4770      	bx	lr

0800638c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800638c:	b480      	push	{r7}
 800638e:	b087      	sub	sp, #28
 8006390:	af00      	add	r7, sp, #0
 8006392:	60f8      	str	r0, [r7, #12]
 8006394:	60b9      	str	r1, [r7, #8]
 8006396:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	3360      	adds	r3, #96	@ 0x60
 800639c:	461a      	mov	r2, r3
 800639e:	68bb      	ldr	r3, [r7, #8]
 80063a0:	009b      	lsls	r3, r3, #2
 80063a2:	4413      	add	r3, r2
 80063a4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80063a6:	697b      	ldr	r3, [r7, #20]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	431a      	orrs	r2, r3
 80063b2:	697b      	ldr	r3, [r7, #20]
 80063b4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80063b6:	bf00      	nop
 80063b8:	371c      	adds	r7, #28
 80063ba:	46bd      	mov	sp, r7
 80063bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c0:	4770      	bx	lr

080063c2 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80063c2:	b480      	push	{r7}
 80063c4:	b087      	sub	sp, #28
 80063c6:	af00      	add	r7, sp, #0
 80063c8:	60f8      	str	r0, [r7, #12]
 80063ca:	60b9      	str	r1, [r7, #8]
 80063cc:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	3360      	adds	r3, #96	@ 0x60
 80063d2:	461a      	mov	r2, r3
 80063d4:	68bb      	ldr	r3, [r7, #8]
 80063d6:	009b      	lsls	r3, r3, #2
 80063d8:	4413      	add	r3, r2
 80063da:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80063dc:	697b      	ldr	r3, [r7, #20]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	431a      	orrs	r2, r3
 80063e8:	697b      	ldr	r3, [r7, #20]
 80063ea:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80063ec:	bf00      	nop
 80063ee:	371c      	adds	r7, #28
 80063f0:	46bd      	mov	sp, r7
 80063f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f6:	4770      	bx	lr

080063f8 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80063f8:	b480      	push	{r7}
 80063fa:	b087      	sub	sp, #28
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	60f8      	str	r0, [r7, #12]
 8006400:	60b9      	str	r1, [r7, #8]
 8006402:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	3360      	adds	r3, #96	@ 0x60
 8006408:	461a      	mov	r2, r3
 800640a:	68bb      	ldr	r3, [r7, #8]
 800640c:	009b      	lsls	r3, r3, #2
 800640e:	4413      	add	r3, r2
 8006410:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8006412:	697b      	ldr	r3, [r7, #20]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	431a      	orrs	r2, r3
 800641e:	697b      	ldr	r3, [r7, #20]
 8006420:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8006422:	bf00      	nop
 8006424:	371c      	adds	r7, #28
 8006426:	46bd      	mov	sp, r7
 8006428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642c:	4770      	bx	lr

0800642e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800642e:	b480      	push	{r7}
 8006430:	b083      	sub	sp, #12
 8006432:	af00      	add	r7, sp, #0
 8006434:	6078      	str	r0, [r7, #4]
 8006436:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	695b      	ldr	r3, [r3, #20]
 800643c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8006440:	683b      	ldr	r3, [r7, #0]
 8006442:	431a      	orrs	r2, r3
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	615a      	str	r2, [r3, #20]
}
 8006448:	bf00      	nop
 800644a:	370c      	adds	r7, #12
 800644c:	46bd      	mov	sp, r7
 800644e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006452:	4770      	bx	lr

08006454 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8006454:	b480      	push	{r7}
 8006456:	b087      	sub	sp, #28
 8006458:	af00      	add	r7, sp, #0
 800645a:	60f8      	str	r0, [r7, #12]
 800645c:	60b9      	str	r1, [r7, #8]
 800645e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	3330      	adds	r3, #48	@ 0x30
 8006464:	461a      	mov	r2, r3
 8006466:	68bb      	ldr	r3, [r7, #8]
 8006468:	0a1b      	lsrs	r3, r3, #8
 800646a:	009b      	lsls	r3, r3, #2
 800646c:	f003 030c 	and.w	r3, r3, #12
 8006470:	4413      	add	r3, r2
 8006472:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8006474:	697b      	ldr	r3, [r7, #20]
 8006476:	681a      	ldr	r2, [r3, #0]
 8006478:	68bb      	ldr	r3, [r7, #8]
 800647a:	f003 031f 	and.w	r3, r3, #31
 800647e:	211f      	movs	r1, #31
 8006480:	fa01 f303 	lsl.w	r3, r1, r3
 8006484:	43db      	mvns	r3, r3
 8006486:	401a      	ands	r2, r3
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	0e9b      	lsrs	r3, r3, #26
 800648c:	f003 011f 	and.w	r1, r3, #31
 8006490:	68bb      	ldr	r3, [r7, #8]
 8006492:	f003 031f 	and.w	r3, r3, #31
 8006496:	fa01 f303 	lsl.w	r3, r1, r3
 800649a:	431a      	orrs	r2, r3
 800649c:	697b      	ldr	r3, [r7, #20]
 800649e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80064a0:	bf00      	nop
 80064a2:	371c      	adds	r7, #28
 80064a4:	46bd      	mov	sp, r7
 80064a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064aa:	4770      	bx	lr

080064ac <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80064ac:	b480      	push	{r7}
 80064ae:	b087      	sub	sp, #28
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	60f8      	str	r0, [r7, #12]
 80064b4:	60b9      	str	r1, [r7, #8]
 80064b6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	3314      	adds	r3, #20
 80064bc:	461a      	mov	r2, r3
 80064be:	68bb      	ldr	r3, [r7, #8]
 80064c0:	0e5b      	lsrs	r3, r3, #25
 80064c2:	009b      	lsls	r3, r3, #2
 80064c4:	f003 0304 	and.w	r3, r3, #4
 80064c8:	4413      	add	r3, r2
 80064ca:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80064cc:	697b      	ldr	r3, [r7, #20]
 80064ce:	681a      	ldr	r2, [r3, #0]
 80064d0:	68bb      	ldr	r3, [r7, #8]
 80064d2:	0d1b      	lsrs	r3, r3, #20
 80064d4:	f003 031f 	and.w	r3, r3, #31
 80064d8:	2107      	movs	r1, #7
 80064da:	fa01 f303 	lsl.w	r3, r1, r3
 80064de:	43db      	mvns	r3, r3
 80064e0:	401a      	ands	r2, r3
 80064e2:	68bb      	ldr	r3, [r7, #8]
 80064e4:	0d1b      	lsrs	r3, r3, #20
 80064e6:	f003 031f 	and.w	r3, r3, #31
 80064ea:	6879      	ldr	r1, [r7, #4]
 80064ec:	fa01 f303 	lsl.w	r3, r1, r3
 80064f0:	431a      	orrs	r2, r3
 80064f2:	697b      	ldr	r3, [r7, #20]
 80064f4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80064f6:	bf00      	nop
 80064f8:	371c      	adds	r7, #28
 80064fa:	46bd      	mov	sp, r7
 80064fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006500:	4770      	bx	lr
	...

08006504 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8006504:	b480      	push	{r7}
 8006506:	b085      	sub	sp, #20
 8006508:	af00      	add	r7, sp, #0
 800650a:	60f8      	str	r0, [r7, #12]
 800650c:	60b9      	str	r1, [r7, #8]
 800650e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8006516:	68bb      	ldr	r3, [r7, #8]
 8006518:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800651c:	43db      	mvns	r3, r3
 800651e:	401a      	ands	r2, r3
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	f003 0318 	and.w	r3, r3, #24
 8006526:	4908      	ldr	r1, [pc, #32]	@ (8006548 <LL_ADC_SetChannelSingleDiff+0x44>)
 8006528:	40d9      	lsrs	r1, r3
 800652a:	68bb      	ldr	r3, [r7, #8]
 800652c:	400b      	ands	r3, r1
 800652e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006532:	431a      	orrs	r2, r3
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800653a:	bf00      	nop
 800653c:	3714      	adds	r7, #20
 800653e:	46bd      	mov	sp, r7
 8006540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006544:	4770      	bx	lr
 8006546:	bf00      	nop
 8006548:	0007ffff 	.word	0x0007ffff

0800654c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800654c:	b480      	push	{r7}
 800654e:	b083      	sub	sp, #12
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	689b      	ldr	r3, [r3, #8]
 8006558:	f003 031f 	and.w	r3, r3, #31
}
 800655c:	4618      	mov	r0, r3
 800655e:	370c      	adds	r7, #12
 8006560:	46bd      	mov	sp, r7
 8006562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006566:	4770      	bx	lr

08006568 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8006568:	b480      	push	{r7}
 800656a:	b083      	sub	sp, #12
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	689b      	ldr	r3, [r3, #8]
 8006574:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8006578:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800657c:	687a      	ldr	r2, [r7, #4]
 800657e:	6093      	str	r3, [r2, #8]
}
 8006580:	bf00      	nop
 8006582:	370c      	adds	r7, #12
 8006584:	46bd      	mov	sp, r7
 8006586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658a:	4770      	bx	lr

0800658c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800658c:	b480      	push	{r7}
 800658e:	b083      	sub	sp, #12
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	689b      	ldr	r3, [r3, #8]
 8006598:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800659c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80065a0:	d101      	bne.n	80065a6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80065a2:	2301      	movs	r3, #1
 80065a4:	e000      	b.n	80065a8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80065a6:	2300      	movs	r3, #0
}
 80065a8:	4618      	mov	r0, r3
 80065aa:	370c      	adds	r7, #12
 80065ac:	46bd      	mov	sp, r7
 80065ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b2:	4770      	bx	lr

080065b4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80065b4:	b480      	push	{r7}
 80065b6:	b083      	sub	sp, #12
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	689b      	ldr	r3, [r3, #8]
 80065c0:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80065c4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80065c8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80065d0:	bf00      	nop
 80065d2:	370c      	adds	r7, #12
 80065d4:	46bd      	mov	sp, r7
 80065d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065da:	4770      	bx	lr

080065dc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80065dc:	b480      	push	{r7}
 80065de:	b083      	sub	sp, #12
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	689b      	ldr	r3, [r3, #8]
 80065e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80065ec:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80065f0:	d101      	bne.n	80065f6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80065f2:	2301      	movs	r3, #1
 80065f4:	e000      	b.n	80065f8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80065f6:	2300      	movs	r3, #0
}
 80065f8:	4618      	mov	r0, r3
 80065fa:	370c      	adds	r7, #12
 80065fc:	46bd      	mov	sp, r7
 80065fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006602:	4770      	bx	lr

08006604 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8006604:	b480      	push	{r7}
 8006606:	b083      	sub	sp, #12
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	689b      	ldr	r3, [r3, #8]
 8006610:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006614:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8006618:	f043 0201 	orr.w	r2, r3, #1
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8006620:	bf00      	nop
 8006622:	370c      	adds	r7, #12
 8006624:	46bd      	mov	sp, r7
 8006626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662a:	4770      	bx	lr

0800662c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800662c:	b480      	push	{r7}
 800662e:	b083      	sub	sp, #12
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	689b      	ldr	r3, [r3, #8]
 8006638:	f003 0301 	and.w	r3, r3, #1
 800663c:	2b01      	cmp	r3, #1
 800663e:	d101      	bne.n	8006644 <LL_ADC_IsEnabled+0x18>
 8006640:	2301      	movs	r3, #1
 8006642:	e000      	b.n	8006646 <LL_ADC_IsEnabled+0x1a>
 8006644:	2300      	movs	r3, #0
}
 8006646:	4618      	mov	r0, r3
 8006648:	370c      	adds	r7, #12
 800664a:	46bd      	mov	sp, r7
 800664c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006650:	4770      	bx	lr

08006652 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8006652:	b480      	push	{r7}
 8006654:	b083      	sub	sp, #12
 8006656:	af00      	add	r7, sp, #0
 8006658:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	689b      	ldr	r3, [r3, #8]
 800665e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006662:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8006666:	f043 0204 	orr.w	r2, r3, #4
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800666e:	bf00      	nop
 8006670:	370c      	adds	r7, #12
 8006672:	46bd      	mov	sp, r7
 8006674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006678:	4770      	bx	lr

0800667a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800667a:	b480      	push	{r7}
 800667c:	b083      	sub	sp, #12
 800667e:	af00      	add	r7, sp, #0
 8006680:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	689b      	ldr	r3, [r3, #8]
 8006686:	f003 0304 	and.w	r3, r3, #4
 800668a:	2b04      	cmp	r3, #4
 800668c:	d101      	bne.n	8006692 <LL_ADC_REG_IsConversionOngoing+0x18>
 800668e:	2301      	movs	r3, #1
 8006690:	e000      	b.n	8006694 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8006692:	2300      	movs	r3, #0
}
 8006694:	4618      	mov	r0, r3
 8006696:	370c      	adds	r7, #12
 8006698:	46bd      	mov	sp, r7
 800669a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669e:	4770      	bx	lr

080066a0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80066a0:	b480      	push	{r7}
 80066a2:	b083      	sub	sp, #12
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	689b      	ldr	r3, [r3, #8]
 80066ac:	f003 0308 	and.w	r3, r3, #8
 80066b0:	2b08      	cmp	r3, #8
 80066b2:	d101      	bne.n	80066b8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80066b4:	2301      	movs	r3, #1
 80066b6:	e000      	b.n	80066ba <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80066b8:	2300      	movs	r3, #0
}
 80066ba:	4618      	mov	r0, r3
 80066bc:	370c      	adds	r7, #12
 80066be:	46bd      	mov	sp, r7
 80066c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c4:	4770      	bx	lr
	...

080066c8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80066c8:	b590      	push	{r4, r7, lr}
 80066ca:	b089      	sub	sp, #36	@ 0x24
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80066d0:	2300      	movs	r3, #0
 80066d2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80066d4:	2300      	movs	r3, #0
 80066d6:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d101      	bne.n	80066e2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80066de:	2301      	movs	r3, #1
 80066e0:	e1a9      	b.n	8006a36 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	695b      	ldr	r3, [r3, #20]
 80066e6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d109      	bne.n	8006704 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80066f0:	6878      	ldr	r0, [r7, #4]
 80066f2:	f7fc fedf 	bl	80034b4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	2200      	movs	r2, #0
 80066fa:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2200      	movs	r2, #0
 8006700:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	4618      	mov	r0, r3
 800670a:	f7ff ff3f 	bl	800658c <LL_ADC_IsDeepPowerDownEnabled>
 800670e:	4603      	mov	r3, r0
 8006710:	2b00      	cmp	r3, #0
 8006712:	d004      	beq.n	800671e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	4618      	mov	r0, r3
 800671a:	f7ff ff25 	bl	8006568 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	4618      	mov	r0, r3
 8006724:	f7ff ff5a 	bl	80065dc <LL_ADC_IsInternalRegulatorEnabled>
 8006728:	4603      	mov	r3, r0
 800672a:	2b00      	cmp	r3, #0
 800672c:	d115      	bne.n	800675a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	4618      	mov	r0, r3
 8006734:	f7ff ff3e 	bl	80065b4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006738:	4b9c      	ldr	r3, [pc, #624]	@ (80069ac <HAL_ADC_Init+0x2e4>)
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	099b      	lsrs	r3, r3, #6
 800673e:	4a9c      	ldr	r2, [pc, #624]	@ (80069b0 <HAL_ADC_Init+0x2e8>)
 8006740:	fba2 2303 	umull	r2, r3, r2, r3
 8006744:	099b      	lsrs	r3, r3, #6
 8006746:	3301      	adds	r3, #1
 8006748:	005b      	lsls	r3, r3, #1
 800674a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800674c:	e002      	b.n	8006754 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	3b01      	subs	r3, #1
 8006752:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d1f9      	bne.n	800674e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	4618      	mov	r0, r3
 8006760:	f7ff ff3c 	bl	80065dc <LL_ADC_IsInternalRegulatorEnabled>
 8006764:	4603      	mov	r3, r0
 8006766:	2b00      	cmp	r3, #0
 8006768:	d10d      	bne.n	8006786 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800676e:	f043 0210 	orr.w	r2, r3, #16
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800677a:	f043 0201 	orr.w	r2, r3, #1
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8006782:	2301      	movs	r3, #1
 8006784:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	4618      	mov	r0, r3
 800678c:	f7ff ff75 	bl	800667a <LL_ADC_REG_IsConversionOngoing>
 8006790:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006796:	f003 0310 	and.w	r3, r3, #16
 800679a:	2b00      	cmp	r3, #0
 800679c:	f040 8142 	bne.w	8006a24 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80067a0:	697b      	ldr	r3, [r7, #20]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	f040 813e 	bne.w	8006a24 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80067ac:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80067b0:	f043 0202 	orr.w	r2, r3, #2
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	4618      	mov	r0, r3
 80067be:	f7ff ff35 	bl	800662c <LL_ADC_IsEnabled>
 80067c2:	4603      	mov	r3, r0
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d141      	bne.n	800684c <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80067d0:	d004      	beq.n	80067dc <HAL_ADC_Init+0x114>
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	4a77      	ldr	r2, [pc, #476]	@ (80069b4 <HAL_ADC_Init+0x2ec>)
 80067d8:	4293      	cmp	r3, r2
 80067da:	d10f      	bne.n	80067fc <HAL_ADC_Init+0x134>
 80067dc:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80067e0:	f7ff ff24 	bl	800662c <LL_ADC_IsEnabled>
 80067e4:	4604      	mov	r4, r0
 80067e6:	4873      	ldr	r0, [pc, #460]	@ (80069b4 <HAL_ADC_Init+0x2ec>)
 80067e8:	f7ff ff20 	bl	800662c <LL_ADC_IsEnabled>
 80067ec:	4603      	mov	r3, r0
 80067ee:	4323      	orrs	r3, r4
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	bf0c      	ite	eq
 80067f4:	2301      	moveq	r3, #1
 80067f6:	2300      	movne	r3, #0
 80067f8:	b2db      	uxtb	r3, r3
 80067fa:	e012      	b.n	8006822 <HAL_ADC_Init+0x15a>
 80067fc:	486e      	ldr	r0, [pc, #440]	@ (80069b8 <HAL_ADC_Init+0x2f0>)
 80067fe:	f7ff ff15 	bl	800662c <LL_ADC_IsEnabled>
 8006802:	4604      	mov	r4, r0
 8006804:	486d      	ldr	r0, [pc, #436]	@ (80069bc <HAL_ADC_Init+0x2f4>)
 8006806:	f7ff ff11 	bl	800662c <LL_ADC_IsEnabled>
 800680a:	4603      	mov	r3, r0
 800680c:	431c      	orrs	r4, r3
 800680e:	486c      	ldr	r0, [pc, #432]	@ (80069c0 <HAL_ADC_Init+0x2f8>)
 8006810:	f7ff ff0c 	bl	800662c <LL_ADC_IsEnabled>
 8006814:	4603      	mov	r3, r0
 8006816:	4323      	orrs	r3, r4
 8006818:	2b00      	cmp	r3, #0
 800681a:	bf0c      	ite	eq
 800681c:	2301      	moveq	r3, #1
 800681e:	2300      	movne	r3, #0
 8006820:	b2db      	uxtb	r3, r3
 8006822:	2b00      	cmp	r3, #0
 8006824:	d012      	beq.n	800684c <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800682e:	d004      	beq.n	800683a <HAL_ADC_Init+0x172>
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	4a5f      	ldr	r2, [pc, #380]	@ (80069b4 <HAL_ADC_Init+0x2ec>)
 8006836:	4293      	cmp	r3, r2
 8006838:	d101      	bne.n	800683e <HAL_ADC_Init+0x176>
 800683a:	4a62      	ldr	r2, [pc, #392]	@ (80069c4 <HAL_ADC_Init+0x2fc>)
 800683c:	e000      	b.n	8006840 <HAL_ADC_Init+0x178>
 800683e:	4a62      	ldr	r2, [pc, #392]	@ (80069c8 <HAL_ADC_Init+0x300>)
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	685b      	ldr	r3, [r3, #4]
 8006844:	4619      	mov	r1, r3
 8006846:	4610      	mov	r0, r2
 8006848:	f7ff fd32 	bl	80062b0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	7f5b      	ldrb	r3, [r3, #29]
 8006850:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006856:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 800685c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8006862:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800686a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800686c:	4313      	orrs	r3, r2
 800686e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006876:	2b01      	cmp	r3, #1
 8006878:	d106      	bne.n	8006888 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800687e:	3b01      	subs	r3, #1
 8006880:	045b      	lsls	r3, r3, #17
 8006882:	69ba      	ldr	r2, [r7, #24]
 8006884:	4313      	orrs	r3, r2
 8006886:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800688c:	2b00      	cmp	r3, #0
 800688e:	d009      	beq.n	80068a4 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006894:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800689c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800689e:	69ba      	ldr	r2, [r7, #24]
 80068a0:	4313      	orrs	r3, r2
 80068a2:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	68da      	ldr	r2, [r3, #12]
 80068aa:	4b48      	ldr	r3, [pc, #288]	@ (80069cc <HAL_ADC_Init+0x304>)
 80068ac:	4013      	ands	r3, r2
 80068ae:	687a      	ldr	r2, [r7, #4]
 80068b0:	6812      	ldr	r2, [r2, #0]
 80068b2:	69b9      	ldr	r1, [r7, #24]
 80068b4:	430b      	orrs	r3, r1
 80068b6:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	691b      	ldr	r3, [r3, #16]
 80068be:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	430a      	orrs	r2, r1
 80068cc:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	4618      	mov	r0, r3
 80068d4:	f7ff fee4 	bl	80066a0 <LL_ADC_INJ_IsConversionOngoing>
 80068d8:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80068da:	697b      	ldr	r3, [r7, #20]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d17f      	bne.n	80069e0 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80068e0:	693b      	ldr	r3, [r7, #16]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d17c      	bne.n	80069e0 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80068ea:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80068f2:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80068f4:	4313      	orrs	r3, r2
 80068f6:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	68db      	ldr	r3, [r3, #12]
 80068fe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006902:	f023 0302 	bic.w	r3, r3, #2
 8006906:	687a      	ldr	r2, [r7, #4]
 8006908:	6812      	ldr	r2, [r2, #0]
 800690a:	69b9      	ldr	r1, [r7, #24]
 800690c:	430b      	orrs	r3, r1
 800690e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	691b      	ldr	r3, [r3, #16]
 8006914:	2b00      	cmp	r3, #0
 8006916:	d017      	beq.n	8006948 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	691a      	ldr	r2, [r3, #16]
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8006926:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8006930:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8006934:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8006938:	687a      	ldr	r2, [r7, #4]
 800693a:	6911      	ldr	r1, [r2, #16]
 800693c:	687a      	ldr	r2, [r7, #4]
 800693e:	6812      	ldr	r2, [r2, #0]
 8006940:	430b      	orrs	r3, r1
 8006942:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8006946:	e013      	b.n	8006970 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	691a      	ldr	r2, [r3, #16]
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8006956:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8006960:	687a      	ldr	r2, [r7, #4]
 8006962:	6812      	ldr	r2, [r2, #0]
 8006964:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8006968:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800696c:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006976:	2b01      	cmp	r3, #1
 8006978:	d12a      	bne.n	80069d0 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	691b      	ldr	r3, [r3, #16]
 8006980:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8006984:	f023 0304 	bic.w	r3, r3, #4
 8006988:	687a      	ldr	r2, [r7, #4]
 800698a:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 800698c:	687a      	ldr	r2, [r7, #4]
 800698e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006990:	4311      	orrs	r1, r2
 8006992:	687a      	ldr	r2, [r7, #4]
 8006994:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8006996:	4311      	orrs	r1, r2
 8006998:	687a      	ldr	r2, [r7, #4]
 800699a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800699c:	430a      	orrs	r2, r1
 800699e:	431a      	orrs	r2, r3
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f042 0201 	orr.w	r2, r2, #1
 80069a8:	611a      	str	r2, [r3, #16]
 80069aa:	e019      	b.n	80069e0 <HAL_ADC_Init+0x318>
 80069ac:	20000264 	.word	0x20000264
 80069b0:	053e2d63 	.word	0x053e2d63
 80069b4:	50000100 	.word	0x50000100
 80069b8:	50000400 	.word	0x50000400
 80069bc:	50000500 	.word	0x50000500
 80069c0:	50000600 	.word	0x50000600
 80069c4:	50000300 	.word	0x50000300
 80069c8:	50000700 	.word	0x50000700
 80069cc:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	691a      	ldr	r2, [r3, #16]
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f022 0201 	bic.w	r2, r2, #1
 80069de:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	695b      	ldr	r3, [r3, #20]
 80069e4:	2b01      	cmp	r3, #1
 80069e6:	d10c      	bne.n	8006a02 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069ee:	f023 010f 	bic.w	r1, r3, #15
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	6a1b      	ldr	r3, [r3, #32]
 80069f6:	1e5a      	subs	r2, r3, #1
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	430a      	orrs	r2, r1
 80069fe:	631a      	str	r2, [r3, #48]	@ 0x30
 8006a00:	e007      	b.n	8006a12 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	f022 020f 	bic.w	r2, r2, #15
 8006a10:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006a16:	f023 0303 	bic.w	r3, r3, #3
 8006a1a:	f043 0201 	orr.w	r2, r3, #1
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006a22:	e007      	b.n	8006a34 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006a28:	f043 0210 	orr.w	r2, r3, #16
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8006a30:	2301      	movs	r3, #1
 8006a32:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8006a34:	7ffb      	ldrb	r3, [r7, #31]
}
 8006a36:	4618      	mov	r0, r3
 8006a38:	3724      	adds	r7, #36	@ 0x24
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	bd90      	pop	{r4, r7, pc}
 8006a3e:	bf00      	nop

08006a40 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8006a40:	b580      	push	{r7, lr}
 8006a42:	b086      	sub	sp, #24
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006a50:	d004      	beq.n	8006a5c <HAL_ADC_Start+0x1c>
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	4a67      	ldr	r2, [pc, #412]	@ (8006bf4 <HAL_ADC_Start+0x1b4>)
 8006a58:	4293      	cmp	r3, r2
 8006a5a:	d101      	bne.n	8006a60 <HAL_ADC_Start+0x20>
 8006a5c:	4b66      	ldr	r3, [pc, #408]	@ (8006bf8 <HAL_ADC_Start+0x1b8>)
 8006a5e:	e000      	b.n	8006a62 <HAL_ADC_Start+0x22>
 8006a60:	4b66      	ldr	r3, [pc, #408]	@ (8006bfc <HAL_ADC_Start+0x1bc>)
 8006a62:	4618      	mov	r0, r3
 8006a64:	f7ff fd72 	bl	800654c <LL_ADC_GetMultimode>
 8006a68:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	4618      	mov	r0, r3
 8006a70:	f7ff fe03 	bl	800667a <LL_ADC_REG_IsConversionOngoing>
 8006a74:	4603      	mov	r3, r0
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	f040 80b4 	bne.w	8006be4 <HAL_ADC_Start+0x1a4>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8006a82:	2b01      	cmp	r3, #1
 8006a84:	d101      	bne.n	8006a8a <HAL_ADC_Start+0x4a>
 8006a86:	2302      	movs	r3, #2
 8006a88:	e0af      	b.n	8006bea <HAL_ADC_Start+0x1aa>
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	2201      	movs	r2, #1
 8006a8e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8006a92:	6878      	ldr	r0, [r7, #4]
 8006a94:	f000 fd06 	bl	80074a4 <ADC_Enable>
 8006a98:	4603      	mov	r3, r0
 8006a9a:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8006a9c:	7dfb      	ldrb	r3, [r7, #23]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	f040 809b 	bne.w	8006bda <HAL_ADC_Start+0x19a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006aa8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8006aac:	f023 0301 	bic.w	r3, r3, #1
 8006ab0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	4a4d      	ldr	r2, [pc, #308]	@ (8006bf4 <HAL_ADC_Start+0x1b4>)
 8006abe:	4293      	cmp	r3, r2
 8006ac0:	d009      	beq.n	8006ad6 <HAL_ADC_Start+0x96>
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	4a4e      	ldr	r2, [pc, #312]	@ (8006c00 <HAL_ADC_Start+0x1c0>)
 8006ac8:	4293      	cmp	r3, r2
 8006aca:	d002      	beq.n	8006ad2 <HAL_ADC_Start+0x92>
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	e003      	b.n	8006ada <HAL_ADC_Start+0x9a>
 8006ad2:	4b4c      	ldr	r3, [pc, #304]	@ (8006c04 <HAL_ADC_Start+0x1c4>)
 8006ad4:	e001      	b.n	8006ada <HAL_ADC_Start+0x9a>
 8006ad6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8006ada:	687a      	ldr	r2, [r7, #4]
 8006adc:	6812      	ldr	r2, [r2, #0]
 8006ade:	4293      	cmp	r3, r2
 8006ae0:	d002      	beq.n	8006ae8 <HAL_ADC_Start+0xa8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006ae2:	693b      	ldr	r3, [r7, #16]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d105      	bne.n	8006af4 <HAL_ADC_Start+0xb4>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006aec:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006af8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006afc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006b00:	d106      	bne.n	8006b10 <HAL_ADC_Start+0xd0>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006b06:	f023 0206 	bic.w	r2, r3, #6
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	661a      	str	r2, [r3, #96]	@ 0x60
 8006b0e:	e002      	b.n	8006b16 <HAL_ADC_Start+0xd6>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2200      	movs	r2, #0
 8006b14:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	221c      	movs	r2, #28
 8006b1c:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	2200      	movs	r2, #0
 8006b22:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	4a32      	ldr	r2, [pc, #200]	@ (8006bf4 <HAL_ADC_Start+0x1b4>)
 8006b2c:	4293      	cmp	r3, r2
 8006b2e:	d009      	beq.n	8006b44 <HAL_ADC_Start+0x104>
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	4a32      	ldr	r2, [pc, #200]	@ (8006c00 <HAL_ADC_Start+0x1c0>)
 8006b36:	4293      	cmp	r3, r2
 8006b38:	d002      	beq.n	8006b40 <HAL_ADC_Start+0x100>
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	e003      	b.n	8006b48 <HAL_ADC_Start+0x108>
 8006b40:	4b30      	ldr	r3, [pc, #192]	@ (8006c04 <HAL_ADC_Start+0x1c4>)
 8006b42:	e001      	b.n	8006b48 <HAL_ADC_Start+0x108>
 8006b44:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8006b48:	687a      	ldr	r2, [r7, #4]
 8006b4a:	6812      	ldr	r2, [r2, #0]
 8006b4c:	4293      	cmp	r3, r2
 8006b4e:	d008      	beq.n	8006b62 <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006b50:	693b      	ldr	r3, [r7, #16]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d005      	beq.n	8006b62 <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8006b56:	693b      	ldr	r3, [r7, #16]
 8006b58:	2b05      	cmp	r3, #5
 8006b5a:	d002      	beq.n	8006b62 <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8006b5c:	693b      	ldr	r3, [r7, #16]
 8006b5e:	2b09      	cmp	r3, #9
 8006b60:	d114      	bne.n	8006b8c <HAL_ADC_Start+0x14c>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	68db      	ldr	r3, [r3, #12]
 8006b68:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d007      	beq.n	8006b80 <HAL_ADC_Start+0x140>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006b74:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8006b78:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	4618      	mov	r0, r3
 8006b86:	f7ff fd64 	bl	8006652 <LL_ADC_REG_StartConversion>
 8006b8a:	e02d      	b.n	8006be8 <HAL_ADC_Start+0x1a8>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006b90:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	4a15      	ldr	r2, [pc, #84]	@ (8006bf4 <HAL_ADC_Start+0x1b4>)
 8006b9e:	4293      	cmp	r3, r2
 8006ba0:	d009      	beq.n	8006bb6 <HAL_ADC_Start+0x176>
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	4a16      	ldr	r2, [pc, #88]	@ (8006c00 <HAL_ADC_Start+0x1c0>)
 8006ba8:	4293      	cmp	r3, r2
 8006baa:	d002      	beq.n	8006bb2 <HAL_ADC_Start+0x172>
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	e003      	b.n	8006bba <HAL_ADC_Start+0x17a>
 8006bb2:	4b14      	ldr	r3, [pc, #80]	@ (8006c04 <HAL_ADC_Start+0x1c4>)
 8006bb4:	e001      	b.n	8006bba <HAL_ADC_Start+0x17a>
 8006bb6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8006bba:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	68db      	ldr	r3, [r3, #12]
 8006bc0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d00f      	beq.n	8006be8 <HAL_ADC_Start+0x1a8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006bcc:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8006bd0:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006bd8:	e006      	b.n	8006be8 <HAL_ADC_Start+0x1a8>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	2200      	movs	r2, #0
 8006bde:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8006be2:	e001      	b.n	8006be8 <HAL_ADC_Start+0x1a8>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8006be4:	2302      	movs	r3, #2
 8006be6:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8006be8:	7dfb      	ldrb	r3, [r7, #23]
}
 8006bea:	4618      	mov	r0, r3
 8006bec:	3718      	adds	r7, #24
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	bd80      	pop	{r7, pc}
 8006bf2:	bf00      	nop
 8006bf4:	50000100 	.word	0x50000100
 8006bf8:	50000300 	.word	0x50000300
 8006bfc:	50000700 	.word	0x50000700
 8006c00:	50000500 	.word	0x50000500
 8006c04:	50000400 	.word	0x50000400

08006c08 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8006c08:	b480      	push	{r7}
 8006c0a:	b083      	sub	sp, #12
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8006c16:	4618      	mov	r0, r3
 8006c18:	370c      	adds	r7, #12
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c20:	4770      	bx	lr
	...

08006c24 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8006c24:	b580      	push	{r7, lr}
 8006c26:	b0b6      	sub	sp, #216	@ 0xd8
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]
 8006c2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006c2e:	2300      	movs	r3, #0
 8006c30:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8006c34:	2300      	movs	r3, #0
 8006c36:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8006c3e:	2b01      	cmp	r3, #1
 8006c40:	d102      	bne.n	8006c48 <HAL_ADC_ConfigChannel+0x24>
 8006c42:	2302      	movs	r3, #2
 8006c44:	f000 bc13 	b.w	800746e <HAL_ADC_ConfigChannel+0x84a>
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2201      	movs	r2, #1
 8006c4c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	4618      	mov	r0, r3
 8006c56:	f7ff fd10 	bl	800667a <LL_ADC_REG_IsConversionOngoing>
 8006c5a:	4603      	mov	r3, r0
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	f040 83f3 	bne.w	8007448 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	6818      	ldr	r0, [r3, #0]
 8006c66:	683b      	ldr	r3, [r7, #0]
 8006c68:	6859      	ldr	r1, [r3, #4]
 8006c6a:	683b      	ldr	r3, [r7, #0]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	461a      	mov	r2, r3
 8006c70:	f7ff fbf0 	bl	8006454 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	4618      	mov	r0, r3
 8006c7a:	f7ff fcfe 	bl	800667a <LL_ADC_REG_IsConversionOngoing>
 8006c7e:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	4618      	mov	r0, r3
 8006c88:	f7ff fd0a 	bl	80066a0 <LL_ADC_INJ_IsConversionOngoing>
 8006c8c:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8006c90:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	f040 81d9 	bne.w	800704c <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8006c9a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	f040 81d4 	bne.w	800704c <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8006ca4:	683b      	ldr	r3, [r7, #0]
 8006ca6:	689b      	ldr	r3, [r3, #8]
 8006ca8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006cac:	d10f      	bne.n	8006cce <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	6818      	ldr	r0, [r3, #0]
 8006cb2:	683b      	ldr	r3, [r7, #0]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	4619      	mov	r1, r3
 8006cba:	f7ff fbf7 	bl	80064ac <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	f7ff fbb1 	bl	800642e <LL_ADC_SetSamplingTimeCommonConfig>
 8006ccc:	e00e      	b.n	8006cec <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	6818      	ldr	r0, [r3, #0]
 8006cd2:	683b      	ldr	r3, [r7, #0]
 8006cd4:	6819      	ldr	r1, [r3, #0]
 8006cd6:	683b      	ldr	r3, [r7, #0]
 8006cd8:	689b      	ldr	r3, [r3, #8]
 8006cda:	461a      	mov	r2, r3
 8006cdc:	f7ff fbe6 	bl	80064ac <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	2100      	movs	r1, #0
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	f7ff fba1 	bl	800642e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8006cec:	683b      	ldr	r3, [r7, #0]
 8006cee:	695a      	ldr	r2, [r3, #20]
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	68db      	ldr	r3, [r3, #12]
 8006cf6:	08db      	lsrs	r3, r3, #3
 8006cf8:	f003 0303 	and.w	r3, r3, #3
 8006cfc:	005b      	lsls	r3, r3, #1
 8006cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8006d02:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8006d06:	683b      	ldr	r3, [r7, #0]
 8006d08:	691b      	ldr	r3, [r3, #16]
 8006d0a:	2b04      	cmp	r3, #4
 8006d0c:	d022      	beq.n	8006d54 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	6818      	ldr	r0, [r3, #0]
 8006d12:	683b      	ldr	r3, [r7, #0]
 8006d14:	6919      	ldr	r1, [r3, #16]
 8006d16:	683b      	ldr	r3, [r7, #0]
 8006d18:	681a      	ldr	r2, [r3, #0]
 8006d1a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006d1e:	f7ff fafb 	bl	8006318 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	6818      	ldr	r0, [r3, #0]
 8006d26:	683b      	ldr	r3, [r7, #0]
 8006d28:	6919      	ldr	r1, [r3, #16]
 8006d2a:	683b      	ldr	r3, [r7, #0]
 8006d2c:	699b      	ldr	r3, [r3, #24]
 8006d2e:	461a      	mov	r2, r3
 8006d30:	f7ff fb47 	bl	80063c2 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	6818      	ldr	r0, [r3, #0]
 8006d38:	683b      	ldr	r3, [r7, #0]
 8006d3a:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8006d3c:	683b      	ldr	r3, [r7, #0]
 8006d3e:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8006d40:	2b01      	cmp	r3, #1
 8006d42:	d102      	bne.n	8006d4a <HAL_ADC_ConfigChannel+0x126>
 8006d44:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006d48:	e000      	b.n	8006d4c <HAL_ADC_ConfigChannel+0x128>
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	461a      	mov	r2, r3
 8006d4e:	f7ff fb53 	bl	80063f8 <LL_ADC_SetOffsetSaturation>
 8006d52:	e17b      	b.n	800704c <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	2100      	movs	r1, #0
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	f7ff fb00 	bl	8006360 <LL_ADC_GetOffsetChannel>
 8006d60:	4603      	mov	r3, r0
 8006d62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d10a      	bne.n	8006d80 <HAL_ADC_ConfigChannel+0x15c>
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	2100      	movs	r1, #0
 8006d70:	4618      	mov	r0, r3
 8006d72:	f7ff faf5 	bl	8006360 <LL_ADC_GetOffsetChannel>
 8006d76:	4603      	mov	r3, r0
 8006d78:	0e9b      	lsrs	r3, r3, #26
 8006d7a:	f003 021f 	and.w	r2, r3, #31
 8006d7e:	e01e      	b.n	8006dbe <HAL_ADC_ConfigChannel+0x19a>
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	2100      	movs	r1, #0
 8006d86:	4618      	mov	r0, r3
 8006d88:	f7ff faea 	bl	8006360 <LL_ADC_GetOffsetChannel>
 8006d8c:	4603      	mov	r3, r0
 8006d8e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d92:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8006d96:	fa93 f3a3 	rbit	r3, r3
 8006d9a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8006d9e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006da2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8006da6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d101      	bne.n	8006db2 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8006dae:	2320      	movs	r3, #32
 8006db0:	e004      	b.n	8006dbc <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8006db2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006db6:	fab3 f383 	clz	r3, r3
 8006dba:	b2db      	uxtb	r3, r3
 8006dbc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8006dbe:	683b      	ldr	r3, [r7, #0]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d105      	bne.n	8006dd6 <HAL_ADC_ConfigChannel+0x1b2>
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	0e9b      	lsrs	r3, r3, #26
 8006dd0:	f003 031f 	and.w	r3, r3, #31
 8006dd4:	e018      	b.n	8006e08 <HAL_ADC_ConfigChannel+0x1e4>
 8006dd6:	683b      	ldr	r3, [r7, #0]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006dde:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8006de2:	fa93 f3a3 	rbit	r3, r3
 8006de6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8006dea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006dee:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8006df2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d101      	bne.n	8006dfe <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8006dfa:	2320      	movs	r3, #32
 8006dfc:	e004      	b.n	8006e08 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8006dfe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006e02:	fab3 f383 	clz	r3, r3
 8006e06:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8006e08:	429a      	cmp	r2, r3
 8006e0a:	d106      	bne.n	8006e1a <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	2200      	movs	r2, #0
 8006e12:	2100      	movs	r1, #0
 8006e14:	4618      	mov	r0, r3
 8006e16:	f7ff fab9 	bl	800638c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	2101      	movs	r1, #1
 8006e20:	4618      	mov	r0, r3
 8006e22:	f7ff fa9d 	bl	8006360 <LL_ADC_GetOffsetChannel>
 8006e26:	4603      	mov	r3, r0
 8006e28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d10a      	bne.n	8006e46 <HAL_ADC_ConfigChannel+0x222>
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	2101      	movs	r1, #1
 8006e36:	4618      	mov	r0, r3
 8006e38:	f7ff fa92 	bl	8006360 <LL_ADC_GetOffsetChannel>
 8006e3c:	4603      	mov	r3, r0
 8006e3e:	0e9b      	lsrs	r3, r3, #26
 8006e40:	f003 021f 	and.w	r2, r3, #31
 8006e44:	e01e      	b.n	8006e84 <HAL_ADC_ConfigChannel+0x260>
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	2101      	movs	r1, #1
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	f7ff fa87 	bl	8006360 <LL_ADC_GetOffsetChannel>
 8006e52:	4603      	mov	r3, r0
 8006e54:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e58:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006e5c:	fa93 f3a3 	rbit	r3, r3
 8006e60:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8006e64:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006e68:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8006e6c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d101      	bne.n	8006e78 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8006e74:	2320      	movs	r3, #32
 8006e76:	e004      	b.n	8006e82 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8006e78:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006e7c:	fab3 f383 	clz	r3, r3
 8006e80:	b2db      	uxtb	r3, r3
 8006e82:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8006e84:	683b      	ldr	r3, [r7, #0]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d105      	bne.n	8006e9c <HAL_ADC_ConfigChannel+0x278>
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	0e9b      	lsrs	r3, r3, #26
 8006e96:	f003 031f 	and.w	r3, r3, #31
 8006e9a:	e018      	b.n	8006ece <HAL_ADC_ConfigChannel+0x2aa>
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ea4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006ea8:	fa93 f3a3 	rbit	r3, r3
 8006eac:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8006eb0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8006eb4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8006eb8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d101      	bne.n	8006ec4 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8006ec0:	2320      	movs	r3, #32
 8006ec2:	e004      	b.n	8006ece <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8006ec4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006ec8:	fab3 f383 	clz	r3, r3
 8006ecc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8006ece:	429a      	cmp	r2, r3
 8006ed0:	d106      	bne.n	8006ee0 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	2101      	movs	r1, #1
 8006eda:	4618      	mov	r0, r3
 8006edc:	f7ff fa56 	bl	800638c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	2102      	movs	r1, #2
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	f7ff fa3a 	bl	8006360 <LL_ADC_GetOffsetChannel>
 8006eec:	4603      	mov	r3, r0
 8006eee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d10a      	bne.n	8006f0c <HAL_ADC_ConfigChannel+0x2e8>
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	2102      	movs	r1, #2
 8006efc:	4618      	mov	r0, r3
 8006efe:	f7ff fa2f 	bl	8006360 <LL_ADC_GetOffsetChannel>
 8006f02:	4603      	mov	r3, r0
 8006f04:	0e9b      	lsrs	r3, r3, #26
 8006f06:	f003 021f 	and.w	r2, r3, #31
 8006f0a:	e01e      	b.n	8006f4a <HAL_ADC_ConfigChannel+0x326>
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	2102      	movs	r1, #2
 8006f12:	4618      	mov	r0, r3
 8006f14:	f7ff fa24 	bl	8006360 <LL_ADC_GetOffsetChannel>
 8006f18:	4603      	mov	r3, r0
 8006f1a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f1e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006f22:	fa93 f3a3 	rbit	r3, r3
 8006f26:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8006f2a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006f2e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8006f32:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d101      	bne.n	8006f3e <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8006f3a:	2320      	movs	r3, #32
 8006f3c:	e004      	b.n	8006f48 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8006f3e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006f42:	fab3 f383 	clz	r3, r3
 8006f46:	b2db      	uxtb	r3, r3
 8006f48:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8006f4a:	683b      	ldr	r3, [r7, #0]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d105      	bne.n	8006f62 <HAL_ADC_ConfigChannel+0x33e>
 8006f56:	683b      	ldr	r3, [r7, #0]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	0e9b      	lsrs	r3, r3, #26
 8006f5c:	f003 031f 	and.w	r3, r3, #31
 8006f60:	e016      	b.n	8006f90 <HAL_ADC_ConfigChannel+0x36c>
 8006f62:	683b      	ldr	r3, [r7, #0]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f6a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006f6e:	fa93 f3a3 	rbit	r3, r3
 8006f72:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8006f74:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006f76:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8006f7a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d101      	bne.n	8006f86 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8006f82:	2320      	movs	r3, #32
 8006f84:	e004      	b.n	8006f90 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8006f86:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006f8a:	fab3 f383 	clz	r3, r3
 8006f8e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8006f90:	429a      	cmp	r2, r3
 8006f92:	d106      	bne.n	8006fa2 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	2200      	movs	r2, #0
 8006f9a:	2102      	movs	r1, #2
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	f7ff f9f5 	bl	800638c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	2103      	movs	r1, #3
 8006fa8:	4618      	mov	r0, r3
 8006faa:	f7ff f9d9 	bl	8006360 <LL_ADC_GetOffsetChannel>
 8006fae:	4603      	mov	r3, r0
 8006fb0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d10a      	bne.n	8006fce <HAL_ADC_ConfigChannel+0x3aa>
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	2103      	movs	r1, #3
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	f7ff f9ce 	bl	8006360 <LL_ADC_GetOffsetChannel>
 8006fc4:	4603      	mov	r3, r0
 8006fc6:	0e9b      	lsrs	r3, r3, #26
 8006fc8:	f003 021f 	and.w	r2, r3, #31
 8006fcc:	e017      	b.n	8006ffe <HAL_ADC_ConfigChannel+0x3da>
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	2103      	movs	r1, #3
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	f7ff f9c3 	bl	8006360 <LL_ADC_GetOffsetChannel>
 8006fda:	4603      	mov	r3, r0
 8006fdc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006fde:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006fe0:	fa93 f3a3 	rbit	r3, r3
 8006fe4:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8006fe6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006fe8:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8006fea:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d101      	bne.n	8006ff4 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8006ff0:	2320      	movs	r3, #32
 8006ff2:	e003      	b.n	8006ffc <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8006ff4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006ff6:	fab3 f383 	clz	r3, r3
 8006ffa:	b2db      	uxtb	r3, r3
 8006ffc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8006ffe:	683b      	ldr	r3, [r7, #0]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007006:	2b00      	cmp	r3, #0
 8007008:	d105      	bne.n	8007016 <HAL_ADC_ConfigChannel+0x3f2>
 800700a:	683b      	ldr	r3, [r7, #0]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	0e9b      	lsrs	r3, r3, #26
 8007010:	f003 031f 	and.w	r3, r3, #31
 8007014:	e011      	b.n	800703a <HAL_ADC_ConfigChannel+0x416>
 8007016:	683b      	ldr	r3, [r7, #0]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800701c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800701e:	fa93 f3a3 	rbit	r3, r3
 8007022:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8007024:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007026:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8007028:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800702a:	2b00      	cmp	r3, #0
 800702c:	d101      	bne.n	8007032 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 800702e:	2320      	movs	r3, #32
 8007030:	e003      	b.n	800703a <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8007032:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007034:	fab3 f383 	clz	r3, r3
 8007038:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800703a:	429a      	cmp	r2, r3
 800703c:	d106      	bne.n	800704c <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	2200      	movs	r2, #0
 8007044:	2103      	movs	r1, #3
 8007046:	4618      	mov	r0, r3
 8007048:	f7ff f9a0 	bl	800638c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	4618      	mov	r0, r3
 8007052:	f7ff faeb 	bl	800662c <LL_ADC_IsEnabled>
 8007056:	4603      	mov	r3, r0
 8007058:	2b00      	cmp	r3, #0
 800705a:	f040 813d 	bne.w	80072d8 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	6818      	ldr	r0, [r3, #0]
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	6819      	ldr	r1, [r3, #0]
 8007066:	683b      	ldr	r3, [r7, #0]
 8007068:	68db      	ldr	r3, [r3, #12]
 800706a:	461a      	mov	r2, r3
 800706c:	f7ff fa4a 	bl	8006504 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8007070:	683b      	ldr	r3, [r7, #0]
 8007072:	68db      	ldr	r3, [r3, #12]
 8007074:	4aa2      	ldr	r2, [pc, #648]	@ (8007300 <HAL_ADC_ConfigChannel+0x6dc>)
 8007076:	4293      	cmp	r3, r2
 8007078:	f040 812e 	bne.w	80072d8 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8007080:	683b      	ldr	r3, [r7, #0]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007088:	2b00      	cmp	r3, #0
 800708a:	d10b      	bne.n	80070a4 <HAL_ADC_ConfigChannel+0x480>
 800708c:	683b      	ldr	r3, [r7, #0]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	0e9b      	lsrs	r3, r3, #26
 8007092:	3301      	adds	r3, #1
 8007094:	f003 031f 	and.w	r3, r3, #31
 8007098:	2b09      	cmp	r3, #9
 800709a:	bf94      	ite	ls
 800709c:	2301      	movls	r3, #1
 800709e:	2300      	movhi	r3, #0
 80070a0:	b2db      	uxtb	r3, r3
 80070a2:	e019      	b.n	80070d8 <HAL_ADC_ConfigChannel+0x4b4>
 80070a4:	683b      	ldr	r3, [r7, #0]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80070aa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80070ac:	fa93 f3a3 	rbit	r3, r3
 80070b0:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 80070b2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80070b4:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 80070b6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d101      	bne.n	80070c0 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 80070bc:	2320      	movs	r3, #32
 80070be:	e003      	b.n	80070c8 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 80070c0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80070c2:	fab3 f383 	clz	r3, r3
 80070c6:	b2db      	uxtb	r3, r3
 80070c8:	3301      	adds	r3, #1
 80070ca:	f003 031f 	and.w	r3, r3, #31
 80070ce:	2b09      	cmp	r3, #9
 80070d0:	bf94      	ite	ls
 80070d2:	2301      	movls	r3, #1
 80070d4:	2300      	movhi	r3, #0
 80070d6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d079      	beq.n	80071d0 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80070dc:	683b      	ldr	r3, [r7, #0]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d107      	bne.n	80070f8 <HAL_ADC_ConfigChannel+0x4d4>
 80070e8:	683b      	ldr	r3, [r7, #0]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	0e9b      	lsrs	r3, r3, #26
 80070ee:	3301      	adds	r3, #1
 80070f0:	069b      	lsls	r3, r3, #26
 80070f2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80070f6:	e015      	b.n	8007124 <HAL_ADC_ConfigChannel+0x500>
 80070f8:	683b      	ldr	r3, [r7, #0]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80070fe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007100:	fa93 f3a3 	rbit	r3, r3
 8007104:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8007106:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007108:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 800710a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800710c:	2b00      	cmp	r3, #0
 800710e:	d101      	bne.n	8007114 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8007110:	2320      	movs	r3, #32
 8007112:	e003      	b.n	800711c <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8007114:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007116:	fab3 f383 	clz	r3, r3
 800711a:	b2db      	uxtb	r3, r3
 800711c:	3301      	adds	r3, #1
 800711e:	069b      	lsls	r3, r3, #26
 8007120:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8007124:	683b      	ldr	r3, [r7, #0]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800712c:	2b00      	cmp	r3, #0
 800712e:	d109      	bne.n	8007144 <HAL_ADC_ConfigChannel+0x520>
 8007130:	683b      	ldr	r3, [r7, #0]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	0e9b      	lsrs	r3, r3, #26
 8007136:	3301      	adds	r3, #1
 8007138:	f003 031f 	and.w	r3, r3, #31
 800713c:	2101      	movs	r1, #1
 800713e:	fa01 f303 	lsl.w	r3, r1, r3
 8007142:	e017      	b.n	8007174 <HAL_ADC_ConfigChannel+0x550>
 8007144:	683b      	ldr	r3, [r7, #0]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800714a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800714c:	fa93 f3a3 	rbit	r3, r3
 8007150:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8007152:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007154:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8007156:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007158:	2b00      	cmp	r3, #0
 800715a:	d101      	bne.n	8007160 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 800715c:	2320      	movs	r3, #32
 800715e:	e003      	b.n	8007168 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8007160:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007162:	fab3 f383 	clz	r3, r3
 8007166:	b2db      	uxtb	r3, r3
 8007168:	3301      	adds	r3, #1
 800716a:	f003 031f 	and.w	r3, r3, #31
 800716e:	2101      	movs	r1, #1
 8007170:	fa01 f303 	lsl.w	r3, r1, r3
 8007174:	ea42 0103 	orr.w	r1, r2, r3
 8007178:	683b      	ldr	r3, [r7, #0]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007180:	2b00      	cmp	r3, #0
 8007182:	d10a      	bne.n	800719a <HAL_ADC_ConfigChannel+0x576>
 8007184:	683b      	ldr	r3, [r7, #0]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	0e9b      	lsrs	r3, r3, #26
 800718a:	3301      	adds	r3, #1
 800718c:	f003 021f 	and.w	r2, r3, #31
 8007190:	4613      	mov	r3, r2
 8007192:	005b      	lsls	r3, r3, #1
 8007194:	4413      	add	r3, r2
 8007196:	051b      	lsls	r3, r3, #20
 8007198:	e018      	b.n	80071cc <HAL_ADC_ConfigChannel+0x5a8>
 800719a:	683b      	ldr	r3, [r7, #0]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80071a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071a2:	fa93 f3a3 	rbit	r3, r3
 80071a6:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80071a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80071aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 80071ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d101      	bne.n	80071b6 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 80071b2:	2320      	movs	r3, #32
 80071b4:	e003      	b.n	80071be <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 80071b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80071b8:	fab3 f383 	clz	r3, r3
 80071bc:	b2db      	uxtb	r3, r3
 80071be:	3301      	adds	r3, #1
 80071c0:	f003 021f 	and.w	r2, r3, #31
 80071c4:	4613      	mov	r3, r2
 80071c6:	005b      	lsls	r3, r3, #1
 80071c8:	4413      	add	r3, r2
 80071ca:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80071cc:	430b      	orrs	r3, r1
 80071ce:	e07e      	b.n	80072ce <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80071d0:	683b      	ldr	r3, [r7, #0]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d107      	bne.n	80071ec <HAL_ADC_ConfigChannel+0x5c8>
 80071dc:	683b      	ldr	r3, [r7, #0]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	0e9b      	lsrs	r3, r3, #26
 80071e2:	3301      	adds	r3, #1
 80071e4:	069b      	lsls	r3, r3, #26
 80071e6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80071ea:	e015      	b.n	8007218 <HAL_ADC_ConfigChannel+0x5f4>
 80071ec:	683b      	ldr	r3, [r7, #0]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80071f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071f4:	fa93 f3a3 	rbit	r3, r3
 80071f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 80071fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071fc:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 80071fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007200:	2b00      	cmp	r3, #0
 8007202:	d101      	bne.n	8007208 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8007204:	2320      	movs	r3, #32
 8007206:	e003      	b.n	8007210 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8007208:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800720a:	fab3 f383 	clz	r3, r3
 800720e:	b2db      	uxtb	r3, r3
 8007210:	3301      	adds	r3, #1
 8007212:	069b      	lsls	r3, r3, #26
 8007214:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8007218:	683b      	ldr	r3, [r7, #0]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007220:	2b00      	cmp	r3, #0
 8007222:	d109      	bne.n	8007238 <HAL_ADC_ConfigChannel+0x614>
 8007224:	683b      	ldr	r3, [r7, #0]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	0e9b      	lsrs	r3, r3, #26
 800722a:	3301      	adds	r3, #1
 800722c:	f003 031f 	and.w	r3, r3, #31
 8007230:	2101      	movs	r1, #1
 8007232:	fa01 f303 	lsl.w	r3, r1, r3
 8007236:	e017      	b.n	8007268 <HAL_ADC_ConfigChannel+0x644>
 8007238:	683b      	ldr	r3, [r7, #0]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800723e:	6a3b      	ldr	r3, [r7, #32]
 8007240:	fa93 f3a3 	rbit	r3, r3
 8007244:	61fb      	str	r3, [r7, #28]
  return result;
 8007246:	69fb      	ldr	r3, [r7, #28]
 8007248:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800724a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800724c:	2b00      	cmp	r3, #0
 800724e:	d101      	bne.n	8007254 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8007250:	2320      	movs	r3, #32
 8007252:	e003      	b.n	800725c <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8007254:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007256:	fab3 f383 	clz	r3, r3
 800725a:	b2db      	uxtb	r3, r3
 800725c:	3301      	adds	r3, #1
 800725e:	f003 031f 	and.w	r3, r3, #31
 8007262:	2101      	movs	r1, #1
 8007264:	fa01 f303 	lsl.w	r3, r1, r3
 8007268:	ea42 0103 	orr.w	r1, r2, r3
 800726c:	683b      	ldr	r3, [r7, #0]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007274:	2b00      	cmp	r3, #0
 8007276:	d10d      	bne.n	8007294 <HAL_ADC_ConfigChannel+0x670>
 8007278:	683b      	ldr	r3, [r7, #0]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	0e9b      	lsrs	r3, r3, #26
 800727e:	3301      	adds	r3, #1
 8007280:	f003 021f 	and.w	r2, r3, #31
 8007284:	4613      	mov	r3, r2
 8007286:	005b      	lsls	r3, r3, #1
 8007288:	4413      	add	r3, r2
 800728a:	3b1e      	subs	r3, #30
 800728c:	051b      	lsls	r3, r3, #20
 800728e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8007292:	e01b      	b.n	80072cc <HAL_ADC_ConfigChannel+0x6a8>
 8007294:	683b      	ldr	r3, [r7, #0]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800729a:	697b      	ldr	r3, [r7, #20]
 800729c:	fa93 f3a3 	rbit	r3, r3
 80072a0:	613b      	str	r3, [r7, #16]
  return result;
 80072a2:	693b      	ldr	r3, [r7, #16]
 80072a4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80072a6:	69bb      	ldr	r3, [r7, #24]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d101      	bne.n	80072b0 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 80072ac:	2320      	movs	r3, #32
 80072ae:	e003      	b.n	80072b8 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 80072b0:	69bb      	ldr	r3, [r7, #24]
 80072b2:	fab3 f383 	clz	r3, r3
 80072b6:	b2db      	uxtb	r3, r3
 80072b8:	3301      	adds	r3, #1
 80072ba:	f003 021f 	and.w	r2, r3, #31
 80072be:	4613      	mov	r3, r2
 80072c0:	005b      	lsls	r3, r3, #1
 80072c2:	4413      	add	r3, r2
 80072c4:	3b1e      	subs	r3, #30
 80072c6:	051b      	lsls	r3, r3, #20
 80072c8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80072cc:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80072ce:	683a      	ldr	r2, [r7, #0]
 80072d0:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80072d2:	4619      	mov	r1, r3
 80072d4:	f7ff f8ea 	bl	80064ac <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80072d8:	683b      	ldr	r3, [r7, #0]
 80072da:	681a      	ldr	r2, [r3, #0]
 80072dc:	4b09      	ldr	r3, [pc, #36]	@ (8007304 <HAL_ADC_ConfigChannel+0x6e0>)
 80072de:	4013      	ands	r3, r2
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	f000 80be 	beq.w	8007462 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80072ee:	d004      	beq.n	80072fa <HAL_ADC_ConfigChannel+0x6d6>
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	4a04      	ldr	r2, [pc, #16]	@ (8007308 <HAL_ADC_ConfigChannel+0x6e4>)
 80072f6:	4293      	cmp	r3, r2
 80072f8:	d10a      	bne.n	8007310 <HAL_ADC_ConfigChannel+0x6ec>
 80072fa:	4b04      	ldr	r3, [pc, #16]	@ (800730c <HAL_ADC_ConfigChannel+0x6e8>)
 80072fc:	e009      	b.n	8007312 <HAL_ADC_ConfigChannel+0x6ee>
 80072fe:	bf00      	nop
 8007300:	407f0000 	.word	0x407f0000
 8007304:	80080000 	.word	0x80080000
 8007308:	50000100 	.word	0x50000100
 800730c:	50000300 	.word	0x50000300
 8007310:	4b59      	ldr	r3, [pc, #356]	@ (8007478 <HAL_ADC_ConfigChannel+0x854>)
 8007312:	4618      	mov	r0, r3
 8007314:	f7fe fff2 	bl	80062fc <LL_ADC_GetCommonPathInternalCh>
 8007318:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800731c:	683b      	ldr	r3, [r7, #0]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	4a56      	ldr	r2, [pc, #344]	@ (800747c <HAL_ADC_ConfigChannel+0x858>)
 8007322:	4293      	cmp	r3, r2
 8007324:	d004      	beq.n	8007330 <HAL_ADC_ConfigChannel+0x70c>
 8007326:	683b      	ldr	r3, [r7, #0]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	4a55      	ldr	r2, [pc, #340]	@ (8007480 <HAL_ADC_ConfigChannel+0x85c>)
 800732c:	4293      	cmp	r3, r2
 800732e:	d13a      	bne.n	80073a6 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8007330:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007334:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007338:	2b00      	cmp	r3, #0
 800733a:	d134      	bne.n	80073a6 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007344:	d005      	beq.n	8007352 <HAL_ADC_ConfigChannel+0x72e>
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	4a4e      	ldr	r2, [pc, #312]	@ (8007484 <HAL_ADC_ConfigChannel+0x860>)
 800734c:	4293      	cmp	r3, r2
 800734e:	f040 8085 	bne.w	800745c <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800735a:	d004      	beq.n	8007366 <HAL_ADC_ConfigChannel+0x742>
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	4a49      	ldr	r2, [pc, #292]	@ (8007488 <HAL_ADC_ConfigChannel+0x864>)
 8007362:	4293      	cmp	r3, r2
 8007364:	d101      	bne.n	800736a <HAL_ADC_ConfigChannel+0x746>
 8007366:	4a49      	ldr	r2, [pc, #292]	@ (800748c <HAL_ADC_ConfigChannel+0x868>)
 8007368:	e000      	b.n	800736c <HAL_ADC_ConfigChannel+0x748>
 800736a:	4a43      	ldr	r2, [pc, #268]	@ (8007478 <HAL_ADC_ConfigChannel+0x854>)
 800736c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007370:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007374:	4619      	mov	r1, r3
 8007376:	4610      	mov	r0, r2
 8007378:	f7fe ffad 	bl	80062d6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800737c:	4b44      	ldr	r3, [pc, #272]	@ (8007490 <HAL_ADC_ConfigChannel+0x86c>)
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	099b      	lsrs	r3, r3, #6
 8007382:	4a44      	ldr	r2, [pc, #272]	@ (8007494 <HAL_ADC_ConfigChannel+0x870>)
 8007384:	fba2 2303 	umull	r2, r3, r2, r3
 8007388:	099b      	lsrs	r3, r3, #6
 800738a:	1c5a      	adds	r2, r3, #1
 800738c:	4613      	mov	r3, r2
 800738e:	005b      	lsls	r3, r3, #1
 8007390:	4413      	add	r3, r2
 8007392:	009b      	lsls	r3, r3, #2
 8007394:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8007396:	e002      	b.n	800739e <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	3b01      	subs	r3, #1
 800739c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d1f9      	bne.n	8007398 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80073a4:	e05a      	b.n	800745c <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80073a6:	683b      	ldr	r3, [r7, #0]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	4a3b      	ldr	r2, [pc, #236]	@ (8007498 <HAL_ADC_ConfigChannel+0x874>)
 80073ac:	4293      	cmp	r3, r2
 80073ae:	d125      	bne.n	80073fc <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80073b0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80073b4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d11f      	bne.n	80073fc <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	4a31      	ldr	r2, [pc, #196]	@ (8007488 <HAL_ADC_ConfigChannel+0x864>)
 80073c2:	4293      	cmp	r3, r2
 80073c4:	d104      	bne.n	80073d0 <HAL_ADC_ConfigChannel+0x7ac>
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	4a34      	ldr	r2, [pc, #208]	@ (800749c <HAL_ADC_ConfigChannel+0x878>)
 80073cc:	4293      	cmp	r3, r2
 80073ce:	d047      	beq.n	8007460 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80073d8:	d004      	beq.n	80073e4 <HAL_ADC_ConfigChannel+0x7c0>
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	4a2a      	ldr	r2, [pc, #168]	@ (8007488 <HAL_ADC_ConfigChannel+0x864>)
 80073e0:	4293      	cmp	r3, r2
 80073e2:	d101      	bne.n	80073e8 <HAL_ADC_ConfigChannel+0x7c4>
 80073e4:	4a29      	ldr	r2, [pc, #164]	@ (800748c <HAL_ADC_ConfigChannel+0x868>)
 80073e6:	e000      	b.n	80073ea <HAL_ADC_ConfigChannel+0x7c6>
 80073e8:	4a23      	ldr	r2, [pc, #140]	@ (8007478 <HAL_ADC_ConfigChannel+0x854>)
 80073ea:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80073ee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80073f2:	4619      	mov	r1, r3
 80073f4:	4610      	mov	r0, r2
 80073f6:	f7fe ff6e 	bl	80062d6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80073fa:	e031      	b.n	8007460 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80073fc:	683b      	ldr	r3, [r7, #0]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	4a27      	ldr	r2, [pc, #156]	@ (80074a0 <HAL_ADC_ConfigChannel+0x87c>)
 8007402:	4293      	cmp	r3, r2
 8007404:	d12d      	bne.n	8007462 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8007406:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800740a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800740e:	2b00      	cmp	r3, #0
 8007410:	d127      	bne.n	8007462 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	4a1c      	ldr	r2, [pc, #112]	@ (8007488 <HAL_ADC_ConfigChannel+0x864>)
 8007418:	4293      	cmp	r3, r2
 800741a:	d022      	beq.n	8007462 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007424:	d004      	beq.n	8007430 <HAL_ADC_ConfigChannel+0x80c>
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	4a17      	ldr	r2, [pc, #92]	@ (8007488 <HAL_ADC_ConfigChannel+0x864>)
 800742c:	4293      	cmp	r3, r2
 800742e:	d101      	bne.n	8007434 <HAL_ADC_ConfigChannel+0x810>
 8007430:	4a16      	ldr	r2, [pc, #88]	@ (800748c <HAL_ADC_ConfigChannel+0x868>)
 8007432:	e000      	b.n	8007436 <HAL_ADC_ConfigChannel+0x812>
 8007434:	4a10      	ldr	r2, [pc, #64]	@ (8007478 <HAL_ADC_ConfigChannel+0x854>)
 8007436:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800743a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800743e:	4619      	mov	r1, r3
 8007440:	4610      	mov	r0, r2
 8007442:	f7fe ff48 	bl	80062d6 <LL_ADC_SetCommonPathInternalCh>
 8007446:	e00c      	b.n	8007462 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800744c:	f043 0220 	orr.w	r2, r3, #32
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8007454:	2301      	movs	r3, #1
 8007456:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 800745a:	e002      	b.n	8007462 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800745c:	bf00      	nop
 800745e:	e000      	b.n	8007462 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8007460:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	2200      	movs	r2, #0
 8007466:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800746a:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800746e:	4618      	mov	r0, r3
 8007470:	37d8      	adds	r7, #216	@ 0xd8
 8007472:	46bd      	mov	sp, r7
 8007474:	bd80      	pop	{r7, pc}
 8007476:	bf00      	nop
 8007478:	50000700 	.word	0x50000700
 800747c:	c3210000 	.word	0xc3210000
 8007480:	90c00010 	.word	0x90c00010
 8007484:	50000600 	.word	0x50000600
 8007488:	50000100 	.word	0x50000100
 800748c:	50000300 	.word	0x50000300
 8007490:	20000264 	.word	0x20000264
 8007494:	053e2d63 	.word	0x053e2d63
 8007498:	c7520000 	.word	0xc7520000
 800749c:	50000500 	.word	0x50000500
 80074a0:	cb840000 	.word	0xcb840000

080074a4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80074a4:	b580      	push	{r7, lr}
 80074a6:	b084      	sub	sp, #16
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80074ac:	2300      	movs	r3, #0
 80074ae:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	4618      	mov	r0, r3
 80074b6:	f7ff f8b9 	bl	800662c <LL_ADC_IsEnabled>
 80074ba:	4603      	mov	r3, r0
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d176      	bne.n	80075ae <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	689a      	ldr	r2, [r3, #8]
 80074c6:	4b3c      	ldr	r3, [pc, #240]	@ (80075b8 <ADC_Enable+0x114>)
 80074c8:	4013      	ands	r3, r2
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d00d      	beq.n	80074ea <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80074d2:	f043 0210 	orr.w	r2, r3, #16
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80074de:	f043 0201 	orr.w	r2, r3, #1
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 80074e6:	2301      	movs	r3, #1
 80074e8:	e062      	b.n	80075b0 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	4618      	mov	r0, r3
 80074f0:	f7ff f888 	bl	8006604 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80074fc:	d004      	beq.n	8007508 <ADC_Enable+0x64>
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	4a2e      	ldr	r2, [pc, #184]	@ (80075bc <ADC_Enable+0x118>)
 8007504:	4293      	cmp	r3, r2
 8007506:	d101      	bne.n	800750c <ADC_Enable+0x68>
 8007508:	4b2d      	ldr	r3, [pc, #180]	@ (80075c0 <ADC_Enable+0x11c>)
 800750a:	e000      	b.n	800750e <ADC_Enable+0x6a>
 800750c:	4b2d      	ldr	r3, [pc, #180]	@ (80075c4 <ADC_Enable+0x120>)
 800750e:	4618      	mov	r0, r3
 8007510:	f7fe fef4 	bl	80062fc <LL_ADC_GetCommonPathInternalCh>
 8007514:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8007516:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800751a:	2b00      	cmp	r3, #0
 800751c:	d013      	beq.n	8007546 <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800751e:	4b2a      	ldr	r3, [pc, #168]	@ (80075c8 <ADC_Enable+0x124>)
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	099b      	lsrs	r3, r3, #6
 8007524:	4a29      	ldr	r2, [pc, #164]	@ (80075cc <ADC_Enable+0x128>)
 8007526:	fba2 2303 	umull	r2, r3, r2, r3
 800752a:	099b      	lsrs	r3, r3, #6
 800752c:	1c5a      	adds	r2, r3, #1
 800752e:	4613      	mov	r3, r2
 8007530:	005b      	lsls	r3, r3, #1
 8007532:	4413      	add	r3, r2
 8007534:	009b      	lsls	r3, r3, #2
 8007536:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8007538:	e002      	b.n	8007540 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 800753a:	68bb      	ldr	r3, [r7, #8]
 800753c:	3b01      	subs	r3, #1
 800753e:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8007540:	68bb      	ldr	r3, [r7, #8]
 8007542:	2b00      	cmp	r3, #0
 8007544:	d1f9      	bne.n	800753a <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8007546:	f7fe fea7 	bl	8006298 <HAL_GetTick>
 800754a:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800754c:	e028      	b.n	80075a0 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	4618      	mov	r0, r3
 8007554:	f7ff f86a 	bl	800662c <LL_ADC_IsEnabled>
 8007558:	4603      	mov	r3, r0
 800755a:	2b00      	cmp	r3, #0
 800755c:	d104      	bne.n	8007568 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	4618      	mov	r0, r3
 8007564:	f7ff f84e 	bl	8006604 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8007568:	f7fe fe96 	bl	8006298 <HAL_GetTick>
 800756c:	4602      	mov	r2, r0
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	1ad3      	subs	r3, r2, r3
 8007572:	2b02      	cmp	r3, #2
 8007574:	d914      	bls.n	80075a0 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	f003 0301 	and.w	r3, r3, #1
 8007580:	2b01      	cmp	r3, #1
 8007582:	d00d      	beq.n	80075a0 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007588:	f043 0210 	orr.w	r2, r3, #16
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007594:	f043 0201 	orr.w	r2, r3, #1
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 800759c:	2301      	movs	r3, #1
 800759e:	e007      	b.n	80075b0 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	f003 0301 	and.w	r3, r3, #1
 80075aa:	2b01      	cmp	r3, #1
 80075ac:	d1cf      	bne.n	800754e <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80075ae:	2300      	movs	r3, #0
}
 80075b0:	4618      	mov	r0, r3
 80075b2:	3710      	adds	r7, #16
 80075b4:	46bd      	mov	sp, r7
 80075b6:	bd80      	pop	{r7, pc}
 80075b8:	8000003f 	.word	0x8000003f
 80075bc:	50000100 	.word	0x50000100
 80075c0:	50000300 	.word	0x50000300
 80075c4:	50000700 	.word	0x50000700
 80075c8:	20000264 	.word	0x20000264
 80075cc:	053e2d63 	.word	0x053e2d63

080075d0 <LL_ADC_IsEnabled>:
{
 80075d0:	b480      	push	{r7}
 80075d2:	b083      	sub	sp, #12
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	689b      	ldr	r3, [r3, #8]
 80075dc:	f003 0301 	and.w	r3, r3, #1
 80075e0:	2b01      	cmp	r3, #1
 80075e2:	d101      	bne.n	80075e8 <LL_ADC_IsEnabled+0x18>
 80075e4:	2301      	movs	r3, #1
 80075e6:	e000      	b.n	80075ea <LL_ADC_IsEnabled+0x1a>
 80075e8:	2300      	movs	r3, #0
}
 80075ea:	4618      	mov	r0, r3
 80075ec:	370c      	adds	r7, #12
 80075ee:	46bd      	mov	sp, r7
 80075f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f4:	4770      	bx	lr

080075f6 <LL_ADC_REG_IsConversionOngoing>:
{
 80075f6:	b480      	push	{r7}
 80075f8:	b083      	sub	sp, #12
 80075fa:	af00      	add	r7, sp, #0
 80075fc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	689b      	ldr	r3, [r3, #8]
 8007602:	f003 0304 	and.w	r3, r3, #4
 8007606:	2b04      	cmp	r3, #4
 8007608:	d101      	bne.n	800760e <LL_ADC_REG_IsConversionOngoing+0x18>
 800760a:	2301      	movs	r3, #1
 800760c:	e000      	b.n	8007610 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800760e:	2300      	movs	r3, #0
}
 8007610:	4618      	mov	r0, r3
 8007612:	370c      	adds	r7, #12
 8007614:	46bd      	mov	sp, r7
 8007616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761a:	4770      	bx	lr

0800761c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 800761c:	b590      	push	{r4, r7, lr}
 800761e:	b0a1      	sub	sp, #132	@ 0x84
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
 8007624:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007626:	2300      	movs	r3, #0
 8007628:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8007632:	2b01      	cmp	r3, #1
 8007634:	d101      	bne.n	800763a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8007636:	2302      	movs	r3, #2
 8007638:	e0e7      	b.n	800780a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	2201      	movs	r2, #1
 800763e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8007642:	2300      	movs	r3, #0
 8007644:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8007646:	2300      	movs	r3, #0
 8007648:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007652:	d102      	bne.n	800765a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8007654:	4b6f      	ldr	r3, [pc, #444]	@ (8007814 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8007656:	60bb      	str	r3, [r7, #8]
 8007658:	e009      	b.n	800766e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	4a6e      	ldr	r2, [pc, #440]	@ (8007818 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8007660:	4293      	cmp	r3, r2
 8007662:	d102      	bne.n	800766a <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8007664:	4b6d      	ldr	r3, [pc, #436]	@ (800781c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8007666:	60bb      	str	r3, [r7, #8]
 8007668:	e001      	b.n	800766e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800766a:	2300      	movs	r3, #0
 800766c:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800766e:	68bb      	ldr	r3, [r7, #8]
 8007670:	2b00      	cmp	r3, #0
 8007672:	d10b      	bne.n	800768c <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007678:	f043 0220 	orr.w	r2, r3, #32
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	2200      	movs	r2, #0
 8007684:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8007688:	2301      	movs	r3, #1
 800768a:	e0be      	b.n	800780a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 800768c:	68bb      	ldr	r3, [r7, #8]
 800768e:	4618      	mov	r0, r3
 8007690:	f7ff ffb1 	bl	80075f6 <LL_ADC_REG_IsConversionOngoing>
 8007694:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	4618      	mov	r0, r3
 800769c:	f7ff ffab 	bl	80075f6 <LL_ADC_REG_IsConversionOngoing>
 80076a0:	4603      	mov	r3, r0
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	f040 80a0 	bne.w	80077e8 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80076a8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	f040 809c 	bne.w	80077e8 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80076b8:	d004      	beq.n	80076c4 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	4a55      	ldr	r2, [pc, #340]	@ (8007814 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80076c0:	4293      	cmp	r3, r2
 80076c2:	d101      	bne.n	80076c8 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80076c4:	4b56      	ldr	r3, [pc, #344]	@ (8007820 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 80076c6:	e000      	b.n	80076ca <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80076c8:	4b56      	ldr	r3, [pc, #344]	@ (8007824 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 80076ca:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80076cc:	683b      	ldr	r3, [r7, #0]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d04b      	beq.n	800776c <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80076d4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80076d6:	689b      	ldr	r3, [r3, #8]
 80076d8:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80076dc:	683b      	ldr	r3, [r7, #0]
 80076de:	6859      	ldr	r1, [r3, #4]
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80076e6:	035b      	lsls	r3, r3, #13
 80076e8:	430b      	orrs	r3, r1
 80076ea:	431a      	orrs	r2, r3
 80076ec:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80076ee:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80076f8:	d004      	beq.n	8007704 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	4a45      	ldr	r2, [pc, #276]	@ (8007814 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8007700:	4293      	cmp	r3, r2
 8007702:	d10f      	bne.n	8007724 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8007704:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8007708:	f7ff ff62 	bl	80075d0 <LL_ADC_IsEnabled>
 800770c:	4604      	mov	r4, r0
 800770e:	4841      	ldr	r0, [pc, #260]	@ (8007814 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8007710:	f7ff ff5e 	bl	80075d0 <LL_ADC_IsEnabled>
 8007714:	4603      	mov	r3, r0
 8007716:	4323      	orrs	r3, r4
 8007718:	2b00      	cmp	r3, #0
 800771a:	bf0c      	ite	eq
 800771c:	2301      	moveq	r3, #1
 800771e:	2300      	movne	r3, #0
 8007720:	b2db      	uxtb	r3, r3
 8007722:	e012      	b.n	800774a <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8007724:	483c      	ldr	r0, [pc, #240]	@ (8007818 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8007726:	f7ff ff53 	bl	80075d0 <LL_ADC_IsEnabled>
 800772a:	4604      	mov	r4, r0
 800772c:	483b      	ldr	r0, [pc, #236]	@ (800781c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800772e:	f7ff ff4f 	bl	80075d0 <LL_ADC_IsEnabled>
 8007732:	4603      	mov	r3, r0
 8007734:	431c      	orrs	r4, r3
 8007736:	483c      	ldr	r0, [pc, #240]	@ (8007828 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8007738:	f7ff ff4a 	bl	80075d0 <LL_ADC_IsEnabled>
 800773c:	4603      	mov	r3, r0
 800773e:	4323      	orrs	r3, r4
 8007740:	2b00      	cmp	r3, #0
 8007742:	bf0c      	ite	eq
 8007744:	2301      	moveq	r3, #1
 8007746:	2300      	movne	r3, #0
 8007748:	b2db      	uxtb	r3, r3
 800774a:	2b00      	cmp	r3, #0
 800774c:	d056      	beq.n	80077fc <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800774e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007750:	689b      	ldr	r3, [r3, #8]
 8007752:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8007756:	f023 030f 	bic.w	r3, r3, #15
 800775a:	683a      	ldr	r2, [r7, #0]
 800775c:	6811      	ldr	r1, [r2, #0]
 800775e:	683a      	ldr	r2, [r7, #0]
 8007760:	6892      	ldr	r2, [r2, #8]
 8007762:	430a      	orrs	r2, r1
 8007764:	431a      	orrs	r2, r3
 8007766:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007768:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800776a:	e047      	b.n	80077fc <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800776c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800776e:	689b      	ldr	r3, [r3, #8]
 8007770:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8007774:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007776:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007780:	d004      	beq.n	800778c <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	4a23      	ldr	r2, [pc, #140]	@ (8007814 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8007788:	4293      	cmp	r3, r2
 800778a:	d10f      	bne.n	80077ac <HAL_ADCEx_MultiModeConfigChannel+0x190>
 800778c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8007790:	f7ff ff1e 	bl	80075d0 <LL_ADC_IsEnabled>
 8007794:	4604      	mov	r4, r0
 8007796:	481f      	ldr	r0, [pc, #124]	@ (8007814 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8007798:	f7ff ff1a 	bl	80075d0 <LL_ADC_IsEnabled>
 800779c:	4603      	mov	r3, r0
 800779e:	4323      	orrs	r3, r4
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	bf0c      	ite	eq
 80077a4:	2301      	moveq	r3, #1
 80077a6:	2300      	movne	r3, #0
 80077a8:	b2db      	uxtb	r3, r3
 80077aa:	e012      	b.n	80077d2 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 80077ac:	481a      	ldr	r0, [pc, #104]	@ (8007818 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80077ae:	f7ff ff0f 	bl	80075d0 <LL_ADC_IsEnabled>
 80077b2:	4604      	mov	r4, r0
 80077b4:	4819      	ldr	r0, [pc, #100]	@ (800781c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80077b6:	f7ff ff0b 	bl	80075d0 <LL_ADC_IsEnabled>
 80077ba:	4603      	mov	r3, r0
 80077bc:	431c      	orrs	r4, r3
 80077be:	481a      	ldr	r0, [pc, #104]	@ (8007828 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80077c0:	f7ff ff06 	bl	80075d0 <LL_ADC_IsEnabled>
 80077c4:	4603      	mov	r3, r0
 80077c6:	4323      	orrs	r3, r4
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	bf0c      	ite	eq
 80077cc:	2301      	moveq	r3, #1
 80077ce:	2300      	movne	r3, #0
 80077d0:	b2db      	uxtb	r3, r3
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d012      	beq.n	80077fc <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80077d6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80077d8:	689b      	ldr	r3, [r3, #8]
 80077da:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80077de:	f023 030f 	bic.w	r3, r3, #15
 80077e2:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80077e4:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80077e6:	e009      	b.n	80077fc <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80077ec:	f043 0220 	orr.w	r2, r3, #32
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80077f4:	2301      	movs	r3, #1
 80077f6:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80077fa:	e000      	b.n	80077fe <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80077fc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	2200      	movs	r2, #0
 8007802:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8007806:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 800780a:	4618      	mov	r0, r3
 800780c:	3784      	adds	r7, #132	@ 0x84
 800780e:	46bd      	mov	sp, r7
 8007810:	bd90      	pop	{r4, r7, pc}
 8007812:	bf00      	nop
 8007814:	50000100 	.word	0x50000100
 8007818:	50000400 	.word	0x50000400
 800781c:	50000500 	.word	0x50000500
 8007820:	50000300 	.word	0x50000300
 8007824:	50000700 	.word	0x50000700
 8007828:	50000600 	.word	0x50000600

0800782c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800782c:	b480      	push	{r7}
 800782e:	b085      	sub	sp, #20
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	f003 0307 	and.w	r3, r3, #7
 800783a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800783c:	4b0c      	ldr	r3, [pc, #48]	@ (8007870 <__NVIC_SetPriorityGrouping+0x44>)
 800783e:	68db      	ldr	r3, [r3, #12]
 8007840:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007842:	68ba      	ldr	r2, [r7, #8]
 8007844:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8007848:	4013      	ands	r3, r2
 800784a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007850:	68bb      	ldr	r3, [r7, #8]
 8007852:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007854:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8007858:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800785c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800785e:	4a04      	ldr	r2, [pc, #16]	@ (8007870 <__NVIC_SetPriorityGrouping+0x44>)
 8007860:	68bb      	ldr	r3, [r7, #8]
 8007862:	60d3      	str	r3, [r2, #12]
}
 8007864:	bf00      	nop
 8007866:	3714      	adds	r7, #20
 8007868:	46bd      	mov	sp, r7
 800786a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786e:	4770      	bx	lr
 8007870:	e000ed00 	.word	0xe000ed00

08007874 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007874:	b480      	push	{r7}
 8007876:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007878:	4b04      	ldr	r3, [pc, #16]	@ (800788c <__NVIC_GetPriorityGrouping+0x18>)
 800787a:	68db      	ldr	r3, [r3, #12]
 800787c:	0a1b      	lsrs	r3, r3, #8
 800787e:	f003 0307 	and.w	r3, r3, #7
}
 8007882:	4618      	mov	r0, r3
 8007884:	46bd      	mov	sp, r7
 8007886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788a:	4770      	bx	lr
 800788c:	e000ed00 	.word	0xe000ed00

08007890 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007890:	b480      	push	{r7}
 8007892:	b083      	sub	sp, #12
 8007894:	af00      	add	r7, sp, #0
 8007896:	4603      	mov	r3, r0
 8007898:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800789a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	db0b      	blt.n	80078ba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80078a2:	79fb      	ldrb	r3, [r7, #7]
 80078a4:	f003 021f 	and.w	r2, r3, #31
 80078a8:	4907      	ldr	r1, [pc, #28]	@ (80078c8 <__NVIC_EnableIRQ+0x38>)
 80078aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80078ae:	095b      	lsrs	r3, r3, #5
 80078b0:	2001      	movs	r0, #1
 80078b2:	fa00 f202 	lsl.w	r2, r0, r2
 80078b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80078ba:	bf00      	nop
 80078bc:	370c      	adds	r7, #12
 80078be:	46bd      	mov	sp, r7
 80078c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c4:	4770      	bx	lr
 80078c6:	bf00      	nop
 80078c8:	e000e100 	.word	0xe000e100

080078cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80078cc:	b480      	push	{r7}
 80078ce:	b083      	sub	sp, #12
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	4603      	mov	r3, r0
 80078d4:	6039      	str	r1, [r7, #0]
 80078d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80078d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	db0a      	blt.n	80078f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80078e0:	683b      	ldr	r3, [r7, #0]
 80078e2:	b2da      	uxtb	r2, r3
 80078e4:	490c      	ldr	r1, [pc, #48]	@ (8007918 <__NVIC_SetPriority+0x4c>)
 80078e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80078ea:	0112      	lsls	r2, r2, #4
 80078ec:	b2d2      	uxtb	r2, r2
 80078ee:	440b      	add	r3, r1
 80078f0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80078f4:	e00a      	b.n	800790c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80078f6:	683b      	ldr	r3, [r7, #0]
 80078f8:	b2da      	uxtb	r2, r3
 80078fa:	4908      	ldr	r1, [pc, #32]	@ (800791c <__NVIC_SetPriority+0x50>)
 80078fc:	79fb      	ldrb	r3, [r7, #7]
 80078fe:	f003 030f 	and.w	r3, r3, #15
 8007902:	3b04      	subs	r3, #4
 8007904:	0112      	lsls	r2, r2, #4
 8007906:	b2d2      	uxtb	r2, r2
 8007908:	440b      	add	r3, r1
 800790a:	761a      	strb	r2, [r3, #24]
}
 800790c:	bf00      	nop
 800790e:	370c      	adds	r7, #12
 8007910:	46bd      	mov	sp, r7
 8007912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007916:	4770      	bx	lr
 8007918:	e000e100 	.word	0xe000e100
 800791c:	e000ed00 	.word	0xe000ed00

08007920 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007920:	b480      	push	{r7}
 8007922:	b089      	sub	sp, #36	@ 0x24
 8007924:	af00      	add	r7, sp, #0
 8007926:	60f8      	str	r0, [r7, #12]
 8007928:	60b9      	str	r1, [r7, #8]
 800792a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	f003 0307 	and.w	r3, r3, #7
 8007932:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007934:	69fb      	ldr	r3, [r7, #28]
 8007936:	f1c3 0307 	rsb	r3, r3, #7
 800793a:	2b04      	cmp	r3, #4
 800793c:	bf28      	it	cs
 800793e:	2304      	movcs	r3, #4
 8007940:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007942:	69fb      	ldr	r3, [r7, #28]
 8007944:	3304      	adds	r3, #4
 8007946:	2b06      	cmp	r3, #6
 8007948:	d902      	bls.n	8007950 <NVIC_EncodePriority+0x30>
 800794a:	69fb      	ldr	r3, [r7, #28]
 800794c:	3b03      	subs	r3, #3
 800794e:	e000      	b.n	8007952 <NVIC_EncodePriority+0x32>
 8007950:	2300      	movs	r3, #0
 8007952:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007954:	f04f 32ff 	mov.w	r2, #4294967295
 8007958:	69bb      	ldr	r3, [r7, #24]
 800795a:	fa02 f303 	lsl.w	r3, r2, r3
 800795e:	43da      	mvns	r2, r3
 8007960:	68bb      	ldr	r3, [r7, #8]
 8007962:	401a      	ands	r2, r3
 8007964:	697b      	ldr	r3, [r7, #20]
 8007966:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007968:	f04f 31ff 	mov.w	r1, #4294967295
 800796c:	697b      	ldr	r3, [r7, #20]
 800796e:	fa01 f303 	lsl.w	r3, r1, r3
 8007972:	43d9      	mvns	r1, r3
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007978:	4313      	orrs	r3, r2
         );
}
 800797a:	4618      	mov	r0, r3
 800797c:	3724      	adds	r7, #36	@ 0x24
 800797e:	46bd      	mov	sp, r7
 8007980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007984:	4770      	bx	lr
	...

08007988 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007988:	b580      	push	{r7, lr}
 800798a:	b082      	sub	sp, #8
 800798c:	af00      	add	r7, sp, #0
 800798e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	3b01      	subs	r3, #1
 8007994:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007998:	d301      	bcc.n	800799e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800799a:	2301      	movs	r3, #1
 800799c:	e00f      	b.n	80079be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800799e:	4a0a      	ldr	r2, [pc, #40]	@ (80079c8 <SysTick_Config+0x40>)
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	3b01      	subs	r3, #1
 80079a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80079a6:	210f      	movs	r1, #15
 80079a8:	f04f 30ff 	mov.w	r0, #4294967295
 80079ac:	f7ff ff8e 	bl	80078cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80079b0:	4b05      	ldr	r3, [pc, #20]	@ (80079c8 <SysTick_Config+0x40>)
 80079b2:	2200      	movs	r2, #0
 80079b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80079b6:	4b04      	ldr	r3, [pc, #16]	@ (80079c8 <SysTick_Config+0x40>)
 80079b8:	2207      	movs	r2, #7
 80079ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80079bc:	2300      	movs	r3, #0
}
 80079be:	4618      	mov	r0, r3
 80079c0:	3708      	adds	r7, #8
 80079c2:	46bd      	mov	sp, r7
 80079c4:	bd80      	pop	{r7, pc}
 80079c6:	bf00      	nop
 80079c8:	e000e010 	.word	0xe000e010

080079cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80079cc:	b580      	push	{r7, lr}
 80079ce:	b082      	sub	sp, #8
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80079d4:	6878      	ldr	r0, [r7, #4]
 80079d6:	f7ff ff29 	bl	800782c <__NVIC_SetPriorityGrouping>
}
 80079da:	bf00      	nop
 80079dc:	3708      	adds	r7, #8
 80079de:	46bd      	mov	sp, r7
 80079e0:	bd80      	pop	{r7, pc}

080079e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80079e2:	b580      	push	{r7, lr}
 80079e4:	b086      	sub	sp, #24
 80079e6:	af00      	add	r7, sp, #0
 80079e8:	4603      	mov	r3, r0
 80079ea:	60b9      	str	r1, [r7, #8]
 80079ec:	607a      	str	r2, [r7, #4]
 80079ee:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80079f0:	f7ff ff40 	bl	8007874 <__NVIC_GetPriorityGrouping>
 80079f4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80079f6:	687a      	ldr	r2, [r7, #4]
 80079f8:	68b9      	ldr	r1, [r7, #8]
 80079fa:	6978      	ldr	r0, [r7, #20]
 80079fc:	f7ff ff90 	bl	8007920 <NVIC_EncodePriority>
 8007a00:	4602      	mov	r2, r0
 8007a02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007a06:	4611      	mov	r1, r2
 8007a08:	4618      	mov	r0, r3
 8007a0a:	f7ff ff5f 	bl	80078cc <__NVIC_SetPriority>
}
 8007a0e:	bf00      	nop
 8007a10:	3718      	adds	r7, #24
 8007a12:	46bd      	mov	sp, r7
 8007a14:	bd80      	pop	{r7, pc}

08007a16 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007a16:	b580      	push	{r7, lr}
 8007a18:	b082      	sub	sp, #8
 8007a1a:	af00      	add	r7, sp, #0
 8007a1c:	4603      	mov	r3, r0
 8007a1e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007a20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007a24:	4618      	mov	r0, r3
 8007a26:	f7ff ff33 	bl	8007890 <__NVIC_EnableIRQ>
}
 8007a2a:	bf00      	nop
 8007a2c:	3708      	adds	r7, #8
 8007a2e:	46bd      	mov	sp, r7
 8007a30:	bd80      	pop	{r7, pc}

08007a32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007a32:	b580      	push	{r7, lr}
 8007a34:	b082      	sub	sp, #8
 8007a36:	af00      	add	r7, sp, #0
 8007a38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007a3a:	6878      	ldr	r0, [r7, #4]
 8007a3c:	f7ff ffa4 	bl	8007988 <SysTick_Config>
 8007a40:	4603      	mov	r3, r0
}
 8007a42:	4618      	mov	r0, r3
 8007a44:	3708      	adds	r7, #8
 8007a46:	46bd      	mov	sp, r7
 8007a48:	bd80      	pop	{r7, pc}
	...

08007a4c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	b084      	sub	sp, #16
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d101      	bne.n	8007a5e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8007a5a:	2301      	movs	r3, #1
 8007a5c:	e08d      	b.n	8007b7a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	461a      	mov	r2, r3
 8007a64:	4b47      	ldr	r3, [pc, #284]	@ (8007b84 <HAL_DMA_Init+0x138>)
 8007a66:	429a      	cmp	r2, r3
 8007a68:	d80f      	bhi.n	8007a8a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	461a      	mov	r2, r3
 8007a70:	4b45      	ldr	r3, [pc, #276]	@ (8007b88 <HAL_DMA_Init+0x13c>)
 8007a72:	4413      	add	r3, r2
 8007a74:	4a45      	ldr	r2, [pc, #276]	@ (8007b8c <HAL_DMA_Init+0x140>)
 8007a76:	fba2 2303 	umull	r2, r3, r2, r3
 8007a7a:	091b      	lsrs	r3, r3, #4
 8007a7c:	009a      	lsls	r2, r3, #2
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	4a42      	ldr	r2, [pc, #264]	@ (8007b90 <HAL_DMA_Init+0x144>)
 8007a86:	641a      	str	r2, [r3, #64]	@ 0x40
 8007a88:	e00e      	b.n	8007aa8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	461a      	mov	r2, r3
 8007a90:	4b40      	ldr	r3, [pc, #256]	@ (8007b94 <HAL_DMA_Init+0x148>)
 8007a92:	4413      	add	r3, r2
 8007a94:	4a3d      	ldr	r2, [pc, #244]	@ (8007b8c <HAL_DMA_Init+0x140>)
 8007a96:	fba2 2303 	umull	r2, r3, r2, r3
 8007a9a:	091b      	lsrs	r3, r3, #4
 8007a9c:	009a      	lsls	r2, r3, #2
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	4a3c      	ldr	r2, [pc, #240]	@ (8007b98 <HAL_DMA_Init+0x14c>)
 8007aa6:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	2202      	movs	r2, #2
 8007aac:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8007abe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007ac2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8007acc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	691b      	ldr	r3, [r3, #16]
 8007ad2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007ad8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	699b      	ldr	r3, [r3, #24]
 8007ade:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007ae4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	6a1b      	ldr	r3, [r3, #32]
 8007aea:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8007aec:	68fa      	ldr	r2, [r7, #12]
 8007aee:	4313      	orrs	r3, r2
 8007af0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	68fa      	ldr	r2, [r7, #12]
 8007af8:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8007afa:	6878      	ldr	r0, [r7, #4]
 8007afc:	f000 fa82 	bl	8008004 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	689b      	ldr	r3, [r3, #8]
 8007b04:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007b08:	d102      	bne.n	8007b10 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	2200      	movs	r2, #0
 8007b0e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	685a      	ldr	r2, [r3, #4]
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007b18:	b2d2      	uxtb	r2, r2
 8007b1a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007b20:	687a      	ldr	r2, [r7, #4]
 8007b22:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8007b24:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	685b      	ldr	r3, [r3, #4]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d010      	beq.n	8007b50 <HAL_DMA_Init+0x104>
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	685b      	ldr	r3, [r3, #4]
 8007b32:	2b04      	cmp	r3, #4
 8007b34:	d80c      	bhi.n	8007b50 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8007b36:	6878      	ldr	r0, [r7, #4]
 8007b38:	f000 faa2 	bl	8008080 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b40:	2200      	movs	r2, #0
 8007b42:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007b48:	687a      	ldr	r2, [r7, #4]
 8007b4a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8007b4c:	605a      	str	r2, [r3, #4]
 8007b4e:	e008      	b.n	8007b62 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	2200      	movs	r2, #0
 8007b54:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	2200      	movs	r2, #0
 8007b5a:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	2200      	movs	r2, #0
 8007b60:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	2200      	movs	r2, #0
 8007b66:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	2201      	movs	r2, #1
 8007b6c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	2200      	movs	r2, #0
 8007b74:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8007b78:	2300      	movs	r3, #0
}
 8007b7a:	4618      	mov	r0, r3
 8007b7c:	3710      	adds	r7, #16
 8007b7e:	46bd      	mov	sp, r7
 8007b80:	bd80      	pop	{r7, pc}
 8007b82:	bf00      	nop
 8007b84:	40020407 	.word	0x40020407
 8007b88:	bffdfff8 	.word	0xbffdfff8
 8007b8c:	cccccccd 	.word	0xcccccccd
 8007b90:	40020000 	.word	0x40020000
 8007b94:	bffdfbf8 	.word	0xbffdfbf8
 8007b98:	40020400 	.word	0x40020400

08007b9c <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8007b9c:	b580      	push	{r7, lr}
 8007b9e:	b086      	sub	sp, #24
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	60f8      	str	r0, [r7, #12]
 8007ba4:	60b9      	str	r1, [r7, #8]
 8007ba6:	607a      	str	r2, [r7, #4]
 8007ba8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007baa:	2300      	movs	r3, #0
 8007bac:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8007bb4:	2b01      	cmp	r3, #1
 8007bb6:	d101      	bne.n	8007bbc <HAL_DMA_Start_IT+0x20>
 8007bb8:	2302      	movs	r3, #2
 8007bba:	e066      	b.n	8007c8a <HAL_DMA_Start_IT+0xee>
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	2201      	movs	r2, #1
 8007bc0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8007bca:	b2db      	uxtb	r3, r3
 8007bcc:	2b01      	cmp	r3, #1
 8007bce:	d155      	bne.n	8007c7c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	2202      	movs	r2, #2
 8007bd4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	2200      	movs	r2, #0
 8007bdc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	681a      	ldr	r2, [r3, #0]
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	f022 0201 	bic.w	r2, r2, #1
 8007bec:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007bee:	683b      	ldr	r3, [r7, #0]
 8007bf0:	687a      	ldr	r2, [r7, #4]
 8007bf2:	68b9      	ldr	r1, [r7, #8]
 8007bf4:	68f8      	ldr	r0, [r7, #12]
 8007bf6:	f000 f9c7 	bl	8007f88 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d008      	beq.n	8007c14 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	681a      	ldr	r2, [r3, #0]
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	f042 020e 	orr.w	r2, r2, #14
 8007c10:	601a      	str	r2, [r3, #0]
 8007c12:	e00f      	b.n	8007c34 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	681a      	ldr	r2, [r3, #0]
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	f022 0204 	bic.w	r2, r2, #4
 8007c22:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	681a      	ldr	r2, [r3, #0]
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	f042 020a 	orr.w	r2, r2, #10
 8007c32:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d007      	beq.n	8007c52 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007c46:	681a      	ldr	r2, [r3, #0]
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007c4c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007c50:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d007      	beq.n	8007c6a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c5e:	681a      	ldr	r2, [r3, #0]
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c64:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007c68:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	681a      	ldr	r2, [r3, #0]
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	f042 0201 	orr.w	r2, r2, #1
 8007c78:	601a      	str	r2, [r3, #0]
 8007c7a:	e005      	b.n	8007c88 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	2200      	movs	r2, #0
 8007c80:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8007c84:	2302      	movs	r3, #2
 8007c86:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8007c88:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	3718      	adds	r7, #24
 8007c8e:	46bd      	mov	sp, r7
 8007c90:	bd80      	pop	{r7, pc}

08007c92 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007c92:	b480      	push	{r7}
 8007c94:	b085      	sub	sp, #20
 8007c96:	af00      	add	r7, sp, #0
 8007c98:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007c9a:	2300      	movs	r3, #0
 8007c9c:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8007ca4:	b2db      	uxtb	r3, r3
 8007ca6:	2b02      	cmp	r3, #2
 8007ca8:	d005      	beq.n	8007cb6 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	2204      	movs	r2, #4
 8007cae:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8007cb0:	2301      	movs	r3, #1
 8007cb2:	73fb      	strb	r3, [r7, #15]
 8007cb4:	e037      	b.n	8007d26 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	681a      	ldr	r2, [r3, #0]
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	f022 020e 	bic.w	r2, r2, #14
 8007cc4:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007cca:	681a      	ldr	r2, [r3, #0]
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007cd0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007cd4:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	681a      	ldr	r2, [r3, #0]
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	f022 0201 	bic.w	r2, r2, #1
 8007ce4:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007cea:	f003 021f 	and.w	r2, r3, #31
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007cf2:	2101      	movs	r1, #1
 8007cf4:	fa01 f202 	lsl.w	r2, r1, r2
 8007cf8:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007cfe:	687a      	ldr	r2, [r7, #4]
 8007d00:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8007d02:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d00c      	beq.n	8007d26 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d10:	681a      	ldr	r2, [r3, #0]
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d16:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007d1a:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007d20:	687a      	ldr	r2, [r7, #4]
 8007d22:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8007d24:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	2201      	movs	r2, #1
 8007d2a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	2200      	movs	r2, #0
 8007d32:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8007d36:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d38:	4618      	mov	r0, r3
 8007d3a:	3714      	adds	r7, #20
 8007d3c:	46bd      	mov	sp, r7
 8007d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d42:	4770      	bx	lr

08007d44 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007d44:	b580      	push	{r7, lr}
 8007d46:	b084      	sub	sp, #16
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8007d56:	b2db      	uxtb	r3, r3
 8007d58:	2b02      	cmp	r3, #2
 8007d5a:	d00d      	beq.n	8007d78 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	2204      	movs	r2, #4
 8007d60:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	2201      	movs	r2, #1
 8007d66:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	2200      	movs	r2, #0
 8007d6e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8007d72:	2301      	movs	r3, #1
 8007d74:	73fb      	strb	r3, [r7, #15]
 8007d76:	e047      	b.n	8007e08 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	681a      	ldr	r2, [r3, #0]
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	f022 020e 	bic.w	r2, r2, #14
 8007d86:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	681a      	ldr	r2, [r3, #0]
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	f022 0201 	bic.w	r2, r2, #1
 8007d96:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007d9c:	681a      	ldr	r2, [r3, #0]
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007da2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007da6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007dac:	f003 021f 	and.w	r2, r3, #31
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007db4:	2101      	movs	r1, #1
 8007db6:	fa01 f202 	lsl.w	r2, r1, r2
 8007dba:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007dc0:	687a      	ldr	r2, [r7, #4]
 8007dc2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8007dc4:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d00c      	beq.n	8007de8 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007dd2:	681a      	ldr	r2, [r3, #0]
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007dd8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007ddc:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007de2:	687a      	ldr	r2, [r7, #4]
 8007de4:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8007de6:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	2201      	movs	r2, #1
 8007dec:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	2200      	movs	r2, #0
 8007df4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d003      	beq.n	8007e08 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e04:	6878      	ldr	r0, [r7, #4]
 8007e06:	4798      	blx	r3
    }
  }
  return status;
 8007e08:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	3710      	adds	r7, #16
 8007e0e:	46bd      	mov	sp, r7
 8007e10:	bd80      	pop	{r7, pc}

08007e12 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007e12:	b580      	push	{r7, lr}
 8007e14:	b084      	sub	sp, #16
 8007e16:	af00      	add	r7, sp, #0
 8007e18:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007e2e:	f003 031f 	and.w	r3, r3, #31
 8007e32:	2204      	movs	r2, #4
 8007e34:	409a      	lsls	r2, r3
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	4013      	ands	r3, r2
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d026      	beq.n	8007e8c <HAL_DMA_IRQHandler+0x7a>
 8007e3e:	68bb      	ldr	r3, [r7, #8]
 8007e40:	f003 0304 	and.w	r3, r3, #4
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d021      	beq.n	8007e8c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	f003 0320 	and.w	r3, r3, #32
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d107      	bne.n	8007e66 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	681a      	ldr	r2, [r3, #0]
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	f022 0204 	bic.w	r2, r2, #4
 8007e64:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007e6a:	f003 021f 	and.w	r2, r3, #31
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e72:	2104      	movs	r1, #4
 8007e74:	fa01 f202 	lsl.w	r2, r1, r2
 8007e78:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d071      	beq.n	8007f66 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e86:	6878      	ldr	r0, [r7, #4]
 8007e88:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8007e8a:	e06c      	b.n	8007f66 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007e90:	f003 031f 	and.w	r3, r3, #31
 8007e94:	2202      	movs	r2, #2
 8007e96:	409a      	lsls	r2, r3
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	4013      	ands	r3, r2
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d02e      	beq.n	8007efe <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8007ea0:	68bb      	ldr	r3, [r7, #8]
 8007ea2:	f003 0302 	and.w	r3, r3, #2
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d029      	beq.n	8007efe <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	f003 0320 	and.w	r3, r3, #32
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d10b      	bne.n	8007ed0 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	681a      	ldr	r2, [r3, #0]
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	f022 020a 	bic.w	r2, r2, #10
 8007ec6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	2201      	movs	r2, #1
 8007ecc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ed4:	f003 021f 	and.w	r2, r3, #31
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007edc:	2102      	movs	r1, #2
 8007ede:	fa01 f202 	lsl.w	r2, r1, r2
 8007ee2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	2200      	movs	r2, #0
 8007ee8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d038      	beq.n	8007f66 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ef8:	6878      	ldr	r0, [r7, #4]
 8007efa:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8007efc:	e033      	b.n	8007f66 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f02:	f003 031f 	and.w	r3, r3, #31
 8007f06:	2208      	movs	r2, #8
 8007f08:	409a      	lsls	r2, r3
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	4013      	ands	r3, r2
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d02a      	beq.n	8007f68 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8007f12:	68bb      	ldr	r3, [r7, #8]
 8007f14:	f003 0308 	and.w	r3, r3, #8
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d025      	beq.n	8007f68 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	681a      	ldr	r2, [r3, #0]
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	f022 020e 	bic.w	r2, r2, #14
 8007f2a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f30:	f003 021f 	and.w	r2, r3, #31
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f38:	2101      	movs	r1, #1
 8007f3a:	fa01 f202 	lsl.w	r2, r1, r2
 8007f3e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	2201      	movs	r2, #1
 8007f44:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	2201      	movs	r2, #1
 8007f4a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	2200      	movs	r2, #0
 8007f52:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d004      	beq.n	8007f68 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007f62:	6878      	ldr	r0, [r7, #4]
 8007f64:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8007f66:	bf00      	nop
 8007f68:	bf00      	nop
}
 8007f6a:	3710      	adds	r7, #16
 8007f6c:	46bd      	mov	sp, r7
 8007f6e:	bd80      	pop	{r7, pc}

08007f70 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8007f70:	b480      	push	{r7}
 8007f72:	b083      	sub	sp, #12
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 8007f7c:	4618      	mov	r0, r3
 8007f7e:	370c      	adds	r7, #12
 8007f80:	46bd      	mov	sp, r7
 8007f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f86:	4770      	bx	lr

08007f88 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007f88:	b480      	push	{r7}
 8007f8a:	b085      	sub	sp, #20
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	60f8      	str	r0, [r7, #12]
 8007f90:	60b9      	str	r1, [r7, #8]
 8007f92:	607a      	str	r2, [r7, #4]
 8007f94:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007f9a:	68fa      	ldr	r2, [r7, #12]
 8007f9c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8007f9e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d004      	beq.n	8007fb2 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007fac:	68fa      	ldr	r2, [r7, #12]
 8007fae:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8007fb0:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007fb6:	f003 021f 	and.w	r2, r3, #31
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fbe:	2101      	movs	r1, #1
 8007fc0:	fa01 f202 	lsl.w	r2, r1, r2
 8007fc4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	683a      	ldr	r2, [r7, #0]
 8007fcc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	689b      	ldr	r3, [r3, #8]
 8007fd2:	2b10      	cmp	r3, #16
 8007fd4:	d108      	bne.n	8007fe8 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	687a      	ldr	r2, [r7, #4]
 8007fdc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	68ba      	ldr	r2, [r7, #8]
 8007fe4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8007fe6:	e007      	b.n	8007ff8 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	68ba      	ldr	r2, [r7, #8]
 8007fee:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	687a      	ldr	r2, [r7, #4]
 8007ff6:	60da      	str	r2, [r3, #12]
}
 8007ff8:	bf00      	nop
 8007ffa:	3714      	adds	r7, #20
 8007ffc:	46bd      	mov	sp, r7
 8007ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008002:	4770      	bx	lr

08008004 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008004:	b480      	push	{r7}
 8008006:	b087      	sub	sp, #28
 8008008:	af00      	add	r7, sp, #0
 800800a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	461a      	mov	r2, r3
 8008012:	4b16      	ldr	r3, [pc, #88]	@ (800806c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8008014:	429a      	cmp	r2, r3
 8008016:	d802      	bhi.n	800801e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8008018:	4b15      	ldr	r3, [pc, #84]	@ (8008070 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800801a:	617b      	str	r3, [r7, #20]
 800801c:	e001      	b.n	8008022 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800801e:	4b15      	ldr	r3, [pc, #84]	@ (8008074 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8008020:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8008022:	697b      	ldr	r3, [r7, #20]
 8008024:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	b2db      	uxtb	r3, r3
 800802c:	3b08      	subs	r3, #8
 800802e:	4a12      	ldr	r2, [pc, #72]	@ (8008078 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8008030:	fba2 2303 	umull	r2, r3, r2, r3
 8008034:	091b      	lsrs	r3, r3, #4
 8008036:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800803c:	089b      	lsrs	r3, r3, #2
 800803e:	009a      	lsls	r2, r3, #2
 8008040:	693b      	ldr	r3, [r7, #16]
 8008042:	4413      	add	r3, r2
 8008044:	461a      	mov	r2, r3
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	4a0b      	ldr	r2, [pc, #44]	@ (800807c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800804e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	f003 031f 	and.w	r3, r3, #31
 8008056:	2201      	movs	r2, #1
 8008058:	409a      	lsls	r2, r3
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800805e:	bf00      	nop
 8008060:	371c      	adds	r7, #28
 8008062:	46bd      	mov	sp, r7
 8008064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008068:	4770      	bx	lr
 800806a:	bf00      	nop
 800806c:	40020407 	.word	0x40020407
 8008070:	40020800 	.word	0x40020800
 8008074:	40020820 	.word	0x40020820
 8008078:	cccccccd 	.word	0xcccccccd
 800807c:	40020880 	.word	0x40020880

08008080 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008080:	b480      	push	{r7}
 8008082:	b085      	sub	sp, #20
 8008084:	af00      	add	r7, sp, #0
 8008086:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	685b      	ldr	r3, [r3, #4]
 800808c:	b2db      	uxtb	r3, r3
 800808e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8008090:	68fa      	ldr	r2, [r7, #12]
 8008092:	4b0b      	ldr	r3, [pc, #44]	@ (80080c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8008094:	4413      	add	r3, r2
 8008096:	009b      	lsls	r3, r3, #2
 8008098:	461a      	mov	r2, r3
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	4a08      	ldr	r2, [pc, #32]	@ (80080c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80080a2:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	3b01      	subs	r3, #1
 80080a8:	f003 031f 	and.w	r3, r3, #31
 80080ac:	2201      	movs	r2, #1
 80080ae:	409a      	lsls	r2, r3
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80080b4:	bf00      	nop
 80080b6:	3714      	adds	r7, #20
 80080b8:	46bd      	mov	sp, r7
 80080ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080be:	4770      	bx	lr
 80080c0:	1000823f 	.word	0x1000823f
 80080c4:	40020940 	.word	0x40020940

080080c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80080c8:	b480      	push	{r7}
 80080ca:	b087      	sub	sp, #28
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	6078      	str	r0, [r7, #4]
 80080d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80080d2:	2300      	movs	r3, #0
 80080d4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80080d6:	e15a      	b.n	800838e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80080d8:	683b      	ldr	r3, [r7, #0]
 80080da:	681a      	ldr	r2, [r3, #0]
 80080dc:	2101      	movs	r1, #1
 80080de:	697b      	ldr	r3, [r7, #20]
 80080e0:	fa01 f303 	lsl.w	r3, r1, r3
 80080e4:	4013      	ands	r3, r2
 80080e6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	f000 814c 	beq.w	8008388 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80080f0:	683b      	ldr	r3, [r7, #0]
 80080f2:	685b      	ldr	r3, [r3, #4]
 80080f4:	f003 0303 	and.w	r3, r3, #3
 80080f8:	2b01      	cmp	r3, #1
 80080fa:	d005      	beq.n	8008108 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80080fc:	683b      	ldr	r3, [r7, #0]
 80080fe:	685b      	ldr	r3, [r3, #4]
 8008100:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8008104:	2b02      	cmp	r3, #2
 8008106:	d130      	bne.n	800816a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	689b      	ldr	r3, [r3, #8]
 800810c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800810e:	697b      	ldr	r3, [r7, #20]
 8008110:	005b      	lsls	r3, r3, #1
 8008112:	2203      	movs	r2, #3
 8008114:	fa02 f303 	lsl.w	r3, r2, r3
 8008118:	43db      	mvns	r3, r3
 800811a:	693a      	ldr	r2, [r7, #16]
 800811c:	4013      	ands	r3, r2
 800811e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008120:	683b      	ldr	r3, [r7, #0]
 8008122:	68da      	ldr	r2, [r3, #12]
 8008124:	697b      	ldr	r3, [r7, #20]
 8008126:	005b      	lsls	r3, r3, #1
 8008128:	fa02 f303 	lsl.w	r3, r2, r3
 800812c:	693a      	ldr	r2, [r7, #16]
 800812e:	4313      	orrs	r3, r2
 8008130:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	693a      	ldr	r2, [r7, #16]
 8008136:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	685b      	ldr	r3, [r3, #4]
 800813c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800813e:	2201      	movs	r2, #1
 8008140:	697b      	ldr	r3, [r7, #20]
 8008142:	fa02 f303 	lsl.w	r3, r2, r3
 8008146:	43db      	mvns	r3, r3
 8008148:	693a      	ldr	r2, [r7, #16]
 800814a:	4013      	ands	r3, r2
 800814c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800814e:	683b      	ldr	r3, [r7, #0]
 8008150:	685b      	ldr	r3, [r3, #4]
 8008152:	091b      	lsrs	r3, r3, #4
 8008154:	f003 0201 	and.w	r2, r3, #1
 8008158:	697b      	ldr	r3, [r7, #20]
 800815a:	fa02 f303 	lsl.w	r3, r2, r3
 800815e:	693a      	ldr	r2, [r7, #16]
 8008160:	4313      	orrs	r3, r2
 8008162:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	693a      	ldr	r2, [r7, #16]
 8008168:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800816a:	683b      	ldr	r3, [r7, #0]
 800816c:	685b      	ldr	r3, [r3, #4]
 800816e:	f003 0303 	and.w	r3, r3, #3
 8008172:	2b03      	cmp	r3, #3
 8008174:	d017      	beq.n	80081a6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	68db      	ldr	r3, [r3, #12]
 800817a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800817c:	697b      	ldr	r3, [r7, #20]
 800817e:	005b      	lsls	r3, r3, #1
 8008180:	2203      	movs	r2, #3
 8008182:	fa02 f303 	lsl.w	r3, r2, r3
 8008186:	43db      	mvns	r3, r3
 8008188:	693a      	ldr	r2, [r7, #16]
 800818a:	4013      	ands	r3, r2
 800818c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800818e:	683b      	ldr	r3, [r7, #0]
 8008190:	689a      	ldr	r2, [r3, #8]
 8008192:	697b      	ldr	r3, [r7, #20]
 8008194:	005b      	lsls	r3, r3, #1
 8008196:	fa02 f303 	lsl.w	r3, r2, r3
 800819a:	693a      	ldr	r2, [r7, #16]
 800819c:	4313      	orrs	r3, r2
 800819e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	693a      	ldr	r2, [r7, #16]
 80081a4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80081a6:	683b      	ldr	r3, [r7, #0]
 80081a8:	685b      	ldr	r3, [r3, #4]
 80081aa:	f003 0303 	and.w	r3, r3, #3
 80081ae:	2b02      	cmp	r3, #2
 80081b0:	d123      	bne.n	80081fa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80081b2:	697b      	ldr	r3, [r7, #20]
 80081b4:	08da      	lsrs	r2, r3, #3
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	3208      	adds	r2, #8
 80081ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081be:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80081c0:	697b      	ldr	r3, [r7, #20]
 80081c2:	f003 0307 	and.w	r3, r3, #7
 80081c6:	009b      	lsls	r3, r3, #2
 80081c8:	220f      	movs	r2, #15
 80081ca:	fa02 f303 	lsl.w	r3, r2, r3
 80081ce:	43db      	mvns	r3, r3
 80081d0:	693a      	ldr	r2, [r7, #16]
 80081d2:	4013      	ands	r3, r2
 80081d4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80081d6:	683b      	ldr	r3, [r7, #0]
 80081d8:	691a      	ldr	r2, [r3, #16]
 80081da:	697b      	ldr	r3, [r7, #20]
 80081dc:	f003 0307 	and.w	r3, r3, #7
 80081e0:	009b      	lsls	r3, r3, #2
 80081e2:	fa02 f303 	lsl.w	r3, r2, r3
 80081e6:	693a      	ldr	r2, [r7, #16]
 80081e8:	4313      	orrs	r3, r2
 80081ea:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80081ec:	697b      	ldr	r3, [r7, #20]
 80081ee:	08da      	lsrs	r2, r3, #3
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	3208      	adds	r2, #8
 80081f4:	6939      	ldr	r1, [r7, #16]
 80081f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8008200:	697b      	ldr	r3, [r7, #20]
 8008202:	005b      	lsls	r3, r3, #1
 8008204:	2203      	movs	r2, #3
 8008206:	fa02 f303 	lsl.w	r3, r2, r3
 800820a:	43db      	mvns	r3, r3
 800820c:	693a      	ldr	r2, [r7, #16]
 800820e:	4013      	ands	r3, r2
 8008210:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008212:	683b      	ldr	r3, [r7, #0]
 8008214:	685b      	ldr	r3, [r3, #4]
 8008216:	f003 0203 	and.w	r2, r3, #3
 800821a:	697b      	ldr	r3, [r7, #20]
 800821c:	005b      	lsls	r3, r3, #1
 800821e:	fa02 f303 	lsl.w	r3, r2, r3
 8008222:	693a      	ldr	r2, [r7, #16]
 8008224:	4313      	orrs	r3, r2
 8008226:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	693a      	ldr	r2, [r7, #16]
 800822c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800822e:	683b      	ldr	r3, [r7, #0]
 8008230:	685b      	ldr	r3, [r3, #4]
 8008232:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8008236:	2b00      	cmp	r3, #0
 8008238:	f000 80a6 	beq.w	8008388 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800823c:	4b5b      	ldr	r3, [pc, #364]	@ (80083ac <HAL_GPIO_Init+0x2e4>)
 800823e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008240:	4a5a      	ldr	r2, [pc, #360]	@ (80083ac <HAL_GPIO_Init+0x2e4>)
 8008242:	f043 0301 	orr.w	r3, r3, #1
 8008246:	6613      	str	r3, [r2, #96]	@ 0x60
 8008248:	4b58      	ldr	r3, [pc, #352]	@ (80083ac <HAL_GPIO_Init+0x2e4>)
 800824a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800824c:	f003 0301 	and.w	r3, r3, #1
 8008250:	60bb      	str	r3, [r7, #8]
 8008252:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008254:	4a56      	ldr	r2, [pc, #344]	@ (80083b0 <HAL_GPIO_Init+0x2e8>)
 8008256:	697b      	ldr	r3, [r7, #20]
 8008258:	089b      	lsrs	r3, r3, #2
 800825a:	3302      	adds	r3, #2
 800825c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008260:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008262:	697b      	ldr	r3, [r7, #20]
 8008264:	f003 0303 	and.w	r3, r3, #3
 8008268:	009b      	lsls	r3, r3, #2
 800826a:	220f      	movs	r2, #15
 800826c:	fa02 f303 	lsl.w	r3, r2, r3
 8008270:	43db      	mvns	r3, r3
 8008272:	693a      	ldr	r2, [r7, #16]
 8008274:	4013      	ands	r3, r2
 8008276:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800827e:	d01f      	beq.n	80082c0 <HAL_GPIO_Init+0x1f8>
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	4a4c      	ldr	r2, [pc, #304]	@ (80083b4 <HAL_GPIO_Init+0x2ec>)
 8008284:	4293      	cmp	r3, r2
 8008286:	d019      	beq.n	80082bc <HAL_GPIO_Init+0x1f4>
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	4a4b      	ldr	r2, [pc, #300]	@ (80083b8 <HAL_GPIO_Init+0x2f0>)
 800828c:	4293      	cmp	r3, r2
 800828e:	d013      	beq.n	80082b8 <HAL_GPIO_Init+0x1f0>
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	4a4a      	ldr	r2, [pc, #296]	@ (80083bc <HAL_GPIO_Init+0x2f4>)
 8008294:	4293      	cmp	r3, r2
 8008296:	d00d      	beq.n	80082b4 <HAL_GPIO_Init+0x1ec>
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	4a49      	ldr	r2, [pc, #292]	@ (80083c0 <HAL_GPIO_Init+0x2f8>)
 800829c:	4293      	cmp	r3, r2
 800829e:	d007      	beq.n	80082b0 <HAL_GPIO_Init+0x1e8>
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	4a48      	ldr	r2, [pc, #288]	@ (80083c4 <HAL_GPIO_Init+0x2fc>)
 80082a4:	4293      	cmp	r3, r2
 80082a6:	d101      	bne.n	80082ac <HAL_GPIO_Init+0x1e4>
 80082a8:	2305      	movs	r3, #5
 80082aa:	e00a      	b.n	80082c2 <HAL_GPIO_Init+0x1fa>
 80082ac:	2306      	movs	r3, #6
 80082ae:	e008      	b.n	80082c2 <HAL_GPIO_Init+0x1fa>
 80082b0:	2304      	movs	r3, #4
 80082b2:	e006      	b.n	80082c2 <HAL_GPIO_Init+0x1fa>
 80082b4:	2303      	movs	r3, #3
 80082b6:	e004      	b.n	80082c2 <HAL_GPIO_Init+0x1fa>
 80082b8:	2302      	movs	r3, #2
 80082ba:	e002      	b.n	80082c2 <HAL_GPIO_Init+0x1fa>
 80082bc:	2301      	movs	r3, #1
 80082be:	e000      	b.n	80082c2 <HAL_GPIO_Init+0x1fa>
 80082c0:	2300      	movs	r3, #0
 80082c2:	697a      	ldr	r2, [r7, #20]
 80082c4:	f002 0203 	and.w	r2, r2, #3
 80082c8:	0092      	lsls	r2, r2, #2
 80082ca:	4093      	lsls	r3, r2
 80082cc:	693a      	ldr	r2, [r7, #16]
 80082ce:	4313      	orrs	r3, r2
 80082d0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80082d2:	4937      	ldr	r1, [pc, #220]	@ (80083b0 <HAL_GPIO_Init+0x2e8>)
 80082d4:	697b      	ldr	r3, [r7, #20]
 80082d6:	089b      	lsrs	r3, r3, #2
 80082d8:	3302      	adds	r3, #2
 80082da:	693a      	ldr	r2, [r7, #16]
 80082dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80082e0:	4b39      	ldr	r3, [pc, #228]	@ (80083c8 <HAL_GPIO_Init+0x300>)
 80082e2:	689b      	ldr	r3, [r3, #8]
 80082e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	43db      	mvns	r3, r3
 80082ea:	693a      	ldr	r2, [r7, #16]
 80082ec:	4013      	ands	r3, r2
 80082ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80082f0:	683b      	ldr	r3, [r7, #0]
 80082f2:	685b      	ldr	r3, [r3, #4]
 80082f4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d003      	beq.n	8008304 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80082fc:	693a      	ldr	r2, [r7, #16]
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	4313      	orrs	r3, r2
 8008302:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8008304:	4a30      	ldr	r2, [pc, #192]	@ (80083c8 <HAL_GPIO_Init+0x300>)
 8008306:	693b      	ldr	r3, [r7, #16]
 8008308:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800830a:	4b2f      	ldr	r3, [pc, #188]	@ (80083c8 <HAL_GPIO_Init+0x300>)
 800830c:	68db      	ldr	r3, [r3, #12]
 800830e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	43db      	mvns	r3, r3
 8008314:	693a      	ldr	r2, [r7, #16]
 8008316:	4013      	ands	r3, r2
 8008318:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800831a:	683b      	ldr	r3, [r7, #0]
 800831c:	685b      	ldr	r3, [r3, #4]
 800831e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008322:	2b00      	cmp	r3, #0
 8008324:	d003      	beq.n	800832e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8008326:	693a      	ldr	r2, [r7, #16]
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	4313      	orrs	r3, r2
 800832c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800832e:	4a26      	ldr	r2, [pc, #152]	@ (80083c8 <HAL_GPIO_Init+0x300>)
 8008330:	693b      	ldr	r3, [r7, #16]
 8008332:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8008334:	4b24      	ldr	r3, [pc, #144]	@ (80083c8 <HAL_GPIO_Init+0x300>)
 8008336:	685b      	ldr	r3, [r3, #4]
 8008338:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	43db      	mvns	r3, r3
 800833e:	693a      	ldr	r2, [r7, #16]
 8008340:	4013      	ands	r3, r2
 8008342:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008344:	683b      	ldr	r3, [r7, #0]
 8008346:	685b      	ldr	r3, [r3, #4]
 8008348:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800834c:	2b00      	cmp	r3, #0
 800834e:	d003      	beq.n	8008358 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8008350:	693a      	ldr	r2, [r7, #16]
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	4313      	orrs	r3, r2
 8008356:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8008358:	4a1b      	ldr	r2, [pc, #108]	@ (80083c8 <HAL_GPIO_Init+0x300>)
 800835a:	693b      	ldr	r3, [r7, #16]
 800835c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800835e:	4b1a      	ldr	r3, [pc, #104]	@ (80083c8 <HAL_GPIO_Init+0x300>)
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	43db      	mvns	r3, r3
 8008368:	693a      	ldr	r2, [r7, #16]
 800836a:	4013      	ands	r3, r2
 800836c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800836e:	683b      	ldr	r3, [r7, #0]
 8008370:	685b      	ldr	r3, [r3, #4]
 8008372:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008376:	2b00      	cmp	r3, #0
 8008378:	d003      	beq.n	8008382 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800837a:	693a      	ldr	r2, [r7, #16]
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	4313      	orrs	r3, r2
 8008380:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8008382:	4a11      	ldr	r2, [pc, #68]	@ (80083c8 <HAL_GPIO_Init+0x300>)
 8008384:	693b      	ldr	r3, [r7, #16]
 8008386:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8008388:	697b      	ldr	r3, [r7, #20]
 800838a:	3301      	adds	r3, #1
 800838c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800838e:	683b      	ldr	r3, [r7, #0]
 8008390:	681a      	ldr	r2, [r3, #0]
 8008392:	697b      	ldr	r3, [r7, #20]
 8008394:	fa22 f303 	lsr.w	r3, r2, r3
 8008398:	2b00      	cmp	r3, #0
 800839a:	f47f ae9d 	bne.w	80080d8 <HAL_GPIO_Init+0x10>
  }
}
 800839e:	bf00      	nop
 80083a0:	bf00      	nop
 80083a2:	371c      	adds	r7, #28
 80083a4:	46bd      	mov	sp, r7
 80083a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083aa:	4770      	bx	lr
 80083ac:	40021000 	.word	0x40021000
 80083b0:	40010000 	.word	0x40010000
 80083b4:	48000400 	.word	0x48000400
 80083b8:	48000800 	.word	0x48000800
 80083bc:	48000c00 	.word	0x48000c00
 80083c0:	48001000 	.word	0x48001000
 80083c4:	48001400 	.word	0x48001400
 80083c8:	40010400 	.word	0x40010400

080083cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80083cc:	b480      	push	{r7}
 80083ce:	b083      	sub	sp, #12
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	6078      	str	r0, [r7, #4]
 80083d4:	460b      	mov	r3, r1
 80083d6:	807b      	strh	r3, [r7, #2]
 80083d8:	4613      	mov	r3, r2
 80083da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80083dc:	787b      	ldrb	r3, [r7, #1]
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d003      	beq.n	80083ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80083e2:	887a      	ldrh	r2, [r7, #2]
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80083e8:	e002      	b.n	80083f0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80083ea:	887a      	ldrh	r2, [r7, #2]
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80083f0:	bf00      	nop
 80083f2:	370c      	adds	r7, #12
 80083f4:	46bd      	mov	sp, r7
 80083f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083fa:	4770      	bx	lr

080083fc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80083fc:	b580      	push	{r7, lr}
 80083fe:	b082      	sub	sp, #8
 8008400:	af00      	add	r7, sp, #0
 8008402:	4603      	mov	r3, r0
 8008404:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8008406:	4b08      	ldr	r3, [pc, #32]	@ (8008428 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008408:	695a      	ldr	r2, [r3, #20]
 800840a:	88fb      	ldrh	r3, [r7, #6]
 800840c:	4013      	ands	r3, r2
 800840e:	2b00      	cmp	r3, #0
 8008410:	d006      	beq.n	8008420 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8008412:	4a05      	ldr	r2, [pc, #20]	@ (8008428 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008414:	88fb      	ldrh	r3, [r7, #6]
 8008416:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008418:	88fb      	ldrh	r3, [r7, #6]
 800841a:	4618      	mov	r0, r3
 800841c:	f7fc fc20 	bl	8004c60 <HAL_GPIO_EXTI_Callback>
  }
}
 8008420:	bf00      	nop
 8008422:	3708      	adds	r7, #8
 8008424:	46bd      	mov	sp, r7
 8008426:	bd80      	pop	{r7, pc}
 8008428:	40010400 	.word	0x40010400

0800842c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800842c:	b480      	push	{r7}
 800842e:	b085      	sub	sp, #20
 8008430:	af00      	add	r7, sp, #0
 8008432:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	2b00      	cmp	r3, #0
 8008438:	d141      	bne.n	80084be <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800843a:	4b4b      	ldr	r3, [pc, #300]	@ (8008568 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8008442:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008446:	d131      	bne.n	80084ac <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008448:	4b47      	ldr	r3, [pc, #284]	@ (8008568 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800844a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800844e:	4a46      	ldr	r2, [pc, #280]	@ (8008568 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008450:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008454:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8008458:	4b43      	ldr	r3, [pc, #268]	@ (8008568 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8008460:	4a41      	ldr	r2, [pc, #260]	@ (8008568 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008462:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8008466:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8008468:	4b40      	ldr	r3, [pc, #256]	@ (800856c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	2232      	movs	r2, #50	@ 0x32
 800846e:	fb02 f303 	mul.w	r3, r2, r3
 8008472:	4a3f      	ldr	r2, [pc, #252]	@ (8008570 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8008474:	fba2 2303 	umull	r2, r3, r2, r3
 8008478:	0c9b      	lsrs	r3, r3, #18
 800847a:	3301      	adds	r3, #1
 800847c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800847e:	e002      	b.n	8008486 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	3b01      	subs	r3, #1
 8008484:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008486:	4b38      	ldr	r3, [pc, #224]	@ (8008568 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008488:	695b      	ldr	r3, [r3, #20]
 800848a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800848e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008492:	d102      	bne.n	800849a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	2b00      	cmp	r3, #0
 8008498:	d1f2      	bne.n	8008480 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800849a:	4b33      	ldr	r3, [pc, #204]	@ (8008568 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800849c:	695b      	ldr	r3, [r3, #20]
 800849e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80084a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80084a6:	d158      	bne.n	800855a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80084a8:	2303      	movs	r3, #3
 80084aa:	e057      	b.n	800855c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80084ac:	4b2e      	ldr	r3, [pc, #184]	@ (8008568 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80084ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80084b2:	4a2d      	ldr	r2, [pc, #180]	@ (8008568 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80084b4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80084b8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80084bc:	e04d      	b.n	800855a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80084c4:	d141      	bne.n	800854a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80084c6:	4b28      	ldr	r3, [pc, #160]	@ (8008568 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80084ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80084d2:	d131      	bne.n	8008538 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80084d4:	4b24      	ldr	r3, [pc, #144]	@ (8008568 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80084d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80084da:	4a23      	ldr	r2, [pc, #140]	@ (8008568 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80084dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80084e0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80084e4:	4b20      	ldr	r3, [pc, #128]	@ (8008568 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80084ec:	4a1e      	ldr	r2, [pc, #120]	@ (8008568 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80084ee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80084f2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80084f4:	4b1d      	ldr	r3, [pc, #116]	@ (800856c <HAL_PWREx_ControlVoltageScaling+0x140>)
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	2232      	movs	r2, #50	@ 0x32
 80084fa:	fb02 f303 	mul.w	r3, r2, r3
 80084fe:	4a1c      	ldr	r2, [pc, #112]	@ (8008570 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8008500:	fba2 2303 	umull	r2, r3, r2, r3
 8008504:	0c9b      	lsrs	r3, r3, #18
 8008506:	3301      	adds	r3, #1
 8008508:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800850a:	e002      	b.n	8008512 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	3b01      	subs	r3, #1
 8008510:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008512:	4b15      	ldr	r3, [pc, #84]	@ (8008568 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008514:	695b      	ldr	r3, [r3, #20]
 8008516:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800851a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800851e:	d102      	bne.n	8008526 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	2b00      	cmp	r3, #0
 8008524:	d1f2      	bne.n	800850c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008526:	4b10      	ldr	r3, [pc, #64]	@ (8008568 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008528:	695b      	ldr	r3, [r3, #20]
 800852a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800852e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008532:	d112      	bne.n	800855a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8008534:	2303      	movs	r3, #3
 8008536:	e011      	b.n	800855c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008538:	4b0b      	ldr	r3, [pc, #44]	@ (8008568 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800853a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800853e:	4a0a      	ldr	r2, [pc, #40]	@ (8008568 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008540:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008544:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8008548:	e007      	b.n	800855a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800854a:	4b07      	ldr	r3, [pc, #28]	@ (8008568 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8008552:	4a05      	ldr	r2, [pc, #20]	@ (8008568 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008554:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8008558:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800855a:	2300      	movs	r3, #0
}
 800855c:	4618      	mov	r0, r3
 800855e:	3714      	adds	r7, #20
 8008560:	46bd      	mov	sp, r7
 8008562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008566:	4770      	bx	lr
 8008568:	40007000 	.word	0x40007000
 800856c:	20000264 	.word	0x20000264
 8008570:	431bde83 	.word	0x431bde83

08008574 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8008574:	b480      	push	{r7}
 8008576:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8008578:	4b05      	ldr	r3, [pc, #20]	@ (8008590 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800857a:	689b      	ldr	r3, [r3, #8]
 800857c:	4a04      	ldr	r2, [pc, #16]	@ (8008590 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800857e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008582:	6093      	str	r3, [r2, #8]
}
 8008584:	bf00      	nop
 8008586:	46bd      	mov	sp, r7
 8008588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800858c:	4770      	bx	lr
 800858e:	bf00      	nop
 8008590:	40007000 	.word	0x40007000

08008594 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008594:	b580      	push	{r7, lr}
 8008596:	b088      	sub	sp, #32
 8008598:	af00      	add	r7, sp, #0
 800859a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d101      	bne.n	80085a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80085a2:	2301      	movs	r3, #1
 80085a4:	e2fe      	b.n	8008ba4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	f003 0301 	and.w	r3, r3, #1
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d075      	beq.n	800869e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80085b2:	4b97      	ldr	r3, [pc, #604]	@ (8008810 <HAL_RCC_OscConfig+0x27c>)
 80085b4:	689b      	ldr	r3, [r3, #8]
 80085b6:	f003 030c 	and.w	r3, r3, #12
 80085ba:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80085bc:	4b94      	ldr	r3, [pc, #592]	@ (8008810 <HAL_RCC_OscConfig+0x27c>)
 80085be:	68db      	ldr	r3, [r3, #12]
 80085c0:	f003 0303 	and.w	r3, r3, #3
 80085c4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80085c6:	69bb      	ldr	r3, [r7, #24]
 80085c8:	2b0c      	cmp	r3, #12
 80085ca:	d102      	bne.n	80085d2 <HAL_RCC_OscConfig+0x3e>
 80085cc:	697b      	ldr	r3, [r7, #20]
 80085ce:	2b03      	cmp	r3, #3
 80085d0:	d002      	beq.n	80085d8 <HAL_RCC_OscConfig+0x44>
 80085d2:	69bb      	ldr	r3, [r7, #24]
 80085d4:	2b08      	cmp	r3, #8
 80085d6:	d10b      	bne.n	80085f0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80085d8:	4b8d      	ldr	r3, [pc, #564]	@ (8008810 <HAL_RCC_OscConfig+0x27c>)
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d05b      	beq.n	800869c <HAL_RCC_OscConfig+0x108>
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	685b      	ldr	r3, [r3, #4]
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d157      	bne.n	800869c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80085ec:	2301      	movs	r3, #1
 80085ee:	e2d9      	b.n	8008ba4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	685b      	ldr	r3, [r3, #4]
 80085f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80085f8:	d106      	bne.n	8008608 <HAL_RCC_OscConfig+0x74>
 80085fa:	4b85      	ldr	r3, [pc, #532]	@ (8008810 <HAL_RCC_OscConfig+0x27c>)
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	4a84      	ldr	r2, [pc, #528]	@ (8008810 <HAL_RCC_OscConfig+0x27c>)
 8008600:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008604:	6013      	str	r3, [r2, #0]
 8008606:	e01d      	b.n	8008644 <HAL_RCC_OscConfig+0xb0>
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	685b      	ldr	r3, [r3, #4]
 800860c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008610:	d10c      	bne.n	800862c <HAL_RCC_OscConfig+0x98>
 8008612:	4b7f      	ldr	r3, [pc, #508]	@ (8008810 <HAL_RCC_OscConfig+0x27c>)
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	4a7e      	ldr	r2, [pc, #504]	@ (8008810 <HAL_RCC_OscConfig+0x27c>)
 8008618:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800861c:	6013      	str	r3, [r2, #0]
 800861e:	4b7c      	ldr	r3, [pc, #496]	@ (8008810 <HAL_RCC_OscConfig+0x27c>)
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	4a7b      	ldr	r2, [pc, #492]	@ (8008810 <HAL_RCC_OscConfig+0x27c>)
 8008624:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008628:	6013      	str	r3, [r2, #0]
 800862a:	e00b      	b.n	8008644 <HAL_RCC_OscConfig+0xb0>
 800862c:	4b78      	ldr	r3, [pc, #480]	@ (8008810 <HAL_RCC_OscConfig+0x27c>)
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	4a77      	ldr	r2, [pc, #476]	@ (8008810 <HAL_RCC_OscConfig+0x27c>)
 8008632:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008636:	6013      	str	r3, [r2, #0]
 8008638:	4b75      	ldr	r3, [pc, #468]	@ (8008810 <HAL_RCC_OscConfig+0x27c>)
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	4a74      	ldr	r2, [pc, #464]	@ (8008810 <HAL_RCC_OscConfig+0x27c>)
 800863e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008642:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	685b      	ldr	r3, [r3, #4]
 8008648:	2b00      	cmp	r3, #0
 800864a:	d013      	beq.n	8008674 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800864c:	f7fd fe24 	bl	8006298 <HAL_GetTick>
 8008650:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008652:	e008      	b.n	8008666 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008654:	f7fd fe20 	bl	8006298 <HAL_GetTick>
 8008658:	4602      	mov	r2, r0
 800865a:	693b      	ldr	r3, [r7, #16]
 800865c:	1ad3      	subs	r3, r2, r3
 800865e:	2b64      	cmp	r3, #100	@ 0x64
 8008660:	d901      	bls.n	8008666 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008662:	2303      	movs	r3, #3
 8008664:	e29e      	b.n	8008ba4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008666:	4b6a      	ldr	r3, [pc, #424]	@ (8008810 <HAL_RCC_OscConfig+0x27c>)
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800866e:	2b00      	cmp	r3, #0
 8008670:	d0f0      	beq.n	8008654 <HAL_RCC_OscConfig+0xc0>
 8008672:	e014      	b.n	800869e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008674:	f7fd fe10 	bl	8006298 <HAL_GetTick>
 8008678:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800867a:	e008      	b.n	800868e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800867c:	f7fd fe0c 	bl	8006298 <HAL_GetTick>
 8008680:	4602      	mov	r2, r0
 8008682:	693b      	ldr	r3, [r7, #16]
 8008684:	1ad3      	subs	r3, r2, r3
 8008686:	2b64      	cmp	r3, #100	@ 0x64
 8008688:	d901      	bls.n	800868e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800868a:	2303      	movs	r3, #3
 800868c:	e28a      	b.n	8008ba4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800868e:	4b60      	ldr	r3, [pc, #384]	@ (8008810 <HAL_RCC_OscConfig+0x27c>)
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008696:	2b00      	cmp	r3, #0
 8008698:	d1f0      	bne.n	800867c <HAL_RCC_OscConfig+0xe8>
 800869a:	e000      	b.n	800869e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800869c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	f003 0302 	and.w	r3, r3, #2
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d075      	beq.n	8008796 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80086aa:	4b59      	ldr	r3, [pc, #356]	@ (8008810 <HAL_RCC_OscConfig+0x27c>)
 80086ac:	689b      	ldr	r3, [r3, #8]
 80086ae:	f003 030c 	and.w	r3, r3, #12
 80086b2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80086b4:	4b56      	ldr	r3, [pc, #344]	@ (8008810 <HAL_RCC_OscConfig+0x27c>)
 80086b6:	68db      	ldr	r3, [r3, #12]
 80086b8:	f003 0303 	and.w	r3, r3, #3
 80086bc:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80086be:	69bb      	ldr	r3, [r7, #24]
 80086c0:	2b0c      	cmp	r3, #12
 80086c2:	d102      	bne.n	80086ca <HAL_RCC_OscConfig+0x136>
 80086c4:	697b      	ldr	r3, [r7, #20]
 80086c6:	2b02      	cmp	r3, #2
 80086c8:	d002      	beq.n	80086d0 <HAL_RCC_OscConfig+0x13c>
 80086ca:	69bb      	ldr	r3, [r7, #24]
 80086cc:	2b04      	cmp	r3, #4
 80086ce:	d11f      	bne.n	8008710 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80086d0:	4b4f      	ldr	r3, [pc, #316]	@ (8008810 <HAL_RCC_OscConfig+0x27c>)
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d005      	beq.n	80086e8 <HAL_RCC_OscConfig+0x154>
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	68db      	ldr	r3, [r3, #12]
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d101      	bne.n	80086e8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80086e4:	2301      	movs	r3, #1
 80086e6:	e25d      	b.n	8008ba4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80086e8:	4b49      	ldr	r3, [pc, #292]	@ (8008810 <HAL_RCC_OscConfig+0x27c>)
 80086ea:	685b      	ldr	r3, [r3, #4]
 80086ec:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	691b      	ldr	r3, [r3, #16]
 80086f4:	061b      	lsls	r3, r3, #24
 80086f6:	4946      	ldr	r1, [pc, #280]	@ (8008810 <HAL_RCC_OscConfig+0x27c>)
 80086f8:	4313      	orrs	r3, r2
 80086fa:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80086fc:	4b45      	ldr	r3, [pc, #276]	@ (8008814 <HAL_RCC_OscConfig+0x280>)
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	4618      	mov	r0, r3
 8008702:	f7fd fd7d 	bl	8006200 <HAL_InitTick>
 8008706:	4603      	mov	r3, r0
 8008708:	2b00      	cmp	r3, #0
 800870a:	d043      	beq.n	8008794 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800870c:	2301      	movs	r3, #1
 800870e:	e249      	b.n	8008ba4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	68db      	ldr	r3, [r3, #12]
 8008714:	2b00      	cmp	r3, #0
 8008716:	d023      	beq.n	8008760 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008718:	4b3d      	ldr	r3, [pc, #244]	@ (8008810 <HAL_RCC_OscConfig+0x27c>)
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	4a3c      	ldr	r2, [pc, #240]	@ (8008810 <HAL_RCC_OscConfig+0x27c>)
 800871e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008722:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008724:	f7fd fdb8 	bl	8006298 <HAL_GetTick>
 8008728:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800872a:	e008      	b.n	800873e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800872c:	f7fd fdb4 	bl	8006298 <HAL_GetTick>
 8008730:	4602      	mov	r2, r0
 8008732:	693b      	ldr	r3, [r7, #16]
 8008734:	1ad3      	subs	r3, r2, r3
 8008736:	2b02      	cmp	r3, #2
 8008738:	d901      	bls.n	800873e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800873a:	2303      	movs	r3, #3
 800873c:	e232      	b.n	8008ba4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800873e:	4b34      	ldr	r3, [pc, #208]	@ (8008810 <HAL_RCC_OscConfig+0x27c>)
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008746:	2b00      	cmp	r3, #0
 8008748:	d0f0      	beq.n	800872c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800874a:	4b31      	ldr	r3, [pc, #196]	@ (8008810 <HAL_RCC_OscConfig+0x27c>)
 800874c:	685b      	ldr	r3, [r3, #4]
 800874e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	691b      	ldr	r3, [r3, #16]
 8008756:	061b      	lsls	r3, r3, #24
 8008758:	492d      	ldr	r1, [pc, #180]	@ (8008810 <HAL_RCC_OscConfig+0x27c>)
 800875a:	4313      	orrs	r3, r2
 800875c:	604b      	str	r3, [r1, #4]
 800875e:	e01a      	b.n	8008796 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008760:	4b2b      	ldr	r3, [pc, #172]	@ (8008810 <HAL_RCC_OscConfig+0x27c>)
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	4a2a      	ldr	r2, [pc, #168]	@ (8008810 <HAL_RCC_OscConfig+0x27c>)
 8008766:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800876a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800876c:	f7fd fd94 	bl	8006298 <HAL_GetTick>
 8008770:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008772:	e008      	b.n	8008786 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008774:	f7fd fd90 	bl	8006298 <HAL_GetTick>
 8008778:	4602      	mov	r2, r0
 800877a:	693b      	ldr	r3, [r7, #16]
 800877c:	1ad3      	subs	r3, r2, r3
 800877e:	2b02      	cmp	r3, #2
 8008780:	d901      	bls.n	8008786 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8008782:	2303      	movs	r3, #3
 8008784:	e20e      	b.n	8008ba4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008786:	4b22      	ldr	r3, [pc, #136]	@ (8008810 <HAL_RCC_OscConfig+0x27c>)
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800878e:	2b00      	cmp	r3, #0
 8008790:	d1f0      	bne.n	8008774 <HAL_RCC_OscConfig+0x1e0>
 8008792:	e000      	b.n	8008796 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008794:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	f003 0308 	and.w	r3, r3, #8
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d041      	beq.n	8008826 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	695b      	ldr	r3, [r3, #20]
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d01c      	beq.n	80087e4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80087aa:	4b19      	ldr	r3, [pc, #100]	@ (8008810 <HAL_RCC_OscConfig+0x27c>)
 80087ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80087b0:	4a17      	ldr	r2, [pc, #92]	@ (8008810 <HAL_RCC_OscConfig+0x27c>)
 80087b2:	f043 0301 	orr.w	r3, r3, #1
 80087b6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80087ba:	f7fd fd6d 	bl	8006298 <HAL_GetTick>
 80087be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80087c0:	e008      	b.n	80087d4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80087c2:	f7fd fd69 	bl	8006298 <HAL_GetTick>
 80087c6:	4602      	mov	r2, r0
 80087c8:	693b      	ldr	r3, [r7, #16]
 80087ca:	1ad3      	subs	r3, r2, r3
 80087cc:	2b02      	cmp	r3, #2
 80087ce:	d901      	bls.n	80087d4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80087d0:	2303      	movs	r3, #3
 80087d2:	e1e7      	b.n	8008ba4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80087d4:	4b0e      	ldr	r3, [pc, #56]	@ (8008810 <HAL_RCC_OscConfig+0x27c>)
 80087d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80087da:	f003 0302 	and.w	r3, r3, #2
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d0ef      	beq.n	80087c2 <HAL_RCC_OscConfig+0x22e>
 80087e2:	e020      	b.n	8008826 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80087e4:	4b0a      	ldr	r3, [pc, #40]	@ (8008810 <HAL_RCC_OscConfig+0x27c>)
 80087e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80087ea:	4a09      	ldr	r2, [pc, #36]	@ (8008810 <HAL_RCC_OscConfig+0x27c>)
 80087ec:	f023 0301 	bic.w	r3, r3, #1
 80087f0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80087f4:	f7fd fd50 	bl	8006298 <HAL_GetTick>
 80087f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80087fa:	e00d      	b.n	8008818 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80087fc:	f7fd fd4c 	bl	8006298 <HAL_GetTick>
 8008800:	4602      	mov	r2, r0
 8008802:	693b      	ldr	r3, [r7, #16]
 8008804:	1ad3      	subs	r3, r2, r3
 8008806:	2b02      	cmp	r3, #2
 8008808:	d906      	bls.n	8008818 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800880a:	2303      	movs	r3, #3
 800880c:	e1ca      	b.n	8008ba4 <HAL_RCC_OscConfig+0x610>
 800880e:	bf00      	nop
 8008810:	40021000 	.word	0x40021000
 8008814:	20000268 	.word	0x20000268
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008818:	4b8c      	ldr	r3, [pc, #560]	@ (8008a4c <HAL_RCC_OscConfig+0x4b8>)
 800881a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800881e:	f003 0302 	and.w	r3, r3, #2
 8008822:	2b00      	cmp	r3, #0
 8008824:	d1ea      	bne.n	80087fc <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	f003 0304 	and.w	r3, r3, #4
 800882e:	2b00      	cmp	r3, #0
 8008830:	f000 80a6 	beq.w	8008980 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008834:	2300      	movs	r3, #0
 8008836:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8008838:	4b84      	ldr	r3, [pc, #528]	@ (8008a4c <HAL_RCC_OscConfig+0x4b8>)
 800883a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800883c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008840:	2b00      	cmp	r3, #0
 8008842:	d101      	bne.n	8008848 <HAL_RCC_OscConfig+0x2b4>
 8008844:	2301      	movs	r3, #1
 8008846:	e000      	b.n	800884a <HAL_RCC_OscConfig+0x2b6>
 8008848:	2300      	movs	r3, #0
 800884a:	2b00      	cmp	r3, #0
 800884c:	d00d      	beq.n	800886a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800884e:	4b7f      	ldr	r3, [pc, #508]	@ (8008a4c <HAL_RCC_OscConfig+0x4b8>)
 8008850:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008852:	4a7e      	ldr	r2, [pc, #504]	@ (8008a4c <HAL_RCC_OscConfig+0x4b8>)
 8008854:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008858:	6593      	str	r3, [r2, #88]	@ 0x58
 800885a:	4b7c      	ldr	r3, [pc, #496]	@ (8008a4c <HAL_RCC_OscConfig+0x4b8>)
 800885c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800885e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008862:	60fb      	str	r3, [r7, #12]
 8008864:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8008866:	2301      	movs	r3, #1
 8008868:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800886a:	4b79      	ldr	r3, [pc, #484]	@ (8008a50 <HAL_RCC_OscConfig+0x4bc>)
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008872:	2b00      	cmp	r3, #0
 8008874:	d118      	bne.n	80088a8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008876:	4b76      	ldr	r3, [pc, #472]	@ (8008a50 <HAL_RCC_OscConfig+0x4bc>)
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	4a75      	ldr	r2, [pc, #468]	@ (8008a50 <HAL_RCC_OscConfig+0x4bc>)
 800887c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008880:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008882:	f7fd fd09 	bl	8006298 <HAL_GetTick>
 8008886:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008888:	e008      	b.n	800889c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800888a:	f7fd fd05 	bl	8006298 <HAL_GetTick>
 800888e:	4602      	mov	r2, r0
 8008890:	693b      	ldr	r3, [r7, #16]
 8008892:	1ad3      	subs	r3, r2, r3
 8008894:	2b02      	cmp	r3, #2
 8008896:	d901      	bls.n	800889c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8008898:	2303      	movs	r3, #3
 800889a:	e183      	b.n	8008ba4 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800889c:	4b6c      	ldr	r3, [pc, #432]	@ (8008a50 <HAL_RCC_OscConfig+0x4bc>)
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d0f0      	beq.n	800888a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	689b      	ldr	r3, [r3, #8]
 80088ac:	2b01      	cmp	r3, #1
 80088ae:	d108      	bne.n	80088c2 <HAL_RCC_OscConfig+0x32e>
 80088b0:	4b66      	ldr	r3, [pc, #408]	@ (8008a4c <HAL_RCC_OscConfig+0x4b8>)
 80088b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80088b6:	4a65      	ldr	r2, [pc, #404]	@ (8008a4c <HAL_RCC_OscConfig+0x4b8>)
 80088b8:	f043 0301 	orr.w	r3, r3, #1
 80088bc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80088c0:	e024      	b.n	800890c <HAL_RCC_OscConfig+0x378>
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	689b      	ldr	r3, [r3, #8]
 80088c6:	2b05      	cmp	r3, #5
 80088c8:	d110      	bne.n	80088ec <HAL_RCC_OscConfig+0x358>
 80088ca:	4b60      	ldr	r3, [pc, #384]	@ (8008a4c <HAL_RCC_OscConfig+0x4b8>)
 80088cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80088d0:	4a5e      	ldr	r2, [pc, #376]	@ (8008a4c <HAL_RCC_OscConfig+0x4b8>)
 80088d2:	f043 0304 	orr.w	r3, r3, #4
 80088d6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80088da:	4b5c      	ldr	r3, [pc, #368]	@ (8008a4c <HAL_RCC_OscConfig+0x4b8>)
 80088dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80088e0:	4a5a      	ldr	r2, [pc, #360]	@ (8008a4c <HAL_RCC_OscConfig+0x4b8>)
 80088e2:	f043 0301 	orr.w	r3, r3, #1
 80088e6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80088ea:	e00f      	b.n	800890c <HAL_RCC_OscConfig+0x378>
 80088ec:	4b57      	ldr	r3, [pc, #348]	@ (8008a4c <HAL_RCC_OscConfig+0x4b8>)
 80088ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80088f2:	4a56      	ldr	r2, [pc, #344]	@ (8008a4c <HAL_RCC_OscConfig+0x4b8>)
 80088f4:	f023 0301 	bic.w	r3, r3, #1
 80088f8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80088fc:	4b53      	ldr	r3, [pc, #332]	@ (8008a4c <HAL_RCC_OscConfig+0x4b8>)
 80088fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008902:	4a52      	ldr	r2, [pc, #328]	@ (8008a4c <HAL_RCC_OscConfig+0x4b8>)
 8008904:	f023 0304 	bic.w	r3, r3, #4
 8008908:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	689b      	ldr	r3, [r3, #8]
 8008910:	2b00      	cmp	r3, #0
 8008912:	d016      	beq.n	8008942 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008914:	f7fd fcc0 	bl	8006298 <HAL_GetTick>
 8008918:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800891a:	e00a      	b.n	8008932 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800891c:	f7fd fcbc 	bl	8006298 <HAL_GetTick>
 8008920:	4602      	mov	r2, r0
 8008922:	693b      	ldr	r3, [r7, #16]
 8008924:	1ad3      	subs	r3, r2, r3
 8008926:	f241 3288 	movw	r2, #5000	@ 0x1388
 800892a:	4293      	cmp	r3, r2
 800892c:	d901      	bls.n	8008932 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800892e:	2303      	movs	r3, #3
 8008930:	e138      	b.n	8008ba4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008932:	4b46      	ldr	r3, [pc, #280]	@ (8008a4c <HAL_RCC_OscConfig+0x4b8>)
 8008934:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008938:	f003 0302 	and.w	r3, r3, #2
 800893c:	2b00      	cmp	r3, #0
 800893e:	d0ed      	beq.n	800891c <HAL_RCC_OscConfig+0x388>
 8008940:	e015      	b.n	800896e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008942:	f7fd fca9 	bl	8006298 <HAL_GetTick>
 8008946:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008948:	e00a      	b.n	8008960 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800894a:	f7fd fca5 	bl	8006298 <HAL_GetTick>
 800894e:	4602      	mov	r2, r0
 8008950:	693b      	ldr	r3, [r7, #16]
 8008952:	1ad3      	subs	r3, r2, r3
 8008954:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008958:	4293      	cmp	r3, r2
 800895a:	d901      	bls.n	8008960 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800895c:	2303      	movs	r3, #3
 800895e:	e121      	b.n	8008ba4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008960:	4b3a      	ldr	r3, [pc, #232]	@ (8008a4c <HAL_RCC_OscConfig+0x4b8>)
 8008962:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008966:	f003 0302 	and.w	r3, r3, #2
 800896a:	2b00      	cmp	r3, #0
 800896c:	d1ed      	bne.n	800894a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800896e:	7ffb      	ldrb	r3, [r7, #31]
 8008970:	2b01      	cmp	r3, #1
 8008972:	d105      	bne.n	8008980 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008974:	4b35      	ldr	r3, [pc, #212]	@ (8008a4c <HAL_RCC_OscConfig+0x4b8>)
 8008976:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008978:	4a34      	ldr	r2, [pc, #208]	@ (8008a4c <HAL_RCC_OscConfig+0x4b8>)
 800897a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800897e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	f003 0320 	and.w	r3, r3, #32
 8008988:	2b00      	cmp	r3, #0
 800898a:	d03c      	beq.n	8008a06 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	699b      	ldr	r3, [r3, #24]
 8008990:	2b00      	cmp	r3, #0
 8008992:	d01c      	beq.n	80089ce <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008994:	4b2d      	ldr	r3, [pc, #180]	@ (8008a4c <HAL_RCC_OscConfig+0x4b8>)
 8008996:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800899a:	4a2c      	ldr	r2, [pc, #176]	@ (8008a4c <HAL_RCC_OscConfig+0x4b8>)
 800899c:	f043 0301 	orr.w	r3, r3, #1
 80089a0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80089a4:	f7fd fc78 	bl	8006298 <HAL_GetTick>
 80089a8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80089aa:	e008      	b.n	80089be <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80089ac:	f7fd fc74 	bl	8006298 <HAL_GetTick>
 80089b0:	4602      	mov	r2, r0
 80089b2:	693b      	ldr	r3, [r7, #16]
 80089b4:	1ad3      	subs	r3, r2, r3
 80089b6:	2b02      	cmp	r3, #2
 80089b8:	d901      	bls.n	80089be <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80089ba:	2303      	movs	r3, #3
 80089bc:	e0f2      	b.n	8008ba4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80089be:	4b23      	ldr	r3, [pc, #140]	@ (8008a4c <HAL_RCC_OscConfig+0x4b8>)
 80089c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80089c4:	f003 0302 	and.w	r3, r3, #2
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d0ef      	beq.n	80089ac <HAL_RCC_OscConfig+0x418>
 80089cc:	e01b      	b.n	8008a06 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80089ce:	4b1f      	ldr	r3, [pc, #124]	@ (8008a4c <HAL_RCC_OscConfig+0x4b8>)
 80089d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80089d4:	4a1d      	ldr	r2, [pc, #116]	@ (8008a4c <HAL_RCC_OscConfig+0x4b8>)
 80089d6:	f023 0301 	bic.w	r3, r3, #1
 80089da:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80089de:	f7fd fc5b 	bl	8006298 <HAL_GetTick>
 80089e2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80089e4:	e008      	b.n	80089f8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80089e6:	f7fd fc57 	bl	8006298 <HAL_GetTick>
 80089ea:	4602      	mov	r2, r0
 80089ec:	693b      	ldr	r3, [r7, #16]
 80089ee:	1ad3      	subs	r3, r2, r3
 80089f0:	2b02      	cmp	r3, #2
 80089f2:	d901      	bls.n	80089f8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80089f4:	2303      	movs	r3, #3
 80089f6:	e0d5      	b.n	8008ba4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80089f8:	4b14      	ldr	r3, [pc, #80]	@ (8008a4c <HAL_RCC_OscConfig+0x4b8>)
 80089fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80089fe:	f003 0302 	and.w	r3, r3, #2
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d1ef      	bne.n	80089e6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	69db      	ldr	r3, [r3, #28]
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	f000 80c9 	beq.w	8008ba2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008a10:	4b0e      	ldr	r3, [pc, #56]	@ (8008a4c <HAL_RCC_OscConfig+0x4b8>)
 8008a12:	689b      	ldr	r3, [r3, #8]
 8008a14:	f003 030c 	and.w	r3, r3, #12
 8008a18:	2b0c      	cmp	r3, #12
 8008a1a:	f000 8083 	beq.w	8008b24 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	69db      	ldr	r3, [r3, #28]
 8008a22:	2b02      	cmp	r3, #2
 8008a24:	d15e      	bne.n	8008ae4 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008a26:	4b09      	ldr	r3, [pc, #36]	@ (8008a4c <HAL_RCC_OscConfig+0x4b8>)
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	4a08      	ldr	r2, [pc, #32]	@ (8008a4c <HAL_RCC_OscConfig+0x4b8>)
 8008a2c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008a30:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a32:	f7fd fc31 	bl	8006298 <HAL_GetTick>
 8008a36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008a38:	e00c      	b.n	8008a54 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008a3a:	f7fd fc2d 	bl	8006298 <HAL_GetTick>
 8008a3e:	4602      	mov	r2, r0
 8008a40:	693b      	ldr	r3, [r7, #16]
 8008a42:	1ad3      	subs	r3, r2, r3
 8008a44:	2b02      	cmp	r3, #2
 8008a46:	d905      	bls.n	8008a54 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8008a48:	2303      	movs	r3, #3
 8008a4a:	e0ab      	b.n	8008ba4 <HAL_RCC_OscConfig+0x610>
 8008a4c:	40021000 	.word	0x40021000
 8008a50:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008a54:	4b55      	ldr	r3, [pc, #340]	@ (8008bac <HAL_RCC_OscConfig+0x618>)
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d1ec      	bne.n	8008a3a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008a60:	4b52      	ldr	r3, [pc, #328]	@ (8008bac <HAL_RCC_OscConfig+0x618>)
 8008a62:	68da      	ldr	r2, [r3, #12]
 8008a64:	4b52      	ldr	r3, [pc, #328]	@ (8008bb0 <HAL_RCC_OscConfig+0x61c>)
 8008a66:	4013      	ands	r3, r2
 8008a68:	687a      	ldr	r2, [r7, #4]
 8008a6a:	6a11      	ldr	r1, [r2, #32]
 8008a6c:	687a      	ldr	r2, [r7, #4]
 8008a6e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8008a70:	3a01      	subs	r2, #1
 8008a72:	0112      	lsls	r2, r2, #4
 8008a74:	4311      	orrs	r1, r2
 8008a76:	687a      	ldr	r2, [r7, #4]
 8008a78:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8008a7a:	0212      	lsls	r2, r2, #8
 8008a7c:	4311      	orrs	r1, r2
 8008a7e:	687a      	ldr	r2, [r7, #4]
 8008a80:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8008a82:	0852      	lsrs	r2, r2, #1
 8008a84:	3a01      	subs	r2, #1
 8008a86:	0552      	lsls	r2, r2, #21
 8008a88:	4311      	orrs	r1, r2
 8008a8a:	687a      	ldr	r2, [r7, #4]
 8008a8c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8008a8e:	0852      	lsrs	r2, r2, #1
 8008a90:	3a01      	subs	r2, #1
 8008a92:	0652      	lsls	r2, r2, #25
 8008a94:	4311      	orrs	r1, r2
 8008a96:	687a      	ldr	r2, [r7, #4]
 8008a98:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8008a9a:	06d2      	lsls	r2, r2, #27
 8008a9c:	430a      	orrs	r2, r1
 8008a9e:	4943      	ldr	r1, [pc, #268]	@ (8008bac <HAL_RCC_OscConfig+0x618>)
 8008aa0:	4313      	orrs	r3, r2
 8008aa2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008aa4:	4b41      	ldr	r3, [pc, #260]	@ (8008bac <HAL_RCC_OscConfig+0x618>)
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	4a40      	ldr	r2, [pc, #256]	@ (8008bac <HAL_RCC_OscConfig+0x618>)
 8008aaa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008aae:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008ab0:	4b3e      	ldr	r3, [pc, #248]	@ (8008bac <HAL_RCC_OscConfig+0x618>)
 8008ab2:	68db      	ldr	r3, [r3, #12]
 8008ab4:	4a3d      	ldr	r2, [pc, #244]	@ (8008bac <HAL_RCC_OscConfig+0x618>)
 8008ab6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008aba:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008abc:	f7fd fbec 	bl	8006298 <HAL_GetTick>
 8008ac0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008ac2:	e008      	b.n	8008ad6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008ac4:	f7fd fbe8 	bl	8006298 <HAL_GetTick>
 8008ac8:	4602      	mov	r2, r0
 8008aca:	693b      	ldr	r3, [r7, #16]
 8008acc:	1ad3      	subs	r3, r2, r3
 8008ace:	2b02      	cmp	r3, #2
 8008ad0:	d901      	bls.n	8008ad6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8008ad2:	2303      	movs	r3, #3
 8008ad4:	e066      	b.n	8008ba4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008ad6:	4b35      	ldr	r3, [pc, #212]	@ (8008bac <HAL_RCC_OscConfig+0x618>)
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d0f0      	beq.n	8008ac4 <HAL_RCC_OscConfig+0x530>
 8008ae2:	e05e      	b.n	8008ba2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008ae4:	4b31      	ldr	r3, [pc, #196]	@ (8008bac <HAL_RCC_OscConfig+0x618>)
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	4a30      	ldr	r2, [pc, #192]	@ (8008bac <HAL_RCC_OscConfig+0x618>)
 8008aea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008aee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008af0:	f7fd fbd2 	bl	8006298 <HAL_GetTick>
 8008af4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008af6:	e008      	b.n	8008b0a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008af8:	f7fd fbce 	bl	8006298 <HAL_GetTick>
 8008afc:	4602      	mov	r2, r0
 8008afe:	693b      	ldr	r3, [r7, #16]
 8008b00:	1ad3      	subs	r3, r2, r3
 8008b02:	2b02      	cmp	r3, #2
 8008b04:	d901      	bls.n	8008b0a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8008b06:	2303      	movs	r3, #3
 8008b08:	e04c      	b.n	8008ba4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008b0a:	4b28      	ldr	r3, [pc, #160]	@ (8008bac <HAL_RCC_OscConfig+0x618>)
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d1f0      	bne.n	8008af8 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8008b16:	4b25      	ldr	r3, [pc, #148]	@ (8008bac <HAL_RCC_OscConfig+0x618>)
 8008b18:	68da      	ldr	r2, [r3, #12]
 8008b1a:	4924      	ldr	r1, [pc, #144]	@ (8008bac <HAL_RCC_OscConfig+0x618>)
 8008b1c:	4b25      	ldr	r3, [pc, #148]	@ (8008bb4 <HAL_RCC_OscConfig+0x620>)
 8008b1e:	4013      	ands	r3, r2
 8008b20:	60cb      	str	r3, [r1, #12]
 8008b22:	e03e      	b.n	8008ba2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	69db      	ldr	r3, [r3, #28]
 8008b28:	2b01      	cmp	r3, #1
 8008b2a:	d101      	bne.n	8008b30 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8008b2c:	2301      	movs	r3, #1
 8008b2e:	e039      	b.n	8008ba4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8008b30:	4b1e      	ldr	r3, [pc, #120]	@ (8008bac <HAL_RCC_OscConfig+0x618>)
 8008b32:	68db      	ldr	r3, [r3, #12]
 8008b34:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008b36:	697b      	ldr	r3, [r7, #20]
 8008b38:	f003 0203 	and.w	r2, r3, #3
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	6a1b      	ldr	r3, [r3, #32]
 8008b40:	429a      	cmp	r2, r3
 8008b42:	d12c      	bne.n	8008b9e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008b44:	697b      	ldr	r3, [r7, #20]
 8008b46:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b4e:	3b01      	subs	r3, #1
 8008b50:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008b52:	429a      	cmp	r2, r3
 8008b54:	d123      	bne.n	8008b9e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8008b56:	697b      	ldr	r3, [r7, #20]
 8008b58:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b60:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008b62:	429a      	cmp	r2, r3
 8008b64:	d11b      	bne.n	8008b9e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8008b66:	697b      	ldr	r3, [r7, #20]
 8008b68:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b70:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8008b72:	429a      	cmp	r2, r3
 8008b74:	d113      	bne.n	8008b9e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008b76:	697b      	ldr	r3, [r7, #20]
 8008b78:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b80:	085b      	lsrs	r3, r3, #1
 8008b82:	3b01      	subs	r3, #1
 8008b84:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8008b86:	429a      	cmp	r2, r3
 8008b88:	d109      	bne.n	8008b9e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8008b8a:	697b      	ldr	r3, [r7, #20]
 8008b8c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008b94:	085b      	lsrs	r3, r3, #1
 8008b96:	3b01      	subs	r3, #1
 8008b98:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008b9a:	429a      	cmp	r2, r3
 8008b9c:	d001      	beq.n	8008ba2 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8008b9e:	2301      	movs	r3, #1
 8008ba0:	e000      	b.n	8008ba4 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8008ba2:	2300      	movs	r3, #0
}
 8008ba4:	4618      	mov	r0, r3
 8008ba6:	3720      	adds	r7, #32
 8008ba8:	46bd      	mov	sp, r7
 8008baa:	bd80      	pop	{r7, pc}
 8008bac:	40021000 	.word	0x40021000
 8008bb0:	019f800c 	.word	0x019f800c
 8008bb4:	feeefffc 	.word	0xfeeefffc

08008bb8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008bb8:	b580      	push	{r7, lr}
 8008bba:	b086      	sub	sp, #24
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	6078      	str	r0, [r7, #4]
 8008bc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8008bc2:	2300      	movs	r3, #0
 8008bc4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d101      	bne.n	8008bd0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8008bcc:	2301      	movs	r3, #1
 8008bce:	e11e      	b.n	8008e0e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008bd0:	4b91      	ldr	r3, [pc, #580]	@ (8008e18 <HAL_RCC_ClockConfig+0x260>)
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	f003 030f 	and.w	r3, r3, #15
 8008bd8:	683a      	ldr	r2, [r7, #0]
 8008bda:	429a      	cmp	r2, r3
 8008bdc:	d910      	bls.n	8008c00 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008bde:	4b8e      	ldr	r3, [pc, #568]	@ (8008e18 <HAL_RCC_ClockConfig+0x260>)
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	f023 020f 	bic.w	r2, r3, #15
 8008be6:	498c      	ldr	r1, [pc, #560]	@ (8008e18 <HAL_RCC_ClockConfig+0x260>)
 8008be8:	683b      	ldr	r3, [r7, #0]
 8008bea:	4313      	orrs	r3, r2
 8008bec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008bee:	4b8a      	ldr	r3, [pc, #552]	@ (8008e18 <HAL_RCC_ClockConfig+0x260>)
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	f003 030f 	and.w	r3, r3, #15
 8008bf6:	683a      	ldr	r2, [r7, #0]
 8008bf8:	429a      	cmp	r2, r3
 8008bfa:	d001      	beq.n	8008c00 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8008bfc:	2301      	movs	r3, #1
 8008bfe:	e106      	b.n	8008e0e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	f003 0301 	and.w	r3, r3, #1
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d073      	beq.n	8008cf4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	685b      	ldr	r3, [r3, #4]
 8008c10:	2b03      	cmp	r3, #3
 8008c12:	d129      	bne.n	8008c68 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008c14:	4b81      	ldr	r3, [pc, #516]	@ (8008e1c <HAL_RCC_ClockConfig+0x264>)
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d101      	bne.n	8008c24 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8008c20:	2301      	movs	r3, #1
 8008c22:	e0f4      	b.n	8008e0e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8008c24:	f000 f99e 	bl	8008f64 <RCC_GetSysClockFreqFromPLLSource>
 8008c28:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8008c2a:	693b      	ldr	r3, [r7, #16]
 8008c2c:	4a7c      	ldr	r2, [pc, #496]	@ (8008e20 <HAL_RCC_ClockConfig+0x268>)
 8008c2e:	4293      	cmp	r3, r2
 8008c30:	d93f      	bls.n	8008cb2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8008c32:	4b7a      	ldr	r3, [pc, #488]	@ (8008e1c <HAL_RCC_ClockConfig+0x264>)
 8008c34:	689b      	ldr	r3, [r3, #8]
 8008c36:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d009      	beq.n	8008c52 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d033      	beq.n	8008cb2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d12f      	bne.n	8008cb2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8008c52:	4b72      	ldr	r3, [pc, #456]	@ (8008e1c <HAL_RCC_ClockConfig+0x264>)
 8008c54:	689b      	ldr	r3, [r3, #8]
 8008c56:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008c5a:	4a70      	ldr	r2, [pc, #448]	@ (8008e1c <HAL_RCC_ClockConfig+0x264>)
 8008c5c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008c60:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8008c62:	2380      	movs	r3, #128	@ 0x80
 8008c64:	617b      	str	r3, [r7, #20]
 8008c66:	e024      	b.n	8008cb2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	685b      	ldr	r3, [r3, #4]
 8008c6c:	2b02      	cmp	r3, #2
 8008c6e:	d107      	bne.n	8008c80 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008c70:	4b6a      	ldr	r3, [pc, #424]	@ (8008e1c <HAL_RCC_ClockConfig+0x264>)
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d109      	bne.n	8008c90 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8008c7c:	2301      	movs	r3, #1
 8008c7e:	e0c6      	b.n	8008e0e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008c80:	4b66      	ldr	r3, [pc, #408]	@ (8008e1c <HAL_RCC_ClockConfig+0x264>)
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d101      	bne.n	8008c90 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8008c8c:	2301      	movs	r3, #1
 8008c8e:	e0be      	b.n	8008e0e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8008c90:	f000 f8ce 	bl	8008e30 <HAL_RCC_GetSysClockFreq>
 8008c94:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8008c96:	693b      	ldr	r3, [r7, #16]
 8008c98:	4a61      	ldr	r2, [pc, #388]	@ (8008e20 <HAL_RCC_ClockConfig+0x268>)
 8008c9a:	4293      	cmp	r3, r2
 8008c9c:	d909      	bls.n	8008cb2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8008c9e:	4b5f      	ldr	r3, [pc, #380]	@ (8008e1c <HAL_RCC_ClockConfig+0x264>)
 8008ca0:	689b      	ldr	r3, [r3, #8]
 8008ca2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008ca6:	4a5d      	ldr	r2, [pc, #372]	@ (8008e1c <HAL_RCC_ClockConfig+0x264>)
 8008ca8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008cac:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8008cae:	2380      	movs	r3, #128	@ 0x80
 8008cb0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008cb2:	4b5a      	ldr	r3, [pc, #360]	@ (8008e1c <HAL_RCC_ClockConfig+0x264>)
 8008cb4:	689b      	ldr	r3, [r3, #8]
 8008cb6:	f023 0203 	bic.w	r2, r3, #3
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	685b      	ldr	r3, [r3, #4]
 8008cbe:	4957      	ldr	r1, [pc, #348]	@ (8008e1c <HAL_RCC_ClockConfig+0x264>)
 8008cc0:	4313      	orrs	r3, r2
 8008cc2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008cc4:	f7fd fae8 	bl	8006298 <HAL_GetTick>
 8008cc8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008cca:	e00a      	b.n	8008ce2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008ccc:	f7fd fae4 	bl	8006298 <HAL_GetTick>
 8008cd0:	4602      	mov	r2, r0
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	1ad3      	subs	r3, r2, r3
 8008cd6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008cda:	4293      	cmp	r3, r2
 8008cdc:	d901      	bls.n	8008ce2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8008cde:	2303      	movs	r3, #3
 8008ce0:	e095      	b.n	8008e0e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008ce2:	4b4e      	ldr	r3, [pc, #312]	@ (8008e1c <HAL_RCC_ClockConfig+0x264>)
 8008ce4:	689b      	ldr	r3, [r3, #8]
 8008ce6:	f003 020c 	and.w	r2, r3, #12
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	685b      	ldr	r3, [r3, #4]
 8008cee:	009b      	lsls	r3, r3, #2
 8008cf0:	429a      	cmp	r2, r3
 8008cf2:	d1eb      	bne.n	8008ccc <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	f003 0302 	and.w	r3, r3, #2
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d023      	beq.n	8008d48 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	f003 0304 	and.w	r3, r3, #4
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d005      	beq.n	8008d18 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008d0c:	4b43      	ldr	r3, [pc, #268]	@ (8008e1c <HAL_RCC_ClockConfig+0x264>)
 8008d0e:	689b      	ldr	r3, [r3, #8]
 8008d10:	4a42      	ldr	r2, [pc, #264]	@ (8008e1c <HAL_RCC_ClockConfig+0x264>)
 8008d12:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8008d16:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	f003 0308 	and.w	r3, r3, #8
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d007      	beq.n	8008d34 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8008d24:	4b3d      	ldr	r3, [pc, #244]	@ (8008e1c <HAL_RCC_ClockConfig+0x264>)
 8008d26:	689b      	ldr	r3, [r3, #8]
 8008d28:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8008d2c:	4a3b      	ldr	r2, [pc, #236]	@ (8008e1c <HAL_RCC_ClockConfig+0x264>)
 8008d2e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8008d32:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008d34:	4b39      	ldr	r3, [pc, #228]	@ (8008e1c <HAL_RCC_ClockConfig+0x264>)
 8008d36:	689b      	ldr	r3, [r3, #8]
 8008d38:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	689b      	ldr	r3, [r3, #8]
 8008d40:	4936      	ldr	r1, [pc, #216]	@ (8008e1c <HAL_RCC_ClockConfig+0x264>)
 8008d42:	4313      	orrs	r3, r2
 8008d44:	608b      	str	r3, [r1, #8]
 8008d46:	e008      	b.n	8008d5a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8008d48:	697b      	ldr	r3, [r7, #20]
 8008d4a:	2b80      	cmp	r3, #128	@ 0x80
 8008d4c:	d105      	bne.n	8008d5a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8008d4e:	4b33      	ldr	r3, [pc, #204]	@ (8008e1c <HAL_RCC_ClockConfig+0x264>)
 8008d50:	689b      	ldr	r3, [r3, #8]
 8008d52:	4a32      	ldr	r2, [pc, #200]	@ (8008e1c <HAL_RCC_ClockConfig+0x264>)
 8008d54:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008d58:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008d5a:	4b2f      	ldr	r3, [pc, #188]	@ (8008e18 <HAL_RCC_ClockConfig+0x260>)
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	f003 030f 	and.w	r3, r3, #15
 8008d62:	683a      	ldr	r2, [r7, #0]
 8008d64:	429a      	cmp	r2, r3
 8008d66:	d21d      	bcs.n	8008da4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008d68:	4b2b      	ldr	r3, [pc, #172]	@ (8008e18 <HAL_RCC_ClockConfig+0x260>)
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	f023 020f 	bic.w	r2, r3, #15
 8008d70:	4929      	ldr	r1, [pc, #164]	@ (8008e18 <HAL_RCC_ClockConfig+0x260>)
 8008d72:	683b      	ldr	r3, [r7, #0]
 8008d74:	4313      	orrs	r3, r2
 8008d76:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8008d78:	f7fd fa8e 	bl	8006298 <HAL_GetTick>
 8008d7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008d7e:	e00a      	b.n	8008d96 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008d80:	f7fd fa8a 	bl	8006298 <HAL_GetTick>
 8008d84:	4602      	mov	r2, r0
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	1ad3      	subs	r3, r2, r3
 8008d8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008d8e:	4293      	cmp	r3, r2
 8008d90:	d901      	bls.n	8008d96 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8008d92:	2303      	movs	r3, #3
 8008d94:	e03b      	b.n	8008e0e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008d96:	4b20      	ldr	r3, [pc, #128]	@ (8008e18 <HAL_RCC_ClockConfig+0x260>)
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	f003 030f 	and.w	r3, r3, #15
 8008d9e:	683a      	ldr	r2, [r7, #0]
 8008da0:	429a      	cmp	r2, r3
 8008da2:	d1ed      	bne.n	8008d80 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	f003 0304 	and.w	r3, r3, #4
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d008      	beq.n	8008dc2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008db0:	4b1a      	ldr	r3, [pc, #104]	@ (8008e1c <HAL_RCC_ClockConfig+0x264>)
 8008db2:	689b      	ldr	r3, [r3, #8]
 8008db4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	68db      	ldr	r3, [r3, #12]
 8008dbc:	4917      	ldr	r1, [pc, #92]	@ (8008e1c <HAL_RCC_ClockConfig+0x264>)
 8008dbe:	4313      	orrs	r3, r2
 8008dc0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	f003 0308 	and.w	r3, r3, #8
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d009      	beq.n	8008de2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008dce:	4b13      	ldr	r3, [pc, #76]	@ (8008e1c <HAL_RCC_ClockConfig+0x264>)
 8008dd0:	689b      	ldr	r3, [r3, #8]
 8008dd2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	691b      	ldr	r3, [r3, #16]
 8008dda:	00db      	lsls	r3, r3, #3
 8008ddc:	490f      	ldr	r1, [pc, #60]	@ (8008e1c <HAL_RCC_ClockConfig+0x264>)
 8008dde:	4313      	orrs	r3, r2
 8008de0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8008de2:	f000 f825 	bl	8008e30 <HAL_RCC_GetSysClockFreq>
 8008de6:	4602      	mov	r2, r0
 8008de8:	4b0c      	ldr	r3, [pc, #48]	@ (8008e1c <HAL_RCC_ClockConfig+0x264>)
 8008dea:	689b      	ldr	r3, [r3, #8]
 8008dec:	091b      	lsrs	r3, r3, #4
 8008dee:	f003 030f 	and.w	r3, r3, #15
 8008df2:	490c      	ldr	r1, [pc, #48]	@ (8008e24 <HAL_RCC_ClockConfig+0x26c>)
 8008df4:	5ccb      	ldrb	r3, [r1, r3]
 8008df6:	f003 031f 	and.w	r3, r3, #31
 8008dfa:	fa22 f303 	lsr.w	r3, r2, r3
 8008dfe:	4a0a      	ldr	r2, [pc, #40]	@ (8008e28 <HAL_RCC_ClockConfig+0x270>)
 8008e00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8008e02:	4b0a      	ldr	r3, [pc, #40]	@ (8008e2c <HAL_RCC_ClockConfig+0x274>)
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	4618      	mov	r0, r3
 8008e08:	f7fd f9fa 	bl	8006200 <HAL_InitTick>
 8008e0c:	4603      	mov	r3, r0
}
 8008e0e:	4618      	mov	r0, r3
 8008e10:	3718      	adds	r7, #24
 8008e12:	46bd      	mov	sp, r7
 8008e14:	bd80      	pop	{r7, pc}
 8008e16:	bf00      	nop
 8008e18:	40022000 	.word	0x40022000
 8008e1c:	40021000 	.word	0x40021000
 8008e20:	04c4b400 	.word	0x04c4b400
 8008e24:	08011348 	.word	0x08011348
 8008e28:	20000264 	.word	0x20000264
 8008e2c:	20000268 	.word	0x20000268

08008e30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008e30:	b480      	push	{r7}
 8008e32:	b087      	sub	sp, #28
 8008e34:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8008e36:	4b2c      	ldr	r3, [pc, #176]	@ (8008ee8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008e38:	689b      	ldr	r3, [r3, #8]
 8008e3a:	f003 030c 	and.w	r3, r3, #12
 8008e3e:	2b04      	cmp	r3, #4
 8008e40:	d102      	bne.n	8008e48 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8008e42:	4b2a      	ldr	r3, [pc, #168]	@ (8008eec <HAL_RCC_GetSysClockFreq+0xbc>)
 8008e44:	613b      	str	r3, [r7, #16]
 8008e46:	e047      	b.n	8008ed8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8008e48:	4b27      	ldr	r3, [pc, #156]	@ (8008ee8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008e4a:	689b      	ldr	r3, [r3, #8]
 8008e4c:	f003 030c 	and.w	r3, r3, #12
 8008e50:	2b08      	cmp	r3, #8
 8008e52:	d102      	bne.n	8008e5a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8008e54:	4b26      	ldr	r3, [pc, #152]	@ (8008ef0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8008e56:	613b      	str	r3, [r7, #16]
 8008e58:	e03e      	b.n	8008ed8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8008e5a:	4b23      	ldr	r3, [pc, #140]	@ (8008ee8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008e5c:	689b      	ldr	r3, [r3, #8]
 8008e5e:	f003 030c 	and.w	r3, r3, #12
 8008e62:	2b0c      	cmp	r3, #12
 8008e64:	d136      	bne.n	8008ed4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8008e66:	4b20      	ldr	r3, [pc, #128]	@ (8008ee8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008e68:	68db      	ldr	r3, [r3, #12]
 8008e6a:	f003 0303 	and.w	r3, r3, #3
 8008e6e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008e70:	4b1d      	ldr	r3, [pc, #116]	@ (8008ee8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008e72:	68db      	ldr	r3, [r3, #12]
 8008e74:	091b      	lsrs	r3, r3, #4
 8008e76:	f003 030f 	and.w	r3, r3, #15
 8008e7a:	3301      	adds	r3, #1
 8008e7c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	2b03      	cmp	r3, #3
 8008e82:	d10c      	bne.n	8008e9e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008e84:	4a1a      	ldr	r2, [pc, #104]	@ (8008ef0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8008e86:	68bb      	ldr	r3, [r7, #8]
 8008e88:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e8c:	4a16      	ldr	r2, [pc, #88]	@ (8008ee8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008e8e:	68d2      	ldr	r2, [r2, #12]
 8008e90:	0a12      	lsrs	r2, r2, #8
 8008e92:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8008e96:	fb02 f303 	mul.w	r3, r2, r3
 8008e9a:	617b      	str	r3, [r7, #20]
      break;
 8008e9c:	e00c      	b.n	8008eb8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008e9e:	4a13      	ldr	r2, [pc, #76]	@ (8008eec <HAL_RCC_GetSysClockFreq+0xbc>)
 8008ea0:	68bb      	ldr	r3, [r7, #8]
 8008ea2:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ea6:	4a10      	ldr	r2, [pc, #64]	@ (8008ee8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008ea8:	68d2      	ldr	r2, [r2, #12]
 8008eaa:	0a12      	lsrs	r2, r2, #8
 8008eac:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8008eb0:	fb02 f303 	mul.w	r3, r2, r3
 8008eb4:	617b      	str	r3, [r7, #20]
      break;
 8008eb6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8008eb8:	4b0b      	ldr	r3, [pc, #44]	@ (8008ee8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008eba:	68db      	ldr	r3, [r3, #12]
 8008ebc:	0e5b      	lsrs	r3, r3, #25
 8008ebe:	f003 0303 	and.w	r3, r3, #3
 8008ec2:	3301      	adds	r3, #1
 8008ec4:	005b      	lsls	r3, r3, #1
 8008ec6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8008ec8:	697a      	ldr	r2, [r7, #20]
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ed0:	613b      	str	r3, [r7, #16]
 8008ed2:	e001      	b.n	8008ed8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8008ed4:	2300      	movs	r3, #0
 8008ed6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8008ed8:	693b      	ldr	r3, [r7, #16]
}
 8008eda:	4618      	mov	r0, r3
 8008edc:	371c      	adds	r7, #28
 8008ede:	46bd      	mov	sp, r7
 8008ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee4:	4770      	bx	lr
 8008ee6:	bf00      	nop
 8008ee8:	40021000 	.word	0x40021000
 8008eec:	00f42400 	.word	0x00f42400
 8008ef0:	016e3600 	.word	0x016e3600

08008ef4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008ef4:	b480      	push	{r7}
 8008ef6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008ef8:	4b03      	ldr	r3, [pc, #12]	@ (8008f08 <HAL_RCC_GetHCLKFreq+0x14>)
 8008efa:	681b      	ldr	r3, [r3, #0]
}
 8008efc:	4618      	mov	r0, r3
 8008efe:	46bd      	mov	sp, r7
 8008f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f04:	4770      	bx	lr
 8008f06:	bf00      	nop
 8008f08:	20000264 	.word	0x20000264

08008f0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008f0c:	b580      	push	{r7, lr}
 8008f0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8008f10:	f7ff fff0 	bl	8008ef4 <HAL_RCC_GetHCLKFreq>
 8008f14:	4602      	mov	r2, r0
 8008f16:	4b06      	ldr	r3, [pc, #24]	@ (8008f30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008f18:	689b      	ldr	r3, [r3, #8]
 8008f1a:	0a1b      	lsrs	r3, r3, #8
 8008f1c:	f003 0307 	and.w	r3, r3, #7
 8008f20:	4904      	ldr	r1, [pc, #16]	@ (8008f34 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008f22:	5ccb      	ldrb	r3, [r1, r3]
 8008f24:	f003 031f 	and.w	r3, r3, #31
 8008f28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008f2c:	4618      	mov	r0, r3
 8008f2e:	bd80      	pop	{r7, pc}
 8008f30:	40021000 	.word	0x40021000
 8008f34:	08011358 	.word	0x08011358

08008f38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008f38:	b580      	push	{r7, lr}
 8008f3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8008f3c:	f7ff ffda 	bl	8008ef4 <HAL_RCC_GetHCLKFreq>
 8008f40:	4602      	mov	r2, r0
 8008f42:	4b06      	ldr	r3, [pc, #24]	@ (8008f5c <HAL_RCC_GetPCLK2Freq+0x24>)
 8008f44:	689b      	ldr	r3, [r3, #8]
 8008f46:	0adb      	lsrs	r3, r3, #11
 8008f48:	f003 0307 	and.w	r3, r3, #7
 8008f4c:	4904      	ldr	r1, [pc, #16]	@ (8008f60 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008f4e:	5ccb      	ldrb	r3, [r1, r3]
 8008f50:	f003 031f 	and.w	r3, r3, #31
 8008f54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008f58:	4618      	mov	r0, r3
 8008f5a:	bd80      	pop	{r7, pc}
 8008f5c:	40021000 	.word	0x40021000
 8008f60:	08011358 	.word	0x08011358

08008f64 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8008f64:	b480      	push	{r7}
 8008f66:	b087      	sub	sp, #28
 8008f68:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8008f6a:	4b1e      	ldr	r3, [pc, #120]	@ (8008fe4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008f6c:	68db      	ldr	r3, [r3, #12]
 8008f6e:	f003 0303 	and.w	r3, r3, #3
 8008f72:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008f74:	4b1b      	ldr	r3, [pc, #108]	@ (8008fe4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008f76:	68db      	ldr	r3, [r3, #12]
 8008f78:	091b      	lsrs	r3, r3, #4
 8008f7a:	f003 030f 	and.w	r3, r3, #15
 8008f7e:	3301      	adds	r3, #1
 8008f80:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8008f82:	693b      	ldr	r3, [r7, #16]
 8008f84:	2b03      	cmp	r3, #3
 8008f86:	d10c      	bne.n	8008fa2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008f88:	4a17      	ldr	r2, [pc, #92]	@ (8008fe8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f90:	4a14      	ldr	r2, [pc, #80]	@ (8008fe4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008f92:	68d2      	ldr	r2, [r2, #12]
 8008f94:	0a12      	lsrs	r2, r2, #8
 8008f96:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8008f9a:	fb02 f303 	mul.w	r3, r2, r3
 8008f9e:	617b      	str	r3, [r7, #20]
    break;
 8008fa0:	e00c      	b.n	8008fbc <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008fa2:	4a12      	ldr	r2, [pc, #72]	@ (8008fec <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	fbb2 f3f3 	udiv	r3, r2, r3
 8008faa:	4a0e      	ldr	r2, [pc, #56]	@ (8008fe4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008fac:	68d2      	ldr	r2, [r2, #12]
 8008fae:	0a12      	lsrs	r2, r2, #8
 8008fb0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8008fb4:	fb02 f303 	mul.w	r3, r2, r3
 8008fb8:	617b      	str	r3, [r7, #20]
    break;
 8008fba:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8008fbc:	4b09      	ldr	r3, [pc, #36]	@ (8008fe4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008fbe:	68db      	ldr	r3, [r3, #12]
 8008fc0:	0e5b      	lsrs	r3, r3, #25
 8008fc2:	f003 0303 	and.w	r3, r3, #3
 8008fc6:	3301      	adds	r3, #1
 8008fc8:	005b      	lsls	r3, r3, #1
 8008fca:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8008fcc:	697a      	ldr	r2, [r7, #20]
 8008fce:	68bb      	ldr	r3, [r7, #8]
 8008fd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8008fd4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8008fd6:	687b      	ldr	r3, [r7, #4]
}
 8008fd8:	4618      	mov	r0, r3
 8008fda:	371c      	adds	r7, #28
 8008fdc:	46bd      	mov	sp, r7
 8008fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe2:	4770      	bx	lr
 8008fe4:	40021000 	.word	0x40021000
 8008fe8:	016e3600 	.word	0x016e3600
 8008fec:	00f42400 	.word	0x00f42400

08008ff0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008ff0:	b580      	push	{r7, lr}
 8008ff2:	b086      	sub	sp, #24
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008ff8:	2300      	movs	r3, #0
 8008ffa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008ffc:	2300      	movs	r3, #0
 8008ffe:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8009008:	2b00      	cmp	r3, #0
 800900a:	f000 8098 	beq.w	800913e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800900e:	2300      	movs	r3, #0
 8009010:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009012:	4b43      	ldr	r3, [pc, #268]	@ (8009120 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009014:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009016:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800901a:	2b00      	cmp	r3, #0
 800901c:	d10d      	bne.n	800903a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800901e:	4b40      	ldr	r3, [pc, #256]	@ (8009120 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009020:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009022:	4a3f      	ldr	r2, [pc, #252]	@ (8009120 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009024:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009028:	6593      	str	r3, [r2, #88]	@ 0x58
 800902a:	4b3d      	ldr	r3, [pc, #244]	@ (8009120 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800902c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800902e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009032:	60bb      	str	r3, [r7, #8]
 8009034:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009036:	2301      	movs	r3, #1
 8009038:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800903a:	4b3a      	ldr	r3, [pc, #232]	@ (8009124 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	4a39      	ldr	r2, [pc, #228]	@ (8009124 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8009040:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009044:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009046:	f7fd f927 	bl	8006298 <HAL_GetTick>
 800904a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800904c:	e009      	b.n	8009062 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800904e:	f7fd f923 	bl	8006298 <HAL_GetTick>
 8009052:	4602      	mov	r2, r0
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	1ad3      	subs	r3, r2, r3
 8009058:	2b02      	cmp	r3, #2
 800905a:	d902      	bls.n	8009062 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800905c:	2303      	movs	r3, #3
 800905e:	74fb      	strb	r3, [r7, #19]
        break;
 8009060:	e005      	b.n	800906e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009062:	4b30      	ldr	r3, [pc, #192]	@ (8009124 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800906a:	2b00      	cmp	r3, #0
 800906c:	d0ef      	beq.n	800904e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800906e:	7cfb      	ldrb	r3, [r7, #19]
 8009070:	2b00      	cmp	r3, #0
 8009072:	d159      	bne.n	8009128 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8009074:	4b2a      	ldr	r3, [pc, #168]	@ (8009120 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009076:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800907a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800907e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8009080:	697b      	ldr	r3, [r7, #20]
 8009082:	2b00      	cmp	r3, #0
 8009084:	d01e      	beq.n	80090c4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800908a:	697a      	ldr	r2, [r7, #20]
 800908c:	429a      	cmp	r2, r3
 800908e:	d019      	beq.n	80090c4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8009090:	4b23      	ldr	r3, [pc, #140]	@ (8009120 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009092:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009096:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800909a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800909c:	4b20      	ldr	r3, [pc, #128]	@ (8009120 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800909e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80090a2:	4a1f      	ldr	r2, [pc, #124]	@ (8009120 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80090a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80090a8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80090ac:	4b1c      	ldr	r3, [pc, #112]	@ (8009120 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80090ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80090b2:	4a1b      	ldr	r2, [pc, #108]	@ (8009120 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80090b4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80090b8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80090bc:	4a18      	ldr	r2, [pc, #96]	@ (8009120 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80090be:	697b      	ldr	r3, [r7, #20]
 80090c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80090c4:	697b      	ldr	r3, [r7, #20]
 80090c6:	f003 0301 	and.w	r3, r3, #1
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d016      	beq.n	80090fc <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80090ce:	f7fd f8e3 	bl	8006298 <HAL_GetTick>
 80090d2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80090d4:	e00b      	b.n	80090ee <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80090d6:	f7fd f8df 	bl	8006298 <HAL_GetTick>
 80090da:	4602      	mov	r2, r0
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	1ad3      	subs	r3, r2, r3
 80090e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80090e4:	4293      	cmp	r3, r2
 80090e6:	d902      	bls.n	80090ee <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80090e8:	2303      	movs	r3, #3
 80090ea:	74fb      	strb	r3, [r7, #19]
            break;
 80090ec:	e006      	b.n	80090fc <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80090ee:	4b0c      	ldr	r3, [pc, #48]	@ (8009120 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80090f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80090f4:	f003 0302 	and.w	r3, r3, #2
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d0ec      	beq.n	80090d6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80090fc:	7cfb      	ldrb	r3, [r7, #19]
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d10b      	bne.n	800911a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009102:	4b07      	ldr	r3, [pc, #28]	@ (8009120 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009104:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009108:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009110:	4903      	ldr	r1, [pc, #12]	@ (8009120 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009112:	4313      	orrs	r3, r2
 8009114:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8009118:	e008      	b.n	800912c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800911a:	7cfb      	ldrb	r3, [r7, #19]
 800911c:	74bb      	strb	r3, [r7, #18]
 800911e:	e005      	b.n	800912c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8009120:	40021000 	.word	0x40021000
 8009124:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009128:	7cfb      	ldrb	r3, [r7, #19]
 800912a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800912c:	7c7b      	ldrb	r3, [r7, #17]
 800912e:	2b01      	cmp	r3, #1
 8009130:	d105      	bne.n	800913e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009132:	4ba7      	ldr	r3, [pc, #668]	@ (80093d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009134:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009136:	4aa6      	ldr	r2, [pc, #664]	@ (80093d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009138:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800913c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	f003 0301 	and.w	r3, r3, #1
 8009146:	2b00      	cmp	r3, #0
 8009148:	d00a      	beq.n	8009160 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800914a:	4ba1      	ldr	r3, [pc, #644]	@ (80093d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800914c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009150:	f023 0203 	bic.w	r2, r3, #3
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	685b      	ldr	r3, [r3, #4]
 8009158:	499d      	ldr	r1, [pc, #628]	@ (80093d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800915a:	4313      	orrs	r3, r2
 800915c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	f003 0302 	and.w	r3, r3, #2
 8009168:	2b00      	cmp	r3, #0
 800916a:	d00a      	beq.n	8009182 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800916c:	4b98      	ldr	r3, [pc, #608]	@ (80093d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800916e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009172:	f023 020c 	bic.w	r2, r3, #12
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	689b      	ldr	r3, [r3, #8]
 800917a:	4995      	ldr	r1, [pc, #596]	@ (80093d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800917c:	4313      	orrs	r3, r2
 800917e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	f003 0304 	and.w	r3, r3, #4
 800918a:	2b00      	cmp	r3, #0
 800918c:	d00a      	beq.n	80091a4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800918e:	4b90      	ldr	r3, [pc, #576]	@ (80093d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009190:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009194:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	68db      	ldr	r3, [r3, #12]
 800919c:	498c      	ldr	r1, [pc, #560]	@ (80093d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800919e:	4313      	orrs	r3, r2
 80091a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	f003 0308 	and.w	r3, r3, #8
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d00a      	beq.n	80091c6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80091b0:	4b87      	ldr	r3, [pc, #540]	@ (80093d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80091b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80091b6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	691b      	ldr	r3, [r3, #16]
 80091be:	4984      	ldr	r1, [pc, #528]	@ (80093d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80091c0:	4313      	orrs	r3, r2
 80091c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	f003 0310 	and.w	r3, r3, #16
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d00a      	beq.n	80091e8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80091d2:	4b7f      	ldr	r3, [pc, #508]	@ (80093d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80091d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80091d8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	695b      	ldr	r3, [r3, #20]
 80091e0:	497b      	ldr	r1, [pc, #492]	@ (80093d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80091e2:	4313      	orrs	r3, r2
 80091e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	f003 0320 	and.w	r3, r3, #32
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d00a      	beq.n	800920a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80091f4:	4b76      	ldr	r3, [pc, #472]	@ (80093d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80091f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80091fa:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	699b      	ldr	r3, [r3, #24]
 8009202:	4973      	ldr	r1, [pc, #460]	@ (80093d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009204:	4313      	orrs	r3, r2
 8009206:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009212:	2b00      	cmp	r3, #0
 8009214:	d00a      	beq.n	800922c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8009216:	4b6e      	ldr	r3, [pc, #440]	@ (80093d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009218:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800921c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	69db      	ldr	r3, [r3, #28]
 8009224:	496a      	ldr	r1, [pc, #424]	@ (80093d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009226:	4313      	orrs	r3, r2
 8009228:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009234:	2b00      	cmp	r3, #0
 8009236:	d00a      	beq.n	800924e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8009238:	4b65      	ldr	r3, [pc, #404]	@ (80093d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800923a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800923e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	6a1b      	ldr	r3, [r3, #32]
 8009246:	4962      	ldr	r1, [pc, #392]	@ (80093d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009248:	4313      	orrs	r3, r2
 800924a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009256:	2b00      	cmp	r3, #0
 8009258:	d00a      	beq.n	8009270 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800925a:	4b5d      	ldr	r3, [pc, #372]	@ (80093d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800925c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009260:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009268:	4959      	ldr	r1, [pc, #356]	@ (80093d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800926a:	4313      	orrs	r3, r2
 800926c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009278:	2b00      	cmp	r3, #0
 800927a:	d00a      	beq.n	8009292 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800927c:	4b54      	ldr	r3, [pc, #336]	@ (80093d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800927e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009282:	f023 0203 	bic.w	r2, r3, #3
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800928a:	4951      	ldr	r1, [pc, #324]	@ (80093d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800928c:	4313      	orrs	r3, r2
 800928e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800929a:	2b00      	cmp	r3, #0
 800929c:	d00a      	beq.n	80092b4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800929e:	4b4c      	ldr	r3, [pc, #304]	@ (80093d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80092a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80092a4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092ac:	4948      	ldr	r1, [pc, #288]	@ (80093d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80092ae:	4313      	orrs	r3, r2
 80092b0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d015      	beq.n	80092ec <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80092c0:	4b43      	ldr	r3, [pc, #268]	@ (80093d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80092c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80092c6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80092ce:	4940      	ldr	r1, [pc, #256]	@ (80093d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80092d0:	4313      	orrs	r3, r2
 80092d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80092da:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80092de:	d105      	bne.n	80092ec <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80092e0:	4b3b      	ldr	r3, [pc, #236]	@ (80093d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80092e2:	68db      	ldr	r3, [r3, #12]
 80092e4:	4a3a      	ldr	r2, [pc, #232]	@ (80093d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80092e6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80092ea:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d015      	beq.n	8009324 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80092f8:	4b35      	ldr	r3, [pc, #212]	@ (80093d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80092fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80092fe:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009306:	4932      	ldr	r1, [pc, #200]	@ (80093d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009308:	4313      	orrs	r3, r2
 800930a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009312:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009316:	d105      	bne.n	8009324 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009318:	4b2d      	ldr	r3, [pc, #180]	@ (80093d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800931a:	68db      	ldr	r3, [r3, #12]
 800931c:	4a2c      	ldr	r2, [pc, #176]	@ (80093d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800931e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009322:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800932c:	2b00      	cmp	r3, #0
 800932e:	d015      	beq.n	800935c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009330:	4b27      	ldr	r3, [pc, #156]	@ (80093d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009332:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009336:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800933e:	4924      	ldr	r1, [pc, #144]	@ (80093d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009340:	4313      	orrs	r3, r2
 8009342:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800934a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800934e:	d105      	bne.n	800935c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009350:	4b1f      	ldr	r3, [pc, #124]	@ (80093d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009352:	68db      	ldr	r3, [r3, #12]
 8009354:	4a1e      	ldr	r2, [pc, #120]	@ (80093d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009356:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800935a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009364:	2b00      	cmp	r3, #0
 8009366:	d015      	beq.n	8009394 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009368:	4b19      	ldr	r3, [pc, #100]	@ (80093d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800936a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800936e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009376:	4916      	ldr	r1, [pc, #88]	@ (80093d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009378:	4313      	orrs	r3, r2
 800937a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009382:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009386:	d105      	bne.n	8009394 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009388:	4b11      	ldr	r3, [pc, #68]	@ (80093d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800938a:	68db      	ldr	r3, [r3, #12]
 800938c:	4a10      	ldr	r2, [pc, #64]	@ (80093d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800938e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009392:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800939c:	2b00      	cmp	r3, #0
 800939e:	d019      	beq.n	80093d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80093a0:	4b0b      	ldr	r3, [pc, #44]	@ (80093d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80093a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80093a6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80093ae:	4908      	ldr	r1, [pc, #32]	@ (80093d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80093b0:	4313      	orrs	r3, r2
 80093b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80093ba:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80093be:	d109      	bne.n	80093d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80093c0:	4b03      	ldr	r3, [pc, #12]	@ (80093d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80093c2:	68db      	ldr	r3, [r3, #12]
 80093c4:	4a02      	ldr	r2, [pc, #8]	@ (80093d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80093c6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80093ca:	60d3      	str	r3, [r2, #12]
 80093cc:	e002      	b.n	80093d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80093ce:	bf00      	nop
 80093d0:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d015      	beq.n	800940c <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80093e0:	4b29      	ldr	r3, [pc, #164]	@ (8009488 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80093e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80093e6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80093ee:	4926      	ldr	r1, [pc, #152]	@ (8009488 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80093f0:	4313      	orrs	r3, r2
 80093f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80093fa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80093fe:	d105      	bne.n	800940c <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8009400:	4b21      	ldr	r3, [pc, #132]	@ (8009488 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009402:	68db      	ldr	r3, [r3, #12]
 8009404:	4a20      	ldr	r2, [pc, #128]	@ (8009488 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009406:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800940a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009414:	2b00      	cmp	r3, #0
 8009416:	d015      	beq.n	8009444 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8009418:	4b1b      	ldr	r3, [pc, #108]	@ (8009488 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800941a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800941e:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009426:	4918      	ldr	r1, [pc, #96]	@ (8009488 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009428:	4313      	orrs	r3, r2
 800942a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009432:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009436:	d105      	bne.n	8009444 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8009438:	4b13      	ldr	r3, [pc, #76]	@ (8009488 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800943a:	68db      	ldr	r3, [r3, #12]
 800943c:	4a12      	ldr	r2, [pc, #72]	@ (8009488 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800943e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009442:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800944c:	2b00      	cmp	r3, #0
 800944e:	d015      	beq.n	800947c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8009450:	4b0d      	ldr	r3, [pc, #52]	@ (8009488 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009452:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009456:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800945e:	490a      	ldr	r1, [pc, #40]	@ (8009488 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009460:	4313      	orrs	r3, r2
 8009462:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800946a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800946e:	d105      	bne.n	800947c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009470:	4b05      	ldr	r3, [pc, #20]	@ (8009488 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009472:	68db      	ldr	r3, [r3, #12]
 8009474:	4a04      	ldr	r2, [pc, #16]	@ (8009488 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009476:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800947a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800947c:	7cbb      	ldrb	r3, [r7, #18]
}
 800947e:	4618      	mov	r0, r3
 8009480:	3718      	adds	r7, #24
 8009482:	46bd      	mov	sp, r7
 8009484:	bd80      	pop	{r7, pc}
 8009486:	bf00      	nop
 8009488:	40021000 	.word	0x40021000

0800948c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800948c:	b580      	push	{r7, lr}
 800948e:	b084      	sub	sp, #16
 8009490:	af00      	add	r7, sp, #0
 8009492:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	2b00      	cmp	r3, #0
 8009498:	d101      	bne.n	800949e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800949a:	2301      	movs	r3, #1
 800949c:	e09d      	b.n	80095da <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d108      	bne.n	80094b8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	685b      	ldr	r3, [r3, #4]
 80094aa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80094ae:	d009      	beq.n	80094c4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	2200      	movs	r2, #0
 80094b4:	61da      	str	r2, [r3, #28]
 80094b6:	e005      	b.n	80094c4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	2200      	movs	r2, #0
 80094bc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	2200      	movs	r2, #0
 80094c2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	2200      	movs	r2, #0
 80094c8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80094d0:	b2db      	uxtb	r3, r3
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d106      	bne.n	80094e4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	2200      	movs	r2, #0
 80094da:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80094de:	6878      	ldr	r0, [r7, #4]
 80094e0:	f7fb ff9c 	bl	800541c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	2202      	movs	r2, #2
 80094e8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	681a      	ldr	r2, [r3, #0]
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80094fa:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	68db      	ldr	r3, [r3, #12]
 8009500:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8009504:	d902      	bls.n	800950c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8009506:	2300      	movs	r3, #0
 8009508:	60fb      	str	r3, [r7, #12]
 800950a:	e002      	b.n	8009512 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800950c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009510:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	68db      	ldr	r3, [r3, #12]
 8009516:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800951a:	d007      	beq.n	800952c <HAL_SPI_Init+0xa0>
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	68db      	ldr	r3, [r3, #12]
 8009520:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8009524:	d002      	beq.n	800952c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	2200      	movs	r2, #0
 800952a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	685b      	ldr	r3, [r3, #4]
 8009530:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	689b      	ldr	r3, [r3, #8]
 8009538:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800953c:	431a      	orrs	r2, r3
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	691b      	ldr	r3, [r3, #16]
 8009542:	f003 0302 	and.w	r3, r3, #2
 8009546:	431a      	orrs	r2, r3
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	695b      	ldr	r3, [r3, #20]
 800954c:	f003 0301 	and.w	r3, r3, #1
 8009550:	431a      	orrs	r2, r3
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	699b      	ldr	r3, [r3, #24]
 8009556:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800955a:	431a      	orrs	r2, r3
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	69db      	ldr	r3, [r3, #28]
 8009560:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009564:	431a      	orrs	r2, r3
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	6a1b      	ldr	r3, [r3, #32]
 800956a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800956e:	ea42 0103 	orr.w	r1, r2, r3
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009576:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	430a      	orrs	r2, r1
 8009580:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	699b      	ldr	r3, [r3, #24]
 8009586:	0c1b      	lsrs	r3, r3, #16
 8009588:	f003 0204 	and.w	r2, r3, #4
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009590:	f003 0310 	and.w	r3, r3, #16
 8009594:	431a      	orrs	r2, r3
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800959a:	f003 0308 	and.w	r3, r3, #8
 800959e:	431a      	orrs	r2, r3
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	68db      	ldr	r3, [r3, #12]
 80095a4:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80095a8:	ea42 0103 	orr.w	r1, r2, r3
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	430a      	orrs	r2, r1
 80095b8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	69da      	ldr	r2, [r3, #28]
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80095c8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	2200      	movs	r2, #0
 80095ce:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	2201      	movs	r2, #1
 80095d4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80095d8:	2300      	movs	r3, #0
}
 80095da:	4618      	mov	r0, r3
 80095dc:	3710      	adds	r7, #16
 80095de:	46bd      	mov	sp, r7
 80095e0:	bd80      	pop	{r7, pc}

080095e2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80095e2:	b580      	push	{r7, lr}
 80095e4:	b08a      	sub	sp, #40	@ 0x28
 80095e6:	af00      	add	r7, sp, #0
 80095e8:	60f8      	str	r0, [r7, #12]
 80095ea:	60b9      	str	r1, [r7, #8]
 80095ec:	607a      	str	r2, [r7, #4]
 80095ee:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80095f0:	2301      	movs	r3, #1
 80095f2:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80095f4:	f7fc fe50 	bl	8006298 <HAL_GetTick>
 80095f8:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8009600:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	685b      	ldr	r3, [r3, #4]
 8009606:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8009608:	887b      	ldrh	r3, [r7, #2]
 800960a:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 800960c:	887b      	ldrh	r3, [r7, #2]
 800960e:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8009610:	7ffb      	ldrb	r3, [r7, #31]
 8009612:	2b01      	cmp	r3, #1
 8009614:	d00c      	beq.n	8009630 <HAL_SPI_TransmitReceive+0x4e>
 8009616:	69bb      	ldr	r3, [r7, #24]
 8009618:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800961c:	d106      	bne.n	800962c <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	689b      	ldr	r3, [r3, #8]
 8009622:	2b00      	cmp	r3, #0
 8009624:	d102      	bne.n	800962c <HAL_SPI_TransmitReceive+0x4a>
 8009626:	7ffb      	ldrb	r3, [r7, #31]
 8009628:	2b04      	cmp	r3, #4
 800962a:	d001      	beq.n	8009630 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 800962c:	2302      	movs	r3, #2
 800962e:	e1f3      	b.n	8009a18 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009630:	68bb      	ldr	r3, [r7, #8]
 8009632:	2b00      	cmp	r3, #0
 8009634:	d005      	beq.n	8009642 <HAL_SPI_TransmitReceive+0x60>
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	2b00      	cmp	r3, #0
 800963a:	d002      	beq.n	8009642 <HAL_SPI_TransmitReceive+0x60>
 800963c:	887b      	ldrh	r3, [r7, #2]
 800963e:	2b00      	cmp	r3, #0
 8009640:	d101      	bne.n	8009646 <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 8009642:	2301      	movs	r3, #1
 8009644:	e1e8      	b.n	8009a18 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800964c:	2b01      	cmp	r3, #1
 800964e:	d101      	bne.n	8009654 <HAL_SPI_TransmitReceive+0x72>
 8009650:	2302      	movs	r3, #2
 8009652:	e1e1      	b.n	8009a18 <HAL_SPI_TransmitReceive+0x436>
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	2201      	movs	r2, #1
 8009658:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8009662:	b2db      	uxtb	r3, r3
 8009664:	2b04      	cmp	r3, #4
 8009666:	d003      	beq.n	8009670 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	2205      	movs	r2, #5
 800966c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	2200      	movs	r2, #0
 8009674:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	687a      	ldr	r2, [r7, #4]
 800967a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	887a      	ldrh	r2, [r7, #2]
 8009680:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	887a      	ldrh	r2, [r7, #2]
 8009688:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	68ba      	ldr	r2, [r7, #8]
 8009690:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	887a      	ldrh	r2, [r7, #2]
 8009696:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	887a      	ldrh	r2, [r7, #2]
 800969c:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	2200      	movs	r2, #0
 80096a2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	2200      	movs	r2, #0
 80096a8:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	68db      	ldr	r3, [r3, #12]
 80096ae:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80096b2:	d802      	bhi.n	80096ba <HAL_SPI_TransmitReceive+0xd8>
 80096b4:	8abb      	ldrh	r3, [r7, #20]
 80096b6:	2b01      	cmp	r3, #1
 80096b8:	d908      	bls.n	80096cc <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	685a      	ldr	r2, [r3, #4]
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80096c8:	605a      	str	r2, [r3, #4]
 80096ca:	e007      	b.n	80096dc <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	685a      	ldr	r2, [r3, #4]
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80096da:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80096e6:	2b40      	cmp	r3, #64	@ 0x40
 80096e8:	d007      	beq.n	80096fa <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	681a      	ldr	r2, [r3, #0]
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80096f8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	68db      	ldr	r3, [r3, #12]
 80096fe:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8009702:	f240 8083 	bls.w	800980c <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	685b      	ldr	r3, [r3, #4]
 800970a:	2b00      	cmp	r3, #0
 800970c:	d002      	beq.n	8009714 <HAL_SPI_TransmitReceive+0x132>
 800970e:	8afb      	ldrh	r3, [r7, #22]
 8009710:	2b01      	cmp	r3, #1
 8009712:	d16f      	bne.n	80097f4 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009718:	881a      	ldrh	r2, [r3, #0]
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009724:	1c9a      	adds	r2, r3, #2
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800972e:	b29b      	uxth	r3, r3
 8009730:	3b01      	subs	r3, #1
 8009732:	b29a      	uxth	r2, r3
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009738:	e05c      	b.n	80097f4 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	689b      	ldr	r3, [r3, #8]
 8009740:	f003 0302 	and.w	r3, r3, #2
 8009744:	2b02      	cmp	r3, #2
 8009746:	d11b      	bne.n	8009780 <HAL_SPI_TransmitReceive+0x19e>
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800974c:	b29b      	uxth	r3, r3
 800974e:	2b00      	cmp	r3, #0
 8009750:	d016      	beq.n	8009780 <HAL_SPI_TransmitReceive+0x19e>
 8009752:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009754:	2b01      	cmp	r3, #1
 8009756:	d113      	bne.n	8009780 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800975c:	881a      	ldrh	r2, [r3, #0]
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009768:	1c9a      	adds	r2, r3, #2
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009772:	b29b      	uxth	r3, r3
 8009774:	3b01      	subs	r3, #1
 8009776:	b29a      	uxth	r2, r3
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800977c:	2300      	movs	r3, #0
 800977e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	689b      	ldr	r3, [r3, #8]
 8009786:	f003 0301 	and.w	r3, r3, #1
 800978a:	2b01      	cmp	r3, #1
 800978c:	d11c      	bne.n	80097c8 <HAL_SPI_TransmitReceive+0x1e6>
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009794:	b29b      	uxth	r3, r3
 8009796:	2b00      	cmp	r3, #0
 8009798:	d016      	beq.n	80097c8 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	68da      	ldr	r2, [r3, #12]
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80097a4:	b292      	uxth	r2, r2
 80097a6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80097ac:	1c9a      	adds	r2, r3, #2
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80097b8:	b29b      	uxth	r3, r3
 80097ba:	3b01      	subs	r3, #1
 80097bc:	b29a      	uxth	r2, r3
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80097c4:	2301      	movs	r3, #1
 80097c6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80097c8:	f7fc fd66 	bl	8006298 <HAL_GetTick>
 80097cc:	4602      	mov	r2, r0
 80097ce:	6a3b      	ldr	r3, [r7, #32]
 80097d0:	1ad3      	subs	r3, r2, r3
 80097d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80097d4:	429a      	cmp	r2, r3
 80097d6:	d80d      	bhi.n	80097f4 <HAL_SPI_TransmitReceive+0x212>
 80097d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097de:	d009      	beq.n	80097f4 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	2201      	movs	r2, #1
 80097e4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	2200      	movs	r2, #0
 80097ec:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 80097f0:	2303      	movs	r3, #3
 80097f2:	e111      	b.n	8009a18 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80097f8:	b29b      	uxth	r3, r3
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d19d      	bne.n	800973a <HAL_SPI_TransmitReceive+0x158>
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009804:	b29b      	uxth	r3, r3
 8009806:	2b00      	cmp	r3, #0
 8009808:	d197      	bne.n	800973a <HAL_SPI_TransmitReceive+0x158>
 800980a:	e0e5      	b.n	80099d8 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	685b      	ldr	r3, [r3, #4]
 8009810:	2b00      	cmp	r3, #0
 8009812:	d003      	beq.n	800981c <HAL_SPI_TransmitReceive+0x23a>
 8009814:	8afb      	ldrh	r3, [r7, #22]
 8009816:	2b01      	cmp	r3, #1
 8009818:	f040 80d1 	bne.w	80099be <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009820:	b29b      	uxth	r3, r3
 8009822:	2b01      	cmp	r3, #1
 8009824:	d912      	bls.n	800984c <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800982a:	881a      	ldrh	r2, [r3, #0]
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009836:	1c9a      	adds	r2, r3, #2
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009840:	b29b      	uxth	r3, r3
 8009842:	3b02      	subs	r3, #2
 8009844:	b29a      	uxth	r2, r3
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800984a:	e0b8      	b.n	80099be <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	330c      	adds	r3, #12
 8009856:	7812      	ldrb	r2, [r2, #0]
 8009858:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800985e:	1c5a      	adds	r2, r3, #1
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009868:	b29b      	uxth	r3, r3
 800986a:	3b01      	subs	r3, #1
 800986c:	b29a      	uxth	r2, r3
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009872:	e0a4      	b.n	80099be <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	689b      	ldr	r3, [r3, #8]
 800987a:	f003 0302 	and.w	r3, r3, #2
 800987e:	2b02      	cmp	r3, #2
 8009880:	d134      	bne.n	80098ec <HAL_SPI_TransmitReceive+0x30a>
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009886:	b29b      	uxth	r3, r3
 8009888:	2b00      	cmp	r3, #0
 800988a:	d02f      	beq.n	80098ec <HAL_SPI_TransmitReceive+0x30a>
 800988c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800988e:	2b01      	cmp	r3, #1
 8009890:	d12c      	bne.n	80098ec <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009896:	b29b      	uxth	r3, r3
 8009898:	2b01      	cmp	r3, #1
 800989a:	d912      	bls.n	80098c2 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80098a0:	881a      	ldrh	r2, [r3, #0]
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80098ac:	1c9a      	adds	r2, r3, #2
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80098b6:	b29b      	uxth	r3, r3
 80098b8:	3b02      	subs	r3, #2
 80098ba:	b29a      	uxth	r2, r3
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80098c0:	e012      	b.n	80098e8 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	330c      	adds	r3, #12
 80098cc:	7812      	ldrb	r2, [r2, #0]
 80098ce:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80098d4:	1c5a      	adds	r2, r3, #1
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80098de:	b29b      	uxth	r3, r3
 80098e0:	3b01      	subs	r3, #1
 80098e2:	b29a      	uxth	r2, r3
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80098e8:	2300      	movs	r3, #0
 80098ea:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	689b      	ldr	r3, [r3, #8]
 80098f2:	f003 0301 	and.w	r3, r3, #1
 80098f6:	2b01      	cmp	r3, #1
 80098f8:	d148      	bne.n	800998c <HAL_SPI_TransmitReceive+0x3aa>
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009900:	b29b      	uxth	r3, r3
 8009902:	2b00      	cmp	r3, #0
 8009904:	d042      	beq.n	800998c <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800990c:	b29b      	uxth	r3, r3
 800990e:	2b01      	cmp	r3, #1
 8009910:	d923      	bls.n	800995a <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	68da      	ldr	r2, [r3, #12]
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800991c:	b292      	uxth	r2, r2
 800991e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009924:	1c9a      	adds	r2, r3, #2
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009930:	b29b      	uxth	r3, r3
 8009932:	3b02      	subs	r3, #2
 8009934:	b29a      	uxth	r2, r3
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009942:	b29b      	uxth	r3, r3
 8009944:	2b01      	cmp	r3, #1
 8009946:	d81f      	bhi.n	8009988 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	685a      	ldr	r2, [r3, #4]
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8009956:	605a      	str	r2, [r3, #4]
 8009958:	e016      	b.n	8009988 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	f103 020c 	add.w	r2, r3, #12
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009966:	7812      	ldrb	r2, [r2, #0]
 8009968:	b2d2      	uxtb	r2, r2
 800996a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009970:	1c5a      	adds	r2, r3, #1
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800997c:	b29b      	uxth	r3, r3
 800997e:	3b01      	subs	r3, #1
 8009980:	b29a      	uxth	r2, r3
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009988:	2301      	movs	r3, #1
 800998a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800998c:	f7fc fc84 	bl	8006298 <HAL_GetTick>
 8009990:	4602      	mov	r2, r0
 8009992:	6a3b      	ldr	r3, [r7, #32]
 8009994:	1ad3      	subs	r3, r2, r3
 8009996:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009998:	429a      	cmp	r2, r3
 800999a:	d803      	bhi.n	80099a4 <HAL_SPI_TransmitReceive+0x3c2>
 800999c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800999e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099a2:	d102      	bne.n	80099aa <HAL_SPI_TransmitReceive+0x3c8>
 80099a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d109      	bne.n	80099be <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	2201      	movs	r2, #1
 80099ae:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	2200      	movs	r2, #0
 80099b6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 80099ba:	2303      	movs	r3, #3
 80099bc:	e02c      	b.n	8009a18 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80099c2:	b29b      	uxth	r3, r3
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	f47f af55 	bne.w	8009874 <HAL_SPI_TransmitReceive+0x292>
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80099d0:	b29b      	uxth	r3, r3
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	f47f af4e 	bne.w	8009874 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80099d8:	6a3a      	ldr	r2, [r7, #32]
 80099da:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80099dc:	68f8      	ldr	r0, [r7, #12]
 80099de:	f000 f93d 	bl	8009c5c <SPI_EndRxTxTransaction>
 80099e2:	4603      	mov	r3, r0
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d008      	beq.n	80099fa <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	2220      	movs	r2, #32
 80099ec:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	2200      	movs	r2, #0
 80099f2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 80099f6:	2301      	movs	r3, #1
 80099f8:	e00e      	b.n	8009a18 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	2201      	movs	r2, #1
 80099fe:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	2200      	movs	r2, #0
 8009a06:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d001      	beq.n	8009a16 <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 8009a12:	2301      	movs	r3, #1
 8009a14:	e000      	b.n	8009a18 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 8009a16:	2300      	movs	r3, #0
  }
}
 8009a18:	4618      	mov	r0, r3
 8009a1a:	3728      	adds	r7, #40	@ 0x28
 8009a1c:	46bd      	mov	sp, r7
 8009a1e:	bd80      	pop	{r7, pc}

08009a20 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009a20:	b580      	push	{r7, lr}
 8009a22:	b088      	sub	sp, #32
 8009a24:	af00      	add	r7, sp, #0
 8009a26:	60f8      	str	r0, [r7, #12]
 8009a28:	60b9      	str	r1, [r7, #8]
 8009a2a:	603b      	str	r3, [r7, #0]
 8009a2c:	4613      	mov	r3, r2
 8009a2e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009a30:	f7fc fc32 	bl	8006298 <HAL_GetTick>
 8009a34:	4602      	mov	r2, r0
 8009a36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a38:	1a9b      	subs	r3, r3, r2
 8009a3a:	683a      	ldr	r2, [r7, #0]
 8009a3c:	4413      	add	r3, r2
 8009a3e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009a40:	f7fc fc2a 	bl	8006298 <HAL_GetTick>
 8009a44:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009a46:	4b39      	ldr	r3, [pc, #228]	@ (8009b2c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	015b      	lsls	r3, r3, #5
 8009a4c:	0d1b      	lsrs	r3, r3, #20
 8009a4e:	69fa      	ldr	r2, [r7, #28]
 8009a50:	fb02 f303 	mul.w	r3, r2, r3
 8009a54:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009a56:	e054      	b.n	8009b02 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009a58:	683b      	ldr	r3, [r7, #0]
 8009a5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a5e:	d050      	beq.n	8009b02 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009a60:	f7fc fc1a 	bl	8006298 <HAL_GetTick>
 8009a64:	4602      	mov	r2, r0
 8009a66:	69bb      	ldr	r3, [r7, #24]
 8009a68:	1ad3      	subs	r3, r2, r3
 8009a6a:	69fa      	ldr	r2, [r7, #28]
 8009a6c:	429a      	cmp	r2, r3
 8009a6e:	d902      	bls.n	8009a76 <SPI_WaitFlagStateUntilTimeout+0x56>
 8009a70:	69fb      	ldr	r3, [r7, #28]
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d13d      	bne.n	8009af2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	685a      	ldr	r2, [r3, #4]
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8009a84:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	685b      	ldr	r3, [r3, #4]
 8009a8a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009a8e:	d111      	bne.n	8009ab4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	689b      	ldr	r3, [r3, #8]
 8009a94:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009a98:	d004      	beq.n	8009aa4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	689b      	ldr	r3, [r3, #8]
 8009a9e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009aa2:	d107      	bne.n	8009ab4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	681a      	ldr	r2, [r3, #0]
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009ab2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ab8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009abc:	d10f      	bne.n	8009ade <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	681a      	ldr	r2, [r3, #0]
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009acc:	601a      	str	r2, [r3, #0]
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	681a      	ldr	r2, [r3, #0]
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009adc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	2201      	movs	r2, #1
 8009ae2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	2200      	movs	r2, #0
 8009aea:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8009aee:	2303      	movs	r3, #3
 8009af0:	e017      	b.n	8009b22 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009af2:	697b      	ldr	r3, [r7, #20]
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d101      	bne.n	8009afc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8009af8:	2300      	movs	r3, #0
 8009afa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009afc:	697b      	ldr	r3, [r7, #20]
 8009afe:	3b01      	subs	r3, #1
 8009b00:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	689a      	ldr	r2, [r3, #8]
 8009b08:	68bb      	ldr	r3, [r7, #8]
 8009b0a:	4013      	ands	r3, r2
 8009b0c:	68ba      	ldr	r2, [r7, #8]
 8009b0e:	429a      	cmp	r2, r3
 8009b10:	bf0c      	ite	eq
 8009b12:	2301      	moveq	r3, #1
 8009b14:	2300      	movne	r3, #0
 8009b16:	b2db      	uxtb	r3, r3
 8009b18:	461a      	mov	r2, r3
 8009b1a:	79fb      	ldrb	r3, [r7, #7]
 8009b1c:	429a      	cmp	r2, r3
 8009b1e:	d19b      	bne.n	8009a58 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009b20:	2300      	movs	r3, #0
}
 8009b22:	4618      	mov	r0, r3
 8009b24:	3720      	adds	r7, #32
 8009b26:	46bd      	mov	sp, r7
 8009b28:	bd80      	pop	{r7, pc}
 8009b2a:	bf00      	nop
 8009b2c:	20000264 	.word	0x20000264

08009b30 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009b30:	b580      	push	{r7, lr}
 8009b32:	b08a      	sub	sp, #40	@ 0x28
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	60f8      	str	r0, [r7, #12]
 8009b38:	60b9      	str	r1, [r7, #8]
 8009b3a:	607a      	str	r2, [r7, #4]
 8009b3c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8009b3e:	2300      	movs	r3, #0
 8009b40:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8009b42:	f7fc fba9 	bl	8006298 <HAL_GetTick>
 8009b46:	4602      	mov	r2, r0
 8009b48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b4a:	1a9b      	subs	r3, r3, r2
 8009b4c:	683a      	ldr	r2, [r7, #0]
 8009b4e:	4413      	add	r3, r2
 8009b50:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8009b52:	f7fc fba1 	bl	8006298 <HAL_GetTick>
 8009b56:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	330c      	adds	r3, #12
 8009b5e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8009b60:	4b3d      	ldr	r3, [pc, #244]	@ (8009c58 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8009b62:	681a      	ldr	r2, [r3, #0]
 8009b64:	4613      	mov	r3, r2
 8009b66:	009b      	lsls	r3, r3, #2
 8009b68:	4413      	add	r3, r2
 8009b6a:	00da      	lsls	r2, r3, #3
 8009b6c:	1ad3      	subs	r3, r2, r3
 8009b6e:	0d1b      	lsrs	r3, r3, #20
 8009b70:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009b72:	fb02 f303 	mul.w	r3, r2, r3
 8009b76:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8009b78:	e060      	b.n	8009c3c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8009b7a:	68bb      	ldr	r3, [r7, #8]
 8009b7c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8009b80:	d107      	bne.n	8009b92 <SPI_WaitFifoStateUntilTimeout+0x62>
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d104      	bne.n	8009b92 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8009b88:	69fb      	ldr	r3, [r7, #28]
 8009b8a:	781b      	ldrb	r3, [r3, #0]
 8009b8c:	b2db      	uxtb	r3, r3
 8009b8e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8009b90:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8009b92:	683b      	ldr	r3, [r7, #0]
 8009b94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b98:	d050      	beq.n	8009c3c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009b9a:	f7fc fb7d 	bl	8006298 <HAL_GetTick>
 8009b9e:	4602      	mov	r2, r0
 8009ba0:	6a3b      	ldr	r3, [r7, #32]
 8009ba2:	1ad3      	subs	r3, r2, r3
 8009ba4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009ba6:	429a      	cmp	r2, r3
 8009ba8:	d902      	bls.n	8009bb0 <SPI_WaitFifoStateUntilTimeout+0x80>
 8009baa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d13d      	bne.n	8009c2c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	685a      	ldr	r2, [r3, #4]
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8009bbe:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	685b      	ldr	r3, [r3, #4]
 8009bc4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009bc8:	d111      	bne.n	8009bee <SPI_WaitFifoStateUntilTimeout+0xbe>
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	689b      	ldr	r3, [r3, #8]
 8009bce:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009bd2:	d004      	beq.n	8009bde <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	689b      	ldr	r3, [r3, #8]
 8009bd8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009bdc:	d107      	bne.n	8009bee <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	681a      	ldr	r2, [r3, #0]
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009bec:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009bf2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009bf6:	d10f      	bne.n	8009c18 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	681a      	ldr	r2, [r3, #0]
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009c06:	601a      	str	r2, [r3, #0]
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	681a      	ldr	r2, [r3, #0]
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009c16:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	2201      	movs	r2, #1
 8009c1c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	2200      	movs	r2, #0
 8009c24:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8009c28:	2303      	movs	r3, #3
 8009c2a:	e010      	b.n	8009c4e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009c2c:	69bb      	ldr	r3, [r7, #24]
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d101      	bne.n	8009c36 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8009c32:	2300      	movs	r3, #0
 8009c34:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8009c36:	69bb      	ldr	r3, [r7, #24]
 8009c38:	3b01      	subs	r3, #1
 8009c3a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	689a      	ldr	r2, [r3, #8]
 8009c42:	68bb      	ldr	r3, [r7, #8]
 8009c44:	4013      	ands	r3, r2
 8009c46:	687a      	ldr	r2, [r7, #4]
 8009c48:	429a      	cmp	r2, r3
 8009c4a:	d196      	bne.n	8009b7a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8009c4c:	2300      	movs	r3, #0
}
 8009c4e:	4618      	mov	r0, r3
 8009c50:	3728      	adds	r7, #40	@ 0x28
 8009c52:	46bd      	mov	sp, r7
 8009c54:	bd80      	pop	{r7, pc}
 8009c56:	bf00      	nop
 8009c58:	20000264 	.word	0x20000264

08009c5c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009c5c:	b580      	push	{r7, lr}
 8009c5e:	b086      	sub	sp, #24
 8009c60:	af02      	add	r7, sp, #8
 8009c62:	60f8      	str	r0, [r7, #12]
 8009c64:	60b9      	str	r1, [r7, #8]
 8009c66:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	9300      	str	r3, [sp, #0]
 8009c6c:	68bb      	ldr	r3, [r7, #8]
 8009c6e:	2200      	movs	r2, #0
 8009c70:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8009c74:	68f8      	ldr	r0, [r7, #12]
 8009c76:	f7ff ff5b 	bl	8009b30 <SPI_WaitFifoStateUntilTimeout>
 8009c7a:	4603      	mov	r3, r0
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d007      	beq.n	8009c90 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009c84:	f043 0220 	orr.w	r2, r3, #32
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8009c8c:	2303      	movs	r3, #3
 8009c8e:	e027      	b.n	8009ce0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	9300      	str	r3, [sp, #0]
 8009c94:	68bb      	ldr	r3, [r7, #8]
 8009c96:	2200      	movs	r2, #0
 8009c98:	2180      	movs	r1, #128	@ 0x80
 8009c9a:	68f8      	ldr	r0, [r7, #12]
 8009c9c:	f7ff fec0 	bl	8009a20 <SPI_WaitFlagStateUntilTimeout>
 8009ca0:	4603      	mov	r3, r0
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d007      	beq.n	8009cb6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009caa:	f043 0220 	orr.w	r2, r3, #32
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8009cb2:	2303      	movs	r3, #3
 8009cb4:	e014      	b.n	8009ce0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	9300      	str	r3, [sp, #0]
 8009cba:	68bb      	ldr	r3, [r7, #8]
 8009cbc:	2200      	movs	r2, #0
 8009cbe:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8009cc2:	68f8      	ldr	r0, [r7, #12]
 8009cc4:	f7ff ff34 	bl	8009b30 <SPI_WaitFifoStateUntilTimeout>
 8009cc8:	4603      	mov	r3, r0
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d007      	beq.n	8009cde <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009cd2:	f043 0220 	orr.w	r2, r3, #32
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8009cda:	2303      	movs	r3, #3
 8009cdc:	e000      	b.n	8009ce0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8009cde:	2300      	movs	r3, #0
}
 8009ce0:	4618      	mov	r0, r3
 8009ce2:	3710      	adds	r7, #16
 8009ce4:	46bd      	mov	sp, r7
 8009ce6:	bd80      	pop	{r7, pc}

08009ce8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009ce8:	b580      	push	{r7, lr}
 8009cea:	b082      	sub	sp, #8
 8009cec:	af00      	add	r7, sp, #0
 8009cee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d101      	bne.n	8009cfa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009cf6:	2301      	movs	r3, #1
 8009cf8:	e054      	b.n	8009da4 <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009d00:	b2db      	uxtb	r3, r3
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d111      	bne.n	8009d2a <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	2200      	movs	r2, #0
 8009d0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8009d0e:	6878      	ldr	r0, [r7, #4]
 8009d10:	f001 ffd4 	bl	800bcbc <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d102      	bne.n	8009d22 <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	4a23      	ldr	r2, [pc, #140]	@ (8009dac <HAL_TIM_Base_Init+0xc4>)
 8009d20:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009d26:	6878      	ldr	r0, [r7, #4]
 8009d28:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	2202      	movs	r2, #2
 8009d2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	681a      	ldr	r2, [r3, #0]
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	3304      	adds	r3, #4
 8009d3a:	4619      	mov	r1, r3
 8009d3c:	4610      	mov	r0, r2
 8009d3e:	f001 fb1d 	bl	800b37c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	2201      	movs	r2, #1
 8009d46:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	2201      	movs	r2, #1
 8009d4e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	2201      	movs	r2, #1
 8009d56:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	2201      	movs	r2, #1
 8009d5e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	2201      	movs	r2, #1
 8009d66:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	2201      	movs	r2, #1
 8009d6e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	2201      	movs	r2, #1
 8009d76:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	2201      	movs	r2, #1
 8009d7e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	2201      	movs	r2, #1
 8009d86:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	2201      	movs	r2, #1
 8009d8e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	2201      	movs	r2, #1
 8009d96:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	2201      	movs	r2, #1
 8009d9e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009da2:	2300      	movs	r3, #0
}
 8009da4:	4618      	mov	r0, r3
 8009da6:	3708      	adds	r7, #8
 8009da8:	46bd      	mov	sp, r7
 8009daa:	bd80      	pop	{r7, pc}
 8009dac:	08005cd1 	.word	0x08005cd1

08009db0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8009db0:	b480      	push	{r7}
 8009db2:	b085      	sub	sp, #20
 8009db4:	af00      	add	r7, sp, #0
 8009db6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009dbe:	b2db      	uxtb	r3, r3
 8009dc0:	2b01      	cmp	r3, #1
 8009dc2:	d001      	beq.n	8009dc8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8009dc4:	2301      	movs	r3, #1
 8009dc6:	e04c      	b.n	8009e62 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	2202      	movs	r2, #2
 8009dcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	4a26      	ldr	r2, [pc, #152]	@ (8009e70 <HAL_TIM_Base_Start+0xc0>)
 8009dd6:	4293      	cmp	r3, r2
 8009dd8:	d022      	beq.n	8009e20 <HAL_TIM_Base_Start+0x70>
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009de2:	d01d      	beq.n	8009e20 <HAL_TIM_Base_Start+0x70>
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	4a22      	ldr	r2, [pc, #136]	@ (8009e74 <HAL_TIM_Base_Start+0xc4>)
 8009dea:	4293      	cmp	r3, r2
 8009dec:	d018      	beq.n	8009e20 <HAL_TIM_Base_Start+0x70>
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	4a21      	ldr	r2, [pc, #132]	@ (8009e78 <HAL_TIM_Base_Start+0xc8>)
 8009df4:	4293      	cmp	r3, r2
 8009df6:	d013      	beq.n	8009e20 <HAL_TIM_Base_Start+0x70>
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	4a1f      	ldr	r2, [pc, #124]	@ (8009e7c <HAL_TIM_Base_Start+0xcc>)
 8009dfe:	4293      	cmp	r3, r2
 8009e00:	d00e      	beq.n	8009e20 <HAL_TIM_Base_Start+0x70>
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	4a1e      	ldr	r2, [pc, #120]	@ (8009e80 <HAL_TIM_Base_Start+0xd0>)
 8009e08:	4293      	cmp	r3, r2
 8009e0a:	d009      	beq.n	8009e20 <HAL_TIM_Base_Start+0x70>
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	4a1c      	ldr	r2, [pc, #112]	@ (8009e84 <HAL_TIM_Base_Start+0xd4>)
 8009e12:	4293      	cmp	r3, r2
 8009e14:	d004      	beq.n	8009e20 <HAL_TIM_Base_Start+0x70>
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	4a1b      	ldr	r2, [pc, #108]	@ (8009e88 <HAL_TIM_Base_Start+0xd8>)
 8009e1c:	4293      	cmp	r3, r2
 8009e1e:	d115      	bne.n	8009e4c <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	689a      	ldr	r2, [r3, #8]
 8009e26:	4b19      	ldr	r3, [pc, #100]	@ (8009e8c <HAL_TIM_Base_Start+0xdc>)
 8009e28:	4013      	ands	r3, r2
 8009e2a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	2b06      	cmp	r3, #6
 8009e30:	d015      	beq.n	8009e5e <HAL_TIM_Base_Start+0xae>
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009e38:	d011      	beq.n	8009e5e <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	681a      	ldr	r2, [r3, #0]
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	f042 0201 	orr.w	r2, r2, #1
 8009e48:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009e4a:	e008      	b.n	8009e5e <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	681a      	ldr	r2, [r3, #0]
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	f042 0201 	orr.w	r2, r2, #1
 8009e5a:	601a      	str	r2, [r3, #0]
 8009e5c:	e000      	b.n	8009e60 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009e5e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009e60:	2300      	movs	r3, #0
}
 8009e62:	4618      	mov	r0, r3
 8009e64:	3714      	adds	r7, #20
 8009e66:	46bd      	mov	sp, r7
 8009e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e6c:	4770      	bx	lr
 8009e6e:	bf00      	nop
 8009e70:	40012c00 	.word	0x40012c00
 8009e74:	40000400 	.word	0x40000400
 8009e78:	40000800 	.word	0x40000800
 8009e7c:	40000c00 	.word	0x40000c00
 8009e80:	40013400 	.word	0x40013400
 8009e84:	40014000 	.word	0x40014000
 8009e88:	40015000 	.word	0x40015000
 8009e8c:	00010007 	.word	0x00010007

08009e90 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009e90:	b480      	push	{r7}
 8009e92:	b085      	sub	sp, #20
 8009e94:	af00      	add	r7, sp, #0
 8009e96:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009e9e:	b2db      	uxtb	r3, r3
 8009ea0:	2b01      	cmp	r3, #1
 8009ea2:	d001      	beq.n	8009ea8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009ea4:	2301      	movs	r3, #1
 8009ea6:	e054      	b.n	8009f52 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	2202      	movs	r2, #2
 8009eac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	68da      	ldr	r2, [r3, #12]
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	f042 0201 	orr.w	r2, r2, #1
 8009ebe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	4a26      	ldr	r2, [pc, #152]	@ (8009f60 <HAL_TIM_Base_Start_IT+0xd0>)
 8009ec6:	4293      	cmp	r3, r2
 8009ec8:	d022      	beq.n	8009f10 <HAL_TIM_Base_Start_IT+0x80>
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009ed2:	d01d      	beq.n	8009f10 <HAL_TIM_Base_Start_IT+0x80>
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	4a22      	ldr	r2, [pc, #136]	@ (8009f64 <HAL_TIM_Base_Start_IT+0xd4>)
 8009eda:	4293      	cmp	r3, r2
 8009edc:	d018      	beq.n	8009f10 <HAL_TIM_Base_Start_IT+0x80>
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	4a21      	ldr	r2, [pc, #132]	@ (8009f68 <HAL_TIM_Base_Start_IT+0xd8>)
 8009ee4:	4293      	cmp	r3, r2
 8009ee6:	d013      	beq.n	8009f10 <HAL_TIM_Base_Start_IT+0x80>
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	4a1f      	ldr	r2, [pc, #124]	@ (8009f6c <HAL_TIM_Base_Start_IT+0xdc>)
 8009eee:	4293      	cmp	r3, r2
 8009ef0:	d00e      	beq.n	8009f10 <HAL_TIM_Base_Start_IT+0x80>
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	4a1e      	ldr	r2, [pc, #120]	@ (8009f70 <HAL_TIM_Base_Start_IT+0xe0>)
 8009ef8:	4293      	cmp	r3, r2
 8009efa:	d009      	beq.n	8009f10 <HAL_TIM_Base_Start_IT+0x80>
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	4a1c      	ldr	r2, [pc, #112]	@ (8009f74 <HAL_TIM_Base_Start_IT+0xe4>)
 8009f02:	4293      	cmp	r3, r2
 8009f04:	d004      	beq.n	8009f10 <HAL_TIM_Base_Start_IT+0x80>
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	4a1b      	ldr	r2, [pc, #108]	@ (8009f78 <HAL_TIM_Base_Start_IT+0xe8>)
 8009f0c:	4293      	cmp	r3, r2
 8009f0e:	d115      	bne.n	8009f3c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	689a      	ldr	r2, [r3, #8]
 8009f16:	4b19      	ldr	r3, [pc, #100]	@ (8009f7c <HAL_TIM_Base_Start_IT+0xec>)
 8009f18:	4013      	ands	r3, r2
 8009f1a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	2b06      	cmp	r3, #6
 8009f20:	d015      	beq.n	8009f4e <HAL_TIM_Base_Start_IT+0xbe>
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009f28:	d011      	beq.n	8009f4e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	681a      	ldr	r2, [r3, #0]
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	f042 0201 	orr.w	r2, r2, #1
 8009f38:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009f3a:	e008      	b.n	8009f4e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	681a      	ldr	r2, [r3, #0]
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	f042 0201 	orr.w	r2, r2, #1
 8009f4a:	601a      	str	r2, [r3, #0]
 8009f4c:	e000      	b.n	8009f50 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009f4e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009f50:	2300      	movs	r3, #0
}
 8009f52:	4618      	mov	r0, r3
 8009f54:	3714      	adds	r7, #20
 8009f56:	46bd      	mov	sp, r7
 8009f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f5c:	4770      	bx	lr
 8009f5e:	bf00      	nop
 8009f60:	40012c00 	.word	0x40012c00
 8009f64:	40000400 	.word	0x40000400
 8009f68:	40000800 	.word	0x40000800
 8009f6c:	40000c00 	.word	0x40000c00
 8009f70:	40013400 	.word	0x40013400
 8009f74:	40014000 	.word	0x40014000
 8009f78:	40015000 	.word	0x40015000
 8009f7c:	00010007 	.word	0x00010007

08009f80 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8009f80:	b580      	push	{r7, lr}
 8009f82:	b082      	sub	sp, #8
 8009f84:	af00      	add	r7, sp, #0
 8009f86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d101      	bne.n	8009f92 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8009f8e:	2301      	movs	r3, #1
 8009f90:	e054      	b.n	800a03c <HAL_TIM_OC_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009f98:	b2db      	uxtb	r3, r3
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d111      	bne.n	8009fc2 <HAL_TIM_OC_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	2200      	movs	r2, #0
 8009fa2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8009fa6:	6878      	ldr	r0, [r7, #4]
 8009fa8:	f001 fe88 	bl	800bcbc <TIM_ResetCallback>

    if (htim->OC_MspInitCallback == NULL)
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d102      	bne.n	8009fba <HAL_TIM_OC_Init+0x3a>
    {
      htim->OC_MspInitCallback = HAL_TIM_OC_MspInit;
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	4a23      	ldr	r2, [pc, #140]	@ (800a044 <HAL_TIM_OC_Init+0xc4>)
 8009fb8:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009fbe:	6878      	ldr	r0, [r7, #4]
 8009fc0:	4798      	blx	r3
    HAL_TIM_OC_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	2202      	movs	r2, #2
 8009fc6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	681a      	ldr	r2, [r3, #0]
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	3304      	adds	r3, #4
 8009fd2:	4619      	mov	r1, r3
 8009fd4:	4610      	mov	r0, r2
 8009fd6:	f001 f9d1 	bl	800b37c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	2201      	movs	r2, #1
 8009fde:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	2201      	movs	r2, #1
 8009fe6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	2201      	movs	r2, #1
 8009fee:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	2201      	movs	r2, #1
 8009ff6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	2201      	movs	r2, #1
 8009ffe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	2201      	movs	r2, #1
 800a006:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	2201      	movs	r2, #1
 800a00e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	2201      	movs	r2, #1
 800a016:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	2201      	movs	r2, #1
 800a01e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	2201      	movs	r2, #1
 800a026:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	2201      	movs	r2, #1
 800a02e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	2201      	movs	r2, #1
 800a036:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a03a:	2300      	movs	r3, #0
}
 800a03c:	4618      	mov	r0, r3
 800a03e:	3708      	adds	r7, #8
 800a040:	46bd      	mov	sp, r7
 800a042:	bd80      	pop	{r7, pc}
 800a044:	0800a049 	.word	0x0800a049

0800a048 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800a048:	b480      	push	{r7}
 800a04a:	b083      	sub	sp, #12
 800a04c:	af00      	add	r7, sp, #0
 800a04e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800a050:	bf00      	nop
 800a052:	370c      	adds	r7, #12
 800a054:	46bd      	mov	sp, r7
 800a056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a05a:	4770      	bx	lr

0800a05c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a05c:	b580      	push	{r7, lr}
 800a05e:	b082      	sub	sp, #8
 800a060:	af00      	add	r7, sp, #0
 800a062:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	2b00      	cmp	r3, #0
 800a068:	d101      	bne.n	800a06e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a06a:	2301      	movs	r3, #1
 800a06c:	e054      	b.n	800a118 <HAL_TIM_PWM_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a074:	b2db      	uxtb	r3, r3
 800a076:	2b00      	cmp	r3, #0
 800a078:	d111      	bne.n	800a09e <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	2200      	movs	r2, #0
 800a07e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800a082:	6878      	ldr	r0, [r7, #4]
 800a084:	f001 fe1a 	bl	800bcbc <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d102      	bne.n	800a096 <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	4a23      	ldr	r2, [pc, #140]	@ (800a120 <HAL_TIM_PWM_Init+0xc4>)
 800a094:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a09a:	6878      	ldr	r0, [r7, #4]
 800a09c:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	2202      	movs	r2, #2
 800a0a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	681a      	ldr	r2, [r3, #0]
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	3304      	adds	r3, #4
 800a0ae:	4619      	mov	r1, r3
 800a0b0:	4610      	mov	r0, r2
 800a0b2:	f001 f963 	bl	800b37c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	2201      	movs	r2, #1
 800a0ba:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	2201      	movs	r2, #1
 800a0c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	2201      	movs	r2, #1
 800a0ca:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	2201      	movs	r2, #1
 800a0d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	2201      	movs	r2, #1
 800a0da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	2201      	movs	r2, #1
 800a0e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	2201      	movs	r2, #1
 800a0ea:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	2201      	movs	r2, #1
 800a0f2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	2201      	movs	r2, #1
 800a0fa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	2201      	movs	r2, #1
 800a102:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	2201      	movs	r2, #1
 800a10a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	2201      	movs	r2, #1
 800a112:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a116:	2300      	movs	r3, #0
}
 800a118:	4618      	mov	r0, r3
 800a11a:	3708      	adds	r7, #8
 800a11c:	46bd      	mov	sp, r7
 800a11e:	bd80      	pop	{r7, pc}
 800a120:	0800a125 	.word	0x0800a125

0800a124 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800a124:	b480      	push	{r7}
 800a126:	b083      	sub	sp, #12
 800a128:	af00      	add	r7, sp, #0
 800a12a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800a12c:	bf00      	nop
 800a12e:	370c      	adds	r7, #12
 800a130:	46bd      	mov	sp, r7
 800a132:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a136:	4770      	bx	lr

0800a138 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a138:	b580      	push	{r7, lr}
 800a13a:	b084      	sub	sp, #16
 800a13c:	af00      	add	r7, sp, #0
 800a13e:	6078      	str	r0, [r7, #4]
 800a140:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a142:	683b      	ldr	r3, [r7, #0]
 800a144:	2b00      	cmp	r3, #0
 800a146:	d109      	bne.n	800a15c <HAL_TIM_PWM_Start+0x24>
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800a14e:	b2db      	uxtb	r3, r3
 800a150:	2b01      	cmp	r3, #1
 800a152:	bf14      	ite	ne
 800a154:	2301      	movne	r3, #1
 800a156:	2300      	moveq	r3, #0
 800a158:	b2db      	uxtb	r3, r3
 800a15a:	e03c      	b.n	800a1d6 <HAL_TIM_PWM_Start+0x9e>
 800a15c:	683b      	ldr	r3, [r7, #0]
 800a15e:	2b04      	cmp	r3, #4
 800a160:	d109      	bne.n	800a176 <HAL_TIM_PWM_Start+0x3e>
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800a168:	b2db      	uxtb	r3, r3
 800a16a:	2b01      	cmp	r3, #1
 800a16c:	bf14      	ite	ne
 800a16e:	2301      	movne	r3, #1
 800a170:	2300      	moveq	r3, #0
 800a172:	b2db      	uxtb	r3, r3
 800a174:	e02f      	b.n	800a1d6 <HAL_TIM_PWM_Start+0x9e>
 800a176:	683b      	ldr	r3, [r7, #0]
 800a178:	2b08      	cmp	r3, #8
 800a17a:	d109      	bne.n	800a190 <HAL_TIM_PWM_Start+0x58>
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a182:	b2db      	uxtb	r3, r3
 800a184:	2b01      	cmp	r3, #1
 800a186:	bf14      	ite	ne
 800a188:	2301      	movne	r3, #1
 800a18a:	2300      	moveq	r3, #0
 800a18c:	b2db      	uxtb	r3, r3
 800a18e:	e022      	b.n	800a1d6 <HAL_TIM_PWM_Start+0x9e>
 800a190:	683b      	ldr	r3, [r7, #0]
 800a192:	2b0c      	cmp	r3, #12
 800a194:	d109      	bne.n	800a1aa <HAL_TIM_PWM_Start+0x72>
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a19c:	b2db      	uxtb	r3, r3
 800a19e:	2b01      	cmp	r3, #1
 800a1a0:	bf14      	ite	ne
 800a1a2:	2301      	movne	r3, #1
 800a1a4:	2300      	moveq	r3, #0
 800a1a6:	b2db      	uxtb	r3, r3
 800a1a8:	e015      	b.n	800a1d6 <HAL_TIM_PWM_Start+0x9e>
 800a1aa:	683b      	ldr	r3, [r7, #0]
 800a1ac:	2b10      	cmp	r3, #16
 800a1ae:	d109      	bne.n	800a1c4 <HAL_TIM_PWM_Start+0x8c>
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a1b6:	b2db      	uxtb	r3, r3
 800a1b8:	2b01      	cmp	r3, #1
 800a1ba:	bf14      	ite	ne
 800a1bc:	2301      	movne	r3, #1
 800a1be:	2300      	moveq	r3, #0
 800a1c0:	b2db      	uxtb	r3, r3
 800a1c2:	e008      	b.n	800a1d6 <HAL_TIM_PWM_Start+0x9e>
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800a1ca:	b2db      	uxtb	r3, r3
 800a1cc:	2b01      	cmp	r3, #1
 800a1ce:	bf14      	ite	ne
 800a1d0:	2301      	movne	r3, #1
 800a1d2:	2300      	moveq	r3, #0
 800a1d4:	b2db      	uxtb	r3, r3
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d001      	beq.n	800a1de <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800a1da:	2301      	movs	r3, #1
 800a1dc:	e0a6      	b.n	800a32c <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a1de:	683b      	ldr	r3, [r7, #0]
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d104      	bne.n	800a1ee <HAL_TIM_PWM_Start+0xb6>
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	2202      	movs	r2, #2
 800a1e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a1ec:	e023      	b.n	800a236 <HAL_TIM_PWM_Start+0xfe>
 800a1ee:	683b      	ldr	r3, [r7, #0]
 800a1f0:	2b04      	cmp	r3, #4
 800a1f2:	d104      	bne.n	800a1fe <HAL_TIM_PWM_Start+0xc6>
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	2202      	movs	r2, #2
 800a1f8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a1fc:	e01b      	b.n	800a236 <HAL_TIM_PWM_Start+0xfe>
 800a1fe:	683b      	ldr	r3, [r7, #0]
 800a200:	2b08      	cmp	r3, #8
 800a202:	d104      	bne.n	800a20e <HAL_TIM_PWM_Start+0xd6>
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	2202      	movs	r2, #2
 800a208:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a20c:	e013      	b.n	800a236 <HAL_TIM_PWM_Start+0xfe>
 800a20e:	683b      	ldr	r3, [r7, #0]
 800a210:	2b0c      	cmp	r3, #12
 800a212:	d104      	bne.n	800a21e <HAL_TIM_PWM_Start+0xe6>
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	2202      	movs	r2, #2
 800a218:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a21c:	e00b      	b.n	800a236 <HAL_TIM_PWM_Start+0xfe>
 800a21e:	683b      	ldr	r3, [r7, #0]
 800a220:	2b10      	cmp	r3, #16
 800a222:	d104      	bne.n	800a22e <HAL_TIM_PWM_Start+0xf6>
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	2202      	movs	r2, #2
 800a228:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a22c:	e003      	b.n	800a236 <HAL_TIM_PWM_Start+0xfe>
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	2202      	movs	r2, #2
 800a232:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	2201      	movs	r2, #1
 800a23c:	6839      	ldr	r1, [r7, #0]
 800a23e:	4618      	mov	r0, r3
 800a240:	f001 fd16 	bl	800bc70 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	4a3a      	ldr	r2, [pc, #232]	@ (800a334 <HAL_TIM_PWM_Start+0x1fc>)
 800a24a:	4293      	cmp	r3, r2
 800a24c:	d018      	beq.n	800a280 <HAL_TIM_PWM_Start+0x148>
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	4a39      	ldr	r2, [pc, #228]	@ (800a338 <HAL_TIM_PWM_Start+0x200>)
 800a254:	4293      	cmp	r3, r2
 800a256:	d013      	beq.n	800a280 <HAL_TIM_PWM_Start+0x148>
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	4a37      	ldr	r2, [pc, #220]	@ (800a33c <HAL_TIM_PWM_Start+0x204>)
 800a25e:	4293      	cmp	r3, r2
 800a260:	d00e      	beq.n	800a280 <HAL_TIM_PWM_Start+0x148>
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	4a36      	ldr	r2, [pc, #216]	@ (800a340 <HAL_TIM_PWM_Start+0x208>)
 800a268:	4293      	cmp	r3, r2
 800a26a:	d009      	beq.n	800a280 <HAL_TIM_PWM_Start+0x148>
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	4a34      	ldr	r2, [pc, #208]	@ (800a344 <HAL_TIM_PWM_Start+0x20c>)
 800a272:	4293      	cmp	r3, r2
 800a274:	d004      	beq.n	800a280 <HAL_TIM_PWM_Start+0x148>
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	4a33      	ldr	r2, [pc, #204]	@ (800a348 <HAL_TIM_PWM_Start+0x210>)
 800a27c:	4293      	cmp	r3, r2
 800a27e:	d101      	bne.n	800a284 <HAL_TIM_PWM_Start+0x14c>
 800a280:	2301      	movs	r3, #1
 800a282:	e000      	b.n	800a286 <HAL_TIM_PWM_Start+0x14e>
 800a284:	2300      	movs	r3, #0
 800a286:	2b00      	cmp	r3, #0
 800a288:	d007      	beq.n	800a29a <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a298:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	4a25      	ldr	r2, [pc, #148]	@ (800a334 <HAL_TIM_PWM_Start+0x1fc>)
 800a2a0:	4293      	cmp	r3, r2
 800a2a2:	d022      	beq.n	800a2ea <HAL_TIM_PWM_Start+0x1b2>
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a2ac:	d01d      	beq.n	800a2ea <HAL_TIM_PWM_Start+0x1b2>
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	4a26      	ldr	r2, [pc, #152]	@ (800a34c <HAL_TIM_PWM_Start+0x214>)
 800a2b4:	4293      	cmp	r3, r2
 800a2b6:	d018      	beq.n	800a2ea <HAL_TIM_PWM_Start+0x1b2>
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	4a24      	ldr	r2, [pc, #144]	@ (800a350 <HAL_TIM_PWM_Start+0x218>)
 800a2be:	4293      	cmp	r3, r2
 800a2c0:	d013      	beq.n	800a2ea <HAL_TIM_PWM_Start+0x1b2>
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	4a23      	ldr	r2, [pc, #140]	@ (800a354 <HAL_TIM_PWM_Start+0x21c>)
 800a2c8:	4293      	cmp	r3, r2
 800a2ca:	d00e      	beq.n	800a2ea <HAL_TIM_PWM_Start+0x1b2>
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	4a19      	ldr	r2, [pc, #100]	@ (800a338 <HAL_TIM_PWM_Start+0x200>)
 800a2d2:	4293      	cmp	r3, r2
 800a2d4:	d009      	beq.n	800a2ea <HAL_TIM_PWM_Start+0x1b2>
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	4a18      	ldr	r2, [pc, #96]	@ (800a33c <HAL_TIM_PWM_Start+0x204>)
 800a2dc:	4293      	cmp	r3, r2
 800a2de:	d004      	beq.n	800a2ea <HAL_TIM_PWM_Start+0x1b2>
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	4a18      	ldr	r2, [pc, #96]	@ (800a348 <HAL_TIM_PWM_Start+0x210>)
 800a2e6:	4293      	cmp	r3, r2
 800a2e8:	d115      	bne.n	800a316 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	689a      	ldr	r2, [r3, #8]
 800a2f0:	4b19      	ldr	r3, [pc, #100]	@ (800a358 <HAL_TIM_PWM_Start+0x220>)
 800a2f2:	4013      	ands	r3, r2
 800a2f4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	2b06      	cmp	r3, #6
 800a2fa:	d015      	beq.n	800a328 <HAL_TIM_PWM_Start+0x1f0>
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a302:	d011      	beq.n	800a328 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	681a      	ldr	r2, [r3, #0]
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	f042 0201 	orr.w	r2, r2, #1
 800a312:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a314:	e008      	b.n	800a328 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	681a      	ldr	r2, [r3, #0]
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	f042 0201 	orr.w	r2, r2, #1
 800a324:	601a      	str	r2, [r3, #0]
 800a326:	e000      	b.n	800a32a <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a328:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a32a:	2300      	movs	r3, #0
}
 800a32c:	4618      	mov	r0, r3
 800a32e:	3710      	adds	r7, #16
 800a330:	46bd      	mov	sp, r7
 800a332:	bd80      	pop	{r7, pc}
 800a334:	40012c00 	.word	0x40012c00
 800a338:	40013400 	.word	0x40013400
 800a33c:	40014000 	.word	0x40014000
 800a340:	40014400 	.word	0x40014400
 800a344:	40014800 	.word	0x40014800
 800a348:	40015000 	.word	0x40015000
 800a34c:	40000400 	.word	0x40000400
 800a350:	40000800 	.word	0x40000800
 800a354:	40000c00 	.word	0x40000c00
 800a358:	00010007 	.word	0x00010007

0800a35c <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 800a35c:	b580      	push	{r7, lr}
 800a35e:	b082      	sub	sp, #8
 800a360:	af00      	add	r7, sp, #0
 800a362:	6078      	str	r0, [r7, #4]
 800a364:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d101      	bne.n	800a370 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 800a36c:	2301      	movs	r3, #1
 800a36e:	e04c      	b.n	800a40a <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a376:	b2db      	uxtb	r3, r3
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d111      	bne.n	800a3a0 <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	2200      	movs	r2, #0
 800a380:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800a384:	6878      	ldr	r0, [r7, #4]
 800a386:	f001 fc99 	bl	800bcbc <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d102      	bne.n	800a398 <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	4a1f      	ldr	r2, [pc, #124]	@ (800a414 <HAL_TIM_OnePulse_Init+0xb8>)
 800a396:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a39c:	6878      	ldr	r0, [r7, #4]
 800a39e:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	2202      	movs	r2, #2
 800a3a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	681a      	ldr	r2, [r3, #0]
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	3304      	adds	r3, #4
 800a3b0:	4619      	mov	r1, r3
 800a3b2:	4610      	mov	r0, r2
 800a3b4:	f000 ffe2 	bl	800b37c <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	681a      	ldr	r2, [r3, #0]
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	f022 0208 	bic.w	r2, r2, #8
 800a3c6:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	6819      	ldr	r1, [r3, #0]
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	683a      	ldr	r2, [r7, #0]
 800a3d4:	430a      	orrs	r2, r1
 800a3d6:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	2201      	movs	r2, #1
 800a3dc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	2201      	movs	r2, #1
 800a3e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	2201      	movs	r2, #1
 800a3ec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	2201      	movs	r2, #1
 800a3f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	2201      	movs	r2, #1
 800a3fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	2201      	movs	r2, #1
 800a404:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a408:	2300      	movs	r3, #0
}
 800a40a:	4618      	mov	r0, r3
 800a40c:	3708      	adds	r7, #8
 800a40e:	46bd      	mov	sp, r7
 800a410:	bd80      	pop	{r7, pc}
 800a412:	bf00      	nop
 800a414:	0800a419 	.word	0x0800a419

0800a418 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 800a418:	b480      	push	{r7}
 800a41a:	b083      	sub	sp, #12
 800a41c:	af00      	add	r7, sp, #0
 800a41e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 800a420:	bf00      	nop
 800a422:	370c      	adds	r7, #12
 800a424:	46bd      	mov	sp, r7
 800a426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a42a:	4770      	bx	lr

0800a42c <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 800a42c:	b580      	push	{r7, lr}
 800a42e:	b084      	sub	sp, #16
 800a430:	af00      	add	r7, sp, #0
 800a432:	6078      	str	r0, [r7, #4]
 800a434:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800a43c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800a444:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a44c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a454:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800a456:	7bfb      	ldrb	r3, [r7, #15]
 800a458:	2b01      	cmp	r3, #1
 800a45a:	d108      	bne.n	800a46e <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800a45c:	7bbb      	ldrb	r3, [r7, #14]
 800a45e:	2b01      	cmp	r3, #1
 800a460:	d105      	bne.n	800a46e <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800a462:	7b7b      	ldrb	r3, [r7, #13]
 800a464:	2b01      	cmp	r3, #1
 800a466:	d102      	bne.n	800a46e <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800a468:	7b3b      	ldrb	r3, [r7, #12]
 800a46a:	2b01      	cmp	r3, #1
 800a46c:	d001      	beq.n	800a472 <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 800a46e:	2301      	movs	r3, #1
 800a470:	e059      	b.n	800a526 <HAL_TIM_OnePulse_Start_IT+0xfa>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	2202      	movs	r2, #2
 800a476:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	2202      	movs	r2, #2
 800a47e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	2202      	movs	r2, #2
 800a486:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	2202      	movs	r2, #2
 800a48e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	68da      	ldr	r2, [r3, #12]
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	f042 0202 	orr.w	r2, r2, #2
 800a4a0:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	68da      	ldr	r2, [r3, #12]
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	f042 0204 	orr.w	r2, r2, #4
 800a4b0:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	2201      	movs	r2, #1
 800a4b8:	2100      	movs	r1, #0
 800a4ba:	4618      	mov	r0, r3
 800a4bc:	f001 fbd8 	bl	800bc70 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	2201      	movs	r2, #1
 800a4c6:	2104      	movs	r1, #4
 800a4c8:	4618      	mov	r0, r3
 800a4ca:	f001 fbd1 	bl	800bc70 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	4a17      	ldr	r2, [pc, #92]	@ (800a530 <HAL_TIM_OnePulse_Start_IT+0x104>)
 800a4d4:	4293      	cmp	r3, r2
 800a4d6:	d018      	beq.n	800a50a <HAL_TIM_OnePulse_Start_IT+0xde>
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	4a15      	ldr	r2, [pc, #84]	@ (800a534 <HAL_TIM_OnePulse_Start_IT+0x108>)
 800a4de:	4293      	cmp	r3, r2
 800a4e0:	d013      	beq.n	800a50a <HAL_TIM_OnePulse_Start_IT+0xde>
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	4a14      	ldr	r2, [pc, #80]	@ (800a538 <HAL_TIM_OnePulse_Start_IT+0x10c>)
 800a4e8:	4293      	cmp	r3, r2
 800a4ea:	d00e      	beq.n	800a50a <HAL_TIM_OnePulse_Start_IT+0xde>
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	4a12      	ldr	r2, [pc, #72]	@ (800a53c <HAL_TIM_OnePulse_Start_IT+0x110>)
 800a4f2:	4293      	cmp	r3, r2
 800a4f4:	d009      	beq.n	800a50a <HAL_TIM_OnePulse_Start_IT+0xde>
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	4a11      	ldr	r2, [pc, #68]	@ (800a540 <HAL_TIM_OnePulse_Start_IT+0x114>)
 800a4fc:	4293      	cmp	r3, r2
 800a4fe:	d004      	beq.n	800a50a <HAL_TIM_OnePulse_Start_IT+0xde>
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	4a0f      	ldr	r2, [pc, #60]	@ (800a544 <HAL_TIM_OnePulse_Start_IT+0x118>)
 800a506:	4293      	cmp	r3, r2
 800a508:	d101      	bne.n	800a50e <HAL_TIM_OnePulse_Start_IT+0xe2>
 800a50a:	2301      	movs	r3, #1
 800a50c:	e000      	b.n	800a510 <HAL_TIM_OnePulse_Start_IT+0xe4>
 800a50e:	2300      	movs	r3, #0
 800a510:	2b00      	cmp	r3, #0
 800a512:	d007      	beq.n	800a524 <HAL_TIM_OnePulse_Start_IT+0xf8>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a522:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 800a524:	2300      	movs	r3, #0
}
 800a526:	4618      	mov	r0, r3
 800a528:	3710      	adds	r7, #16
 800a52a:	46bd      	mov	sp, r7
 800a52c:	bd80      	pop	{r7, pc}
 800a52e:	bf00      	nop
 800a530:	40012c00 	.word	0x40012c00
 800a534:	40013400 	.word	0x40013400
 800a538:	40014000 	.word	0x40014000
 800a53c:	40014400 	.word	0x40014400
 800a540:	40014800 	.word	0x40014800
 800a544:	40015000 	.word	0x40015000

0800a548 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800a548:	b580      	push	{r7, lr}
 800a54a:	b086      	sub	sp, #24
 800a54c:	af00      	add	r7, sp, #0
 800a54e:	6078      	str	r0, [r7, #4]
 800a550:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	2b00      	cmp	r3, #0
 800a556:	d101      	bne.n	800a55c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800a558:	2301      	movs	r3, #1
 800a55a:	e0a2      	b.n	800a6a2 <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a562:	b2db      	uxtb	r3, r3
 800a564:	2b00      	cmp	r3, #0
 800a566:	d111      	bne.n	800a58c <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	2200      	movs	r2, #0
 800a56c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800a570:	6878      	ldr	r0, [r7, #4]
 800a572:	f001 fba3 	bl	800bcbc <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d102      	bne.n	800a584 <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	4a4a      	ldr	r2, [pc, #296]	@ (800a6ac <HAL_TIM_Encoder_Init+0x164>)
 800a582:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a588:	6878      	ldr	r0, [r7, #4]
 800a58a:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	2202      	movs	r2, #2
 800a590:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	689b      	ldr	r3, [r3, #8]
 800a59a:	687a      	ldr	r2, [r7, #4]
 800a59c:	6812      	ldr	r2, [r2, #0]
 800a59e:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 800a5a2:	f023 0307 	bic.w	r3, r3, #7
 800a5a6:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	681a      	ldr	r2, [r3, #0]
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	3304      	adds	r3, #4
 800a5b0:	4619      	mov	r1, r3
 800a5b2:	4610      	mov	r0, r2
 800a5b4:	f000 fee2 	bl	800b37c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	689b      	ldr	r3, [r3, #8]
 800a5be:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	699b      	ldr	r3, [r3, #24]
 800a5c6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	6a1b      	ldr	r3, [r3, #32]
 800a5ce:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800a5d0:	683b      	ldr	r3, [r7, #0]
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	697a      	ldr	r2, [r7, #20]
 800a5d6:	4313      	orrs	r3, r2
 800a5d8:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800a5da:	693b      	ldr	r3, [r7, #16]
 800a5dc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a5e0:	f023 0303 	bic.w	r3, r3, #3
 800a5e4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800a5e6:	683b      	ldr	r3, [r7, #0]
 800a5e8:	689a      	ldr	r2, [r3, #8]
 800a5ea:	683b      	ldr	r3, [r7, #0]
 800a5ec:	699b      	ldr	r3, [r3, #24]
 800a5ee:	021b      	lsls	r3, r3, #8
 800a5f0:	4313      	orrs	r3, r2
 800a5f2:	693a      	ldr	r2, [r7, #16]
 800a5f4:	4313      	orrs	r3, r2
 800a5f6:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800a5f8:	693b      	ldr	r3, [r7, #16]
 800a5fa:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800a5fe:	f023 030c 	bic.w	r3, r3, #12
 800a602:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800a604:	693b      	ldr	r3, [r7, #16]
 800a606:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a60a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a60e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800a610:	683b      	ldr	r3, [r7, #0]
 800a612:	68da      	ldr	r2, [r3, #12]
 800a614:	683b      	ldr	r3, [r7, #0]
 800a616:	69db      	ldr	r3, [r3, #28]
 800a618:	021b      	lsls	r3, r3, #8
 800a61a:	4313      	orrs	r3, r2
 800a61c:	693a      	ldr	r2, [r7, #16]
 800a61e:	4313      	orrs	r3, r2
 800a620:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800a622:	683b      	ldr	r3, [r7, #0]
 800a624:	691b      	ldr	r3, [r3, #16]
 800a626:	011a      	lsls	r2, r3, #4
 800a628:	683b      	ldr	r3, [r7, #0]
 800a62a:	6a1b      	ldr	r3, [r3, #32]
 800a62c:	031b      	lsls	r3, r3, #12
 800a62e:	4313      	orrs	r3, r2
 800a630:	693a      	ldr	r2, [r7, #16]
 800a632:	4313      	orrs	r3, r2
 800a634:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800a63c:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800a644:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800a646:	683b      	ldr	r3, [r7, #0]
 800a648:	685a      	ldr	r2, [r3, #4]
 800a64a:	683b      	ldr	r3, [r7, #0]
 800a64c:	695b      	ldr	r3, [r3, #20]
 800a64e:	011b      	lsls	r3, r3, #4
 800a650:	4313      	orrs	r3, r2
 800a652:	68fa      	ldr	r2, [r7, #12]
 800a654:	4313      	orrs	r3, r2
 800a656:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	697a      	ldr	r2, [r7, #20]
 800a65e:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	693a      	ldr	r2, [r7, #16]
 800a666:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	68fa      	ldr	r2, [r7, #12]
 800a66e:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	2201      	movs	r2, #1
 800a674:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	2201      	movs	r2, #1
 800a67c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	2201      	movs	r2, #1
 800a684:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	2201      	movs	r2, #1
 800a68c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	2201      	movs	r2, #1
 800a694:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	2201      	movs	r2, #1
 800a69c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a6a0:	2300      	movs	r3, #0
}
 800a6a2:	4618      	mov	r0, r3
 800a6a4:	3718      	adds	r7, #24
 800a6a6:	46bd      	mov	sp, r7
 800a6a8:	bd80      	pop	{r7, pc}
 800a6aa:	bf00      	nop
 800a6ac:	08005de9 	.word	0x08005de9

0800a6b0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a6b0:	b580      	push	{r7, lr}
 800a6b2:	b084      	sub	sp, #16
 800a6b4:	af00      	add	r7, sp, #0
 800a6b6:	6078      	str	r0, [r7, #4]
 800a6b8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800a6c0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800a6c8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a6d0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a6d8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800a6da:	683b      	ldr	r3, [r7, #0]
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d110      	bne.n	800a702 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800a6e0:	7bfb      	ldrb	r3, [r7, #15]
 800a6e2:	2b01      	cmp	r3, #1
 800a6e4:	d102      	bne.n	800a6ec <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800a6e6:	7b7b      	ldrb	r3, [r7, #13]
 800a6e8:	2b01      	cmp	r3, #1
 800a6ea:	d001      	beq.n	800a6f0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800a6ec:	2301      	movs	r3, #1
 800a6ee:	e069      	b.n	800a7c4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	2202      	movs	r2, #2
 800a6f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	2202      	movs	r2, #2
 800a6fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a700:	e031      	b.n	800a766 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800a702:	683b      	ldr	r3, [r7, #0]
 800a704:	2b04      	cmp	r3, #4
 800a706:	d110      	bne.n	800a72a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800a708:	7bbb      	ldrb	r3, [r7, #14]
 800a70a:	2b01      	cmp	r3, #1
 800a70c:	d102      	bne.n	800a714 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800a70e:	7b3b      	ldrb	r3, [r7, #12]
 800a710:	2b01      	cmp	r3, #1
 800a712:	d001      	beq.n	800a718 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800a714:	2301      	movs	r3, #1
 800a716:	e055      	b.n	800a7c4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	2202      	movs	r2, #2
 800a71c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	2202      	movs	r2, #2
 800a724:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a728:	e01d      	b.n	800a766 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800a72a:	7bfb      	ldrb	r3, [r7, #15]
 800a72c:	2b01      	cmp	r3, #1
 800a72e:	d108      	bne.n	800a742 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800a730:	7bbb      	ldrb	r3, [r7, #14]
 800a732:	2b01      	cmp	r3, #1
 800a734:	d105      	bne.n	800a742 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800a736:	7b7b      	ldrb	r3, [r7, #13]
 800a738:	2b01      	cmp	r3, #1
 800a73a:	d102      	bne.n	800a742 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800a73c:	7b3b      	ldrb	r3, [r7, #12]
 800a73e:	2b01      	cmp	r3, #1
 800a740:	d001      	beq.n	800a746 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800a742:	2301      	movs	r3, #1
 800a744:	e03e      	b.n	800a7c4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	2202      	movs	r2, #2
 800a74a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	2202      	movs	r2, #2
 800a752:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	2202      	movs	r2, #2
 800a75a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	2202      	movs	r2, #2
 800a762:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800a766:	683b      	ldr	r3, [r7, #0]
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d003      	beq.n	800a774 <HAL_TIM_Encoder_Start+0xc4>
 800a76c:	683b      	ldr	r3, [r7, #0]
 800a76e:	2b04      	cmp	r3, #4
 800a770:	d008      	beq.n	800a784 <HAL_TIM_Encoder_Start+0xd4>
 800a772:	e00f      	b.n	800a794 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	2201      	movs	r2, #1
 800a77a:	2100      	movs	r1, #0
 800a77c:	4618      	mov	r0, r3
 800a77e:	f001 fa77 	bl	800bc70 <TIM_CCxChannelCmd>
      break;
 800a782:	e016      	b.n	800a7b2 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	2201      	movs	r2, #1
 800a78a:	2104      	movs	r1, #4
 800a78c:	4618      	mov	r0, r3
 800a78e:	f001 fa6f 	bl	800bc70 <TIM_CCxChannelCmd>
      break;
 800a792:	e00e      	b.n	800a7b2 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	2201      	movs	r2, #1
 800a79a:	2100      	movs	r1, #0
 800a79c:	4618      	mov	r0, r3
 800a79e:	f001 fa67 	bl	800bc70 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	2201      	movs	r2, #1
 800a7a8:	2104      	movs	r1, #4
 800a7aa:	4618      	mov	r0, r3
 800a7ac:	f001 fa60 	bl	800bc70 <TIM_CCxChannelCmd>
      break;
 800a7b0:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	681a      	ldr	r2, [r3, #0]
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	f042 0201 	orr.w	r2, r2, #1
 800a7c0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800a7c2:	2300      	movs	r3, #0
}
 800a7c4:	4618      	mov	r0, r3
 800a7c6:	3710      	adds	r7, #16
 800a7c8:	46bd      	mov	sp, r7
 800a7ca:	bd80      	pop	{r7, pc}

0800a7cc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a7cc:	b580      	push	{r7, lr}
 800a7ce:	b084      	sub	sp, #16
 800a7d0:	af00      	add	r7, sp, #0
 800a7d2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	68db      	ldr	r3, [r3, #12]
 800a7da:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	691b      	ldr	r3, [r3, #16]
 800a7e2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800a7e4:	68bb      	ldr	r3, [r7, #8]
 800a7e6:	f003 0302 	and.w	r3, r3, #2
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d026      	beq.n	800a83c <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	f003 0302 	and.w	r3, r3, #2
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d021      	beq.n	800a83c <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	f06f 0202 	mvn.w	r2, #2
 800a800:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	2201      	movs	r2, #1
 800a806:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	699b      	ldr	r3, [r3, #24]
 800a80e:	f003 0303 	and.w	r3, r3, #3
 800a812:	2b00      	cmp	r3, #0
 800a814:	d005      	beq.n	800a822 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a81c:	6878      	ldr	r0, [r7, #4]
 800a81e:	4798      	blx	r3
 800a820:	e009      	b.n	800a836 <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a828:	6878      	ldr	r0, [r7, #4]
 800a82a:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800a832:	6878      	ldr	r0, [r7, #4]
 800a834:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	2200      	movs	r2, #0
 800a83a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800a83c:	68bb      	ldr	r3, [r7, #8]
 800a83e:	f003 0304 	and.w	r3, r3, #4
 800a842:	2b00      	cmp	r3, #0
 800a844:	d026      	beq.n	800a894 <HAL_TIM_IRQHandler+0xc8>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	f003 0304 	and.w	r3, r3, #4
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d021      	beq.n	800a894 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	f06f 0204 	mvn.w	r2, #4
 800a858:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	2202      	movs	r2, #2
 800a85e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	699b      	ldr	r3, [r3, #24]
 800a866:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d005      	beq.n	800a87a <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a874:	6878      	ldr	r0, [r7, #4]
 800a876:	4798      	blx	r3
 800a878:	e009      	b.n	800a88e <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a880:	6878      	ldr	r0, [r7, #4]
 800a882:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800a88a:	6878      	ldr	r0, [r7, #4]
 800a88c:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	2200      	movs	r2, #0
 800a892:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800a894:	68bb      	ldr	r3, [r7, #8]
 800a896:	f003 0308 	and.w	r3, r3, #8
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d026      	beq.n	800a8ec <HAL_TIM_IRQHandler+0x120>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	f003 0308 	and.w	r3, r3, #8
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d021      	beq.n	800a8ec <HAL_TIM_IRQHandler+0x120>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	f06f 0208 	mvn.w	r2, #8
 800a8b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	2204      	movs	r2, #4
 800a8b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	69db      	ldr	r3, [r3, #28]
 800a8be:	f003 0303 	and.w	r3, r3, #3
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d005      	beq.n	800a8d2 <HAL_TIM_IRQHandler+0x106>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a8cc:	6878      	ldr	r0, [r7, #4]
 800a8ce:	4798      	blx	r3
 800a8d0:	e009      	b.n	800a8e6 <HAL_TIM_IRQHandler+0x11a>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a8d8:	6878      	ldr	r0, [r7, #4]
 800a8da:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800a8e2:	6878      	ldr	r0, [r7, #4]
 800a8e4:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	2200      	movs	r2, #0
 800a8ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800a8ec:	68bb      	ldr	r3, [r7, #8]
 800a8ee:	f003 0310 	and.w	r3, r3, #16
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d026      	beq.n	800a944 <HAL_TIM_IRQHandler+0x178>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	f003 0310 	and.w	r3, r3, #16
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d021      	beq.n	800a944 <HAL_TIM_IRQHandler+0x178>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	f06f 0210 	mvn.w	r2, #16
 800a908:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	2208      	movs	r2, #8
 800a90e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	69db      	ldr	r3, [r3, #28]
 800a916:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d005      	beq.n	800a92a <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a924:	6878      	ldr	r0, [r7, #4]
 800a926:	4798      	blx	r3
 800a928:	e009      	b.n	800a93e <HAL_TIM_IRQHandler+0x172>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a930:	6878      	ldr	r0, [r7, #4]
 800a932:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800a93a:	6878      	ldr	r0, [r7, #4]
 800a93c:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	2200      	movs	r2, #0
 800a942:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800a944:	68bb      	ldr	r3, [r7, #8]
 800a946:	f003 0301 	and.w	r3, r3, #1
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d00e      	beq.n	800a96c <HAL_TIM_IRQHandler+0x1a0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	f003 0301 	and.w	r3, r3, #1
 800a954:	2b00      	cmp	r3, #0
 800a956:	d009      	beq.n	800a96c <HAL_TIM_IRQHandler+0x1a0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	f06f 0201 	mvn.w	r2, #1
 800a960:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a968:	6878      	ldr	r0, [r7, #4]
 800a96a:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a96c:	68bb      	ldr	r3, [r7, #8]
 800a96e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a972:	2b00      	cmp	r3, #0
 800a974:	d104      	bne.n	800a980 <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800a976:	68bb      	ldr	r3, [r7, #8]
 800a978:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d00e      	beq.n	800a99e <HAL_TIM_IRQHandler+0x1d2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a986:	2b00      	cmp	r3, #0
 800a988:	d009      	beq.n	800a99e <HAL_TIM_IRQHandler+0x1d2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800a992:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800a99a:	6878      	ldr	r0, [r7, #4]
 800a99c:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800a99e:	68bb      	ldr	r3, [r7, #8]
 800a9a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d00e      	beq.n	800a9c6 <HAL_TIM_IRQHandler+0x1fa>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d009      	beq.n	800a9c6 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800a9ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800a9c2:	6878      	ldr	r0, [r7, #4]
 800a9c4:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800a9c6:	68bb      	ldr	r3, [r7, #8]
 800a9c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d00e      	beq.n	800a9ee <HAL_TIM_IRQHandler+0x222>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d009      	beq.n	800a9ee <HAL_TIM_IRQHandler+0x222>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800a9e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a9ea:	6878      	ldr	r0, [r7, #4]
 800a9ec:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800a9ee:	68bb      	ldr	r3, [r7, #8]
 800a9f0:	f003 0320 	and.w	r3, r3, #32
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d00e      	beq.n	800aa16 <HAL_TIM_IRQHandler+0x24a>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	f003 0320 	and.w	r3, r3, #32
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d009      	beq.n	800aa16 <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	f06f 0220 	mvn.w	r2, #32
 800aa0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800aa12:	6878      	ldr	r0, [r7, #4]
 800aa14:	4798      	blx	r3
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800aa16:	68bb      	ldr	r3, [r7, #8]
 800aa18:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d00e      	beq.n	800aa3e <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d009      	beq.n	800aa3e <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800aa32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800aa3a:	6878      	ldr	r0, [r7, #4]
 800aa3c:	4798      	blx	r3
      HAL_TIMEx_EncoderIndexCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800aa3e:	68bb      	ldr	r3, [r7, #8]
 800aa40:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d00e      	beq.n	800aa66 <HAL_TIM_IRQHandler+0x29a>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d009      	beq.n	800aa66 <HAL_TIM_IRQHandler+0x29a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800aa5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800aa62:	6878      	ldr	r0, [r7, #4]
 800aa64:	4798      	blx	r3
      HAL_TIMEx_DirectionChangeCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800aa66:	68bb      	ldr	r3, [r7, #8]
 800aa68:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d00e      	beq.n	800aa8e <HAL_TIM_IRQHandler+0x2c2>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d009      	beq.n	800aa8e <HAL_TIM_IRQHandler+0x2c2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800aa82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800aa8a:	6878      	ldr	r0, [r7, #4]
 800aa8c:	4798      	blx	r3
      HAL_TIMEx_IndexErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800aa8e:	68bb      	ldr	r3, [r7, #8]
 800aa90:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d00e      	beq.n	800aab6 <HAL_TIM_IRQHandler+0x2ea>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d009      	beq.n	800aab6 <HAL_TIM_IRQHandler+0x2ea>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800aaaa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800aab2:	6878      	ldr	r0, [r7, #4]
 800aab4:	4798      	blx	r3
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800aab6:	bf00      	nop
 800aab8:	3710      	adds	r7, #16
 800aaba:	46bd      	mov	sp, r7
 800aabc:	bd80      	pop	{r7, pc}
	...

0800aac0 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800aac0:	b580      	push	{r7, lr}
 800aac2:	b086      	sub	sp, #24
 800aac4:	af00      	add	r7, sp, #0
 800aac6:	60f8      	str	r0, [r7, #12]
 800aac8:	60b9      	str	r1, [r7, #8]
 800aaca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800aacc:	2300      	movs	r3, #0
 800aace:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_CHANNEL_MODE(sConfig->OCMode, Channel));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800aad6:	2b01      	cmp	r3, #1
 800aad8:	d101      	bne.n	800aade <HAL_TIM_OC_ConfigChannel+0x1e>
 800aada:	2302      	movs	r3, #2
 800aadc:	e066      	b.n	800abac <HAL_TIM_OC_ConfigChannel+0xec>
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	2201      	movs	r2, #1
 800aae2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	2b14      	cmp	r3, #20
 800aaea:	d857      	bhi.n	800ab9c <HAL_TIM_OC_ConfigChannel+0xdc>
 800aaec:	a201      	add	r2, pc, #4	@ (adr r2, 800aaf4 <HAL_TIM_OC_ConfigChannel+0x34>)
 800aaee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aaf2:	bf00      	nop
 800aaf4:	0800ab49 	.word	0x0800ab49
 800aaf8:	0800ab9d 	.word	0x0800ab9d
 800aafc:	0800ab9d 	.word	0x0800ab9d
 800ab00:	0800ab9d 	.word	0x0800ab9d
 800ab04:	0800ab57 	.word	0x0800ab57
 800ab08:	0800ab9d 	.word	0x0800ab9d
 800ab0c:	0800ab9d 	.word	0x0800ab9d
 800ab10:	0800ab9d 	.word	0x0800ab9d
 800ab14:	0800ab65 	.word	0x0800ab65
 800ab18:	0800ab9d 	.word	0x0800ab9d
 800ab1c:	0800ab9d 	.word	0x0800ab9d
 800ab20:	0800ab9d 	.word	0x0800ab9d
 800ab24:	0800ab73 	.word	0x0800ab73
 800ab28:	0800ab9d 	.word	0x0800ab9d
 800ab2c:	0800ab9d 	.word	0x0800ab9d
 800ab30:	0800ab9d 	.word	0x0800ab9d
 800ab34:	0800ab81 	.word	0x0800ab81
 800ab38:	0800ab9d 	.word	0x0800ab9d
 800ab3c:	0800ab9d 	.word	0x0800ab9d
 800ab40:	0800ab9d 	.word	0x0800ab9d
 800ab44:	0800ab8f 	.word	0x0800ab8f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	68b9      	ldr	r1, [r7, #8]
 800ab4e:	4618      	mov	r0, r3
 800ab50:	f000 fcc8 	bl	800b4e4 <TIM_OC1_SetConfig>
      break;
 800ab54:	e025      	b.n	800aba2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	68b9      	ldr	r1, [r7, #8]
 800ab5c:	4618      	mov	r0, r3
 800ab5e:	f000 fd5b 	bl	800b618 <TIM_OC2_SetConfig>
      break;
 800ab62:	e01e      	b.n	800aba2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	68b9      	ldr	r1, [r7, #8]
 800ab6a:	4618      	mov	r0, r3
 800ab6c:	f000 fde8 	bl	800b740 <TIM_OC3_SetConfig>
      break;
 800ab70:	e017      	b.n	800aba2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	68b9      	ldr	r1, [r7, #8]
 800ab78:	4618      	mov	r0, r3
 800ab7a:	f000 fe73 	bl	800b864 <TIM_OC4_SetConfig>
      break;
 800ab7e:	e010      	b.n	800aba2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	68b9      	ldr	r1, [r7, #8]
 800ab86:	4618      	mov	r0, r3
 800ab88:	f000 ff00 	bl	800b98c <TIM_OC5_SetConfig>
      break;
 800ab8c:	e009      	b.n	800aba2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	68b9      	ldr	r1, [r7, #8]
 800ab94:	4618      	mov	r0, r3
 800ab96:	f000 ff63 	bl	800ba60 <TIM_OC6_SetConfig>
      break;
 800ab9a:	e002      	b.n	800aba2 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 800ab9c:	2301      	movs	r3, #1
 800ab9e:	75fb      	strb	r3, [r7, #23]
      break;
 800aba0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	2200      	movs	r2, #0
 800aba6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800abaa:	7dfb      	ldrb	r3, [r7, #23]
}
 800abac:	4618      	mov	r0, r3
 800abae:	3718      	adds	r7, #24
 800abb0:	46bd      	mov	sp, r7
 800abb2:	bd80      	pop	{r7, pc}

0800abb4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800abb4:	b580      	push	{r7, lr}
 800abb6:	b086      	sub	sp, #24
 800abb8:	af00      	add	r7, sp, #0
 800abba:	60f8      	str	r0, [r7, #12]
 800abbc:	60b9      	str	r1, [r7, #8]
 800abbe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800abc0:	2300      	movs	r3, #0
 800abc2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800abca:	2b01      	cmp	r3, #1
 800abcc:	d101      	bne.n	800abd2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800abce:	2302      	movs	r3, #2
 800abd0:	e0ff      	b.n	800add2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	2201      	movs	r2, #1
 800abd6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	2b14      	cmp	r3, #20
 800abde:	f200 80f0 	bhi.w	800adc2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800abe2:	a201      	add	r2, pc, #4	@ (adr r2, 800abe8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800abe4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abe8:	0800ac3d 	.word	0x0800ac3d
 800abec:	0800adc3 	.word	0x0800adc3
 800abf0:	0800adc3 	.word	0x0800adc3
 800abf4:	0800adc3 	.word	0x0800adc3
 800abf8:	0800ac7d 	.word	0x0800ac7d
 800abfc:	0800adc3 	.word	0x0800adc3
 800ac00:	0800adc3 	.word	0x0800adc3
 800ac04:	0800adc3 	.word	0x0800adc3
 800ac08:	0800acbf 	.word	0x0800acbf
 800ac0c:	0800adc3 	.word	0x0800adc3
 800ac10:	0800adc3 	.word	0x0800adc3
 800ac14:	0800adc3 	.word	0x0800adc3
 800ac18:	0800acff 	.word	0x0800acff
 800ac1c:	0800adc3 	.word	0x0800adc3
 800ac20:	0800adc3 	.word	0x0800adc3
 800ac24:	0800adc3 	.word	0x0800adc3
 800ac28:	0800ad41 	.word	0x0800ad41
 800ac2c:	0800adc3 	.word	0x0800adc3
 800ac30:	0800adc3 	.word	0x0800adc3
 800ac34:	0800adc3 	.word	0x0800adc3
 800ac38:	0800ad81 	.word	0x0800ad81
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	68b9      	ldr	r1, [r7, #8]
 800ac42:	4618      	mov	r0, r3
 800ac44:	f000 fc4e 	bl	800b4e4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	699a      	ldr	r2, [r3, #24]
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	f042 0208 	orr.w	r2, r2, #8
 800ac56:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	699a      	ldr	r2, [r3, #24]
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	f022 0204 	bic.w	r2, r2, #4
 800ac66:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	6999      	ldr	r1, [r3, #24]
 800ac6e:	68bb      	ldr	r3, [r7, #8]
 800ac70:	691a      	ldr	r2, [r3, #16]
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	430a      	orrs	r2, r1
 800ac78:	619a      	str	r2, [r3, #24]
      break;
 800ac7a:	e0a5      	b.n	800adc8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	68b9      	ldr	r1, [r7, #8]
 800ac82:	4618      	mov	r0, r3
 800ac84:	f000 fcc8 	bl	800b618 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	699a      	ldr	r2, [r3, #24]
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ac96:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	699a      	ldr	r2, [r3, #24]
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800aca6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	6999      	ldr	r1, [r3, #24]
 800acae:	68bb      	ldr	r3, [r7, #8]
 800acb0:	691b      	ldr	r3, [r3, #16]
 800acb2:	021a      	lsls	r2, r3, #8
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	430a      	orrs	r2, r1
 800acba:	619a      	str	r2, [r3, #24]
      break;
 800acbc:	e084      	b.n	800adc8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	68b9      	ldr	r1, [r7, #8]
 800acc4:	4618      	mov	r0, r3
 800acc6:	f000 fd3b 	bl	800b740 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	69da      	ldr	r2, [r3, #28]
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	f042 0208 	orr.w	r2, r2, #8
 800acd8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	69da      	ldr	r2, [r3, #28]
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	f022 0204 	bic.w	r2, r2, #4
 800ace8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	69d9      	ldr	r1, [r3, #28]
 800acf0:	68bb      	ldr	r3, [r7, #8]
 800acf2:	691a      	ldr	r2, [r3, #16]
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	430a      	orrs	r2, r1
 800acfa:	61da      	str	r2, [r3, #28]
      break;
 800acfc:	e064      	b.n	800adc8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	68b9      	ldr	r1, [r7, #8]
 800ad04:	4618      	mov	r0, r3
 800ad06:	f000 fdad 	bl	800b864 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	69da      	ldr	r2, [r3, #28]
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ad18:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	69da      	ldr	r2, [r3, #28]
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ad28:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	69d9      	ldr	r1, [r3, #28]
 800ad30:	68bb      	ldr	r3, [r7, #8]
 800ad32:	691b      	ldr	r3, [r3, #16]
 800ad34:	021a      	lsls	r2, r3, #8
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	430a      	orrs	r2, r1
 800ad3c:	61da      	str	r2, [r3, #28]
      break;
 800ad3e:	e043      	b.n	800adc8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	68b9      	ldr	r1, [r7, #8]
 800ad46:	4618      	mov	r0, r3
 800ad48:	f000 fe20 	bl	800b98c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	f042 0208 	orr.w	r2, r2, #8
 800ad5a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	f022 0204 	bic.w	r2, r2, #4
 800ad6a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800ad72:	68bb      	ldr	r3, [r7, #8]
 800ad74:	691a      	ldr	r2, [r3, #16]
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	430a      	orrs	r2, r1
 800ad7c:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800ad7e:	e023      	b.n	800adc8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	68b9      	ldr	r1, [r7, #8]
 800ad86:	4618      	mov	r0, r3
 800ad88:	f000 fe6a 	bl	800ba60 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ad9a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800adaa:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800adb2:	68bb      	ldr	r3, [r7, #8]
 800adb4:	691b      	ldr	r3, [r3, #16]
 800adb6:	021a      	lsls	r2, r3, #8
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	430a      	orrs	r2, r1
 800adbe:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800adc0:	e002      	b.n	800adc8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800adc2:	2301      	movs	r3, #1
 800adc4:	75fb      	strb	r3, [r7, #23]
      break;
 800adc6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	2200      	movs	r2, #0
 800adcc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800add0:	7dfb      	ldrb	r3, [r7, #23]
}
 800add2:	4618      	mov	r0, r3
 800add4:	3718      	adds	r7, #24
 800add6:	46bd      	mov	sp, r7
 800add8:	bd80      	pop	{r7, pc}
 800adda:	bf00      	nop

0800addc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800addc:	b580      	push	{r7, lr}
 800adde:	b084      	sub	sp, #16
 800ade0:	af00      	add	r7, sp, #0
 800ade2:	6078      	str	r0, [r7, #4]
 800ade4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ade6:	2300      	movs	r3, #0
 800ade8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800adf0:	2b01      	cmp	r3, #1
 800adf2:	d101      	bne.n	800adf8 <HAL_TIM_ConfigClockSource+0x1c>
 800adf4:	2302      	movs	r3, #2
 800adf6:	e0f6      	b.n	800afe6 <HAL_TIM_ConfigClockSource+0x20a>
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	2201      	movs	r2, #1
 800adfc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	2202      	movs	r2, #2
 800ae04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	689b      	ldr	r3, [r3, #8]
 800ae0e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800ae10:	68bb      	ldr	r3, [r7, #8]
 800ae12:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800ae16:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800ae1a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ae1c:	68bb      	ldr	r3, [r7, #8]
 800ae1e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800ae22:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	68ba      	ldr	r2, [r7, #8]
 800ae2a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800ae2c:	683b      	ldr	r3, [r7, #0]
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	4a6f      	ldr	r2, [pc, #444]	@ (800aff0 <HAL_TIM_ConfigClockSource+0x214>)
 800ae32:	4293      	cmp	r3, r2
 800ae34:	f000 80c1 	beq.w	800afba <HAL_TIM_ConfigClockSource+0x1de>
 800ae38:	4a6d      	ldr	r2, [pc, #436]	@ (800aff0 <HAL_TIM_ConfigClockSource+0x214>)
 800ae3a:	4293      	cmp	r3, r2
 800ae3c:	f200 80c6 	bhi.w	800afcc <HAL_TIM_ConfigClockSource+0x1f0>
 800ae40:	4a6c      	ldr	r2, [pc, #432]	@ (800aff4 <HAL_TIM_ConfigClockSource+0x218>)
 800ae42:	4293      	cmp	r3, r2
 800ae44:	f000 80b9 	beq.w	800afba <HAL_TIM_ConfigClockSource+0x1de>
 800ae48:	4a6a      	ldr	r2, [pc, #424]	@ (800aff4 <HAL_TIM_ConfigClockSource+0x218>)
 800ae4a:	4293      	cmp	r3, r2
 800ae4c:	f200 80be 	bhi.w	800afcc <HAL_TIM_ConfigClockSource+0x1f0>
 800ae50:	4a69      	ldr	r2, [pc, #420]	@ (800aff8 <HAL_TIM_ConfigClockSource+0x21c>)
 800ae52:	4293      	cmp	r3, r2
 800ae54:	f000 80b1 	beq.w	800afba <HAL_TIM_ConfigClockSource+0x1de>
 800ae58:	4a67      	ldr	r2, [pc, #412]	@ (800aff8 <HAL_TIM_ConfigClockSource+0x21c>)
 800ae5a:	4293      	cmp	r3, r2
 800ae5c:	f200 80b6 	bhi.w	800afcc <HAL_TIM_ConfigClockSource+0x1f0>
 800ae60:	4a66      	ldr	r2, [pc, #408]	@ (800affc <HAL_TIM_ConfigClockSource+0x220>)
 800ae62:	4293      	cmp	r3, r2
 800ae64:	f000 80a9 	beq.w	800afba <HAL_TIM_ConfigClockSource+0x1de>
 800ae68:	4a64      	ldr	r2, [pc, #400]	@ (800affc <HAL_TIM_ConfigClockSource+0x220>)
 800ae6a:	4293      	cmp	r3, r2
 800ae6c:	f200 80ae 	bhi.w	800afcc <HAL_TIM_ConfigClockSource+0x1f0>
 800ae70:	4a63      	ldr	r2, [pc, #396]	@ (800b000 <HAL_TIM_ConfigClockSource+0x224>)
 800ae72:	4293      	cmp	r3, r2
 800ae74:	f000 80a1 	beq.w	800afba <HAL_TIM_ConfigClockSource+0x1de>
 800ae78:	4a61      	ldr	r2, [pc, #388]	@ (800b000 <HAL_TIM_ConfigClockSource+0x224>)
 800ae7a:	4293      	cmp	r3, r2
 800ae7c:	f200 80a6 	bhi.w	800afcc <HAL_TIM_ConfigClockSource+0x1f0>
 800ae80:	4a60      	ldr	r2, [pc, #384]	@ (800b004 <HAL_TIM_ConfigClockSource+0x228>)
 800ae82:	4293      	cmp	r3, r2
 800ae84:	f000 8099 	beq.w	800afba <HAL_TIM_ConfigClockSource+0x1de>
 800ae88:	4a5e      	ldr	r2, [pc, #376]	@ (800b004 <HAL_TIM_ConfigClockSource+0x228>)
 800ae8a:	4293      	cmp	r3, r2
 800ae8c:	f200 809e 	bhi.w	800afcc <HAL_TIM_ConfigClockSource+0x1f0>
 800ae90:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800ae94:	f000 8091 	beq.w	800afba <HAL_TIM_ConfigClockSource+0x1de>
 800ae98:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800ae9c:	f200 8096 	bhi.w	800afcc <HAL_TIM_ConfigClockSource+0x1f0>
 800aea0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800aea4:	f000 8089 	beq.w	800afba <HAL_TIM_ConfigClockSource+0x1de>
 800aea8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800aeac:	f200 808e 	bhi.w	800afcc <HAL_TIM_ConfigClockSource+0x1f0>
 800aeb0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800aeb4:	d03e      	beq.n	800af34 <HAL_TIM_ConfigClockSource+0x158>
 800aeb6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800aeba:	f200 8087 	bhi.w	800afcc <HAL_TIM_ConfigClockSource+0x1f0>
 800aebe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800aec2:	f000 8086 	beq.w	800afd2 <HAL_TIM_ConfigClockSource+0x1f6>
 800aec6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800aeca:	d87f      	bhi.n	800afcc <HAL_TIM_ConfigClockSource+0x1f0>
 800aecc:	2b70      	cmp	r3, #112	@ 0x70
 800aece:	d01a      	beq.n	800af06 <HAL_TIM_ConfigClockSource+0x12a>
 800aed0:	2b70      	cmp	r3, #112	@ 0x70
 800aed2:	d87b      	bhi.n	800afcc <HAL_TIM_ConfigClockSource+0x1f0>
 800aed4:	2b60      	cmp	r3, #96	@ 0x60
 800aed6:	d050      	beq.n	800af7a <HAL_TIM_ConfigClockSource+0x19e>
 800aed8:	2b60      	cmp	r3, #96	@ 0x60
 800aeda:	d877      	bhi.n	800afcc <HAL_TIM_ConfigClockSource+0x1f0>
 800aedc:	2b50      	cmp	r3, #80	@ 0x50
 800aede:	d03c      	beq.n	800af5a <HAL_TIM_ConfigClockSource+0x17e>
 800aee0:	2b50      	cmp	r3, #80	@ 0x50
 800aee2:	d873      	bhi.n	800afcc <HAL_TIM_ConfigClockSource+0x1f0>
 800aee4:	2b40      	cmp	r3, #64	@ 0x40
 800aee6:	d058      	beq.n	800af9a <HAL_TIM_ConfigClockSource+0x1be>
 800aee8:	2b40      	cmp	r3, #64	@ 0x40
 800aeea:	d86f      	bhi.n	800afcc <HAL_TIM_ConfigClockSource+0x1f0>
 800aeec:	2b30      	cmp	r3, #48	@ 0x30
 800aeee:	d064      	beq.n	800afba <HAL_TIM_ConfigClockSource+0x1de>
 800aef0:	2b30      	cmp	r3, #48	@ 0x30
 800aef2:	d86b      	bhi.n	800afcc <HAL_TIM_ConfigClockSource+0x1f0>
 800aef4:	2b20      	cmp	r3, #32
 800aef6:	d060      	beq.n	800afba <HAL_TIM_ConfigClockSource+0x1de>
 800aef8:	2b20      	cmp	r3, #32
 800aefa:	d867      	bhi.n	800afcc <HAL_TIM_ConfigClockSource+0x1f0>
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d05c      	beq.n	800afba <HAL_TIM_ConfigClockSource+0x1de>
 800af00:	2b10      	cmp	r3, #16
 800af02:	d05a      	beq.n	800afba <HAL_TIM_ConfigClockSource+0x1de>
 800af04:	e062      	b.n	800afcc <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800af0a:	683b      	ldr	r3, [r7, #0]
 800af0c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800af0e:	683b      	ldr	r3, [r7, #0]
 800af10:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800af12:	683b      	ldr	r3, [r7, #0]
 800af14:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800af16:	f000 fe8b 	bl	800bc30 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	689b      	ldr	r3, [r3, #8]
 800af20:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800af22:	68bb      	ldr	r3, [r7, #8]
 800af24:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800af28:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	68ba      	ldr	r2, [r7, #8]
 800af30:	609a      	str	r2, [r3, #8]
      break;
 800af32:	e04f      	b.n	800afd4 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800af38:	683b      	ldr	r3, [r7, #0]
 800af3a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800af3c:	683b      	ldr	r3, [r7, #0]
 800af3e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800af40:	683b      	ldr	r3, [r7, #0]
 800af42:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800af44:	f000 fe74 	bl	800bc30 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	689a      	ldr	r2, [r3, #8]
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800af56:	609a      	str	r2, [r3, #8]
      break;
 800af58:	e03c      	b.n	800afd4 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800af5e:	683b      	ldr	r3, [r7, #0]
 800af60:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800af62:	683b      	ldr	r3, [r7, #0]
 800af64:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800af66:	461a      	mov	r2, r3
 800af68:	f000 fde6 	bl	800bb38 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	2150      	movs	r1, #80	@ 0x50
 800af72:	4618      	mov	r0, r3
 800af74:	f000 fe3f 	bl	800bbf6 <TIM_ITRx_SetConfig>
      break;
 800af78:	e02c      	b.n	800afd4 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800af7e:	683b      	ldr	r3, [r7, #0]
 800af80:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800af82:	683b      	ldr	r3, [r7, #0]
 800af84:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800af86:	461a      	mov	r2, r3
 800af88:	f000 fe05 	bl	800bb96 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	2160      	movs	r1, #96	@ 0x60
 800af92:	4618      	mov	r0, r3
 800af94:	f000 fe2f 	bl	800bbf6 <TIM_ITRx_SetConfig>
      break;
 800af98:	e01c      	b.n	800afd4 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800af9e:	683b      	ldr	r3, [r7, #0]
 800afa0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800afa2:	683b      	ldr	r3, [r7, #0]
 800afa4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800afa6:	461a      	mov	r2, r3
 800afa8:	f000 fdc6 	bl	800bb38 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	2140      	movs	r1, #64	@ 0x40
 800afb2:	4618      	mov	r0, r3
 800afb4:	f000 fe1f 	bl	800bbf6 <TIM_ITRx_SetConfig>
      break;
 800afb8:	e00c      	b.n	800afd4 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	681a      	ldr	r2, [r3, #0]
 800afbe:	683b      	ldr	r3, [r7, #0]
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	4619      	mov	r1, r3
 800afc4:	4610      	mov	r0, r2
 800afc6:	f000 fe16 	bl	800bbf6 <TIM_ITRx_SetConfig>
      break;
 800afca:	e003      	b.n	800afd4 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 800afcc:	2301      	movs	r3, #1
 800afce:	73fb      	strb	r3, [r7, #15]
      break;
 800afd0:	e000      	b.n	800afd4 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800afd2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	2201      	movs	r2, #1
 800afd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	2200      	movs	r2, #0
 800afe0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800afe4:	7bfb      	ldrb	r3, [r7, #15]
}
 800afe6:	4618      	mov	r0, r3
 800afe8:	3710      	adds	r7, #16
 800afea:	46bd      	mov	sp, r7
 800afec:	bd80      	pop	{r7, pc}
 800afee:	bf00      	nop
 800aff0:	00100070 	.word	0x00100070
 800aff4:	00100060 	.word	0x00100060
 800aff8:	00100050 	.word	0x00100050
 800affc:	00100040 	.word	0x00100040
 800b000:	00100030 	.word	0x00100030
 800b004:	00100020 	.word	0x00100020

0800b008 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800b008:	b480      	push	{r7}
 800b00a:	b083      	sub	sp, #12
 800b00c:	af00      	add	r7, sp, #0
 800b00e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 800b010:	bf00      	nop
 800b012:	370c      	adds	r7, #12
 800b014:	46bd      	mov	sp, r7
 800b016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b01a:	4770      	bx	lr

0800b01c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b01c:	b480      	push	{r7}
 800b01e:	b083      	sub	sp, #12
 800b020:	af00      	add	r7, sp, #0
 800b022:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b024:	bf00      	nop
 800b026:	370c      	adds	r7, #12
 800b028:	46bd      	mov	sp, r7
 800b02a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b02e:	4770      	bx	lr

0800b030 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b030:	b480      	push	{r7}
 800b032:	b083      	sub	sp, #12
 800b034:	af00      	add	r7, sp, #0
 800b036:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b038:	bf00      	nop
 800b03a:	370c      	adds	r7, #12
 800b03c:	46bd      	mov	sp, r7
 800b03e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b042:	4770      	bx	lr

0800b044 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800b044:	b480      	push	{r7}
 800b046:	b083      	sub	sp, #12
 800b048:	af00      	add	r7, sp, #0
 800b04a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 800b04c:	bf00      	nop
 800b04e:	370c      	adds	r7, #12
 800b050:	46bd      	mov	sp, r7
 800b052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b056:	4770      	bx	lr

0800b058 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b058:	b480      	push	{r7}
 800b05a:	b083      	sub	sp, #12
 800b05c:	af00      	add	r7, sp, #0
 800b05e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b060:	bf00      	nop
 800b062:	370c      	adds	r7, #12
 800b064:	46bd      	mov	sp, r7
 800b066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b06a:	4770      	bx	lr

0800b06c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800b06c:	b480      	push	{r7}
 800b06e:	b083      	sub	sp, #12
 800b070:	af00      	add	r7, sp, #0
 800b072:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800b074:	bf00      	nop
 800b076:	370c      	adds	r7, #12
 800b078:	46bd      	mov	sp, r7
 800b07a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b07e:	4770      	bx	lr

0800b080 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b080:	b480      	push	{r7}
 800b082:	b083      	sub	sp, #12
 800b084:	af00      	add	r7, sp, #0
 800b086:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b088:	bf00      	nop
 800b08a:	370c      	adds	r7, #12
 800b08c:	46bd      	mov	sp, r7
 800b08e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b092:	4770      	bx	lr

0800b094 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800b094:	b480      	push	{r7}
 800b096:	b083      	sub	sp, #12
 800b098:	af00      	add	r7, sp, #0
 800b09a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 800b09c:	bf00      	nop
 800b09e:	370c      	adds	r7, #12
 800b0a0:	46bd      	mov	sp, r7
 800b0a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0a6:	4770      	bx	lr

0800b0a8 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800b0a8:	b480      	push	{r7}
 800b0aa:	b083      	sub	sp, #12
 800b0ac:	af00      	add	r7, sp, #0
 800b0ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800b0b0:	bf00      	nop
 800b0b2:	370c      	adds	r7, #12
 800b0b4:	46bd      	mov	sp, r7
 800b0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ba:	4770      	bx	lr

0800b0bc <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 800b0bc:	b480      	push	{r7}
 800b0be:	b087      	sub	sp, #28
 800b0c0:	af00      	add	r7, sp, #0
 800b0c2:	60f8      	str	r0, [r7, #12]
 800b0c4:	460b      	mov	r3, r1
 800b0c6:	607a      	str	r2, [r7, #4]
 800b0c8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800b0ca:	2300      	movs	r3, #0
 800b0cc:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d101      	bne.n	800b0d8 <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 800b0d4:	2301      	movs	r3, #1
 800b0d6:	e14a      	b.n	800b36e <HAL_TIM_RegisterCallback+0x2b2>
  }

  if (htim->State == HAL_TIM_STATE_READY)
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b0de:	b2db      	uxtb	r3, r3
 800b0e0:	2b01      	cmp	r3, #1
 800b0e2:	f040 80dd 	bne.w	800b2a0 <HAL_TIM_RegisterCallback+0x1e4>
  {
    switch (CallbackID)
 800b0e6:	7afb      	ldrb	r3, [r7, #11]
 800b0e8:	2b1f      	cmp	r3, #31
 800b0ea:	f200 80d6 	bhi.w	800b29a <HAL_TIM_RegisterCallback+0x1de>
 800b0ee:	a201      	add	r2, pc, #4	@ (adr r2, 800b0f4 <HAL_TIM_RegisterCallback+0x38>)
 800b0f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0f4:	0800b175 	.word	0x0800b175
 800b0f8:	0800b17d 	.word	0x0800b17d
 800b0fc:	0800b185 	.word	0x0800b185
 800b100:	0800b18d 	.word	0x0800b18d
 800b104:	0800b195 	.word	0x0800b195
 800b108:	0800b19d 	.word	0x0800b19d
 800b10c:	0800b1a5 	.word	0x0800b1a5
 800b110:	0800b1ad 	.word	0x0800b1ad
 800b114:	0800b1b5 	.word	0x0800b1b5
 800b118:	0800b1bd 	.word	0x0800b1bd
 800b11c:	0800b1c5 	.word	0x0800b1c5
 800b120:	0800b1cd 	.word	0x0800b1cd
 800b124:	0800b1d5 	.word	0x0800b1d5
 800b128:	0800b1dd 	.word	0x0800b1dd
 800b12c:	0800b1e7 	.word	0x0800b1e7
 800b130:	0800b1f1 	.word	0x0800b1f1
 800b134:	0800b1fb 	.word	0x0800b1fb
 800b138:	0800b205 	.word	0x0800b205
 800b13c:	0800b20f 	.word	0x0800b20f
 800b140:	0800b219 	.word	0x0800b219
 800b144:	0800b223 	.word	0x0800b223
 800b148:	0800b22d 	.word	0x0800b22d
 800b14c:	0800b237 	.word	0x0800b237
 800b150:	0800b241 	.word	0x0800b241
 800b154:	0800b24b 	.word	0x0800b24b
 800b158:	0800b255 	.word	0x0800b255
 800b15c:	0800b25f 	.word	0x0800b25f
 800b160:	0800b269 	.word	0x0800b269
 800b164:	0800b273 	.word	0x0800b273
 800b168:	0800b27d 	.word	0x0800b27d
 800b16c:	0800b287 	.word	0x0800b287
 800b170:	0800b291 	.word	0x0800b291
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	687a      	ldr	r2, [r7, #4]
 800b178:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 800b17a:	e0f7      	b.n	800b36c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 800b17c:	68fb      	ldr	r3, [r7, #12]
 800b17e:	687a      	ldr	r2, [r7, #4]
 800b180:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 800b182:	e0f3      	b.n	800b36c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	687a      	ldr	r2, [r7, #4]
 800b188:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 800b18a:	e0ef      	b.n	800b36c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	687a      	ldr	r2, [r7, #4]
 800b190:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 800b192:	e0eb      	b.n	800b36c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	687a      	ldr	r2, [r7, #4]
 800b198:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 800b19a:	e0e7      	b.n	800b36c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	687a      	ldr	r2, [r7, #4]
 800b1a0:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 800b1a2:	e0e3      	b.n	800b36c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	687a      	ldr	r2, [r7, #4]
 800b1a8:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 800b1aa:	e0df      	b.n	800b36c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 800b1ac:	68fb      	ldr	r3, [r7, #12]
 800b1ae:	687a      	ldr	r2, [r7, #4]
 800b1b0:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 800b1b2:	e0db      	b.n	800b36c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	687a      	ldr	r2, [r7, #4]
 800b1b8:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 800b1ba:	e0d7      	b.n	800b36c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	687a      	ldr	r2, [r7, #4]
 800b1c0:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 800b1c2:	e0d3      	b.n	800b36c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	687a      	ldr	r2, [r7, #4]
 800b1c8:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 800b1ca:	e0cf      	b.n	800b36c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	687a      	ldr	r2, [r7, #4]
 800b1d0:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 800b1d2:	e0cb      	b.n	800b36c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	687a      	ldr	r2, [r7, #4]
 800b1d8:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 800b1da:	e0c7      	b.n	800b36c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	687a      	ldr	r2, [r7, #4]
 800b1e0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 800b1e4:	e0c2      	b.n	800b36c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	687a      	ldr	r2, [r7, #4]
 800b1ea:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        break;
 800b1ee:	e0bd      	b.n	800b36c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	687a      	ldr	r2, [r7, #4]
 800b1f4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        break;
 800b1f8:	e0b8      	b.n	800b36c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	687a      	ldr	r2, [r7, #4]
 800b1fe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        break;
 800b202:	e0b3      	b.n	800b36c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	687a      	ldr	r2, [r7, #4]
 800b208:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        break;
 800b20c:	e0ae      	b.n	800b36c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	687a      	ldr	r2, [r7, #4]
 800b212:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 800b216:	e0a9      	b.n	800b36c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	687a      	ldr	r2, [r7, #4]
 800b21c:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 800b220:	e0a4      	b.n	800b36c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	687a      	ldr	r2, [r7, #4]
 800b226:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 800b22a:	e09f      	b.n	800b36c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	687a      	ldr	r2, [r7, #4]
 800b230:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 800b234:	e09a      	b.n	800b36c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	687a      	ldr	r2, [r7, #4]
 800b23a:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 800b23e:	e095      	b.n	800b36c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	687a      	ldr	r2, [r7, #4]
 800b244:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 800b248:	e090      	b.n	800b36c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	687a      	ldr	r2, [r7, #4]
 800b24e:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 800b252:	e08b      	b.n	800b36c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	687a      	ldr	r2, [r7, #4]
 800b258:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 800b25c:	e086      	b.n	800b36c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	687a      	ldr	r2, [r7, #4]
 800b262:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 800b266:	e081      	b.n	800b36c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK2_CB_ID :
        htim->Break2Callback                       = pCallback;
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	687a      	ldr	r2, [r7, #4]
 800b26c:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 800b270:	e07c      	b.n	800b36c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_INDEX_CB_ID :
        htim->EncoderIndexCallback                 = pCallback;
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	687a      	ldr	r2, [r7, #4]
 800b276:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 800b27a:	e077      	b.n	800b36c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_DIRECTION_CHANGE_CB_ID :
        htim->DirectionChangeCallback              = pCallback;
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	687a      	ldr	r2, [r7, #4]
 800b280:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
        break;
 800b284:	e072      	b.n	800b36c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_INDEX_ERROR_CB_ID :
        htim->IndexErrorCallback                   = pCallback;
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	687a      	ldr	r2, [r7, #4]
 800b28a:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800b28e:	e06d      	b.n	800b36c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRANSITION_ERROR_CB_ID :
        htim->TransitionErrorCallback              = pCallback;
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	687a      	ldr	r2, [r7, #4]
 800b294:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 800b298:	e068      	b.n	800b36c <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 800b29a:	2301      	movs	r3, #1
 800b29c:	75fb      	strb	r3, [r7, #23]
        break;
 800b29e:	e065      	b.n	800b36c <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b2a6:	b2db      	uxtb	r3, r3
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d15d      	bne.n	800b368 <HAL_TIM_RegisterCallback+0x2ac>
  {
    switch (CallbackID)
 800b2ac:	7afb      	ldrb	r3, [r7, #11]
 800b2ae:	2b0d      	cmp	r3, #13
 800b2b0:	d857      	bhi.n	800b362 <HAL_TIM_RegisterCallback+0x2a6>
 800b2b2:	a201      	add	r2, pc, #4	@ (adr r2, 800b2b8 <HAL_TIM_RegisterCallback+0x1fc>)
 800b2b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2b8:	0800b2f1 	.word	0x0800b2f1
 800b2bc:	0800b2f9 	.word	0x0800b2f9
 800b2c0:	0800b301 	.word	0x0800b301
 800b2c4:	0800b309 	.word	0x0800b309
 800b2c8:	0800b311 	.word	0x0800b311
 800b2cc:	0800b319 	.word	0x0800b319
 800b2d0:	0800b321 	.word	0x0800b321
 800b2d4:	0800b329 	.word	0x0800b329
 800b2d8:	0800b331 	.word	0x0800b331
 800b2dc:	0800b339 	.word	0x0800b339
 800b2e0:	0800b341 	.word	0x0800b341
 800b2e4:	0800b349 	.word	0x0800b349
 800b2e8:	0800b351 	.word	0x0800b351
 800b2ec:	0800b359 	.word	0x0800b359
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	687a      	ldr	r2, [r7, #4]
 800b2f4:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 800b2f6:	e039      	b.n	800b36c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	687a      	ldr	r2, [r7, #4]
 800b2fc:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 800b2fe:	e035      	b.n	800b36c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	687a      	ldr	r2, [r7, #4]
 800b304:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 800b306:	e031      	b.n	800b36c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	687a      	ldr	r2, [r7, #4]
 800b30c:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 800b30e:	e02d      	b.n	800b36c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	687a      	ldr	r2, [r7, #4]
 800b314:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 800b316:	e029      	b.n	800b36c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	687a      	ldr	r2, [r7, #4]
 800b31c:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 800b31e:	e025      	b.n	800b36c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	687a      	ldr	r2, [r7, #4]
 800b324:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 800b326:	e021      	b.n	800b36c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	687a      	ldr	r2, [r7, #4]
 800b32c:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 800b32e:	e01d      	b.n	800b36c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 800b330:	68fb      	ldr	r3, [r7, #12]
 800b332:	687a      	ldr	r2, [r7, #4]
 800b334:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 800b336:	e019      	b.n	800b36c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	687a      	ldr	r2, [r7, #4]
 800b33c:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 800b33e:	e015      	b.n	800b36c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	687a      	ldr	r2, [r7, #4]
 800b344:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 800b346:	e011      	b.n	800b36c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	687a      	ldr	r2, [r7, #4]
 800b34c:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 800b34e:	e00d      	b.n	800b36c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	687a      	ldr	r2, [r7, #4]
 800b354:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 800b356:	e009      	b.n	800b36c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 800b358:	68fb      	ldr	r3, [r7, #12]
 800b35a:	687a      	ldr	r2, [r7, #4]
 800b35c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 800b360:	e004      	b.n	800b36c <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 800b362:	2301      	movs	r3, #1
 800b364:	75fb      	strb	r3, [r7, #23]
        break;
 800b366:	e001      	b.n	800b36c <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 800b368:	2301      	movs	r3, #1
 800b36a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800b36c:	7dfb      	ldrb	r3, [r7, #23]
}
 800b36e:	4618      	mov	r0, r3
 800b370:	371c      	adds	r7, #28
 800b372:	46bd      	mov	sp, r7
 800b374:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b378:	4770      	bx	lr
 800b37a:	bf00      	nop

0800b37c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b37c:	b480      	push	{r7}
 800b37e:	b085      	sub	sp, #20
 800b380:	af00      	add	r7, sp, #0
 800b382:	6078      	str	r0, [r7, #4]
 800b384:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	4a4c      	ldr	r2, [pc, #304]	@ (800b4c0 <TIM_Base_SetConfig+0x144>)
 800b390:	4293      	cmp	r3, r2
 800b392:	d017      	beq.n	800b3c4 <TIM_Base_SetConfig+0x48>
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b39a:	d013      	beq.n	800b3c4 <TIM_Base_SetConfig+0x48>
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	4a49      	ldr	r2, [pc, #292]	@ (800b4c4 <TIM_Base_SetConfig+0x148>)
 800b3a0:	4293      	cmp	r3, r2
 800b3a2:	d00f      	beq.n	800b3c4 <TIM_Base_SetConfig+0x48>
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	4a48      	ldr	r2, [pc, #288]	@ (800b4c8 <TIM_Base_SetConfig+0x14c>)
 800b3a8:	4293      	cmp	r3, r2
 800b3aa:	d00b      	beq.n	800b3c4 <TIM_Base_SetConfig+0x48>
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	4a47      	ldr	r2, [pc, #284]	@ (800b4cc <TIM_Base_SetConfig+0x150>)
 800b3b0:	4293      	cmp	r3, r2
 800b3b2:	d007      	beq.n	800b3c4 <TIM_Base_SetConfig+0x48>
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	4a46      	ldr	r2, [pc, #280]	@ (800b4d0 <TIM_Base_SetConfig+0x154>)
 800b3b8:	4293      	cmp	r3, r2
 800b3ba:	d003      	beq.n	800b3c4 <TIM_Base_SetConfig+0x48>
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	4a45      	ldr	r2, [pc, #276]	@ (800b4d4 <TIM_Base_SetConfig+0x158>)
 800b3c0:	4293      	cmp	r3, r2
 800b3c2:	d108      	bne.n	800b3d6 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b3c4:	68fb      	ldr	r3, [r7, #12]
 800b3c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b3ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b3cc:	683b      	ldr	r3, [r7, #0]
 800b3ce:	685b      	ldr	r3, [r3, #4]
 800b3d0:	68fa      	ldr	r2, [r7, #12]
 800b3d2:	4313      	orrs	r3, r2
 800b3d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	4a39      	ldr	r2, [pc, #228]	@ (800b4c0 <TIM_Base_SetConfig+0x144>)
 800b3da:	4293      	cmp	r3, r2
 800b3dc:	d023      	beq.n	800b426 <TIM_Base_SetConfig+0xaa>
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b3e4:	d01f      	beq.n	800b426 <TIM_Base_SetConfig+0xaa>
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	4a36      	ldr	r2, [pc, #216]	@ (800b4c4 <TIM_Base_SetConfig+0x148>)
 800b3ea:	4293      	cmp	r3, r2
 800b3ec:	d01b      	beq.n	800b426 <TIM_Base_SetConfig+0xaa>
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	4a35      	ldr	r2, [pc, #212]	@ (800b4c8 <TIM_Base_SetConfig+0x14c>)
 800b3f2:	4293      	cmp	r3, r2
 800b3f4:	d017      	beq.n	800b426 <TIM_Base_SetConfig+0xaa>
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	4a34      	ldr	r2, [pc, #208]	@ (800b4cc <TIM_Base_SetConfig+0x150>)
 800b3fa:	4293      	cmp	r3, r2
 800b3fc:	d013      	beq.n	800b426 <TIM_Base_SetConfig+0xaa>
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	4a33      	ldr	r2, [pc, #204]	@ (800b4d0 <TIM_Base_SetConfig+0x154>)
 800b402:	4293      	cmp	r3, r2
 800b404:	d00f      	beq.n	800b426 <TIM_Base_SetConfig+0xaa>
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	4a33      	ldr	r2, [pc, #204]	@ (800b4d8 <TIM_Base_SetConfig+0x15c>)
 800b40a:	4293      	cmp	r3, r2
 800b40c:	d00b      	beq.n	800b426 <TIM_Base_SetConfig+0xaa>
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	4a32      	ldr	r2, [pc, #200]	@ (800b4dc <TIM_Base_SetConfig+0x160>)
 800b412:	4293      	cmp	r3, r2
 800b414:	d007      	beq.n	800b426 <TIM_Base_SetConfig+0xaa>
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	4a31      	ldr	r2, [pc, #196]	@ (800b4e0 <TIM_Base_SetConfig+0x164>)
 800b41a:	4293      	cmp	r3, r2
 800b41c:	d003      	beq.n	800b426 <TIM_Base_SetConfig+0xaa>
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	4a2c      	ldr	r2, [pc, #176]	@ (800b4d4 <TIM_Base_SetConfig+0x158>)
 800b422:	4293      	cmp	r3, r2
 800b424:	d108      	bne.n	800b438 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b42c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b42e:	683b      	ldr	r3, [r7, #0]
 800b430:	68db      	ldr	r3, [r3, #12]
 800b432:	68fa      	ldr	r2, [r7, #12]
 800b434:	4313      	orrs	r3, r2
 800b436:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800b43e:	683b      	ldr	r3, [r7, #0]
 800b440:	695b      	ldr	r3, [r3, #20]
 800b442:	4313      	orrs	r3, r2
 800b444:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	68fa      	ldr	r2, [r7, #12]
 800b44a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b44c:	683b      	ldr	r3, [r7, #0]
 800b44e:	689a      	ldr	r2, [r3, #8]
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b454:	683b      	ldr	r3, [r7, #0]
 800b456:	681a      	ldr	r2, [r3, #0]
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	4a18      	ldr	r2, [pc, #96]	@ (800b4c0 <TIM_Base_SetConfig+0x144>)
 800b460:	4293      	cmp	r3, r2
 800b462:	d013      	beq.n	800b48c <TIM_Base_SetConfig+0x110>
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	4a1a      	ldr	r2, [pc, #104]	@ (800b4d0 <TIM_Base_SetConfig+0x154>)
 800b468:	4293      	cmp	r3, r2
 800b46a:	d00f      	beq.n	800b48c <TIM_Base_SetConfig+0x110>
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	4a1a      	ldr	r2, [pc, #104]	@ (800b4d8 <TIM_Base_SetConfig+0x15c>)
 800b470:	4293      	cmp	r3, r2
 800b472:	d00b      	beq.n	800b48c <TIM_Base_SetConfig+0x110>
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	4a19      	ldr	r2, [pc, #100]	@ (800b4dc <TIM_Base_SetConfig+0x160>)
 800b478:	4293      	cmp	r3, r2
 800b47a:	d007      	beq.n	800b48c <TIM_Base_SetConfig+0x110>
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	4a18      	ldr	r2, [pc, #96]	@ (800b4e0 <TIM_Base_SetConfig+0x164>)
 800b480:	4293      	cmp	r3, r2
 800b482:	d003      	beq.n	800b48c <TIM_Base_SetConfig+0x110>
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	4a13      	ldr	r2, [pc, #76]	@ (800b4d4 <TIM_Base_SetConfig+0x158>)
 800b488:	4293      	cmp	r3, r2
 800b48a:	d103      	bne.n	800b494 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b48c:	683b      	ldr	r3, [r7, #0]
 800b48e:	691a      	ldr	r2, [r3, #16]
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	2201      	movs	r2, #1
 800b498:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	691b      	ldr	r3, [r3, #16]
 800b49e:	f003 0301 	and.w	r3, r3, #1
 800b4a2:	2b01      	cmp	r3, #1
 800b4a4:	d105      	bne.n	800b4b2 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	691b      	ldr	r3, [r3, #16]
 800b4aa:	f023 0201 	bic.w	r2, r3, #1
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	611a      	str	r2, [r3, #16]
  }
}
 800b4b2:	bf00      	nop
 800b4b4:	3714      	adds	r7, #20
 800b4b6:	46bd      	mov	sp, r7
 800b4b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4bc:	4770      	bx	lr
 800b4be:	bf00      	nop
 800b4c0:	40012c00 	.word	0x40012c00
 800b4c4:	40000400 	.word	0x40000400
 800b4c8:	40000800 	.word	0x40000800
 800b4cc:	40000c00 	.word	0x40000c00
 800b4d0:	40013400 	.word	0x40013400
 800b4d4:	40015000 	.word	0x40015000
 800b4d8:	40014000 	.word	0x40014000
 800b4dc:	40014400 	.word	0x40014400
 800b4e0:	40014800 	.word	0x40014800

0800b4e4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b4e4:	b480      	push	{r7}
 800b4e6:	b087      	sub	sp, #28
 800b4e8:	af00      	add	r7, sp, #0
 800b4ea:	6078      	str	r0, [r7, #4]
 800b4ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	6a1b      	ldr	r3, [r3, #32]
 800b4f2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	6a1b      	ldr	r3, [r3, #32]
 800b4f8:	f023 0201 	bic.w	r2, r3, #1
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	685b      	ldr	r3, [r3, #4]
 800b504:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	699b      	ldr	r3, [r3, #24]
 800b50a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b512:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b516:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	f023 0303 	bic.w	r3, r3, #3
 800b51e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b520:	683b      	ldr	r3, [r7, #0]
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	68fa      	ldr	r2, [r7, #12]
 800b526:	4313      	orrs	r3, r2
 800b528:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b52a:	697b      	ldr	r3, [r7, #20]
 800b52c:	f023 0302 	bic.w	r3, r3, #2
 800b530:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b532:	683b      	ldr	r3, [r7, #0]
 800b534:	689b      	ldr	r3, [r3, #8]
 800b536:	697a      	ldr	r2, [r7, #20]
 800b538:	4313      	orrs	r3, r2
 800b53a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	4a30      	ldr	r2, [pc, #192]	@ (800b600 <TIM_OC1_SetConfig+0x11c>)
 800b540:	4293      	cmp	r3, r2
 800b542:	d013      	beq.n	800b56c <TIM_OC1_SetConfig+0x88>
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	4a2f      	ldr	r2, [pc, #188]	@ (800b604 <TIM_OC1_SetConfig+0x120>)
 800b548:	4293      	cmp	r3, r2
 800b54a:	d00f      	beq.n	800b56c <TIM_OC1_SetConfig+0x88>
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	4a2e      	ldr	r2, [pc, #184]	@ (800b608 <TIM_OC1_SetConfig+0x124>)
 800b550:	4293      	cmp	r3, r2
 800b552:	d00b      	beq.n	800b56c <TIM_OC1_SetConfig+0x88>
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	4a2d      	ldr	r2, [pc, #180]	@ (800b60c <TIM_OC1_SetConfig+0x128>)
 800b558:	4293      	cmp	r3, r2
 800b55a:	d007      	beq.n	800b56c <TIM_OC1_SetConfig+0x88>
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	4a2c      	ldr	r2, [pc, #176]	@ (800b610 <TIM_OC1_SetConfig+0x12c>)
 800b560:	4293      	cmp	r3, r2
 800b562:	d003      	beq.n	800b56c <TIM_OC1_SetConfig+0x88>
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	4a2b      	ldr	r2, [pc, #172]	@ (800b614 <TIM_OC1_SetConfig+0x130>)
 800b568:	4293      	cmp	r3, r2
 800b56a:	d10c      	bne.n	800b586 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b56c:	697b      	ldr	r3, [r7, #20]
 800b56e:	f023 0308 	bic.w	r3, r3, #8
 800b572:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b574:	683b      	ldr	r3, [r7, #0]
 800b576:	68db      	ldr	r3, [r3, #12]
 800b578:	697a      	ldr	r2, [r7, #20]
 800b57a:	4313      	orrs	r3, r2
 800b57c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b57e:	697b      	ldr	r3, [r7, #20]
 800b580:	f023 0304 	bic.w	r3, r3, #4
 800b584:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	4a1d      	ldr	r2, [pc, #116]	@ (800b600 <TIM_OC1_SetConfig+0x11c>)
 800b58a:	4293      	cmp	r3, r2
 800b58c:	d013      	beq.n	800b5b6 <TIM_OC1_SetConfig+0xd2>
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	4a1c      	ldr	r2, [pc, #112]	@ (800b604 <TIM_OC1_SetConfig+0x120>)
 800b592:	4293      	cmp	r3, r2
 800b594:	d00f      	beq.n	800b5b6 <TIM_OC1_SetConfig+0xd2>
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	4a1b      	ldr	r2, [pc, #108]	@ (800b608 <TIM_OC1_SetConfig+0x124>)
 800b59a:	4293      	cmp	r3, r2
 800b59c:	d00b      	beq.n	800b5b6 <TIM_OC1_SetConfig+0xd2>
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	4a1a      	ldr	r2, [pc, #104]	@ (800b60c <TIM_OC1_SetConfig+0x128>)
 800b5a2:	4293      	cmp	r3, r2
 800b5a4:	d007      	beq.n	800b5b6 <TIM_OC1_SetConfig+0xd2>
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	4a19      	ldr	r2, [pc, #100]	@ (800b610 <TIM_OC1_SetConfig+0x12c>)
 800b5aa:	4293      	cmp	r3, r2
 800b5ac:	d003      	beq.n	800b5b6 <TIM_OC1_SetConfig+0xd2>
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	4a18      	ldr	r2, [pc, #96]	@ (800b614 <TIM_OC1_SetConfig+0x130>)
 800b5b2:	4293      	cmp	r3, r2
 800b5b4:	d111      	bne.n	800b5da <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b5b6:	693b      	ldr	r3, [r7, #16]
 800b5b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b5bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b5be:	693b      	ldr	r3, [r7, #16]
 800b5c0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800b5c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b5c6:	683b      	ldr	r3, [r7, #0]
 800b5c8:	695b      	ldr	r3, [r3, #20]
 800b5ca:	693a      	ldr	r2, [r7, #16]
 800b5cc:	4313      	orrs	r3, r2
 800b5ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b5d0:	683b      	ldr	r3, [r7, #0]
 800b5d2:	699b      	ldr	r3, [r3, #24]
 800b5d4:	693a      	ldr	r2, [r7, #16]
 800b5d6:	4313      	orrs	r3, r2
 800b5d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	693a      	ldr	r2, [r7, #16]
 800b5de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	68fa      	ldr	r2, [r7, #12]
 800b5e4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b5e6:	683b      	ldr	r3, [r7, #0]
 800b5e8:	685a      	ldr	r2, [r3, #4]
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	697a      	ldr	r2, [r7, #20]
 800b5f2:	621a      	str	r2, [r3, #32]
}
 800b5f4:	bf00      	nop
 800b5f6:	371c      	adds	r7, #28
 800b5f8:	46bd      	mov	sp, r7
 800b5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5fe:	4770      	bx	lr
 800b600:	40012c00 	.word	0x40012c00
 800b604:	40013400 	.word	0x40013400
 800b608:	40014000 	.word	0x40014000
 800b60c:	40014400 	.word	0x40014400
 800b610:	40014800 	.word	0x40014800
 800b614:	40015000 	.word	0x40015000

0800b618 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b618:	b480      	push	{r7}
 800b61a:	b087      	sub	sp, #28
 800b61c:	af00      	add	r7, sp, #0
 800b61e:	6078      	str	r0, [r7, #4]
 800b620:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	6a1b      	ldr	r3, [r3, #32]
 800b626:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	6a1b      	ldr	r3, [r3, #32]
 800b62c:	f023 0210 	bic.w	r2, r3, #16
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	685b      	ldr	r3, [r3, #4]
 800b638:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	699b      	ldr	r3, [r3, #24]
 800b63e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b646:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b64a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b652:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b654:	683b      	ldr	r3, [r7, #0]
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	021b      	lsls	r3, r3, #8
 800b65a:	68fa      	ldr	r2, [r7, #12]
 800b65c:	4313      	orrs	r3, r2
 800b65e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b660:	697b      	ldr	r3, [r7, #20]
 800b662:	f023 0320 	bic.w	r3, r3, #32
 800b666:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b668:	683b      	ldr	r3, [r7, #0]
 800b66a:	689b      	ldr	r3, [r3, #8]
 800b66c:	011b      	lsls	r3, r3, #4
 800b66e:	697a      	ldr	r2, [r7, #20]
 800b670:	4313      	orrs	r3, r2
 800b672:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	4a2c      	ldr	r2, [pc, #176]	@ (800b728 <TIM_OC2_SetConfig+0x110>)
 800b678:	4293      	cmp	r3, r2
 800b67a:	d007      	beq.n	800b68c <TIM_OC2_SetConfig+0x74>
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	4a2b      	ldr	r2, [pc, #172]	@ (800b72c <TIM_OC2_SetConfig+0x114>)
 800b680:	4293      	cmp	r3, r2
 800b682:	d003      	beq.n	800b68c <TIM_OC2_SetConfig+0x74>
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	4a2a      	ldr	r2, [pc, #168]	@ (800b730 <TIM_OC2_SetConfig+0x118>)
 800b688:	4293      	cmp	r3, r2
 800b68a:	d10d      	bne.n	800b6a8 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b68c:	697b      	ldr	r3, [r7, #20]
 800b68e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b692:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b694:	683b      	ldr	r3, [r7, #0]
 800b696:	68db      	ldr	r3, [r3, #12]
 800b698:	011b      	lsls	r3, r3, #4
 800b69a:	697a      	ldr	r2, [r7, #20]
 800b69c:	4313      	orrs	r3, r2
 800b69e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b6a0:	697b      	ldr	r3, [r7, #20]
 800b6a2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b6a6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	4a1f      	ldr	r2, [pc, #124]	@ (800b728 <TIM_OC2_SetConfig+0x110>)
 800b6ac:	4293      	cmp	r3, r2
 800b6ae:	d013      	beq.n	800b6d8 <TIM_OC2_SetConfig+0xc0>
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	4a1e      	ldr	r2, [pc, #120]	@ (800b72c <TIM_OC2_SetConfig+0x114>)
 800b6b4:	4293      	cmp	r3, r2
 800b6b6:	d00f      	beq.n	800b6d8 <TIM_OC2_SetConfig+0xc0>
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	4a1e      	ldr	r2, [pc, #120]	@ (800b734 <TIM_OC2_SetConfig+0x11c>)
 800b6bc:	4293      	cmp	r3, r2
 800b6be:	d00b      	beq.n	800b6d8 <TIM_OC2_SetConfig+0xc0>
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	4a1d      	ldr	r2, [pc, #116]	@ (800b738 <TIM_OC2_SetConfig+0x120>)
 800b6c4:	4293      	cmp	r3, r2
 800b6c6:	d007      	beq.n	800b6d8 <TIM_OC2_SetConfig+0xc0>
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	4a1c      	ldr	r2, [pc, #112]	@ (800b73c <TIM_OC2_SetConfig+0x124>)
 800b6cc:	4293      	cmp	r3, r2
 800b6ce:	d003      	beq.n	800b6d8 <TIM_OC2_SetConfig+0xc0>
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	4a17      	ldr	r2, [pc, #92]	@ (800b730 <TIM_OC2_SetConfig+0x118>)
 800b6d4:	4293      	cmp	r3, r2
 800b6d6:	d113      	bne.n	800b700 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b6d8:	693b      	ldr	r3, [r7, #16]
 800b6da:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800b6de:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b6e0:	693b      	ldr	r3, [r7, #16]
 800b6e2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800b6e6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b6e8:	683b      	ldr	r3, [r7, #0]
 800b6ea:	695b      	ldr	r3, [r3, #20]
 800b6ec:	009b      	lsls	r3, r3, #2
 800b6ee:	693a      	ldr	r2, [r7, #16]
 800b6f0:	4313      	orrs	r3, r2
 800b6f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b6f4:	683b      	ldr	r3, [r7, #0]
 800b6f6:	699b      	ldr	r3, [r3, #24]
 800b6f8:	009b      	lsls	r3, r3, #2
 800b6fa:	693a      	ldr	r2, [r7, #16]
 800b6fc:	4313      	orrs	r3, r2
 800b6fe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	693a      	ldr	r2, [r7, #16]
 800b704:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	68fa      	ldr	r2, [r7, #12]
 800b70a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b70c:	683b      	ldr	r3, [r7, #0]
 800b70e:	685a      	ldr	r2, [r3, #4]
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	697a      	ldr	r2, [r7, #20]
 800b718:	621a      	str	r2, [r3, #32]
}
 800b71a:	bf00      	nop
 800b71c:	371c      	adds	r7, #28
 800b71e:	46bd      	mov	sp, r7
 800b720:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b724:	4770      	bx	lr
 800b726:	bf00      	nop
 800b728:	40012c00 	.word	0x40012c00
 800b72c:	40013400 	.word	0x40013400
 800b730:	40015000 	.word	0x40015000
 800b734:	40014000 	.word	0x40014000
 800b738:	40014400 	.word	0x40014400
 800b73c:	40014800 	.word	0x40014800

0800b740 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b740:	b480      	push	{r7}
 800b742:	b087      	sub	sp, #28
 800b744:	af00      	add	r7, sp, #0
 800b746:	6078      	str	r0, [r7, #4]
 800b748:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	6a1b      	ldr	r3, [r3, #32]
 800b74e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	6a1b      	ldr	r3, [r3, #32]
 800b754:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	685b      	ldr	r3, [r3, #4]
 800b760:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	69db      	ldr	r3, [r3, #28]
 800b766:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b76e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b772:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	f023 0303 	bic.w	r3, r3, #3
 800b77a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b77c:	683b      	ldr	r3, [r7, #0]
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	68fa      	ldr	r2, [r7, #12]
 800b782:	4313      	orrs	r3, r2
 800b784:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b786:	697b      	ldr	r3, [r7, #20]
 800b788:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800b78c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b78e:	683b      	ldr	r3, [r7, #0]
 800b790:	689b      	ldr	r3, [r3, #8]
 800b792:	021b      	lsls	r3, r3, #8
 800b794:	697a      	ldr	r2, [r7, #20]
 800b796:	4313      	orrs	r3, r2
 800b798:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	4a2b      	ldr	r2, [pc, #172]	@ (800b84c <TIM_OC3_SetConfig+0x10c>)
 800b79e:	4293      	cmp	r3, r2
 800b7a0:	d007      	beq.n	800b7b2 <TIM_OC3_SetConfig+0x72>
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	4a2a      	ldr	r2, [pc, #168]	@ (800b850 <TIM_OC3_SetConfig+0x110>)
 800b7a6:	4293      	cmp	r3, r2
 800b7a8:	d003      	beq.n	800b7b2 <TIM_OC3_SetConfig+0x72>
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	4a29      	ldr	r2, [pc, #164]	@ (800b854 <TIM_OC3_SetConfig+0x114>)
 800b7ae:	4293      	cmp	r3, r2
 800b7b0:	d10d      	bne.n	800b7ce <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b7b2:	697b      	ldr	r3, [r7, #20]
 800b7b4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800b7b8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b7ba:	683b      	ldr	r3, [r7, #0]
 800b7bc:	68db      	ldr	r3, [r3, #12]
 800b7be:	021b      	lsls	r3, r3, #8
 800b7c0:	697a      	ldr	r2, [r7, #20]
 800b7c2:	4313      	orrs	r3, r2
 800b7c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b7c6:	697b      	ldr	r3, [r7, #20]
 800b7c8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800b7cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	4a1e      	ldr	r2, [pc, #120]	@ (800b84c <TIM_OC3_SetConfig+0x10c>)
 800b7d2:	4293      	cmp	r3, r2
 800b7d4:	d013      	beq.n	800b7fe <TIM_OC3_SetConfig+0xbe>
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	4a1d      	ldr	r2, [pc, #116]	@ (800b850 <TIM_OC3_SetConfig+0x110>)
 800b7da:	4293      	cmp	r3, r2
 800b7dc:	d00f      	beq.n	800b7fe <TIM_OC3_SetConfig+0xbe>
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	4a1d      	ldr	r2, [pc, #116]	@ (800b858 <TIM_OC3_SetConfig+0x118>)
 800b7e2:	4293      	cmp	r3, r2
 800b7e4:	d00b      	beq.n	800b7fe <TIM_OC3_SetConfig+0xbe>
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	4a1c      	ldr	r2, [pc, #112]	@ (800b85c <TIM_OC3_SetConfig+0x11c>)
 800b7ea:	4293      	cmp	r3, r2
 800b7ec:	d007      	beq.n	800b7fe <TIM_OC3_SetConfig+0xbe>
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	4a1b      	ldr	r2, [pc, #108]	@ (800b860 <TIM_OC3_SetConfig+0x120>)
 800b7f2:	4293      	cmp	r3, r2
 800b7f4:	d003      	beq.n	800b7fe <TIM_OC3_SetConfig+0xbe>
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	4a16      	ldr	r2, [pc, #88]	@ (800b854 <TIM_OC3_SetConfig+0x114>)
 800b7fa:	4293      	cmp	r3, r2
 800b7fc:	d113      	bne.n	800b826 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b7fe:	693b      	ldr	r3, [r7, #16]
 800b800:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b804:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b806:	693b      	ldr	r3, [r7, #16]
 800b808:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800b80c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b80e:	683b      	ldr	r3, [r7, #0]
 800b810:	695b      	ldr	r3, [r3, #20]
 800b812:	011b      	lsls	r3, r3, #4
 800b814:	693a      	ldr	r2, [r7, #16]
 800b816:	4313      	orrs	r3, r2
 800b818:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b81a:	683b      	ldr	r3, [r7, #0]
 800b81c:	699b      	ldr	r3, [r3, #24]
 800b81e:	011b      	lsls	r3, r3, #4
 800b820:	693a      	ldr	r2, [r7, #16]
 800b822:	4313      	orrs	r3, r2
 800b824:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	693a      	ldr	r2, [r7, #16]
 800b82a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	68fa      	ldr	r2, [r7, #12]
 800b830:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b832:	683b      	ldr	r3, [r7, #0]
 800b834:	685a      	ldr	r2, [r3, #4]
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	697a      	ldr	r2, [r7, #20]
 800b83e:	621a      	str	r2, [r3, #32]
}
 800b840:	bf00      	nop
 800b842:	371c      	adds	r7, #28
 800b844:	46bd      	mov	sp, r7
 800b846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b84a:	4770      	bx	lr
 800b84c:	40012c00 	.word	0x40012c00
 800b850:	40013400 	.word	0x40013400
 800b854:	40015000 	.word	0x40015000
 800b858:	40014000 	.word	0x40014000
 800b85c:	40014400 	.word	0x40014400
 800b860:	40014800 	.word	0x40014800

0800b864 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b864:	b480      	push	{r7}
 800b866:	b087      	sub	sp, #28
 800b868:	af00      	add	r7, sp, #0
 800b86a:	6078      	str	r0, [r7, #4]
 800b86c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	6a1b      	ldr	r3, [r3, #32]
 800b872:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	6a1b      	ldr	r3, [r3, #32]
 800b878:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	685b      	ldr	r3, [r3, #4]
 800b884:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	69db      	ldr	r3, [r3, #28]
 800b88a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b892:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b896:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b89e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b8a0:	683b      	ldr	r3, [r7, #0]
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	021b      	lsls	r3, r3, #8
 800b8a6:	68fa      	ldr	r2, [r7, #12]
 800b8a8:	4313      	orrs	r3, r2
 800b8aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b8ac:	697b      	ldr	r3, [r7, #20]
 800b8ae:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800b8b2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b8b4:	683b      	ldr	r3, [r7, #0]
 800b8b6:	689b      	ldr	r3, [r3, #8]
 800b8b8:	031b      	lsls	r3, r3, #12
 800b8ba:	697a      	ldr	r2, [r7, #20]
 800b8bc:	4313      	orrs	r3, r2
 800b8be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	4a2c      	ldr	r2, [pc, #176]	@ (800b974 <TIM_OC4_SetConfig+0x110>)
 800b8c4:	4293      	cmp	r3, r2
 800b8c6:	d007      	beq.n	800b8d8 <TIM_OC4_SetConfig+0x74>
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	4a2b      	ldr	r2, [pc, #172]	@ (800b978 <TIM_OC4_SetConfig+0x114>)
 800b8cc:	4293      	cmp	r3, r2
 800b8ce:	d003      	beq.n	800b8d8 <TIM_OC4_SetConfig+0x74>
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	4a2a      	ldr	r2, [pc, #168]	@ (800b97c <TIM_OC4_SetConfig+0x118>)
 800b8d4:	4293      	cmp	r3, r2
 800b8d6:	d10d      	bne.n	800b8f4 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800b8d8:	697b      	ldr	r3, [r7, #20]
 800b8da:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800b8de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800b8e0:	683b      	ldr	r3, [r7, #0]
 800b8e2:	68db      	ldr	r3, [r3, #12]
 800b8e4:	031b      	lsls	r3, r3, #12
 800b8e6:	697a      	ldr	r2, [r7, #20]
 800b8e8:	4313      	orrs	r3, r2
 800b8ea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800b8ec:	697b      	ldr	r3, [r7, #20]
 800b8ee:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b8f2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	4a1f      	ldr	r2, [pc, #124]	@ (800b974 <TIM_OC4_SetConfig+0x110>)
 800b8f8:	4293      	cmp	r3, r2
 800b8fa:	d013      	beq.n	800b924 <TIM_OC4_SetConfig+0xc0>
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	4a1e      	ldr	r2, [pc, #120]	@ (800b978 <TIM_OC4_SetConfig+0x114>)
 800b900:	4293      	cmp	r3, r2
 800b902:	d00f      	beq.n	800b924 <TIM_OC4_SetConfig+0xc0>
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	4a1e      	ldr	r2, [pc, #120]	@ (800b980 <TIM_OC4_SetConfig+0x11c>)
 800b908:	4293      	cmp	r3, r2
 800b90a:	d00b      	beq.n	800b924 <TIM_OC4_SetConfig+0xc0>
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	4a1d      	ldr	r2, [pc, #116]	@ (800b984 <TIM_OC4_SetConfig+0x120>)
 800b910:	4293      	cmp	r3, r2
 800b912:	d007      	beq.n	800b924 <TIM_OC4_SetConfig+0xc0>
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	4a1c      	ldr	r2, [pc, #112]	@ (800b988 <TIM_OC4_SetConfig+0x124>)
 800b918:	4293      	cmp	r3, r2
 800b91a:	d003      	beq.n	800b924 <TIM_OC4_SetConfig+0xc0>
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	4a17      	ldr	r2, [pc, #92]	@ (800b97c <TIM_OC4_SetConfig+0x118>)
 800b920:	4293      	cmp	r3, r2
 800b922:	d113      	bne.n	800b94c <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b924:	693b      	ldr	r3, [r7, #16]
 800b926:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b92a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800b92c:	693b      	ldr	r3, [r7, #16]
 800b92e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800b932:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b934:	683b      	ldr	r3, [r7, #0]
 800b936:	695b      	ldr	r3, [r3, #20]
 800b938:	019b      	lsls	r3, r3, #6
 800b93a:	693a      	ldr	r2, [r7, #16]
 800b93c:	4313      	orrs	r3, r2
 800b93e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800b940:	683b      	ldr	r3, [r7, #0]
 800b942:	699b      	ldr	r3, [r3, #24]
 800b944:	019b      	lsls	r3, r3, #6
 800b946:	693a      	ldr	r2, [r7, #16]
 800b948:	4313      	orrs	r3, r2
 800b94a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	693a      	ldr	r2, [r7, #16]
 800b950:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	68fa      	ldr	r2, [r7, #12]
 800b956:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b958:	683b      	ldr	r3, [r7, #0]
 800b95a:	685a      	ldr	r2, [r3, #4]
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	697a      	ldr	r2, [r7, #20]
 800b964:	621a      	str	r2, [r3, #32]
}
 800b966:	bf00      	nop
 800b968:	371c      	adds	r7, #28
 800b96a:	46bd      	mov	sp, r7
 800b96c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b970:	4770      	bx	lr
 800b972:	bf00      	nop
 800b974:	40012c00 	.word	0x40012c00
 800b978:	40013400 	.word	0x40013400
 800b97c:	40015000 	.word	0x40015000
 800b980:	40014000 	.word	0x40014000
 800b984:	40014400 	.word	0x40014400
 800b988:	40014800 	.word	0x40014800

0800b98c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800b98c:	b480      	push	{r7}
 800b98e:	b087      	sub	sp, #28
 800b990:	af00      	add	r7, sp, #0
 800b992:	6078      	str	r0, [r7, #4]
 800b994:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	6a1b      	ldr	r3, [r3, #32]
 800b99a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	6a1b      	ldr	r3, [r3, #32]
 800b9a0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	685b      	ldr	r3, [r3, #4]
 800b9ac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b9b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b9ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b9be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b9c0:	683b      	ldr	r3, [r7, #0]
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	68fa      	ldr	r2, [r7, #12]
 800b9c6:	4313      	orrs	r3, r2
 800b9c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800b9ca:	693b      	ldr	r3, [r7, #16]
 800b9cc:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800b9d0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b9d2:	683b      	ldr	r3, [r7, #0]
 800b9d4:	689b      	ldr	r3, [r3, #8]
 800b9d6:	041b      	lsls	r3, r3, #16
 800b9d8:	693a      	ldr	r2, [r7, #16]
 800b9da:	4313      	orrs	r3, r2
 800b9dc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	4a19      	ldr	r2, [pc, #100]	@ (800ba48 <TIM_OC5_SetConfig+0xbc>)
 800b9e2:	4293      	cmp	r3, r2
 800b9e4:	d013      	beq.n	800ba0e <TIM_OC5_SetConfig+0x82>
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	4a18      	ldr	r2, [pc, #96]	@ (800ba4c <TIM_OC5_SetConfig+0xc0>)
 800b9ea:	4293      	cmp	r3, r2
 800b9ec:	d00f      	beq.n	800ba0e <TIM_OC5_SetConfig+0x82>
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	4a17      	ldr	r2, [pc, #92]	@ (800ba50 <TIM_OC5_SetConfig+0xc4>)
 800b9f2:	4293      	cmp	r3, r2
 800b9f4:	d00b      	beq.n	800ba0e <TIM_OC5_SetConfig+0x82>
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	4a16      	ldr	r2, [pc, #88]	@ (800ba54 <TIM_OC5_SetConfig+0xc8>)
 800b9fa:	4293      	cmp	r3, r2
 800b9fc:	d007      	beq.n	800ba0e <TIM_OC5_SetConfig+0x82>
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	4a15      	ldr	r2, [pc, #84]	@ (800ba58 <TIM_OC5_SetConfig+0xcc>)
 800ba02:	4293      	cmp	r3, r2
 800ba04:	d003      	beq.n	800ba0e <TIM_OC5_SetConfig+0x82>
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	4a14      	ldr	r2, [pc, #80]	@ (800ba5c <TIM_OC5_SetConfig+0xd0>)
 800ba0a:	4293      	cmp	r3, r2
 800ba0c:	d109      	bne.n	800ba22 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800ba0e:	697b      	ldr	r3, [r7, #20]
 800ba10:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ba14:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800ba16:	683b      	ldr	r3, [r7, #0]
 800ba18:	695b      	ldr	r3, [r3, #20]
 800ba1a:	021b      	lsls	r3, r3, #8
 800ba1c:	697a      	ldr	r2, [r7, #20]
 800ba1e:	4313      	orrs	r3, r2
 800ba20:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	697a      	ldr	r2, [r7, #20]
 800ba26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	68fa      	ldr	r2, [r7, #12]
 800ba2c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800ba2e:	683b      	ldr	r3, [r7, #0]
 800ba30:	685a      	ldr	r2, [r3, #4]
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	693a      	ldr	r2, [r7, #16]
 800ba3a:	621a      	str	r2, [r3, #32]
}
 800ba3c:	bf00      	nop
 800ba3e:	371c      	adds	r7, #28
 800ba40:	46bd      	mov	sp, r7
 800ba42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba46:	4770      	bx	lr
 800ba48:	40012c00 	.word	0x40012c00
 800ba4c:	40013400 	.word	0x40013400
 800ba50:	40014000 	.word	0x40014000
 800ba54:	40014400 	.word	0x40014400
 800ba58:	40014800 	.word	0x40014800
 800ba5c:	40015000 	.word	0x40015000

0800ba60 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800ba60:	b480      	push	{r7}
 800ba62:	b087      	sub	sp, #28
 800ba64:	af00      	add	r7, sp, #0
 800ba66:	6078      	str	r0, [r7, #4]
 800ba68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	6a1b      	ldr	r3, [r3, #32]
 800ba6e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	6a1b      	ldr	r3, [r3, #32]
 800ba74:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	685b      	ldr	r3, [r3, #4]
 800ba80:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ba86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800ba88:	68fb      	ldr	r3, [r7, #12]
 800ba8a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800ba8e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ba92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ba94:	683b      	ldr	r3, [r7, #0]
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	021b      	lsls	r3, r3, #8
 800ba9a:	68fa      	ldr	r2, [r7, #12]
 800ba9c:	4313      	orrs	r3, r2
 800ba9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800baa0:	693b      	ldr	r3, [r7, #16]
 800baa2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800baa6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800baa8:	683b      	ldr	r3, [r7, #0]
 800baaa:	689b      	ldr	r3, [r3, #8]
 800baac:	051b      	lsls	r3, r3, #20
 800baae:	693a      	ldr	r2, [r7, #16]
 800bab0:	4313      	orrs	r3, r2
 800bab2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	4a1a      	ldr	r2, [pc, #104]	@ (800bb20 <TIM_OC6_SetConfig+0xc0>)
 800bab8:	4293      	cmp	r3, r2
 800baba:	d013      	beq.n	800bae4 <TIM_OC6_SetConfig+0x84>
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	4a19      	ldr	r2, [pc, #100]	@ (800bb24 <TIM_OC6_SetConfig+0xc4>)
 800bac0:	4293      	cmp	r3, r2
 800bac2:	d00f      	beq.n	800bae4 <TIM_OC6_SetConfig+0x84>
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	4a18      	ldr	r2, [pc, #96]	@ (800bb28 <TIM_OC6_SetConfig+0xc8>)
 800bac8:	4293      	cmp	r3, r2
 800baca:	d00b      	beq.n	800bae4 <TIM_OC6_SetConfig+0x84>
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	4a17      	ldr	r2, [pc, #92]	@ (800bb2c <TIM_OC6_SetConfig+0xcc>)
 800bad0:	4293      	cmp	r3, r2
 800bad2:	d007      	beq.n	800bae4 <TIM_OC6_SetConfig+0x84>
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	4a16      	ldr	r2, [pc, #88]	@ (800bb30 <TIM_OC6_SetConfig+0xd0>)
 800bad8:	4293      	cmp	r3, r2
 800bada:	d003      	beq.n	800bae4 <TIM_OC6_SetConfig+0x84>
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	4a15      	ldr	r2, [pc, #84]	@ (800bb34 <TIM_OC6_SetConfig+0xd4>)
 800bae0:	4293      	cmp	r3, r2
 800bae2:	d109      	bne.n	800baf8 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800bae4:	697b      	ldr	r3, [r7, #20]
 800bae6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800baea:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800baec:	683b      	ldr	r3, [r7, #0]
 800baee:	695b      	ldr	r3, [r3, #20]
 800baf0:	029b      	lsls	r3, r3, #10
 800baf2:	697a      	ldr	r2, [r7, #20]
 800baf4:	4313      	orrs	r3, r2
 800baf6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	697a      	ldr	r2, [r7, #20]
 800bafc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	68fa      	ldr	r2, [r7, #12]
 800bb02:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800bb04:	683b      	ldr	r3, [r7, #0]
 800bb06:	685a      	ldr	r2, [r3, #4]
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	693a      	ldr	r2, [r7, #16]
 800bb10:	621a      	str	r2, [r3, #32]
}
 800bb12:	bf00      	nop
 800bb14:	371c      	adds	r7, #28
 800bb16:	46bd      	mov	sp, r7
 800bb18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb1c:	4770      	bx	lr
 800bb1e:	bf00      	nop
 800bb20:	40012c00 	.word	0x40012c00
 800bb24:	40013400 	.word	0x40013400
 800bb28:	40014000 	.word	0x40014000
 800bb2c:	40014400 	.word	0x40014400
 800bb30:	40014800 	.word	0x40014800
 800bb34:	40015000 	.word	0x40015000

0800bb38 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bb38:	b480      	push	{r7}
 800bb3a:	b087      	sub	sp, #28
 800bb3c:	af00      	add	r7, sp, #0
 800bb3e:	60f8      	str	r0, [r7, #12]
 800bb40:	60b9      	str	r1, [r7, #8]
 800bb42:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800bb44:	68fb      	ldr	r3, [r7, #12]
 800bb46:	6a1b      	ldr	r3, [r3, #32]
 800bb48:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bb4a:	68fb      	ldr	r3, [r7, #12]
 800bb4c:	6a1b      	ldr	r3, [r3, #32]
 800bb4e:	f023 0201 	bic.w	r2, r3, #1
 800bb52:	68fb      	ldr	r3, [r7, #12]
 800bb54:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	699b      	ldr	r3, [r3, #24]
 800bb5a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800bb5c:	693b      	ldr	r3, [r7, #16]
 800bb5e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800bb62:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	011b      	lsls	r3, r3, #4
 800bb68:	693a      	ldr	r2, [r7, #16]
 800bb6a:	4313      	orrs	r3, r2
 800bb6c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800bb6e:	697b      	ldr	r3, [r7, #20]
 800bb70:	f023 030a 	bic.w	r3, r3, #10
 800bb74:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800bb76:	697a      	ldr	r2, [r7, #20]
 800bb78:	68bb      	ldr	r3, [r7, #8]
 800bb7a:	4313      	orrs	r3, r2
 800bb7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800bb7e:	68fb      	ldr	r3, [r7, #12]
 800bb80:	693a      	ldr	r2, [r7, #16]
 800bb82:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	697a      	ldr	r2, [r7, #20]
 800bb88:	621a      	str	r2, [r3, #32]
}
 800bb8a:	bf00      	nop
 800bb8c:	371c      	adds	r7, #28
 800bb8e:	46bd      	mov	sp, r7
 800bb90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb94:	4770      	bx	lr

0800bb96 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bb96:	b480      	push	{r7}
 800bb98:	b087      	sub	sp, #28
 800bb9a:	af00      	add	r7, sp, #0
 800bb9c:	60f8      	str	r0, [r7, #12]
 800bb9e:	60b9      	str	r1, [r7, #8]
 800bba0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800bba2:	68fb      	ldr	r3, [r7, #12]
 800bba4:	6a1b      	ldr	r3, [r3, #32]
 800bba6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	6a1b      	ldr	r3, [r3, #32]
 800bbac:	f023 0210 	bic.w	r2, r3, #16
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	699b      	ldr	r3, [r3, #24]
 800bbb8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800bbba:	693b      	ldr	r3, [r7, #16]
 800bbbc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800bbc0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	031b      	lsls	r3, r3, #12
 800bbc6:	693a      	ldr	r2, [r7, #16]
 800bbc8:	4313      	orrs	r3, r2
 800bbca:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800bbcc:	697b      	ldr	r3, [r7, #20]
 800bbce:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800bbd2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800bbd4:	68bb      	ldr	r3, [r7, #8]
 800bbd6:	011b      	lsls	r3, r3, #4
 800bbd8:	697a      	ldr	r2, [r7, #20]
 800bbda:	4313      	orrs	r3, r2
 800bbdc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800bbde:	68fb      	ldr	r3, [r7, #12]
 800bbe0:	693a      	ldr	r2, [r7, #16]
 800bbe2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	697a      	ldr	r2, [r7, #20]
 800bbe8:	621a      	str	r2, [r3, #32]
}
 800bbea:	bf00      	nop
 800bbec:	371c      	adds	r7, #28
 800bbee:	46bd      	mov	sp, r7
 800bbf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbf4:	4770      	bx	lr

0800bbf6 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800bbf6:	b480      	push	{r7}
 800bbf8:	b085      	sub	sp, #20
 800bbfa:	af00      	add	r7, sp, #0
 800bbfc:	6078      	str	r0, [r7, #4]
 800bbfe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	689b      	ldr	r3, [r3, #8]
 800bc04:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800bc06:	68fb      	ldr	r3, [r7, #12]
 800bc08:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800bc0c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bc10:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800bc12:	683a      	ldr	r2, [r7, #0]
 800bc14:	68fb      	ldr	r3, [r7, #12]
 800bc16:	4313      	orrs	r3, r2
 800bc18:	f043 0307 	orr.w	r3, r3, #7
 800bc1c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	68fa      	ldr	r2, [r7, #12]
 800bc22:	609a      	str	r2, [r3, #8]
}
 800bc24:	bf00      	nop
 800bc26:	3714      	adds	r7, #20
 800bc28:	46bd      	mov	sp, r7
 800bc2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc2e:	4770      	bx	lr

0800bc30 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800bc30:	b480      	push	{r7}
 800bc32:	b087      	sub	sp, #28
 800bc34:	af00      	add	r7, sp, #0
 800bc36:	60f8      	str	r0, [r7, #12]
 800bc38:	60b9      	str	r1, [r7, #8]
 800bc3a:	607a      	str	r2, [r7, #4]
 800bc3c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800bc3e:	68fb      	ldr	r3, [r7, #12]
 800bc40:	689b      	ldr	r3, [r3, #8]
 800bc42:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bc44:	697b      	ldr	r3, [r7, #20]
 800bc46:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800bc4a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800bc4c:	683b      	ldr	r3, [r7, #0]
 800bc4e:	021a      	lsls	r2, r3, #8
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	431a      	orrs	r2, r3
 800bc54:	68bb      	ldr	r3, [r7, #8]
 800bc56:	4313      	orrs	r3, r2
 800bc58:	697a      	ldr	r2, [r7, #20]
 800bc5a:	4313      	orrs	r3, r2
 800bc5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bc5e:	68fb      	ldr	r3, [r7, #12]
 800bc60:	697a      	ldr	r2, [r7, #20]
 800bc62:	609a      	str	r2, [r3, #8]
}
 800bc64:	bf00      	nop
 800bc66:	371c      	adds	r7, #28
 800bc68:	46bd      	mov	sp, r7
 800bc6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc6e:	4770      	bx	lr

0800bc70 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800bc70:	b480      	push	{r7}
 800bc72:	b087      	sub	sp, #28
 800bc74:	af00      	add	r7, sp, #0
 800bc76:	60f8      	str	r0, [r7, #12]
 800bc78:	60b9      	str	r1, [r7, #8]
 800bc7a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800bc7c:	68bb      	ldr	r3, [r7, #8]
 800bc7e:	f003 031f 	and.w	r3, r3, #31
 800bc82:	2201      	movs	r2, #1
 800bc84:	fa02 f303 	lsl.w	r3, r2, r3
 800bc88:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800bc8a:	68fb      	ldr	r3, [r7, #12]
 800bc8c:	6a1a      	ldr	r2, [r3, #32]
 800bc8e:	697b      	ldr	r3, [r7, #20]
 800bc90:	43db      	mvns	r3, r3
 800bc92:	401a      	ands	r2, r3
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800bc98:	68fb      	ldr	r3, [r7, #12]
 800bc9a:	6a1a      	ldr	r2, [r3, #32]
 800bc9c:	68bb      	ldr	r3, [r7, #8]
 800bc9e:	f003 031f 	and.w	r3, r3, #31
 800bca2:	6879      	ldr	r1, [r7, #4]
 800bca4:	fa01 f303 	lsl.w	r3, r1, r3
 800bca8:	431a      	orrs	r2, r3
 800bcaa:	68fb      	ldr	r3, [r7, #12]
 800bcac:	621a      	str	r2, [r3, #32]
}
 800bcae:	bf00      	nop
 800bcb0:	371c      	adds	r7, #28
 800bcb2:	46bd      	mov	sp, r7
 800bcb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcb8:	4770      	bx	lr
	...

0800bcbc <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 800bcbc:	b480      	push	{r7}
 800bcbe:	b083      	sub	sp, #12
 800bcc0:	af00      	add	r7, sp, #0
 800bcc2:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	4a26      	ldr	r2, [pc, #152]	@ (800bd60 <TIM_ResetCallback+0xa4>)
 800bcc8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	4a25      	ldr	r2, [pc, #148]	@ (800bd64 <TIM_ResetCallback+0xa8>)
 800bcd0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	4a24      	ldr	r2, [pc, #144]	@ (800bd68 <TIM_ResetCallback+0xac>)
 800bcd8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	4a23      	ldr	r2, [pc, #140]	@ (800bd6c <TIM_ResetCallback+0xb0>)
 800bce0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	4a22      	ldr	r2, [pc, #136]	@ (800bd70 <TIM_ResetCallback+0xb4>)
 800bce8:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	4a21      	ldr	r2, [pc, #132]	@ (800bd74 <TIM_ResetCallback+0xb8>)
 800bcf0:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	4a20      	ldr	r2, [pc, #128]	@ (800bd78 <TIM_ResetCallback+0xbc>)
 800bcf8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	4a1f      	ldr	r2, [pc, #124]	@ (800bd7c <TIM_ResetCallback+0xc0>)
 800bd00:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	4a1e      	ldr	r2, [pc, #120]	@ (800bd80 <TIM_ResetCallback+0xc4>)
 800bd08:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	4a1d      	ldr	r2, [pc, #116]	@ (800bd84 <TIM_ResetCallback+0xc8>)
 800bd10:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	4a1c      	ldr	r2, [pc, #112]	@ (800bd88 <TIM_ResetCallback+0xcc>)
 800bd18:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	4a1b      	ldr	r2, [pc, #108]	@ (800bd8c <TIM_ResetCallback+0xd0>)
 800bd20:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	4a1a      	ldr	r2, [pc, #104]	@ (800bd90 <TIM_ResetCallback+0xd4>)
 800bd28:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	4a19      	ldr	r2, [pc, #100]	@ (800bd94 <TIM_ResetCallback+0xd8>)
 800bd30:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  htim->EncoderIndexCallback              = HAL_TIMEx_EncoderIndexCallback;
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	4a18      	ldr	r2, [pc, #96]	@ (800bd98 <TIM_ResetCallback+0xdc>)
 800bd38:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  htim->DirectionChangeCallback           = HAL_TIMEx_DirectionChangeCallback;
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	4a17      	ldr	r2, [pc, #92]	@ (800bd9c <TIM_ResetCallback+0xe0>)
 800bd40:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  htim->IndexErrorCallback                = HAL_TIMEx_IndexErrorCallback;
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	4a16      	ldr	r2, [pc, #88]	@ (800bda0 <TIM_ResetCallback+0xe4>)
 800bd48:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  htim->TransitionErrorCallback           = HAL_TIMEx_TransitionErrorCallback;
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	4a15      	ldr	r2, [pc, #84]	@ (800bda4 <TIM_ResetCallback+0xe8>)
 800bd50:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 800bd54:	bf00      	nop
 800bd56:	370c      	adds	r7, #12
 800bd58:	46bd      	mov	sp, r7
 800bd5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd5e:	4770      	bx	lr
 800bd60:	08004ce9 	.word	0x08004ce9
 800bd64:	0800b009 	.word	0x0800b009
 800bd68:	0800b081 	.word	0x0800b081
 800bd6c:	0800b095 	.word	0x0800b095
 800bd70:	0800b031 	.word	0x0800b031
 800bd74:	0800b045 	.word	0x0800b045
 800bd78:	0800b01d 	.word	0x0800b01d
 800bd7c:	0800b059 	.word	0x0800b059
 800bd80:	0800b06d 	.word	0x0800b06d
 800bd84:	0800b0a9 	.word	0x0800b0a9
 800bd88:	0800bffd 	.word	0x0800bffd
 800bd8c:	0800c011 	.word	0x0800c011
 800bd90:	0800c025 	.word	0x0800c025
 800bd94:	0800c039 	.word	0x0800c039
 800bd98:	0800c04d 	.word	0x0800c04d
 800bd9c:	0800c061 	.word	0x0800c061
 800bda0:	0800c075 	.word	0x0800c075
 800bda4:	0800c089 	.word	0x0800c089

0800bda8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800bda8:	b480      	push	{r7}
 800bdaa:	b085      	sub	sp, #20
 800bdac:	af00      	add	r7, sp, #0
 800bdae:	6078      	str	r0, [r7, #4]
 800bdb0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800bdb8:	2b01      	cmp	r3, #1
 800bdba:	d101      	bne.n	800bdc0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800bdbc:	2302      	movs	r3, #2
 800bdbe:	e074      	b.n	800beaa <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	2201      	movs	r2, #1
 800bdc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	2202      	movs	r2, #2
 800bdcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	685b      	ldr	r3, [r3, #4]
 800bdd6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	689b      	ldr	r3, [r3, #8]
 800bdde:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	4a34      	ldr	r2, [pc, #208]	@ (800beb8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800bde6:	4293      	cmp	r3, r2
 800bde8:	d009      	beq.n	800bdfe <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	4a33      	ldr	r2, [pc, #204]	@ (800bebc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800bdf0:	4293      	cmp	r3, r2
 800bdf2:	d004      	beq.n	800bdfe <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	4a31      	ldr	r2, [pc, #196]	@ (800bec0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800bdfa:	4293      	cmp	r3, r2
 800bdfc:	d108      	bne.n	800be10 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800bdfe:	68fb      	ldr	r3, [r7, #12]
 800be00:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800be04:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800be06:	683b      	ldr	r3, [r7, #0]
 800be08:	685b      	ldr	r3, [r3, #4]
 800be0a:	68fa      	ldr	r2, [r7, #12]
 800be0c:	4313      	orrs	r3, r2
 800be0e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800be10:	68fb      	ldr	r3, [r7, #12]
 800be12:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800be16:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800be1a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800be1c:	683b      	ldr	r3, [r7, #0]
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	68fa      	ldr	r2, [r7, #12]
 800be22:	4313      	orrs	r3, r2
 800be24:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	681b      	ldr	r3, [r3, #0]
 800be2a:	68fa      	ldr	r2, [r7, #12]
 800be2c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	4a21      	ldr	r2, [pc, #132]	@ (800beb8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800be34:	4293      	cmp	r3, r2
 800be36:	d022      	beq.n	800be7e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800be40:	d01d      	beq.n	800be7e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	681b      	ldr	r3, [r3, #0]
 800be46:	4a1f      	ldr	r2, [pc, #124]	@ (800bec4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800be48:	4293      	cmp	r3, r2
 800be4a:	d018      	beq.n	800be7e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	4a1d      	ldr	r2, [pc, #116]	@ (800bec8 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800be52:	4293      	cmp	r3, r2
 800be54:	d013      	beq.n	800be7e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	4a1c      	ldr	r2, [pc, #112]	@ (800becc <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800be5c:	4293      	cmp	r3, r2
 800be5e:	d00e      	beq.n	800be7e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	681b      	ldr	r3, [r3, #0]
 800be64:	4a15      	ldr	r2, [pc, #84]	@ (800bebc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800be66:	4293      	cmp	r3, r2
 800be68:	d009      	beq.n	800be7e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	4a18      	ldr	r2, [pc, #96]	@ (800bed0 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800be70:	4293      	cmp	r3, r2
 800be72:	d004      	beq.n	800be7e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	4a11      	ldr	r2, [pc, #68]	@ (800bec0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800be7a:	4293      	cmp	r3, r2
 800be7c:	d10c      	bne.n	800be98 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800be7e:	68bb      	ldr	r3, [r7, #8]
 800be80:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800be84:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800be86:	683b      	ldr	r3, [r7, #0]
 800be88:	689b      	ldr	r3, [r3, #8]
 800be8a:	68ba      	ldr	r2, [r7, #8]
 800be8c:	4313      	orrs	r3, r2
 800be8e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	681b      	ldr	r3, [r3, #0]
 800be94:	68ba      	ldr	r2, [r7, #8]
 800be96:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	2201      	movs	r2, #1
 800be9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	2200      	movs	r2, #0
 800bea4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800bea8:	2300      	movs	r3, #0
}
 800beaa:	4618      	mov	r0, r3
 800beac:	3714      	adds	r7, #20
 800beae:	46bd      	mov	sp, r7
 800beb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beb4:	4770      	bx	lr
 800beb6:	bf00      	nop
 800beb8:	40012c00 	.word	0x40012c00
 800bebc:	40013400 	.word	0x40013400
 800bec0:	40015000 	.word	0x40015000
 800bec4:	40000400 	.word	0x40000400
 800bec8:	40000800 	.word	0x40000800
 800becc:	40000c00 	.word	0x40000c00
 800bed0:	40014000 	.word	0x40014000

0800bed4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800bed4:	b480      	push	{r7}
 800bed6:	b085      	sub	sp, #20
 800bed8:	af00      	add	r7, sp, #0
 800beda:	6078      	str	r0, [r7, #4]
 800bedc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800bede:	2300      	movs	r3, #0
 800bee0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800bee8:	2b01      	cmp	r3, #1
 800beea:	d101      	bne.n	800bef0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800beec:	2302      	movs	r3, #2
 800beee:	e078      	b.n	800bfe2 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	2201      	movs	r2, #1
 800bef4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800bef8:	68fb      	ldr	r3, [r7, #12]
 800befa:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800befe:	683b      	ldr	r3, [r7, #0]
 800bf00:	68db      	ldr	r3, [r3, #12]
 800bf02:	4313      	orrs	r3, r2
 800bf04:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800bf06:	68fb      	ldr	r3, [r7, #12]
 800bf08:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800bf0c:	683b      	ldr	r3, [r7, #0]
 800bf0e:	689b      	ldr	r3, [r3, #8]
 800bf10:	4313      	orrs	r3, r2
 800bf12:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800bf1a:	683b      	ldr	r3, [r7, #0]
 800bf1c:	685b      	ldr	r3, [r3, #4]
 800bf1e:	4313      	orrs	r3, r2
 800bf20:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800bf22:	68fb      	ldr	r3, [r7, #12]
 800bf24:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800bf28:	683b      	ldr	r3, [r7, #0]
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	4313      	orrs	r3, r2
 800bf2e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800bf30:	68fb      	ldr	r3, [r7, #12]
 800bf32:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800bf36:	683b      	ldr	r3, [r7, #0]
 800bf38:	691b      	ldr	r3, [r3, #16]
 800bf3a:	4313      	orrs	r3, r2
 800bf3c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800bf3e:	68fb      	ldr	r3, [r7, #12]
 800bf40:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800bf44:	683b      	ldr	r3, [r7, #0]
 800bf46:	695b      	ldr	r3, [r3, #20]
 800bf48:	4313      	orrs	r3, r2
 800bf4a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800bf52:	683b      	ldr	r3, [r7, #0]
 800bf54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bf56:	4313      	orrs	r3, r2
 800bf58:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800bf5a:	68fb      	ldr	r3, [r7, #12]
 800bf5c:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800bf60:	683b      	ldr	r3, [r7, #0]
 800bf62:	699b      	ldr	r3, [r3, #24]
 800bf64:	041b      	lsls	r3, r3, #16
 800bf66:	4313      	orrs	r3, r2
 800bf68:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800bf6a:	68fb      	ldr	r3, [r7, #12]
 800bf6c:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800bf70:	683b      	ldr	r3, [r7, #0]
 800bf72:	69db      	ldr	r3, [r3, #28]
 800bf74:	4313      	orrs	r3, r2
 800bf76:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	4a1c      	ldr	r2, [pc, #112]	@ (800bff0 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800bf7e:	4293      	cmp	r3, r2
 800bf80:	d009      	beq.n	800bf96 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	681b      	ldr	r3, [r3, #0]
 800bf86:	4a1b      	ldr	r2, [pc, #108]	@ (800bff4 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800bf88:	4293      	cmp	r3, r2
 800bf8a:	d004      	beq.n	800bf96 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	4a19      	ldr	r2, [pc, #100]	@ (800bff8 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800bf92:	4293      	cmp	r3, r2
 800bf94:	d11c      	bne.n	800bfd0 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800bf96:	68fb      	ldr	r3, [r7, #12]
 800bf98:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800bf9c:	683b      	ldr	r3, [r7, #0]
 800bf9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bfa0:	051b      	lsls	r3, r3, #20
 800bfa2:	4313      	orrs	r3, r2
 800bfa4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800bfa6:	68fb      	ldr	r3, [r7, #12]
 800bfa8:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800bfac:	683b      	ldr	r3, [r7, #0]
 800bfae:	6a1b      	ldr	r3, [r3, #32]
 800bfb0:	4313      	orrs	r3, r2
 800bfb2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800bfb4:	68fb      	ldr	r3, [r7, #12]
 800bfb6:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800bfba:	683b      	ldr	r3, [r7, #0]
 800bfbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bfbe:	4313      	orrs	r3, r2
 800bfc0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800bfc2:	68fb      	ldr	r3, [r7, #12]
 800bfc4:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800bfc8:	683b      	ldr	r3, [r7, #0]
 800bfca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bfcc:	4313      	orrs	r3, r2
 800bfce:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	681b      	ldr	r3, [r3, #0]
 800bfd4:	68fa      	ldr	r2, [r7, #12]
 800bfd6:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	2200      	movs	r2, #0
 800bfdc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800bfe0:	2300      	movs	r3, #0
}
 800bfe2:	4618      	mov	r0, r3
 800bfe4:	3714      	adds	r7, #20
 800bfe6:	46bd      	mov	sp, r7
 800bfe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfec:	4770      	bx	lr
 800bfee:	bf00      	nop
 800bff0:	40012c00 	.word	0x40012c00
 800bff4:	40013400 	.word	0x40013400
 800bff8:	40015000 	.word	0x40015000

0800bffc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800bffc:	b480      	push	{r7}
 800bffe:	b083      	sub	sp, #12
 800c000:	af00      	add	r7, sp, #0
 800c002:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c004:	bf00      	nop
 800c006:	370c      	adds	r7, #12
 800c008:	46bd      	mov	sp, r7
 800c00a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c00e:	4770      	bx	lr

0800c010 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800c010:	b480      	push	{r7}
 800c012:	b083      	sub	sp, #12
 800c014:	af00      	add	r7, sp, #0
 800c016:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 800c018:	bf00      	nop
 800c01a:	370c      	adds	r7, #12
 800c01c:	46bd      	mov	sp, r7
 800c01e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c022:	4770      	bx	lr

0800c024 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c024:	b480      	push	{r7}
 800c026:	b083      	sub	sp, #12
 800c028:	af00      	add	r7, sp, #0
 800c02a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c02c:	bf00      	nop
 800c02e:	370c      	adds	r7, #12
 800c030:	46bd      	mov	sp, r7
 800c032:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c036:	4770      	bx	lr

0800c038 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800c038:	b480      	push	{r7}
 800c03a:	b083      	sub	sp, #12
 800c03c:	af00      	add	r7, sp, #0
 800c03e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800c040:	bf00      	nop
 800c042:	370c      	adds	r7, #12
 800c044:	46bd      	mov	sp, r7
 800c046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c04a:	4770      	bx	lr

0800c04c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800c04c:	b480      	push	{r7}
 800c04e:	b083      	sub	sp, #12
 800c050:	af00      	add	r7, sp, #0
 800c052:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800c054:	bf00      	nop
 800c056:	370c      	adds	r7, #12
 800c058:	46bd      	mov	sp, r7
 800c05a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c05e:	4770      	bx	lr

0800c060 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800c060:	b480      	push	{r7}
 800c062:	b083      	sub	sp, #12
 800c064:	af00      	add	r7, sp, #0
 800c066:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800c068:	bf00      	nop
 800c06a:	370c      	adds	r7, #12
 800c06c:	46bd      	mov	sp, r7
 800c06e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c072:	4770      	bx	lr

0800c074 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800c074:	b480      	push	{r7}
 800c076:	b083      	sub	sp, #12
 800c078:	af00      	add	r7, sp, #0
 800c07a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800c07c:	bf00      	nop
 800c07e:	370c      	adds	r7, #12
 800c080:	46bd      	mov	sp, r7
 800c082:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c086:	4770      	bx	lr

0800c088 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800c088:	b480      	push	{r7}
 800c08a:	b083      	sub	sp, #12
 800c08c:	af00      	add	r7, sp, #0
 800c08e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800c090:	bf00      	nop
 800c092:	370c      	adds	r7, #12
 800c094:	46bd      	mov	sp, r7
 800c096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c09a:	4770      	bx	lr

0800c09c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c09c:	b580      	push	{r7, lr}
 800c09e:	b082      	sub	sp, #8
 800c0a0:	af00      	add	r7, sp, #0
 800c0a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d101      	bne.n	800c0ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c0aa:	2301      	movs	r3, #1
 800c0ac:	e050      	b.n	800c150 <HAL_UART_Init+0xb4>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c0b4:	2b00      	cmp	r3, #0
 800c0b6:	d114      	bne.n	800c0e2 <HAL_UART_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	2200      	movs	r2, #0
 800c0bc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 800c0c0:	6878      	ldr	r0, [r7, #4]
 800c0c2:	f000 fe37 	bl	800cd34 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d103      	bne.n	800c0d8 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	4a21      	ldr	r2, [pc, #132]	@ (800c158 <HAL_UART_Init+0xbc>)
 800c0d4:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800c0de:	6878      	ldr	r0, [r7, #4]
 800c0e0:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	2224      	movs	r2, #36	@ 0x24
 800c0e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	681b      	ldr	r3, [r3, #0]
 800c0ee:	681a      	ldr	r2, [r3, #0]
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	f022 0201 	bic.w	r2, r2, #1
 800c0f8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d002      	beq.n	800c108 <HAL_UART_Init+0x6c>
  {
    UART_AdvFeatureConfig(huart);
 800c102:	6878      	ldr	r0, [r7, #4]
 800c104:	f001 f964 	bl	800d3d0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c108:	6878      	ldr	r0, [r7, #4]
 800c10a:	f000 fe65 	bl	800cdd8 <UART_SetConfig>
 800c10e:	4603      	mov	r3, r0
 800c110:	2b01      	cmp	r3, #1
 800c112:	d101      	bne.n	800c118 <HAL_UART_Init+0x7c>
  {
    return HAL_ERROR;
 800c114:	2301      	movs	r3, #1
 800c116:	e01b      	b.n	800c150 <HAL_UART_Init+0xb4>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	681b      	ldr	r3, [r3, #0]
 800c11c:	685a      	ldr	r2, [r3, #4]
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800c126:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	681b      	ldr	r3, [r3, #0]
 800c12c:	689a      	ldr	r2, [r3, #8]
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	681b      	ldr	r3, [r3, #0]
 800c132:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800c136:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	681a      	ldr	r2, [r3, #0]
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	681b      	ldr	r3, [r3, #0]
 800c142:	f042 0201 	orr.w	r2, r2, #1
 800c146:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c148:	6878      	ldr	r0, [r7, #4]
 800c14a:	f001 f9e3 	bl	800d514 <UART_CheckIdleState>
 800c14e:	4603      	mov	r3, r0
}
 800c150:	4618      	mov	r0, r3
 800c152:	3708      	adds	r7, #8
 800c154:	46bd      	mov	sp, r7
 800c156:	bd80      	pop	{r7, pc}
 800c158:	08006065 	.word	0x08006065

0800c15c <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 800c15c:	b480      	push	{r7}
 800c15e:	b087      	sub	sp, #28
 800c160:	af00      	add	r7, sp, #0
 800c162:	60f8      	str	r0, [r7, #12]
 800c164:	460b      	mov	r3, r1
 800c166:	607a      	str	r2, [r7, #4]
 800c168:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800c16a:	2300      	movs	r3, #0
 800c16c:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	2b00      	cmp	r3, #0
 800c172:	d109      	bne.n	800c188 <HAL_UART_RegisterCallback+0x2c>
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800c174:	68fb      	ldr	r3, [r7, #12]
 800c176:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c17a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800c17e:	68fb      	ldr	r3, [r7, #12]
 800c180:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    return HAL_ERROR;
 800c184:	2301      	movs	r3, #1
 800c186:	e09c      	b.n	800c2c2 <HAL_UART_RegisterCallback+0x166>
  }

  if (huart->gState == HAL_UART_STATE_READY)
 800c188:	68fb      	ldr	r3, [r7, #12]
 800c18a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c18e:	2b20      	cmp	r3, #32
 800c190:	d16c      	bne.n	800c26c <HAL_UART_RegisterCallback+0x110>
  {
    switch (CallbackID)
 800c192:	7afb      	ldrb	r3, [r7, #11]
 800c194:	2b0c      	cmp	r3, #12
 800c196:	d85e      	bhi.n	800c256 <HAL_UART_RegisterCallback+0xfa>
 800c198:	a201      	add	r2, pc, #4	@ (adr r2, 800c1a0 <HAL_UART_RegisterCallback+0x44>)
 800c19a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c19e:	bf00      	nop
 800c1a0:	0800c1d5 	.word	0x0800c1d5
 800c1a4:	0800c1df 	.word	0x0800c1df
 800c1a8:	0800c1e9 	.word	0x0800c1e9
 800c1ac:	0800c1f3 	.word	0x0800c1f3
 800c1b0:	0800c1fd 	.word	0x0800c1fd
 800c1b4:	0800c207 	.word	0x0800c207
 800c1b8:	0800c211 	.word	0x0800c211
 800c1bc:	0800c21b 	.word	0x0800c21b
 800c1c0:	0800c225 	.word	0x0800c225
 800c1c4:	0800c22f 	.word	0x0800c22f
 800c1c8:	0800c239 	.word	0x0800c239
 800c1cc:	0800c243 	.word	0x0800c243
 800c1d0:	0800c24d 	.word	0x0800c24d
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 800c1d4:	68fb      	ldr	r3, [r7, #12]
 800c1d6:	687a      	ldr	r2, [r7, #4]
 800c1d8:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 800c1dc:	e070      	b.n	800c2c0 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 800c1de:	68fb      	ldr	r3, [r7, #12]
 800c1e0:	687a      	ldr	r2, [r7, #4]
 800c1e2:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 800c1e6:	e06b      	b.n	800c2c0 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 800c1e8:	68fb      	ldr	r3, [r7, #12]
 800c1ea:	687a      	ldr	r2, [r7, #4]
 800c1ec:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 800c1f0:	e066      	b.n	800c2c0 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 800c1f2:	68fb      	ldr	r3, [r7, #12]
 800c1f4:	687a      	ldr	r2, [r7, #4]
 800c1f6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 800c1fa:	e061      	b.n	800c2c0 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 800c1fc:	68fb      	ldr	r3, [r7, #12]
 800c1fe:	687a      	ldr	r2, [r7, #4]
 800c200:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 800c204:	e05c      	b.n	800c2c0 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 800c206:	68fb      	ldr	r3, [r7, #12]
 800c208:	687a      	ldr	r2, [r7, #4]
 800c20a:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 800c20e:	e057      	b.n	800c2c0 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 800c210:	68fb      	ldr	r3, [r7, #12]
 800c212:	687a      	ldr	r2, [r7, #4]
 800c214:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 800c218:	e052      	b.n	800c2c0 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 800c21a:	68fb      	ldr	r3, [r7, #12]
 800c21c:	687a      	ldr	r2, [r7, #4]
 800c21e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 800c222:	e04d      	b.n	800c2c0 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_WAKEUP_CB_ID :
        huart->WakeupCallback = pCallback;
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	687a      	ldr	r2, [r7, #4]
 800c228:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 800c22c:	e048      	b.n	800c2c0 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_FIFO_FULL_CB_ID :
        huart->RxFifoFullCallback = pCallback;
 800c22e:	68fb      	ldr	r3, [r7, #12]
 800c230:	687a      	ldr	r2, [r7, #4]
 800c232:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 800c236:	e043      	b.n	800c2c0 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_FIFO_EMPTY_CB_ID :
        huart->TxFifoEmptyCallback = pCallback;
 800c238:	68fb      	ldr	r3, [r7, #12]
 800c23a:	687a      	ldr	r2, [r7, #4]
 800c23c:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 800c240:	e03e      	b.n	800c2c0 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800c242:	68fb      	ldr	r3, [r7, #12]
 800c244:	687a      	ldr	r2, [r7, #4]
 800c246:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800c24a:	e039      	b.n	800c2c0 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800c24c:	68fb      	ldr	r3, [r7, #12]
 800c24e:	687a      	ldr	r2, [r7, #4]
 800c250:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 800c254:	e034      	b.n	800c2c0 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800c256:	68fb      	ldr	r3, [r7, #12]
 800c258:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c25c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800c260:	68fb      	ldr	r3, [r7, #12]
 800c262:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 800c266:	2301      	movs	r3, #1
 800c268:	75fb      	strb	r3, [r7, #23]
        break;
 800c26a:	e029      	b.n	800c2c0 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 800c26c:	68fb      	ldr	r3, [r7, #12]
 800c26e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c272:	2b00      	cmp	r3, #0
 800c274:	d11a      	bne.n	800c2ac <HAL_UART_RegisterCallback+0x150>
  {
    switch (CallbackID)
 800c276:	7afb      	ldrb	r3, [r7, #11]
 800c278:	2b0b      	cmp	r3, #11
 800c27a:	d002      	beq.n	800c282 <HAL_UART_RegisterCallback+0x126>
 800c27c:	2b0c      	cmp	r3, #12
 800c27e:	d005      	beq.n	800c28c <HAL_UART_RegisterCallback+0x130>
 800c280:	e009      	b.n	800c296 <HAL_UART_RegisterCallback+0x13a>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800c282:	68fb      	ldr	r3, [r7, #12]
 800c284:	687a      	ldr	r2, [r7, #4]
 800c286:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800c28a:	e019      	b.n	800c2c0 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	687a      	ldr	r2, [r7, #4]
 800c290:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 800c294:	e014      	b.n	800c2c0 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800c296:	68fb      	ldr	r3, [r7, #12]
 800c298:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c29c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800c2a0:	68fb      	ldr	r3, [r7, #12]
 800c2a2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 800c2a6:	2301      	movs	r3, #1
 800c2a8:	75fb      	strb	r3, [r7, #23]
        break;
 800c2aa:	e009      	b.n	800c2c0 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800c2ac:	68fb      	ldr	r3, [r7, #12]
 800c2ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c2b2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800c2b6:	68fb      	ldr	r3, [r7, #12]
 800c2b8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    status =  HAL_ERROR;
 800c2bc:	2301      	movs	r3, #1
 800c2be:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800c2c0:	7dfb      	ldrb	r3, [r7, #23]
}
 800c2c2:	4618      	mov	r0, r3
 800c2c4:	371c      	adds	r7, #28
 800c2c6:	46bd      	mov	sp, r7
 800c2c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2cc:	4770      	bx	lr
 800c2ce:	bf00      	nop

0800c2d0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c2d0:	b580      	push	{r7, lr}
 800c2d2:	b08a      	sub	sp, #40	@ 0x28
 800c2d4:	af00      	add	r7, sp, #0
 800c2d6:	60f8      	str	r0, [r7, #12]
 800c2d8:	60b9      	str	r1, [r7, #8]
 800c2da:	4613      	mov	r3, r2
 800c2dc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c2de:	68fb      	ldr	r3, [r7, #12]
 800c2e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c2e4:	2b20      	cmp	r3, #32
 800c2e6:	d137      	bne.n	800c358 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800c2e8:	68bb      	ldr	r3, [r7, #8]
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	d002      	beq.n	800c2f4 <HAL_UART_Receive_IT+0x24>
 800c2ee:	88fb      	ldrh	r3, [r7, #6]
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	d101      	bne.n	800c2f8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800c2f4:	2301      	movs	r3, #1
 800c2f6:	e030      	b.n	800c35a <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c2f8:	68fb      	ldr	r3, [r7, #12]
 800c2fa:	2200      	movs	r2, #0
 800c2fc:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c2fe:	68fb      	ldr	r3, [r7, #12]
 800c300:	681b      	ldr	r3, [r3, #0]
 800c302:	4a18      	ldr	r2, [pc, #96]	@ (800c364 <HAL_UART_Receive_IT+0x94>)
 800c304:	4293      	cmp	r3, r2
 800c306:	d01f      	beq.n	800c348 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c308:	68fb      	ldr	r3, [r7, #12]
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	685b      	ldr	r3, [r3, #4]
 800c30e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c312:	2b00      	cmp	r3, #0
 800c314:	d018      	beq.n	800c348 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c316:	68fb      	ldr	r3, [r7, #12]
 800c318:	681b      	ldr	r3, [r3, #0]
 800c31a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c31c:	697b      	ldr	r3, [r7, #20]
 800c31e:	e853 3f00 	ldrex	r3, [r3]
 800c322:	613b      	str	r3, [r7, #16]
   return(result);
 800c324:	693b      	ldr	r3, [r7, #16]
 800c326:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800c32a:	627b      	str	r3, [r7, #36]	@ 0x24
 800c32c:	68fb      	ldr	r3, [r7, #12]
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	461a      	mov	r2, r3
 800c332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c334:	623b      	str	r3, [r7, #32]
 800c336:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c338:	69f9      	ldr	r1, [r7, #28]
 800c33a:	6a3a      	ldr	r2, [r7, #32]
 800c33c:	e841 2300 	strex	r3, r2, [r1]
 800c340:	61bb      	str	r3, [r7, #24]
   return(result);
 800c342:	69bb      	ldr	r3, [r7, #24]
 800c344:	2b00      	cmp	r3, #0
 800c346:	d1e6      	bne.n	800c316 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800c348:	88fb      	ldrh	r3, [r7, #6]
 800c34a:	461a      	mov	r2, r3
 800c34c:	68b9      	ldr	r1, [r7, #8]
 800c34e:	68f8      	ldr	r0, [r7, #12]
 800c350:	f001 f9f8 	bl	800d744 <UART_Start_Receive_IT>
 800c354:	4603      	mov	r3, r0
 800c356:	e000      	b.n	800c35a <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800c358:	2302      	movs	r3, #2
  }
}
 800c35a:	4618      	mov	r0, r3
 800c35c:	3728      	adds	r7, #40	@ 0x28
 800c35e:	46bd      	mov	sp, r7
 800c360:	bd80      	pop	{r7, pc}
 800c362:	bf00      	nop
 800c364:	40008000 	.word	0x40008000

0800c368 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800c368:	b580      	push	{r7, lr}
 800c36a:	b08a      	sub	sp, #40	@ 0x28
 800c36c:	af00      	add	r7, sp, #0
 800c36e:	60f8      	str	r0, [r7, #12]
 800c370:	60b9      	str	r1, [r7, #8]
 800c372:	4613      	mov	r3, r2
 800c374:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c376:	68fb      	ldr	r3, [r7, #12]
 800c378:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c37c:	2b20      	cmp	r3, #32
 800c37e:	d167      	bne.n	800c450 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800c380:	68bb      	ldr	r3, [r7, #8]
 800c382:	2b00      	cmp	r3, #0
 800c384:	d002      	beq.n	800c38c <HAL_UART_Transmit_DMA+0x24>
 800c386:	88fb      	ldrh	r3, [r7, #6]
 800c388:	2b00      	cmp	r3, #0
 800c38a:	d101      	bne.n	800c390 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800c38c:	2301      	movs	r3, #1
 800c38e:	e060      	b.n	800c452 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 800c390:	68fb      	ldr	r3, [r7, #12]
 800c392:	68ba      	ldr	r2, [r7, #8]
 800c394:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800c396:	68fb      	ldr	r3, [r7, #12]
 800c398:	88fa      	ldrh	r2, [r7, #6]
 800c39a:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	88fa      	ldrh	r2, [r7, #6]
 800c3a2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c3a6:	68fb      	ldr	r3, [r7, #12]
 800c3a8:	2200      	movs	r2, #0
 800c3aa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c3ae:	68fb      	ldr	r3, [r7, #12]
 800c3b0:	2221      	movs	r2, #33	@ 0x21
 800c3b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 800c3b6:	68fb      	ldr	r3, [r7, #12]
 800c3b8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	d028      	beq.n	800c410 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800c3be:	68fb      	ldr	r3, [r7, #12]
 800c3c0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c3c2:	4a26      	ldr	r2, [pc, #152]	@ (800c45c <HAL_UART_Transmit_DMA+0xf4>)
 800c3c4:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800c3c6:	68fb      	ldr	r3, [r7, #12]
 800c3c8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c3ca:	4a25      	ldr	r2, [pc, #148]	@ (800c460 <HAL_UART_Transmit_DMA+0xf8>)
 800c3cc:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800c3ce:	68fb      	ldr	r3, [r7, #12]
 800c3d0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c3d2:	4a24      	ldr	r2, [pc, #144]	@ (800c464 <HAL_UART_Transmit_DMA+0xfc>)
 800c3d4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800c3d6:	68fb      	ldr	r3, [r7, #12]
 800c3d8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c3da:	2200      	movs	r2, #0
 800c3dc:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800c3de:	68fb      	ldr	r3, [r7, #12]
 800c3e0:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 800c3e2:	68fb      	ldr	r3, [r7, #12]
 800c3e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c3e6:	4619      	mov	r1, r3
 800c3e8:	68fb      	ldr	r3, [r7, #12]
 800c3ea:	681b      	ldr	r3, [r3, #0]
 800c3ec:	3328      	adds	r3, #40	@ 0x28
 800c3ee:	461a      	mov	r2, r3
 800c3f0:	88fb      	ldrh	r3, [r7, #6]
 800c3f2:	f7fb fbd3 	bl	8007b9c <HAL_DMA_Start_IT>
 800c3f6:	4603      	mov	r3, r0
 800c3f8:	2b00      	cmp	r3, #0
 800c3fa:	d009      	beq.n	800c410 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800c3fc:	68fb      	ldr	r3, [r7, #12]
 800c3fe:	2210      	movs	r2, #16
 800c400:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800c404:	68fb      	ldr	r3, [r7, #12]
 800c406:	2220      	movs	r2, #32
 800c408:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 800c40c:	2301      	movs	r3, #1
 800c40e:	e020      	b.n	800c452 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800c410:	68fb      	ldr	r3, [r7, #12]
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	2240      	movs	r2, #64	@ 0x40
 800c416:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800c418:	68fb      	ldr	r3, [r7, #12]
 800c41a:	681b      	ldr	r3, [r3, #0]
 800c41c:	3308      	adds	r3, #8
 800c41e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c420:	697b      	ldr	r3, [r7, #20]
 800c422:	e853 3f00 	ldrex	r3, [r3]
 800c426:	613b      	str	r3, [r7, #16]
   return(result);
 800c428:	693b      	ldr	r3, [r7, #16]
 800c42a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c42e:	627b      	str	r3, [r7, #36]	@ 0x24
 800c430:	68fb      	ldr	r3, [r7, #12]
 800c432:	681b      	ldr	r3, [r3, #0]
 800c434:	3308      	adds	r3, #8
 800c436:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c438:	623a      	str	r2, [r7, #32]
 800c43a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c43c:	69f9      	ldr	r1, [r7, #28]
 800c43e:	6a3a      	ldr	r2, [r7, #32]
 800c440:	e841 2300 	strex	r3, r2, [r1]
 800c444:	61bb      	str	r3, [r7, #24]
   return(result);
 800c446:	69bb      	ldr	r3, [r7, #24]
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d1e5      	bne.n	800c418 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 800c44c:	2300      	movs	r3, #0
 800c44e:	e000      	b.n	800c452 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800c450:	2302      	movs	r3, #2
  }
}
 800c452:	4618      	mov	r0, r3
 800c454:	3728      	adds	r7, #40	@ 0x28
 800c456:	46bd      	mov	sp, r7
 800c458:	bd80      	pop	{r7, pc}
 800c45a:	bf00      	nop
 800c45c:	0800dad7 	.word	0x0800dad7
 800c460:	0800db75 	.word	0x0800db75
 800c464:	0800db95 	.word	0x0800db95

0800c468 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 800c468:	b580      	push	{r7, lr}
 800c46a:	b09a      	sub	sp, #104	@ 0x68
 800c46c:	af00      	add	r7, sp, #0
 800c46e:	6078      	str	r0, [r7, #4]
  /* Disable PEIE, EIE, RXNEIE and RXFTIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	681b      	ldr	r3, [r3, #0]
 800c474:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c476:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c478:	e853 3f00 	ldrex	r3, [r3]
 800c47c:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800c47e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c480:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c484:	667b      	str	r3, [r7, #100]	@ 0x64
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	681b      	ldr	r3, [r3, #0]
 800c48a:	461a      	mov	r2, r3
 800c48c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c48e:	657b      	str	r3, [r7, #84]	@ 0x54
 800c490:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c492:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800c494:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800c496:	e841 2300 	strex	r3, r2, [r1]
 800c49a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800c49c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	d1e6      	bne.n	800c470 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE);
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	681b      	ldr	r3, [r3, #0]
 800c4a6:	3308      	adds	r3, #8
 800c4a8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c4ac:	e853 3f00 	ldrex	r3, [r3]
 800c4b0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800c4b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4b4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c4b8:	f023 0301 	bic.w	r3, r3, #1
 800c4bc:	663b      	str	r3, [r7, #96]	@ 0x60
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	3308      	adds	r3, #8
 800c4c4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800c4c6:	643a      	str	r2, [r7, #64]	@ 0x40
 800c4c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4ca:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c4cc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c4ce:	e841 2300 	strex	r3, r2, [r1]
 800c4d2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c4d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	d1e3      	bne.n	800c4a2 <HAL_UART_AbortReceive+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c4de:	2b01      	cmp	r3, #1
 800c4e0:	d118      	bne.n	800c514 <HAL_UART_AbortReceive+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	681b      	ldr	r3, [r3, #0]
 800c4e6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4e8:	6a3b      	ldr	r3, [r7, #32]
 800c4ea:	e853 3f00 	ldrex	r3, [r3]
 800c4ee:	61fb      	str	r3, [r7, #28]
   return(result);
 800c4f0:	69fb      	ldr	r3, [r7, #28]
 800c4f2:	f023 0310 	bic.w	r3, r3, #16
 800c4f6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	461a      	mov	r2, r3
 800c4fe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c500:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c502:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c504:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c506:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c508:	e841 2300 	strex	r3, r2, [r1]
 800c50c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c50e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c510:	2b00      	cmp	r3, #0
 800c512:	d1e6      	bne.n	800c4e2 <HAL_UART_AbortReceive+0x7a>
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	689b      	ldr	r3, [r3, #8]
 800c51a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c51e:	2b40      	cmp	r3, #64	@ 0x40
 800c520:	d13b      	bne.n	800c59a <HAL_UART_AbortReceive+0x132>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	3308      	adds	r3, #8
 800c528:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c52a:	68fb      	ldr	r3, [r7, #12]
 800c52c:	e853 3f00 	ldrex	r3, [r3]
 800c530:	60bb      	str	r3, [r7, #8]
   return(result);
 800c532:	68bb      	ldr	r3, [r7, #8]
 800c534:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c538:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	681b      	ldr	r3, [r3, #0]
 800c53e:	3308      	adds	r3, #8
 800c540:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c542:	61ba      	str	r2, [r7, #24]
 800c544:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c546:	6979      	ldr	r1, [r7, #20]
 800c548:	69ba      	ldr	r2, [r7, #24]
 800c54a:	e841 2300 	strex	r3, r2, [r1]
 800c54e:	613b      	str	r3, [r7, #16]
   return(result);
 800c550:	693b      	ldr	r3, [r7, #16]
 800c552:	2b00      	cmp	r3, #0
 800c554:	d1e5      	bne.n	800c522 <HAL_UART_AbortReceive+0xba>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	d01c      	beq.n	800c59a <HAL_UART_AbortReceive+0x132>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c566:	2200      	movs	r2, #0
 800c568:	639a      	str	r2, [r3, #56]	@ 0x38

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c570:	4618      	mov	r0, r3
 800c572:	f7fb fb8e 	bl	8007c92 <HAL_DMA_Abort>
 800c576:	4603      	mov	r3, r0
 800c578:	2b00      	cmp	r3, #0
 800c57a:	d00e      	beq.n	800c59a <HAL_UART_AbortReceive+0x132>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c582:	4618      	mov	r0, r3
 800c584:	f7fb fcf4 	bl	8007f70 <HAL_DMA_GetError>
 800c588:	4603      	mov	r3, r0
 800c58a:	2b20      	cmp	r3, #32
 800c58c:	d105      	bne.n	800c59a <HAL_UART_AbortReceive+0x132>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	2210      	movs	r2, #16
 800c592:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 800c596:	2303      	movs	r3, #3
 800c598:	e017      	b.n	800c5ca <HAL_UART_AbortReceive+0x162>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0U;
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	2200      	movs	r2, #0
 800c59e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	220f      	movs	r2, #15
 800c5a8:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	681b      	ldr	r3, [r3, #0]
 800c5ae:	699a      	ldr	r2, [r3, #24]
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	f042 0208 	orr.w	r2, r2, #8
 800c5b8:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	2220      	movs	r2, #32
 800c5be:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	2200      	movs	r2, #0
 800c5c6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return HAL_OK;
 800c5c8:	2300      	movs	r3, #0
}
 800c5ca:	4618      	mov	r0, r3
 800c5cc:	3768      	adds	r7, #104	@ 0x68
 800c5ce:	46bd      	mov	sp, r7
 800c5d0:	bd80      	pop	{r7, pc}
	...

0800c5d4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c5d4:	b580      	push	{r7, lr}
 800c5d6:	b0ba      	sub	sp, #232	@ 0xe8
 800c5d8:	af00      	add	r7, sp, #0
 800c5da:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	69db      	ldr	r3, [r3, #28]
 800c5e2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	681b      	ldr	r3, [r3, #0]
 800c5f4:	689b      	ldr	r3, [r3, #8]
 800c5f6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800c5fa:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800c5fe:	f640 030f 	movw	r3, #2063	@ 0x80f
 800c602:	4013      	ands	r3, r2
 800c604:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800c608:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d11b      	bne.n	800c648 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c610:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c614:	f003 0320 	and.w	r3, r3, #32
 800c618:	2b00      	cmp	r3, #0
 800c61a:	d015      	beq.n	800c648 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c61c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c620:	f003 0320 	and.w	r3, r3, #32
 800c624:	2b00      	cmp	r3, #0
 800c626:	d105      	bne.n	800c634 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c628:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c62c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c630:	2b00      	cmp	r3, #0
 800c632:	d009      	beq.n	800c648 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c638:	2b00      	cmp	r3, #0
 800c63a:	f000 8312 	beq.w	800cc62 <HAL_UART_IRQHandler+0x68e>
      {
        huart->RxISR(huart);
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c642:	6878      	ldr	r0, [r7, #4]
 800c644:	4798      	blx	r3
      }
      return;
 800c646:	e30c      	b.n	800cc62 <HAL_UART_IRQHandler+0x68e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800c648:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c64c:	2b00      	cmp	r3, #0
 800c64e:	f000 8129 	beq.w	800c8a4 <HAL_UART_IRQHandler+0x2d0>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800c652:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800c656:	4b90      	ldr	r3, [pc, #576]	@ (800c898 <HAL_UART_IRQHandler+0x2c4>)
 800c658:	4013      	ands	r3, r2
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d106      	bne.n	800c66c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800c65e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800c662:	4b8e      	ldr	r3, [pc, #568]	@ (800c89c <HAL_UART_IRQHandler+0x2c8>)
 800c664:	4013      	ands	r3, r2
 800c666:	2b00      	cmp	r3, #0
 800c668:	f000 811c 	beq.w	800c8a4 <HAL_UART_IRQHandler+0x2d0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c66c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c670:	f003 0301 	and.w	r3, r3, #1
 800c674:	2b00      	cmp	r3, #0
 800c676:	d011      	beq.n	800c69c <HAL_UART_IRQHandler+0xc8>
 800c678:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c67c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c680:	2b00      	cmp	r3, #0
 800c682:	d00b      	beq.n	800c69c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	681b      	ldr	r3, [r3, #0]
 800c688:	2201      	movs	r2, #1
 800c68a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c692:	f043 0201 	orr.w	r2, r3, #1
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c69c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c6a0:	f003 0302 	and.w	r3, r3, #2
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	d011      	beq.n	800c6cc <HAL_UART_IRQHandler+0xf8>
 800c6a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c6ac:	f003 0301 	and.w	r3, r3, #1
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	d00b      	beq.n	800c6cc <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	681b      	ldr	r3, [r3, #0]
 800c6b8:	2202      	movs	r2, #2
 800c6ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c6c2:	f043 0204 	orr.w	r2, r3, #4
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c6cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c6d0:	f003 0304 	and.w	r3, r3, #4
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	d011      	beq.n	800c6fc <HAL_UART_IRQHandler+0x128>
 800c6d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c6dc:	f003 0301 	and.w	r3, r3, #1
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	d00b      	beq.n	800c6fc <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	681b      	ldr	r3, [r3, #0]
 800c6e8:	2204      	movs	r2, #4
 800c6ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c6f2:	f043 0202 	orr.w	r2, r3, #2
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800c6fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c700:	f003 0308 	and.w	r3, r3, #8
 800c704:	2b00      	cmp	r3, #0
 800c706:	d017      	beq.n	800c738 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c708:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c70c:	f003 0320 	and.w	r3, r3, #32
 800c710:	2b00      	cmp	r3, #0
 800c712:	d105      	bne.n	800c720 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800c714:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800c718:	4b5f      	ldr	r3, [pc, #380]	@ (800c898 <HAL_UART_IRQHandler+0x2c4>)
 800c71a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	d00b      	beq.n	800c738 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	681b      	ldr	r3, [r3, #0]
 800c724:	2208      	movs	r2, #8
 800c726:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c72e:	f043 0208 	orr.w	r2, r3, #8
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800c738:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c73c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c740:	2b00      	cmp	r3, #0
 800c742:	d012      	beq.n	800c76a <HAL_UART_IRQHandler+0x196>
 800c744:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c748:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800c74c:	2b00      	cmp	r3, #0
 800c74e:	d00c      	beq.n	800c76a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	681b      	ldr	r3, [r3, #0]
 800c754:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c758:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c760:	f043 0220 	orr.w	r2, r3, #32
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c770:	2b00      	cmp	r3, #0
 800c772:	f000 8278 	beq.w	800cc66 <HAL_UART_IRQHandler+0x692>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c776:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c77a:	f003 0320 	and.w	r3, r3, #32
 800c77e:	2b00      	cmp	r3, #0
 800c780:	d013      	beq.n	800c7aa <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c782:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c786:	f003 0320 	and.w	r3, r3, #32
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	d105      	bne.n	800c79a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c78e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c792:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c796:	2b00      	cmp	r3, #0
 800c798:	d007      	beq.n	800c7aa <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	d003      	beq.n	800c7aa <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c7a6:	6878      	ldr	r0, [r7, #4]
 800c7a8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c7b0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	681b      	ldr	r3, [r3, #0]
 800c7b8:	689b      	ldr	r3, [r3, #8]
 800c7ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c7be:	2b40      	cmp	r3, #64	@ 0x40
 800c7c0:	d005      	beq.n	800c7ce <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800c7c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800c7c6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	d058      	beq.n	800c880 <HAL_UART_IRQHandler+0x2ac>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c7ce:	6878      	ldr	r0, [r7, #4]
 800c7d0:	f001 f91b 	bl	800da0a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	681b      	ldr	r3, [r3, #0]
 800c7d8:	689b      	ldr	r3, [r3, #8]
 800c7da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c7de:	2b40      	cmp	r3, #64	@ 0x40
 800c7e0:	d148      	bne.n	800c874 <HAL_UART_IRQHandler+0x2a0>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	681b      	ldr	r3, [r3, #0]
 800c7e6:	3308      	adds	r3, #8
 800c7e8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c7ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800c7f0:	e853 3f00 	ldrex	r3, [r3]
 800c7f4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800c7f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c7fc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c800:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	681b      	ldr	r3, [r3, #0]
 800c808:	3308      	adds	r3, #8
 800c80a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800c80e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800c812:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c816:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800c81a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800c81e:	e841 2300 	strex	r3, r2, [r1]
 800c822:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800c826:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	d1d9      	bne.n	800c7e2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c834:	2b00      	cmp	r3, #0
 800c836:	d017      	beq.n	800c868 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c83e:	4a18      	ldr	r2, [pc, #96]	@ (800c8a0 <HAL_UART_IRQHandler+0x2cc>)
 800c840:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c848:	4618      	mov	r0, r3
 800c84a:	f7fb fa7b 	bl	8007d44 <HAL_DMA_Abort_IT>
 800c84e:	4603      	mov	r3, r0
 800c850:	2b00      	cmp	r3, #0
 800c852:	d01f      	beq.n	800c894 <HAL_UART_IRQHandler+0x2c0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c85a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c85c:	687a      	ldr	r2, [r7, #4]
 800c85e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800c862:	4610      	mov	r0, r2
 800c864:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c866:	e015      	b.n	800c894 <HAL_UART_IRQHandler+0x2c0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800c86e:	6878      	ldr	r0, [r7, #4]
 800c870:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c872:	e00f      	b.n	800c894 <HAL_UART_IRQHandler+0x2c0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800c87a:	6878      	ldr	r0, [r7, #4]
 800c87c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c87e:	e009      	b.n	800c894 <HAL_UART_IRQHandler+0x2c0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800c886:	6878      	ldr	r0, [r7, #4]
 800c888:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	2200      	movs	r2, #0
 800c88e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800c892:	e1e8      	b.n	800cc66 <HAL_UART_IRQHandler+0x692>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c894:	bf00      	nop
    return;
 800c896:	e1e6      	b.n	800cc66 <HAL_UART_IRQHandler+0x692>
 800c898:	10000001 	.word	0x10000001
 800c89c:	04000120 	.word	0x04000120
 800c8a0:	0800dc19 	.word	0x0800dc19

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c8a8:	2b01      	cmp	r3, #1
 800c8aa:	f040 8176 	bne.w	800cb9a <HAL_UART_IRQHandler+0x5c6>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800c8ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c8b2:	f003 0310 	and.w	r3, r3, #16
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	f000 816f 	beq.w	800cb9a <HAL_UART_IRQHandler+0x5c6>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800c8bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c8c0:	f003 0310 	and.w	r3, r3, #16
 800c8c4:	2b00      	cmp	r3, #0
 800c8c6:	f000 8168 	beq.w	800cb9a <HAL_UART_IRQHandler+0x5c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	681b      	ldr	r3, [r3, #0]
 800c8ce:	2210      	movs	r2, #16
 800c8d0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	681b      	ldr	r3, [r3, #0]
 800c8d6:	689b      	ldr	r3, [r3, #8]
 800c8d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c8dc:	2b40      	cmp	r3, #64	@ 0x40
 800c8de:	f040 80dc 	bne.w	800ca9a <HAL_UART_IRQHandler+0x4c6>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c8e8:	681b      	ldr	r3, [r3, #0]
 800c8ea:	685b      	ldr	r3, [r3, #4]
 800c8ec:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c8f0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800c8f4:	2b00      	cmp	r3, #0
 800c8f6:	f000 80b1 	beq.w	800ca5c <HAL_UART_IRQHandler+0x488>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800c900:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800c904:	429a      	cmp	r2, r3
 800c906:	f080 80a9 	bcs.w	800ca5c <HAL_UART_IRQHandler+0x488>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800c910:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c91a:	681b      	ldr	r3, [r3, #0]
 800c91c:	681b      	ldr	r3, [r3, #0]
 800c91e:	f003 0320 	and.w	r3, r3, #32
 800c922:	2b00      	cmp	r3, #0
 800c924:	f040 8087 	bne.w	800ca36 <HAL_UART_IRQHandler+0x462>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	681b      	ldr	r3, [r3, #0]
 800c92c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c930:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800c934:	e853 3f00 	ldrex	r3, [r3]
 800c938:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800c93c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800c940:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c944:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	681b      	ldr	r3, [r3, #0]
 800c94c:	461a      	mov	r2, r3
 800c94e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800c952:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800c956:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c95a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800c95e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800c962:	e841 2300 	strex	r3, r2, [r1]
 800c966:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800c96a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c96e:	2b00      	cmp	r3, #0
 800c970:	d1da      	bne.n	800c928 <HAL_UART_IRQHandler+0x354>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	681b      	ldr	r3, [r3, #0]
 800c976:	3308      	adds	r3, #8
 800c978:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c97a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c97c:	e853 3f00 	ldrex	r3, [r3]
 800c980:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800c982:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c984:	f023 0301 	bic.w	r3, r3, #1
 800c988:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	681b      	ldr	r3, [r3, #0]
 800c990:	3308      	adds	r3, #8
 800c992:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800c996:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800c99a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c99c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800c99e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800c9a2:	e841 2300 	strex	r3, r2, [r1]
 800c9a6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800c9a8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	d1e1      	bne.n	800c972 <HAL_UART_IRQHandler+0x39e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	681b      	ldr	r3, [r3, #0]
 800c9b2:	3308      	adds	r3, #8
 800c9b4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9b6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c9b8:	e853 3f00 	ldrex	r3, [r3]
 800c9bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800c9be:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c9c0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c9c4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	681b      	ldr	r3, [r3, #0]
 800c9cc:	3308      	adds	r3, #8
 800c9ce:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800c9d2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800c9d4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9d6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800c9d8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800c9da:	e841 2300 	strex	r3, r2, [r1]
 800c9de:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800c9e0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c9e2:	2b00      	cmp	r3, #0
 800c9e4:	d1e3      	bne.n	800c9ae <HAL_UART_IRQHandler+0x3da>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	2220      	movs	r2, #32
 800c9ea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	2200      	movs	r2, #0
 800c9f2:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	681b      	ldr	r3, [r3, #0]
 800c9f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c9fc:	e853 3f00 	ldrex	r3, [r3]
 800ca00:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800ca02:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ca04:	f023 0310 	bic.w	r3, r3, #16
 800ca08:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	681b      	ldr	r3, [r3, #0]
 800ca10:	461a      	mov	r2, r3
 800ca12:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ca16:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ca18:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca1a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800ca1c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ca1e:	e841 2300 	strex	r3, r2, [r1]
 800ca22:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800ca24:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ca26:	2b00      	cmp	r3, #0
 800ca28:	d1e4      	bne.n	800c9f4 <HAL_UART_IRQHandler+0x420>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ca30:	4618      	mov	r0, r3
 800ca32:	f7fb f92e 	bl	8007c92 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	2202      	movs	r2, #2
 800ca3a:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800ca42:	687a      	ldr	r2, [r7, #4]
 800ca44:	f8b2 105c 	ldrh.w	r1, [r2, #92]	@ 0x5c
 800ca48:	687a      	ldr	r2, [r7, #4]
 800ca4a:	f8b2 205e 	ldrh.w	r2, [r2, #94]	@ 0x5e
 800ca4e:	b292      	uxth	r2, r2
 800ca50:	1a8a      	subs	r2, r1, r2
 800ca52:	b292      	uxth	r2, r2
 800ca54:	4611      	mov	r1, r2
 800ca56:	6878      	ldr	r0, [r7, #4]
 800ca58:	4798      	blx	r3
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800ca5a:	e106      	b.n	800cc6a <HAL_UART_IRQHandler+0x696>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800ca62:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800ca66:	429a      	cmp	r2, r3
 800ca68:	f040 80ff 	bne.w	800cc6a <HAL_UART_IRQHandler+0x696>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ca72:	681b      	ldr	r3, [r3, #0]
 800ca74:	681b      	ldr	r3, [r3, #0]
 800ca76:	f003 0320 	and.w	r3, r3, #32
 800ca7a:	2b20      	cmp	r3, #32
 800ca7c:	f040 80f5 	bne.w	800cc6a <HAL_UART_IRQHandler+0x696>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	2202      	movs	r2, #2
 800ca84:	671a      	str	r2, [r3, #112]	@ 0x70
            huart->RxEventCallback(huart, huart->RxXferSize);
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800ca8c:	687a      	ldr	r2, [r7, #4]
 800ca8e:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800ca92:	4611      	mov	r1, r2
 800ca94:	6878      	ldr	r0, [r7, #4]
 800ca96:	4798      	blx	r3
      return;
 800ca98:	e0e7      	b.n	800cc6a <HAL_UART_IRQHandler+0x696>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800caa6:	b29b      	uxth	r3, r3
 800caa8:	1ad3      	subs	r3, r2, r3
 800caaa:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800cab4:	b29b      	uxth	r3, r3
 800cab6:	2b00      	cmp	r3, #0
 800cab8:	f000 80d9 	beq.w	800cc6e <HAL_UART_IRQHandler+0x69a>
          && (nb_rx_data > 0U))
 800cabc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	f000 80d4 	beq.w	800cc6e <HAL_UART_IRQHandler+0x69a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	681b      	ldr	r3, [r3, #0]
 800caca:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cacc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cace:	e853 3f00 	ldrex	r3, [r3]
 800cad2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800cad4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cad6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800cada:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	681b      	ldr	r3, [r3, #0]
 800cae2:	461a      	mov	r2, r3
 800cae4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800cae8:	647b      	str	r3, [r7, #68]	@ 0x44
 800caea:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800caec:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800caee:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800caf0:	e841 2300 	strex	r3, r2, [r1]
 800caf4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800caf6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800caf8:	2b00      	cmp	r3, #0
 800cafa:	d1e4      	bne.n	800cac6 <HAL_UART_IRQHandler+0x4f2>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	681b      	ldr	r3, [r3, #0]
 800cb00:	3308      	adds	r3, #8
 800cb02:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb06:	e853 3f00 	ldrex	r3, [r3]
 800cb0a:	623b      	str	r3, [r7, #32]
   return(result);
 800cb0c:	6a3b      	ldr	r3, [r7, #32]
 800cb0e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800cb12:	f023 0301 	bic.w	r3, r3, #1
 800cb16:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	681b      	ldr	r3, [r3, #0]
 800cb1e:	3308      	adds	r3, #8
 800cb20:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800cb24:	633a      	str	r2, [r7, #48]	@ 0x30
 800cb26:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb28:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800cb2a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cb2c:	e841 2300 	strex	r3, r2, [r1]
 800cb30:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800cb32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	d1e1      	bne.n	800cafc <HAL_UART_IRQHandler+0x528>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	2220      	movs	r2, #32
 800cb3c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	2200      	movs	r2, #0
 800cb44:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	2200      	movs	r2, #0
 800cb4a:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	681b      	ldr	r3, [r3, #0]
 800cb50:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb52:	693b      	ldr	r3, [r7, #16]
 800cb54:	e853 3f00 	ldrex	r3, [r3]
 800cb58:	60fb      	str	r3, [r7, #12]
   return(result);
 800cb5a:	68fb      	ldr	r3, [r7, #12]
 800cb5c:	f023 0310 	bic.w	r3, r3, #16
 800cb60:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	681b      	ldr	r3, [r3, #0]
 800cb68:	461a      	mov	r2, r3
 800cb6a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800cb6e:	61fb      	str	r3, [r7, #28]
 800cb70:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb72:	69b9      	ldr	r1, [r7, #24]
 800cb74:	69fa      	ldr	r2, [r7, #28]
 800cb76:	e841 2300 	strex	r3, r2, [r1]
 800cb7a:	617b      	str	r3, [r7, #20]
   return(result);
 800cb7c:	697b      	ldr	r3, [r7, #20]
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	d1e4      	bne.n	800cb4c <HAL_UART_IRQHandler+0x578>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	2202      	movs	r2, #2
 800cb86:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800cb8e:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	@ 0xce
 800cb92:	4611      	mov	r1, r2
 800cb94:	6878      	ldr	r0, [r7, #4]
 800cb96:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800cb98:	e069      	b.n	800cc6e <HAL_UART_IRQHandler+0x69a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800cb9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cb9e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800cba2:	2b00      	cmp	r3, #0
 800cba4:	d010      	beq.n	800cbc8 <HAL_UART_IRQHandler+0x5f4>
 800cba6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800cbaa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800cbae:	2b00      	cmp	r3, #0
 800cbb0:	d00a      	beq.n	800cbc8 <HAL_UART_IRQHandler+0x5f4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	681b      	ldr	r3, [r3, #0]
 800cbb6:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800cbba:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800cbc2:	6878      	ldr	r0, [r7, #4]
 800cbc4:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800cbc6:	e055      	b.n	800cc74 <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800cbc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cbcc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	d014      	beq.n	800cbfe <HAL_UART_IRQHandler+0x62a>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800cbd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cbd8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	d105      	bne.n	800cbec <HAL_UART_IRQHandler+0x618>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800cbe0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800cbe4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800cbe8:	2b00      	cmp	r3, #0
 800cbea:	d008      	beq.n	800cbfe <HAL_UART_IRQHandler+0x62a>
  {
    if (huart->TxISR != NULL)
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	d03e      	beq.n	800cc72 <HAL_UART_IRQHandler+0x69e>
    {
      huart->TxISR(huart);
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800cbf8:	6878      	ldr	r0, [r7, #4]
 800cbfa:	4798      	blx	r3
    }
    return;
 800cbfc:	e039      	b.n	800cc72 <HAL_UART_IRQHandler+0x69e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800cbfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cc02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cc06:	2b00      	cmp	r3, #0
 800cc08:	d009      	beq.n	800cc1e <HAL_UART_IRQHandler+0x64a>
 800cc0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cc0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cc12:	2b00      	cmp	r3, #0
 800cc14:	d003      	beq.n	800cc1e <HAL_UART_IRQHandler+0x64a>
  {
    UART_EndTransmit_IT(huart);
 800cc16:	6878      	ldr	r0, [r7, #4]
 800cc18:	f001 f812 	bl	800dc40 <UART_EndTransmit_IT>
    return;
 800cc1c:	e02a      	b.n	800cc74 <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800cc1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cc22:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	d00b      	beq.n	800cc42 <HAL_UART_IRQHandler+0x66e>
 800cc2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cc2e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800cc32:	2b00      	cmp	r3, #0
 800cc34:	d005      	beq.n	800cc42 <HAL_UART_IRQHandler+0x66e>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800cc3c:	6878      	ldr	r0, [r7, #4]
 800cc3e:	4798      	blx	r3
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800cc40:	e018      	b.n	800cc74 <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800cc42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cc46:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d012      	beq.n	800cc74 <HAL_UART_IRQHandler+0x6a0>
 800cc4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cc52:	2b00      	cmp	r3, #0
 800cc54:	da0e      	bge.n	800cc74 <HAL_UART_IRQHandler+0x6a0>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800cc5c:	6878      	ldr	r0, [r7, #4]
 800cc5e:	4798      	blx	r3
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800cc60:	e008      	b.n	800cc74 <HAL_UART_IRQHandler+0x6a0>
      return;
 800cc62:	bf00      	nop
 800cc64:	e006      	b.n	800cc74 <HAL_UART_IRQHandler+0x6a0>
    return;
 800cc66:	bf00      	nop
 800cc68:	e004      	b.n	800cc74 <HAL_UART_IRQHandler+0x6a0>
      return;
 800cc6a:	bf00      	nop
 800cc6c:	e002      	b.n	800cc74 <HAL_UART_IRQHandler+0x6a0>
      return;
 800cc6e:	bf00      	nop
 800cc70:	e000      	b.n	800cc74 <HAL_UART_IRQHandler+0x6a0>
    return;
 800cc72:	bf00      	nop
  }
}
 800cc74:	37e8      	adds	r7, #232	@ 0xe8
 800cc76:	46bd      	mov	sp, r7
 800cc78:	bd80      	pop	{r7, pc}
 800cc7a:	bf00      	nop

0800cc7c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800cc7c:	b480      	push	{r7}
 800cc7e:	b083      	sub	sp, #12
 800cc80:	af00      	add	r7, sp, #0
 800cc82:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800cc84:	bf00      	nop
 800cc86:	370c      	adds	r7, #12
 800cc88:	46bd      	mov	sp, r7
 800cc8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc8e:	4770      	bx	lr

0800cc90 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800cc90:	b480      	push	{r7}
 800cc92:	b083      	sub	sp, #12
 800cc94:	af00      	add	r7, sp, #0
 800cc96:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800cc98:	bf00      	nop
 800cc9a:	370c      	adds	r7, #12
 800cc9c:	46bd      	mov	sp, r7
 800cc9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cca2:	4770      	bx	lr

0800cca4 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800cca4:	b480      	push	{r7}
 800cca6:	b083      	sub	sp, #12
 800cca8:	af00      	add	r7, sp, #0
 800ccaa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800ccac:	bf00      	nop
 800ccae:	370c      	adds	r7, #12
 800ccb0:	46bd      	mov	sp, r7
 800ccb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccb6:	4770      	bx	lr

0800ccb8 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800ccb8:	b480      	push	{r7}
 800ccba:	b083      	sub	sp, #12
 800ccbc:	af00      	add	r7, sp, #0
 800ccbe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800ccc0:	bf00      	nop
 800ccc2:	370c      	adds	r7, #12
 800ccc4:	46bd      	mov	sp, r7
 800ccc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccca:	4770      	bx	lr

0800cccc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800cccc:	b480      	push	{r7}
 800ccce:	b083      	sub	sp, #12
 800ccd0:	af00      	add	r7, sp, #0
 800ccd2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800ccd4:	bf00      	nop
 800ccd6:	370c      	adds	r7, #12
 800ccd8:	46bd      	mov	sp, r7
 800ccda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccde:	4770      	bx	lr

0800cce0 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800cce0:	b480      	push	{r7}
 800cce2:	b083      	sub	sp, #12
 800cce4:	af00      	add	r7, sp, #0
 800cce6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800cce8:	bf00      	nop
 800ccea:	370c      	adds	r7, #12
 800ccec:	46bd      	mov	sp, r7
 800ccee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccf2:	4770      	bx	lr

0800ccf4 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800ccf4:	b480      	push	{r7}
 800ccf6:	b083      	sub	sp, #12
 800ccf8:	af00      	add	r7, sp, #0
 800ccfa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800ccfc:	bf00      	nop
 800ccfe:	370c      	adds	r7, #12
 800cd00:	46bd      	mov	sp, r7
 800cd02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd06:	4770      	bx	lr

0800cd08 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800cd08:	b480      	push	{r7}
 800cd0a:	b083      	sub	sp, #12
 800cd0c:	af00      	add	r7, sp, #0
 800cd0e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800cd10:	bf00      	nop
 800cd12:	370c      	adds	r7, #12
 800cd14:	46bd      	mov	sp, r7
 800cd16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd1a:	4770      	bx	lr

0800cd1c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800cd1c:	b480      	push	{r7}
 800cd1e:	b083      	sub	sp, #12
 800cd20:	af00      	add	r7, sp, #0
 800cd22:	6078      	str	r0, [r7, #4]
 800cd24:	460b      	mov	r3, r1
 800cd26:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800cd28:	bf00      	nop
 800cd2a:	370c      	adds	r7, #12
 800cd2c:	46bd      	mov	sp, r7
 800cd2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd32:	4770      	bx	lr

0800cd34 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 800cd34:	b480      	push	{r7}
 800cd36:	b083      	sub	sp, #12
 800cd38:	af00      	add	r7, sp, #0
 800cd3a:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	4a1a      	ldr	r2, [pc, #104]	@ (800cda8 <UART_InitCallbacksToDefault+0x74>)
 800cd40:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	4a19      	ldr	r2, [pc, #100]	@ (800cdac <UART_InitCallbacksToDefault+0x78>)
 800cd48:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	4a18      	ldr	r2, [pc, #96]	@ (800cdb0 <UART_InitCallbacksToDefault+0x7c>)
 800cd50:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	4a17      	ldr	r2, [pc, #92]	@ (800cdb4 <UART_InitCallbacksToDefault+0x80>)
 800cd58:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	4a16      	ldr	r2, [pc, #88]	@ (800cdb8 <UART_InitCallbacksToDefault+0x84>)
 800cd60:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	4a15      	ldr	r2, [pc, #84]	@ (800cdbc <UART_InitCallbacksToDefault+0x88>)
 800cd68:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	4a14      	ldr	r2, [pc, #80]	@ (800cdc0 <UART_InitCallbacksToDefault+0x8c>)
 800cd70:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	4a13      	ldr	r2, [pc, #76]	@ (800cdc4 <UART_InitCallbacksToDefault+0x90>)
 800cd78:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	4a12      	ldr	r2, [pc, #72]	@ (800cdc8 <UART_InitCallbacksToDefault+0x94>)
 800cd80:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	4a11      	ldr	r2, [pc, #68]	@ (800cdcc <UART_InitCallbacksToDefault+0x98>)
 800cd88:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	4a10      	ldr	r2, [pc, #64]	@ (800cdd0 <UART_InitCallbacksToDefault+0x9c>)
 800cd90:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	4a0f      	ldr	r2, [pc, #60]	@ (800cdd4 <UART_InitCallbacksToDefault+0xa0>)
 800cd98:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

}
 800cd9c:	bf00      	nop
 800cd9e:	370c      	adds	r7, #12
 800cda0:	46bd      	mov	sp, r7
 800cda2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cda6:	4770      	bx	lr
 800cda8:	0800cc91 	.word	0x0800cc91
 800cdac:	0800cc7d 	.word	0x0800cc7d
 800cdb0:	0800ccb9 	.word	0x0800ccb9
 800cdb4:	0800cca5 	.word	0x0800cca5
 800cdb8:	0800cccd 	.word	0x0800cccd
 800cdbc:	0800cce1 	.word	0x0800cce1
 800cdc0:	0800ccf5 	.word	0x0800ccf5
 800cdc4:	0800cd09 	.word	0x0800cd09
 800cdc8:	0800e705 	.word	0x0800e705
 800cdcc:	0800e719 	.word	0x0800e719
 800cdd0:	0800e72d 	.word	0x0800e72d
 800cdd4:	0800cd1d 	.word	0x0800cd1d

0800cdd8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800cdd8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800cddc:	b08c      	sub	sp, #48	@ 0x30
 800cdde:	af00      	add	r7, sp, #0
 800cde0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800cde2:	2300      	movs	r3, #0
 800cde4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800cde8:	697b      	ldr	r3, [r7, #20]
 800cdea:	689a      	ldr	r2, [r3, #8]
 800cdec:	697b      	ldr	r3, [r7, #20]
 800cdee:	691b      	ldr	r3, [r3, #16]
 800cdf0:	431a      	orrs	r2, r3
 800cdf2:	697b      	ldr	r3, [r7, #20]
 800cdf4:	695b      	ldr	r3, [r3, #20]
 800cdf6:	431a      	orrs	r2, r3
 800cdf8:	697b      	ldr	r3, [r7, #20]
 800cdfa:	69db      	ldr	r3, [r3, #28]
 800cdfc:	4313      	orrs	r3, r2
 800cdfe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ce00:	697b      	ldr	r3, [r7, #20]
 800ce02:	681b      	ldr	r3, [r3, #0]
 800ce04:	681a      	ldr	r2, [r3, #0]
 800ce06:	4baa      	ldr	r3, [pc, #680]	@ (800d0b0 <UART_SetConfig+0x2d8>)
 800ce08:	4013      	ands	r3, r2
 800ce0a:	697a      	ldr	r2, [r7, #20]
 800ce0c:	6812      	ldr	r2, [r2, #0]
 800ce0e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ce10:	430b      	orrs	r3, r1
 800ce12:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ce14:	697b      	ldr	r3, [r7, #20]
 800ce16:	681b      	ldr	r3, [r3, #0]
 800ce18:	685b      	ldr	r3, [r3, #4]
 800ce1a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800ce1e:	697b      	ldr	r3, [r7, #20]
 800ce20:	68da      	ldr	r2, [r3, #12]
 800ce22:	697b      	ldr	r3, [r7, #20]
 800ce24:	681b      	ldr	r3, [r3, #0]
 800ce26:	430a      	orrs	r2, r1
 800ce28:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ce2a:	697b      	ldr	r3, [r7, #20]
 800ce2c:	699b      	ldr	r3, [r3, #24]
 800ce2e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800ce30:	697b      	ldr	r3, [r7, #20]
 800ce32:	681b      	ldr	r3, [r3, #0]
 800ce34:	4a9f      	ldr	r2, [pc, #636]	@ (800d0b4 <UART_SetConfig+0x2dc>)
 800ce36:	4293      	cmp	r3, r2
 800ce38:	d004      	beq.n	800ce44 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800ce3a:	697b      	ldr	r3, [r7, #20]
 800ce3c:	6a1b      	ldr	r3, [r3, #32]
 800ce3e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ce40:	4313      	orrs	r3, r2
 800ce42:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ce44:	697b      	ldr	r3, [r7, #20]
 800ce46:	681b      	ldr	r3, [r3, #0]
 800ce48:	689b      	ldr	r3, [r3, #8]
 800ce4a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800ce4e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800ce52:	697a      	ldr	r2, [r7, #20]
 800ce54:	6812      	ldr	r2, [r2, #0]
 800ce56:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ce58:	430b      	orrs	r3, r1
 800ce5a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800ce5c:	697b      	ldr	r3, [r7, #20]
 800ce5e:	681b      	ldr	r3, [r3, #0]
 800ce60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ce62:	f023 010f 	bic.w	r1, r3, #15
 800ce66:	697b      	ldr	r3, [r7, #20]
 800ce68:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ce6a:	697b      	ldr	r3, [r7, #20]
 800ce6c:	681b      	ldr	r3, [r3, #0]
 800ce6e:	430a      	orrs	r2, r1
 800ce70:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ce72:	697b      	ldr	r3, [r7, #20]
 800ce74:	681b      	ldr	r3, [r3, #0]
 800ce76:	4a90      	ldr	r2, [pc, #576]	@ (800d0b8 <UART_SetConfig+0x2e0>)
 800ce78:	4293      	cmp	r3, r2
 800ce7a:	d125      	bne.n	800cec8 <UART_SetConfig+0xf0>
 800ce7c:	4b8f      	ldr	r3, [pc, #572]	@ (800d0bc <UART_SetConfig+0x2e4>)
 800ce7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ce82:	f003 0303 	and.w	r3, r3, #3
 800ce86:	2b03      	cmp	r3, #3
 800ce88:	d81a      	bhi.n	800cec0 <UART_SetConfig+0xe8>
 800ce8a:	a201      	add	r2, pc, #4	@ (adr r2, 800ce90 <UART_SetConfig+0xb8>)
 800ce8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce90:	0800cea1 	.word	0x0800cea1
 800ce94:	0800ceb1 	.word	0x0800ceb1
 800ce98:	0800cea9 	.word	0x0800cea9
 800ce9c:	0800ceb9 	.word	0x0800ceb9
 800cea0:	2301      	movs	r3, #1
 800cea2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cea6:	e116      	b.n	800d0d6 <UART_SetConfig+0x2fe>
 800cea8:	2302      	movs	r3, #2
 800ceaa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ceae:	e112      	b.n	800d0d6 <UART_SetConfig+0x2fe>
 800ceb0:	2304      	movs	r3, #4
 800ceb2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ceb6:	e10e      	b.n	800d0d6 <UART_SetConfig+0x2fe>
 800ceb8:	2308      	movs	r3, #8
 800ceba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cebe:	e10a      	b.n	800d0d6 <UART_SetConfig+0x2fe>
 800cec0:	2310      	movs	r3, #16
 800cec2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cec6:	e106      	b.n	800d0d6 <UART_SetConfig+0x2fe>
 800cec8:	697b      	ldr	r3, [r7, #20]
 800ceca:	681b      	ldr	r3, [r3, #0]
 800cecc:	4a7c      	ldr	r2, [pc, #496]	@ (800d0c0 <UART_SetConfig+0x2e8>)
 800cece:	4293      	cmp	r3, r2
 800ced0:	d138      	bne.n	800cf44 <UART_SetConfig+0x16c>
 800ced2:	4b7a      	ldr	r3, [pc, #488]	@ (800d0bc <UART_SetConfig+0x2e4>)
 800ced4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ced8:	f003 030c 	and.w	r3, r3, #12
 800cedc:	2b0c      	cmp	r3, #12
 800cede:	d82d      	bhi.n	800cf3c <UART_SetConfig+0x164>
 800cee0:	a201      	add	r2, pc, #4	@ (adr r2, 800cee8 <UART_SetConfig+0x110>)
 800cee2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cee6:	bf00      	nop
 800cee8:	0800cf1d 	.word	0x0800cf1d
 800ceec:	0800cf3d 	.word	0x0800cf3d
 800cef0:	0800cf3d 	.word	0x0800cf3d
 800cef4:	0800cf3d 	.word	0x0800cf3d
 800cef8:	0800cf2d 	.word	0x0800cf2d
 800cefc:	0800cf3d 	.word	0x0800cf3d
 800cf00:	0800cf3d 	.word	0x0800cf3d
 800cf04:	0800cf3d 	.word	0x0800cf3d
 800cf08:	0800cf25 	.word	0x0800cf25
 800cf0c:	0800cf3d 	.word	0x0800cf3d
 800cf10:	0800cf3d 	.word	0x0800cf3d
 800cf14:	0800cf3d 	.word	0x0800cf3d
 800cf18:	0800cf35 	.word	0x0800cf35
 800cf1c:	2300      	movs	r3, #0
 800cf1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cf22:	e0d8      	b.n	800d0d6 <UART_SetConfig+0x2fe>
 800cf24:	2302      	movs	r3, #2
 800cf26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cf2a:	e0d4      	b.n	800d0d6 <UART_SetConfig+0x2fe>
 800cf2c:	2304      	movs	r3, #4
 800cf2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cf32:	e0d0      	b.n	800d0d6 <UART_SetConfig+0x2fe>
 800cf34:	2308      	movs	r3, #8
 800cf36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cf3a:	e0cc      	b.n	800d0d6 <UART_SetConfig+0x2fe>
 800cf3c:	2310      	movs	r3, #16
 800cf3e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cf42:	e0c8      	b.n	800d0d6 <UART_SetConfig+0x2fe>
 800cf44:	697b      	ldr	r3, [r7, #20]
 800cf46:	681b      	ldr	r3, [r3, #0]
 800cf48:	4a5e      	ldr	r2, [pc, #376]	@ (800d0c4 <UART_SetConfig+0x2ec>)
 800cf4a:	4293      	cmp	r3, r2
 800cf4c:	d125      	bne.n	800cf9a <UART_SetConfig+0x1c2>
 800cf4e:	4b5b      	ldr	r3, [pc, #364]	@ (800d0bc <UART_SetConfig+0x2e4>)
 800cf50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cf54:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800cf58:	2b30      	cmp	r3, #48	@ 0x30
 800cf5a:	d016      	beq.n	800cf8a <UART_SetConfig+0x1b2>
 800cf5c:	2b30      	cmp	r3, #48	@ 0x30
 800cf5e:	d818      	bhi.n	800cf92 <UART_SetConfig+0x1ba>
 800cf60:	2b20      	cmp	r3, #32
 800cf62:	d00a      	beq.n	800cf7a <UART_SetConfig+0x1a2>
 800cf64:	2b20      	cmp	r3, #32
 800cf66:	d814      	bhi.n	800cf92 <UART_SetConfig+0x1ba>
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	d002      	beq.n	800cf72 <UART_SetConfig+0x19a>
 800cf6c:	2b10      	cmp	r3, #16
 800cf6e:	d008      	beq.n	800cf82 <UART_SetConfig+0x1aa>
 800cf70:	e00f      	b.n	800cf92 <UART_SetConfig+0x1ba>
 800cf72:	2300      	movs	r3, #0
 800cf74:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cf78:	e0ad      	b.n	800d0d6 <UART_SetConfig+0x2fe>
 800cf7a:	2302      	movs	r3, #2
 800cf7c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cf80:	e0a9      	b.n	800d0d6 <UART_SetConfig+0x2fe>
 800cf82:	2304      	movs	r3, #4
 800cf84:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cf88:	e0a5      	b.n	800d0d6 <UART_SetConfig+0x2fe>
 800cf8a:	2308      	movs	r3, #8
 800cf8c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cf90:	e0a1      	b.n	800d0d6 <UART_SetConfig+0x2fe>
 800cf92:	2310      	movs	r3, #16
 800cf94:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cf98:	e09d      	b.n	800d0d6 <UART_SetConfig+0x2fe>
 800cf9a:	697b      	ldr	r3, [r7, #20]
 800cf9c:	681b      	ldr	r3, [r3, #0]
 800cf9e:	4a4a      	ldr	r2, [pc, #296]	@ (800d0c8 <UART_SetConfig+0x2f0>)
 800cfa0:	4293      	cmp	r3, r2
 800cfa2:	d125      	bne.n	800cff0 <UART_SetConfig+0x218>
 800cfa4:	4b45      	ldr	r3, [pc, #276]	@ (800d0bc <UART_SetConfig+0x2e4>)
 800cfa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cfaa:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800cfae:	2bc0      	cmp	r3, #192	@ 0xc0
 800cfb0:	d016      	beq.n	800cfe0 <UART_SetConfig+0x208>
 800cfb2:	2bc0      	cmp	r3, #192	@ 0xc0
 800cfb4:	d818      	bhi.n	800cfe8 <UART_SetConfig+0x210>
 800cfb6:	2b80      	cmp	r3, #128	@ 0x80
 800cfb8:	d00a      	beq.n	800cfd0 <UART_SetConfig+0x1f8>
 800cfba:	2b80      	cmp	r3, #128	@ 0x80
 800cfbc:	d814      	bhi.n	800cfe8 <UART_SetConfig+0x210>
 800cfbe:	2b00      	cmp	r3, #0
 800cfc0:	d002      	beq.n	800cfc8 <UART_SetConfig+0x1f0>
 800cfc2:	2b40      	cmp	r3, #64	@ 0x40
 800cfc4:	d008      	beq.n	800cfd8 <UART_SetConfig+0x200>
 800cfc6:	e00f      	b.n	800cfe8 <UART_SetConfig+0x210>
 800cfc8:	2300      	movs	r3, #0
 800cfca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cfce:	e082      	b.n	800d0d6 <UART_SetConfig+0x2fe>
 800cfd0:	2302      	movs	r3, #2
 800cfd2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cfd6:	e07e      	b.n	800d0d6 <UART_SetConfig+0x2fe>
 800cfd8:	2304      	movs	r3, #4
 800cfda:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cfde:	e07a      	b.n	800d0d6 <UART_SetConfig+0x2fe>
 800cfe0:	2308      	movs	r3, #8
 800cfe2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cfe6:	e076      	b.n	800d0d6 <UART_SetConfig+0x2fe>
 800cfe8:	2310      	movs	r3, #16
 800cfea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cfee:	e072      	b.n	800d0d6 <UART_SetConfig+0x2fe>
 800cff0:	697b      	ldr	r3, [r7, #20]
 800cff2:	681b      	ldr	r3, [r3, #0]
 800cff4:	4a35      	ldr	r2, [pc, #212]	@ (800d0cc <UART_SetConfig+0x2f4>)
 800cff6:	4293      	cmp	r3, r2
 800cff8:	d12a      	bne.n	800d050 <UART_SetConfig+0x278>
 800cffa:	4b30      	ldr	r3, [pc, #192]	@ (800d0bc <UART_SetConfig+0x2e4>)
 800cffc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d000:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d004:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d008:	d01a      	beq.n	800d040 <UART_SetConfig+0x268>
 800d00a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d00e:	d81b      	bhi.n	800d048 <UART_SetConfig+0x270>
 800d010:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d014:	d00c      	beq.n	800d030 <UART_SetConfig+0x258>
 800d016:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d01a:	d815      	bhi.n	800d048 <UART_SetConfig+0x270>
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	d003      	beq.n	800d028 <UART_SetConfig+0x250>
 800d020:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d024:	d008      	beq.n	800d038 <UART_SetConfig+0x260>
 800d026:	e00f      	b.n	800d048 <UART_SetConfig+0x270>
 800d028:	2300      	movs	r3, #0
 800d02a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d02e:	e052      	b.n	800d0d6 <UART_SetConfig+0x2fe>
 800d030:	2302      	movs	r3, #2
 800d032:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d036:	e04e      	b.n	800d0d6 <UART_SetConfig+0x2fe>
 800d038:	2304      	movs	r3, #4
 800d03a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d03e:	e04a      	b.n	800d0d6 <UART_SetConfig+0x2fe>
 800d040:	2308      	movs	r3, #8
 800d042:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d046:	e046      	b.n	800d0d6 <UART_SetConfig+0x2fe>
 800d048:	2310      	movs	r3, #16
 800d04a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d04e:	e042      	b.n	800d0d6 <UART_SetConfig+0x2fe>
 800d050:	697b      	ldr	r3, [r7, #20]
 800d052:	681b      	ldr	r3, [r3, #0]
 800d054:	4a17      	ldr	r2, [pc, #92]	@ (800d0b4 <UART_SetConfig+0x2dc>)
 800d056:	4293      	cmp	r3, r2
 800d058:	d13a      	bne.n	800d0d0 <UART_SetConfig+0x2f8>
 800d05a:	4b18      	ldr	r3, [pc, #96]	@ (800d0bc <UART_SetConfig+0x2e4>)
 800d05c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d060:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800d064:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800d068:	d01a      	beq.n	800d0a0 <UART_SetConfig+0x2c8>
 800d06a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800d06e:	d81b      	bhi.n	800d0a8 <UART_SetConfig+0x2d0>
 800d070:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d074:	d00c      	beq.n	800d090 <UART_SetConfig+0x2b8>
 800d076:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d07a:	d815      	bhi.n	800d0a8 <UART_SetConfig+0x2d0>
 800d07c:	2b00      	cmp	r3, #0
 800d07e:	d003      	beq.n	800d088 <UART_SetConfig+0x2b0>
 800d080:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d084:	d008      	beq.n	800d098 <UART_SetConfig+0x2c0>
 800d086:	e00f      	b.n	800d0a8 <UART_SetConfig+0x2d0>
 800d088:	2300      	movs	r3, #0
 800d08a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d08e:	e022      	b.n	800d0d6 <UART_SetConfig+0x2fe>
 800d090:	2302      	movs	r3, #2
 800d092:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d096:	e01e      	b.n	800d0d6 <UART_SetConfig+0x2fe>
 800d098:	2304      	movs	r3, #4
 800d09a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d09e:	e01a      	b.n	800d0d6 <UART_SetConfig+0x2fe>
 800d0a0:	2308      	movs	r3, #8
 800d0a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d0a6:	e016      	b.n	800d0d6 <UART_SetConfig+0x2fe>
 800d0a8:	2310      	movs	r3, #16
 800d0aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d0ae:	e012      	b.n	800d0d6 <UART_SetConfig+0x2fe>
 800d0b0:	cfff69f3 	.word	0xcfff69f3
 800d0b4:	40008000 	.word	0x40008000
 800d0b8:	40013800 	.word	0x40013800
 800d0bc:	40021000 	.word	0x40021000
 800d0c0:	40004400 	.word	0x40004400
 800d0c4:	40004800 	.word	0x40004800
 800d0c8:	40004c00 	.word	0x40004c00
 800d0cc:	40005000 	.word	0x40005000
 800d0d0:	2310      	movs	r3, #16
 800d0d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800d0d6:	697b      	ldr	r3, [r7, #20]
 800d0d8:	681b      	ldr	r3, [r3, #0]
 800d0da:	4aae      	ldr	r2, [pc, #696]	@ (800d394 <UART_SetConfig+0x5bc>)
 800d0dc:	4293      	cmp	r3, r2
 800d0de:	f040 8097 	bne.w	800d210 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800d0e2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800d0e6:	2b08      	cmp	r3, #8
 800d0e8:	d823      	bhi.n	800d132 <UART_SetConfig+0x35a>
 800d0ea:	a201      	add	r2, pc, #4	@ (adr r2, 800d0f0 <UART_SetConfig+0x318>)
 800d0ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d0f0:	0800d115 	.word	0x0800d115
 800d0f4:	0800d133 	.word	0x0800d133
 800d0f8:	0800d11d 	.word	0x0800d11d
 800d0fc:	0800d133 	.word	0x0800d133
 800d100:	0800d123 	.word	0x0800d123
 800d104:	0800d133 	.word	0x0800d133
 800d108:	0800d133 	.word	0x0800d133
 800d10c:	0800d133 	.word	0x0800d133
 800d110:	0800d12b 	.word	0x0800d12b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d114:	f7fb fefa 	bl	8008f0c <HAL_RCC_GetPCLK1Freq>
 800d118:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800d11a:	e010      	b.n	800d13e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d11c:	4b9e      	ldr	r3, [pc, #632]	@ (800d398 <UART_SetConfig+0x5c0>)
 800d11e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800d120:	e00d      	b.n	800d13e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d122:	f7fb fe85 	bl	8008e30 <HAL_RCC_GetSysClockFreq>
 800d126:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800d128:	e009      	b.n	800d13e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d12a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d12e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800d130:	e005      	b.n	800d13e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800d132:	2300      	movs	r3, #0
 800d134:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800d136:	2301      	movs	r3, #1
 800d138:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800d13c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800d13e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d140:	2b00      	cmp	r3, #0
 800d142:	f000 8130 	beq.w	800d3a6 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800d146:	697b      	ldr	r3, [r7, #20]
 800d148:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d14a:	4a94      	ldr	r2, [pc, #592]	@ (800d39c <UART_SetConfig+0x5c4>)
 800d14c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d150:	461a      	mov	r2, r3
 800d152:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d154:	fbb3 f3f2 	udiv	r3, r3, r2
 800d158:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d15a:	697b      	ldr	r3, [r7, #20]
 800d15c:	685a      	ldr	r2, [r3, #4]
 800d15e:	4613      	mov	r3, r2
 800d160:	005b      	lsls	r3, r3, #1
 800d162:	4413      	add	r3, r2
 800d164:	69ba      	ldr	r2, [r7, #24]
 800d166:	429a      	cmp	r2, r3
 800d168:	d305      	bcc.n	800d176 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800d16a:	697b      	ldr	r3, [r7, #20]
 800d16c:	685b      	ldr	r3, [r3, #4]
 800d16e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d170:	69ba      	ldr	r2, [r7, #24]
 800d172:	429a      	cmp	r2, r3
 800d174:	d903      	bls.n	800d17e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800d176:	2301      	movs	r3, #1
 800d178:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800d17c:	e113      	b.n	800d3a6 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d17e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d180:	2200      	movs	r2, #0
 800d182:	60bb      	str	r3, [r7, #8]
 800d184:	60fa      	str	r2, [r7, #12]
 800d186:	697b      	ldr	r3, [r7, #20]
 800d188:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d18a:	4a84      	ldr	r2, [pc, #528]	@ (800d39c <UART_SetConfig+0x5c4>)
 800d18c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d190:	b29b      	uxth	r3, r3
 800d192:	2200      	movs	r2, #0
 800d194:	603b      	str	r3, [r7, #0]
 800d196:	607a      	str	r2, [r7, #4]
 800d198:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d19c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800d1a0:	f7f3 fe24 	bl	8000dec <__aeabi_uldivmod>
 800d1a4:	4602      	mov	r2, r0
 800d1a6:	460b      	mov	r3, r1
 800d1a8:	4610      	mov	r0, r2
 800d1aa:	4619      	mov	r1, r3
 800d1ac:	f04f 0200 	mov.w	r2, #0
 800d1b0:	f04f 0300 	mov.w	r3, #0
 800d1b4:	020b      	lsls	r3, r1, #8
 800d1b6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800d1ba:	0202      	lsls	r2, r0, #8
 800d1bc:	6979      	ldr	r1, [r7, #20]
 800d1be:	6849      	ldr	r1, [r1, #4]
 800d1c0:	0849      	lsrs	r1, r1, #1
 800d1c2:	2000      	movs	r0, #0
 800d1c4:	460c      	mov	r4, r1
 800d1c6:	4605      	mov	r5, r0
 800d1c8:	eb12 0804 	adds.w	r8, r2, r4
 800d1cc:	eb43 0905 	adc.w	r9, r3, r5
 800d1d0:	697b      	ldr	r3, [r7, #20]
 800d1d2:	685b      	ldr	r3, [r3, #4]
 800d1d4:	2200      	movs	r2, #0
 800d1d6:	469a      	mov	sl, r3
 800d1d8:	4693      	mov	fp, r2
 800d1da:	4652      	mov	r2, sl
 800d1dc:	465b      	mov	r3, fp
 800d1de:	4640      	mov	r0, r8
 800d1e0:	4649      	mov	r1, r9
 800d1e2:	f7f3 fe03 	bl	8000dec <__aeabi_uldivmod>
 800d1e6:	4602      	mov	r2, r0
 800d1e8:	460b      	mov	r3, r1
 800d1ea:	4613      	mov	r3, r2
 800d1ec:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800d1ee:	6a3b      	ldr	r3, [r7, #32]
 800d1f0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d1f4:	d308      	bcc.n	800d208 <UART_SetConfig+0x430>
 800d1f6:	6a3b      	ldr	r3, [r7, #32]
 800d1f8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d1fc:	d204      	bcs.n	800d208 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800d1fe:	697b      	ldr	r3, [r7, #20]
 800d200:	681b      	ldr	r3, [r3, #0]
 800d202:	6a3a      	ldr	r2, [r7, #32]
 800d204:	60da      	str	r2, [r3, #12]
 800d206:	e0ce      	b.n	800d3a6 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800d208:	2301      	movs	r3, #1
 800d20a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800d20e:	e0ca      	b.n	800d3a6 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d210:	697b      	ldr	r3, [r7, #20]
 800d212:	69db      	ldr	r3, [r3, #28]
 800d214:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d218:	d166      	bne.n	800d2e8 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800d21a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800d21e:	2b08      	cmp	r3, #8
 800d220:	d827      	bhi.n	800d272 <UART_SetConfig+0x49a>
 800d222:	a201      	add	r2, pc, #4	@ (adr r2, 800d228 <UART_SetConfig+0x450>)
 800d224:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d228:	0800d24d 	.word	0x0800d24d
 800d22c:	0800d255 	.word	0x0800d255
 800d230:	0800d25d 	.word	0x0800d25d
 800d234:	0800d273 	.word	0x0800d273
 800d238:	0800d263 	.word	0x0800d263
 800d23c:	0800d273 	.word	0x0800d273
 800d240:	0800d273 	.word	0x0800d273
 800d244:	0800d273 	.word	0x0800d273
 800d248:	0800d26b 	.word	0x0800d26b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d24c:	f7fb fe5e 	bl	8008f0c <HAL_RCC_GetPCLK1Freq>
 800d250:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800d252:	e014      	b.n	800d27e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d254:	f7fb fe70 	bl	8008f38 <HAL_RCC_GetPCLK2Freq>
 800d258:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800d25a:	e010      	b.n	800d27e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d25c:	4b4e      	ldr	r3, [pc, #312]	@ (800d398 <UART_SetConfig+0x5c0>)
 800d25e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800d260:	e00d      	b.n	800d27e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d262:	f7fb fde5 	bl	8008e30 <HAL_RCC_GetSysClockFreq>
 800d266:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800d268:	e009      	b.n	800d27e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d26a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d26e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800d270:	e005      	b.n	800d27e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800d272:	2300      	movs	r3, #0
 800d274:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800d276:	2301      	movs	r3, #1
 800d278:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800d27c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d27e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d280:	2b00      	cmp	r3, #0
 800d282:	f000 8090 	beq.w	800d3a6 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d286:	697b      	ldr	r3, [r7, #20]
 800d288:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d28a:	4a44      	ldr	r2, [pc, #272]	@ (800d39c <UART_SetConfig+0x5c4>)
 800d28c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d290:	461a      	mov	r2, r3
 800d292:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d294:	fbb3 f3f2 	udiv	r3, r3, r2
 800d298:	005a      	lsls	r2, r3, #1
 800d29a:	697b      	ldr	r3, [r7, #20]
 800d29c:	685b      	ldr	r3, [r3, #4]
 800d29e:	085b      	lsrs	r3, r3, #1
 800d2a0:	441a      	add	r2, r3
 800d2a2:	697b      	ldr	r3, [r7, #20]
 800d2a4:	685b      	ldr	r3, [r3, #4]
 800d2a6:	fbb2 f3f3 	udiv	r3, r2, r3
 800d2aa:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d2ac:	6a3b      	ldr	r3, [r7, #32]
 800d2ae:	2b0f      	cmp	r3, #15
 800d2b0:	d916      	bls.n	800d2e0 <UART_SetConfig+0x508>
 800d2b2:	6a3b      	ldr	r3, [r7, #32]
 800d2b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d2b8:	d212      	bcs.n	800d2e0 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d2ba:	6a3b      	ldr	r3, [r7, #32]
 800d2bc:	b29b      	uxth	r3, r3
 800d2be:	f023 030f 	bic.w	r3, r3, #15
 800d2c2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d2c4:	6a3b      	ldr	r3, [r7, #32]
 800d2c6:	085b      	lsrs	r3, r3, #1
 800d2c8:	b29b      	uxth	r3, r3
 800d2ca:	f003 0307 	and.w	r3, r3, #7
 800d2ce:	b29a      	uxth	r2, r3
 800d2d0:	8bfb      	ldrh	r3, [r7, #30]
 800d2d2:	4313      	orrs	r3, r2
 800d2d4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800d2d6:	697b      	ldr	r3, [r7, #20]
 800d2d8:	681b      	ldr	r3, [r3, #0]
 800d2da:	8bfa      	ldrh	r2, [r7, #30]
 800d2dc:	60da      	str	r2, [r3, #12]
 800d2de:	e062      	b.n	800d3a6 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800d2e0:	2301      	movs	r3, #1
 800d2e2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800d2e6:	e05e      	b.n	800d3a6 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800d2e8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800d2ec:	2b08      	cmp	r3, #8
 800d2ee:	d828      	bhi.n	800d342 <UART_SetConfig+0x56a>
 800d2f0:	a201      	add	r2, pc, #4	@ (adr r2, 800d2f8 <UART_SetConfig+0x520>)
 800d2f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d2f6:	bf00      	nop
 800d2f8:	0800d31d 	.word	0x0800d31d
 800d2fc:	0800d325 	.word	0x0800d325
 800d300:	0800d32d 	.word	0x0800d32d
 800d304:	0800d343 	.word	0x0800d343
 800d308:	0800d333 	.word	0x0800d333
 800d30c:	0800d343 	.word	0x0800d343
 800d310:	0800d343 	.word	0x0800d343
 800d314:	0800d343 	.word	0x0800d343
 800d318:	0800d33b 	.word	0x0800d33b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d31c:	f7fb fdf6 	bl	8008f0c <HAL_RCC_GetPCLK1Freq>
 800d320:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800d322:	e014      	b.n	800d34e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d324:	f7fb fe08 	bl	8008f38 <HAL_RCC_GetPCLK2Freq>
 800d328:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800d32a:	e010      	b.n	800d34e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d32c:	4b1a      	ldr	r3, [pc, #104]	@ (800d398 <UART_SetConfig+0x5c0>)
 800d32e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800d330:	e00d      	b.n	800d34e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d332:	f7fb fd7d 	bl	8008e30 <HAL_RCC_GetSysClockFreq>
 800d336:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800d338:	e009      	b.n	800d34e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d33a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d33e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800d340:	e005      	b.n	800d34e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800d342:	2300      	movs	r3, #0
 800d344:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800d346:	2301      	movs	r3, #1
 800d348:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800d34c:	bf00      	nop
    }

    if (pclk != 0U)
 800d34e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d350:	2b00      	cmp	r3, #0
 800d352:	d028      	beq.n	800d3a6 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d354:	697b      	ldr	r3, [r7, #20]
 800d356:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d358:	4a10      	ldr	r2, [pc, #64]	@ (800d39c <UART_SetConfig+0x5c4>)
 800d35a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d35e:	461a      	mov	r2, r3
 800d360:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d362:	fbb3 f2f2 	udiv	r2, r3, r2
 800d366:	697b      	ldr	r3, [r7, #20]
 800d368:	685b      	ldr	r3, [r3, #4]
 800d36a:	085b      	lsrs	r3, r3, #1
 800d36c:	441a      	add	r2, r3
 800d36e:	697b      	ldr	r3, [r7, #20]
 800d370:	685b      	ldr	r3, [r3, #4]
 800d372:	fbb2 f3f3 	udiv	r3, r2, r3
 800d376:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d378:	6a3b      	ldr	r3, [r7, #32]
 800d37a:	2b0f      	cmp	r3, #15
 800d37c:	d910      	bls.n	800d3a0 <UART_SetConfig+0x5c8>
 800d37e:	6a3b      	ldr	r3, [r7, #32]
 800d380:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d384:	d20c      	bcs.n	800d3a0 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800d386:	6a3b      	ldr	r3, [r7, #32]
 800d388:	b29a      	uxth	r2, r3
 800d38a:	697b      	ldr	r3, [r7, #20]
 800d38c:	681b      	ldr	r3, [r3, #0]
 800d38e:	60da      	str	r2, [r3, #12]
 800d390:	e009      	b.n	800d3a6 <UART_SetConfig+0x5ce>
 800d392:	bf00      	nop
 800d394:	40008000 	.word	0x40008000
 800d398:	00f42400 	.word	0x00f42400
 800d39c:	08011360 	.word	0x08011360
      }
      else
      {
        ret = HAL_ERROR;
 800d3a0:	2301      	movs	r3, #1
 800d3a2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800d3a6:	697b      	ldr	r3, [r7, #20]
 800d3a8:	2201      	movs	r2, #1
 800d3aa:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800d3ae:	697b      	ldr	r3, [r7, #20]
 800d3b0:	2201      	movs	r2, #1
 800d3b2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d3b6:	697b      	ldr	r3, [r7, #20]
 800d3b8:	2200      	movs	r2, #0
 800d3ba:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800d3bc:	697b      	ldr	r3, [r7, #20]
 800d3be:	2200      	movs	r2, #0
 800d3c0:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800d3c2:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800d3c6:	4618      	mov	r0, r3
 800d3c8:	3730      	adds	r7, #48	@ 0x30
 800d3ca:	46bd      	mov	sp, r7
 800d3cc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800d3d0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d3d0:	b480      	push	{r7}
 800d3d2:	b083      	sub	sp, #12
 800d3d4:	af00      	add	r7, sp, #0
 800d3d6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d3dc:	f003 0308 	and.w	r3, r3, #8
 800d3e0:	2b00      	cmp	r3, #0
 800d3e2:	d00a      	beq.n	800d3fa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	681b      	ldr	r3, [r3, #0]
 800d3e8:	685b      	ldr	r3, [r3, #4]
 800d3ea:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	681b      	ldr	r3, [r3, #0]
 800d3f6:	430a      	orrs	r2, r1
 800d3f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d3fe:	f003 0301 	and.w	r3, r3, #1
 800d402:	2b00      	cmp	r3, #0
 800d404:	d00a      	beq.n	800d41c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	681b      	ldr	r3, [r3, #0]
 800d40a:	685b      	ldr	r3, [r3, #4]
 800d40c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	681b      	ldr	r3, [r3, #0]
 800d418:	430a      	orrs	r2, r1
 800d41a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d420:	f003 0302 	and.w	r3, r3, #2
 800d424:	2b00      	cmp	r3, #0
 800d426:	d00a      	beq.n	800d43e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	681b      	ldr	r3, [r3, #0]
 800d42c:	685b      	ldr	r3, [r3, #4]
 800d42e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	681b      	ldr	r3, [r3, #0]
 800d43a:	430a      	orrs	r2, r1
 800d43c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d442:	f003 0304 	and.w	r3, r3, #4
 800d446:	2b00      	cmp	r3, #0
 800d448:	d00a      	beq.n	800d460 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	681b      	ldr	r3, [r3, #0]
 800d44e:	685b      	ldr	r3, [r3, #4]
 800d450:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	681b      	ldr	r3, [r3, #0]
 800d45c:	430a      	orrs	r2, r1
 800d45e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d464:	f003 0310 	and.w	r3, r3, #16
 800d468:	2b00      	cmp	r3, #0
 800d46a:	d00a      	beq.n	800d482 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	681b      	ldr	r3, [r3, #0]
 800d470:	689b      	ldr	r3, [r3, #8]
 800d472:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	681b      	ldr	r3, [r3, #0]
 800d47e:	430a      	orrs	r2, r1
 800d480:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d486:	f003 0320 	and.w	r3, r3, #32
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	d00a      	beq.n	800d4a4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	681b      	ldr	r3, [r3, #0]
 800d492:	689b      	ldr	r3, [r3, #8]
 800d494:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	681b      	ldr	r3, [r3, #0]
 800d4a0:	430a      	orrs	r2, r1
 800d4a2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d4a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d4ac:	2b00      	cmp	r3, #0
 800d4ae:	d01a      	beq.n	800d4e6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	681b      	ldr	r3, [r3, #0]
 800d4b4:	685b      	ldr	r3, [r3, #4]
 800d4b6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	681b      	ldr	r3, [r3, #0]
 800d4c2:	430a      	orrs	r2, r1
 800d4c4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d4ca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d4ce:	d10a      	bne.n	800d4e6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	681b      	ldr	r3, [r3, #0]
 800d4d4:	685b      	ldr	r3, [r3, #4]
 800d4d6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	681b      	ldr	r3, [r3, #0]
 800d4e2:	430a      	orrs	r2, r1
 800d4e4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d4ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	d00a      	beq.n	800d508 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	681b      	ldr	r3, [r3, #0]
 800d4f6:	685b      	ldr	r3, [r3, #4]
 800d4f8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	681b      	ldr	r3, [r3, #0]
 800d504:	430a      	orrs	r2, r1
 800d506:	605a      	str	r2, [r3, #4]
  }
}
 800d508:	bf00      	nop
 800d50a:	370c      	adds	r7, #12
 800d50c:	46bd      	mov	sp, r7
 800d50e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d512:	4770      	bx	lr

0800d514 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d514:	b580      	push	{r7, lr}
 800d516:	b098      	sub	sp, #96	@ 0x60
 800d518:	af02      	add	r7, sp, #8
 800d51a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	2200      	movs	r2, #0
 800d520:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d524:	f7f8 feb8 	bl	8006298 <HAL_GetTick>
 800d528:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	681b      	ldr	r3, [r3, #0]
 800d52e:	681b      	ldr	r3, [r3, #0]
 800d530:	f003 0308 	and.w	r3, r3, #8
 800d534:	2b08      	cmp	r3, #8
 800d536:	d12f      	bne.n	800d598 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d538:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800d53c:	9300      	str	r3, [sp, #0]
 800d53e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d540:	2200      	movs	r2, #0
 800d542:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800d546:	6878      	ldr	r0, [r7, #4]
 800d548:	f000 f88e 	bl	800d668 <UART_WaitOnFlagUntilTimeout>
 800d54c:	4603      	mov	r3, r0
 800d54e:	2b00      	cmp	r3, #0
 800d550:	d022      	beq.n	800d598 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	681b      	ldr	r3, [r3, #0]
 800d556:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d558:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d55a:	e853 3f00 	ldrex	r3, [r3]
 800d55e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800d560:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d562:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d566:	653b      	str	r3, [r7, #80]	@ 0x50
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	681b      	ldr	r3, [r3, #0]
 800d56c:	461a      	mov	r2, r3
 800d56e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d570:	647b      	str	r3, [r7, #68]	@ 0x44
 800d572:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d574:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d576:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d578:	e841 2300 	strex	r3, r2, [r1]
 800d57c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d57e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d580:	2b00      	cmp	r3, #0
 800d582:	d1e6      	bne.n	800d552 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	2220      	movs	r2, #32
 800d588:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	2200      	movs	r2, #0
 800d590:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d594:	2303      	movs	r3, #3
 800d596:	e063      	b.n	800d660 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	681b      	ldr	r3, [r3, #0]
 800d59c:	681b      	ldr	r3, [r3, #0]
 800d59e:	f003 0304 	and.w	r3, r3, #4
 800d5a2:	2b04      	cmp	r3, #4
 800d5a4:	d149      	bne.n	800d63a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d5a6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800d5aa:	9300      	str	r3, [sp, #0]
 800d5ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d5ae:	2200      	movs	r2, #0
 800d5b0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800d5b4:	6878      	ldr	r0, [r7, #4]
 800d5b6:	f000 f857 	bl	800d668 <UART_WaitOnFlagUntilTimeout>
 800d5ba:	4603      	mov	r3, r0
 800d5bc:	2b00      	cmp	r3, #0
 800d5be:	d03c      	beq.n	800d63a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	681b      	ldr	r3, [r3, #0]
 800d5c4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d5c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5c8:	e853 3f00 	ldrex	r3, [r3]
 800d5cc:	623b      	str	r3, [r7, #32]
   return(result);
 800d5ce:	6a3b      	ldr	r3, [r7, #32]
 800d5d0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d5d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	681b      	ldr	r3, [r3, #0]
 800d5da:	461a      	mov	r2, r3
 800d5dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d5de:	633b      	str	r3, [r7, #48]	@ 0x30
 800d5e0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d5e2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d5e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d5e6:	e841 2300 	strex	r3, r2, [r1]
 800d5ea:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d5ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d5ee:	2b00      	cmp	r3, #0
 800d5f0:	d1e6      	bne.n	800d5c0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	681b      	ldr	r3, [r3, #0]
 800d5f6:	3308      	adds	r3, #8
 800d5f8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d5fa:	693b      	ldr	r3, [r7, #16]
 800d5fc:	e853 3f00 	ldrex	r3, [r3]
 800d600:	60fb      	str	r3, [r7, #12]
   return(result);
 800d602:	68fb      	ldr	r3, [r7, #12]
 800d604:	f023 0301 	bic.w	r3, r3, #1
 800d608:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	681b      	ldr	r3, [r3, #0]
 800d60e:	3308      	adds	r3, #8
 800d610:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d612:	61fa      	str	r2, [r7, #28]
 800d614:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d616:	69b9      	ldr	r1, [r7, #24]
 800d618:	69fa      	ldr	r2, [r7, #28]
 800d61a:	e841 2300 	strex	r3, r2, [r1]
 800d61e:	617b      	str	r3, [r7, #20]
   return(result);
 800d620:	697b      	ldr	r3, [r7, #20]
 800d622:	2b00      	cmp	r3, #0
 800d624:	d1e5      	bne.n	800d5f2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	2220      	movs	r2, #32
 800d62a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	2200      	movs	r2, #0
 800d632:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d636:	2303      	movs	r3, #3
 800d638:	e012      	b.n	800d660 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	2220      	movs	r2, #32
 800d63e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	2220      	movs	r2, #32
 800d646:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	2200      	movs	r2, #0
 800d64e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	2200      	movs	r2, #0
 800d654:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	2200      	movs	r2, #0
 800d65a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d65e:	2300      	movs	r3, #0
}
 800d660:	4618      	mov	r0, r3
 800d662:	3758      	adds	r7, #88	@ 0x58
 800d664:	46bd      	mov	sp, r7
 800d666:	bd80      	pop	{r7, pc}

0800d668 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d668:	b580      	push	{r7, lr}
 800d66a:	b084      	sub	sp, #16
 800d66c:	af00      	add	r7, sp, #0
 800d66e:	60f8      	str	r0, [r7, #12]
 800d670:	60b9      	str	r1, [r7, #8]
 800d672:	603b      	str	r3, [r7, #0]
 800d674:	4613      	mov	r3, r2
 800d676:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d678:	e04f      	b.n	800d71a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d67a:	69bb      	ldr	r3, [r7, #24]
 800d67c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d680:	d04b      	beq.n	800d71a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d682:	f7f8 fe09 	bl	8006298 <HAL_GetTick>
 800d686:	4602      	mov	r2, r0
 800d688:	683b      	ldr	r3, [r7, #0]
 800d68a:	1ad3      	subs	r3, r2, r3
 800d68c:	69ba      	ldr	r2, [r7, #24]
 800d68e:	429a      	cmp	r2, r3
 800d690:	d302      	bcc.n	800d698 <UART_WaitOnFlagUntilTimeout+0x30>
 800d692:	69bb      	ldr	r3, [r7, #24]
 800d694:	2b00      	cmp	r3, #0
 800d696:	d101      	bne.n	800d69c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800d698:	2303      	movs	r3, #3
 800d69a:	e04e      	b.n	800d73a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800d69c:	68fb      	ldr	r3, [r7, #12]
 800d69e:	681b      	ldr	r3, [r3, #0]
 800d6a0:	681b      	ldr	r3, [r3, #0]
 800d6a2:	f003 0304 	and.w	r3, r3, #4
 800d6a6:	2b00      	cmp	r3, #0
 800d6a8:	d037      	beq.n	800d71a <UART_WaitOnFlagUntilTimeout+0xb2>
 800d6aa:	68bb      	ldr	r3, [r7, #8]
 800d6ac:	2b80      	cmp	r3, #128	@ 0x80
 800d6ae:	d034      	beq.n	800d71a <UART_WaitOnFlagUntilTimeout+0xb2>
 800d6b0:	68bb      	ldr	r3, [r7, #8]
 800d6b2:	2b40      	cmp	r3, #64	@ 0x40
 800d6b4:	d031      	beq.n	800d71a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800d6b6:	68fb      	ldr	r3, [r7, #12]
 800d6b8:	681b      	ldr	r3, [r3, #0]
 800d6ba:	69db      	ldr	r3, [r3, #28]
 800d6bc:	f003 0308 	and.w	r3, r3, #8
 800d6c0:	2b08      	cmp	r3, #8
 800d6c2:	d110      	bne.n	800d6e6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d6c4:	68fb      	ldr	r3, [r7, #12]
 800d6c6:	681b      	ldr	r3, [r3, #0]
 800d6c8:	2208      	movs	r2, #8
 800d6ca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d6cc:	68f8      	ldr	r0, [r7, #12]
 800d6ce:	f000 f99c 	bl	800da0a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800d6d2:	68fb      	ldr	r3, [r7, #12]
 800d6d4:	2208      	movs	r2, #8
 800d6d6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d6da:	68fb      	ldr	r3, [r7, #12]
 800d6dc:	2200      	movs	r2, #0
 800d6de:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800d6e2:	2301      	movs	r3, #1
 800d6e4:	e029      	b.n	800d73a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d6e6:	68fb      	ldr	r3, [r7, #12]
 800d6e8:	681b      	ldr	r3, [r3, #0]
 800d6ea:	69db      	ldr	r3, [r3, #28]
 800d6ec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d6f0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d6f4:	d111      	bne.n	800d71a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d6f6:	68fb      	ldr	r3, [r7, #12]
 800d6f8:	681b      	ldr	r3, [r3, #0]
 800d6fa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800d6fe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d700:	68f8      	ldr	r0, [r7, #12]
 800d702:	f000 f982 	bl	800da0a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d706:	68fb      	ldr	r3, [r7, #12]
 800d708:	2220      	movs	r2, #32
 800d70a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d70e:	68fb      	ldr	r3, [r7, #12]
 800d710:	2200      	movs	r2, #0
 800d712:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800d716:	2303      	movs	r3, #3
 800d718:	e00f      	b.n	800d73a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d71a:	68fb      	ldr	r3, [r7, #12]
 800d71c:	681b      	ldr	r3, [r3, #0]
 800d71e:	69da      	ldr	r2, [r3, #28]
 800d720:	68bb      	ldr	r3, [r7, #8]
 800d722:	4013      	ands	r3, r2
 800d724:	68ba      	ldr	r2, [r7, #8]
 800d726:	429a      	cmp	r2, r3
 800d728:	bf0c      	ite	eq
 800d72a:	2301      	moveq	r3, #1
 800d72c:	2300      	movne	r3, #0
 800d72e:	b2db      	uxtb	r3, r3
 800d730:	461a      	mov	r2, r3
 800d732:	79fb      	ldrb	r3, [r7, #7]
 800d734:	429a      	cmp	r2, r3
 800d736:	d0a0      	beq.n	800d67a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d738:	2300      	movs	r3, #0
}
 800d73a:	4618      	mov	r0, r3
 800d73c:	3710      	adds	r7, #16
 800d73e:	46bd      	mov	sp, r7
 800d740:	bd80      	pop	{r7, pc}
	...

0800d744 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d744:	b480      	push	{r7}
 800d746:	b0a3      	sub	sp, #140	@ 0x8c
 800d748:	af00      	add	r7, sp, #0
 800d74a:	60f8      	str	r0, [r7, #12]
 800d74c:	60b9      	str	r1, [r7, #8]
 800d74e:	4613      	mov	r3, r2
 800d750:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800d752:	68fb      	ldr	r3, [r7, #12]
 800d754:	68ba      	ldr	r2, [r7, #8]
 800d756:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 800d758:	68fb      	ldr	r3, [r7, #12]
 800d75a:	88fa      	ldrh	r2, [r7, #6]
 800d75c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 800d760:	68fb      	ldr	r3, [r7, #12]
 800d762:	88fa      	ldrh	r2, [r7, #6]
 800d764:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 800d768:	68fb      	ldr	r3, [r7, #12]
 800d76a:	2200      	movs	r2, #0
 800d76c:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800d76e:	68fb      	ldr	r3, [r7, #12]
 800d770:	689b      	ldr	r3, [r3, #8]
 800d772:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d776:	d10e      	bne.n	800d796 <UART_Start_Receive_IT+0x52>
 800d778:	68fb      	ldr	r3, [r7, #12]
 800d77a:	691b      	ldr	r3, [r3, #16]
 800d77c:	2b00      	cmp	r3, #0
 800d77e:	d105      	bne.n	800d78c <UART_Start_Receive_IT+0x48>
 800d780:	68fb      	ldr	r3, [r7, #12]
 800d782:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800d786:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800d78a:	e02d      	b.n	800d7e8 <UART_Start_Receive_IT+0xa4>
 800d78c:	68fb      	ldr	r3, [r7, #12]
 800d78e:	22ff      	movs	r2, #255	@ 0xff
 800d790:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800d794:	e028      	b.n	800d7e8 <UART_Start_Receive_IT+0xa4>
 800d796:	68fb      	ldr	r3, [r7, #12]
 800d798:	689b      	ldr	r3, [r3, #8]
 800d79a:	2b00      	cmp	r3, #0
 800d79c:	d10d      	bne.n	800d7ba <UART_Start_Receive_IT+0x76>
 800d79e:	68fb      	ldr	r3, [r7, #12]
 800d7a0:	691b      	ldr	r3, [r3, #16]
 800d7a2:	2b00      	cmp	r3, #0
 800d7a4:	d104      	bne.n	800d7b0 <UART_Start_Receive_IT+0x6c>
 800d7a6:	68fb      	ldr	r3, [r7, #12]
 800d7a8:	22ff      	movs	r2, #255	@ 0xff
 800d7aa:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800d7ae:	e01b      	b.n	800d7e8 <UART_Start_Receive_IT+0xa4>
 800d7b0:	68fb      	ldr	r3, [r7, #12]
 800d7b2:	227f      	movs	r2, #127	@ 0x7f
 800d7b4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800d7b8:	e016      	b.n	800d7e8 <UART_Start_Receive_IT+0xa4>
 800d7ba:	68fb      	ldr	r3, [r7, #12]
 800d7bc:	689b      	ldr	r3, [r3, #8]
 800d7be:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d7c2:	d10d      	bne.n	800d7e0 <UART_Start_Receive_IT+0x9c>
 800d7c4:	68fb      	ldr	r3, [r7, #12]
 800d7c6:	691b      	ldr	r3, [r3, #16]
 800d7c8:	2b00      	cmp	r3, #0
 800d7ca:	d104      	bne.n	800d7d6 <UART_Start_Receive_IT+0x92>
 800d7cc:	68fb      	ldr	r3, [r7, #12]
 800d7ce:	227f      	movs	r2, #127	@ 0x7f
 800d7d0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800d7d4:	e008      	b.n	800d7e8 <UART_Start_Receive_IT+0xa4>
 800d7d6:	68fb      	ldr	r3, [r7, #12]
 800d7d8:	223f      	movs	r2, #63	@ 0x3f
 800d7da:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800d7de:	e003      	b.n	800d7e8 <UART_Start_Receive_IT+0xa4>
 800d7e0:	68fb      	ldr	r3, [r7, #12]
 800d7e2:	2200      	movs	r2, #0
 800d7e4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d7e8:	68fb      	ldr	r3, [r7, #12]
 800d7ea:	2200      	movs	r2, #0
 800d7ec:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d7f0:	68fb      	ldr	r3, [r7, #12]
 800d7f2:	2222      	movs	r2, #34	@ 0x22
 800d7f4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d7f8:	68fb      	ldr	r3, [r7, #12]
 800d7fa:	681b      	ldr	r3, [r3, #0]
 800d7fc:	3308      	adds	r3, #8
 800d7fe:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d800:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d802:	e853 3f00 	ldrex	r3, [r3]
 800d806:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800d808:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d80a:	f043 0301 	orr.w	r3, r3, #1
 800d80e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800d812:	68fb      	ldr	r3, [r7, #12]
 800d814:	681b      	ldr	r3, [r3, #0]
 800d816:	3308      	adds	r3, #8
 800d818:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800d81c:	673a      	str	r2, [r7, #112]	@ 0x70
 800d81e:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d820:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800d822:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800d824:	e841 2300 	strex	r3, r2, [r1]
 800d828:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 800d82a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d82c:	2b00      	cmp	r3, #0
 800d82e:	d1e3      	bne.n	800d7f8 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800d830:	68fb      	ldr	r3, [r7, #12]
 800d832:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d834:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d838:	d14f      	bne.n	800d8da <UART_Start_Receive_IT+0x196>
 800d83a:	68fb      	ldr	r3, [r7, #12]
 800d83c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800d840:	88fa      	ldrh	r2, [r7, #6]
 800d842:	429a      	cmp	r2, r3
 800d844:	d349      	bcc.n	800d8da <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d846:	68fb      	ldr	r3, [r7, #12]
 800d848:	689b      	ldr	r3, [r3, #8]
 800d84a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d84e:	d107      	bne.n	800d860 <UART_Start_Receive_IT+0x11c>
 800d850:	68fb      	ldr	r3, [r7, #12]
 800d852:	691b      	ldr	r3, [r3, #16]
 800d854:	2b00      	cmp	r3, #0
 800d856:	d103      	bne.n	800d860 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800d858:	68fb      	ldr	r3, [r7, #12]
 800d85a:	4a47      	ldr	r2, [pc, #284]	@ (800d978 <UART_Start_Receive_IT+0x234>)
 800d85c:	675a      	str	r2, [r3, #116]	@ 0x74
 800d85e:	e002      	b.n	800d866 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800d860:	68fb      	ldr	r3, [r7, #12]
 800d862:	4a46      	ldr	r2, [pc, #280]	@ (800d97c <UART_Start_Receive_IT+0x238>)
 800d864:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800d866:	68fb      	ldr	r3, [r7, #12]
 800d868:	691b      	ldr	r3, [r3, #16]
 800d86a:	2b00      	cmp	r3, #0
 800d86c:	d01a      	beq.n	800d8a4 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d86e:	68fb      	ldr	r3, [r7, #12]
 800d870:	681b      	ldr	r3, [r3, #0]
 800d872:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d874:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d876:	e853 3f00 	ldrex	r3, [r3]
 800d87a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800d87c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d87e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d882:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800d886:	68fb      	ldr	r3, [r7, #12]
 800d888:	681b      	ldr	r3, [r3, #0]
 800d88a:	461a      	mov	r2, r3
 800d88c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800d890:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800d892:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d894:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800d896:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800d898:	e841 2300 	strex	r3, r2, [r1]
 800d89c:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800d89e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d8a0:	2b00      	cmp	r3, #0
 800d8a2:	d1e4      	bne.n	800d86e <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800d8a4:	68fb      	ldr	r3, [r7, #12]
 800d8a6:	681b      	ldr	r3, [r3, #0]
 800d8a8:	3308      	adds	r3, #8
 800d8aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d8ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d8ae:	e853 3f00 	ldrex	r3, [r3]
 800d8b2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800d8b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d8b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800d8ba:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800d8bc:	68fb      	ldr	r3, [r7, #12]
 800d8be:	681b      	ldr	r3, [r3, #0]
 800d8c0:	3308      	adds	r3, #8
 800d8c2:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800d8c4:	64ba      	str	r2, [r7, #72]	@ 0x48
 800d8c6:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d8c8:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800d8ca:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d8cc:	e841 2300 	strex	r3, r2, [r1]
 800d8d0:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800d8d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d8d4:	2b00      	cmp	r3, #0
 800d8d6:	d1e5      	bne.n	800d8a4 <UART_Start_Receive_IT+0x160>
 800d8d8:	e046      	b.n	800d968 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d8da:	68fb      	ldr	r3, [r7, #12]
 800d8dc:	689b      	ldr	r3, [r3, #8]
 800d8de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d8e2:	d107      	bne.n	800d8f4 <UART_Start_Receive_IT+0x1b0>
 800d8e4:	68fb      	ldr	r3, [r7, #12]
 800d8e6:	691b      	ldr	r3, [r3, #16]
 800d8e8:	2b00      	cmp	r3, #0
 800d8ea:	d103      	bne.n	800d8f4 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800d8ec:	68fb      	ldr	r3, [r7, #12]
 800d8ee:	4a24      	ldr	r2, [pc, #144]	@ (800d980 <UART_Start_Receive_IT+0x23c>)
 800d8f0:	675a      	str	r2, [r3, #116]	@ 0x74
 800d8f2:	e002      	b.n	800d8fa <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800d8f4:	68fb      	ldr	r3, [r7, #12]
 800d8f6:	4a23      	ldr	r2, [pc, #140]	@ (800d984 <UART_Start_Receive_IT+0x240>)
 800d8f8:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800d8fa:	68fb      	ldr	r3, [r7, #12]
 800d8fc:	691b      	ldr	r3, [r3, #16]
 800d8fe:	2b00      	cmp	r3, #0
 800d900:	d019      	beq.n	800d936 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800d902:	68fb      	ldr	r3, [r7, #12]
 800d904:	681b      	ldr	r3, [r3, #0]
 800d906:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d908:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d90a:	e853 3f00 	ldrex	r3, [r3]
 800d90e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d910:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d912:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800d916:	677b      	str	r3, [r7, #116]	@ 0x74
 800d918:	68fb      	ldr	r3, [r7, #12]
 800d91a:	681b      	ldr	r3, [r3, #0]
 800d91c:	461a      	mov	r2, r3
 800d91e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800d920:	637b      	str	r3, [r7, #52]	@ 0x34
 800d922:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d924:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800d926:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d928:	e841 2300 	strex	r3, r2, [r1]
 800d92c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800d92e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d930:	2b00      	cmp	r3, #0
 800d932:	d1e6      	bne.n	800d902 <UART_Start_Receive_IT+0x1be>
 800d934:	e018      	b.n	800d968 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800d936:	68fb      	ldr	r3, [r7, #12]
 800d938:	681b      	ldr	r3, [r3, #0]
 800d93a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d93c:	697b      	ldr	r3, [r7, #20]
 800d93e:	e853 3f00 	ldrex	r3, [r3]
 800d942:	613b      	str	r3, [r7, #16]
   return(result);
 800d944:	693b      	ldr	r3, [r7, #16]
 800d946:	f043 0320 	orr.w	r3, r3, #32
 800d94a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800d94c:	68fb      	ldr	r3, [r7, #12]
 800d94e:	681b      	ldr	r3, [r3, #0]
 800d950:	461a      	mov	r2, r3
 800d952:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d954:	623b      	str	r3, [r7, #32]
 800d956:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d958:	69f9      	ldr	r1, [r7, #28]
 800d95a:	6a3a      	ldr	r2, [r7, #32]
 800d95c:	e841 2300 	strex	r3, r2, [r1]
 800d960:	61bb      	str	r3, [r7, #24]
   return(result);
 800d962:	69bb      	ldr	r3, [r7, #24]
 800d964:	2b00      	cmp	r3, #0
 800d966:	d1e6      	bne.n	800d936 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800d968:	2300      	movs	r3, #0
}
 800d96a:	4618      	mov	r0, r3
 800d96c:	378c      	adds	r7, #140	@ 0x8c
 800d96e:	46bd      	mov	sp, r7
 800d970:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d974:	4770      	bx	lr
 800d976:	bf00      	nop
 800d978:	0800e38d 	.word	0x0800e38d
 800d97c:	0800e01d 	.word	0x0800e01d
 800d980:	0800de5d 	.word	0x0800de5d
 800d984:	0800dc9d 	.word	0x0800dc9d

0800d988 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800d988:	b480      	push	{r7}
 800d98a:	b08f      	sub	sp, #60	@ 0x3c
 800d98c:	af00      	add	r7, sp, #0
 800d98e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	681b      	ldr	r3, [r3, #0]
 800d994:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d996:	6a3b      	ldr	r3, [r7, #32]
 800d998:	e853 3f00 	ldrex	r3, [r3]
 800d99c:	61fb      	str	r3, [r7, #28]
   return(result);
 800d99e:	69fb      	ldr	r3, [r7, #28]
 800d9a0:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800d9a4:	637b      	str	r3, [r7, #52]	@ 0x34
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	681b      	ldr	r3, [r3, #0]
 800d9aa:	461a      	mov	r2, r3
 800d9ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d9ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d9b0:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d9b2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d9b4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d9b6:	e841 2300 	strex	r3, r2, [r1]
 800d9ba:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d9bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d9be:	2b00      	cmp	r3, #0
 800d9c0:	d1e6      	bne.n	800d990 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	681b      	ldr	r3, [r3, #0]
 800d9c6:	3308      	adds	r3, #8
 800d9c8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d9ca:	68fb      	ldr	r3, [r7, #12]
 800d9cc:	e853 3f00 	ldrex	r3, [r3]
 800d9d0:	60bb      	str	r3, [r7, #8]
   return(result);
 800d9d2:	68bb      	ldr	r3, [r7, #8]
 800d9d4:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800d9d8:	633b      	str	r3, [r7, #48]	@ 0x30
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	681b      	ldr	r3, [r3, #0]
 800d9de:	3308      	adds	r3, #8
 800d9e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d9e2:	61ba      	str	r2, [r7, #24]
 800d9e4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d9e6:	6979      	ldr	r1, [r7, #20]
 800d9e8:	69ba      	ldr	r2, [r7, #24]
 800d9ea:	e841 2300 	strex	r3, r2, [r1]
 800d9ee:	613b      	str	r3, [r7, #16]
   return(result);
 800d9f0:	693b      	ldr	r3, [r7, #16]
 800d9f2:	2b00      	cmp	r3, #0
 800d9f4:	d1e5      	bne.n	800d9c2 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	2220      	movs	r2, #32
 800d9fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800d9fe:	bf00      	nop
 800da00:	373c      	adds	r7, #60	@ 0x3c
 800da02:	46bd      	mov	sp, r7
 800da04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da08:	4770      	bx	lr

0800da0a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800da0a:	b480      	push	{r7}
 800da0c:	b095      	sub	sp, #84	@ 0x54
 800da0e:	af00      	add	r7, sp, #0
 800da10:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	681b      	ldr	r3, [r3, #0]
 800da16:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800da1a:	e853 3f00 	ldrex	r3, [r3]
 800da1e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800da20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da22:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800da26:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	681b      	ldr	r3, [r3, #0]
 800da2c:	461a      	mov	r2, r3
 800da2e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800da30:	643b      	str	r3, [r7, #64]	@ 0x40
 800da32:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da34:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800da36:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800da38:	e841 2300 	strex	r3, r2, [r1]
 800da3c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800da3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800da40:	2b00      	cmp	r3, #0
 800da42:	d1e6      	bne.n	800da12 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	681b      	ldr	r3, [r3, #0]
 800da48:	3308      	adds	r3, #8
 800da4a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da4c:	6a3b      	ldr	r3, [r7, #32]
 800da4e:	e853 3f00 	ldrex	r3, [r3]
 800da52:	61fb      	str	r3, [r7, #28]
   return(result);
 800da54:	69fb      	ldr	r3, [r7, #28]
 800da56:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800da5a:	f023 0301 	bic.w	r3, r3, #1
 800da5e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	681b      	ldr	r3, [r3, #0]
 800da64:	3308      	adds	r3, #8
 800da66:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800da68:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800da6a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da6c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800da6e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800da70:	e841 2300 	strex	r3, r2, [r1]
 800da74:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800da76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da78:	2b00      	cmp	r3, #0
 800da7a:	d1e3      	bne.n	800da44 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800da80:	2b01      	cmp	r3, #1
 800da82:	d118      	bne.n	800dab6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	681b      	ldr	r3, [r3, #0]
 800da88:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da8a:	68fb      	ldr	r3, [r7, #12]
 800da8c:	e853 3f00 	ldrex	r3, [r3]
 800da90:	60bb      	str	r3, [r7, #8]
   return(result);
 800da92:	68bb      	ldr	r3, [r7, #8]
 800da94:	f023 0310 	bic.w	r3, r3, #16
 800da98:	647b      	str	r3, [r7, #68]	@ 0x44
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	681b      	ldr	r3, [r3, #0]
 800da9e:	461a      	mov	r2, r3
 800daa0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800daa2:	61bb      	str	r3, [r7, #24]
 800daa4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800daa6:	6979      	ldr	r1, [r7, #20]
 800daa8:	69ba      	ldr	r2, [r7, #24]
 800daaa:	e841 2300 	strex	r3, r2, [r1]
 800daae:	613b      	str	r3, [r7, #16]
   return(result);
 800dab0:	693b      	ldr	r3, [r7, #16]
 800dab2:	2b00      	cmp	r3, #0
 800dab4:	d1e6      	bne.n	800da84 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	2220      	movs	r2, #32
 800daba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	2200      	movs	r2, #0
 800dac2:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	2200      	movs	r2, #0
 800dac8:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800daca:	bf00      	nop
 800dacc:	3754      	adds	r7, #84	@ 0x54
 800dace:	46bd      	mov	sp, r7
 800dad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dad4:	4770      	bx	lr

0800dad6 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800dad6:	b580      	push	{r7, lr}
 800dad8:	b090      	sub	sp, #64	@ 0x40
 800dada:	af00      	add	r7, sp, #0
 800dadc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dae2:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	681b      	ldr	r3, [r3, #0]
 800dae8:	681b      	ldr	r3, [r3, #0]
 800daea:	f003 0320 	and.w	r3, r3, #32
 800daee:	2b00      	cmp	r3, #0
 800daf0:	d137      	bne.n	800db62 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800daf2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800daf4:	2200      	movs	r2, #0
 800daf6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800dafa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dafc:	681b      	ldr	r3, [r3, #0]
 800dafe:	3308      	adds	r3, #8
 800db00:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db04:	e853 3f00 	ldrex	r3, [r3]
 800db08:	623b      	str	r3, [r7, #32]
   return(result);
 800db0a:	6a3b      	ldr	r3, [r7, #32]
 800db0c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800db10:	63bb      	str	r3, [r7, #56]	@ 0x38
 800db12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800db14:	681b      	ldr	r3, [r3, #0]
 800db16:	3308      	adds	r3, #8
 800db18:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800db1a:	633a      	str	r2, [r7, #48]	@ 0x30
 800db1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db1e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800db20:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800db22:	e841 2300 	strex	r3, r2, [r1]
 800db26:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800db28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db2a:	2b00      	cmp	r3, #0
 800db2c:	d1e5      	bne.n	800dafa <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800db2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800db30:	681b      	ldr	r3, [r3, #0]
 800db32:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db34:	693b      	ldr	r3, [r7, #16]
 800db36:	e853 3f00 	ldrex	r3, [r3]
 800db3a:	60fb      	str	r3, [r7, #12]
   return(result);
 800db3c:	68fb      	ldr	r3, [r7, #12]
 800db3e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800db42:	637b      	str	r3, [r7, #52]	@ 0x34
 800db44:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800db46:	681b      	ldr	r3, [r3, #0]
 800db48:	461a      	mov	r2, r3
 800db4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800db4c:	61fb      	str	r3, [r7, #28]
 800db4e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db50:	69b9      	ldr	r1, [r7, #24]
 800db52:	69fa      	ldr	r2, [r7, #28]
 800db54:	e841 2300 	strex	r3, r2, [r1]
 800db58:	617b      	str	r3, [r7, #20]
   return(result);
 800db5a:	697b      	ldr	r3, [r7, #20]
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	d1e6      	bne.n	800db2e <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800db60:	e004      	b.n	800db6c <UART_DMATransmitCplt+0x96>
    huart->TxCpltCallback(huart);
 800db62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800db64:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800db68:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800db6a:	4798      	blx	r3
}
 800db6c:	bf00      	nop
 800db6e:	3740      	adds	r7, #64	@ 0x40
 800db70:	46bd      	mov	sp, r7
 800db72:	bd80      	pop	{r7, pc}

0800db74 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800db74:	b580      	push	{r7, lr}
 800db76:	b084      	sub	sp, #16
 800db78:	af00      	add	r7, sp, #0
 800db7a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800db80:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 800db82:	68fb      	ldr	r3, [r7, #12]
 800db84:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800db88:	68f8      	ldr	r0, [r7, #12]
 800db8a:	4798      	blx	r3
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800db8c:	bf00      	nop
 800db8e:	3710      	adds	r7, #16
 800db90:	46bd      	mov	sp, r7
 800db92:	bd80      	pop	{r7, pc}

0800db94 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800db94:	b580      	push	{r7, lr}
 800db96:	b086      	sub	sp, #24
 800db98:	af00      	add	r7, sp, #0
 800db9a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dba0:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800dba2:	697b      	ldr	r3, [r7, #20]
 800dba4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800dba8:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800dbaa:	697b      	ldr	r3, [r7, #20]
 800dbac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800dbb0:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800dbb2:	697b      	ldr	r3, [r7, #20]
 800dbb4:	681b      	ldr	r3, [r3, #0]
 800dbb6:	689b      	ldr	r3, [r3, #8]
 800dbb8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800dbbc:	2b80      	cmp	r3, #128	@ 0x80
 800dbbe:	d109      	bne.n	800dbd4 <UART_DMAError+0x40>
 800dbc0:	693b      	ldr	r3, [r7, #16]
 800dbc2:	2b21      	cmp	r3, #33	@ 0x21
 800dbc4:	d106      	bne.n	800dbd4 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800dbc6:	697b      	ldr	r3, [r7, #20]
 800dbc8:	2200      	movs	r2, #0
 800dbca:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800dbce:	6978      	ldr	r0, [r7, #20]
 800dbd0:	f7ff feda 	bl	800d988 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800dbd4:	697b      	ldr	r3, [r7, #20]
 800dbd6:	681b      	ldr	r3, [r3, #0]
 800dbd8:	689b      	ldr	r3, [r3, #8]
 800dbda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dbde:	2b40      	cmp	r3, #64	@ 0x40
 800dbe0:	d109      	bne.n	800dbf6 <UART_DMAError+0x62>
 800dbe2:	68fb      	ldr	r3, [r7, #12]
 800dbe4:	2b22      	cmp	r3, #34	@ 0x22
 800dbe6:	d106      	bne.n	800dbf6 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800dbe8:	697b      	ldr	r3, [r7, #20]
 800dbea:	2200      	movs	r2, #0
 800dbec:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800dbf0:	6978      	ldr	r0, [r7, #20]
 800dbf2:	f7ff ff0a 	bl	800da0a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800dbf6:	697b      	ldr	r3, [r7, #20]
 800dbf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800dbfc:	f043 0210 	orr.w	r2, r3, #16
 800dc00:	697b      	ldr	r3, [r7, #20]
 800dc02:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800dc06:	697b      	ldr	r3, [r7, #20]
 800dc08:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800dc0c:	6978      	ldr	r0, [r7, #20]
 800dc0e:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800dc10:	bf00      	nop
 800dc12:	3718      	adds	r7, #24
 800dc14:	46bd      	mov	sp, r7
 800dc16:	bd80      	pop	{r7, pc}

0800dc18 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800dc18:	b580      	push	{r7, lr}
 800dc1a:	b084      	sub	sp, #16
 800dc1c:	af00      	add	r7, sp, #0
 800dc1e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dc24:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800dc26:	68fb      	ldr	r3, [r7, #12]
 800dc28:	2200      	movs	r2, #0
 800dc2a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800dc2e:	68fb      	ldr	r3, [r7, #12]
 800dc30:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800dc34:	68f8      	ldr	r0, [r7, #12]
 800dc36:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800dc38:	bf00      	nop
 800dc3a:	3710      	adds	r7, #16
 800dc3c:	46bd      	mov	sp, r7
 800dc3e:	bd80      	pop	{r7, pc}

0800dc40 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800dc40:	b580      	push	{r7, lr}
 800dc42:	b088      	sub	sp, #32
 800dc44:	af00      	add	r7, sp, #0
 800dc46:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	681b      	ldr	r3, [r3, #0]
 800dc4c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc4e:	68fb      	ldr	r3, [r7, #12]
 800dc50:	e853 3f00 	ldrex	r3, [r3]
 800dc54:	60bb      	str	r3, [r7, #8]
   return(result);
 800dc56:	68bb      	ldr	r3, [r7, #8]
 800dc58:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800dc5c:	61fb      	str	r3, [r7, #28]
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	681b      	ldr	r3, [r3, #0]
 800dc62:	461a      	mov	r2, r3
 800dc64:	69fb      	ldr	r3, [r7, #28]
 800dc66:	61bb      	str	r3, [r7, #24]
 800dc68:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc6a:	6979      	ldr	r1, [r7, #20]
 800dc6c:	69ba      	ldr	r2, [r7, #24]
 800dc6e:	e841 2300 	strex	r3, r2, [r1]
 800dc72:	613b      	str	r3, [r7, #16]
   return(result);
 800dc74:	693b      	ldr	r3, [r7, #16]
 800dc76:	2b00      	cmp	r3, #0
 800dc78:	d1e6      	bne.n	800dc48 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	2220      	movs	r2, #32
 800dc7e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	2200      	movs	r2, #0
 800dc86:	679a      	str	r2, [r3, #120]	@ 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800dc8e:	6878      	ldr	r0, [r7, #4]
 800dc90:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800dc92:	bf00      	nop
 800dc94:	3720      	adds	r7, #32
 800dc96:	46bd      	mov	sp, r7
 800dc98:	bd80      	pop	{r7, pc}
	...

0800dc9c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800dc9c:	b580      	push	{r7, lr}
 800dc9e:	b09c      	sub	sp, #112	@ 0x70
 800dca0:	af00      	add	r7, sp, #0
 800dca2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800dcaa:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800dcb4:	2b22      	cmp	r3, #34	@ 0x22
 800dcb6:	f040 80c2 	bne.w	800de3e <UART_RxISR_8BIT+0x1a2>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	681b      	ldr	r3, [r3, #0]
 800dcbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dcc0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800dcc4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800dcc8:	b2d9      	uxtb	r1, r3
 800dcca:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800dcce:	b2da      	uxtb	r2, r3
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800dcd4:	400a      	ands	r2, r1
 800dcd6:	b2d2      	uxtb	r2, r2
 800dcd8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800dcde:	1c5a      	adds	r2, r3, #1
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800dcea:	b29b      	uxth	r3, r3
 800dcec:	3b01      	subs	r3, #1
 800dcee:	b29a      	uxth	r2, r3
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800dcfc:	b29b      	uxth	r3, r3
 800dcfe:	2b00      	cmp	r3, #0
 800dd00:	f040 80a5 	bne.w	800de4e <UART_RxISR_8BIT+0x1b2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	681b      	ldr	r3, [r3, #0]
 800dd08:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd0a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dd0c:	e853 3f00 	ldrex	r3, [r3]
 800dd10:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800dd12:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800dd14:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800dd18:	66bb      	str	r3, [r7, #104]	@ 0x68
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	681b      	ldr	r3, [r3, #0]
 800dd1e:	461a      	mov	r2, r3
 800dd20:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800dd22:	65bb      	str	r3, [r7, #88]	@ 0x58
 800dd24:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd26:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800dd28:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800dd2a:	e841 2300 	strex	r3, r2, [r1]
 800dd2e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800dd30:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800dd32:	2b00      	cmp	r3, #0
 800dd34:	d1e6      	bne.n	800dd04 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	681b      	ldr	r3, [r3, #0]
 800dd3a:	3308      	adds	r3, #8
 800dd3c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dd40:	e853 3f00 	ldrex	r3, [r3]
 800dd44:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800dd46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dd48:	f023 0301 	bic.w	r3, r3, #1
 800dd4c:	667b      	str	r3, [r7, #100]	@ 0x64
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	681b      	ldr	r3, [r3, #0]
 800dd52:	3308      	adds	r3, #8
 800dd54:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800dd56:	647a      	str	r2, [r7, #68]	@ 0x44
 800dd58:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd5a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800dd5c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800dd5e:	e841 2300 	strex	r3, r2, [r1]
 800dd62:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800dd64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dd66:	2b00      	cmp	r3, #0
 800dd68:	d1e5      	bne.n	800dd36 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	2220      	movs	r2, #32
 800dd6e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	2200      	movs	r2, #0
 800dd76:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	2200      	movs	r2, #0
 800dd7c:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	681b      	ldr	r3, [r3, #0]
 800dd82:	4a35      	ldr	r2, [pc, #212]	@ (800de58 <UART_RxISR_8BIT+0x1bc>)
 800dd84:	4293      	cmp	r3, r2
 800dd86:	d01f      	beq.n	800ddc8 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	681b      	ldr	r3, [r3, #0]
 800dd8c:	685b      	ldr	r3, [r3, #4]
 800dd8e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800dd92:	2b00      	cmp	r3, #0
 800dd94:	d018      	beq.n	800ddc8 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	681b      	ldr	r3, [r3, #0]
 800dd9a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd9e:	e853 3f00 	ldrex	r3, [r3]
 800dda2:	623b      	str	r3, [r7, #32]
   return(result);
 800dda4:	6a3b      	ldr	r3, [r7, #32]
 800dda6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800ddaa:	663b      	str	r3, [r7, #96]	@ 0x60
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	681b      	ldr	r3, [r3, #0]
 800ddb0:	461a      	mov	r2, r3
 800ddb2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ddb4:	633b      	str	r3, [r7, #48]	@ 0x30
 800ddb6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ddb8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ddba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ddbc:	e841 2300 	strex	r3, r2, [r1]
 800ddc0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ddc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ddc4:	2b00      	cmp	r3, #0
 800ddc6:	d1e6      	bne.n	800dd96 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ddcc:	2b01      	cmp	r3, #1
 800ddce:	d130      	bne.n	800de32 <UART_RxISR_8BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	2200      	movs	r2, #0
 800ddd4:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	681b      	ldr	r3, [r3, #0]
 800ddda:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dddc:	693b      	ldr	r3, [r7, #16]
 800ddde:	e853 3f00 	ldrex	r3, [r3]
 800dde2:	60fb      	str	r3, [r7, #12]
   return(result);
 800dde4:	68fb      	ldr	r3, [r7, #12]
 800dde6:	f023 0310 	bic.w	r3, r3, #16
 800ddea:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	681b      	ldr	r3, [r3, #0]
 800ddf0:	461a      	mov	r2, r3
 800ddf2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ddf4:	61fb      	str	r3, [r7, #28]
 800ddf6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ddf8:	69b9      	ldr	r1, [r7, #24]
 800ddfa:	69fa      	ldr	r2, [r7, #28]
 800ddfc:	e841 2300 	strex	r3, r2, [r1]
 800de00:	617b      	str	r3, [r7, #20]
   return(result);
 800de02:	697b      	ldr	r3, [r7, #20]
 800de04:	2b00      	cmp	r3, #0
 800de06:	d1e6      	bne.n	800ddd6 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	681b      	ldr	r3, [r3, #0]
 800de0c:	69db      	ldr	r3, [r3, #28]
 800de0e:	f003 0310 	and.w	r3, r3, #16
 800de12:	2b10      	cmp	r3, #16
 800de14:	d103      	bne.n	800de1e <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	681b      	ldr	r3, [r3, #0]
 800de1a:	2210      	movs	r2, #16
 800de1c:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800de24:	687a      	ldr	r2, [r7, #4]
 800de26:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800de2a:	4611      	mov	r1, r2
 800de2c:	6878      	ldr	r0, [r7, #4]
 800de2e:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800de30:	e00d      	b.n	800de4e <UART_RxISR_8BIT+0x1b2>
        huart->RxCpltCallback(huart);
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800de38:	6878      	ldr	r0, [r7, #4]
 800de3a:	4798      	blx	r3
}
 800de3c:	e007      	b.n	800de4e <UART_RxISR_8BIT+0x1b2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	681b      	ldr	r3, [r3, #0]
 800de42:	699a      	ldr	r2, [r3, #24]
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	681b      	ldr	r3, [r3, #0]
 800de48:	f042 0208 	orr.w	r2, r2, #8
 800de4c:	619a      	str	r2, [r3, #24]
}
 800de4e:	bf00      	nop
 800de50:	3770      	adds	r7, #112	@ 0x70
 800de52:	46bd      	mov	sp, r7
 800de54:	bd80      	pop	{r7, pc}
 800de56:	bf00      	nop
 800de58:	40008000 	.word	0x40008000

0800de5c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800de5c:	b580      	push	{r7, lr}
 800de5e:	b09c      	sub	sp, #112	@ 0x70
 800de60:	af00      	add	r7, sp, #0
 800de62:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800de6a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800de74:	2b22      	cmp	r3, #34	@ 0x22
 800de76:	f040 80c2 	bne.w	800dffe <UART_RxISR_16BIT+0x1a2>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	681b      	ldr	r3, [r3, #0]
 800de7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800de80:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800de88:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800de8a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800de8e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800de92:	4013      	ands	r3, r2
 800de94:	b29a      	uxth	r2, r3
 800de96:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800de98:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800de9e:	1c9a      	adds	r2, r3, #2
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800deaa:	b29b      	uxth	r3, r3
 800deac:	3b01      	subs	r3, #1
 800deae:	b29a      	uxth	r2, r3
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800debc:	b29b      	uxth	r3, r3
 800debe:	2b00      	cmp	r3, #0
 800dec0:	f040 80a5 	bne.w	800e00e <UART_RxISR_16BIT+0x1b2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	681b      	ldr	r3, [r3, #0]
 800dec8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800deca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800decc:	e853 3f00 	ldrex	r3, [r3]
 800ded0:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800ded2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ded4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ded8:	667b      	str	r3, [r7, #100]	@ 0x64
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	681b      	ldr	r3, [r3, #0]
 800dede:	461a      	mov	r2, r3
 800dee0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800dee2:	657b      	str	r3, [r7, #84]	@ 0x54
 800dee4:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dee6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800dee8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800deea:	e841 2300 	strex	r3, r2, [r1]
 800deee:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800def0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800def2:	2b00      	cmp	r3, #0
 800def4:	d1e6      	bne.n	800dec4 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	681b      	ldr	r3, [r3, #0]
 800defa:	3308      	adds	r3, #8
 800defc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800defe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800df00:	e853 3f00 	ldrex	r3, [r3]
 800df04:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800df06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df08:	f023 0301 	bic.w	r3, r3, #1
 800df0c:	663b      	str	r3, [r7, #96]	@ 0x60
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	681b      	ldr	r3, [r3, #0]
 800df12:	3308      	adds	r3, #8
 800df14:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800df16:	643a      	str	r2, [r7, #64]	@ 0x40
 800df18:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df1a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800df1c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800df1e:	e841 2300 	strex	r3, r2, [r1]
 800df22:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800df24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df26:	2b00      	cmp	r3, #0
 800df28:	d1e5      	bne.n	800def6 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	2220      	movs	r2, #32
 800df2e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	2200      	movs	r2, #0
 800df36:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	2200      	movs	r2, #0
 800df3c:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	681b      	ldr	r3, [r3, #0]
 800df42:	4a35      	ldr	r2, [pc, #212]	@ (800e018 <UART_RxISR_16BIT+0x1bc>)
 800df44:	4293      	cmp	r3, r2
 800df46:	d01f      	beq.n	800df88 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	681b      	ldr	r3, [r3, #0]
 800df4c:	685b      	ldr	r3, [r3, #4]
 800df4e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800df52:	2b00      	cmp	r3, #0
 800df54:	d018      	beq.n	800df88 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	681b      	ldr	r3, [r3, #0]
 800df5a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df5c:	6a3b      	ldr	r3, [r7, #32]
 800df5e:	e853 3f00 	ldrex	r3, [r3]
 800df62:	61fb      	str	r3, [r7, #28]
   return(result);
 800df64:	69fb      	ldr	r3, [r7, #28]
 800df66:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800df6a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	681b      	ldr	r3, [r3, #0]
 800df70:	461a      	mov	r2, r3
 800df72:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800df74:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800df76:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df78:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800df7a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800df7c:	e841 2300 	strex	r3, r2, [r1]
 800df80:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800df82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df84:	2b00      	cmp	r3, #0
 800df86:	d1e6      	bne.n	800df56 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800df8c:	2b01      	cmp	r3, #1
 800df8e:	d130      	bne.n	800dff2 <UART_RxISR_16BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	2200      	movs	r2, #0
 800df94:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	681b      	ldr	r3, [r3, #0]
 800df9a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df9c:	68fb      	ldr	r3, [r7, #12]
 800df9e:	e853 3f00 	ldrex	r3, [r3]
 800dfa2:	60bb      	str	r3, [r7, #8]
   return(result);
 800dfa4:	68bb      	ldr	r3, [r7, #8]
 800dfa6:	f023 0310 	bic.w	r3, r3, #16
 800dfaa:	65bb      	str	r3, [r7, #88]	@ 0x58
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	681b      	ldr	r3, [r3, #0]
 800dfb0:	461a      	mov	r2, r3
 800dfb2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800dfb4:	61bb      	str	r3, [r7, #24]
 800dfb6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dfb8:	6979      	ldr	r1, [r7, #20]
 800dfba:	69ba      	ldr	r2, [r7, #24]
 800dfbc:	e841 2300 	strex	r3, r2, [r1]
 800dfc0:	613b      	str	r3, [r7, #16]
   return(result);
 800dfc2:	693b      	ldr	r3, [r7, #16]
 800dfc4:	2b00      	cmp	r3, #0
 800dfc6:	d1e6      	bne.n	800df96 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	681b      	ldr	r3, [r3, #0]
 800dfcc:	69db      	ldr	r3, [r3, #28]
 800dfce:	f003 0310 	and.w	r3, r3, #16
 800dfd2:	2b10      	cmp	r3, #16
 800dfd4:	d103      	bne.n	800dfde <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	681b      	ldr	r3, [r3, #0]
 800dfda:	2210      	movs	r2, #16
 800dfdc:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800dfe4:	687a      	ldr	r2, [r7, #4]
 800dfe6:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800dfea:	4611      	mov	r1, r2
 800dfec:	6878      	ldr	r0, [r7, #4]
 800dfee:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800dff0:	e00d      	b.n	800e00e <UART_RxISR_16BIT+0x1b2>
        huart->RxCpltCallback(huart);
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800dff8:	6878      	ldr	r0, [r7, #4]
 800dffa:	4798      	blx	r3
}
 800dffc:	e007      	b.n	800e00e <UART_RxISR_16BIT+0x1b2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	681b      	ldr	r3, [r3, #0]
 800e002:	699a      	ldr	r2, [r3, #24]
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	681b      	ldr	r3, [r3, #0]
 800e008:	f042 0208 	orr.w	r2, r2, #8
 800e00c:	619a      	str	r2, [r3, #24]
}
 800e00e:	bf00      	nop
 800e010:	3770      	adds	r7, #112	@ 0x70
 800e012:	46bd      	mov	sp, r7
 800e014:	bd80      	pop	{r7, pc}
 800e016:	bf00      	nop
 800e018:	40008000 	.word	0x40008000

0800e01c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800e01c:	b580      	push	{r7, lr}
 800e01e:	b0ac      	sub	sp, #176	@ 0xb0
 800e020:	af00      	add	r7, sp, #0
 800e022:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800e02a:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	681b      	ldr	r3, [r3, #0]
 800e032:	69db      	ldr	r3, [r3, #28]
 800e034:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	681b      	ldr	r3, [r3, #0]
 800e03c:	681b      	ldr	r3, [r3, #0]
 800e03e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	681b      	ldr	r3, [r3, #0]
 800e046:	689b      	ldr	r3, [r3, #8]
 800e048:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e052:	2b22      	cmp	r3, #34	@ 0x22
 800e054:	f040 8189 	bne.w	800e36a <UART_RxISR_8BIT_FIFOEN+0x34e>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800e05e:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800e062:	e12c      	b.n	800e2be <UART_RxISR_8BIT_FIFOEN+0x2a2>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	681b      	ldr	r3, [r3, #0]
 800e068:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e06a:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800e06e:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800e072:	b2d9      	uxtb	r1, r3
 800e074:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 800e078:	b2da      	uxtb	r2, r3
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e07e:	400a      	ands	r2, r1
 800e080:	b2d2      	uxtb	r2, r2
 800e082:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e088:	1c5a      	adds	r2, r3, #1
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800e094:	b29b      	uxth	r3, r3
 800e096:	3b01      	subs	r3, #1
 800e098:	b29a      	uxth	r2, r3
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	681b      	ldr	r3, [r3, #0]
 800e0a4:	69db      	ldr	r3, [r3, #28]
 800e0a6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800e0aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e0ae:	f003 0307 	and.w	r3, r3, #7
 800e0b2:	2b00      	cmp	r3, #0
 800e0b4:	d055      	beq.n	800e162 <UART_RxISR_8BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800e0b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e0ba:	f003 0301 	and.w	r3, r3, #1
 800e0be:	2b00      	cmp	r3, #0
 800e0c0:	d011      	beq.n	800e0e6 <UART_RxISR_8BIT_FIFOEN+0xca>
 800e0c2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e0c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e0ca:	2b00      	cmp	r3, #0
 800e0cc:	d00b      	beq.n	800e0e6 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	681b      	ldr	r3, [r3, #0]
 800e0d2:	2201      	movs	r2, #1
 800e0d4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e0dc:	f043 0201 	orr.w	r2, r3, #1
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e0e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e0ea:	f003 0302 	and.w	r3, r3, #2
 800e0ee:	2b00      	cmp	r3, #0
 800e0f0:	d011      	beq.n	800e116 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800e0f2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800e0f6:	f003 0301 	and.w	r3, r3, #1
 800e0fa:	2b00      	cmp	r3, #0
 800e0fc:	d00b      	beq.n	800e116 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	681b      	ldr	r3, [r3, #0]
 800e102:	2202      	movs	r2, #2
 800e104:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e10c:	f043 0204 	orr.w	r2, r3, #4
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e116:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e11a:	f003 0304 	and.w	r3, r3, #4
 800e11e:	2b00      	cmp	r3, #0
 800e120:	d011      	beq.n	800e146 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800e122:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800e126:	f003 0301 	and.w	r3, r3, #1
 800e12a:	2b00      	cmp	r3, #0
 800e12c:	d00b      	beq.n	800e146 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	681b      	ldr	r3, [r3, #0]
 800e132:	2204      	movs	r2, #4
 800e134:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e13c:	f043 0202 	orr.w	r2, r3, #2
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e14c:	2b00      	cmp	r3, #0
 800e14e:	d008      	beq.n	800e162 <UART_RxISR_8BIT_FIFOEN+0x146>
        {
          /* Non Blocking error : transfer could go on.
          Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800e156:	6878      	ldr	r0, [r7, #4]
 800e158:	4798      	blx	r3
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	2200      	movs	r2, #0
 800e15e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800e168:	b29b      	uxth	r3, r3
 800e16a:	2b00      	cmp	r3, #0
 800e16c:	f040 80a7 	bne.w	800e2be <UART_RxISR_8BIT_FIFOEN+0x2a2>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	681b      	ldr	r3, [r3, #0]
 800e174:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e176:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800e178:	e853 3f00 	ldrex	r3, [r3]
 800e17c:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 800e17e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e180:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e184:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	681b      	ldr	r3, [r3, #0]
 800e18c:	461a      	mov	r2, r3
 800e18e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800e192:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800e194:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e196:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800e198:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800e19a:	e841 2300 	strex	r3, r2, [r1]
 800e19e:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 800e1a0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800e1a2:	2b00      	cmp	r3, #0
 800e1a4:	d1e4      	bne.n	800e170 <UART_RxISR_8BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	681b      	ldr	r3, [r3, #0]
 800e1aa:	3308      	adds	r3, #8
 800e1ac:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e1ae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e1b0:	e853 3f00 	ldrex	r3, [r3]
 800e1b4:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800e1b6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e1b8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800e1bc:	f023 0301 	bic.w	r3, r3, #1
 800e1c0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	681b      	ldr	r3, [r3, #0]
 800e1c8:	3308      	adds	r3, #8
 800e1ca:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800e1ce:	66ba      	str	r2, [r7, #104]	@ 0x68
 800e1d0:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e1d2:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800e1d4:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800e1d6:	e841 2300 	strex	r3, r2, [r1]
 800e1da:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800e1dc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e1de:	2b00      	cmp	r3, #0
 800e1e0:	d1e1      	bne.n	800e1a6 <UART_RxISR_8BIT_FIFOEN+0x18a>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	2220      	movs	r2, #32
 800e1e6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	2200      	movs	r2, #0
 800e1ee:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	2200      	movs	r2, #0
 800e1f4:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	681b      	ldr	r3, [r3, #0]
 800e1fa:	4a62      	ldr	r2, [pc, #392]	@ (800e384 <UART_RxISR_8BIT_FIFOEN+0x368>)
 800e1fc:	4293      	cmp	r3, r2
 800e1fe:	d021      	beq.n	800e244 <UART_RxISR_8BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	681b      	ldr	r3, [r3, #0]
 800e204:	685b      	ldr	r3, [r3, #4]
 800e206:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800e20a:	2b00      	cmp	r3, #0
 800e20c:	d01a      	beq.n	800e244 <UART_RxISR_8BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	681b      	ldr	r3, [r3, #0]
 800e212:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e214:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e216:	e853 3f00 	ldrex	r3, [r3]
 800e21a:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800e21c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e21e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800e222:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	681b      	ldr	r3, [r3, #0]
 800e22a:	461a      	mov	r2, r3
 800e22c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800e230:	657b      	str	r3, [r7, #84]	@ 0x54
 800e232:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e234:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800e236:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800e238:	e841 2300 	strex	r3, r2, [r1]
 800e23c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800e23e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e240:	2b00      	cmp	r3, #0
 800e242:	d1e4      	bne.n	800e20e <UART_RxISR_8BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e248:	2b01      	cmp	r3, #1
 800e24a:	d132      	bne.n	800e2b2 <UART_RxISR_8BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	2200      	movs	r2, #0
 800e250:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	681b      	ldr	r3, [r3, #0]
 800e256:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e258:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e25a:	e853 3f00 	ldrex	r3, [r3]
 800e25e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800e260:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e262:	f023 0310 	bic.w	r3, r3, #16
 800e266:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	681b      	ldr	r3, [r3, #0]
 800e26e:	461a      	mov	r2, r3
 800e270:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800e274:	643b      	str	r3, [r7, #64]	@ 0x40
 800e276:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e278:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800e27a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800e27c:	e841 2300 	strex	r3, r2, [r1]
 800e280:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800e282:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e284:	2b00      	cmp	r3, #0
 800e286:	d1e4      	bne.n	800e252 <UART_RxISR_8BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	681b      	ldr	r3, [r3, #0]
 800e28c:	69db      	ldr	r3, [r3, #28]
 800e28e:	f003 0310 	and.w	r3, r3, #16
 800e292:	2b10      	cmp	r3, #16
 800e294:	d103      	bne.n	800e29e <UART_RxISR_8BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	681b      	ldr	r3, [r3, #0]
 800e29a:	2210      	movs	r2, #16
 800e29c:	621a      	str	r2, [r3, #32]
          }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800e2a4:	687a      	ldr	r2, [r7, #4]
 800e2a6:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800e2aa:	4611      	mov	r1, r2
 800e2ac:	6878      	ldr	r0, [r7, #4]
 800e2ae:	4798      	blx	r3
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 800e2b0:	e010      	b.n	800e2d4 <UART_RxISR_8BIT_FIFOEN+0x2b8>
          huart->RxCpltCallback(huart);
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800e2b8:	6878      	ldr	r0, [r7, #4]
 800e2ba:	4798      	blx	r3
        break;
 800e2bc:	e00a      	b.n	800e2d4 <UART_RxISR_8BIT_FIFOEN+0x2b8>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800e2be:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800e2c2:	2b00      	cmp	r3, #0
 800e2c4:	d006      	beq.n	800e2d4 <UART_RxISR_8BIT_FIFOEN+0x2b8>
 800e2c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e2ca:	f003 0320 	and.w	r3, r3, #32
 800e2ce:	2b00      	cmp	r3, #0
 800e2d0:	f47f aec8 	bne.w	800e064 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800e2da:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800e2de:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800e2e2:	2b00      	cmp	r3, #0
 800e2e4:	d049      	beq.n	800e37a <UART_RxISR_8BIT_FIFOEN+0x35e>
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800e2ec:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800e2f0:	429a      	cmp	r2, r3
 800e2f2:	d242      	bcs.n	800e37a <UART_RxISR_8BIT_FIFOEN+0x35e>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	681b      	ldr	r3, [r3, #0]
 800e2f8:	3308      	adds	r3, #8
 800e2fa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e2fc:	6a3b      	ldr	r3, [r7, #32]
 800e2fe:	e853 3f00 	ldrex	r3, [r3]
 800e302:	61fb      	str	r3, [r7, #28]
   return(result);
 800e304:	69fb      	ldr	r3, [r7, #28]
 800e306:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800e30a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	681b      	ldr	r3, [r3, #0]
 800e312:	3308      	adds	r3, #8
 800e314:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800e318:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800e31a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e31c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e31e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e320:	e841 2300 	strex	r3, r2, [r1]
 800e324:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800e326:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e328:	2b00      	cmp	r3, #0
 800e32a:	d1e3      	bne.n	800e2f4 <UART_RxISR_8BIT_FIFOEN+0x2d8>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	4a16      	ldr	r2, [pc, #88]	@ (800e388 <UART_RxISR_8BIT_FIFOEN+0x36c>)
 800e330:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	681b      	ldr	r3, [r3, #0]
 800e336:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e338:	68fb      	ldr	r3, [r7, #12]
 800e33a:	e853 3f00 	ldrex	r3, [r3]
 800e33e:	60bb      	str	r3, [r7, #8]
   return(result);
 800e340:	68bb      	ldr	r3, [r7, #8]
 800e342:	f043 0320 	orr.w	r3, r3, #32
 800e346:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	681b      	ldr	r3, [r3, #0]
 800e34e:	461a      	mov	r2, r3
 800e350:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800e354:	61bb      	str	r3, [r7, #24]
 800e356:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e358:	6979      	ldr	r1, [r7, #20]
 800e35a:	69ba      	ldr	r2, [r7, #24]
 800e35c:	e841 2300 	strex	r3, r2, [r1]
 800e360:	613b      	str	r3, [r7, #16]
   return(result);
 800e362:	693b      	ldr	r3, [r7, #16]
 800e364:	2b00      	cmp	r3, #0
 800e366:	d1e4      	bne.n	800e332 <UART_RxISR_8BIT_FIFOEN+0x316>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800e368:	e007      	b.n	800e37a <UART_RxISR_8BIT_FIFOEN+0x35e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	681b      	ldr	r3, [r3, #0]
 800e36e:	699a      	ldr	r2, [r3, #24]
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	681b      	ldr	r3, [r3, #0]
 800e374:	f042 0208 	orr.w	r2, r2, #8
 800e378:	619a      	str	r2, [r3, #24]
}
 800e37a:	bf00      	nop
 800e37c:	37b0      	adds	r7, #176	@ 0xb0
 800e37e:	46bd      	mov	sp, r7
 800e380:	bd80      	pop	{r7, pc}
 800e382:	bf00      	nop
 800e384:	40008000 	.word	0x40008000
 800e388:	0800dc9d 	.word	0x0800dc9d

0800e38c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800e38c:	b580      	push	{r7, lr}
 800e38e:	b0ae      	sub	sp, #184	@ 0xb8
 800e390:	af00      	add	r7, sp, #0
 800e392:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800e39a:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	681b      	ldr	r3, [r3, #0]
 800e3a2:	69db      	ldr	r3, [r3, #28]
 800e3a4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	681b      	ldr	r3, [r3, #0]
 800e3ac:	681b      	ldr	r3, [r3, #0]
 800e3ae:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	681b      	ldr	r3, [r3, #0]
 800e3b6:	689b      	ldr	r3, [r3, #8]
 800e3b8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e3c2:	2b22      	cmp	r3, #34	@ 0x22
 800e3c4:	f040 818d 	bne.w	800e6e2 <UART_RxISR_16BIT_FIFOEN+0x356>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800e3ce:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800e3d2:	e130      	b.n	800e636 <UART_RxISR_16BIT_FIFOEN+0x2aa>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	681b      	ldr	r3, [r3, #0]
 800e3d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e3da:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e3e2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800e3e6:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800e3ea:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800e3ee:	4013      	ands	r3, r2
 800e3f0:	b29a      	uxth	r2, r3
 800e3f2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800e3f6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e3fc:	1c9a      	adds	r2, r3, #2
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800e408:	b29b      	uxth	r3, r3
 800e40a:	3b01      	subs	r3, #1
 800e40c:	b29a      	uxth	r2, r3
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	681b      	ldr	r3, [r3, #0]
 800e418:	69db      	ldr	r3, [r3, #28]
 800e41a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800e41e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800e422:	f003 0307 	and.w	r3, r3, #7
 800e426:	2b00      	cmp	r3, #0
 800e428:	d055      	beq.n	800e4d6 <UART_RxISR_16BIT_FIFOEN+0x14a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800e42a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800e42e:	f003 0301 	and.w	r3, r3, #1
 800e432:	2b00      	cmp	r3, #0
 800e434:	d011      	beq.n	800e45a <UART_RxISR_16BIT_FIFOEN+0xce>
 800e436:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e43a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e43e:	2b00      	cmp	r3, #0
 800e440:	d00b      	beq.n	800e45a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	681b      	ldr	r3, [r3, #0]
 800e446:	2201      	movs	r2, #1
 800e448:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e450:	f043 0201 	orr.w	r2, r3, #1
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e45a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800e45e:	f003 0302 	and.w	r3, r3, #2
 800e462:	2b00      	cmp	r3, #0
 800e464:	d011      	beq.n	800e48a <UART_RxISR_16BIT_FIFOEN+0xfe>
 800e466:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800e46a:	f003 0301 	and.w	r3, r3, #1
 800e46e:	2b00      	cmp	r3, #0
 800e470:	d00b      	beq.n	800e48a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	681b      	ldr	r3, [r3, #0]
 800e476:	2202      	movs	r2, #2
 800e478:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e480:	f043 0204 	orr.w	r2, r3, #4
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e48a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800e48e:	f003 0304 	and.w	r3, r3, #4
 800e492:	2b00      	cmp	r3, #0
 800e494:	d011      	beq.n	800e4ba <UART_RxISR_16BIT_FIFOEN+0x12e>
 800e496:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800e49a:	f003 0301 	and.w	r3, r3, #1
 800e49e:	2b00      	cmp	r3, #0
 800e4a0:	d00b      	beq.n	800e4ba <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	681b      	ldr	r3, [r3, #0]
 800e4a6:	2204      	movs	r2, #4
 800e4a8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e4b0:	f043 0202 	orr.w	r2, r3, #2
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e4c0:	2b00      	cmp	r3, #0
 800e4c2:	d008      	beq.n	800e4d6 <UART_RxISR_16BIT_FIFOEN+0x14a>
        {
          /* Non Blocking error : transfer could go on.
          Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800e4ca:	6878      	ldr	r0, [r7, #4]
 800e4cc:	4798      	blx	r3
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	2200      	movs	r2, #0
 800e4d2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800e4dc:	b29b      	uxth	r3, r3
 800e4de:	2b00      	cmp	r3, #0
 800e4e0:	f040 80a9 	bne.w	800e636 <UART_RxISR_16BIT_FIFOEN+0x2aa>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	681b      	ldr	r3, [r3, #0]
 800e4e8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e4ea:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800e4ec:	e853 3f00 	ldrex	r3, [r3]
 800e4f0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800e4f2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800e4f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e4f8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	681b      	ldr	r3, [r3, #0]
 800e500:	461a      	mov	r2, r3
 800e502:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800e506:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800e50a:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e50c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800e50e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800e512:	e841 2300 	strex	r3, r2, [r1]
 800e516:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800e518:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e51a:	2b00      	cmp	r3, #0
 800e51c:	d1e2      	bne.n	800e4e4 <UART_RxISR_16BIT_FIFOEN+0x158>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	681b      	ldr	r3, [r3, #0]
 800e522:	3308      	adds	r3, #8
 800e524:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e526:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e528:	e853 3f00 	ldrex	r3, [r3]
 800e52c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800e52e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e530:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800e534:	f023 0301 	bic.w	r3, r3, #1
 800e538:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	681b      	ldr	r3, [r3, #0]
 800e540:	3308      	adds	r3, #8
 800e542:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800e546:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800e548:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e54a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800e54c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800e54e:	e841 2300 	strex	r3, r2, [r1]
 800e552:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800e554:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e556:	2b00      	cmp	r3, #0
 800e558:	d1e1      	bne.n	800e51e <UART_RxISR_16BIT_FIFOEN+0x192>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	2220      	movs	r2, #32
 800e55e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	2200      	movs	r2, #0
 800e566:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	2200      	movs	r2, #0
 800e56c:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	681b      	ldr	r3, [r3, #0]
 800e572:	4a62      	ldr	r2, [pc, #392]	@ (800e6fc <UART_RxISR_16BIT_FIFOEN+0x370>)
 800e574:	4293      	cmp	r3, r2
 800e576:	d021      	beq.n	800e5bc <UART_RxISR_16BIT_FIFOEN+0x230>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	681b      	ldr	r3, [r3, #0]
 800e57c:	685b      	ldr	r3, [r3, #4]
 800e57e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800e582:	2b00      	cmp	r3, #0
 800e584:	d01a      	beq.n	800e5bc <UART_RxISR_16BIT_FIFOEN+0x230>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	681b      	ldr	r3, [r3, #0]
 800e58a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e58c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e58e:	e853 3f00 	ldrex	r3, [r3]
 800e592:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800e594:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e596:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800e59a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	681b      	ldr	r3, [r3, #0]
 800e5a2:	461a      	mov	r2, r3
 800e5a4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800e5a8:	65bb      	str	r3, [r7, #88]	@ 0x58
 800e5aa:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e5ac:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800e5ae:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800e5b0:	e841 2300 	strex	r3, r2, [r1]
 800e5b4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800e5b6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e5b8:	2b00      	cmp	r3, #0
 800e5ba:	d1e4      	bne.n	800e586 <UART_RxISR_16BIT_FIFOEN+0x1fa>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e5c0:	2b01      	cmp	r3, #1
 800e5c2:	d132      	bne.n	800e62a <UART_RxISR_16BIT_FIFOEN+0x29e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	2200      	movs	r2, #0
 800e5c8:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	681b      	ldr	r3, [r3, #0]
 800e5ce:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e5d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e5d2:	e853 3f00 	ldrex	r3, [r3]
 800e5d6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800e5d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e5da:	f023 0310 	bic.w	r3, r3, #16
 800e5de:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	681b      	ldr	r3, [r3, #0]
 800e5e6:	461a      	mov	r2, r3
 800e5e8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800e5ec:	647b      	str	r3, [r7, #68]	@ 0x44
 800e5ee:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e5f0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800e5f2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e5f4:	e841 2300 	strex	r3, r2, [r1]
 800e5f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800e5fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e5fc:	2b00      	cmp	r3, #0
 800e5fe:	d1e4      	bne.n	800e5ca <UART_RxISR_16BIT_FIFOEN+0x23e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	681b      	ldr	r3, [r3, #0]
 800e604:	69db      	ldr	r3, [r3, #28]
 800e606:	f003 0310 	and.w	r3, r3, #16
 800e60a:	2b10      	cmp	r3, #16
 800e60c:	d103      	bne.n	800e616 <UART_RxISR_16BIT_FIFOEN+0x28a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	681b      	ldr	r3, [r3, #0]
 800e612:	2210      	movs	r2, #16
 800e614:	621a      	str	r2, [r3, #32]
          }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800e61c:	687a      	ldr	r2, [r7, #4]
 800e61e:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800e622:	4611      	mov	r1, r2
 800e624:	6878      	ldr	r0, [r7, #4]
 800e626:	4798      	blx	r3
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 800e628:	e010      	b.n	800e64c <UART_RxISR_16BIT_FIFOEN+0x2c0>
          huart->RxCpltCallback(huart);
 800e62a:	687b      	ldr	r3, [r7, #4]
 800e62c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800e630:	6878      	ldr	r0, [r7, #4]
 800e632:	4798      	blx	r3
        break;
 800e634:	e00a      	b.n	800e64c <UART_RxISR_16BIT_FIFOEN+0x2c0>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800e636:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800e63a:	2b00      	cmp	r3, #0
 800e63c:	d006      	beq.n	800e64c <UART_RxISR_16BIT_FIFOEN+0x2c0>
 800e63e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800e642:	f003 0320 	and.w	r3, r3, #32
 800e646:	2b00      	cmp	r3, #0
 800e648:	f47f aec4 	bne.w	800e3d4 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800e652:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800e656:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800e65a:	2b00      	cmp	r3, #0
 800e65c:	d049      	beq.n	800e6f2 <UART_RxISR_16BIT_FIFOEN+0x366>
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800e664:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800e668:	429a      	cmp	r2, r3
 800e66a:	d242      	bcs.n	800e6f2 <UART_RxISR_16BIT_FIFOEN+0x366>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	681b      	ldr	r3, [r3, #0]
 800e670:	3308      	adds	r3, #8
 800e672:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e674:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e676:	e853 3f00 	ldrex	r3, [r3]
 800e67a:	623b      	str	r3, [r7, #32]
   return(result);
 800e67c:	6a3b      	ldr	r3, [r7, #32]
 800e67e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800e682:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	681b      	ldr	r3, [r3, #0]
 800e68a:	3308      	adds	r3, #8
 800e68c:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800e690:	633a      	str	r2, [r7, #48]	@ 0x30
 800e692:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e694:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e696:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e698:	e841 2300 	strex	r3, r2, [r1]
 800e69c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800e69e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e6a0:	2b00      	cmp	r3, #0
 800e6a2:	d1e3      	bne.n	800e66c <UART_RxISR_16BIT_FIFOEN+0x2e0>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	4a16      	ldr	r2, [pc, #88]	@ (800e700 <UART_RxISR_16BIT_FIFOEN+0x374>)
 800e6a8:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	681b      	ldr	r3, [r3, #0]
 800e6ae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e6b0:	693b      	ldr	r3, [r7, #16]
 800e6b2:	e853 3f00 	ldrex	r3, [r3]
 800e6b6:	60fb      	str	r3, [r7, #12]
   return(result);
 800e6b8:	68fb      	ldr	r3, [r7, #12]
 800e6ba:	f043 0320 	orr.w	r3, r3, #32
 800e6be:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	681b      	ldr	r3, [r3, #0]
 800e6c6:	461a      	mov	r2, r3
 800e6c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800e6cc:	61fb      	str	r3, [r7, #28]
 800e6ce:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e6d0:	69b9      	ldr	r1, [r7, #24]
 800e6d2:	69fa      	ldr	r2, [r7, #28]
 800e6d4:	e841 2300 	strex	r3, r2, [r1]
 800e6d8:	617b      	str	r3, [r7, #20]
   return(result);
 800e6da:	697b      	ldr	r3, [r7, #20]
 800e6dc:	2b00      	cmp	r3, #0
 800e6de:	d1e4      	bne.n	800e6aa <UART_RxISR_16BIT_FIFOEN+0x31e>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800e6e0:	e007      	b.n	800e6f2 <UART_RxISR_16BIT_FIFOEN+0x366>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	681b      	ldr	r3, [r3, #0]
 800e6e6:	699a      	ldr	r2, [r3, #24]
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	681b      	ldr	r3, [r3, #0]
 800e6ec:	f042 0208 	orr.w	r2, r2, #8
 800e6f0:	619a      	str	r2, [r3, #24]
}
 800e6f2:	bf00      	nop
 800e6f4:	37b8      	adds	r7, #184	@ 0xb8
 800e6f6:	46bd      	mov	sp, r7
 800e6f8:	bd80      	pop	{r7, pc}
 800e6fa:	bf00      	nop
 800e6fc:	40008000 	.word	0x40008000
 800e700:	0800de5d 	.word	0x0800de5d

0800e704 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800e704:	b480      	push	{r7}
 800e706:	b083      	sub	sp, #12
 800e708:	af00      	add	r7, sp, #0
 800e70a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800e70c:	bf00      	nop
 800e70e:	370c      	adds	r7, #12
 800e710:	46bd      	mov	sp, r7
 800e712:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e716:	4770      	bx	lr

0800e718 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800e718:	b480      	push	{r7}
 800e71a:	b083      	sub	sp, #12
 800e71c:	af00      	add	r7, sp, #0
 800e71e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800e720:	bf00      	nop
 800e722:	370c      	adds	r7, #12
 800e724:	46bd      	mov	sp, r7
 800e726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e72a:	4770      	bx	lr

0800e72c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800e72c:	b480      	push	{r7}
 800e72e:	b083      	sub	sp, #12
 800e730:	af00      	add	r7, sp, #0
 800e732:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800e734:	bf00      	nop
 800e736:	370c      	adds	r7, #12
 800e738:	46bd      	mov	sp, r7
 800e73a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e73e:	4770      	bx	lr

0800e740 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800e740:	b480      	push	{r7}
 800e742:	b085      	sub	sp, #20
 800e744:	af00      	add	r7, sp, #0
 800e746:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800e74e:	2b01      	cmp	r3, #1
 800e750:	d101      	bne.n	800e756 <HAL_UARTEx_DisableFifoMode+0x16>
 800e752:	2302      	movs	r3, #2
 800e754:	e027      	b.n	800e7a6 <HAL_UARTEx_DisableFifoMode+0x66>
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	2201      	movs	r2, #1
 800e75a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	2224      	movs	r2, #36	@ 0x24
 800e762:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	681b      	ldr	r3, [r3, #0]
 800e76a:	681b      	ldr	r3, [r3, #0]
 800e76c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	681b      	ldr	r3, [r3, #0]
 800e772:	681a      	ldr	r2, [r3, #0]
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	681b      	ldr	r3, [r3, #0]
 800e778:	f022 0201 	bic.w	r2, r2, #1
 800e77c:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800e77e:	68fb      	ldr	r3, [r7, #12]
 800e780:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800e784:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	2200      	movs	r2, #0
 800e78a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	681b      	ldr	r3, [r3, #0]
 800e790:	68fa      	ldr	r2, [r7, #12]
 800e792:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	2220      	movs	r2, #32
 800e798:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	2200      	movs	r2, #0
 800e7a0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e7a4:	2300      	movs	r3, #0
}
 800e7a6:	4618      	mov	r0, r3
 800e7a8:	3714      	adds	r7, #20
 800e7aa:	46bd      	mov	sp, r7
 800e7ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7b0:	4770      	bx	lr

0800e7b2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e7b2:	b580      	push	{r7, lr}
 800e7b4:	b084      	sub	sp, #16
 800e7b6:	af00      	add	r7, sp, #0
 800e7b8:	6078      	str	r0, [r7, #4]
 800e7ba:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800e7c2:	2b01      	cmp	r3, #1
 800e7c4:	d101      	bne.n	800e7ca <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800e7c6:	2302      	movs	r3, #2
 800e7c8:	e02d      	b.n	800e826 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	2201      	movs	r2, #1
 800e7ce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e7d2:	687b      	ldr	r3, [r7, #4]
 800e7d4:	2224      	movs	r2, #36	@ 0x24
 800e7d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e7da:	687b      	ldr	r3, [r7, #4]
 800e7dc:	681b      	ldr	r3, [r3, #0]
 800e7de:	681b      	ldr	r3, [r3, #0]
 800e7e0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	681b      	ldr	r3, [r3, #0]
 800e7e6:	681a      	ldr	r2, [r3, #0]
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	681b      	ldr	r3, [r3, #0]
 800e7ec:	f022 0201 	bic.w	r2, r2, #1
 800e7f0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	681b      	ldr	r3, [r3, #0]
 800e7f6:	689b      	ldr	r3, [r3, #8]
 800e7f8:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	681b      	ldr	r3, [r3, #0]
 800e800:	683a      	ldr	r2, [r7, #0]
 800e802:	430a      	orrs	r2, r1
 800e804:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e806:	6878      	ldr	r0, [r7, #4]
 800e808:	f000 f850 	bl	800e8ac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	681b      	ldr	r3, [r3, #0]
 800e810:	68fa      	ldr	r2, [r7, #12]
 800e812:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	2220      	movs	r2, #32
 800e818:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	2200      	movs	r2, #0
 800e820:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e824:	2300      	movs	r3, #0
}
 800e826:	4618      	mov	r0, r3
 800e828:	3710      	adds	r7, #16
 800e82a:	46bd      	mov	sp, r7
 800e82c:	bd80      	pop	{r7, pc}

0800e82e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e82e:	b580      	push	{r7, lr}
 800e830:	b084      	sub	sp, #16
 800e832:	af00      	add	r7, sp, #0
 800e834:	6078      	str	r0, [r7, #4]
 800e836:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800e83e:	2b01      	cmp	r3, #1
 800e840:	d101      	bne.n	800e846 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800e842:	2302      	movs	r3, #2
 800e844:	e02d      	b.n	800e8a2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800e846:	687b      	ldr	r3, [r7, #4]
 800e848:	2201      	movs	r2, #1
 800e84a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e84e:	687b      	ldr	r3, [r7, #4]
 800e850:	2224      	movs	r2, #36	@ 0x24
 800e852:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	681b      	ldr	r3, [r3, #0]
 800e85a:	681b      	ldr	r3, [r3, #0]
 800e85c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	681b      	ldr	r3, [r3, #0]
 800e862:	681a      	ldr	r2, [r3, #0]
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	681b      	ldr	r3, [r3, #0]
 800e868:	f022 0201 	bic.w	r2, r2, #1
 800e86c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	681b      	ldr	r3, [r3, #0]
 800e872:	689b      	ldr	r3, [r3, #8]
 800e874:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	681b      	ldr	r3, [r3, #0]
 800e87c:	683a      	ldr	r2, [r7, #0]
 800e87e:	430a      	orrs	r2, r1
 800e880:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e882:	6878      	ldr	r0, [r7, #4]
 800e884:	f000 f812 	bl	800e8ac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	681b      	ldr	r3, [r3, #0]
 800e88c:	68fa      	ldr	r2, [r7, #12]
 800e88e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	2220      	movs	r2, #32
 800e894:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	2200      	movs	r2, #0
 800e89c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e8a0:	2300      	movs	r3, #0
}
 800e8a2:	4618      	mov	r0, r3
 800e8a4:	3710      	adds	r7, #16
 800e8a6:	46bd      	mov	sp, r7
 800e8a8:	bd80      	pop	{r7, pc}
	...

0800e8ac <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800e8ac:	b480      	push	{r7}
 800e8ae:	b085      	sub	sp, #20
 800e8b0:	af00      	add	r7, sp, #0
 800e8b2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e8b8:	2b00      	cmp	r3, #0
 800e8ba:	d108      	bne.n	800e8ce <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	2201      	movs	r2, #1
 800e8c0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	2201      	movs	r2, #1
 800e8c8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800e8cc:	e031      	b.n	800e932 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800e8ce:	2308      	movs	r3, #8
 800e8d0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800e8d2:	2308      	movs	r3, #8
 800e8d4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	681b      	ldr	r3, [r3, #0]
 800e8da:	689b      	ldr	r3, [r3, #8]
 800e8dc:	0e5b      	lsrs	r3, r3, #25
 800e8de:	b2db      	uxtb	r3, r3
 800e8e0:	f003 0307 	and.w	r3, r3, #7
 800e8e4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	681b      	ldr	r3, [r3, #0]
 800e8ea:	689b      	ldr	r3, [r3, #8]
 800e8ec:	0f5b      	lsrs	r3, r3, #29
 800e8ee:	b2db      	uxtb	r3, r3
 800e8f0:	f003 0307 	and.w	r3, r3, #7
 800e8f4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e8f6:	7bbb      	ldrb	r3, [r7, #14]
 800e8f8:	7b3a      	ldrb	r2, [r7, #12]
 800e8fa:	4911      	ldr	r1, [pc, #68]	@ (800e940 <UARTEx_SetNbDataToProcess+0x94>)
 800e8fc:	5c8a      	ldrb	r2, [r1, r2]
 800e8fe:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800e902:	7b3a      	ldrb	r2, [r7, #12]
 800e904:	490f      	ldr	r1, [pc, #60]	@ (800e944 <UARTEx_SetNbDataToProcess+0x98>)
 800e906:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e908:	fb93 f3f2 	sdiv	r3, r3, r2
 800e90c:	b29a      	uxth	r2, r3
 800e90e:	687b      	ldr	r3, [r7, #4]
 800e910:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e914:	7bfb      	ldrb	r3, [r7, #15]
 800e916:	7b7a      	ldrb	r2, [r7, #13]
 800e918:	4909      	ldr	r1, [pc, #36]	@ (800e940 <UARTEx_SetNbDataToProcess+0x94>)
 800e91a:	5c8a      	ldrb	r2, [r1, r2]
 800e91c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800e920:	7b7a      	ldrb	r2, [r7, #13]
 800e922:	4908      	ldr	r1, [pc, #32]	@ (800e944 <UARTEx_SetNbDataToProcess+0x98>)
 800e924:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e926:	fb93 f3f2 	sdiv	r3, r3, r2
 800e92a:	b29a      	uxth	r2, r3
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800e932:	bf00      	nop
 800e934:	3714      	adds	r7, #20
 800e936:	46bd      	mov	sp, r7
 800e938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e93c:	4770      	bx	lr
 800e93e:	bf00      	nop
 800e940:	08011378 	.word	0x08011378
 800e944:	08011380 	.word	0x08011380

0800e948 <arm_pid_init_f32>:
 */

void arm_pid_init_f32(
  arm_pid_instance_f32 * S,
  int32_t resetStateFlag)
{
 800e948:	b580      	push	{r7, lr}
 800e94a:	b082      	sub	sp, #8
 800e94c:	af00      	add	r7, sp, #0
 800e94e:	6078      	str	r0, [r7, #4]
 800e950:	6039      	str	r1, [r7, #0]
  /* Derived coefficient A0 */
  S->A0 = S->Kp + S->Ki + S->Kd;
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	ed93 7a06 	vldr	s14, [r3, #24]
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	edd3 7a07 	vldr	s15, [r3, #28]
 800e95e:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	edd3 7a08 	vldr	s15, [r3, #32]
 800e968:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	edc3 7a00 	vstr	s15, [r3]

  /* Derived coefficient A1 */
  S->A1 = (-S->Kp) - ((float32_t) 2.0f * S->Kd);
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	edd3 7a06 	vldr	s15, [r3, #24]
 800e978:	eeb1 7a67 	vneg.f32	s14, s15
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	edd3 7a08 	vldr	s15, [r3, #32]
 800e982:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800e986:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	edc3 7a01 	vstr	s15, [r3, #4]

  /* Derived coefficient A2 */
  S->A2 = S->Kd;
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	6a1a      	ldr	r2, [r3, #32]
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	609a      	str	r2, [r3, #8]

  /* Check whether state needs reset or not */
  if (resetStateFlag)
 800e998:	683b      	ldr	r3, [r7, #0]
 800e99a:	2b00      	cmp	r3, #0
 800e99c:	d006      	beq.n	800e9ac <arm_pid_init_f32+0x64>
  {
    /* Reset state to zero, The size will be always 3 samples */
    memset(S->state, 0, 3U * sizeof(float32_t));
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	330c      	adds	r3, #12
 800e9a2:	220c      	movs	r2, #12
 800e9a4:	2100      	movs	r1, #0
 800e9a6:	4618      	mov	r0, r3
 800e9a8:	f000 fcc4 	bl	800f334 <memset>
  }

}
 800e9ac:	bf00      	nop
 800e9ae:	3708      	adds	r7, #8
 800e9b0:	46bd      	mov	sp, r7
 800e9b2:	bd80      	pop	{r7, pc}

0800e9b4 <arm_mat_add_f32>:
#else
arm_status arm_mat_add_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 800e9b4:	b480      	push	{r7}
 800e9b6:	b08b      	sub	sp, #44	@ 0x2c
 800e9b8:	af00      	add	r7, sp, #0
 800e9ba:	60f8      	str	r0, [r7, #12]
 800e9bc:	60b9      	str	r1, [r7, #8]
 800e9be:	607a      	str	r2, [r7, #4]
  float32_t *pInA = pSrcA->pData;                /* input data matrix pointer A */
 800e9c0:	68fb      	ldr	r3, [r7, #12]
 800e9c2:	685b      	ldr	r3, [r3, #4]
 800e9c4:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pInB = pSrcB->pData;                /* input data matrix pointer B */
 800e9c6:	68bb      	ldr	r3, [r7, #8]
 800e9c8:	685b      	ldr	r3, [r3, #4]
 800e9ca:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	685b      	ldr	r3, [r3, #4]
 800e9d0:	61fb      	str	r3, [r7, #28]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrcA->numRows * pSrcA->numCols;
 800e9d2:	68fb      	ldr	r3, [r7, #12]
 800e9d4:	881b      	ldrh	r3, [r3, #0]
 800e9d6:	461a      	mov	r2, r3
 800e9d8:	68fb      	ldr	r3, [r7, #12]
 800e9da:	885b      	ldrh	r3, [r3, #2]
 800e9dc:	fb02 f303 	mul.w	r3, r2, r3
 800e9e0:	617b      	str	r3, [r7, #20]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 800e9e2:	697b      	ldr	r3, [r7, #20]
 800e9e4:	61bb      	str	r3, [r7, #24]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 800e9e6:	e013      	b.n	800ea10 <arm_mat_add_f32+0x5c>
    {
      /* C(m,n) = A(m,n) + B(m,n) */

      /* Add and store result in destination buffer. */
      *pOut++ = *pInA++ + *pInB++;
 800e9e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e9ea:	1d1a      	adds	r2, r3, #4
 800e9ec:	627a      	str	r2, [r7, #36]	@ 0x24
 800e9ee:	ed93 7a00 	vldr	s14, [r3]
 800e9f2:	6a3b      	ldr	r3, [r7, #32]
 800e9f4:	1d1a      	adds	r2, r3, #4
 800e9f6:	623a      	str	r2, [r7, #32]
 800e9f8:	edd3 7a00 	vldr	s15, [r3]
 800e9fc:	69fb      	ldr	r3, [r7, #28]
 800e9fe:	1d1a      	adds	r2, r3, #4
 800ea00:	61fa      	str	r2, [r7, #28]
 800ea02:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ea06:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 800ea0a:	69bb      	ldr	r3, [r7, #24]
 800ea0c:	3b01      	subs	r3, #1
 800ea0e:	61bb      	str	r3, [r7, #24]
    while (blkCnt > 0U)
 800ea10:	69bb      	ldr	r3, [r7, #24]
 800ea12:	2b00      	cmp	r3, #0
 800ea14:	d1e8      	bne.n	800e9e8 <arm_mat_add_f32+0x34>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800ea16:	2300      	movs	r3, #0
 800ea18:	74fb      	strb	r3, [r7, #19]
  }

  /* Return to application */
  return (status);
 800ea1a:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800ea1e:	4618      	mov	r0, r3
 800ea20:	372c      	adds	r7, #44	@ 0x2c
 800ea22:	46bd      	mov	sp, r7
 800ea24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea28:	4770      	bx	lr

0800ea2a <arm_mat_init_f32>:
void arm_mat_init_f32(
  arm_matrix_instance_f32 * S,
  uint16_t nRows,
  uint16_t nColumns,
  float32_t * pData)
{
 800ea2a:	b480      	push	{r7}
 800ea2c:	b085      	sub	sp, #20
 800ea2e:	af00      	add	r7, sp, #0
 800ea30:	60f8      	str	r0, [r7, #12]
 800ea32:	607b      	str	r3, [r7, #4]
 800ea34:	460b      	mov	r3, r1
 800ea36:	817b      	strh	r3, [r7, #10]
 800ea38:	4613      	mov	r3, r2
 800ea3a:	813b      	strh	r3, [r7, #8]
  /* Assign Number of Rows */
  S->numRows = nRows;
 800ea3c:	68fb      	ldr	r3, [r7, #12]
 800ea3e:	897a      	ldrh	r2, [r7, #10]
 800ea40:	801a      	strh	r2, [r3, #0]

  /* Assign Number of Columns */
  S->numCols = nColumns;
 800ea42:	68fb      	ldr	r3, [r7, #12]
 800ea44:	893a      	ldrh	r2, [r7, #8]
 800ea46:	805a      	strh	r2, [r3, #2]

  /* Assign Data pointer */
  S->pData = pData;
 800ea48:	68fb      	ldr	r3, [r7, #12]
 800ea4a:	687a      	ldr	r2, [r7, #4]
 800ea4c:	605a      	str	r2, [r3, #4]
}
 800ea4e:	bf00      	nop
 800ea50:	3714      	adds	r7, #20
 800ea52:	46bd      	mov	sp, r7
 800ea54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea58:	4770      	bx	lr

0800ea5a <arm_mat_inverse_f32>:
                   - \ref ARM_MATH_SINGULAR      : Input matrix is found to be singular (non-invertible)
 */
arm_status arm_mat_inverse_f32(
  const arm_matrix_instance_f32 * pSrc,
        arm_matrix_instance_f32 * pDst)
{
 800ea5a:	b480      	push	{r7}
 800ea5c:	b0bb      	sub	sp, #236	@ 0xec
 800ea5e:	af00      	add	r7, sp, #0
 800ea60:	6078      	str	r0, [r7, #4]
 800ea62:	6039      	str	r1, [r7, #0]
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	685b      	ldr	r3, [r3, #4]
 800ea68:	667b      	str	r3, [r7, #100]	@ 0x64
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 800ea6a:	683b      	ldr	r3, [r7, #0]
 800ea6c:	685b      	ldr	r3, [r3, #4]
 800ea6e:	663b      	str	r3, [r7, #96]	@ 0x60
  
  float32_t *pTmp;
  uint32_t numRows = pSrc->numRows;              /* Number of rows in the matrix  */
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	881b      	ldrh	r3, [r3, #0]
 800ea74:	65fb      	str	r3, [r7, #92]	@ 0x5c
  uint32_t numCols = pSrc->numCols;              /* Number of Cols in the matrix  */
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	885b      	ldrh	r3, [r3, #2]
 800ea7a:	65bb      	str	r3, [r7, #88]	@ 0x58


  float32_t pivot = 0.0f, newPivot=0.0f;                /* Temporary input values  */
 800ea7c:	f04f 0300 	mov.w	r3, #0
 800ea80:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800ea84:	f04f 0300 	mov.w	r3, #0
 800ea88:	657b      	str	r3, [r7, #84]	@ 0x54
  uint32_t selectedRow,pivotRow,i, rowNb, rowCnt, flag = 0U, j,column;      /* loop counters */
 800ea8a:	2300      	movs	r3, #0
 800ea8c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
     *      8. Now an identical matrix is formed to the left of the bar(input matrix, pSrc).
     *         Therefore, the matrix to the right of the bar is our solution(pDst matrix, pDst).
     *----------------------------------------------------------------------------------------------------------------*/

    /* Working pointer for destination matrix */
    pTmp = pOut;
 800ea90:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ea92:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4

    /* Loop over the number of rows */
    rowCnt = numRows;
 800ea96:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ea98:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0

    /* Making the destination matrix as identity matrix */
    while (rowCnt > 0U)
 800ea9c:	e03b      	b.n	800eb16 <arm_mat_inverse_f32+0xbc>
    {
      /* Writing all zeroes in lower triangle of the destination matrix */
      j = numRows - rowCnt;
 800ea9e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800eaa0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800eaa4:	1ad3      	subs	r3, r2, r3
 800eaa6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      while (j > 0U)
 800eaaa:	e00c      	b.n	800eac6 <arm_mat_inverse_f32+0x6c>
      {
        *pTmp++ = 0.0f;
 800eaac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800eab0:	1d1a      	adds	r2, r3, #4
 800eab2:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 800eab6:	f04f 0200 	mov.w	r2, #0
 800eaba:	601a      	str	r2, [r3, #0]
        j--;
 800eabc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800eac0:	3b01      	subs	r3, #1
 800eac2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      while (j > 0U)
 800eac6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800eaca:	2b00      	cmp	r3, #0
 800eacc:	d1ee      	bne.n	800eaac <arm_mat_inverse_f32+0x52>
      }

      /* Writing all ones in the diagonal of the destination matrix */
      *pTmp++ = 1.0f;
 800eace:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ead2:	1d1a      	adds	r2, r3, #4
 800ead4:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 800ead8:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800eadc:	601a      	str	r2, [r3, #0]

      /* Writing all zeroes in upper triangle of the destination matrix */
      j = rowCnt - 1U;
 800eade:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800eae2:	3b01      	subs	r3, #1
 800eae4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      while (j > 0U)
 800eae8:	e00c      	b.n	800eb04 <arm_mat_inverse_f32+0xaa>
      {
        *pTmp++ = 0.0f;
 800eaea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800eaee:	1d1a      	adds	r2, r3, #4
 800eaf0:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 800eaf4:	f04f 0200 	mov.w	r2, #0
 800eaf8:	601a      	str	r2, [r3, #0]
        j--;
 800eafa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800eafe:	3b01      	subs	r3, #1
 800eb00:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      while (j > 0U)
 800eb04:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800eb08:	2b00      	cmp	r3, #0
 800eb0a:	d1ee      	bne.n	800eaea <arm_mat_inverse_f32+0x90>
      }

      /* Decrement loop counter */
      rowCnt--;
 800eb0c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800eb10:	3b01      	subs	r3, #1
 800eb12:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    while (rowCnt > 0U)
 800eb16:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800eb1a:	2b00      	cmp	r3, #0
 800eb1c:	d1bf      	bne.n	800ea9e <arm_mat_inverse_f32+0x44>

    /* Loop over the number of columns of the input matrix.
       All the elements in each column are processed by the row operations */

    /* Index modifier to navigate through the columns */
    for(column = 0U; column < numCols; column++)
 800eb1e:	2300      	movs	r3, #0
 800eb20:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800eb24:	e2c7      	b.n	800f0b6 <arm_mat_inverse_f32+0x65c>
      /* Check if the pivot element is zero..
       * If it is zero then interchange the row with non zero row below.
       * If there is no non zero element to replace in the rows below,
       * then the matrix is Singular. */

      pivotRow = column;
 800eb26:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800eb2a:	653b      	str	r3, [r7, #80]	@ 0x50

      /* Temporary variable to hold the pivot value */
      pTmp = ELEM(pSrc,column,column) ;
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	685a      	ldr	r2, [r3, #4]
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	885b      	ldrh	r3, [r3, #2]
 800eb34:	3301      	adds	r3, #1
 800eb36:	f8d7 10c4 	ldr.w	r1, [r7, #196]	@ 0xc4
 800eb3a:	fb01 f303 	mul.w	r3, r1, r3
 800eb3e:	009b      	lsls	r3, r3, #2
 800eb40:	4413      	add	r3, r2
 800eb42:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
      pivot = *pTmp;
 800eb46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800eb4a:	681b      	ldr	r3, [r3, #0]
 800eb4c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
      selectedRow = column;
 800eb50:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800eb54:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

      /* Find maximum pivot in column */
      
        /* Loop over the number rows present below */

      for (rowNb = column+1; rowNb < numRows; rowNb++)
 800eb58:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800eb5c:	3301      	adds	r3, #1
 800eb5e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800eb62:	e02c      	b.n	800ebbe <arm_mat_inverse_f32+0x164>
      {
          /* Update the input and destination pointers */
          pTmp = ELEM(pSrc,rowNb,column);
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	685a      	ldr	r2, [r3, #4]
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	885b      	ldrh	r3, [r3, #2]
 800eb6c:	4619      	mov	r1, r3
 800eb6e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800eb72:	fb03 f101 	mul.w	r1, r3, r1
 800eb76:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800eb7a:	440b      	add	r3, r1
 800eb7c:	009b      	lsls	r3, r3, #2
 800eb7e:	4413      	add	r3, r2
 800eb80:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
          newPivot = *pTmp;
 800eb84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800eb88:	681b      	ldr	r3, [r3, #0]
 800eb8a:	657b      	str	r3, [r7, #84]	@ 0x54
          if (fabsf(newPivot) > fabsf(pivot))
 800eb8c:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 800eb90:	eeb0 7ae7 	vabs.f32	s14, s15
 800eb94:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800eb98:	eef0 7ae7 	vabs.f32	s15, s15
 800eb9c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800eba0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eba4:	dd06      	ble.n	800ebb4 <arm_mat_inverse_f32+0x15a>
          {
            selectedRow = rowNb; 
 800eba6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800ebaa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
            pivot = newPivot;
 800ebae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ebb0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
      for (rowNb = column+1; rowNb < numRows; rowNb++)
 800ebb4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800ebb8:	3301      	adds	r3, #1
 800ebba:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800ebbe:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800ebc2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ebc4:	429a      	cmp	r2, r3
 800ebc6:	d3cd      	bcc.n	800eb64 <arm_mat_inverse_f32+0x10a>
          }
      }
        
      /* Check if there is a non zero pivot element to
       * replace in the rows below */
      if ((pivot != 0.0f) && (selectedRow != column))
 800ebc8:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800ebcc:	eef5 7a40 	vcmp.f32	s15, #0.0
 800ebd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ebd4:	f000 809b 	beq.w	800ed0e <arm_mat_inverse_f32+0x2b4>
 800ebd8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800ebdc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800ebe0:	429a      	cmp	r2, r3
 800ebe2:	f000 8094 	beq.w	800ed0e <arm_mat_inverse_f32+0x2b4>
      {
            
            SWAP_ROWS_F32(pSrc,column, pivotRow,selectedRow);
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	685b      	ldr	r3, [r3, #4]
 800ebea:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	685b      	ldr	r3, [r3, #4]
 800ebf2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800ebf6:	687b      	ldr	r3, [r7, #4]
 800ebf8:	885b      	ldrh	r3, [r3, #2]
 800ebfa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ebfc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800ebfe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800ec02:	1ad3      	subs	r3, r2, r3
 800ec04:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ec06:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ec08:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800ec0a:	fb03 f202 	mul.w	r2, r3, r2
 800ec0e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800ec12:	4413      	add	r3, r2
 800ec14:	009b      	lsls	r3, r3, #2
 800ec16:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800ec1a:	4413      	add	r3, r2
 800ec1c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800ec20:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ec22:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800ec26:	fb03 f202 	mul.w	r2, r3, r2
 800ec2a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800ec2e:	4413      	add	r3, r2
 800ec30:	009b      	lsls	r3, r3, #2
 800ec32:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800ec36:	4413      	add	r3, r2
 800ec38:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800ec3c:	2300      	movs	r3, #0
 800ec3e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800ec42:	e018      	b.n	800ec76 <arm_mat_inverse_f32+0x21c>
 800ec44:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800ec48:	681b      	ldr	r3, [r3, #0]
 800ec4a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800ec4c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800ec50:	1d1a      	adds	r2, r3, #4
 800ec52:	f8c7 20b8 	str.w	r2, [r7, #184]	@ 0xb8
 800ec56:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800ec5a:	6812      	ldr	r2, [r2, #0]
 800ec5c:	601a      	str	r2, [r3, #0]
 800ec5e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800ec62:	1d1a      	adds	r2, r3, #4
 800ec64:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 800ec68:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ec6a:	601a      	str	r2, [r3, #0]
 800ec6c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800ec70:	3301      	adds	r3, #1
 800ec72:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800ec76:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 800ec7a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ec7c:	429a      	cmp	r2, r3
 800ec7e:	dbe1      	blt.n	800ec44 <arm_mat_inverse_f32+0x1ea>
            SWAP_ROWS_F32(pDst,0, pivotRow,selectedRow);
 800ec80:	683b      	ldr	r3, [r7, #0]
 800ec82:	685b      	ldr	r3, [r3, #4]
 800ec84:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800ec88:	683b      	ldr	r3, [r7, #0]
 800ec8a:	685b      	ldr	r3, [r3, #4]
 800ec8c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800ec90:	683b      	ldr	r3, [r7, #0]
 800ec92:	885b      	ldrh	r3, [r3, #2]
 800ec94:	647b      	str	r3, [r7, #68]	@ 0x44
 800ec96:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ec98:	643b      	str	r3, [r7, #64]	@ 0x40
 800ec9a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ec9c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800ec9e:	fb02 f303 	mul.w	r3, r2, r3
 800eca2:	009b      	lsls	r3, r3, #2
 800eca4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800eca8:	4413      	add	r3, r2
 800ecaa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800ecae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ecb0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800ecb4:	fb02 f303 	mul.w	r3, r2, r3
 800ecb8:	009b      	lsls	r3, r3, #2
 800ecba:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800ecbe:	4413      	add	r3, r2
 800ecc0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800ecc4:	2300      	movs	r3, #0
 800ecc6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800ecca:	e018      	b.n	800ecfe <arm_mat_inverse_f32+0x2a4>
 800eccc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ecd0:	681b      	ldr	r3, [r3, #0]
 800ecd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ecd4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ecd8:	1d1a      	adds	r2, r3, #4
 800ecda:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800ecde:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800ece2:	6812      	ldr	r2, [r2, #0]
 800ece4:	601a      	str	r2, [r3, #0]
 800ece6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800ecea:	1d1a      	adds	r2, r3, #4
 800ecec:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800ecf0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800ecf2:	601a      	str	r2, [r3, #0]
 800ecf4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800ecf8:	3301      	adds	r3, #1
 800ecfa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800ecfe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800ed02:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ed04:	429a      	cmp	r2, r3
 800ed06:	dbe1      	blt.n	800eccc <arm_mat_inverse_f32+0x272>

    
            /* Flag to indicate whether exchange is done or not */
            flag = 1U;
 800ed08:	2301      	movs	r3, #1
 800ed0a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc

      
      

      /* Update the status if the matrix is singular */
      if ((flag != 1U) && (pivot == 0.0f))
 800ed0e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800ed12:	2b01      	cmp	r3, #1
 800ed14:	d009      	beq.n	800ed2a <arm_mat_inverse_f32+0x2d0>
 800ed16:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800ed1a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800ed1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed22:	d102      	bne.n	800ed2a <arm_mat_inverse_f32+0x2d0>
      {
        return ARM_MATH_SINGULAR;
 800ed24:	f06f 0304 	mvn.w	r3, #4
 800ed28:	e208      	b.n	800f13c <arm_mat_inverse_f32+0x6e2>
      }

     
      /* Pivot element of the row */
      pivot = 1.0f / pivot;
 800ed2a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ed2e:	ed97 7a38 	vldr	s14, [r7, #224]	@ 0xe0
 800ed32:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ed36:	edc7 7a38 	vstr	s15, [r7, #224]	@ 0xe0

      SCALE_ROW_F32(pSrc,column,pivot,pivotRow);
 800ed3a:	687b      	ldr	r3, [r7, #4]
 800ed3c:	685b      	ldr	r3, [r3, #4]
 800ed3e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800ed42:	687b      	ldr	r3, [r7, #4]
 800ed44:	885b      	ldrh	r3, [r3, #2]
 800ed46:	637b      	str	r3, [r7, #52]	@ 0x34
 800ed48:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ed4a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800ed4e:	1ad3      	subs	r3, r2, r3
 800ed50:	633b      	str	r3, [r7, #48]	@ 0x30
 800ed52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ed54:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800ed56:	fb03 f202 	mul.w	r2, r3, r2
 800ed5a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800ed5e:	4413      	add	r3, r2
 800ed60:	009b      	lsls	r3, r3, #2
 800ed62:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 800ed66:	4413      	add	r3, r2
 800ed68:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800ed6c:	2300      	movs	r3, #0
 800ed6e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800ed72:	e011      	b.n	800ed98 <arm_mat_inverse_f32+0x33e>
 800ed74:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800ed78:	1d1a      	adds	r2, r3, #4
 800ed7a:	f8c7 20a0 	str.w	r2, [r7, #160]	@ 0xa0
 800ed7e:	ed93 7a00 	vldr	s14, [r3]
 800ed82:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800ed86:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ed8a:	edc3 7a00 	vstr	s15, [r3]
 800ed8e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800ed92:	3301      	adds	r3, #1
 800ed94:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800ed98:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 800ed9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ed9e:	429a      	cmp	r2, r3
 800eda0:	dbe8      	blt.n	800ed74 <arm_mat_inverse_f32+0x31a>
      SCALE_ROW_F32(pDst,0,pivot,pivotRow);
 800eda2:	683b      	ldr	r3, [r7, #0]
 800eda4:	685b      	ldr	r3, [r3, #4]
 800eda6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800edaa:	683b      	ldr	r3, [r7, #0]
 800edac:	885b      	ldrh	r3, [r3, #2]
 800edae:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800edb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800edb2:	62bb      	str	r3, [r7, #40]	@ 0x28
 800edb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800edb6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800edb8:	fb02 f303 	mul.w	r3, r2, r3
 800edbc:	009b      	lsls	r3, r3, #2
 800edbe:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800edc2:	4413      	add	r3, r2
 800edc4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800edc8:	2300      	movs	r3, #0
 800edca:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800edce:	e011      	b.n	800edf4 <arm_mat_inverse_f32+0x39a>
 800edd0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800edd4:	1d1a      	adds	r2, r3, #4
 800edd6:	f8c7 2098 	str.w	r2, [r7, #152]	@ 0x98
 800edda:	ed93 7a00 	vldr	s14, [r3]
 800edde:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800ede2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ede6:	edc3 7a00 	vstr	s15, [r3]
 800edea:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800edee:	3301      	adds	r3, #1
 800edf0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800edf4:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 800edf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800edfa:	429a      	cmp	r2, r3
 800edfc:	dbe8      	blt.n	800edd0 <arm_mat_inverse_f32+0x376>

      
      /* Replace the rows with the sum of that row and a multiple of row i
       * so that each new element in column i above row i is zero.*/

      rowNb = 0;
 800edfe:	2300      	movs	r3, #0
 800ee00:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      for (;rowNb < pivotRow; rowNb++)
 800ee04:	e0ae      	b.n	800ef64 <arm_mat_inverse_f32+0x50a>
      {
           pTmp = ELEM(pSrc,rowNb,column) ;
 800ee06:	687b      	ldr	r3, [r7, #4]
 800ee08:	685a      	ldr	r2, [r3, #4]
 800ee0a:	687b      	ldr	r3, [r7, #4]
 800ee0c:	885b      	ldrh	r3, [r3, #2]
 800ee0e:	4619      	mov	r1, r3
 800ee10:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800ee14:	fb03 f101 	mul.w	r1, r3, r1
 800ee18:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800ee1c:	440b      	add	r3, r1
 800ee1e:	009b      	lsls	r3, r3, #2
 800ee20:	4413      	add	r3, r2
 800ee22:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
           pivot = *pTmp;
 800ee26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ee2a:	681b      	ldr	r3, [r3, #0]
 800ee2c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0

           MAS_ROW_F32(column,pSrc,rowNb,pivot,pSrc,pivotRow);
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	685b      	ldr	r3, [r3, #4]
 800ee34:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	685b      	ldr	r3, [r3, #4]
 800ee3c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	885b      	ldrh	r3, [r3, #2]
 800ee44:	617b      	str	r3, [r7, #20]
 800ee46:	697a      	ldr	r2, [r7, #20]
 800ee48:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800ee4c:	1ad3      	subs	r3, r2, r3
 800ee4e:	613b      	str	r3, [r7, #16]
 800ee50:	697b      	ldr	r3, [r7, #20]
 800ee52:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800ee56:	fb03 f202 	mul.w	r2, r3, r2
 800ee5a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800ee5e:	4413      	add	r3, r2
 800ee60:	009b      	lsls	r3, r3, #2
 800ee62:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 800ee66:	4413      	add	r3, r2
 800ee68:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800ee6c:	697b      	ldr	r3, [r7, #20]
 800ee6e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800ee70:	fb03 f202 	mul.w	r2, r3, r2
 800ee74:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800ee78:	4413      	add	r3, r2
 800ee7a:	009b      	lsls	r3, r3, #2
 800ee7c:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 800ee80:	4413      	add	r3, r2
 800ee82:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800ee86:	2300      	movs	r3, #0
 800ee88:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800ee8c:	e01a      	b.n	800eec4 <arm_mat_inverse_f32+0x46a>
 800ee8e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800ee92:	1d1a      	adds	r2, r3, #4
 800ee94:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800ee98:	ed93 7a00 	vldr	s14, [r3]
 800ee9c:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800eea0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800eea4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800eea8:	1d1a      	adds	r2, r3, #4
 800eeaa:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 800eeae:	ed93 7a00 	vldr	s14, [r3]
 800eeb2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800eeb6:	edc3 7a00 	vstr	s15, [r3]
 800eeba:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800eebe:	3301      	adds	r3, #1
 800eec0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800eec4:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800eec8:	693b      	ldr	r3, [r7, #16]
 800eeca:	429a      	cmp	r2, r3
 800eecc:	dbdf      	blt.n	800ee8e <arm_mat_inverse_f32+0x434>
           MAS_ROW_F32(0     ,pDst,rowNb,pivot,pDst,pivotRow);
 800eece:	683b      	ldr	r3, [r7, #0]
 800eed0:	685b      	ldr	r3, [r3, #4]
 800eed2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800eed6:	683b      	ldr	r3, [r7, #0]
 800eed8:	685b      	ldr	r3, [r3, #4]
 800eeda:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800eede:	683b      	ldr	r3, [r7, #0]
 800eee0:	885b      	ldrh	r3, [r3, #2]
 800eee2:	60fb      	str	r3, [r7, #12]
 800eee4:	68fb      	ldr	r3, [r7, #12]
 800eee6:	60bb      	str	r3, [r7, #8]
 800eee8:	68fb      	ldr	r3, [r7, #12]
 800eeea:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800eeee:	fb02 f303 	mul.w	r3, r2, r3
 800eef2:	009b      	lsls	r3, r3, #2
 800eef4:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800eef8:	4413      	add	r3, r2
 800eefa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800eefe:	68fb      	ldr	r3, [r7, #12]
 800ef00:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800ef02:	fb02 f303 	mul.w	r3, r2, r3
 800ef06:	009b      	lsls	r3, r3, #2
 800ef08:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800ef0c:	4413      	add	r3, r2
 800ef0e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800ef12:	2300      	movs	r3, #0
 800ef14:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800ef18:	e01a      	b.n	800ef50 <arm_mat_inverse_f32+0x4f6>
 800ef1a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800ef1e:	1d1a      	adds	r2, r3, #4
 800ef20:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800ef24:	ed93 7a00 	vldr	s14, [r3]
 800ef28:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800ef2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ef30:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800ef34:	1d1a      	adds	r2, r3, #4
 800ef36:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 800ef3a:	ed93 7a00 	vldr	s14, [r3]
 800ef3e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ef42:	edc3 7a00 	vstr	s15, [r3]
 800ef46:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800ef4a:	3301      	adds	r3, #1
 800ef4c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800ef50:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800ef54:	68bb      	ldr	r3, [r7, #8]
 800ef56:	429a      	cmp	r2, r3
 800ef58:	dbdf      	blt.n	800ef1a <arm_mat_inverse_f32+0x4c0>
      for (;rowNb < pivotRow; rowNb++)
 800ef5a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800ef5e:	3301      	adds	r3, #1
 800ef60:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800ef64:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800ef68:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ef6a:	429a      	cmp	r2, r3
 800ef6c:	f4ff af4b 	bcc.w	800ee06 <arm_mat_inverse_f32+0x3ac>


      }

      for (rowNb = pivotRow + 1; rowNb < numRows; rowNb++)
 800ef70:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ef72:	3301      	adds	r3, #1
 800ef74:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800ef78:	e092      	b.n	800f0a0 <arm_mat_inverse_f32+0x646>
      {
           pTmp = ELEM(pSrc,rowNb,column) ;
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	685a      	ldr	r2, [r3, #4]
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	885b      	ldrh	r3, [r3, #2]
 800ef82:	4619      	mov	r1, r3
 800ef84:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800ef88:	fb03 f101 	mul.w	r1, r3, r1
 800ef8c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800ef90:	440b      	add	r3, r1
 800ef92:	009b      	lsls	r3, r3, #2
 800ef94:	4413      	add	r3, r2
 800ef96:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
           pivot = *pTmp;
 800ef9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ef9e:	681b      	ldr	r3, [r3, #0]
 800efa0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0

           MAS_ROW_F32(column,pSrc,rowNb,pivot,pSrc,pivotRow);
 800efa4:	687b      	ldr	r3, [r7, #4]
 800efa6:	685b      	ldr	r3, [r3, #4]
 800efa8:	67bb      	str	r3, [r7, #120]	@ 0x78
 800efaa:	687b      	ldr	r3, [r7, #4]
 800efac:	685b      	ldr	r3, [r3, #4]
 800efae:	677b      	str	r3, [r7, #116]	@ 0x74
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	885b      	ldrh	r3, [r3, #2]
 800efb4:	627b      	str	r3, [r7, #36]	@ 0x24
 800efb6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800efb8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800efbc:	1ad3      	subs	r3, r2, r3
 800efbe:	623b      	str	r3, [r7, #32]
 800efc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800efc2:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800efc6:	fb03 f202 	mul.w	r2, r3, r2
 800efca:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800efce:	4413      	add	r3, r2
 800efd0:	009b      	lsls	r3, r3, #2
 800efd2:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800efd4:	4413      	add	r3, r2
 800efd6:	67bb      	str	r3, [r7, #120]	@ 0x78
 800efd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800efda:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800efdc:	fb03 f202 	mul.w	r2, r3, r2
 800efe0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800efe4:	4413      	add	r3, r2
 800efe6:	009b      	lsls	r3, r3, #2
 800efe8:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800efea:	4413      	add	r3, r2
 800efec:	677b      	str	r3, [r7, #116]	@ 0x74
 800efee:	2300      	movs	r3, #0
 800eff0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800eff2:	e014      	b.n	800f01e <arm_mat_inverse_f32+0x5c4>
 800eff4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800eff6:	1d1a      	adds	r2, r3, #4
 800eff8:	677a      	str	r2, [r7, #116]	@ 0x74
 800effa:	ed93 7a00 	vldr	s14, [r3]
 800effe:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800f002:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f006:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800f008:	1d1a      	adds	r2, r3, #4
 800f00a:	67ba      	str	r2, [r7, #120]	@ 0x78
 800f00c:	ed93 7a00 	vldr	s14, [r3]
 800f010:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f014:	edc3 7a00 	vstr	s15, [r3]
 800f018:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800f01a:	3301      	adds	r3, #1
 800f01c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800f01e:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800f020:	6a3b      	ldr	r3, [r7, #32]
 800f022:	429a      	cmp	r2, r3
 800f024:	dbe6      	blt.n	800eff4 <arm_mat_inverse_f32+0x59a>
           MAS_ROW_F32(0     ,pDst,rowNb,pivot,pDst,pivotRow);
 800f026:	683b      	ldr	r3, [r7, #0]
 800f028:	685b      	ldr	r3, [r3, #4]
 800f02a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800f02c:	683b      	ldr	r3, [r7, #0]
 800f02e:	685b      	ldr	r3, [r3, #4]
 800f030:	66bb      	str	r3, [r7, #104]	@ 0x68
 800f032:	683b      	ldr	r3, [r7, #0]
 800f034:	885b      	ldrh	r3, [r3, #2]
 800f036:	61fb      	str	r3, [r7, #28]
 800f038:	69fb      	ldr	r3, [r7, #28]
 800f03a:	61bb      	str	r3, [r7, #24]
 800f03c:	69fb      	ldr	r3, [r7, #28]
 800f03e:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800f042:	fb02 f303 	mul.w	r3, r2, r3
 800f046:	009b      	lsls	r3, r3, #2
 800f048:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800f04a:	4413      	add	r3, r2
 800f04c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800f04e:	69fb      	ldr	r3, [r7, #28]
 800f050:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800f052:	fb02 f303 	mul.w	r3, r2, r3
 800f056:	009b      	lsls	r3, r3, #2
 800f058:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800f05a:	4413      	add	r3, r2
 800f05c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800f05e:	2300      	movs	r3, #0
 800f060:	673b      	str	r3, [r7, #112]	@ 0x70
 800f062:	e014      	b.n	800f08e <arm_mat_inverse_f32+0x634>
 800f064:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800f066:	1d1a      	adds	r2, r3, #4
 800f068:	66ba      	str	r2, [r7, #104]	@ 0x68
 800f06a:	ed93 7a00 	vldr	s14, [r3]
 800f06e:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800f072:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f076:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f078:	1d1a      	adds	r2, r3, #4
 800f07a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800f07c:	ed93 7a00 	vldr	s14, [r3]
 800f080:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f084:	edc3 7a00 	vstr	s15, [r3]
 800f088:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800f08a:	3301      	adds	r3, #1
 800f08c:	673b      	str	r3, [r7, #112]	@ 0x70
 800f08e:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800f090:	69bb      	ldr	r3, [r7, #24]
 800f092:	429a      	cmp	r2, r3
 800f094:	dbe6      	blt.n	800f064 <arm_mat_inverse_f32+0x60a>
      for (rowNb = pivotRow + 1; rowNb < numRows; rowNb++)
 800f096:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800f09a:	3301      	adds	r3, #1
 800f09c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800f0a0:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800f0a4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f0a6:	429a      	cmp	r2, r3
 800f0a8:	f4ff af67 	bcc.w	800ef7a <arm_mat_inverse_f32+0x520>
    for(column = 0U; column < numCols; column++)
 800f0ac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800f0b0:	3301      	adds	r3, #1
 800f0b2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800f0b6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800f0ba:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800f0bc:	429a      	cmp	r2, r3
 800f0be:	f4ff ad32 	bcc.w	800eb26 <arm_mat_inverse_f32+0xcc>
      }

    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800f0c2:	2300      	movs	r3, #0
 800f0c4:	f887 30c3 	strb.w	r3, [r7, #195]	@ 0xc3

    if ((flag != 1U) && (pivot == 0.0f))
 800f0c8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800f0cc:	2b01      	cmp	r3, #1
 800f0ce:	d033      	beq.n	800f138 <arm_mat_inverse_f32+0x6de>
 800f0d0:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800f0d4:	eef5 7a40 	vcmp.f32	s15, #0.0
 800f0d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f0dc:	d12c      	bne.n	800f138 <arm_mat_inverse_f32+0x6de>
    {
      pIn = pSrc->pData;
 800f0de:	687b      	ldr	r3, [r7, #4]
 800f0e0:	685b      	ldr	r3, [r3, #4]
 800f0e2:	667b      	str	r3, [r7, #100]	@ 0x64
      for (i = 0; i < numRows * numCols; i++)
 800f0e4:	2300      	movs	r3, #0
 800f0e6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800f0ea:	e010      	b.n	800f10e <arm_mat_inverse_f32+0x6b4>
      {
        if (pIn[i] != 0.0f)
 800f0ec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800f0f0:	009b      	lsls	r3, r3, #2
 800f0f2:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800f0f4:	4413      	add	r3, r2
 800f0f6:	edd3 7a00 	vldr	s15, [r3]
 800f0fa:	eef5 7a40 	vcmp.f32	s15, #0.0
 800f0fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f102:	d10d      	bne.n	800f120 <arm_mat_inverse_f32+0x6c6>
      for (i = 0; i < numRows * numCols; i++)
 800f104:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800f108:	3301      	adds	r3, #1
 800f10a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800f10e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f110:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800f112:	fb02 f303 	mul.w	r3, r2, r3
 800f116:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 800f11a:	429a      	cmp	r2, r3
 800f11c:	d3e6      	bcc.n	800f0ec <arm_mat_inverse_f32+0x692>
 800f11e:	e000      	b.n	800f122 <arm_mat_inverse_f32+0x6c8>
            break;
 800f120:	bf00      	nop
      }

      if (i == numRows * numCols)
 800f122:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f124:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800f126:	fb02 f303 	mul.w	r3, r2, r3
 800f12a:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 800f12e:	429a      	cmp	r2, r3
 800f130:	d102      	bne.n	800f138 <arm_mat_inverse_f32+0x6de>
        status = ARM_MATH_SINGULAR;
 800f132:	23fb      	movs	r3, #251	@ 0xfb
 800f134:	f887 30c3 	strb.w	r3, [r7, #195]	@ 0xc3
    }
  }

  /* Return to application */
  return (status);
 800f138:	f997 30c3 	ldrsb.w	r3, [r7, #195]	@ 0xc3
}
 800f13c:	4618      	mov	r0, r3
 800f13e:	37ec      	adds	r7, #236	@ 0xec
 800f140:	46bd      	mov	sp, r7
 800f142:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f146:	4770      	bx	lr

0800f148 <arm_mat_mult_f32>:
 */
arm_status arm_mat_mult_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 800f148:	b480      	push	{r7}
 800f14a:	b093      	sub	sp, #76	@ 0x4c
 800f14c:	af00      	add	r7, sp, #0
 800f14e:	60f8      	str	r0, [r7, #12]
 800f150:	60b9      	str	r1, [r7, #8]
 800f152:	607a      	str	r2, [r7, #4]
  float32_t *pIn1 = pSrcA->pData;                /* Input data matrix pointer A */
 800f154:	68fb      	ldr	r3, [r7, #12]
 800f156:	685b      	ldr	r3, [r3, #4]
 800f158:	647b      	str	r3, [r7, #68]	@ 0x44
  float32_t *pIn2 = pSrcB->pData;                /* Input data matrix pointer B */
 800f15a:	68bb      	ldr	r3, [r7, #8]
 800f15c:	685b      	ldr	r3, [r3, #4]
 800f15e:	643b      	str	r3, [r7, #64]	@ 0x40
  float32_t *pInA = pSrcA->pData;                /* Input data matrix pointer A */
 800f160:	68fb      	ldr	r3, [r7, #12]
 800f162:	685b      	ldr	r3, [r3, #4]
 800f164:	63fb      	str	r3, [r7, #60]	@ 0x3c
  float32_t *pInB = pSrcB->pData;                /* Input data matrix pointer B */
 800f166:	68bb      	ldr	r3, [r7, #8]
 800f168:	685b      	ldr	r3, [r3, #4]
 800f16a:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* Output data matrix pointer */
 800f16c:	687b      	ldr	r3, [r7, #4]
 800f16e:	685b      	ldr	r3, [r3, #4]
 800f170:	61fb      	str	r3, [r7, #28]
  float32_t *px;                                 /* Temporary output data matrix pointer */
  float32_t sum;                                 /* Accumulator */
  uint16_t numRowsA = pSrcA->numRows;            /* Number of rows of input matrix A */
 800f172:	68fb      	ldr	r3, [r7, #12]
 800f174:	881b      	ldrh	r3, [r3, #0]
 800f176:	837b      	strh	r3, [r7, #26]
  uint16_t numColsB = pSrcB->numCols;            /* Number of columns of input matrix B */
 800f178:	68bb      	ldr	r3, [r7, #8]
 800f17a:	885b      	ldrh	r3, [r3, #2]
 800f17c:	833b      	strh	r3, [r7, #24]
  uint16_t numColsA = pSrcA->numCols;            /* Number of columns of input matrix A */
 800f17e:	68fb      	ldr	r3, [r7, #12]
 800f180:	885b      	ldrh	r3, [r3, #2]
 800f182:	82fb      	strh	r3, [r7, #22]
  uint32_t col, i = 0U, row = numRowsA, colCnt;  /* Loop counters */
 800f184:	2300      	movs	r3, #0
 800f186:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800f188:	8b7b      	ldrh	r3, [r7, #26]
 800f18a:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* The following loop performs the dot-product of each row in pSrcA with each column in pSrcB */
    /* row loop */
    do
    {
      /* Output pointer is set to starting address of row being processed */
      px = pOut + i;
 800f18c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f18e:	009b      	lsls	r3, r3, #2
 800f190:	69fa      	ldr	r2, [r7, #28]
 800f192:	4413      	add	r3, r2
 800f194:	63bb      	str	r3, [r7, #56]	@ 0x38

      /* For every row wise process, column loop counter is to be initiated */
      col = numColsB;
 800f196:	8b3b      	ldrh	r3, [r7, #24]
 800f198:	633b      	str	r3, [r7, #48]	@ 0x30

      /* For every row wise process, pIn2 pointer is set to starting address of pSrcB data */
      pIn2 = pSrcB->pData;
 800f19a:	68bb      	ldr	r3, [r7, #8]
 800f19c:	685b      	ldr	r3, [r3, #4]
 800f19e:	643b      	str	r3, [r7, #64]	@ 0x40

      /* column loop */
      do
      {
        /* Set the variable sum, that acts as accumulator, to zero */
        sum = 0.0f;
 800f1a0:	f04f 0300 	mov.w	r3, #0
 800f1a4:	637b      	str	r3, [r7, #52]	@ 0x34

        /* Initialize pointer pIn1 to point to starting address of column being processed */
        pIn1 = pInA;
 800f1a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f1a8:	647b      	str	r3, [r7, #68]	@ 0x44
        colCnt = numColsA % 0x4U;

#else

        /* Initialize cntCnt with number of columns */
        colCnt = numColsA;
 800f1aa:	8afb      	ldrh	r3, [r7, #22]
 800f1ac:	627b      	str	r3, [r7, #36]	@ 0x24

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

        while (colCnt > 0U)
 800f1ae:	e017      	b.n	800f1e0 <arm_mat_mult_f32+0x98>
        {
          /* c(m,p) = a(m,1) * b(1,p) + a(m,2) * b(2,p) + .... + a(m,n) * b(n,p) */

          /* Perform the multiply-accumulates */
          sum += *pIn1++ * *pIn2;
 800f1b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f1b2:	1d1a      	adds	r2, r3, #4
 800f1b4:	647a      	str	r2, [r7, #68]	@ 0x44
 800f1b6:	ed93 7a00 	vldr	s14, [r3]
 800f1ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f1bc:	edd3 7a00 	vldr	s15, [r3]
 800f1c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f1c4:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 800f1c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f1cc:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
          pIn2 += numColsB;
 800f1d0:	8b3b      	ldrh	r3, [r7, #24]
 800f1d2:	009b      	lsls	r3, r3, #2
 800f1d4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800f1d6:	4413      	add	r3, r2
 800f1d8:	643b      	str	r3, [r7, #64]	@ 0x40

          /* Decrement loop counter */
          colCnt--;
 800f1da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f1dc:	3b01      	subs	r3, #1
 800f1de:	627b      	str	r3, [r7, #36]	@ 0x24
        while (colCnt > 0U)
 800f1e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f1e2:	2b00      	cmp	r3, #0
 800f1e4:	d1e4      	bne.n	800f1b0 <arm_mat_mult_f32+0x68>
        }

        /* Store result in destination buffer */
        *px++ = sum;
 800f1e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f1e8:	1d1a      	adds	r2, r3, #4
 800f1ea:	63ba      	str	r2, [r7, #56]	@ 0x38
 800f1ec:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f1ee:	601a      	str	r2, [r3, #0]

        /* Decrement column loop counter */
        col--;
 800f1f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f1f2:	3b01      	subs	r3, #1
 800f1f4:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Update pointer pIn2 to point to starting address of next column */
        pIn2 = pInB + (numColsB - col);
 800f1f6:	8b3a      	ldrh	r2, [r7, #24]
 800f1f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f1fa:	1ad3      	subs	r3, r2, r3
 800f1fc:	009b      	lsls	r3, r3, #2
 800f1fe:	6a3a      	ldr	r2, [r7, #32]
 800f200:	4413      	add	r3, r2
 800f202:	643b      	str	r3, [r7, #64]	@ 0x40

      } while (col > 0U);
 800f204:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f206:	2b00      	cmp	r3, #0
 800f208:	d1ca      	bne.n	800f1a0 <arm_mat_mult_f32+0x58>

      /* Update pointer pInA to point to starting address of next row */
      i = i + numColsB;
 800f20a:	8b3b      	ldrh	r3, [r7, #24]
 800f20c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f20e:	4413      	add	r3, r2
 800f210:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pInA = pInA + numColsA;
 800f212:	8afb      	ldrh	r3, [r7, #22]
 800f214:	009b      	lsls	r3, r3, #2
 800f216:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800f218:	4413      	add	r3, r2
 800f21a:	63fb      	str	r3, [r7, #60]	@ 0x3c

      /* Decrement row loop counter */
      row--;
 800f21c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f21e:	3b01      	subs	r3, #1
 800f220:	62bb      	str	r3, [r7, #40]	@ 0x28

    } while (row > 0U);
 800f222:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f224:	2b00      	cmp	r3, #0
 800f226:	d1b1      	bne.n	800f18c <arm_mat_mult_f32+0x44>

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800f228:	2300      	movs	r3, #0
 800f22a:	757b      	strb	r3, [r7, #21]
  }

  /* Return to application */
  return (status);
 800f22c:	f997 3015 	ldrsb.w	r3, [r7, #21]
}
 800f230:	4618      	mov	r0, r3
 800f232:	374c      	adds	r7, #76	@ 0x4c
 800f234:	46bd      	mov	sp, r7
 800f236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f23a:	4770      	bx	lr

0800f23c <arm_mat_sub_f32>:
#else
arm_status arm_mat_sub_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 800f23c:	b480      	push	{r7}
 800f23e:	b08b      	sub	sp, #44	@ 0x2c
 800f240:	af00      	add	r7, sp, #0
 800f242:	60f8      	str	r0, [r7, #12]
 800f244:	60b9      	str	r1, [r7, #8]
 800f246:	607a      	str	r2, [r7, #4]
  float32_t *pInA = pSrcA->pData;                /* input data matrix pointer A */
 800f248:	68fb      	ldr	r3, [r7, #12]
 800f24a:	685b      	ldr	r3, [r3, #4]
 800f24c:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pInB = pSrcB->pData;                /* input data matrix pointer B */
 800f24e:	68bb      	ldr	r3, [r7, #8]
 800f250:	685b      	ldr	r3, [r3, #4]
 800f252:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	685b      	ldr	r3, [r3, #4]
 800f258:	61fb      	str	r3, [r7, #28]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrcA->numRows * pSrcA->numCols;
 800f25a:	68fb      	ldr	r3, [r7, #12]
 800f25c:	881b      	ldrh	r3, [r3, #0]
 800f25e:	461a      	mov	r2, r3
 800f260:	68fb      	ldr	r3, [r7, #12]
 800f262:	885b      	ldrh	r3, [r3, #2]
 800f264:	fb02 f303 	mul.w	r3, r2, r3
 800f268:	617b      	str	r3, [r7, #20]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 800f26a:	697b      	ldr	r3, [r7, #20]
 800f26c:	61bb      	str	r3, [r7, #24]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 800f26e:	e013      	b.n	800f298 <arm_mat_sub_f32+0x5c>
    {
      /* C(m,n) = A(m,n) - B(m,n) */

      /* Subtract and store result in destination buffer. */
      *pOut++ = (*pInA++) - (*pInB++);
 800f270:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f272:	1d1a      	adds	r2, r3, #4
 800f274:	627a      	str	r2, [r7, #36]	@ 0x24
 800f276:	ed93 7a00 	vldr	s14, [r3]
 800f27a:	6a3b      	ldr	r3, [r7, #32]
 800f27c:	1d1a      	adds	r2, r3, #4
 800f27e:	623a      	str	r2, [r7, #32]
 800f280:	edd3 7a00 	vldr	s15, [r3]
 800f284:	69fb      	ldr	r3, [r7, #28]
 800f286:	1d1a      	adds	r2, r3, #4
 800f288:	61fa      	str	r2, [r7, #28]
 800f28a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f28e:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 800f292:	69bb      	ldr	r3, [r7, #24]
 800f294:	3b01      	subs	r3, #1
 800f296:	61bb      	str	r3, [r7, #24]
    while (blkCnt > 0U)
 800f298:	69bb      	ldr	r3, [r7, #24]
 800f29a:	2b00      	cmp	r3, #0
 800f29c:	d1e8      	bne.n	800f270 <arm_mat_sub_f32+0x34>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800f29e:	2300      	movs	r3, #0
 800f2a0:	74fb      	strb	r3, [r7, #19]
  }

  /* Return to application */
  return (status);
 800f2a2:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800f2a6:	4618      	mov	r0, r3
 800f2a8:	372c      	adds	r7, #44	@ 0x2c
 800f2aa:	46bd      	mov	sp, r7
 800f2ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2b0:	4770      	bx	lr

0800f2b2 <arm_mat_trans_f32>:
}
#else
arm_status arm_mat_trans_f32(
  const arm_matrix_instance_f32 * pSrc,
        arm_matrix_instance_f32 * pDst)
{
 800f2b2:	b480      	push	{r7}
 800f2b4:	b08b      	sub	sp, #44	@ 0x2c
 800f2b6:	af00      	add	r7, sp, #0
 800f2b8:	6078      	str	r0, [r7, #4]
 800f2ba:	6039      	str	r1, [r7, #0]
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
 800f2bc:	687b      	ldr	r3, [r7, #4]
 800f2be:	685b      	ldr	r3, [r3, #4]
 800f2c0:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 800f2c2:	683b      	ldr	r3, [r7, #0]
 800f2c4:	685b      	ldr	r3, [r3, #4]
 800f2c6:	613b      	str	r3, [r7, #16]
  float32_t *px;                                 /* Temporary output data matrix pointer */
  uint16_t nRows = pSrc->numRows;                /* number of rows */
 800f2c8:	687b      	ldr	r3, [r7, #4]
 800f2ca:	881b      	ldrh	r3, [r3, #0]
 800f2cc:	81fb      	strh	r3, [r7, #14]
  uint16_t nCols = pSrc->numCols;                /* number of columns */
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	885b      	ldrh	r3, [r3, #2]
 800f2d2:	81bb      	strh	r3, [r7, #12]
  uint32_t col, row = nRows, i = 0U;             /* Loop counters */
 800f2d4:	89fb      	ldrh	r3, [r7, #14]
 800f2d6:	61bb      	str	r3, [r7, #24]
 800f2d8:	2300      	movs	r3, #0
 800f2da:	617b      	str	r3, [r7, #20]
    /* Matrix transpose by exchanging the rows with columns */
    /* row loop */
    do
    {
      /* Pointer px is set to starting address of column being processed */
      px = pOut + i;
 800f2dc:	697b      	ldr	r3, [r7, #20]
 800f2de:	009b      	lsls	r3, r3, #2
 800f2e0:	693a      	ldr	r2, [r7, #16]
 800f2e2:	4413      	add	r3, r2
 800f2e4:	623b      	str	r3, [r7, #32]
      col = nCols % 0x4U;

#else

      /* Initialize col with number of samples */
      col = nCols;
 800f2e6:	89bb      	ldrh	r3, [r7, #12]
 800f2e8:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

      while (col > 0U)
 800f2ea:	e00d      	b.n	800f308 <arm_mat_trans_f32+0x56>
      {
        /* Read and store input element in destination */
        *px = *pIn++;
 800f2ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f2ee:	1d1a      	adds	r2, r3, #4
 800f2f0:	627a      	str	r2, [r7, #36]	@ 0x24
 800f2f2:	681a      	ldr	r2, [r3, #0]
 800f2f4:	6a3b      	ldr	r3, [r7, #32]
 800f2f6:	601a      	str	r2, [r3, #0]

        /* Update pointer px to point to next row of transposed matrix */
        px += nRows;
 800f2f8:	89fb      	ldrh	r3, [r7, #14]
 800f2fa:	009b      	lsls	r3, r3, #2
 800f2fc:	6a3a      	ldr	r2, [r7, #32]
 800f2fe:	4413      	add	r3, r2
 800f300:	623b      	str	r3, [r7, #32]

        /* Decrement column loop counter */
        col--;
 800f302:	69fb      	ldr	r3, [r7, #28]
 800f304:	3b01      	subs	r3, #1
 800f306:	61fb      	str	r3, [r7, #28]
      while (col > 0U)
 800f308:	69fb      	ldr	r3, [r7, #28]
 800f30a:	2b00      	cmp	r3, #0
 800f30c:	d1ee      	bne.n	800f2ec <arm_mat_trans_f32+0x3a>
      }

      i++;
 800f30e:	697b      	ldr	r3, [r7, #20]
 800f310:	3301      	adds	r3, #1
 800f312:	617b      	str	r3, [r7, #20]

      /* Decrement row loop counter */
      row--;
 800f314:	69bb      	ldr	r3, [r7, #24]
 800f316:	3b01      	subs	r3, #1
 800f318:	61bb      	str	r3, [r7, #24]

    } while (row > 0U);          /* row loop end */
 800f31a:	69bb      	ldr	r3, [r7, #24]
 800f31c:	2b00      	cmp	r3, #0
 800f31e:	d1dd      	bne.n	800f2dc <arm_mat_trans_f32+0x2a>

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800f320:	2300      	movs	r3, #0
 800f322:	72fb      	strb	r3, [r7, #11]
  }

  /* Return to application */
  return (status);
 800f324:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800f328:	4618      	mov	r0, r3
 800f32a:	372c      	adds	r7, #44	@ 0x2c
 800f32c:	46bd      	mov	sp, r7
 800f32e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f332:	4770      	bx	lr

0800f334 <memset>:
 800f334:	4402      	add	r2, r0
 800f336:	4603      	mov	r3, r0
 800f338:	4293      	cmp	r3, r2
 800f33a:	d100      	bne.n	800f33e <memset+0xa>
 800f33c:	4770      	bx	lr
 800f33e:	f803 1b01 	strb.w	r1, [r3], #1
 800f342:	e7f9      	b.n	800f338 <memset+0x4>

0800f344 <__errno>:
 800f344:	4b01      	ldr	r3, [pc, #4]	@ (800f34c <__errno+0x8>)
 800f346:	6818      	ldr	r0, [r3, #0]
 800f348:	4770      	bx	lr
 800f34a:	bf00      	nop
 800f34c:	20000270 	.word	0x20000270

0800f350 <__libc_init_array>:
 800f350:	b570      	push	{r4, r5, r6, lr}
 800f352:	4d0d      	ldr	r5, [pc, #52]	@ (800f388 <__libc_init_array+0x38>)
 800f354:	4c0d      	ldr	r4, [pc, #52]	@ (800f38c <__libc_init_array+0x3c>)
 800f356:	1b64      	subs	r4, r4, r5
 800f358:	10a4      	asrs	r4, r4, #2
 800f35a:	2600      	movs	r6, #0
 800f35c:	42a6      	cmp	r6, r4
 800f35e:	d109      	bne.n	800f374 <__libc_init_array+0x24>
 800f360:	4d0b      	ldr	r5, [pc, #44]	@ (800f390 <__libc_init_array+0x40>)
 800f362:	4c0c      	ldr	r4, [pc, #48]	@ (800f394 <__libc_init_array+0x44>)
 800f364:	f001 ffe2 	bl	801132c <_init>
 800f368:	1b64      	subs	r4, r4, r5
 800f36a:	10a4      	asrs	r4, r4, #2
 800f36c:	2600      	movs	r6, #0
 800f36e:	42a6      	cmp	r6, r4
 800f370:	d105      	bne.n	800f37e <__libc_init_array+0x2e>
 800f372:	bd70      	pop	{r4, r5, r6, pc}
 800f374:	f855 3b04 	ldr.w	r3, [r5], #4
 800f378:	4798      	blx	r3
 800f37a:	3601      	adds	r6, #1
 800f37c:	e7ee      	b.n	800f35c <__libc_init_array+0xc>
 800f37e:	f855 3b04 	ldr.w	r3, [r5], #4
 800f382:	4798      	blx	r3
 800f384:	3601      	adds	r6, #1
 800f386:	e7f2      	b.n	800f36e <__libc_init_array+0x1e>
 800f388:	080117a8 	.word	0x080117a8
 800f38c:	080117a8 	.word	0x080117a8
 800f390:	080117a8 	.word	0x080117a8
 800f394:	080117ac 	.word	0x080117ac

0800f398 <memcpy>:
 800f398:	440a      	add	r2, r1
 800f39a:	4291      	cmp	r1, r2
 800f39c:	f100 33ff 	add.w	r3, r0, #4294967295
 800f3a0:	d100      	bne.n	800f3a4 <memcpy+0xc>
 800f3a2:	4770      	bx	lr
 800f3a4:	b510      	push	{r4, lr}
 800f3a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f3aa:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f3ae:	4291      	cmp	r1, r2
 800f3b0:	d1f9      	bne.n	800f3a6 <memcpy+0xe>
 800f3b2:	bd10      	pop	{r4, pc}

0800f3b4 <acos>:
 800f3b4:	b538      	push	{r3, r4, r5, lr}
 800f3b6:	ed2d 8b02 	vpush	{d8}
 800f3ba:	ec55 4b10 	vmov	r4, r5, d0
 800f3be:	f000 fa6b 	bl	800f898 <__ieee754_acos>
 800f3c2:	4622      	mov	r2, r4
 800f3c4:	462b      	mov	r3, r5
 800f3c6:	4620      	mov	r0, r4
 800f3c8:	4629      	mov	r1, r5
 800f3ca:	eeb0 8a40 	vmov.f32	s16, s0
 800f3ce:	eef0 8a60 	vmov.f32	s17, s1
 800f3d2:	f7f1 fb77 	bl	8000ac4 <__aeabi_dcmpun>
 800f3d6:	b9a8      	cbnz	r0, 800f404 <acos+0x50>
 800f3d8:	ec45 4b10 	vmov	d0, r4, r5
 800f3dc:	f000 f8ba 	bl	800f554 <fabs>
 800f3e0:	4b0c      	ldr	r3, [pc, #48]	@ (800f414 <acos+0x60>)
 800f3e2:	ec51 0b10 	vmov	r0, r1, d0
 800f3e6:	2200      	movs	r2, #0
 800f3e8:	f7f1 fb62 	bl	8000ab0 <__aeabi_dcmpgt>
 800f3ec:	b150      	cbz	r0, 800f404 <acos+0x50>
 800f3ee:	f7ff ffa9 	bl	800f344 <__errno>
 800f3f2:	ecbd 8b02 	vpop	{d8}
 800f3f6:	2321      	movs	r3, #33	@ 0x21
 800f3f8:	6003      	str	r3, [r0, #0]
 800f3fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f3fe:	4806      	ldr	r0, [pc, #24]	@ (800f418 <acos+0x64>)
 800f400:	f000 b966 	b.w	800f6d0 <nan>
 800f404:	eeb0 0a48 	vmov.f32	s0, s16
 800f408:	eef0 0a68 	vmov.f32	s1, s17
 800f40c:	ecbd 8b02 	vpop	{d8}
 800f410:	bd38      	pop	{r3, r4, r5, pc}
 800f412:	bf00      	nop
 800f414:	3ff00000 	.word	0x3ff00000
 800f418:	08011388 	.word	0x08011388

0800f41c <pow>:
 800f41c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f41e:	ed2d 8b02 	vpush	{d8}
 800f422:	eeb0 8a40 	vmov.f32	s16, s0
 800f426:	eef0 8a60 	vmov.f32	s17, s1
 800f42a:	ec55 4b11 	vmov	r4, r5, d1
 800f42e:	f000 fc8f 	bl	800fd50 <__ieee754_pow>
 800f432:	4622      	mov	r2, r4
 800f434:	462b      	mov	r3, r5
 800f436:	4620      	mov	r0, r4
 800f438:	4629      	mov	r1, r5
 800f43a:	ec57 6b10 	vmov	r6, r7, d0
 800f43e:	f7f1 fb41 	bl	8000ac4 <__aeabi_dcmpun>
 800f442:	2800      	cmp	r0, #0
 800f444:	d13b      	bne.n	800f4be <pow+0xa2>
 800f446:	ec51 0b18 	vmov	r0, r1, d8
 800f44a:	2200      	movs	r2, #0
 800f44c:	2300      	movs	r3, #0
 800f44e:	f7f1 fb07 	bl	8000a60 <__aeabi_dcmpeq>
 800f452:	b1b8      	cbz	r0, 800f484 <pow+0x68>
 800f454:	2200      	movs	r2, #0
 800f456:	2300      	movs	r3, #0
 800f458:	4620      	mov	r0, r4
 800f45a:	4629      	mov	r1, r5
 800f45c:	f7f1 fb00 	bl	8000a60 <__aeabi_dcmpeq>
 800f460:	2800      	cmp	r0, #0
 800f462:	d146      	bne.n	800f4f2 <pow+0xd6>
 800f464:	ec45 4b10 	vmov	d0, r4, r5
 800f468:	f000 f924 	bl	800f6b4 <finite>
 800f46c:	b338      	cbz	r0, 800f4be <pow+0xa2>
 800f46e:	2200      	movs	r2, #0
 800f470:	2300      	movs	r3, #0
 800f472:	4620      	mov	r0, r4
 800f474:	4629      	mov	r1, r5
 800f476:	f7f1 fafd 	bl	8000a74 <__aeabi_dcmplt>
 800f47a:	b300      	cbz	r0, 800f4be <pow+0xa2>
 800f47c:	f7ff ff62 	bl	800f344 <__errno>
 800f480:	2322      	movs	r3, #34	@ 0x22
 800f482:	e01b      	b.n	800f4bc <pow+0xa0>
 800f484:	ec47 6b10 	vmov	d0, r6, r7
 800f488:	f000 f914 	bl	800f6b4 <finite>
 800f48c:	b9e0      	cbnz	r0, 800f4c8 <pow+0xac>
 800f48e:	eeb0 0a48 	vmov.f32	s0, s16
 800f492:	eef0 0a68 	vmov.f32	s1, s17
 800f496:	f000 f90d 	bl	800f6b4 <finite>
 800f49a:	b1a8      	cbz	r0, 800f4c8 <pow+0xac>
 800f49c:	ec45 4b10 	vmov	d0, r4, r5
 800f4a0:	f000 f908 	bl	800f6b4 <finite>
 800f4a4:	b180      	cbz	r0, 800f4c8 <pow+0xac>
 800f4a6:	4632      	mov	r2, r6
 800f4a8:	463b      	mov	r3, r7
 800f4aa:	4630      	mov	r0, r6
 800f4ac:	4639      	mov	r1, r7
 800f4ae:	f7f1 fb09 	bl	8000ac4 <__aeabi_dcmpun>
 800f4b2:	2800      	cmp	r0, #0
 800f4b4:	d0e2      	beq.n	800f47c <pow+0x60>
 800f4b6:	f7ff ff45 	bl	800f344 <__errno>
 800f4ba:	2321      	movs	r3, #33	@ 0x21
 800f4bc:	6003      	str	r3, [r0, #0]
 800f4be:	ecbd 8b02 	vpop	{d8}
 800f4c2:	ec47 6b10 	vmov	d0, r6, r7
 800f4c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f4c8:	2200      	movs	r2, #0
 800f4ca:	2300      	movs	r3, #0
 800f4cc:	4630      	mov	r0, r6
 800f4ce:	4639      	mov	r1, r7
 800f4d0:	f7f1 fac6 	bl	8000a60 <__aeabi_dcmpeq>
 800f4d4:	2800      	cmp	r0, #0
 800f4d6:	d0f2      	beq.n	800f4be <pow+0xa2>
 800f4d8:	eeb0 0a48 	vmov.f32	s0, s16
 800f4dc:	eef0 0a68 	vmov.f32	s1, s17
 800f4e0:	f000 f8e8 	bl	800f6b4 <finite>
 800f4e4:	2800      	cmp	r0, #0
 800f4e6:	d0ea      	beq.n	800f4be <pow+0xa2>
 800f4e8:	ec45 4b10 	vmov	d0, r4, r5
 800f4ec:	f000 f8e2 	bl	800f6b4 <finite>
 800f4f0:	e7c3      	b.n	800f47a <pow+0x5e>
 800f4f2:	4f01      	ldr	r7, [pc, #4]	@ (800f4f8 <pow+0xdc>)
 800f4f4:	2600      	movs	r6, #0
 800f4f6:	e7e2      	b.n	800f4be <pow+0xa2>
 800f4f8:	3ff00000 	.word	0x3ff00000

0800f4fc <sqrt>:
 800f4fc:	b538      	push	{r3, r4, r5, lr}
 800f4fe:	ed2d 8b02 	vpush	{d8}
 800f502:	ec55 4b10 	vmov	r4, r5, d0
 800f506:	f000 f8eb 	bl	800f6e0 <__ieee754_sqrt>
 800f50a:	4622      	mov	r2, r4
 800f50c:	462b      	mov	r3, r5
 800f50e:	4620      	mov	r0, r4
 800f510:	4629      	mov	r1, r5
 800f512:	eeb0 8a40 	vmov.f32	s16, s0
 800f516:	eef0 8a60 	vmov.f32	s17, s1
 800f51a:	f7f1 fad3 	bl	8000ac4 <__aeabi_dcmpun>
 800f51e:	b990      	cbnz	r0, 800f546 <sqrt+0x4a>
 800f520:	2200      	movs	r2, #0
 800f522:	2300      	movs	r3, #0
 800f524:	4620      	mov	r0, r4
 800f526:	4629      	mov	r1, r5
 800f528:	f7f1 faa4 	bl	8000a74 <__aeabi_dcmplt>
 800f52c:	b158      	cbz	r0, 800f546 <sqrt+0x4a>
 800f52e:	f7ff ff09 	bl	800f344 <__errno>
 800f532:	2321      	movs	r3, #33	@ 0x21
 800f534:	6003      	str	r3, [r0, #0]
 800f536:	2200      	movs	r2, #0
 800f538:	2300      	movs	r3, #0
 800f53a:	4610      	mov	r0, r2
 800f53c:	4619      	mov	r1, r3
 800f53e:	f7f1 f951 	bl	80007e4 <__aeabi_ddiv>
 800f542:	ec41 0b18 	vmov	d8, r0, r1
 800f546:	eeb0 0a48 	vmov.f32	s0, s16
 800f54a:	eef0 0a68 	vmov.f32	s1, s17
 800f54e:	ecbd 8b02 	vpop	{d8}
 800f552:	bd38      	pop	{r3, r4, r5, pc}

0800f554 <fabs>:
 800f554:	ec51 0b10 	vmov	r0, r1, d0
 800f558:	4602      	mov	r2, r0
 800f55a:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800f55e:	ec43 2b10 	vmov	d0, r2, r3
 800f562:	4770      	bx	lr

0800f564 <sqrtf>:
 800f564:	b508      	push	{r3, lr}
 800f566:	ed2d 8b02 	vpush	{d8}
 800f56a:	eeb0 8a40 	vmov.f32	s16, s0
 800f56e:	f000 f98d 	bl	800f88c <__ieee754_sqrtf>
 800f572:	eeb4 8a48 	vcmp.f32	s16, s16
 800f576:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f57a:	d60c      	bvs.n	800f596 <sqrtf+0x32>
 800f57c:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800f59c <sqrtf+0x38>
 800f580:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800f584:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f588:	d505      	bpl.n	800f596 <sqrtf+0x32>
 800f58a:	f7ff fedb 	bl	800f344 <__errno>
 800f58e:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800f592:	2321      	movs	r3, #33	@ 0x21
 800f594:	6003      	str	r3, [r0, #0]
 800f596:	ecbd 8b02 	vpop	{d8}
 800f59a:	bd08      	pop	{r3, pc}
 800f59c:	00000000 	.word	0x00000000

0800f5a0 <cosf>:
 800f5a0:	ee10 3a10 	vmov	r3, s0
 800f5a4:	b507      	push	{r0, r1, r2, lr}
 800f5a6:	4a1e      	ldr	r2, [pc, #120]	@ (800f620 <cosf+0x80>)
 800f5a8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800f5ac:	4293      	cmp	r3, r2
 800f5ae:	d806      	bhi.n	800f5be <cosf+0x1e>
 800f5b0:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 800f624 <cosf+0x84>
 800f5b4:	b003      	add	sp, #12
 800f5b6:	f85d eb04 	ldr.w	lr, [sp], #4
 800f5ba:	f001 b913 	b.w	80107e4 <__kernel_cosf>
 800f5be:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800f5c2:	d304      	bcc.n	800f5ce <cosf+0x2e>
 800f5c4:	ee30 0a40 	vsub.f32	s0, s0, s0
 800f5c8:	b003      	add	sp, #12
 800f5ca:	f85d fb04 	ldr.w	pc, [sp], #4
 800f5ce:	4668      	mov	r0, sp
 800f5d0:	f001 f9a8 	bl	8010924 <__ieee754_rem_pio2f>
 800f5d4:	f000 0003 	and.w	r0, r0, #3
 800f5d8:	2801      	cmp	r0, #1
 800f5da:	d009      	beq.n	800f5f0 <cosf+0x50>
 800f5dc:	2802      	cmp	r0, #2
 800f5de:	d010      	beq.n	800f602 <cosf+0x62>
 800f5e0:	b9b0      	cbnz	r0, 800f610 <cosf+0x70>
 800f5e2:	eddd 0a01 	vldr	s1, [sp, #4]
 800f5e6:	ed9d 0a00 	vldr	s0, [sp]
 800f5ea:	f001 f8fb 	bl	80107e4 <__kernel_cosf>
 800f5ee:	e7eb      	b.n	800f5c8 <cosf+0x28>
 800f5f0:	eddd 0a01 	vldr	s1, [sp, #4]
 800f5f4:	ed9d 0a00 	vldr	s0, [sp]
 800f5f8:	f001 f94c 	bl	8010894 <__kernel_sinf>
 800f5fc:	eeb1 0a40 	vneg.f32	s0, s0
 800f600:	e7e2      	b.n	800f5c8 <cosf+0x28>
 800f602:	eddd 0a01 	vldr	s1, [sp, #4]
 800f606:	ed9d 0a00 	vldr	s0, [sp]
 800f60a:	f001 f8eb 	bl	80107e4 <__kernel_cosf>
 800f60e:	e7f5      	b.n	800f5fc <cosf+0x5c>
 800f610:	eddd 0a01 	vldr	s1, [sp, #4]
 800f614:	ed9d 0a00 	vldr	s0, [sp]
 800f618:	2001      	movs	r0, #1
 800f61a:	f001 f93b 	bl	8010894 <__kernel_sinf>
 800f61e:	e7d3      	b.n	800f5c8 <cosf+0x28>
 800f620:	3f490fd8 	.word	0x3f490fd8
 800f624:	00000000 	.word	0x00000000

0800f628 <sinf>:
 800f628:	ee10 3a10 	vmov	r3, s0
 800f62c:	b507      	push	{r0, r1, r2, lr}
 800f62e:	4a1f      	ldr	r2, [pc, #124]	@ (800f6ac <sinf+0x84>)
 800f630:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800f634:	4293      	cmp	r3, r2
 800f636:	d807      	bhi.n	800f648 <sinf+0x20>
 800f638:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 800f6b0 <sinf+0x88>
 800f63c:	2000      	movs	r0, #0
 800f63e:	b003      	add	sp, #12
 800f640:	f85d eb04 	ldr.w	lr, [sp], #4
 800f644:	f001 b926 	b.w	8010894 <__kernel_sinf>
 800f648:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800f64c:	d304      	bcc.n	800f658 <sinf+0x30>
 800f64e:	ee30 0a40 	vsub.f32	s0, s0, s0
 800f652:	b003      	add	sp, #12
 800f654:	f85d fb04 	ldr.w	pc, [sp], #4
 800f658:	4668      	mov	r0, sp
 800f65a:	f001 f963 	bl	8010924 <__ieee754_rem_pio2f>
 800f65e:	f000 0003 	and.w	r0, r0, #3
 800f662:	2801      	cmp	r0, #1
 800f664:	d00a      	beq.n	800f67c <sinf+0x54>
 800f666:	2802      	cmp	r0, #2
 800f668:	d00f      	beq.n	800f68a <sinf+0x62>
 800f66a:	b9c0      	cbnz	r0, 800f69e <sinf+0x76>
 800f66c:	eddd 0a01 	vldr	s1, [sp, #4]
 800f670:	ed9d 0a00 	vldr	s0, [sp]
 800f674:	2001      	movs	r0, #1
 800f676:	f001 f90d 	bl	8010894 <__kernel_sinf>
 800f67a:	e7ea      	b.n	800f652 <sinf+0x2a>
 800f67c:	eddd 0a01 	vldr	s1, [sp, #4]
 800f680:	ed9d 0a00 	vldr	s0, [sp]
 800f684:	f001 f8ae 	bl	80107e4 <__kernel_cosf>
 800f688:	e7e3      	b.n	800f652 <sinf+0x2a>
 800f68a:	eddd 0a01 	vldr	s1, [sp, #4]
 800f68e:	ed9d 0a00 	vldr	s0, [sp]
 800f692:	2001      	movs	r0, #1
 800f694:	f001 f8fe 	bl	8010894 <__kernel_sinf>
 800f698:	eeb1 0a40 	vneg.f32	s0, s0
 800f69c:	e7d9      	b.n	800f652 <sinf+0x2a>
 800f69e:	eddd 0a01 	vldr	s1, [sp, #4]
 800f6a2:	ed9d 0a00 	vldr	s0, [sp]
 800f6a6:	f001 f89d 	bl	80107e4 <__kernel_cosf>
 800f6aa:	e7f5      	b.n	800f698 <sinf+0x70>
 800f6ac:	3f490fd8 	.word	0x3f490fd8
 800f6b0:	00000000 	.word	0x00000000

0800f6b4 <finite>:
 800f6b4:	b082      	sub	sp, #8
 800f6b6:	ed8d 0b00 	vstr	d0, [sp]
 800f6ba:	9801      	ldr	r0, [sp, #4]
 800f6bc:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 800f6c0:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 800f6c4:	0fc0      	lsrs	r0, r0, #31
 800f6c6:	b002      	add	sp, #8
 800f6c8:	4770      	bx	lr
 800f6ca:	0000      	movs	r0, r0
 800f6cc:	0000      	movs	r0, r0
	...

0800f6d0 <nan>:
 800f6d0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800f6d8 <nan+0x8>
 800f6d4:	4770      	bx	lr
 800f6d6:	bf00      	nop
 800f6d8:	00000000 	.word	0x00000000
 800f6dc:	7ff80000 	.word	0x7ff80000

0800f6e0 <__ieee754_sqrt>:
 800f6e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f6e4:	4a66      	ldr	r2, [pc, #408]	@ (800f880 <__ieee754_sqrt+0x1a0>)
 800f6e6:	ec55 4b10 	vmov	r4, r5, d0
 800f6ea:	43aa      	bics	r2, r5
 800f6ec:	462b      	mov	r3, r5
 800f6ee:	4621      	mov	r1, r4
 800f6f0:	d110      	bne.n	800f714 <__ieee754_sqrt+0x34>
 800f6f2:	4622      	mov	r2, r4
 800f6f4:	4620      	mov	r0, r4
 800f6f6:	4629      	mov	r1, r5
 800f6f8:	f7f0 ff4a 	bl	8000590 <__aeabi_dmul>
 800f6fc:	4602      	mov	r2, r0
 800f6fe:	460b      	mov	r3, r1
 800f700:	4620      	mov	r0, r4
 800f702:	4629      	mov	r1, r5
 800f704:	f7f0 fd8e 	bl	8000224 <__adddf3>
 800f708:	4604      	mov	r4, r0
 800f70a:	460d      	mov	r5, r1
 800f70c:	ec45 4b10 	vmov	d0, r4, r5
 800f710:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f714:	2d00      	cmp	r5, #0
 800f716:	dc0e      	bgt.n	800f736 <__ieee754_sqrt+0x56>
 800f718:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800f71c:	4322      	orrs	r2, r4
 800f71e:	d0f5      	beq.n	800f70c <__ieee754_sqrt+0x2c>
 800f720:	b19d      	cbz	r5, 800f74a <__ieee754_sqrt+0x6a>
 800f722:	4622      	mov	r2, r4
 800f724:	4620      	mov	r0, r4
 800f726:	4629      	mov	r1, r5
 800f728:	f7f0 fd7a 	bl	8000220 <__aeabi_dsub>
 800f72c:	4602      	mov	r2, r0
 800f72e:	460b      	mov	r3, r1
 800f730:	f7f1 f858 	bl	80007e4 <__aeabi_ddiv>
 800f734:	e7e8      	b.n	800f708 <__ieee754_sqrt+0x28>
 800f736:	152a      	asrs	r2, r5, #20
 800f738:	d115      	bne.n	800f766 <__ieee754_sqrt+0x86>
 800f73a:	2000      	movs	r0, #0
 800f73c:	e009      	b.n	800f752 <__ieee754_sqrt+0x72>
 800f73e:	0acb      	lsrs	r3, r1, #11
 800f740:	3a15      	subs	r2, #21
 800f742:	0549      	lsls	r1, r1, #21
 800f744:	2b00      	cmp	r3, #0
 800f746:	d0fa      	beq.n	800f73e <__ieee754_sqrt+0x5e>
 800f748:	e7f7      	b.n	800f73a <__ieee754_sqrt+0x5a>
 800f74a:	462a      	mov	r2, r5
 800f74c:	e7fa      	b.n	800f744 <__ieee754_sqrt+0x64>
 800f74e:	005b      	lsls	r3, r3, #1
 800f750:	3001      	adds	r0, #1
 800f752:	02dc      	lsls	r4, r3, #11
 800f754:	d5fb      	bpl.n	800f74e <__ieee754_sqrt+0x6e>
 800f756:	1e44      	subs	r4, r0, #1
 800f758:	1b12      	subs	r2, r2, r4
 800f75a:	f1c0 0420 	rsb	r4, r0, #32
 800f75e:	fa21 f404 	lsr.w	r4, r1, r4
 800f762:	4323      	orrs	r3, r4
 800f764:	4081      	lsls	r1, r0
 800f766:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f76a:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 800f76e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800f772:	07d2      	lsls	r2, r2, #31
 800f774:	bf5c      	itt	pl
 800f776:	005b      	lslpl	r3, r3, #1
 800f778:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800f77c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800f780:	bf58      	it	pl
 800f782:	0049      	lslpl	r1, r1, #1
 800f784:	2600      	movs	r6, #0
 800f786:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800f78a:	107f      	asrs	r7, r7, #1
 800f78c:	0049      	lsls	r1, r1, #1
 800f78e:	2016      	movs	r0, #22
 800f790:	4632      	mov	r2, r6
 800f792:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800f796:	1915      	adds	r5, r2, r4
 800f798:	429d      	cmp	r5, r3
 800f79a:	bfde      	ittt	le
 800f79c:	192a      	addle	r2, r5, r4
 800f79e:	1b5b      	suble	r3, r3, r5
 800f7a0:	1936      	addle	r6, r6, r4
 800f7a2:	0fcd      	lsrs	r5, r1, #31
 800f7a4:	3801      	subs	r0, #1
 800f7a6:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 800f7aa:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800f7ae:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800f7b2:	d1f0      	bne.n	800f796 <__ieee754_sqrt+0xb6>
 800f7b4:	4605      	mov	r5, r0
 800f7b6:	2420      	movs	r4, #32
 800f7b8:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800f7bc:	4293      	cmp	r3, r2
 800f7be:	eb0c 0e00 	add.w	lr, ip, r0
 800f7c2:	dc02      	bgt.n	800f7ca <__ieee754_sqrt+0xea>
 800f7c4:	d113      	bne.n	800f7ee <__ieee754_sqrt+0x10e>
 800f7c6:	458e      	cmp	lr, r1
 800f7c8:	d811      	bhi.n	800f7ee <__ieee754_sqrt+0x10e>
 800f7ca:	f1be 0f00 	cmp.w	lr, #0
 800f7ce:	eb0e 000c 	add.w	r0, lr, ip
 800f7d2:	da3f      	bge.n	800f854 <__ieee754_sqrt+0x174>
 800f7d4:	2800      	cmp	r0, #0
 800f7d6:	db3d      	blt.n	800f854 <__ieee754_sqrt+0x174>
 800f7d8:	f102 0801 	add.w	r8, r2, #1
 800f7dc:	1a9b      	subs	r3, r3, r2
 800f7de:	458e      	cmp	lr, r1
 800f7e0:	bf88      	it	hi
 800f7e2:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800f7e6:	eba1 010e 	sub.w	r1, r1, lr
 800f7ea:	4465      	add	r5, ip
 800f7ec:	4642      	mov	r2, r8
 800f7ee:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800f7f2:	3c01      	subs	r4, #1
 800f7f4:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800f7f8:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800f7fc:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800f800:	d1dc      	bne.n	800f7bc <__ieee754_sqrt+0xdc>
 800f802:	4319      	orrs	r1, r3
 800f804:	d01b      	beq.n	800f83e <__ieee754_sqrt+0x15e>
 800f806:	f8df a07c 	ldr.w	sl, [pc, #124]	@ 800f884 <__ieee754_sqrt+0x1a4>
 800f80a:	f8df b07c 	ldr.w	fp, [pc, #124]	@ 800f888 <__ieee754_sqrt+0x1a8>
 800f80e:	e9da 0100 	ldrd	r0, r1, [sl]
 800f812:	e9db 2300 	ldrd	r2, r3, [fp]
 800f816:	f7f0 fd03 	bl	8000220 <__aeabi_dsub>
 800f81a:	e9da 8900 	ldrd	r8, r9, [sl]
 800f81e:	4602      	mov	r2, r0
 800f820:	460b      	mov	r3, r1
 800f822:	4640      	mov	r0, r8
 800f824:	4649      	mov	r1, r9
 800f826:	f7f1 f92f 	bl	8000a88 <__aeabi_dcmple>
 800f82a:	b140      	cbz	r0, 800f83e <__ieee754_sqrt+0x15e>
 800f82c:	f1b5 3fff 	cmp.w	r5, #4294967295
 800f830:	e9da 0100 	ldrd	r0, r1, [sl]
 800f834:	e9db 2300 	ldrd	r2, r3, [fp]
 800f838:	d10e      	bne.n	800f858 <__ieee754_sqrt+0x178>
 800f83a:	3601      	adds	r6, #1
 800f83c:	4625      	mov	r5, r4
 800f83e:	1073      	asrs	r3, r6, #1
 800f840:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 800f844:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 800f848:	eb03 5107 	add.w	r1, r3, r7, lsl #20
 800f84c:	086b      	lsrs	r3, r5, #1
 800f84e:	ea43 70c6 	orr.w	r0, r3, r6, lsl #31
 800f852:	e759      	b.n	800f708 <__ieee754_sqrt+0x28>
 800f854:	4690      	mov	r8, r2
 800f856:	e7c1      	b.n	800f7dc <__ieee754_sqrt+0xfc>
 800f858:	f7f0 fce4 	bl	8000224 <__adddf3>
 800f85c:	e9da 8900 	ldrd	r8, r9, [sl]
 800f860:	4602      	mov	r2, r0
 800f862:	460b      	mov	r3, r1
 800f864:	4640      	mov	r0, r8
 800f866:	4649      	mov	r1, r9
 800f868:	f7f1 f904 	bl	8000a74 <__aeabi_dcmplt>
 800f86c:	b120      	cbz	r0, 800f878 <__ieee754_sqrt+0x198>
 800f86e:	1cab      	adds	r3, r5, #2
 800f870:	bf08      	it	eq
 800f872:	3601      	addeq	r6, #1
 800f874:	3502      	adds	r5, #2
 800f876:	e7e2      	b.n	800f83e <__ieee754_sqrt+0x15e>
 800f878:	1c6b      	adds	r3, r5, #1
 800f87a:	f023 0501 	bic.w	r5, r3, #1
 800f87e:	e7de      	b.n	800f83e <__ieee754_sqrt+0x15e>
 800f880:	7ff00000 	.word	0x7ff00000
 800f884:	08011398 	.word	0x08011398
 800f888:	08011390 	.word	0x08011390

0800f88c <__ieee754_sqrtf>:
 800f88c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800f890:	4770      	bx	lr
 800f892:	0000      	movs	r0, r0
 800f894:	0000      	movs	r0, r0
	...

0800f898 <__ieee754_acos>:
 800f898:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f89c:	ec55 4b10 	vmov	r4, r5, d0
 800f8a0:	49b7      	ldr	r1, [pc, #732]	@ (800fb80 <__ieee754_acos+0x2e8>)
 800f8a2:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800f8a6:	428b      	cmp	r3, r1
 800f8a8:	d919      	bls.n	800f8de <__ieee754_acos+0x46>
 800f8aa:	f103 4340 	add.w	r3, r3, #3221225472	@ 0xc0000000
 800f8ae:	f503 1380 	add.w	r3, r3, #1048576	@ 0x100000
 800f8b2:	4323      	orrs	r3, r4
 800f8b4:	d106      	bne.n	800f8c4 <__ieee754_acos+0x2c>
 800f8b6:	2d00      	cmp	r5, #0
 800f8b8:	f340 8210 	ble.w	800fcdc <__ieee754_acos+0x444>
 800f8bc:	ed9f 0b94 	vldr	d0, [pc, #592]	@ 800fb10 <__ieee754_acos+0x278>
 800f8c0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f8c4:	4622      	mov	r2, r4
 800f8c6:	462b      	mov	r3, r5
 800f8c8:	4620      	mov	r0, r4
 800f8ca:	4629      	mov	r1, r5
 800f8cc:	f7f0 fca8 	bl	8000220 <__aeabi_dsub>
 800f8d0:	4602      	mov	r2, r0
 800f8d2:	460b      	mov	r3, r1
 800f8d4:	f7f0 ff86 	bl	80007e4 <__aeabi_ddiv>
 800f8d8:	ec41 0b10 	vmov	d0, r0, r1
 800f8dc:	e7f0      	b.n	800f8c0 <__ieee754_acos+0x28>
 800f8de:	49a9      	ldr	r1, [pc, #676]	@ (800fb84 <__ieee754_acos+0x2ec>)
 800f8e0:	428b      	cmp	r3, r1
 800f8e2:	f200 8085 	bhi.w	800f9f0 <__ieee754_acos+0x158>
 800f8e6:	4aa8      	ldr	r2, [pc, #672]	@ (800fb88 <__ieee754_acos+0x2f0>)
 800f8e8:	4293      	cmp	r3, r2
 800f8ea:	f240 81fa 	bls.w	800fce2 <__ieee754_acos+0x44a>
 800f8ee:	4622      	mov	r2, r4
 800f8f0:	462b      	mov	r3, r5
 800f8f2:	4620      	mov	r0, r4
 800f8f4:	4629      	mov	r1, r5
 800f8f6:	f7f0 fe4b 	bl	8000590 <__aeabi_dmul>
 800f8fa:	a387      	add	r3, pc, #540	@ (adr r3, 800fb18 <__ieee754_acos+0x280>)
 800f8fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f900:	4606      	mov	r6, r0
 800f902:	460f      	mov	r7, r1
 800f904:	f7f0 fe44 	bl	8000590 <__aeabi_dmul>
 800f908:	a385      	add	r3, pc, #532	@ (adr r3, 800fb20 <__ieee754_acos+0x288>)
 800f90a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f90e:	f7f0 fc89 	bl	8000224 <__adddf3>
 800f912:	4632      	mov	r2, r6
 800f914:	463b      	mov	r3, r7
 800f916:	f7f0 fe3b 	bl	8000590 <__aeabi_dmul>
 800f91a:	a383      	add	r3, pc, #524	@ (adr r3, 800fb28 <__ieee754_acos+0x290>)
 800f91c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f920:	f7f0 fc7e 	bl	8000220 <__aeabi_dsub>
 800f924:	4632      	mov	r2, r6
 800f926:	463b      	mov	r3, r7
 800f928:	f7f0 fe32 	bl	8000590 <__aeabi_dmul>
 800f92c:	a380      	add	r3, pc, #512	@ (adr r3, 800fb30 <__ieee754_acos+0x298>)
 800f92e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f932:	f7f0 fc77 	bl	8000224 <__adddf3>
 800f936:	4632      	mov	r2, r6
 800f938:	463b      	mov	r3, r7
 800f93a:	f7f0 fe29 	bl	8000590 <__aeabi_dmul>
 800f93e:	a37e      	add	r3, pc, #504	@ (adr r3, 800fb38 <__ieee754_acos+0x2a0>)
 800f940:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f944:	f7f0 fc6c 	bl	8000220 <__aeabi_dsub>
 800f948:	4632      	mov	r2, r6
 800f94a:	463b      	mov	r3, r7
 800f94c:	f7f0 fe20 	bl	8000590 <__aeabi_dmul>
 800f950:	a37b      	add	r3, pc, #492	@ (adr r3, 800fb40 <__ieee754_acos+0x2a8>)
 800f952:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f956:	f7f0 fc65 	bl	8000224 <__adddf3>
 800f95a:	4632      	mov	r2, r6
 800f95c:	463b      	mov	r3, r7
 800f95e:	f7f0 fe17 	bl	8000590 <__aeabi_dmul>
 800f962:	a379      	add	r3, pc, #484	@ (adr r3, 800fb48 <__ieee754_acos+0x2b0>)
 800f964:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f968:	4680      	mov	r8, r0
 800f96a:	4689      	mov	r9, r1
 800f96c:	4630      	mov	r0, r6
 800f96e:	4639      	mov	r1, r7
 800f970:	f7f0 fe0e 	bl	8000590 <__aeabi_dmul>
 800f974:	a376      	add	r3, pc, #472	@ (adr r3, 800fb50 <__ieee754_acos+0x2b8>)
 800f976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f97a:	f7f0 fc51 	bl	8000220 <__aeabi_dsub>
 800f97e:	4632      	mov	r2, r6
 800f980:	463b      	mov	r3, r7
 800f982:	f7f0 fe05 	bl	8000590 <__aeabi_dmul>
 800f986:	a374      	add	r3, pc, #464	@ (adr r3, 800fb58 <__ieee754_acos+0x2c0>)
 800f988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f98c:	f7f0 fc4a 	bl	8000224 <__adddf3>
 800f990:	4632      	mov	r2, r6
 800f992:	463b      	mov	r3, r7
 800f994:	f7f0 fdfc 	bl	8000590 <__aeabi_dmul>
 800f998:	a371      	add	r3, pc, #452	@ (adr r3, 800fb60 <__ieee754_acos+0x2c8>)
 800f99a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f99e:	f7f0 fc3f 	bl	8000220 <__aeabi_dsub>
 800f9a2:	4632      	mov	r2, r6
 800f9a4:	463b      	mov	r3, r7
 800f9a6:	f7f0 fdf3 	bl	8000590 <__aeabi_dmul>
 800f9aa:	4b78      	ldr	r3, [pc, #480]	@ (800fb8c <__ieee754_acos+0x2f4>)
 800f9ac:	2200      	movs	r2, #0
 800f9ae:	f7f0 fc39 	bl	8000224 <__adddf3>
 800f9b2:	4602      	mov	r2, r0
 800f9b4:	460b      	mov	r3, r1
 800f9b6:	4640      	mov	r0, r8
 800f9b8:	4649      	mov	r1, r9
 800f9ba:	f7f0 ff13 	bl	80007e4 <__aeabi_ddiv>
 800f9be:	4622      	mov	r2, r4
 800f9c0:	462b      	mov	r3, r5
 800f9c2:	f7f0 fde5 	bl	8000590 <__aeabi_dmul>
 800f9c6:	4602      	mov	r2, r0
 800f9c8:	460b      	mov	r3, r1
 800f9ca:	a167      	add	r1, pc, #412	@ (adr r1, 800fb68 <__ieee754_acos+0x2d0>)
 800f9cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f9d0:	f7f0 fc26 	bl	8000220 <__aeabi_dsub>
 800f9d4:	4602      	mov	r2, r0
 800f9d6:	460b      	mov	r3, r1
 800f9d8:	4620      	mov	r0, r4
 800f9da:	4629      	mov	r1, r5
 800f9dc:	f7f0 fc20 	bl	8000220 <__aeabi_dsub>
 800f9e0:	4602      	mov	r2, r0
 800f9e2:	460b      	mov	r3, r1
 800f9e4:	a162      	add	r1, pc, #392	@ (adr r1, 800fb70 <__ieee754_acos+0x2d8>)
 800f9e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f9ea:	f7f0 fc19 	bl	8000220 <__aeabi_dsub>
 800f9ee:	e773      	b.n	800f8d8 <__ieee754_acos+0x40>
 800f9f0:	2d00      	cmp	r5, #0
 800f9f2:	f280 80cf 	bge.w	800fb94 <__ieee754_acos+0x2fc>
 800f9f6:	4b65      	ldr	r3, [pc, #404]	@ (800fb8c <__ieee754_acos+0x2f4>)
 800f9f8:	2200      	movs	r2, #0
 800f9fa:	4620      	mov	r0, r4
 800f9fc:	4629      	mov	r1, r5
 800f9fe:	f7f0 fc11 	bl	8000224 <__adddf3>
 800fa02:	4b63      	ldr	r3, [pc, #396]	@ (800fb90 <__ieee754_acos+0x2f8>)
 800fa04:	2200      	movs	r2, #0
 800fa06:	f7f0 fdc3 	bl	8000590 <__aeabi_dmul>
 800fa0a:	a343      	add	r3, pc, #268	@ (adr r3, 800fb18 <__ieee754_acos+0x280>)
 800fa0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa10:	4604      	mov	r4, r0
 800fa12:	460d      	mov	r5, r1
 800fa14:	f7f0 fdbc 	bl	8000590 <__aeabi_dmul>
 800fa18:	a341      	add	r3, pc, #260	@ (adr r3, 800fb20 <__ieee754_acos+0x288>)
 800fa1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa1e:	f7f0 fc01 	bl	8000224 <__adddf3>
 800fa22:	4622      	mov	r2, r4
 800fa24:	462b      	mov	r3, r5
 800fa26:	f7f0 fdb3 	bl	8000590 <__aeabi_dmul>
 800fa2a:	a33f      	add	r3, pc, #252	@ (adr r3, 800fb28 <__ieee754_acos+0x290>)
 800fa2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa30:	f7f0 fbf6 	bl	8000220 <__aeabi_dsub>
 800fa34:	4622      	mov	r2, r4
 800fa36:	462b      	mov	r3, r5
 800fa38:	f7f0 fdaa 	bl	8000590 <__aeabi_dmul>
 800fa3c:	a33c      	add	r3, pc, #240	@ (adr r3, 800fb30 <__ieee754_acos+0x298>)
 800fa3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa42:	f7f0 fbef 	bl	8000224 <__adddf3>
 800fa46:	4622      	mov	r2, r4
 800fa48:	462b      	mov	r3, r5
 800fa4a:	f7f0 fda1 	bl	8000590 <__aeabi_dmul>
 800fa4e:	a33a      	add	r3, pc, #232	@ (adr r3, 800fb38 <__ieee754_acos+0x2a0>)
 800fa50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa54:	f7f0 fbe4 	bl	8000220 <__aeabi_dsub>
 800fa58:	4622      	mov	r2, r4
 800fa5a:	462b      	mov	r3, r5
 800fa5c:	f7f0 fd98 	bl	8000590 <__aeabi_dmul>
 800fa60:	a337      	add	r3, pc, #220	@ (adr r3, 800fb40 <__ieee754_acos+0x2a8>)
 800fa62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa66:	f7f0 fbdd 	bl	8000224 <__adddf3>
 800fa6a:	4622      	mov	r2, r4
 800fa6c:	462b      	mov	r3, r5
 800fa6e:	f7f0 fd8f 	bl	8000590 <__aeabi_dmul>
 800fa72:	a335      	add	r3, pc, #212	@ (adr r3, 800fb48 <__ieee754_acos+0x2b0>)
 800fa74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa78:	4606      	mov	r6, r0
 800fa7a:	460f      	mov	r7, r1
 800fa7c:	4620      	mov	r0, r4
 800fa7e:	4629      	mov	r1, r5
 800fa80:	f7f0 fd86 	bl	8000590 <__aeabi_dmul>
 800fa84:	a332      	add	r3, pc, #200	@ (adr r3, 800fb50 <__ieee754_acos+0x2b8>)
 800fa86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa8a:	f7f0 fbc9 	bl	8000220 <__aeabi_dsub>
 800fa8e:	4622      	mov	r2, r4
 800fa90:	462b      	mov	r3, r5
 800fa92:	f7f0 fd7d 	bl	8000590 <__aeabi_dmul>
 800fa96:	a330      	add	r3, pc, #192	@ (adr r3, 800fb58 <__ieee754_acos+0x2c0>)
 800fa98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa9c:	f7f0 fbc2 	bl	8000224 <__adddf3>
 800faa0:	4622      	mov	r2, r4
 800faa2:	462b      	mov	r3, r5
 800faa4:	f7f0 fd74 	bl	8000590 <__aeabi_dmul>
 800faa8:	a32d      	add	r3, pc, #180	@ (adr r3, 800fb60 <__ieee754_acos+0x2c8>)
 800faaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800faae:	f7f0 fbb7 	bl	8000220 <__aeabi_dsub>
 800fab2:	4622      	mov	r2, r4
 800fab4:	462b      	mov	r3, r5
 800fab6:	f7f0 fd6b 	bl	8000590 <__aeabi_dmul>
 800faba:	4b34      	ldr	r3, [pc, #208]	@ (800fb8c <__ieee754_acos+0x2f4>)
 800fabc:	2200      	movs	r2, #0
 800fabe:	f7f0 fbb1 	bl	8000224 <__adddf3>
 800fac2:	ec45 4b10 	vmov	d0, r4, r5
 800fac6:	4680      	mov	r8, r0
 800fac8:	4689      	mov	r9, r1
 800faca:	f7ff fe09 	bl	800f6e0 <__ieee754_sqrt>
 800face:	ec55 4b10 	vmov	r4, r5, d0
 800fad2:	4642      	mov	r2, r8
 800fad4:	464b      	mov	r3, r9
 800fad6:	4630      	mov	r0, r6
 800fad8:	4639      	mov	r1, r7
 800fada:	f7f0 fe83 	bl	80007e4 <__aeabi_ddiv>
 800fade:	4622      	mov	r2, r4
 800fae0:	462b      	mov	r3, r5
 800fae2:	f7f0 fd55 	bl	8000590 <__aeabi_dmul>
 800fae6:	a320      	add	r3, pc, #128	@ (adr r3, 800fb68 <__ieee754_acos+0x2d0>)
 800fae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800faec:	f7f0 fb98 	bl	8000220 <__aeabi_dsub>
 800faf0:	4622      	mov	r2, r4
 800faf2:	462b      	mov	r3, r5
 800faf4:	f7f0 fb96 	bl	8000224 <__adddf3>
 800faf8:	4602      	mov	r2, r0
 800fafa:	460b      	mov	r3, r1
 800fafc:	f7f0 fb92 	bl	8000224 <__adddf3>
 800fb00:	4602      	mov	r2, r0
 800fb02:	460b      	mov	r3, r1
 800fb04:	a11c      	add	r1, pc, #112	@ (adr r1, 800fb78 <__ieee754_acos+0x2e0>)
 800fb06:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fb0a:	e76e      	b.n	800f9ea <__ieee754_acos+0x152>
 800fb0c:	f3af 8000 	nop.w
	...
 800fb18:	0dfdf709 	.word	0x0dfdf709
 800fb1c:	3f023de1 	.word	0x3f023de1
 800fb20:	7501b288 	.word	0x7501b288
 800fb24:	3f49efe0 	.word	0x3f49efe0
 800fb28:	b5688f3b 	.word	0xb5688f3b
 800fb2c:	3fa48228 	.word	0x3fa48228
 800fb30:	0e884455 	.word	0x0e884455
 800fb34:	3fc9c155 	.word	0x3fc9c155
 800fb38:	03eb6f7d 	.word	0x03eb6f7d
 800fb3c:	3fd4d612 	.word	0x3fd4d612
 800fb40:	55555555 	.word	0x55555555
 800fb44:	3fc55555 	.word	0x3fc55555
 800fb48:	b12e9282 	.word	0xb12e9282
 800fb4c:	3fb3b8c5 	.word	0x3fb3b8c5
 800fb50:	1b8d0159 	.word	0x1b8d0159
 800fb54:	3fe6066c 	.word	0x3fe6066c
 800fb58:	9c598ac8 	.word	0x9c598ac8
 800fb5c:	40002ae5 	.word	0x40002ae5
 800fb60:	1c8a2d4b 	.word	0x1c8a2d4b
 800fb64:	40033a27 	.word	0x40033a27
 800fb68:	33145c07 	.word	0x33145c07
 800fb6c:	3c91a626 	.word	0x3c91a626
 800fb70:	54442d18 	.word	0x54442d18
 800fb74:	3ff921fb 	.word	0x3ff921fb
 800fb78:	54442d18 	.word	0x54442d18
 800fb7c:	400921fb 	.word	0x400921fb
 800fb80:	3fefffff 	.word	0x3fefffff
 800fb84:	3fdfffff 	.word	0x3fdfffff
 800fb88:	3c600000 	.word	0x3c600000
 800fb8c:	3ff00000 	.word	0x3ff00000
 800fb90:	3fe00000 	.word	0x3fe00000
 800fb94:	4622      	mov	r2, r4
 800fb96:	462b      	mov	r3, r5
 800fb98:	496b      	ldr	r1, [pc, #428]	@ (800fd48 <__ieee754_acos+0x4b0>)
 800fb9a:	2000      	movs	r0, #0
 800fb9c:	f7f0 fb40 	bl	8000220 <__aeabi_dsub>
 800fba0:	4b6a      	ldr	r3, [pc, #424]	@ (800fd4c <__ieee754_acos+0x4b4>)
 800fba2:	2200      	movs	r2, #0
 800fba4:	f7f0 fcf4 	bl	8000590 <__aeabi_dmul>
 800fba8:	4604      	mov	r4, r0
 800fbaa:	460d      	mov	r5, r1
 800fbac:	ec45 4b10 	vmov	d0, r4, r5
 800fbb0:	f7ff fd96 	bl	800f6e0 <__ieee754_sqrt>
 800fbb4:	a34c      	add	r3, pc, #304	@ (adr r3, 800fce8 <__ieee754_acos+0x450>)
 800fbb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbba:	4620      	mov	r0, r4
 800fbbc:	4629      	mov	r1, r5
 800fbbe:	ec59 8b10 	vmov	r8, r9, d0
 800fbc2:	f7f0 fce5 	bl	8000590 <__aeabi_dmul>
 800fbc6:	a34a      	add	r3, pc, #296	@ (adr r3, 800fcf0 <__ieee754_acos+0x458>)
 800fbc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbcc:	f7f0 fb2a 	bl	8000224 <__adddf3>
 800fbd0:	4622      	mov	r2, r4
 800fbd2:	462b      	mov	r3, r5
 800fbd4:	f7f0 fcdc 	bl	8000590 <__aeabi_dmul>
 800fbd8:	a347      	add	r3, pc, #284	@ (adr r3, 800fcf8 <__ieee754_acos+0x460>)
 800fbda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbde:	f7f0 fb1f 	bl	8000220 <__aeabi_dsub>
 800fbe2:	4622      	mov	r2, r4
 800fbe4:	462b      	mov	r3, r5
 800fbe6:	f7f0 fcd3 	bl	8000590 <__aeabi_dmul>
 800fbea:	a345      	add	r3, pc, #276	@ (adr r3, 800fd00 <__ieee754_acos+0x468>)
 800fbec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbf0:	f7f0 fb18 	bl	8000224 <__adddf3>
 800fbf4:	4622      	mov	r2, r4
 800fbf6:	462b      	mov	r3, r5
 800fbf8:	f7f0 fcca 	bl	8000590 <__aeabi_dmul>
 800fbfc:	a342      	add	r3, pc, #264	@ (adr r3, 800fd08 <__ieee754_acos+0x470>)
 800fbfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc02:	f7f0 fb0d 	bl	8000220 <__aeabi_dsub>
 800fc06:	4622      	mov	r2, r4
 800fc08:	462b      	mov	r3, r5
 800fc0a:	f7f0 fcc1 	bl	8000590 <__aeabi_dmul>
 800fc0e:	a340      	add	r3, pc, #256	@ (adr r3, 800fd10 <__ieee754_acos+0x478>)
 800fc10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc14:	f7f0 fb06 	bl	8000224 <__adddf3>
 800fc18:	4622      	mov	r2, r4
 800fc1a:	462b      	mov	r3, r5
 800fc1c:	f7f0 fcb8 	bl	8000590 <__aeabi_dmul>
 800fc20:	a33d      	add	r3, pc, #244	@ (adr r3, 800fd18 <__ieee754_acos+0x480>)
 800fc22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc26:	4682      	mov	sl, r0
 800fc28:	468b      	mov	fp, r1
 800fc2a:	4620      	mov	r0, r4
 800fc2c:	4629      	mov	r1, r5
 800fc2e:	f7f0 fcaf 	bl	8000590 <__aeabi_dmul>
 800fc32:	a33b      	add	r3, pc, #236	@ (adr r3, 800fd20 <__ieee754_acos+0x488>)
 800fc34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc38:	f7f0 faf2 	bl	8000220 <__aeabi_dsub>
 800fc3c:	4622      	mov	r2, r4
 800fc3e:	462b      	mov	r3, r5
 800fc40:	f7f0 fca6 	bl	8000590 <__aeabi_dmul>
 800fc44:	a338      	add	r3, pc, #224	@ (adr r3, 800fd28 <__ieee754_acos+0x490>)
 800fc46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc4a:	f7f0 faeb 	bl	8000224 <__adddf3>
 800fc4e:	4622      	mov	r2, r4
 800fc50:	462b      	mov	r3, r5
 800fc52:	f7f0 fc9d 	bl	8000590 <__aeabi_dmul>
 800fc56:	a336      	add	r3, pc, #216	@ (adr r3, 800fd30 <__ieee754_acos+0x498>)
 800fc58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc5c:	f7f0 fae0 	bl	8000220 <__aeabi_dsub>
 800fc60:	4622      	mov	r2, r4
 800fc62:	462b      	mov	r3, r5
 800fc64:	f7f0 fc94 	bl	8000590 <__aeabi_dmul>
 800fc68:	4b37      	ldr	r3, [pc, #220]	@ (800fd48 <__ieee754_acos+0x4b0>)
 800fc6a:	2200      	movs	r2, #0
 800fc6c:	f7f0 fada 	bl	8000224 <__adddf3>
 800fc70:	4602      	mov	r2, r0
 800fc72:	460b      	mov	r3, r1
 800fc74:	4650      	mov	r0, sl
 800fc76:	4659      	mov	r1, fp
 800fc78:	f7f0 fdb4 	bl	80007e4 <__aeabi_ddiv>
 800fc7c:	4642      	mov	r2, r8
 800fc7e:	464b      	mov	r3, r9
 800fc80:	f7f0 fc86 	bl	8000590 <__aeabi_dmul>
 800fc84:	2600      	movs	r6, #0
 800fc86:	4682      	mov	sl, r0
 800fc88:	468b      	mov	fp, r1
 800fc8a:	4632      	mov	r2, r6
 800fc8c:	464b      	mov	r3, r9
 800fc8e:	4630      	mov	r0, r6
 800fc90:	4649      	mov	r1, r9
 800fc92:	f7f0 fc7d 	bl	8000590 <__aeabi_dmul>
 800fc96:	4602      	mov	r2, r0
 800fc98:	460b      	mov	r3, r1
 800fc9a:	4620      	mov	r0, r4
 800fc9c:	4629      	mov	r1, r5
 800fc9e:	f7f0 fabf 	bl	8000220 <__aeabi_dsub>
 800fca2:	4632      	mov	r2, r6
 800fca4:	4604      	mov	r4, r0
 800fca6:	460d      	mov	r5, r1
 800fca8:	464b      	mov	r3, r9
 800fcaa:	4640      	mov	r0, r8
 800fcac:	4649      	mov	r1, r9
 800fcae:	f7f0 fab9 	bl	8000224 <__adddf3>
 800fcb2:	4602      	mov	r2, r0
 800fcb4:	460b      	mov	r3, r1
 800fcb6:	4620      	mov	r0, r4
 800fcb8:	4629      	mov	r1, r5
 800fcba:	f7f0 fd93 	bl	80007e4 <__aeabi_ddiv>
 800fcbe:	4602      	mov	r2, r0
 800fcc0:	460b      	mov	r3, r1
 800fcc2:	4650      	mov	r0, sl
 800fcc4:	4659      	mov	r1, fp
 800fcc6:	f7f0 faad 	bl	8000224 <__adddf3>
 800fcca:	4632      	mov	r2, r6
 800fccc:	464b      	mov	r3, r9
 800fcce:	f7f0 faa9 	bl	8000224 <__adddf3>
 800fcd2:	4602      	mov	r2, r0
 800fcd4:	460b      	mov	r3, r1
 800fcd6:	f7f0 faa5 	bl	8000224 <__adddf3>
 800fcda:	e5fd      	b.n	800f8d8 <__ieee754_acos+0x40>
 800fcdc:	ed9f 0b16 	vldr	d0, [pc, #88]	@ 800fd38 <__ieee754_acos+0x4a0>
 800fce0:	e5ee      	b.n	800f8c0 <__ieee754_acos+0x28>
 800fce2:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 800fd40 <__ieee754_acos+0x4a8>
 800fce6:	e5eb      	b.n	800f8c0 <__ieee754_acos+0x28>
 800fce8:	0dfdf709 	.word	0x0dfdf709
 800fcec:	3f023de1 	.word	0x3f023de1
 800fcf0:	7501b288 	.word	0x7501b288
 800fcf4:	3f49efe0 	.word	0x3f49efe0
 800fcf8:	b5688f3b 	.word	0xb5688f3b
 800fcfc:	3fa48228 	.word	0x3fa48228
 800fd00:	0e884455 	.word	0x0e884455
 800fd04:	3fc9c155 	.word	0x3fc9c155
 800fd08:	03eb6f7d 	.word	0x03eb6f7d
 800fd0c:	3fd4d612 	.word	0x3fd4d612
 800fd10:	55555555 	.word	0x55555555
 800fd14:	3fc55555 	.word	0x3fc55555
 800fd18:	b12e9282 	.word	0xb12e9282
 800fd1c:	3fb3b8c5 	.word	0x3fb3b8c5
 800fd20:	1b8d0159 	.word	0x1b8d0159
 800fd24:	3fe6066c 	.word	0x3fe6066c
 800fd28:	9c598ac8 	.word	0x9c598ac8
 800fd2c:	40002ae5 	.word	0x40002ae5
 800fd30:	1c8a2d4b 	.word	0x1c8a2d4b
 800fd34:	40033a27 	.word	0x40033a27
 800fd38:	54442d18 	.word	0x54442d18
 800fd3c:	400921fb 	.word	0x400921fb
 800fd40:	54442d18 	.word	0x54442d18
 800fd44:	3ff921fb 	.word	0x3ff921fb
 800fd48:	3ff00000 	.word	0x3ff00000
 800fd4c:	3fe00000 	.word	0x3fe00000

0800fd50 <__ieee754_pow>:
 800fd50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd54:	b091      	sub	sp, #68	@ 0x44
 800fd56:	ed8d 1b00 	vstr	d1, [sp]
 800fd5a:	e9dd 1900 	ldrd	r1, r9, [sp]
 800fd5e:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 800fd62:	ea5a 0001 	orrs.w	r0, sl, r1
 800fd66:	ec57 6b10 	vmov	r6, r7, d0
 800fd6a:	d113      	bne.n	800fd94 <__ieee754_pow+0x44>
 800fd6c:	19b3      	adds	r3, r6, r6
 800fd6e:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 800fd72:	4152      	adcs	r2, r2
 800fd74:	4298      	cmp	r0, r3
 800fd76:	4b9a      	ldr	r3, [pc, #616]	@ (800ffe0 <__ieee754_pow+0x290>)
 800fd78:	4193      	sbcs	r3, r2
 800fd7a:	f080 84ee 	bcs.w	801075a <__ieee754_pow+0xa0a>
 800fd7e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fd82:	4630      	mov	r0, r6
 800fd84:	4639      	mov	r1, r7
 800fd86:	f7f0 fa4d 	bl	8000224 <__adddf3>
 800fd8a:	ec41 0b10 	vmov	d0, r0, r1
 800fd8e:	b011      	add	sp, #68	@ 0x44
 800fd90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd94:	4a93      	ldr	r2, [pc, #588]	@ (800ffe4 <__ieee754_pow+0x294>)
 800fd96:	f027 4500 	bic.w	r5, r7, #2147483648	@ 0x80000000
 800fd9a:	4295      	cmp	r5, r2
 800fd9c:	46b8      	mov	r8, r7
 800fd9e:	4633      	mov	r3, r6
 800fda0:	d80a      	bhi.n	800fdb8 <__ieee754_pow+0x68>
 800fda2:	d104      	bne.n	800fdae <__ieee754_pow+0x5e>
 800fda4:	2e00      	cmp	r6, #0
 800fda6:	d1ea      	bne.n	800fd7e <__ieee754_pow+0x2e>
 800fda8:	45aa      	cmp	sl, r5
 800fdaa:	d8e8      	bhi.n	800fd7e <__ieee754_pow+0x2e>
 800fdac:	e001      	b.n	800fdb2 <__ieee754_pow+0x62>
 800fdae:	4592      	cmp	sl, r2
 800fdb0:	d802      	bhi.n	800fdb8 <__ieee754_pow+0x68>
 800fdb2:	4592      	cmp	sl, r2
 800fdb4:	d10f      	bne.n	800fdd6 <__ieee754_pow+0x86>
 800fdb6:	b171      	cbz	r1, 800fdd6 <__ieee754_pow+0x86>
 800fdb8:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 800fdbc:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 800fdc0:	ea58 0803 	orrs.w	r8, r8, r3
 800fdc4:	d1db      	bne.n	800fd7e <__ieee754_pow+0x2e>
 800fdc6:	e9dd 3200 	ldrd	r3, r2, [sp]
 800fdca:	18db      	adds	r3, r3, r3
 800fdcc:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 800fdd0:	4152      	adcs	r2, r2
 800fdd2:	4598      	cmp	r8, r3
 800fdd4:	e7cf      	b.n	800fd76 <__ieee754_pow+0x26>
 800fdd6:	f1b8 0f00 	cmp.w	r8, #0
 800fdda:	46ab      	mov	fp, r5
 800fddc:	da43      	bge.n	800fe66 <__ieee754_pow+0x116>
 800fdde:	4a82      	ldr	r2, [pc, #520]	@ (800ffe8 <__ieee754_pow+0x298>)
 800fde0:	4592      	cmp	sl, r2
 800fde2:	d856      	bhi.n	800fe92 <__ieee754_pow+0x142>
 800fde4:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 800fde8:	4592      	cmp	sl, r2
 800fdea:	f240 84c5 	bls.w	8010778 <__ieee754_pow+0xa28>
 800fdee:	ea4f 522a 	mov.w	r2, sl, asr #20
 800fdf2:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800fdf6:	2a14      	cmp	r2, #20
 800fdf8:	dd18      	ble.n	800fe2c <__ieee754_pow+0xdc>
 800fdfa:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 800fdfe:	fa21 f402 	lsr.w	r4, r1, r2
 800fe02:	fa04 f202 	lsl.w	r2, r4, r2
 800fe06:	428a      	cmp	r2, r1
 800fe08:	f040 84b6 	bne.w	8010778 <__ieee754_pow+0xa28>
 800fe0c:	f004 0401 	and.w	r4, r4, #1
 800fe10:	f1c4 0402 	rsb	r4, r4, #2
 800fe14:	2900      	cmp	r1, #0
 800fe16:	d159      	bne.n	800fecc <__ieee754_pow+0x17c>
 800fe18:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 800fe1c:	d148      	bne.n	800feb0 <__ieee754_pow+0x160>
 800fe1e:	4632      	mov	r2, r6
 800fe20:	463b      	mov	r3, r7
 800fe22:	4630      	mov	r0, r6
 800fe24:	4639      	mov	r1, r7
 800fe26:	f7f0 fbb3 	bl	8000590 <__aeabi_dmul>
 800fe2a:	e7ae      	b.n	800fd8a <__ieee754_pow+0x3a>
 800fe2c:	2900      	cmp	r1, #0
 800fe2e:	d14c      	bne.n	800feca <__ieee754_pow+0x17a>
 800fe30:	f1c2 0214 	rsb	r2, r2, #20
 800fe34:	fa4a f402 	asr.w	r4, sl, r2
 800fe38:	fa04 f202 	lsl.w	r2, r4, r2
 800fe3c:	4552      	cmp	r2, sl
 800fe3e:	f040 8498 	bne.w	8010772 <__ieee754_pow+0xa22>
 800fe42:	f004 0401 	and.w	r4, r4, #1
 800fe46:	f1c4 0402 	rsb	r4, r4, #2
 800fe4a:	4a68      	ldr	r2, [pc, #416]	@ (800ffec <__ieee754_pow+0x29c>)
 800fe4c:	4592      	cmp	sl, r2
 800fe4e:	d1e3      	bne.n	800fe18 <__ieee754_pow+0xc8>
 800fe50:	f1b9 0f00 	cmp.w	r9, #0
 800fe54:	f280 8489 	bge.w	801076a <__ieee754_pow+0xa1a>
 800fe58:	4964      	ldr	r1, [pc, #400]	@ (800ffec <__ieee754_pow+0x29c>)
 800fe5a:	4632      	mov	r2, r6
 800fe5c:	463b      	mov	r3, r7
 800fe5e:	2000      	movs	r0, #0
 800fe60:	f7f0 fcc0 	bl	80007e4 <__aeabi_ddiv>
 800fe64:	e791      	b.n	800fd8a <__ieee754_pow+0x3a>
 800fe66:	2400      	movs	r4, #0
 800fe68:	bb81      	cbnz	r1, 800fecc <__ieee754_pow+0x17c>
 800fe6a:	4a5e      	ldr	r2, [pc, #376]	@ (800ffe4 <__ieee754_pow+0x294>)
 800fe6c:	4592      	cmp	sl, r2
 800fe6e:	d1ec      	bne.n	800fe4a <__ieee754_pow+0xfa>
 800fe70:	f105 4240 	add.w	r2, r5, #3221225472	@ 0xc0000000
 800fe74:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 800fe78:	431a      	orrs	r2, r3
 800fe7a:	f000 846e 	beq.w	801075a <__ieee754_pow+0xa0a>
 800fe7e:	4b5c      	ldr	r3, [pc, #368]	@ (800fff0 <__ieee754_pow+0x2a0>)
 800fe80:	429d      	cmp	r5, r3
 800fe82:	d908      	bls.n	800fe96 <__ieee754_pow+0x146>
 800fe84:	f1b9 0f00 	cmp.w	r9, #0
 800fe88:	f280 846b 	bge.w	8010762 <__ieee754_pow+0xa12>
 800fe8c:	2000      	movs	r0, #0
 800fe8e:	2100      	movs	r1, #0
 800fe90:	e77b      	b.n	800fd8a <__ieee754_pow+0x3a>
 800fe92:	2402      	movs	r4, #2
 800fe94:	e7e8      	b.n	800fe68 <__ieee754_pow+0x118>
 800fe96:	f1b9 0f00 	cmp.w	r9, #0
 800fe9a:	f04f 0000 	mov.w	r0, #0
 800fe9e:	f04f 0100 	mov.w	r1, #0
 800fea2:	f6bf af72 	bge.w	800fd8a <__ieee754_pow+0x3a>
 800fea6:	e9dd 0300 	ldrd	r0, r3, [sp]
 800feaa:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800feae:	e76c      	b.n	800fd8a <__ieee754_pow+0x3a>
 800feb0:	4a50      	ldr	r2, [pc, #320]	@ (800fff4 <__ieee754_pow+0x2a4>)
 800feb2:	4591      	cmp	r9, r2
 800feb4:	d10a      	bne.n	800fecc <__ieee754_pow+0x17c>
 800feb6:	f1b8 0f00 	cmp.w	r8, #0
 800feba:	db07      	blt.n	800fecc <__ieee754_pow+0x17c>
 800febc:	ec47 6b10 	vmov	d0, r6, r7
 800fec0:	b011      	add	sp, #68	@ 0x44
 800fec2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fec6:	f7ff bc0b 	b.w	800f6e0 <__ieee754_sqrt>
 800feca:	2400      	movs	r4, #0
 800fecc:	ec47 6b10 	vmov	d0, r6, r7
 800fed0:	9302      	str	r3, [sp, #8]
 800fed2:	f7ff fb3f 	bl	800f554 <fabs>
 800fed6:	9b02      	ldr	r3, [sp, #8]
 800fed8:	ec51 0b10 	vmov	r0, r1, d0
 800fedc:	bb43      	cbnz	r3, 800ff30 <__ieee754_pow+0x1e0>
 800fede:	4b43      	ldr	r3, [pc, #268]	@ (800ffec <__ieee754_pow+0x29c>)
 800fee0:	f028 4240 	bic.w	r2, r8, #3221225472	@ 0xc0000000
 800fee4:	429a      	cmp	r2, r3
 800fee6:	d000      	beq.n	800feea <__ieee754_pow+0x19a>
 800fee8:	bb15      	cbnz	r5, 800ff30 <__ieee754_pow+0x1e0>
 800feea:	f1b9 0f00 	cmp.w	r9, #0
 800feee:	da05      	bge.n	800fefc <__ieee754_pow+0x1ac>
 800fef0:	4602      	mov	r2, r0
 800fef2:	460b      	mov	r3, r1
 800fef4:	2000      	movs	r0, #0
 800fef6:	493d      	ldr	r1, [pc, #244]	@ (800ffec <__ieee754_pow+0x29c>)
 800fef8:	f7f0 fc74 	bl	80007e4 <__aeabi_ddiv>
 800fefc:	f1b8 0f00 	cmp.w	r8, #0
 800ff00:	f6bf af43 	bge.w	800fd8a <__ieee754_pow+0x3a>
 800ff04:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 800ff08:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 800ff0c:	4325      	orrs	r5, r4
 800ff0e:	d108      	bne.n	800ff22 <__ieee754_pow+0x1d2>
 800ff10:	4602      	mov	r2, r0
 800ff12:	460b      	mov	r3, r1
 800ff14:	4610      	mov	r0, r2
 800ff16:	4619      	mov	r1, r3
 800ff18:	f7f0 f982 	bl	8000220 <__aeabi_dsub>
 800ff1c:	4602      	mov	r2, r0
 800ff1e:	460b      	mov	r3, r1
 800ff20:	e79e      	b.n	800fe60 <__ieee754_pow+0x110>
 800ff22:	2c01      	cmp	r4, #1
 800ff24:	f47f af31 	bne.w	800fd8a <__ieee754_pow+0x3a>
 800ff28:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ff2c:	4619      	mov	r1, r3
 800ff2e:	e72c      	b.n	800fd8a <__ieee754_pow+0x3a>
 800ff30:	ea4f 73d8 	mov.w	r3, r8, lsr #31
 800ff34:	3b01      	subs	r3, #1
 800ff36:	ea53 0204 	orrs.w	r2, r3, r4
 800ff3a:	d102      	bne.n	800ff42 <__ieee754_pow+0x1f2>
 800ff3c:	4632      	mov	r2, r6
 800ff3e:	463b      	mov	r3, r7
 800ff40:	e7e8      	b.n	800ff14 <__ieee754_pow+0x1c4>
 800ff42:	3c01      	subs	r4, #1
 800ff44:	431c      	orrs	r4, r3
 800ff46:	d016      	beq.n	800ff76 <__ieee754_pow+0x226>
 800ff48:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800ffd0 <__ieee754_pow+0x280>
 800ff4c:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 800ff50:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ff54:	f240 8110 	bls.w	8010178 <__ieee754_pow+0x428>
 800ff58:	4b27      	ldr	r3, [pc, #156]	@ (800fff8 <__ieee754_pow+0x2a8>)
 800ff5a:	459a      	cmp	sl, r3
 800ff5c:	4b24      	ldr	r3, [pc, #144]	@ (800fff0 <__ieee754_pow+0x2a0>)
 800ff5e:	d916      	bls.n	800ff8e <__ieee754_pow+0x23e>
 800ff60:	429d      	cmp	r5, r3
 800ff62:	d80b      	bhi.n	800ff7c <__ieee754_pow+0x22c>
 800ff64:	f1b9 0f00 	cmp.w	r9, #0
 800ff68:	da0b      	bge.n	800ff82 <__ieee754_pow+0x232>
 800ff6a:	2000      	movs	r0, #0
 800ff6c:	b011      	add	sp, #68	@ 0x44
 800ff6e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff72:	f000 bec1 	b.w	8010cf8 <__math_oflow>
 800ff76:	ed9f 7b18 	vldr	d7, [pc, #96]	@ 800ffd8 <__ieee754_pow+0x288>
 800ff7a:	e7e7      	b.n	800ff4c <__ieee754_pow+0x1fc>
 800ff7c:	f1b9 0f00 	cmp.w	r9, #0
 800ff80:	dcf3      	bgt.n	800ff6a <__ieee754_pow+0x21a>
 800ff82:	2000      	movs	r0, #0
 800ff84:	b011      	add	sp, #68	@ 0x44
 800ff86:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff8a:	f000 bead 	b.w	8010ce8 <__math_uflow>
 800ff8e:	429d      	cmp	r5, r3
 800ff90:	d20c      	bcs.n	800ffac <__ieee754_pow+0x25c>
 800ff92:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ff96:	2200      	movs	r2, #0
 800ff98:	2300      	movs	r3, #0
 800ff9a:	f7f0 fd6b 	bl	8000a74 <__aeabi_dcmplt>
 800ff9e:	3800      	subs	r0, #0
 800ffa0:	bf18      	it	ne
 800ffa2:	2001      	movne	r0, #1
 800ffa4:	f1b9 0f00 	cmp.w	r9, #0
 800ffa8:	daec      	bge.n	800ff84 <__ieee754_pow+0x234>
 800ffaa:	e7df      	b.n	800ff6c <__ieee754_pow+0x21c>
 800ffac:	4b0f      	ldr	r3, [pc, #60]	@ (800ffec <__ieee754_pow+0x29c>)
 800ffae:	429d      	cmp	r5, r3
 800ffb0:	f04f 0200 	mov.w	r2, #0
 800ffb4:	d922      	bls.n	800fffc <__ieee754_pow+0x2ac>
 800ffb6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ffba:	2300      	movs	r3, #0
 800ffbc:	f7f0 fd5a 	bl	8000a74 <__aeabi_dcmplt>
 800ffc0:	3800      	subs	r0, #0
 800ffc2:	bf18      	it	ne
 800ffc4:	2001      	movne	r0, #1
 800ffc6:	f1b9 0f00 	cmp.w	r9, #0
 800ffca:	dccf      	bgt.n	800ff6c <__ieee754_pow+0x21c>
 800ffcc:	e7da      	b.n	800ff84 <__ieee754_pow+0x234>
 800ffce:	bf00      	nop
 800ffd0:	00000000 	.word	0x00000000
 800ffd4:	3ff00000 	.word	0x3ff00000
 800ffd8:	00000000 	.word	0x00000000
 800ffdc:	bff00000 	.word	0xbff00000
 800ffe0:	fff00000 	.word	0xfff00000
 800ffe4:	7ff00000 	.word	0x7ff00000
 800ffe8:	433fffff 	.word	0x433fffff
 800ffec:	3ff00000 	.word	0x3ff00000
 800fff0:	3fefffff 	.word	0x3fefffff
 800fff4:	3fe00000 	.word	0x3fe00000
 800fff8:	43f00000 	.word	0x43f00000
 800fffc:	4b5a      	ldr	r3, [pc, #360]	@ (8010168 <__ieee754_pow+0x418>)
 800fffe:	f7f0 f90f 	bl	8000220 <__aeabi_dsub>
 8010002:	a351      	add	r3, pc, #324	@ (adr r3, 8010148 <__ieee754_pow+0x3f8>)
 8010004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010008:	4604      	mov	r4, r0
 801000a:	460d      	mov	r5, r1
 801000c:	f7f0 fac0 	bl	8000590 <__aeabi_dmul>
 8010010:	a34f      	add	r3, pc, #316	@ (adr r3, 8010150 <__ieee754_pow+0x400>)
 8010012:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010016:	4606      	mov	r6, r0
 8010018:	460f      	mov	r7, r1
 801001a:	4620      	mov	r0, r4
 801001c:	4629      	mov	r1, r5
 801001e:	f7f0 fab7 	bl	8000590 <__aeabi_dmul>
 8010022:	4b52      	ldr	r3, [pc, #328]	@ (801016c <__ieee754_pow+0x41c>)
 8010024:	4682      	mov	sl, r0
 8010026:	468b      	mov	fp, r1
 8010028:	2200      	movs	r2, #0
 801002a:	4620      	mov	r0, r4
 801002c:	4629      	mov	r1, r5
 801002e:	f7f0 faaf 	bl	8000590 <__aeabi_dmul>
 8010032:	4602      	mov	r2, r0
 8010034:	460b      	mov	r3, r1
 8010036:	a148      	add	r1, pc, #288	@ (adr r1, 8010158 <__ieee754_pow+0x408>)
 8010038:	e9d1 0100 	ldrd	r0, r1, [r1]
 801003c:	f7f0 f8f0 	bl	8000220 <__aeabi_dsub>
 8010040:	4622      	mov	r2, r4
 8010042:	462b      	mov	r3, r5
 8010044:	f7f0 faa4 	bl	8000590 <__aeabi_dmul>
 8010048:	4602      	mov	r2, r0
 801004a:	460b      	mov	r3, r1
 801004c:	2000      	movs	r0, #0
 801004e:	4948      	ldr	r1, [pc, #288]	@ (8010170 <__ieee754_pow+0x420>)
 8010050:	f7f0 f8e6 	bl	8000220 <__aeabi_dsub>
 8010054:	4622      	mov	r2, r4
 8010056:	4680      	mov	r8, r0
 8010058:	4689      	mov	r9, r1
 801005a:	462b      	mov	r3, r5
 801005c:	4620      	mov	r0, r4
 801005e:	4629      	mov	r1, r5
 8010060:	f7f0 fa96 	bl	8000590 <__aeabi_dmul>
 8010064:	4602      	mov	r2, r0
 8010066:	460b      	mov	r3, r1
 8010068:	4640      	mov	r0, r8
 801006a:	4649      	mov	r1, r9
 801006c:	f7f0 fa90 	bl	8000590 <__aeabi_dmul>
 8010070:	a33b      	add	r3, pc, #236	@ (adr r3, 8010160 <__ieee754_pow+0x410>)
 8010072:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010076:	f7f0 fa8b 	bl	8000590 <__aeabi_dmul>
 801007a:	4602      	mov	r2, r0
 801007c:	460b      	mov	r3, r1
 801007e:	4650      	mov	r0, sl
 8010080:	4659      	mov	r1, fp
 8010082:	f7f0 f8cd 	bl	8000220 <__aeabi_dsub>
 8010086:	4602      	mov	r2, r0
 8010088:	460b      	mov	r3, r1
 801008a:	4680      	mov	r8, r0
 801008c:	4689      	mov	r9, r1
 801008e:	4630      	mov	r0, r6
 8010090:	4639      	mov	r1, r7
 8010092:	f7f0 f8c7 	bl	8000224 <__adddf3>
 8010096:	2400      	movs	r4, #0
 8010098:	4632      	mov	r2, r6
 801009a:	463b      	mov	r3, r7
 801009c:	4620      	mov	r0, r4
 801009e:	460d      	mov	r5, r1
 80100a0:	f7f0 f8be 	bl	8000220 <__aeabi_dsub>
 80100a4:	4602      	mov	r2, r0
 80100a6:	460b      	mov	r3, r1
 80100a8:	4640      	mov	r0, r8
 80100aa:	4649      	mov	r1, r9
 80100ac:	f7f0 f8b8 	bl	8000220 <__aeabi_dsub>
 80100b0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80100b4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80100b8:	2300      	movs	r3, #0
 80100ba:	9304      	str	r3, [sp, #16]
 80100bc:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 80100c0:	4606      	mov	r6, r0
 80100c2:	460f      	mov	r7, r1
 80100c4:	465b      	mov	r3, fp
 80100c6:	4652      	mov	r2, sl
 80100c8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80100cc:	f7f0 f8a8 	bl	8000220 <__aeabi_dsub>
 80100d0:	4622      	mov	r2, r4
 80100d2:	462b      	mov	r3, r5
 80100d4:	f7f0 fa5c 	bl	8000590 <__aeabi_dmul>
 80100d8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80100dc:	4680      	mov	r8, r0
 80100de:	4689      	mov	r9, r1
 80100e0:	4630      	mov	r0, r6
 80100e2:	4639      	mov	r1, r7
 80100e4:	f7f0 fa54 	bl	8000590 <__aeabi_dmul>
 80100e8:	4602      	mov	r2, r0
 80100ea:	460b      	mov	r3, r1
 80100ec:	4640      	mov	r0, r8
 80100ee:	4649      	mov	r1, r9
 80100f0:	f7f0 f898 	bl	8000224 <__adddf3>
 80100f4:	465b      	mov	r3, fp
 80100f6:	4606      	mov	r6, r0
 80100f8:	460f      	mov	r7, r1
 80100fa:	4652      	mov	r2, sl
 80100fc:	4620      	mov	r0, r4
 80100fe:	4629      	mov	r1, r5
 8010100:	f7f0 fa46 	bl	8000590 <__aeabi_dmul>
 8010104:	460b      	mov	r3, r1
 8010106:	4602      	mov	r2, r0
 8010108:	4680      	mov	r8, r0
 801010a:	4689      	mov	r9, r1
 801010c:	4630      	mov	r0, r6
 801010e:	4639      	mov	r1, r7
 8010110:	f7f0 f888 	bl	8000224 <__adddf3>
 8010114:	4b17      	ldr	r3, [pc, #92]	@ (8010174 <__ieee754_pow+0x424>)
 8010116:	4299      	cmp	r1, r3
 8010118:	4604      	mov	r4, r0
 801011a:	460d      	mov	r5, r1
 801011c:	468b      	mov	fp, r1
 801011e:	f340 820b 	ble.w	8010538 <__ieee754_pow+0x7e8>
 8010122:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8010126:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 801012a:	4303      	orrs	r3, r0
 801012c:	f000 81ea 	beq.w	8010504 <__ieee754_pow+0x7b4>
 8010130:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010134:	2200      	movs	r2, #0
 8010136:	2300      	movs	r3, #0
 8010138:	f7f0 fc9c 	bl	8000a74 <__aeabi_dcmplt>
 801013c:	3800      	subs	r0, #0
 801013e:	bf18      	it	ne
 8010140:	2001      	movne	r0, #1
 8010142:	e713      	b.n	800ff6c <__ieee754_pow+0x21c>
 8010144:	f3af 8000 	nop.w
 8010148:	60000000 	.word	0x60000000
 801014c:	3ff71547 	.word	0x3ff71547
 8010150:	f85ddf44 	.word	0xf85ddf44
 8010154:	3e54ae0b 	.word	0x3e54ae0b
 8010158:	55555555 	.word	0x55555555
 801015c:	3fd55555 	.word	0x3fd55555
 8010160:	652b82fe 	.word	0x652b82fe
 8010164:	3ff71547 	.word	0x3ff71547
 8010168:	3ff00000 	.word	0x3ff00000
 801016c:	3fd00000 	.word	0x3fd00000
 8010170:	3fe00000 	.word	0x3fe00000
 8010174:	408fffff 	.word	0x408fffff
 8010178:	4bd5      	ldr	r3, [pc, #852]	@ (80104d0 <__ieee754_pow+0x780>)
 801017a:	ea08 0303 	and.w	r3, r8, r3
 801017e:	2200      	movs	r2, #0
 8010180:	b92b      	cbnz	r3, 801018e <__ieee754_pow+0x43e>
 8010182:	4bd4      	ldr	r3, [pc, #848]	@ (80104d4 <__ieee754_pow+0x784>)
 8010184:	f7f0 fa04 	bl	8000590 <__aeabi_dmul>
 8010188:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 801018c:	468b      	mov	fp, r1
 801018e:	ea4f 532b 	mov.w	r3, fp, asr #20
 8010192:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8010196:	4413      	add	r3, r2
 8010198:	930a      	str	r3, [sp, #40]	@ 0x28
 801019a:	4bcf      	ldr	r3, [pc, #828]	@ (80104d8 <__ieee754_pow+0x788>)
 801019c:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 80101a0:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 80101a4:	459b      	cmp	fp, r3
 80101a6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80101aa:	dd08      	ble.n	80101be <__ieee754_pow+0x46e>
 80101ac:	4bcb      	ldr	r3, [pc, #812]	@ (80104dc <__ieee754_pow+0x78c>)
 80101ae:	459b      	cmp	fp, r3
 80101b0:	f340 81a5 	ble.w	80104fe <__ieee754_pow+0x7ae>
 80101b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80101b6:	3301      	adds	r3, #1
 80101b8:	930a      	str	r3, [sp, #40]	@ 0x28
 80101ba:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 80101be:	f04f 0a00 	mov.w	sl, #0
 80101c2:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 80101c6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80101c8:	4bc5      	ldr	r3, [pc, #788]	@ (80104e0 <__ieee754_pow+0x790>)
 80101ca:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80101ce:	ed93 7b00 	vldr	d7, [r3]
 80101d2:	4629      	mov	r1, r5
 80101d4:	ec53 2b17 	vmov	r2, r3, d7
 80101d8:	ed8d 7b06 	vstr	d7, [sp, #24]
 80101dc:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80101e0:	f7f0 f81e 	bl	8000220 <__aeabi_dsub>
 80101e4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80101e8:	4606      	mov	r6, r0
 80101ea:	460f      	mov	r7, r1
 80101ec:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80101f0:	f7f0 f818 	bl	8000224 <__adddf3>
 80101f4:	4602      	mov	r2, r0
 80101f6:	460b      	mov	r3, r1
 80101f8:	2000      	movs	r0, #0
 80101fa:	49ba      	ldr	r1, [pc, #744]	@ (80104e4 <__ieee754_pow+0x794>)
 80101fc:	f7f0 faf2 	bl	80007e4 <__aeabi_ddiv>
 8010200:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8010204:	4602      	mov	r2, r0
 8010206:	460b      	mov	r3, r1
 8010208:	4630      	mov	r0, r6
 801020a:	4639      	mov	r1, r7
 801020c:	f7f0 f9c0 	bl	8000590 <__aeabi_dmul>
 8010210:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010214:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 8010218:	106d      	asrs	r5, r5, #1
 801021a:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 801021e:	f04f 0b00 	mov.w	fp, #0
 8010222:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8010226:	4661      	mov	r1, ip
 8010228:	2200      	movs	r2, #0
 801022a:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 801022e:	4658      	mov	r0, fp
 8010230:	46e1      	mov	r9, ip
 8010232:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 8010236:	4614      	mov	r4, r2
 8010238:	461d      	mov	r5, r3
 801023a:	f7f0 f9a9 	bl	8000590 <__aeabi_dmul>
 801023e:	4602      	mov	r2, r0
 8010240:	460b      	mov	r3, r1
 8010242:	4630      	mov	r0, r6
 8010244:	4639      	mov	r1, r7
 8010246:	f7ef ffeb 	bl	8000220 <__aeabi_dsub>
 801024a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801024e:	4606      	mov	r6, r0
 8010250:	460f      	mov	r7, r1
 8010252:	4620      	mov	r0, r4
 8010254:	4629      	mov	r1, r5
 8010256:	f7ef ffe3 	bl	8000220 <__aeabi_dsub>
 801025a:	4602      	mov	r2, r0
 801025c:	460b      	mov	r3, r1
 801025e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8010262:	f7ef ffdd 	bl	8000220 <__aeabi_dsub>
 8010266:	465a      	mov	r2, fp
 8010268:	464b      	mov	r3, r9
 801026a:	f7f0 f991 	bl	8000590 <__aeabi_dmul>
 801026e:	4602      	mov	r2, r0
 8010270:	460b      	mov	r3, r1
 8010272:	4630      	mov	r0, r6
 8010274:	4639      	mov	r1, r7
 8010276:	f7ef ffd3 	bl	8000220 <__aeabi_dsub>
 801027a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 801027e:	f7f0 f987 	bl	8000590 <__aeabi_dmul>
 8010282:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010286:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801028a:	4610      	mov	r0, r2
 801028c:	4619      	mov	r1, r3
 801028e:	f7f0 f97f 	bl	8000590 <__aeabi_dmul>
 8010292:	a37d      	add	r3, pc, #500	@ (adr r3, 8010488 <__ieee754_pow+0x738>)
 8010294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010298:	4604      	mov	r4, r0
 801029a:	460d      	mov	r5, r1
 801029c:	f7f0 f978 	bl	8000590 <__aeabi_dmul>
 80102a0:	a37b      	add	r3, pc, #492	@ (adr r3, 8010490 <__ieee754_pow+0x740>)
 80102a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102a6:	f7ef ffbd 	bl	8000224 <__adddf3>
 80102aa:	4622      	mov	r2, r4
 80102ac:	462b      	mov	r3, r5
 80102ae:	f7f0 f96f 	bl	8000590 <__aeabi_dmul>
 80102b2:	a379      	add	r3, pc, #484	@ (adr r3, 8010498 <__ieee754_pow+0x748>)
 80102b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102b8:	f7ef ffb4 	bl	8000224 <__adddf3>
 80102bc:	4622      	mov	r2, r4
 80102be:	462b      	mov	r3, r5
 80102c0:	f7f0 f966 	bl	8000590 <__aeabi_dmul>
 80102c4:	a376      	add	r3, pc, #472	@ (adr r3, 80104a0 <__ieee754_pow+0x750>)
 80102c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102ca:	f7ef ffab 	bl	8000224 <__adddf3>
 80102ce:	4622      	mov	r2, r4
 80102d0:	462b      	mov	r3, r5
 80102d2:	f7f0 f95d 	bl	8000590 <__aeabi_dmul>
 80102d6:	a374      	add	r3, pc, #464	@ (adr r3, 80104a8 <__ieee754_pow+0x758>)
 80102d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102dc:	f7ef ffa2 	bl	8000224 <__adddf3>
 80102e0:	4622      	mov	r2, r4
 80102e2:	462b      	mov	r3, r5
 80102e4:	f7f0 f954 	bl	8000590 <__aeabi_dmul>
 80102e8:	a371      	add	r3, pc, #452	@ (adr r3, 80104b0 <__ieee754_pow+0x760>)
 80102ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102ee:	f7ef ff99 	bl	8000224 <__adddf3>
 80102f2:	4622      	mov	r2, r4
 80102f4:	4606      	mov	r6, r0
 80102f6:	460f      	mov	r7, r1
 80102f8:	462b      	mov	r3, r5
 80102fa:	4620      	mov	r0, r4
 80102fc:	4629      	mov	r1, r5
 80102fe:	f7f0 f947 	bl	8000590 <__aeabi_dmul>
 8010302:	4602      	mov	r2, r0
 8010304:	460b      	mov	r3, r1
 8010306:	4630      	mov	r0, r6
 8010308:	4639      	mov	r1, r7
 801030a:	f7f0 f941 	bl	8000590 <__aeabi_dmul>
 801030e:	465a      	mov	r2, fp
 8010310:	4604      	mov	r4, r0
 8010312:	460d      	mov	r5, r1
 8010314:	464b      	mov	r3, r9
 8010316:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801031a:	f7ef ff83 	bl	8000224 <__adddf3>
 801031e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010322:	f7f0 f935 	bl	8000590 <__aeabi_dmul>
 8010326:	4622      	mov	r2, r4
 8010328:	462b      	mov	r3, r5
 801032a:	f7ef ff7b 	bl	8000224 <__adddf3>
 801032e:	465a      	mov	r2, fp
 8010330:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8010334:	464b      	mov	r3, r9
 8010336:	4658      	mov	r0, fp
 8010338:	4649      	mov	r1, r9
 801033a:	f7f0 f929 	bl	8000590 <__aeabi_dmul>
 801033e:	4b6a      	ldr	r3, [pc, #424]	@ (80104e8 <__ieee754_pow+0x798>)
 8010340:	2200      	movs	r2, #0
 8010342:	4606      	mov	r6, r0
 8010344:	460f      	mov	r7, r1
 8010346:	f7ef ff6d 	bl	8000224 <__adddf3>
 801034a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801034e:	f7ef ff69 	bl	8000224 <__adddf3>
 8010352:	46d8      	mov	r8, fp
 8010354:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 8010358:	460d      	mov	r5, r1
 801035a:	465a      	mov	r2, fp
 801035c:	460b      	mov	r3, r1
 801035e:	4640      	mov	r0, r8
 8010360:	4649      	mov	r1, r9
 8010362:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 8010366:	f7f0 f913 	bl	8000590 <__aeabi_dmul>
 801036a:	465c      	mov	r4, fp
 801036c:	4680      	mov	r8, r0
 801036e:	4689      	mov	r9, r1
 8010370:	4b5d      	ldr	r3, [pc, #372]	@ (80104e8 <__ieee754_pow+0x798>)
 8010372:	2200      	movs	r2, #0
 8010374:	4620      	mov	r0, r4
 8010376:	4629      	mov	r1, r5
 8010378:	f7ef ff52 	bl	8000220 <__aeabi_dsub>
 801037c:	4632      	mov	r2, r6
 801037e:	463b      	mov	r3, r7
 8010380:	f7ef ff4e 	bl	8000220 <__aeabi_dsub>
 8010384:	4602      	mov	r2, r0
 8010386:	460b      	mov	r3, r1
 8010388:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801038c:	f7ef ff48 	bl	8000220 <__aeabi_dsub>
 8010390:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010394:	f7f0 f8fc 	bl	8000590 <__aeabi_dmul>
 8010398:	4622      	mov	r2, r4
 801039a:	4606      	mov	r6, r0
 801039c:	460f      	mov	r7, r1
 801039e:	462b      	mov	r3, r5
 80103a0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80103a4:	f7f0 f8f4 	bl	8000590 <__aeabi_dmul>
 80103a8:	4602      	mov	r2, r0
 80103aa:	460b      	mov	r3, r1
 80103ac:	4630      	mov	r0, r6
 80103ae:	4639      	mov	r1, r7
 80103b0:	f7ef ff38 	bl	8000224 <__adddf3>
 80103b4:	4606      	mov	r6, r0
 80103b6:	460f      	mov	r7, r1
 80103b8:	4602      	mov	r2, r0
 80103ba:	460b      	mov	r3, r1
 80103bc:	4640      	mov	r0, r8
 80103be:	4649      	mov	r1, r9
 80103c0:	f7ef ff30 	bl	8000224 <__adddf3>
 80103c4:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 80103c8:	a33b      	add	r3, pc, #236	@ (adr r3, 80104b8 <__ieee754_pow+0x768>)
 80103ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103ce:	4658      	mov	r0, fp
 80103d0:	e9cd bc08 	strd	fp, ip, [sp, #32]
 80103d4:	460d      	mov	r5, r1
 80103d6:	f7f0 f8db 	bl	8000590 <__aeabi_dmul>
 80103da:	465c      	mov	r4, fp
 80103dc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80103e0:	4642      	mov	r2, r8
 80103e2:	464b      	mov	r3, r9
 80103e4:	4620      	mov	r0, r4
 80103e6:	4629      	mov	r1, r5
 80103e8:	f7ef ff1a 	bl	8000220 <__aeabi_dsub>
 80103ec:	4602      	mov	r2, r0
 80103ee:	460b      	mov	r3, r1
 80103f0:	4630      	mov	r0, r6
 80103f2:	4639      	mov	r1, r7
 80103f4:	f7ef ff14 	bl	8000220 <__aeabi_dsub>
 80103f8:	a331      	add	r3, pc, #196	@ (adr r3, 80104c0 <__ieee754_pow+0x770>)
 80103fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103fe:	f7f0 f8c7 	bl	8000590 <__aeabi_dmul>
 8010402:	a331      	add	r3, pc, #196	@ (adr r3, 80104c8 <__ieee754_pow+0x778>)
 8010404:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010408:	4606      	mov	r6, r0
 801040a:	460f      	mov	r7, r1
 801040c:	4620      	mov	r0, r4
 801040e:	4629      	mov	r1, r5
 8010410:	f7f0 f8be 	bl	8000590 <__aeabi_dmul>
 8010414:	4602      	mov	r2, r0
 8010416:	460b      	mov	r3, r1
 8010418:	4630      	mov	r0, r6
 801041a:	4639      	mov	r1, r7
 801041c:	f7ef ff02 	bl	8000224 <__adddf3>
 8010420:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8010422:	4b32      	ldr	r3, [pc, #200]	@ (80104ec <__ieee754_pow+0x79c>)
 8010424:	4413      	add	r3, r2
 8010426:	e9d3 2300 	ldrd	r2, r3, [r3]
 801042a:	f7ef fefb 	bl	8000224 <__adddf3>
 801042e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8010432:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8010434:	f7f0 f842 	bl	80004bc <__aeabi_i2d>
 8010438:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801043a:	4b2d      	ldr	r3, [pc, #180]	@ (80104f0 <__ieee754_pow+0x7a0>)
 801043c:	4413      	add	r3, r2
 801043e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010442:	4606      	mov	r6, r0
 8010444:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010448:	460f      	mov	r7, r1
 801044a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801044e:	f7ef fee9 	bl	8000224 <__adddf3>
 8010452:	4642      	mov	r2, r8
 8010454:	464b      	mov	r3, r9
 8010456:	f7ef fee5 	bl	8000224 <__adddf3>
 801045a:	4632      	mov	r2, r6
 801045c:	463b      	mov	r3, r7
 801045e:	f7ef fee1 	bl	8000224 <__adddf3>
 8010462:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 8010466:	4632      	mov	r2, r6
 8010468:	463b      	mov	r3, r7
 801046a:	4658      	mov	r0, fp
 801046c:	460d      	mov	r5, r1
 801046e:	f7ef fed7 	bl	8000220 <__aeabi_dsub>
 8010472:	4642      	mov	r2, r8
 8010474:	464b      	mov	r3, r9
 8010476:	f7ef fed3 	bl	8000220 <__aeabi_dsub>
 801047a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801047e:	f7ef fecf 	bl	8000220 <__aeabi_dsub>
 8010482:	465c      	mov	r4, fp
 8010484:	e036      	b.n	80104f4 <__ieee754_pow+0x7a4>
 8010486:	bf00      	nop
 8010488:	4a454eef 	.word	0x4a454eef
 801048c:	3fca7e28 	.word	0x3fca7e28
 8010490:	93c9db65 	.word	0x93c9db65
 8010494:	3fcd864a 	.word	0x3fcd864a
 8010498:	a91d4101 	.word	0xa91d4101
 801049c:	3fd17460 	.word	0x3fd17460
 80104a0:	518f264d 	.word	0x518f264d
 80104a4:	3fd55555 	.word	0x3fd55555
 80104a8:	db6fabff 	.word	0xdb6fabff
 80104ac:	3fdb6db6 	.word	0x3fdb6db6
 80104b0:	33333303 	.word	0x33333303
 80104b4:	3fe33333 	.word	0x3fe33333
 80104b8:	e0000000 	.word	0xe0000000
 80104bc:	3feec709 	.word	0x3feec709
 80104c0:	dc3a03fd 	.word	0xdc3a03fd
 80104c4:	3feec709 	.word	0x3feec709
 80104c8:	145b01f5 	.word	0x145b01f5
 80104cc:	be3e2fe0 	.word	0xbe3e2fe0
 80104d0:	7ff00000 	.word	0x7ff00000
 80104d4:	43400000 	.word	0x43400000
 80104d8:	0003988e 	.word	0x0003988e
 80104dc:	000bb679 	.word	0x000bb679
 80104e0:	080113c0 	.word	0x080113c0
 80104e4:	3ff00000 	.word	0x3ff00000
 80104e8:	40080000 	.word	0x40080000
 80104ec:	080113a0 	.word	0x080113a0
 80104f0:	080113b0 	.word	0x080113b0
 80104f4:	4602      	mov	r2, r0
 80104f6:	460b      	mov	r3, r1
 80104f8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80104fc:	e5d6      	b.n	80100ac <__ieee754_pow+0x35c>
 80104fe:	f04f 0a01 	mov.w	sl, #1
 8010502:	e65e      	b.n	80101c2 <__ieee754_pow+0x472>
 8010504:	a3b5      	add	r3, pc, #724	@ (adr r3, 80107dc <__ieee754_pow+0xa8c>)
 8010506:	e9d3 2300 	ldrd	r2, r3, [r3]
 801050a:	4630      	mov	r0, r6
 801050c:	4639      	mov	r1, r7
 801050e:	f7ef fe89 	bl	8000224 <__adddf3>
 8010512:	4642      	mov	r2, r8
 8010514:	e9cd 0100 	strd	r0, r1, [sp]
 8010518:	464b      	mov	r3, r9
 801051a:	4620      	mov	r0, r4
 801051c:	4629      	mov	r1, r5
 801051e:	f7ef fe7f 	bl	8000220 <__aeabi_dsub>
 8010522:	4602      	mov	r2, r0
 8010524:	460b      	mov	r3, r1
 8010526:	e9dd 0100 	ldrd	r0, r1, [sp]
 801052a:	f7f0 fac1 	bl	8000ab0 <__aeabi_dcmpgt>
 801052e:	2800      	cmp	r0, #0
 8010530:	f47f adfe 	bne.w	8010130 <__ieee754_pow+0x3e0>
 8010534:	4ba2      	ldr	r3, [pc, #648]	@ (80107c0 <__ieee754_pow+0xa70>)
 8010536:	e022      	b.n	801057e <__ieee754_pow+0x82e>
 8010538:	4ca2      	ldr	r4, [pc, #648]	@ (80107c4 <__ieee754_pow+0xa74>)
 801053a:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801053e:	42a3      	cmp	r3, r4
 8010540:	d919      	bls.n	8010576 <__ieee754_pow+0x826>
 8010542:	4ba1      	ldr	r3, [pc, #644]	@ (80107c8 <__ieee754_pow+0xa78>)
 8010544:	440b      	add	r3, r1
 8010546:	4303      	orrs	r3, r0
 8010548:	d009      	beq.n	801055e <__ieee754_pow+0x80e>
 801054a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801054e:	2200      	movs	r2, #0
 8010550:	2300      	movs	r3, #0
 8010552:	f7f0 fa8f 	bl	8000a74 <__aeabi_dcmplt>
 8010556:	3800      	subs	r0, #0
 8010558:	bf18      	it	ne
 801055a:	2001      	movne	r0, #1
 801055c:	e512      	b.n	800ff84 <__ieee754_pow+0x234>
 801055e:	4642      	mov	r2, r8
 8010560:	464b      	mov	r3, r9
 8010562:	f7ef fe5d 	bl	8000220 <__aeabi_dsub>
 8010566:	4632      	mov	r2, r6
 8010568:	463b      	mov	r3, r7
 801056a:	f7f0 fa97 	bl	8000a9c <__aeabi_dcmpge>
 801056e:	2800      	cmp	r0, #0
 8010570:	d1eb      	bne.n	801054a <__ieee754_pow+0x7fa>
 8010572:	4b96      	ldr	r3, [pc, #600]	@ (80107cc <__ieee754_pow+0xa7c>)
 8010574:	e003      	b.n	801057e <__ieee754_pow+0x82e>
 8010576:	4a96      	ldr	r2, [pc, #600]	@ (80107d0 <__ieee754_pow+0xa80>)
 8010578:	4293      	cmp	r3, r2
 801057a:	f240 80e7 	bls.w	801074c <__ieee754_pow+0x9fc>
 801057e:	151b      	asrs	r3, r3, #20
 8010580:	f2a3 33fe 	subw	r3, r3, #1022	@ 0x3fe
 8010584:	f44f 1a80 	mov.w	sl, #1048576	@ 0x100000
 8010588:	fa4a fa03 	asr.w	sl, sl, r3
 801058c:	44da      	add	sl, fp
 801058e:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8010592:	4890      	ldr	r0, [pc, #576]	@ (80107d4 <__ieee754_pow+0xa84>)
 8010594:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8010598:	4108      	asrs	r0, r1
 801059a:	ea00 030a 	and.w	r3, r0, sl
 801059e:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 80105a2:	f1c1 0114 	rsb	r1, r1, #20
 80105a6:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 80105aa:	fa4a fa01 	asr.w	sl, sl, r1
 80105ae:	f1bb 0f00 	cmp.w	fp, #0
 80105b2:	4640      	mov	r0, r8
 80105b4:	4649      	mov	r1, r9
 80105b6:	f04f 0200 	mov.w	r2, #0
 80105ba:	bfb8      	it	lt
 80105bc:	f1ca 0a00 	rsblt	sl, sl, #0
 80105c0:	f7ef fe2e 	bl	8000220 <__aeabi_dsub>
 80105c4:	4680      	mov	r8, r0
 80105c6:	4689      	mov	r9, r1
 80105c8:	4632      	mov	r2, r6
 80105ca:	463b      	mov	r3, r7
 80105cc:	4640      	mov	r0, r8
 80105ce:	4649      	mov	r1, r9
 80105d0:	f7ef fe28 	bl	8000224 <__adddf3>
 80105d4:	2400      	movs	r4, #0
 80105d6:	a36a      	add	r3, pc, #424	@ (adr r3, 8010780 <__ieee754_pow+0xa30>)
 80105d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105dc:	4620      	mov	r0, r4
 80105de:	460d      	mov	r5, r1
 80105e0:	f7ef ffd6 	bl	8000590 <__aeabi_dmul>
 80105e4:	4642      	mov	r2, r8
 80105e6:	e9cd 0100 	strd	r0, r1, [sp]
 80105ea:	464b      	mov	r3, r9
 80105ec:	4620      	mov	r0, r4
 80105ee:	4629      	mov	r1, r5
 80105f0:	f7ef fe16 	bl	8000220 <__aeabi_dsub>
 80105f4:	4602      	mov	r2, r0
 80105f6:	460b      	mov	r3, r1
 80105f8:	4630      	mov	r0, r6
 80105fa:	4639      	mov	r1, r7
 80105fc:	f7ef fe10 	bl	8000220 <__aeabi_dsub>
 8010600:	a361      	add	r3, pc, #388	@ (adr r3, 8010788 <__ieee754_pow+0xa38>)
 8010602:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010606:	f7ef ffc3 	bl	8000590 <__aeabi_dmul>
 801060a:	a361      	add	r3, pc, #388	@ (adr r3, 8010790 <__ieee754_pow+0xa40>)
 801060c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010610:	4680      	mov	r8, r0
 8010612:	4689      	mov	r9, r1
 8010614:	4620      	mov	r0, r4
 8010616:	4629      	mov	r1, r5
 8010618:	f7ef ffba 	bl	8000590 <__aeabi_dmul>
 801061c:	4602      	mov	r2, r0
 801061e:	460b      	mov	r3, r1
 8010620:	4640      	mov	r0, r8
 8010622:	4649      	mov	r1, r9
 8010624:	f7ef fdfe 	bl	8000224 <__adddf3>
 8010628:	4604      	mov	r4, r0
 801062a:	460d      	mov	r5, r1
 801062c:	4602      	mov	r2, r0
 801062e:	460b      	mov	r3, r1
 8010630:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010634:	f7ef fdf6 	bl	8000224 <__adddf3>
 8010638:	e9dd 2300 	ldrd	r2, r3, [sp]
 801063c:	4680      	mov	r8, r0
 801063e:	4689      	mov	r9, r1
 8010640:	f7ef fdee 	bl	8000220 <__aeabi_dsub>
 8010644:	4602      	mov	r2, r0
 8010646:	460b      	mov	r3, r1
 8010648:	4620      	mov	r0, r4
 801064a:	4629      	mov	r1, r5
 801064c:	f7ef fde8 	bl	8000220 <__aeabi_dsub>
 8010650:	4642      	mov	r2, r8
 8010652:	4606      	mov	r6, r0
 8010654:	460f      	mov	r7, r1
 8010656:	464b      	mov	r3, r9
 8010658:	4640      	mov	r0, r8
 801065a:	4649      	mov	r1, r9
 801065c:	f7ef ff98 	bl	8000590 <__aeabi_dmul>
 8010660:	a34d      	add	r3, pc, #308	@ (adr r3, 8010798 <__ieee754_pow+0xa48>)
 8010662:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010666:	4604      	mov	r4, r0
 8010668:	460d      	mov	r5, r1
 801066a:	f7ef ff91 	bl	8000590 <__aeabi_dmul>
 801066e:	a34c      	add	r3, pc, #304	@ (adr r3, 80107a0 <__ieee754_pow+0xa50>)
 8010670:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010674:	f7ef fdd4 	bl	8000220 <__aeabi_dsub>
 8010678:	4622      	mov	r2, r4
 801067a:	462b      	mov	r3, r5
 801067c:	f7ef ff88 	bl	8000590 <__aeabi_dmul>
 8010680:	a349      	add	r3, pc, #292	@ (adr r3, 80107a8 <__ieee754_pow+0xa58>)
 8010682:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010686:	f7ef fdcd 	bl	8000224 <__adddf3>
 801068a:	4622      	mov	r2, r4
 801068c:	462b      	mov	r3, r5
 801068e:	f7ef ff7f 	bl	8000590 <__aeabi_dmul>
 8010692:	a347      	add	r3, pc, #284	@ (adr r3, 80107b0 <__ieee754_pow+0xa60>)
 8010694:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010698:	f7ef fdc2 	bl	8000220 <__aeabi_dsub>
 801069c:	4622      	mov	r2, r4
 801069e:	462b      	mov	r3, r5
 80106a0:	f7ef ff76 	bl	8000590 <__aeabi_dmul>
 80106a4:	a344      	add	r3, pc, #272	@ (adr r3, 80107b8 <__ieee754_pow+0xa68>)
 80106a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106aa:	f7ef fdbb 	bl	8000224 <__adddf3>
 80106ae:	4622      	mov	r2, r4
 80106b0:	462b      	mov	r3, r5
 80106b2:	f7ef ff6d 	bl	8000590 <__aeabi_dmul>
 80106b6:	4602      	mov	r2, r0
 80106b8:	460b      	mov	r3, r1
 80106ba:	4640      	mov	r0, r8
 80106bc:	4649      	mov	r1, r9
 80106be:	f7ef fdaf 	bl	8000220 <__aeabi_dsub>
 80106c2:	4604      	mov	r4, r0
 80106c4:	460d      	mov	r5, r1
 80106c6:	4602      	mov	r2, r0
 80106c8:	460b      	mov	r3, r1
 80106ca:	4640      	mov	r0, r8
 80106cc:	4649      	mov	r1, r9
 80106ce:	f7ef ff5f 	bl	8000590 <__aeabi_dmul>
 80106d2:	2200      	movs	r2, #0
 80106d4:	e9cd 0100 	strd	r0, r1, [sp]
 80106d8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80106dc:	4620      	mov	r0, r4
 80106de:	4629      	mov	r1, r5
 80106e0:	f7ef fd9e 	bl	8000220 <__aeabi_dsub>
 80106e4:	4602      	mov	r2, r0
 80106e6:	460b      	mov	r3, r1
 80106e8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80106ec:	f7f0 f87a 	bl	80007e4 <__aeabi_ddiv>
 80106f0:	4632      	mov	r2, r6
 80106f2:	4604      	mov	r4, r0
 80106f4:	460d      	mov	r5, r1
 80106f6:	463b      	mov	r3, r7
 80106f8:	4640      	mov	r0, r8
 80106fa:	4649      	mov	r1, r9
 80106fc:	f7ef ff48 	bl	8000590 <__aeabi_dmul>
 8010700:	4632      	mov	r2, r6
 8010702:	463b      	mov	r3, r7
 8010704:	f7ef fd8e 	bl	8000224 <__adddf3>
 8010708:	4602      	mov	r2, r0
 801070a:	460b      	mov	r3, r1
 801070c:	4620      	mov	r0, r4
 801070e:	4629      	mov	r1, r5
 8010710:	f7ef fd86 	bl	8000220 <__aeabi_dsub>
 8010714:	4642      	mov	r2, r8
 8010716:	464b      	mov	r3, r9
 8010718:	f7ef fd82 	bl	8000220 <__aeabi_dsub>
 801071c:	460b      	mov	r3, r1
 801071e:	4602      	mov	r2, r0
 8010720:	492d      	ldr	r1, [pc, #180]	@ (80107d8 <__ieee754_pow+0xa88>)
 8010722:	2000      	movs	r0, #0
 8010724:	f7ef fd7c 	bl	8000220 <__aeabi_dsub>
 8010728:	ec41 0b10 	vmov	d0, r0, r1
 801072c:	ee10 3a90 	vmov	r3, s1
 8010730:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8010734:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8010738:	da0b      	bge.n	8010752 <__ieee754_pow+0xa02>
 801073a:	4650      	mov	r0, sl
 801073c:	f000 fa2c 	bl	8010b98 <scalbn>
 8010740:	ec51 0b10 	vmov	r0, r1, d0
 8010744:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010748:	f7ff bb6d 	b.w	800fe26 <__ieee754_pow+0xd6>
 801074c:	f8dd a010 	ldr.w	sl, [sp, #16]
 8010750:	e73a      	b.n	80105c8 <__ieee754_pow+0x878>
 8010752:	ec51 0b10 	vmov	r0, r1, d0
 8010756:	4619      	mov	r1, r3
 8010758:	e7f4      	b.n	8010744 <__ieee754_pow+0x9f4>
 801075a:	491f      	ldr	r1, [pc, #124]	@ (80107d8 <__ieee754_pow+0xa88>)
 801075c:	2000      	movs	r0, #0
 801075e:	f7ff bb14 	b.w	800fd8a <__ieee754_pow+0x3a>
 8010762:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010766:	f7ff bb10 	b.w	800fd8a <__ieee754_pow+0x3a>
 801076a:	4630      	mov	r0, r6
 801076c:	4639      	mov	r1, r7
 801076e:	f7ff bb0c 	b.w	800fd8a <__ieee754_pow+0x3a>
 8010772:	460c      	mov	r4, r1
 8010774:	f7ff bb69 	b.w	800fe4a <__ieee754_pow+0xfa>
 8010778:	2400      	movs	r4, #0
 801077a:	f7ff bb4b 	b.w	800fe14 <__ieee754_pow+0xc4>
 801077e:	bf00      	nop
 8010780:	00000000 	.word	0x00000000
 8010784:	3fe62e43 	.word	0x3fe62e43
 8010788:	fefa39ef 	.word	0xfefa39ef
 801078c:	3fe62e42 	.word	0x3fe62e42
 8010790:	0ca86c39 	.word	0x0ca86c39
 8010794:	be205c61 	.word	0xbe205c61
 8010798:	72bea4d0 	.word	0x72bea4d0
 801079c:	3e663769 	.word	0x3e663769
 80107a0:	c5d26bf1 	.word	0xc5d26bf1
 80107a4:	3ebbbd41 	.word	0x3ebbbd41
 80107a8:	af25de2c 	.word	0xaf25de2c
 80107ac:	3f11566a 	.word	0x3f11566a
 80107b0:	16bebd93 	.word	0x16bebd93
 80107b4:	3f66c16c 	.word	0x3f66c16c
 80107b8:	5555553e 	.word	0x5555553e
 80107bc:	3fc55555 	.word	0x3fc55555
 80107c0:	40900000 	.word	0x40900000
 80107c4:	4090cbff 	.word	0x4090cbff
 80107c8:	3f6f3400 	.word	0x3f6f3400
 80107cc:	4090cc00 	.word	0x4090cc00
 80107d0:	3fe00000 	.word	0x3fe00000
 80107d4:	fff00000 	.word	0xfff00000
 80107d8:	3ff00000 	.word	0x3ff00000
 80107dc:	652b82fe 	.word	0x652b82fe
 80107e0:	3c971547 	.word	0x3c971547

080107e4 <__kernel_cosf>:
 80107e4:	ee10 3a10 	vmov	r3, s0
 80107e8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80107ec:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 80107f0:	eef0 6a40 	vmov.f32	s13, s0
 80107f4:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80107f8:	d204      	bcs.n	8010804 <__kernel_cosf+0x20>
 80107fa:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 80107fe:	ee17 2a90 	vmov	r2, s15
 8010802:	b342      	cbz	r2, 8010856 <__kernel_cosf+0x72>
 8010804:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8010808:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 8010874 <__kernel_cosf+0x90>
 801080c:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 8010878 <__kernel_cosf+0x94>
 8010810:	4a1a      	ldr	r2, [pc, #104]	@ (801087c <__kernel_cosf+0x98>)
 8010812:	eea7 6a27 	vfma.f32	s12, s14, s15
 8010816:	4293      	cmp	r3, r2
 8010818:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8010880 <__kernel_cosf+0x9c>
 801081c:	eee6 7a07 	vfma.f32	s15, s12, s14
 8010820:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 8010884 <__kernel_cosf+0xa0>
 8010824:	eea7 6a87 	vfma.f32	s12, s15, s14
 8010828:	eddf 7a17 	vldr	s15, [pc, #92]	@ 8010888 <__kernel_cosf+0xa4>
 801082c:	eee6 7a07 	vfma.f32	s15, s12, s14
 8010830:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 801088c <__kernel_cosf+0xa8>
 8010834:	eea7 6a87 	vfma.f32	s12, s15, s14
 8010838:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 801083c:	ee26 6a07 	vmul.f32	s12, s12, s14
 8010840:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8010844:	eee7 0a06 	vfma.f32	s1, s14, s12
 8010848:	ee67 7a27 	vmul.f32	s15, s14, s15
 801084c:	d804      	bhi.n	8010858 <__kernel_cosf+0x74>
 801084e:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8010852:	ee30 0a67 	vsub.f32	s0, s0, s15
 8010856:	4770      	bx	lr
 8010858:	4a0d      	ldr	r2, [pc, #52]	@ (8010890 <__kernel_cosf+0xac>)
 801085a:	4293      	cmp	r3, r2
 801085c:	bf9a      	itte	ls
 801085e:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 8010862:	ee07 3a10 	vmovls	s14, r3
 8010866:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 801086a:	ee30 0a47 	vsub.f32	s0, s0, s14
 801086e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010872:	e7ec      	b.n	801084e <__kernel_cosf+0x6a>
 8010874:	ad47d74e 	.word	0xad47d74e
 8010878:	310f74f6 	.word	0x310f74f6
 801087c:	3e999999 	.word	0x3e999999
 8010880:	b493f27c 	.word	0xb493f27c
 8010884:	37d00d01 	.word	0x37d00d01
 8010888:	bab60b61 	.word	0xbab60b61
 801088c:	3d2aaaab 	.word	0x3d2aaaab
 8010890:	3f480000 	.word	0x3f480000

08010894 <__kernel_sinf>:
 8010894:	ee10 3a10 	vmov	r3, s0
 8010898:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801089c:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 80108a0:	d204      	bcs.n	80108ac <__kernel_sinf+0x18>
 80108a2:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80108a6:	ee17 3a90 	vmov	r3, s15
 80108aa:	b35b      	cbz	r3, 8010904 <__kernel_sinf+0x70>
 80108ac:	ee20 7a00 	vmul.f32	s14, s0, s0
 80108b0:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8010908 <__kernel_sinf+0x74>
 80108b4:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 801090c <__kernel_sinf+0x78>
 80108b8:	eea7 6a27 	vfma.f32	s12, s14, s15
 80108bc:	eddf 7a14 	vldr	s15, [pc, #80]	@ 8010910 <__kernel_sinf+0x7c>
 80108c0:	eee6 7a07 	vfma.f32	s15, s12, s14
 80108c4:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 8010914 <__kernel_sinf+0x80>
 80108c8:	eea7 6a87 	vfma.f32	s12, s15, s14
 80108cc:	eddf 7a12 	vldr	s15, [pc, #72]	@ 8010918 <__kernel_sinf+0x84>
 80108d0:	ee60 6a07 	vmul.f32	s13, s0, s14
 80108d4:	eee6 7a07 	vfma.f32	s15, s12, s14
 80108d8:	b930      	cbnz	r0, 80108e8 <__kernel_sinf+0x54>
 80108da:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 801091c <__kernel_sinf+0x88>
 80108de:	eea7 6a27 	vfma.f32	s12, s14, s15
 80108e2:	eea6 0a26 	vfma.f32	s0, s12, s13
 80108e6:	4770      	bx	lr
 80108e8:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 80108ec:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 80108f0:	eee0 7a86 	vfma.f32	s15, s1, s12
 80108f4:	eed7 0a87 	vfnms.f32	s1, s15, s14
 80108f8:	eddf 7a09 	vldr	s15, [pc, #36]	@ 8010920 <__kernel_sinf+0x8c>
 80108fc:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8010900:	ee30 0a60 	vsub.f32	s0, s0, s1
 8010904:	4770      	bx	lr
 8010906:	bf00      	nop
 8010908:	2f2ec9d3 	.word	0x2f2ec9d3
 801090c:	b2d72f34 	.word	0xb2d72f34
 8010910:	3638ef1b 	.word	0x3638ef1b
 8010914:	b9500d01 	.word	0xb9500d01
 8010918:	3c088889 	.word	0x3c088889
 801091c:	be2aaaab 	.word	0xbe2aaaab
 8010920:	3e2aaaab 	.word	0x3e2aaaab

08010924 <__ieee754_rem_pio2f>:
 8010924:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010926:	ee10 6a10 	vmov	r6, s0
 801092a:	4b88      	ldr	r3, [pc, #544]	@ (8010b4c <__ieee754_rem_pio2f+0x228>)
 801092c:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 8010930:	429d      	cmp	r5, r3
 8010932:	b087      	sub	sp, #28
 8010934:	4604      	mov	r4, r0
 8010936:	d805      	bhi.n	8010944 <__ieee754_rem_pio2f+0x20>
 8010938:	2300      	movs	r3, #0
 801093a:	ed80 0a00 	vstr	s0, [r0]
 801093e:	6043      	str	r3, [r0, #4]
 8010940:	2000      	movs	r0, #0
 8010942:	e022      	b.n	801098a <__ieee754_rem_pio2f+0x66>
 8010944:	4b82      	ldr	r3, [pc, #520]	@ (8010b50 <__ieee754_rem_pio2f+0x22c>)
 8010946:	429d      	cmp	r5, r3
 8010948:	d83a      	bhi.n	80109c0 <__ieee754_rem_pio2f+0x9c>
 801094a:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 801094e:	2e00      	cmp	r6, #0
 8010950:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 8010b54 <__ieee754_rem_pio2f+0x230>
 8010954:	4a80      	ldr	r2, [pc, #512]	@ (8010b58 <__ieee754_rem_pio2f+0x234>)
 8010956:	f023 030f 	bic.w	r3, r3, #15
 801095a:	dd18      	ble.n	801098e <__ieee754_rem_pio2f+0x6a>
 801095c:	4293      	cmp	r3, r2
 801095e:	ee70 7a47 	vsub.f32	s15, s0, s14
 8010962:	bf09      	itett	eq
 8010964:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 8010b5c <__ieee754_rem_pio2f+0x238>
 8010968:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 8010b60 <__ieee754_rem_pio2f+0x23c>
 801096c:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 8010b64 <__ieee754_rem_pio2f+0x240>
 8010970:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8010974:	ee37 7ae6 	vsub.f32	s14, s15, s13
 8010978:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801097c:	ed80 7a00 	vstr	s14, [r0]
 8010980:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8010984:	edc0 7a01 	vstr	s15, [r0, #4]
 8010988:	2001      	movs	r0, #1
 801098a:	b007      	add	sp, #28
 801098c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801098e:	4293      	cmp	r3, r2
 8010990:	ee70 7a07 	vadd.f32	s15, s0, s14
 8010994:	bf09      	itett	eq
 8010996:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 8010b5c <__ieee754_rem_pio2f+0x238>
 801099a:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 8010b60 <__ieee754_rem_pio2f+0x23c>
 801099e:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 8010b64 <__ieee754_rem_pio2f+0x240>
 80109a2:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 80109a6:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80109aa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80109ae:	ed80 7a00 	vstr	s14, [r0]
 80109b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80109b6:	edc0 7a01 	vstr	s15, [r0, #4]
 80109ba:	f04f 30ff 	mov.w	r0, #4294967295
 80109be:	e7e4      	b.n	801098a <__ieee754_rem_pio2f+0x66>
 80109c0:	4b69      	ldr	r3, [pc, #420]	@ (8010b68 <__ieee754_rem_pio2f+0x244>)
 80109c2:	429d      	cmp	r5, r3
 80109c4:	d873      	bhi.n	8010aae <__ieee754_rem_pio2f+0x18a>
 80109c6:	f000 f8dd 	bl	8010b84 <fabsf>
 80109ca:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 8010b6c <__ieee754_rem_pio2f+0x248>
 80109ce:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80109d2:	eee0 7a07 	vfma.f32	s15, s0, s14
 80109d6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80109da:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80109de:	ee17 0a90 	vmov	r0, s15
 80109e2:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8010b54 <__ieee754_rem_pio2f+0x230>
 80109e6:	eea7 0a67 	vfms.f32	s0, s14, s15
 80109ea:	281f      	cmp	r0, #31
 80109ec:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8010b60 <__ieee754_rem_pio2f+0x23c>
 80109f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80109f4:	eeb1 6a47 	vneg.f32	s12, s14
 80109f8:	ee70 6a67 	vsub.f32	s13, s0, s15
 80109fc:	ee16 1a90 	vmov	r1, s13
 8010a00:	dc09      	bgt.n	8010a16 <__ieee754_rem_pio2f+0xf2>
 8010a02:	4a5b      	ldr	r2, [pc, #364]	@ (8010b70 <__ieee754_rem_pio2f+0x24c>)
 8010a04:	1e47      	subs	r7, r0, #1
 8010a06:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8010a0a:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 8010a0e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8010a12:	4293      	cmp	r3, r2
 8010a14:	d107      	bne.n	8010a26 <__ieee754_rem_pio2f+0x102>
 8010a16:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 8010a1a:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 8010a1e:	2a08      	cmp	r2, #8
 8010a20:	ea4f 53e5 	mov.w	r3, r5, asr #23
 8010a24:	dc14      	bgt.n	8010a50 <__ieee754_rem_pio2f+0x12c>
 8010a26:	6021      	str	r1, [r4, #0]
 8010a28:	ed94 7a00 	vldr	s14, [r4]
 8010a2c:	ee30 0a47 	vsub.f32	s0, s0, s14
 8010a30:	2e00      	cmp	r6, #0
 8010a32:	ee30 0a67 	vsub.f32	s0, s0, s15
 8010a36:	ed84 0a01 	vstr	s0, [r4, #4]
 8010a3a:	daa6      	bge.n	801098a <__ieee754_rem_pio2f+0x66>
 8010a3c:	eeb1 7a47 	vneg.f32	s14, s14
 8010a40:	eeb1 0a40 	vneg.f32	s0, s0
 8010a44:	ed84 7a00 	vstr	s14, [r4]
 8010a48:	ed84 0a01 	vstr	s0, [r4, #4]
 8010a4c:	4240      	negs	r0, r0
 8010a4e:	e79c      	b.n	801098a <__ieee754_rem_pio2f+0x66>
 8010a50:	eddf 5a42 	vldr	s11, [pc, #264]	@ 8010b5c <__ieee754_rem_pio2f+0x238>
 8010a54:	eef0 6a40 	vmov.f32	s13, s0
 8010a58:	eee6 6a25 	vfma.f32	s13, s12, s11
 8010a5c:	ee70 7a66 	vsub.f32	s15, s0, s13
 8010a60:	eee6 7a25 	vfma.f32	s15, s12, s11
 8010a64:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8010b64 <__ieee754_rem_pio2f+0x240>
 8010a68:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8010a6c:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8010a70:	ee15 2a90 	vmov	r2, s11
 8010a74:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8010a78:	1a5b      	subs	r3, r3, r1
 8010a7a:	2b19      	cmp	r3, #25
 8010a7c:	dc04      	bgt.n	8010a88 <__ieee754_rem_pio2f+0x164>
 8010a7e:	edc4 5a00 	vstr	s11, [r4]
 8010a82:	eeb0 0a66 	vmov.f32	s0, s13
 8010a86:	e7cf      	b.n	8010a28 <__ieee754_rem_pio2f+0x104>
 8010a88:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 8010b74 <__ieee754_rem_pio2f+0x250>
 8010a8c:	eeb0 0a66 	vmov.f32	s0, s13
 8010a90:	eea6 0a25 	vfma.f32	s0, s12, s11
 8010a94:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8010a98:	eddf 6a37 	vldr	s13, [pc, #220]	@ 8010b78 <__ieee754_rem_pio2f+0x254>
 8010a9c:	eee6 7a25 	vfma.f32	s15, s12, s11
 8010aa0:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8010aa4:	ee30 7a67 	vsub.f32	s14, s0, s15
 8010aa8:	ed84 7a00 	vstr	s14, [r4]
 8010aac:	e7bc      	b.n	8010a28 <__ieee754_rem_pio2f+0x104>
 8010aae:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 8010ab2:	d306      	bcc.n	8010ac2 <__ieee754_rem_pio2f+0x19e>
 8010ab4:	ee70 7a40 	vsub.f32	s15, s0, s0
 8010ab8:	edc0 7a01 	vstr	s15, [r0, #4]
 8010abc:	edc0 7a00 	vstr	s15, [r0]
 8010ac0:	e73e      	b.n	8010940 <__ieee754_rem_pio2f+0x1c>
 8010ac2:	15ea      	asrs	r2, r5, #23
 8010ac4:	3a86      	subs	r2, #134	@ 0x86
 8010ac6:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8010aca:	ee07 3a90 	vmov	s15, r3
 8010ace:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8010ad2:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 8010b7c <__ieee754_rem_pio2f+0x258>
 8010ad6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8010ada:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010ade:	ed8d 7a03 	vstr	s14, [sp, #12]
 8010ae2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8010ae6:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8010aea:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8010aee:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010af2:	ed8d 7a04 	vstr	s14, [sp, #16]
 8010af6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8010afa:	eef5 7a40 	vcmp.f32	s15, #0.0
 8010afe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b02:	edcd 7a05 	vstr	s15, [sp, #20]
 8010b06:	d11e      	bne.n	8010b46 <__ieee754_rem_pio2f+0x222>
 8010b08:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8010b0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b10:	bf0c      	ite	eq
 8010b12:	2301      	moveq	r3, #1
 8010b14:	2302      	movne	r3, #2
 8010b16:	491a      	ldr	r1, [pc, #104]	@ (8010b80 <__ieee754_rem_pio2f+0x25c>)
 8010b18:	9101      	str	r1, [sp, #4]
 8010b1a:	2102      	movs	r1, #2
 8010b1c:	9100      	str	r1, [sp, #0]
 8010b1e:	a803      	add	r0, sp, #12
 8010b20:	4621      	mov	r1, r4
 8010b22:	f000 f957 	bl	8010dd4 <__kernel_rem_pio2f>
 8010b26:	2e00      	cmp	r6, #0
 8010b28:	f6bf af2f 	bge.w	801098a <__ieee754_rem_pio2f+0x66>
 8010b2c:	edd4 7a00 	vldr	s15, [r4]
 8010b30:	eef1 7a67 	vneg.f32	s15, s15
 8010b34:	edc4 7a00 	vstr	s15, [r4]
 8010b38:	edd4 7a01 	vldr	s15, [r4, #4]
 8010b3c:	eef1 7a67 	vneg.f32	s15, s15
 8010b40:	edc4 7a01 	vstr	s15, [r4, #4]
 8010b44:	e782      	b.n	8010a4c <__ieee754_rem_pio2f+0x128>
 8010b46:	2303      	movs	r3, #3
 8010b48:	e7e5      	b.n	8010b16 <__ieee754_rem_pio2f+0x1f2>
 8010b4a:	bf00      	nop
 8010b4c:	3f490fd8 	.word	0x3f490fd8
 8010b50:	4016cbe3 	.word	0x4016cbe3
 8010b54:	3fc90f80 	.word	0x3fc90f80
 8010b58:	3fc90fd0 	.word	0x3fc90fd0
 8010b5c:	37354400 	.word	0x37354400
 8010b60:	37354443 	.word	0x37354443
 8010b64:	2e85a308 	.word	0x2e85a308
 8010b68:	43490f80 	.word	0x43490f80
 8010b6c:	3f22f984 	.word	0x3f22f984
 8010b70:	080113d0 	.word	0x080113d0
 8010b74:	2e85a300 	.word	0x2e85a300
 8010b78:	248d3132 	.word	0x248d3132
 8010b7c:	43800000 	.word	0x43800000
 8010b80:	08011450 	.word	0x08011450

08010b84 <fabsf>:
 8010b84:	ee10 3a10 	vmov	r3, s0
 8010b88:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8010b8c:	ee00 3a10 	vmov	s0, r3
 8010b90:	4770      	bx	lr
 8010b92:	0000      	movs	r0, r0
 8010b94:	0000      	movs	r0, r0
	...

08010b98 <scalbn>:
 8010b98:	b570      	push	{r4, r5, r6, lr}
 8010b9a:	ec55 4b10 	vmov	r4, r5, d0
 8010b9e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8010ba2:	4606      	mov	r6, r0
 8010ba4:	462b      	mov	r3, r5
 8010ba6:	b991      	cbnz	r1, 8010bce <scalbn+0x36>
 8010ba8:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8010bac:	4323      	orrs	r3, r4
 8010bae:	d03b      	beq.n	8010c28 <scalbn+0x90>
 8010bb0:	4b33      	ldr	r3, [pc, #204]	@ (8010c80 <scalbn+0xe8>)
 8010bb2:	4620      	mov	r0, r4
 8010bb4:	4629      	mov	r1, r5
 8010bb6:	2200      	movs	r2, #0
 8010bb8:	f7ef fcea 	bl	8000590 <__aeabi_dmul>
 8010bbc:	4b31      	ldr	r3, [pc, #196]	@ (8010c84 <scalbn+0xec>)
 8010bbe:	429e      	cmp	r6, r3
 8010bc0:	4604      	mov	r4, r0
 8010bc2:	460d      	mov	r5, r1
 8010bc4:	da0f      	bge.n	8010be6 <scalbn+0x4e>
 8010bc6:	a326      	add	r3, pc, #152	@ (adr r3, 8010c60 <scalbn+0xc8>)
 8010bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010bcc:	e01e      	b.n	8010c0c <scalbn+0x74>
 8010bce:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8010bd2:	4291      	cmp	r1, r2
 8010bd4:	d10b      	bne.n	8010bee <scalbn+0x56>
 8010bd6:	4622      	mov	r2, r4
 8010bd8:	4620      	mov	r0, r4
 8010bda:	4629      	mov	r1, r5
 8010bdc:	f7ef fb22 	bl	8000224 <__adddf3>
 8010be0:	4604      	mov	r4, r0
 8010be2:	460d      	mov	r5, r1
 8010be4:	e020      	b.n	8010c28 <scalbn+0x90>
 8010be6:	460b      	mov	r3, r1
 8010be8:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8010bec:	3936      	subs	r1, #54	@ 0x36
 8010bee:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8010bf2:	4296      	cmp	r6, r2
 8010bf4:	dd0d      	ble.n	8010c12 <scalbn+0x7a>
 8010bf6:	2d00      	cmp	r5, #0
 8010bf8:	a11b      	add	r1, pc, #108	@ (adr r1, 8010c68 <scalbn+0xd0>)
 8010bfa:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010bfe:	da02      	bge.n	8010c06 <scalbn+0x6e>
 8010c00:	a11b      	add	r1, pc, #108	@ (adr r1, 8010c70 <scalbn+0xd8>)
 8010c02:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010c06:	a318      	add	r3, pc, #96	@ (adr r3, 8010c68 <scalbn+0xd0>)
 8010c08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c0c:	f7ef fcc0 	bl	8000590 <__aeabi_dmul>
 8010c10:	e7e6      	b.n	8010be0 <scalbn+0x48>
 8010c12:	1872      	adds	r2, r6, r1
 8010c14:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8010c18:	428a      	cmp	r2, r1
 8010c1a:	dcec      	bgt.n	8010bf6 <scalbn+0x5e>
 8010c1c:	2a00      	cmp	r2, #0
 8010c1e:	dd06      	ble.n	8010c2e <scalbn+0x96>
 8010c20:	f36f 531e 	bfc	r3, #20, #11
 8010c24:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8010c28:	ec45 4b10 	vmov	d0, r4, r5
 8010c2c:	bd70      	pop	{r4, r5, r6, pc}
 8010c2e:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8010c32:	da08      	bge.n	8010c46 <scalbn+0xae>
 8010c34:	2d00      	cmp	r5, #0
 8010c36:	a10a      	add	r1, pc, #40	@ (adr r1, 8010c60 <scalbn+0xc8>)
 8010c38:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010c3c:	dac3      	bge.n	8010bc6 <scalbn+0x2e>
 8010c3e:	a10e      	add	r1, pc, #56	@ (adr r1, 8010c78 <scalbn+0xe0>)
 8010c40:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010c44:	e7bf      	b.n	8010bc6 <scalbn+0x2e>
 8010c46:	3236      	adds	r2, #54	@ 0x36
 8010c48:	f36f 531e 	bfc	r3, #20, #11
 8010c4c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8010c50:	4620      	mov	r0, r4
 8010c52:	4b0d      	ldr	r3, [pc, #52]	@ (8010c88 <scalbn+0xf0>)
 8010c54:	4629      	mov	r1, r5
 8010c56:	2200      	movs	r2, #0
 8010c58:	e7d8      	b.n	8010c0c <scalbn+0x74>
 8010c5a:	bf00      	nop
 8010c5c:	f3af 8000 	nop.w
 8010c60:	c2f8f359 	.word	0xc2f8f359
 8010c64:	01a56e1f 	.word	0x01a56e1f
 8010c68:	8800759c 	.word	0x8800759c
 8010c6c:	7e37e43c 	.word	0x7e37e43c
 8010c70:	8800759c 	.word	0x8800759c
 8010c74:	fe37e43c 	.word	0xfe37e43c
 8010c78:	c2f8f359 	.word	0xc2f8f359
 8010c7c:	81a56e1f 	.word	0x81a56e1f
 8010c80:	43500000 	.word	0x43500000
 8010c84:	ffff3cb0 	.word	0xffff3cb0
 8010c88:	3c900000 	.word	0x3c900000

08010c8c <with_errno>:
 8010c8c:	b510      	push	{r4, lr}
 8010c8e:	ed2d 8b02 	vpush	{d8}
 8010c92:	eeb0 8a40 	vmov.f32	s16, s0
 8010c96:	eef0 8a60 	vmov.f32	s17, s1
 8010c9a:	4604      	mov	r4, r0
 8010c9c:	f7fe fb52 	bl	800f344 <__errno>
 8010ca0:	eeb0 0a48 	vmov.f32	s0, s16
 8010ca4:	eef0 0a68 	vmov.f32	s1, s17
 8010ca8:	ecbd 8b02 	vpop	{d8}
 8010cac:	6004      	str	r4, [r0, #0]
 8010cae:	bd10      	pop	{r4, pc}

08010cb0 <xflow>:
 8010cb0:	4603      	mov	r3, r0
 8010cb2:	b507      	push	{r0, r1, r2, lr}
 8010cb4:	ec51 0b10 	vmov	r0, r1, d0
 8010cb8:	b183      	cbz	r3, 8010cdc <xflow+0x2c>
 8010cba:	4602      	mov	r2, r0
 8010cbc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8010cc0:	e9cd 2300 	strd	r2, r3, [sp]
 8010cc4:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010cc8:	f7ef fc62 	bl	8000590 <__aeabi_dmul>
 8010ccc:	ec41 0b10 	vmov	d0, r0, r1
 8010cd0:	2022      	movs	r0, #34	@ 0x22
 8010cd2:	b003      	add	sp, #12
 8010cd4:	f85d eb04 	ldr.w	lr, [sp], #4
 8010cd8:	f7ff bfd8 	b.w	8010c8c <with_errno>
 8010cdc:	4602      	mov	r2, r0
 8010cde:	460b      	mov	r3, r1
 8010ce0:	e7ee      	b.n	8010cc0 <xflow+0x10>
 8010ce2:	0000      	movs	r0, r0
 8010ce4:	0000      	movs	r0, r0
	...

08010ce8 <__math_uflow>:
 8010ce8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8010cf0 <__math_uflow+0x8>
 8010cec:	f7ff bfe0 	b.w	8010cb0 <xflow>
 8010cf0:	00000000 	.word	0x00000000
 8010cf4:	10000000 	.word	0x10000000

08010cf8 <__math_oflow>:
 8010cf8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8010d00 <__math_oflow+0x8>
 8010cfc:	f7ff bfd8 	b.w	8010cb0 <xflow>
 8010d00:	00000000 	.word	0x00000000
 8010d04:	70000000 	.word	0x70000000

08010d08 <scalbnf>:
 8010d08:	ee10 3a10 	vmov	r3, s0
 8010d0c:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8010d10:	d02b      	beq.n	8010d6a <scalbnf+0x62>
 8010d12:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8010d16:	d302      	bcc.n	8010d1e <scalbnf+0x16>
 8010d18:	ee30 0a00 	vadd.f32	s0, s0, s0
 8010d1c:	4770      	bx	lr
 8010d1e:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 8010d22:	d123      	bne.n	8010d6c <scalbnf+0x64>
 8010d24:	4b24      	ldr	r3, [pc, #144]	@ (8010db8 <scalbnf+0xb0>)
 8010d26:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8010dbc <scalbnf+0xb4>
 8010d2a:	4298      	cmp	r0, r3
 8010d2c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8010d30:	db17      	blt.n	8010d62 <scalbnf+0x5a>
 8010d32:	ee10 3a10 	vmov	r3, s0
 8010d36:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8010d3a:	3a19      	subs	r2, #25
 8010d3c:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8010d40:	4288      	cmp	r0, r1
 8010d42:	dd15      	ble.n	8010d70 <scalbnf+0x68>
 8010d44:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 8010dc0 <scalbnf+0xb8>
 8010d48:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8010dc4 <scalbnf+0xbc>
 8010d4c:	ee10 3a10 	vmov	r3, s0
 8010d50:	eeb0 7a67 	vmov.f32	s14, s15
 8010d54:	2b00      	cmp	r3, #0
 8010d56:	bfb8      	it	lt
 8010d58:	eef0 7a66 	vmovlt.f32	s15, s13
 8010d5c:	ee27 0a87 	vmul.f32	s0, s15, s14
 8010d60:	4770      	bx	lr
 8010d62:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8010dc8 <scalbnf+0xc0>
 8010d66:	ee27 0a80 	vmul.f32	s0, s15, s0
 8010d6a:	4770      	bx	lr
 8010d6c:	0dd2      	lsrs	r2, r2, #23
 8010d6e:	e7e5      	b.n	8010d3c <scalbnf+0x34>
 8010d70:	4410      	add	r0, r2
 8010d72:	28fe      	cmp	r0, #254	@ 0xfe
 8010d74:	dce6      	bgt.n	8010d44 <scalbnf+0x3c>
 8010d76:	2800      	cmp	r0, #0
 8010d78:	dd06      	ble.n	8010d88 <scalbnf+0x80>
 8010d7a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8010d7e:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8010d82:	ee00 3a10 	vmov	s0, r3
 8010d86:	4770      	bx	lr
 8010d88:	f110 0f16 	cmn.w	r0, #22
 8010d8c:	da09      	bge.n	8010da2 <scalbnf+0x9a>
 8010d8e:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8010dc8 <scalbnf+0xc0>
 8010d92:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8010dcc <scalbnf+0xc4>
 8010d96:	ee10 3a10 	vmov	r3, s0
 8010d9a:	eeb0 7a67 	vmov.f32	s14, s15
 8010d9e:	2b00      	cmp	r3, #0
 8010da0:	e7d9      	b.n	8010d56 <scalbnf+0x4e>
 8010da2:	3019      	adds	r0, #25
 8010da4:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8010da8:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8010dac:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8010dd0 <scalbnf+0xc8>
 8010db0:	ee07 3a90 	vmov	s15, r3
 8010db4:	e7d7      	b.n	8010d66 <scalbnf+0x5e>
 8010db6:	bf00      	nop
 8010db8:	ffff3cb0 	.word	0xffff3cb0
 8010dbc:	4c000000 	.word	0x4c000000
 8010dc0:	7149f2ca 	.word	0x7149f2ca
 8010dc4:	f149f2ca 	.word	0xf149f2ca
 8010dc8:	0da24260 	.word	0x0da24260
 8010dcc:	8da24260 	.word	0x8da24260
 8010dd0:	33000000 	.word	0x33000000

08010dd4 <__kernel_rem_pio2f>:
 8010dd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010dd8:	ed2d 8b04 	vpush	{d8-d9}
 8010ddc:	b0d9      	sub	sp, #356	@ 0x164
 8010dde:	4690      	mov	r8, r2
 8010de0:	9001      	str	r0, [sp, #4]
 8010de2:	4ab6      	ldr	r2, [pc, #728]	@ (80110bc <__kernel_rem_pio2f+0x2e8>)
 8010de4:	9866      	ldr	r0, [sp, #408]	@ 0x198
 8010de6:	f118 0f04 	cmn.w	r8, #4
 8010dea:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 8010dee:	460f      	mov	r7, r1
 8010df0:	f103 3bff 	add.w	fp, r3, #4294967295
 8010df4:	db26      	blt.n	8010e44 <__kernel_rem_pio2f+0x70>
 8010df6:	f1b8 0203 	subs.w	r2, r8, #3
 8010dfa:	bf48      	it	mi
 8010dfc:	f108 0204 	addmi.w	r2, r8, #4
 8010e00:	10d2      	asrs	r2, r2, #3
 8010e02:	1c55      	adds	r5, r2, #1
 8010e04:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8010e06:	ed9f 7ab1 	vldr	s14, [pc, #708]	@ 80110cc <__kernel_rem_pio2f+0x2f8>
 8010e0a:	00e8      	lsls	r0, r5, #3
 8010e0c:	eba2 060b 	sub.w	r6, r2, fp
 8010e10:	9002      	str	r0, [sp, #8]
 8010e12:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 8010e16:	eb0a 0c0b 	add.w	ip, sl, fp
 8010e1a:	ac1c      	add	r4, sp, #112	@ 0x70
 8010e1c:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 8010e20:	2000      	movs	r0, #0
 8010e22:	4560      	cmp	r0, ip
 8010e24:	dd10      	ble.n	8010e48 <__kernel_rem_pio2f+0x74>
 8010e26:	a91c      	add	r1, sp, #112	@ 0x70
 8010e28:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 8010e2c:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 8010e30:	2600      	movs	r6, #0
 8010e32:	4556      	cmp	r6, sl
 8010e34:	dc24      	bgt.n	8010e80 <__kernel_rem_pio2f+0xac>
 8010e36:	f8dd e004 	ldr.w	lr, [sp, #4]
 8010e3a:	eddf 7aa4 	vldr	s15, [pc, #656]	@ 80110cc <__kernel_rem_pio2f+0x2f8>
 8010e3e:	4684      	mov	ip, r0
 8010e40:	2400      	movs	r4, #0
 8010e42:	e016      	b.n	8010e72 <__kernel_rem_pio2f+0x9e>
 8010e44:	2200      	movs	r2, #0
 8010e46:	e7dc      	b.n	8010e02 <__kernel_rem_pio2f+0x2e>
 8010e48:	42c6      	cmn	r6, r0
 8010e4a:	bf5d      	ittte	pl
 8010e4c:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 8010e50:	ee07 1a90 	vmovpl	s15, r1
 8010e54:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8010e58:	eef0 7a47 	vmovmi.f32	s15, s14
 8010e5c:	ece4 7a01 	vstmia	r4!, {s15}
 8010e60:	3001      	adds	r0, #1
 8010e62:	e7de      	b.n	8010e22 <__kernel_rem_pio2f+0x4e>
 8010e64:	ecfe 6a01 	vldmia	lr!, {s13}
 8010e68:	ed3c 7a01 	vldmdb	ip!, {s14}
 8010e6c:	eee6 7a87 	vfma.f32	s15, s13, s14
 8010e70:	3401      	adds	r4, #1
 8010e72:	455c      	cmp	r4, fp
 8010e74:	ddf6      	ble.n	8010e64 <__kernel_rem_pio2f+0x90>
 8010e76:	ece9 7a01 	vstmia	r9!, {s15}
 8010e7a:	3601      	adds	r6, #1
 8010e7c:	3004      	adds	r0, #4
 8010e7e:	e7d8      	b.n	8010e32 <__kernel_rem_pio2f+0x5e>
 8010e80:	a908      	add	r1, sp, #32
 8010e82:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010e86:	9104      	str	r1, [sp, #16]
 8010e88:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8010e8a:	eddf 8a8f 	vldr	s17, [pc, #572]	@ 80110c8 <__kernel_rem_pio2f+0x2f4>
 8010e8e:	ed9f 9a8d 	vldr	s18, [pc, #564]	@ 80110c4 <__kernel_rem_pio2f+0x2f0>
 8010e92:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8010e96:	9203      	str	r2, [sp, #12]
 8010e98:	4654      	mov	r4, sl
 8010e9a:	00a2      	lsls	r2, r4, #2
 8010e9c:	9205      	str	r2, [sp, #20]
 8010e9e:	aa58      	add	r2, sp, #352	@ 0x160
 8010ea0:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8010ea4:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 8010ea8:	a944      	add	r1, sp, #272	@ 0x110
 8010eaa:	aa08      	add	r2, sp, #32
 8010eac:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 8010eb0:	4694      	mov	ip, r2
 8010eb2:	4626      	mov	r6, r4
 8010eb4:	2e00      	cmp	r6, #0
 8010eb6:	dc4c      	bgt.n	8010f52 <__kernel_rem_pio2f+0x17e>
 8010eb8:	4628      	mov	r0, r5
 8010eba:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8010ebe:	f7ff ff23 	bl	8010d08 <scalbnf>
 8010ec2:	eeb0 8a40 	vmov.f32	s16, s0
 8010ec6:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 8010eca:	ee28 0a00 	vmul.f32	s0, s16, s0
 8010ece:	f000 f9e9 	bl	80112a4 <floorf>
 8010ed2:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 8010ed6:	eea0 8a67 	vfms.f32	s16, s0, s15
 8010eda:	2d00      	cmp	r5, #0
 8010edc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010ee0:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8010ee4:	ee17 9a90 	vmov	r9, s15
 8010ee8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010eec:	ee38 8a67 	vsub.f32	s16, s16, s15
 8010ef0:	dd41      	ble.n	8010f76 <__kernel_rem_pio2f+0x1a2>
 8010ef2:	f104 3cff 	add.w	ip, r4, #4294967295
 8010ef6:	a908      	add	r1, sp, #32
 8010ef8:	f1c5 0e08 	rsb	lr, r5, #8
 8010efc:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 8010f00:	fa46 f00e 	asr.w	r0, r6, lr
 8010f04:	4481      	add	r9, r0
 8010f06:	fa00 f00e 	lsl.w	r0, r0, lr
 8010f0a:	1a36      	subs	r6, r6, r0
 8010f0c:	f1c5 0007 	rsb	r0, r5, #7
 8010f10:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 8010f14:	4106      	asrs	r6, r0
 8010f16:	2e00      	cmp	r6, #0
 8010f18:	dd3c      	ble.n	8010f94 <__kernel_rem_pio2f+0x1c0>
 8010f1a:	f04f 0e00 	mov.w	lr, #0
 8010f1e:	f109 0901 	add.w	r9, r9, #1
 8010f22:	4670      	mov	r0, lr
 8010f24:	4574      	cmp	r4, lr
 8010f26:	dc68      	bgt.n	8010ffa <__kernel_rem_pio2f+0x226>
 8010f28:	2d00      	cmp	r5, #0
 8010f2a:	dd03      	ble.n	8010f34 <__kernel_rem_pio2f+0x160>
 8010f2c:	2d01      	cmp	r5, #1
 8010f2e:	d074      	beq.n	801101a <__kernel_rem_pio2f+0x246>
 8010f30:	2d02      	cmp	r5, #2
 8010f32:	d07d      	beq.n	8011030 <__kernel_rem_pio2f+0x25c>
 8010f34:	2e02      	cmp	r6, #2
 8010f36:	d12d      	bne.n	8010f94 <__kernel_rem_pio2f+0x1c0>
 8010f38:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8010f3c:	ee30 8a48 	vsub.f32	s16, s0, s16
 8010f40:	b340      	cbz	r0, 8010f94 <__kernel_rem_pio2f+0x1c0>
 8010f42:	4628      	mov	r0, r5
 8010f44:	9306      	str	r3, [sp, #24]
 8010f46:	f7ff fedf 	bl	8010d08 <scalbnf>
 8010f4a:	9b06      	ldr	r3, [sp, #24]
 8010f4c:	ee38 8a40 	vsub.f32	s16, s16, s0
 8010f50:	e020      	b.n	8010f94 <__kernel_rem_pio2f+0x1c0>
 8010f52:	ee60 7a28 	vmul.f32	s15, s0, s17
 8010f56:	3e01      	subs	r6, #1
 8010f58:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010f5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010f60:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8010f64:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8010f68:	ecac 0a01 	vstmia	ip!, {s0}
 8010f6c:	ed30 0a01 	vldmdb	r0!, {s0}
 8010f70:	ee37 0a80 	vadd.f32	s0, s15, s0
 8010f74:	e79e      	b.n	8010eb4 <__kernel_rem_pio2f+0xe0>
 8010f76:	d105      	bne.n	8010f84 <__kernel_rem_pio2f+0x1b0>
 8010f78:	1e60      	subs	r0, r4, #1
 8010f7a:	a908      	add	r1, sp, #32
 8010f7c:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 8010f80:	11f6      	asrs	r6, r6, #7
 8010f82:	e7c8      	b.n	8010f16 <__kernel_rem_pio2f+0x142>
 8010f84:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8010f88:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8010f8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f90:	da31      	bge.n	8010ff6 <__kernel_rem_pio2f+0x222>
 8010f92:	2600      	movs	r6, #0
 8010f94:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8010f98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f9c:	f040 8098 	bne.w	80110d0 <__kernel_rem_pio2f+0x2fc>
 8010fa0:	1e60      	subs	r0, r4, #1
 8010fa2:	2200      	movs	r2, #0
 8010fa4:	4550      	cmp	r0, sl
 8010fa6:	da4b      	bge.n	8011040 <__kernel_rem_pio2f+0x26c>
 8010fa8:	2a00      	cmp	r2, #0
 8010faa:	d065      	beq.n	8011078 <__kernel_rem_pio2f+0x2a4>
 8010fac:	3c01      	subs	r4, #1
 8010fae:	ab08      	add	r3, sp, #32
 8010fb0:	3d08      	subs	r5, #8
 8010fb2:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8010fb6:	2b00      	cmp	r3, #0
 8010fb8:	d0f8      	beq.n	8010fac <__kernel_rem_pio2f+0x1d8>
 8010fba:	4628      	mov	r0, r5
 8010fbc:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8010fc0:	f7ff fea2 	bl	8010d08 <scalbnf>
 8010fc4:	1c63      	adds	r3, r4, #1
 8010fc6:	aa44      	add	r2, sp, #272	@ 0x110
 8010fc8:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 80110c8 <__kernel_rem_pio2f+0x2f4>
 8010fcc:	0099      	lsls	r1, r3, #2
 8010fce:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8010fd2:	4623      	mov	r3, r4
 8010fd4:	2b00      	cmp	r3, #0
 8010fd6:	f280 80a9 	bge.w	801112c <__kernel_rem_pio2f+0x358>
 8010fda:	4623      	mov	r3, r4
 8010fdc:	2b00      	cmp	r3, #0
 8010fde:	f2c0 80c7 	blt.w	8011170 <__kernel_rem_pio2f+0x39c>
 8010fe2:	aa44      	add	r2, sp, #272	@ 0x110
 8010fe4:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8010fe8:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 80110c0 <__kernel_rem_pio2f+0x2ec>
 8010fec:	eddf 7a37 	vldr	s15, [pc, #220]	@ 80110cc <__kernel_rem_pio2f+0x2f8>
 8010ff0:	2000      	movs	r0, #0
 8010ff2:	1ae2      	subs	r2, r4, r3
 8010ff4:	e0b1      	b.n	801115a <__kernel_rem_pio2f+0x386>
 8010ff6:	2602      	movs	r6, #2
 8010ff8:	e78f      	b.n	8010f1a <__kernel_rem_pio2f+0x146>
 8010ffa:	f852 1b04 	ldr.w	r1, [r2], #4
 8010ffe:	b948      	cbnz	r0, 8011014 <__kernel_rem_pio2f+0x240>
 8011000:	b121      	cbz	r1, 801100c <__kernel_rem_pio2f+0x238>
 8011002:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 8011006:	f842 1c04 	str.w	r1, [r2, #-4]
 801100a:	2101      	movs	r1, #1
 801100c:	f10e 0e01 	add.w	lr, lr, #1
 8011010:	4608      	mov	r0, r1
 8011012:	e787      	b.n	8010f24 <__kernel_rem_pio2f+0x150>
 8011014:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 8011018:	e7f5      	b.n	8011006 <__kernel_rem_pio2f+0x232>
 801101a:	f104 3cff 	add.w	ip, r4, #4294967295
 801101e:	aa08      	add	r2, sp, #32
 8011020:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8011024:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8011028:	a908      	add	r1, sp, #32
 801102a:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 801102e:	e781      	b.n	8010f34 <__kernel_rem_pio2f+0x160>
 8011030:	f104 3cff 	add.w	ip, r4, #4294967295
 8011034:	aa08      	add	r2, sp, #32
 8011036:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 801103a:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 801103e:	e7f3      	b.n	8011028 <__kernel_rem_pio2f+0x254>
 8011040:	a908      	add	r1, sp, #32
 8011042:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8011046:	3801      	subs	r0, #1
 8011048:	430a      	orrs	r2, r1
 801104a:	e7ab      	b.n	8010fa4 <__kernel_rem_pio2f+0x1d0>
 801104c:	3201      	adds	r2, #1
 801104e:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 8011052:	2e00      	cmp	r6, #0
 8011054:	d0fa      	beq.n	801104c <__kernel_rem_pio2f+0x278>
 8011056:	9905      	ldr	r1, [sp, #20]
 8011058:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 801105c:	eb0d 0001 	add.w	r0, sp, r1
 8011060:	18e6      	adds	r6, r4, r3
 8011062:	a91c      	add	r1, sp, #112	@ 0x70
 8011064:	f104 0c01 	add.w	ip, r4, #1
 8011068:	384c      	subs	r0, #76	@ 0x4c
 801106a:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 801106e:	4422      	add	r2, r4
 8011070:	4562      	cmp	r2, ip
 8011072:	da04      	bge.n	801107e <__kernel_rem_pio2f+0x2aa>
 8011074:	4614      	mov	r4, r2
 8011076:	e710      	b.n	8010e9a <__kernel_rem_pio2f+0xc6>
 8011078:	9804      	ldr	r0, [sp, #16]
 801107a:	2201      	movs	r2, #1
 801107c:	e7e7      	b.n	801104e <__kernel_rem_pio2f+0x27a>
 801107e:	9903      	ldr	r1, [sp, #12]
 8011080:	f8dd e004 	ldr.w	lr, [sp, #4]
 8011084:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 8011088:	9105      	str	r1, [sp, #20]
 801108a:	ee07 1a90 	vmov	s15, r1
 801108e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011092:	2400      	movs	r4, #0
 8011094:	ece6 7a01 	vstmia	r6!, {s15}
 8011098:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 80110cc <__kernel_rem_pio2f+0x2f8>
 801109c:	46b1      	mov	r9, r6
 801109e:	455c      	cmp	r4, fp
 80110a0:	dd04      	ble.n	80110ac <__kernel_rem_pio2f+0x2d8>
 80110a2:	ece0 7a01 	vstmia	r0!, {s15}
 80110a6:	f10c 0c01 	add.w	ip, ip, #1
 80110aa:	e7e1      	b.n	8011070 <__kernel_rem_pio2f+0x29c>
 80110ac:	ecfe 6a01 	vldmia	lr!, {s13}
 80110b0:	ed39 7a01 	vldmdb	r9!, {s14}
 80110b4:	3401      	adds	r4, #1
 80110b6:	eee6 7a87 	vfma.f32	s15, s13, s14
 80110ba:	e7f0      	b.n	801109e <__kernel_rem_pio2f+0x2ca>
 80110bc:	08011794 	.word	0x08011794
 80110c0:	08011768 	.word	0x08011768
 80110c4:	43800000 	.word	0x43800000
 80110c8:	3b800000 	.word	0x3b800000
 80110cc:	00000000 	.word	0x00000000
 80110d0:	9b02      	ldr	r3, [sp, #8]
 80110d2:	eeb0 0a48 	vmov.f32	s0, s16
 80110d6:	eba3 0008 	sub.w	r0, r3, r8
 80110da:	f7ff fe15 	bl	8010d08 <scalbnf>
 80110de:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 80110c4 <__kernel_rem_pio2f+0x2f0>
 80110e2:	eeb4 0ac7 	vcmpe.f32	s0, s14
 80110e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80110ea:	db19      	blt.n	8011120 <__kernel_rem_pio2f+0x34c>
 80110ec:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 80110c8 <__kernel_rem_pio2f+0x2f4>
 80110f0:	ee60 7a27 	vmul.f32	s15, s0, s15
 80110f4:	aa08      	add	r2, sp, #32
 80110f6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80110fa:	3508      	adds	r5, #8
 80110fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011100:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8011104:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011108:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801110c:	ee10 3a10 	vmov	r3, s0
 8011110:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8011114:	ee17 3a90 	vmov	r3, s15
 8011118:	3401      	adds	r4, #1
 801111a:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 801111e:	e74c      	b.n	8010fba <__kernel_rem_pio2f+0x1e6>
 8011120:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8011124:	aa08      	add	r2, sp, #32
 8011126:	ee10 3a10 	vmov	r3, s0
 801112a:	e7f6      	b.n	801111a <__kernel_rem_pio2f+0x346>
 801112c:	a808      	add	r0, sp, #32
 801112e:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8011132:	9001      	str	r0, [sp, #4]
 8011134:	ee07 0a90 	vmov	s15, r0
 8011138:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801113c:	3b01      	subs	r3, #1
 801113e:	ee67 7a80 	vmul.f32	s15, s15, s0
 8011142:	ee20 0a07 	vmul.f32	s0, s0, s14
 8011146:	ed62 7a01 	vstmdb	r2!, {s15}
 801114a:	e743      	b.n	8010fd4 <__kernel_rem_pio2f+0x200>
 801114c:	ecfc 6a01 	vldmia	ip!, {s13}
 8011150:	ecb5 7a01 	vldmia	r5!, {s14}
 8011154:	eee6 7a87 	vfma.f32	s15, s13, s14
 8011158:	3001      	adds	r0, #1
 801115a:	4550      	cmp	r0, sl
 801115c:	dc01      	bgt.n	8011162 <__kernel_rem_pio2f+0x38e>
 801115e:	4290      	cmp	r0, r2
 8011160:	ddf4      	ble.n	801114c <__kernel_rem_pio2f+0x378>
 8011162:	a858      	add	r0, sp, #352	@ 0x160
 8011164:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8011168:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 801116c:	3b01      	subs	r3, #1
 801116e:	e735      	b.n	8010fdc <__kernel_rem_pio2f+0x208>
 8011170:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8011172:	2b02      	cmp	r3, #2
 8011174:	dc09      	bgt.n	801118a <__kernel_rem_pio2f+0x3b6>
 8011176:	2b00      	cmp	r3, #0
 8011178:	dc27      	bgt.n	80111ca <__kernel_rem_pio2f+0x3f6>
 801117a:	d040      	beq.n	80111fe <__kernel_rem_pio2f+0x42a>
 801117c:	f009 0007 	and.w	r0, r9, #7
 8011180:	b059      	add	sp, #356	@ 0x164
 8011182:	ecbd 8b04 	vpop	{d8-d9}
 8011186:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801118a:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 801118c:	2b03      	cmp	r3, #3
 801118e:	d1f5      	bne.n	801117c <__kernel_rem_pio2f+0x3a8>
 8011190:	aa30      	add	r2, sp, #192	@ 0xc0
 8011192:	1f0b      	subs	r3, r1, #4
 8011194:	4413      	add	r3, r2
 8011196:	461a      	mov	r2, r3
 8011198:	4620      	mov	r0, r4
 801119a:	2800      	cmp	r0, #0
 801119c:	dc50      	bgt.n	8011240 <__kernel_rem_pio2f+0x46c>
 801119e:	4622      	mov	r2, r4
 80111a0:	2a01      	cmp	r2, #1
 80111a2:	dc5d      	bgt.n	8011260 <__kernel_rem_pio2f+0x48c>
 80111a4:	ab30      	add	r3, sp, #192	@ 0xc0
 80111a6:	ed5f 7a37 	vldr	s15, [pc, #-220]	@ 80110cc <__kernel_rem_pio2f+0x2f8>
 80111aa:	440b      	add	r3, r1
 80111ac:	2c01      	cmp	r4, #1
 80111ae:	dc67      	bgt.n	8011280 <__kernel_rem_pio2f+0x4ac>
 80111b0:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 80111b4:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 80111b8:	2e00      	cmp	r6, #0
 80111ba:	d167      	bne.n	801128c <__kernel_rem_pio2f+0x4b8>
 80111bc:	edc7 6a00 	vstr	s13, [r7]
 80111c0:	ed87 7a01 	vstr	s14, [r7, #4]
 80111c4:	edc7 7a02 	vstr	s15, [r7, #8]
 80111c8:	e7d8      	b.n	801117c <__kernel_rem_pio2f+0x3a8>
 80111ca:	ab30      	add	r3, sp, #192	@ 0xc0
 80111cc:	ed1f 7a41 	vldr	s14, [pc, #-260]	@ 80110cc <__kernel_rem_pio2f+0x2f8>
 80111d0:	440b      	add	r3, r1
 80111d2:	4622      	mov	r2, r4
 80111d4:	2a00      	cmp	r2, #0
 80111d6:	da24      	bge.n	8011222 <__kernel_rem_pio2f+0x44e>
 80111d8:	b34e      	cbz	r6, 801122e <__kernel_rem_pio2f+0x45a>
 80111da:	eef1 7a47 	vneg.f32	s15, s14
 80111de:	edc7 7a00 	vstr	s15, [r7]
 80111e2:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 80111e6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80111ea:	aa31      	add	r2, sp, #196	@ 0xc4
 80111ec:	2301      	movs	r3, #1
 80111ee:	429c      	cmp	r4, r3
 80111f0:	da20      	bge.n	8011234 <__kernel_rem_pio2f+0x460>
 80111f2:	b10e      	cbz	r6, 80111f8 <__kernel_rem_pio2f+0x424>
 80111f4:	eef1 7a67 	vneg.f32	s15, s15
 80111f8:	edc7 7a01 	vstr	s15, [r7, #4]
 80111fc:	e7be      	b.n	801117c <__kernel_rem_pio2f+0x3a8>
 80111fe:	ab30      	add	r3, sp, #192	@ 0xc0
 8011200:	ed5f 7a4e 	vldr	s15, [pc, #-312]	@ 80110cc <__kernel_rem_pio2f+0x2f8>
 8011204:	440b      	add	r3, r1
 8011206:	2c00      	cmp	r4, #0
 8011208:	da05      	bge.n	8011216 <__kernel_rem_pio2f+0x442>
 801120a:	b10e      	cbz	r6, 8011210 <__kernel_rem_pio2f+0x43c>
 801120c:	eef1 7a67 	vneg.f32	s15, s15
 8011210:	edc7 7a00 	vstr	s15, [r7]
 8011214:	e7b2      	b.n	801117c <__kernel_rem_pio2f+0x3a8>
 8011216:	ed33 7a01 	vldmdb	r3!, {s14}
 801121a:	3c01      	subs	r4, #1
 801121c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011220:	e7f1      	b.n	8011206 <__kernel_rem_pio2f+0x432>
 8011222:	ed73 7a01 	vldmdb	r3!, {s15}
 8011226:	3a01      	subs	r2, #1
 8011228:	ee37 7a27 	vadd.f32	s14, s14, s15
 801122c:	e7d2      	b.n	80111d4 <__kernel_rem_pio2f+0x400>
 801122e:	eef0 7a47 	vmov.f32	s15, s14
 8011232:	e7d4      	b.n	80111de <__kernel_rem_pio2f+0x40a>
 8011234:	ecb2 7a01 	vldmia	r2!, {s14}
 8011238:	3301      	adds	r3, #1
 801123a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801123e:	e7d6      	b.n	80111ee <__kernel_rem_pio2f+0x41a>
 8011240:	ed72 7a01 	vldmdb	r2!, {s15}
 8011244:	edd2 6a01 	vldr	s13, [r2, #4]
 8011248:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801124c:	3801      	subs	r0, #1
 801124e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011252:	ed82 7a00 	vstr	s14, [r2]
 8011256:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801125a:	edc2 7a01 	vstr	s15, [r2, #4]
 801125e:	e79c      	b.n	801119a <__kernel_rem_pio2f+0x3c6>
 8011260:	ed73 7a01 	vldmdb	r3!, {s15}
 8011264:	edd3 6a01 	vldr	s13, [r3, #4]
 8011268:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801126c:	3a01      	subs	r2, #1
 801126e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011272:	ed83 7a00 	vstr	s14, [r3]
 8011276:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801127a:	edc3 7a01 	vstr	s15, [r3, #4]
 801127e:	e78f      	b.n	80111a0 <__kernel_rem_pio2f+0x3cc>
 8011280:	ed33 7a01 	vldmdb	r3!, {s14}
 8011284:	3c01      	subs	r4, #1
 8011286:	ee77 7a87 	vadd.f32	s15, s15, s14
 801128a:	e78f      	b.n	80111ac <__kernel_rem_pio2f+0x3d8>
 801128c:	eef1 6a66 	vneg.f32	s13, s13
 8011290:	eeb1 7a47 	vneg.f32	s14, s14
 8011294:	edc7 6a00 	vstr	s13, [r7]
 8011298:	ed87 7a01 	vstr	s14, [r7, #4]
 801129c:	eef1 7a67 	vneg.f32	s15, s15
 80112a0:	e790      	b.n	80111c4 <__kernel_rem_pio2f+0x3f0>
 80112a2:	bf00      	nop

080112a4 <floorf>:
 80112a4:	ee10 3a10 	vmov	r3, s0
 80112a8:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80112ac:	3a7f      	subs	r2, #127	@ 0x7f
 80112ae:	2a16      	cmp	r2, #22
 80112b0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80112b4:	dc2b      	bgt.n	801130e <floorf+0x6a>
 80112b6:	2a00      	cmp	r2, #0
 80112b8:	da12      	bge.n	80112e0 <floorf+0x3c>
 80112ba:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8011320 <floorf+0x7c>
 80112be:	ee30 0a27 	vadd.f32	s0, s0, s15
 80112c2:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80112c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80112ca:	dd06      	ble.n	80112da <floorf+0x36>
 80112cc:	2b00      	cmp	r3, #0
 80112ce:	da24      	bge.n	801131a <floorf+0x76>
 80112d0:	2900      	cmp	r1, #0
 80112d2:	4b14      	ldr	r3, [pc, #80]	@ (8011324 <floorf+0x80>)
 80112d4:	bf08      	it	eq
 80112d6:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 80112da:	ee00 3a10 	vmov	s0, r3
 80112de:	4770      	bx	lr
 80112e0:	4911      	ldr	r1, [pc, #68]	@ (8011328 <floorf+0x84>)
 80112e2:	4111      	asrs	r1, r2
 80112e4:	420b      	tst	r3, r1
 80112e6:	d0fa      	beq.n	80112de <floorf+0x3a>
 80112e8:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 8011320 <floorf+0x7c>
 80112ec:	ee30 0a27 	vadd.f32	s0, s0, s15
 80112f0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80112f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80112f8:	ddef      	ble.n	80112da <floorf+0x36>
 80112fa:	2b00      	cmp	r3, #0
 80112fc:	bfbe      	ittt	lt
 80112fe:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 8011302:	fa40 f202 	asrlt.w	r2, r0, r2
 8011306:	189b      	addlt	r3, r3, r2
 8011308:	ea23 0301 	bic.w	r3, r3, r1
 801130c:	e7e5      	b.n	80112da <floorf+0x36>
 801130e:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8011312:	d3e4      	bcc.n	80112de <floorf+0x3a>
 8011314:	ee30 0a00 	vadd.f32	s0, s0, s0
 8011318:	4770      	bx	lr
 801131a:	2300      	movs	r3, #0
 801131c:	e7dd      	b.n	80112da <floorf+0x36>
 801131e:	bf00      	nop
 8011320:	7149f2ca 	.word	0x7149f2ca
 8011324:	bf800000 	.word	0xbf800000
 8011328:	007fffff 	.word	0x007fffff

0801132c <_init>:
 801132c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801132e:	bf00      	nop
 8011330:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011332:	bc08      	pop	{r3}
 8011334:	469e      	mov	lr, r3
 8011336:	4770      	bx	lr

08011338 <_fini>:
 8011338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801133a:	bf00      	nop
 801133c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801133e:	bc08      	pop	{r3}
 8011340:	469e      	mov	lr, r3
 8011342:	4770      	bx	lr
