
STU3_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001119c  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000458  08011378  08011378  00012378  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080117d0  080117d0  00013268  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080117d0  080117d0  000127d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080117d8  080117d8  00013268  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080117d8  080117d8  000127d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080117dc  080117dc  000127dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000268  20000000  080117e0  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001d04  20000268  08011a48  00013268  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20001f6c  08011a48  00013f6c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00013268  2**0
                  CONTENTS, READONLY
 12 .debug_info   00029b76  00000000  00000000  00013298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004d6a  00000000  00000000  0003ce0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001d00  00000000  00000000  00041b78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001682  00000000  00000000  00043878  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b510  00000000  00000000  00044efa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00028730  00000000  00000000  0007040a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011acd0  00000000  00000000  00098b3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001b380a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000085a8  00000000  00000000  001b3850  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007e  00000000  00000000  001bbdf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000268 	.word	0x20000268
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0801135c 	.word	0x0801135c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	2000026c 	.word	0x2000026c
 8000214:	0801135c 	.word	0x0801135c

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_dcmpun>:
 8000ac4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__aeabi_dcmpun+0x10>
 8000ace:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad2:	d10a      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ad4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000adc:	d102      	bne.n	8000ae4 <__aeabi_dcmpun+0x20>
 8000ade:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae2:	d102      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	f04f 0001 	mov.w	r0, #1
 8000aee:	4770      	bx	lr

08000af0 <__aeabi_d2uiz>:
 8000af0:	004a      	lsls	r2, r1, #1
 8000af2:	d211      	bcs.n	8000b18 <__aeabi_d2uiz+0x28>
 8000af4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000af8:	d211      	bcs.n	8000b1e <__aeabi_d2uiz+0x2e>
 8000afa:	d50d      	bpl.n	8000b18 <__aeabi_d2uiz+0x28>
 8000afc:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b00:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b04:	d40e      	bmi.n	8000b24 <__aeabi_d2uiz+0x34>
 8000b06:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b0a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b0e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b12:	fa23 f002 	lsr.w	r0, r3, r2
 8000b16:	4770      	bx	lr
 8000b18:	f04f 0000 	mov.w	r0, #0
 8000b1c:	4770      	bx	lr
 8000b1e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b22:	d102      	bne.n	8000b2a <__aeabi_d2uiz+0x3a>
 8000b24:	f04f 30ff 	mov.w	r0, #4294967295
 8000b28:	4770      	bx	lr
 8000b2a:	f04f 0000 	mov.w	r0, #0
 8000b2e:	4770      	bx	lr

08000b30 <__aeabi_d2f>:
 8000b30:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b34:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b38:	bf24      	itt	cs
 8000b3a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b3e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b42:	d90d      	bls.n	8000b60 <__aeabi_d2f+0x30>
 8000b44:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b48:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b4c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b50:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b54:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b58:	bf08      	it	eq
 8000b5a:	f020 0001 	biceq.w	r0, r0, #1
 8000b5e:	4770      	bx	lr
 8000b60:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b64:	d121      	bne.n	8000baa <__aeabi_d2f+0x7a>
 8000b66:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b6a:	bfbc      	itt	lt
 8000b6c:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b70:	4770      	bxlt	lr
 8000b72:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b76:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b7a:	f1c2 0218 	rsb	r2, r2, #24
 8000b7e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b82:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b86:	fa20 f002 	lsr.w	r0, r0, r2
 8000b8a:	bf18      	it	ne
 8000b8c:	f040 0001 	orrne.w	r0, r0, #1
 8000b90:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b94:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b98:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b9c:	ea40 000c 	orr.w	r0, r0, ip
 8000ba0:	fa23 f302 	lsr.w	r3, r3, r2
 8000ba4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ba8:	e7cc      	b.n	8000b44 <__aeabi_d2f+0x14>
 8000baa:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bae:	d107      	bne.n	8000bc0 <__aeabi_d2f+0x90>
 8000bb0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bb4:	bf1e      	ittt	ne
 8000bb6:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000bba:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000bbe:	4770      	bxne	lr
 8000bc0:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000bc4:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000bc8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop

08000bd0 <__aeabi_frsub>:
 8000bd0:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000bd4:	e002      	b.n	8000bdc <__addsf3>
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_fsub>:
 8000bd8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000bdc <__addsf3>:
 8000bdc:	0042      	lsls	r2, r0, #1
 8000bde:	bf1f      	itttt	ne
 8000be0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000be4:	ea92 0f03 	teqne	r2, r3
 8000be8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bec:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bf0:	d06a      	beq.n	8000cc8 <__addsf3+0xec>
 8000bf2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bf6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bfa:	bfc1      	itttt	gt
 8000bfc:	18d2      	addgt	r2, r2, r3
 8000bfe:	4041      	eorgt	r1, r0
 8000c00:	4048      	eorgt	r0, r1
 8000c02:	4041      	eorgt	r1, r0
 8000c04:	bfb8      	it	lt
 8000c06:	425b      	neglt	r3, r3
 8000c08:	2b19      	cmp	r3, #25
 8000c0a:	bf88      	it	hi
 8000c0c:	4770      	bxhi	lr
 8000c0e:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000c12:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c16:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000c1a:	bf18      	it	ne
 8000c1c:	4240      	negne	r0, r0
 8000c1e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000c22:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000c26:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000c2a:	bf18      	it	ne
 8000c2c:	4249      	negne	r1, r1
 8000c2e:	ea92 0f03 	teq	r2, r3
 8000c32:	d03f      	beq.n	8000cb4 <__addsf3+0xd8>
 8000c34:	f1a2 0201 	sub.w	r2, r2, #1
 8000c38:	fa41 fc03 	asr.w	ip, r1, r3
 8000c3c:	eb10 000c 	adds.w	r0, r0, ip
 8000c40:	f1c3 0320 	rsb	r3, r3, #32
 8000c44:	fa01 f103 	lsl.w	r1, r1, r3
 8000c48:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c4c:	d502      	bpl.n	8000c54 <__addsf3+0x78>
 8000c4e:	4249      	negs	r1, r1
 8000c50:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c54:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000c58:	d313      	bcc.n	8000c82 <__addsf3+0xa6>
 8000c5a:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000c5e:	d306      	bcc.n	8000c6e <__addsf3+0x92>
 8000c60:	0840      	lsrs	r0, r0, #1
 8000c62:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c66:	f102 0201 	add.w	r2, r2, #1
 8000c6a:	2afe      	cmp	r2, #254	@ 0xfe
 8000c6c:	d251      	bcs.n	8000d12 <__addsf3+0x136>
 8000c6e:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c72:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c76:	bf08      	it	eq
 8000c78:	f020 0001 	biceq.w	r0, r0, #1
 8000c7c:	ea40 0003 	orr.w	r0, r0, r3
 8000c80:	4770      	bx	lr
 8000c82:	0049      	lsls	r1, r1, #1
 8000c84:	eb40 0000 	adc.w	r0, r0, r0
 8000c88:	3a01      	subs	r2, #1
 8000c8a:	bf28      	it	cs
 8000c8c:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c90:	d2ed      	bcs.n	8000c6e <__addsf3+0x92>
 8000c92:	fab0 fc80 	clz	ip, r0
 8000c96:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c9a:	ebb2 020c 	subs.w	r2, r2, ip
 8000c9e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000ca2:	bfaa      	itet	ge
 8000ca4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ca8:	4252      	neglt	r2, r2
 8000caa:	4318      	orrge	r0, r3
 8000cac:	bfbc      	itt	lt
 8000cae:	40d0      	lsrlt	r0, r2
 8000cb0:	4318      	orrlt	r0, r3
 8000cb2:	4770      	bx	lr
 8000cb4:	f092 0f00 	teq	r2, #0
 8000cb8:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000cbc:	bf06      	itte	eq
 8000cbe:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000cc2:	3201      	addeq	r2, #1
 8000cc4:	3b01      	subne	r3, #1
 8000cc6:	e7b5      	b.n	8000c34 <__addsf3+0x58>
 8000cc8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ccc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000cd0:	bf18      	it	ne
 8000cd2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cd6:	d021      	beq.n	8000d1c <__addsf3+0x140>
 8000cd8:	ea92 0f03 	teq	r2, r3
 8000cdc:	d004      	beq.n	8000ce8 <__addsf3+0x10c>
 8000cde:	f092 0f00 	teq	r2, #0
 8000ce2:	bf08      	it	eq
 8000ce4:	4608      	moveq	r0, r1
 8000ce6:	4770      	bx	lr
 8000ce8:	ea90 0f01 	teq	r0, r1
 8000cec:	bf1c      	itt	ne
 8000cee:	2000      	movne	r0, #0
 8000cf0:	4770      	bxne	lr
 8000cf2:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000cf6:	d104      	bne.n	8000d02 <__addsf3+0x126>
 8000cf8:	0040      	lsls	r0, r0, #1
 8000cfa:	bf28      	it	cs
 8000cfc:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000d00:	4770      	bx	lr
 8000d02:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000d06:	bf3c      	itt	cc
 8000d08:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000d0c:	4770      	bxcc	lr
 8000d0e:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000d12:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000d16:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d1a:	4770      	bx	lr
 8000d1c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d20:	bf16      	itet	ne
 8000d22:	4608      	movne	r0, r1
 8000d24:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d28:	4601      	movne	r1, r0
 8000d2a:	0242      	lsls	r2, r0, #9
 8000d2c:	bf06      	itte	eq
 8000d2e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d32:	ea90 0f01 	teqeq	r0, r1
 8000d36:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000d3a:	4770      	bx	lr

08000d3c <__aeabi_ui2f>:
 8000d3c:	f04f 0300 	mov.w	r3, #0
 8000d40:	e004      	b.n	8000d4c <__aeabi_i2f+0x8>
 8000d42:	bf00      	nop

08000d44 <__aeabi_i2f>:
 8000d44:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000d48:	bf48      	it	mi
 8000d4a:	4240      	negmi	r0, r0
 8000d4c:	ea5f 0c00 	movs.w	ip, r0
 8000d50:	bf08      	it	eq
 8000d52:	4770      	bxeq	lr
 8000d54:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000d58:	4601      	mov	r1, r0
 8000d5a:	f04f 0000 	mov.w	r0, #0
 8000d5e:	e01c      	b.n	8000d9a <__aeabi_l2f+0x2a>

08000d60 <__aeabi_ul2f>:
 8000d60:	ea50 0201 	orrs.w	r2, r0, r1
 8000d64:	bf08      	it	eq
 8000d66:	4770      	bxeq	lr
 8000d68:	f04f 0300 	mov.w	r3, #0
 8000d6c:	e00a      	b.n	8000d84 <__aeabi_l2f+0x14>
 8000d6e:	bf00      	nop

08000d70 <__aeabi_l2f>:
 8000d70:	ea50 0201 	orrs.w	r2, r0, r1
 8000d74:	bf08      	it	eq
 8000d76:	4770      	bxeq	lr
 8000d78:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d7c:	d502      	bpl.n	8000d84 <__aeabi_l2f+0x14>
 8000d7e:	4240      	negs	r0, r0
 8000d80:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d84:	ea5f 0c01 	movs.w	ip, r1
 8000d88:	bf02      	ittt	eq
 8000d8a:	4684      	moveq	ip, r0
 8000d8c:	4601      	moveq	r1, r0
 8000d8e:	2000      	moveq	r0, #0
 8000d90:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d94:	bf08      	it	eq
 8000d96:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d9a:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d9e:	fabc f28c 	clz	r2, ip
 8000da2:	3a08      	subs	r2, #8
 8000da4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000da8:	db10      	blt.n	8000dcc <__aeabi_l2f+0x5c>
 8000daa:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dae:	4463      	add	r3, ip
 8000db0:	fa00 fc02 	lsl.w	ip, r0, r2
 8000db4:	f1c2 0220 	rsb	r2, r2, #32
 8000db8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000dbc:	fa20 f202 	lsr.w	r2, r0, r2
 8000dc0:	eb43 0002 	adc.w	r0, r3, r2
 8000dc4:	bf08      	it	eq
 8000dc6:	f020 0001 	biceq.w	r0, r0, #1
 8000dca:	4770      	bx	lr
 8000dcc:	f102 0220 	add.w	r2, r2, #32
 8000dd0:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dd4:	f1c2 0220 	rsb	r2, r2, #32
 8000dd8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ddc:	fa21 f202 	lsr.w	r2, r1, r2
 8000de0:	eb43 0002 	adc.w	r0, r3, r2
 8000de4:	bf08      	it	eq
 8000de6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dea:	4770      	bx	lr

08000dec <__aeabi_uldivmod>:
 8000dec:	b953      	cbnz	r3, 8000e04 <__aeabi_uldivmod+0x18>
 8000dee:	b94a      	cbnz	r2, 8000e04 <__aeabi_uldivmod+0x18>
 8000df0:	2900      	cmp	r1, #0
 8000df2:	bf08      	it	eq
 8000df4:	2800      	cmpeq	r0, #0
 8000df6:	bf1c      	itt	ne
 8000df8:	f04f 31ff 	movne.w	r1, #4294967295
 8000dfc:	f04f 30ff 	movne.w	r0, #4294967295
 8000e00:	f000 b988 	b.w	8001114 <__aeabi_idiv0>
 8000e04:	f1ad 0c08 	sub.w	ip, sp, #8
 8000e08:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000e0c:	f000 f806 	bl	8000e1c <__udivmoddi4>
 8000e10:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e18:	b004      	add	sp, #16
 8000e1a:	4770      	bx	lr

08000e1c <__udivmoddi4>:
 8000e1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e20:	9d08      	ldr	r5, [sp, #32]
 8000e22:	468e      	mov	lr, r1
 8000e24:	4604      	mov	r4, r0
 8000e26:	4688      	mov	r8, r1
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d14a      	bne.n	8000ec2 <__udivmoddi4+0xa6>
 8000e2c:	428a      	cmp	r2, r1
 8000e2e:	4617      	mov	r7, r2
 8000e30:	d962      	bls.n	8000ef8 <__udivmoddi4+0xdc>
 8000e32:	fab2 f682 	clz	r6, r2
 8000e36:	b14e      	cbz	r6, 8000e4c <__udivmoddi4+0x30>
 8000e38:	f1c6 0320 	rsb	r3, r6, #32
 8000e3c:	fa01 f806 	lsl.w	r8, r1, r6
 8000e40:	fa20 f303 	lsr.w	r3, r0, r3
 8000e44:	40b7      	lsls	r7, r6
 8000e46:	ea43 0808 	orr.w	r8, r3, r8
 8000e4a:	40b4      	lsls	r4, r6
 8000e4c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e50:	fa1f fc87 	uxth.w	ip, r7
 8000e54:	fbb8 f1fe 	udiv	r1, r8, lr
 8000e58:	0c23      	lsrs	r3, r4, #16
 8000e5a:	fb0e 8811 	mls	r8, lr, r1, r8
 8000e5e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e62:	fb01 f20c 	mul.w	r2, r1, ip
 8000e66:	429a      	cmp	r2, r3
 8000e68:	d909      	bls.n	8000e7e <__udivmoddi4+0x62>
 8000e6a:	18fb      	adds	r3, r7, r3
 8000e6c:	f101 30ff 	add.w	r0, r1, #4294967295
 8000e70:	f080 80ea 	bcs.w	8001048 <__udivmoddi4+0x22c>
 8000e74:	429a      	cmp	r2, r3
 8000e76:	f240 80e7 	bls.w	8001048 <__udivmoddi4+0x22c>
 8000e7a:	3902      	subs	r1, #2
 8000e7c:	443b      	add	r3, r7
 8000e7e:	1a9a      	subs	r2, r3, r2
 8000e80:	b2a3      	uxth	r3, r4
 8000e82:	fbb2 f0fe 	udiv	r0, r2, lr
 8000e86:	fb0e 2210 	mls	r2, lr, r0, r2
 8000e8a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e8e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000e92:	459c      	cmp	ip, r3
 8000e94:	d909      	bls.n	8000eaa <__udivmoddi4+0x8e>
 8000e96:	18fb      	adds	r3, r7, r3
 8000e98:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e9c:	f080 80d6 	bcs.w	800104c <__udivmoddi4+0x230>
 8000ea0:	459c      	cmp	ip, r3
 8000ea2:	f240 80d3 	bls.w	800104c <__udivmoddi4+0x230>
 8000ea6:	443b      	add	r3, r7
 8000ea8:	3802      	subs	r0, #2
 8000eaa:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000eae:	eba3 030c 	sub.w	r3, r3, ip
 8000eb2:	2100      	movs	r1, #0
 8000eb4:	b11d      	cbz	r5, 8000ebe <__udivmoddi4+0xa2>
 8000eb6:	40f3      	lsrs	r3, r6
 8000eb8:	2200      	movs	r2, #0
 8000eba:	e9c5 3200 	strd	r3, r2, [r5]
 8000ebe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ec2:	428b      	cmp	r3, r1
 8000ec4:	d905      	bls.n	8000ed2 <__udivmoddi4+0xb6>
 8000ec6:	b10d      	cbz	r5, 8000ecc <__udivmoddi4+0xb0>
 8000ec8:	e9c5 0100 	strd	r0, r1, [r5]
 8000ecc:	2100      	movs	r1, #0
 8000ece:	4608      	mov	r0, r1
 8000ed0:	e7f5      	b.n	8000ebe <__udivmoddi4+0xa2>
 8000ed2:	fab3 f183 	clz	r1, r3
 8000ed6:	2900      	cmp	r1, #0
 8000ed8:	d146      	bne.n	8000f68 <__udivmoddi4+0x14c>
 8000eda:	4573      	cmp	r3, lr
 8000edc:	d302      	bcc.n	8000ee4 <__udivmoddi4+0xc8>
 8000ede:	4282      	cmp	r2, r0
 8000ee0:	f200 8105 	bhi.w	80010ee <__udivmoddi4+0x2d2>
 8000ee4:	1a84      	subs	r4, r0, r2
 8000ee6:	eb6e 0203 	sbc.w	r2, lr, r3
 8000eea:	2001      	movs	r0, #1
 8000eec:	4690      	mov	r8, r2
 8000eee:	2d00      	cmp	r5, #0
 8000ef0:	d0e5      	beq.n	8000ebe <__udivmoddi4+0xa2>
 8000ef2:	e9c5 4800 	strd	r4, r8, [r5]
 8000ef6:	e7e2      	b.n	8000ebe <__udivmoddi4+0xa2>
 8000ef8:	2a00      	cmp	r2, #0
 8000efa:	f000 8090 	beq.w	800101e <__udivmoddi4+0x202>
 8000efe:	fab2 f682 	clz	r6, r2
 8000f02:	2e00      	cmp	r6, #0
 8000f04:	f040 80a4 	bne.w	8001050 <__udivmoddi4+0x234>
 8000f08:	1a8a      	subs	r2, r1, r2
 8000f0a:	0c03      	lsrs	r3, r0, #16
 8000f0c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f10:	b280      	uxth	r0, r0
 8000f12:	b2bc      	uxth	r4, r7
 8000f14:	2101      	movs	r1, #1
 8000f16:	fbb2 fcfe 	udiv	ip, r2, lr
 8000f1a:	fb0e 221c 	mls	r2, lr, ip, r2
 8000f1e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000f22:	fb04 f20c 	mul.w	r2, r4, ip
 8000f26:	429a      	cmp	r2, r3
 8000f28:	d907      	bls.n	8000f3a <__udivmoddi4+0x11e>
 8000f2a:	18fb      	adds	r3, r7, r3
 8000f2c:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000f30:	d202      	bcs.n	8000f38 <__udivmoddi4+0x11c>
 8000f32:	429a      	cmp	r2, r3
 8000f34:	f200 80e0 	bhi.w	80010f8 <__udivmoddi4+0x2dc>
 8000f38:	46c4      	mov	ip, r8
 8000f3a:	1a9b      	subs	r3, r3, r2
 8000f3c:	fbb3 f2fe 	udiv	r2, r3, lr
 8000f40:	fb0e 3312 	mls	r3, lr, r2, r3
 8000f44:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000f48:	fb02 f404 	mul.w	r4, r2, r4
 8000f4c:	429c      	cmp	r4, r3
 8000f4e:	d907      	bls.n	8000f60 <__udivmoddi4+0x144>
 8000f50:	18fb      	adds	r3, r7, r3
 8000f52:	f102 30ff 	add.w	r0, r2, #4294967295
 8000f56:	d202      	bcs.n	8000f5e <__udivmoddi4+0x142>
 8000f58:	429c      	cmp	r4, r3
 8000f5a:	f200 80ca 	bhi.w	80010f2 <__udivmoddi4+0x2d6>
 8000f5e:	4602      	mov	r2, r0
 8000f60:	1b1b      	subs	r3, r3, r4
 8000f62:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000f66:	e7a5      	b.n	8000eb4 <__udivmoddi4+0x98>
 8000f68:	f1c1 0620 	rsb	r6, r1, #32
 8000f6c:	408b      	lsls	r3, r1
 8000f6e:	fa22 f706 	lsr.w	r7, r2, r6
 8000f72:	431f      	orrs	r7, r3
 8000f74:	fa0e f401 	lsl.w	r4, lr, r1
 8000f78:	fa20 f306 	lsr.w	r3, r0, r6
 8000f7c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000f80:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000f84:	4323      	orrs	r3, r4
 8000f86:	fa00 f801 	lsl.w	r8, r0, r1
 8000f8a:	fa1f fc87 	uxth.w	ip, r7
 8000f8e:	fbbe f0f9 	udiv	r0, lr, r9
 8000f92:	0c1c      	lsrs	r4, r3, #16
 8000f94:	fb09 ee10 	mls	lr, r9, r0, lr
 8000f98:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000f9c:	fb00 fe0c 	mul.w	lr, r0, ip
 8000fa0:	45a6      	cmp	lr, r4
 8000fa2:	fa02 f201 	lsl.w	r2, r2, r1
 8000fa6:	d909      	bls.n	8000fbc <__udivmoddi4+0x1a0>
 8000fa8:	193c      	adds	r4, r7, r4
 8000faa:	f100 3aff 	add.w	sl, r0, #4294967295
 8000fae:	f080 809c 	bcs.w	80010ea <__udivmoddi4+0x2ce>
 8000fb2:	45a6      	cmp	lr, r4
 8000fb4:	f240 8099 	bls.w	80010ea <__udivmoddi4+0x2ce>
 8000fb8:	3802      	subs	r0, #2
 8000fba:	443c      	add	r4, r7
 8000fbc:	eba4 040e 	sub.w	r4, r4, lr
 8000fc0:	fa1f fe83 	uxth.w	lr, r3
 8000fc4:	fbb4 f3f9 	udiv	r3, r4, r9
 8000fc8:	fb09 4413 	mls	r4, r9, r3, r4
 8000fcc:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000fd0:	fb03 fc0c 	mul.w	ip, r3, ip
 8000fd4:	45a4      	cmp	ip, r4
 8000fd6:	d908      	bls.n	8000fea <__udivmoddi4+0x1ce>
 8000fd8:	193c      	adds	r4, r7, r4
 8000fda:	f103 3eff 	add.w	lr, r3, #4294967295
 8000fde:	f080 8082 	bcs.w	80010e6 <__udivmoddi4+0x2ca>
 8000fe2:	45a4      	cmp	ip, r4
 8000fe4:	d97f      	bls.n	80010e6 <__udivmoddi4+0x2ca>
 8000fe6:	3b02      	subs	r3, #2
 8000fe8:	443c      	add	r4, r7
 8000fea:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000fee:	eba4 040c 	sub.w	r4, r4, ip
 8000ff2:	fba0 ec02 	umull	lr, ip, r0, r2
 8000ff6:	4564      	cmp	r4, ip
 8000ff8:	4673      	mov	r3, lr
 8000ffa:	46e1      	mov	r9, ip
 8000ffc:	d362      	bcc.n	80010c4 <__udivmoddi4+0x2a8>
 8000ffe:	d05f      	beq.n	80010c0 <__udivmoddi4+0x2a4>
 8001000:	b15d      	cbz	r5, 800101a <__udivmoddi4+0x1fe>
 8001002:	ebb8 0203 	subs.w	r2, r8, r3
 8001006:	eb64 0409 	sbc.w	r4, r4, r9
 800100a:	fa04 f606 	lsl.w	r6, r4, r6
 800100e:	fa22 f301 	lsr.w	r3, r2, r1
 8001012:	431e      	orrs	r6, r3
 8001014:	40cc      	lsrs	r4, r1
 8001016:	e9c5 6400 	strd	r6, r4, [r5]
 800101a:	2100      	movs	r1, #0
 800101c:	e74f      	b.n	8000ebe <__udivmoddi4+0xa2>
 800101e:	fbb1 fcf2 	udiv	ip, r1, r2
 8001022:	0c01      	lsrs	r1, r0, #16
 8001024:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8001028:	b280      	uxth	r0, r0
 800102a:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800102e:	463b      	mov	r3, r7
 8001030:	4638      	mov	r0, r7
 8001032:	463c      	mov	r4, r7
 8001034:	46b8      	mov	r8, r7
 8001036:	46be      	mov	lr, r7
 8001038:	2620      	movs	r6, #32
 800103a:	fbb1 f1f7 	udiv	r1, r1, r7
 800103e:	eba2 0208 	sub.w	r2, r2, r8
 8001042:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8001046:	e766      	b.n	8000f16 <__udivmoddi4+0xfa>
 8001048:	4601      	mov	r1, r0
 800104a:	e718      	b.n	8000e7e <__udivmoddi4+0x62>
 800104c:	4610      	mov	r0, r2
 800104e:	e72c      	b.n	8000eaa <__udivmoddi4+0x8e>
 8001050:	f1c6 0220 	rsb	r2, r6, #32
 8001054:	fa2e f302 	lsr.w	r3, lr, r2
 8001058:	40b7      	lsls	r7, r6
 800105a:	40b1      	lsls	r1, r6
 800105c:	fa20 f202 	lsr.w	r2, r0, r2
 8001060:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8001064:	430a      	orrs	r2, r1
 8001066:	fbb3 f8fe 	udiv	r8, r3, lr
 800106a:	b2bc      	uxth	r4, r7
 800106c:	fb0e 3318 	mls	r3, lr, r8, r3
 8001070:	0c11      	lsrs	r1, r2, #16
 8001072:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001076:	fb08 f904 	mul.w	r9, r8, r4
 800107a:	40b0      	lsls	r0, r6
 800107c:	4589      	cmp	r9, r1
 800107e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8001082:	b280      	uxth	r0, r0
 8001084:	d93e      	bls.n	8001104 <__udivmoddi4+0x2e8>
 8001086:	1879      	adds	r1, r7, r1
 8001088:	f108 3cff 	add.w	ip, r8, #4294967295
 800108c:	d201      	bcs.n	8001092 <__udivmoddi4+0x276>
 800108e:	4589      	cmp	r9, r1
 8001090:	d81f      	bhi.n	80010d2 <__udivmoddi4+0x2b6>
 8001092:	eba1 0109 	sub.w	r1, r1, r9
 8001096:	fbb1 f9fe 	udiv	r9, r1, lr
 800109a:	fb09 f804 	mul.w	r8, r9, r4
 800109e:	fb0e 1119 	mls	r1, lr, r9, r1
 80010a2:	b292      	uxth	r2, r2
 80010a4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80010a8:	4542      	cmp	r2, r8
 80010aa:	d229      	bcs.n	8001100 <__udivmoddi4+0x2e4>
 80010ac:	18ba      	adds	r2, r7, r2
 80010ae:	f109 31ff 	add.w	r1, r9, #4294967295
 80010b2:	d2c4      	bcs.n	800103e <__udivmoddi4+0x222>
 80010b4:	4542      	cmp	r2, r8
 80010b6:	d2c2      	bcs.n	800103e <__udivmoddi4+0x222>
 80010b8:	f1a9 0102 	sub.w	r1, r9, #2
 80010bc:	443a      	add	r2, r7
 80010be:	e7be      	b.n	800103e <__udivmoddi4+0x222>
 80010c0:	45f0      	cmp	r8, lr
 80010c2:	d29d      	bcs.n	8001000 <__udivmoddi4+0x1e4>
 80010c4:	ebbe 0302 	subs.w	r3, lr, r2
 80010c8:	eb6c 0c07 	sbc.w	ip, ip, r7
 80010cc:	3801      	subs	r0, #1
 80010ce:	46e1      	mov	r9, ip
 80010d0:	e796      	b.n	8001000 <__udivmoddi4+0x1e4>
 80010d2:	eba7 0909 	sub.w	r9, r7, r9
 80010d6:	4449      	add	r1, r9
 80010d8:	f1a8 0c02 	sub.w	ip, r8, #2
 80010dc:	fbb1 f9fe 	udiv	r9, r1, lr
 80010e0:	fb09 f804 	mul.w	r8, r9, r4
 80010e4:	e7db      	b.n	800109e <__udivmoddi4+0x282>
 80010e6:	4673      	mov	r3, lr
 80010e8:	e77f      	b.n	8000fea <__udivmoddi4+0x1ce>
 80010ea:	4650      	mov	r0, sl
 80010ec:	e766      	b.n	8000fbc <__udivmoddi4+0x1a0>
 80010ee:	4608      	mov	r0, r1
 80010f0:	e6fd      	b.n	8000eee <__udivmoddi4+0xd2>
 80010f2:	443b      	add	r3, r7
 80010f4:	3a02      	subs	r2, #2
 80010f6:	e733      	b.n	8000f60 <__udivmoddi4+0x144>
 80010f8:	f1ac 0c02 	sub.w	ip, ip, #2
 80010fc:	443b      	add	r3, r7
 80010fe:	e71c      	b.n	8000f3a <__udivmoddi4+0x11e>
 8001100:	4649      	mov	r1, r9
 8001102:	e79c      	b.n	800103e <__udivmoddi4+0x222>
 8001104:	eba1 0109 	sub.w	r1, r1, r9
 8001108:	46c4      	mov	ip, r8
 800110a:	fbb1 f9fe 	udiv	r9, r1, lr
 800110e:	fb09 f804 	mul.w	r8, r9, r4
 8001112:	e7c4      	b.n	800109e <__udivmoddi4+0x282>

08001114 <__aeabi_idiv0>:
 8001114:	4770      	bx	lr
 8001116:	bf00      	nop

08001118 <sign>:
#include <math.h>

/**
 * @brief Sign function: returns +1, -1, or 0 based on input value.
 */
int8_t sign(float32_t x) {
 8001118:	b480      	push	{r7}
 800111a:	b083      	sub	sp, #12
 800111c:	af00      	add	r7, sp, #0
 800111e:	ed87 0a01 	vstr	s0, [r7, #4]
    if (x > 0.0f) {
 8001122:	edd7 7a01 	vldr	s15, [r7, #4]
 8001126:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800112a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800112e:	dd01      	ble.n	8001134 <sign+0x1c>
        return 1;
 8001130:	2301      	movs	r3, #1
 8001132:	e00a      	b.n	800114a <sign+0x32>
    } else if (x < 0.0f) {
 8001134:	edd7 7a01 	vldr	s15, [r7, #4]
 8001138:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800113c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001140:	d502      	bpl.n	8001148 <sign+0x30>
        return -1;
 8001142:	f04f 33ff 	mov.w	r3, #4294967295
 8001146:	e000      	b.n	800114a <sign+0x32>
    } else {
        return 0;
 8001148:	2300      	movs	r3, #0
    }
}
 800114a:	4618      	mov	r0, r3
 800114c:	370c      	adds	r7, #12
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr

08001156 <Backlash_Update>:
 * @param pos_ref Desired reference position.
 * @param pos_act Actual measured position.
 * @param vel Measured or estimated velocity.
 * @return Compensated position to use in control.
 */
float32_t Backlash_Update(BacklashController *ctrl, float32_t pos_ref, float32_t pos_act, float32_t vel) {
 8001156:	b580      	push	{r7, lr}
 8001158:	b086      	sub	sp, #24
 800115a:	af00      	add	r7, sp, #0
 800115c:	60f8      	str	r0, [r7, #12]
 800115e:	ed87 0a02 	vstr	s0, [r7, #8]
 8001162:	edc7 0a01 	vstr	s1, [r7, #4]
 8001166:	ed87 1a00 	vstr	s2, [r7]
    int8_t direction_now = sign(vel);
 800116a:	ed97 0a00 	vldr	s0, [r7]
 800116e:	f7ff ffd3 	bl	8001118 <sign>
 8001172:	4603      	mov	r3, r0
 8001174:	75fb      	strb	r3, [r7, #23]

    // Detect direction change
    if (direction_now != ctrl->direction_prev && direction_now != 0) {
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800117c:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8001180:	429a      	cmp	r2, r3
 8001182:	d01a      	beq.n	80011ba <Backlash_Update+0x64>
 8001184:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001188:	2b00      	cmp	r3, #0
 800118a:	d016      	beq.n	80011ba <Backlash_Update+0x64>
        ctrl->direction_prev = direction_now;
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	7dfa      	ldrb	r2, [r7, #23]
 8001190:	721a      	strb	r2, [r3, #8]
        ctrl->state = TRANSITION;
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	2200      	movs	r2, #0
 8001196:	725a      	strb	r2, [r3, #9]

        if (direction_now > 0) {
 8001198:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800119c:	2b00      	cmp	r3, #0
 800119e:	dd04      	ble.n	80011aa <Backlash_Update+0x54>
            ctrl->backlash_offset = ctrl->backlash_width;
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	681a      	ldr	r2, [r3, #0]
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	605a      	str	r2, [r3, #4]
 80011a8:	e007      	b.n	80011ba <Backlash_Update+0x64>
        } else {
            ctrl->backlash_offset = -ctrl->backlash_width;
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	edd3 7a00 	vldr	s15, [r3]
 80011b0:	eef1 7a67 	vneg.f32	s15, s15
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	edc3 7a01 	vstr	s15, [r3, #4]
        }
    }

    // Apply backlash offset to reference
    float32_t pos_ref_compensated = pos_ref + ctrl->backlash_offset;
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	edd3 7a01 	vldr	s15, [r3, #4]
 80011c0:	ed97 7a02 	vldr	s14, [r7, #8]
 80011c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011c8:	edc7 7a04 	vstr	s15, [r7, #16]

    // Check if backlash has been taken up
    if (ctrl->state == TRANSITION) {
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	f993 3009 	ldrsb.w	r3, [r3, #9]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d11e      	bne.n	8001214 <Backlash_Update+0xbe>
        if (fabsf(pos_ref - pos_act) >= ctrl->backlash_width) {
 80011d6:	ed97 7a02 	vldr	s14, [r7, #8]
 80011da:	edd7 7a01 	vldr	s15, [r7, #4]
 80011de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011e2:	eeb0 7ae7 	vabs.f32	s14, s15
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	edd3 7a00 	vldr	s15, [r3]
 80011ec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80011f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011f4:	db0e      	blt.n	8001214 <Backlash_Update+0xbe>
            if (direction_now > 0) {
 80011f6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	dd03      	ble.n	8001206 <Backlash_Update+0xb0>
                ctrl->state = ENGAGED_POS;
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	2201      	movs	r2, #1
 8001202:	725a      	strb	r2, [r3, #9]
 8001204:	e002      	b.n	800120c <Backlash_Update+0xb6>
            } else {
                ctrl->state = ENGAGED_NEG;
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	22ff      	movs	r2, #255	@ 0xff
 800120a:	725a      	strb	r2, [r3, #9]
            }
            ctrl->backlash_offset = 0.0f;
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	f04f 0200 	mov.w	r2, #0
 8001212:	605a      	str	r2, [r3, #4]
        }
    }

    return pos_ref_compensated;
 8001214:	693b      	ldr	r3, [r7, #16]
 8001216:	ee07 3a90 	vmov	s15, r3
}
 800121a:	eeb0 0a67 	vmov.f32	s0, s15
 800121e:	3718      	adds	r7, #24
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}

08001224 <modbus_heartbeat>:

void modbus_heartbeat_init(ModbusHandleTypedef *hmodbus) {
	hmodbus->RegisterAddress[0x00].U16 = 22881;
}

void modbus_heartbeat(ModbusHandleTypedef *hmodbus) {
 8001224:	b480      	push	{r7}
 8001226:	b083      	sub	sp, #12
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
	//if (hmodbus->RegisterAddress[0x00].U16 == 18537) {
	hmodbus->RegisterAddress[0x00].U16 = 22881;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	f645 1261 	movw	r2, #22881	@ 0x5961
 8001234:	801a      	strh	r2, [r3, #0]
	//}
}
 8001236:	bf00      	nop
 8001238:	370c      	adds	r7, #12
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr

08001242 <modbus_Base_System_Status>:

uint8_t modbus_Base_System_Status(ModbusHandleTypedef *hmodbus) {
 8001242:	b480      	push	{r7}
 8001244:	b085      	sub	sp, #20
 8001246:	af00      	add	r7, sp, #0
 8001248:	6078      	str	r0, [r7, #4]
	uint8_t status = hmodbus->RegisterAddress[0x01].U16;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	3302      	adds	r3, #2
 8001250:	881b      	ldrh	r3, [r3, #0]
 8001252:	73fb      	strb	r3, [r7, #15]
	return status;
 8001254:	7bfb      	ldrb	r3, [r7, #15]
}
 8001256:	4618      	mov	r0, r3
 8001258:	3714      	adds	r7, #20
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr

08001262 <modbus_servo_Status>:

void modbus_servo_Status(ModbusHandleTypedef *hmodbus, uint8_t Pen_status) {
 8001262:	b480      	push	{r7}
 8001264:	b083      	sub	sp, #12
 8001266:	af00      	add	r7, sp, #0
 8001268:	6078      	str	r0, [r7, #4]
 800126a:	460b      	mov	r3, r1
 800126c:	70fb      	strb	r3, [r7, #3]
	hmodbus->RegisterAddress[0x03].U16 = Pen_status;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	3306      	adds	r3, #6
 8001274:	78fa      	ldrb	r2, [r7, #3]
 8001276:	b292      	uxth	r2, r2
 8001278:	801a      	strh	r2, [r3, #0]
}
 800127a:	bf00      	nop
 800127c:	370c      	adds	r7, #12
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr

08001286 <modbus_write_servo_up>:

uint8_t modbus_write_servo_up(ModbusHandleTypedef *hmodbus) {
 8001286:	b480      	push	{r7}
 8001288:	b085      	sub	sp, #20
 800128a:	af00      	add	r7, sp, #0
 800128c:	6078      	str	r0, [r7, #4]
	uint8_t status = hmodbus->RegisterAddress[0x04].U16;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	3308      	adds	r3, #8
 8001294:	881b      	ldrh	r3, [r3, #0]
 8001296:	73fb      	strb	r3, [r7, #15]
//	if (status == 1) {
//		if (hmodbus->RegisterAddress[0x05].U16 == 1) {
//			hmodbus->RegisterAddress[0x05].U16 = 0;
//		}
//	}
	return status;
 8001298:	7bfb      	ldrb	r3, [r7, #15]

}
 800129a:	4618      	mov	r0, r3
 800129c:	3714      	adds	r7, #20
 800129e:	46bd      	mov	sp, r7
 80012a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a4:	4770      	bx	lr

080012a6 <modbus_write_servo_down>:
uint8_t modbus_write_servo_down(ModbusHandleTypedef *hmodbus) {
 80012a6:	b480      	push	{r7}
 80012a8:	b085      	sub	sp, #20
 80012aa:	af00      	add	r7, sp, #0
 80012ac:	6078      	str	r0, [r7, #4]
	uint8_t status = hmodbus->RegisterAddress[0x05].U16;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	330a      	adds	r3, #10
 80012b4:	881b      	ldrh	r3, [r3, #0]
 80012b6:	73fb      	strb	r3, [r7, #15]
//		if (hmodbus->RegisterAddress[0x04].U16 == 1) {
//			hmodbus->RegisterAddress[0x04].U16 = 0;
//		}
//
//	}
	return status;
 80012b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	3714      	adds	r7, #20
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr

080012c6 <R_Theta_moving_Status>:

void R_Theta_moving_Status(ModbusHandleTypedef *hmodbus, uint8_t Moving_Status) {
 80012c6:	b480      	push	{r7}
 80012c8:	b083      	sub	sp, #12
 80012ca:	af00      	add	r7, sp, #0
 80012cc:	6078      	str	r0, [r7, #4]
 80012ce:	460b      	mov	r3, r1
 80012d0:	70fb      	strb	r3, [r7, #3]
	hmodbus->RegisterAddress[0x10].U16 = Moving_Status;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	3320      	adds	r3, #32
 80012d8:	78fa      	ldrb	r2, [r7, #3]
 80012da:	b292      	uxth	r2, r2
 80012dc:	801a      	strh	r2, [r3, #0]
}
 80012de:	bf00      	nop
 80012e0:	370c      	adds	r7, #12
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr

080012ea <modbus_Update_All>:
void modbus_theta_acceleration(ModbusHandleTypedef *hmodbus, float theta_accel) {
	hmodbus->RegisterAddress[0x16].U16 = format_robot_to_base(theta_accel);
}
void modbus_Update_All(ModbusHandleTypedef *hmodbus, float r_pos,
		float theta_pos, float r_Velo, float theta_Velo, float r_accel,
		float theta_accel) {
 80012ea:	b590      	push	{r4, r7, lr}
 80012ec:	b089      	sub	sp, #36	@ 0x24
 80012ee:	af00      	add	r7, sp, #0
 80012f0:	61f8      	str	r0, [r7, #28]
 80012f2:	ed87 0a06 	vstr	s0, [r7, #24]
 80012f6:	edc7 0a05 	vstr	s1, [r7, #20]
 80012fa:	ed87 1a04 	vstr	s2, [r7, #16]
 80012fe:	edc7 1a03 	vstr	s3, [r7, #12]
 8001302:	ed87 2a02 	vstr	s4, [r7, #8]
 8001306:	edc7 2a01 	vstr	s5, [r7, #4]
	hmodbus->RegisterAddress[0x11].U16 = format_robot_to_base(r_pos);
 800130a:	69fb      	ldr	r3, [r7, #28]
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	f103 0422 	add.w	r4, r3, #34	@ 0x22
 8001312:	ed97 0a06 	vldr	s0, [r7, #24]
 8001316:	f000 fd0d 	bl	8001d34 <format_robot_to_base>
 800131a:	4603      	mov	r3, r0
 800131c:	8023      	strh	r3, [r4, #0]
	hmodbus->RegisterAddress[0x12].U16 = format_robot_to_base(theta_pos);
 800131e:	69fb      	ldr	r3, [r7, #28]
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	f103 0424 	add.w	r4, r3, #36	@ 0x24
 8001326:	ed97 0a05 	vldr	s0, [r7, #20]
 800132a:	f000 fd03 	bl	8001d34 <format_robot_to_base>
 800132e:	4603      	mov	r3, r0
 8001330:	8023      	strh	r3, [r4, #0]
	hmodbus->RegisterAddress[0x13].U16 = format_robot_to_base(r_Velo);
 8001332:	69fb      	ldr	r3, [r7, #28]
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	f103 0426 	add.w	r4, r3, #38	@ 0x26
 800133a:	ed97 0a04 	vldr	s0, [r7, #16]
 800133e:	f000 fcf9 	bl	8001d34 <format_robot_to_base>
 8001342:	4603      	mov	r3, r0
 8001344:	8023      	strh	r3, [r4, #0]
	hmodbus->RegisterAddress[0x14].U16 = format_robot_to_base(theta_Velo);
 8001346:	69fb      	ldr	r3, [r7, #28]
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	f103 0428 	add.w	r4, r3, #40	@ 0x28
 800134e:	ed97 0a03 	vldr	s0, [r7, #12]
 8001352:	f000 fcef 	bl	8001d34 <format_robot_to_base>
 8001356:	4603      	mov	r3, r0
 8001358:	8023      	strh	r3, [r4, #0]
	hmodbus->RegisterAddress[0x15].U16 = format_robot_to_base(r_accel);
 800135a:	69fb      	ldr	r3, [r7, #28]
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	f103 042a 	add.w	r4, r3, #42	@ 0x2a
 8001362:	ed97 0a02 	vldr	s0, [r7, #8]
 8001366:	f000 fce5 	bl	8001d34 <format_robot_to_base>
 800136a:	4603      	mov	r3, r0
 800136c:	8023      	strh	r3, [r4, #0]
	hmodbus->RegisterAddress[0x16].U16 = format_robot_to_base(theta_accel);
 800136e:	69fb      	ldr	r3, [r7, #28]
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	f103 042c 	add.w	r4, r3, #44	@ 0x2c
 8001376:	ed97 0a01 	vldr	s0, [r7, #4]
 800137a:	f000 fcdb 	bl	8001d34 <format_robot_to_base>
 800137e:	4603      	mov	r3, r0
 8001380:	8023      	strh	r3, [r4, #0]
}
 8001382:	bf00      	nop
 8001384:	3724      	adds	r7, #36	@ 0x24
 8001386:	46bd      	mov	sp, r7
 8001388:	bd90      	pop	{r4, r7, pc}

0800138a <set_Target_Position_ten_points>:

void set_Target_Position_ten_points(ModbusHandleTypedef *hmodbus, float r_pos,
		float theta_pos, uint8_t index) //
{
 800138a:	b590      	push	{r4, r7, lr}
 800138c:	b085      	sub	sp, #20
 800138e:	af00      	add	r7, sp, #0
 8001390:	60f8      	str	r0, [r7, #12]
 8001392:	ed87 0a02 	vstr	s0, [r7, #8]
 8001396:	edc7 0a01 	vstr	s1, [r7, #4]
 800139a:	460b      	mov	r3, r1
 800139c:	70fb      	strb	r3, [r7, #3]
	if (index >= 0 && index <= 9) {
 800139e:	78fb      	ldrb	r3, [r7, #3]
 80013a0:	2b09      	cmp	r3, #9
 80013a2:	d818      	bhi.n	80013d6 <set_Target_Position_ten_points+0x4c>
		hmodbus->RegisterAddress[0x20 + index * 2].U16 = format_robot_to_base(
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	685a      	ldr	r2, [r3, #4]
 80013a8:	78fb      	ldrb	r3, [r7, #3]
 80013aa:	3310      	adds	r3, #16
 80013ac:	009b      	lsls	r3, r3, #2
 80013ae:	18d4      	adds	r4, r2, r3
 80013b0:	ed97 0a02 	vldr	s0, [r7, #8]
 80013b4:	f000 fcbe 	bl	8001d34 <format_robot_to_base>
 80013b8:	4603      	mov	r3, r0
 80013ba:	8023      	strh	r3, [r4, #0]
				r_pos);
		hmodbus->RegisterAddress[0x20 + (index * 2) + 1].U16 =
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	685a      	ldr	r2, [r3, #4]
 80013c0:	78fb      	ldrb	r3, [r7, #3]
 80013c2:	005b      	lsls	r3, r3, #1
 80013c4:	3321      	adds	r3, #33	@ 0x21
 80013c6:	005b      	lsls	r3, r3, #1
 80013c8:	18d4      	adds	r4, r2, r3
				format_robot_to_base(theta_pos);
 80013ca:	ed97 0a01 	vldr	s0, [r7, #4]
 80013ce:	f000 fcb1 	bl	8001d34 <format_robot_to_base>
 80013d2:	4603      	mov	r3, r0
		hmodbus->RegisterAddress[0x20 + (index * 2) + 1].U16 =
 80013d4:	8023      	strh	r3, [r4, #0]
	}
}
 80013d6:	bf00      	nop
 80013d8:	3714      	adds	r7, #20
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd90      	pop	{r4, r7, pc}

080013de <modbus_set_goal_r_position>:
uint16_t modbus_set_goal_r_position(ModbusHandleTypedef *hmodbus) {
 80013de:	b580      	push	{r7, lr}
 80013e0:	b084      	sub	sp, #16
 80013e2:	af00      	add	r7, sp, #0
 80013e4:	6078      	str	r0, [r7, #4]
	uint16_t goal_r_position = hmodbus->RegisterAddress[0x40].U16;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	3380      	adds	r3, #128	@ 0x80
 80013ec:	881b      	ldrh	r3, [r3, #0]
 80013ee:	81fb      	strh	r3, [r7, #14]
	return format_base_to_robot(goal_r_position);
 80013f0:	89fb      	ldrh	r3, [r7, #14]
 80013f2:	4618      	mov	r0, r3
 80013f4:	f000 fcc0 	bl	8001d78 <format_base_to_robot>
 80013f8:	eef0 7a40 	vmov.f32	s15, s0
 80013fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001400:	ee17 3a90 	vmov	r3, s15
 8001404:	b29b      	uxth	r3, r3
}
 8001406:	4618      	mov	r0, r3
 8001408:	3710      	adds	r7, #16
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}

0800140e <modbus_set_goal_theta_position>:
uint16_t modbus_set_goal_theta_position(ModbusHandleTypedef *hmodbus) {
 800140e:	b580      	push	{r7, lr}
 8001410:	b084      	sub	sp, #16
 8001412:	af00      	add	r7, sp, #0
 8001414:	6078      	str	r0, [r7, #4]
	uint16_t goal_theta_position = hmodbus->RegisterAddress[0x41].U16;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	3382      	adds	r3, #130	@ 0x82
 800141c:	881b      	ldrh	r3, [r3, #0]
 800141e:	81fb      	strh	r3, [r7, #14]
	return format_base_to_robot(goal_theta_position);
 8001420:	89fb      	ldrh	r3, [r7, #14]
 8001422:	4618      	mov	r0, r3
 8001424:	f000 fca8 	bl	8001d78 <format_base_to_robot>
 8001428:	eef0 7a40 	vmov.f32	s15, s0
 800142c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001430:	ee17 3a90 	vmov	r3, s15
 8001434:	b29b      	uxth	r3, r3
}
 8001436:	4618      	mov	r0, r3
 8001438:	3710      	adds	r7, #16
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
	...

08001440 <Coordinate_Base_to_Robot>:

Robot_goal_point Coordinate_Base_to_Robot(Robot_goal_point *Goal_point,
		float r_position, float theta_position) {
 8001440:	b5b0      	push	{r4, r5, r7, lr}
 8001442:	b090      	sub	sp, #64	@ 0x40
 8001444:	af00      	add	r7, sp, #0
 8001446:	6178      	str	r0, [r7, #20]
 8001448:	ed87 0a04 	vstr	s0, [r7, #16]
 800144c:	edc7 0a03 	vstr	s1, [r7, #12]

	Goal_point->r_goal_position = 0;
 8001450:	697b      	ldr	r3, [r7, #20]
 8001452:	f04f 0200 	mov.w	r2, #0
 8001456:	601a      	str	r2, [r3, #0]
	Goal_point->theta_goal_position = 0;
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	f04f 0200 	mov.w	r2, #0
 800145e:	605a      	str	r2, [r3, #4]

	float prismatic_pos;
	float beta = pow(r_position, 2) + pow(Offet, 2);
 8001460:	6938      	ldr	r0, [r7, #16]
 8001462:	f7ff f83d 	bl	80004e0 <__aeabi_f2d>
 8001466:	4602      	mov	r2, r0
 8001468:	460b      	mov	r3, r1
 800146a:	ed9f 1bd3 	vldr	d1, [pc, #844]	@ 80017b8 <Coordinate_Base_to_Robot+0x378>
 800146e:	ec43 2b10 	vmov	d0, r2, r3
 8001472:	f00e f907 	bl	800f684 <pow>
 8001476:	ec51 0b10 	vmov	r0, r1, d0
 800147a:	a3d1      	add	r3, pc, #836	@ (adr r3, 80017c0 <Coordinate_Base_to_Robot+0x380>)
 800147c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001480:	f7fe fed0 	bl	8000224 <__adddf3>
 8001484:	4602      	mov	r2, r0
 8001486:	460b      	mov	r3, r1
 8001488:	4610      	mov	r0, r2
 800148a:	4619      	mov	r1, r3
 800148c:	f7ff fb50 	bl	8000b30 <__aeabi_d2f>
 8001490:	4603      	mov	r3, r0
 8001492:	63bb      	str	r3, [r7, #56]	@ 0x38
	float gamma = 2 * r_position * Offet;
 8001494:	edd7 7a04 	vldr	s15, [r7, #16]
 8001498:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800149c:	ed9f 7aca 	vldr	s14, [pc, #808]	@ 80017c8 <Coordinate_Base_to_Robot+0x388>
 80014a0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014a4:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34

	if (theta_position >= 0 && theta_position <= 90) // quadrant 1
 80014a8:	edd7 7a03 	vldr	s15, [r7, #12]
 80014ac:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80014b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014b4:	db35      	blt.n	8001522 <Coordinate_Base_to_Robot+0xe2>
 80014b6:	edd7 7a03 	vldr	s15, [r7, #12]
 80014ba:	ed9f 7ac9 	vldr	s14, [pc, #804]	@ 80017e0 <Coordinate_Base_to_Robot+0x3a0>
 80014be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014c6:	d82c      	bhi.n	8001522 <Coordinate_Base_to_Robot+0xe2>
			{
		//Goal_point->theta_goal_position = degree_to_rad(90 - alpha);
		prismatic_pos = sqrt(beta - gamma * cosf(degree_to_rad(theta_position + 90)));
 80014c8:	edd7 7a03 	vldr	s15, [r7, #12]
 80014cc:	ed9f 7ac4 	vldr	s14, [pc, #784]	@ 80017e0 <Coordinate_Base_to_Robot+0x3a0>
 80014d0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80014d4:	eeb0 0a67 	vmov.f32	s0, s15
 80014d8:	f000 fc02 	bl	8001ce0 <degree_to_rad>
 80014dc:	eef0 7a40 	vmov.f32	s15, s0
 80014e0:	eeb0 0a67 	vmov.f32	s0, s15
 80014e4:	f00e f9b4 	bl	800f850 <cosf>
 80014e8:	eeb0 7a40 	vmov.f32	s14, s0
 80014ec:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80014f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014f4:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 80014f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014fc:	ee17 0a90 	vmov	r0, s15
 8001500:	f7fe ffee 	bl	80004e0 <__aeabi_f2d>
 8001504:	4602      	mov	r2, r0
 8001506:	460b      	mov	r3, r1
 8001508:	ec43 2b10 	vmov	d0, r2, r3
 800150c:	f00e f92a 	bl	800f764 <sqrt>
 8001510:	ec53 2b10 	vmov	r2, r3, d0
 8001514:	4610      	mov	r0, r2
 8001516:	4619      	mov	r1, r3
 8001518:	f7ff fb0a 	bl	8000b30 <__aeabi_d2f>
 800151c:	4603      	mov	r3, r0
 800151e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001520:	e0b9      	b.n	8001696 <Coordinate_Base_to_Robot+0x256>
//		Goal_point->r_goal_position = sqrt(
//				beta - gamma * cosf(theta_position + 90));
	} else if (theta_position >= 90 && theta_position <= 180) // quadrant 2
 8001522:	edd7 7a03 	vldr	s15, [r7, #12]
 8001526:	ed9f 7aae 	vldr	s14, [pc, #696]	@ 80017e0 <Coordinate_Base_to_Robot+0x3a0>
 800152a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800152e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001532:	db35      	blt.n	80015a0 <Coordinate_Base_to_Robot+0x160>
 8001534:	edd7 7a03 	vldr	s15, [r7, #12]
 8001538:	ed9f 7aa6 	vldr	s14, [pc, #664]	@ 80017d4 <Coordinate_Base_to_Robot+0x394>
 800153c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001540:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001544:	d82c      	bhi.n	80015a0 <Coordinate_Base_to_Robot+0x160>
			{
		//Goal_point->theta_goal_position = degree_to_rad(alpha + 90);
		prismatic_pos = sqrt(beta - gamma * cosf(degree_to_rad(270 - theta_position)));
 8001546:	ed9f 7aa4 	vldr	s14, [pc, #656]	@ 80017d8 <Coordinate_Base_to_Robot+0x398>
 800154a:	edd7 7a03 	vldr	s15, [r7, #12]
 800154e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001552:	eeb0 0a67 	vmov.f32	s0, s15
 8001556:	f000 fbc3 	bl	8001ce0 <degree_to_rad>
 800155a:	eef0 7a40 	vmov.f32	s15, s0
 800155e:	eeb0 0a67 	vmov.f32	s0, s15
 8001562:	f00e f975 	bl	800f850 <cosf>
 8001566:	eeb0 7a40 	vmov.f32	s14, s0
 800156a:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800156e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001572:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8001576:	ee77 7a67 	vsub.f32	s15, s14, s15
 800157a:	ee17 0a90 	vmov	r0, s15
 800157e:	f7fe ffaf 	bl	80004e0 <__aeabi_f2d>
 8001582:	4602      	mov	r2, r0
 8001584:	460b      	mov	r3, r1
 8001586:	ec43 2b10 	vmov	d0, r2, r3
 800158a:	f00e f8eb 	bl	800f764 <sqrt>
 800158e:	ec53 2b10 	vmov	r2, r3, d0
 8001592:	4610      	mov	r0, r2
 8001594:	4619      	mov	r1, r3
 8001596:	f7ff facb 	bl	8000b30 <__aeabi_d2f>
 800159a:	4603      	mov	r3, r0
 800159c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800159e:	e07a      	b.n	8001696 <Coordinate_Base_to_Robot+0x256>
//		Goal_point->r_goal_position = sqrt(
//				beta - gamma * cosf(180 - theta_position));
	} else if (theta_position <= 0 && theta_position >= -90) // quadrant 3
 80015a0:	edd7 7a03 	vldr	s15, [r7, #12]
 80015a4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80015a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015ac:	d835      	bhi.n	800161a <Coordinate_Base_to_Robot+0x1da>
 80015ae:	edd7 7a03 	vldr	s15, [r7, #12]
 80015b2:	ed9f 7a86 	vldr	s14, [pc, #536]	@ 80017cc <Coordinate_Base_to_Robot+0x38c>
 80015b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015be:	db2c      	blt.n	800161a <Coordinate_Base_to_Robot+0x1da>
			{
		//Goal_point->theta_goal_position = degree_to_rad(alpha + 90);
		prismatic_pos = sqrt(beta - gamma * cosf(degree_to_rad(270 - theta_position)));
 80015c0:	ed9f 7a85 	vldr	s14, [pc, #532]	@ 80017d8 <Coordinate_Base_to_Robot+0x398>
 80015c4:	edd7 7a03 	vldr	s15, [r7, #12]
 80015c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015cc:	eeb0 0a67 	vmov.f32	s0, s15
 80015d0:	f000 fb86 	bl	8001ce0 <degree_to_rad>
 80015d4:	eef0 7a40 	vmov.f32	s15, s0
 80015d8:	eeb0 0a67 	vmov.f32	s0, s15
 80015dc:	f00e f938 	bl	800f850 <cosf>
 80015e0:	eeb0 7a40 	vmov.f32	s14, s0
 80015e4:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80015e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015ec:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 80015f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015f4:	ee17 0a90 	vmov	r0, s15
 80015f8:	f7fe ff72 	bl	80004e0 <__aeabi_f2d>
 80015fc:	4602      	mov	r2, r0
 80015fe:	460b      	mov	r3, r1
 8001600:	ec43 2b10 	vmov	d0, r2, r3
 8001604:	f00e f8ae 	bl	800f764 <sqrt>
 8001608:	ec53 2b10 	vmov	r2, r3, d0
 800160c:	4610      	mov	r0, r2
 800160e:	4619      	mov	r1, r3
 8001610:	f7ff fa8e 	bl	8000b30 <__aeabi_d2f>
 8001614:	4603      	mov	r3, r0
 8001616:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001618:	e03d      	b.n	8001696 <Coordinate_Base_to_Robot+0x256>
//		Goal_point->r_goal_position = sqrt(
//				beta - gamma * cosf(theta_position - 90));
	} else if (theta_position <= -90 && theta_position >= -180) // quadrant 4
 800161a:	edd7 7a03 	vldr	s15, [r7, #12]
 800161e:	ed9f 7a6b 	vldr	s14, [pc, #428]	@ 80017cc <Coordinate_Base_to_Robot+0x38c>
 8001622:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001626:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800162a:	d834      	bhi.n	8001696 <Coordinate_Base_to_Robot+0x256>
 800162c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001630:	ed9f 7a67 	vldr	s14, [pc, #412]	@ 80017d0 <Coordinate_Base_to_Robot+0x390>
 8001634:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001638:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800163c:	db2b      	blt.n	8001696 <Coordinate_Base_to_Robot+0x256>
			{
//		Goal_point->theta_goal_position = degree_to_rad(90 - alpha);
//		Goal_point->r_goal_position = sqrt(
//				beta - gamma * cosf(90 - theta_position));
		prismatic_pos = sqrt(beta - gamma * cosf(degree_to_rad(270 - theta_position)));
 800163e:	ed9f 7a66 	vldr	s14, [pc, #408]	@ 80017d8 <Coordinate_Base_to_Robot+0x398>
 8001642:	edd7 7a03 	vldr	s15, [r7, #12]
 8001646:	ee77 7a67 	vsub.f32	s15, s14, s15
 800164a:	eeb0 0a67 	vmov.f32	s0, s15
 800164e:	f000 fb47 	bl	8001ce0 <degree_to_rad>
 8001652:	eef0 7a40 	vmov.f32	s15, s0
 8001656:	eeb0 0a67 	vmov.f32	s0, s15
 800165a:	f00e f8f9 	bl	800f850 <cosf>
 800165e:	eeb0 7a40 	vmov.f32	s14, s0
 8001662:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001666:	ee67 7a27 	vmul.f32	s15, s14, s15
 800166a:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 800166e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001672:	ee17 0a90 	vmov	r0, s15
 8001676:	f7fe ff33 	bl	80004e0 <__aeabi_f2d>
 800167a:	4602      	mov	r2, r0
 800167c:	460b      	mov	r3, r1
 800167e:	ec43 2b10 	vmov	d0, r2, r3
 8001682:	f00e f86f 	bl	800f764 <sqrt>
 8001686:	ec53 2b10 	vmov	r2, r3, d0
 800168a:	4610      	mov	r0, r2
 800168c:	4619      	mov	r1, r3
 800168e:	f7ff fa4f 	bl	8000b30 <__aeabi_d2f>
 8001692:	4603      	mov	r3, r0
 8001694:	63fb      	str	r3, [r7, #60]	@ 0x3c
	}

	float up = pow(r_position, 2) - pow(prismatic_pos, 2) - pow(Offet, 2);
 8001696:	6938      	ldr	r0, [r7, #16]
 8001698:	f7fe ff22 	bl	80004e0 <__aeabi_f2d>
 800169c:	4602      	mov	r2, r0
 800169e:	460b      	mov	r3, r1
 80016a0:	ed9f 1b45 	vldr	d1, [pc, #276]	@ 80017b8 <Coordinate_Base_to_Robot+0x378>
 80016a4:	ec43 2b10 	vmov	d0, r2, r3
 80016a8:	f00d ffec 	bl	800f684 <pow>
 80016ac:	ec55 4b10 	vmov	r4, r5, d0
 80016b0:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80016b2:	f7fe ff15 	bl	80004e0 <__aeabi_f2d>
 80016b6:	4602      	mov	r2, r0
 80016b8:	460b      	mov	r3, r1
 80016ba:	ed9f 1b3f 	vldr	d1, [pc, #252]	@ 80017b8 <Coordinate_Base_to_Robot+0x378>
 80016be:	ec43 2b10 	vmov	d0, r2, r3
 80016c2:	f00d ffdf 	bl	800f684 <pow>
 80016c6:	ec53 2b10 	vmov	r2, r3, d0
 80016ca:	4620      	mov	r0, r4
 80016cc:	4629      	mov	r1, r5
 80016ce:	f7fe fda7 	bl	8000220 <__aeabi_dsub>
 80016d2:	4602      	mov	r2, r0
 80016d4:	460b      	mov	r3, r1
 80016d6:	4610      	mov	r0, r2
 80016d8:	4619      	mov	r1, r3
 80016da:	a339      	add	r3, pc, #228	@ (adr r3, 80017c0 <Coordinate_Base_to_Robot+0x380>)
 80016dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016e0:	f7fe fd9e 	bl	8000220 <__aeabi_dsub>
 80016e4:	4602      	mov	r2, r0
 80016e6:	460b      	mov	r3, r1
 80016e8:	4610      	mov	r0, r2
 80016ea:	4619      	mov	r1, r3
 80016ec:	f7ff fa20 	bl	8000b30 <__aeabi_d2f>
 80016f0:	4603      	mov	r3, r0
 80016f2:	633b      	str	r3, [r7, #48]	@ 0x30
	float down = -2 * prismatic_pos * Offet;
 80016f4:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80016f8:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 80016fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001700:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 80017c8 <Coordinate_Base_to_Robot+0x388>
 8001704:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001708:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
	float arc = acosf(up/down);
 800170c:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8001710:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001714:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001718:	eeb0 0a66 	vmov.f32	s0, s13
 800171c:	f00e f84e 	bl	800f7bc <acosf>
 8001720:	ed87 0a0a 	vstr	s0, [r7, #40]	@ 0x28
	float alpha = rad_to_degree(arc);
 8001724:	ed97 0a0a 	vldr	s0, [r7, #40]	@ 0x28
 8001728:	f000 faae 	bl	8001c88 <rad_to_degree>
 800172c:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24

	if (theta_position >= 0 && theta_position <= 90) // quadrant 1
 8001730:	edd7 7a03 	vldr	s15, [r7, #12]
 8001734:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001738:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800173c:	db18      	blt.n	8001770 <Coordinate_Base_to_Robot+0x330>
 800173e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001742:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 80017e0 <Coordinate_Base_to_Robot+0x3a0>
 8001746:	eef4 7ac7 	vcmpe.f32	s15, s14
 800174a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800174e:	d80f      	bhi.n	8001770 <Coordinate_Base_to_Robot+0x330>
			{
		Goal_point->theta_goal_position = degree_to_rad(90 - alpha);
 8001750:	ed9f 7a23 	vldr	s14, [pc, #140]	@ 80017e0 <Coordinate_Base_to_Robot+0x3a0>
 8001754:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001758:	ee77 7a67 	vsub.f32	s15, s14, s15
 800175c:	eeb0 0a67 	vmov.f32	s0, s15
 8001760:	f000 fabe 	bl	8001ce0 <degree_to_rad>
 8001764:	eef0 7a40 	vmov.f32	s15, s0
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	edc3 7a01 	vstr	s15, [r3, #4]
 800176e:	e07c      	b.n	800186a <Coordinate_Base_to_Robot+0x42a>
//		prismatic_pos = format_base_to_robot(sqrt(beta - gamma * cosf(degree_to_rad(theta_position + 90))));
	} else if (theta_position >= 90 && theta_position <= 180) // quadrant 2
 8001770:	edd7 7a03 	vldr	s15, [r7, #12]
 8001774:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 80017e0 <Coordinate_Base_to_Robot+0x3a0>
 8001778:	eef4 7ac7 	vcmpe.f32	s15, s14
 800177c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001780:	db30      	blt.n	80017e4 <Coordinate_Base_to_Robot+0x3a4>
 8001782:	edd7 7a03 	vldr	s15, [r7, #12]
 8001786:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 80017d4 <Coordinate_Base_to_Robot+0x394>
 800178a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800178e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001792:	d827      	bhi.n	80017e4 <Coordinate_Base_to_Robot+0x3a4>
			{
		Goal_point->theta_goal_position = degree_to_rad(alpha + 90);
 8001794:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001798:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 80017e0 <Coordinate_Base_to_Robot+0x3a0>
 800179c:	ee77 7a87 	vadd.f32	s15, s15, s14
 80017a0:	eeb0 0a67 	vmov.f32	s0, s15
 80017a4:	f000 fa9c 	bl	8001ce0 <degree_to_rad>
 80017a8:	eef0 7a40 	vmov.f32	s15, s0
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	edc3 7a01 	vstr	s15, [r3, #4]
 80017b2:	e05a      	b.n	800186a <Coordinate_Base_to_Robot+0x42a>
 80017b4:	f3af 8000 	nop.w
 80017b8:	00000000 	.word	0x00000000
 80017bc:	40000000 	.word	0x40000000
 80017c0:	00000000 	.word	0x00000000
 80017c4:	41058880 	.word	0x41058880
 80017c8:	43d20000 	.word	0x43d20000
 80017cc:	c2b40000 	.word	0xc2b40000
 80017d0:	c3340000 	.word	0xc3340000
 80017d4:	43340000 	.word	0x43340000
 80017d8:	43870000 	.word	0x43870000
 80017dc:	43b40000 	.word	0x43b40000
 80017e0:	42b40000 	.word	0x42b40000
//		prismatic_pos = format_base_to_robot(sqrt(beta - gamma * cosf(degree_to_rad(180 - theta_position))));
	} else if (theta_position <= 180 && theta_position >= 270) // quadrant 3
 80017e4:	edd7 7a03 	vldr	s15, [r7, #12]
 80017e8:	ed1f 7a06 	vldr	s14, [pc, #-24]	@ 80017d4 <Coordinate_Base_to_Robot+0x394>
 80017ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017f4:	d818      	bhi.n	8001828 <Coordinate_Base_to_Robot+0x3e8>
 80017f6:	edd7 7a03 	vldr	s15, [r7, #12]
 80017fa:	ed1f 7a09 	vldr	s14, [pc, #-36]	@ 80017d8 <Coordinate_Base_to_Robot+0x398>
 80017fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001802:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001806:	db0f      	blt.n	8001828 <Coordinate_Base_to_Robot+0x3e8>
			{
		Goal_point->theta_goal_position = degree_to_rad(alpha + 90);
 8001808:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800180c:	ed1f 7a0c 	vldr	s14, [pc, #-48]	@ 80017e0 <Coordinate_Base_to_Robot+0x3a0>
 8001810:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001814:	eeb0 0a67 	vmov.f32	s0, s15
 8001818:	f000 fa62 	bl	8001ce0 <degree_to_rad>
 800181c:	eef0 7a40 	vmov.f32	s15, s0
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	edc3 7a01 	vstr	s15, [r3, #4]
 8001826:	e020      	b.n	800186a <Coordinate_Base_to_Robot+0x42a>
//		prismatic_pos = format_base_to_robot(sqrt(beta - gamma * cosf(degree_to_rad(theta_position - 90))));
	} else if (theta_position <= 270 && theta_position >= 360) // quadrant 4
 8001828:	edd7 7a03 	vldr	s15, [r7, #12]
 800182c:	ed1f 7a16 	vldr	s14, [pc, #-88]	@ 80017d8 <Coordinate_Base_to_Robot+0x398>
 8001830:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001834:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001838:	d817      	bhi.n	800186a <Coordinate_Base_to_Robot+0x42a>
 800183a:	edd7 7a03 	vldr	s15, [r7, #12]
 800183e:	ed1f 7a19 	vldr	s14, [pc, #-100]	@ 80017dc <Coordinate_Base_to_Robot+0x39c>
 8001842:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001846:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800184a:	db0e      	blt.n	800186a <Coordinate_Base_to_Robot+0x42a>
			{
		Goal_point->theta_goal_position = degree_to_rad(90 - alpha);
 800184c:	ed1f 7a1c 	vldr	s14, [pc, #-112]	@ 80017e0 <Coordinate_Base_to_Robot+0x3a0>
 8001850:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001854:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001858:	eeb0 0a67 	vmov.f32	s0, s15
 800185c:	f000 fa40 	bl	8001ce0 <degree_to_rad>
 8001860:	eef0 7a40 	vmov.f32	s15, s0
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	edc3 7a01 	vstr	s15, [r3, #4]
//		prismatic_pos = format_base_to_robot(sqrt(beta - gamma * cosf(degree_to_rad(90 - theta_position))));
	}

//	Goal_point->r_goal_position = format_base_to_robot(prismatic_pos);
	Goal_point->r_goal_position = prismatic_pos;
 800186a:	697b      	ldr	r3, [r7, #20]
 800186c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800186e:	601a      	str	r2, [r3, #0]

	return *Goal_point;
 8001870:	697a      	ldr	r2, [r7, #20]
 8001872:	f107 031c 	add.w	r3, r7, #28
 8001876:	e892 0003 	ldmia.w	r2, {r0, r1}
 800187a:	e883 0003 	stmia.w	r3, {r0, r1}
 800187e:	69fa      	ldr	r2, [r7, #28]
 8001880:	6a3b      	ldr	r3, [r7, #32]
 8001882:	ee07 2a10 	vmov	s14, r2
 8001886:	ee07 3a90 	vmov	s15, r3
}
 800188a:	eeb0 0a47 	vmov.f32	s0, s14
 800188e:	eef0 0a67 	vmov.f32	s1, s15
 8001892:	3740      	adds	r7, #64	@ 0x40
 8001894:	46bd      	mov	sp, r7
 8001896:	bdb0      	pop	{r4, r5, r7, pc}

08001898 <Coordinate_Robot_to_Base>:

Robot_goal_point Coordinate_Robot_to_Base(Robot_goal_point *Goal_point,
		float r_position, float theta_position) {
 8001898:	b5b0      	push	{r4, r5, r7, lr}
 800189a:	b092      	sub	sp, #72	@ 0x48
 800189c:	af00      	add	r7, sp, #0
 800189e:	6178      	str	r0, [r7, #20]
 80018a0:	ed87 0a04 	vstr	s0, [r7, #16]
 80018a4:	edc7 0a03 	vstr	s1, [r7, #12]

	float theta_position_deg = rad_to_degree(theta_position);
 80018a8:	ed97 0a03 	vldr	s0, [r7, #12]
 80018ac:	f000 f9ec 	bl	8001c88 <rad_to_degree>
 80018b0:	ed87 0a0e 	vstr	s0, [r7, #56]	@ 0x38
	Goal_point->r_goal_position = 0;
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	f04f 0200 	mov.w	r2, #0
 80018ba:	601a      	str	r2, [r3, #0]
	Goal_point->theta_goal_position = 0;
 80018bc:	697b      	ldr	r3, [r7, #20]
 80018be:	f04f 0200 	mov.w	r2, #0
 80018c2:	605a      	str	r2, [r3, #4]

	int quadrant = 0;
 80018c4:	2300      	movs	r3, #0
 80018c6:	647b      	str	r3, [r7, #68]	@ 0x44
	if (theta_position_deg >= 0 && theta_position_deg <= 90) {
 80018c8:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 80018cc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80018d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018d4:	db1f      	blt.n	8001916 <Coordinate_Robot_to_Base+0x7e>
 80018d6:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 80018da:	ed9f 7ad5 	vldr	s14, [pc, #852]	@ 8001c30 <Coordinate_Robot_to_Base+0x398>
 80018de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018e6:	d816      	bhi.n	8001916 <Coordinate_Robot_to_Base+0x7e>
		if (sinf(theta_position) * r_position >= Offet) {
 80018e8:	ed97 0a03 	vldr	s0, [r7, #12]
 80018ec:	f00d fffc 	bl	800f8e8 <sinf>
 80018f0:	eeb0 7a40 	vmov.f32	s14, s0
 80018f4:	edd7 7a04 	vldr	s15, [r7, #16]
 80018f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018fc:	ed9f 7ac8 	vldr	s14, [pc, #800]	@ 8001c20 <Coordinate_Robot_to_Base+0x388>
 8001900:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001904:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001908:	db02      	blt.n	8001910 <Coordinate_Robot_to_Base+0x78>
			quadrant = 1;
 800190a:	2301      	movs	r3, #1
 800190c:	647b      	str	r3, [r7, #68]	@ 0x44
		if (sinf(theta_position) * r_position >= Offet) {
 800190e:	e022      	b.n	8001956 <Coordinate_Robot_to_Base+0xbe>
		} else {
			quadrant = 4;
 8001910:	2304      	movs	r3, #4
 8001912:	647b      	str	r3, [r7, #68]	@ 0x44
		if (sinf(theta_position) * r_position >= Offet) {
 8001914:	e01f      	b.n	8001956 <Coordinate_Robot_to_Base+0xbe>
		}
	} else {
		if (cosf(theta_position - degree_to_rad(90.0)) * r_position >= Offet) {
 8001916:	ed9f 0ac6 	vldr	s0, [pc, #792]	@ 8001c30 <Coordinate_Robot_to_Base+0x398>
 800191a:	f000 f9e1 	bl	8001ce0 <degree_to_rad>
 800191e:	eeb0 7a40 	vmov.f32	s14, s0
 8001922:	edd7 7a03 	vldr	s15, [r7, #12]
 8001926:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800192a:	eeb0 0a67 	vmov.f32	s0, s15
 800192e:	f00d ff8f 	bl	800f850 <cosf>
 8001932:	eeb0 7a40 	vmov.f32	s14, s0
 8001936:	edd7 7a04 	vldr	s15, [r7, #16]
 800193a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800193e:	ed9f 7ab8 	vldr	s14, [pc, #736]	@ 8001c20 <Coordinate_Robot_to_Base+0x388>
 8001942:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001946:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800194a:	db02      	blt.n	8001952 <Coordinate_Robot_to_Base+0xba>
			quadrant = 2;
 800194c:	2302      	movs	r3, #2
 800194e:	647b      	str	r3, [r7, #68]	@ 0x44
 8001950:	e001      	b.n	8001956 <Coordinate_Robot_to_Base+0xbe>
		} else {
			quadrant = 3;
 8001952:	2303      	movs	r3, #3
 8001954:	647b      	str	r3, [r7, #68]	@ 0x44
		}
	}
	float beta = pow(r_position, 2) + pow(Offet, 2);
 8001956:	6938      	ldr	r0, [r7, #16]
 8001958:	f7fe fdc2 	bl	80004e0 <__aeabi_f2d>
 800195c:	4602      	mov	r2, r0
 800195e:	460b      	mov	r3, r1
 8001960:	ed9f 1bab 	vldr	d1, [pc, #684]	@ 8001c10 <Coordinate_Robot_to_Base+0x378>
 8001964:	ec43 2b10 	vmov	d0, r2, r3
 8001968:	f00d fe8c 	bl	800f684 <pow>
 800196c:	ec51 0b10 	vmov	r0, r1, d0
 8001970:	a3a9      	add	r3, pc, #676	@ (adr r3, 8001c18 <Coordinate_Robot_to_Base+0x380>)
 8001972:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001976:	f7fe fc55 	bl	8000224 <__adddf3>
 800197a:	4602      	mov	r2, r0
 800197c:	460b      	mov	r3, r1
 800197e:	4610      	mov	r0, r2
 8001980:	4619      	mov	r1, r3
 8001982:	f7ff f8d5 	bl	8000b30 <__aeabi_d2f>
 8001986:	4603      	mov	r3, r0
 8001988:	637b      	str	r3, [r7, #52]	@ 0x34
	float gamma = -2 * r_position * Offet;
 800198a:	edd7 7a04 	vldr	s15, [r7, #16]
 800198e:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 8001992:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001996:	ed9f 7aa2 	vldr	s14, [pc, #648]	@ 8001c20 <Coordinate_Robot_to_Base+0x388>
 800199a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800199e:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
	float Prismatic_pos;
	float theta;
	if (quadrant == 1) // quadrant 1
 80019a2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80019a4:	2b01      	cmp	r3, #1
 80019a6:	d12a      	bne.n	80019fe <Coordinate_Robot_to_Base+0x166>
			{
		Prismatic_pos = sqrt(
				beta + gamma * cosf(degree_to_rad(90.0) - theta_position));
 80019a8:	ed9f 0aa1 	vldr	s0, [pc, #644]	@ 8001c30 <Coordinate_Robot_to_Base+0x398>
 80019ac:	f000 f998 	bl	8001ce0 <degree_to_rad>
 80019b0:	eeb0 7a40 	vmov.f32	s14, s0
 80019b4:	edd7 7a03 	vldr	s15, [r7, #12]
 80019b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019bc:	eeb0 0a67 	vmov.f32	s0, s15
 80019c0:	f00d ff46 	bl	800f850 <cosf>
 80019c4:	eeb0 7a40 	vmov.f32	s14, s0
 80019c8:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80019cc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019d0:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80019d4:	ee77 7a27 	vadd.f32	s15, s14, s15
		Prismatic_pos = sqrt(
 80019d8:	ee17 0a90 	vmov	r0, s15
 80019dc:	f7fe fd80 	bl	80004e0 <__aeabi_f2d>
 80019e0:	4602      	mov	r2, r0
 80019e2:	460b      	mov	r3, r1
 80019e4:	ec43 2b10 	vmov	d0, r2, r3
 80019e8:	f00d febc 	bl	800f764 <sqrt>
 80019ec:	ec53 2b10 	vmov	r2, r3, d0
 80019f0:	4610      	mov	r0, r2
 80019f2:	4619      	mov	r1, r3
 80019f4:	f7ff f89c 	bl	8000b30 <__aeabi_d2f>
 80019f8:	4603      	mov	r3, r0
 80019fa:	643b      	str	r3, [r7, #64]	@ 0x40
 80019fc:	e085      	b.n	8001b0a <Coordinate_Robot_to_Base+0x272>

	} else if (quadrant == 2) // quadrant 2
 80019fe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001a00:	2b02      	cmp	r3, #2
 8001a02:	d12a      	bne.n	8001a5a <Coordinate_Robot_to_Base+0x1c2>
			{
		Prismatic_pos = sqrt(
				beta + gamma * cosf(theta_position - degree_to_rad(90.0)));
 8001a04:	ed9f 0a8a 	vldr	s0, [pc, #552]	@ 8001c30 <Coordinate_Robot_to_Base+0x398>
 8001a08:	f000 f96a 	bl	8001ce0 <degree_to_rad>
 8001a0c:	eeb0 7a40 	vmov.f32	s14, s0
 8001a10:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a14:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001a18:	eeb0 0a67 	vmov.f32	s0, s15
 8001a1c:	f00d ff18 	bl	800f850 <cosf>
 8001a20:	eeb0 7a40 	vmov.f32	s14, s0
 8001a24:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001a28:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a2c:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001a30:	ee77 7a27 	vadd.f32	s15, s14, s15
		Prismatic_pos = sqrt(
 8001a34:	ee17 0a90 	vmov	r0, s15
 8001a38:	f7fe fd52 	bl	80004e0 <__aeabi_f2d>
 8001a3c:	4602      	mov	r2, r0
 8001a3e:	460b      	mov	r3, r1
 8001a40:	ec43 2b10 	vmov	d0, r2, r3
 8001a44:	f00d fe8e 	bl	800f764 <sqrt>
 8001a48:	ec53 2b10 	vmov	r2, r3, d0
 8001a4c:	4610      	mov	r0, r2
 8001a4e:	4619      	mov	r1, r3
 8001a50:	f7ff f86e 	bl	8000b30 <__aeabi_d2f>
 8001a54:	4603      	mov	r3, r0
 8001a56:	643b      	str	r3, [r7, #64]	@ 0x40
 8001a58:	e057      	b.n	8001b0a <Coordinate_Robot_to_Base+0x272>

	} else if (quadrant == 3) // quadrant 3
 8001a5a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001a5c:	2b03      	cmp	r3, #3
 8001a5e:	d12a      	bne.n	8001ab6 <Coordinate_Robot_to_Base+0x21e>
			{
		Prismatic_pos = sqrt(
				beta + gamma * cosf(theta_position - degree_to_rad(90.0)));
 8001a60:	ed9f 0a73 	vldr	s0, [pc, #460]	@ 8001c30 <Coordinate_Robot_to_Base+0x398>
 8001a64:	f000 f93c 	bl	8001ce0 <degree_to_rad>
 8001a68:	eeb0 7a40 	vmov.f32	s14, s0
 8001a6c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a70:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001a74:	eeb0 0a67 	vmov.f32	s0, s15
 8001a78:	f00d feea 	bl	800f850 <cosf>
 8001a7c:	eeb0 7a40 	vmov.f32	s14, s0
 8001a80:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001a84:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a88:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001a8c:	ee77 7a27 	vadd.f32	s15, s14, s15
		Prismatic_pos = sqrt(
 8001a90:	ee17 0a90 	vmov	r0, s15
 8001a94:	f7fe fd24 	bl	80004e0 <__aeabi_f2d>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	460b      	mov	r3, r1
 8001a9c:	ec43 2b10 	vmov	d0, r2, r3
 8001aa0:	f00d fe60 	bl	800f764 <sqrt>
 8001aa4:	ec53 2b10 	vmov	r2, r3, d0
 8001aa8:	4610      	mov	r0, r2
 8001aaa:	4619      	mov	r1, r3
 8001aac:	f7ff f840 	bl	8000b30 <__aeabi_d2f>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	643b      	str	r3, [r7, #64]	@ 0x40
 8001ab4:	e029      	b.n	8001b0a <Coordinate_Robot_to_Base+0x272>
	} else  // quadrant 4
	{
		Prismatic_pos = sqrt(
				beta + gamma * cosf(degree_to_rad(90.0) - theta_position));
 8001ab6:	ed9f 0a5e 	vldr	s0, [pc, #376]	@ 8001c30 <Coordinate_Robot_to_Base+0x398>
 8001aba:	f000 f911 	bl	8001ce0 <degree_to_rad>
 8001abe:	eeb0 7a40 	vmov.f32	s14, s0
 8001ac2:	edd7 7a03 	vldr	s15, [r7, #12]
 8001ac6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001aca:	eeb0 0a67 	vmov.f32	s0, s15
 8001ace:	f00d febf 	bl	800f850 <cosf>
 8001ad2:	eeb0 7a40 	vmov.f32	s14, s0
 8001ad6:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001ada:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ade:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001ae2:	ee77 7a27 	vadd.f32	s15, s14, s15
		Prismatic_pos = sqrt(
 8001ae6:	ee17 0a90 	vmov	r0, s15
 8001aea:	f7fe fcf9 	bl	80004e0 <__aeabi_f2d>
 8001aee:	4602      	mov	r2, r0
 8001af0:	460b      	mov	r3, r1
 8001af2:	ec43 2b10 	vmov	d0, r2, r3
 8001af6:	f00d fe35 	bl	800f764 <sqrt>
 8001afa:	ec53 2b10 	vmov	r2, r3, d0
 8001afe:	4610      	mov	r0, r2
 8001b00:	4619      	mov	r1, r3
 8001b02:	f7ff f815 	bl	8000b30 <__aeabi_d2f>
 8001b06:	4603      	mov	r3, r0
 8001b08:	643b      	str	r3, [r7, #64]	@ 0x40
	}

	float up = pow(r_position, 2) - pow(Prismatic_pos, 2) - pow(Offet, 2);
 8001b0a:	6938      	ldr	r0, [r7, #16]
 8001b0c:	f7fe fce8 	bl	80004e0 <__aeabi_f2d>
 8001b10:	4602      	mov	r2, r0
 8001b12:	460b      	mov	r3, r1
 8001b14:	ed9f 1b3e 	vldr	d1, [pc, #248]	@ 8001c10 <Coordinate_Robot_to_Base+0x378>
 8001b18:	ec43 2b10 	vmov	d0, r2, r3
 8001b1c:	f00d fdb2 	bl	800f684 <pow>
 8001b20:	ec55 4b10 	vmov	r4, r5, d0
 8001b24:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8001b26:	f7fe fcdb 	bl	80004e0 <__aeabi_f2d>
 8001b2a:	4602      	mov	r2, r0
 8001b2c:	460b      	mov	r3, r1
 8001b2e:	ed9f 1b38 	vldr	d1, [pc, #224]	@ 8001c10 <Coordinate_Robot_to_Base+0x378>
 8001b32:	ec43 2b10 	vmov	d0, r2, r3
 8001b36:	f00d fda5 	bl	800f684 <pow>
 8001b3a:	ec53 2b10 	vmov	r2, r3, d0
 8001b3e:	4620      	mov	r0, r4
 8001b40:	4629      	mov	r1, r5
 8001b42:	f7fe fb6d 	bl	8000220 <__aeabi_dsub>
 8001b46:	4602      	mov	r2, r0
 8001b48:	460b      	mov	r3, r1
 8001b4a:	4610      	mov	r0, r2
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	a332      	add	r3, pc, #200	@ (adr r3, 8001c18 <Coordinate_Robot_to_Base+0x380>)
 8001b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b54:	f7fe fb64 	bl	8000220 <__aeabi_dsub>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	460b      	mov	r3, r1
 8001b5c:	4610      	mov	r0, r2
 8001b5e:	4619      	mov	r1, r3
 8001b60:	f7fe ffe6 	bl	8000b30 <__aeabi_d2f>
 8001b64:	4603      	mov	r3, r0
 8001b66:	62fb      	str	r3, [r7, #44]	@ 0x2c
	float down = (-2 * Prismatic_pos * Offet);
 8001b68:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8001b6c:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 8001b70:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b74:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8001c20 <Coordinate_Robot_to_Base+0x388>
 8001b78:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b7c:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
	float alpha = acosf(up/down);
 8001b80:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8001b84:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001b88:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001b8c:	eeb0 0a66 	vmov.f32	s0, s13
 8001b90:	f00d fe14 	bl	800f7bc <acosf>
 8001b94:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24

	if (quadrant == 1) // quadrant 1
 8001b98:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001b9a:	2b01      	cmp	r3, #1
 8001b9c:	d116      	bne.n	8001bcc <Coordinate_Robot_to_Base+0x334>
			{
		theta = rad_to_degree(alpha) - 90.0;
 8001b9e:	ed97 0a09 	vldr	s0, [r7, #36]	@ 0x24
 8001ba2:	f000 f871 	bl	8001c88 <rad_to_degree>
 8001ba6:	ee10 3a10 	vmov	r3, s0
 8001baa:	4618      	mov	r0, r3
 8001bac:	f7fe fc98 	bl	80004e0 <__aeabi_f2d>
 8001bb0:	f04f 0200 	mov.w	r2, #0
 8001bb4:	4b1b      	ldr	r3, [pc, #108]	@ (8001c24 <Coordinate_Robot_to_Base+0x38c>)
 8001bb6:	f7fe fb33 	bl	8000220 <__aeabi_dsub>
 8001bba:	4602      	mov	r2, r0
 8001bbc:	460b      	mov	r3, r1
 8001bbe:	4610      	mov	r0, r2
 8001bc0:	4619      	mov	r1, r3
 8001bc2:	f7fe ffb5 	bl	8000b30 <__aeabi_d2f>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001bca:	e041      	b.n	8001c50 <Coordinate_Robot_to_Base+0x3b8>

	} else if (quadrant == 2) // quadrant 2
 8001bcc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001bce:	2b02      	cmp	r3, #2
 8001bd0:	d10c      	bne.n	8001bec <Coordinate_Robot_to_Base+0x354>
			{
		theta = 270 - rad_to_degree(alpha);
 8001bd2:	ed97 0a09 	vldr	s0, [r7, #36]	@ 0x24
 8001bd6:	f000 f857 	bl	8001c88 <rad_to_degree>
 8001bda:	eef0 7a40 	vmov.f32	s15, s0
 8001bde:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 8001c28 <Coordinate_Robot_to_Base+0x390>
 8001be2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001be6:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
 8001bea:	e031      	b.n	8001c50 <Coordinate_Robot_to_Base+0x3b8>

	} else if (quadrant == 3) // quadrant 3
 8001bec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001bee:	2b03      	cmp	r3, #3
 8001bf0:	d120      	bne.n	8001c34 <Coordinate_Robot_to_Base+0x39c>
			{
		theta = -90 - rad_to_degree(alpha);
 8001bf2:	ed97 0a09 	vldr	s0, [r7, #36]	@ 0x24
 8001bf6:	f000 f847 	bl	8001c88 <rad_to_degree>
 8001bfa:	eef0 7a40 	vmov.f32	s15, s0
 8001bfe:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8001c2c <Coordinate_Robot_to_Base+0x394>
 8001c02:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c06:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
 8001c0a:	e021      	b.n	8001c50 <Coordinate_Robot_to_Base+0x3b8>
 8001c0c:	f3af 8000 	nop.w
 8001c10:	00000000 	.word	0x00000000
 8001c14:	40000000 	.word	0x40000000
 8001c18:	00000000 	.word	0x00000000
 8001c1c:	41058880 	.word	0x41058880
 8001c20:	43d20000 	.word	0x43d20000
 8001c24:	40568000 	.word	0x40568000
 8001c28:	43870000 	.word	0x43870000
 8001c2c:	c2b40000 	.word	0xc2b40000
 8001c30:	42b40000 	.word	0x42b40000
	} else  // quadrant 4
	{
		theta = -1 * (90 - rad_to_degree(alpha));
 8001c34:	ed97 0a09 	vldr	s0, [r7, #36]	@ 0x24
 8001c38:	f000 f826 	bl	8001c88 <rad_to_degree>
 8001c3c:	eef0 7a40 	vmov.f32	s15, s0
 8001c40:	ed1f 7a05 	vldr	s14, [pc, #-20]	@ 8001c30 <Coordinate_Robot_to_Base+0x398>
 8001c44:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c48:	eef1 7a67 	vneg.f32	s15, s15
 8001c4c:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
	}
//	Goal_point->r_goal_position = format_robot_to_base(Prismatic_pos);
//	Goal_point->theta_goal_position = format_robot_to_base(theta);
	Goal_point->r_goal_position = Prismatic_pos;
 8001c50:	697b      	ldr	r3, [r7, #20]
 8001c52:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001c54:	601a      	str	r2, [r3, #0]
	Goal_point->theta_goal_position = theta;
 8001c56:	697b      	ldr	r3, [r7, #20]
 8001c58:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001c5a:	605a      	str	r2, [r3, #4]
	return *Goal_point;
 8001c5c:	697a      	ldr	r2, [r7, #20]
 8001c5e:	f107 031c 	add.w	r3, r7, #28
 8001c62:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001c66:	e883 0003 	stmia.w	r3, {r0, r1}
 8001c6a:	69fa      	ldr	r2, [r7, #28]
 8001c6c:	6a3b      	ldr	r3, [r7, #32]
 8001c6e:	ee07 2a10 	vmov	s14, r2
 8001c72:	ee07 3a90 	vmov	s15, r3
}
 8001c76:	eeb0 0a47 	vmov.f32	s0, s14
 8001c7a:	eef0 0a67 	vmov.f32	s1, s15
 8001c7e:	3748      	adds	r7, #72	@ 0x48
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bdb0      	pop	{r4, r5, r7, pc}
 8001c84:	0000      	movs	r0, r0
	...

08001c88 <rad_to_degree>:

float rad_to_degree(float rad) {
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b082      	sub	sp, #8
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	ed87 0a01 	vstr	s0, [r7, #4]
	return (rad * 180.0) / 3.142;
 8001c92:	6878      	ldr	r0, [r7, #4]
 8001c94:	f7fe fc24 	bl	80004e0 <__aeabi_f2d>
 8001c98:	f04f 0200 	mov.w	r2, #0
 8001c9c:	4b0e      	ldr	r3, [pc, #56]	@ (8001cd8 <rad_to_degree+0x50>)
 8001c9e:	f7fe fc77 	bl	8000590 <__aeabi_dmul>
 8001ca2:	4602      	mov	r2, r0
 8001ca4:	460b      	mov	r3, r1
 8001ca6:	4610      	mov	r0, r2
 8001ca8:	4619      	mov	r1, r3
 8001caa:	a309      	add	r3, pc, #36	@ (adr r3, 8001cd0 <rad_to_degree+0x48>)
 8001cac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cb0:	f7fe fd98 	bl	80007e4 <__aeabi_ddiv>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	460b      	mov	r3, r1
 8001cb8:	4610      	mov	r0, r2
 8001cba:	4619      	mov	r1, r3
 8001cbc:	f7fe ff38 	bl	8000b30 <__aeabi_d2f>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	ee07 3a90 	vmov	s15, r3
}
 8001cc6:	eeb0 0a67 	vmov.f32	s0, s15
 8001cca:	3708      	adds	r7, #8
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd80      	pop	{r7, pc}
 8001cd0:	e5604189 	.word	0xe5604189
 8001cd4:	400922d0 	.word	0x400922d0
 8001cd8:	40668000 	.word	0x40668000
 8001cdc:	00000000 	.word	0x00000000

08001ce0 <degree_to_rad>:
float degree_to_rad(float degree) {
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b082      	sub	sp, #8
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	ed87 0a01 	vstr	s0, [r7, #4]
	return (degree * 3.142) / 180.0;
 8001cea:	6878      	ldr	r0, [r7, #4]
 8001cec:	f7fe fbf8 	bl	80004e0 <__aeabi_f2d>
 8001cf0:	a30e      	add	r3, pc, #56	@ (adr r3, 8001d2c <degree_to_rad+0x4c>)
 8001cf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cf6:	f7fe fc4b 	bl	8000590 <__aeabi_dmul>
 8001cfa:	4602      	mov	r2, r0
 8001cfc:	460b      	mov	r3, r1
 8001cfe:	4610      	mov	r0, r2
 8001d00:	4619      	mov	r1, r3
 8001d02:	f04f 0200 	mov.w	r2, #0
 8001d06:	4b08      	ldr	r3, [pc, #32]	@ (8001d28 <degree_to_rad+0x48>)
 8001d08:	f7fe fd6c 	bl	80007e4 <__aeabi_ddiv>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	460b      	mov	r3, r1
 8001d10:	4610      	mov	r0, r2
 8001d12:	4619      	mov	r1, r3
 8001d14:	f7fe ff0c 	bl	8000b30 <__aeabi_d2f>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	ee07 3a90 	vmov	s15, r3
}
 8001d1e:	eeb0 0a67 	vmov.f32	s0, s15
 8001d22:	3708      	adds	r7, #8
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}
 8001d28:	40668000 	.word	0x40668000
 8001d2c:	e5604189 	.word	0xe5604189
 8001d30:	400922d0 	.word	0x400922d0

08001d34 <format_robot_to_base>:
uint16_t format_robot_to_base(float degree) {
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b082      	sub	sp, #8
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	ed87 0a01 	vstr	s0, [r7, #4]
	return (uint16_t) (roundf(degree) * 10.0);
 8001d3e:	ed97 0a01 	vldr	s0, [r7, #4]
 8001d42:	f00d ff03 	bl	800fb4c <roundf>
 8001d46:	ee10 3a10 	vmov	r3, s0
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f7fe fbc8 	bl	80004e0 <__aeabi_f2d>
 8001d50:	f04f 0200 	mov.w	r2, #0
 8001d54:	4b07      	ldr	r3, [pc, #28]	@ (8001d74 <format_robot_to_base+0x40>)
 8001d56:	f7fe fc1b 	bl	8000590 <__aeabi_dmul>
 8001d5a:	4602      	mov	r2, r0
 8001d5c:	460b      	mov	r3, r1
 8001d5e:	4610      	mov	r0, r2
 8001d60:	4619      	mov	r1, r3
 8001d62:	f7fe fec5 	bl	8000af0 <__aeabi_d2uiz>
 8001d66:	4603      	mov	r3, r0
 8001d68:	b29b      	uxth	r3, r3
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	3708      	adds	r7, #8
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	40240000 	.word	0x40240000

08001d78 <format_base_to_robot>:
float format_base_to_robot(uint16_t degree) {
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b082      	sub	sp, #8
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	4603      	mov	r3, r0
 8001d80:	80fb      	strh	r3, [r7, #6]
	return (float) (degree / 10.0);
 8001d82:	88fb      	ldrh	r3, [r7, #6]
 8001d84:	4618      	mov	r0, r3
 8001d86:	f7fe fb99 	bl	80004bc <__aeabi_i2d>
 8001d8a:	f04f 0200 	mov.w	r2, #0
 8001d8e:	4b08      	ldr	r3, [pc, #32]	@ (8001db0 <format_base_to_robot+0x38>)
 8001d90:	f7fe fd28 	bl	80007e4 <__aeabi_ddiv>
 8001d94:	4602      	mov	r2, r0
 8001d96:	460b      	mov	r3, r1
 8001d98:	4610      	mov	r0, r2
 8001d9a:	4619      	mov	r1, r3
 8001d9c:	f7fe fec8 	bl	8000b30 <__aeabi_d2f>
 8001da0:	4603      	mov	r3, r0
 8001da2:	ee07 3a90 	vmov	s15, r3
}
 8001da6:	eeb0 0a67 	vmov.f32	s0, s15
 8001daa:	3708      	adds	r7, #8
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}
 8001db0:	40240000 	.word	0x40240000

08001db4 <Encoder_Init>:
#define Count_PER_REV 12000.0f
#define TWO_PI 6.283185f
#define PI 3.14286f
#define Lead 10.0f

void Encoder_Init(Encoder *enc, TIM_HandleTypeDef *htim) {
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b082      	sub	sp, #8
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
 8001dbc:	6039      	str	r1, [r7, #0]
    enc->htim = htim;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	683a      	ldr	r2, [r7, #0]
 8001dc2:	601a      	str	r2, [r3, #0]
    HAL_TIM_Encoder_Start(htim, TIM_CHANNEL_ALL);
 8001dc4:	213c      	movs	r1, #60	@ 0x3c
 8001dc6:	6838      	ldr	r0, [r7, #0]
 8001dc8:	f008 fdda 	bl	800a980 <HAL_TIM_Encoder_Start>

    enc->lastRawPosition = __HAL_TIM_GET_COUNTER(htim);
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dd2:	461a      	mov	r2, r3
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	605a      	str	r2, [r3, #4]
    enc->position = 0;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	f04f 0200 	mov.w	r2, #0
 8001dde:	609a      	str	r2, [r3, #8]
    enc->velocity = 0;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	f04f 0200 	mov.w	r2, #0
 8001de6:	60da      	str	r2, [r3, #12]
    enc->acceleration = 0;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	f04f 0200 	mov.w	r2, #0
 8001dee:	611a      	str	r2, [r3, #16]
    enc->lastPosition = 0;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	f04f 0200 	mov.w	r2, #0
 8001df6:	619a      	str	r2, [r3, #24]
    enc->lastVelocity = 0;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	f04f 0200 	mov.w	r2, #0
 8001dfe:	61da      	str	r2, [r3, #28]
}
 8001e00:	bf00      	nop
 8001e02:	3708      	adds	r7, #8
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}

08001e08 <Encoder_Update>:

void Encoder_Update(Encoder *enc, float dt) {
 8001e08:	b480      	push	{r7}
 8001e0a:	b085      	sub	sp, #20
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
 8001e10:	ed87 0a00 	vstr	s0, [r7]
    int32_t rawPosition = __HAL_TIM_GET_COUNTER(enc->htim);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e1c:	60bb      	str	r3, [r7, #8]
    int32_t deltaRaw = rawPosition - enc->lastRawPosition;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	68ba      	ldr	r2, [r7, #8]
 8001e24:	1ad3      	subs	r3, r2, r3
 8001e26:	60fb      	str	r3, [r7, #12]

    // Handle 16-bit counter wrap-around
    if (deltaRaw > 30000) {
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	f247 5230 	movw	r2, #30000	@ 0x7530
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	dd05      	ble.n	8001e3e <Encoder_Update+0x36>
        deltaRaw -= 60000;
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	f5a3 436a 	sub.w	r3, r3, #59904	@ 0xea00
 8001e38:	3b60      	subs	r3, #96	@ 0x60
 8001e3a:	60fb      	str	r3, [r7, #12]
 8001e3c:	e008      	b.n	8001e50 <Encoder_Update+0x48>
    } else if (deltaRaw < -30000) {
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	4a48      	ldr	r2, [pc, #288]	@ (8001f64 <Encoder_Update+0x15c>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	da04      	bge.n	8001e50 <Encoder_Update+0x48>
        deltaRaw += 60000;
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	f503 436a 	add.w	r3, r3, #59904	@ 0xea00
 8001e4c:	3360      	adds	r3, #96	@ 0x60
 8001e4e:	60fb      	str	r3, [r7, #12]
    }

    enc->position += ((float)deltaRaw * TWO_PI) / Count_PER_REV;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	ed93 7a02 	vldr	s14, [r3, #8]
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	ee07 3a90 	vmov	s15, r3
 8001e5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e60:	eddf 6a41 	vldr	s13, [pc, #260]	@ 8001f68 <Encoder_Update+0x160>
 8001e64:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001e68:	ed9f 6a40 	vldr	s12, [pc, #256]	@ 8001f6c <Encoder_Update+0x164>
 8001e6c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001e70:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	edc3 7a02 	vstr	s15, [r3, #8]
    enc->velocity = (enc->position - enc->lastPosition) / dt;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	ed93 7a02 	vldr	s14, [r3, #8]
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	edd3 7a06 	vldr	s15, [r3, #24]
 8001e86:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001e8a:	ed97 7a00 	vldr	s14, [r7]
 8001e8e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	edc3 7a03 	vstr	s15, [r3, #12]
    enc->acceleration = (enc->velocity - enc->lastVelocity) / dt;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	ed93 7a03 	vldr	s14, [r3, #12]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	edd3 7a07 	vldr	s15, [r3, #28]
 8001ea4:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001ea8:	ed97 7a00 	vldr	s14, [r7]
 8001eac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	edc3 7a04 	vstr	s15, [r3, #16]
    enc->position_degree = enc->position * (180.0f / PI);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	edd3 7a02 	vldr	s15, [r3, #8]
 8001ebc:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 8001f70 <Encoder_Update+0x168>
 8001ec0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	edc3 7a05 	vstr	s15, [r3, #20]

    enc->lastRawPosition = rawPosition;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	68ba      	ldr	r2, [r7, #8]
 8001ece:	605a      	str	r2, [r3, #4]
    enc->lastPosition = enc->position;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	689a      	ldr	r2, [r3, #8]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	619a      	str	r2, [r3, #24]
    enc->lastVelocity = enc->velocity;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	68da      	ldr	r2, [r3, #12]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	61da      	str	r2, [r3, #28]

    enc->position_mm += ((float)deltaRaw / Count_PER_REV) * Lead;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	ed93 7a08 	vldr	s14, [r3, #32]
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	ee07 3a90 	vmov	s15, r3
 8001eec:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001ef0:	ed9f 6a1e 	vldr	s12, [pc, #120]	@ 8001f6c <Encoder_Update+0x164>
 8001ef4:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001ef8:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8001efc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001f00:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	edc3 7a08 	vstr	s15, [r3, #32]
    enc->velocity_mm = (enc->position_mm - enc->lastPosition_mm) / dt;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	ed93 7a08 	vldr	s14, [r3, #32]
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8001f16:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001f1a:	ed97 7a00 	vldr	s14, [r7]
 8001f1e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
    enc->acceleration_mm = (enc->velocity_mm - enc->lastVelocity_mm) / dt;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8001f34:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001f38:	ed97 7a00 	vldr	s14, [r7]
 8001f3c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28

    enc->lastPosition_mm = enc->position_mm;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6a1a      	ldr	r2, [r3, #32]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	62da      	str	r2, [r3, #44]	@ 0x2c
    enc->lastVelocity_mm = enc->velocity_mm;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8001f56:	bf00      	nop
 8001f58:	3714      	adds	r7, #20
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f60:	4770      	bx	lr
 8001f62:	bf00      	nop
 8001f64:	ffff8ad0 	.word	0xffff8ad0
 8001f68:	40c90fda 	.word	0x40c90fda
 8001f6c:	463b8000 	.word	0x463b8000
 8001f70:	42651738 	.word	0x42651738

08001f74 <Encoder_GetPosition>:

void Encoder_setLimit(Encoder *enc, float limit) {
		enc->position = limit;
}

float Encoder_GetPosition(Encoder *enc) {
 8001f74:	b480      	push	{r7}
 8001f76:	b083      	sub	sp, #12
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
    return enc->position;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	689b      	ldr	r3, [r3, #8]
 8001f80:	ee07 3a90 	vmov	s15, r3
}
 8001f84:	eeb0 0a67 	vmov.f32	s0, s15
 8001f88:	370c      	adds	r7, #12
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f90:	4770      	bx	lr

08001f92 <Encoder_GetVelocity>:

float Encoder_GetVelocity(Encoder *enc) {
 8001f92:	b480      	push	{r7}
 8001f94:	b083      	sub	sp, #12
 8001f96:	af00      	add	r7, sp, #0
 8001f98:	6078      	str	r0, [r7, #4]
    return enc->velocity;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	68db      	ldr	r3, [r3, #12]
 8001f9e:	ee07 3a90 	vmov	s15, r3
}
 8001fa2:	eeb0 0a67 	vmov.f32	s0, s15
 8001fa6:	370c      	adds	r7, #12
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fae:	4770      	bx	lr

08001fb0 <Encoder_GetAcceleration>:

float Encoder_GetAcceleration(Encoder *enc) {
 8001fb0:	b480      	push	{r7}
 8001fb2:	b083      	sub	sp, #12
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
    return enc->acceleration;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	691b      	ldr	r3, [r3, #16]
 8001fbc:	ee07 3a90 	vmov	s15, r3
}
 8001fc0:	eeb0 0a67 	vmov.f32	s0, s15
 8001fc4:	370c      	adds	r7, #12
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fcc:	4770      	bx	lr

08001fce <Encoder_GetDegree>:

float Encoder_GetDegree(Encoder *enc) {
 8001fce:	b480      	push	{r7}
 8001fd0:	b083      	sub	sp, #12
 8001fd2:	af00      	add	r7, sp, #0
 8001fd4:	6078      	str	r0, [r7, #4]
	return enc->position_degree;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	695b      	ldr	r3, [r3, #20]
 8001fda:	ee07 3a90 	vmov	s15, r3
}
 8001fde:	eeb0 0a67 	vmov.f32	s0, s15
 8001fe2:	370c      	adds	r7, #12
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fea:	4770      	bx	lr

08001fec <Encoder_GetPosition_mm>:

float Encoder_GetPosition_mm(Encoder *enc) {
 8001fec:	b480      	push	{r7}
 8001fee:	b083      	sub	sp, #12
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
    return enc->position_mm;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6a1b      	ldr	r3, [r3, #32]
 8001ff8:	ee07 3a90 	vmov	s15, r3
}
 8001ffc:	eeb0 0a67 	vmov.f32	s0, s15
 8002000:	370c      	adds	r7, #12
 8002002:	46bd      	mov	sp, r7
 8002004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002008:	4770      	bx	lr

0800200a <Encoder_GetVelocity_mm>:

float Encoder_GetVelocity_mm(Encoder *enc) {
 800200a:	b480      	push	{r7}
 800200c:	b083      	sub	sp, #12
 800200e:	af00      	add	r7, sp, #0
 8002010:	6078      	str	r0, [r7, #4]
    return enc->velocity_mm;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002016:	ee07 3a90 	vmov	s15, r3
}
 800201a:	eeb0 0a67 	vmov.f32	s0, s15
 800201e:	370c      	adds	r7, #12
 8002020:	46bd      	mov	sp, r7
 8002022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002026:	4770      	bx	lr

08002028 <Encoder_GetAcceleration_mm>:

float Encoder_GetAcceleration_mm(Encoder *enc) {
 8002028:	b480      	push	{r7}
 800202a:	b083      	sub	sp, #12
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
    return enc->acceleration_mm;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002034:	ee07 3a90 	vmov	s15, r3
}
 8002038:	eeb0 0a67 	vmov.f32	s0, s15
 800203c:	370c      	adds	r7, #12
 800203e:	46bd      	mov	sp, r7
 8002040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002044:	4770      	bx	lr
	...

08002048 <PS2_ReadData>:
uint8_t SPIRx[PS2_DATA_LENGTH];

#define PS2_CS_PORT GPIOC
#define PS2_CS_PIN  GPIO_PIN_10

void PS2_ReadData() {
 8002048:	b580      	push	{r7, lr}
 800204a:	b084      	sub	sp, #16
 800204c:	af02      	add	r7, sp, #8
//	HAL_Delay(1);
	HAL_GPIO_WritePin(PS2_CS_PORT, PS2_CS_PIN, GPIO_PIN_RESET);
 800204e:	2200      	movs	r2, #0
 8002050:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002054:	4811      	ldr	r0, [pc, #68]	@ (800209c <PS2_ReadData+0x54>)
 8002056:	f006 fb21 	bl	800869c <HAL_GPIO_WritePin>

	for (int i = 0; i < PS2_DATA_LENGTH; i++) {
 800205a:	2300      	movs	r3, #0
 800205c:	607b      	str	r3, [r7, #4]
 800205e:	e00f      	b.n	8002080 <PS2_ReadData+0x38>
		HAL_SPI_TransmitReceive(&hspi1, &SPITx[i], &SPIRx[i], 1, HAL_MAX_DELAY);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	4a0f      	ldr	r2, [pc, #60]	@ (80020a0 <PS2_ReadData+0x58>)
 8002064:	1899      	adds	r1, r3, r2
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	4a0e      	ldr	r2, [pc, #56]	@ (80020a4 <PS2_ReadData+0x5c>)
 800206a:	441a      	add	r2, r3
 800206c:	f04f 33ff 	mov.w	r3, #4294967295
 8002070:	9300      	str	r3, [sp, #0]
 8002072:	2301      	movs	r3, #1
 8002074:	480c      	ldr	r0, [pc, #48]	@ (80020a8 <PS2_ReadData+0x60>)
 8002076:	f007 fc1c 	bl	80098b2 <HAL_SPI_TransmitReceive>
	for (int i = 0; i < PS2_DATA_LENGTH; i++) {
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	3301      	adds	r3, #1
 800207e:	607b      	str	r3, [r7, #4]
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2b07      	cmp	r3, #7
 8002084:	ddec      	ble.n	8002060 <PS2_ReadData+0x18>
//		HAL_Delay(5);
	}

	HAL_GPIO_WritePin(PS2_CS_PORT, PS2_CS_PIN, GPIO_PIN_SET);
 8002086:	2201      	movs	r2, #1
 8002088:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800208c:	4803      	ldr	r0, [pc, #12]	@ (800209c <PS2_ReadData+0x54>)
 800208e:	f006 fb05 	bl	800869c <HAL_GPIO_WritePin>
//	HAL_Delay(5);
}
 8002092:	bf00      	nop
 8002094:	3708      	adds	r7, #8
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}
 800209a:	bf00      	nop
 800209c:	48000800 	.word	0x48000800
 80020a0:	20000000 	.word	0x20000000
 80020a4:	20000284 	.word	0x20000284
 80020a8:	2000170c 	.word	0x2000170c

080020ac <PS2_ButtonCircle>:

uint8_t PS2_ButtonCircle() {
 80020ac:	b480      	push	{r7}
 80020ae:	af00      	add	r7, sp, #0
	return !(SPIRx[4] & 0x20);
 80020b0:	4b06      	ldr	r3, [pc, #24]	@ (80020cc <PS2_ButtonCircle+0x20>)
 80020b2:	791b      	ldrb	r3, [r3, #4]
 80020b4:	f003 0320 	and.w	r3, r3, #32
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	bf0c      	ite	eq
 80020bc:	2301      	moveq	r3, #1
 80020be:	2300      	movne	r3, #0
 80020c0:	b2db      	uxtb	r3, r3
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	46bd      	mov	sp, r7
 80020c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ca:	4770      	bx	lr
 80020cc:	20000284 	.word	0x20000284

080020d0 <PS2_ButtonSquare>:

uint8_t PS2_ButtonSquare() {
 80020d0:	b480      	push	{r7}
 80020d2:	af00      	add	r7, sp, #0
	return !(SPIRx[4] & 0x80);
 80020d4:	4b05      	ldr	r3, [pc, #20]	@ (80020ec <PS2_ButtonSquare+0x1c>)
 80020d6:	791b      	ldrb	r3, [r3, #4]
 80020d8:	b25b      	sxtb	r3, r3
 80020da:	43db      	mvns	r3, r3
 80020dc:	b2db      	uxtb	r3, r3
 80020de:	09db      	lsrs	r3, r3, #7
 80020e0:	b2db      	uxtb	r3, r3
}
 80020e2:	4618      	mov	r0, r3
 80020e4:	46bd      	mov	sp, r7
 80020e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ea:	4770      	bx	lr
 80020ec:	20000284 	.word	0x20000284

080020f0 <PS2_ButtonTriangle>:

uint8_t PS2_ButtonTriangle() {
 80020f0:	b480      	push	{r7}
 80020f2:	af00      	add	r7, sp, #0
	return !(SPIRx[4] & 0x10);
 80020f4:	4b06      	ldr	r3, [pc, #24]	@ (8002110 <PS2_ButtonTriangle+0x20>)
 80020f6:	791b      	ldrb	r3, [r3, #4]
 80020f8:	f003 0310 	and.w	r3, r3, #16
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	bf0c      	ite	eq
 8002100:	2301      	moveq	r3, #1
 8002102:	2300      	movne	r3, #0
 8002104:	b2db      	uxtb	r3, r3
}
 8002106:	4618      	mov	r0, r3
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr
 8002110:	20000284 	.word	0x20000284

08002114 <PS2_ButtonCross>:

uint8_t PS2_ButtonCross() {
 8002114:	b480      	push	{r7}
 8002116:	af00      	add	r7, sp, #0
	return !(SPIRx[4] & 0x40);
 8002118:	4b06      	ldr	r3, [pc, #24]	@ (8002134 <PS2_ButtonCross+0x20>)
 800211a:	791b      	ldrb	r3, [r3, #4]
 800211c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002120:	2b00      	cmp	r3, #0
 8002122:	bf0c      	ite	eq
 8002124:	2301      	moveq	r3, #1
 8002126:	2300      	movne	r3, #0
 8002128:	b2db      	uxtb	r3, r3
}
 800212a:	4618      	mov	r0, r3
 800212c:	46bd      	mov	sp, r7
 800212e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002132:	4770      	bx	lr
 8002134:	20000284 	.word	0x20000284

08002138 <PS2_ButtonR1>:

uint8_t PS2_ButtonR1() {
 8002138:	b480      	push	{r7}
 800213a:	af00      	add	r7, sp, #0
	return !(SPIRx[4] & 0x08);
 800213c:	4b06      	ldr	r3, [pc, #24]	@ (8002158 <PS2_ButtonR1+0x20>)
 800213e:	791b      	ldrb	r3, [r3, #4]
 8002140:	f003 0308 	and.w	r3, r3, #8
 8002144:	2b00      	cmp	r3, #0
 8002146:	bf0c      	ite	eq
 8002148:	2301      	moveq	r3, #1
 800214a:	2300      	movne	r3, #0
 800214c:	b2db      	uxtb	r3, r3
}
 800214e:	4618      	mov	r0, r3
 8002150:	46bd      	mov	sp, r7
 8002152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002156:	4770      	bx	lr
 8002158:	20000284 	.word	0x20000284

0800215c <PS2_ButtonR2>:

uint8_t PS2_ButtonR2() {
 800215c:	b480      	push	{r7}
 800215e:	af00      	add	r7, sp, #0
	return !(SPIRx[4] & 0x02);
 8002160:	4b06      	ldr	r3, [pc, #24]	@ (800217c <PS2_ButtonR2+0x20>)
 8002162:	791b      	ldrb	r3, [r3, #4]
 8002164:	f003 0302 	and.w	r3, r3, #2
 8002168:	2b00      	cmp	r3, #0
 800216a:	bf0c      	ite	eq
 800216c:	2301      	moveq	r3, #1
 800216e:	2300      	movne	r3, #0
 8002170:	b2db      	uxtb	r3, r3
}
 8002172:	4618      	mov	r0, r3
 8002174:	46bd      	mov	sp, r7
 8002176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217a:	4770      	bx	lr
 800217c:	20000284 	.word	0x20000284

08002180 <PS2_ButtonSelect>:

uint8_t PS2_ButtonSelect() {
 8002180:	b480      	push	{r7}
 8002182:	af00      	add	r7, sp, #0
	return !(SPIRx[3] & 0x01);
 8002184:	4b06      	ldr	r3, [pc, #24]	@ (80021a0 <PS2_ButtonSelect+0x20>)
 8002186:	78db      	ldrb	r3, [r3, #3]
 8002188:	f003 0301 	and.w	r3, r3, #1
 800218c:	2b00      	cmp	r3, #0
 800218e:	bf0c      	ite	eq
 8002190:	2301      	moveq	r3, #1
 8002192:	2300      	movne	r3, #0
 8002194:	b2db      	uxtb	r3, r3
}
 8002196:	4618      	mov	r0, r3
 8002198:	46bd      	mov	sp, r7
 800219a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219e:	4770      	bx	lr
 80021a0:	20000284 	.word	0x20000284

080021a4 <PS2_ButtonStart>:

uint8_t PS2_ButtonStart() {
 80021a4:	b480      	push	{r7}
 80021a6:	af00      	add	r7, sp, #0
	return !(SPIRx[3] & 0x08);
 80021a8:	4b06      	ldr	r3, [pc, #24]	@ (80021c4 <PS2_ButtonStart+0x20>)
 80021aa:	78db      	ldrb	r3, [r3, #3]
 80021ac:	f003 0308 	and.w	r3, r3, #8
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	bf0c      	ite	eq
 80021b4:	2301      	moveq	r3, #1
 80021b6:	2300      	movne	r3, #0
 80021b8:	b2db      	uxtb	r3, r3
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	46bd      	mov	sp, r7
 80021be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c2:	4770      	bx	lr
 80021c4:	20000284 	.word	0x20000284

080021c8 <PS2_ButtonL2>:

uint8_t PS2_ButtonL2() {
 80021c8:	b480      	push	{r7}
 80021ca:	af00      	add	r7, sp, #0
	 return !(SPIRx[4] & 0x01);
 80021cc:	4b06      	ldr	r3, [pc, #24]	@ (80021e8 <PS2_ButtonL2+0x20>)
 80021ce:	791b      	ldrb	r3, [r3, #4]
 80021d0:	f003 0301 	and.w	r3, r3, #1
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	bf0c      	ite	eq
 80021d8:	2301      	moveq	r3, #1
 80021da:	2300      	movne	r3, #0
 80021dc:	b2db      	uxtb	r3, r3
}
 80021de:	4618      	mov	r0, r3
 80021e0:	46bd      	mov	sp, r7
 80021e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e6:	4770      	bx	lr
 80021e8:	20000284 	.word	0x20000284

080021ec <Kalman_Init>:
#include "Kalman_Filter.h"

void Kalman_Init(KalmanFilter *kf) {
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b084      	sub	sp, #16
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
    arm_mat_init_f32(&kf->A, KALMAN_STATE_DIM, KALMAN_STATE_DIM, kf->A_data);
 80021f4:	6878      	ldr	r0, [r7, #4]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	3370      	adds	r3, #112	@ 0x70
 80021fa:	2204      	movs	r2, #4
 80021fc:	2104      	movs	r1, #4
 80021fe:	f00c fd7c 	bl	800ecfa <arm_mat_init_f32>
    arm_mat_init_f32(&kf->B, KALMAN_STATE_DIM, KALMAN_MEAS_DIM, kf->B_data);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	f103 0008 	add.w	r0, r3, #8
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	33b0      	adds	r3, #176	@ 0xb0
 800220c:	2204      	movs	r2, #4
 800220e:	2104      	movs	r1, #4
 8002210:	f00c fd73 	bl	800ecfa <arm_mat_init_f32>
    arm_mat_init_f32(&kf->H, KALMAN_MEAS_DIM, KALMAN_STATE_DIM, kf->H_data);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	f103 0010 	add.w	r0, r3, #16
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	33f0      	adds	r3, #240	@ 0xf0
 800221e:	2204      	movs	r2, #4
 8002220:	2104      	movs	r1, #4
 8002222:	f00c fd6a 	bl	800ecfa <arm_mat_init_f32>
    arm_mat_init_f32(&kf->Q, KALMAN_STATE_DIM, KALMAN_STATE_DIM, kf->Q_data);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	f103 0018 	add.w	r0, r3, #24
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 8002232:	2204      	movs	r2, #4
 8002234:	2104      	movs	r1, #4
 8002236:	f00c fd60 	bl	800ecfa <arm_mat_init_f32>
    arm_mat_init_f32(&kf->R, KALMAN_MEAS_DIM, KALMAN_MEAS_DIM, kf->R_data);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	f103 0020 	add.w	r0, r3, #32
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	f503 73b8 	add.w	r3, r3, #368	@ 0x170
 8002246:	2204      	movs	r2, #4
 8002248:	2104      	movs	r1, #4
 800224a:	f00c fd56 	bl	800ecfa <arm_mat_init_f32>
    arm_mat_init_f32(&kf->P, KALMAN_STATE_DIM, KALMAN_STATE_DIM, kf->P_data);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	f503 73d8 	add.w	r3, r3, #432	@ 0x1b0
 800225a:	2204      	movs	r2, #4
 800225c:	2104      	movs	r1, #4
 800225e:	f00c fd4c 	bl	800ecfa <arm_mat_init_f32>
    arm_mat_init_f32(&kf->K, KALMAN_STATE_DIM, KALMAN_MEAS_DIM, kf->K_data);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	f503 73f8 	add.w	r3, r3, #496	@ 0x1f0
 800226e:	2204      	movs	r2, #4
 8002270:	2104      	movs	r1, #4
 8002272:	f00c fd42 	bl	800ecfa <arm_mat_init_f32>
    arm_mat_init_f32(&kf->Input, KALMAN_STATE_DIM, 1, kf->Input_data);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8002282:	2201      	movs	r2, #1
 8002284:	2104      	movs	r1, #4
 8002286:	f00c fd38 	bl	800ecfa <arm_mat_init_f32>

    arm_mat_init_f32(&kf->x, KALMAN_STATE_DIM, 1, kf->x_data);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	f103 0040 	add.w	r0, r3, #64	@ 0x40
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 8002296:	2201      	movs	r2, #1
 8002298:	2104      	movs	r1, #4
 800229a:	f00c fd2e 	bl	800ecfa <arm_mat_init_f32>
    arm_mat_init_f32(&kf->u, KALMAN_MEAS_DIM, 1, kf->u_data);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	f103 0048 	add.w	r0, r3, #72	@ 0x48
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	f503 7311 	add.w	r3, r3, #580	@ 0x244
 80022aa:	2201      	movs	r2, #1
 80022ac:	2104      	movs	r1, #4
 80022ae:	f00c fd24 	bl	800ecfa <arm_mat_init_f32>
    arm_mat_init_f32(&kf->z, KALMAN_MEAS_DIM, 1, kf->z_data);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	f103 0050 	add.w	r0, r3, #80	@ 0x50
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80022be:	2201      	movs	r2, #1
 80022c0:	2104      	movs	r1, #4
 80022c2:	f00c fd1a 	bl	800ecfa <arm_mat_init_f32>

    arm_mat_init_f32(&kf->temp1, KALMAN_STATE_DIM, KALMAN_STATE_DIM, kf->temp1_data);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	f103 0058 	add.w	r0, r3, #88	@ 0x58
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80022d2:	2204      	movs	r2, #4
 80022d4:	2104      	movs	r1, #4
 80022d6:	f00c fd10 	bl	800ecfa <arm_mat_init_f32>
    arm_mat_init_f32(&kf->temp2, KALMAN_STATE_DIM, KALMAN_MEAS_DIM, kf->temp2_data);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	f103 0060 	add.w	r0, r3, #96	@ 0x60
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	f503 7329 	add.w	r3, r3, #676	@ 0x2a4
 80022e6:	2204      	movs	r2, #4
 80022e8:	2104      	movs	r1, #4
 80022ea:	f00c fd06 	bl	800ecfa <arm_mat_init_f32>
    arm_mat_init_f32(&kf->temp3, KALMAN_MEAS_DIM, KALMAN_MEAS_DIM, kf->temp3_data);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	f103 0068 	add.w	r0, r3, #104	@ 0x68
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	f503 7339 	add.w	r3, r3, #740	@ 0x2e4
 80022fa:	2204      	movs	r2, #4
 80022fc:	2104      	movs	r1, #4
 80022fe:	f00c fcfc 	bl	800ecfa <arm_mat_init_f32>

    // Clear state
    for (int i = 0; i < KALMAN_STATE_DIM; i++) {
 8002302:	2300      	movs	r3, #0
 8002304:	60fb      	str	r3, [r7, #12]
 8002306:	e00b      	b.n	8002320 <Kalman_Init+0x134>
        kf->x_data[i] = 0.0f;
 8002308:	687a      	ldr	r2, [r7, #4]
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	338c      	adds	r3, #140	@ 0x8c
 800230e:	009b      	lsls	r3, r3, #2
 8002310:	4413      	add	r3, r2
 8002312:	3304      	adds	r3, #4
 8002314:	f04f 0200 	mov.w	r2, #0
 8002318:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < KALMAN_STATE_DIM; i++) {
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	3301      	adds	r3, #1
 800231e:	60fb      	str	r3, [r7, #12]
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	2b03      	cmp	r3, #3
 8002324:	ddf0      	ble.n	8002308 <Kalman_Init+0x11c>
    }
}
 8002326:	bf00      	nop
 8002328:	bf00      	nop
 800232a:	3710      	adds	r7, #16
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}

08002330 <Kalman_SetProcessNoise>:

void Kalman_SetProcessNoise(KalmanFilter *kf, float value) {
 8002330:	b480      	push	{r7}
 8002332:	b085      	sub	sp, #20
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
 8002338:	ed87 0a00 	vstr	s0, [r7]
    for (int i = 0; i < KALMAN_STATE_DIM; i++) {
 800233c:	2300      	movs	r3, #0
 800233e:	60fb      	str	r3, [r7, #12]
 8002340:	e01c      	b.n	800237c <Kalman_SetProcessNoise+0x4c>
        for (int j = 0; j < KALMAN_STATE_DIM; j++) {
 8002342:	2300      	movs	r3, #0
 8002344:	60bb      	str	r3, [r7, #8]
 8002346:	e013      	b.n	8002370 <Kalman_SetProcessNoise+0x40>
            kf->Q_data[i * KALMAN_STATE_DIM + j] = (i == j) ? value : 0.0f;
 8002348:	68fa      	ldr	r2, [r7, #12]
 800234a:	68bb      	ldr	r3, [r7, #8]
 800234c:	429a      	cmp	r2, r3
 800234e:	d101      	bne.n	8002354 <Kalman_SetProcessNoise+0x24>
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	e001      	b.n	8002358 <Kalman_SetProcessNoise+0x28>
 8002354:	f04f 0300 	mov.w	r3, #0
 8002358:	68fa      	ldr	r2, [r7, #12]
 800235a:	0091      	lsls	r1, r2, #2
 800235c:	68ba      	ldr	r2, [r7, #8]
 800235e:	440a      	add	r2, r1
 8002360:	6879      	ldr	r1, [r7, #4]
 8002362:	324c      	adds	r2, #76	@ 0x4c
 8002364:	0092      	lsls	r2, r2, #2
 8002366:	440a      	add	r2, r1
 8002368:	6013      	str	r3, [r2, #0]
        for (int j = 0; j < KALMAN_STATE_DIM; j++) {
 800236a:	68bb      	ldr	r3, [r7, #8]
 800236c:	3301      	adds	r3, #1
 800236e:	60bb      	str	r3, [r7, #8]
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	2b03      	cmp	r3, #3
 8002374:	dde8      	ble.n	8002348 <Kalman_SetProcessNoise+0x18>
    for (int i = 0; i < KALMAN_STATE_DIM; i++) {
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	3301      	adds	r3, #1
 800237a:	60fb      	str	r3, [r7, #12]
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	2b03      	cmp	r3, #3
 8002380:	dddf      	ble.n	8002342 <Kalman_SetProcessNoise+0x12>
        }
    }
}
 8002382:	bf00      	nop
 8002384:	bf00      	nop
 8002386:	3714      	adds	r7, #20
 8002388:	46bd      	mov	sp, r7
 800238a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238e:	4770      	bx	lr

08002390 <Kalman_SetMeasurementNoise>:

void Kalman_SetMeasurementNoise(KalmanFilter *kf, float value) {
 8002390:	b480      	push	{r7}
 8002392:	b085      	sub	sp, #20
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
 8002398:	ed87 0a00 	vstr	s0, [r7]
    for (int i = 0; i < KALMAN_MEAS_DIM; i++) {
 800239c:	2300      	movs	r3, #0
 800239e:	60fb      	str	r3, [r7, #12]
 80023a0:	e01c      	b.n	80023dc <Kalman_SetMeasurementNoise+0x4c>
        for (int j = 0; j < KALMAN_MEAS_DIM; j++) {
 80023a2:	2300      	movs	r3, #0
 80023a4:	60bb      	str	r3, [r7, #8]
 80023a6:	e013      	b.n	80023d0 <Kalman_SetMeasurementNoise+0x40>
            kf->R_data[i * KALMAN_MEAS_DIM + j] = (i == j) ? value : 0.0f;
 80023a8:	68fa      	ldr	r2, [r7, #12]
 80023aa:	68bb      	ldr	r3, [r7, #8]
 80023ac:	429a      	cmp	r2, r3
 80023ae:	d101      	bne.n	80023b4 <Kalman_SetMeasurementNoise+0x24>
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	e001      	b.n	80023b8 <Kalman_SetMeasurementNoise+0x28>
 80023b4:	f04f 0300 	mov.w	r3, #0
 80023b8:	68fa      	ldr	r2, [r7, #12]
 80023ba:	0091      	lsls	r1, r2, #2
 80023bc:	68ba      	ldr	r2, [r7, #8]
 80023be:	440a      	add	r2, r1
 80023c0:	6879      	ldr	r1, [r7, #4]
 80023c2:	325c      	adds	r2, #92	@ 0x5c
 80023c4:	0092      	lsls	r2, r2, #2
 80023c6:	440a      	add	r2, r1
 80023c8:	6013      	str	r3, [r2, #0]
        for (int j = 0; j < KALMAN_MEAS_DIM; j++) {
 80023ca:	68bb      	ldr	r3, [r7, #8]
 80023cc:	3301      	adds	r3, #1
 80023ce:	60bb      	str	r3, [r7, #8]
 80023d0:	68bb      	ldr	r3, [r7, #8]
 80023d2:	2b03      	cmp	r3, #3
 80023d4:	dde8      	ble.n	80023a8 <Kalman_SetMeasurementNoise+0x18>
    for (int i = 0; i < KALMAN_MEAS_DIM; i++) {
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	3301      	adds	r3, #1
 80023da:	60fb      	str	r3, [r7, #12]
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	2b03      	cmp	r3, #3
 80023e0:	dddf      	ble.n	80023a2 <Kalman_SetMeasurementNoise+0x12>
        }
    }
}
 80023e2:	bf00      	nop
 80023e4:	bf00      	nop
 80023e6:	3714      	adds	r7, #20
 80023e8:	46bd      	mov	sp, r7
 80023ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ee:	4770      	bx	lr

080023f0 <Kalman_SetInput>:

void Kalman_SetInput(KalmanFilter *kf, float value)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b083      	sub	sp, #12
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
 80023f8:	ed87 0a00 	vstr	s0, [r7]
	kf->Input_data[0] = value;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	683a      	ldr	r2, [r7, #0]
 8002400:	f8c3 2230 	str.w	r2, [r3, #560]	@ 0x230
}
 8002404:	bf00      	nop
 8002406:	370c      	adds	r7, #12
 8002408:	46bd      	mov	sp, r7
 800240a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240e:	4770      	bx	lr

08002410 <Kalman_Predict>:
void Kalman_Predict(KalmanFilter *kf) {
 8002410:	b580      	push	{r7, lr}
 8002412:	b082      	sub	sp, #8
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
	// x = A * x + B * u
	arm_mat_mult_f32(&kf->A, &kf->x, &kf->temp1);   // temp1 = A * x
 8002418:	6878      	ldr	r0, [r7, #4]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	3358      	adds	r3, #88	@ 0x58
 8002424:	461a      	mov	r2, r3
 8002426:	f00c fff7 	bl	800f418 <arm_mat_mult_f32>
	arm_mat_mult_f32(&kf->B, &kf->Input, &kf->temp2);   // temp2 = B * u
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	f103 0008 	add.w	r0, r3, #8
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	3360      	adds	r3, #96	@ 0x60
 800243a:	461a      	mov	r2, r3
 800243c:	f00c ffec 	bl	800f418 <arm_mat_mult_f32>
	arm_mat_add_f32(&kf->temp1, &kf->temp2, &kf->x); // x = temp1 + temp2
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	f103 0058 	add.w	r0, r3, #88	@ 0x58
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	f103 0160 	add.w	r1, r3, #96	@ 0x60
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	3340      	adds	r3, #64	@ 0x40
 8002450:	461a      	mov	r2, r3
 8002452:	f00c fc17 	bl	800ec84 <arm_mat_add_f32>

    // P = A * P * A' + Q
    arm_mat_mult_f32(&kf->A, &kf->P, &kf->temp1);
 8002456:	6878      	ldr	r0, [r7, #4]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	3358      	adds	r3, #88	@ 0x58
 8002462:	461a      	mov	r2, r3
 8002464:	f00c ffd8 	bl	800f418 <arm_mat_mult_f32>
    arm_mat_trans_f32(&kf->A, &kf->temp2);  // reuse temp2
 8002468:	687a      	ldr	r2, [r7, #4]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	3360      	adds	r3, #96	@ 0x60
 800246e:	4619      	mov	r1, r3
 8002470:	4610      	mov	r0, r2
 8002472:	f00d f886 	bl	800f582 <arm_mat_trans_f32>
    arm_mat_mult_f32(&kf->temp1, &kf->temp2, &kf->P);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	f103 0058 	add.w	r0, r3, #88	@ 0x58
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	f103 0160 	add.w	r1, r3, #96	@ 0x60
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	3328      	adds	r3, #40	@ 0x28
 8002486:	461a      	mov	r2, r3
 8002488:	f00c ffc6 	bl	800f418 <arm_mat_mult_f32>
    arm_mat_add_f32(&kf->P, &kf->Q, &kf->P);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	f103 0118 	add.w	r1, r3, #24
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	3328      	adds	r3, #40	@ 0x28
 800249c:	461a      	mov	r2, r3
 800249e:	f00c fbf1 	bl	800ec84 <arm_mat_add_f32>
}
 80024a2:	bf00      	nop
 80024a4:	3708      	adds	r7, #8
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}

080024aa <Kalman_Update>:

void Kalman_Update(KalmanFilter *kf, float32_t *measurement) {
 80024aa:	b580      	push	{r7, lr}
 80024ac:	b088      	sub	sp, #32
 80024ae:	af00      	add	r7, sp, #0
 80024b0:	6078      	str	r0, [r7, #4]
 80024b2:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < KALMAN_MEAS_DIM; i++) {
 80024b4:	2300      	movs	r3, #0
 80024b6:	61fb      	str	r3, [r7, #28]
 80024b8:	e00e      	b.n	80024d8 <Kalman_Update+0x2e>
        kf->z_data[i] = measurement[i];
 80024ba:	69fb      	ldr	r3, [r7, #28]
 80024bc:	009b      	lsls	r3, r3, #2
 80024be:	683a      	ldr	r2, [r7, #0]
 80024c0:	4413      	add	r3, r2
 80024c2:	681a      	ldr	r2, [r3, #0]
 80024c4:	6879      	ldr	r1, [r7, #4]
 80024c6:	69fb      	ldr	r3, [r7, #28]
 80024c8:	3394      	adds	r3, #148	@ 0x94
 80024ca:	009b      	lsls	r3, r3, #2
 80024cc:	440b      	add	r3, r1
 80024ce:	3304      	adds	r3, #4
 80024d0:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < KALMAN_MEAS_DIM; i++) {
 80024d2:	69fb      	ldr	r3, [r7, #28]
 80024d4:	3301      	adds	r3, #1
 80024d6:	61fb      	str	r3, [r7, #28]
 80024d8:	69fb      	ldr	r3, [r7, #28]
 80024da:	2b03      	cmp	r3, #3
 80024dc:	dded      	ble.n	80024ba <Kalman_Update+0x10>
    }

    // K = P * H' * (H * P * H' + R)^-1
    arm_mat_trans_f32(&kf->H, &kf->temp2);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	f103 0210 	add.w	r2, r3, #16
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	3360      	adds	r3, #96	@ 0x60
 80024e8:	4619      	mov	r1, r3
 80024ea:	4610      	mov	r0, r2
 80024ec:	f00d f849 	bl	800f582 <arm_mat_trans_f32>
    arm_mat_mult_f32(&kf->P, &kf->temp2, &kf->temp1);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	f103 0160 	add.w	r1, r3, #96	@ 0x60
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	3358      	adds	r3, #88	@ 0x58
 8002500:	461a      	mov	r2, r3
 8002502:	f00c ff89 	bl	800f418 <arm_mat_mult_f32>
    arm_mat_mult_f32(&kf->H, &kf->temp1, &kf->temp3);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	f103 0010 	add.w	r0, r3, #16
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	f103 0158 	add.w	r1, r3, #88	@ 0x58
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	3368      	adds	r3, #104	@ 0x68
 8002516:	461a      	mov	r2, r3
 8002518:	f00c ff7e 	bl	800f418 <arm_mat_mult_f32>
    arm_mat_add_f32(&kf->temp3, &kf->R, &kf->temp3);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	f103 0068 	add.w	r0, r3, #104	@ 0x68
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	f103 0120 	add.w	r1, r3, #32
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	3368      	adds	r3, #104	@ 0x68
 800252c:	461a      	mov	r2, r3
 800252e:	f00c fba9 	bl	800ec84 <arm_mat_add_f32>
    arm_mat_inverse_f32(&kf->temp3, &kf->temp3);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	3368      	adds	r3, #104	@ 0x68
 800253c:	4619      	mov	r1, r3
 800253e:	4610      	mov	r0, r2
 8002540:	f00c fbf3 	bl	800ed2a <arm_mat_inverse_f32>
    arm_mat_mult_f32(&kf->temp1, &kf->temp3, &kf->K);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	f103 0058 	add.w	r0, r3, #88	@ 0x58
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	f103 0168 	add.w	r1, r3, #104	@ 0x68
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	3330      	adds	r3, #48	@ 0x30
 8002554:	461a      	mov	r2, r3
 8002556:	f00c ff5f 	bl	800f418 <arm_mat_mult_f32>

    // x = x + K * (z - H * x)
    arm_mat_mult_f32(&kf->H, &kf->x, &kf->u);         // reuse u for Hx
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	f103 0010 	add.w	r0, r3, #16
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	3348      	adds	r3, #72	@ 0x48
 800256a:	461a      	mov	r2, r3
 800256c:	f00c ff54 	bl	800f418 <arm_mat_mult_f32>
    for (int i = 0; i < KALMAN_MEAS_DIM; i++) {
 8002570:	2300      	movs	r3, #0
 8002572:	61bb      	str	r3, [r7, #24]
 8002574:	e01c      	b.n	80025b0 <Kalman_Update+0x106>
        kf->u_data[i] = kf->z_data[i] - kf->u_data[i]; // z - Hx
 8002576:	687a      	ldr	r2, [r7, #4]
 8002578:	69bb      	ldr	r3, [r7, #24]
 800257a:	3394      	adds	r3, #148	@ 0x94
 800257c:	009b      	lsls	r3, r3, #2
 800257e:	4413      	add	r3, r2
 8002580:	3304      	adds	r3, #4
 8002582:	ed93 7a00 	vldr	s14, [r3]
 8002586:	687a      	ldr	r2, [r7, #4]
 8002588:	69bb      	ldr	r3, [r7, #24]
 800258a:	3390      	adds	r3, #144	@ 0x90
 800258c:	009b      	lsls	r3, r3, #2
 800258e:	4413      	add	r3, r2
 8002590:	3304      	adds	r3, #4
 8002592:	edd3 7a00 	vldr	s15, [r3]
 8002596:	ee77 7a67 	vsub.f32	s15, s14, s15
 800259a:	687a      	ldr	r2, [r7, #4]
 800259c:	69bb      	ldr	r3, [r7, #24]
 800259e:	3390      	adds	r3, #144	@ 0x90
 80025a0:	009b      	lsls	r3, r3, #2
 80025a2:	4413      	add	r3, r2
 80025a4:	3304      	adds	r3, #4
 80025a6:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < KALMAN_MEAS_DIM; i++) {
 80025aa:	69bb      	ldr	r3, [r7, #24]
 80025ac:	3301      	adds	r3, #1
 80025ae:	61bb      	str	r3, [r7, #24]
 80025b0:	69bb      	ldr	r3, [r7, #24]
 80025b2:	2b03      	cmp	r3, #3
 80025b4:	dddf      	ble.n	8002576 <Kalman_Update+0xcc>
    }
    arm_mat_mult_f32(&kf->K, &kf->u, &kf->u);         // reuse u for K*(z-Hx)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	f103 0148 	add.w	r1, r3, #72	@ 0x48
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	3348      	adds	r3, #72	@ 0x48
 80025c6:	461a      	mov	r2, r3
 80025c8:	f00c ff26 	bl	800f418 <arm_mat_mult_f32>
    for (int i = 0; i < KALMAN_STATE_DIM; i++) {
 80025cc:	2300      	movs	r3, #0
 80025ce:	617b      	str	r3, [r7, #20]
 80025d0:	e01c      	b.n	800260c <Kalman_Update+0x162>
        kf->x_data[i] += kf->u_data[i];
 80025d2:	687a      	ldr	r2, [r7, #4]
 80025d4:	697b      	ldr	r3, [r7, #20]
 80025d6:	338c      	adds	r3, #140	@ 0x8c
 80025d8:	009b      	lsls	r3, r3, #2
 80025da:	4413      	add	r3, r2
 80025dc:	3304      	adds	r3, #4
 80025de:	ed93 7a00 	vldr	s14, [r3]
 80025e2:	687a      	ldr	r2, [r7, #4]
 80025e4:	697b      	ldr	r3, [r7, #20]
 80025e6:	3390      	adds	r3, #144	@ 0x90
 80025e8:	009b      	lsls	r3, r3, #2
 80025ea:	4413      	add	r3, r2
 80025ec:	3304      	adds	r3, #4
 80025ee:	edd3 7a00 	vldr	s15, [r3]
 80025f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025f6:	687a      	ldr	r2, [r7, #4]
 80025f8:	697b      	ldr	r3, [r7, #20]
 80025fa:	338c      	adds	r3, #140	@ 0x8c
 80025fc:	009b      	lsls	r3, r3, #2
 80025fe:	4413      	add	r3, r2
 8002600:	3304      	adds	r3, #4
 8002602:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < KALMAN_STATE_DIM; i++) {
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	3301      	adds	r3, #1
 800260a:	617b      	str	r3, [r7, #20]
 800260c:	697b      	ldr	r3, [r7, #20]
 800260e:	2b03      	cmp	r3, #3
 8002610:	dddf      	ble.n	80025d2 <Kalman_Update+0x128>
    }

    // P = (I - K * H) * P
    for (int i = 0; i < KALMAN_STATE_DIM * KALMAN_STATE_DIM; i++) {
 8002612:	2300      	movs	r3, #0
 8002614:	613b      	str	r3, [r7, #16]
 8002616:	e00b      	b.n	8002630 <Kalman_Update+0x186>
        kf->temp1_data[i] = 0.0f;
 8002618:	687a      	ldr	r2, [r7, #4]
 800261a:	693b      	ldr	r3, [r7, #16]
 800261c:	3398      	adds	r3, #152	@ 0x98
 800261e:	009b      	lsls	r3, r3, #2
 8002620:	4413      	add	r3, r2
 8002622:	3304      	adds	r3, #4
 8002624:	f04f 0200 	mov.w	r2, #0
 8002628:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < KALMAN_STATE_DIM * KALMAN_STATE_DIM; i++) {
 800262a:	693b      	ldr	r3, [r7, #16]
 800262c:	3301      	adds	r3, #1
 800262e:	613b      	str	r3, [r7, #16]
 8002630:	693b      	ldr	r3, [r7, #16]
 8002632:	2b0f      	cmp	r3, #15
 8002634:	ddf0      	ble.n	8002618 <Kalman_Update+0x16e>
    }
    for (int i = 0; i < KALMAN_STATE_DIM; i++) {
 8002636:	2300      	movs	r3, #0
 8002638:	60fb      	str	r3, [r7, #12]
 800263a:	e00e      	b.n	800265a <Kalman_Update+0x1b0>
        kf->temp1_data[i * KALMAN_STATE_DIM + i] = 1.0f;
 800263c:	68fa      	ldr	r2, [r7, #12]
 800263e:	4613      	mov	r3, r2
 8002640:	009b      	lsls	r3, r3, #2
 8002642:	4413      	add	r3, r2
 8002644:	687a      	ldr	r2, [r7, #4]
 8002646:	3398      	adds	r3, #152	@ 0x98
 8002648:	009b      	lsls	r3, r3, #2
 800264a:	4413      	add	r3, r2
 800264c:	3304      	adds	r3, #4
 800264e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002652:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < KALMAN_STATE_DIM; i++) {
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	3301      	adds	r3, #1
 8002658:	60fb      	str	r3, [r7, #12]
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	2b03      	cmp	r3, #3
 800265e:	dded      	ble.n	800263c <Kalman_Update+0x192>
    }
    arm_mat_mult_f32(&kf->K, &kf->H, &kf->temp2);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	f103 0110 	add.w	r1, r3, #16
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	3360      	adds	r3, #96	@ 0x60
 8002670:	461a      	mov	r2, r3
 8002672:	f00c fed1 	bl	800f418 <arm_mat_mult_f32>
    arm_mat_sub_f32(&kf->temp1, &kf->temp2, &kf->temp1);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	f103 0058 	add.w	r0, r3, #88	@ 0x58
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	f103 0160 	add.w	r1, r3, #96	@ 0x60
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	3358      	adds	r3, #88	@ 0x58
 8002686:	461a      	mov	r2, r3
 8002688:	f00c ff40 	bl	800f50c <arm_mat_sub_f32>
    arm_mat_mult_f32(&kf->temp1, &kf->P, &kf->P);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	f103 0058 	add.w	r0, r3, #88	@ 0x58
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	3328      	adds	r3, #40	@ 0x28
 800269c:	461a      	mov	r2, r3
 800269e:	f00c febb 	bl	800f418 <arm_mat_mult_f32>
}
 80026a2:	bf00      	nop
 80026a4:	3720      	adds	r7, #32
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}
	...

080026ac <modbus_1t5_Timeout>:
void Modbus_frame_response();


// function for interrupt
void modbus_1t5_Timeout(TIM_HandleTypeDef *htim)
{
 80026ac:	b480      	push	{r7}
 80026ae:	b083      	sub	sp, #12
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 80026b4:	4b04      	ldr	r3, [pc, #16]	@ (80026c8 <modbus_1t5_Timeout+0x1c>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	2201      	movs	r2, #1
 80026ba:	751a      	strb	r2, [r3, #20]
}
 80026bc:	bf00      	nop
 80026be:	370c      	adds	r7, #12
 80026c0:	46bd      	mov	sp, r7
 80026c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c6:	4770      	bx	lr
 80026c8:	2000028c 	.word	0x2000028c

080026cc <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim)
{
 80026cc:	b480      	push	{r7}
 80026ce:	b083      	sub	sp, #12
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 80026d4:	4b04      	ldr	r3, [pc, #16]	@ (80026e8 <modbus_3t5_Timeout+0x1c>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	2201      	movs	r2, #1
 80026da:	755a      	strb	r2, [r3, #21]
}
 80026dc:	bf00      	nop
 80026de:	370c      	adds	r7, #12
 80026e0:	46bd      	mov	sp, r7
 80026e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e6:	4770      	bx	lr
 80026e8:	2000028c 	.word	0x2000028c

080026ec <modbus_UART_Recived>:
void modbus_UART_Recived(UART_HandleTypeDef *huart,uint32_t pos)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b082      	sub	sp, #8
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
 80026f4:	6039      	str	r1, [r7, #0]

	//restart timer / start timer of counting time with modbus RTU
	hModbus->Flag_URev =1;
 80026f6:	4b15      	ldr	r3, [pc, #84]	@ (800274c <modbus_UART_Recived+0x60>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	2201      	movs	r2, #1
 80026fc:	759a      	strb	r2, [r3, #22]
	if(hModbus->modbusUartStructure.RxTail++<MODBUS_MESSAGEBUFFER_SIZE)
 80026fe:	4b13      	ldr	r3, [pc, #76]	@ (800274c <modbus_UART_Recived+0x60>)
 8002700:	681a      	ldr	r2, [r3, #0]
 8002702:	f8b2 33a2 	ldrh.w	r3, [r2, #930]	@ 0x3a2
 8002706:	1c59      	adds	r1, r3, #1
 8002708:	b289      	uxth	r1, r1
 800270a:	f8a2 13a2 	strh.w	r1, [r2, #930]	@ 0x3a2
 800270e:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8002712:	d210      	bcs.n	8002736 <modbus_UART_Recived+0x4a>
	{


	    HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 8002714:	4b0d      	ldr	r3, [pc, #52]	@ (800274c <modbus_UART_Recived+0x60>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	68d8      	ldr	r0, [r3, #12]
 800271a:	4b0c      	ldr	r3, [pc, #48]	@ (800274c <modbus_UART_Recived+0x60>)
 800271c:	681a      	ldr	r2, [r3, #0]
 800271e:	4b0b      	ldr	r3, [pc, #44]	@ (800274c <modbus_UART_Recived+0x60>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8002726:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 800272a:	4413      	add	r3, r2
 800272c:	3302      	adds	r3, #2
 800272e:	2201      	movs	r2, #1
 8002730:	4619      	mov	r1, r3
 8002732:	f009 ff35 	bl	800c5a0 <HAL_UART_Receive_IT>
	}
	__HAL_TIM_SET_COUNTER(hModbus->htim,0);
 8002736:	4b05      	ldr	r3, [pc, #20]	@ (800274c <modbus_UART_Recived+0x60>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	691b      	ldr	r3, [r3, #16]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	2200      	movs	r2, #0
 8002740:	625a      	str	r2, [r3, #36]	@ 0x24

}
 8002742:	bf00      	nop
 8002744:	3708      	adds	r7, #8
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}
 800274a:	bf00      	nop
 800274c:	2000028c 	.word	0x2000028c

08002750 <Modbus_init>:


void Modbus_init(ModbusHandleTypedef* hmodbus,u16u8_t* RegisterStartAddress)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b082      	sub	sp, #8
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
 8002758:	6039      	str	r1, [r7, #0]
	hModbus = hmodbus;
 800275a:	4a24      	ldr	r2, [pc, #144]	@ (80027ec <Modbus_init+0x9c>)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6013      	str	r3, [r2, #0]

	hModbus->RegisterAddress = RegisterStartAddress;
 8002760:	4b22      	ldr	r3, [pc, #136]	@ (80027ec <Modbus_init+0x9c>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	683a      	ldr	r2, [r7, #0]
 8002766:	605a      	str	r2, [r3, #4]

	//config timer interrupt
	HAL_TIM_RegisterCallback(hModbus->htim,HAL_TIM_OC_DELAY_ELAPSED_CB_ID,(void*)modbus_1t5_Timeout);
 8002768:	4b20      	ldr	r3, [pc, #128]	@ (80027ec <Modbus_init+0x9c>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	691b      	ldr	r3, [r3, #16]
 800276e:	4a20      	ldr	r2, [pc, #128]	@ (80027f0 <Modbus_init+0xa0>)
 8002770:	2114      	movs	r1, #20
 8002772:	4618      	mov	r0, r3
 8002774:	f008 fe0a 	bl	800b38c <HAL_TIM_RegisterCallback>
	HAL_TIM_RegisterCallback(hModbus->htim,HAL_TIM_PERIOD_ELAPSED_CB_ID ,(void*)modbus_3t5_Timeout);
 8002778:	4b1c      	ldr	r3, [pc, #112]	@ (80027ec <Modbus_init+0x9c>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	691b      	ldr	r3, [r3, #16]
 800277e:	4a1d      	ldr	r2, [pc, #116]	@ (80027f4 <Modbus_init+0xa4>)
 8002780:	210e      	movs	r1, #14
 8002782:	4618      	mov	r0, r3
 8002784:	f008 fe02 	bl	800b38c <HAL_TIM_RegisterCallback>

	//config UART interrupt
	HAL_UART_RegisterCallback(hModbus->huart,HAL_UART_RX_COMPLETE_CB_ID,(void*)modbus_UART_Recived);
 8002788:	4b18      	ldr	r3, [pc, #96]	@ (80027ec <Modbus_init+0x9c>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	68db      	ldr	r3, [r3, #12]
 800278e:	4a1a      	ldr	r2, [pc, #104]	@ (80027f8 <Modbus_init+0xa8>)
 8002790:	2103      	movs	r1, #3
 8002792:	4618      	mov	r0, r3
 8002794:	f009 fe4a 	bl	800c42c <HAL_UART_RegisterCallback>
	//start Receive
    HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 8002798:	4b14      	ldr	r3, [pc, #80]	@ (80027ec <Modbus_init+0x9c>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	68d8      	ldr	r0, [r3, #12]
 800279e:	4b13      	ldr	r3, [pc, #76]	@ (80027ec <Modbus_init+0x9c>)
 80027a0:	681a      	ldr	r2, [r3, #0]
 80027a2:	4b12      	ldr	r3, [pc, #72]	@ (80027ec <Modbus_init+0x9c>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 80027aa:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 80027ae:	4413      	add	r3, r2
 80027b0:	3302      	adds	r3, #2
 80027b2:	2201      	movs	r2, #1
 80027b4:	4619      	mov	r1, r3
 80027b6:	f009 fef3 	bl	800c5a0 <HAL_UART_Receive_IT>


    if(hModbus->htim->State == HAL_TIM_STATE_READY)
 80027ba:	4b0c      	ldr	r3, [pc, #48]	@ (80027ec <Modbus_init+0x9c>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	691b      	ldr	r3, [r3, #16]
 80027c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80027c4:	b2db      	uxtb	r3, r3
 80027c6:	2b01      	cmp	r3, #1
 80027c8:	d10c      	bne.n	80027e4 <Modbus_init+0x94>
    	{
    		HAL_TIM_Base_Start_IT(hModbus->htim);
 80027ca:	4b08      	ldr	r3, [pc, #32]	@ (80027ec <Modbus_init+0x9c>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	691b      	ldr	r3, [r3, #16]
 80027d0:	4618      	mov	r0, r3
 80027d2:	f007 fcc5 	bl	800a160 <HAL_TIM_Base_Start_IT>
    		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 80027d6:	4b05      	ldr	r3, [pc, #20]	@ (80027ec <Modbus_init+0x9c>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	691b      	ldr	r3, [r3, #16]
 80027dc:	2100      	movs	r1, #0
 80027de:	4618      	mov	r0, r3
 80027e0:	f007 ff8c 	bl	800a6fc <HAL_TIM_OnePulse_Start_IT>
    	}

}
 80027e4:	bf00      	nop
 80027e6:	3708      	adds	r7, #8
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bd80      	pop	{r7, pc}
 80027ec:	2000028c 	.word	0x2000028c
 80027f0:	080026ad 	.word	0x080026ad
 80027f4:	080026cd 	.word	0x080026cd
 80027f8:	080026ed 	.word	0x080026ed

080027fc <CRC16>:
} ;

unsigned short CRC16 ( puchMsg, usDataLen ) /* The function returns the CRC as a unsigned short type */
unsigned char *puchMsg ; /* message to calculate CRC upon */
unsigned short usDataLen ; /* quantity of bytes in message */
{
 80027fc:	b480      	push	{r7}
 80027fe:	b085      	sub	sp, #20
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
 8002804:	460b      	mov	r3, r1
 8002806:	803b      	strh	r3, [r7, #0]
	unsigned char uchCRCHi = 0xFF ; /* high byte of CRC initialized */
 8002808:	23ff      	movs	r3, #255	@ 0xff
 800280a:	73fb      	strb	r3, [r7, #15]
	unsigned char uchCRCLo = 0xFF ; /* low byte of CRC initialized */
 800280c:	23ff      	movs	r3, #255	@ 0xff
 800280e:	73bb      	strb	r3, [r7, #14]
	unsigned uIndex ; /* will index into CRC lookup table */
	while (usDataLen--) /* pass through message buffer */
 8002810:	e013      	b.n	800283a <CRC16+0x3e>
	{
		uIndex = uchCRCLo ^ *puchMsg++ ; /* calculate the CRC */
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	1c5a      	adds	r2, r3, #1
 8002816:	607a      	str	r2, [r7, #4]
 8002818:	781a      	ldrb	r2, [r3, #0]
 800281a:	7bbb      	ldrb	r3, [r7, #14]
 800281c:	4053      	eors	r3, r2
 800281e:	b2db      	uxtb	r3, r3
 8002820:	60bb      	str	r3, [r7, #8]
		uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex] ;
 8002822:	4a10      	ldr	r2, [pc, #64]	@ (8002864 <CRC16+0x68>)
 8002824:	68bb      	ldr	r3, [r7, #8]
 8002826:	4413      	add	r3, r2
 8002828:	781a      	ldrb	r2, [r3, #0]
 800282a:	7bfb      	ldrb	r3, [r7, #15]
 800282c:	4053      	eors	r3, r2
 800282e:	73bb      	strb	r3, [r7, #14]
		uchCRCHi = auchCRCLo[uIndex] ;
 8002830:	4a0d      	ldr	r2, [pc, #52]	@ (8002868 <CRC16+0x6c>)
 8002832:	68bb      	ldr	r3, [r7, #8]
 8002834:	4413      	add	r3, r2
 8002836:	781b      	ldrb	r3, [r3, #0]
 8002838:	73fb      	strb	r3, [r7, #15]
	while (usDataLen--) /* pass through message buffer */
 800283a:	883b      	ldrh	r3, [r7, #0]
 800283c:	1e5a      	subs	r2, r3, #1
 800283e:	803a      	strh	r2, [r7, #0]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d1e6      	bne.n	8002812 <CRC16+0x16>
	}
	return (uchCRCHi << 8 | uchCRCLo) ;
 8002844:	7bfb      	ldrb	r3, [r7, #15]
 8002846:	b21b      	sxth	r3, r3
 8002848:	021b      	lsls	r3, r3, #8
 800284a:	b21a      	sxth	r2, r3
 800284c:	7bbb      	ldrb	r3, [r7, #14]
 800284e:	b21b      	sxth	r3, r3
 8002850:	4313      	orrs	r3, r2
 8002852:	b21b      	sxth	r3, r3
 8002854:	b29b      	uxth	r3, r3
}
 8002856:	4618      	mov	r0, r3
 8002858:	3714      	adds	r7, #20
 800285a:	46bd      	mov	sp, r7
 800285c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002860:	4770      	bx	lr
 8002862:	bf00      	nop
 8002864:	20000108 	.word	0x20000108
 8002868:	20000008 	.word	0x20000008

0800286c <Modbus_Protocal_Worker>:



void Modbus_Protocal_Worker()
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b082      	sub	sp, #8
 8002870:	af00      	add	r7, sp, #0
	switch(hModbus->Mstatus)
 8002872:	4b80      	ldr	r3, [pc, #512]	@ (8002a74 <Modbus_Protocal_Worker+0x208>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	7e1b      	ldrb	r3, [r3, #24]
 8002878:	3b01      	subs	r3, #1
 800287a:	2b03      	cmp	r3, #3
 800287c:	d80a      	bhi.n	8002894 <Modbus_Protocal_Worker+0x28>
 800287e:	a201      	add	r2, pc, #4	@ (adr r2, 8002884 <Modbus_Protocal_Worker+0x18>)
 8002880:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002884:	0800289f 	.word	0x0800289f
 8002888:	08002a3d 	.word	0x08002a3d
 800288c:	08002929 	.word	0x08002929
 8002890:	0800294f 	.word	0x0800294f
	{
	default:
	case Modbus_state_Init:
		/*init Modbus protocal*/

		hModbus->Mstatus = Modbus_state_Idle;
 8002894:	4b77      	ldr	r3, [pc, #476]	@ (8002a74 <Modbus_Protocal_Worker+0x208>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	2201      	movs	r2, #1
 800289a:	761a      	strb	r2, [r3, #24]
		break;
 800289c:	e0e6      	b.n	8002a6c <Modbus_Protocal_Worker+0x200>
	case Modbus_state_Idle:
		/*Idle state*/

		//check that we have response message
		if(hModbus->TxCount)
 800289e:	4b75      	ldr	r3, [pc, #468]	@ (8002a74 <Modbus_Protocal_Worker+0x208>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f893 3271 	ldrb.w	r3, [r3, #625]	@ 0x271
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d002      	beq.n	80028b0 <Modbus_Protocal_Worker+0x44>
		{
			Modbus_Emission();
 80028aa:	f000 f9d5 	bl	8002c58 <Modbus_Emission>
 80028ae:	e01c      	b.n	80028ea <Modbus_Protocal_Worker+0x7e>
		}

		// Received character
		else if(hModbus->Flag_URev)
 80028b0:	4b70      	ldr	r3, [pc, #448]	@ (8002a74 <Modbus_Protocal_Worker+0x208>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	7d9b      	ldrb	r3, [r3, #22]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d017      	beq.n	80028ea <Modbus_Protocal_Worker+0x7e>
		{
			/*reset Timer flag*/
			hModbus->Flag_T15TimeOut = 0;
 80028ba:	4b6e      	ldr	r3, [pc, #440]	@ (8002a74 <Modbus_Protocal_Worker+0x208>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	2200      	movs	r2, #0
 80028c0:	751a      	strb	r2, [r3, #20]
			hModbus->Flag_T35TimeOut = 0;
 80028c2:	4b6c      	ldr	r3, [pc, #432]	@ (8002a74 <Modbus_Protocal_Worker+0x208>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	2200      	movs	r2, #0
 80028c8:	755a      	strb	r2, [r3, #21]
			__HAL_TIM_ENABLE(hModbus->htim);
 80028ca:	4b6a      	ldr	r3, [pc, #424]	@ (8002a74 <Modbus_Protocal_Worker+0x208>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	691b      	ldr	r3, [r3, #16]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	681a      	ldr	r2, [r3, #0]
 80028d4:	4b67      	ldr	r3, [pc, #412]	@ (8002a74 <Modbus_Protocal_Worker+0x208>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	691b      	ldr	r3, [r3, #16]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f042 0201 	orr.w	r2, r2, #1
 80028e0:	601a      	str	r2, [r3, #0]
			/*set state*/
			hModbus->Mstatus= Modbus_state_Reception;
 80028e2:	4b64      	ldr	r3, [pc, #400]	@ (8002a74 <Modbus_Protocal_Worker+0x208>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	2203      	movs	r2, #3
 80028e8:	761a      	strb	r2, [r3, #24]
		}

		//check that if UART RX not start, start receiving
		if(hModbus->huart->RxState == HAL_UART_STATE_READY)
 80028ea:	4b62      	ldr	r3, [pc, #392]	@ (8002a74 <Modbus_Protocal_Worker+0x208>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	68db      	ldr	r3, [r3, #12]
 80028f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80028f4:	2b20      	cmp	r3, #32
 80028f6:	f040 80b2 	bne.w	8002a5e <Modbus_Protocal_Worker+0x1f2>
		{
			hModbus->modbusUartStructure.RxTail =0;
 80028fa:	4b5e      	ldr	r3, [pc, #376]	@ (8002a74 <Modbus_Protocal_Worker+0x208>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	2200      	movs	r2, #0
 8002900:	f8a3 23a2 	strh.w	r2, [r3, #930]	@ 0x3a2
			HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 8002904:	4b5b      	ldr	r3, [pc, #364]	@ (8002a74 <Modbus_Protocal_Worker+0x208>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	68d8      	ldr	r0, [r3, #12]
 800290a:	4b5a      	ldr	r3, [pc, #360]	@ (8002a74 <Modbus_Protocal_Worker+0x208>)
 800290c:	681a      	ldr	r2, [r3, #0]
 800290e:	4b59      	ldr	r3, [pc, #356]	@ (8002a74 <Modbus_Protocal_Worker+0x208>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8002916:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 800291a:	4413      	add	r3, r2
 800291c:	3302      	adds	r3, #2
 800291e:	2201      	movs	r2, #1
 8002920:	4619      	mov	r1, r3
 8002922:	f009 fe3d 	bl	800c5a0 <HAL_UART_Receive_IT>
		}
		break;
 8002926:	e09a      	b.n	8002a5e <Modbus_Protocal_Worker+0x1f2>
	case Modbus_state_Reception:

		if(hModbus->Flag_T15TimeOut)
 8002928:	4b52      	ldr	r3, [pc, #328]	@ (8002a74 <Modbus_Protocal_Worker+0x208>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	7d1b      	ldrb	r3, [r3, #20]
 800292e:	2b00      	cmp	r3, #0
 8002930:	f000 8097 	beq.w	8002a62 <Modbus_Protocal_Worker+0x1f6>
		{
			/*reset recived flag*/
			hModbus->Flag_URev =0;
 8002934:	4b4f      	ldr	r3, [pc, #316]	@ (8002a74 <Modbus_Protocal_Worker+0x208>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	2200      	movs	r2, #0
 800293a:	759a      	strb	r2, [r3, #22]
			hModbus->RecvStatus = Modbus_RecvFrame_Null;
 800293c:	4b4d      	ldr	r3, [pc, #308]	@ (8002a74 <Modbus_Protocal_Worker+0x208>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	22fe      	movs	r2, #254	@ 0xfe
 8002942:	75da      	strb	r2, [r3, #23]

			/*compute CRC and Slave address*/



			hModbus->Mstatus = Modbus_state_ControlAndWaiting;
 8002944:	4b4b      	ldr	r3, [pc, #300]	@ (8002a74 <Modbus_Protocal_Worker+0x208>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	2204      	movs	r2, #4
 800294a:	761a      	strb	r2, [r3, #24]
		}
		break;
 800294c:	e089      	b.n	8002a62 <Modbus_Protocal_Worker+0x1f6>
	case Modbus_state_ControlAndWaiting:
		/*Frame error , Not generate response , Clear buffer*/
		if(hModbus->Flag_URev)
 800294e:	4b49      	ldr	r3, [pc, #292]	@ (8002a74 <Modbus_Protocal_Worker+0x208>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	7d9b      	ldrb	r3, [r3, #22]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d009      	beq.n	800296c <Modbus_Protocal_Worker+0x100>
		{

			if(!hModbus->RecvStatus)
 8002958:	4b46      	ldr	r3, [pc, #280]	@ (8002a74 <Modbus_Protocal_Worker+0x208>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f993 3017 	ldrsb.w	r3, [r3, #23]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d103      	bne.n	800296c <Modbus_Protocal_Worker+0x100>
			{
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 8002964:	4b43      	ldr	r3, [pc, #268]	@ (8002a74 <Modbus_Protocal_Worker+0x208>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	22ff      	movs	r2, #255	@ 0xff
 800296a:	75da      	strb	r2, [r3, #23]
			}
		}

		/*Frame Calculation , calculate once*/
		if(hModbus->RecvStatus == Modbus_RecvFrame_Null)
 800296c:	4b41      	ldr	r3, [pc, #260]	@ (8002a74 <Modbus_Protocal_Worker+0x208>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f993 3017 	ldrsb.w	r3, [r3, #23]
 8002974:	f113 0f02 	cmn.w	r3, #2
 8002978:	d150      	bne.n	8002a1c <Modbus_Protocal_Worker+0x1b0>
		{
			hModbus->RecvStatus = Modbus_RecvFrame_Normal;
 800297a:	4b3e      	ldr	r3, [pc, #248]	@ (8002a74 <Modbus_Protocal_Worker+0x208>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	2200      	movs	r2, #0
 8002980:	75da      	strb	r2, [r3, #23]
			// check CRC
			u16u8_t CalculateCRC;
			CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferRx,hModbus->modbusUartStructure.RxTail - 2);
 8002982:	4b3c      	ldr	r3, [pc, #240]	@ (8002a74 <Modbus_Protocal_Worker+0x208>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f203 2272 	addw	r2, r3, #626	@ 0x272
 800298a:	4b3a      	ldr	r3, [pc, #232]	@ (8002a74 <Modbus_Protocal_Worker+0x208>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8002992:	3b02      	subs	r3, #2
 8002994:	4619      	mov	r1, r3
 8002996:	4610      	mov	r0, r2
 8002998:	f7ff ff30 	bl	80027fc <CRC16>
 800299c:	4603      	mov	r3, r0
 800299e:	80bb      	strh	r3, [r7, #4]

			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 80029a0:	793a      	ldrb	r2, [r7, #4]
 80029a2:	4b34      	ldr	r3, [pc, #208]	@ (8002a74 <Modbus_Protocal_Worker+0x208>)
 80029a4:	6819      	ldr	r1, [r3, #0]
 80029a6:	4b33      	ldr	r3, [pc, #204]	@ (8002a74 <Modbus_Protocal_Worker+0x208>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 80029ae:	3b02      	subs	r3, #2
 80029b0:	440b      	add	r3, r1
 80029b2:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
 80029b6:	429a      	cmp	r2, r3
 80029b8:	d10c      	bne.n	80029d4 <Modbus_Protocal_Worker+0x168>
			&& CalculateCRC.U8[1] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail -1]))
 80029ba:	797a      	ldrb	r2, [r7, #5]
 80029bc:	4b2d      	ldr	r3, [pc, #180]	@ (8002a74 <Modbus_Protocal_Worker+0x208>)
 80029be:	6819      	ldr	r1, [r3, #0]
 80029c0:	4b2c      	ldr	r3, [pc, #176]	@ (8002a74 <Modbus_Protocal_Worker+0x208>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 80029c8:	3b01      	subs	r3, #1
 80029ca:	440b      	add	r3, r1
 80029cc:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 80029d0:	429a      	cmp	r2, r3
 80029d2:	d004      	beq.n	80029de <Modbus_Protocal_Worker+0x172>
			{
				// communication unsuccessful
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 80029d4:	4b27      	ldr	r3, [pc, #156]	@ (8002a74 <Modbus_Protocal_Worker+0x208>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	22ff      	movs	r2, #255	@ 0xff
 80029da:	75da      	strb	r2, [r3, #23]
				break;
 80029dc:	e046      	b.n	8002a6c <Modbus_Protocal_Worker+0x200>
			}

			//check Slave Address
			if(hModbus->modbusUartStructure.MessageBufferRx[0] != hModbus->slaveAddress)
 80029de:	4b25      	ldr	r3, [pc, #148]	@ (8002a74 <Modbus_Protocal_Worker+0x208>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f893 2272 	ldrb.w	r2, [r3, #626]	@ 0x272
 80029e6:	4b23      	ldr	r3, [pc, #140]	@ (8002a74 <Modbus_Protocal_Worker+0x208>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	781b      	ldrb	r3, [r3, #0]
 80029ec:	429a      	cmp	r2, r3
 80029ee:	d113      	bne.n	8002a18 <Modbus_Protocal_Worker+0x1ac>
				break;

			//copy recivced frame
			memcpy(hModbus->Rxframe,
 80029f0:	4b20      	ldr	r3, [pc, #128]	@ (8002a74 <Modbus_Protocal_Worker+0x208>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f103 0019 	add.w	r0, r3, #25
					hModbus->modbusUartStructure.MessageBufferRx+1,
 80029f8:	4b1e      	ldr	r3, [pc, #120]	@ (8002a74 <Modbus_Protocal_Worker+0x208>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f203 2372 	addw	r3, r3, #626	@ 0x272
			memcpy(hModbus->Rxframe,
 8002a00:	1c59      	adds	r1, r3, #1
					hModbus->modbusUartStructure.RxTail-3);
 8002a02:	4b1c      	ldr	r3, [pc, #112]	@ (8002a74 <Modbus_Protocal_Worker+0x208>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8002a0a:	3b03      	subs	r3, #3
			memcpy(hModbus->Rxframe,
 8002a0c:	461a      	mov	r2, r3
 8002a0e:	f00c fe2b 	bl	800f668 <memcpy>

			//execute command
			Modbus_frame_response();
 8002a12:	f000 f909 	bl	8002c28 <Modbus_frame_response>
 8002a16:	e001      	b.n	8002a1c <Modbus_Protocal_Worker+0x1b0>
				break;
 8002a18:	bf00      	nop
					}
		break;


	}
}
 8002a1a:	e027      	b.n	8002a6c <Modbus_Protocal_Worker+0x200>
		if(hModbus->Flag_T35TimeOut)
 8002a1c:	4b15      	ldr	r3, [pc, #84]	@ (8002a74 <Modbus_Protocal_Worker+0x208>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	7d5b      	ldrb	r3, [r3, #21]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d01f      	beq.n	8002a66 <Modbus_Protocal_Worker+0x1fa>
			hModbus->Mstatus = Modbus_state_Idle;
 8002a26:	4b13      	ldr	r3, [pc, #76]	@ (8002a74 <Modbus_Protocal_Worker+0x208>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	761a      	strb	r2, [r3, #24]
			HAL_UART_AbortReceive(hModbus->huart);
 8002a2e:	4b11      	ldr	r3, [pc, #68]	@ (8002a74 <Modbus_Protocal_Worker+0x208>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	68db      	ldr	r3, [r3, #12]
 8002a34:	4618      	mov	r0, r3
 8002a36:	f009 fe7f 	bl	800c738 <HAL_UART_AbortReceive>
		break;
 8002a3a:	e014      	b.n	8002a66 <Modbus_Protocal_Worker+0x1fa>
		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8002a3c:	4b0d      	ldr	r3, [pc, #52]	@ (8002a74 <Modbus_Protocal_Worker+0x208>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	68db      	ldr	r3, [r3, #12]
 8002a42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a46:	2b20      	cmp	r3, #32
 8002a48:	d10f      	bne.n	8002a6a <Modbus_Protocal_Worker+0x1fe>
			hModbus->TxCount=0;
 8002a4a:	4b0a      	ldr	r3, [pc, #40]	@ (8002a74 <Modbus_Protocal_Worker+0x208>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	2200      	movs	r2, #0
 8002a50:	f883 2271 	strb.w	r2, [r3, #625]	@ 0x271
			hModbus->Mstatus = Modbus_state_Idle;
 8002a54:	4b07      	ldr	r3, [pc, #28]	@ (8002a74 <Modbus_Protocal_Worker+0x208>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	2201      	movs	r2, #1
 8002a5a:	761a      	strb	r2, [r3, #24]
		break;
 8002a5c:	e005      	b.n	8002a6a <Modbus_Protocal_Worker+0x1fe>
		break;
 8002a5e:	bf00      	nop
 8002a60:	e004      	b.n	8002a6c <Modbus_Protocal_Worker+0x200>
		break;
 8002a62:	bf00      	nop
 8002a64:	e002      	b.n	8002a6c <Modbus_Protocal_Worker+0x200>
		break;
 8002a66:	bf00      	nop
 8002a68:	e000      	b.n	8002a6c <Modbus_Protocal_Worker+0x200>
		break;
 8002a6a:	bf00      	nop
}
 8002a6c:	bf00      	nop
 8002a6e:	3708      	adds	r7, #8
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bd80      	pop	{r7, pc}
 8002a74:	2000028c 	.word	0x2000028c

08002a78 <modbusWrite1Register>:
void modbusWrite1Register() //function 06
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b082      	sub	sp, #8
 8002a7c:	af00      	add	r7, sp, #0

	//write data to register
	uint16_t startAddress = (hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]);
 8002a7e:	4b1d      	ldr	r3, [pc, #116]	@ (8002af4 <modbusWrite1Register+0x7c>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	7e9b      	ldrb	r3, [r3, #26]
 8002a84:	021b      	lsls	r3, r3, #8
 8002a86:	b29b      	uxth	r3, r3
 8002a88:	4a1a      	ldr	r2, [pc, #104]	@ (8002af4 <modbusWrite1Register+0x7c>)
 8002a8a:	6812      	ldr	r2, [r2, #0]
 8002a8c:	7ed2      	ldrb	r2, [r2, #27]
 8002a8e:	4413      	add	r3, r2
 8002a90:	80fb      	strh	r3, [r7, #6]

	if(startAddress > hModbus->RegisterSize)
 8002a92:	88fa      	ldrh	r2, [r7, #6]
 8002a94:	4b17      	ldr	r3, [pc, #92]	@ (8002af4 <modbusWrite1Register+0x7c>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	429a      	cmp	r2, r3
 8002a9c:	d903      	bls.n	8002aa6 <modbusWrite1Register+0x2e>
		{
			 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 8002a9e:	2002      	movs	r0, #2
 8002aa0:	f000 f8a0 	bl	8002be4 <ModbusErrorReply>
			 return;
 8002aa4:	e023      	b.n	8002aee <modbusWrite1Register+0x76>
		}


	hModbus->RegisterAddress[startAddress].U8[1] = hModbus->Rxframe[3];
 8002aa6:	4b13      	ldr	r3, [pc, #76]	@ (8002af4 <modbusWrite1Register+0x7c>)
 8002aa8:	681a      	ldr	r2, [r3, #0]
 8002aaa:	4b12      	ldr	r3, [pc, #72]	@ (8002af4 <modbusWrite1Register+0x7c>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	6859      	ldr	r1, [r3, #4]
 8002ab0:	88fb      	ldrh	r3, [r7, #6]
 8002ab2:	005b      	lsls	r3, r3, #1
 8002ab4:	440b      	add	r3, r1
 8002ab6:	7f12      	ldrb	r2, [r2, #28]
 8002ab8:	705a      	strb	r2, [r3, #1]
	hModbus->RegisterAddress[startAddress].U8[0] = hModbus->Rxframe[4];
 8002aba:	4b0e      	ldr	r3, [pc, #56]	@ (8002af4 <modbusWrite1Register+0x7c>)
 8002abc:	681a      	ldr	r2, [r3, #0]
 8002abe:	4b0d      	ldr	r3, [pc, #52]	@ (8002af4 <modbusWrite1Register+0x7c>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	6859      	ldr	r1, [r3, #4]
 8002ac4:	88fb      	ldrh	r3, [r7, #6]
 8002ac6:	005b      	lsls	r3, r3, #1
 8002ac8:	440b      	add	r3, r1
 8002aca:	7f52      	ldrb	r2, [r2, #29]
 8002acc:	701a      	strb	r2, [r3, #0]



	//generate response
	memcpy(hModbus->Txframe,
 8002ace:	4b09      	ldr	r3, [pc, #36]	@ (8002af4 <modbusWrite1Register+0x7c>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f203 1045 	addw	r0, r3, #325	@ 0x145
			hModbus->Rxframe,
 8002ad6:	4b07      	ldr	r3, [pc, #28]	@ (8002af4 <modbusWrite1Register+0x7c>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	3319      	adds	r3, #25
	memcpy(hModbus->Txframe,
 8002adc:	2208      	movs	r2, #8
 8002ade:	4619      	mov	r1, r3
 8002ae0:	f00c fdc2 	bl	800f668 <memcpy>
			8);
	//set number of byte to sent
	hModbus->TxCount=5;
 8002ae4:	4b03      	ldr	r3, [pc, #12]	@ (8002af4 <modbusWrite1Register+0x7c>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	2205      	movs	r2, #5
 8002aea:	f883 2271 	strb.w	r2, [r3, #625]	@ 0x271



}
 8002aee:	3708      	adds	r7, #8
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd80      	pop	{r7, pc}
 8002af4:	2000028c 	.word	0x2000028c

08002af8 <modbusRead1Register>:

void modbusRead1Register() // function 03
{
 8002af8:	b590      	push	{r4, r7, lr}
 8002afa:	b083      	sub	sp, #12
 8002afc:	af00      	add	r7, sp, #0



	uint16_t numberOfDataToRead =((hModbus->Rxframe[3]<<8)+(hModbus->Rxframe[4]));
 8002afe:	4b38      	ldr	r3, [pc, #224]	@ (8002be0 <modbusRead1Register+0xe8>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	7f1b      	ldrb	r3, [r3, #28]
 8002b04:	021b      	lsls	r3, r3, #8
 8002b06:	b29b      	uxth	r3, r3
 8002b08:	4a35      	ldr	r2, [pc, #212]	@ (8002be0 <modbusRead1Register+0xe8>)
 8002b0a:	6812      	ldr	r2, [r2, #0]
 8002b0c:	7f52      	ldrb	r2, [r2, #29]
 8002b0e:	4413      	add	r3, r2
 8002b10:	80fb      	strh	r3, [r7, #6]
	uint16_t startAddress =((hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]));
 8002b12:	4b33      	ldr	r3, [pc, #204]	@ (8002be0 <modbusRead1Register+0xe8>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	7e9b      	ldrb	r3, [r3, #26]
 8002b18:	021b      	lsls	r3, r3, #8
 8002b1a:	b29b      	uxth	r3, r3
 8002b1c:	4a30      	ldr	r2, [pc, #192]	@ (8002be0 <modbusRead1Register+0xe8>)
 8002b1e:	6812      	ldr	r2, [r2, #0]
 8002b20:	7ed2      	ldrb	r2, [r2, #27]
 8002b22:	4413      	add	r3, r2
 8002b24:	80bb      	strh	r3, [r7, #4]

	//check quantity and address range

	if(numberOfDataToRead <1 ||numberOfDataToRead > 0x7D)
 8002b26:	88fb      	ldrh	r3, [r7, #6]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d002      	beq.n	8002b32 <modbusRead1Register+0x3a>
 8002b2c:	88fb      	ldrh	r3, [r7, #6]
 8002b2e:	2b7d      	cmp	r3, #125	@ 0x7d
 8002b30:	d903      	bls.n	8002b3a <modbusRead1Register+0x42>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataValue);
 8002b32:	2003      	movs	r0, #3
 8002b34:	f000 f856 	bl	8002be4 <ModbusErrorReply>
		 return;
 8002b38:	e04e      	b.n	8002bd8 <modbusRead1Register+0xe0>
	}

	if(startAddress > hModbus->RegisterSize || (startAddress +  numberOfDataToRead) > hModbus->RegisterSize)
 8002b3a:	88ba      	ldrh	r2, [r7, #4]
 8002b3c:	4b28      	ldr	r3, [pc, #160]	@ (8002be0 <modbusRead1Register+0xe8>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	689b      	ldr	r3, [r3, #8]
 8002b42:	429a      	cmp	r2, r3
 8002b44:	d808      	bhi.n	8002b58 <modbusRead1Register+0x60>
 8002b46:	88ba      	ldrh	r2, [r7, #4]
 8002b48:	88fb      	ldrh	r3, [r7, #6]
 8002b4a:	4413      	add	r3, r2
 8002b4c:	461a      	mov	r2, r3
 8002b4e:	4b24      	ldr	r3, [pc, #144]	@ (8002be0 <modbusRead1Register+0xe8>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	689b      	ldr	r3, [r3, #8]
 8002b54:	429a      	cmp	r2, r3
 8002b56:	d903      	bls.n	8002b60 <modbusRead1Register+0x68>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 8002b58:	2002      	movs	r0, #2
 8002b5a:	f000 f843 	bl	8002be4 <ModbusErrorReply>
		 return;
 8002b5e:	e03b      	b.n	8002bd8 <modbusRead1Register+0xe0>
	}


	//generate response
	hModbus->Txframe[0] = Modbus_function_Read_Holding_Register;
 8002b60:	4b1f      	ldr	r3, [pc, #124]	@ (8002be0 <modbusRead1Register+0xe8>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	2203      	movs	r2, #3
 8002b66:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	hModbus->Txframe[1] = (2*numberOfDataToRead) & 0xFF;
 8002b6a:	88fb      	ldrh	r3, [r7, #6]
 8002b6c:	b2da      	uxtb	r2, r3
 8002b6e:	4b1c      	ldr	r3, [pc, #112]	@ (8002be0 <modbusRead1Register+0xe8>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	0052      	lsls	r2, r2, #1
 8002b74:	b2d2      	uxtb	r2, r2
 8002b76:	f883 2146 	strb.w	r2, [r3, #326]	@ 0x146
	register int i;
	for(i=0; i<numberOfDataToRead;i++)
 8002b7a:	2400      	movs	r4, #0
 8002b7c:	e020      	b.n	8002bc0 <modbusRead1Register+0xc8>
	{
		hModbus->Txframe[2*i+2]=hModbus->RegisterAddress[startAddress+i].U8[1];
 8002b7e:	4b18      	ldr	r3, [pc, #96]	@ (8002be0 <modbusRead1Register+0xe8>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	685a      	ldr	r2, [r3, #4]
 8002b84:	88bb      	ldrh	r3, [r7, #4]
 8002b86:	4423      	add	r3, r4
 8002b88:	005b      	lsls	r3, r3, #1
 8002b8a:	18d1      	adds	r1, r2, r3
 8002b8c:	4b14      	ldr	r3, [pc, #80]	@ (8002be0 <modbusRead1Register+0xe8>)
 8002b8e:	681a      	ldr	r2, [r3, #0]
 8002b90:	1c63      	adds	r3, r4, #1
 8002b92:	005b      	lsls	r3, r3, #1
 8002b94:	7849      	ldrb	r1, [r1, #1]
 8002b96:	4413      	add	r3, r2
 8002b98:	460a      	mov	r2, r1
 8002b9a:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
		hModbus->Txframe[2*i+3]=hModbus->RegisterAddress[startAddress+i].U8[0];
 8002b9e:	4b10      	ldr	r3, [pc, #64]	@ (8002be0 <modbusRead1Register+0xe8>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	685a      	ldr	r2, [r3, #4]
 8002ba4:	88bb      	ldrh	r3, [r7, #4]
 8002ba6:	4423      	add	r3, r4
 8002ba8:	005b      	lsls	r3, r3, #1
 8002baa:	18d1      	adds	r1, r2, r3
 8002bac:	4b0c      	ldr	r3, [pc, #48]	@ (8002be0 <modbusRead1Register+0xe8>)
 8002bae:	681a      	ldr	r2, [r3, #0]
 8002bb0:	0063      	lsls	r3, r4, #1
 8002bb2:	3303      	adds	r3, #3
 8002bb4:	7809      	ldrb	r1, [r1, #0]
 8002bb6:	4413      	add	r3, r2
 8002bb8:	460a      	mov	r2, r1
 8002bba:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	for(i=0; i<numberOfDataToRead;i++)
 8002bbe:	3401      	adds	r4, #1
 8002bc0:	88fb      	ldrh	r3, [r7, #6]
 8002bc2:	429c      	cmp	r4, r3
 8002bc4:	dbdb      	blt.n	8002b7e <modbusRead1Register+0x86>
	}
	hModbus->TxCount = 2+2*numberOfDataToRead;
 8002bc6:	88fb      	ldrh	r3, [r7, #6]
 8002bc8:	3301      	adds	r3, #1
 8002bca:	b2da      	uxtb	r2, r3
 8002bcc:	4b04      	ldr	r3, [pc, #16]	@ (8002be0 <modbusRead1Register+0xe8>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	0052      	lsls	r2, r2, #1
 8002bd2:	b2d2      	uxtb	r2, r2
 8002bd4:	f883 2271 	strb.w	r2, [r3, #625]	@ 0x271

}
 8002bd8:	370c      	adds	r7, #12
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd90      	pop	{r4, r7, pc}
 8002bde:	bf00      	nop
 8002be0:	2000028c 	.word	0x2000028c

08002be4 <ModbusErrorReply>:

void ModbusErrorReply(uint8_t Errorcode)
{
 8002be4:	b480      	push	{r7}
 8002be6:	b083      	sub	sp, #12
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	4603      	mov	r3, r0
 8002bec:	71fb      	strb	r3, [r7, #7]
	hModbus->Txframe[0] = hModbus->Rxframe[0] | 0x80;
 8002bee:	4b0d      	ldr	r3, [pc, #52]	@ (8002c24 <ModbusErrorReply+0x40>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	7e5a      	ldrb	r2, [r3, #25]
 8002bf4:	4b0b      	ldr	r3, [pc, #44]	@ (8002c24 <ModbusErrorReply+0x40>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8002bfc:	b2d2      	uxtb	r2, r2
 8002bfe:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	hModbus->Txframe[1] = Errorcode;
 8002c02:	4b08      	ldr	r3, [pc, #32]	@ (8002c24 <ModbusErrorReply+0x40>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	79fa      	ldrb	r2, [r7, #7]
 8002c08:	f883 2146 	strb.w	r2, [r3, #326]	@ 0x146
	hModbus->TxCount = 2;
 8002c0c:	4b05      	ldr	r3, [pc, #20]	@ (8002c24 <ModbusErrorReply+0x40>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	2202      	movs	r2, #2
 8002c12:	f883 2271 	strb.w	r2, [r3, #625]	@ 0x271
}
 8002c16:	bf00      	nop
 8002c18:	370c      	adds	r7, #12
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c20:	4770      	bx	lr
 8002c22:	bf00      	nop
 8002c24:	2000028c 	.word	0x2000028c

08002c28 <Modbus_frame_response>:

void Modbus_frame_response()
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	af00      	add	r7, sp, #0
	switch(hModbus->Rxframe[0]) //check funcion
 8002c2c:	4b09      	ldr	r3, [pc, #36]	@ (8002c54 <Modbus_frame_response+0x2c>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	7e5b      	ldrb	r3, [r3, #25]
 8002c32:	2b03      	cmp	r3, #3
 8002c34:	d004      	beq.n	8002c40 <Modbus_frame_response+0x18>
 8002c36:	2b06      	cmp	r3, #6
 8002c38:	d105      	bne.n	8002c46 <Modbus_frame_response+0x1e>
	{
	case Modbus_function_Write_SingleRegister:
		modbusWrite1Register();
 8002c3a:	f7ff ff1d 	bl	8002a78 <modbusWrite1Register>
		break;
 8002c3e:	e006      	b.n	8002c4e <Modbus_frame_response+0x26>
	case Modbus_function_Read_Holding_Register:
		modbusRead1Register();
 8002c40:	f7ff ff5a 	bl	8002af8 <modbusRead1Register>
		break;
 8002c44:	e003      	b.n	8002c4e <Modbus_frame_response+0x26>
	default:
		 ModbusErrorReply(Modbus_RecvFrame_IllegalFunction);
 8002c46:	2001      	movs	r0, #1
 8002c48:	f7ff ffcc 	bl	8002be4 <ModbusErrorReply>
		break;
 8002c4c:	bf00      	nop

	}
}
 8002c4e:	bf00      	nop
 8002c50:	bd80      	pop	{r7, pc}
 8002c52:	bf00      	nop
 8002c54:	2000028c 	.word	0x2000028c

08002c58 <Modbus_Emission>:

void Modbus_Emission()
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b082      	sub	sp, #8
 8002c5c:	af00      	add	r7, sp, #0
	if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8002c5e:	4b3c      	ldr	r3, [pc, #240]	@ (8002d50 <Modbus_Emission+0xf8>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	68db      	ldr	r3, [r3, #12]
 8002c64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c68:	2b20      	cmp	r3, #32
 8002c6a:	d15d      	bne.n	8002d28 <Modbus_Emission+0xd0>
	{
		//generate response package
		hModbus->modbusUartStructure.MessageBufferTx[0] = hModbus->slaveAddress;
 8002c6c:	4b38      	ldr	r3, [pc, #224]	@ (8002d50 <Modbus_Emission+0xf8>)
 8002c6e:	681a      	ldr	r2, [r3, #0]
 8002c70:	4b37      	ldr	r3, [pc, #220]	@ (8002d50 <Modbus_Emission+0xf8>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	7812      	ldrb	r2, [r2, #0]
 8002c76:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		memcpy
		(
				hModbus->modbusUartStructure.MessageBufferTx+1,
 8002c7a:	4b35      	ldr	r3, [pc, #212]	@ (8002d50 <Modbus_Emission+0xf8>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f503 7369 	add.w	r3, r3, #932	@ 0x3a4
		memcpy
 8002c82:	1c58      	adds	r0, r3, #1
				hModbus->Txframe,
 8002c84:	4b32      	ldr	r3, [pc, #200]	@ (8002d50 <Modbus_Emission+0xf8>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f203 1145 	addw	r1, r3, #325	@ 0x145
				hModbus->TxCount
 8002c8c:	4b30      	ldr	r3, [pc, #192]	@ (8002d50 <Modbus_Emission+0xf8>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f893 3271 	ldrb.w	r3, [r3, #625]	@ 0x271
		memcpy
 8002c94:	461a      	mov	r2, r3
 8002c96:	f00c fce7 	bl	800f668 <memcpy>
		);

		hModbus->modbusUartStructure.TxTail = hModbus->TxCount+3;
 8002c9a:	4b2d      	ldr	r3, [pc, #180]	@ (8002d50 <Modbus_Emission+0xf8>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f893 3271 	ldrb.w	r3, [r3, #625]	@ 0x271
 8002ca2:	461a      	mov	r2, r3
 8002ca4:	4b2a      	ldr	r3, [pc, #168]	@ (8002d50 <Modbus_Emission+0xf8>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	3203      	adds	r2, #3
 8002caa:	b292      	uxth	r2, r2
 8002cac:	f8a3 24d4 	strh.w	r2, [r3, #1236]	@ 0x4d4

		u16u8_t CalculateCRC;
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 8002cb0:	4b27      	ldr	r3, [pc, #156]	@ (8002d50 <Modbus_Emission+0xf8>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f503 7269 	add.w	r2, r3, #932	@ 0x3a4
				hModbus->modbusUartStructure.TxTail - 2);
 8002cb8:	4b25      	ldr	r3, [pc, #148]	@ (8002d50 <Modbus_Emission+0xf8>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 8002cc0:	3b02      	subs	r3, #2
 8002cc2:	4619      	mov	r1, r3
 8002cc4:	4610      	mov	r0, r2
 8002cc6:	f7ff fd99 	bl	80027fc <CRC16>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	80bb      	strh	r3, [r7, #4]

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-2]
 8002cce:	4b20      	ldr	r3, [pc, #128]	@ (8002d50 <Modbus_Emission+0xf8>)
 8002cd0:	681a      	ldr	r2, [r3, #0]
 8002cd2:	4b1f      	ldr	r3, [pc, #124]	@ (8002d50 <Modbus_Emission+0xf8>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 8002cda:	3b02      	subs	r3, #2
													 =CalculateCRC.U8[0];
 8002cdc:	7939      	ldrb	r1, [r7, #4]
 8002cde:	4413      	add	r3, r2
 8002ce0:	460a      	mov	r2, r1
 8002ce2:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-1]
 8002ce6:	4b1a      	ldr	r3, [pc, #104]	@ (8002d50 <Modbus_Emission+0xf8>)
 8002ce8:	681a      	ldr	r2, [r3, #0]
 8002cea:	4b19      	ldr	r3, [pc, #100]	@ (8002d50 <Modbus_Emission+0xf8>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 8002cf2:	3b01      	subs	r3, #1
													 =CalculateCRC.U8[1];
 8002cf4:	7979      	ldrb	r1, [r7, #5]
 8002cf6:	4413      	add	r3, r2
 8002cf8:	460a      	mov	r2, r1
 8002cfa:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4


		//sent modbus

		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8002cfe:	4b14      	ldr	r3, [pc, #80]	@ (8002d50 <Modbus_Emission+0xf8>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	68db      	ldr	r3, [r3, #12]
 8002d04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d08:	2b20      	cmp	r3, #32
 8002d0a:	d10d      	bne.n	8002d28 <Modbus_Emission+0xd0>
		{
			HAL_UART_Transmit_DMA(hModbus->huart
 8002d0c:	4b10      	ldr	r3, [pc, #64]	@ (8002d50 <Modbus_Emission+0xf8>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	68d8      	ldr	r0, [r3, #12]
					,hModbus->modbusUartStructure.MessageBufferTx
 8002d12:	4b0f      	ldr	r3, [pc, #60]	@ (8002d50 <Modbus_Emission+0xf8>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f503 7169 	add.w	r1, r3, #932	@ 0x3a4
					,hModbus->modbusUartStructure.TxTail);
 8002d1a:	4b0d      	ldr	r3, [pc, #52]	@ (8002d50 <Modbus_Emission+0xf8>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
			HAL_UART_Transmit_DMA(hModbus->huart
 8002d1e:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 8002d22:	461a      	mov	r2, r3
 8002d24:	f009 fc88 	bl	800c638 <HAL_UART_Transmit_DMA>



	}
	/*reset Timer flag*/
	hModbus->Flag_T15TimeOut = 0;
 8002d28:	4b09      	ldr	r3, [pc, #36]	@ (8002d50 <Modbus_Emission+0xf8>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	751a      	strb	r2, [r3, #20]
	hModbus->Flag_T35TimeOut = 0;
 8002d30:	4b07      	ldr	r3, [pc, #28]	@ (8002d50 <Modbus_Emission+0xf8>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	2200      	movs	r2, #0
 8002d36:	755a      	strb	r2, [r3, #21]
	hModbus->Flag_URev =0;
 8002d38:	4b05      	ldr	r3, [pc, #20]	@ (8002d50 <Modbus_Emission+0xf8>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	759a      	strb	r2, [r3, #22]
	/*set state*/
	hModbus->Mstatus= Modbus_state_Emission;
 8002d40:	4b03      	ldr	r3, [pc, #12]	@ (8002d50 <Modbus_Emission+0xf8>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	2202      	movs	r2, #2
 8002d46:	761a      	strb	r2, [r3, #24]
}
 8002d48:	bf00      	nop
 8002d4a:	3708      	adds	r7, #8
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bd80      	pop	{r7, pc}
 8002d50:	2000028c 	.word	0x2000028c

08002d54 <create_prismatic_motor>:

float v_pris_dis[2] = {0, 0};
float v_pris_ref[3] = {0, 0, 0};

PrismaticMotor create_prismatic_motor(double J, double B, double Eff, double Ke,
		double Kt, double R, double L) {
 8002d54:	b4b0      	push	{r4, r5, r7}
 8002d56:	b09f      	sub	sp, #124	@ 0x7c
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8002d5c:	ed87 0b0c 	vstr	d0, [r7, #48]	@ 0x30
 8002d60:	ed87 1b0a 	vstr	d1, [r7, #40]	@ 0x28
 8002d64:	ed87 2b08 	vstr	d2, [r7, #32]
 8002d68:	ed87 3b06 	vstr	d3, [r7, #24]
 8002d6c:	ed87 4b04 	vstr	d4, [r7, #16]
 8002d70:	ed87 5b02 	vstr	d5, [r7, #8]
 8002d74:	ed87 6b00 	vstr	d6, [r7]
	PrismaticMotor motor = { J, B, Eff, Ke, Kt, R, L };
 8002d78:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8002d7c:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
 8002d80:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002d84:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
 8002d88:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002d8c:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
 8002d90:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d94:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
 8002d98:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002d9c:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
 8002da0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002da4:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
 8002da8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002dac:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
	return motor;
 8002db0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002db2:	461d      	mov	r5, r3
 8002db4:	f107 0440 	add.w	r4, r7, #64	@ 0x40
 8002db8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002dba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002dbc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002dbe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002dc0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002dc2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002dc4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002dc8:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8002dcc:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8002dce:	377c      	adds	r7, #124	@ 0x7c
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bcb0      	pop	{r4, r5, r7}
 8002dd4:	4770      	bx	lr

08002dd6 <create_motor>:
#include "revolute.h"

float v_rev_dis[2] = {0, 0};
float v_rev_ref[3] = {0, 0, 0};

RevoluteMotor create_motor(double J, double B, double Eff, double Ke, double Kt, double R, double L) {
 8002dd6:	b4b0      	push	{r4, r5, r7}
 8002dd8:	b09f      	sub	sp, #124	@ 0x7c
 8002dda:	af00      	add	r7, sp, #0
 8002ddc:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8002dde:	ed87 0b0c 	vstr	d0, [r7, #48]	@ 0x30
 8002de2:	ed87 1b0a 	vstr	d1, [r7, #40]	@ 0x28
 8002de6:	ed87 2b08 	vstr	d2, [r7, #32]
 8002dea:	ed87 3b06 	vstr	d3, [r7, #24]
 8002dee:	ed87 4b04 	vstr	d4, [r7, #16]
 8002df2:	ed87 5b02 	vstr	d5, [r7, #8]
 8002df6:	ed87 6b00 	vstr	d6, [r7]
    RevoluteMotor motor = { J, B, Eff, Ke, Kt, R, L };
 8002dfa:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8002dfe:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
 8002e02:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002e06:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
 8002e0a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002e0e:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
 8002e12:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e16:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
 8002e1a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002e1e:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
 8002e22:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002e26:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
 8002e2a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002e2e:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
    return motor;
 8002e32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002e34:	461d      	mov	r5, r3
 8002e36:	f107 0440 	add.w	r4, r7, #64	@ 0x40
 8002e3a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e3c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e3e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e40:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e42:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e44:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e46:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002e4a:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8002e4e:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8002e50:	377c      	adds	r7, #124	@ 0x7c
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bcb0      	pop	{r4, r5, r7}
 8002e56:	4770      	bx	lr

08002e58 <InitTrajectorySegment>:
#include "Trajectory.h"
#include <math.h>

void InitTrajectorySegment(TrajectorySegment *seg, float start, float end, float v_max, float a_max, float t_start) {
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b08c      	sub	sp, #48	@ 0x30
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6178      	str	r0, [r7, #20]
 8002e60:	ed87 0a04 	vstr	s0, [r7, #16]
 8002e64:	edc7 0a03 	vstr	s1, [r7, #12]
 8002e68:	ed87 1a02 	vstr	s2, [r7, #8]
 8002e6c:	edc7 1a01 	vstr	s3, [r7, #4]
 8002e70:	ed87 2a00 	vstr	s4, [r7]
    float D = end - start;
 8002e74:	ed97 7a03 	vldr	s14, [r7, #12]
 8002e78:	edd7 7a04 	vldr	s15, [r7, #16]
 8002e7c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e80:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
    float dir = (D >= 0) ? 1.0f : -1.0f;
 8002e84:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8002e88:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002e8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e90:	db02      	blt.n	8002e98 <InitTrajectorySegment+0x40>
 8002e92:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8002e96:	e000      	b.n	8002e9a <InitTrajectorySegment+0x42>
 8002e98:	4b49      	ldr	r3, [pc, #292]	@ (8002fc0 <InitTrajectorySegment+0x168>)
 8002e9a:	627b      	str	r3, [r7, #36]	@ 0x24
    D = fabsf(D);
 8002e9c:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8002ea0:	eef0 7ae7 	vabs.f32	s15, s15
 8002ea4:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28

    float t_accel = v_max / a_max;
 8002ea8:	edd7 6a02 	vldr	s13, [r7, #8]
 8002eac:	ed97 7a01 	vldr	s14, [r7, #4]
 8002eb0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002eb4:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    float d_accel = 0.5f * a_max * t_accel * t_accel;
 8002eb8:	edd7 7a01 	vldr	s15, [r7, #4]
 8002ebc:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002ec0:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002ec4:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8002ec8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ecc:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8002ed0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ed4:	edc7 7a08 	vstr	s15, [r7, #32]

    if (2 * d_accel > D) {
 8002ed8:	edd7 7a08 	vldr	s15, [r7, #32]
 8002edc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002ee0:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8002ee4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002ee8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002eec:	d524      	bpl.n	8002f38 <InitTrajectorySegment+0xe0>
        // Triangular profile
        t_accel = sqrtf(D / a_max);
 8002eee:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8002ef2:	edd7 7a01 	vldr	s15, [r7, #4]
 8002ef6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002efa:	eeb0 0a66 	vmov.f32	s0, s13
 8002efe:	f00c fc89 	bl	800f814 <sqrtf>
 8002f02:	ed87 0a0b 	vstr	s0, [r7, #44]	@ 0x2c
        seg->t_const = 0;
 8002f06:	697b      	ldr	r3, [r7, #20]
 8002f08:	f04f 0200 	mov.w	r2, #0
 8002f0c:	615a      	str	r2, [r3, #20]
        seg->t_total = 2 * t_accel;
 8002f0e:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8002f12:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002f16:	697b      	ldr	r3, [r7, #20]
 8002f18:	edc3 7a07 	vstr	s15, [r3, #28]
        seg->v_max = a_max * t_accel * dir;
 8002f1c:	ed97 7a01 	vldr	s14, [r7, #4]
 8002f20:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8002f24:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002f28:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002f2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	edc3 7a02 	vstr	s15, [r3, #8]
 8002f36:	e027      	b.n	8002f88 <InitTrajectorySegment+0x130>
    } else {
        // Trapezoidal profile
        float d_const = D - 2 * d_accel;
 8002f38:	edd7 7a08 	vldr	s15, [r7, #32]
 8002f3c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002f40:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8002f44:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f48:	edc7 7a07 	vstr	s15, [r7, #28]
        seg->t_const = d_const / v_max;
 8002f4c:	edd7 6a07 	vldr	s13, [r7, #28]
 8002f50:	ed97 7a02 	vldr	s14, [r7, #8]
 8002f54:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002f58:	697b      	ldr	r3, [r7, #20]
 8002f5a:	edc3 7a05 	vstr	s15, [r3, #20]
        seg->t_total = 2 * t_accel + seg->t_const;
 8002f5e:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8002f62:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	edd3 7a05 	vldr	s15, [r3, #20]
 8002f6c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f70:	697b      	ldr	r3, [r7, #20]
 8002f72:	edc3 7a07 	vstr	s15, [r3, #28]
        seg->v_max = v_max * dir;
 8002f76:	ed97 7a02 	vldr	s14, [r7, #8]
 8002f7a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002f7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	edc3 7a02 	vstr	s15, [r3, #8]
    }

    seg->start_pos = start;
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	693a      	ldr	r2, [r7, #16]
 8002f8c:	601a      	str	r2, [r3, #0]
    seg->end_pos = end;
 8002f8e:	697b      	ldr	r3, [r7, #20]
 8002f90:	68fa      	ldr	r2, [r7, #12]
 8002f92:	605a      	str	r2, [r3, #4]
//    seg->v_max = v_max * dir;
    seg->a_max = a_max * dir;
 8002f94:	ed97 7a01 	vldr	s14, [r7, #4]
 8002f98:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002f9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fa0:	697b      	ldr	r3, [r7, #20]
 8002fa2:	edc3 7a03 	vstr	s15, [r3, #12]
    seg->t_accel = t_accel;
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002faa:	611a      	str	r2, [r3, #16]
    seg->t_decel = t_accel;
 8002fac:	697b      	ldr	r3, [r7, #20]
 8002fae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002fb0:	619a      	str	r2, [r3, #24]
    seg->t_start = t_start;
 8002fb2:	697b      	ldr	r3, [r7, #20]
 8002fb4:	683a      	ldr	r2, [r7, #0]
 8002fb6:	621a      	str	r2, [r3, #32]
}
 8002fb8:	bf00      	nop
 8002fba:	3730      	adds	r7, #48	@ 0x30
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bd80      	pop	{r7, pc}
 8002fc0:	bf800000 	.word	0xbf800000

08002fc4 <GetTrajectoryPosition>:

float GetTrajectoryPosition(const TrajectorySegment *seg, float t_global) {
 8002fc4:	b480      	push	{r7}
 8002fc6:	b08f      	sub	sp, #60	@ 0x3c
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
 8002fcc:	ed87 0a00 	vstr	s0, [r7]
    float t = t_global - seg->t_start;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	edd3 7a08 	vldr	s15, [r3, #32]
 8002fd6:	ed97 7a00 	vldr	s14, [r7]
 8002fda:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002fde:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
    if (t < 0) return seg->start_pos;
 8002fe2:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8002fe6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002fea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fee:	d503      	bpl.n	8002ff8 <GetTrajectoryPosition+0x34>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	edd3 7a00 	vldr	s15, [r3]
 8002ff6:	e0b4      	b.n	8003162 <GetTrajectoryPosition+0x19e>
    if (t >= seg->t_total) return seg->end_pos;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	edd3 7a07 	vldr	s15, [r3, #28]
 8002ffe:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8003002:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003006:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800300a:	db03      	blt.n	8003014 <GetTrajectoryPosition+0x50>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	edd3 7a01 	vldr	s15, [r3, #4]
 8003012:	e0a6      	b.n	8003162 <GetTrajectoryPosition+0x19e>

    float a = seg->a_max;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	68db      	ldr	r3, [r3, #12]
 8003018:	633b      	str	r3, [r7, #48]	@ 0x30
    float v = seg->v_max;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	689b      	ldr	r3, [r3, #8]
 800301e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    float p0 = seg->start_pos;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	62bb      	str	r3, [r7, #40]	@ 0x28

    if (t < seg->t_accel) {
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	edd3 7a04 	vldr	s15, [r3, #16]
 800302c:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8003030:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003034:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003038:	d512      	bpl.n	8003060 <GetTrajectoryPosition+0x9c>
        return p0 + 0.5f * a * t * t;
 800303a:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800303e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8003042:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003046:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800304a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800304e:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8003052:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003056:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800305a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800305e:	e080      	b.n	8003162 <GetTrajectoryPosition+0x19e>
    } else if (t < seg->t_accel + seg->t_const) {
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	ed93 7a04 	vldr	s14, [r3, #16]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	edd3 7a05 	vldr	s15, [r3, #20]
 800306c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003070:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8003074:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003078:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800307c:	d525      	bpl.n	80030ca <GetTrajectoryPosition+0x106>
        float t1 = seg->t_accel;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	691b      	ldr	r3, [r3, #16]
 8003082:	613b      	str	r3, [r7, #16]
        float p1 = p0 + 0.5f * a * t1 * t1;
 8003084:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8003088:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800308c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003090:	edd7 7a04 	vldr	s15, [r7, #16]
 8003094:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003098:	edd7 7a04 	vldr	s15, [r7, #16]
 800309c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030a0:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 80030a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030a8:	edc7 7a03 	vstr	s15, [r7, #12]
        return p1 + v * (t - t1);
 80030ac:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 80030b0:	edd7 7a04 	vldr	s15, [r7, #16]
 80030b4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80030b8:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80030bc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80030c0:	edd7 7a03 	vldr	s15, [r7, #12]
 80030c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030c8:	e04b      	b.n	8003162 <GetTrajectoryPosition+0x19e>
    } else {
        float t1 = seg->t_accel;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	691b      	ldr	r3, [r3, #16]
 80030ce:	627b      	str	r3, [r7, #36]	@ 0x24
        float t2 = seg->t_const;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	695b      	ldr	r3, [r3, #20]
 80030d4:	623b      	str	r3, [r7, #32]
        float p1 = p0 + 0.5f * a * t1 * t1;
 80030d6:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80030da:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80030de:	ee27 7a87 	vmul.f32	s14, s15, s14
 80030e2:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80030e6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80030ea:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80030ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030f2:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 80030f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030fa:	edc7 7a07 	vstr	s15, [r7, #28]
        float p2 = p1 + v * t2;
 80030fe:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8003102:	edd7 7a08 	vldr	s15, [r7, #32]
 8003106:	ee67 7a27 	vmul.f32	s15, s14, s15
 800310a:	ed97 7a07 	vldr	s14, [r7, #28]
 800310e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003112:	edc7 7a06 	vstr	s15, [r7, #24]
        float td = t - t1 - t2;
 8003116:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 800311a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800311e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003122:	edd7 7a08 	vldr	s15, [r7, #32]
 8003126:	ee77 7a67 	vsub.f32	s15, s14, s15
 800312a:	edc7 7a05 	vstr	s15, [r7, #20]
        return p2 + v * td - 0.5f * a * td * td;
 800312e:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8003132:	edd7 7a05 	vldr	s15, [r7, #20]
 8003136:	ee27 7a27 	vmul.f32	s14, s14, s15
 800313a:	edd7 7a06 	vldr	s15, [r7, #24]
 800313e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003142:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8003146:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 800314a:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800314e:	edd7 7a05 	vldr	s15, [r7, #20]
 8003152:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003156:	edd7 7a05 	vldr	s15, [r7, #20]
 800315a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800315e:	ee77 7a67 	vsub.f32	s15, s14, s15
    }
}
 8003162:	eeb0 0a67 	vmov.f32	s0, s15
 8003166:	373c      	adds	r7, #60	@ 0x3c
 8003168:	46bd      	mov	sp, r7
 800316a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316e:	4770      	bx	lr

08003170 <GetTrajectoryVelocity>:

float GetTrajectoryVelocity(const TrajectorySegment *seg, float t_global) {
 8003170:	b480      	push	{r7}
 8003172:	b087      	sub	sp, #28
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
 8003178:	ed87 0a00 	vstr	s0, [r7]
    float t = t_global - seg->t_start;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	edd3 7a08 	vldr	s15, [r3, #32]
 8003182:	ed97 7a00 	vldr	s14, [r7]
 8003186:	ee77 7a67 	vsub.f32	s15, s14, s15
 800318a:	edc7 7a05 	vstr	s15, [r7, #20]
    if (t < 0) return 0;
 800318e:	edd7 7a05 	vldr	s15, [r7, #20]
 8003192:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003196:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800319a:	d502      	bpl.n	80031a2 <GetTrajectoryVelocity+0x32>
 800319c:	eddf 7a2b 	vldr	s15, [pc, #172]	@ 800324c <GetTrajectoryVelocity+0xdc>
 80031a0:	e04d      	b.n	800323e <GetTrajectoryVelocity+0xce>
    if (t >= seg->t_total) return 0;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	edd3 7a07 	vldr	s15, [r3, #28]
 80031a8:	ed97 7a05 	vldr	s14, [r7, #20]
 80031ac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80031b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031b4:	db02      	blt.n	80031bc <GetTrajectoryVelocity+0x4c>
 80031b6:	eddf 7a25 	vldr	s15, [pc, #148]	@ 800324c <GetTrajectoryVelocity+0xdc>
 80031ba:	e040      	b.n	800323e <GetTrajectoryVelocity+0xce>

    float a = seg->a_max;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	68db      	ldr	r3, [r3, #12]
 80031c0:	613b      	str	r3, [r7, #16]
    float v = seg->v_max;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	689b      	ldr	r3, [r3, #8]
 80031c6:	60fb      	str	r3, [r7, #12]

    if (t < seg->t_accel) {
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	edd3 7a04 	vldr	s15, [r3, #16]
 80031ce:	ed97 7a05 	vldr	s14, [r7, #20]
 80031d2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80031d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031da:	d506      	bpl.n	80031ea <GetTrajectoryVelocity+0x7a>
        return a * t;
 80031dc:	ed97 7a04 	vldr	s14, [r7, #16]
 80031e0:	edd7 7a05 	vldr	s15, [r7, #20]
 80031e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031e8:	e029      	b.n	800323e <GetTrajectoryVelocity+0xce>
    } else if (t < seg->t_accel + seg->t_const) {
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	ed93 7a04 	vldr	s14, [r3, #16]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	edd3 7a05 	vldr	s15, [r3, #20]
 80031f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031fa:	ed97 7a05 	vldr	s14, [r7, #20]
 80031fe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003202:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003206:	d502      	bpl.n	800320e <GetTrajectoryVelocity+0x9e>
        return v;
 8003208:	edd7 7a03 	vldr	s15, [r7, #12]
 800320c:	e017      	b.n	800323e <GetTrajectoryVelocity+0xce>
    } else {
        float td = t - seg->t_accel - seg->t_const;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	edd3 7a04 	vldr	s15, [r3, #16]
 8003214:	ed97 7a05 	vldr	s14, [r7, #20]
 8003218:	ee37 7a67 	vsub.f32	s14, s14, s15
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	edd3 7a05 	vldr	s15, [r3, #20]
 8003222:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003226:	edc7 7a02 	vstr	s15, [r7, #8]
        return v - a * td;
 800322a:	ed97 7a04 	vldr	s14, [r7, #16]
 800322e:	edd7 7a02 	vldr	s15, [r7, #8]
 8003232:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003236:	ed97 7a03 	vldr	s14, [r7, #12]
 800323a:	ee77 7a67 	vsub.f32	s15, s14, s15
    }
}
 800323e:	eeb0 0a67 	vmov.f32	s0, s15
 8003242:	371c      	adds	r7, #28
 8003244:	46bd      	mov	sp, r7
 8003246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324a:	4770      	bx	lr
 800324c:	00000000 	.word	0x00000000

08003250 <InitHoldTrajectorySegment>:

void InitHoldTrajectorySegment(TrajectorySegment *seg, float pos, float duration, float t_start) {
 8003250:	b480      	push	{r7}
 8003252:	b085      	sub	sp, #20
 8003254:	af00      	add	r7, sp, #0
 8003256:	60f8      	str	r0, [r7, #12]
 8003258:	ed87 0a02 	vstr	s0, [r7, #8]
 800325c:	edc7 0a01 	vstr	s1, [r7, #4]
 8003260:	ed87 1a00 	vstr	s2, [r7]
	seg->start_pos = pos;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	68ba      	ldr	r2, [r7, #8]
 8003268:	601a      	str	r2, [r3, #0]
	seg->end_pos = pos;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	68ba      	ldr	r2, [r7, #8]
 800326e:	605a      	str	r2, [r3, #4]
	seg->v_max = 0.0f;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	f04f 0200 	mov.w	r2, #0
 8003276:	609a      	str	r2, [r3, #8]
	seg->a_max = 0.0f;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	f04f 0200 	mov.w	r2, #0
 800327e:	60da      	str	r2, [r3, #12]
	seg->t_accel = 0.0f;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	f04f 0200 	mov.w	r2, #0
 8003286:	611a      	str	r2, [r3, #16]
	seg->t_decel = 0.0f;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	f04f 0200 	mov.w	r2, #0
 800328e:	619a      	str	r2, [r3, #24]
	seg->t_const = duration;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	687a      	ldr	r2, [r7, #4]
 8003294:	615a      	str	r2, [r3, #20]
	seg->t_total = duration;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	687a      	ldr	r2, [r7, #4]
 800329a:	61da      	str	r2, [r3, #28]
	seg->t_start = t_start;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	683a      	ldr	r2, [r7, #0]
 80032a0:	621a      	str	r2, [r3, #32]
}
 80032a2:	bf00      	nop
 80032a4:	3714      	adds	r7, #20
 80032a6:	46bd      	mov	sp, r7
 80032a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ac:	4770      	bx	lr
	...

080032b0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b08c      	sub	sp, #48	@ 0x30
 80032b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80032b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80032ba:	2200      	movs	r2, #0
 80032bc:	601a      	str	r2, [r3, #0]
 80032be:	605a      	str	r2, [r3, #4]
 80032c0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80032c2:	1d3b      	adds	r3, r7, #4
 80032c4:	2220      	movs	r2, #32
 80032c6:	2100      	movs	r1, #0
 80032c8:	4618      	mov	r0, r3
 80032ca:	f00c f99b 	bl	800f604 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80032ce:	4b32      	ldr	r3, [pc, #200]	@ (8003398 <MX_ADC1_Init+0xe8>)
 80032d0:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80032d4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80032d6:	4b30      	ldr	r3, [pc, #192]	@ (8003398 <MX_ADC1_Init+0xe8>)
 80032d8:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80032dc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80032de:	4b2e      	ldr	r3, [pc, #184]	@ (8003398 <MX_ADC1_Init+0xe8>)
 80032e0:	2200      	movs	r2, #0
 80032e2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80032e4:	4b2c      	ldr	r3, [pc, #176]	@ (8003398 <MX_ADC1_Init+0xe8>)
 80032e6:	2200      	movs	r2, #0
 80032e8:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80032ea:	4b2b      	ldr	r3, [pc, #172]	@ (8003398 <MX_ADC1_Init+0xe8>)
 80032ec:	2200      	movs	r2, #0
 80032ee:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80032f0:	4b29      	ldr	r3, [pc, #164]	@ (8003398 <MX_ADC1_Init+0xe8>)
 80032f2:	2200      	movs	r2, #0
 80032f4:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80032f6:	4b28      	ldr	r3, [pc, #160]	@ (8003398 <MX_ADC1_Init+0xe8>)
 80032f8:	2204      	movs	r2, #4
 80032fa:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80032fc:	4b26      	ldr	r3, [pc, #152]	@ (8003398 <MX_ADC1_Init+0xe8>)
 80032fe:	2200      	movs	r2, #0
 8003300:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8003302:	4b25      	ldr	r3, [pc, #148]	@ (8003398 <MX_ADC1_Init+0xe8>)
 8003304:	2200      	movs	r2, #0
 8003306:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8003308:	4b23      	ldr	r3, [pc, #140]	@ (8003398 <MX_ADC1_Init+0xe8>)
 800330a:	2201      	movs	r2, #1
 800330c:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800330e:	4b22      	ldr	r3, [pc, #136]	@ (8003398 <MX_ADC1_Init+0xe8>)
 8003310:	2200      	movs	r2, #0
 8003312:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003316:	4b20      	ldr	r3, [pc, #128]	@ (8003398 <MX_ADC1_Init+0xe8>)
 8003318:	2200      	movs	r2, #0
 800331a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800331c:	4b1e      	ldr	r3, [pc, #120]	@ (8003398 <MX_ADC1_Init+0xe8>)
 800331e:	2200      	movs	r2, #0
 8003320:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8003322:	4b1d      	ldr	r3, [pc, #116]	@ (8003398 <MX_ADC1_Init+0xe8>)
 8003324:	2200      	movs	r2, #0
 8003326:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800332a:	4b1b      	ldr	r3, [pc, #108]	@ (8003398 <MX_ADC1_Init+0xe8>)
 800332c:	2200      	movs	r2, #0
 800332e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8003330:	4b19      	ldr	r3, [pc, #100]	@ (8003398 <MX_ADC1_Init+0xe8>)
 8003332:	2200      	movs	r2, #0
 8003334:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003338:	4817      	ldr	r0, [pc, #92]	@ (8003398 <MX_ADC1_Init+0xe8>)
 800333a:	f003 fb2d 	bl	8006998 <HAL_ADC_Init>
 800333e:	4603      	mov	r3, r0
 8003340:	2b00      	cmp	r3, #0
 8003342:	d001      	beq.n	8003348 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8003344:	f002 f98e 	bl	8005664 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8003348:	2300      	movs	r3, #0
 800334a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800334c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003350:	4619      	mov	r1, r3
 8003352:	4811      	ldr	r0, [pc, #68]	@ (8003398 <MX_ADC1_Init+0xe8>)
 8003354:	f004 faca 	bl	80078ec <HAL_ADCEx_MultiModeConfigChannel>
 8003358:	4603      	mov	r3, r0
 800335a:	2b00      	cmp	r3, #0
 800335c:	d001      	beq.n	8003362 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800335e:	f002 f981 	bl	8005664 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8003362:	4b0e      	ldr	r3, [pc, #56]	@ (800339c <MX_ADC1_Init+0xec>)
 8003364:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003366:	2306      	movs	r3, #6
 8003368:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800336a:	2300      	movs	r3, #0
 800336c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800336e:	237f      	movs	r3, #127	@ 0x7f
 8003370:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8003372:	2304      	movs	r3, #4
 8003374:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8003376:	2300      	movs	r3, #0
 8003378:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800337a:	1d3b      	adds	r3, r7, #4
 800337c:	4619      	mov	r1, r3
 800337e:	4806      	ldr	r0, [pc, #24]	@ (8003398 <MX_ADC1_Init+0xe8>)
 8003380:	f003 fdb8 	bl	8006ef4 <HAL_ADC_ConfigChannel>
 8003384:	4603      	mov	r3, r0
 8003386:	2b00      	cmp	r3, #0
 8003388:	d001      	beq.n	800338e <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800338a:	f002 f96b 	bl	8005664 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800338e:	bf00      	nop
 8003390:	3730      	adds	r7, #48	@ 0x30
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}
 8003396:	bf00      	nop
 8003398:	20000290 	.word	0x20000290
 800339c:	04300002 	.word	0x04300002

080033a0 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b088      	sub	sp, #32
 80033a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80033a6:	463b      	mov	r3, r7
 80033a8:	2220      	movs	r2, #32
 80033aa:	2100      	movs	r1, #0
 80033ac:	4618      	mov	r0, r3
 80033ae:	f00c f929 	bl	800f604 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80033b2:	4b2b      	ldr	r3, [pc, #172]	@ (8003460 <MX_ADC2_Init+0xc0>)
 80033b4:	4a2b      	ldr	r2, [pc, #172]	@ (8003464 <MX_ADC2_Init+0xc4>)
 80033b6:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80033b8:	4b29      	ldr	r3, [pc, #164]	@ (8003460 <MX_ADC2_Init+0xc0>)
 80033ba:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80033be:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80033c0:	4b27      	ldr	r3, [pc, #156]	@ (8003460 <MX_ADC2_Init+0xc0>)
 80033c2:	2200      	movs	r2, #0
 80033c4:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80033c6:	4b26      	ldr	r3, [pc, #152]	@ (8003460 <MX_ADC2_Init+0xc0>)
 80033c8:	2200      	movs	r2, #0
 80033ca:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 80033cc:	4b24      	ldr	r3, [pc, #144]	@ (8003460 <MX_ADC2_Init+0xc0>)
 80033ce:	2200      	movs	r2, #0
 80033d0:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80033d2:	4b23      	ldr	r3, [pc, #140]	@ (8003460 <MX_ADC2_Init+0xc0>)
 80033d4:	2200      	movs	r2, #0
 80033d6:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80033d8:	4b21      	ldr	r3, [pc, #132]	@ (8003460 <MX_ADC2_Init+0xc0>)
 80033da:	2204      	movs	r2, #4
 80033dc:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80033de:	4b20      	ldr	r3, [pc, #128]	@ (8003460 <MX_ADC2_Init+0xc0>)
 80033e0:	2200      	movs	r2, #0
 80033e2:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80033e4:	4b1e      	ldr	r3, [pc, #120]	@ (8003460 <MX_ADC2_Init+0xc0>)
 80033e6:	2200      	movs	r2, #0
 80033e8:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 80033ea:	4b1d      	ldr	r3, [pc, #116]	@ (8003460 <MX_ADC2_Init+0xc0>)
 80033ec:	2201      	movs	r2, #1
 80033ee:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80033f0:	4b1b      	ldr	r3, [pc, #108]	@ (8003460 <MX_ADC2_Init+0xc0>)
 80033f2:	2200      	movs	r2, #0
 80033f4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80033f8:	4b19      	ldr	r3, [pc, #100]	@ (8003460 <MX_ADC2_Init+0xc0>)
 80033fa:	2200      	movs	r2, #0
 80033fc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80033fe:	4b18      	ldr	r3, [pc, #96]	@ (8003460 <MX_ADC2_Init+0xc0>)
 8003400:	2200      	movs	r2, #0
 8003402:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8003404:	4b16      	ldr	r3, [pc, #88]	@ (8003460 <MX_ADC2_Init+0xc0>)
 8003406:	2200      	movs	r2, #0
 8003408:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800340c:	4b14      	ldr	r3, [pc, #80]	@ (8003460 <MX_ADC2_Init+0xc0>)
 800340e:	2200      	movs	r2, #0
 8003410:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8003412:	4b13      	ldr	r3, [pc, #76]	@ (8003460 <MX_ADC2_Init+0xc0>)
 8003414:	2200      	movs	r2, #0
 8003416:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800341a:	4811      	ldr	r0, [pc, #68]	@ (8003460 <MX_ADC2_Init+0xc0>)
 800341c:	f003 fabc 	bl	8006998 <HAL_ADC_Init>
 8003420:	4603      	mov	r3, r0
 8003422:	2b00      	cmp	r3, #0
 8003424:	d001      	beq.n	800342a <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 8003426:	f002 f91d 	bl	8005664 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800342a:	4b0f      	ldr	r3, [pc, #60]	@ (8003468 <MX_ADC2_Init+0xc8>)
 800342c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800342e:	2306      	movs	r3, #6
 8003430:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8003432:	2300      	movs	r3, #0
 8003434:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8003436:	237f      	movs	r3, #127	@ 0x7f
 8003438:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800343a:	2304      	movs	r3, #4
 800343c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800343e:	2300      	movs	r3, #0
 8003440:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003442:	463b      	mov	r3, r7
 8003444:	4619      	mov	r1, r3
 8003446:	4806      	ldr	r0, [pc, #24]	@ (8003460 <MX_ADC2_Init+0xc0>)
 8003448:	f003 fd54 	bl	8006ef4 <HAL_ADC_ConfigChannel>
 800344c:	4603      	mov	r3, r0
 800344e:	2b00      	cmp	r3, #0
 8003450:	d001      	beq.n	8003456 <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 8003452:	f002 f907 	bl	8005664 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8003456:	bf00      	nop
 8003458:	3720      	adds	r7, #32
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}
 800345e:	bf00      	nop
 8003460:	200002fc 	.word	0x200002fc
 8003464:	50000100 	.word	0x50000100
 8003468:	08600004 	.word	0x08600004

0800346c <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b0a0      	sub	sp, #128	@ 0x80
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003474:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8003478:	2200      	movs	r2, #0
 800347a:	601a      	str	r2, [r3, #0]
 800347c:	605a      	str	r2, [r3, #4]
 800347e:	609a      	str	r2, [r3, #8]
 8003480:	60da      	str	r2, [r3, #12]
 8003482:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003484:	f107 0318 	add.w	r3, r7, #24
 8003488:	2254      	movs	r2, #84	@ 0x54
 800348a:	2100      	movs	r1, #0
 800348c:	4618      	mov	r0, r3
 800348e:	f00c f8b9 	bl	800f604 <memset>
  if(adcHandle->Instance==ADC1)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800349a:	d13e      	bne.n	800351a <HAL_ADC_MspInit+0xae>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800349c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80034a0:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80034a2:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80034a6:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80034a8:	f107 0318 	add.w	r3, r7, #24
 80034ac:	4618      	mov	r0, r3
 80034ae:	f005 ff07 	bl	80092c0 <HAL_RCCEx_PeriphCLKConfig>
 80034b2:	4603      	mov	r3, r0
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d001      	beq.n	80034bc <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80034b8:	f002 f8d4 	bl	8005664 <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80034bc:	4b3a      	ldr	r3, [pc, #232]	@ (80035a8 <HAL_ADC_MspInit+0x13c>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	3301      	adds	r3, #1
 80034c2:	4a39      	ldr	r2, [pc, #228]	@ (80035a8 <HAL_ADC_MspInit+0x13c>)
 80034c4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80034c6:	4b38      	ldr	r3, [pc, #224]	@ (80035a8 <HAL_ADC_MspInit+0x13c>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	2b01      	cmp	r3, #1
 80034cc:	d10b      	bne.n	80034e6 <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80034ce:	4b37      	ldr	r3, [pc, #220]	@ (80035ac <HAL_ADC_MspInit+0x140>)
 80034d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034d2:	4a36      	ldr	r2, [pc, #216]	@ (80035ac <HAL_ADC_MspInit+0x140>)
 80034d4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80034d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80034da:	4b34      	ldr	r3, [pc, #208]	@ (80035ac <HAL_ADC_MspInit+0x140>)
 80034dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034de:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80034e2:	617b      	str	r3, [r7, #20]
 80034e4:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034e6:	4b31      	ldr	r3, [pc, #196]	@ (80035ac <HAL_ADC_MspInit+0x140>)
 80034e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034ea:	4a30      	ldr	r2, [pc, #192]	@ (80035ac <HAL_ADC_MspInit+0x140>)
 80034ec:	f043 0301 	orr.w	r3, r3, #1
 80034f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80034f2:	4b2e      	ldr	r3, [pc, #184]	@ (80035ac <HAL_ADC_MspInit+0x140>)
 80034f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034f6:	f003 0301 	and.w	r3, r3, #1
 80034fa:	613b      	str	r3, [r7, #16]
 80034fc:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = Current_Sensor_Pin|Current_SensorA1_Pin;
 80034fe:	2303      	movs	r3, #3
 8003500:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003502:	2303      	movs	r3, #3
 8003504:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003506:	2300      	movs	r3, #0
 8003508:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800350a:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800350e:	4619      	mov	r1, r3
 8003510:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003514:	f004 ff40 	bl	8008398 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8003518:	e042      	b.n	80035a0 <HAL_ADC_MspInit+0x134>
  else if(adcHandle->Instance==ADC2)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a24      	ldr	r2, [pc, #144]	@ (80035b0 <HAL_ADC_MspInit+0x144>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d13d      	bne.n	80035a0 <HAL_ADC_MspInit+0x134>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8003524:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003528:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800352a:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800352e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003530:	f107 0318 	add.w	r3, r7, #24
 8003534:	4618      	mov	r0, r3
 8003536:	f005 fec3 	bl	80092c0 <HAL_RCCEx_PeriphCLKConfig>
 800353a:	4603      	mov	r3, r0
 800353c:	2b00      	cmp	r3, #0
 800353e:	d001      	beq.n	8003544 <HAL_ADC_MspInit+0xd8>
      Error_Handler();
 8003540:	f002 f890 	bl	8005664 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8003544:	4b18      	ldr	r3, [pc, #96]	@ (80035a8 <HAL_ADC_MspInit+0x13c>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	3301      	adds	r3, #1
 800354a:	4a17      	ldr	r2, [pc, #92]	@ (80035a8 <HAL_ADC_MspInit+0x13c>)
 800354c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800354e:	4b16      	ldr	r3, [pc, #88]	@ (80035a8 <HAL_ADC_MspInit+0x13c>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	2b01      	cmp	r3, #1
 8003554:	d10b      	bne.n	800356e <HAL_ADC_MspInit+0x102>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8003556:	4b15      	ldr	r3, [pc, #84]	@ (80035ac <HAL_ADC_MspInit+0x140>)
 8003558:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800355a:	4a14      	ldr	r2, [pc, #80]	@ (80035ac <HAL_ADC_MspInit+0x140>)
 800355c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003560:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003562:	4b12      	ldr	r3, [pc, #72]	@ (80035ac <HAL_ADC_MspInit+0x140>)
 8003564:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003566:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800356a:	60fb      	str	r3, [r7, #12]
 800356c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800356e:	4b0f      	ldr	r3, [pc, #60]	@ (80035ac <HAL_ADC_MspInit+0x140>)
 8003570:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003572:	4a0e      	ldr	r2, [pc, #56]	@ (80035ac <HAL_ADC_MspInit+0x140>)
 8003574:	f043 0301 	orr.w	r3, r3, #1
 8003578:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800357a:	4b0c      	ldr	r3, [pc, #48]	@ (80035ac <HAL_ADC_MspInit+0x140>)
 800357c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800357e:	f003 0301 	and.w	r3, r3, #1
 8003582:	60bb      	str	r3, [r7, #8]
 8003584:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = Current_SensorA1_Pin;
 8003586:	2302      	movs	r3, #2
 8003588:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800358a:	2303      	movs	r3, #3
 800358c:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800358e:	2300      	movs	r3, #0
 8003590:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(Current_SensorA1_GPIO_Port, &GPIO_InitStruct);
 8003592:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8003596:	4619      	mov	r1, r3
 8003598:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800359c:	f004 fefc 	bl	8008398 <HAL_GPIO_Init>
}
 80035a0:	bf00      	nop
 80035a2:	3780      	adds	r7, #128	@ 0x80
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bd80      	pop	{r7, pc}
 80035a8:	20000368 	.word	0x20000368
 80035ac:	40021000 	.word	0x40021000
 80035b0:	50000100 	.word	0x50000100

080035b4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b082      	sub	sp, #8
 80035b8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80035ba:	4b12      	ldr	r3, [pc, #72]	@ (8003604 <MX_DMA_Init+0x50>)
 80035bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80035be:	4a11      	ldr	r2, [pc, #68]	@ (8003604 <MX_DMA_Init+0x50>)
 80035c0:	f043 0304 	orr.w	r3, r3, #4
 80035c4:	6493      	str	r3, [r2, #72]	@ 0x48
 80035c6:	4b0f      	ldr	r3, [pc, #60]	@ (8003604 <MX_DMA_Init+0x50>)
 80035c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80035ca:	f003 0304 	and.w	r3, r3, #4
 80035ce:	607b      	str	r3, [r7, #4]
 80035d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80035d2:	4b0c      	ldr	r3, [pc, #48]	@ (8003604 <MX_DMA_Init+0x50>)
 80035d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80035d6:	4a0b      	ldr	r2, [pc, #44]	@ (8003604 <MX_DMA_Init+0x50>)
 80035d8:	f043 0301 	orr.w	r3, r3, #1
 80035dc:	6493      	str	r3, [r2, #72]	@ 0x48
 80035de:	4b09      	ldr	r3, [pc, #36]	@ (8003604 <MX_DMA_Init+0x50>)
 80035e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80035e2:	f003 0301 	and.w	r3, r3, #1
 80035e6:	603b      	str	r3, [r7, #0]
 80035e8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80035ea:	2200      	movs	r2, #0
 80035ec:	2100      	movs	r1, #0
 80035ee:	200b      	movs	r0, #11
 80035f0:	f004 fb5f 	bl	8007cb2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80035f4:	200b      	movs	r0, #11
 80035f6:	f004 fb76 	bl	8007ce6 <HAL_NVIC_EnableIRQ>

}
 80035fa:	bf00      	nop
 80035fc:	3708      	adds	r7, #8
 80035fe:	46bd      	mov	sp, r7
 8003600:	bd80      	pop	{r7, pc}
 8003602:	bf00      	nop
 8003604:	40021000 	.word	0x40021000

08003608 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b08a      	sub	sp, #40	@ 0x28
 800360c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800360e:	f107 0314 	add.w	r3, r7, #20
 8003612:	2200      	movs	r2, #0
 8003614:	601a      	str	r2, [r3, #0]
 8003616:	605a      	str	r2, [r3, #4]
 8003618:	609a      	str	r2, [r3, #8]
 800361a:	60da      	str	r2, [r3, #12]
 800361c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800361e:	4b54      	ldr	r3, [pc, #336]	@ (8003770 <MX_GPIO_Init+0x168>)
 8003620:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003622:	4a53      	ldr	r2, [pc, #332]	@ (8003770 <MX_GPIO_Init+0x168>)
 8003624:	f043 0304 	orr.w	r3, r3, #4
 8003628:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800362a:	4b51      	ldr	r3, [pc, #324]	@ (8003770 <MX_GPIO_Init+0x168>)
 800362c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800362e:	f003 0304 	and.w	r3, r3, #4
 8003632:	613b      	str	r3, [r7, #16]
 8003634:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003636:	4b4e      	ldr	r3, [pc, #312]	@ (8003770 <MX_GPIO_Init+0x168>)
 8003638:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800363a:	4a4d      	ldr	r2, [pc, #308]	@ (8003770 <MX_GPIO_Init+0x168>)
 800363c:	f043 0320 	orr.w	r3, r3, #32
 8003640:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003642:	4b4b      	ldr	r3, [pc, #300]	@ (8003770 <MX_GPIO_Init+0x168>)
 8003644:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003646:	f003 0320 	and.w	r3, r3, #32
 800364a:	60fb      	str	r3, [r7, #12]
 800364c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800364e:	4b48      	ldr	r3, [pc, #288]	@ (8003770 <MX_GPIO_Init+0x168>)
 8003650:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003652:	4a47      	ldr	r2, [pc, #284]	@ (8003770 <MX_GPIO_Init+0x168>)
 8003654:	f043 0301 	orr.w	r3, r3, #1
 8003658:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800365a:	4b45      	ldr	r3, [pc, #276]	@ (8003770 <MX_GPIO_Init+0x168>)
 800365c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800365e:	f003 0301 	and.w	r3, r3, #1
 8003662:	60bb      	str	r3, [r7, #8]
 8003664:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003666:	4b42      	ldr	r3, [pc, #264]	@ (8003770 <MX_GPIO_Init+0x168>)
 8003668:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800366a:	4a41      	ldr	r2, [pc, #260]	@ (8003770 <MX_GPIO_Init+0x168>)
 800366c:	f043 0302 	orr.w	r3, r3, #2
 8003670:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003672:	4b3f      	ldr	r3, [pc, #252]	@ (8003770 <MX_GPIO_Init+0x168>)
 8003674:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003676:	f003 0302 	and.w	r3, r3, #2
 800367a:	607b      	str	r3, [r7, #4]
 800367c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIR_MD20A_24V_GPIO_Port, DIR_MD20A_24V_Pin, GPIO_PIN_RESET);
 800367e:	2200      	movs	r2, #0
 8003680:	2102      	movs	r1, #2
 8003682:	483c      	ldr	r0, [pc, #240]	@ (8003774 <MX_GPIO_Init+0x16c>)
 8003684:	f005 f80a 	bl	800869c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIR_MD20A_18V_GPIO_Port, DIR_MD20A_18V_Pin, GPIO_PIN_RESET);
 8003688:	2200      	movs	r2, #0
 800368a:	2140      	movs	r1, #64	@ 0x40
 800368c:	483a      	ldr	r0, [pc, #232]	@ (8003778 <MX_GPIO_Init+0x170>)
 800368e:	f005 f805 	bl	800869c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PS2_Attention_GPIO_Port, PS2_Attention_Pin, GPIO_PIN_SET);
 8003692:	2201      	movs	r2, #1
 8003694:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003698:	4837      	ldr	r0, [pc, #220]	@ (8003778 <MX_GPIO_Init+0x170>)
 800369a:	f004 ffff 	bl	800869c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DIR_MD20A_24V_Pin */
  GPIO_InitStruct.Pin = DIR_MD20A_24V_Pin;
 800369e:	2302      	movs	r3, #2
 80036a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80036a2:	2301      	movs	r3, #1
 80036a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036a6:	2300      	movs	r3, #0
 80036a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036aa:	2300      	movs	r3, #0
 80036ac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DIR_MD20A_24V_GPIO_Port, &GPIO_InitStruct);
 80036ae:	f107 0314 	add.w	r3, r7, #20
 80036b2:	4619      	mov	r1, r3
 80036b4:	482f      	ldr	r0, [pc, #188]	@ (8003774 <MX_GPIO_Init+0x16c>)
 80036b6:	f004 fe6f 	bl	8008398 <HAL_GPIO_Init>

  /*Configure GPIO pins : Limit_Switch_pen_2_Pin Limit_Switch_Prismatic1_Pin Limit_Switch_pen_1_Pin */
  GPIO_InitStruct.Pin = Limit_Switch_pen_2_Pin|Limit_Switch_Prismatic1_Pin|Limit_Switch_pen_1_Pin;
 80036ba:	f44f 438c 	mov.w	r3, #17920	@ 0x4600
 80036be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80036c0:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80036c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036c6:	2300      	movs	r3, #0
 80036c8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036ca:	f107 0314 	add.w	r3, r7, #20
 80036ce:	4619      	mov	r1, r3
 80036d0:	4828      	ldr	r0, [pc, #160]	@ (8003774 <MX_GPIO_Init+0x16c>)
 80036d2:	f004 fe61 	bl	8008398 <HAL_GPIO_Init>

  /*Configure GPIO pins : Proximity_Left_Pin Limit_Switch_Prismatic2_Pin */
  GPIO_InitStruct.Pin = Proximity_Left_Pin|Limit_Switch_Prismatic2_Pin;
 80036d6:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 80036da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80036dc:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80036e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036e2:	2300      	movs	r3, #0
 80036e4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036e6:	f107 0314 	add.w	r3, r7, #20
 80036ea:	4619      	mov	r1, r3
 80036ec:	4821      	ldr	r0, [pc, #132]	@ (8003774 <MX_GPIO_Init+0x16c>)
 80036ee:	f004 fe53 	bl	8008398 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIR_MD20A_18V_Pin PS2_Attention_Pin */
  GPIO_InitStruct.Pin = DIR_MD20A_18V_Pin|PS2_Attention_Pin;
 80036f2:	f44f 6388 	mov.w	r3, #1088	@ 0x440
 80036f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80036f8:	2301      	movs	r3, #1
 80036fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036fc:	2300      	movs	r3, #0
 80036fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003700:	2300      	movs	r3, #0
 8003702:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003704:	f107 0314 	add.w	r3, r7, #20
 8003708:	4619      	mov	r1, r3
 800370a:	481b      	ldr	r0, [pc, #108]	@ (8003778 <MX_GPIO_Init+0x170>)
 800370c:	f004 fe44 	bl	8008398 <HAL_GPIO_Init>

  /*Configure GPIO pin : Emergency_Pin */
  GPIO_InitStruct.Pin = Emergency_Pin;
 8003710:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003714:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003716:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800371a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800371c:	2300      	movs	r3, #0
 800371e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Emergency_GPIO_Port, &GPIO_InitStruct);
 8003720:	f107 0314 	add.w	r3, r7, #20
 8003724:	4619      	mov	r1, r3
 8003726:	4814      	ldr	r0, [pc, #80]	@ (8003778 <MX_GPIO_Init+0x170>)
 8003728:	f004 fe36 	bl	8008398 <HAL_GPIO_Init>

  /*Configure GPIO pin : Proximity_sensor_Pin */
  GPIO_InitStruct.Pin = Proximity_sensor_Pin;
 800372c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003730:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003732:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8003736:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003738:	2300      	movs	r3, #0
 800373a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Proximity_sensor_GPIO_Port, &GPIO_InitStruct);
 800373c:	f107 0314 	add.w	r3, r7, #20
 8003740:	4619      	mov	r1, r3
 8003742:	480d      	ldr	r0, [pc, #52]	@ (8003778 <MX_GPIO_Init+0x170>)
 8003744:	f004 fe28 	bl	8008398 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8003748:	2200      	movs	r2, #0
 800374a:	2100      	movs	r1, #0
 800374c:	2017      	movs	r0, #23
 800374e:	f004 fab0 	bl	8007cb2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003752:	2017      	movs	r0, #23
 8003754:	f004 fac7 	bl	8007ce6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8003758:	2200      	movs	r2, #0
 800375a:	2100      	movs	r1, #0
 800375c:	2028      	movs	r0, #40	@ 0x28
 800375e:	f004 faa8 	bl	8007cb2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003762:	2028      	movs	r0, #40	@ 0x28
 8003764:	f004 fabf 	bl	8007ce6 <HAL_NVIC_EnableIRQ>

}
 8003768:	bf00      	nop
 800376a:	3728      	adds	r7, #40	@ 0x28
 800376c:	46bd      	mov	sp, r7
 800376e:	bd80      	pop	{r7, pc}
 8003770:	40021000 	.word	0x40021000
 8003774:	48000400 	.word	0x48000400
 8003778:	48000800 	.word	0x48000800
 800377c:	00000000 	.word	0x00000000

08003780 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8003780:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003784:	ed2d 8b04 	vpush	{d8-d9}
 8003788:	b0a4      	sub	sp, #144	@ 0x90
 800378a:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800378c:	f002 fe87 	bl	800649e <HAL_Init>

	/* USER CODE BEGIN Init */
	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8003790:	f001 fc0a 	bl	8004fa8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8003794:	f7ff ff38 	bl	8003608 <MX_GPIO_Init>
	MX_DMA_Init();
 8003798:	f7ff ff0c 	bl	80035b4 <MX_DMA_Init>
	MX_TIM3_Init();
 800379c:	f002 f968 	bl	8005a70 <MX_TIM3_Init>
	MX_ADC1_Init();
 80037a0:	f7ff fd86 	bl	80032b0 <MX_ADC1_Init>
	MX_TIM1_Init();
 80037a4:	f002 f8c2 	bl	800592c <MX_TIM1_Init>
	MX_TIM2_Init();
 80037a8:	f002 f914 	bl	80059d4 <MX_TIM2_Init>
	MX_TIM4_Init();
 80037ac:	f002 f9b6 	bl	8005b1c <MX_TIM4_Init>
	MX_TIM20_Init();
 80037b0:	f002 fb3a 	bl	8005e28 <MX_TIM20_Init>
	MX_TIM8_Init();
 80037b4:	f002 fa08 	bl	8005bc8 <MX_TIM8_Init>
	MX_TIM16_Init();
 80037b8:	f002 fab6 	bl	8005d28 <MX_TIM16_Init>
	MX_USART2_UART_Init();
 80037bc:	f002 fd6c 	bl	8006298 <MX_USART2_UART_Init>
	MX_ADC2_Init();
 80037c0:	f7ff fdee 	bl	80033a0 <MX_ADC2_Init>
	MX_SPI1_Init();
 80037c4:	f001 ff54 	bl	8005670 <MX_SPI1_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start(&htim20);
 80037c8:	48a7      	ldr	r0, [pc, #668]	@ (8003a68 <main+0x2e8>)
 80037ca:	f006 fc59 	bl	800a080 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim8);
 80037ce:	48a7      	ldr	r0, [pc, #668]	@ (8003a6c <main+0x2ec>)
 80037d0:	f006 fc56 	bl	800a080 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 80037d4:	210c      	movs	r1, #12
 80037d6:	48a5      	ldr	r0, [pc, #660]	@ (8003a6c <main+0x2ec>)
 80037d8:	f006 fe16 	bl	800a408 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim20, TIM_CHANNEL_1);
 80037dc:	2100      	movs	r1, #0
 80037de:	48a2      	ldr	r0, [pc, #648]	@ (8003a68 <main+0x2e8>)
 80037e0:	f006 fe12 	bl	800a408 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim20, TIM_CHANNEL_3);
 80037e4:	2108      	movs	r1, #8
 80037e6:	48a0      	ldr	r0, [pc, #640]	@ (8003a68 <main+0x2e8>)
 80037e8:	f006 fe0e 	bl	800a408 <HAL_TIM_PWM_Start>
	Encoder_Init(&encoder1, &htim4);
 80037ec:	49a0      	ldr	r1, [pc, #640]	@ (8003a70 <main+0x2f0>)
 80037ee:	48a1      	ldr	r0, [pc, #644]	@ (8003a74 <main+0x2f4>)
 80037f0:	f7fe fae0 	bl	8001db4 <Encoder_Init>
	Encoder_Init(&encoder2, &htim3);
 80037f4:	49a0      	ldr	r1, [pc, #640]	@ (8003a78 <main+0x2f8>)
 80037f6:	48a1      	ldr	r0, [pc, #644]	@ (8003a7c <main+0x2fc>)
 80037f8:	f7fe fadc 	bl	8001db4 <Encoder_Init>
	HAL_ADC_Start(&hadc1);
 80037fc:	48a0      	ldr	r0, [pc, #640]	@ (8003a80 <main+0x300>)
 80037fe:	f003 fa87 	bl	8006d10 <HAL_ADC_Start>
	HAL_TIM_Base_Start_IT(&htim2);
 8003802:	48a0      	ldr	r0, [pc, #640]	@ (8003a84 <main+0x304>)
 8003804:	f006 fcac 	bl	800a160 <HAL_TIM_Base_Start_IT>

	uint64_t lastTick = 0;
 8003808:	f04f 0200 	mov.w	r2, #0
 800380c:	f04f 0300 	mov.w	r3, #0
 8003810:	e9c7 2322 	strd	r2, r3, [r7, #136]	@ 0x88

	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8003814:	213c      	movs	r1, #60	@ 0x3c
 8003816:	4898      	ldr	r0, [pc, #608]	@ (8003a78 <main+0x2f8>)
 8003818:	f007 f8b2 	bl	800a980 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 800381c:	213c      	movs	r1, #60	@ 0x3c
 800381e:	4894      	ldr	r0, [pc, #592]	@ (8003a70 <main+0x2f0>)
 8003820:	f007 f8ae 	bl	800a980 <HAL_TIM_Encoder_Start>

	hmodbus.huart = &huart2;
 8003824:	4b98      	ldr	r3, [pc, #608]	@ (8003a88 <main+0x308>)
 8003826:	4a99      	ldr	r2, [pc, #612]	@ (8003a8c <main+0x30c>)
 8003828:	60da      	str	r2, [r3, #12]
	hmodbus.htim = &htim16;
 800382a:	4b97      	ldr	r3, [pc, #604]	@ (8003a88 <main+0x308>)
 800382c:	4a98      	ldr	r2, [pc, #608]	@ (8003a90 <main+0x310>)
 800382e:	611a      	str	r2, [r3, #16]
	hmodbus.slaveAddress = 0x15;
 8003830:	4b95      	ldr	r3, [pc, #596]	@ (8003a88 <main+0x308>)
 8003832:	2215      	movs	r2, #21
 8003834:	701a      	strb	r2, [r3, #0]
	hmodbus.RegisterSize = 200;
 8003836:	4b94      	ldr	r3, [pc, #592]	@ (8003a88 <main+0x308>)
 8003838:	22c8      	movs	r2, #200	@ 0xc8
 800383a:	609a      	str	r2, [r3, #8]
	Modbus_init(&hmodbus, registerFrame);
 800383c:	4995      	ldr	r1, [pc, #596]	@ (8003a94 <main+0x314>)
 800383e:	4892      	ldr	r0, [pc, #584]	@ (8003a88 <main+0x308>)
 8003840:	f7fe ff86 	bl	8002750 <Modbus_init>

	Kalman_Init(&kf_pris);
 8003844:	4894      	ldr	r0, [pc, #592]	@ (8003a98 <main+0x318>)
 8003846:	f7fe fcd1 	bl	80021ec <Kalman_Init>

	kf_pris.A_data[0] = 1;
 800384a:	4b93      	ldr	r3, [pc, #588]	@ (8003a98 <main+0x318>)
 800384c:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8003850:	671a      	str	r2, [r3, #112]	@ 0x70
	kf_pris.A_data[1] = 0.0008395;
 8003852:	4b91      	ldr	r3, [pc, #580]	@ (8003a98 <main+0x318>)
 8003854:	4a91      	ldr	r2, [pc, #580]	@ (8003a9c <main+0x31c>)
 8003856:	675a      	str	r2, [r3, #116]	@ 0x74
	kf_pris.A_data[2] = -4.198e-07;
 8003858:	4b8f      	ldr	r3, [pc, #572]	@ (8003a98 <main+0x318>)
 800385a:	4a91      	ldr	r2, [pc, #580]	@ (8003aa0 <main+0x320>)
 800385c:	679a      	str	r2, [r3, #120]	@ 0x78
	kf_pris.A_data[3] = 1.282e-05;
 800385e:	4b8e      	ldr	r3, [pc, #568]	@ (8003a98 <main+0x318>)
 8003860:	4a90      	ldr	r2, [pc, #576]	@ (8003aa4 <main+0x324>)
 8003862:	67da      	str	r2, [r3, #124]	@ 0x7c
	kf_pris.A_data[4] = 0;
 8003864:	4b8c      	ldr	r3, [pc, #560]	@ (8003a98 <main+0x318>)
 8003866:	f04f 0200 	mov.w	r2, #0
 800386a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
	kf_pris.A_data[5] = 0.6791;
 800386e:	4b8a      	ldr	r3, [pc, #552]	@ (8003a98 <main+0x318>)
 8003870:	4a8d      	ldr	r2, [pc, #564]	@ (8003aa8 <main+0x328>)
 8003872:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
	kf_pris.A_data[6] = -0.0008395;
 8003876:	4b88      	ldr	r3, [pc, #544]	@ (8003a98 <main+0x318>)
 8003878:	4a8c      	ldr	r2, [pc, #560]	@ (8003aac <main+0x32c>)
 800387a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
	kf_pris.A_data[7] = 0.02564;
 800387e:	4b86      	ldr	r3, [pc, #536]	@ (8003a98 <main+0x318>)
 8003880:	4a8b      	ldr	r2, [pc, #556]	@ (8003ab0 <main+0x330>)
 8003882:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
	kf_pris.A_data[8] = 0;
 8003886:	4b84      	ldr	r3, [pc, #528]	@ (8003a98 <main+0x318>)
 8003888:	f04f 0200 	mov.w	r2, #0
 800388c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
	kf_pris.A_data[9] = 0;
 8003890:	4b81      	ldr	r3, [pc, #516]	@ (8003a98 <main+0x318>)
 8003892:	f04f 0200 	mov.w	r2, #0
 8003896:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
	kf_pris.A_data[10] = 1;
 800389a:	4b7f      	ldr	r3, [pc, #508]	@ (8003a98 <main+0x318>)
 800389c:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80038a0:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
	kf_pris.A_data[11] = 0;
 80038a4:	4b7c      	ldr	r3, [pc, #496]	@ (8003a98 <main+0x318>)
 80038a6:	f04f 0200 	mov.w	r2, #0
 80038aa:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
	kf_pris.A_data[12] = 0;
 80038ae:	4b7a      	ldr	r3, [pc, #488]	@ (8003a98 <main+0x318>)
 80038b0:	f04f 0200 	mov.w	r2, #0
 80038b4:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
	kf_pris.A_data[13] = -0.04203;
 80038b8:	4b77      	ldr	r3, [pc, #476]	@ (8003a98 <main+0x318>)
 80038ba:	4a7e      	ldr	r2, [pc, #504]	@ (8003ab4 <main+0x334>)
 80038bc:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
	kf_pris.A_data[14] = 2.101e-05;
 80038c0:	4b75      	ldr	r3, [pc, #468]	@ (8003a98 <main+0x318>)
 80038c2:	4a7d      	ldr	r2, [pc, #500]	@ (8003ab8 <main+0x338>)
 80038c4:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
	kf_pris.A_data[15] = -0.09565;
 80038c8:	4b73      	ldr	r3, [pc, #460]	@ (8003a98 <main+0x318>)
 80038ca:	4a7c      	ldr	r2, [pc, #496]	@ (8003abc <main+0x33c>)
 80038cc:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac

	kf_pris.B_data[0] = 4.006e-06;
 80038d0:	4b71      	ldr	r3, [pc, #452]	@ (8003a98 <main+0x318>)
 80038d2:	4a7b      	ldr	r2, [pc, #492]	@ (8003ac0 <main+0x340>)
 80038d4:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
	kf_pris.B_data[1] = 0.008011;
 80038d8:	4b6f      	ldr	r3, [pc, #444]	@ (8003a98 <main+0x318>)
 80038da:	4a7a      	ldr	r2, [pc, #488]	@ (8003ac4 <main+0x344>)
 80038dc:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
	kf_pris.B_data[2] = 0;
 80038e0:	4b6d      	ldr	r3, [pc, #436]	@ (8003a98 <main+0x318>)
 80038e2:	f04f 0200 	mov.w	r2, #0
 80038e6:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
	kf_pris.B_data[3] = 0.2826;
 80038ea:	4b6b      	ldr	r3, [pc, #428]	@ (8003a98 <main+0x318>)
 80038ec:	4a76      	ldr	r2, [pc, #472]	@ (8003ac8 <main+0x348>)
 80038ee:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc

	// Identity H
	for (int i = 0; i < KALMAN_MEAS_DIM; i++) {
 80038f2:	2300      	movs	r3, #0
 80038f4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80038f8:	e027      	b.n	800394a <main+0x1ca>
		for (int j = 0; j < KALMAN_STATE_DIM; j++) {
 80038fa:	2300      	movs	r3, #0
 80038fc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003900:	e01a      	b.n	8003938 <main+0x1b8>
			kf_pris.H_data[i * KALMAN_STATE_DIM + j] = (i == j) ? 1.0f : 0.0f;
 8003902:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8003906:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800390a:	429a      	cmp	r2, r3
 800390c:	d102      	bne.n	8003914 <main+0x194>
 800390e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8003912:	e001      	b.n	8003918 <main+0x198>
 8003914:	f04f 0200 	mov.w	r2, #0
 8003918:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800391c:	0099      	lsls	r1, r3, #2
 800391e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003922:	440b      	add	r3, r1
 8003924:	495c      	ldr	r1, [pc, #368]	@ (8003a98 <main+0x318>)
 8003926:	333c      	adds	r3, #60	@ 0x3c
 8003928:	009b      	lsls	r3, r3, #2
 800392a:	440b      	add	r3, r1
 800392c:	601a      	str	r2, [r3, #0]
		for (int j = 0; j < KALMAN_STATE_DIM; j++) {
 800392e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003932:	3301      	adds	r3, #1
 8003934:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003938:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800393c:	2b03      	cmp	r3, #3
 800393e:	dde0      	ble.n	8003902 <main+0x182>
	for (int i = 0; i < KALMAN_MEAS_DIM; i++) {
 8003940:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003944:	3301      	adds	r3, #1
 8003946:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800394a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800394e:	2b03      	cmp	r3, #3
 8003950:	ddd3      	ble.n	80038fa <main+0x17a>
		}
	}

	// Prismatic
	kf_pris.x_data[0] = 0;
 8003952:	4b51      	ldr	r3, [pc, #324]	@ (8003a98 <main+0x318>)
 8003954:	f04f 0200 	mov.w	r2, #0
 8003958:	f8c3 2234 	str.w	r2, [r3, #564]	@ 0x234
	kf_pris.x_data[1] = 0;
 800395c:	4b4e      	ldr	r3, [pc, #312]	@ (8003a98 <main+0x318>)
 800395e:	f04f 0200 	mov.w	r2, #0
 8003962:	f8c3 2238 	str.w	r2, [r3, #568]	@ 0x238
	kf_pris.x_data[2] = 0;
 8003966:	4b4c      	ldr	r3, [pc, #304]	@ (8003a98 <main+0x318>)
 8003968:	f04f 0200 	mov.w	r2, #0
 800396c:	f8c3 223c 	str.w	r2, [r3, #572]	@ 0x23c
	kf_pris.x_data[3] = 0;
 8003970:	4b49      	ldr	r3, [pc, #292]	@ (8003a98 <main+0x318>)
 8003972:	f04f 0200 	mov.w	r2, #0
 8003976:	f8c3 2240 	str.w	r2, [r3, #576]	@ 0x240

	Kalman_SetMeasurementNoise(&kf_pris, 0.01f);
 800397a:	ed9f 0a54 	vldr	s0, [pc, #336]	@ 8003acc <main+0x34c>
 800397e:	4846      	ldr	r0, [pc, #280]	@ (8003a98 <main+0x318>)
 8003980:	f7fe fd06 	bl	8002390 <Kalman_SetMeasurementNoise>
	Kalman_SetProcessNoise(&kf_pris, 0.9f);
 8003984:	ed9f 0a52 	vldr	s0, [pc, #328]	@ 8003ad0 <main+0x350>
 8003988:	4843      	ldr	r0, [pc, #268]	@ (8003a98 <main+0x318>)
 800398a:	f7fe fcd1 	bl	8002330 <Kalman_SetProcessNoise>

	Kalman_Init(&kf_rev);
 800398e:	4851      	ldr	r0, [pc, #324]	@ (8003ad4 <main+0x354>)
 8003990:	f7fe fc2c 	bl	80021ec <Kalman_Init>

	kf_rev.A_data[0] = 1;
 8003994:	4b4f      	ldr	r3, [pc, #316]	@ (8003ad4 <main+0x354>)
 8003996:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800399a:	671a      	str	r2, [r3, #112]	@ 0x70
	kf_rev.A_data[1] = 0.0009998;
 800399c:	4b4d      	ldr	r3, [pc, #308]	@ (8003ad4 <main+0x354>)
 800399e:	4a4e      	ldr	r2, [pc, #312]	@ (8003ad8 <main+0x358>)
 80039a0:	675a      	str	r2, [r3, #116]	@ 0x74
	kf_rev.A_data[2] = -2.659e-06;
 80039a2:	4b4c      	ldr	r3, [pc, #304]	@ (8003ad4 <main+0x354>)
 80039a4:	4a4d      	ldr	r2, [pc, #308]	@ (8003adc <main+0x35c>)
 80039a6:	679a      	str	r2, [r3, #120]	@ 0x78
	kf_rev.A_data[3] = 8.108e-08;
 80039a8:	4b4a      	ldr	r3, [pc, #296]	@ (8003ad4 <main+0x354>)
 80039aa:	4a4d      	ldr	r2, [pc, #308]	@ (8003ae0 <main+0x360>)
 80039ac:	67da      	str	r2, [r3, #124]	@ 0x7c
	kf_rev.A_data[4] = 0;
 80039ae:	4b49      	ldr	r3, [pc, #292]	@ (8003ad4 <main+0x354>)
 80039b0:	f04f 0200 	mov.w	r2, #0
 80039b4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
	kf_rev.A_data[5] = 0.9996;
 80039b8:	4b46      	ldr	r3, [pc, #280]	@ (8003ad4 <main+0x354>)
 80039ba:	4a4a      	ldr	r2, [pc, #296]	@ (8003ae4 <main+0x364>)
 80039bc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
	kf_rev.A_data[6] = -0.005318;
 80039c0:	4b44      	ldr	r3, [pc, #272]	@ (8003ad4 <main+0x354>)
 80039c2:	4a49      	ldr	r2, [pc, #292]	@ (8003ae8 <main+0x368>)
 80039c4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
	kf_rev.A_data[7] = 0.0001622;
 80039c8:	4b42      	ldr	r3, [pc, #264]	@ (8003ad4 <main+0x354>)
 80039ca:	4a48      	ldr	r2, [pc, #288]	@ (8003aec <main+0x36c>)
 80039cc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
	kf_rev.A_data[8] = 0;
 80039d0:	4b40      	ldr	r3, [pc, #256]	@ (8003ad4 <main+0x354>)
 80039d2:	f04f 0200 	mov.w	r2, #0
 80039d6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
	kf_rev.A_data[9] = 0;
 80039da:	4b3e      	ldr	r3, [pc, #248]	@ (8003ad4 <main+0x354>)
 80039dc:	f04f 0200 	mov.w	r2, #0
 80039e0:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
	kf_rev.A_data[10] = 1;
 80039e4:	4b3b      	ldr	r3, [pc, #236]	@ (8003ad4 <main+0x354>)
 80039e6:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80039ea:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
	kf_rev.A_data[11] = 0;
 80039ee:	4b39      	ldr	r3, [pc, #228]	@ (8003ad4 <main+0x354>)
 80039f0:	f04f 0200 	mov.w	r2, #0
 80039f4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
	kf_rev.A_data[12] = 0;
 80039f8:	4b36      	ldr	r3, [pc, #216]	@ (8003ad4 <main+0x354>)
 80039fa:	f04f 0200 	mov.w	r2, #0
 80039fe:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
	kf_rev.A_data[13] = -2.746;
 8003a02:	4b34      	ldr	r3, [pc, #208]	@ (8003ad4 <main+0x354>)
 8003a04:	4a3a      	ldr	r2, [pc, #232]	@ (8003af0 <main+0x370>)
 8003a06:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
	kf_rev.A_data[14] = 0.007303;
 8003a0a:	4b32      	ldr	r3, [pc, #200]	@ (8003ad4 <main+0x354>)
 8003a0c:	4a39      	ldr	r2, [pc, #228]	@ (8003af4 <main+0x374>)
 8003a0e:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
	kf_rev.A_data[15] = 0.1354;
 8003a12:	4b30      	ldr	r3, [pc, #192]	@ (8003ad4 <main+0x354>)
 8003a14:	4a38      	ldr	r2, [pc, #224]	@ (8003af8 <main+0x378>)
 8003a16:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac

	kf_rev.B_data[0] = 1.203e-07;
 8003a1a:	4b2e      	ldr	r3, [pc, #184]	@ (8003ad4 <main+0x354>)
 8003a1c:	4a37      	ldr	r2, [pc, #220]	@ (8003afc <main+0x37c>)
 8003a1e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
	kf_rev.B_data[1] = 0.0002406;
 8003a22:	4b2c      	ldr	r3, [pc, #176]	@ (8003ad4 <main+0x354>)
 8003a24:	4a36      	ldr	r2, [pc, #216]	@ (8003b00 <main+0x380>)
 8003a26:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
	kf_rev.B_data[2] = 0;
 8003a2a:	4b2a      	ldr	r3, [pc, #168]	@ (8003ad4 <main+0x354>)
 8003a2c:	f04f 0200 	mov.w	r2, #0
 8003a30:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
	kf_rev.B_data[3] = 1.685;
 8003a34:	4b27      	ldr	r3, [pc, #156]	@ (8003ad4 <main+0x354>)
 8003a36:	4a33      	ldr	r2, [pc, #204]	@ (8003b04 <main+0x384>)
 8003a38:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc

	// Identity H
	for (int i = 0; i < 2; i++) {
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003a40:	e076      	b.n	8003b30 <main+0x3b0>
		for (int j = 0; j < 4; j++) {
 8003a42:	2300      	movs	r3, #0
 8003a44:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003a46:	e06d      	b.n	8003b24 <main+0x3a4>
			if (i == j) {
 8003a48:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8003a4a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003a4c:	429a      	cmp	r2, r3
 8003a4e:	d15b      	bne.n	8003b08 <main+0x388>
				kf_rev.H_data[i * 4 + j] = 1.0f;
 8003a50:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003a52:	009a      	lsls	r2, r3, #2
 8003a54:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003a56:	4413      	add	r3, r2
 8003a58:	4a1e      	ldr	r2, [pc, #120]	@ (8003ad4 <main+0x354>)
 8003a5a:	333c      	adds	r3, #60	@ 0x3c
 8003a5c:	009b      	lsls	r3, r3, #2
 8003a5e:	4413      	add	r3, r2
 8003a60:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8003a64:	601a      	str	r2, [r3, #0]
 8003a66:	e05a      	b.n	8003b1e <main+0x39e>
 8003a68:	20001c38 	.word	0x20001c38
 8003a6c:	20001aa0 	.word	0x20001aa0
 8003a70:	200019d4 	.word	0x200019d4
 8003a74:	2000036c 	.word	0x2000036c
 8003a78:	20001908 	.word	0x20001908
 8003a7c:	200003a0 	.word	0x200003a0
 8003a80:	20000290 	.word	0x20000290
 8003a84:	2000183c 	.word	0x2000183c
 8003a88:	200006f8 	.word	0x200006f8
 8003a8c:	20001d04 	.word	0x20001d04
 8003a90:	20001b6c 	.word	0x20001b6c
 8003a94:	20000bd0 	.word	0x20000bd0
 8003a98:	20000e8c 	.word	0x20000e8c
 8003a9c:	3a5c11e4 	.word	0x3a5c11e4
 8003aa0:	b4e160df 	.word	0xb4e160df
 8003aa4:	3757157b 	.word	0x3757157b
 8003aa8:	3f2dd97f 	.word	0x3f2dd97f
 8003aac:	ba5c11e4 	.word	0xba5c11e4
 8003ab0:	3cd20afa 	.word	0x3cd20afa
 8003ab4:	bd2c27a6 	.word	0xbd2c27a6
 8003ab8:	37b03ea2 	.word	0x37b03ea2
 8003abc:	bdc3e426 	.word	0xbdc3e426
 8003ac0:	36866b47 	.word	0x36866b47
 8003ac4:	3c034092 	.word	0x3c034092
 8003ac8:	3e90b0f2 	.word	0x3e90b0f2
 8003acc:	3c23d70a 	.word	0x3c23d70a
 8003ad0:	3f666666 	.word	0x3f666666
 8003ad4:	200011b0 	.word	0x200011b0
 8003ad8:	3a830bb9 	.word	0x3a830bb9
 8003adc:	b6327146 	.word	0xb6327146
 8003ae0:	33ae1e34 	.word	0x33ae1e34
 8003ae4:	3f7fe5c9 	.word	0x3f7fe5c9
 8003ae8:	bbae429e 	.word	0xbbae429e
 8003aec:	392a143b 	.word	0x392a143b
 8003af0:	c02fbe77 	.word	0xc02fbe77
 8003af4:	3bef4e01 	.word	0x3bef4e01
 8003af8:	3e0aa64c 	.word	0x3e0aa64c
 8003afc:	34012bd0 	.word	0x34012bd0
 8003b00:	397c4992 	.word	0x397c4992
 8003b04:	3fd7ae14 	.word	0x3fd7ae14
			} else {
				kf_rev.H_data[i * 4 + j] = 0.0f;
 8003b08:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003b0a:	009a      	lsls	r2, r3, #2
 8003b0c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003b0e:	4413      	add	r3, r2
 8003b10:	4ac1      	ldr	r2, [pc, #772]	@ (8003e18 <main+0x698>)
 8003b12:	333c      	adds	r3, #60	@ 0x3c
 8003b14:	009b      	lsls	r3, r3, #2
 8003b16:	4413      	add	r3, r2
 8003b18:	f04f 0200 	mov.w	r2, #0
 8003b1c:	601a      	str	r2, [r3, #0]
		for (int j = 0; j < 4; j++) {
 8003b1e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003b20:	3301      	adds	r3, #1
 8003b22:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003b24:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003b26:	2b03      	cmp	r3, #3
 8003b28:	dd8e      	ble.n	8003a48 <main+0x2c8>
	for (int i = 0; i < 2; i++) {
 8003b2a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003b2c:	3301      	adds	r3, #1
 8003b2e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003b30:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003b32:	2b01      	cmp	r3, #1
 8003b34:	dd85      	ble.n	8003a42 <main+0x2c2>
			}
		}
	}

	// Revolute
	kf_rev.x_data[0] = 0;
 8003b36:	4bb8      	ldr	r3, [pc, #736]	@ (8003e18 <main+0x698>)
 8003b38:	f04f 0200 	mov.w	r2, #0
 8003b3c:	f8c3 2234 	str.w	r2, [r3, #564]	@ 0x234
	kf_rev.x_data[1] = 0;
 8003b40:	4bb5      	ldr	r3, [pc, #724]	@ (8003e18 <main+0x698>)
 8003b42:	f04f 0200 	mov.w	r2, #0
 8003b46:	f8c3 2238 	str.w	r2, [r3, #568]	@ 0x238
	kf_rev.x_data[2] = 0;
 8003b4a:	4bb3      	ldr	r3, [pc, #716]	@ (8003e18 <main+0x698>)
 8003b4c:	f04f 0200 	mov.w	r2, #0
 8003b50:	f8c3 223c 	str.w	r2, [r3, #572]	@ 0x23c
	kf_rev.x_data[3] = 0;
 8003b54:	4bb0      	ldr	r3, [pc, #704]	@ (8003e18 <main+0x698>)
 8003b56:	f04f 0200 	mov.w	r2, #0
 8003b5a:	f8c3 2240 	str.w	r2, [r3, #576]	@ 0x240

	Kalman_SetMeasurementNoise(&kf_rev, 0.08f);
 8003b5e:	ed9f 0aaf 	vldr	s0, [pc, #700]	@ 8003e1c <main+0x69c>
 8003b62:	48ad      	ldr	r0, [pc, #692]	@ (8003e18 <main+0x698>)
 8003b64:	f7fe fc14 	bl	8002390 <Kalman_SetMeasurementNoise>
	Kalman_SetProcessNoise(&kf_rev, 0.12f);
 8003b68:	ed9f 0aad 	vldr	s0, [pc, #692]	@ 8003e20 <main+0x6a0>
 8003b6c:	48aa      	ldr	r0, [pc, #680]	@ (8003e18 <main+0x698>)
 8003b6e:	f7fe fbdf 	bl	8002330 <Kalman_SetProcessNoise>

	Pris_motor = create_prismatic_motor(2.29e-04, 4.82e-04, 8.75e-01, 1.77e-01,
 8003b72:	4cac      	ldr	r4, [pc, #688]	@ (8003e24 <main+0x6a4>)
 8003b74:	463b      	mov	r3, r7
 8003b76:	ed9f 6b8e 	vldr	d6, [pc, #568]	@ 8003db0 <main+0x630>
 8003b7a:	ed9f 5b8f 	vldr	d5, [pc, #572]	@ 8003db8 <main+0x638>
 8003b7e:	ed9f 4b90 	vldr	d4, [pc, #576]	@ 8003dc0 <main+0x640>
 8003b82:	ed9f 3b8f 	vldr	d3, [pc, #572]	@ 8003dc0 <main+0x640>
 8003b86:	ed9f 2b90 	vldr	d2, [pc, #576]	@ 8003dc8 <main+0x648>
 8003b8a:	ed9f 1b91 	vldr	d1, [pc, #580]	@ 8003dd0 <main+0x650>
 8003b8e:	ed9f 0b92 	vldr	d0, [pc, #584]	@ 8003dd8 <main+0x658>
 8003b92:	4618      	mov	r0, r3
 8003b94:	f7ff f8de 	bl	8002d54 <create_prismatic_motor>
 8003b98:	4625      	mov	r5, r4
 8003b9a:	463c      	mov	r4, r7
 8003b9c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b9e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003ba0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003ba2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003ba4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003ba6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003ba8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003bac:	e885 0003 	stmia.w	r5, {r0, r1}
			1.77e-01, 3.8719, 0.0016);
	Rev_motor = create_motor(1.88E-01, 6.91E-03, 7.36E-01, 1.63E+00,
 8003bb0:	4c9d      	ldr	r4, [pc, #628]	@ (8003e28 <main+0x6a8>)
 8003bb2:	463b      	mov	r3, r7
 8003bb4:	ed9f 6b8a 	vldr	d6, [pc, #552]	@ 8003de0 <main+0x660>
 8003bb8:	ed9f 5b8b 	vldr	d5, [pc, #556]	@ 8003de8 <main+0x668>
 8003bbc:	ed9f 4b8c 	vldr	d4, [pc, #560]	@ 8003df0 <main+0x670>
 8003bc0:	ed9f 3b8d 	vldr	d3, [pc, #564]	@ 8003df8 <main+0x678>
 8003bc4:	ed9f 2b8e 	vldr	d2, [pc, #568]	@ 8003e00 <main+0x680>
 8003bc8:	ed9f 1b8f 	vldr	d1, [pc, #572]	@ 8003e08 <main+0x688>
 8003bcc:	ed9f 0b90 	vldr	d0, [pc, #576]	@ 8003e10 <main+0x690>
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	f7ff f900 	bl	8002dd6 <create_motor>
 8003bd6:	4625      	mov	r5, r4
 8003bd8:	463c      	mov	r4, r7
 8003bda:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003bdc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003bde:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003be0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003be2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003be4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003be6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003bea:	e885 0003 	stmia.w	r5, {r0, r1}
			1.63E+00 * 7.36E-01, 5.13E-01, 3.37E-04);

	// Prismatic Position
	Pris_posi_PID.Kp = 0.3;
 8003bee:	4b8f      	ldr	r3, [pc, #572]	@ (8003e2c <main+0x6ac>)
 8003bf0:	4a8f      	ldr	r2, [pc, #572]	@ (8003e30 <main+0x6b0>)
 8003bf2:	619a      	str	r2, [r3, #24]
	Pris_posi_PID.Ki = 0.01;
 8003bf4:	4b8d      	ldr	r3, [pc, #564]	@ (8003e2c <main+0x6ac>)
 8003bf6:	4a8f      	ldr	r2, [pc, #572]	@ (8003e34 <main+0x6b4>)
 8003bf8:	61da      	str	r2, [r3, #28]
	Pris_posi_PID.Kd = 0.3;
 8003bfa:	4b8c      	ldr	r3, [pc, #560]	@ (8003e2c <main+0x6ac>)
 8003bfc:	4a8c      	ldr	r2, [pc, #560]	@ (8003e30 <main+0x6b0>)
 8003bfe:	621a      	str	r2, [r3, #32]
	arm_pid_init_f32(&Pris_posi_PID, 0);
 8003c00:	2100      	movs	r1, #0
 8003c02:	488a      	ldr	r0, [pc, #552]	@ (8003e2c <main+0x6ac>)
 8003c04:	f00b f808 	bl	800ec18 <arm_pid_init_f32>

	// Prismatic Velocity
	Pris_velo_PID.Kp = 0.08;
 8003c08:	4b8b      	ldr	r3, [pc, #556]	@ (8003e38 <main+0x6b8>)
 8003c0a:	4a8c      	ldr	r2, [pc, #560]	@ (8003e3c <main+0x6bc>)
 8003c0c:	619a      	str	r2, [r3, #24]
	Pris_velo_PID.Ki = 0.01;
 8003c0e:	4b8a      	ldr	r3, [pc, #552]	@ (8003e38 <main+0x6b8>)
 8003c10:	4a88      	ldr	r2, [pc, #544]	@ (8003e34 <main+0x6b4>)
 8003c12:	61da      	str	r2, [r3, #28]
	Pris_velo_PID.Kd = 0;
 8003c14:	4b88      	ldr	r3, [pc, #544]	@ (8003e38 <main+0x6b8>)
 8003c16:	f04f 0200 	mov.w	r2, #0
 8003c1a:	621a      	str	r2, [r3, #32]
	arm_pid_init_f32(&Pris_velo_PID, 0);
 8003c1c:	2100      	movs	r1, #0
 8003c1e:	4886      	ldr	r0, [pc, #536]	@ (8003e38 <main+0x6b8>)
 8003c20:	f00a fffa 	bl	800ec18 <arm_pid_init_f32>

	// Revolute Position
	Rev_posi_PID.Kp = 1.5;
 8003c24:	4b86      	ldr	r3, [pc, #536]	@ (8003e40 <main+0x6c0>)
 8003c26:	f04f 527f 	mov.w	r2, #1069547520	@ 0x3fc00000
 8003c2a:	619a      	str	r2, [r3, #24]
	Rev_posi_PID.Ki = 0.8;
 8003c2c:	4b84      	ldr	r3, [pc, #528]	@ (8003e40 <main+0x6c0>)
 8003c2e:	4a85      	ldr	r2, [pc, #532]	@ (8003e44 <main+0x6c4>)
 8003c30:	61da      	str	r2, [r3, #28]
	Rev_posi_PID.Kd = 0.4;
 8003c32:	4b83      	ldr	r3, [pc, #524]	@ (8003e40 <main+0x6c0>)
 8003c34:	4a84      	ldr	r2, [pc, #528]	@ (8003e48 <main+0x6c8>)
 8003c36:	621a      	str	r2, [r3, #32]
	arm_pid_init_f32(&Rev_posi_PID, 0);
 8003c38:	2100      	movs	r1, #0
 8003c3a:	4881      	ldr	r0, [pc, #516]	@ (8003e40 <main+0x6c0>)
 8003c3c:	f00a ffec 	bl	800ec18 <arm_pid_init_f32>

	// Revolute Velocity
	Rev_velo_PID.Kp = 3.0;
 8003c40:	4b82      	ldr	r3, [pc, #520]	@ (8003e4c <main+0x6cc>)
 8003c42:	4a83      	ldr	r2, [pc, #524]	@ (8003e50 <main+0x6d0>)
 8003c44:	619a      	str	r2, [r3, #24]
	Rev_velo_PID.Ki = 0.1;
 8003c46:	4b81      	ldr	r3, [pc, #516]	@ (8003e4c <main+0x6cc>)
 8003c48:	4a82      	ldr	r2, [pc, #520]	@ (8003e54 <main+0x6d4>)
 8003c4a:	61da      	str	r2, [r3, #28]
	Rev_velo_PID.Kd = 0;
 8003c4c:	4b7f      	ldr	r3, [pc, #508]	@ (8003e4c <main+0x6cc>)
 8003c4e:	f04f 0200 	mov.w	r2, #0
 8003c52:	621a      	str	r2, [r3, #32]
	arm_pid_init_f32(&Rev_velo_PID, 0);
 8003c54:	2100      	movs	r1, #0
 8003c56:	487d      	ldr	r0, [pc, #500]	@ (8003e4c <main+0x6cc>)
 8003c58:	f00a ffde 	bl	800ec18 <arm_pid_init_f32>
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		Emer_trick = HAL_GetTick();
 8003c5c:	f002 fc84 	bl	8006568 <HAL_GetTick>
 8003c60:	4603      	mov	r3, r0
 8003c62:	4a7d      	ldr	r2, [pc, #500]	@ (8003e58 <main+0x6d8>)
 8003c64:	6013      	str	r3, [r2, #0]
		uint64_t currentTick = HAL_GetTick();
 8003c66:	f002 fc7f 	bl	8006568 <HAL_GetTick>
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	469a      	mov	sl, r3
 8003c70:	4693      	mov	fp, r2
 8003c72:	e9c7 ab1a 	strd	sl, fp, [r7, #104]	@ 0x68
		float dt = (currentTick - lastTick) / 1000.0f;
 8003c76:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003c7a:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8003c7e:	ebb0 0802 	subs.w	r8, r0, r2
 8003c82:	eb61 0903 	sbc.w	r9, r1, r3
 8003c86:	4640      	mov	r0, r8
 8003c88:	4649      	mov	r1, r9
 8003c8a:	f7fd f869 	bl	8000d60 <__aeabi_ul2f>
 8003c8e:	ee06 0a90 	vmov	s13, r0
 8003c92:	ed9f 7a72 	vldr	s14, [pc, #456]	@ 8003e5c <main+0x6dc>
 8003c96:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c9a:	edc7 7a19 	vstr	s15, [r7, #100]	@ 0x64
		Modbus_Protocal_Worker();
 8003c9e:	f7fe fde5 	bl	800286c <Modbus_Protocal_Worker>
		modbus_heartbeat(&hmodbus);
 8003ca2:	486f      	ldr	r0, [pc, #444]	@ (8003e60 <main+0x6e0>)
 8003ca4:	f7fd fabe 	bl	8001224 <modbus_heartbeat>
		Base_Sysytem_status = modbus_Base_System_Status(&hmodbus);
 8003ca8:	486d      	ldr	r0, [pc, #436]	@ (8003e60 <main+0x6e0>)
 8003caa:	f7fd faca 	bl	8001242 <modbus_Base_System_Status>
 8003cae:	4603      	mov	r3, r0
 8003cb0:	461a      	mov	r2, r3
 8003cb2:	4b6c      	ldr	r3, [pc, #432]	@ (8003e64 <main+0x6e4>)
 8003cb4:	701a      	strb	r2, [r3, #0]
		PS2_ReadData();
 8003cb6:	f7fe f9c7 	bl	8002048 <PS2_ReadData>
		if (modbus_write_servo_up(&hmodbus) == 1) {
 8003cba:	4869      	ldr	r0, [pc, #420]	@ (8003e60 <main+0x6e0>)
 8003cbc:	f7fd fae3 	bl	8001286 <modbus_write_servo_up>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	2b01      	cmp	r3, #1
 8003cc4:	d102      	bne.n	8003ccc <main+0x54c>
			plotter = 1;
 8003cc6:	4b68      	ldr	r3, [pc, #416]	@ (8003e68 <main+0x6e8>)
 8003cc8:	2201      	movs	r2, #1
 8003cca:	601a      	str	r2, [r3, #0]
		}
		if (modbus_write_servo_down(&hmodbus) == 1) {
 8003ccc:	4864      	ldr	r0, [pc, #400]	@ (8003e60 <main+0x6e0>)
 8003cce:	f7fd faea 	bl	80012a6 <modbus_write_servo_down>
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	2b01      	cmp	r3, #1
 8003cd6:	d102      	bne.n	8003cde <main+0x55e>
			plotter = 2;
 8003cd8:	4b63      	ldr	r3, [pc, #396]	@ (8003e68 <main+0x6e8>)
 8003cda:	2202      	movs	r2, #2
 8003cdc:	601a      	str	r2, [r3, #0]
		}

		t_global = HAL_GetTick() / 1000.0f;
 8003cde:	f002 fc43 	bl	8006568 <HAL_GetTick>
 8003ce2:	ee07 0a90 	vmov	s15, r0
 8003ce6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003cea:	eddf 6a5c 	vldr	s13, [pc, #368]	@ 8003e5c <main+0x6dc>
 8003cee:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003cf2:	4b5e      	ldr	r3, [pc, #376]	@ (8003e6c <main+0x6ec>)
 8003cf4:	edc3 7a00 	vstr	s15, [r3]
//				__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4, 2000);
//				servo_state = 0;
//			}
//		}

		if (dt >= 0.001f) {
 8003cf8:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8003cfc:	ed9f 7a5c 	vldr	s14, [pc, #368]	@ 8003e70 <main+0x6f0>
 8003d00:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003d04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d08:	f2c1 8072 	blt.w	8004df0 <main+0x1670>

			HAL_ADC_Start(&hadc1);
 8003d0c:	4859      	ldr	r0, [pc, #356]	@ (8003e74 <main+0x6f4>)
 8003d0e:	f002 ffff 	bl	8006d10 <HAL_ADC_Start>
			HAL_ADC_Start(&hadc2);
 8003d12:	4859      	ldr	r0, [pc, #356]	@ (8003e78 <main+0x6f8>)
 8003d14:	f002 fffc 	bl	8006d10 <HAL_ADC_Start>
			adc_1 = HAL_ADC_GetValue(&hadc1);
 8003d18:	4856      	ldr	r0, [pc, #344]	@ (8003e74 <main+0x6f4>)
 8003d1a:	f003 f8dd 	bl	8006ed8 <HAL_ADC_GetValue>
 8003d1e:	4603      	mov	r3, r0
 8003d20:	b29a      	uxth	r2, r3
 8003d22:	4b56      	ldr	r3, [pc, #344]	@ (8003e7c <main+0x6fc>)
 8003d24:	801a      	strh	r2, [r3, #0]
			adc_2 = HAL_ADC_GetValue(&hadc2);
 8003d26:	4854      	ldr	r0, [pc, #336]	@ (8003e78 <main+0x6f8>)
 8003d28:	f003 f8d6 	bl	8006ed8 <HAL_ADC_GetValue>
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	b29a      	uxth	r2, r3
 8003d30:	4b53      	ldr	r3, [pc, #332]	@ (8003e80 <main+0x700>)
 8003d32:	801a      	strh	r2, [r3, #0]

			Encoder_Update(&encoder1, dt);
 8003d34:	ed97 0a19 	vldr	s0, [r7, #100]	@ 0x64
 8003d38:	4852      	ldr	r0, [pc, #328]	@ (8003e84 <main+0x704>)
 8003d3a:	f7fe f865 	bl	8001e08 <Encoder_Update>
			Encoder_Update(&encoder2, dt);
 8003d3e:	ed97 0a19 	vldr	s0, [r7, #100]	@ 0x64
 8003d42:	4851      	ldr	r0, [pc, #324]	@ (8003e88 <main+0x708>)
 8003d44:	f7fe f860 	bl	8001e08 <Encoder_Update>
			lastTick = currentTick;
 8003d48:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8003d4c:	e9c7 2322 	strd	r2, r3, [r7, #136]	@ 0x88
			QEIReadRaw3 = __HAL_TIM_GET_COUNTER(&htim3);
 8003d50:	4b4e      	ldr	r3, [pc, #312]	@ (8003e8c <main+0x70c>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d56:	4a4e      	ldr	r2, [pc, #312]	@ (8003e90 <main+0x710>)
 8003d58:	6013      	str	r3, [r2, #0]
			QEIReadRaw4 = __HAL_TIM_GET_COUNTER(&htim4);
 8003d5a:	4b4e      	ldr	r3, [pc, #312]	@ (8003e94 <main+0x714>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d60:	4a4d      	ldr	r2, [pc, #308]	@ (8003e98 <main+0x718>)
 8003d62:	6013      	str	r3, [r2, #0]

			p1 = Encoder_GetPosition_mm(&encoder1);
 8003d64:	4847      	ldr	r0, [pc, #284]	@ (8003e84 <main+0x704>)
 8003d66:	f7fe f941 	bl	8001fec <Encoder_GetPosition_mm>
 8003d6a:	eef0 7a40 	vmov.f32	s15, s0
 8003d6e:	4b4b      	ldr	r3, [pc, #300]	@ (8003e9c <main+0x71c>)
 8003d70:	edc3 7a00 	vstr	s15, [r3]
			v1 = Encoder_GetVelocity_mm(&encoder1);
 8003d74:	4843      	ldr	r0, [pc, #268]	@ (8003e84 <main+0x704>)
 8003d76:	f7fe f948 	bl	800200a <Encoder_GetVelocity_mm>
 8003d7a:	eef0 7a40 	vmov.f32	s15, s0
 8003d7e:	4b48      	ldr	r3, [pc, #288]	@ (8003ea0 <main+0x720>)
 8003d80:	edc3 7a00 	vstr	s15, [r3]
			a1 = Encoder_GetAcceleration_mm(&encoder1);
 8003d84:	483f      	ldr	r0, [pc, #252]	@ (8003e84 <main+0x704>)
 8003d86:	f7fe f94f 	bl	8002028 <Encoder_GetAcceleration_mm>
 8003d8a:	eef0 7a40 	vmov.f32	s15, s0
 8003d8e:	4b45      	ldr	r3, [pc, #276]	@ (8003ea4 <main+0x724>)
 8003d90:	edc3 7a00 	vstr	s15, [r3]

			p2 = Encoder_GetPosition(&encoder2);
 8003d94:	483c      	ldr	r0, [pc, #240]	@ (8003e88 <main+0x708>)
 8003d96:	f7fe f8ed 	bl	8001f74 <Encoder_GetPosition>
 8003d9a:	eef0 7a40 	vmov.f32	s15, s0
 8003d9e:	4b42      	ldr	r3, [pc, #264]	@ (8003ea8 <main+0x728>)
 8003da0:	edc3 7a00 	vstr	s15, [r3]
			v2 = Encoder_GetVelocity(&encoder2);
 8003da4:	4838      	ldr	r0, [pc, #224]	@ (8003e88 <main+0x708>)
 8003da6:	f7fe f8f4 	bl	8001f92 <Encoder_GetVelocity>
 8003daa:	eef0 7a40 	vmov.f32	s15, s0
 8003dae:	e07d      	b.n	8003eac <main+0x72c>
 8003db0:	eb1c432d 	.word	0xeb1c432d
 8003db4:	3f5a36e2 	.word	0x3f5a36e2
 8003db8:	b50b0f28 	.word	0xb50b0f28
 8003dbc:	400ef9a6 	.word	0x400ef9a6
 8003dc0:	9db22d0e 	.word	0x9db22d0e
 8003dc4:	3fc6a7ef 	.word	0x3fc6a7ef
 8003dc8:	00000000 	.word	0x00000000
 8003dcc:	3fec0000 	.word	0x3fec0000
 8003dd0:	3c968944 	.word	0x3c968944
 8003dd4:	3f3f969e 	.word	0x3f3f969e
 8003dd8:	05857aff 	.word	0x05857aff
 8003ddc:	3f2e03f7 	.word	0x3f2e03f7
 8003de0:	fa8f7db7 	.word	0xfa8f7db7
 8003de4:	3f3615eb 	.word	0x3f3615eb
 8003de8:	f9db22d1 	.word	0xf9db22d1
 8003dec:	3fe06a7e 	.word	0x3fe06a7e
 8003df0:	a7daa4fc 	.word	0xa7daa4fc
 8003df4:	3ff331e3 	.word	0x3ff331e3
 8003df8:	e147ae14 	.word	0xe147ae14
 8003dfc:	3ffa147a 	.word	0x3ffa147a
 8003e00:	df3b645a 	.word	0xdf3b645a
 8003e04:	3fe78d4f 	.word	0x3fe78d4f
 8003e08:	003eea21 	.word	0x003eea21
 8003e0c:	3f7c4da9 	.word	0x3f7c4da9
 8003e10:	4dd2f1aa 	.word	0x4dd2f1aa
 8003e14:	3fc81062 	.word	0x3fc81062
 8003e18:	200011b0 	.word	0x200011b0
 8003e1c:	3da3d70a 	.word	0x3da3d70a
 8003e20:	3df5c28f 	.word	0x3df5c28f
 8003e24:	200014d8 	.word	0x200014d8
 8003e28:	20001510 	.word	0x20001510
 8003e2c:	20000d88 	.word	0x20000d88
 8003e30:	3e99999a 	.word	0x3e99999a
 8003e34:	3c23d70a 	.word	0x3c23d70a
 8003e38:	20000dc8 	.word	0x20000dc8
 8003e3c:	3da3d70a 	.word	0x3da3d70a
 8003e40:	20000e08 	.word	0x20000e08
 8003e44:	3f4ccccd 	.word	0x3f4ccccd
 8003e48:	3ecccccd 	.word	0x3ecccccd
 8003e4c:	20000e44 	.word	0x20000e44
 8003e50:	40400000 	.word	0x40400000
 8003e54:	3dcccccd 	.word	0x3dcccccd
 8003e58:	200016f8 	.word	0x200016f8
 8003e5c:	447a0000 	.word	0x447a0000
 8003e60:	200006f8 	.word	0x200006f8
 8003e64:	20000d60 	.word	0x20000d60
 8003e68:	200016e8 	.word	0x200016e8
 8003e6c:	200006c0 	.word	0x200006c0
 8003e70:	3a83126f 	.word	0x3a83126f
 8003e74:	20000290 	.word	0x20000290
 8003e78:	200002fc 	.word	0x200002fc
 8003e7c:	200006f4 	.word	0x200006f4
 8003e80:	200006f6 	.word	0x200006f6
 8003e84:	2000036c 	.word	0x2000036c
 8003e88:	200003a0 	.word	0x200003a0
 8003e8c:	20001908 	.word	0x20001908
 8003e90:	200003d4 	.word	0x200003d4
 8003e94:	200019d4 	.word	0x200019d4
 8003e98:	200003d8 	.word	0x200003d8
 8003e9c:	200006d8 	.word	0x200006d8
 8003ea0:	200006dc 	.word	0x200006dc
 8003ea4:	200006e0 	.word	0x200006e0
 8003ea8:	200006e4 	.word	0x200006e4
 8003eac:	4bb2      	ldr	r3, [pc, #712]	@ (8004178 <main+0x9f8>)
 8003eae:	edc3 7a00 	vstr	s15, [r3]
			a2 = Encoder_GetAcceleration(&encoder2);
 8003eb2:	48b2      	ldr	r0, [pc, #712]	@ (800417c <main+0x9fc>)
 8003eb4:	f7fe f87c 	bl	8001fb0 <Encoder_GetAcceleration>
 8003eb8:	eef0 7a40 	vmov.f32	s15, s0
 8003ebc:	4bb0      	ldr	r3, [pc, #704]	@ (8004180 <main+0xa00>)
 8003ebe:	edc3 7a00 	vstr	s15, [r3]
//					__HAL_TIM_SET_COMPARE(&htim20, TIM_CHANNEL_3, 0);
//					NVIC_SystemReset();
//				}
//			}

			if (Base_Sysytem_status == Base_Home) {
 8003ec2:	4bb0      	ldr	r3, [pc, #704]	@ (8004184 <main+0xa04>)
 8003ec4:	781b      	ldrb	r3, [r3, #0]
 8003ec6:	2b01      	cmp	r3, #1
 8003ec8:	d105      	bne.n	8003ed6 <main+0x756>

				R_Theta_moving_Status(&hmodbus, Home);
 8003eca:	2101      	movs	r1, #1
 8003ecc:	48ae      	ldr	r0, [pc, #696]	@ (8004188 <main+0xa08>)
 8003ece:	f7fd f9fa 	bl	80012c6 <R_Theta_moving_Status>
 8003ed2:	f000 bd4b 	b.w	800496c <main+0x11ec>
//					__HAL_TIM_SET_COMPARE(&htim20, TIM_CHANNEL_1, 0);
//					__HAL_TIM_SET_COMPARE(&htim20, TIM_CHANNEL_3, 0);
//					NVIC_SystemReset();
//				}

			} else if (Base_Sysytem_status == Base_Run_Jog_mode) {
 8003ed6:	4bab      	ldr	r3, [pc, #684]	@ (8004184 <main+0xa04>)
 8003ed8:	781b      	ldrb	r3, [r3, #0]
 8003eda:	2b02      	cmp	r3, #2
 8003edc:	f040 841c 	bne.w	8004718 <main+0xf98>

				R_Theta_moving_Status(&hmodbus, Run_Jog_mode);
 8003ee0:	2102      	movs	r1, #2
 8003ee2:	48a9      	ldr	r0, [pc, #676]	@ (8004188 <main+0xa08>)
 8003ee4:	f7fd f9ef 	bl	80012c6 <R_Theta_moving_Status>

				Circle = PS2_ButtonCircle();
 8003ee8:	f7fe f8e0 	bl	80020ac <PS2_ButtonCircle>
 8003eec:	4603      	mov	r3, r0
 8003eee:	461a      	mov	r2, r3
 8003ef0:	4ba6      	ldr	r3, [pc, #664]	@ (800418c <main+0xa0c>)
 8003ef2:	601a      	str	r2, [r3, #0]
				Square = PS2_ButtonSquare();
 8003ef4:	f7fe f8ec 	bl	80020d0 <PS2_ButtonSquare>
 8003ef8:	4603      	mov	r3, r0
 8003efa:	461a      	mov	r2, r3
 8003efc:	4ba4      	ldr	r3, [pc, #656]	@ (8004190 <main+0xa10>)
 8003efe:	601a      	str	r2, [r3, #0]
				Triangle = PS2_ButtonTriangle();
 8003f00:	f7fe f8f6 	bl	80020f0 <PS2_ButtonTriangle>
 8003f04:	4603      	mov	r3, r0
 8003f06:	461a      	mov	r2, r3
 8003f08:	4ba2      	ldr	r3, [pc, #648]	@ (8004194 <main+0xa14>)
 8003f0a:	601a      	str	r2, [r3, #0]
				Cross = PS2_ButtonCross();
 8003f0c:	f7fe f902 	bl	8002114 <PS2_ButtonCross>
 8003f10:	4603      	mov	r3, r0
 8003f12:	461a      	mov	r2, r3
 8003f14:	4ba0      	ldr	r3, [pc, #640]	@ (8004198 <main+0xa18>)
 8003f16:	601a      	str	r2, [r3, #0]
				R1 = PS2_ButtonR1();
 8003f18:	f7fe f90e 	bl	8002138 <PS2_ButtonR1>
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	461a      	mov	r2, r3
 8003f20:	4b9e      	ldr	r3, [pc, #632]	@ (800419c <main+0xa1c>)
 8003f22:	601a      	str	r2, [r3, #0]
				R2 = PS2_ButtonR2();
 8003f24:	f7fe f91a 	bl	800215c <PS2_ButtonR2>
 8003f28:	4603      	mov	r3, r0
 8003f2a:	461a      	mov	r2, r3
 8003f2c:	4b9c      	ldr	r3, [pc, #624]	@ (80041a0 <main+0xa20>)
 8003f2e:	601a      	str	r2, [r3, #0]
				Select = PS2_ButtonSelect();
 8003f30:	f7fe f926 	bl	8002180 <PS2_ButtonSelect>
 8003f34:	4603      	mov	r3, r0
 8003f36:	461a      	mov	r2, r3
 8003f38:	4b9a      	ldr	r3, [pc, #616]	@ (80041a4 <main+0xa24>)
 8003f3a:	601a      	str	r2, [r3, #0]
				Start = PS2_ButtonStart();
 8003f3c:	f7fe f932 	bl	80021a4 <PS2_ButtonStart>
 8003f40:	4603      	mov	r3, r0
 8003f42:	461a      	mov	r2, r3
 8003f44:	4b98      	ldr	r3, [pc, #608]	@ (80041a8 <main+0xa28>)
 8003f46:	601a      	str	r2, [r3, #0]
				L2 = PS2_ButtonL2();
 8003f48:	f7fe f93e 	bl	80021c8 <PS2_ButtonL2>
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	461a      	mov	r2, r3
 8003f50:	4b96      	ldr	r3, [pc, #600]	@ (80041ac <main+0xa2c>)
 8003f52:	601a      	str	r2, [r3, #0]

				if (PS2_ButtonSquare()) {
 8003f54:	f7fe f8bc 	bl	80020d0 <PS2_ButtonSquare>
 8003f58:	4603      	mov	r3, r0
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d00a      	beq.n	8003f74 <main+0x7f4>
					// Move Right (Revolute)
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1); // 0 or 1
 8003f5e:	2201      	movs	r2, #1
 8003f60:	2140      	movs	r1, #64	@ 0x40
 8003f62:	4893      	ldr	r0, [pc, #588]	@ (80041b0 <main+0xa30>)
 8003f64:	f004 fb9a 	bl	800869c <HAL_GPIO_WritePin>
					__HAL_TIM_SET_COMPARE(&htim20, TIM_CHANNEL_3, 30000);
 8003f68:	4b92      	ldr	r3, [pc, #584]	@ (80041b4 <main+0xa34>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f247 5230 	movw	r2, #30000	@ 0x7530
 8003f70:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003f72:	e018      	b.n	8003fa6 <main+0x826>
				} else if (PS2_ButtonCircle()) {
 8003f74:	f7fe f89a 	bl	80020ac <PS2_ButtonCircle>
 8003f78:	4603      	mov	r3, r0
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d00a      	beq.n	8003f94 <main+0x814>
					// Move Left (Revolute)
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0); // 0 or 1
 8003f7e:	2200      	movs	r2, #0
 8003f80:	2140      	movs	r1, #64	@ 0x40
 8003f82:	488b      	ldr	r0, [pc, #556]	@ (80041b0 <main+0xa30>)
 8003f84:	f004 fb8a 	bl	800869c <HAL_GPIO_WritePin>
					__HAL_TIM_SET_COMPARE(&htim20, TIM_CHANNEL_3, 30000);
 8003f88:	4b8a      	ldr	r3, [pc, #552]	@ (80041b4 <main+0xa34>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f247 5230 	movw	r2, #30000	@ 0x7530
 8003f90:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003f92:	e008      	b.n	8003fa6 <main+0x826>
				} else {
					//float v_set = (Revolute_dis() / 18.0) * 65535.0;
					// HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0); // 0 or 1
					//__HAL_TIM_SET_COMPARE(&htim20, TIM_CHANNEL_3, v_set);
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0); // 0 or 1
 8003f94:	2200      	movs	r2, #0
 8003f96:	2140      	movs	r1, #64	@ 0x40
 8003f98:	4885      	ldr	r0, [pc, #532]	@ (80041b0 <main+0xa30>)
 8003f9a:	f004 fb7f 	bl	800869c <HAL_GPIO_WritePin>
					__HAL_TIM_SET_COMPARE(&htim20, TIM_CHANNEL_3, 0);
 8003f9e:	4b85      	ldr	r3, [pc, #532]	@ (80041b4 <main+0xa34>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	63da      	str	r2, [r3, #60]	@ 0x3c
				}

				if (PS2_ButtonTriangle()) {
 8003fa6:	f7fe f8a3 	bl	80020f0 <PS2_ButtonTriangle>
 8003faa:	4603      	mov	r3, r0
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d00a      	beq.n	8003fc6 <main+0x846>
					// Move Up (Prismatic)
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 1); // 0 or 1
 8003fb0:	2201      	movs	r2, #1
 8003fb2:	2102      	movs	r1, #2
 8003fb4:	4880      	ldr	r0, [pc, #512]	@ (80041b8 <main+0xa38>)
 8003fb6:	f004 fb71 	bl	800869c <HAL_GPIO_WritePin>
					__HAL_TIM_SET_COMPARE(&htim20, TIM_CHANNEL_1, 40000);
 8003fba:	4b7e      	ldr	r3, [pc, #504]	@ (80041b4 <main+0xa34>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f649 4240 	movw	r2, #40000	@ 0x9c40
 8003fc2:	635a      	str	r2, [r3, #52]	@ 0x34
 8003fc4:	e018      	b.n	8003ff8 <main+0x878>
				} else if (PS2_ButtonCross()) {
 8003fc6:	f7fe f8a5 	bl	8002114 <PS2_ButtonCross>
 8003fca:	4603      	mov	r3, r0
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d00a      	beq.n	8003fe6 <main+0x866>
					// Move Down (Prismatic)
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 0); // 0 or 1
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	2102      	movs	r1, #2
 8003fd4:	4878      	ldr	r0, [pc, #480]	@ (80041b8 <main+0xa38>)
 8003fd6:	f004 fb61 	bl	800869c <HAL_GPIO_WritePin>
					__HAL_TIM_SET_COMPARE(&htim20, TIM_CHANNEL_1, 40000);
 8003fda:	4b76      	ldr	r3, [pc, #472]	@ (80041b4 <main+0xa34>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f649 4240 	movw	r2, #40000	@ 0x9c40
 8003fe2:	635a      	str	r2, [r3, #52]	@ 0x34
 8003fe4:	e008      	b.n	8003ff8 <main+0x878>
				} else {
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 0); // 0 or 1
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	2102      	movs	r1, #2
 8003fea:	4873      	ldr	r0, [pc, #460]	@ (80041b8 <main+0xa38>)
 8003fec:	f004 fb56 	bl	800869c <HAL_GPIO_WritePin>
					__HAL_TIM_SET_COMPARE(&htim20, TIM_CHANNEL_1, 0);
 8003ff0:	4b70      	ldr	r3, [pc, #448]	@ (80041b4 <main+0xa34>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	635a      	str	r2, [r3, #52]	@ 0x34
				}

				if (PS2_ButtonR1()) {
 8003ff8:	f7fe f89e 	bl	8002138 <PS2_ButtonR1>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d005      	beq.n	800400e <main+0x88e>
					// Servo/Pen Move up
					__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4, 500);
 8004002:	4b6e      	ldr	r3, [pc, #440]	@ (80041bc <main+0xa3c>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800400a:	641a      	str	r2, [r3, #64]	@ 0x40
 800400c:	e00e      	b.n	800402c <main+0x8ac>
				} else if (PS2_ButtonR2()) {
 800400e:	f7fe f8a5 	bl	800215c <PS2_ButtonR2>
 8004012:	4603      	mov	r3, r0
 8004014:	2b00      	cmp	r3, #0
 8004016:	d005      	beq.n	8004024 <main+0x8a4>
					// Servo/Pen Move Down
					__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4, 2000);
 8004018:	4b68      	ldr	r3, [pc, #416]	@ (80041bc <main+0xa3c>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8004020:	641a      	str	r2, [r3, #64]	@ 0x40
 8004022:	e003      	b.n	800402c <main+0x8ac>
				} else {
					__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4, 0);
 8004024:	4b65      	ldr	r3, [pc, #404]	@ (80041bc <main+0xa3c>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	2200      	movs	r2, #0
 800402a:	641a      	str	r2, [r3, #64]	@ 0x40
				}

				uint8_t selectPressed = PS2_ButtonL2();
 800402c:	f7fe f8cc 	bl	80021c8 <PS2_ButtonL2>
 8004030:	4603      	mov	r3, r0
 8004032:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
				static uint8_t prevSelect = 0;
				if (selectPressed && !prevSelect) {
 8004036:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800403a:	2b00      	cmp	r3, #0
 800403c:	d072      	beq.n	8004124 <main+0x9a4>
 800403e:	4b60      	ldr	r3, [pc, #384]	@ (80041c0 <main+0xa40>)
 8004040:	781b      	ldrb	r3, [r3, #0]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d16e      	bne.n	8004124 <main+0x9a4>
					if (count < 11) {
 8004046:	4b5f      	ldr	r3, [pc, #380]	@ (80041c4 <main+0xa44>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	2b0a      	cmp	r3, #10
 800404c:	dc6a      	bgt.n	8004124 <main+0x9a4>
//						float test[11] = { 0.0f, 25.0f, 50.0f, 75.0f, 75.0f,
//								0.0f, 95.0f, 0.0f, 0.0f, 100.0f };
						PrismaticTenPoints[count] = roundf(
								Encoder_GetPosition_mm(&encoder1) * 10.0f);
 800404e:	485e      	ldr	r0, [pc, #376]	@ (80041c8 <main+0xa48>)
 8004050:	f7fd ffcc 	bl	8001fec <Encoder_GetPosition_mm>
 8004054:	eef0 7a40 	vmov.f32	s15, s0
						PrismaticTenPoints[count] = roundf(
 8004058:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800405c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004060:	4b58      	ldr	r3, [pc, #352]	@ (80041c4 <main+0xa44>)
 8004062:	681c      	ldr	r4, [r3, #0]
 8004064:	eeb0 0a67 	vmov.f32	s0, s15
 8004068:	f00b fd70 	bl	800fb4c <roundf>
 800406c:	eef0 7a40 	vmov.f32	s15, s0
 8004070:	4a56      	ldr	r2, [pc, #344]	@ (80041cc <main+0xa4c>)
 8004072:	00a3      	lsls	r3, r4, #2
 8004074:	4413      	add	r3, r2
 8004076:	edc3 7a00 	vstr	s15, [r3]
						RevoluteTenPoints_Degree[count] = roundf(
								(Encoder_GetDegree(&encoder2) / (100.0 / 30.0))
 800407a:	4840      	ldr	r0, [pc, #256]	@ (800417c <main+0x9fc>)
 800407c:	f7fd ffa7 	bl	8001fce <Encoder_GetDegree>
 8004080:	ee10 3a10 	vmov	r3, s0
 8004084:	4618      	mov	r0, r3
 8004086:	f7fc fa2b 	bl	80004e0 <__aeabi_f2d>
 800408a:	a339      	add	r3, pc, #228	@ (adr r3, 8004170 <main+0x9f0>)
 800408c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004090:	f7fc fba8 	bl	80007e4 <__aeabi_ddiv>
 8004094:	4602      	mov	r2, r0
 8004096:	460b      	mov	r3, r1
 8004098:	4610      	mov	r0, r2
 800409a:	4619      	mov	r1, r3
										* 10.0f);
 800409c:	f04f 0200 	mov.w	r2, #0
 80040a0:	4b4b      	ldr	r3, [pc, #300]	@ (80041d0 <main+0xa50>)
 80040a2:	f7fc fa75 	bl	8000590 <__aeabi_dmul>
 80040a6:	4602      	mov	r2, r0
 80040a8:	460b      	mov	r3, r1
						RevoluteTenPoints_Degree[count] = roundf(
 80040aa:	4610      	mov	r0, r2
 80040ac:	4619      	mov	r1, r3
 80040ae:	f7fc fd3f 	bl	8000b30 <__aeabi_d2f>
 80040b2:	4602      	mov	r2, r0
 80040b4:	4b43      	ldr	r3, [pc, #268]	@ (80041c4 <main+0xa44>)
 80040b6:	681c      	ldr	r4, [r3, #0]
 80040b8:	ee00 2a10 	vmov	s0, r2
 80040bc:	f00b fd46 	bl	800fb4c <roundf>
 80040c0:	eef0 7a40 	vmov.f32	s15, s0
 80040c4:	4a43      	ldr	r2, [pc, #268]	@ (80041d4 <main+0xa54>)
 80040c6:	00a3      	lsls	r3, r4, #2
 80040c8:	4413      	add	r3, r2
 80040ca:	edc3 7a00 	vstr	s15, [r3]
						PrismaticTenPoints_real[count] = Encoder_GetPosition_mm(
 80040ce:	4b3d      	ldr	r3, [pc, #244]	@ (80041c4 <main+0xa44>)
 80040d0:	681c      	ldr	r4, [r3, #0]
 80040d2:	483d      	ldr	r0, [pc, #244]	@ (80041c8 <main+0xa48>)
 80040d4:	f7fd ff8a 	bl	8001fec <Encoder_GetPosition_mm>
 80040d8:	eef0 7a40 	vmov.f32	s15, s0
 80040dc:	4a3e      	ldr	r2, [pc, #248]	@ (80041d8 <main+0xa58>)
 80040de:	00a3      	lsls	r3, r4, #2
 80040e0:	4413      	add	r3, r2
 80040e2:	edc3 7a00 	vstr	s15, [r3]
								&encoder1);
						RevoluteTenPoints_real[count] = Encoder_GetPosition(
 80040e6:	4825      	ldr	r0, [pc, #148]	@ (800417c <main+0x9fc>)
 80040e8:	f7fd ff44 	bl	8001f74 <Encoder_GetPosition>
 80040ec:	ee10 3a10 	vmov	r3, s0
 80040f0:	4618      	mov	r0, r3
 80040f2:	f7fc f9f5 	bl	80004e0 <__aeabi_f2d>
								&encoder2) / (100.0 / 30.0);
 80040f6:	a31e      	add	r3, pc, #120	@ (adr r3, 8004170 <main+0x9f0>)
 80040f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040fc:	f7fc fb72 	bl	80007e4 <__aeabi_ddiv>
 8004100:	4602      	mov	r2, r0
 8004102:	460b      	mov	r3, r1
						RevoluteTenPoints_real[count] = Encoder_GetPosition(
 8004104:	492f      	ldr	r1, [pc, #188]	@ (80041c4 <main+0xa44>)
 8004106:	680c      	ldr	r4, [r1, #0]
								&encoder2) / (100.0 / 30.0);
 8004108:	4610      	mov	r0, r2
 800410a:	4619      	mov	r1, r3
 800410c:	f7fc fd10 	bl	8000b30 <__aeabi_d2f>
 8004110:	4602      	mov	r2, r0
						RevoluteTenPoints_real[count] = Encoder_GetPosition(
 8004112:	4932      	ldr	r1, [pc, #200]	@ (80041dc <main+0xa5c>)
 8004114:	00a3      	lsls	r3, r4, #2
 8004116:	440b      	add	r3, r1
 8004118:	601a      	str	r2, [r3, #0]
//						PrismaticTenPoints_real[count] = test[count];
//						RevoluteTenPoints_real[count] = test[count] / 10.0f;
						count += 1;
 800411a:	4b2a      	ldr	r3, [pc, #168]	@ (80041c4 <main+0xa44>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	3301      	adds	r3, #1
 8004120:	4a28      	ldr	r2, [pc, #160]	@ (80041c4 <main+0xa44>)
 8004122:	6013      	str	r3, [r2, #0]
					}
				}
				prevSelect = selectPressed;
 8004124:	4a26      	ldr	r2, [pc, #152]	@ (80041c0 <main+0xa40>)
 8004126:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800412a:	7013      	strb	r3, [r2, #0]

				static uint8_t prevStart = 0;
				uint8_t nowStart = PS2_ButtonStart();
 800412c:	f7fe f83a 	bl	80021a4 <PS2_ButtonStart>
 8004130:	4603      	mov	r3, r0
 8004132:	f887 305a 	strb.w	r3, [r7, #90]	@ 0x5a
				if (nowStart && !prevStart) {
 8004136:	f897 305a 	ldrb.w	r3, [r7, #90]	@ 0x5a
 800413a:	2b00      	cmp	r3, #0
 800413c:	f000 81a4 	beq.w	8004488 <main+0xd08>
 8004140:	4b27      	ldr	r3, [pc, #156]	@ (80041e0 <main+0xa60>)
 8004142:	781b      	ldrb	r3, [r3, #0]
 8004144:	2b00      	cmp	r3, #0
 8004146:	f040 819f 	bne.w	8004488 <main+0xd08>
					state_start = 1;
 800414a:	4b26      	ldr	r3, [pc, #152]	@ (80041e4 <main+0xa64>)
 800414c:	2201      	movs	r2, #1
 800414e:	601a      	str	r2, [r3, #0]
					traj_start_time = t_global;
 8004150:	4b25      	ldr	r3, [pc, #148]	@ (80041e8 <main+0xa68>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a25      	ldr	r2, [pc, #148]	@ (80041ec <main+0xa6c>)
 8004156:	6013      	str	r3, [r2, #0]
					encoder1.position_mm = 0;
 8004158:	4b1b      	ldr	r3, [pc, #108]	@ (80041c8 <main+0xa48>)
 800415a:	f04f 0200 	mov.w	r2, #0
 800415e:	621a      	str	r2, [r3, #32]
					encoder2.position = 0;
 8004160:	4b06      	ldr	r3, [pc, #24]	@ (800417c <main+0x9fc>)
 8004162:	f04f 0200 	mov.w	r2, #0
 8004166:	609a      	str	r2, [r3, #8]
					for (int i = 0; i < 10; i++) {
 8004168:	2300      	movs	r3, #0
 800416a:	677b      	str	r3, [r7, #116]	@ 0x74
 800416c:	e185      	b.n	800447a <main+0xcfa>
 800416e:	bf00      	nop
 8004170:	aaaaaaab 	.word	0xaaaaaaab
 8004174:	400aaaaa 	.word	0x400aaaaa
 8004178:	200006e8 	.word	0x200006e8
 800417c:	200003a0 	.word	0x200003a0
 8004180:	200006ec 	.word	0x200006ec
 8004184:	20000d60 	.word	0x20000d60
 8004188:	200006f8 	.word	0x200006f8
 800418c:	20001568 	.word	0x20001568
 8004190:	2000156c 	.word	0x2000156c
 8004194:	20001570 	.word	0x20001570
 8004198:	20001574 	.word	0x20001574
 800419c:	20001578 	.word	0x20001578
 80041a0:	2000157c 	.word	0x2000157c
 80041a4:	20001580 	.word	0x20001580
 80041a8:	20001584 	.word	0x20001584
 80041ac:	20001588 	.word	0x20001588
 80041b0:	48000800 	.word	0x48000800
 80041b4:	20001c38 	.word	0x20001c38
 80041b8:	48000400 	.word	0x48000400
 80041bc:	20001aa0 	.word	0x20001aa0
 80041c0:	20001708 	.word	0x20001708
 80041c4:	20000208 	.word	0x20000208
 80041c8:	2000036c 	.word	0x2000036c
 80041cc:	2000158c 	.word	0x2000158c
 80041d0:	40240000 	.word	0x40240000
 80041d4:	200015b8 	.word	0x200015b8
 80041d8:	200015e4 	.word	0x200015e4
 80041dc:	20001610 	.word	0x20001610
 80041e0:	20001709 	.word	0x20001709
 80041e4:	200016ec 	.word	0x200016ec
 80041e8:	200006c0 	.word	0x200006c0
 80041ec:	200006c4 	.word	0x200006c4
						float start_pris = PrismaticTenPoints_real[i];
 80041f0:	4a79      	ldr	r2, [pc, #484]	@ (80043d8 <main+0xc58>)
 80041f2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80041f4:	009b      	lsls	r3, r3, #2
 80041f6:	4413      	add	r3, r2
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	657b      	str	r3, [r7, #84]	@ 0x54
						float end_pris = PrismaticTenPoints_real[i + 1];
 80041fc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80041fe:	3301      	adds	r3, #1
 8004200:	4a75      	ldr	r2, [pc, #468]	@ (80043d8 <main+0xc58>)
 8004202:	009b      	lsls	r3, r3, #2
 8004204:	4413      	add	r3, r2
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	653b      	str	r3, [r7, #80]	@ 0x50
						float start_rev = RevoluteTenPoints_real[i];
 800420a:	4a74      	ldr	r2, [pc, #464]	@ (80043dc <main+0xc5c>)
 800420c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800420e:	009b      	lsls	r3, r3, #2
 8004210:	4413      	add	r3, r2
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	64fb      	str	r3, [r7, #76]	@ 0x4c
						float end_rev = (RevoluteTenPoints_real[i + 1]);
 8004216:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004218:	3301      	adds	r3, #1
 800421a:	4a70      	ldr	r2, [pc, #448]	@ (80043dc <main+0xc5c>)
 800421c:	009b      	lsls	r3, r3, #2
 800421e:	4413      	add	r3, r2
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	64bb      	str	r3, [r7, #72]	@ 0x48

						float t_start_pris =
								(i == 0) ?
										0.0f :
 8004224:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004226:	2b00      	cmp	r3, #0
 8004228:	d021      	beq.n	800426e <main+0xaee>
										Prismatic[i - 1].t_start
 800422a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800422c:	1e5a      	subs	r2, r3, #1
 800422e:	496c      	ldr	r1, [pc, #432]	@ (80043e0 <main+0xc60>)
 8004230:	4613      	mov	r3, r2
 8004232:	00db      	lsls	r3, r3, #3
 8004234:	4413      	add	r3, r2
 8004236:	009b      	lsls	r3, r3, #2
 8004238:	440b      	add	r3, r1
 800423a:	3320      	adds	r3, #32
 800423c:	ed93 7a00 	vldr	s14, [r3]
												+ Prismatic[i - 1].t_total
 8004240:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004242:	1e5a      	subs	r2, r3, #1
 8004244:	4966      	ldr	r1, [pc, #408]	@ (80043e0 <main+0xc60>)
 8004246:	4613      	mov	r3, r2
 8004248:	00db      	lsls	r3, r3, #3
 800424a:	4413      	add	r3, r2
 800424c:	009b      	lsls	r3, r3, #2
 800424e:	440b      	add	r3, r1
 8004250:	331c      	adds	r3, #28
 8004252:	edd3 7a00 	vldr	s15, [r3]
 8004256:	ee37 7a27 	vadd.f32	s14, s14, s15
												+ delay_pris[i - 1];
 800425a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800425c:	3b01      	subs	r3, #1
 800425e:	4a61      	ldr	r2, [pc, #388]	@ (80043e4 <main+0xc64>)
 8004260:	009b      	lsls	r3, r3, #2
 8004262:	4413      	add	r3, r2
 8004264:	edd3 7a00 	vldr	s15, [r3]
										0.0f :
 8004268:	ee77 7a27 	vadd.f32	s15, s14, s15
 800426c:	e001      	b.n	8004272 <main+0xaf2>
 800426e:	eddf 7a5e 	vldr	s15, [pc, #376]	@ 80043e8 <main+0xc68>
						float t_start_pris =
 8004272:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
						float t_start_rev =
								(i == 0) ?
										0.0f :
 8004276:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004278:	2b00      	cmp	r3, #0
 800427a:	d021      	beq.n	80042c0 <main+0xb40>
										Revolute[i - 1].t_start
 800427c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800427e:	1e5a      	subs	r2, r3, #1
 8004280:	495a      	ldr	r1, [pc, #360]	@ (80043ec <main+0xc6c>)
 8004282:	4613      	mov	r3, r2
 8004284:	00db      	lsls	r3, r3, #3
 8004286:	4413      	add	r3, r2
 8004288:	009b      	lsls	r3, r3, #2
 800428a:	440b      	add	r3, r1
 800428c:	3320      	adds	r3, #32
 800428e:	ed93 7a00 	vldr	s14, [r3]
												+ Revolute[i - 1].t_total
 8004292:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004294:	1e5a      	subs	r2, r3, #1
 8004296:	4955      	ldr	r1, [pc, #340]	@ (80043ec <main+0xc6c>)
 8004298:	4613      	mov	r3, r2
 800429a:	00db      	lsls	r3, r3, #3
 800429c:	4413      	add	r3, r2
 800429e:	009b      	lsls	r3, r3, #2
 80042a0:	440b      	add	r3, r1
 80042a2:	331c      	adds	r3, #28
 80042a4:	edd3 7a00 	vldr	s15, [r3]
 80042a8:	ee37 7a27 	vadd.f32	s14, s14, s15
												+ delay_rev[i - 1];
 80042ac:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80042ae:	3b01      	subs	r3, #1
 80042b0:	4a4f      	ldr	r2, [pc, #316]	@ (80043f0 <main+0xc70>)
 80042b2:	009b      	lsls	r3, r3, #2
 80042b4:	4413      	add	r3, r2
 80042b6:	edd3 7a00 	vldr	s15, [r3]
										0.0f :
 80042ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80042be:	e001      	b.n	80042c4 <main+0xb44>
 80042c0:	eddf 7a49 	vldr	s15, [pc, #292]	@ 80043e8 <main+0xc68>
						float t_start_rev =
 80042c4:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40

						if (fabsf(end_pris - start_pris) < 0.001f) {
 80042c8:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 80042cc:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 80042d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80042d4:	eef0 7ae7 	vabs.f32	s15, s15
 80042d8:	ed9f 7a46 	vldr	s14, [pc, #280]	@ 80043f4 <main+0xc74>
 80042dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80042e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042e4:	d517      	bpl.n	8004316 <main+0xb96>
							InitHoldTrajectorySegment(&Prismatic[i], start_pris,
 80042e6:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80042e8:	4613      	mov	r3, r2
 80042ea:	00db      	lsls	r3, r3, #3
 80042ec:	4413      	add	r3, r2
 80042ee:	009b      	lsls	r3, r3, #2
 80042f0:	4a3b      	ldr	r2, [pc, #236]	@ (80043e0 <main+0xc60>)
 80042f2:	4413      	add	r3, r2
 80042f4:	ed97 1a11 	vldr	s2, [r7, #68]	@ 0x44
 80042f8:	eef1 0a06 	vmov.f32	s1, #22	@ 0x40b00000  5.5
 80042fc:	ed97 0a15 	vldr	s0, [r7, #84]	@ 0x54
 8004300:	4618      	mov	r0, r3
 8004302:	f7fe ffa5 	bl	8003250 <InitHoldTrajectorySegment>
									5.5f, t_start_pris);
							delay_pris[i] = 0.0f;
 8004306:	4a37      	ldr	r2, [pc, #220]	@ (80043e4 <main+0xc64>)
 8004308:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800430a:	009b      	lsls	r3, r3, #2
 800430c:	4413      	add	r3, r2
 800430e:	f04f 0200 	mov.w	r2, #0
 8004312:	601a      	str	r2, [r3, #0]
 8004314:	e039      	b.n	800438a <main+0xc0a>
						} else {
							InitTrajectorySegment(&Prismatic[i], start_pris,
 8004316:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8004318:	4613      	mov	r3, r2
 800431a:	00db      	lsls	r3, r3, #3
 800431c:	4413      	add	r3, r2
 800431e:	009b      	lsls	r3, r3, #2
 8004320:	4a2f      	ldr	r2, [pc, #188]	@ (80043e0 <main+0xc60>)
 8004322:	4413      	add	r3, r2
 8004324:	ed97 2a11 	vldr	s4, [r7, #68]	@ 0x44
 8004328:	eddf 1a33 	vldr	s3, [pc, #204]	@ 80043f8 <main+0xc78>
 800432c:	ed9f 1a33 	vldr	s2, [pc, #204]	@ 80043fc <main+0xc7c>
 8004330:	edd7 0a14 	vldr	s1, [r7, #80]	@ 0x50
 8004334:	ed97 0a15 	vldr	s0, [r7, #84]	@ 0x54
 8004338:	4618      	mov	r0, r3
 800433a:	f7fe fd8d 	bl	8002e58 <InitTrajectorySegment>
									end_pris, v_max_pris, a_max_pris,
									t_start_pris);
							delay_pris[i] = 5.5f - Prismatic[i].t_total;
 800433e:	4928      	ldr	r1, [pc, #160]	@ (80043e0 <main+0xc60>)
 8004340:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8004342:	4613      	mov	r3, r2
 8004344:	00db      	lsls	r3, r3, #3
 8004346:	4413      	add	r3, r2
 8004348:	009b      	lsls	r3, r3, #2
 800434a:	440b      	add	r3, r1
 800434c:	331c      	adds	r3, #28
 800434e:	edd3 7a00 	vldr	s15, [r3]
 8004352:	eeb1 7a06 	vmov.f32	s14, #22	@ 0x40b00000  5.5
 8004356:	ee77 7a67 	vsub.f32	s15, s14, s15
 800435a:	4a22      	ldr	r2, [pc, #136]	@ (80043e4 <main+0xc64>)
 800435c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800435e:	009b      	lsls	r3, r3, #2
 8004360:	4413      	add	r3, r2
 8004362:	edc3 7a00 	vstr	s15, [r3]
							if (delay_pris[i] < 0.0f)
 8004366:	4a1f      	ldr	r2, [pc, #124]	@ (80043e4 <main+0xc64>)
 8004368:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800436a:	009b      	lsls	r3, r3, #2
 800436c:	4413      	add	r3, r2
 800436e:	edd3 7a00 	vldr	s15, [r3]
 8004372:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004376:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800437a:	d506      	bpl.n	800438a <main+0xc0a>
								delay_pris[i] = 0.0f;
 800437c:	4a19      	ldr	r2, [pc, #100]	@ (80043e4 <main+0xc64>)
 800437e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004380:	009b      	lsls	r3, r3, #2
 8004382:	4413      	add	r3, r2
 8004384:	f04f 0200 	mov.w	r2, #0
 8004388:	601a      	str	r2, [r3, #0]
						}

						if (fabsf(end_rev - start_rev) < 0.001f) {
 800438a:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 800438e:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8004392:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004396:	eef0 7ae7 	vabs.f32	s15, s15
 800439a:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 80043f4 <main+0xc74>
 800439e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80043a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043a6:	d52b      	bpl.n	8004400 <main+0xc80>
							InitHoldTrajectorySegment(&Revolute[i], start_rev,
 80043a8:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80043aa:	4613      	mov	r3, r2
 80043ac:	00db      	lsls	r3, r3, #3
 80043ae:	4413      	add	r3, r2
 80043b0:	009b      	lsls	r3, r3, #2
 80043b2:	4a0e      	ldr	r2, [pc, #56]	@ (80043ec <main+0xc6c>)
 80043b4:	4413      	add	r3, r2
 80043b6:	ed97 1a10 	vldr	s2, [r7, #64]	@ 0x40
 80043ba:	eef1 0a06 	vmov.f32	s1, #22	@ 0x40b00000  5.5
 80043be:	ed97 0a13 	vldr	s0, [r7, #76]	@ 0x4c
 80043c2:	4618      	mov	r0, r3
 80043c4:	f7fe ff44 	bl	8003250 <InitHoldTrajectorySegment>
									5.5f, t_start_rev);
							delay_rev[i] = 0.0f;
 80043c8:	4a09      	ldr	r2, [pc, #36]	@ (80043f0 <main+0xc70>)
 80043ca:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80043cc:	009b      	lsls	r3, r3, #2
 80043ce:	4413      	add	r3, r2
 80043d0:	f04f 0200 	mov.w	r2, #0
 80043d4:	601a      	str	r2, [r3, #0]
 80043d6:	e04d      	b.n	8004474 <main+0xcf4>
 80043d8:	200015e4 	.word	0x200015e4
 80043dc:	20001610 	.word	0x20001610
 80043e0:	200003f0 	.word	0x200003f0
 80043e4:	2000163c 	.word	0x2000163c
 80043e8:	00000000 	.word	0x00000000
 80043ec:	20000558 	.word	0x20000558
 80043f0:	20001664 	.word	0x20001664
 80043f4:	3a83126f 	.word	0x3a83126f
 80043f8:	437a0000 	.word	0x437a0000
 80043fc:	43fa0000 	.word	0x43fa0000
						} else {
							InitTrajectorySegment(&Revolute[i], start_rev,
 8004400:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8004402:	4613      	mov	r3, r2
 8004404:	00db      	lsls	r3, r3, #3
 8004406:	4413      	add	r3, r2
 8004408:	009b      	lsls	r3, r3, #2
 800440a:	4aae      	ldr	r2, [pc, #696]	@ (80046c4 <main+0xf44>)
 800440c:	4413      	add	r3, r2
 800440e:	ed97 2a10 	vldr	s4, [r7, #64]	@ 0x40
 8004412:	eddf 1aad 	vldr	s3, [pc, #692]	@ 80046c8 <main+0xf48>
 8004416:	eeb7 1a00 	vmov.f32	s2, #112	@ 0x3f800000  1.0
 800441a:	edd7 0a12 	vldr	s1, [r7, #72]	@ 0x48
 800441e:	ed97 0a13 	vldr	s0, [r7, #76]	@ 0x4c
 8004422:	4618      	mov	r0, r3
 8004424:	f7fe fd18 	bl	8002e58 <InitTrajectorySegment>
									end_rev, v_max_rev, a_max_rev, t_start_rev);
							delay_rev[i] = 5.5f - Revolute[i].t_total;
 8004428:	49a6      	ldr	r1, [pc, #664]	@ (80046c4 <main+0xf44>)
 800442a:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800442c:	4613      	mov	r3, r2
 800442e:	00db      	lsls	r3, r3, #3
 8004430:	4413      	add	r3, r2
 8004432:	009b      	lsls	r3, r3, #2
 8004434:	440b      	add	r3, r1
 8004436:	331c      	adds	r3, #28
 8004438:	edd3 7a00 	vldr	s15, [r3]
 800443c:	eeb1 7a06 	vmov.f32	s14, #22	@ 0x40b00000  5.5
 8004440:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004444:	4aa1      	ldr	r2, [pc, #644]	@ (80046cc <main+0xf4c>)
 8004446:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004448:	009b      	lsls	r3, r3, #2
 800444a:	4413      	add	r3, r2
 800444c:	edc3 7a00 	vstr	s15, [r3]
							if (delay_rev[i] < 0.0f)
 8004450:	4a9e      	ldr	r2, [pc, #632]	@ (80046cc <main+0xf4c>)
 8004452:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004454:	009b      	lsls	r3, r3, #2
 8004456:	4413      	add	r3, r2
 8004458:	edd3 7a00 	vldr	s15, [r3]
 800445c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004460:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004464:	d506      	bpl.n	8004474 <main+0xcf4>
								delay_rev[i] = 0.0f;
 8004466:	4a99      	ldr	r2, [pc, #612]	@ (80046cc <main+0xf4c>)
 8004468:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800446a:	009b      	lsls	r3, r3, #2
 800446c:	4413      	add	r3, r2
 800446e:	f04f 0200 	mov.w	r2, #0
 8004472:	601a      	str	r2, [r3, #0]
					for (int i = 0; i < 10; i++) {
 8004474:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004476:	3301      	adds	r3, #1
 8004478:	677b      	str	r3, [r7, #116]	@ 0x74
 800447a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800447c:	2b09      	cmp	r3, #9
 800447e:	f77f aeb7 	ble.w	80041f0 <main+0xa70>
						}
					}
					current_segment = 0;
 8004482:	4b93      	ldr	r3, [pc, #588]	@ (80046d0 <main+0xf50>)
 8004484:	2200      	movs	r2, #0
 8004486:	601a      	str	r2, [r3, #0]
				}
				prevStart = nowStart;
 8004488:	4a92      	ldr	r2, [pc, #584]	@ (80046d4 <main+0xf54>)
 800448a:	f897 305a 	ldrb.w	r3, [r7, #90]	@ 0x5a
 800448e:	7013      	strb	r3, [r2, #0]

				float t_relative = t_global - traj_start_time;
 8004490:	4b91      	ldr	r3, [pc, #580]	@ (80046d8 <main+0xf58>)
 8004492:	ed93 7a00 	vldr	s14, [r3]
 8004496:	4b91      	ldr	r3, [pc, #580]	@ (80046dc <main+0xf5c>)
 8004498:	edd3 7a00 	vldr	s15, [r3]
 800449c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80044a0:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c

				if (current_segment < 10) {
 80044a4:	4b8a      	ldr	r3, [pc, #552]	@ (80046d0 <main+0xf50>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	2b09      	cmp	r3, #9
 80044aa:	dc48      	bgt.n	800453e <main+0xdbe>
					pos_pris = GetTrajectoryPosition(
							&Prismatic[current_segment], t_relative);
 80044ac:	4b88      	ldr	r3, [pc, #544]	@ (80046d0 <main+0xf50>)
 80044ae:	681a      	ldr	r2, [r3, #0]
 80044b0:	4613      	mov	r3, r2
 80044b2:	00db      	lsls	r3, r3, #3
 80044b4:	4413      	add	r3, r2
 80044b6:	009b      	lsls	r3, r3, #2
 80044b8:	4a89      	ldr	r2, [pc, #548]	@ (80046e0 <main+0xf60>)
 80044ba:	4413      	add	r3, r2
					pos_pris = GetTrajectoryPosition(
 80044bc:	ed97 0a0f 	vldr	s0, [r7, #60]	@ 0x3c
 80044c0:	4618      	mov	r0, r3
 80044c2:	f7fe fd7f 	bl	8002fc4 <GetTrajectoryPosition>
 80044c6:	eef0 7a40 	vmov.f32	s15, s0
 80044ca:	4b86      	ldr	r3, [pc, #536]	@ (80046e4 <main+0xf64>)
 80044cc:	edc3 7a00 	vstr	s15, [r3]
					vel_pris = GetTrajectoryVelocity(
							&Prismatic[current_segment], t_relative);
 80044d0:	4b7f      	ldr	r3, [pc, #508]	@ (80046d0 <main+0xf50>)
 80044d2:	681a      	ldr	r2, [r3, #0]
 80044d4:	4613      	mov	r3, r2
 80044d6:	00db      	lsls	r3, r3, #3
 80044d8:	4413      	add	r3, r2
 80044da:	009b      	lsls	r3, r3, #2
 80044dc:	4a80      	ldr	r2, [pc, #512]	@ (80046e0 <main+0xf60>)
 80044de:	4413      	add	r3, r2
					vel_pris = GetTrajectoryVelocity(
 80044e0:	ed97 0a0f 	vldr	s0, [r7, #60]	@ 0x3c
 80044e4:	4618      	mov	r0, r3
 80044e6:	f7fe fe43 	bl	8003170 <GetTrajectoryVelocity>
 80044ea:	eef0 7a40 	vmov.f32	s15, s0
 80044ee:	4b7e      	ldr	r3, [pc, #504]	@ (80046e8 <main+0xf68>)
 80044f0:	edc3 7a00 	vstr	s15, [r3]
					pos_rev = GetTrajectoryPosition(&Revolute[current_segment],
 80044f4:	4b76      	ldr	r3, [pc, #472]	@ (80046d0 <main+0xf50>)
 80044f6:	681a      	ldr	r2, [r3, #0]
 80044f8:	4613      	mov	r3, r2
 80044fa:	00db      	lsls	r3, r3, #3
 80044fc:	4413      	add	r3, r2
 80044fe:	009b      	lsls	r3, r3, #2
 8004500:	4a70      	ldr	r2, [pc, #448]	@ (80046c4 <main+0xf44>)
 8004502:	4413      	add	r3, r2
 8004504:	ed97 0a0f 	vldr	s0, [r7, #60]	@ 0x3c
 8004508:	4618      	mov	r0, r3
 800450a:	f7fe fd5b 	bl	8002fc4 <GetTrajectoryPosition>
 800450e:	eef0 7a40 	vmov.f32	s15, s0
 8004512:	4b76      	ldr	r3, [pc, #472]	@ (80046ec <main+0xf6c>)
 8004514:	edc3 7a00 	vstr	s15, [r3]
							t_relative);
					vel_rev = GetTrajectoryVelocity(&Revolute[current_segment],
 8004518:	4b6d      	ldr	r3, [pc, #436]	@ (80046d0 <main+0xf50>)
 800451a:	681a      	ldr	r2, [r3, #0]
 800451c:	4613      	mov	r3, r2
 800451e:	00db      	lsls	r3, r3, #3
 8004520:	4413      	add	r3, r2
 8004522:	009b      	lsls	r3, r3, #2
 8004524:	4a67      	ldr	r2, [pc, #412]	@ (80046c4 <main+0xf44>)
 8004526:	4413      	add	r3, r2
 8004528:	ed97 0a0f 	vldr	s0, [r7, #60]	@ 0x3c
 800452c:	4618      	mov	r0, r3
 800452e:	f7fe fe1f 	bl	8003170 <GetTrajectoryVelocity>
 8004532:	eef0 7a40 	vmov.f32	s15, s0
 8004536:	4b6e      	ldr	r3, [pc, #440]	@ (80046f0 <main+0xf70>)
 8004538:	edc3 7a00 	vstr	s15, [r3]
 800453c:	e014      	b.n	8004568 <main+0xde8>
							t_relative);
				} else {
					pos_pris = Prismatic[9].end_pos;
 800453e:	4b68      	ldr	r3, [pc, #416]	@ (80046e0 <main+0xf60>)
 8004540:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8004544:	4a67      	ldr	r2, [pc, #412]	@ (80046e4 <main+0xf64>)
 8004546:	6013      	str	r3, [r2, #0]
					vel_pris = 0.0f;
 8004548:	4b67      	ldr	r3, [pc, #412]	@ (80046e8 <main+0xf68>)
 800454a:	f04f 0200 	mov.w	r2, #0
 800454e:	601a      	str	r2, [r3, #0]
					pos_rev = Revolute[9].end_pos;
 8004550:	4b5c      	ldr	r3, [pc, #368]	@ (80046c4 <main+0xf44>)
 8004552:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8004556:	4a65      	ldr	r2, [pc, #404]	@ (80046ec <main+0xf6c>)
 8004558:	6013      	str	r3, [r2, #0]
					vel_rev = 0.0f;
 800455a:	4b65      	ldr	r3, [pc, #404]	@ (80046f0 <main+0xf70>)
 800455c:	f04f 0200 	mov.w	r2, #0
 8004560:	601a      	str	r2, [r3, #0]
					state_start = 0;
 8004562:	4b64      	ldr	r3, [pc, #400]	@ (80046f4 <main+0xf74>)
 8004564:	2200      	movs	r2, #0
 8004566:	601a      	str	r2, [r3, #0]
				}

				if (t_relative
						> Prismatic[current_segment].t_start
 8004568:	4b59      	ldr	r3, [pc, #356]	@ (80046d0 <main+0xf50>)
 800456a:	681a      	ldr	r2, [r3, #0]
 800456c:	495c      	ldr	r1, [pc, #368]	@ (80046e0 <main+0xf60>)
 800456e:	4613      	mov	r3, r2
 8004570:	00db      	lsls	r3, r3, #3
 8004572:	4413      	add	r3, r2
 8004574:	009b      	lsls	r3, r3, #2
 8004576:	440b      	add	r3, r1
 8004578:	3320      	adds	r3, #32
 800457a:	ed93 7a00 	vldr	s14, [r3]
								+ Prismatic[current_segment].t_total
 800457e:	4b54      	ldr	r3, [pc, #336]	@ (80046d0 <main+0xf50>)
 8004580:	681a      	ldr	r2, [r3, #0]
 8004582:	4957      	ldr	r1, [pc, #348]	@ (80046e0 <main+0xf60>)
 8004584:	4613      	mov	r3, r2
 8004586:	00db      	lsls	r3, r3, #3
 8004588:	4413      	add	r3, r2
 800458a:	009b      	lsls	r3, r3, #2
 800458c:	440b      	add	r3, r1
 800458e:	331c      	adds	r3, #28
 8004590:	edd3 7a00 	vldr	s15, [r3]
 8004594:	ee77 7a27 	vadd.f32	s15, s14, s15
				if (t_relative
 8004598:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 800459c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80045a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045a4:	dd27      	ble.n	80045f6 <main+0xe76>
						&& t_relative
								> Revolute[current_segment].t_start
 80045a6:	4b4a      	ldr	r3, [pc, #296]	@ (80046d0 <main+0xf50>)
 80045a8:	681a      	ldr	r2, [r3, #0]
 80045aa:	4946      	ldr	r1, [pc, #280]	@ (80046c4 <main+0xf44>)
 80045ac:	4613      	mov	r3, r2
 80045ae:	00db      	lsls	r3, r3, #3
 80045b0:	4413      	add	r3, r2
 80045b2:	009b      	lsls	r3, r3, #2
 80045b4:	440b      	add	r3, r1
 80045b6:	3320      	adds	r3, #32
 80045b8:	ed93 7a00 	vldr	s14, [r3]
										+ Revolute[current_segment].t_total) {
 80045bc:	4b44      	ldr	r3, [pc, #272]	@ (80046d0 <main+0xf50>)
 80045be:	681a      	ldr	r2, [r3, #0]
 80045c0:	4940      	ldr	r1, [pc, #256]	@ (80046c4 <main+0xf44>)
 80045c2:	4613      	mov	r3, r2
 80045c4:	00db      	lsls	r3, r3, #3
 80045c6:	4413      	add	r3, r2
 80045c8:	009b      	lsls	r3, r3, #2
 80045ca:	440b      	add	r3, r1
 80045cc:	331c      	adds	r3, #28
 80045ce:	edd3 7a00 	vldr	s15, [r3]
 80045d2:	ee77 7a27 	vadd.f32	s15, s14, s15
						&& t_relative
 80045d6:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 80045da:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80045de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045e2:	dd08      	ble.n	80045f6 <main+0xe76>
					if (current_segment < 9)
 80045e4:	4b3a      	ldr	r3, [pc, #232]	@ (80046d0 <main+0xf50>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	2b08      	cmp	r3, #8
 80045ea:	dc04      	bgt.n	80045f6 <main+0xe76>
						current_segment++;
 80045ec:	4b38      	ldr	r3, [pc, #224]	@ (80046d0 <main+0xf50>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	3301      	adds	r3, #1
 80045f2:	4a37      	ldr	r2, [pc, #220]	@ (80046d0 <main+0xf50>)
 80045f4:	6013      	str	r3, [r2, #0]
				}

				if (plotter == 1) // Pen_Up
 80045f6:	4b40      	ldr	r3, [pc, #256]	@ (80046f8 <main+0xf78>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	2b01      	cmp	r3, #1
 80045fc:	d109      	bne.n	8004612 <main+0xe92>
				{
					__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4, 500);
 80045fe:	4b3f      	ldr	r3, [pc, #252]	@ (80046fc <main+0xf7c>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8004606:	641a      	str	r2, [r3, #64]	@ 0x40
					modbus_servo_Status(&hmodbus, Limit_Up);
 8004608:	2102      	movs	r1, #2
 800460a:	483d      	ldr	r0, [pc, #244]	@ (8004700 <main+0xf80>)
 800460c:	f7fc fe29 	bl	8001262 <modbus_servo_Status>
 8004610:	e011      	b.n	8004636 <main+0xeb6>
				} else if (plotter == 2) // Pen_Down
 8004612:	4b39      	ldr	r3, [pc, #228]	@ (80046f8 <main+0xf78>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	2b02      	cmp	r3, #2
 8004618:	d109      	bne.n	800462e <main+0xeae>
//					if (status < 2000) {
//						status += 1;
//					} else {
//						status += 0;
//					}
					__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4, 2000);
 800461a:	4b38      	ldr	r3, [pc, #224]	@ (80046fc <main+0xf7c>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8004622:	641a      	str	r2, [r3, #64]	@ 0x40
					modbus_servo_Status(&hmodbus, Limit_Down);
 8004624:	2101      	movs	r1, #1
 8004626:	4836      	ldr	r0, [pc, #216]	@ (8004700 <main+0xf80>)
 8004628:	f7fc fe1b 	bl	8001262 <modbus_servo_Status>
 800462c:	e003      	b.n	8004636 <main+0xeb6>
				} else {
					__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4, 0);
 800462e:	4b33      	ldr	r3, [pc, #204]	@ (80046fc <main+0xf7c>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	2200      	movs	r2, #0
 8004634:	641a      	str	r2, [r3, #64]	@ 0x40
				}

				if (count == 11 && Num_point <= 9) {  // Set_Target 10 points
 8004636:	4b33      	ldr	r3, [pc, #204]	@ (8004704 <main+0xf84>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	2b0b      	cmp	r3, #11
 800463c:	f040 8196 	bne.w	800496c <main+0x11ec>
 8004640:	4b31      	ldr	r3, [pc, #196]	@ (8004708 <main+0xf88>)
 8004642:	781b      	ldrb	r3, [r3, #0]
 8004644:	2b09      	cmp	r3, #9
 8004646:	f200 8191 	bhi.w	800496c <main+0x11ec>
					Coordinate_Robot_to_Base(&Goal_point[Num_point],
 800464a:	4b2f      	ldr	r3, [pc, #188]	@ (8004708 <main+0xf88>)
 800464c:	781b      	ldrb	r3, [r3, #0]
 800464e:	00db      	lsls	r3, r3, #3
 8004650:	4a2e      	ldr	r2, [pc, #184]	@ (800470c <main+0xf8c>)
 8004652:	441a      	add	r2, r3
							PrismaticTenPoints[Num_point + 1],
 8004654:	4b2c      	ldr	r3, [pc, #176]	@ (8004708 <main+0xf88>)
 8004656:	781b      	ldrb	r3, [r3, #0]
 8004658:	3301      	adds	r3, #1
					Coordinate_Robot_to_Base(&Goal_point[Num_point],
 800465a:	492d      	ldr	r1, [pc, #180]	@ (8004710 <main+0xf90>)
 800465c:	009b      	lsls	r3, r3, #2
 800465e:	440b      	add	r3, r1
 8004660:	edd3 7a00 	vldr	s15, [r3]
							RevoluteTenPoints_Degree[Num_point + 1]);
 8004664:	4b28      	ldr	r3, [pc, #160]	@ (8004708 <main+0xf88>)
 8004666:	781b      	ldrb	r3, [r3, #0]
 8004668:	3301      	adds	r3, #1
					Coordinate_Robot_to_Base(&Goal_point[Num_point],
 800466a:	492a      	ldr	r1, [pc, #168]	@ (8004714 <main+0xf94>)
 800466c:	009b      	lsls	r3, r3, #2
 800466e:	440b      	add	r3, r1
 8004670:	ed93 7a00 	vldr	s14, [r3]
 8004674:	eef0 0a47 	vmov.f32	s1, s14
 8004678:	eeb0 0a67 	vmov.f32	s0, s15
 800467c:	4610      	mov	r0, r2
 800467e:	f7fd f90b 	bl	8001898 <Coordinate_Robot_to_Base>
					set_Target_Position_ten_points(&hmodbus,
 8004682:	4b21      	ldr	r3, [pc, #132]	@ (8004708 <main+0xf88>)
 8004684:	781b      	ldrb	r3, [r3, #0]
 8004686:	4a21      	ldr	r2, [pc, #132]	@ (800470c <main+0xf8c>)
 8004688:	00db      	lsls	r3, r3, #3
 800468a:	4413      	add	r3, r2
 800468c:	edd3 7a00 	vldr	s15, [r3]
 8004690:	4b1d      	ldr	r3, [pc, #116]	@ (8004708 <main+0xf88>)
 8004692:	781b      	ldrb	r3, [r3, #0]
 8004694:	4a1d      	ldr	r2, [pc, #116]	@ (800470c <main+0xf8c>)
 8004696:	00db      	lsls	r3, r3, #3
 8004698:	4413      	add	r3, r2
 800469a:	3304      	adds	r3, #4
 800469c:	ed93 7a00 	vldr	s14, [r3]
 80046a0:	4b19      	ldr	r3, [pc, #100]	@ (8004708 <main+0xf88>)
 80046a2:	781b      	ldrb	r3, [r3, #0]
 80046a4:	4619      	mov	r1, r3
 80046a6:	eef0 0a47 	vmov.f32	s1, s14
 80046aa:	eeb0 0a67 	vmov.f32	s0, s15
 80046ae:	4814      	ldr	r0, [pc, #80]	@ (8004700 <main+0xf80>)
 80046b0:	f7fc fe6b 	bl	800138a <set_Target_Position_ten_points>
							Goal_point[Num_point].r_goal_position,
							Goal_point[Num_point].theta_goal_position,
							Num_point);
					Num_point += 1;
 80046b4:	4b14      	ldr	r3, [pc, #80]	@ (8004708 <main+0xf88>)
 80046b6:	781b      	ldrb	r3, [r3, #0]
 80046b8:	3301      	adds	r3, #1
 80046ba:	b2da      	uxtb	r2, r3
 80046bc:	4b12      	ldr	r3, [pc, #72]	@ (8004708 <main+0xf88>)
 80046be:	701a      	strb	r2, [r3, #0]
 80046c0:	e154      	b.n	800496c <main+0x11ec>
 80046c2:	bf00      	nop
 80046c4:	20000558 	.word	0x20000558
 80046c8:	3ecccccd 	.word	0x3ecccccd
 80046cc:	20001664 	.word	0x20001664
 80046d0:	200003ec 	.word	0x200003ec
 80046d4:	20001709 	.word	0x20001709
 80046d8:	200006c0 	.word	0x200006c0
 80046dc:	200006c4 	.word	0x200006c4
 80046e0:	200003f0 	.word	0x200003f0
 80046e4:	200003dc 	.word	0x200003dc
 80046e8:	200003e0 	.word	0x200003e0
 80046ec:	200003e4 	.word	0x200003e4
 80046f0:	200003e8 	.word	0x200003e8
 80046f4:	200016ec 	.word	0x200016ec
 80046f8:	200016e8 	.word	0x200016e8
 80046fc:	20001aa0 	.word	0x20001aa0
 8004700:	200006f8 	.word	0x200006f8
 8004704:	20000208 	.word	0x20000208
 8004708:	2000168c 	.word	0x2000168c
 800470c:	20001690 	.word	0x20001690
 8004710:	2000158c 	.word	0x2000158c
 8004714:	200015b8 	.word	0x200015b8
//				} else {
//					__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4, 500);
//					modbus_servo_Status(&hmodbus, Limit_Up);
//				}

			} else if (Base_Sysytem_status == Base_Run_Point_mode) {
 8004718:	4b6b      	ldr	r3, [pc, #428]	@ (80048c8 <main+0x1148>)
 800471a:	781b      	ldrb	r3, [r3, #0]
 800471c:	2b04      	cmp	r3, #4
 800471e:	d11a      	bne.n	8004756 <main+0xfd6>

				Goal_r_position = modbus_set_goal_r_position(&hmodbus);
 8004720:	486a      	ldr	r0, [pc, #424]	@ (80048cc <main+0x114c>)
 8004722:	f7fc fe5c 	bl	80013de <modbus_set_goal_r_position>
 8004726:	4603      	mov	r3, r0
 8004728:	ee07 3a90 	vmov	s15, r3
 800472c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004730:	4b67      	ldr	r3, [pc, #412]	@ (80048d0 <main+0x1150>)
 8004732:	edc3 7a00 	vstr	s15, [r3]
				Goal_theta_position = modbus_set_goal_theta_position(&hmodbus);
 8004736:	4865      	ldr	r0, [pc, #404]	@ (80048cc <main+0x114c>)
 8004738:	f7fc fe69 	bl	800140e <modbus_set_goal_theta_position>
 800473c:	4603      	mov	r3, r0
 800473e:	ee07 3a90 	vmov	s15, r3
 8004742:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004746:	4b63      	ldr	r3, [pc, #396]	@ (80048d4 <main+0x1154>)
 8004748:	edc3 7a00 	vstr	s15, [r3]
				R_Theta_moving_Status(&hmodbus, Run_Point_mode);
 800474c:	2104      	movs	r1, #4
 800474e:	485f      	ldr	r0, [pc, #380]	@ (80048cc <main+0x114c>)
 8004750:	f7fc fdb9 	bl	80012c6 <R_Theta_moving_Status>
 8004754:	e10a      	b.n	800496c <main+0x11ec>

			}

			else if (Base_Sysytem_status == Base_Go_to_Target) {
 8004756:	4b5c      	ldr	r3, [pc, #368]	@ (80048c8 <main+0x1148>)
 8004758:	781b      	ldrb	r3, [r3, #0]
 800475a:	2b08      	cmp	r3, #8
 800475c:	f040 8106 	bne.w	800496c <main+0x11ec>

				R_Theta_moving_Status(&hmodbus, Go_to_Target);
 8004760:	2108      	movs	r1, #8
 8004762:	485a      	ldr	r0, [pc, #360]	@ (80048cc <main+0x114c>)
 8004764:	f7fc fdaf 	bl	80012c6 <R_Theta_moving_Status>

				state_go_to = 1;
 8004768:	4b5b      	ldr	r3, [pc, #364]	@ (80048d8 <main+0x1158>)
 800476a:	2201      	movs	r2, #1
 800476c:	601a      	str	r2, [r3, #0]

				if (!has_initialized_target_traj) {
 800476e:	4b5b      	ldr	r3, [pc, #364]	@ (80048dc <main+0x115c>)
 8004770:	781b      	ldrb	r3, [r3, #0]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d156      	bne.n	8004824 <main+0x10a4>
					Coordinate_Base_to_Robot(&Go_to_point, Goal_r_position,
 8004776:	4b56      	ldr	r3, [pc, #344]	@ (80048d0 <main+0x1150>)
 8004778:	edd3 7a00 	vldr	s15, [r3]
 800477c:	4b55      	ldr	r3, [pc, #340]	@ (80048d4 <main+0x1154>)
 800477e:	ed93 7a00 	vldr	s14, [r3]
 8004782:	eef0 0a47 	vmov.f32	s1, s14
 8004786:	eeb0 0a67 	vmov.f32	s0, s15
 800478a:	4855      	ldr	r0, [pc, #340]	@ (80048e0 <main+0x1160>)
 800478c:	f7fc fe58 	bl	8001440 <Coordinate_Base_to_Robot>
							Goal_theta_position);

					traj_start_time_target = HAL_GetTick() / 1000.0f;
 8004790:	f001 feea 	bl	8006568 <HAL_GetTick>
 8004794:	ee07 0a90 	vmov	s15, r0
 8004798:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800479c:	eddf 6a51 	vldr	s13, [pc, #324]	@ 80048e4 <main+0x1164>
 80047a0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80047a4:	4b50      	ldr	r3, [pc, #320]	@ (80048e8 <main+0x1168>)
 80047a6:	edc3 7a00 	vstr	s15, [r3]
					has_initialized_target_traj = 1;
 80047aa:	4b4c      	ldr	r3, [pc, #304]	@ (80048dc <main+0x115c>)
 80047ac:	2201      	movs	r2, #1
 80047ae:	701a      	strb	r2, [r3, #0]

					start_p = Go_to_point.r_goal_position;
 80047b0:	4b4b      	ldr	r3, [pc, #300]	@ (80048e0 <main+0x1160>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4a4d      	ldr	r2, [pc, #308]	@ (80048ec <main+0x116c>)
 80047b6:	6013      	str	r3, [r2, #0]
					start_r = Go_to_point.theta_goal_position - 0.436332f + 0.02;
 80047b8:	4b49      	ldr	r3, [pc, #292]	@ (80048e0 <main+0x1160>)
 80047ba:	edd3 7a01 	vldr	s15, [r3, #4]
 80047be:	ed9f 7a4c 	vldr	s14, [pc, #304]	@ 80048f0 <main+0x1170>
 80047c2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80047c6:	ee17 0a90 	vmov	r0, s15
 80047ca:	f7fb fe89 	bl	80004e0 <__aeabi_f2d>
 80047ce:	a33c      	add	r3, pc, #240	@ (adr r3, 80048c0 <main+0x1140>)
 80047d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047d4:	f7fb fd26 	bl	8000224 <__adddf3>
 80047d8:	4602      	mov	r2, r0
 80047da:	460b      	mov	r3, r1
 80047dc:	4610      	mov	r0, r2
 80047de:	4619      	mov	r1, r3
 80047e0:	f7fc f9a6 	bl	8000b30 <__aeabi_d2f>
 80047e4:	4603      	mov	r3, r0
 80047e6:	4a43      	ldr	r2, [pc, #268]	@ (80048f4 <main+0x1174>)
 80047e8:	6013      	str	r3, [r2, #0]
					InitTrajectorySegment(&Prismatic[0], 0.0f, -10.0f,
 80047ea:	ed9f 2a43 	vldr	s4, [pc, #268]	@ 80048f8 <main+0x1178>
 80047ee:	eddf 1a43 	vldr	s3, [pc, #268]	@ 80048fc <main+0x117c>
 80047f2:	ed9f 1a43 	vldr	s2, [pc, #268]	@ 8004900 <main+0x1180>
 80047f6:	eefa 0a04 	vmov.f32	s1, #164	@ 0xc1200000 -10.0
 80047fa:	ed9f 0a3f 	vldr	s0, [pc, #252]	@ 80048f8 <main+0x1178>
 80047fe:	4841      	ldr	r0, [pc, #260]	@ (8004904 <main+0x1184>)
 8004800:	f7fe fb2a 	bl	8002e58 <InitTrajectorySegment>
					v_max_pris, a_max_pris, 0.0f);
					InitTrajectorySegment(&Revolute[0], 0.0f, start_r,
 8004804:	4b3b      	ldr	r3, [pc, #236]	@ (80048f4 <main+0x1174>)
 8004806:	edd3 7a00 	vldr	s15, [r3]
 800480a:	ed9f 2a3b 	vldr	s4, [pc, #236]	@ 80048f8 <main+0x1178>
 800480e:	eddf 1a3e 	vldr	s3, [pc, #248]	@ 8004908 <main+0x1188>
 8004812:	eeb7 1a00 	vmov.f32	s2, #112	@ 0x3f800000  1.0
 8004816:	eef0 0a67 	vmov.f32	s1, s15
 800481a:	ed9f 0a37 	vldr	s0, [pc, #220]	@ 80048f8 <main+0x1178>
 800481e:	483b      	ldr	r0, [pc, #236]	@ (800490c <main+0x118c>)
 8004820:	f7fe fb1a 	bl	8002e58 <InitTrajectorySegment>
					v_max_rev, a_max_rev, 0.0f);
				}

				float t_rel = t_global - traj_start_time_target;
 8004824:	4b3a      	ldr	r3, [pc, #232]	@ (8004910 <main+0x1190>)
 8004826:	ed93 7a00 	vldr	s14, [r3]
 800482a:	4b2f      	ldr	r3, [pc, #188]	@ (80048e8 <main+0x1168>)
 800482c:	edd3 7a00 	vldr	s15, [r3]
 8004830:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004834:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
				pos_pris = GetTrajectoryPosition(&Prismatic[0], t_rel);
 8004838:	ed97 0a18 	vldr	s0, [r7, #96]	@ 0x60
 800483c:	4831      	ldr	r0, [pc, #196]	@ (8004904 <main+0x1184>)
 800483e:	f7fe fbc1 	bl	8002fc4 <GetTrajectoryPosition>
 8004842:	eef0 7a40 	vmov.f32	s15, s0
 8004846:	4b33      	ldr	r3, [pc, #204]	@ (8004914 <main+0x1194>)
 8004848:	edc3 7a00 	vstr	s15, [r3]
				vel_pris = GetTrajectoryVelocity(&Prismatic[0], t_rel);
 800484c:	ed97 0a18 	vldr	s0, [r7, #96]	@ 0x60
 8004850:	482c      	ldr	r0, [pc, #176]	@ (8004904 <main+0x1184>)
 8004852:	f7fe fc8d 	bl	8003170 <GetTrajectoryVelocity>
 8004856:	eef0 7a40 	vmov.f32	s15, s0
 800485a:	4b2f      	ldr	r3, [pc, #188]	@ (8004918 <main+0x1198>)
 800485c:	edc3 7a00 	vstr	s15, [r3]
				pos_rev = GetTrajectoryPosition(&Revolute[0], t_rel);
 8004860:	ed97 0a18 	vldr	s0, [r7, #96]	@ 0x60
 8004864:	4829      	ldr	r0, [pc, #164]	@ (800490c <main+0x118c>)
 8004866:	f7fe fbad 	bl	8002fc4 <GetTrajectoryPosition>
 800486a:	eef0 7a40 	vmov.f32	s15, s0
 800486e:	4b2b      	ldr	r3, [pc, #172]	@ (800491c <main+0x119c>)
 8004870:	edc3 7a00 	vstr	s15, [r3]
				vel_rev = GetTrajectoryVelocity(&Revolute[0], t_rel);
 8004874:	ed97 0a18 	vldr	s0, [r7, #96]	@ 0x60
 8004878:	4824      	ldr	r0, [pc, #144]	@ (800490c <main+0x118c>)
 800487a:	f7fe fc79 	bl	8003170 <GetTrajectoryVelocity>
 800487e:	eef0 7a40 	vmov.f32	s15, s0
 8004882:	4b27      	ldr	r3, [pc, #156]	@ (8004920 <main+0x11a0>)
 8004884:	edc3 7a00 	vstr	s15, [r3]

				if (plotter == 1) // Pen_Up
 8004888:	4b26      	ldr	r3, [pc, #152]	@ (8004924 <main+0x11a4>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	2b01      	cmp	r3, #1
 800488e:	d109      	bne.n	80048a4 <main+0x1124>
				{
					__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4, 500);
 8004890:	4b25      	ldr	r3, [pc, #148]	@ (8004928 <main+0x11a8>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8004898:	641a      	str	r2, [r3, #64]	@ 0x40
					modbus_servo_Status(&hmodbus, Limit_Up);
 800489a:	2102      	movs	r1, #2
 800489c:	480b      	ldr	r0, [pc, #44]	@ (80048cc <main+0x114c>)
 800489e:	f7fc fce0 	bl	8001262 <modbus_servo_Status>
 80048a2:	e047      	b.n	8004934 <main+0x11b4>
				} else if (plotter == 2) // Pen_Down
 80048a4:	4b1f      	ldr	r3, [pc, #124]	@ (8004924 <main+0x11a4>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	2b02      	cmp	r3, #2
 80048aa:	d13f      	bne.n	800492c <main+0x11ac>
//					if (status < 2000) {
//						status += 1;
//					} else {
//						status += 0;
//					}
					__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4, 2000);
 80048ac:	4b1e      	ldr	r3, [pc, #120]	@ (8004928 <main+0x11a8>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80048b4:	641a      	str	r2, [r3, #64]	@ 0x40
					modbus_servo_Status(&hmodbus, Limit_Down);
 80048b6:	2101      	movs	r1, #1
 80048b8:	4804      	ldr	r0, [pc, #16]	@ (80048cc <main+0x114c>)
 80048ba:	f7fc fcd2 	bl	8001262 <modbus_servo_Status>
 80048be:	e039      	b.n	8004934 <main+0x11b4>
 80048c0:	47ae147b 	.word	0x47ae147b
 80048c4:	3f947ae1 	.word	0x3f947ae1
 80048c8:	20000d60 	.word	0x20000d60
 80048cc:	200006f8 	.word	0x200006f8
 80048d0:	20000d64 	.word	0x20000d64
 80048d4:	20000d68 	.word	0x20000d68
 80048d8:	200016f0 	.word	0x200016f0
 80048dc:	200006d4 	.word	0x200006d4
 80048e0:	200016e0 	.word	0x200016e0
 80048e4:	447a0000 	.word	0x447a0000
 80048e8:	200006d0 	.word	0x200006d0
 80048ec:	200006c8 	.word	0x200006c8
 80048f0:	3edf66e8 	.word	0x3edf66e8
 80048f4:	200006cc 	.word	0x200006cc
 80048f8:	00000000 	.word	0x00000000
 80048fc:	437a0000 	.word	0x437a0000
 8004900:	43fa0000 	.word	0x43fa0000
 8004904:	200003f0 	.word	0x200003f0
 8004908:	3ecccccd 	.word	0x3ecccccd
 800490c:	20000558 	.word	0x20000558
 8004910:	200006c0 	.word	0x200006c0
 8004914:	200003dc 	.word	0x200003dc
 8004918:	200003e0 	.word	0x200003e0
 800491c:	200003e4 	.word	0x200003e4
 8004920:	200003e8 	.word	0x200003e8
 8004924:	200016e8 	.word	0x200016e8
 8004928:	20001aa0 	.word	0x20001aa0
				} else {
					__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4, 0);
 800492c:	4bc4      	ldr	r3, [pc, #784]	@ (8004c40 <main+0x14c0>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	2200      	movs	r2, #0
 8004932:	641a      	str	r2, [r3, #64]	@ 0x40
				}

				float t_end = Revolute[0].t_start + Revolute[0].t_total;
 8004934:	4bc3      	ldr	r3, [pc, #780]	@ (8004c44 <main+0x14c4>)
 8004936:	ed93 7a08 	vldr	s14, [r3, #32]
 800493a:	4bc2      	ldr	r3, [pc, #776]	@ (8004c44 <main+0x14c4>)
 800493c:	edd3 7a07 	vldr	s15, [r3, #28]
 8004940:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004944:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
//				} else {
//					__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4, 500);
//					modbus_servo_Status(&hmodbus, Limit_Up);
//				}

				if (t_global > t_end + 2.0f) {
 8004948:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 800494c:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8004950:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004954:	4bbc      	ldr	r3, [pc, #752]	@ (8004c48 <main+0x14c8>)
 8004956:	edd3 7a00 	vldr	s15, [r3]
 800495a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800495e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004962:	d503      	bpl.n	800496c <main+0x11ec>
					R_Theta_moving_Status(&hmodbus, Idle);
 8004964:	2100      	movs	r1, #0
 8004966:	48b9      	ldr	r0, [pc, #740]	@ (8004c4c <main+0x14cc>)
 8004968:	f7fc fcad 	bl	80012c6 <R_Theta_moving_Status>
				}
			}

			if (Base_Sysytem_status != Base_Go_to_Target) {
 800496c:	4bb8      	ldr	r3, [pc, #736]	@ (8004c50 <main+0x14d0>)
 800496e:	781b      	ldrb	r3, [r3, #0]
 8004970:	2b08      	cmp	r3, #8
 8004972:	d005      	beq.n	8004980 <main+0x1200>
				has_initialized_target_traj = 0;
 8004974:	4bb7      	ldr	r3, [pc, #732]	@ (8004c54 <main+0x14d4>)
 8004976:	2200      	movs	r2, #0
 8004978:	701a      	strb	r2, [r3, #0]
				state_go_to = 0;
 800497a:	4bb7      	ldr	r3, [pc, #732]	@ (8004c58 <main+0x14d8>)
 800497c:	2200      	movs	r2, #0
 800497e:	601a      	str	r2, [r3, #0]
			}
//			if (state_start == 1 || state_go_to == 1)
//			{
			Measurement_Pris[0] = Encoder_GetPosition_mm(&encoder1);
 8004980:	48b6      	ldr	r0, [pc, #728]	@ (8004c5c <main+0x14dc>)
 8004982:	f7fd fb33 	bl	8001fec <Encoder_GetPosition_mm>
 8004986:	eef0 7a40 	vmov.f32	s15, s0
 800498a:	4bb5      	ldr	r3, [pc, #724]	@ (8004c60 <main+0x14e0>)
 800498c:	edc3 7a00 	vstr	s15, [r3]
			Measurement_Pris[1] = Encoder_GetVelocity_mm(&encoder1);
 8004990:	48b2      	ldr	r0, [pc, #712]	@ (8004c5c <main+0x14dc>)
 8004992:	f7fd fb3a 	bl	800200a <Encoder_GetVelocity_mm>
 8004996:	eef0 7a40 	vmov.f32	s15, s0
 800499a:	4bb1      	ldr	r3, [pc, #708]	@ (8004c60 <main+0x14e0>)
 800499c:	edc3 7a01 	vstr	s15, [r3, #4]
			Measurement_Pris[2] = 0;
 80049a0:	4baf      	ldr	r3, [pc, #700]	@ (8004c60 <main+0x14e0>)
 80049a2:	f04f 0200 	mov.w	r2, #0
 80049a6:	609a      	str	r2, [r3, #8]
			Measurement_Pris[3] = 0;
 80049a8:	4bad      	ldr	r3, [pc, #692]	@ (8004c60 <main+0x14e0>)
 80049aa:	f04f 0200 	mov.w	r2, #0
 80049ae:	60da      	str	r2, [r3, #12]

			Kalman_SetInput(&kf_pris, V_pris_velo_PID);
 80049b0:	4bac      	ldr	r3, [pc, #688]	@ (8004c64 <main+0x14e4>)
 80049b2:	edd3 7a00 	vldr	s15, [r3]
 80049b6:	eeb0 0a67 	vmov.f32	s0, s15
 80049ba:	48ab      	ldr	r0, [pc, #684]	@ (8004c68 <main+0x14e8>)
 80049bc:	f7fd fd18 	bl	80023f0 <Kalman_SetInput>
			Kalman_Predict(&kf_pris);
 80049c0:	48a9      	ldr	r0, [pc, #676]	@ (8004c68 <main+0x14e8>)
 80049c2:	f7fd fd25 	bl	8002410 <Kalman_Predict>
			Kalman_Update(&kf_pris, Measurement_Pris);
 80049c6:	49a6      	ldr	r1, [pc, #664]	@ (8004c60 <main+0x14e0>)
 80049c8:	48a7      	ldr	r0, [pc, #668]	@ (8004c68 <main+0x14e8>)
 80049ca:	f7fd fd6e 	bl	80024aa <Kalman_Update>

			Measurement_Rev[0] = Encoder_GetPosition(&encoder2) / (100.0 / 30.0);
 80049ce:	48a7      	ldr	r0, [pc, #668]	@ (8004c6c <main+0x14ec>)
 80049d0:	f7fd fad0 	bl	8001f74 <Encoder_GetPosition>
 80049d4:	ee10 3a10 	vmov	r3, s0
 80049d8:	4618      	mov	r0, r3
 80049da:	f7fb fd81 	bl	80004e0 <__aeabi_f2d>
 80049de:	a394      	add	r3, pc, #592	@ (adr r3, 8004c30 <main+0x14b0>)
 80049e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049e4:	f7fb fefe 	bl	80007e4 <__aeabi_ddiv>
 80049e8:	4602      	mov	r2, r0
 80049ea:	460b      	mov	r3, r1
 80049ec:	4610      	mov	r0, r2
 80049ee:	4619      	mov	r1, r3
 80049f0:	f7fc f89e 	bl	8000b30 <__aeabi_d2f>
 80049f4:	4603      	mov	r3, r0
 80049f6:	4a9e      	ldr	r2, [pc, #632]	@ (8004c70 <main+0x14f0>)
 80049f8:	6013      	str	r3, [r2, #0]
			Measurement_Rev[1] = Encoder_GetVelocity(&encoder2) / (100.0 / 30.0);
 80049fa:	489c      	ldr	r0, [pc, #624]	@ (8004c6c <main+0x14ec>)
 80049fc:	f7fd fac9 	bl	8001f92 <Encoder_GetVelocity>
 8004a00:	ee10 3a10 	vmov	r3, s0
 8004a04:	4618      	mov	r0, r3
 8004a06:	f7fb fd6b 	bl	80004e0 <__aeabi_f2d>
 8004a0a:	a389      	add	r3, pc, #548	@ (adr r3, 8004c30 <main+0x14b0>)
 8004a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a10:	f7fb fee8 	bl	80007e4 <__aeabi_ddiv>
 8004a14:	4602      	mov	r2, r0
 8004a16:	460b      	mov	r3, r1
 8004a18:	4610      	mov	r0, r2
 8004a1a:	4619      	mov	r1, r3
 8004a1c:	f7fc f888 	bl	8000b30 <__aeabi_d2f>
 8004a20:	4603      	mov	r3, r0
 8004a22:	4a93      	ldr	r2, [pc, #588]	@ (8004c70 <main+0x14f0>)
 8004a24:	6053      	str	r3, [r2, #4]
			Measurement_Rev[2] = 0;
 8004a26:	4b92      	ldr	r3, [pc, #584]	@ (8004c70 <main+0x14f0>)
 8004a28:	f04f 0200 	mov.w	r2, #0
 8004a2c:	609a      	str	r2, [r3, #8]
			Measurement_Rev[3] = 0;
 8004a2e:	4b90      	ldr	r3, [pc, #576]	@ (8004c70 <main+0x14f0>)
 8004a30:	f04f 0200 	mov.w	r2, #0
 8004a34:	60da      	str	r2, [r3, #12]

			Kalman_SetInput(&kf_rev, V_rev_velo_PID);
 8004a36:	4b8f      	ldr	r3, [pc, #572]	@ (8004c74 <main+0x14f4>)
 8004a38:	edd3 7a00 	vldr	s15, [r3]
 8004a3c:	eeb0 0a67 	vmov.f32	s0, s15
 8004a40:	488d      	ldr	r0, [pc, #564]	@ (8004c78 <main+0x14f8>)
 8004a42:	f7fd fcd5 	bl	80023f0 <Kalman_SetInput>
			Kalman_Predict(&kf_rev);
 8004a46:	488c      	ldr	r0, [pc, #560]	@ (8004c78 <main+0x14f8>)
 8004a48:	f7fd fce2 	bl	8002410 <Kalman_Predict>
			Kalman_Update(&kf_rev, Measurement_Rev);
 8004a4c:	4988      	ldr	r1, [pc, #544]	@ (8004c70 <main+0x14f0>)
 8004a4e:	488a      	ldr	r0, [pc, #552]	@ (8004c78 <main+0x14f8>)
 8004a50:	f7fd fd2b 	bl	80024aa <Kalman_Update>
//			}
			modbus_Update_All(&hmodbus, Encoder_GetPosition_mm(&encoder1), // r_pos
 8004a54:	4881      	ldr	r0, [pc, #516]	@ (8004c5c <main+0x14dc>)
 8004a56:	f7fd fac9 	bl	8001fec <Encoder_GetPosition_mm>
 8004a5a:	eeb0 8a40 	vmov.f32	s16, s0
 8004a5e:	4883      	ldr	r0, [pc, #524]	@ (8004c6c <main+0x14ec>)
 8004a60:	f7fd fab5 	bl	8001fce <Encoder_GetDegree>
 8004a64:	eef0 8a40 	vmov.f32	s17, s0
 8004a68:	487c      	ldr	r0, [pc, #496]	@ (8004c5c <main+0x14dc>)
 8004a6a:	f7fd face 	bl	800200a <Encoder_GetVelocity_mm>
 8004a6e:	eeb0 9a40 	vmov.f32	s18, s0
			Encoder_GetDegree(&encoder2), // theta_pos
			Encoder_GetVelocity_mm(&encoder1), // r_velo
			Encoder_GetVelocity(&encoder2) * 180.0 / 3.142, // theta_velo
 8004a72:	487e      	ldr	r0, [pc, #504]	@ (8004c6c <main+0x14ec>)
 8004a74:	f7fd fa8d 	bl	8001f92 <Encoder_GetVelocity>
 8004a78:	ee10 3a10 	vmov	r3, s0
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	f7fb fd2f 	bl	80004e0 <__aeabi_f2d>
 8004a82:	f04f 0200 	mov.w	r2, #0
 8004a86:	4b7d      	ldr	r3, [pc, #500]	@ (8004c7c <main+0x14fc>)
 8004a88:	f7fb fd82 	bl	8000590 <__aeabi_dmul>
 8004a8c:	4602      	mov	r2, r0
 8004a8e:	460b      	mov	r3, r1
 8004a90:	4610      	mov	r0, r2
 8004a92:	4619      	mov	r1, r3
 8004a94:	a368      	add	r3, pc, #416	@ (adr r3, 8004c38 <main+0x14b8>)
 8004a96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a9a:	f7fb fea3 	bl	80007e4 <__aeabi_ddiv>
 8004a9e:	4602      	mov	r2, r0
 8004aa0:	460b      	mov	r3, r1
			modbus_Update_All(&hmodbus, Encoder_GetPosition_mm(&encoder1), // r_pos
 8004aa2:	4610      	mov	r0, r2
 8004aa4:	4619      	mov	r1, r3
 8004aa6:	f7fc f843 	bl	8000b30 <__aeabi_d2f>
 8004aaa:	4604      	mov	r4, r0
 8004aac:	486b      	ldr	r0, [pc, #428]	@ (8004c5c <main+0x14dc>)
 8004aae:	f7fd fabb 	bl	8002028 <Encoder_GetAcceleration_mm>
 8004ab2:	eef0 9a40 	vmov.f32	s19, s0
			Encoder_GetAcceleration_mm(&encoder1), // r_accel
			Encoder_GetAcceleration(&encoder2) * 180.0 / 3.142); // theta_accel
 8004ab6:	486d      	ldr	r0, [pc, #436]	@ (8004c6c <main+0x14ec>)
 8004ab8:	f7fd fa7a 	bl	8001fb0 <Encoder_GetAcceleration>
 8004abc:	ee10 3a10 	vmov	r3, s0
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	f7fb fd0d 	bl	80004e0 <__aeabi_f2d>
 8004ac6:	f04f 0200 	mov.w	r2, #0
 8004aca:	4b6c      	ldr	r3, [pc, #432]	@ (8004c7c <main+0x14fc>)
 8004acc:	f7fb fd60 	bl	8000590 <__aeabi_dmul>
 8004ad0:	4602      	mov	r2, r0
 8004ad2:	460b      	mov	r3, r1
 8004ad4:	4610      	mov	r0, r2
 8004ad6:	4619      	mov	r1, r3
 8004ad8:	a357      	add	r3, pc, #348	@ (adr r3, 8004c38 <main+0x14b8>)
 8004ada:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ade:	f7fb fe81 	bl	80007e4 <__aeabi_ddiv>
 8004ae2:	4602      	mov	r2, r0
 8004ae4:	460b      	mov	r3, r1
			modbus_Update_All(&hmodbus, Encoder_GetPosition_mm(&encoder1), // r_pos
 8004ae6:	4610      	mov	r0, r2
 8004ae8:	4619      	mov	r1, r3
 8004aea:	f7fc f821 	bl	8000b30 <__aeabi_d2f>
 8004aee:	4603      	mov	r3, r0
 8004af0:	ee02 3a90 	vmov	s5, r3
 8004af4:	eeb0 2a69 	vmov.f32	s4, s19
 8004af8:	ee01 4a90 	vmov	s3, r4
 8004afc:	eeb0 1a49 	vmov.f32	s2, s18
 8004b00:	eef0 0a68 	vmov.f32	s1, s17
 8004b04:	eeb0 0a48 	vmov.f32	s0, s16
 8004b08:	4850      	ldr	r0, [pc, #320]	@ (8004c4c <main+0x14cc>)
 8004b0a:	f7fc fbee 	bl	80012ea <modbus_Update_All>

			if (state_start == 1 || state_go_to == 1) {
 8004b0e:	4b5c      	ldr	r3, [pc, #368]	@ (8004c80 <main+0x1500>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	2b01      	cmp	r3, #1
 8004b14:	d004      	beq.n	8004b20 <main+0x13a0>
 8004b16:	4b50      	ldr	r3, [pc, #320]	@ (8004c58 <main+0x14d8>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	2b01      	cmp	r3, #1
 8004b1c:	f040 8168 	bne.w	8004df0 <main+0x1670>
				Revolute_dis();
 8004b20:	f000 fd62 	bl	80055e8 <Revolute_dis>
				count_Tim2 += 1;
 8004b24:	4b57      	ldr	r3, [pc, #348]	@ (8004c84 <main+0x1504>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	3301      	adds	r3, #1
 8004b2a:	4a56      	ldr	r2, [pc, #344]	@ (8004c84 <main+0x1504>)
 8004b2c:	6013      	str	r3, [r2, #0]
				// Velocity Control Prismatic
				velocity_pris = Encoder_GetVelocity_mm(&encoder1);
 8004b2e:	484b      	ldr	r0, [pc, #300]	@ (8004c5c <main+0x14dc>)
 8004b30:	f7fd fa6b 	bl	800200a <Encoder_GetVelocity_mm>
 8004b34:	eef0 7a40 	vmov.f32	s15, s0
 8004b38:	4b53      	ldr	r3, [pc, #332]	@ (8004c88 <main+0x1508>)
 8004b3a:	edc3 7a00 	vstr	s15, [r3]
				//			setvelocity_pris = GetTrajectoryVelocity(&Prismatic[current_segment], t_global) + V_pris_posi_PID;
				setvelocity_pris = vel_pris + V_pris_posi_PID;
 8004b3e:	4b53      	ldr	r3, [pc, #332]	@ (8004c8c <main+0x150c>)
 8004b40:	ed93 7a00 	vldr	s14, [r3]
 8004b44:	4b52      	ldr	r3, [pc, #328]	@ (8004c90 <main+0x1510>)
 8004b46:	edd3 7a00 	vldr	s15, [r3]
 8004b4a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004b4e:	4b51      	ldr	r3, [pc, #324]	@ (8004c94 <main+0x1514>)
 8004b50:	edc3 7a00 	vstr	s15, [r3]
				delta_velo_pris = setvelocity_pris - velocity_pris;
 8004b54:	4b4f      	ldr	r3, [pc, #316]	@ (8004c94 <main+0x1514>)
 8004b56:	ed93 7a00 	vldr	s14, [r3]
 8004b5a:	4b4b      	ldr	r3, [pc, #300]	@ (8004c88 <main+0x1508>)
 8004b5c:	edd3 7a00 	vldr	s15, [r3]
 8004b60:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004b64:	4b4c      	ldr	r3, [pc, #304]	@ (8004c98 <main+0x1518>)
 8004b66:	edc3 7a00 	vstr	s15, [r3]
				//			delta_velo_pris = setvelocity_pris - kf_pris.x_data[1];
				V_pris_velo_PID = Prismatic_velocity_control(delta_velo_pris);
 8004b6a:	4b4b      	ldr	r3, [pc, #300]	@ (8004c98 <main+0x1518>)
 8004b6c:	edd3 7a00 	vldr	s15, [r3]
 8004b70:	eeb0 0a67 	vmov.f32	s0, s15
 8004b74:	f000 fb56 	bl	8005224 <Prismatic_velocity_control>
 8004b78:	eef0 7a40 	vmov.f32	s15, s0
 8004b7c:	4b39      	ldr	r3, [pc, #228]	@ (8004c64 <main+0x14e4>)
 8004b7e:	edc3 7a00 	vstr	s15, [r3]

				// Velocity Control revolute
				velocity_rev = Encoder_GetVelocity(&encoder2) / (100.0 / 30.0);
 8004b82:	483a      	ldr	r0, [pc, #232]	@ (8004c6c <main+0x14ec>)
 8004b84:	f7fd fa05 	bl	8001f92 <Encoder_GetVelocity>
 8004b88:	ee10 3a10 	vmov	r3, s0
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	f7fb fca7 	bl	80004e0 <__aeabi_f2d>
 8004b92:	a327      	add	r3, pc, #156	@ (adr r3, 8004c30 <main+0x14b0>)
 8004b94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b98:	f7fb fe24 	bl	80007e4 <__aeabi_ddiv>
 8004b9c:	4602      	mov	r2, r0
 8004b9e:	460b      	mov	r3, r1
 8004ba0:	4610      	mov	r0, r2
 8004ba2:	4619      	mov	r1, r3
 8004ba4:	f7fb ffc4 	bl	8000b30 <__aeabi_d2f>
 8004ba8:	4603      	mov	r3, r0
 8004baa:	4a3c      	ldr	r2, [pc, #240]	@ (8004c9c <main+0x151c>)
 8004bac:	6013      	str	r3, [r2, #0]
				//			setvelocity_rev = GetTrajectoryVelocity(&Revolute[current_segment], t_global) + V_rev_posi_PID;
				setvelocity_rev = vel_rev + V_rev_posi_PID;
 8004bae:	4b3c      	ldr	r3, [pc, #240]	@ (8004ca0 <main+0x1520>)
 8004bb0:	ed93 7a00 	vldr	s14, [r3]
 8004bb4:	4b3b      	ldr	r3, [pc, #236]	@ (8004ca4 <main+0x1524>)
 8004bb6:	edd3 7a00 	vldr	s15, [r3]
 8004bba:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004bbe:	4b3a      	ldr	r3, [pc, #232]	@ (8004ca8 <main+0x1528>)
 8004bc0:	edc3 7a00 	vstr	s15, [r3]
				//			delta_velo_rev = setvelocity_rev - velocity_rev;
				delta_velo_rev = setvelocity_rev - kf_rev.x_data[1];
 8004bc4:	4b38      	ldr	r3, [pc, #224]	@ (8004ca8 <main+0x1528>)
 8004bc6:	ed93 7a00 	vldr	s14, [r3]
 8004bca:	4b2b      	ldr	r3, [pc, #172]	@ (8004c78 <main+0x14f8>)
 8004bcc:	edd3 7a8e 	vldr	s15, [r3, #568]	@ 0x238
 8004bd0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004bd4:	4b35      	ldr	r3, [pc, #212]	@ (8004cac <main+0x152c>)
 8004bd6:	edc3 7a00 	vstr	s15, [r3]
				V_rev_velo_PID = Revolute_velocity_control(delta_velo_rev);
 8004bda:	4b34      	ldr	r3, [pc, #208]	@ (8004cac <main+0x152c>)
 8004bdc:	edd3 7a00 	vldr	s15, [r3]
 8004be0:	eeb0 0a67 	vmov.f32	s0, s15
 8004be4:	f000 fc44 	bl	8005470 <Revolute_velocity_control>
 8004be8:	eef0 7a40 	vmov.f32	s15, s0
 8004bec:	4b21      	ldr	r3, [pc, #132]	@ (8004c74 <main+0x14f4>)
 8004bee:	edc3 7a00 	vstr	s15, [r3]
				if (count_Tim2 >= 10) {
 8004bf2:	4b24      	ldr	r3, [pc, #144]	@ (8004c84 <main+0x1504>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	2b09      	cmp	r3, #9
 8004bf8:	f340 80fa 	ble.w	8004df0 <main+0x1670>
					// Position Control Prismatic
					position_pris = Encoder_GetPosition_mm(&encoder1);
 8004bfc:	4817      	ldr	r0, [pc, #92]	@ (8004c5c <main+0x14dc>)
 8004bfe:	f7fd f9f5 	bl	8001fec <Encoder_GetPosition_mm>
 8004c02:	eef0 7a40 	vmov.f32	s15, s0
 8004c06:	4b2a      	ldr	r3, [pc, #168]	@ (8004cb0 <main+0x1530>)
 8004c08:	edc3 7a00 	vstr	s15, [r3]
					//				setposition_pris = GetTrajectoryPosition(&Prismatic[current_segment], t_global);
					setposition_pris = pos_pris;
 8004c0c:	4b29      	ldr	r3, [pc, #164]	@ (8004cb4 <main+0x1534>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4a29      	ldr	r2, [pc, #164]	@ (8004cb8 <main+0x1538>)
 8004c12:	6013      	str	r3, [r2, #0]
					delta_posi_pris = setposition_pris - position_pris;
 8004c14:	4b28      	ldr	r3, [pc, #160]	@ (8004cb8 <main+0x1538>)
 8004c16:	ed93 7a00 	vldr	s14, [r3]
 8004c1a:	4b25      	ldr	r3, [pc, #148]	@ (8004cb0 <main+0x1530>)
 8004c1c:	edd3 7a00 	vldr	s15, [r3]
 8004c20:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004c24:	4b25      	ldr	r3, [pc, #148]	@ (8004cbc <main+0x153c>)
 8004c26:	edc3 7a00 	vstr	s15, [r3]
 8004c2a:	e049      	b.n	8004cc0 <main+0x1540>
 8004c2c:	f3af 8000 	nop.w
 8004c30:	aaaaaaab 	.word	0xaaaaaaab
 8004c34:	400aaaaa 	.word	0x400aaaaa
 8004c38:	e5604189 	.word	0xe5604189
 8004c3c:	400922d0 	.word	0x400922d0
 8004c40:	20001aa0 	.word	0x20001aa0
 8004c44:	20000558 	.word	0x20000558
 8004c48:	200006c0 	.word	0x200006c0
 8004c4c:	200006f8 	.word	0x200006f8
 8004c50:	20000d60 	.word	0x20000d60
 8004c54:	200006d4 	.word	0x200006d4
 8004c58:	200016f0 	.word	0x200016f0
 8004c5c:	2000036c 	.word	0x2000036c
 8004c60:	20001548 	.word	0x20001548
 8004c64:	20000df4 	.word	0x20000df4
 8004c68:	20000e8c 	.word	0x20000e8c
 8004c6c:	200003a0 	.word	0x200003a0
 8004c70:	20001558 	.word	0x20001558
 8004c74:	20000e70 	.word	0x20000e70
 8004c78:	200011b0 	.word	0x200011b0
 8004c7c:	40668000 	.word	0x40668000
 8004c80:	200016ec 	.word	0x200016ec
 8004c84:	20000d78 	.word	0x20000d78
 8004c88:	20000dec 	.word	0x20000dec
 8004c8c:	200003e0 	.word	0x200003e0
 8004c90:	20000db4 	.word	0x20000db4
 8004c94:	20000df0 	.word	0x20000df0
 8004c98:	20000e04 	.word	0x20000e04
 8004c9c:	20000e68 	.word	0x20000e68
 8004ca0:	200003e8 	.word	0x200003e8
 8004ca4:	20000e34 	.word	0x20000e34
 8004ca8:	20000e6c 	.word	0x20000e6c
 8004cac:	20000e80 	.word	0x20000e80
 8004cb0:	20000dac 	.word	0x20000dac
 8004cb4:	200003dc 	.word	0x200003dc
 8004cb8:	20000db0 	.word	0x20000db0
 8004cbc:	20000dc4 	.word	0x20000dc4
					if (delta_posi_pris <= 0.1 && delta_posi_pris >= -0.1) {
 8004cc0:	4b9d      	ldr	r3, [pc, #628]	@ (8004f38 <main+0x17b8>)
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	f7fb fc0b 	bl	80004e0 <__aeabi_f2d>
 8004cca:	a395      	add	r3, pc, #596	@ (adr r3, 8004f20 <main+0x17a0>)
 8004ccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cd0:	f7fb feda 	bl	8000a88 <__aeabi_dcmple>
 8004cd4:	4603      	mov	r3, r0
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d015      	beq.n	8004d06 <main+0x1586>
 8004cda:	4b97      	ldr	r3, [pc, #604]	@ (8004f38 <main+0x17b8>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4618      	mov	r0, r3
 8004ce0:	f7fb fbfe 	bl	80004e0 <__aeabi_f2d>
 8004ce4:	a390      	add	r3, pc, #576	@ (adr r3, 8004f28 <main+0x17a8>)
 8004ce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cea:	f7fb fed7 	bl	8000a9c <__aeabi_dcmpge>
 8004cee:	4603      	mov	r3, r0
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d008      	beq.n	8004d06 <main+0x1586>
						V_pris_posi_PID = 0;
 8004cf4:	4b91      	ldr	r3, [pc, #580]	@ (8004f3c <main+0x17bc>)
 8004cf6:	f04f 0200 	mov.w	r2, #0
 8004cfa:	601a      	str	r2, [r3, #0]
						V_pris_velo_PID = 0;
 8004cfc:	4b90      	ldr	r3, [pc, #576]	@ (8004f40 <main+0x17c0>)
 8004cfe:	f04f 0200 	mov.w	r2, #0
 8004d02:	601a      	str	r2, [r3, #0]
 8004d04:	e00b      	b.n	8004d1e <main+0x159e>
					} else {
						V_pris_posi_PID = Prismatic_position_control(
 8004d06:	4b8c      	ldr	r3, [pc, #560]	@ (8004f38 <main+0x17b8>)
 8004d08:	edd3 7a00 	vldr	s15, [r3]
 8004d0c:	eeb0 0a67 	vmov.f32	s0, s15
 8004d10:	f000 fa10 	bl	8005134 <Prismatic_position_control>
 8004d14:	eef0 7a40 	vmov.f32	s15, s0
 8004d18:	4b88      	ldr	r3, [pc, #544]	@ (8004f3c <main+0x17bc>)
 8004d1a:	edc3 7a00 	vstr	s15, [r3]
								delta_posi_pris);
					}
					//				V_pris_posi_PID = Prismatic_position_control(delta_posi_pris);

					// Position Control Revolute
					position_rev = (Encoder_GetPosition(&encoder2)
 8004d1e:	4889      	ldr	r0, [pc, #548]	@ (8004f44 <main+0x17c4>)
 8004d20:	f7fd f928 	bl	8001f74 <Encoder_GetPosition>
 8004d24:	ee10 3a10 	vmov	r3, s0
 8004d28:	4618      	mov	r0, r3
 8004d2a:	f7fb fbd9 	bl	80004e0 <__aeabi_f2d>
							/ (100.0 / 30.0));
 8004d2e:	a380      	add	r3, pc, #512	@ (adr r3, 8004f30 <main+0x17b0>)
 8004d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d34:	f7fb fd56 	bl	80007e4 <__aeabi_ddiv>
 8004d38:	4602      	mov	r2, r0
 8004d3a:	460b      	mov	r3, r1
 8004d3c:	4610      	mov	r0, r2
 8004d3e:	4619      	mov	r1, r3
 8004d40:	f7fb fef6 	bl	8000b30 <__aeabi_d2f>
 8004d44:	4603      	mov	r3, r0
					position_rev = (Encoder_GetPosition(&encoder2)
 8004d46:	4a80      	ldr	r2, [pc, #512]	@ (8004f48 <main+0x17c8>)
 8004d48:	6013      	str	r3, [r2, #0]
					//				setposition_rev = GetTrajectoryPosition(&Revolute[current_segment], t_global) + Rev_backlash.backlash_offset;
					setposition_rev = pos_rev; //+ Rev_backlash.backlash_offset;
 8004d4a:	4b80      	ldr	r3, [pc, #512]	@ (8004f4c <main+0x17cc>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4a80      	ldr	r2, [pc, #512]	@ (8004f50 <main+0x17d0>)
 8004d50:	6013      	str	r3, [r2, #0]
					Backlash_Update(&Rev_backlash, pos_rev, p2, v2);
 8004d52:	4b7e      	ldr	r3, [pc, #504]	@ (8004f4c <main+0x17cc>)
 8004d54:	edd3 7a00 	vldr	s15, [r3]
 8004d58:	4b7e      	ldr	r3, [pc, #504]	@ (8004f54 <main+0x17d4>)
 8004d5a:	ed93 7a00 	vldr	s14, [r3]
 8004d5e:	4b7e      	ldr	r3, [pc, #504]	@ (8004f58 <main+0x17d8>)
 8004d60:	edd3 6a00 	vldr	s13, [r3]
 8004d64:	eeb0 1a66 	vmov.f32	s2, s13
 8004d68:	eef0 0a47 	vmov.f32	s1, s14
 8004d6c:	eeb0 0a67 	vmov.f32	s0, s15
 8004d70:	487a      	ldr	r0, [pc, #488]	@ (8004f5c <main+0x17dc>)
 8004d72:	f7fc f9f0 	bl	8001156 <Backlash_Update>
					delta_posi_rev = setposition_rev - position_rev;
 8004d76:	4b76      	ldr	r3, [pc, #472]	@ (8004f50 <main+0x17d0>)
 8004d78:	ed93 7a00 	vldr	s14, [r3]
 8004d7c:	4b72      	ldr	r3, [pc, #456]	@ (8004f48 <main+0x17c8>)
 8004d7e:	edd3 7a00 	vldr	s15, [r3]
 8004d82:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004d86:	4b76      	ldr	r3, [pc, #472]	@ (8004f60 <main+0x17e0>)
 8004d88:	edc3 7a00 	vstr	s15, [r3]
					if (delta_posi_rev <= 0.1 && delta_posi_rev >= -0.1) {
 8004d8c:	4b74      	ldr	r3, [pc, #464]	@ (8004f60 <main+0x17e0>)
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4618      	mov	r0, r3
 8004d92:	f7fb fba5 	bl	80004e0 <__aeabi_f2d>
 8004d96:	a362      	add	r3, pc, #392	@ (adr r3, 8004f20 <main+0x17a0>)
 8004d98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d9c:	f7fb fe74 	bl	8000a88 <__aeabi_dcmple>
 8004da0:	4603      	mov	r3, r0
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d015      	beq.n	8004dd2 <main+0x1652>
 8004da6:	4b6e      	ldr	r3, [pc, #440]	@ (8004f60 <main+0x17e0>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	4618      	mov	r0, r3
 8004dac:	f7fb fb98 	bl	80004e0 <__aeabi_f2d>
 8004db0:	a35d      	add	r3, pc, #372	@ (adr r3, 8004f28 <main+0x17a8>)
 8004db2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004db6:	f7fb fe71 	bl	8000a9c <__aeabi_dcmpge>
 8004dba:	4603      	mov	r3, r0
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d008      	beq.n	8004dd2 <main+0x1652>
						V_rev_posi_PID = 0;
 8004dc0:	4b68      	ldr	r3, [pc, #416]	@ (8004f64 <main+0x17e4>)
 8004dc2:	f04f 0200 	mov.w	r2, #0
 8004dc6:	601a      	str	r2, [r3, #0]
						V_rev_velo_PID = 0;
 8004dc8:	4b67      	ldr	r3, [pc, #412]	@ (8004f68 <main+0x17e8>)
 8004dca:	f04f 0200 	mov.w	r2, #0
 8004dce:	601a      	str	r2, [r3, #0]
 8004dd0:	e00b      	b.n	8004dea <main+0x166a>
					} else {
						V_rev_posi_PID = Revolute_position_control(
 8004dd2:	4b63      	ldr	r3, [pc, #396]	@ (8004f60 <main+0x17e0>)
 8004dd4:	edd3 7a00 	vldr	s15, [r3]
 8004dd8:	eeb0 0a67 	vmov.f32	s0, s15
 8004ddc:	f000 fad0 	bl	8005380 <Revolute_position_control>
 8004de0:	eef0 7a40 	vmov.f32	s15, s0
 8004de4:	4b5f      	ldr	r3, [pc, #380]	@ (8004f64 <main+0x17e4>)
 8004de6:	edc3 7a00 	vstr	s15, [r3]
								delta_posi_rev);
					}

					count_Tim2 = 0;
 8004dea:	4b60      	ldr	r3, [pc, #384]	@ (8004f6c <main+0x17ec>)
 8004dec:	2200      	movs	r2, #0
 8004dee:	601a      	str	r2, [r3, #0]
				}
			}
		}

		if (state_start == 1 || state_go_to == 1) {
 8004df0:	4b5f      	ldr	r3, [pc, #380]	@ (8004f70 <main+0x17f0>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	2b01      	cmp	r3, #1
 8004df6:	d004      	beq.n	8004e02 <main+0x1682>
 8004df8:	4b5e      	ldr	r3, [pc, #376]	@ (8004f74 <main+0x17f4>)
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	2b01      	cmp	r3, #1
 8004dfe:	f47e af2d 	bne.w	8003c5c <main+0x4dc>
			if (V_pris_velo_PID < 0) {
 8004e02:	4b4f      	ldr	r3, [pc, #316]	@ (8004f40 <main+0x17c0>)
 8004e04:	edd3 7a00 	vldr	s15, [r3]
 8004e08:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004e0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e10:	d50b      	bpl.n	8004e2a <main+0x16aa>
				DIR_24V = 0;
 8004e12:	4b59      	ldr	r3, [pc, #356]	@ (8004f78 <main+0x17f8>)
 8004e14:	2200      	movs	r2, #0
 8004e16:	601a      	str	r2, [r3, #0]
				V_absoulte_pris = fabsf(V_pris_velo_PID);
 8004e18:	4b49      	ldr	r3, [pc, #292]	@ (8004f40 <main+0x17c0>)
 8004e1a:	edd3 7a00 	vldr	s15, [r3]
 8004e1e:	eef0 7ae7 	vabs.f32	s15, s15
 8004e22:	4b56      	ldr	r3, [pc, #344]	@ (8004f7c <main+0x17fc>)
 8004e24:	edc3 7a00 	vstr	s15, [r3]
 8004e28:	e00e      	b.n	8004e48 <main+0x16c8>
			} else if (V_pris_velo_PID > 0) {
 8004e2a:	4b45      	ldr	r3, [pc, #276]	@ (8004f40 <main+0x17c0>)
 8004e2c:	edd3 7a00 	vldr	s15, [r3]
 8004e30:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004e34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e38:	dd06      	ble.n	8004e48 <main+0x16c8>
				DIR_24V = 1;
 8004e3a:	4b4f      	ldr	r3, [pc, #316]	@ (8004f78 <main+0x17f8>)
 8004e3c:	2201      	movs	r2, #1
 8004e3e:	601a      	str	r2, [r3, #0]
				V_absoulte_pris = V_pris_velo_PID;
 8004e40:	4b3f      	ldr	r3, [pc, #252]	@ (8004f40 <main+0x17c0>)
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4a4d      	ldr	r2, [pc, #308]	@ (8004f7c <main+0x17fc>)
 8004e46:	6013      	str	r3, [r2, #0]
			}
			pwm_pris_velo = voltage_to_pwm(V_absoulte_pris);
 8004e48:	4b4c      	ldr	r3, [pc, #304]	@ (8004f7c <main+0x17fc>)
 8004e4a:	edd3 7a00 	vldr	s15, [r3]
 8004e4e:	eeb0 0a67 	vmov.f32	s0, s15
 8004e52:	f000 fbab 	bl	80055ac <voltage_to_pwm>
 8004e56:	eef0 7a40 	vmov.f32	s15, s0
 8004e5a:	4b49      	ldr	r3, [pc, #292]	@ (8004f80 <main+0x1800>)
 8004e5c:	edc3 7a00 	vstr	s15, [r3]
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, DIR_24V);
 8004e60:	4b45      	ldr	r3, [pc, #276]	@ (8004f78 <main+0x17f8>)
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	b2db      	uxtb	r3, r3
 8004e66:	461a      	mov	r2, r3
 8004e68:	2102      	movs	r1, #2
 8004e6a:	4846      	ldr	r0, [pc, #280]	@ (8004f84 <main+0x1804>)
 8004e6c:	f003 fc16 	bl	800869c <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim20, TIM_CHANNEL_1, pwm_pris_velo);
 8004e70:	4b43      	ldr	r3, [pc, #268]	@ (8004f80 <main+0x1800>)
 8004e72:	edd3 7a00 	vldr	s15, [r3]
 8004e76:	4b44      	ldr	r3, [pc, #272]	@ (8004f88 <main+0x1808>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e7e:	ee17 2a90 	vmov	r2, s15
 8004e82:	635a      	str	r2, [r3, #52]	@ 0x34

			if (V_rev_velo_PID < 0) {
 8004e84:	4b38      	ldr	r3, [pc, #224]	@ (8004f68 <main+0x17e8>)
 8004e86:	edd3 7a00 	vldr	s15, [r3]
 8004e8a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004e8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e92:	d50b      	bpl.n	8004eac <main+0x172c>
				DIR_18V = 0;
 8004e94:	4b3d      	ldr	r3, [pc, #244]	@ (8004f8c <main+0x180c>)
 8004e96:	2200      	movs	r2, #0
 8004e98:	601a      	str	r2, [r3, #0]
				V_absolute_rev = fabsf(V_rev_velo_PID);
 8004e9a:	4b33      	ldr	r3, [pc, #204]	@ (8004f68 <main+0x17e8>)
 8004e9c:	edd3 7a00 	vldr	s15, [r3]
 8004ea0:	eef0 7ae7 	vabs.f32	s15, s15
 8004ea4:	4b3a      	ldr	r3, [pc, #232]	@ (8004f90 <main+0x1810>)
 8004ea6:	edc3 7a00 	vstr	s15, [r3]
 8004eaa:	e00e      	b.n	8004eca <main+0x174a>
			} else if (V_rev_velo_PID > 0) {
 8004eac:	4b2e      	ldr	r3, [pc, #184]	@ (8004f68 <main+0x17e8>)
 8004eae:	edd3 7a00 	vldr	s15, [r3]
 8004eb2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004eb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004eba:	dd06      	ble.n	8004eca <main+0x174a>
				DIR_18V = 1;
 8004ebc:	4b33      	ldr	r3, [pc, #204]	@ (8004f8c <main+0x180c>)
 8004ebe:	2201      	movs	r2, #1
 8004ec0:	601a      	str	r2, [r3, #0]
				V_absolute_rev = V_rev_velo_PID;
 8004ec2:	4b29      	ldr	r3, [pc, #164]	@ (8004f68 <main+0x17e8>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	4a32      	ldr	r2, [pc, #200]	@ (8004f90 <main+0x1810>)
 8004ec8:	6013      	str	r3, [r2, #0]
			}
			V_plant = V_absolute_rev + voltage_dis_rev;
 8004eca:	4b31      	ldr	r3, [pc, #196]	@ (8004f90 <main+0x1810>)
 8004ecc:	ed93 7a00 	vldr	s14, [r3]
 8004ed0:	4b30      	ldr	r3, [pc, #192]	@ (8004f94 <main+0x1814>)
 8004ed2:	edd3 7a00 	vldr	s15, [r3]
 8004ed6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004eda:	4b2f      	ldr	r3, [pc, #188]	@ (8004f98 <main+0x1818>)
 8004edc:	edc3 7a00 	vstr	s15, [r3]
			if (V_plant > 18) {
 8004ee0:	4b2d      	ldr	r3, [pc, #180]	@ (8004f98 <main+0x1818>)
 8004ee2:	edd3 7a00 	vldr	s15, [r3]
 8004ee6:	eeb3 7a02 	vmov.f32	s14, #50	@ 0x41900000  18.0
 8004eea:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004eee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ef2:	dd02      	ble.n	8004efa <main+0x177a>
				V_plant = 18;
 8004ef4:	4b28      	ldr	r3, [pc, #160]	@ (8004f98 <main+0x1818>)
 8004ef6:	4a29      	ldr	r2, [pc, #164]	@ (8004f9c <main+0x181c>)
 8004ef8:	601a      	str	r2, [r3, #0]
			}
			pwm_rev_velo = (V_plant / 18) * 65535;
 8004efa:	4b27      	ldr	r3, [pc, #156]	@ (8004f98 <main+0x1818>)
 8004efc:	ed93 7a00 	vldr	s14, [r3]
 8004f00:	eef3 6a02 	vmov.f32	s13, #50	@ 0x41900000  18.0
 8004f04:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004f08:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 8004fa0 <main+0x1820>
 8004f0c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004f10:	4b24      	ldr	r3, [pc, #144]	@ (8004fa4 <main+0x1824>)
 8004f12:	edc3 7a00 	vstr	s15, [r3]
	while (1) {
 8004f16:	f7fe bea1 	b.w	8003c5c <main+0x4dc>
 8004f1a:	bf00      	nop
 8004f1c:	f3af 8000 	nop.w
 8004f20:	9999999a 	.word	0x9999999a
 8004f24:	3fb99999 	.word	0x3fb99999
 8004f28:	9999999a 	.word	0x9999999a
 8004f2c:	bfb99999 	.word	0xbfb99999
 8004f30:	aaaaaaab 	.word	0xaaaaaaab
 8004f34:	400aaaaa 	.word	0x400aaaaa
 8004f38:	20000dc4 	.word	0x20000dc4
 8004f3c:	20000db4 	.word	0x20000db4
 8004f40:	20000df4 	.word	0x20000df4
 8004f44:	200003a0 	.word	0x200003a0
 8004f48:	20000e2c 	.word	0x20000e2c
 8004f4c:	200003e4 	.word	0x200003e4
 8004f50:	20000e30 	.word	0x20000e30
 8004f54:	200006e4 	.word	0x200006e4
 8004f58:	200006e8 	.word	0x200006e8
 8004f5c:	20000d7c 	.word	0x20000d7c
 8004f60:	20000e40 	.word	0x20000e40
 8004f64:	20000e34 	.word	0x20000e34
 8004f68:	20000e70 	.word	0x20000e70
 8004f6c:	20000d78 	.word	0x20000d78
 8004f70:	200016ec 	.word	0x200016ec
 8004f74:	200016f0 	.word	0x200016f0
 8004f78:	20000d70 	.word	0x20000d70
 8004f7c:	20000db8 	.word	0x20000db8
 8004f80:	20000df8 	.word	0x20000df8
 8004f84:	48000400 	.word	0x48000400
 8004f88:	20001c38 	.word	0x20001c38
 8004f8c:	20000d6c 	.word	0x20000d6c
 8004f90:	20000e84 	.word	0x20000e84
 8004f94:	20000d74 	.word	0x20000d74
 8004f98:	20000e88 	.word	0x20000e88
 8004f9c:	41900000 	.word	0x41900000
 8004fa0:	477fff00 	.word	0x477fff00
 8004fa4:	20000e74 	.word	0x20000e74

08004fa8 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b094      	sub	sp, #80	@ 0x50
 8004fac:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8004fae:	f107 0318 	add.w	r3, r7, #24
 8004fb2:	2238      	movs	r2, #56	@ 0x38
 8004fb4:	2100      	movs	r1, #0
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	f00a fb24 	bl	800f604 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8004fbc:	1d3b      	adds	r3, r7, #4
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	601a      	str	r2, [r3, #0]
 8004fc2:	605a      	str	r2, [r3, #4]
 8004fc4:	609a      	str	r2, [r3, #8]
 8004fc6:	60da      	str	r2, [r3, #12]
 8004fc8:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8004fca:	2000      	movs	r0, #0
 8004fcc:	f003 fb96 	bl	80086fc <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004fd0:	2302      	movs	r3, #2
 8004fd2:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004fd4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004fd8:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004fda:	2340      	movs	r3, #64	@ 0x40
 8004fdc:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004fde:	2302      	movs	r3, #2
 8004fe0:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004fe2:	2302      	movs	r3, #2
 8004fe4:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8004fe6:	2304      	movs	r3, #4
 8004fe8:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 85;
 8004fea:	2355      	movs	r3, #85	@ 0x55
 8004fec:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004fee:	2302      	movs	r3, #2
 8004ff0:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8004ff2:	2302      	movs	r3, #2
 8004ff4:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8004ff6:	2302      	movs	r3, #2
 8004ff8:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8004ffa:	f107 0318 	add.w	r3, r7, #24
 8004ffe:	4618      	mov	r0, r3
 8005000:	f003 fc30 	bl	8008864 <HAL_RCC_OscConfig>
 8005004:	4603      	mov	r3, r0
 8005006:	2b00      	cmp	r3, #0
 8005008:	d001      	beq.n	800500e <SystemClock_Config+0x66>
		Error_Handler();
 800500a:	f000 fb2b 	bl	8005664 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800500e:	230f      	movs	r3, #15
 8005010:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005012:	2303      	movs	r3, #3
 8005014:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005016:	2300      	movs	r3, #0
 8005018:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800501a:	2300      	movs	r3, #0
 800501c:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800501e:	2300      	movs	r3, #0
 8005020:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 8005022:	1d3b      	adds	r3, r7, #4
 8005024:	2104      	movs	r1, #4
 8005026:	4618      	mov	r0, r3
 8005028:	f003 ff2e 	bl	8008e88 <HAL_RCC_ClockConfig>
 800502c:	4603      	mov	r3, r0
 800502e:	2b00      	cmp	r3, #0
 8005030:	d001      	beq.n	8005036 <SystemClock_Config+0x8e>
		Error_Handler();
 8005032:	f000 fb17 	bl	8005664 <Error_Handler>
	}
}
 8005036:	bf00      	nop
 8005038:	3750      	adds	r7, #80	@ 0x50
 800503a:	46bd      	mov	sp, r7
 800503c:	bd80      	pop	{r7, pc}
	...

08005040 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8005040:	b480      	push	{r7}
 8005042:	b083      	sub	sp, #12
 8005044:	af00      	add	r7, sp, #0
 8005046:	4603      	mov	r3, r0
 8005048:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_9) { // Back Limit
 800504a:	88fb      	ldrh	r3, [r7, #6]
 800504c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005050:	d103      	bne.n	800505a <HAL_GPIO_EXTI_Callback+0x1a>
		State = 9;
 8005052:	4b2c      	ldr	r3, [pc, #176]	@ (8005104 <HAL_GPIO_EXTI_Callback+0xc4>)
 8005054:	2209      	movs	r2, #9
 8005056:	601a      	str	r2, [r3, #0]
		Home_Pris = 1;
		State = 15;
//		set_home_pris = 1;
//		count_pris += 1;
	}
}
 8005058:	e04e      	b.n	80050f8 <HAL_GPIO_EXTI_Callback+0xb8>
	} else if (GPIO_Pin == GPIO_PIN_10) { // Front Limit
 800505a:	88fb      	ldrh	r3, [r7, #6]
 800505c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005060:	d103      	bne.n	800506a <HAL_GPIO_EXTI_Callback+0x2a>
		State = 10;
 8005062:	4b28      	ldr	r3, [pc, #160]	@ (8005104 <HAL_GPIO_EXTI_Callback+0xc4>)
 8005064:	220a      	movs	r2, #10
 8005066:	601a      	str	r2, [r3, #0]
}
 8005068:	e046      	b.n	80050f8 <HAL_GPIO_EXTI_Callback+0xb8>
	} else if (GPIO_Pin == GPIO_PIN_11) { // Emergency
 800506a:	88fb      	ldrh	r3, [r7, #6]
 800506c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005070:	d11d      	bne.n	80050ae <HAL_GPIO_EXTI_Callback+0x6e>
		if (Emer_trick - Emer_last_trick >= 1000) {
 8005072:	4b25      	ldr	r3, [pc, #148]	@ (8005108 <HAL_GPIO_EXTI_Callback+0xc8>)
 8005074:	681a      	ldr	r2, [r3, #0]
 8005076:	4b25      	ldr	r3, [pc, #148]	@ (800510c <HAL_GPIO_EXTI_Callback+0xcc>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	1ad3      	subs	r3, r2, r3
 800507c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005080:	d311      	bcc.n	80050a6 <HAL_GPIO_EXTI_Callback+0x66>
			Emer_count += 1;
 8005082:	4b23      	ldr	r3, [pc, #140]	@ (8005110 <HAL_GPIO_EXTI_Callback+0xd0>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	3301      	adds	r3, #1
 8005088:	4a21      	ldr	r2, [pc, #132]	@ (8005110 <HAL_GPIO_EXTI_Callback+0xd0>)
 800508a:	6013      	str	r3, [r2, #0]
			Emer_last_trick = Emer_trick;
 800508c:	4b1e      	ldr	r3, [pc, #120]	@ (8005108 <HAL_GPIO_EXTI_Callback+0xc8>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4a1e      	ldr	r2, [pc, #120]	@ (800510c <HAL_GPIO_EXTI_Callback+0xcc>)
 8005092:	6013      	str	r3, [r2, #0]
			if (Emer_count % 2 == 1) {
 8005094:	4b1e      	ldr	r3, [pc, #120]	@ (8005110 <HAL_GPIO_EXTI_Callback+0xd0>)
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f003 0301 	and.w	r3, r3, #1
 800509c:	2b00      	cmp	r3, #0
 800509e:	d002      	beq.n	80050a6 <HAL_GPIO_EXTI_Callback+0x66>
				Emer_state = 1;
 80050a0:	4b1c      	ldr	r3, [pc, #112]	@ (8005114 <HAL_GPIO_EXTI_Callback+0xd4>)
 80050a2:	2201      	movs	r2, #1
 80050a4:	701a      	strb	r2, [r3, #0]
		State = 11;
 80050a6:	4b17      	ldr	r3, [pc, #92]	@ (8005104 <HAL_GPIO_EXTI_Callback+0xc4>)
 80050a8:	220b      	movs	r2, #11
 80050aa:	601a      	str	r2, [r3, #0]
}
 80050ac:	e024      	b.n	80050f8 <HAL_GPIO_EXTI_Callback+0xb8>
	} else if (GPIO_Pin == GPIO_PIN_12) { // Right Proximity
 80050ae:	88fb      	ldrh	r3, [r7, #6]
 80050b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80050b4:	d106      	bne.n	80050c4 <HAL_GPIO_EXTI_Callback+0x84>
		Home_Rev = 1;
 80050b6:	4b18      	ldr	r3, [pc, #96]	@ (8005118 <HAL_GPIO_EXTI_Callback+0xd8>)
 80050b8:	2201      	movs	r2, #1
 80050ba:	701a      	strb	r2, [r3, #0]
		State = 12;
 80050bc:	4b11      	ldr	r3, [pc, #68]	@ (8005104 <HAL_GPIO_EXTI_Callback+0xc4>)
 80050be:	220c      	movs	r2, #12
 80050c0:	601a      	str	r2, [r3, #0]
}
 80050c2:	e019      	b.n	80050f8 <HAL_GPIO_EXTI_Callback+0xb8>
	} else if (GPIO_Pin == GPIO_PIN_13) { // Left Proximity
 80050c4:	88fb      	ldrh	r3, [r7, #6]
 80050c6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80050ca:	d103      	bne.n	80050d4 <HAL_GPIO_EXTI_Callback+0x94>
		State = 13;
 80050cc:	4b0d      	ldr	r3, [pc, #52]	@ (8005104 <HAL_GPIO_EXTI_Callback+0xc4>)
 80050ce:	220d      	movs	r2, #13
 80050d0:	601a      	str	r2, [r3, #0]
}
 80050d2:	e011      	b.n	80050f8 <HAL_GPIO_EXTI_Callback+0xb8>
	} else if (GPIO_Pin == GPIO_PIN_14) { // Upper Limit
 80050d4:	88fb      	ldrh	r3, [r7, #6]
 80050d6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80050da:	d103      	bne.n	80050e4 <HAL_GPIO_EXTI_Callback+0xa4>
		State = 14;
 80050dc:	4b09      	ldr	r3, [pc, #36]	@ (8005104 <HAL_GPIO_EXTI_Callback+0xc4>)
 80050de:	220e      	movs	r2, #14
 80050e0:	601a      	str	r2, [r3, #0]
}
 80050e2:	e009      	b.n	80050f8 <HAL_GPIO_EXTI_Callback+0xb8>
	} else if (GPIO_Pin == GPIO_PIN_15) { // Bottom Limit
 80050e4:	88fb      	ldrh	r3, [r7, #6]
 80050e6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80050ea:	d105      	bne.n	80050f8 <HAL_GPIO_EXTI_Callback+0xb8>
		Home_Pris = 1;
 80050ec:	4b0b      	ldr	r3, [pc, #44]	@ (800511c <HAL_GPIO_EXTI_Callback+0xdc>)
 80050ee:	2201      	movs	r2, #1
 80050f0:	701a      	strb	r2, [r3, #0]
		State = 15;
 80050f2:	4b04      	ldr	r3, [pc, #16]	@ (8005104 <HAL_GPIO_EXTI_Callback+0xc4>)
 80050f4:	220f      	movs	r2, #15
 80050f6:	601a      	str	r2, [r3, #0]
}
 80050f8:	bf00      	nop
 80050fa:	370c      	adds	r7, #12
 80050fc:	46bd      	mov	sp, r7
 80050fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005102:	4770      	bx	lr
 8005104:	200006f0 	.word	0x200006f0
 8005108:	200016f8 	.word	0x200016f8
 800510c:	200016fc 	.word	0x200016fc
 8005110:	20001704 	.word	0x20001704
 8005114:	20001700 	.word	0x20001700
 8005118:	200016f5 	.word	0x200016f5
 800511c:	200016f4 	.word	0x200016f4

08005120 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8005120:	b480      	push	{r7}
 8005122:	b083      	sub	sp, #12
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
//	if (htim == &htim2) {
//		PS2_ReadData();
//	}
}
 8005128:	bf00      	nop
 800512a:	370c      	adds	r7, #12
 800512c:	46bd      	mov	sp, r7
 800512e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005132:	4770      	bx	lr

08005134 <Prismatic_position_control>:

float Prismatic_position_control(float delta_posi) {
 8005134:	b480      	push	{r7}
 8005136:	b087      	sub	sp, #28
 8005138:	af00      	add	r7, sp, #0
 800513a:	ed87 0a01 	vstr	s0, [r7, #4]
	int anti_windup;
	error_posi_pris[0] = delta_posi;
 800513e:	4a36      	ldr	r2, [pc, #216]	@ (8005218 <Prismatic_position_control+0xe4>)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6013      	str	r3, [r2, #0]
//	Pris_posi_PID.Kp = 1;
//	Pris_posi_PID.Kd = 1;

	if (error_posi_pris[0] < 0 && error_posi_pris[1] > 0) {
 8005144:	4b34      	ldr	r3, [pc, #208]	@ (8005218 <Prismatic_position_control+0xe4>)
 8005146:	edd3 7a00 	vldr	s15, [r3]
 800514a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800514e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005152:	d50a      	bpl.n	800516a <Prismatic_position_control+0x36>
 8005154:	4b30      	ldr	r3, [pc, #192]	@ (8005218 <Prismatic_position_control+0xe4>)
 8005156:	edd3 7a01 	vldr	s15, [r3, #4]
 800515a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800515e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005162:	dd02      	ble.n	800516a <Prismatic_position_control+0x36>
		anti_windup = 0;
 8005164:	2300      	movs	r3, #0
 8005166:	617b      	str	r3, [r7, #20]
 8005168:	e014      	b.n	8005194 <Prismatic_position_control+0x60>
	} else if (error_posi_pris[0] > 0 && error_posi_pris[1] < 0) {
 800516a:	4b2b      	ldr	r3, [pc, #172]	@ (8005218 <Prismatic_position_control+0xe4>)
 800516c:	edd3 7a00 	vldr	s15, [r3]
 8005170:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005174:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005178:	dd0a      	ble.n	8005190 <Prismatic_position_control+0x5c>
 800517a:	4b27      	ldr	r3, [pc, #156]	@ (8005218 <Prismatic_position_control+0xe4>)
 800517c:	edd3 7a01 	vldr	s15, [r3, #4]
 8005180:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005184:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005188:	d502      	bpl.n	8005190 <Prismatic_position_control+0x5c>
		anti_windup = 0;
 800518a:	2300      	movs	r3, #0
 800518c:	617b      	str	r3, [r7, #20]
 800518e:	e001      	b.n	8005194 <Prismatic_position_control+0x60>
	} else {
		anti_windup = 1;
 8005190:	2301      	movs	r3, #1
 8005192:	617b      	str	r3, [r7, #20]
 8005194:	4b21      	ldr	r3, [pc, #132]	@ (800521c <Prismatic_position_control+0xe8>)
 8005196:	613b      	str	r3, [r7, #16]
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	60fb      	str	r3, [r7, #12]
  float32_t in)
  {
    float32_t out;

    /* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2]  */
    out = (S->A0 * in) +
 800519c:	693b      	ldr	r3, [r7, #16]
 800519e:	ed93 7a00 	vldr	s14, [r3]
 80051a2:	edd7 7a03 	vldr	s15, [r7, #12]
 80051a6:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 80051aa:	693b      	ldr	r3, [r7, #16]
 80051ac:	edd3 6a01 	vldr	s13, [r3, #4]
 80051b0:	693b      	ldr	r3, [r7, #16]
 80051b2:	edd3 7a03 	vldr	s15, [r3, #12]
 80051b6:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 80051ba:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 80051be:	693b      	ldr	r3, [r7, #16]
 80051c0:	edd3 6a02 	vldr	s13, [r3, #8]
 80051c4:	693b      	ldr	r3, [r7, #16]
 80051c6:	edd3 7a04 	vldr	s15, [r3, #16]
 80051ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80051ce:	ee37 7a27 	vadd.f32	s14, s14, s15
 80051d2:	693b      	ldr	r3, [r7, #16]
 80051d4:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 80051d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80051dc:	edc7 7a02 	vstr	s15, [r7, #8]

    /* Update state */
    S->state[1] = S->state[0];
 80051e0:	693b      	ldr	r3, [r7, #16]
 80051e2:	68da      	ldr	r2, [r3, #12]
 80051e4:	693b      	ldr	r3, [r7, #16]
 80051e6:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 80051e8:	693b      	ldr	r3, [r7, #16]
 80051ea:	68fa      	ldr	r2, [r7, #12]
 80051ec:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 80051ee:	693b      	ldr	r3, [r7, #16]
 80051f0:	68ba      	ldr	r2, [r7, #8]
 80051f2:	615a      	str	r2, [r3, #20]

    /* return to application */
    return (out);
 80051f4:	68bb      	ldr	r3, [r7, #8]
//		Pris_posi_PID.Ki = 0;
//	} else {
//		Pris_posi_PID.Ki = 1;
//	}

	V_pris_posi_PID = arm_pid_f32(&Pris_posi_PID, delta_posi);
 80051f6:	4a0a      	ldr	r2, [pc, #40]	@ (8005220 <Prismatic_position_control+0xec>)
 80051f8:	6013      	str	r3, [r2, #0]

//	if (V_pris_posi_PID > 24) {
//		V_pris_posi_PID = 24;
//	}

	error_posi_pris[1] = error_posi_pris[0];
 80051fa:	4b07      	ldr	r3, [pc, #28]	@ (8005218 <Prismatic_position_control+0xe4>)
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	4a06      	ldr	r2, [pc, #24]	@ (8005218 <Prismatic_position_control+0xe4>)
 8005200:	6053      	str	r3, [r2, #4]
	return V_pris_posi_PID;
 8005202:	4b07      	ldr	r3, [pc, #28]	@ (8005220 <Prismatic_position_control+0xec>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	ee07 3a90 	vmov	s15, r3
}
 800520a:	eeb0 0a67 	vmov.f32	s0, s15
 800520e:	371c      	adds	r7, #28
 8005210:	46bd      	mov	sp, r7
 8005212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005216:	4770      	bx	lr
 8005218:	20000dbc 	.word	0x20000dbc
 800521c:	20000d88 	.word	0x20000d88
 8005220:	20000db4 	.word	0x20000db4

08005224 <Prismatic_velocity_control>:

float Prismatic_velocity_control(float delta_velo) {
 8005224:	b480      	push	{r7}
 8005226:	b087      	sub	sp, #28
 8005228:	af00      	add	r7, sp, #0
 800522a:	ed87 0a01 	vstr	s0, [r7, #4]
	int anti_windup;
	error_velo_pris[0] = delta_velo;
 800522e:	4a4e      	ldr	r2, [pc, #312]	@ (8005368 <Prismatic_velocity_control+0x144>)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6013      	str	r3, [r2, #0]
//	Pris_velo_PID.Kp = 0.01;

	if (error_velo_pris[0] < 0 && error_velo_pris[1] > 0) {
 8005234:	4b4c      	ldr	r3, [pc, #304]	@ (8005368 <Prismatic_velocity_control+0x144>)
 8005236:	edd3 7a00 	vldr	s15, [r3]
 800523a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800523e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005242:	d50a      	bpl.n	800525a <Prismatic_velocity_control+0x36>
 8005244:	4b48      	ldr	r3, [pc, #288]	@ (8005368 <Prismatic_velocity_control+0x144>)
 8005246:	edd3 7a01 	vldr	s15, [r3, #4]
 800524a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800524e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005252:	dd02      	ble.n	800525a <Prismatic_velocity_control+0x36>
		anti_windup = 0;
 8005254:	2300      	movs	r3, #0
 8005256:	617b      	str	r3, [r7, #20]
 8005258:	e014      	b.n	8005284 <Prismatic_velocity_control+0x60>
	} else if (error_velo_pris[0] > 0 && error_velo_pris[1] < 0) {
 800525a:	4b43      	ldr	r3, [pc, #268]	@ (8005368 <Prismatic_velocity_control+0x144>)
 800525c:	edd3 7a00 	vldr	s15, [r3]
 8005260:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005264:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005268:	dd0a      	ble.n	8005280 <Prismatic_velocity_control+0x5c>
 800526a:	4b3f      	ldr	r3, [pc, #252]	@ (8005368 <Prismatic_velocity_control+0x144>)
 800526c:	edd3 7a01 	vldr	s15, [r3, #4]
 8005270:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005274:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005278:	d502      	bpl.n	8005280 <Prismatic_velocity_control+0x5c>
		anti_windup = 0;
 800527a:	2300      	movs	r3, #0
 800527c:	617b      	str	r3, [r7, #20]
 800527e:	e001      	b.n	8005284 <Prismatic_velocity_control+0x60>
	} else {
		anti_windup = 1;
 8005280:	2301      	movs	r3, #1
 8005282:	617b      	str	r3, [r7, #20]
	}

	if (V_pris_velo_PID >= 24 && anti_windup == 0) {
 8005284:	4b39      	ldr	r3, [pc, #228]	@ (800536c <Prismatic_velocity_control+0x148>)
 8005286:	edd3 7a00 	vldr	s15, [r3]
 800528a:	eeb3 7a08 	vmov.f32	s14, #56	@ 0x41c00000  24.0
 800528e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005292:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005296:	db07      	blt.n	80052a8 <Prismatic_velocity_control+0x84>
 8005298:	697b      	ldr	r3, [r7, #20]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d104      	bne.n	80052a8 <Prismatic_velocity_control+0x84>
		Pris_velo_PID.Ki = 0;
 800529e:	4b34      	ldr	r3, [pc, #208]	@ (8005370 <Prismatic_velocity_control+0x14c>)
 80052a0:	f04f 0200 	mov.w	r2, #0
 80052a4:	61da      	str	r2, [r3, #28]
 80052a6:	e002      	b.n	80052ae <Prismatic_velocity_control+0x8a>
	} else {
		Pris_velo_PID.Ki = 0.001;
 80052a8:	4b31      	ldr	r3, [pc, #196]	@ (8005370 <Prismatic_velocity_control+0x14c>)
 80052aa:	4a32      	ldr	r2, [pc, #200]	@ (8005374 <Prismatic_velocity_control+0x150>)
 80052ac:	61da      	str	r2, [r3, #28]
 80052ae:	4b30      	ldr	r3, [pc, #192]	@ (8005370 <Prismatic_velocity_control+0x14c>)
 80052b0:	613b      	str	r3, [r7, #16]
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	60fb      	str	r3, [r7, #12]
    out = (S->A0 * in) +
 80052b6:	693b      	ldr	r3, [r7, #16]
 80052b8:	ed93 7a00 	vldr	s14, [r3]
 80052bc:	edd7 7a03 	vldr	s15, [r7, #12]
 80052c0:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 80052c4:	693b      	ldr	r3, [r7, #16]
 80052c6:	edd3 6a01 	vldr	s13, [r3, #4]
 80052ca:	693b      	ldr	r3, [r7, #16]
 80052cc:	edd3 7a03 	vldr	s15, [r3, #12]
 80052d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 80052d4:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 80052d8:	693b      	ldr	r3, [r7, #16]
 80052da:	edd3 6a02 	vldr	s13, [r3, #8]
 80052de:	693b      	ldr	r3, [r7, #16]
 80052e0:	edd3 7a04 	vldr	s15, [r3, #16]
 80052e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80052e8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80052ec:	693b      	ldr	r3, [r7, #16]
 80052ee:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 80052f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80052f6:	edc7 7a02 	vstr	s15, [r7, #8]
    S->state[1] = S->state[0];
 80052fa:	693b      	ldr	r3, [r7, #16]
 80052fc:	68da      	ldr	r2, [r3, #12]
 80052fe:	693b      	ldr	r3, [r7, #16]
 8005300:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 8005302:	693b      	ldr	r3, [r7, #16]
 8005304:	68fa      	ldr	r2, [r7, #12]
 8005306:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8005308:	693b      	ldr	r3, [r7, #16]
 800530a:	68ba      	ldr	r2, [r7, #8]
 800530c:	615a      	str	r2, [r3, #20]
    return (out);
 800530e:	68bb      	ldr	r3, [r7, #8]
	}

	V_pris_velo_PID = arm_pid_f32(&Pris_velo_PID, delta_velo);
 8005310:	4a16      	ldr	r2, [pc, #88]	@ (800536c <Prismatic_velocity_control+0x148>)
 8005312:	6013      	str	r3, [r2, #0]

	if (V_pris_velo_PID > 24) {
 8005314:	4b15      	ldr	r3, [pc, #84]	@ (800536c <Prismatic_velocity_control+0x148>)
 8005316:	edd3 7a00 	vldr	s15, [r3]
 800531a:	eeb3 7a08 	vmov.f32	s14, #56	@ 0x41c00000  24.0
 800531e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005322:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005326:	dd03      	ble.n	8005330 <Prismatic_velocity_control+0x10c>
		V_pris_velo_PID = 24;
 8005328:	4b10      	ldr	r3, [pc, #64]	@ (800536c <Prismatic_velocity_control+0x148>)
 800532a:	4a13      	ldr	r2, [pc, #76]	@ (8005378 <Prismatic_velocity_control+0x154>)
 800532c:	601a      	str	r2, [r3, #0]
 800532e:	e00c      	b.n	800534a <Prismatic_velocity_control+0x126>
	} else if (V_pris_velo_PID < -24) {
 8005330:	4b0e      	ldr	r3, [pc, #56]	@ (800536c <Prismatic_velocity_control+0x148>)
 8005332:	edd3 7a00 	vldr	s15, [r3]
 8005336:	eebb 7a08 	vmov.f32	s14, #184	@ 0xc1c00000 -24.0
 800533a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800533e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005342:	d502      	bpl.n	800534a <Prismatic_velocity_control+0x126>
		V_pris_velo_PID = -24;
 8005344:	4b09      	ldr	r3, [pc, #36]	@ (800536c <Prismatic_velocity_control+0x148>)
 8005346:	4a0d      	ldr	r2, [pc, #52]	@ (800537c <Prismatic_velocity_control+0x158>)
 8005348:	601a      	str	r2, [r3, #0]
	}

	error_velo_pris[1] = error_velo_pris[0];
 800534a:	4b07      	ldr	r3, [pc, #28]	@ (8005368 <Prismatic_velocity_control+0x144>)
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	4a06      	ldr	r2, [pc, #24]	@ (8005368 <Prismatic_velocity_control+0x144>)
 8005350:	6053      	str	r3, [r2, #4]
	return V_pris_velo_PID;
 8005352:	4b06      	ldr	r3, [pc, #24]	@ (800536c <Prismatic_velocity_control+0x148>)
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	ee07 3a90 	vmov	s15, r3
}
 800535a:	eeb0 0a67 	vmov.f32	s0, s15
 800535e:	371c      	adds	r7, #28
 8005360:	46bd      	mov	sp, r7
 8005362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005366:	4770      	bx	lr
 8005368:	20000dfc 	.word	0x20000dfc
 800536c:	20000df4 	.word	0x20000df4
 8005370:	20000dc8 	.word	0x20000dc8
 8005374:	3a83126f 	.word	0x3a83126f
 8005378:	41c00000 	.word	0x41c00000
 800537c:	c1c00000 	.word	0xc1c00000

08005380 <Revolute_position_control>:

float Revolute_position_control(float delta_posi) {
 8005380:	b480      	push	{r7}
 8005382:	b087      	sub	sp, #28
 8005384:	af00      	add	r7, sp, #0
 8005386:	ed87 0a01 	vstr	s0, [r7, #4]
	int anti_windup;
	error_posi_rev[0] = delta_posi;
 800538a:	4a36      	ldr	r2, [pc, #216]	@ (8005464 <Revolute_position_control+0xe4>)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6013      	str	r3, [r2, #0]
//	Rev_posi_PID.Kp = 1;
//	Rev_posi_PID.Kd = 1;

	if (error_posi_rev[0] < 0 && error_posi_rev[1] > 0) {
 8005390:	4b34      	ldr	r3, [pc, #208]	@ (8005464 <Revolute_position_control+0xe4>)
 8005392:	edd3 7a00 	vldr	s15, [r3]
 8005396:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800539a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800539e:	d50a      	bpl.n	80053b6 <Revolute_position_control+0x36>
 80053a0:	4b30      	ldr	r3, [pc, #192]	@ (8005464 <Revolute_position_control+0xe4>)
 80053a2:	edd3 7a01 	vldr	s15, [r3, #4]
 80053a6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80053aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053ae:	dd02      	ble.n	80053b6 <Revolute_position_control+0x36>
		anti_windup = 0;
 80053b0:	2300      	movs	r3, #0
 80053b2:	617b      	str	r3, [r7, #20]
 80053b4:	e014      	b.n	80053e0 <Revolute_position_control+0x60>
	} else if (error_posi_rev[0] > 0 && error_posi_rev[1] < 0) {
 80053b6:	4b2b      	ldr	r3, [pc, #172]	@ (8005464 <Revolute_position_control+0xe4>)
 80053b8:	edd3 7a00 	vldr	s15, [r3]
 80053bc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80053c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053c4:	dd0a      	ble.n	80053dc <Revolute_position_control+0x5c>
 80053c6:	4b27      	ldr	r3, [pc, #156]	@ (8005464 <Revolute_position_control+0xe4>)
 80053c8:	edd3 7a01 	vldr	s15, [r3, #4]
 80053cc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80053d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053d4:	d502      	bpl.n	80053dc <Revolute_position_control+0x5c>
		anti_windup = 0;
 80053d6:	2300      	movs	r3, #0
 80053d8:	617b      	str	r3, [r7, #20]
 80053da:	e001      	b.n	80053e0 <Revolute_position_control+0x60>
	} else {
		anti_windup = 1;
 80053dc:	2301      	movs	r3, #1
 80053de:	617b      	str	r3, [r7, #20]
 80053e0:	4b21      	ldr	r3, [pc, #132]	@ (8005468 <Revolute_position_control+0xe8>)
 80053e2:	613b      	str	r3, [r7, #16]
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	60fb      	str	r3, [r7, #12]
    out = (S->A0 * in) +
 80053e8:	693b      	ldr	r3, [r7, #16]
 80053ea:	ed93 7a00 	vldr	s14, [r3]
 80053ee:	edd7 7a03 	vldr	s15, [r7, #12]
 80053f2:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 80053f6:	693b      	ldr	r3, [r7, #16]
 80053f8:	edd3 6a01 	vldr	s13, [r3, #4]
 80053fc:	693b      	ldr	r3, [r7, #16]
 80053fe:	edd3 7a03 	vldr	s15, [r3, #12]
 8005402:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8005406:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 800540a:	693b      	ldr	r3, [r7, #16]
 800540c:	edd3 6a02 	vldr	s13, [r3, #8]
 8005410:	693b      	ldr	r3, [r7, #16]
 8005412:	edd3 7a04 	vldr	s15, [r3, #16]
 8005416:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800541a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800541e:	693b      	ldr	r3, [r7, #16]
 8005420:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 8005424:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005428:	edc7 7a02 	vstr	s15, [r7, #8]
    S->state[1] = S->state[0];
 800542c:	693b      	ldr	r3, [r7, #16]
 800542e:	68da      	ldr	r2, [r3, #12]
 8005430:	693b      	ldr	r3, [r7, #16]
 8005432:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 8005434:	693b      	ldr	r3, [r7, #16]
 8005436:	68fa      	ldr	r2, [r7, #12]
 8005438:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 800543a:	693b      	ldr	r3, [r7, #16]
 800543c:	68ba      	ldr	r2, [r7, #8]
 800543e:	615a      	str	r2, [r3, #20]
    return (out);
 8005440:	68bb      	ldr	r3, [r7, #8]
//		Rev_posi_PID.Ki = 0;
//	} else {
//		Rev_posi_PID.Ki = 1;
//	}

	V_rev_posi_PID = arm_pid_f32(&Rev_posi_PID, delta_posi);
 8005442:	4a0a      	ldr	r2, [pc, #40]	@ (800546c <Revolute_position_control+0xec>)
 8005444:	6013      	str	r3, [r2, #0]

//	if (V_rev_posi_PID > 24) {
//		V_rev_posi_PID = 24;
//	}

	error_posi_rev[1] = error_posi_rev[0];
 8005446:	4b07      	ldr	r3, [pc, #28]	@ (8005464 <Revolute_position_control+0xe4>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4a06      	ldr	r2, [pc, #24]	@ (8005464 <Revolute_position_control+0xe4>)
 800544c:	6053      	str	r3, [r2, #4]
	return V_rev_posi_PID;
 800544e:	4b07      	ldr	r3, [pc, #28]	@ (800546c <Revolute_position_control+0xec>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	ee07 3a90 	vmov	s15, r3
}
 8005456:	eeb0 0a67 	vmov.f32	s0, s15
 800545a:	371c      	adds	r7, #28
 800545c:	46bd      	mov	sp, r7
 800545e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005462:	4770      	bx	lr
 8005464:	20000e38 	.word	0x20000e38
 8005468:	20000e08 	.word	0x20000e08
 800546c:	20000e34 	.word	0x20000e34

08005470 <Revolute_velocity_control>:

float Revolute_velocity_control(float delta_velo) {
 8005470:	b480      	push	{r7}
 8005472:	b087      	sub	sp, #28
 8005474:	af00      	add	r7, sp, #0
 8005476:	ed87 0a01 	vstr	s0, [r7, #4]
	int anti_windup;
	error_velo_rev[0] = delta_velo;
 800547a:	4a47      	ldr	r2, [pc, #284]	@ (8005598 <Revolute_velocity_control+0x128>)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	6013      	str	r3, [r2, #0]
//	Rev_velo_PID.Kp = 0.01;

	if (error_velo_rev[0] < 0 && error_velo_rev[1] > 0) {
 8005480:	4b45      	ldr	r3, [pc, #276]	@ (8005598 <Revolute_velocity_control+0x128>)
 8005482:	edd3 7a00 	vldr	s15, [r3]
 8005486:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800548a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800548e:	d50a      	bpl.n	80054a6 <Revolute_velocity_control+0x36>
 8005490:	4b41      	ldr	r3, [pc, #260]	@ (8005598 <Revolute_velocity_control+0x128>)
 8005492:	edd3 7a01 	vldr	s15, [r3, #4]
 8005496:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800549a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800549e:	dd02      	ble.n	80054a6 <Revolute_velocity_control+0x36>
		anti_windup = 0;
 80054a0:	2300      	movs	r3, #0
 80054a2:	617b      	str	r3, [r7, #20]
 80054a4:	e014      	b.n	80054d0 <Revolute_velocity_control+0x60>
	} else if (error_velo_rev[0] > 0 && error_velo_rev[1] < 0) {
 80054a6:	4b3c      	ldr	r3, [pc, #240]	@ (8005598 <Revolute_velocity_control+0x128>)
 80054a8:	edd3 7a00 	vldr	s15, [r3]
 80054ac:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80054b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054b4:	dd0a      	ble.n	80054cc <Revolute_velocity_control+0x5c>
 80054b6:	4b38      	ldr	r3, [pc, #224]	@ (8005598 <Revolute_velocity_control+0x128>)
 80054b8:	edd3 7a01 	vldr	s15, [r3, #4]
 80054bc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80054c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054c4:	d502      	bpl.n	80054cc <Revolute_velocity_control+0x5c>
		anti_windup = 0;
 80054c6:	2300      	movs	r3, #0
 80054c8:	617b      	str	r3, [r7, #20]
 80054ca:	e001      	b.n	80054d0 <Revolute_velocity_control+0x60>
	} else {
		anti_windup = 1;
 80054cc:	2301      	movs	r3, #1
 80054ce:	617b      	str	r3, [r7, #20]
	}

	if (V_rev_velo_PID >= 18 && anti_windup == 0) {
 80054d0:	4b32      	ldr	r3, [pc, #200]	@ (800559c <Revolute_velocity_control+0x12c>)
 80054d2:	edd3 7a00 	vldr	s15, [r3]
 80054d6:	eeb3 7a02 	vmov.f32	s14, #50	@ 0x41900000  18.0
 80054da:	eef4 7ac7 	vcmpe.f32	s15, s14
 80054de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054e2:	db07      	blt.n	80054f4 <Revolute_velocity_control+0x84>
 80054e4:	697b      	ldr	r3, [r7, #20]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d104      	bne.n	80054f4 <Revolute_velocity_control+0x84>
		Rev_velo_PID.Ki = 0;
 80054ea:	4b2d      	ldr	r3, [pc, #180]	@ (80055a0 <Revolute_velocity_control+0x130>)
 80054ec:	f04f 0200 	mov.w	r2, #0
 80054f0:	61da      	str	r2, [r3, #28]
 80054f2:	e002      	b.n	80054fa <Revolute_velocity_control+0x8a>
	} else {
		Rev_velo_PID.Ki = 0.001;
 80054f4:	4b2a      	ldr	r3, [pc, #168]	@ (80055a0 <Revolute_velocity_control+0x130>)
 80054f6:	4a2b      	ldr	r2, [pc, #172]	@ (80055a4 <Revolute_velocity_control+0x134>)
 80054f8:	61da      	str	r2, [r3, #28]
	}

	if (V_rev_velo_PID > 18) {
 80054fa:	4b28      	ldr	r3, [pc, #160]	@ (800559c <Revolute_velocity_control+0x12c>)
 80054fc:	edd3 7a00 	vldr	s15, [r3]
 8005500:	eeb3 7a02 	vmov.f32	s14, #50	@ 0x41900000  18.0
 8005504:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005508:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800550c:	dd02      	ble.n	8005514 <Revolute_velocity_control+0xa4>
		V_rev_velo_PID = 18;
 800550e:	4b23      	ldr	r3, [pc, #140]	@ (800559c <Revolute_velocity_control+0x12c>)
 8005510:	4a25      	ldr	r2, [pc, #148]	@ (80055a8 <Revolute_velocity_control+0x138>)
 8005512:	601a      	str	r2, [r3, #0]
 8005514:	4b22      	ldr	r3, [pc, #136]	@ (80055a0 <Revolute_velocity_control+0x130>)
 8005516:	613b      	str	r3, [r7, #16]
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	60fb      	str	r3, [r7, #12]
    out = (S->A0 * in) +
 800551c:	693b      	ldr	r3, [r7, #16]
 800551e:	ed93 7a00 	vldr	s14, [r3]
 8005522:	edd7 7a03 	vldr	s15, [r7, #12]
 8005526:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 800552a:	693b      	ldr	r3, [r7, #16]
 800552c:	edd3 6a01 	vldr	s13, [r3, #4]
 8005530:	693b      	ldr	r3, [r7, #16]
 8005532:	edd3 7a03 	vldr	s15, [r3, #12]
 8005536:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 800553a:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 800553e:	693b      	ldr	r3, [r7, #16]
 8005540:	edd3 6a02 	vldr	s13, [r3, #8]
 8005544:	693b      	ldr	r3, [r7, #16]
 8005546:	edd3 7a04 	vldr	s15, [r3, #16]
 800554a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800554e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005552:	693b      	ldr	r3, [r7, #16]
 8005554:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 8005558:	ee77 7a27 	vadd.f32	s15, s14, s15
 800555c:	edc7 7a02 	vstr	s15, [r7, #8]
    S->state[1] = S->state[0];
 8005560:	693b      	ldr	r3, [r7, #16]
 8005562:	68da      	ldr	r2, [r3, #12]
 8005564:	693b      	ldr	r3, [r7, #16]
 8005566:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 8005568:	693b      	ldr	r3, [r7, #16]
 800556a:	68fa      	ldr	r2, [r7, #12]
 800556c:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 800556e:	693b      	ldr	r3, [r7, #16]
 8005570:	68ba      	ldr	r2, [r7, #8]
 8005572:	615a      	str	r2, [r3, #20]
    return (out);
 8005574:	68bb      	ldr	r3, [r7, #8]
	}

	V_rev_velo_PID = arm_pid_f32(&Rev_velo_PID, delta_velo);
 8005576:	4a09      	ldr	r2, [pc, #36]	@ (800559c <Revolute_velocity_control+0x12c>)
 8005578:	6013      	str	r3, [r2, #0]
	error_velo_rev[1] = error_velo_rev[0];
 800557a:	4b07      	ldr	r3, [pc, #28]	@ (8005598 <Revolute_velocity_control+0x128>)
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4a06      	ldr	r2, [pc, #24]	@ (8005598 <Revolute_velocity_control+0x128>)
 8005580:	6053      	str	r3, [r2, #4]
	return V_rev_velo_PID;
 8005582:	4b06      	ldr	r3, [pc, #24]	@ (800559c <Revolute_velocity_control+0x12c>)
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	ee07 3a90 	vmov	s15, r3
}
 800558a:	eeb0 0a67 	vmov.f32	s0, s15
 800558e:	371c      	adds	r7, #28
 8005590:	46bd      	mov	sp, r7
 8005592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005596:	4770      	bx	lr
 8005598:	20000e78 	.word	0x20000e78
 800559c:	20000e70 	.word	0x20000e70
 80055a0:	20000e44 	.word	0x20000e44
 80055a4:	3a83126f 	.word	0x3a83126f
 80055a8:	41900000 	.word	0x41900000

080055ac <voltage_to_pwm>:

float voltage_to_pwm(float voltage) {
 80055ac:	b480      	push	{r7}
 80055ae:	b085      	sub	sp, #20
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	ed87 0a01 	vstr	s0, [r7, #4]
	float pwm = (voltage * 65535) / 24;
 80055b6:	edd7 7a01 	vldr	s15, [r7, #4]
 80055ba:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 80055e4 <voltage_to_pwm+0x38>
 80055be:	ee27 7a87 	vmul.f32	s14, s15, s14
 80055c2:	eef3 6a08 	vmov.f32	s13, #56	@ 0x41c00000  24.0
 80055c6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80055ca:	edc7 7a03 	vstr	s15, [r7, #12]
	return pwm;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	ee07 3a90 	vmov	s15, r3
}
 80055d4:	eeb0 0a67 	vmov.f32	s0, s15
 80055d8:	3714      	adds	r7, #20
 80055da:	46bd      	mov	sp, r7
 80055dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e0:	4770      	bx	lr
 80055e2:	bf00      	nop
 80055e4:	477fff00 	.word	0x477fff00

080055e8 <Revolute_dis>:
//	float load = 0.01 / (2.0 * (22.0/7.0) * 4.0 * motor.Kt_Pri);
//	voltage_dis = (disturbance_feedforward_pri(&motor, load)) * (0.3*9.81) * gain_disturbance; // อย่าลืมคูณ sin(theta)
//	return voltage_dis;
//}

float Revolute_dis() {
 80055e8:	b5b0      	push	{r4, r5, r7, lr}
 80055ea:	af00      	add	r7, sp, #0
//					* 0.4);
//	sine = sinf(Encoder_GetPosition(&encoder2) / (100.0 / 30.0));
//	encoder = Encoder_GetPosition(&encoder2) / (100.0 / 30.0);
//	load = (8.2 * 9.81 * 0.45 * cosf(1.57)) + (0.3 * 9.81 * cosf(1.57) * 0.4);
//	voltage_dis_rev = (disturbance_feedforward(&Rev_motor, load)) * gain_disturbance_rev;
	voltage_dis_rev = (Rev_motor.R_Rev / Rev_motor.Ke_Rev) * kf_rev.x_data[2]
 80055ec:	4b1a      	ldr	r3, [pc, #104]	@ (8005658 <Revolute_dis+0x70>)
 80055ee:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 80055f2:	4b19      	ldr	r3, [pc, #100]	@ (8005658 <Revolute_dis+0x70>)
 80055f4:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80055f8:	f7fb f8f4 	bl	80007e4 <__aeabi_ddiv>
 80055fc:	4602      	mov	r2, r0
 80055fe:	460b      	mov	r3, r1
 8005600:	4614      	mov	r4, r2
 8005602:	461d      	mov	r5, r3
 8005604:	4b15      	ldr	r3, [pc, #84]	@ (800565c <Revolute_dis+0x74>)
 8005606:	f8d3 323c 	ldr.w	r3, [r3, #572]	@ 0x23c
 800560a:	4618      	mov	r0, r3
 800560c:	f7fa ff68 	bl	80004e0 <__aeabi_f2d>
 8005610:	4602      	mov	r2, r0
 8005612:	460b      	mov	r3, r1
			* 1.0 / 3.3;
 8005614:	4620      	mov	r0, r4
 8005616:	4629      	mov	r1, r5
 8005618:	f7fa ffba 	bl	8000590 <__aeabi_dmul>
 800561c:	4602      	mov	r2, r0
 800561e:	460b      	mov	r3, r1
 8005620:	4610      	mov	r0, r2
 8005622:	4619      	mov	r1, r3
 8005624:	a30a      	add	r3, pc, #40	@ (adr r3, 8005650 <Revolute_dis+0x68>)
 8005626:	e9d3 2300 	ldrd	r2, r3, [r3]
 800562a:	f7fb f8db 	bl	80007e4 <__aeabi_ddiv>
 800562e:	4602      	mov	r2, r0
 8005630:	460b      	mov	r3, r1
 8005632:	4610      	mov	r0, r2
 8005634:	4619      	mov	r1, r3
 8005636:	f7fb fa7b 	bl	8000b30 <__aeabi_d2f>
 800563a:	4603      	mov	r3, r0
	voltage_dis_rev = (Rev_motor.R_Rev / Rev_motor.Ke_Rev) * kf_rev.x_data[2]
 800563c:	4a08      	ldr	r2, [pc, #32]	@ (8005660 <Revolute_dis+0x78>)
 800563e:	6013      	str	r3, [r2, #0]
	return voltage_dis_rev;
 8005640:	4b07      	ldr	r3, [pc, #28]	@ (8005660 <Revolute_dis+0x78>)
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	ee07 3a90 	vmov	s15, r3
}
 8005648:	eeb0 0a67 	vmov.f32	s0, s15
 800564c:	bdb0      	pop	{r4, r5, r7, pc}
 800564e:	bf00      	nop
 8005650:	66666666 	.word	0x66666666
 8005654:	400a6666 	.word	0x400a6666
 8005658:	20001510 	.word	0x20001510
 800565c:	200011b0 	.word	0x200011b0
 8005660:	20000d74 	.word	0x20000d74

08005664 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8005664:	b480      	push	{r7}
 8005666:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005668:	b672      	cpsid	i
}
 800566a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800566c:	bf00      	nop
 800566e:	e7fd      	b.n	800566c <Error_Handler+0x8>

08005670 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8005670:	b580      	push	{r7, lr}
 8005672:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8005674:	4b1b      	ldr	r3, [pc, #108]	@ (80056e4 <MX_SPI1_Init+0x74>)
 8005676:	4a1c      	ldr	r2, [pc, #112]	@ (80056e8 <MX_SPI1_Init+0x78>)
 8005678:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800567a:	4b1a      	ldr	r3, [pc, #104]	@ (80056e4 <MX_SPI1_Init+0x74>)
 800567c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8005680:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8005682:	4b18      	ldr	r3, [pc, #96]	@ (80056e4 <MX_SPI1_Init+0x74>)
 8005684:	2200      	movs	r2, #0
 8005686:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8005688:	4b16      	ldr	r3, [pc, #88]	@ (80056e4 <MX_SPI1_Init+0x74>)
 800568a:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800568e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8005690:	4b14      	ldr	r3, [pc, #80]	@ (80056e4 <MX_SPI1_Init+0x74>)
 8005692:	2202      	movs	r2, #2
 8005694:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8005696:	4b13      	ldr	r3, [pc, #76]	@ (80056e4 <MX_SPI1_Init+0x74>)
 8005698:	2201      	movs	r2, #1
 800569a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800569c:	4b11      	ldr	r3, [pc, #68]	@ (80056e4 <MX_SPI1_Init+0x74>)
 800569e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80056a2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80056a4:	4b0f      	ldr	r3, [pc, #60]	@ (80056e4 <MX_SPI1_Init+0x74>)
 80056a6:	2238      	movs	r2, #56	@ 0x38
 80056a8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_LSB;
 80056aa:	4b0e      	ldr	r3, [pc, #56]	@ (80056e4 <MX_SPI1_Init+0x74>)
 80056ac:	2280      	movs	r2, #128	@ 0x80
 80056ae:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80056b0:	4b0c      	ldr	r3, [pc, #48]	@ (80056e4 <MX_SPI1_Init+0x74>)
 80056b2:	2200      	movs	r2, #0
 80056b4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80056b6:	4b0b      	ldr	r3, [pc, #44]	@ (80056e4 <MX_SPI1_Init+0x74>)
 80056b8:	2200      	movs	r2, #0
 80056ba:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80056bc:	4b09      	ldr	r3, [pc, #36]	@ (80056e4 <MX_SPI1_Init+0x74>)
 80056be:	2207      	movs	r2, #7
 80056c0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80056c2:	4b08      	ldr	r3, [pc, #32]	@ (80056e4 <MX_SPI1_Init+0x74>)
 80056c4:	2200      	movs	r2, #0
 80056c6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80056c8:	4b06      	ldr	r3, [pc, #24]	@ (80056e4 <MX_SPI1_Init+0x74>)
 80056ca:	2200      	movs	r2, #0
 80056cc:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80056ce:	4805      	ldr	r0, [pc, #20]	@ (80056e4 <MX_SPI1_Init+0x74>)
 80056d0:	f004 f844 	bl	800975c <HAL_SPI_Init>
 80056d4:	4603      	mov	r3, r0
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d001      	beq.n	80056de <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80056da:	f7ff ffc3 	bl	8005664 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80056de:	bf00      	nop
 80056e0:	bd80      	pop	{r7, pc}
 80056e2:	bf00      	nop
 80056e4:	2000170c 	.word	0x2000170c
 80056e8:	40013000 	.word	0x40013000

080056ec <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b08a      	sub	sp, #40	@ 0x28
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80056f4:	f107 0314 	add.w	r3, r7, #20
 80056f8:	2200      	movs	r2, #0
 80056fa:	601a      	str	r2, [r3, #0]
 80056fc:	605a      	str	r2, [r3, #4]
 80056fe:	609a      	str	r2, [r3, #8]
 8005700:	60da      	str	r2, [r3, #12]
 8005702:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	4a25      	ldr	r2, [pc, #148]	@ (80057a0 <HAL_SPI_MspInit+0xb4>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d144      	bne.n	8005798 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800570e:	4b25      	ldr	r3, [pc, #148]	@ (80057a4 <HAL_SPI_MspInit+0xb8>)
 8005710:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005712:	4a24      	ldr	r2, [pc, #144]	@ (80057a4 <HAL_SPI_MspInit+0xb8>)
 8005714:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005718:	6613      	str	r3, [r2, #96]	@ 0x60
 800571a:	4b22      	ldr	r3, [pc, #136]	@ (80057a4 <HAL_SPI_MspInit+0xb8>)
 800571c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800571e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005722:	613b      	str	r3, [r7, #16]
 8005724:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005726:	4b1f      	ldr	r3, [pc, #124]	@ (80057a4 <HAL_SPI_MspInit+0xb8>)
 8005728:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800572a:	4a1e      	ldr	r2, [pc, #120]	@ (80057a4 <HAL_SPI_MspInit+0xb8>)
 800572c:	f043 0301 	orr.w	r3, r3, #1
 8005730:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005732:	4b1c      	ldr	r3, [pc, #112]	@ (80057a4 <HAL_SPI_MspInit+0xb8>)
 8005734:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005736:	f003 0301 	and.w	r3, r3, #1
 800573a:	60fb      	str	r3, [r7, #12]
 800573c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800573e:	4b19      	ldr	r3, [pc, #100]	@ (80057a4 <HAL_SPI_MspInit+0xb8>)
 8005740:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005742:	4a18      	ldr	r2, [pc, #96]	@ (80057a4 <HAL_SPI_MspInit+0xb8>)
 8005744:	f043 0302 	orr.w	r3, r3, #2
 8005748:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800574a:	4b16      	ldr	r3, [pc, #88]	@ (80057a4 <HAL_SPI_MspInit+0xb8>)
 800574c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800574e:	f003 0302 	and.w	r3, r3, #2
 8005752:	60bb      	str	r3, [r7, #8]
 8005754:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8005756:	2320      	movs	r3, #32
 8005758:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800575a:	2302      	movs	r3, #2
 800575c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800575e:	2300      	movs	r3, #0
 8005760:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005762:	2300      	movs	r3, #0
 8005764:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8005766:	2305      	movs	r3, #5
 8005768:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800576a:	f107 0314 	add.w	r3, r7, #20
 800576e:	4619      	mov	r1, r3
 8005770:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8005774:	f002 fe10 	bl	8008398 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8005778:	2330      	movs	r3, #48	@ 0x30
 800577a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800577c:	2302      	movs	r3, #2
 800577e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005780:	2300      	movs	r3, #0
 8005782:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005784:	2300      	movs	r3, #0
 8005786:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8005788:	2305      	movs	r3, #5
 800578a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800578c:	f107 0314 	add.w	r3, r7, #20
 8005790:	4619      	mov	r1, r3
 8005792:	4805      	ldr	r0, [pc, #20]	@ (80057a8 <HAL_SPI_MspInit+0xbc>)
 8005794:	f002 fe00 	bl	8008398 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8005798:	bf00      	nop
 800579a:	3728      	adds	r7, #40	@ 0x28
 800579c:	46bd      	mov	sp, r7
 800579e:	bd80      	pop	{r7, pc}
 80057a0:	40013000 	.word	0x40013000
 80057a4:	40021000 	.word	0x40021000
 80057a8:	48000400 	.word	0x48000400

080057ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b082      	sub	sp, #8
 80057b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80057b2:	4b0f      	ldr	r3, [pc, #60]	@ (80057f0 <HAL_MspInit+0x44>)
 80057b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80057b6:	4a0e      	ldr	r2, [pc, #56]	@ (80057f0 <HAL_MspInit+0x44>)
 80057b8:	f043 0301 	orr.w	r3, r3, #1
 80057bc:	6613      	str	r3, [r2, #96]	@ 0x60
 80057be:	4b0c      	ldr	r3, [pc, #48]	@ (80057f0 <HAL_MspInit+0x44>)
 80057c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80057c2:	f003 0301 	and.w	r3, r3, #1
 80057c6:	607b      	str	r3, [r7, #4]
 80057c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80057ca:	4b09      	ldr	r3, [pc, #36]	@ (80057f0 <HAL_MspInit+0x44>)
 80057cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057ce:	4a08      	ldr	r2, [pc, #32]	@ (80057f0 <HAL_MspInit+0x44>)
 80057d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80057d4:	6593      	str	r3, [r2, #88]	@ 0x58
 80057d6:	4b06      	ldr	r3, [pc, #24]	@ (80057f0 <HAL_MspInit+0x44>)
 80057d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80057de:	603b      	str	r3, [r7, #0]
 80057e0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80057e2:	f003 f82f 	bl	8008844 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80057e6:	bf00      	nop
 80057e8:	3708      	adds	r7, #8
 80057ea:	46bd      	mov	sp, r7
 80057ec:	bd80      	pop	{r7, pc}
 80057ee:	bf00      	nop
 80057f0:	40021000 	.word	0x40021000

080057f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80057f4:	b480      	push	{r7}
 80057f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80057f8:	bf00      	nop
 80057fa:	e7fd      	b.n	80057f8 <NMI_Handler+0x4>

080057fc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80057fc:	b480      	push	{r7}
 80057fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005800:	bf00      	nop
 8005802:	e7fd      	b.n	8005800 <HardFault_Handler+0x4>

08005804 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005804:	b480      	push	{r7}
 8005806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005808:	bf00      	nop
 800580a:	e7fd      	b.n	8005808 <MemManage_Handler+0x4>

0800580c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800580c:	b480      	push	{r7}
 800580e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005810:	bf00      	nop
 8005812:	e7fd      	b.n	8005810 <BusFault_Handler+0x4>

08005814 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005814:	b480      	push	{r7}
 8005816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005818:	bf00      	nop
 800581a:	e7fd      	b.n	8005818 <UsageFault_Handler+0x4>

0800581c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800581c:	b480      	push	{r7}
 800581e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005820:	bf00      	nop
 8005822:	46bd      	mov	sp, r7
 8005824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005828:	4770      	bx	lr

0800582a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800582a:	b480      	push	{r7}
 800582c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800582e:	bf00      	nop
 8005830:	46bd      	mov	sp, r7
 8005832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005836:	4770      	bx	lr

08005838 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005838:	b480      	push	{r7}
 800583a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800583c:	bf00      	nop
 800583e:	46bd      	mov	sp, r7
 8005840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005844:	4770      	bx	lr

08005846 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005846:	b580      	push	{r7, lr}
 8005848:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800584a:	f000 fe7b 	bl	8006544 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800584e:	bf00      	nop
 8005850:	bd80      	pop	{r7, pc}
	...

08005854 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8005854:	b580      	push	{r7, lr}
 8005856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8005858:	4802      	ldr	r0, [pc, #8]	@ (8005864 <DMA1_Channel1_IRQHandler+0x10>)
 800585a:	f002 fc42 	bl	80080e2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800585e:	bf00      	nop
 8005860:	bd80      	pop	{r7, pc}
 8005862:	bf00      	nop
 8005864:	20001dd0 	.word	0x20001dd0

08005868 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8005868:	b580      	push	{r7, lr}
 800586a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Limit_Switch_pen_1_Pin);
 800586c:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8005870:	f002 ff2c 	bl	80086cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8005874:	bf00      	nop
 8005876:	bd80      	pop	{r7, pc}

08005878 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800587c:	4802      	ldr	r0, [pc, #8]	@ (8005888 <TIM1_BRK_TIM15_IRQHandler+0x10>)
 800587e:	f005 f90d 	bl	800aa9c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8005882:	bf00      	nop
 8005884:	bd80      	pop	{r7, pc}
 8005886:	bf00      	nop
 8005888:	20001770 	.word	0x20001770

0800588c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 800588c:	b580      	push	{r7, lr}
 800588e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005890:	4803      	ldr	r0, [pc, #12]	@ (80058a0 <TIM1_UP_TIM16_IRQHandler+0x14>)
 8005892:	f005 f903 	bl	800aa9c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 8005896:	4803      	ldr	r0, [pc, #12]	@ (80058a4 <TIM1_UP_TIM16_IRQHandler+0x18>)
 8005898:	f005 f900 	bl	800aa9c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800589c:	bf00      	nop
 800589e:	bd80      	pop	{r7, pc}
 80058a0:	20001770 	.word	0x20001770
 80058a4:	20001b6c 	.word	0x20001b6c

080058a8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80058ac:	4802      	ldr	r0, [pc, #8]	@ (80058b8 <TIM2_IRQHandler+0x10>)
 80058ae:	f005 f8f5 	bl	800aa9c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80058b2:	bf00      	nop
 80058b4:	bd80      	pop	{r7, pc}
 80058b6:	bf00      	nop
 80058b8:	2000183c 	.word	0x2000183c

080058bc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80058bc:	b580      	push	{r7, lr}
 80058be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80058c0:	4802      	ldr	r0, [pc, #8]	@ (80058cc <USART2_IRQHandler+0x10>)
 80058c2:	f006 ffef 	bl	800c8a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80058c6:	bf00      	nop
 80058c8:	bd80      	pop	{r7, pc}
 80058ca:	bf00      	nop
 80058cc:	20001d04 	.word	0x20001d04

080058d0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Limit_Switch_pen_2_Pin);
 80058d4:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80058d8:	f002 fef8 	bl	80086cc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Emergency_Pin);
 80058dc:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80058e0:	f002 fef4 	bl	80086cc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Proximity_sensor_Pin);
 80058e4:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80058e8:	f002 fef0 	bl	80086cc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Proximity_Left_Pin);
 80058ec:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80058f0:	f002 feec 	bl	80086cc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Limit_Switch_Prismatic1_Pin);
 80058f4:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80058f8:	f002 fee8 	bl	80086cc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Limit_Switch_Prismatic2_Pin);
 80058fc:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8005900:	f002 fee4 	bl	80086cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8005904:	bf00      	nop
 8005906:	bd80      	pop	{r7, pc}

08005908 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8005908:	b480      	push	{r7}
 800590a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800590c:	4b06      	ldr	r3, [pc, #24]	@ (8005928 <SystemInit+0x20>)
 800590e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005912:	4a05      	ldr	r2, [pc, #20]	@ (8005928 <SystemInit+0x20>)
 8005914:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005918:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800591c:	bf00      	nop
 800591e:	46bd      	mov	sp, r7
 8005920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005924:	4770      	bx	lr
 8005926:	bf00      	nop
 8005928:	e000ed00 	.word	0xe000ed00

0800592c <MX_TIM1_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim20;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800592c:	b580      	push	{r7, lr}
 800592e:	b088      	sub	sp, #32
 8005930:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005932:	f107 0310 	add.w	r3, r7, #16
 8005936:	2200      	movs	r2, #0
 8005938:	601a      	str	r2, [r3, #0]
 800593a:	605a      	str	r2, [r3, #4]
 800593c:	609a      	str	r2, [r3, #8]
 800593e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005940:	1d3b      	adds	r3, r7, #4
 8005942:	2200      	movs	r2, #0
 8005944:	601a      	str	r2, [r3, #0]
 8005946:	605a      	str	r2, [r3, #4]
 8005948:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800594a:	4b20      	ldr	r3, [pc, #128]	@ (80059cc <MX_TIM1_Init+0xa0>)
 800594c:	4a20      	ldr	r2, [pc, #128]	@ (80059d0 <MX_TIM1_Init+0xa4>)
 800594e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8005950:	4b1e      	ldr	r3, [pc, #120]	@ (80059cc <MX_TIM1_Init+0xa0>)
 8005952:	2200      	movs	r2, #0
 8005954:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005956:	4b1d      	ldr	r3, [pc, #116]	@ (80059cc <MX_TIM1_Init+0xa0>)
 8005958:	2200      	movs	r2, #0
 800595a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 60000;
 800595c:	4b1b      	ldr	r3, [pc, #108]	@ (80059cc <MX_TIM1_Init+0xa0>)
 800595e:	f64e 2260 	movw	r2, #60000	@ 0xea60
 8005962:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005964:	4b19      	ldr	r3, [pc, #100]	@ (80059cc <MX_TIM1_Init+0xa0>)
 8005966:	2200      	movs	r2, #0
 8005968:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800596a:	4b18      	ldr	r3, [pc, #96]	@ (80059cc <MX_TIM1_Init+0xa0>)
 800596c:	2200      	movs	r2, #0
 800596e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005970:	4b16      	ldr	r3, [pc, #88]	@ (80059cc <MX_TIM1_Init+0xa0>)
 8005972:	2200      	movs	r2, #0
 8005974:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8005976:	4815      	ldr	r0, [pc, #84]	@ (80059cc <MX_TIM1_Init+0xa0>)
 8005978:	f004 fb1e 	bl	8009fb8 <HAL_TIM_Base_Init>
 800597c:	4603      	mov	r3, r0
 800597e:	2b00      	cmp	r3, #0
 8005980:	d001      	beq.n	8005986 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8005982:	f7ff fe6f 	bl	8005664 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005986:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800598a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800598c:	f107 0310 	add.w	r3, r7, #16
 8005990:	4619      	mov	r1, r3
 8005992:	480e      	ldr	r0, [pc, #56]	@ (80059cc <MX_TIM1_Init+0xa0>)
 8005994:	f005 fb8a 	bl	800b0ac <HAL_TIM_ConfigClockSource>
 8005998:	4603      	mov	r3, r0
 800599a:	2b00      	cmp	r3, #0
 800599c:	d001      	beq.n	80059a2 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800599e:	f7ff fe61 	bl	8005664 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80059a2:	2300      	movs	r3, #0
 80059a4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80059a6:	2300      	movs	r3, #0
 80059a8:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80059aa:	2300      	movs	r3, #0
 80059ac:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80059ae:	1d3b      	adds	r3, r7, #4
 80059b0:	4619      	mov	r1, r3
 80059b2:	4806      	ldr	r0, [pc, #24]	@ (80059cc <MX_TIM1_Init+0xa0>)
 80059b4:	f006 fb60 	bl	800c078 <HAL_TIMEx_MasterConfigSynchronization>
 80059b8:	4603      	mov	r3, r0
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d001      	beq.n	80059c2 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80059be:	f7ff fe51 	bl	8005664 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80059c2:	bf00      	nop
 80059c4:	3720      	adds	r7, #32
 80059c6:	46bd      	mov	sp, r7
 80059c8:	bd80      	pop	{r7, pc}
 80059ca:	bf00      	nop
 80059cc:	20001770 	.word	0x20001770
 80059d0:	40012c00 	.word	0x40012c00

080059d4 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b088      	sub	sp, #32
 80059d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80059da:	f107 0310 	add.w	r3, r7, #16
 80059de:	2200      	movs	r2, #0
 80059e0:	601a      	str	r2, [r3, #0]
 80059e2:	605a      	str	r2, [r3, #4]
 80059e4:	609a      	str	r2, [r3, #8]
 80059e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80059e8:	1d3b      	adds	r3, r7, #4
 80059ea:	2200      	movs	r2, #0
 80059ec:	601a      	str	r2, [r3, #0]
 80059ee:	605a      	str	r2, [r3, #4]
 80059f0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80059f2:	4b1e      	ldr	r3, [pc, #120]	@ (8005a6c <MX_TIM2_Init+0x98>)
 80059f4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80059f8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 169;
 80059fa:	4b1c      	ldr	r3, [pc, #112]	@ (8005a6c <MX_TIM2_Init+0x98>)
 80059fc:	22a9      	movs	r2, #169	@ 0xa9
 80059fe:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005a00:	4b1a      	ldr	r3, [pc, #104]	@ (8005a6c <MX_TIM2_Init+0x98>)
 8005a02:	2200      	movs	r2, #0
 8005a04:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8005a06:	4b19      	ldr	r3, [pc, #100]	@ (8005a6c <MX_TIM2_Init+0x98>)
 8005a08:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005a0c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005a0e:	4b17      	ldr	r3, [pc, #92]	@ (8005a6c <MX_TIM2_Init+0x98>)
 8005a10:	2200      	movs	r2, #0
 8005a12:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005a14:	4b15      	ldr	r3, [pc, #84]	@ (8005a6c <MX_TIM2_Init+0x98>)
 8005a16:	2200      	movs	r2, #0
 8005a18:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8005a1a:	4814      	ldr	r0, [pc, #80]	@ (8005a6c <MX_TIM2_Init+0x98>)
 8005a1c:	f004 facc 	bl	8009fb8 <HAL_TIM_Base_Init>
 8005a20:	4603      	mov	r3, r0
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d001      	beq.n	8005a2a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8005a26:	f7ff fe1d 	bl	8005664 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005a2a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005a2e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8005a30:	f107 0310 	add.w	r3, r7, #16
 8005a34:	4619      	mov	r1, r3
 8005a36:	480d      	ldr	r0, [pc, #52]	@ (8005a6c <MX_TIM2_Init+0x98>)
 8005a38:	f005 fb38 	bl	800b0ac <HAL_TIM_ConfigClockSource>
 8005a3c:	4603      	mov	r3, r0
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d001      	beq.n	8005a46 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8005a42:	f7ff fe0f 	bl	8005664 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005a46:	2300      	movs	r3, #0
 8005a48:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8005a4e:	1d3b      	adds	r3, r7, #4
 8005a50:	4619      	mov	r1, r3
 8005a52:	4806      	ldr	r0, [pc, #24]	@ (8005a6c <MX_TIM2_Init+0x98>)
 8005a54:	f006 fb10 	bl	800c078 <HAL_TIMEx_MasterConfigSynchronization>
 8005a58:	4603      	mov	r3, r0
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d001      	beq.n	8005a62 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8005a5e:	f7ff fe01 	bl	8005664 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8005a62:	bf00      	nop
 8005a64:	3720      	adds	r7, #32
 8005a66:	46bd      	mov	sp, r7
 8005a68:	bd80      	pop	{r7, pc}
 8005a6a:	bf00      	nop
 8005a6c:	2000183c 	.word	0x2000183c

08005a70 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8005a70:	b580      	push	{r7, lr}
 8005a72:	b08c      	sub	sp, #48	@ 0x30
 8005a74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8005a76:	f107 030c 	add.w	r3, r7, #12
 8005a7a:	2224      	movs	r2, #36	@ 0x24
 8005a7c:	2100      	movs	r1, #0
 8005a7e:	4618      	mov	r0, r3
 8005a80:	f009 fdc0 	bl	800f604 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005a84:	463b      	mov	r3, r7
 8005a86:	2200      	movs	r2, #0
 8005a88:	601a      	str	r2, [r3, #0]
 8005a8a:	605a      	str	r2, [r3, #4]
 8005a8c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8005a8e:	4b21      	ldr	r3, [pc, #132]	@ (8005b14 <MX_TIM3_Init+0xa4>)
 8005a90:	4a21      	ldr	r2, [pc, #132]	@ (8005b18 <MX_TIM3_Init+0xa8>)
 8005a92:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8005a94:	4b1f      	ldr	r3, [pc, #124]	@ (8005b14 <MX_TIM3_Init+0xa4>)
 8005a96:	2200      	movs	r2, #0
 8005a98:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005a9a:	4b1e      	ldr	r3, [pc, #120]	@ (8005b14 <MX_TIM3_Init+0xa4>)
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 59999;
 8005aa0:	4b1c      	ldr	r3, [pc, #112]	@ (8005b14 <MX_TIM3_Init+0xa4>)
 8005aa2:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 8005aa6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005aa8:	4b1a      	ldr	r3, [pc, #104]	@ (8005b14 <MX_TIM3_Init+0xa4>)
 8005aaa:	2200      	movs	r2, #0
 8005aac:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005aae:	4b19      	ldr	r3, [pc, #100]	@ (8005b14 <MX_TIM3_Init+0xa4>)
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8005ab4:	2303      	movs	r3, #3
 8005ab6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8005ab8:	2300      	movs	r3, #0
 8005aba:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8005abc:	2301      	movs	r3, #1
 8005abe:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8005ac8:	2300      	movs	r3, #0
 8005aca:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8005acc:	2301      	movs	r3, #1
 8005ace:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8005ad8:	f107 030c 	add.w	r3, r7, #12
 8005adc:	4619      	mov	r1, r3
 8005ade:	480d      	ldr	r0, [pc, #52]	@ (8005b14 <MX_TIM3_Init+0xa4>)
 8005ae0:	f004 fe9a 	bl	800a818 <HAL_TIM_Encoder_Init>
 8005ae4:	4603      	mov	r3, r0
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d001      	beq.n	8005aee <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8005aea:	f7ff fdbb 	bl	8005664 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005aee:	2300      	movs	r3, #0
 8005af0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005af2:	2300      	movs	r3, #0
 8005af4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8005af6:	463b      	mov	r3, r7
 8005af8:	4619      	mov	r1, r3
 8005afa:	4806      	ldr	r0, [pc, #24]	@ (8005b14 <MX_TIM3_Init+0xa4>)
 8005afc:	f006 fabc 	bl	800c078 <HAL_TIMEx_MasterConfigSynchronization>
 8005b00:	4603      	mov	r3, r0
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d001      	beq.n	8005b0a <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8005b06:	f7ff fdad 	bl	8005664 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8005b0a:	bf00      	nop
 8005b0c:	3730      	adds	r7, #48	@ 0x30
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	bd80      	pop	{r7, pc}
 8005b12:	bf00      	nop
 8005b14:	20001908 	.word	0x20001908
 8005b18:	40000400 	.word	0x40000400

08005b1c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b08c      	sub	sp, #48	@ 0x30
 8005b20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8005b22:	f107 030c 	add.w	r3, r7, #12
 8005b26:	2224      	movs	r2, #36	@ 0x24
 8005b28:	2100      	movs	r1, #0
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	f009 fd6a 	bl	800f604 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005b30:	463b      	mov	r3, r7
 8005b32:	2200      	movs	r2, #0
 8005b34:	601a      	str	r2, [r3, #0]
 8005b36:	605a      	str	r2, [r3, #4]
 8005b38:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8005b3a:	4b21      	ldr	r3, [pc, #132]	@ (8005bc0 <MX_TIM4_Init+0xa4>)
 8005b3c:	4a21      	ldr	r2, [pc, #132]	@ (8005bc4 <MX_TIM4_Init+0xa8>)
 8005b3e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8005b40:	4b1f      	ldr	r3, [pc, #124]	@ (8005bc0 <MX_TIM4_Init+0xa4>)
 8005b42:	2200      	movs	r2, #0
 8005b44:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005b46:	4b1e      	ldr	r3, [pc, #120]	@ (8005bc0 <MX_TIM4_Init+0xa4>)
 8005b48:	2200      	movs	r2, #0
 8005b4a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 59999;
 8005b4c:	4b1c      	ldr	r3, [pc, #112]	@ (8005bc0 <MX_TIM4_Init+0xa4>)
 8005b4e:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 8005b52:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005b54:	4b1a      	ldr	r3, [pc, #104]	@ (8005bc0 <MX_TIM4_Init+0xa4>)
 8005b56:	2200      	movs	r2, #0
 8005b58:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005b5a:	4b19      	ldr	r3, [pc, #100]	@ (8005bc0 <MX_TIM4_Init+0xa4>)
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8005b60:	2303      	movs	r3, #3
 8005b62:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8005b64:	2300      	movs	r3, #0
 8005b66:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8005b68:	2301      	movs	r3, #1
 8005b6a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8005b70:	2300      	movs	r3, #0
 8005b72:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8005b74:	2300      	movs	r3, #0
 8005b76:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8005b78:	2301      	movs	r3, #1
 8005b7a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8005b80:	2300      	movs	r3, #0
 8005b82:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8005b84:	f107 030c 	add.w	r3, r7, #12
 8005b88:	4619      	mov	r1, r3
 8005b8a:	480d      	ldr	r0, [pc, #52]	@ (8005bc0 <MX_TIM4_Init+0xa4>)
 8005b8c:	f004 fe44 	bl	800a818 <HAL_TIM_Encoder_Init>
 8005b90:	4603      	mov	r3, r0
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d001      	beq.n	8005b9a <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8005b96:	f7ff fd65 	bl	8005664 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8005ba2:	463b      	mov	r3, r7
 8005ba4:	4619      	mov	r1, r3
 8005ba6:	4806      	ldr	r0, [pc, #24]	@ (8005bc0 <MX_TIM4_Init+0xa4>)
 8005ba8:	f006 fa66 	bl	800c078 <HAL_TIMEx_MasterConfigSynchronization>
 8005bac:	4603      	mov	r3, r0
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d001      	beq.n	8005bb6 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8005bb2:	f7ff fd57 	bl	8005664 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8005bb6:	bf00      	nop
 8005bb8:	3730      	adds	r7, #48	@ 0x30
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	bd80      	pop	{r7, pc}
 8005bbe:	bf00      	nop
 8005bc0:	200019d4 	.word	0x200019d4
 8005bc4:	40000800 	.word	0x40000800

08005bc8 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b09c      	sub	sp, #112	@ 0x70
 8005bcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005bce:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	601a      	str	r2, [r3, #0]
 8005bd6:	605a      	str	r2, [r3, #4]
 8005bd8:	609a      	str	r2, [r3, #8]
 8005bda:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005bdc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8005be0:	2200      	movs	r2, #0
 8005be2:	601a      	str	r2, [r3, #0]
 8005be4:	605a      	str	r2, [r3, #4]
 8005be6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005be8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8005bec:	2200      	movs	r2, #0
 8005bee:	601a      	str	r2, [r3, #0]
 8005bf0:	605a      	str	r2, [r3, #4]
 8005bf2:	609a      	str	r2, [r3, #8]
 8005bf4:	60da      	str	r2, [r3, #12]
 8005bf6:	611a      	str	r2, [r3, #16]
 8005bf8:	615a      	str	r2, [r3, #20]
 8005bfa:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8005bfc:	1d3b      	adds	r3, r7, #4
 8005bfe:	2234      	movs	r2, #52	@ 0x34
 8005c00:	2100      	movs	r1, #0
 8005c02:	4618      	mov	r0, r3
 8005c04:	f009 fcfe 	bl	800f604 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8005c08:	4b45      	ldr	r3, [pc, #276]	@ (8005d20 <MX_TIM8_Init+0x158>)
 8005c0a:	4a46      	ldr	r2, [pc, #280]	@ (8005d24 <MX_TIM8_Init+0x15c>)
 8005c0c:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 169;
 8005c0e:	4b44      	ldr	r3, [pc, #272]	@ (8005d20 <MX_TIM8_Init+0x158>)
 8005c10:	22a9      	movs	r2, #169	@ 0xa9
 8005c12:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005c14:	4b42      	ldr	r3, [pc, #264]	@ (8005d20 <MX_TIM8_Init+0x158>)
 8005c16:	2200      	movs	r2, #0
 8005c18:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 19999;
 8005c1a:	4b41      	ldr	r3, [pc, #260]	@ (8005d20 <MX_TIM8_Init+0x158>)
 8005c1c:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8005c20:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005c22:	4b3f      	ldr	r3, [pc, #252]	@ (8005d20 <MX_TIM8_Init+0x158>)
 8005c24:	2200      	movs	r2, #0
 8005c26:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8005c28:	4b3d      	ldr	r3, [pc, #244]	@ (8005d20 <MX_TIM8_Init+0x158>)
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005c2e:	4b3c      	ldr	r3, [pc, #240]	@ (8005d20 <MX_TIM8_Init+0x158>)
 8005c30:	2200      	movs	r2, #0
 8005c32:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8005c34:	483a      	ldr	r0, [pc, #232]	@ (8005d20 <MX_TIM8_Init+0x158>)
 8005c36:	f004 f9bf 	bl	8009fb8 <HAL_TIM_Base_Init>
 8005c3a:	4603      	mov	r3, r0
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d001      	beq.n	8005c44 <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 8005c40:	f7ff fd10 	bl	8005664 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005c44:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005c48:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8005c4a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8005c4e:	4619      	mov	r1, r3
 8005c50:	4833      	ldr	r0, [pc, #204]	@ (8005d20 <MX_TIM8_Init+0x158>)
 8005c52:	f005 fa2b 	bl	800b0ac <HAL_TIM_ConfigClockSource>
 8005c56:	4603      	mov	r3, r0
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d001      	beq.n	8005c60 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 8005c5c:	f7ff fd02 	bl	8005664 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8005c60:	482f      	ldr	r0, [pc, #188]	@ (8005d20 <MX_TIM8_Init+0x158>)
 8005c62:	f004 fb63 	bl	800a32c <HAL_TIM_PWM_Init>
 8005c66:	4603      	mov	r3, r0
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d001      	beq.n	8005c70 <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 8005c6c:	f7ff fcfa 	bl	8005664 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005c70:	2300      	movs	r3, #0
 8005c72:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8005c74:	2300      	movs	r3, #0
 8005c76:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005c78:	2300      	movs	r3, #0
 8005c7a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8005c7c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8005c80:	4619      	mov	r1, r3
 8005c82:	4827      	ldr	r0, [pc, #156]	@ (8005d20 <MX_TIM8_Init+0x158>)
 8005c84:	f006 f9f8 	bl	800c078 <HAL_TIMEx_MasterConfigSynchronization>
 8005c88:	4603      	mov	r3, r0
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d001      	beq.n	8005c92 <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 8005c8e:	f7ff fce9 	bl	8005664 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005c92:	2360      	movs	r3, #96	@ 0x60
 8005c94:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8005c96:	2300      	movs	r3, #0
 8005c98:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8005caa:	2300      	movs	r3, #0
 8005cac:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8005cae:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8005cb2:	220c      	movs	r2, #12
 8005cb4:	4619      	mov	r1, r3
 8005cb6:	481a      	ldr	r0, [pc, #104]	@ (8005d20 <MX_TIM8_Init+0x158>)
 8005cb8:	f005 f8e4 	bl	800ae84 <HAL_TIM_PWM_ConfigChannel>
 8005cbc:	4603      	mov	r3, r0
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d001      	beq.n	8005cc6 <MX_TIM8_Init+0xfe>
  {
    Error_Handler();
 8005cc2:	f7ff fccf 	bl	8005664 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8005cca:	2300      	movs	r3, #0
 8005ccc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8005cce:	2300      	movs	r3, #0
 8005cd0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8005cda:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005cde:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8005ce8:	2300      	movs	r3, #0
 8005cea:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8005cec:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005cf0:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8005cfe:	1d3b      	adds	r3, r7, #4
 8005d00:	4619      	mov	r1, r3
 8005d02:	4807      	ldr	r0, [pc, #28]	@ (8005d20 <MX_TIM8_Init+0x158>)
 8005d04:	f006 fa4e 	bl	800c1a4 <HAL_TIMEx_ConfigBreakDeadTime>
 8005d08:	4603      	mov	r3, r0
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d001      	beq.n	8005d12 <MX_TIM8_Init+0x14a>
  {
    Error_Handler();
 8005d0e:	f7ff fca9 	bl	8005664 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8005d12:	4803      	ldr	r0, [pc, #12]	@ (8005d20 <MX_TIM8_Init+0x158>)
 8005d14:	f000 fa44 	bl	80061a0 <HAL_TIM_MspPostInit>

}
 8005d18:	bf00      	nop
 8005d1a:	3770      	adds	r7, #112	@ 0x70
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	bd80      	pop	{r7, pc}
 8005d20:	20001aa0 	.word	0x20001aa0
 8005d24:	40013400 	.word	0x40013400

08005d28 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b094      	sub	sp, #80	@ 0x50
 8005d2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8005d2e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8005d32:	2200      	movs	r2, #0
 8005d34:	601a      	str	r2, [r3, #0]
 8005d36:	605a      	str	r2, [r3, #4]
 8005d38:	609a      	str	r2, [r3, #8]
 8005d3a:	60da      	str	r2, [r3, #12]
 8005d3c:	611a      	str	r2, [r3, #16]
 8005d3e:	615a      	str	r2, [r3, #20]
 8005d40:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8005d42:	463b      	mov	r3, r7
 8005d44:	2234      	movs	r2, #52	@ 0x34
 8005d46:	2100      	movs	r1, #0
 8005d48:	4618      	mov	r0, r3
 8005d4a:	f009 fc5b 	bl	800f604 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8005d4e:	4b34      	ldr	r3, [pc, #208]	@ (8005e20 <MX_TIM16_Init+0xf8>)
 8005d50:	4a34      	ldr	r2, [pc, #208]	@ (8005e24 <MX_TIM16_Init+0xfc>)
 8005d52:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 169;
 8005d54:	4b32      	ldr	r3, [pc, #200]	@ (8005e20 <MX_TIM16_Init+0xf8>)
 8005d56:	22a9      	movs	r2, #169	@ 0xa9
 8005d58:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005d5a:	4b31      	ldr	r3, [pc, #196]	@ (8005e20 <MX_TIM16_Init+0xf8>)
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 2005;
 8005d60:	4b2f      	ldr	r3, [pc, #188]	@ (8005e20 <MX_TIM16_Init+0xf8>)
 8005d62:	f240 72d5 	movw	r2, #2005	@ 0x7d5
 8005d66:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005d68:	4b2d      	ldr	r3, [pc, #180]	@ (8005e20 <MX_TIM16_Init+0xf8>)
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8005d6e:	4b2c      	ldr	r3, [pc, #176]	@ (8005e20 <MX_TIM16_Init+0xf8>)
 8005d70:	2200      	movs	r2, #0
 8005d72:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005d74:	4b2a      	ldr	r3, [pc, #168]	@ (8005e20 <MX_TIM16_Init+0xf8>)
 8005d76:	2200      	movs	r2, #0
 8005d78:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8005d7a:	4829      	ldr	r0, [pc, #164]	@ (8005e20 <MX_TIM16_Init+0xf8>)
 8005d7c:	f004 f91c 	bl	8009fb8 <HAL_TIM_Base_Init>
 8005d80:	4603      	mov	r3, r0
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d001      	beq.n	8005d8a <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 8005d86:	f7ff fc6d 	bl	8005664 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim16) != HAL_OK)
 8005d8a:	4825      	ldr	r0, [pc, #148]	@ (8005e20 <MX_TIM16_Init+0xf8>)
 8005d8c:	f004 fa60 	bl	800a250 <HAL_TIM_OC_Init>
 8005d90:	4603      	mov	r3, r0
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d001      	beq.n	8005d9a <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 8005d96:	f7ff fc65 	bl	8005664 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim16, TIM_OPMODE_SINGLE) != HAL_OK)
 8005d9a:	2108      	movs	r1, #8
 8005d9c:	4820      	ldr	r0, [pc, #128]	@ (8005e20 <MX_TIM16_Init+0xf8>)
 8005d9e:	f004 fc45 	bl	800a62c <HAL_TIM_OnePulse_Init>
 8005da2:	4603      	mov	r3, r0
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d001      	beq.n	8005dac <MX_TIM16_Init+0x84>
  {
    Error_Handler();
 8005da8:	f7ff fc5c 	bl	8005664 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_ACTIVE;
 8005dac:	2310      	movs	r3, #16
 8005dae:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.Pulse = 1433;
 8005db0:	f240 5399 	movw	r3, #1433	@ 0x599
 8005db4:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005db6:	2300      	movs	r3, #0
 8005db8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8005dba:	2300      	movs	r3, #0
 8005dbc:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_TIM_OC_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005dca:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8005dce:	2200      	movs	r2, #0
 8005dd0:	4619      	mov	r1, r3
 8005dd2:	4813      	ldr	r0, [pc, #76]	@ (8005e20 <MX_TIM16_Init+0xf8>)
 8005dd4:	f004 ffdc 	bl	800ad90 <HAL_TIM_OC_ConfigChannel>
 8005dd8:	4603      	mov	r3, r0
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d001      	beq.n	8005de2 <MX_TIM16_Init+0xba>
  {
    Error_Handler();
 8005dde:	f7ff fc41 	bl	8005664 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8005de2:	2300      	movs	r3, #0
 8005de4:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8005de6:	2300      	movs	r3, #0
 8005de8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8005dea:	2300      	movs	r3, #0
 8005dec:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8005dee:	2300      	movs	r3, #0
 8005df0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8005df2:	2300      	movs	r3, #0
 8005df4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8005df6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005dfa:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8005e00:	2300      	movs	r3, #0
 8005e02:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8005e04:	463b      	mov	r3, r7
 8005e06:	4619      	mov	r1, r3
 8005e08:	4805      	ldr	r0, [pc, #20]	@ (8005e20 <MX_TIM16_Init+0xf8>)
 8005e0a:	f006 f9cb 	bl	800c1a4 <HAL_TIMEx_ConfigBreakDeadTime>
 8005e0e:	4603      	mov	r3, r0
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d001      	beq.n	8005e18 <MX_TIM16_Init+0xf0>
  {
    Error_Handler();
 8005e14:	f7ff fc26 	bl	8005664 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8005e18:	bf00      	nop
 8005e1a:	3750      	adds	r7, #80	@ 0x50
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	bd80      	pop	{r7, pc}
 8005e20:	20001b6c 	.word	0x20001b6c
 8005e24:	40014400 	.word	0x40014400

08005e28 <MX_TIM20_Init>:
/* TIM20 init function */
void MX_TIM20_Init(void)
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b09c      	sub	sp, #112	@ 0x70
 8005e2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM20_Init 0 */

  /* USER CODE END TIM20_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005e2e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8005e32:	2200      	movs	r2, #0
 8005e34:	601a      	str	r2, [r3, #0]
 8005e36:	605a      	str	r2, [r3, #4]
 8005e38:	609a      	str	r2, [r3, #8]
 8005e3a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005e3c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8005e40:	2200      	movs	r2, #0
 8005e42:	601a      	str	r2, [r3, #0]
 8005e44:	605a      	str	r2, [r3, #4]
 8005e46:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005e48:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	601a      	str	r2, [r3, #0]
 8005e50:	605a      	str	r2, [r3, #4]
 8005e52:	609a      	str	r2, [r3, #8]
 8005e54:	60da      	str	r2, [r3, #12]
 8005e56:	611a      	str	r2, [r3, #16]
 8005e58:	615a      	str	r2, [r3, #20]
 8005e5a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8005e5c:	1d3b      	adds	r3, r7, #4
 8005e5e:	2234      	movs	r2, #52	@ 0x34
 8005e60:	2100      	movs	r1, #0
 8005e62:	4618      	mov	r0, r3
 8005e64:	f009 fbce 	bl	800f604 <memset>

  /* USER CODE BEGIN TIM20_Init 1 */

  /* USER CODE END TIM20_Init 1 */
  htim20.Instance = TIM20;
 8005e68:	4b4b      	ldr	r3, [pc, #300]	@ (8005f98 <MX_TIM20_Init+0x170>)
 8005e6a:	4a4c      	ldr	r2, [pc, #304]	@ (8005f9c <MX_TIM20_Init+0x174>)
 8005e6c:	601a      	str	r2, [r3, #0]
  htim20.Init.Prescaler = 0;
 8005e6e:	4b4a      	ldr	r3, [pc, #296]	@ (8005f98 <MX_TIM20_Init+0x170>)
 8005e70:	2200      	movs	r2, #0
 8005e72:	605a      	str	r2, [r3, #4]
  htim20.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005e74:	4b48      	ldr	r3, [pc, #288]	@ (8005f98 <MX_TIM20_Init+0x170>)
 8005e76:	2200      	movs	r2, #0
 8005e78:	609a      	str	r2, [r3, #8]
  htim20.Init.Period = 65535;
 8005e7a:	4b47      	ldr	r3, [pc, #284]	@ (8005f98 <MX_TIM20_Init+0x170>)
 8005e7c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005e80:	60da      	str	r2, [r3, #12]
  htim20.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005e82:	4b45      	ldr	r3, [pc, #276]	@ (8005f98 <MX_TIM20_Init+0x170>)
 8005e84:	2200      	movs	r2, #0
 8005e86:	611a      	str	r2, [r3, #16]
  htim20.Init.RepetitionCounter = 0;
 8005e88:	4b43      	ldr	r3, [pc, #268]	@ (8005f98 <MX_TIM20_Init+0x170>)
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	615a      	str	r2, [r3, #20]
  htim20.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005e8e:	4b42      	ldr	r3, [pc, #264]	@ (8005f98 <MX_TIM20_Init+0x170>)
 8005e90:	2200      	movs	r2, #0
 8005e92:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim20) != HAL_OK)
 8005e94:	4840      	ldr	r0, [pc, #256]	@ (8005f98 <MX_TIM20_Init+0x170>)
 8005e96:	f004 f88f 	bl	8009fb8 <HAL_TIM_Base_Init>
 8005e9a:	4603      	mov	r3, r0
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d001      	beq.n	8005ea4 <MX_TIM20_Init+0x7c>
  {
    Error_Handler();
 8005ea0:	f7ff fbe0 	bl	8005664 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005ea4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005ea8:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim20, &sClockSourceConfig) != HAL_OK)
 8005eaa:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8005eae:	4619      	mov	r1, r3
 8005eb0:	4839      	ldr	r0, [pc, #228]	@ (8005f98 <MX_TIM20_Init+0x170>)
 8005eb2:	f005 f8fb 	bl	800b0ac <HAL_TIM_ConfigClockSource>
 8005eb6:	4603      	mov	r3, r0
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d001      	beq.n	8005ec0 <MX_TIM20_Init+0x98>
  {
    Error_Handler();
 8005ebc:	f7ff fbd2 	bl	8005664 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim20) != HAL_OK)
 8005ec0:	4835      	ldr	r0, [pc, #212]	@ (8005f98 <MX_TIM20_Init+0x170>)
 8005ec2:	f004 fa33 	bl	800a32c <HAL_TIM_PWM_Init>
 8005ec6:	4603      	mov	r3, r0
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d001      	beq.n	8005ed0 <MX_TIM20_Init+0xa8>
  {
    Error_Handler();
 8005ecc:	f7ff fbca 	bl	8005664 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005ed8:	2300      	movs	r3, #0
 8005eda:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim20, &sMasterConfig) != HAL_OK)
 8005edc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8005ee0:	4619      	mov	r1, r3
 8005ee2:	482d      	ldr	r0, [pc, #180]	@ (8005f98 <MX_TIM20_Init+0x170>)
 8005ee4:	f006 f8c8 	bl	800c078 <HAL_TIMEx_MasterConfigSynchronization>
 8005ee8:	4603      	mov	r3, r0
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d001      	beq.n	8005ef2 <MX_TIM20_Init+0xca>
  {
    Error_Handler();
 8005eee:	f7ff fbb9 	bl	8005664 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005ef2:	2360      	movs	r3, #96	@ 0x60
 8005ef4:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005efa:	2300      	movs	r3, #0
 8005efc:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8005efe:	2300      	movs	r3, #0
 8005f00:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005f02:	2300      	movs	r3, #0
 8005f04:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8005f06:	2300      	movs	r3, #0
 8005f08:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim20, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005f0e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8005f12:	2200      	movs	r2, #0
 8005f14:	4619      	mov	r1, r3
 8005f16:	4820      	ldr	r0, [pc, #128]	@ (8005f98 <MX_TIM20_Init+0x170>)
 8005f18:	f004 ffb4 	bl	800ae84 <HAL_TIM_PWM_ConfigChannel>
 8005f1c:	4603      	mov	r3, r0
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d001      	beq.n	8005f26 <MX_TIM20_Init+0xfe>
  {
    Error_Handler();
 8005f22:	f7ff fb9f 	bl	8005664 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim20, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8005f26:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8005f2a:	2208      	movs	r2, #8
 8005f2c:	4619      	mov	r1, r3
 8005f2e:	481a      	ldr	r0, [pc, #104]	@ (8005f98 <MX_TIM20_Init+0x170>)
 8005f30:	f004 ffa8 	bl	800ae84 <HAL_TIM_PWM_ConfigChannel>
 8005f34:	4603      	mov	r3, r0
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d001      	beq.n	8005f3e <MX_TIM20_Init+0x116>
  {
    Error_Handler();
 8005f3a:	f7ff fb93 	bl	8005664 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8005f3e:	2300      	movs	r3, #0
 8005f40:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8005f42:	2300      	movs	r3, #0
 8005f44:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8005f46:	2300      	movs	r3, #0
 8005f48:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8005f4e:	2300      	movs	r3, #0
 8005f50:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8005f52:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005f56:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8005f58:	2300      	movs	r3, #0
 8005f5a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8005f60:	2300      	movs	r3, #0
 8005f62:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8005f64:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005f68:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8005f6e:	2300      	movs	r3, #0
 8005f70:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8005f72:	2300      	movs	r3, #0
 8005f74:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim20, &sBreakDeadTimeConfig) != HAL_OK)
 8005f76:	1d3b      	adds	r3, r7, #4
 8005f78:	4619      	mov	r1, r3
 8005f7a:	4807      	ldr	r0, [pc, #28]	@ (8005f98 <MX_TIM20_Init+0x170>)
 8005f7c:	f006 f912 	bl	800c1a4 <HAL_TIMEx_ConfigBreakDeadTime>
 8005f80:	4603      	mov	r3, r0
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d001      	beq.n	8005f8a <MX_TIM20_Init+0x162>
  {
    Error_Handler();
 8005f86:	f7ff fb6d 	bl	8005664 <Error_Handler>
  }
  /* USER CODE BEGIN TIM20_Init 2 */

  /* USER CODE END TIM20_Init 2 */
  HAL_TIM_MspPostInit(&htim20);
 8005f8a:	4803      	ldr	r0, [pc, #12]	@ (8005f98 <MX_TIM20_Init+0x170>)
 8005f8c:	f000 f908 	bl	80061a0 <HAL_TIM_MspPostInit>

}
 8005f90:	bf00      	nop
 8005f92:	3770      	adds	r7, #112	@ 0x70
 8005f94:	46bd      	mov	sp, r7
 8005f96:	bd80      	pop	{r7, pc}
 8005f98:	20001c38 	.word	0x20001c38
 8005f9c:	40015000 	.word	0x40015000

08005fa0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b088      	sub	sp, #32
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	4a3d      	ldr	r2, [pc, #244]	@ (80060a4 <HAL_TIM_Base_MspInit+0x104>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d11c      	bne.n	8005fec <HAL_TIM_Base_MspInit+0x4c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005fb2:	4b3d      	ldr	r3, [pc, #244]	@ (80060a8 <HAL_TIM_Base_MspInit+0x108>)
 8005fb4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005fb6:	4a3c      	ldr	r2, [pc, #240]	@ (80060a8 <HAL_TIM_Base_MspInit+0x108>)
 8005fb8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8005fbc:	6613      	str	r3, [r2, #96]	@ 0x60
 8005fbe:	4b3a      	ldr	r3, [pc, #232]	@ (80060a8 <HAL_TIM_Base_MspInit+0x108>)
 8005fc0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005fc2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005fc6:	61fb      	str	r3, [r7, #28]
 8005fc8:	69fb      	ldr	r3, [r7, #28]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8005fca:	2200      	movs	r2, #0
 8005fcc:	2100      	movs	r1, #0
 8005fce:	2018      	movs	r0, #24
 8005fd0:	f001 fe6f 	bl	8007cb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8005fd4:	2018      	movs	r0, #24
 8005fd6:	f001 fe86 	bl	8007ce6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8005fda:	2200      	movs	r2, #0
 8005fdc:	2100      	movs	r1, #0
 8005fde:	2019      	movs	r0, #25
 8005fe0:	f001 fe67 	bl	8007cb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8005fe4:	2019      	movs	r0, #25
 8005fe6:	f001 fe7e 	bl	8007ce6 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM20_CLK_ENABLE();
  /* USER CODE BEGIN TIM20_MspInit 1 */

  /* USER CODE END TIM20_MspInit 1 */
  }
}
 8005fea:	e056      	b.n	800609a <HAL_TIM_Base_MspInit+0xfa>
  else if(tim_baseHandle->Instance==TIM2)
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ff4:	d114      	bne.n	8006020 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005ff6:	4b2c      	ldr	r3, [pc, #176]	@ (80060a8 <HAL_TIM_Base_MspInit+0x108>)
 8005ff8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ffa:	4a2b      	ldr	r2, [pc, #172]	@ (80060a8 <HAL_TIM_Base_MspInit+0x108>)
 8005ffc:	f043 0301 	orr.w	r3, r3, #1
 8006000:	6593      	str	r3, [r2, #88]	@ 0x58
 8006002:	4b29      	ldr	r3, [pc, #164]	@ (80060a8 <HAL_TIM_Base_MspInit+0x108>)
 8006004:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006006:	f003 0301 	and.w	r3, r3, #1
 800600a:	61bb      	str	r3, [r7, #24]
 800600c:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800600e:	2200      	movs	r2, #0
 8006010:	2100      	movs	r1, #0
 8006012:	201c      	movs	r0, #28
 8006014:	f001 fe4d 	bl	8007cb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8006018:	201c      	movs	r0, #28
 800601a:	f001 fe64 	bl	8007ce6 <HAL_NVIC_EnableIRQ>
}
 800601e:	e03c      	b.n	800609a <HAL_TIM_Base_MspInit+0xfa>
  else if(tim_baseHandle->Instance==TIM8)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	4a21      	ldr	r2, [pc, #132]	@ (80060ac <HAL_TIM_Base_MspInit+0x10c>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d10c      	bne.n	8006044 <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800602a:	4b1f      	ldr	r3, [pc, #124]	@ (80060a8 <HAL_TIM_Base_MspInit+0x108>)
 800602c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800602e:	4a1e      	ldr	r2, [pc, #120]	@ (80060a8 <HAL_TIM_Base_MspInit+0x108>)
 8006030:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8006034:	6613      	str	r3, [r2, #96]	@ 0x60
 8006036:	4b1c      	ldr	r3, [pc, #112]	@ (80060a8 <HAL_TIM_Base_MspInit+0x108>)
 8006038:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800603a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800603e:	617b      	str	r3, [r7, #20]
 8006040:	697b      	ldr	r3, [r7, #20]
}
 8006042:	e02a      	b.n	800609a <HAL_TIM_Base_MspInit+0xfa>
  else if(tim_baseHandle->Instance==TIM16)
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	4a19      	ldr	r2, [pc, #100]	@ (80060b0 <HAL_TIM_Base_MspInit+0x110>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d114      	bne.n	8006078 <HAL_TIM_Base_MspInit+0xd8>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800604e:	4b16      	ldr	r3, [pc, #88]	@ (80060a8 <HAL_TIM_Base_MspInit+0x108>)
 8006050:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006052:	4a15      	ldr	r2, [pc, #84]	@ (80060a8 <HAL_TIM_Base_MspInit+0x108>)
 8006054:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006058:	6613      	str	r3, [r2, #96]	@ 0x60
 800605a:	4b13      	ldr	r3, [pc, #76]	@ (80060a8 <HAL_TIM_Base_MspInit+0x108>)
 800605c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800605e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006062:	613b      	str	r3, [r7, #16]
 8006064:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8006066:	2200      	movs	r2, #0
 8006068:	2100      	movs	r1, #0
 800606a:	2019      	movs	r0, #25
 800606c:	f001 fe21 	bl	8007cb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8006070:	2019      	movs	r0, #25
 8006072:	f001 fe38 	bl	8007ce6 <HAL_NVIC_EnableIRQ>
}
 8006076:	e010      	b.n	800609a <HAL_TIM_Base_MspInit+0xfa>
  else if(tim_baseHandle->Instance==TIM20)
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	4a0d      	ldr	r2, [pc, #52]	@ (80060b4 <HAL_TIM_Base_MspInit+0x114>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d10b      	bne.n	800609a <HAL_TIM_Base_MspInit+0xfa>
    __HAL_RCC_TIM20_CLK_ENABLE();
 8006082:	4b09      	ldr	r3, [pc, #36]	@ (80060a8 <HAL_TIM_Base_MspInit+0x108>)
 8006084:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006086:	4a08      	ldr	r2, [pc, #32]	@ (80060a8 <HAL_TIM_Base_MspInit+0x108>)
 8006088:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800608c:	6613      	str	r3, [r2, #96]	@ 0x60
 800608e:	4b06      	ldr	r3, [pc, #24]	@ (80060a8 <HAL_TIM_Base_MspInit+0x108>)
 8006090:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006092:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006096:	60fb      	str	r3, [r7, #12]
 8006098:	68fb      	ldr	r3, [r7, #12]
}
 800609a:	bf00      	nop
 800609c:	3720      	adds	r7, #32
 800609e:	46bd      	mov	sp, r7
 80060a0:	bd80      	pop	{r7, pc}
 80060a2:	bf00      	nop
 80060a4:	40012c00 	.word	0x40012c00
 80060a8:	40021000 	.word	0x40021000
 80060ac:	40013400 	.word	0x40013400
 80060b0:	40014400 	.word	0x40014400
 80060b4:	40015000 	.word	0x40015000

080060b8 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b08c      	sub	sp, #48	@ 0x30
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80060c0:	f107 031c 	add.w	r3, r7, #28
 80060c4:	2200      	movs	r2, #0
 80060c6:	601a      	str	r2, [r3, #0]
 80060c8:	605a      	str	r2, [r3, #4]
 80060ca:	609a      	str	r2, [r3, #8]
 80060cc:	60da      	str	r2, [r3, #12]
 80060ce:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	4a2f      	ldr	r2, [pc, #188]	@ (8006194 <HAL_TIM_Encoder_MspInit+0xdc>)
 80060d6:	4293      	cmp	r3, r2
 80060d8:	d129      	bne.n	800612e <HAL_TIM_Encoder_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80060da:	4b2f      	ldr	r3, [pc, #188]	@ (8006198 <HAL_TIM_Encoder_MspInit+0xe0>)
 80060dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80060de:	4a2e      	ldr	r2, [pc, #184]	@ (8006198 <HAL_TIM_Encoder_MspInit+0xe0>)
 80060e0:	f043 0302 	orr.w	r3, r3, #2
 80060e4:	6593      	str	r3, [r2, #88]	@ 0x58
 80060e6:	4b2c      	ldr	r3, [pc, #176]	@ (8006198 <HAL_TIM_Encoder_MspInit+0xe0>)
 80060e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80060ea:	f003 0302 	and.w	r3, r3, #2
 80060ee:	61bb      	str	r3, [r7, #24]
 80060f0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80060f2:	4b29      	ldr	r3, [pc, #164]	@ (8006198 <HAL_TIM_Encoder_MspInit+0xe0>)
 80060f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80060f6:	4a28      	ldr	r2, [pc, #160]	@ (8006198 <HAL_TIM_Encoder_MspInit+0xe0>)
 80060f8:	f043 0301 	orr.w	r3, r3, #1
 80060fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80060fe:	4b26      	ldr	r3, [pc, #152]	@ (8006198 <HAL_TIM_Encoder_MspInit+0xe0>)
 8006100:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006102:	f003 0301 	and.w	r3, r3, #1
 8006106:	617b      	str	r3, [r7, #20]
 8006108:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = Encoder_1_Pin|Encoder_1A7_Pin;
 800610a:	23c0      	movs	r3, #192	@ 0xc0
 800610c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800610e:	2302      	movs	r3, #2
 8006110:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006112:	2300      	movs	r3, #0
 8006114:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006116:	2300      	movs	r3, #0
 8006118:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800611a:	2302      	movs	r3, #2
 800611c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800611e:	f107 031c 	add.w	r3, r7, #28
 8006122:	4619      	mov	r1, r3
 8006124:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8006128:	f002 f936 	bl	8008398 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800612c:	e02e      	b.n	800618c <HAL_TIM_Encoder_MspInit+0xd4>
  else if(tim_encoderHandle->Instance==TIM4)
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	4a1a      	ldr	r2, [pc, #104]	@ (800619c <HAL_TIM_Encoder_MspInit+0xe4>)
 8006134:	4293      	cmp	r3, r2
 8006136:	d129      	bne.n	800618c <HAL_TIM_Encoder_MspInit+0xd4>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8006138:	4b17      	ldr	r3, [pc, #92]	@ (8006198 <HAL_TIM_Encoder_MspInit+0xe0>)
 800613a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800613c:	4a16      	ldr	r2, [pc, #88]	@ (8006198 <HAL_TIM_Encoder_MspInit+0xe0>)
 800613e:	f043 0304 	orr.w	r3, r3, #4
 8006142:	6593      	str	r3, [r2, #88]	@ 0x58
 8006144:	4b14      	ldr	r3, [pc, #80]	@ (8006198 <HAL_TIM_Encoder_MspInit+0xe0>)
 8006146:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006148:	f003 0304 	and.w	r3, r3, #4
 800614c:	613b      	str	r3, [r7, #16]
 800614e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006150:	4b11      	ldr	r3, [pc, #68]	@ (8006198 <HAL_TIM_Encoder_MspInit+0xe0>)
 8006152:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006154:	4a10      	ldr	r2, [pc, #64]	@ (8006198 <HAL_TIM_Encoder_MspInit+0xe0>)
 8006156:	f043 0301 	orr.w	r3, r3, #1
 800615a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800615c:	4b0e      	ldr	r3, [pc, #56]	@ (8006198 <HAL_TIM_Encoder_MspInit+0xe0>)
 800615e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006160:	f003 0301 	and.w	r3, r3, #1
 8006164:	60fb      	str	r3, [r7, #12]
 8006166:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Encoder_2_Pin|Encoder_2A12_Pin;
 8006168:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800616c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800616e:	2302      	movs	r3, #2
 8006170:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006172:	2300      	movs	r3, #0
 8006174:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006176:	2300      	movs	r3, #0
 8006178:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 800617a:	230a      	movs	r3, #10
 800617c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800617e:	f107 031c 	add.w	r3, r7, #28
 8006182:	4619      	mov	r1, r3
 8006184:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8006188:	f002 f906 	bl	8008398 <HAL_GPIO_Init>
}
 800618c:	bf00      	nop
 800618e:	3730      	adds	r7, #48	@ 0x30
 8006190:	46bd      	mov	sp, r7
 8006192:	bd80      	pop	{r7, pc}
 8006194:	40000400 	.word	0x40000400
 8006198:	40021000 	.word	0x40021000
 800619c:	40000800 	.word	0x40000800

080061a0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b08a      	sub	sp, #40	@ 0x28
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80061a8:	f107 0314 	add.w	r3, r7, #20
 80061ac:	2200      	movs	r2, #0
 80061ae:	601a      	str	r2, [r3, #0]
 80061b0:	605a      	str	r2, [r3, #4]
 80061b2:	609a      	str	r2, [r3, #8]
 80061b4:	60da      	str	r2, [r3, #12]
 80061b6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM8)
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	4a31      	ldr	r2, [pc, #196]	@ (8006284 <HAL_TIM_MspPostInit+0xe4>)
 80061be:	4293      	cmp	r3, r2
 80061c0:	d11d      	bne.n	80061fe <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80061c2:	4b31      	ldr	r3, [pc, #196]	@ (8006288 <HAL_TIM_MspPostInit+0xe8>)
 80061c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80061c6:	4a30      	ldr	r2, [pc, #192]	@ (8006288 <HAL_TIM_MspPostInit+0xe8>)
 80061c8:	f043 0304 	orr.w	r3, r3, #4
 80061cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80061ce:	4b2e      	ldr	r3, [pc, #184]	@ (8006288 <HAL_TIM_MspPostInit+0xe8>)
 80061d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80061d2:	f003 0304 	and.w	r3, r3, #4
 80061d6:	613b      	str	r3, [r7, #16]
 80061d8:	693b      	ldr	r3, [r7, #16]
    /**TIM8 GPIO Configuration
    PC9     ------> TIM8_CH4
    */
    GPIO_InitStruct.Pin = PWM_Servo_Pin;
 80061da:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80061de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80061e0:	2302      	movs	r3, #2
 80061e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80061e4:	2300      	movs	r3, #0
 80061e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80061e8:	2300      	movs	r3, #0
 80061ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 80061ec:	2304      	movs	r3, #4
 80061ee:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(PWM_Servo_GPIO_Port, &GPIO_InitStruct);
 80061f0:	f107 0314 	add.w	r3, r7, #20
 80061f4:	4619      	mov	r1, r3
 80061f6:	4825      	ldr	r0, [pc, #148]	@ (800628c <HAL_TIM_MspPostInit+0xec>)
 80061f8:	f002 f8ce 	bl	8008398 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM20_MspPostInit 1 */

  /* USER CODE END TIM20_MspPostInit 1 */
  }

}
 80061fc:	e03d      	b.n	800627a <HAL_TIM_MspPostInit+0xda>
  else if(timHandle->Instance==TIM20)
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	4a23      	ldr	r2, [pc, #140]	@ (8006290 <HAL_TIM_MspPostInit+0xf0>)
 8006204:	4293      	cmp	r3, r2
 8006206:	d138      	bne.n	800627a <HAL_TIM_MspPostInit+0xda>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006208:	4b1f      	ldr	r3, [pc, #124]	@ (8006288 <HAL_TIM_MspPostInit+0xe8>)
 800620a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800620c:	4a1e      	ldr	r2, [pc, #120]	@ (8006288 <HAL_TIM_MspPostInit+0xe8>)
 800620e:	f043 0302 	orr.w	r3, r3, #2
 8006212:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006214:	4b1c      	ldr	r3, [pc, #112]	@ (8006288 <HAL_TIM_MspPostInit+0xe8>)
 8006216:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006218:	f003 0302 	and.w	r3, r3, #2
 800621c:	60fb      	str	r3, [r7, #12]
 800621e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006220:	4b19      	ldr	r3, [pc, #100]	@ (8006288 <HAL_TIM_MspPostInit+0xe8>)
 8006222:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006224:	4a18      	ldr	r2, [pc, #96]	@ (8006288 <HAL_TIM_MspPostInit+0xe8>)
 8006226:	f043 0304 	orr.w	r3, r3, #4
 800622a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800622c:	4b16      	ldr	r3, [pc, #88]	@ (8006288 <HAL_TIM_MspPostInit+0xe8>)
 800622e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006230:	f003 0304 	and.w	r3, r3, #4
 8006234:	60bb      	str	r3, [r7, #8]
 8006236:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWM_MD20A_24V_Pin;
 8006238:	2304      	movs	r3, #4
 800623a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800623c:	2302      	movs	r3, #2
 800623e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006240:	2300      	movs	r3, #0
 8006242:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006244:	2300      	movs	r3, #0
 8006246:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM20;
 8006248:	2303      	movs	r3, #3
 800624a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(PWM_MD20A_24V_GPIO_Port, &GPIO_InitStruct);
 800624c:	f107 0314 	add.w	r3, r7, #20
 8006250:	4619      	mov	r1, r3
 8006252:	4810      	ldr	r0, [pc, #64]	@ (8006294 <HAL_TIM_MspPostInit+0xf4>)
 8006254:	f002 f8a0 	bl	8008398 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = PWM_MD20A_18V_Pin;
 8006258:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800625c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800625e:	2302      	movs	r3, #2
 8006260:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006262:	2300      	movs	r3, #0
 8006264:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006266:	2300      	movs	r3, #0
 8006268:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM20;
 800626a:	2306      	movs	r3, #6
 800626c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(PWM_MD20A_18V_GPIO_Port, &GPIO_InitStruct);
 800626e:	f107 0314 	add.w	r3, r7, #20
 8006272:	4619      	mov	r1, r3
 8006274:	4805      	ldr	r0, [pc, #20]	@ (800628c <HAL_TIM_MspPostInit+0xec>)
 8006276:	f002 f88f 	bl	8008398 <HAL_GPIO_Init>
}
 800627a:	bf00      	nop
 800627c:	3728      	adds	r7, #40	@ 0x28
 800627e:	46bd      	mov	sp, r7
 8006280:	bd80      	pop	{r7, pc}
 8006282:	bf00      	nop
 8006284:	40013400 	.word	0x40013400
 8006288:	40021000 	.word	0x40021000
 800628c:	48000800 	.word	0x48000800
 8006290:	40015000 	.word	0x40015000
 8006294:	48000400 	.word	0x48000400

08006298 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8006298:	b580      	push	{r7, lr}
 800629a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800629c:	4b23      	ldr	r3, [pc, #140]	@ (800632c <MX_USART2_UART_Init+0x94>)
 800629e:	4a24      	ldr	r2, [pc, #144]	@ (8006330 <MX_USART2_UART_Init+0x98>)
 80062a0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80062a2:	4b22      	ldr	r3, [pc, #136]	@ (800632c <MX_USART2_UART_Init+0x94>)
 80062a4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80062a8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 80062aa:	4b20      	ldr	r3, [pc, #128]	@ (800632c <MX_USART2_UART_Init+0x94>)
 80062ac:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80062b0:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80062b2:	4b1e      	ldr	r3, [pc, #120]	@ (800632c <MX_USART2_UART_Init+0x94>)
 80062b4:	2200      	movs	r2, #0
 80062b6:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 80062b8:	4b1c      	ldr	r3, [pc, #112]	@ (800632c <MX_USART2_UART_Init+0x94>)
 80062ba:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80062be:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80062c0:	4b1a      	ldr	r3, [pc, #104]	@ (800632c <MX_USART2_UART_Init+0x94>)
 80062c2:	220c      	movs	r2, #12
 80062c4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80062c6:	4b19      	ldr	r3, [pc, #100]	@ (800632c <MX_USART2_UART_Init+0x94>)
 80062c8:	2200      	movs	r2, #0
 80062ca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80062cc:	4b17      	ldr	r3, [pc, #92]	@ (800632c <MX_USART2_UART_Init+0x94>)
 80062ce:	2200      	movs	r2, #0
 80062d0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80062d2:	4b16      	ldr	r3, [pc, #88]	@ (800632c <MX_USART2_UART_Init+0x94>)
 80062d4:	2200      	movs	r2, #0
 80062d6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80062d8:	4b14      	ldr	r3, [pc, #80]	@ (800632c <MX_USART2_UART_Init+0x94>)
 80062da:	2200      	movs	r2, #0
 80062dc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80062de:	4b13      	ldr	r3, [pc, #76]	@ (800632c <MX_USART2_UART_Init+0x94>)
 80062e0:	2200      	movs	r2, #0
 80062e2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80062e4:	4811      	ldr	r0, [pc, #68]	@ (800632c <MX_USART2_UART_Init+0x94>)
 80062e6:	f006 f841 	bl	800c36c <HAL_UART_Init>
 80062ea:	4603      	mov	r3, r0
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d001      	beq.n	80062f4 <MX_USART2_UART_Init+0x5c>
  {
    Error_Handler();
 80062f0:	f7ff f9b8 	bl	8005664 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80062f4:	2100      	movs	r1, #0
 80062f6:	480d      	ldr	r0, [pc, #52]	@ (800632c <MX_USART2_UART_Init+0x94>)
 80062f8:	f008 fbc3 	bl	800ea82 <HAL_UARTEx_SetTxFifoThreshold>
 80062fc:	4603      	mov	r3, r0
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d001      	beq.n	8006306 <MX_USART2_UART_Init+0x6e>
  {
    Error_Handler();
 8006302:	f7ff f9af 	bl	8005664 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006306:	2100      	movs	r1, #0
 8006308:	4808      	ldr	r0, [pc, #32]	@ (800632c <MX_USART2_UART_Init+0x94>)
 800630a:	f008 fbf8 	bl	800eafe <HAL_UARTEx_SetRxFifoThreshold>
 800630e:	4603      	mov	r3, r0
 8006310:	2b00      	cmp	r3, #0
 8006312:	d001      	beq.n	8006318 <MX_USART2_UART_Init+0x80>
  {
    Error_Handler();
 8006314:	f7ff f9a6 	bl	8005664 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8006318:	4804      	ldr	r0, [pc, #16]	@ (800632c <MX_USART2_UART_Init+0x94>)
 800631a:	f008 fb79 	bl	800ea10 <HAL_UARTEx_DisableFifoMode>
 800631e:	4603      	mov	r3, r0
 8006320:	2b00      	cmp	r3, #0
 8006322:	d001      	beq.n	8006328 <MX_USART2_UART_Init+0x90>
  {
    Error_Handler();
 8006324:	f7ff f99e 	bl	8005664 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8006328:	bf00      	nop
 800632a:	bd80      	pop	{r7, pc}
 800632c:	20001d04 	.word	0x20001d04
 8006330:	40004400 	.word	0x40004400

08006334 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8006334:	b580      	push	{r7, lr}
 8006336:	b09e      	sub	sp, #120	@ 0x78
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800633c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8006340:	2200      	movs	r2, #0
 8006342:	601a      	str	r2, [r3, #0]
 8006344:	605a      	str	r2, [r3, #4]
 8006346:	609a      	str	r2, [r3, #8]
 8006348:	60da      	str	r2, [r3, #12]
 800634a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800634c:	f107 0310 	add.w	r3, r7, #16
 8006350:	2254      	movs	r2, #84	@ 0x54
 8006352:	2100      	movs	r1, #0
 8006354:	4618      	mov	r0, r3
 8006356:	f009 f955 	bl	800f604 <memset>
  if(uartHandle->Instance==USART2)
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	4a37      	ldr	r2, [pc, #220]	@ (800643c <HAL_UART_MspInit+0x108>)
 8006360:	4293      	cmp	r3, r2
 8006362:	d167      	bne.n	8006434 <HAL_UART_MspInit+0x100>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8006364:	2302      	movs	r3, #2
 8006366:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8006368:	2300      	movs	r3, #0
 800636a:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800636c:	f107 0310 	add.w	r3, r7, #16
 8006370:	4618      	mov	r0, r3
 8006372:	f002 ffa5 	bl	80092c0 <HAL_RCCEx_PeriphCLKConfig>
 8006376:	4603      	mov	r3, r0
 8006378:	2b00      	cmp	r3, #0
 800637a:	d001      	beq.n	8006380 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800637c:	f7ff f972 	bl	8005664 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8006380:	4b2f      	ldr	r3, [pc, #188]	@ (8006440 <HAL_UART_MspInit+0x10c>)
 8006382:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006384:	4a2e      	ldr	r2, [pc, #184]	@ (8006440 <HAL_UART_MspInit+0x10c>)
 8006386:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800638a:	6593      	str	r3, [r2, #88]	@ 0x58
 800638c:	4b2c      	ldr	r3, [pc, #176]	@ (8006440 <HAL_UART_MspInit+0x10c>)
 800638e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006390:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006394:	60fb      	str	r3, [r7, #12]
 8006396:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006398:	4b29      	ldr	r3, [pc, #164]	@ (8006440 <HAL_UART_MspInit+0x10c>)
 800639a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800639c:	4a28      	ldr	r2, [pc, #160]	@ (8006440 <HAL_UART_MspInit+0x10c>)
 800639e:	f043 0301 	orr.w	r3, r3, #1
 80063a2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80063a4:	4b26      	ldr	r3, [pc, #152]	@ (8006440 <HAL_UART_MspInit+0x10c>)
 80063a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80063a8:	f003 0301 	and.w	r3, r3, #1
 80063ac:	60bb      	str	r3, [r7, #8]
 80063ae:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80063b0:	230c      	movs	r3, #12
 80063b2:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80063b4:	2302      	movs	r3, #2
 80063b6:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80063b8:	2300      	movs	r3, #0
 80063ba:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80063bc:	2300      	movs	r3, #0
 80063be:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80063c0:	2307      	movs	r3, #7
 80063c2:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80063c4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80063c8:	4619      	mov	r1, r3
 80063ca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80063ce:	f001 ffe3 	bl	8008398 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel1;
 80063d2:	4b1c      	ldr	r3, [pc, #112]	@ (8006444 <HAL_UART_MspInit+0x110>)
 80063d4:	4a1c      	ldr	r2, [pc, #112]	@ (8006448 <HAL_UART_MspInit+0x114>)
 80063d6:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 80063d8:	4b1a      	ldr	r3, [pc, #104]	@ (8006444 <HAL_UART_MspInit+0x110>)
 80063da:	221b      	movs	r2, #27
 80063dc:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80063de:	4b19      	ldr	r3, [pc, #100]	@ (8006444 <HAL_UART_MspInit+0x110>)
 80063e0:	2210      	movs	r2, #16
 80063e2:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80063e4:	4b17      	ldr	r3, [pc, #92]	@ (8006444 <HAL_UART_MspInit+0x110>)
 80063e6:	2200      	movs	r2, #0
 80063e8:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80063ea:	4b16      	ldr	r3, [pc, #88]	@ (8006444 <HAL_UART_MspInit+0x110>)
 80063ec:	2280      	movs	r2, #128	@ 0x80
 80063ee:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80063f0:	4b14      	ldr	r3, [pc, #80]	@ (8006444 <HAL_UART_MspInit+0x110>)
 80063f2:	2200      	movs	r2, #0
 80063f4:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80063f6:	4b13      	ldr	r3, [pc, #76]	@ (8006444 <HAL_UART_MspInit+0x110>)
 80063f8:	2200      	movs	r2, #0
 80063fa:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80063fc:	4b11      	ldr	r3, [pc, #68]	@ (8006444 <HAL_UART_MspInit+0x110>)
 80063fe:	2200      	movs	r2, #0
 8006400:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8006402:	4b10      	ldr	r3, [pc, #64]	@ (8006444 <HAL_UART_MspInit+0x110>)
 8006404:	2200      	movs	r2, #0
 8006406:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8006408:	480e      	ldr	r0, [pc, #56]	@ (8006444 <HAL_UART_MspInit+0x110>)
 800640a:	f001 fc87 	bl	8007d1c <HAL_DMA_Init>
 800640e:	4603      	mov	r3, r0
 8006410:	2b00      	cmp	r3, #0
 8006412:	d001      	beq.n	8006418 <HAL_UART_MspInit+0xe4>
    {
      Error_Handler();
 8006414:	f7ff f926 	bl	8005664 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	4a0a      	ldr	r2, [pc, #40]	@ (8006444 <HAL_UART_MspInit+0x110>)
 800641c:	67da      	str	r2, [r3, #124]	@ 0x7c
 800641e:	4a09      	ldr	r2, [pc, #36]	@ (8006444 <HAL_UART_MspInit+0x110>)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8006424:	2200      	movs	r2, #0
 8006426:	2100      	movs	r1, #0
 8006428:	2026      	movs	r0, #38	@ 0x26
 800642a:	f001 fc42 	bl	8007cb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800642e:	2026      	movs	r0, #38	@ 0x26
 8006430:	f001 fc59 	bl	8007ce6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8006434:	bf00      	nop
 8006436:	3778      	adds	r7, #120	@ 0x78
 8006438:	46bd      	mov	sp, r7
 800643a:	bd80      	pop	{r7, pc}
 800643c:	40004400 	.word	0x40004400
 8006440:	40021000 	.word	0x40021000
 8006444:	20001dd0 	.word	0x20001dd0
 8006448:	40020008 	.word	0x40020008

0800644c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800644c:	480d      	ldr	r0, [pc, #52]	@ (8006484 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800644e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8006450:	f7ff fa5a 	bl	8005908 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006454:	480c      	ldr	r0, [pc, #48]	@ (8006488 <LoopForever+0x6>)
  ldr r1, =_edata
 8006456:	490d      	ldr	r1, [pc, #52]	@ (800648c <LoopForever+0xa>)
  ldr r2, =_sidata
 8006458:	4a0d      	ldr	r2, [pc, #52]	@ (8006490 <LoopForever+0xe>)
  movs r3, #0
 800645a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800645c:	e002      	b.n	8006464 <LoopCopyDataInit>

0800645e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800645e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006460:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006462:	3304      	adds	r3, #4

08006464 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006464:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006466:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006468:	d3f9      	bcc.n	800645e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800646a:	4a0a      	ldr	r2, [pc, #40]	@ (8006494 <LoopForever+0x12>)
  ldr r4, =_ebss
 800646c:	4c0a      	ldr	r4, [pc, #40]	@ (8006498 <LoopForever+0x16>)
  movs r3, #0
 800646e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006470:	e001      	b.n	8006476 <LoopFillZerobss>

08006472 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006472:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006474:	3204      	adds	r2, #4

08006476 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006476:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006478:	d3fb      	bcc.n	8006472 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800647a:	f009 f8d1 	bl	800f620 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800647e:	f7fd f97f 	bl	8003780 <main>

08006482 <LoopForever>:

LoopForever:
    b LoopForever
 8006482:	e7fe      	b.n	8006482 <LoopForever>
  ldr   r0, =_estack
 8006484:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8006488:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800648c:	20000268 	.word	0x20000268
  ldr r2, =_sidata
 8006490:	080117e0 	.word	0x080117e0
  ldr r2, =_sbss
 8006494:	20000268 	.word	0x20000268
  ldr r4, =_ebss
 8006498:	20001f6c 	.word	0x20001f6c

0800649c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800649c:	e7fe      	b.n	800649c <ADC1_2_IRQHandler>

0800649e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800649e:	b580      	push	{r7, lr}
 80064a0:	b082      	sub	sp, #8
 80064a2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80064a4:	2300      	movs	r3, #0
 80064a6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80064a8:	2003      	movs	r0, #3
 80064aa:	f001 fbf7 	bl	8007c9c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80064ae:	2000      	movs	r0, #0
 80064b0:	f000 f80e 	bl	80064d0 <HAL_InitTick>
 80064b4:	4603      	mov	r3, r0
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d002      	beq.n	80064c0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80064ba:	2301      	movs	r3, #1
 80064bc:	71fb      	strb	r3, [r7, #7]
 80064be:	e001      	b.n	80064c4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80064c0:	f7ff f974 	bl	80057ac <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80064c4:	79fb      	ldrb	r3, [r7, #7]

}
 80064c6:	4618      	mov	r0, r3
 80064c8:	3708      	adds	r7, #8
 80064ca:	46bd      	mov	sp, r7
 80064cc:	bd80      	pop	{r7, pc}
	...

080064d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b084      	sub	sp, #16
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80064d8:	2300      	movs	r3, #0
 80064da:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80064dc:	4b16      	ldr	r3, [pc, #88]	@ (8006538 <HAL_InitTick+0x68>)
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d022      	beq.n	800652a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80064e4:	4b15      	ldr	r3, [pc, #84]	@ (800653c <HAL_InitTick+0x6c>)
 80064e6:	681a      	ldr	r2, [r3, #0]
 80064e8:	4b13      	ldr	r3, [pc, #76]	@ (8006538 <HAL_InitTick+0x68>)
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80064f0:	fbb1 f3f3 	udiv	r3, r1, r3
 80064f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80064f8:	4618      	mov	r0, r3
 80064fa:	f001 fc02 	bl	8007d02 <HAL_SYSTICK_Config>
 80064fe:	4603      	mov	r3, r0
 8006500:	2b00      	cmp	r3, #0
 8006502:	d10f      	bne.n	8006524 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2b0f      	cmp	r3, #15
 8006508:	d809      	bhi.n	800651e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800650a:	2200      	movs	r2, #0
 800650c:	6879      	ldr	r1, [r7, #4]
 800650e:	f04f 30ff 	mov.w	r0, #4294967295
 8006512:	f001 fbce 	bl	8007cb2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8006516:	4a0a      	ldr	r2, [pc, #40]	@ (8006540 <HAL_InitTick+0x70>)
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	6013      	str	r3, [r2, #0]
 800651c:	e007      	b.n	800652e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800651e:	2301      	movs	r3, #1
 8006520:	73fb      	strb	r3, [r7, #15]
 8006522:	e004      	b.n	800652e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8006524:	2301      	movs	r3, #1
 8006526:	73fb      	strb	r3, [r7, #15]
 8006528:	e001      	b.n	800652e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800652a:	2301      	movs	r3, #1
 800652c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800652e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006530:	4618      	mov	r0, r3
 8006532:	3710      	adds	r7, #16
 8006534:	46bd      	mov	sp, r7
 8006536:	bd80      	pop	{r7, pc}
 8006538:	20000214 	.word	0x20000214
 800653c:	2000020c 	.word	0x2000020c
 8006540:	20000210 	.word	0x20000210

08006544 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006544:	b480      	push	{r7}
 8006546:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006548:	4b05      	ldr	r3, [pc, #20]	@ (8006560 <HAL_IncTick+0x1c>)
 800654a:	681a      	ldr	r2, [r3, #0]
 800654c:	4b05      	ldr	r3, [pc, #20]	@ (8006564 <HAL_IncTick+0x20>)
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	4413      	add	r3, r2
 8006552:	4a03      	ldr	r2, [pc, #12]	@ (8006560 <HAL_IncTick+0x1c>)
 8006554:	6013      	str	r3, [r2, #0]
}
 8006556:	bf00      	nop
 8006558:	46bd      	mov	sp, r7
 800655a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655e:	4770      	bx	lr
 8006560:	20001e30 	.word	0x20001e30
 8006564:	20000214 	.word	0x20000214

08006568 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006568:	b480      	push	{r7}
 800656a:	af00      	add	r7, sp, #0
  return uwTick;
 800656c:	4b03      	ldr	r3, [pc, #12]	@ (800657c <HAL_GetTick+0x14>)
 800656e:	681b      	ldr	r3, [r3, #0]
}
 8006570:	4618      	mov	r0, r3
 8006572:	46bd      	mov	sp, r7
 8006574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006578:	4770      	bx	lr
 800657a:	bf00      	nop
 800657c:	20001e30 	.word	0x20001e30

08006580 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8006580:	b480      	push	{r7}
 8006582:	b083      	sub	sp, #12
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
 8006588:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	689b      	ldr	r3, [r3, #8]
 800658e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	431a      	orrs	r2, r3
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	609a      	str	r2, [r3, #8]
}
 800659a:	bf00      	nop
 800659c:	370c      	adds	r7, #12
 800659e:	46bd      	mov	sp, r7
 80065a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a4:	4770      	bx	lr

080065a6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80065a6:	b480      	push	{r7}
 80065a8:	b083      	sub	sp, #12
 80065aa:	af00      	add	r7, sp, #0
 80065ac:	6078      	str	r0, [r7, #4]
 80065ae:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	689b      	ldr	r3, [r3, #8]
 80065b4:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	431a      	orrs	r2, r3
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	609a      	str	r2, [r3, #8]
}
 80065c0:	bf00      	nop
 80065c2:	370c      	adds	r7, #12
 80065c4:	46bd      	mov	sp, r7
 80065c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ca:	4770      	bx	lr

080065cc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80065cc:	b480      	push	{r7}
 80065ce:	b083      	sub	sp, #12
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	689b      	ldr	r3, [r3, #8]
 80065d8:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80065dc:	4618      	mov	r0, r3
 80065de:	370c      	adds	r7, #12
 80065e0:	46bd      	mov	sp, r7
 80065e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e6:	4770      	bx	lr

080065e8 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80065e8:	b480      	push	{r7}
 80065ea:	b087      	sub	sp, #28
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	60f8      	str	r0, [r7, #12]
 80065f0:	60b9      	str	r1, [r7, #8]
 80065f2:	607a      	str	r2, [r7, #4]
 80065f4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	3360      	adds	r3, #96	@ 0x60
 80065fa:	461a      	mov	r2, r3
 80065fc:	68bb      	ldr	r3, [r7, #8]
 80065fe:	009b      	lsls	r3, r3, #2
 8006600:	4413      	add	r3, r2
 8006602:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8006604:	697b      	ldr	r3, [r7, #20]
 8006606:	681a      	ldr	r2, [r3, #0]
 8006608:	4b08      	ldr	r3, [pc, #32]	@ (800662c <LL_ADC_SetOffset+0x44>)
 800660a:	4013      	ands	r3, r2
 800660c:	687a      	ldr	r2, [r7, #4]
 800660e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8006612:	683a      	ldr	r2, [r7, #0]
 8006614:	430a      	orrs	r2, r1
 8006616:	4313      	orrs	r3, r2
 8006618:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800661c:	697b      	ldr	r3, [r7, #20]
 800661e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8006620:	bf00      	nop
 8006622:	371c      	adds	r7, #28
 8006624:	46bd      	mov	sp, r7
 8006626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662a:	4770      	bx	lr
 800662c:	03fff000 	.word	0x03fff000

08006630 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8006630:	b480      	push	{r7}
 8006632:	b085      	sub	sp, #20
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
 8006638:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	3360      	adds	r3, #96	@ 0x60
 800663e:	461a      	mov	r2, r3
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	009b      	lsls	r3, r3, #2
 8006644:	4413      	add	r3, r2
 8006646:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8006650:	4618      	mov	r0, r3
 8006652:	3714      	adds	r7, #20
 8006654:	46bd      	mov	sp, r7
 8006656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665a:	4770      	bx	lr

0800665c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800665c:	b480      	push	{r7}
 800665e:	b087      	sub	sp, #28
 8006660:	af00      	add	r7, sp, #0
 8006662:	60f8      	str	r0, [r7, #12]
 8006664:	60b9      	str	r1, [r7, #8]
 8006666:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	3360      	adds	r3, #96	@ 0x60
 800666c:	461a      	mov	r2, r3
 800666e:	68bb      	ldr	r3, [r7, #8]
 8006670:	009b      	lsls	r3, r3, #2
 8006672:	4413      	add	r3, r2
 8006674:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8006676:	697b      	ldr	r3, [r7, #20]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	431a      	orrs	r2, r3
 8006682:	697b      	ldr	r3, [r7, #20]
 8006684:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8006686:	bf00      	nop
 8006688:	371c      	adds	r7, #28
 800668a:	46bd      	mov	sp, r7
 800668c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006690:	4770      	bx	lr

08006692 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8006692:	b480      	push	{r7}
 8006694:	b087      	sub	sp, #28
 8006696:	af00      	add	r7, sp, #0
 8006698:	60f8      	str	r0, [r7, #12]
 800669a:	60b9      	str	r1, [r7, #8]
 800669c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	3360      	adds	r3, #96	@ 0x60
 80066a2:	461a      	mov	r2, r3
 80066a4:	68bb      	ldr	r3, [r7, #8]
 80066a6:	009b      	lsls	r3, r3, #2
 80066a8:	4413      	add	r3, r2
 80066aa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80066ac:	697b      	ldr	r3, [r7, #20]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	431a      	orrs	r2, r3
 80066b8:	697b      	ldr	r3, [r7, #20]
 80066ba:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80066bc:	bf00      	nop
 80066be:	371c      	adds	r7, #28
 80066c0:	46bd      	mov	sp, r7
 80066c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c6:	4770      	bx	lr

080066c8 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80066c8:	b480      	push	{r7}
 80066ca:	b087      	sub	sp, #28
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	60f8      	str	r0, [r7, #12]
 80066d0:	60b9      	str	r1, [r7, #8]
 80066d2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	3360      	adds	r3, #96	@ 0x60
 80066d8:	461a      	mov	r2, r3
 80066da:	68bb      	ldr	r3, [r7, #8]
 80066dc:	009b      	lsls	r3, r3, #2
 80066de:	4413      	add	r3, r2
 80066e0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80066e2:	697b      	ldr	r3, [r7, #20]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	431a      	orrs	r2, r3
 80066ee:	697b      	ldr	r3, [r7, #20]
 80066f0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80066f2:	bf00      	nop
 80066f4:	371c      	adds	r7, #28
 80066f6:	46bd      	mov	sp, r7
 80066f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fc:	4770      	bx	lr

080066fe <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80066fe:	b480      	push	{r7}
 8006700:	b083      	sub	sp, #12
 8006702:	af00      	add	r7, sp, #0
 8006704:	6078      	str	r0, [r7, #4]
 8006706:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	695b      	ldr	r3, [r3, #20]
 800670c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8006710:	683b      	ldr	r3, [r7, #0]
 8006712:	431a      	orrs	r2, r3
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	615a      	str	r2, [r3, #20]
}
 8006718:	bf00      	nop
 800671a:	370c      	adds	r7, #12
 800671c:	46bd      	mov	sp, r7
 800671e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006722:	4770      	bx	lr

08006724 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8006724:	b480      	push	{r7}
 8006726:	b087      	sub	sp, #28
 8006728:	af00      	add	r7, sp, #0
 800672a:	60f8      	str	r0, [r7, #12]
 800672c:	60b9      	str	r1, [r7, #8]
 800672e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	3330      	adds	r3, #48	@ 0x30
 8006734:	461a      	mov	r2, r3
 8006736:	68bb      	ldr	r3, [r7, #8]
 8006738:	0a1b      	lsrs	r3, r3, #8
 800673a:	009b      	lsls	r3, r3, #2
 800673c:	f003 030c 	and.w	r3, r3, #12
 8006740:	4413      	add	r3, r2
 8006742:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8006744:	697b      	ldr	r3, [r7, #20]
 8006746:	681a      	ldr	r2, [r3, #0]
 8006748:	68bb      	ldr	r3, [r7, #8]
 800674a:	f003 031f 	and.w	r3, r3, #31
 800674e:	211f      	movs	r1, #31
 8006750:	fa01 f303 	lsl.w	r3, r1, r3
 8006754:	43db      	mvns	r3, r3
 8006756:	401a      	ands	r2, r3
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	0e9b      	lsrs	r3, r3, #26
 800675c:	f003 011f 	and.w	r1, r3, #31
 8006760:	68bb      	ldr	r3, [r7, #8]
 8006762:	f003 031f 	and.w	r3, r3, #31
 8006766:	fa01 f303 	lsl.w	r3, r1, r3
 800676a:	431a      	orrs	r2, r3
 800676c:	697b      	ldr	r3, [r7, #20]
 800676e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8006770:	bf00      	nop
 8006772:	371c      	adds	r7, #28
 8006774:	46bd      	mov	sp, r7
 8006776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677a:	4770      	bx	lr

0800677c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800677c:	b480      	push	{r7}
 800677e:	b087      	sub	sp, #28
 8006780:	af00      	add	r7, sp, #0
 8006782:	60f8      	str	r0, [r7, #12]
 8006784:	60b9      	str	r1, [r7, #8]
 8006786:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	3314      	adds	r3, #20
 800678c:	461a      	mov	r2, r3
 800678e:	68bb      	ldr	r3, [r7, #8]
 8006790:	0e5b      	lsrs	r3, r3, #25
 8006792:	009b      	lsls	r3, r3, #2
 8006794:	f003 0304 	and.w	r3, r3, #4
 8006798:	4413      	add	r3, r2
 800679a:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800679c:	697b      	ldr	r3, [r7, #20]
 800679e:	681a      	ldr	r2, [r3, #0]
 80067a0:	68bb      	ldr	r3, [r7, #8]
 80067a2:	0d1b      	lsrs	r3, r3, #20
 80067a4:	f003 031f 	and.w	r3, r3, #31
 80067a8:	2107      	movs	r1, #7
 80067aa:	fa01 f303 	lsl.w	r3, r1, r3
 80067ae:	43db      	mvns	r3, r3
 80067b0:	401a      	ands	r2, r3
 80067b2:	68bb      	ldr	r3, [r7, #8]
 80067b4:	0d1b      	lsrs	r3, r3, #20
 80067b6:	f003 031f 	and.w	r3, r3, #31
 80067ba:	6879      	ldr	r1, [r7, #4]
 80067bc:	fa01 f303 	lsl.w	r3, r1, r3
 80067c0:	431a      	orrs	r2, r3
 80067c2:	697b      	ldr	r3, [r7, #20]
 80067c4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80067c6:	bf00      	nop
 80067c8:	371c      	adds	r7, #28
 80067ca:	46bd      	mov	sp, r7
 80067cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d0:	4770      	bx	lr
	...

080067d4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80067d4:	b480      	push	{r7}
 80067d6:	b085      	sub	sp, #20
 80067d8:	af00      	add	r7, sp, #0
 80067da:	60f8      	str	r0, [r7, #12]
 80067dc:	60b9      	str	r1, [r7, #8]
 80067de:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80067e6:	68bb      	ldr	r3, [r7, #8]
 80067e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80067ec:	43db      	mvns	r3, r3
 80067ee:	401a      	ands	r2, r3
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	f003 0318 	and.w	r3, r3, #24
 80067f6:	4908      	ldr	r1, [pc, #32]	@ (8006818 <LL_ADC_SetChannelSingleDiff+0x44>)
 80067f8:	40d9      	lsrs	r1, r3
 80067fa:	68bb      	ldr	r3, [r7, #8]
 80067fc:	400b      	ands	r3, r1
 80067fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006802:	431a      	orrs	r2, r3
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800680a:	bf00      	nop
 800680c:	3714      	adds	r7, #20
 800680e:	46bd      	mov	sp, r7
 8006810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006814:	4770      	bx	lr
 8006816:	bf00      	nop
 8006818:	0007ffff 	.word	0x0007ffff

0800681c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800681c:	b480      	push	{r7}
 800681e:	b083      	sub	sp, #12
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	689b      	ldr	r3, [r3, #8]
 8006828:	f003 031f 	and.w	r3, r3, #31
}
 800682c:	4618      	mov	r0, r3
 800682e:	370c      	adds	r7, #12
 8006830:	46bd      	mov	sp, r7
 8006832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006836:	4770      	bx	lr

08006838 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8006838:	b480      	push	{r7}
 800683a:	b083      	sub	sp, #12
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	689b      	ldr	r3, [r3, #8]
 8006844:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8006848:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800684c:	687a      	ldr	r2, [r7, #4]
 800684e:	6093      	str	r3, [r2, #8]
}
 8006850:	bf00      	nop
 8006852:	370c      	adds	r7, #12
 8006854:	46bd      	mov	sp, r7
 8006856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685a:	4770      	bx	lr

0800685c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800685c:	b480      	push	{r7}
 800685e:	b083      	sub	sp, #12
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	689b      	ldr	r3, [r3, #8]
 8006868:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800686c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006870:	d101      	bne.n	8006876 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8006872:	2301      	movs	r3, #1
 8006874:	e000      	b.n	8006878 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8006876:	2300      	movs	r3, #0
}
 8006878:	4618      	mov	r0, r3
 800687a:	370c      	adds	r7, #12
 800687c:	46bd      	mov	sp, r7
 800687e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006882:	4770      	bx	lr

08006884 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8006884:	b480      	push	{r7}
 8006886:	b083      	sub	sp, #12
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	689b      	ldr	r3, [r3, #8]
 8006890:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8006894:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8006898:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80068a0:	bf00      	nop
 80068a2:	370c      	adds	r7, #12
 80068a4:	46bd      	mov	sp, r7
 80068a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068aa:	4770      	bx	lr

080068ac <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80068ac:	b480      	push	{r7}
 80068ae:	b083      	sub	sp, #12
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	689b      	ldr	r3, [r3, #8]
 80068b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80068bc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80068c0:	d101      	bne.n	80068c6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80068c2:	2301      	movs	r3, #1
 80068c4:	e000      	b.n	80068c8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80068c6:	2300      	movs	r3, #0
}
 80068c8:	4618      	mov	r0, r3
 80068ca:	370c      	adds	r7, #12
 80068cc:	46bd      	mov	sp, r7
 80068ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d2:	4770      	bx	lr

080068d4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80068d4:	b480      	push	{r7}
 80068d6:	b083      	sub	sp, #12
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	689b      	ldr	r3, [r3, #8]
 80068e0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80068e4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80068e8:	f043 0201 	orr.w	r2, r3, #1
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80068f0:	bf00      	nop
 80068f2:	370c      	adds	r7, #12
 80068f4:	46bd      	mov	sp, r7
 80068f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fa:	4770      	bx	lr

080068fc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80068fc:	b480      	push	{r7}
 80068fe:	b083      	sub	sp, #12
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	689b      	ldr	r3, [r3, #8]
 8006908:	f003 0301 	and.w	r3, r3, #1
 800690c:	2b01      	cmp	r3, #1
 800690e:	d101      	bne.n	8006914 <LL_ADC_IsEnabled+0x18>
 8006910:	2301      	movs	r3, #1
 8006912:	e000      	b.n	8006916 <LL_ADC_IsEnabled+0x1a>
 8006914:	2300      	movs	r3, #0
}
 8006916:	4618      	mov	r0, r3
 8006918:	370c      	adds	r7, #12
 800691a:	46bd      	mov	sp, r7
 800691c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006920:	4770      	bx	lr

08006922 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8006922:	b480      	push	{r7}
 8006924:	b083      	sub	sp, #12
 8006926:	af00      	add	r7, sp, #0
 8006928:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	689b      	ldr	r3, [r3, #8]
 800692e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006932:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8006936:	f043 0204 	orr.w	r2, r3, #4
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800693e:	bf00      	nop
 8006940:	370c      	adds	r7, #12
 8006942:	46bd      	mov	sp, r7
 8006944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006948:	4770      	bx	lr

0800694a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800694a:	b480      	push	{r7}
 800694c:	b083      	sub	sp, #12
 800694e:	af00      	add	r7, sp, #0
 8006950:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	689b      	ldr	r3, [r3, #8]
 8006956:	f003 0304 	and.w	r3, r3, #4
 800695a:	2b04      	cmp	r3, #4
 800695c:	d101      	bne.n	8006962 <LL_ADC_REG_IsConversionOngoing+0x18>
 800695e:	2301      	movs	r3, #1
 8006960:	e000      	b.n	8006964 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8006962:	2300      	movs	r3, #0
}
 8006964:	4618      	mov	r0, r3
 8006966:	370c      	adds	r7, #12
 8006968:	46bd      	mov	sp, r7
 800696a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696e:	4770      	bx	lr

08006970 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8006970:	b480      	push	{r7}
 8006972:	b083      	sub	sp, #12
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	689b      	ldr	r3, [r3, #8]
 800697c:	f003 0308 	and.w	r3, r3, #8
 8006980:	2b08      	cmp	r3, #8
 8006982:	d101      	bne.n	8006988 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8006984:	2301      	movs	r3, #1
 8006986:	e000      	b.n	800698a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8006988:	2300      	movs	r3, #0
}
 800698a:	4618      	mov	r0, r3
 800698c:	370c      	adds	r7, #12
 800698e:	46bd      	mov	sp, r7
 8006990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006994:	4770      	bx	lr
	...

08006998 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8006998:	b590      	push	{r4, r7, lr}
 800699a:	b089      	sub	sp, #36	@ 0x24
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80069a0:	2300      	movs	r3, #0
 80069a2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80069a4:	2300      	movs	r3, #0
 80069a6:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d101      	bne.n	80069b2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80069ae:	2301      	movs	r3, #1
 80069b0:	e1a9      	b.n	8006d06 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	695b      	ldr	r3, [r3, #20]
 80069b6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d109      	bne.n	80069d4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80069c0:	6878      	ldr	r0, [r7, #4]
 80069c2:	f7fc fd53 	bl	800346c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	2200      	movs	r2, #0
 80069ca:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2200      	movs	r2, #0
 80069d0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	4618      	mov	r0, r3
 80069da:	f7ff ff3f 	bl	800685c <LL_ADC_IsDeepPowerDownEnabled>
 80069de:	4603      	mov	r3, r0
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d004      	beq.n	80069ee <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	4618      	mov	r0, r3
 80069ea:	f7ff ff25 	bl	8006838 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	4618      	mov	r0, r3
 80069f4:	f7ff ff5a 	bl	80068ac <LL_ADC_IsInternalRegulatorEnabled>
 80069f8:	4603      	mov	r3, r0
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d115      	bne.n	8006a2a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	4618      	mov	r0, r3
 8006a04:	f7ff ff3e 	bl	8006884 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006a08:	4b9c      	ldr	r3, [pc, #624]	@ (8006c7c <HAL_ADC_Init+0x2e4>)
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	099b      	lsrs	r3, r3, #6
 8006a0e:	4a9c      	ldr	r2, [pc, #624]	@ (8006c80 <HAL_ADC_Init+0x2e8>)
 8006a10:	fba2 2303 	umull	r2, r3, r2, r3
 8006a14:	099b      	lsrs	r3, r3, #6
 8006a16:	3301      	adds	r3, #1
 8006a18:	005b      	lsls	r3, r3, #1
 8006a1a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8006a1c:	e002      	b.n	8006a24 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	3b01      	subs	r3, #1
 8006a22:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d1f9      	bne.n	8006a1e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	4618      	mov	r0, r3
 8006a30:	f7ff ff3c 	bl	80068ac <LL_ADC_IsInternalRegulatorEnabled>
 8006a34:	4603      	mov	r3, r0
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d10d      	bne.n	8006a56 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006a3e:	f043 0210 	orr.w	r2, r3, #16
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006a4a:	f043 0201 	orr.w	r2, r3, #1
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8006a52:	2301      	movs	r3, #1
 8006a54:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	f7ff ff75 	bl	800694a <LL_ADC_REG_IsConversionOngoing>
 8006a60:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006a66:	f003 0310 	and.w	r3, r3, #16
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	f040 8142 	bne.w	8006cf4 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8006a70:	697b      	ldr	r3, [r7, #20]
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	f040 813e 	bne.w	8006cf4 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006a7c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8006a80:	f043 0202 	orr.w	r2, r3, #2
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	f7ff ff35 	bl	80068fc <LL_ADC_IsEnabled>
 8006a92:	4603      	mov	r3, r0
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d141      	bne.n	8006b1c <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006aa0:	d004      	beq.n	8006aac <HAL_ADC_Init+0x114>
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	4a77      	ldr	r2, [pc, #476]	@ (8006c84 <HAL_ADC_Init+0x2ec>)
 8006aa8:	4293      	cmp	r3, r2
 8006aaa:	d10f      	bne.n	8006acc <HAL_ADC_Init+0x134>
 8006aac:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8006ab0:	f7ff ff24 	bl	80068fc <LL_ADC_IsEnabled>
 8006ab4:	4604      	mov	r4, r0
 8006ab6:	4873      	ldr	r0, [pc, #460]	@ (8006c84 <HAL_ADC_Init+0x2ec>)
 8006ab8:	f7ff ff20 	bl	80068fc <LL_ADC_IsEnabled>
 8006abc:	4603      	mov	r3, r0
 8006abe:	4323      	orrs	r3, r4
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	bf0c      	ite	eq
 8006ac4:	2301      	moveq	r3, #1
 8006ac6:	2300      	movne	r3, #0
 8006ac8:	b2db      	uxtb	r3, r3
 8006aca:	e012      	b.n	8006af2 <HAL_ADC_Init+0x15a>
 8006acc:	486e      	ldr	r0, [pc, #440]	@ (8006c88 <HAL_ADC_Init+0x2f0>)
 8006ace:	f7ff ff15 	bl	80068fc <LL_ADC_IsEnabled>
 8006ad2:	4604      	mov	r4, r0
 8006ad4:	486d      	ldr	r0, [pc, #436]	@ (8006c8c <HAL_ADC_Init+0x2f4>)
 8006ad6:	f7ff ff11 	bl	80068fc <LL_ADC_IsEnabled>
 8006ada:	4603      	mov	r3, r0
 8006adc:	431c      	orrs	r4, r3
 8006ade:	486c      	ldr	r0, [pc, #432]	@ (8006c90 <HAL_ADC_Init+0x2f8>)
 8006ae0:	f7ff ff0c 	bl	80068fc <LL_ADC_IsEnabled>
 8006ae4:	4603      	mov	r3, r0
 8006ae6:	4323      	orrs	r3, r4
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	bf0c      	ite	eq
 8006aec:	2301      	moveq	r3, #1
 8006aee:	2300      	movne	r3, #0
 8006af0:	b2db      	uxtb	r3, r3
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d012      	beq.n	8006b1c <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006afe:	d004      	beq.n	8006b0a <HAL_ADC_Init+0x172>
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	4a5f      	ldr	r2, [pc, #380]	@ (8006c84 <HAL_ADC_Init+0x2ec>)
 8006b06:	4293      	cmp	r3, r2
 8006b08:	d101      	bne.n	8006b0e <HAL_ADC_Init+0x176>
 8006b0a:	4a62      	ldr	r2, [pc, #392]	@ (8006c94 <HAL_ADC_Init+0x2fc>)
 8006b0c:	e000      	b.n	8006b10 <HAL_ADC_Init+0x178>
 8006b0e:	4a62      	ldr	r2, [pc, #392]	@ (8006c98 <HAL_ADC_Init+0x300>)
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	685b      	ldr	r3, [r3, #4]
 8006b14:	4619      	mov	r1, r3
 8006b16:	4610      	mov	r0, r2
 8006b18:	f7ff fd32 	bl	8006580 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	7f5b      	ldrb	r3, [r3, #29]
 8006b20:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006b26:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8006b2c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8006b32:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006b3a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006b3c:	4313      	orrs	r3, r2
 8006b3e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006b46:	2b01      	cmp	r3, #1
 8006b48:	d106      	bne.n	8006b58 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b4e:	3b01      	subs	r3, #1
 8006b50:	045b      	lsls	r3, r3, #17
 8006b52:	69ba      	ldr	r2, [r7, #24]
 8006b54:	4313      	orrs	r3, r2
 8006b56:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d009      	beq.n	8006b74 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b64:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b6c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8006b6e:	69ba      	ldr	r2, [r7, #24]
 8006b70:	4313      	orrs	r3, r2
 8006b72:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	68da      	ldr	r2, [r3, #12]
 8006b7a:	4b48      	ldr	r3, [pc, #288]	@ (8006c9c <HAL_ADC_Init+0x304>)
 8006b7c:	4013      	ands	r3, r2
 8006b7e:	687a      	ldr	r2, [r7, #4]
 8006b80:	6812      	ldr	r2, [r2, #0]
 8006b82:	69b9      	ldr	r1, [r7, #24]
 8006b84:	430b      	orrs	r3, r1
 8006b86:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	691b      	ldr	r3, [r3, #16]
 8006b8e:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	430a      	orrs	r2, r1
 8006b9c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	f7ff fee4 	bl	8006970 <LL_ADC_INJ_IsConversionOngoing>
 8006ba8:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8006baa:	697b      	ldr	r3, [r7, #20]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d17f      	bne.n	8006cb0 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8006bb0:	693b      	ldr	r3, [r7, #16]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d17c      	bne.n	8006cb0 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8006bba:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006bc2:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8006bc4:	4313      	orrs	r3, r2
 8006bc6:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	68db      	ldr	r3, [r3, #12]
 8006bce:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006bd2:	f023 0302 	bic.w	r3, r3, #2
 8006bd6:	687a      	ldr	r2, [r7, #4]
 8006bd8:	6812      	ldr	r2, [r2, #0]
 8006bda:	69b9      	ldr	r1, [r7, #24]
 8006bdc:	430b      	orrs	r3, r1
 8006bde:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	691b      	ldr	r3, [r3, #16]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d017      	beq.n	8006c18 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	691a      	ldr	r2, [r3, #16]
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8006bf6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8006c00:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8006c04:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8006c08:	687a      	ldr	r2, [r7, #4]
 8006c0a:	6911      	ldr	r1, [r2, #16]
 8006c0c:	687a      	ldr	r2, [r7, #4]
 8006c0e:	6812      	ldr	r2, [r2, #0]
 8006c10:	430b      	orrs	r3, r1
 8006c12:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8006c16:	e013      	b.n	8006c40 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	691a      	ldr	r2, [r3, #16]
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8006c26:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8006c30:	687a      	ldr	r2, [r7, #4]
 8006c32:	6812      	ldr	r2, [r2, #0]
 8006c34:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8006c38:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8006c3c:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006c46:	2b01      	cmp	r3, #1
 8006c48:	d12a      	bne.n	8006ca0 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	691b      	ldr	r3, [r3, #16]
 8006c50:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8006c54:	f023 0304 	bic.w	r3, r3, #4
 8006c58:	687a      	ldr	r2, [r7, #4]
 8006c5a:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8006c5c:	687a      	ldr	r2, [r7, #4]
 8006c5e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006c60:	4311      	orrs	r1, r2
 8006c62:	687a      	ldr	r2, [r7, #4]
 8006c64:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8006c66:	4311      	orrs	r1, r2
 8006c68:	687a      	ldr	r2, [r7, #4]
 8006c6a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8006c6c:	430a      	orrs	r2, r1
 8006c6e:	431a      	orrs	r2, r3
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	f042 0201 	orr.w	r2, r2, #1
 8006c78:	611a      	str	r2, [r3, #16]
 8006c7a:	e019      	b.n	8006cb0 <HAL_ADC_Init+0x318>
 8006c7c:	2000020c 	.word	0x2000020c
 8006c80:	053e2d63 	.word	0x053e2d63
 8006c84:	50000100 	.word	0x50000100
 8006c88:	50000400 	.word	0x50000400
 8006c8c:	50000500 	.word	0x50000500
 8006c90:	50000600 	.word	0x50000600
 8006c94:	50000300 	.word	0x50000300
 8006c98:	50000700 	.word	0x50000700
 8006c9c:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	691a      	ldr	r2, [r3, #16]
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	f022 0201 	bic.w	r2, r2, #1
 8006cae:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	695b      	ldr	r3, [r3, #20]
 8006cb4:	2b01      	cmp	r3, #1
 8006cb6:	d10c      	bne.n	8006cd2 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cbe:	f023 010f 	bic.w	r1, r3, #15
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	6a1b      	ldr	r3, [r3, #32]
 8006cc6:	1e5a      	subs	r2, r3, #1
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	430a      	orrs	r2, r1
 8006cce:	631a      	str	r2, [r3, #48]	@ 0x30
 8006cd0:	e007      	b.n	8006ce2 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	f022 020f 	bic.w	r2, r2, #15
 8006ce0:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006ce6:	f023 0303 	bic.w	r3, r3, #3
 8006cea:	f043 0201 	orr.w	r2, r3, #1
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006cf2:	e007      	b.n	8006d04 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006cf8:	f043 0210 	orr.w	r2, r3, #16
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8006d00:	2301      	movs	r3, #1
 8006d02:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8006d04:	7ffb      	ldrb	r3, [r7, #31]
}
 8006d06:	4618      	mov	r0, r3
 8006d08:	3724      	adds	r7, #36	@ 0x24
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	bd90      	pop	{r4, r7, pc}
 8006d0e:	bf00      	nop

08006d10 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8006d10:	b580      	push	{r7, lr}
 8006d12:	b086      	sub	sp, #24
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006d20:	d004      	beq.n	8006d2c <HAL_ADC_Start+0x1c>
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	4a67      	ldr	r2, [pc, #412]	@ (8006ec4 <HAL_ADC_Start+0x1b4>)
 8006d28:	4293      	cmp	r3, r2
 8006d2a:	d101      	bne.n	8006d30 <HAL_ADC_Start+0x20>
 8006d2c:	4b66      	ldr	r3, [pc, #408]	@ (8006ec8 <HAL_ADC_Start+0x1b8>)
 8006d2e:	e000      	b.n	8006d32 <HAL_ADC_Start+0x22>
 8006d30:	4b66      	ldr	r3, [pc, #408]	@ (8006ecc <HAL_ADC_Start+0x1bc>)
 8006d32:	4618      	mov	r0, r3
 8006d34:	f7ff fd72 	bl	800681c <LL_ADC_GetMultimode>
 8006d38:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	4618      	mov	r0, r3
 8006d40:	f7ff fe03 	bl	800694a <LL_ADC_REG_IsConversionOngoing>
 8006d44:	4603      	mov	r3, r0
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	f040 80b4 	bne.w	8006eb4 <HAL_ADC_Start+0x1a4>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8006d52:	2b01      	cmp	r3, #1
 8006d54:	d101      	bne.n	8006d5a <HAL_ADC_Start+0x4a>
 8006d56:	2302      	movs	r3, #2
 8006d58:	e0af      	b.n	8006eba <HAL_ADC_Start+0x1aa>
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	2201      	movs	r2, #1
 8006d5e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8006d62:	6878      	ldr	r0, [r7, #4]
 8006d64:	f000 fd06 	bl	8007774 <ADC_Enable>
 8006d68:	4603      	mov	r3, r0
 8006d6a:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8006d6c:	7dfb      	ldrb	r3, [r7, #23]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	f040 809b 	bne.w	8006eaa <HAL_ADC_Start+0x19a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006d78:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8006d7c:	f023 0301 	bic.w	r3, r3, #1
 8006d80:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	4a4d      	ldr	r2, [pc, #308]	@ (8006ec4 <HAL_ADC_Start+0x1b4>)
 8006d8e:	4293      	cmp	r3, r2
 8006d90:	d009      	beq.n	8006da6 <HAL_ADC_Start+0x96>
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	4a4e      	ldr	r2, [pc, #312]	@ (8006ed0 <HAL_ADC_Start+0x1c0>)
 8006d98:	4293      	cmp	r3, r2
 8006d9a:	d002      	beq.n	8006da2 <HAL_ADC_Start+0x92>
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	e003      	b.n	8006daa <HAL_ADC_Start+0x9a>
 8006da2:	4b4c      	ldr	r3, [pc, #304]	@ (8006ed4 <HAL_ADC_Start+0x1c4>)
 8006da4:	e001      	b.n	8006daa <HAL_ADC_Start+0x9a>
 8006da6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8006daa:	687a      	ldr	r2, [r7, #4]
 8006dac:	6812      	ldr	r2, [r2, #0]
 8006dae:	4293      	cmp	r3, r2
 8006db0:	d002      	beq.n	8006db8 <HAL_ADC_Start+0xa8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006db2:	693b      	ldr	r3, [r7, #16]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d105      	bne.n	8006dc4 <HAL_ADC_Start+0xb4>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006dbc:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006dc8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006dcc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006dd0:	d106      	bne.n	8006de0 <HAL_ADC_Start+0xd0>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006dd6:	f023 0206 	bic.w	r2, r3, #6
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	661a      	str	r2, [r3, #96]	@ 0x60
 8006dde:	e002      	b.n	8006de6 <HAL_ADC_Start+0xd6>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2200      	movs	r2, #0
 8006de4:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	221c      	movs	r2, #28
 8006dec:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	2200      	movs	r2, #0
 8006df2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	4a32      	ldr	r2, [pc, #200]	@ (8006ec4 <HAL_ADC_Start+0x1b4>)
 8006dfc:	4293      	cmp	r3, r2
 8006dfe:	d009      	beq.n	8006e14 <HAL_ADC_Start+0x104>
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	4a32      	ldr	r2, [pc, #200]	@ (8006ed0 <HAL_ADC_Start+0x1c0>)
 8006e06:	4293      	cmp	r3, r2
 8006e08:	d002      	beq.n	8006e10 <HAL_ADC_Start+0x100>
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	e003      	b.n	8006e18 <HAL_ADC_Start+0x108>
 8006e10:	4b30      	ldr	r3, [pc, #192]	@ (8006ed4 <HAL_ADC_Start+0x1c4>)
 8006e12:	e001      	b.n	8006e18 <HAL_ADC_Start+0x108>
 8006e14:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8006e18:	687a      	ldr	r2, [r7, #4]
 8006e1a:	6812      	ldr	r2, [r2, #0]
 8006e1c:	4293      	cmp	r3, r2
 8006e1e:	d008      	beq.n	8006e32 <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006e20:	693b      	ldr	r3, [r7, #16]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d005      	beq.n	8006e32 <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8006e26:	693b      	ldr	r3, [r7, #16]
 8006e28:	2b05      	cmp	r3, #5
 8006e2a:	d002      	beq.n	8006e32 <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8006e2c:	693b      	ldr	r3, [r7, #16]
 8006e2e:	2b09      	cmp	r3, #9
 8006e30:	d114      	bne.n	8006e5c <HAL_ADC_Start+0x14c>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	68db      	ldr	r3, [r3, #12]
 8006e38:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d007      	beq.n	8006e50 <HAL_ADC_Start+0x140>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006e44:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8006e48:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	4618      	mov	r0, r3
 8006e56:	f7ff fd64 	bl	8006922 <LL_ADC_REG_StartConversion>
 8006e5a:	e02d      	b.n	8006eb8 <HAL_ADC_Start+0x1a8>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006e60:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	4a15      	ldr	r2, [pc, #84]	@ (8006ec4 <HAL_ADC_Start+0x1b4>)
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	d009      	beq.n	8006e86 <HAL_ADC_Start+0x176>
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	4a16      	ldr	r2, [pc, #88]	@ (8006ed0 <HAL_ADC_Start+0x1c0>)
 8006e78:	4293      	cmp	r3, r2
 8006e7a:	d002      	beq.n	8006e82 <HAL_ADC_Start+0x172>
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	e003      	b.n	8006e8a <HAL_ADC_Start+0x17a>
 8006e82:	4b14      	ldr	r3, [pc, #80]	@ (8006ed4 <HAL_ADC_Start+0x1c4>)
 8006e84:	e001      	b.n	8006e8a <HAL_ADC_Start+0x17a>
 8006e86:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8006e8a:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	68db      	ldr	r3, [r3, #12]
 8006e90:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d00f      	beq.n	8006eb8 <HAL_ADC_Start+0x1a8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006e9c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8006ea0:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006ea8:	e006      	b.n	8006eb8 <HAL_ADC_Start+0x1a8>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	2200      	movs	r2, #0
 8006eae:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8006eb2:	e001      	b.n	8006eb8 <HAL_ADC_Start+0x1a8>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8006eb4:	2302      	movs	r3, #2
 8006eb6:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8006eb8:	7dfb      	ldrb	r3, [r7, #23]
}
 8006eba:	4618      	mov	r0, r3
 8006ebc:	3718      	adds	r7, #24
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	bd80      	pop	{r7, pc}
 8006ec2:	bf00      	nop
 8006ec4:	50000100 	.word	0x50000100
 8006ec8:	50000300 	.word	0x50000300
 8006ecc:	50000700 	.word	0x50000700
 8006ed0:	50000500 	.word	0x50000500
 8006ed4:	50000400 	.word	0x50000400

08006ed8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8006ed8:	b480      	push	{r7}
 8006eda:	b083      	sub	sp, #12
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	370c      	adds	r7, #12
 8006eea:	46bd      	mov	sp, r7
 8006eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef0:	4770      	bx	lr
	...

08006ef4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	b0b6      	sub	sp, #216	@ 0xd8
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]
 8006efc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006efe:	2300      	movs	r3, #0
 8006f00:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8006f04:	2300      	movs	r3, #0
 8006f06:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8006f0e:	2b01      	cmp	r3, #1
 8006f10:	d102      	bne.n	8006f18 <HAL_ADC_ConfigChannel+0x24>
 8006f12:	2302      	movs	r3, #2
 8006f14:	f000 bc13 	b.w	800773e <HAL_ADC_ConfigChannel+0x84a>
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2201      	movs	r2, #1
 8006f1c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	4618      	mov	r0, r3
 8006f26:	f7ff fd10 	bl	800694a <LL_ADC_REG_IsConversionOngoing>
 8006f2a:	4603      	mov	r3, r0
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	f040 83f3 	bne.w	8007718 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	6818      	ldr	r0, [r3, #0]
 8006f36:	683b      	ldr	r3, [r7, #0]
 8006f38:	6859      	ldr	r1, [r3, #4]
 8006f3a:	683b      	ldr	r3, [r7, #0]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	461a      	mov	r2, r3
 8006f40:	f7ff fbf0 	bl	8006724 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	4618      	mov	r0, r3
 8006f4a:	f7ff fcfe 	bl	800694a <LL_ADC_REG_IsConversionOngoing>
 8006f4e:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	4618      	mov	r0, r3
 8006f58:	f7ff fd0a 	bl	8006970 <LL_ADC_INJ_IsConversionOngoing>
 8006f5c:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8006f60:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	f040 81d9 	bne.w	800731c <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8006f6a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	f040 81d4 	bne.w	800731c <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8006f74:	683b      	ldr	r3, [r7, #0]
 8006f76:	689b      	ldr	r3, [r3, #8]
 8006f78:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006f7c:	d10f      	bne.n	8006f9e <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	6818      	ldr	r0, [r3, #0]
 8006f82:	683b      	ldr	r3, [r7, #0]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	2200      	movs	r2, #0
 8006f88:	4619      	mov	r1, r3
 8006f8a:	f7ff fbf7 	bl	800677c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8006f96:	4618      	mov	r0, r3
 8006f98:	f7ff fbb1 	bl	80066fe <LL_ADC_SetSamplingTimeCommonConfig>
 8006f9c:	e00e      	b.n	8006fbc <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	6818      	ldr	r0, [r3, #0]
 8006fa2:	683b      	ldr	r3, [r7, #0]
 8006fa4:	6819      	ldr	r1, [r3, #0]
 8006fa6:	683b      	ldr	r3, [r7, #0]
 8006fa8:	689b      	ldr	r3, [r3, #8]
 8006faa:	461a      	mov	r2, r3
 8006fac:	f7ff fbe6 	bl	800677c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	2100      	movs	r1, #0
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	f7ff fba1 	bl	80066fe <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8006fbc:	683b      	ldr	r3, [r7, #0]
 8006fbe:	695a      	ldr	r2, [r3, #20]
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	68db      	ldr	r3, [r3, #12]
 8006fc6:	08db      	lsrs	r3, r3, #3
 8006fc8:	f003 0303 	and.w	r3, r3, #3
 8006fcc:	005b      	lsls	r3, r3, #1
 8006fce:	fa02 f303 	lsl.w	r3, r2, r3
 8006fd2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8006fd6:	683b      	ldr	r3, [r7, #0]
 8006fd8:	691b      	ldr	r3, [r3, #16]
 8006fda:	2b04      	cmp	r3, #4
 8006fdc:	d022      	beq.n	8007024 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	6818      	ldr	r0, [r3, #0]
 8006fe2:	683b      	ldr	r3, [r7, #0]
 8006fe4:	6919      	ldr	r1, [r3, #16]
 8006fe6:	683b      	ldr	r3, [r7, #0]
 8006fe8:	681a      	ldr	r2, [r3, #0]
 8006fea:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006fee:	f7ff fafb 	bl	80065e8 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	6818      	ldr	r0, [r3, #0]
 8006ff6:	683b      	ldr	r3, [r7, #0]
 8006ff8:	6919      	ldr	r1, [r3, #16]
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	699b      	ldr	r3, [r3, #24]
 8006ffe:	461a      	mov	r2, r3
 8007000:	f7ff fb47 	bl	8006692 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	6818      	ldr	r0, [r3, #0]
 8007008:	683b      	ldr	r3, [r7, #0]
 800700a:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 800700c:	683b      	ldr	r3, [r7, #0]
 800700e:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8007010:	2b01      	cmp	r3, #1
 8007012:	d102      	bne.n	800701a <HAL_ADC_ConfigChannel+0x126>
 8007014:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007018:	e000      	b.n	800701c <HAL_ADC_ConfigChannel+0x128>
 800701a:	2300      	movs	r3, #0
 800701c:	461a      	mov	r2, r3
 800701e:	f7ff fb53 	bl	80066c8 <LL_ADC_SetOffsetSaturation>
 8007022:	e17b      	b.n	800731c <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	2100      	movs	r1, #0
 800702a:	4618      	mov	r0, r3
 800702c:	f7ff fb00 	bl	8006630 <LL_ADC_GetOffsetChannel>
 8007030:	4603      	mov	r3, r0
 8007032:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007036:	2b00      	cmp	r3, #0
 8007038:	d10a      	bne.n	8007050 <HAL_ADC_ConfigChannel+0x15c>
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	2100      	movs	r1, #0
 8007040:	4618      	mov	r0, r3
 8007042:	f7ff faf5 	bl	8006630 <LL_ADC_GetOffsetChannel>
 8007046:	4603      	mov	r3, r0
 8007048:	0e9b      	lsrs	r3, r3, #26
 800704a:	f003 021f 	and.w	r2, r3, #31
 800704e:	e01e      	b.n	800708e <HAL_ADC_ConfigChannel+0x19a>
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	2100      	movs	r1, #0
 8007056:	4618      	mov	r0, r3
 8007058:	f7ff faea 	bl	8006630 <LL_ADC_GetOffsetChannel>
 800705c:	4603      	mov	r3, r0
 800705e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007062:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8007066:	fa93 f3a3 	rbit	r3, r3
 800706a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800706e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007072:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8007076:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800707a:	2b00      	cmp	r3, #0
 800707c:	d101      	bne.n	8007082 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 800707e:	2320      	movs	r3, #32
 8007080:	e004      	b.n	800708c <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8007082:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007086:	fab3 f383 	clz	r3, r3
 800708a:	b2db      	uxtb	r3, r3
 800708c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800708e:	683b      	ldr	r3, [r7, #0]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007096:	2b00      	cmp	r3, #0
 8007098:	d105      	bne.n	80070a6 <HAL_ADC_ConfigChannel+0x1b2>
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	0e9b      	lsrs	r3, r3, #26
 80070a0:	f003 031f 	and.w	r3, r3, #31
 80070a4:	e018      	b.n	80070d8 <HAL_ADC_ConfigChannel+0x1e4>
 80070a6:	683b      	ldr	r3, [r7, #0]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80070ae:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80070b2:	fa93 f3a3 	rbit	r3, r3
 80070b6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 80070ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80070be:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 80070c2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d101      	bne.n	80070ce <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 80070ca:	2320      	movs	r3, #32
 80070cc:	e004      	b.n	80070d8 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 80070ce:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80070d2:	fab3 f383 	clz	r3, r3
 80070d6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80070d8:	429a      	cmp	r2, r3
 80070da:	d106      	bne.n	80070ea <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	2200      	movs	r2, #0
 80070e2:	2100      	movs	r1, #0
 80070e4:	4618      	mov	r0, r3
 80070e6:	f7ff fab9 	bl	800665c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	2101      	movs	r1, #1
 80070f0:	4618      	mov	r0, r3
 80070f2:	f7ff fa9d 	bl	8006630 <LL_ADC_GetOffsetChannel>
 80070f6:	4603      	mov	r3, r0
 80070f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d10a      	bne.n	8007116 <HAL_ADC_ConfigChannel+0x222>
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	2101      	movs	r1, #1
 8007106:	4618      	mov	r0, r3
 8007108:	f7ff fa92 	bl	8006630 <LL_ADC_GetOffsetChannel>
 800710c:	4603      	mov	r3, r0
 800710e:	0e9b      	lsrs	r3, r3, #26
 8007110:	f003 021f 	and.w	r2, r3, #31
 8007114:	e01e      	b.n	8007154 <HAL_ADC_ConfigChannel+0x260>
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	2101      	movs	r1, #1
 800711c:	4618      	mov	r0, r3
 800711e:	f7ff fa87 	bl	8006630 <LL_ADC_GetOffsetChannel>
 8007122:	4603      	mov	r3, r0
 8007124:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007128:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800712c:	fa93 f3a3 	rbit	r3, r3
 8007130:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8007134:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007138:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 800713c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007140:	2b00      	cmp	r3, #0
 8007142:	d101      	bne.n	8007148 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8007144:	2320      	movs	r3, #32
 8007146:	e004      	b.n	8007152 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8007148:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800714c:	fab3 f383 	clz	r3, r3
 8007150:	b2db      	uxtb	r3, r3
 8007152:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8007154:	683b      	ldr	r3, [r7, #0]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800715c:	2b00      	cmp	r3, #0
 800715e:	d105      	bne.n	800716c <HAL_ADC_ConfigChannel+0x278>
 8007160:	683b      	ldr	r3, [r7, #0]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	0e9b      	lsrs	r3, r3, #26
 8007166:	f003 031f 	and.w	r3, r3, #31
 800716a:	e018      	b.n	800719e <HAL_ADC_ConfigChannel+0x2aa>
 800716c:	683b      	ldr	r3, [r7, #0]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007174:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007178:	fa93 f3a3 	rbit	r3, r3
 800717c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8007180:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007184:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8007188:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800718c:	2b00      	cmp	r3, #0
 800718e:	d101      	bne.n	8007194 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8007190:	2320      	movs	r3, #32
 8007192:	e004      	b.n	800719e <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8007194:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007198:	fab3 f383 	clz	r3, r3
 800719c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800719e:	429a      	cmp	r2, r3
 80071a0:	d106      	bne.n	80071b0 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	2200      	movs	r2, #0
 80071a8:	2101      	movs	r1, #1
 80071aa:	4618      	mov	r0, r3
 80071ac:	f7ff fa56 	bl	800665c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	2102      	movs	r1, #2
 80071b6:	4618      	mov	r0, r3
 80071b8:	f7ff fa3a 	bl	8006630 <LL_ADC_GetOffsetChannel>
 80071bc:	4603      	mov	r3, r0
 80071be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d10a      	bne.n	80071dc <HAL_ADC_ConfigChannel+0x2e8>
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	2102      	movs	r1, #2
 80071cc:	4618      	mov	r0, r3
 80071ce:	f7ff fa2f 	bl	8006630 <LL_ADC_GetOffsetChannel>
 80071d2:	4603      	mov	r3, r0
 80071d4:	0e9b      	lsrs	r3, r3, #26
 80071d6:	f003 021f 	and.w	r2, r3, #31
 80071da:	e01e      	b.n	800721a <HAL_ADC_ConfigChannel+0x326>
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	2102      	movs	r1, #2
 80071e2:	4618      	mov	r0, r3
 80071e4:	f7ff fa24 	bl	8006630 <LL_ADC_GetOffsetChannel>
 80071e8:	4603      	mov	r3, r0
 80071ea:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80071ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80071f2:	fa93 f3a3 	rbit	r3, r3
 80071f6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 80071fa:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80071fe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8007202:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007206:	2b00      	cmp	r3, #0
 8007208:	d101      	bne.n	800720e <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 800720a:	2320      	movs	r3, #32
 800720c:	e004      	b.n	8007218 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 800720e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007212:	fab3 f383 	clz	r3, r3
 8007216:	b2db      	uxtb	r3, r3
 8007218:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800721a:	683b      	ldr	r3, [r7, #0]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007222:	2b00      	cmp	r3, #0
 8007224:	d105      	bne.n	8007232 <HAL_ADC_ConfigChannel+0x33e>
 8007226:	683b      	ldr	r3, [r7, #0]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	0e9b      	lsrs	r3, r3, #26
 800722c:	f003 031f 	and.w	r3, r3, #31
 8007230:	e016      	b.n	8007260 <HAL_ADC_ConfigChannel+0x36c>
 8007232:	683b      	ldr	r3, [r7, #0]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800723a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800723e:	fa93 f3a3 	rbit	r3, r3
 8007242:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8007244:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007246:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 800724a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800724e:	2b00      	cmp	r3, #0
 8007250:	d101      	bne.n	8007256 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8007252:	2320      	movs	r3, #32
 8007254:	e004      	b.n	8007260 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8007256:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800725a:	fab3 f383 	clz	r3, r3
 800725e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8007260:	429a      	cmp	r2, r3
 8007262:	d106      	bne.n	8007272 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	2200      	movs	r2, #0
 800726a:	2102      	movs	r1, #2
 800726c:	4618      	mov	r0, r3
 800726e:	f7ff f9f5 	bl	800665c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	2103      	movs	r1, #3
 8007278:	4618      	mov	r0, r3
 800727a:	f7ff f9d9 	bl	8006630 <LL_ADC_GetOffsetChannel>
 800727e:	4603      	mov	r3, r0
 8007280:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007284:	2b00      	cmp	r3, #0
 8007286:	d10a      	bne.n	800729e <HAL_ADC_ConfigChannel+0x3aa>
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	2103      	movs	r1, #3
 800728e:	4618      	mov	r0, r3
 8007290:	f7ff f9ce 	bl	8006630 <LL_ADC_GetOffsetChannel>
 8007294:	4603      	mov	r3, r0
 8007296:	0e9b      	lsrs	r3, r3, #26
 8007298:	f003 021f 	and.w	r2, r3, #31
 800729c:	e017      	b.n	80072ce <HAL_ADC_ConfigChannel+0x3da>
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	2103      	movs	r1, #3
 80072a4:	4618      	mov	r0, r3
 80072a6:	f7ff f9c3 	bl	8006630 <LL_ADC_GetOffsetChannel>
 80072aa:	4603      	mov	r3, r0
 80072ac:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80072ae:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80072b0:	fa93 f3a3 	rbit	r3, r3
 80072b4:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80072b6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80072b8:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 80072ba:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d101      	bne.n	80072c4 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80072c0:	2320      	movs	r3, #32
 80072c2:	e003      	b.n	80072cc <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80072c4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80072c6:	fab3 f383 	clz	r3, r3
 80072ca:	b2db      	uxtb	r3, r3
 80072cc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80072ce:	683b      	ldr	r3, [r7, #0]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d105      	bne.n	80072e6 <HAL_ADC_ConfigChannel+0x3f2>
 80072da:	683b      	ldr	r3, [r7, #0]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	0e9b      	lsrs	r3, r3, #26
 80072e0:	f003 031f 	and.w	r3, r3, #31
 80072e4:	e011      	b.n	800730a <HAL_ADC_ConfigChannel+0x416>
 80072e6:	683b      	ldr	r3, [r7, #0]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80072ec:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80072ee:	fa93 f3a3 	rbit	r3, r3
 80072f2:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 80072f4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80072f6:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 80072f8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d101      	bne.n	8007302 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 80072fe:	2320      	movs	r3, #32
 8007300:	e003      	b.n	800730a <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8007302:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007304:	fab3 f383 	clz	r3, r3
 8007308:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800730a:	429a      	cmp	r2, r3
 800730c:	d106      	bne.n	800731c <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	2200      	movs	r2, #0
 8007314:	2103      	movs	r1, #3
 8007316:	4618      	mov	r0, r3
 8007318:	f7ff f9a0 	bl	800665c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	4618      	mov	r0, r3
 8007322:	f7ff faeb 	bl	80068fc <LL_ADC_IsEnabled>
 8007326:	4603      	mov	r3, r0
 8007328:	2b00      	cmp	r3, #0
 800732a:	f040 813d 	bne.w	80075a8 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	6818      	ldr	r0, [r3, #0]
 8007332:	683b      	ldr	r3, [r7, #0]
 8007334:	6819      	ldr	r1, [r3, #0]
 8007336:	683b      	ldr	r3, [r7, #0]
 8007338:	68db      	ldr	r3, [r3, #12]
 800733a:	461a      	mov	r2, r3
 800733c:	f7ff fa4a 	bl	80067d4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8007340:	683b      	ldr	r3, [r7, #0]
 8007342:	68db      	ldr	r3, [r3, #12]
 8007344:	4aa2      	ldr	r2, [pc, #648]	@ (80075d0 <HAL_ADC_ConfigChannel+0x6dc>)
 8007346:	4293      	cmp	r3, r2
 8007348:	f040 812e 	bne.w	80075a8 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8007350:	683b      	ldr	r3, [r7, #0]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007358:	2b00      	cmp	r3, #0
 800735a:	d10b      	bne.n	8007374 <HAL_ADC_ConfigChannel+0x480>
 800735c:	683b      	ldr	r3, [r7, #0]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	0e9b      	lsrs	r3, r3, #26
 8007362:	3301      	adds	r3, #1
 8007364:	f003 031f 	and.w	r3, r3, #31
 8007368:	2b09      	cmp	r3, #9
 800736a:	bf94      	ite	ls
 800736c:	2301      	movls	r3, #1
 800736e:	2300      	movhi	r3, #0
 8007370:	b2db      	uxtb	r3, r3
 8007372:	e019      	b.n	80073a8 <HAL_ADC_ConfigChannel+0x4b4>
 8007374:	683b      	ldr	r3, [r7, #0]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800737a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800737c:	fa93 f3a3 	rbit	r3, r3
 8007380:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8007382:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007384:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8007386:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007388:	2b00      	cmp	r3, #0
 800738a:	d101      	bne.n	8007390 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 800738c:	2320      	movs	r3, #32
 800738e:	e003      	b.n	8007398 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8007390:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007392:	fab3 f383 	clz	r3, r3
 8007396:	b2db      	uxtb	r3, r3
 8007398:	3301      	adds	r3, #1
 800739a:	f003 031f 	and.w	r3, r3, #31
 800739e:	2b09      	cmp	r3, #9
 80073a0:	bf94      	ite	ls
 80073a2:	2301      	movls	r3, #1
 80073a4:	2300      	movhi	r3, #0
 80073a6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d079      	beq.n	80074a0 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80073ac:	683b      	ldr	r3, [r7, #0]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d107      	bne.n	80073c8 <HAL_ADC_ConfigChannel+0x4d4>
 80073b8:	683b      	ldr	r3, [r7, #0]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	0e9b      	lsrs	r3, r3, #26
 80073be:	3301      	adds	r3, #1
 80073c0:	069b      	lsls	r3, r3, #26
 80073c2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80073c6:	e015      	b.n	80073f4 <HAL_ADC_ConfigChannel+0x500>
 80073c8:	683b      	ldr	r3, [r7, #0]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80073ce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80073d0:	fa93 f3a3 	rbit	r3, r3
 80073d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80073d6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80073d8:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 80073da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d101      	bne.n	80073e4 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 80073e0:	2320      	movs	r3, #32
 80073e2:	e003      	b.n	80073ec <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 80073e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80073e6:	fab3 f383 	clz	r3, r3
 80073ea:	b2db      	uxtb	r3, r3
 80073ec:	3301      	adds	r3, #1
 80073ee:	069b      	lsls	r3, r3, #26
 80073f0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80073f4:	683b      	ldr	r3, [r7, #0]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d109      	bne.n	8007414 <HAL_ADC_ConfigChannel+0x520>
 8007400:	683b      	ldr	r3, [r7, #0]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	0e9b      	lsrs	r3, r3, #26
 8007406:	3301      	adds	r3, #1
 8007408:	f003 031f 	and.w	r3, r3, #31
 800740c:	2101      	movs	r1, #1
 800740e:	fa01 f303 	lsl.w	r3, r1, r3
 8007412:	e017      	b.n	8007444 <HAL_ADC_ConfigChannel+0x550>
 8007414:	683b      	ldr	r3, [r7, #0]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800741a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800741c:	fa93 f3a3 	rbit	r3, r3
 8007420:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8007422:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007424:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8007426:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007428:	2b00      	cmp	r3, #0
 800742a:	d101      	bne.n	8007430 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 800742c:	2320      	movs	r3, #32
 800742e:	e003      	b.n	8007438 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8007430:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007432:	fab3 f383 	clz	r3, r3
 8007436:	b2db      	uxtb	r3, r3
 8007438:	3301      	adds	r3, #1
 800743a:	f003 031f 	and.w	r3, r3, #31
 800743e:	2101      	movs	r1, #1
 8007440:	fa01 f303 	lsl.w	r3, r1, r3
 8007444:	ea42 0103 	orr.w	r1, r2, r3
 8007448:	683b      	ldr	r3, [r7, #0]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007450:	2b00      	cmp	r3, #0
 8007452:	d10a      	bne.n	800746a <HAL_ADC_ConfigChannel+0x576>
 8007454:	683b      	ldr	r3, [r7, #0]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	0e9b      	lsrs	r3, r3, #26
 800745a:	3301      	adds	r3, #1
 800745c:	f003 021f 	and.w	r2, r3, #31
 8007460:	4613      	mov	r3, r2
 8007462:	005b      	lsls	r3, r3, #1
 8007464:	4413      	add	r3, r2
 8007466:	051b      	lsls	r3, r3, #20
 8007468:	e018      	b.n	800749c <HAL_ADC_ConfigChannel+0x5a8>
 800746a:	683b      	ldr	r3, [r7, #0]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007470:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007472:	fa93 f3a3 	rbit	r3, r3
 8007476:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8007478:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800747a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 800747c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800747e:	2b00      	cmp	r3, #0
 8007480:	d101      	bne.n	8007486 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8007482:	2320      	movs	r3, #32
 8007484:	e003      	b.n	800748e <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8007486:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007488:	fab3 f383 	clz	r3, r3
 800748c:	b2db      	uxtb	r3, r3
 800748e:	3301      	adds	r3, #1
 8007490:	f003 021f 	and.w	r2, r3, #31
 8007494:	4613      	mov	r3, r2
 8007496:	005b      	lsls	r3, r3, #1
 8007498:	4413      	add	r3, r2
 800749a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800749c:	430b      	orrs	r3, r1
 800749e:	e07e      	b.n	800759e <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80074a0:	683b      	ldr	r3, [r7, #0]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d107      	bne.n	80074bc <HAL_ADC_ConfigChannel+0x5c8>
 80074ac:	683b      	ldr	r3, [r7, #0]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	0e9b      	lsrs	r3, r3, #26
 80074b2:	3301      	adds	r3, #1
 80074b4:	069b      	lsls	r3, r3, #26
 80074b6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80074ba:	e015      	b.n	80074e8 <HAL_ADC_ConfigChannel+0x5f4>
 80074bc:	683b      	ldr	r3, [r7, #0]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80074c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074c4:	fa93 f3a3 	rbit	r3, r3
 80074c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 80074ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074cc:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 80074ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d101      	bne.n	80074d8 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 80074d4:	2320      	movs	r3, #32
 80074d6:	e003      	b.n	80074e0 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 80074d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074da:	fab3 f383 	clz	r3, r3
 80074de:	b2db      	uxtb	r3, r3
 80074e0:	3301      	adds	r3, #1
 80074e2:	069b      	lsls	r3, r3, #26
 80074e4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80074e8:	683b      	ldr	r3, [r7, #0]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d109      	bne.n	8007508 <HAL_ADC_ConfigChannel+0x614>
 80074f4:	683b      	ldr	r3, [r7, #0]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	0e9b      	lsrs	r3, r3, #26
 80074fa:	3301      	adds	r3, #1
 80074fc:	f003 031f 	and.w	r3, r3, #31
 8007500:	2101      	movs	r1, #1
 8007502:	fa01 f303 	lsl.w	r3, r1, r3
 8007506:	e017      	b.n	8007538 <HAL_ADC_ConfigChannel+0x644>
 8007508:	683b      	ldr	r3, [r7, #0]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800750e:	6a3b      	ldr	r3, [r7, #32]
 8007510:	fa93 f3a3 	rbit	r3, r3
 8007514:	61fb      	str	r3, [r7, #28]
  return result;
 8007516:	69fb      	ldr	r3, [r7, #28]
 8007518:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800751a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800751c:	2b00      	cmp	r3, #0
 800751e:	d101      	bne.n	8007524 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8007520:	2320      	movs	r3, #32
 8007522:	e003      	b.n	800752c <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8007524:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007526:	fab3 f383 	clz	r3, r3
 800752a:	b2db      	uxtb	r3, r3
 800752c:	3301      	adds	r3, #1
 800752e:	f003 031f 	and.w	r3, r3, #31
 8007532:	2101      	movs	r1, #1
 8007534:	fa01 f303 	lsl.w	r3, r1, r3
 8007538:	ea42 0103 	orr.w	r1, r2, r3
 800753c:	683b      	ldr	r3, [r7, #0]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007544:	2b00      	cmp	r3, #0
 8007546:	d10d      	bne.n	8007564 <HAL_ADC_ConfigChannel+0x670>
 8007548:	683b      	ldr	r3, [r7, #0]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	0e9b      	lsrs	r3, r3, #26
 800754e:	3301      	adds	r3, #1
 8007550:	f003 021f 	and.w	r2, r3, #31
 8007554:	4613      	mov	r3, r2
 8007556:	005b      	lsls	r3, r3, #1
 8007558:	4413      	add	r3, r2
 800755a:	3b1e      	subs	r3, #30
 800755c:	051b      	lsls	r3, r3, #20
 800755e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8007562:	e01b      	b.n	800759c <HAL_ADC_ConfigChannel+0x6a8>
 8007564:	683b      	ldr	r3, [r7, #0]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800756a:	697b      	ldr	r3, [r7, #20]
 800756c:	fa93 f3a3 	rbit	r3, r3
 8007570:	613b      	str	r3, [r7, #16]
  return result;
 8007572:	693b      	ldr	r3, [r7, #16]
 8007574:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8007576:	69bb      	ldr	r3, [r7, #24]
 8007578:	2b00      	cmp	r3, #0
 800757a:	d101      	bne.n	8007580 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 800757c:	2320      	movs	r3, #32
 800757e:	e003      	b.n	8007588 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8007580:	69bb      	ldr	r3, [r7, #24]
 8007582:	fab3 f383 	clz	r3, r3
 8007586:	b2db      	uxtb	r3, r3
 8007588:	3301      	adds	r3, #1
 800758a:	f003 021f 	and.w	r2, r3, #31
 800758e:	4613      	mov	r3, r2
 8007590:	005b      	lsls	r3, r3, #1
 8007592:	4413      	add	r3, r2
 8007594:	3b1e      	subs	r3, #30
 8007596:	051b      	lsls	r3, r3, #20
 8007598:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800759c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800759e:	683a      	ldr	r2, [r7, #0]
 80075a0:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80075a2:	4619      	mov	r1, r3
 80075a4:	f7ff f8ea 	bl	800677c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80075a8:	683b      	ldr	r3, [r7, #0]
 80075aa:	681a      	ldr	r2, [r3, #0]
 80075ac:	4b09      	ldr	r3, [pc, #36]	@ (80075d4 <HAL_ADC_ConfigChannel+0x6e0>)
 80075ae:	4013      	ands	r3, r2
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	f000 80be 	beq.w	8007732 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80075be:	d004      	beq.n	80075ca <HAL_ADC_ConfigChannel+0x6d6>
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	4a04      	ldr	r2, [pc, #16]	@ (80075d8 <HAL_ADC_ConfigChannel+0x6e4>)
 80075c6:	4293      	cmp	r3, r2
 80075c8:	d10a      	bne.n	80075e0 <HAL_ADC_ConfigChannel+0x6ec>
 80075ca:	4b04      	ldr	r3, [pc, #16]	@ (80075dc <HAL_ADC_ConfigChannel+0x6e8>)
 80075cc:	e009      	b.n	80075e2 <HAL_ADC_ConfigChannel+0x6ee>
 80075ce:	bf00      	nop
 80075d0:	407f0000 	.word	0x407f0000
 80075d4:	80080000 	.word	0x80080000
 80075d8:	50000100 	.word	0x50000100
 80075dc:	50000300 	.word	0x50000300
 80075e0:	4b59      	ldr	r3, [pc, #356]	@ (8007748 <HAL_ADC_ConfigChannel+0x854>)
 80075e2:	4618      	mov	r0, r3
 80075e4:	f7fe fff2 	bl	80065cc <LL_ADC_GetCommonPathInternalCh>
 80075e8:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80075ec:	683b      	ldr	r3, [r7, #0]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	4a56      	ldr	r2, [pc, #344]	@ (800774c <HAL_ADC_ConfigChannel+0x858>)
 80075f2:	4293      	cmp	r3, r2
 80075f4:	d004      	beq.n	8007600 <HAL_ADC_ConfigChannel+0x70c>
 80075f6:	683b      	ldr	r3, [r7, #0]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	4a55      	ldr	r2, [pc, #340]	@ (8007750 <HAL_ADC_ConfigChannel+0x85c>)
 80075fc:	4293      	cmp	r3, r2
 80075fe:	d13a      	bne.n	8007676 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8007600:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007604:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007608:	2b00      	cmp	r3, #0
 800760a:	d134      	bne.n	8007676 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007614:	d005      	beq.n	8007622 <HAL_ADC_ConfigChannel+0x72e>
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	4a4e      	ldr	r2, [pc, #312]	@ (8007754 <HAL_ADC_ConfigChannel+0x860>)
 800761c:	4293      	cmp	r3, r2
 800761e:	f040 8085 	bne.w	800772c <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800762a:	d004      	beq.n	8007636 <HAL_ADC_ConfigChannel+0x742>
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	4a49      	ldr	r2, [pc, #292]	@ (8007758 <HAL_ADC_ConfigChannel+0x864>)
 8007632:	4293      	cmp	r3, r2
 8007634:	d101      	bne.n	800763a <HAL_ADC_ConfigChannel+0x746>
 8007636:	4a49      	ldr	r2, [pc, #292]	@ (800775c <HAL_ADC_ConfigChannel+0x868>)
 8007638:	e000      	b.n	800763c <HAL_ADC_ConfigChannel+0x748>
 800763a:	4a43      	ldr	r2, [pc, #268]	@ (8007748 <HAL_ADC_ConfigChannel+0x854>)
 800763c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007640:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007644:	4619      	mov	r1, r3
 8007646:	4610      	mov	r0, r2
 8007648:	f7fe ffad 	bl	80065a6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800764c:	4b44      	ldr	r3, [pc, #272]	@ (8007760 <HAL_ADC_ConfigChannel+0x86c>)
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	099b      	lsrs	r3, r3, #6
 8007652:	4a44      	ldr	r2, [pc, #272]	@ (8007764 <HAL_ADC_ConfigChannel+0x870>)
 8007654:	fba2 2303 	umull	r2, r3, r2, r3
 8007658:	099b      	lsrs	r3, r3, #6
 800765a:	1c5a      	adds	r2, r3, #1
 800765c:	4613      	mov	r3, r2
 800765e:	005b      	lsls	r3, r3, #1
 8007660:	4413      	add	r3, r2
 8007662:	009b      	lsls	r3, r3, #2
 8007664:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8007666:	e002      	b.n	800766e <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	3b01      	subs	r3, #1
 800766c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	2b00      	cmp	r3, #0
 8007672:	d1f9      	bne.n	8007668 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8007674:	e05a      	b.n	800772c <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8007676:	683b      	ldr	r3, [r7, #0]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	4a3b      	ldr	r2, [pc, #236]	@ (8007768 <HAL_ADC_ConfigChannel+0x874>)
 800767c:	4293      	cmp	r3, r2
 800767e:	d125      	bne.n	80076cc <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8007680:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007684:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007688:	2b00      	cmp	r3, #0
 800768a:	d11f      	bne.n	80076cc <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	4a31      	ldr	r2, [pc, #196]	@ (8007758 <HAL_ADC_ConfigChannel+0x864>)
 8007692:	4293      	cmp	r3, r2
 8007694:	d104      	bne.n	80076a0 <HAL_ADC_ConfigChannel+0x7ac>
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	4a34      	ldr	r2, [pc, #208]	@ (800776c <HAL_ADC_ConfigChannel+0x878>)
 800769c:	4293      	cmp	r3, r2
 800769e:	d047      	beq.n	8007730 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80076a8:	d004      	beq.n	80076b4 <HAL_ADC_ConfigChannel+0x7c0>
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	4a2a      	ldr	r2, [pc, #168]	@ (8007758 <HAL_ADC_ConfigChannel+0x864>)
 80076b0:	4293      	cmp	r3, r2
 80076b2:	d101      	bne.n	80076b8 <HAL_ADC_ConfigChannel+0x7c4>
 80076b4:	4a29      	ldr	r2, [pc, #164]	@ (800775c <HAL_ADC_ConfigChannel+0x868>)
 80076b6:	e000      	b.n	80076ba <HAL_ADC_ConfigChannel+0x7c6>
 80076b8:	4a23      	ldr	r2, [pc, #140]	@ (8007748 <HAL_ADC_ConfigChannel+0x854>)
 80076ba:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80076be:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80076c2:	4619      	mov	r1, r3
 80076c4:	4610      	mov	r0, r2
 80076c6:	f7fe ff6e 	bl	80065a6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80076ca:	e031      	b.n	8007730 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80076cc:	683b      	ldr	r3, [r7, #0]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	4a27      	ldr	r2, [pc, #156]	@ (8007770 <HAL_ADC_ConfigChannel+0x87c>)
 80076d2:	4293      	cmp	r3, r2
 80076d4:	d12d      	bne.n	8007732 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80076d6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80076da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d127      	bne.n	8007732 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	4a1c      	ldr	r2, [pc, #112]	@ (8007758 <HAL_ADC_ConfigChannel+0x864>)
 80076e8:	4293      	cmp	r3, r2
 80076ea:	d022      	beq.n	8007732 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80076f4:	d004      	beq.n	8007700 <HAL_ADC_ConfigChannel+0x80c>
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	4a17      	ldr	r2, [pc, #92]	@ (8007758 <HAL_ADC_ConfigChannel+0x864>)
 80076fc:	4293      	cmp	r3, r2
 80076fe:	d101      	bne.n	8007704 <HAL_ADC_ConfigChannel+0x810>
 8007700:	4a16      	ldr	r2, [pc, #88]	@ (800775c <HAL_ADC_ConfigChannel+0x868>)
 8007702:	e000      	b.n	8007706 <HAL_ADC_ConfigChannel+0x812>
 8007704:	4a10      	ldr	r2, [pc, #64]	@ (8007748 <HAL_ADC_ConfigChannel+0x854>)
 8007706:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800770a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800770e:	4619      	mov	r1, r3
 8007710:	4610      	mov	r0, r2
 8007712:	f7fe ff48 	bl	80065a6 <LL_ADC_SetCommonPathInternalCh>
 8007716:	e00c      	b.n	8007732 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800771c:	f043 0220 	orr.w	r2, r3, #32
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8007724:	2301      	movs	r3, #1
 8007726:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 800772a:	e002      	b.n	8007732 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800772c:	bf00      	nop
 800772e:	e000      	b.n	8007732 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8007730:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	2200      	movs	r2, #0
 8007736:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800773a:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800773e:	4618      	mov	r0, r3
 8007740:	37d8      	adds	r7, #216	@ 0xd8
 8007742:	46bd      	mov	sp, r7
 8007744:	bd80      	pop	{r7, pc}
 8007746:	bf00      	nop
 8007748:	50000700 	.word	0x50000700
 800774c:	c3210000 	.word	0xc3210000
 8007750:	90c00010 	.word	0x90c00010
 8007754:	50000600 	.word	0x50000600
 8007758:	50000100 	.word	0x50000100
 800775c:	50000300 	.word	0x50000300
 8007760:	2000020c 	.word	0x2000020c
 8007764:	053e2d63 	.word	0x053e2d63
 8007768:	c7520000 	.word	0xc7520000
 800776c:	50000500 	.word	0x50000500
 8007770:	cb840000 	.word	0xcb840000

08007774 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8007774:	b580      	push	{r7, lr}
 8007776:	b084      	sub	sp, #16
 8007778:	af00      	add	r7, sp, #0
 800777a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800777c:	2300      	movs	r3, #0
 800777e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	4618      	mov	r0, r3
 8007786:	f7ff f8b9 	bl	80068fc <LL_ADC_IsEnabled>
 800778a:	4603      	mov	r3, r0
 800778c:	2b00      	cmp	r3, #0
 800778e:	d176      	bne.n	800787e <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	689a      	ldr	r2, [r3, #8]
 8007796:	4b3c      	ldr	r3, [pc, #240]	@ (8007888 <ADC_Enable+0x114>)
 8007798:	4013      	ands	r3, r2
 800779a:	2b00      	cmp	r3, #0
 800779c:	d00d      	beq.n	80077ba <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80077a2:	f043 0210 	orr.w	r2, r3, #16
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80077ae:	f043 0201 	orr.w	r2, r3, #1
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 80077b6:	2301      	movs	r3, #1
 80077b8:	e062      	b.n	8007880 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	4618      	mov	r0, r3
 80077c0:	f7ff f888 	bl	80068d4 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80077cc:	d004      	beq.n	80077d8 <ADC_Enable+0x64>
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	4a2e      	ldr	r2, [pc, #184]	@ (800788c <ADC_Enable+0x118>)
 80077d4:	4293      	cmp	r3, r2
 80077d6:	d101      	bne.n	80077dc <ADC_Enable+0x68>
 80077d8:	4b2d      	ldr	r3, [pc, #180]	@ (8007890 <ADC_Enable+0x11c>)
 80077da:	e000      	b.n	80077de <ADC_Enable+0x6a>
 80077dc:	4b2d      	ldr	r3, [pc, #180]	@ (8007894 <ADC_Enable+0x120>)
 80077de:	4618      	mov	r0, r3
 80077e0:	f7fe fef4 	bl	80065cc <LL_ADC_GetCommonPathInternalCh>
 80077e4:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80077e6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d013      	beq.n	8007816 <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80077ee:	4b2a      	ldr	r3, [pc, #168]	@ (8007898 <ADC_Enable+0x124>)
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	099b      	lsrs	r3, r3, #6
 80077f4:	4a29      	ldr	r2, [pc, #164]	@ (800789c <ADC_Enable+0x128>)
 80077f6:	fba2 2303 	umull	r2, r3, r2, r3
 80077fa:	099b      	lsrs	r3, r3, #6
 80077fc:	1c5a      	adds	r2, r3, #1
 80077fe:	4613      	mov	r3, r2
 8007800:	005b      	lsls	r3, r3, #1
 8007802:	4413      	add	r3, r2
 8007804:	009b      	lsls	r3, r3, #2
 8007806:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8007808:	e002      	b.n	8007810 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 800780a:	68bb      	ldr	r3, [r7, #8]
 800780c:	3b01      	subs	r3, #1
 800780e:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8007810:	68bb      	ldr	r3, [r7, #8]
 8007812:	2b00      	cmp	r3, #0
 8007814:	d1f9      	bne.n	800780a <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8007816:	f7fe fea7 	bl	8006568 <HAL_GetTick>
 800781a:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800781c:	e028      	b.n	8007870 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	4618      	mov	r0, r3
 8007824:	f7ff f86a 	bl	80068fc <LL_ADC_IsEnabled>
 8007828:	4603      	mov	r3, r0
 800782a:	2b00      	cmp	r3, #0
 800782c:	d104      	bne.n	8007838 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	4618      	mov	r0, r3
 8007834:	f7ff f84e 	bl	80068d4 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8007838:	f7fe fe96 	bl	8006568 <HAL_GetTick>
 800783c:	4602      	mov	r2, r0
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	1ad3      	subs	r3, r2, r3
 8007842:	2b02      	cmp	r3, #2
 8007844:	d914      	bls.n	8007870 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	f003 0301 	and.w	r3, r3, #1
 8007850:	2b01      	cmp	r3, #1
 8007852:	d00d      	beq.n	8007870 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007858:	f043 0210 	orr.w	r2, r3, #16
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007864:	f043 0201 	orr.w	r2, r3, #1
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 800786c:	2301      	movs	r3, #1
 800786e:	e007      	b.n	8007880 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	f003 0301 	and.w	r3, r3, #1
 800787a:	2b01      	cmp	r3, #1
 800787c:	d1cf      	bne.n	800781e <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800787e:	2300      	movs	r3, #0
}
 8007880:	4618      	mov	r0, r3
 8007882:	3710      	adds	r7, #16
 8007884:	46bd      	mov	sp, r7
 8007886:	bd80      	pop	{r7, pc}
 8007888:	8000003f 	.word	0x8000003f
 800788c:	50000100 	.word	0x50000100
 8007890:	50000300 	.word	0x50000300
 8007894:	50000700 	.word	0x50000700
 8007898:	2000020c 	.word	0x2000020c
 800789c:	053e2d63 	.word	0x053e2d63

080078a0 <LL_ADC_IsEnabled>:
{
 80078a0:	b480      	push	{r7}
 80078a2:	b083      	sub	sp, #12
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	689b      	ldr	r3, [r3, #8]
 80078ac:	f003 0301 	and.w	r3, r3, #1
 80078b0:	2b01      	cmp	r3, #1
 80078b2:	d101      	bne.n	80078b8 <LL_ADC_IsEnabled+0x18>
 80078b4:	2301      	movs	r3, #1
 80078b6:	e000      	b.n	80078ba <LL_ADC_IsEnabled+0x1a>
 80078b8:	2300      	movs	r3, #0
}
 80078ba:	4618      	mov	r0, r3
 80078bc:	370c      	adds	r7, #12
 80078be:	46bd      	mov	sp, r7
 80078c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c4:	4770      	bx	lr

080078c6 <LL_ADC_REG_IsConversionOngoing>:
{
 80078c6:	b480      	push	{r7}
 80078c8:	b083      	sub	sp, #12
 80078ca:	af00      	add	r7, sp, #0
 80078cc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	689b      	ldr	r3, [r3, #8]
 80078d2:	f003 0304 	and.w	r3, r3, #4
 80078d6:	2b04      	cmp	r3, #4
 80078d8:	d101      	bne.n	80078de <LL_ADC_REG_IsConversionOngoing+0x18>
 80078da:	2301      	movs	r3, #1
 80078dc:	e000      	b.n	80078e0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80078de:	2300      	movs	r3, #0
}
 80078e0:	4618      	mov	r0, r3
 80078e2:	370c      	adds	r7, #12
 80078e4:	46bd      	mov	sp, r7
 80078e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ea:	4770      	bx	lr

080078ec <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80078ec:	b590      	push	{r4, r7, lr}
 80078ee:	b0a1      	sub	sp, #132	@ 0x84
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]
 80078f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80078f6:	2300      	movs	r3, #0
 80078f8:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8007902:	2b01      	cmp	r3, #1
 8007904:	d101      	bne.n	800790a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8007906:	2302      	movs	r3, #2
 8007908:	e0e7      	b.n	8007ada <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	2201      	movs	r2, #1
 800790e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8007912:	2300      	movs	r3, #0
 8007914:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8007916:	2300      	movs	r3, #0
 8007918:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007922:	d102      	bne.n	800792a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8007924:	4b6f      	ldr	r3, [pc, #444]	@ (8007ae4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8007926:	60bb      	str	r3, [r7, #8]
 8007928:	e009      	b.n	800793e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	4a6e      	ldr	r2, [pc, #440]	@ (8007ae8 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8007930:	4293      	cmp	r3, r2
 8007932:	d102      	bne.n	800793a <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8007934:	4b6d      	ldr	r3, [pc, #436]	@ (8007aec <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8007936:	60bb      	str	r3, [r7, #8]
 8007938:	e001      	b.n	800793e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800793a:	2300      	movs	r3, #0
 800793c:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800793e:	68bb      	ldr	r3, [r7, #8]
 8007940:	2b00      	cmp	r3, #0
 8007942:	d10b      	bne.n	800795c <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007948:	f043 0220 	orr.w	r2, r3, #32
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	2200      	movs	r2, #0
 8007954:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8007958:	2301      	movs	r3, #1
 800795a:	e0be      	b.n	8007ada <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 800795c:	68bb      	ldr	r3, [r7, #8]
 800795e:	4618      	mov	r0, r3
 8007960:	f7ff ffb1 	bl	80078c6 <LL_ADC_REG_IsConversionOngoing>
 8007964:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	4618      	mov	r0, r3
 800796c:	f7ff ffab 	bl	80078c6 <LL_ADC_REG_IsConversionOngoing>
 8007970:	4603      	mov	r3, r0
 8007972:	2b00      	cmp	r3, #0
 8007974:	f040 80a0 	bne.w	8007ab8 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8007978:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800797a:	2b00      	cmp	r3, #0
 800797c:	f040 809c 	bne.w	8007ab8 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007988:	d004      	beq.n	8007994 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	4a55      	ldr	r2, [pc, #340]	@ (8007ae4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8007990:	4293      	cmp	r3, r2
 8007992:	d101      	bne.n	8007998 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8007994:	4b56      	ldr	r3, [pc, #344]	@ (8007af0 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8007996:	e000      	b.n	800799a <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8007998:	4b56      	ldr	r3, [pc, #344]	@ (8007af4 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 800799a:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800799c:	683b      	ldr	r3, [r7, #0]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d04b      	beq.n	8007a3c <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80079a4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80079a6:	689b      	ldr	r3, [r3, #8]
 80079a8:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80079ac:	683b      	ldr	r3, [r7, #0]
 80079ae:	6859      	ldr	r1, [r3, #4]
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80079b6:	035b      	lsls	r3, r3, #13
 80079b8:	430b      	orrs	r3, r1
 80079ba:	431a      	orrs	r2, r3
 80079bc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80079be:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80079c8:	d004      	beq.n	80079d4 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	4a45      	ldr	r2, [pc, #276]	@ (8007ae4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80079d0:	4293      	cmp	r3, r2
 80079d2:	d10f      	bne.n	80079f4 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 80079d4:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80079d8:	f7ff ff62 	bl	80078a0 <LL_ADC_IsEnabled>
 80079dc:	4604      	mov	r4, r0
 80079de:	4841      	ldr	r0, [pc, #260]	@ (8007ae4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80079e0:	f7ff ff5e 	bl	80078a0 <LL_ADC_IsEnabled>
 80079e4:	4603      	mov	r3, r0
 80079e6:	4323      	orrs	r3, r4
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	bf0c      	ite	eq
 80079ec:	2301      	moveq	r3, #1
 80079ee:	2300      	movne	r3, #0
 80079f0:	b2db      	uxtb	r3, r3
 80079f2:	e012      	b.n	8007a1a <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 80079f4:	483c      	ldr	r0, [pc, #240]	@ (8007ae8 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80079f6:	f7ff ff53 	bl	80078a0 <LL_ADC_IsEnabled>
 80079fa:	4604      	mov	r4, r0
 80079fc:	483b      	ldr	r0, [pc, #236]	@ (8007aec <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80079fe:	f7ff ff4f 	bl	80078a0 <LL_ADC_IsEnabled>
 8007a02:	4603      	mov	r3, r0
 8007a04:	431c      	orrs	r4, r3
 8007a06:	483c      	ldr	r0, [pc, #240]	@ (8007af8 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8007a08:	f7ff ff4a 	bl	80078a0 <LL_ADC_IsEnabled>
 8007a0c:	4603      	mov	r3, r0
 8007a0e:	4323      	orrs	r3, r4
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	bf0c      	ite	eq
 8007a14:	2301      	moveq	r3, #1
 8007a16:	2300      	movne	r3, #0
 8007a18:	b2db      	uxtb	r3, r3
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d056      	beq.n	8007acc <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8007a1e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007a20:	689b      	ldr	r3, [r3, #8]
 8007a22:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8007a26:	f023 030f 	bic.w	r3, r3, #15
 8007a2a:	683a      	ldr	r2, [r7, #0]
 8007a2c:	6811      	ldr	r1, [r2, #0]
 8007a2e:	683a      	ldr	r2, [r7, #0]
 8007a30:	6892      	ldr	r2, [r2, #8]
 8007a32:	430a      	orrs	r2, r1
 8007a34:	431a      	orrs	r2, r3
 8007a36:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007a38:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8007a3a:	e047      	b.n	8007acc <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8007a3c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007a3e:	689b      	ldr	r3, [r3, #8]
 8007a40:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8007a44:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007a46:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007a50:	d004      	beq.n	8007a5c <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	4a23      	ldr	r2, [pc, #140]	@ (8007ae4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8007a58:	4293      	cmp	r3, r2
 8007a5a:	d10f      	bne.n	8007a7c <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8007a5c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8007a60:	f7ff ff1e 	bl	80078a0 <LL_ADC_IsEnabled>
 8007a64:	4604      	mov	r4, r0
 8007a66:	481f      	ldr	r0, [pc, #124]	@ (8007ae4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8007a68:	f7ff ff1a 	bl	80078a0 <LL_ADC_IsEnabled>
 8007a6c:	4603      	mov	r3, r0
 8007a6e:	4323      	orrs	r3, r4
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	bf0c      	ite	eq
 8007a74:	2301      	moveq	r3, #1
 8007a76:	2300      	movne	r3, #0
 8007a78:	b2db      	uxtb	r3, r3
 8007a7a:	e012      	b.n	8007aa2 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8007a7c:	481a      	ldr	r0, [pc, #104]	@ (8007ae8 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8007a7e:	f7ff ff0f 	bl	80078a0 <LL_ADC_IsEnabled>
 8007a82:	4604      	mov	r4, r0
 8007a84:	4819      	ldr	r0, [pc, #100]	@ (8007aec <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8007a86:	f7ff ff0b 	bl	80078a0 <LL_ADC_IsEnabled>
 8007a8a:	4603      	mov	r3, r0
 8007a8c:	431c      	orrs	r4, r3
 8007a8e:	481a      	ldr	r0, [pc, #104]	@ (8007af8 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8007a90:	f7ff ff06 	bl	80078a0 <LL_ADC_IsEnabled>
 8007a94:	4603      	mov	r3, r0
 8007a96:	4323      	orrs	r3, r4
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	bf0c      	ite	eq
 8007a9c:	2301      	moveq	r3, #1
 8007a9e:	2300      	movne	r3, #0
 8007aa0:	b2db      	uxtb	r3, r3
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d012      	beq.n	8007acc <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8007aa6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007aa8:	689b      	ldr	r3, [r3, #8]
 8007aaa:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8007aae:	f023 030f 	bic.w	r3, r3, #15
 8007ab2:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8007ab4:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8007ab6:	e009      	b.n	8007acc <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007abc:	f043 0220 	orr.w	r2, r3, #32
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8007ac4:	2301      	movs	r3, #1
 8007ac6:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8007aca:	e000      	b.n	8007ace <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8007acc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	2200      	movs	r2, #0
 8007ad2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8007ad6:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8007ada:	4618      	mov	r0, r3
 8007adc:	3784      	adds	r7, #132	@ 0x84
 8007ade:	46bd      	mov	sp, r7
 8007ae0:	bd90      	pop	{r4, r7, pc}
 8007ae2:	bf00      	nop
 8007ae4:	50000100 	.word	0x50000100
 8007ae8:	50000400 	.word	0x50000400
 8007aec:	50000500 	.word	0x50000500
 8007af0:	50000300 	.word	0x50000300
 8007af4:	50000700 	.word	0x50000700
 8007af8:	50000600 	.word	0x50000600

08007afc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007afc:	b480      	push	{r7}
 8007afe:	b085      	sub	sp, #20
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	f003 0307 	and.w	r3, r3, #7
 8007b0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007b0c:	4b0c      	ldr	r3, [pc, #48]	@ (8007b40 <__NVIC_SetPriorityGrouping+0x44>)
 8007b0e:	68db      	ldr	r3, [r3, #12]
 8007b10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007b12:	68ba      	ldr	r2, [r7, #8]
 8007b14:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8007b18:	4013      	ands	r3, r2
 8007b1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007b20:	68bb      	ldr	r3, [r7, #8]
 8007b22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007b24:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8007b28:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007b2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007b2e:	4a04      	ldr	r2, [pc, #16]	@ (8007b40 <__NVIC_SetPriorityGrouping+0x44>)
 8007b30:	68bb      	ldr	r3, [r7, #8]
 8007b32:	60d3      	str	r3, [r2, #12]
}
 8007b34:	bf00      	nop
 8007b36:	3714      	adds	r7, #20
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3e:	4770      	bx	lr
 8007b40:	e000ed00 	.word	0xe000ed00

08007b44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007b44:	b480      	push	{r7}
 8007b46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007b48:	4b04      	ldr	r3, [pc, #16]	@ (8007b5c <__NVIC_GetPriorityGrouping+0x18>)
 8007b4a:	68db      	ldr	r3, [r3, #12]
 8007b4c:	0a1b      	lsrs	r3, r3, #8
 8007b4e:	f003 0307 	and.w	r3, r3, #7
}
 8007b52:	4618      	mov	r0, r3
 8007b54:	46bd      	mov	sp, r7
 8007b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5a:	4770      	bx	lr
 8007b5c:	e000ed00 	.word	0xe000ed00

08007b60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007b60:	b480      	push	{r7}
 8007b62:	b083      	sub	sp, #12
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	4603      	mov	r3, r0
 8007b68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007b6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	db0b      	blt.n	8007b8a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007b72:	79fb      	ldrb	r3, [r7, #7]
 8007b74:	f003 021f 	and.w	r2, r3, #31
 8007b78:	4907      	ldr	r1, [pc, #28]	@ (8007b98 <__NVIC_EnableIRQ+0x38>)
 8007b7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b7e:	095b      	lsrs	r3, r3, #5
 8007b80:	2001      	movs	r0, #1
 8007b82:	fa00 f202 	lsl.w	r2, r0, r2
 8007b86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8007b8a:	bf00      	nop
 8007b8c:	370c      	adds	r7, #12
 8007b8e:	46bd      	mov	sp, r7
 8007b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b94:	4770      	bx	lr
 8007b96:	bf00      	nop
 8007b98:	e000e100 	.word	0xe000e100

08007b9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007b9c:	b480      	push	{r7}
 8007b9e:	b083      	sub	sp, #12
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	4603      	mov	r3, r0
 8007ba4:	6039      	str	r1, [r7, #0]
 8007ba6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007ba8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	db0a      	blt.n	8007bc6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007bb0:	683b      	ldr	r3, [r7, #0]
 8007bb2:	b2da      	uxtb	r2, r3
 8007bb4:	490c      	ldr	r1, [pc, #48]	@ (8007be8 <__NVIC_SetPriority+0x4c>)
 8007bb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007bba:	0112      	lsls	r2, r2, #4
 8007bbc:	b2d2      	uxtb	r2, r2
 8007bbe:	440b      	add	r3, r1
 8007bc0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007bc4:	e00a      	b.n	8007bdc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007bc6:	683b      	ldr	r3, [r7, #0]
 8007bc8:	b2da      	uxtb	r2, r3
 8007bca:	4908      	ldr	r1, [pc, #32]	@ (8007bec <__NVIC_SetPriority+0x50>)
 8007bcc:	79fb      	ldrb	r3, [r7, #7]
 8007bce:	f003 030f 	and.w	r3, r3, #15
 8007bd2:	3b04      	subs	r3, #4
 8007bd4:	0112      	lsls	r2, r2, #4
 8007bd6:	b2d2      	uxtb	r2, r2
 8007bd8:	440b      	add	r3, r1
 8007bda:	761a      	strb	r2, [r3, #24]
}
 8007bdc:	bf00      	nop
 8007bde:	370c      	adds	r7, #12
 8007be0:	46bd      	mov	sp, r7
 8007be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be6:	4770      	bx	lr
 8007be8:	e000e100 	.word	0xe000e100
 8007bec:	e000ed00 	.word	0xe000ed00

08007bf0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007bf0:	b480      	push	{r7}
 8007bf2:	b089      	sub	sp, #36	@ 0x24
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	60f8      	str	r0, [r7, #12]
 8007bf8:	60b9      	str	r1, [r7, #8]
 8007bfa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	f003 0307 	and.w	r3, r3, #7
 8007c02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007c04:	69fb      	ldr	r3, [r7, #28]
 8007c06:	f1c3 0307 	rsb	r3, r3, #7
 8007c0a:	2b04      	cmp	r3, #4
 8007c0c:	bf28      	it	cs
 8007c0e:	2304      	movcs	r3, #4
 8007c10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007c12:	69fb      	ldr	r3, [r7, #28]
 8007c14:	3304      	adds	r3, #4
 8007c16:	2b06      	cmp	r3, #6
 8007c18:	d902      	bls.n	8007c20 <NVIC_EncodePriority+0x30>
 8007c1a:	69fb      	ldr	r3, [r7, #28]
 8007c1c:	3b03      	subs	r3, #3
 8007c1e:	e000      	b.n	8007c22 <NVIC_EncodePriority+0x32>
 8007c20:	2300      	movs	r3, #0
 8007c22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007c24:	f04f 32ff 	mov.w	r2, #4294967295
 8007c28:	69bb      	ldr	r3, [r7, #24]
 8007c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8007c2e:	43da      	mvns	r2, r3
 8007c30:	68bb      	ldr	r3, [r7, #8]
 8007c32:	401a      	ands	r2, r3
 8007c34:	697b      	ldr	r3, [r7, #20]
 8007c36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007c38:	f04f 31ff 	mov.w	r1, #4294967295
 8007c3c:	697b      	ldr	r3, [r7, #20]
 8007c3e:	fa01 f303 	lsl.w	r3, r1, r3
 8007c42:	43d9      	mvns	r1, r3
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007c48:	4313      	orrs	r3, r2
         );
}
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	3724      	adds	r7, #36	@ 0x24
 8007c4e:	46bd      	mov	sp, r7
 8007c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c54:	4770      	bx	lr
	...

08007c58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	b082      	sub	sp, #8
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	3b01      	subs	r3, #1
 8007c64:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007c68:	d301      	bcc.n	8007c6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007c6a:	2301      	movs	r3, #1
 8007c6c:	e00f      	b.n	8007c8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007c6e:	4a0a      	ldr	r2, [pc, #40]	@ (8007c98 <SysTick_Config+0x40>)
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	3b01      	subs	r3, #1
 8007c74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007c76:	210f      	movs	r1, #15
 8007c78:	f04f 30ff 	mov.w	r0, #4294967295
 8007c7c:	f7ff ff8e 	bl	8007b9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007c80:	4b05      	ldr	r3, [pc, #20]	@ (8007c98 <SysTick_Config+0x40>)
 8007c82:	2200      	movs	r2, #0
 8007c84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007c86:	4b04      	ldr	r3, [pc, #16]	@ (8007c98 <SysTick_Config+0x40>)
 8007c88:	2207      	movs	r2, #7
 8007c8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007c8c:	2300      	movs	r3, #0
}
 8007c8e:	4618      	mov	r0, r3
 8007c90:	3708      	adds	r7, #8
 8007c92:	46bd      	mov	sp, r7
 8007c94:	bd80      	pop	{r7, pc}
 8007c96:	bf00      	nop
 8007c98:	e000e010 	.word	0xe000e010

08007c9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007c9c:	b580      	push	{r7, lr}
 8007c9e:	b082      	sub	sp, #8
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007ca4:	6878      	ldr	r0, [r7, #4]
 8007ca6:	f7ff ff29 	bl	8007afc <__NVIC_SetPriorityGrouping>
}
 8007caa:	bf00      	nop
 8007cac:	3708      	adds	r7, #8
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	bd80      	pop	{r7, pc}

08007cb2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007cb2:	b580      	push	{r7, lr}
 8007cb4:	b086      	sub	sp, #24
 8007cb6:	af00      	add	r7, sp, #0
 8007cb8:	4603      	mov	r3, r0
 8007cba:	60b9      	str	r1, [r7, #8]
 8007cbc:	607a      	str	r2, [r7, #4]
 8007cbe:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8007cc0:	f7ff ff40 	bl	8007b44 <__NVIC_GetPriorityGrouping>
 8007cc4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007cc6:	687a      	ldr	r2, [r7, #4]
 8007cc8:	68b9      	ldr	r1, [r7, #8]
 8007cca:	6978      	ldr	r0, [r7, #20]
 8007ccc:	f7ff ff90 	bl	8007bf0 <NVIC_EncodePriority>
 8007cd0:	4602      	mov	r2, r0
 8007cd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007cd6:	4611      	mov	r1, r2
 8007cd8:	4618      	mov	r0, r3
 8007cda:	f7ff ff5f 	bl	8007b9c <__NVIC_SetPriority>
}
 8007cde:	bf00      	nop
 8007ce0:	3718      	adds	r7, #24
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	bd80      	pop	{r7, pc}

08007ce6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007ce6:	b580      	push	{r7, lr}
 8007ce8:	b082      	sub	sp, #8
 8007cea:	af00      	add	r7, sp, #0
 8007cec:	4603      	mov	r3, r0
 8007cee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007cf0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007cf4:	4618      	mov	r0, r3
 8007cf6:	f7ff ff33 	bl	8007b60 <__NVIC_EnableIRQ>
}
 8007cfa:	bf00      	nop
 8007cfc:	3708      	adds	r7, #8
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	bd80      	pop	{r7, pc}

08007d02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007d02:	b580      	push	{r7, lr}
 8007d04:	b082      	sub	sp, #8
 8007d06:	af00      	add	r7, sp, #0
 8007d08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007d0a:	6878      	ldr	r0, [r7, #4]
 8007d0c:	f7ff ffa4 	bl	8007c58 <SysTick_Config>
 8007d10:	4603      	mov	r3, r0
}
 8007d12:	4618      	mov	r0, r3
 8007d14:	3708      	adds	r7, #8
 8007d16:	46bd      	mov	sp, r7
 8007d18:	bd80      	pop	{r7, pc}
	...

08007d1c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007d1c:	b580      	push	{r7, lr}
 8007d1e:	b084      	sub	sp, #16
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d101      	bne.n	8007d2e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8007d2a:	2301      	movs	r3, #1
 8007d2c:	e08d      	b.n	8007e4a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	461a      	mov	r2, r3
 8007d34:	4b47      	ldr	r3, [pc, #284]	@ (8007e54 <HAL_DMA_Init+0x138>)
 8007d36:	429a      	cmp	r2, r3
 8007d38:	d80f      	bhi.n	8007d5a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	461a      	mov	r2, r3
 8007d40:	4b45      	ldr	r3, [pc, #276]	@ (8007e58 <HAL_DMA_Init+0x13c>)
 8007d42:	4413      	add	r3, r2
 8007d44:	4a45      	ldr	r2, [pc, #276]	@ (8007e5c <HAL_DMA_Init+0x140>)
 8007d46:	fba2 2303 	umull	r2, r3, r2, r3
 8007d4a:	091b      	lsrs	r3, r3, #4
 8007d4c:	009a      	lsls	r2, r3, #2
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	4a42      	ldr	r2, [pc, #264]	@ (8007e60 <HAL_DMA_Init+0x144>)
 8007d56:	641a      	str	r2, [r3, #64]	@ 0x40
 8007d58:	e00e      	b.n	8007d78 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	461a      	mov	r2, r3
 8007d60:	4b40      	ldr	r3, [pc, #256]	@ (8007e64 <HAL_DMA_Init+0x148>)
 8007d62:	4413      	add	r3, r2
 8007d64:	4a3d      	ldr	r2, [pc, #244]	@ (8007e5c <HAL_DMA_Init+0x140>)
 8007d66:	fba2 2303 	umull	r2, r3, r2, r3
 8007d6a:	091b      	lsrs	r3, r3, #4
 8007d6c:	009a      	lsls	r2, r3, #2
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	4a3c      	ldr	r2, [pc, #240]	@ (8007e68 <HAL_DMA_Init+0x14c>)
 8007d76:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	2202      	movs	r2, #2
 8007d7c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8007d8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007d92:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8007d9c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	691b      	ldr	r3, [r3, #16]
 8007da2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007da8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	699b      	ldr	r3, [r3, #24]
 8007dae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007db4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	6a1b      	ldr	r3, [r3, #32]
 8007dba:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8007dbc:	68fa      	ldr	r2, [r7, #12]
 8007dbe:	4313      	orrs	r3, r2
 8007dc0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	68fa      	ldr	r2, [r7, #12]
 8007dc8:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8007dca:	6878      	ldr	r0, [r7, #4]
 8007dcc:	f000 fa82 	bl	80082d4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	689b      	ldr	r3, [r3, #8]
 8007dd4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007dd8:	d102      	bne.n	8007de0 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	2200      	movs	r2, #0
 8007dde:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	685a      	ldr	r2, [r3, #4]
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007de8:	b2d2      	uxtb	r2, r2
 8007dea:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007df0:	687a      	ldr	r2, [r7, #4]
 8007df2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8007df4:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	685b      	ldr	r3, [r3, #4]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d010      	beq.n	8007e20 <HAL_DMA_Init+0x104>
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	685b      	ldr	r3, [r3, #4]
 8007e02:	2b04      	cmp	r3, #4
 8007e04:	d80c      	bhi.n	8007e20 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8007e06:	6878      	ldr	r0, [r7, #4]
 8007e08:	f000 faa2 	bl	8008350 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e10:	2200      	movs	r2, #0
 8007e12:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007e18:	687a      	ldr	r2, [r7, #4]
 8007e1a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8007e1c:	605a      	str	r2, [r3, #4]
 8007e1e:	e008      	b.n	8007e32 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	2200      	movs	r2, #0
 8007e24:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	2200      	movs	r2, #0
 8007e2a:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	2200      	movs	r2, #0
 8007e30:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	2200      	movs	r2, #0
 8007e36:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	2201      	movs	r2, #1
 8007e3c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	2200      	movs	r2, #0
 8007e44:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8007e48:	2300      	movs	r3, #0
}
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	3710      	adds	r7, #16
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	bd80      	pop	{r7, pc}
 8007e52:	bf00      	nop
 8007e54:	40020407 	.word	0x40020407
 8007e58:	bffdfff8 	.word	0xbffdfff8
 8007e5c:	cccccccd 	.word	0xcccccccd
 8007e60:	40020000 	.word	0x40020000
 8007e64:	bffdfbf8 	.word	0xbffdfbf8
 8007e68:	40020400 	.word	0x40020400

08007e6c <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8007e6c:	b580      	push	{r7, lr}
 8007e6e:	b086      	sub	sp, #24
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	60f8      	str	r0, [r7, #12]
 8007e74:	60b9      	str	r1, [r7, #8]
 8007e76:	607a      	str	r2, [r7, #4]
 8007e78:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007e7a:	2300      	movs	r3, #0
 8007e7c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8007e84:	2b01      	cmp	r3, #1
 8007e86:	d101      	bne.n	8007e8c <HAL_DMA_Start_IT+0x20>
 8007e88:	2302      	movs	r3, #2
 8007e8a:	e066      	b.n	8007f5a <HAL_DMA_Start_IT+0xee>
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	2201      	movs	r2, #1
 8007e90:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8007e9a:	b2db      	uxtb	r3, r3
 8007e9c:	2b01      	cmp	r3, #1
 8007e9e:	d155      	bne.n	8007f4c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	2202      	movs	r2, #2
 8007ea4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	2200      	movs	r2, #0
 8007eac:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	681a      	ldr	r2, [r3, #0]
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	f022 0201 	bic.w	r2, r2, #1
 8007ebc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007ebe:	683b      	ldr	r3, [r7, #0]
 8007ec0:	687a      	ldr	r2, [r7, #4]
 8007ec2:	68b9      	ldr	r1, [r7, #8]
 8007ec4:	68f8      	ldr	r0, [r7, #12]
 8007ec6:	f000 f9c7 	bl	8008258 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d008      	beq.n	8007ee4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	681a      	ldr	r2, [r3, #0]
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	f042 020e 	orr.w	r2, r2, #14
 8007ee0:	601a      	str	r2, [r3, #0]
 8007ee2:	e00f      	b.n	8007f04 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	681a      	ldr	r2, [r3, #0]
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	f022 0204 	bic.w	r2, r2, #4
 8007ef2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	681a      	ldr	r2, [r3, #0]
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	f042 020a 	orr.w	r2, r2, #10
 8007f02:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d007      	beq.n	8007f22 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007f16:	681a      	ldr	r2, [r3, #0]
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007f1c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007f20:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d007      	beq.n	8007f3a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f2e:	681a      	ldr	r2, [r3, #0]
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f34:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007f38:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	681a      	ldr	r2, [r3, #0]
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	f042 0201 	orr.w	r2, r2, #1
 8007f48:	601a      	str	r2, [r3, #0]
 8007f4a:	e005      	b.n	8007f58 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	2200      	movs	r2, #0
 8007f50:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8007f54:	2302      	movs	r3, #2
 8007f56:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8007f58:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f5a:	4618      	mov	r0, r3
 8007f5c:	3718      	adds	r7, #24
 8007f5e:	46bd      	mov	sp, r7
 8007f60:	bd80      	pop	{r7, pc}

08007f62 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007f62:	b480      	push	{r7}
 8007f64:	b085      	sub	sp, #20
 8007f66:	af00      	add	r7, sp, #0
 8007f68:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8007f74:	b2db      	uxtb	r3, r3
 8007f76:	2b02      	cmp	r3, #2
 8007f78:	d005      	beq.n	8007f86 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	2204      	movs	r2, #4
 8007f7e:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8007f80:	2301      	movs	r3, #1
 8007f82:	73fb      	strb	r3, [r7, #15]
 8007f84:	e037      	b.n	8007ff6 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	681a      	ldr	r2, [r3, #0]
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	f022 020e 	bic.w	r2, r2, #14
 8007f94:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007f9a:	681a      	ldr	r2, [r3, #0]
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007fa0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007fa4:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	681a      	ldr	r2, [r3, #0]
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	f022 0201 	bic.w	r2, r2, #1
 8007fb4:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007fba:	f003 021f 	and.w	r2, r3, #31
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fc2:	2101      	movs	r1, #1
 8007fc4:	fa01 f202 	lsl.w	r2, r1, r2
 8007fc8:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007fce:	687a      	ldr	r2, [r7, #4]
 8007fd0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8007fd2:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d00c      	beq.n	8007ff6 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007fe0:	681a      	ldr	r2, [r3, #0]
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007fe6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007fea:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007ff0:	687a      	ldr	r2, [r7, #4]
 8007ff2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8007ff4:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	2201      	movs	r2, #1
 8007ffa:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	2200      	movs	r2, #0
 8008002:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8008006:	7bfb      	ldrb	r3, [r7, #15]
}
 8008008:	4618      	mov	r0, r3
 800800a:	3714      	adds	r7, #20
 800800c:	46bd      	mov	sp, r7
 800800e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008012:	4770      	bx	lr

08008014 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8008014:	b580      	push	{r7, lr}
 8008016:	b084      	sub	sp, #16
 8008018:	af00      	add	r7, sp, #0
 800801a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800801c:	2300      	movs	r3, #0
 800801e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8008026:	b2db      	uxtb	r3, r3
 8008028:	2b02      	cmp	r3, #2
 800802a:	d00d      	beq.n	8008048 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	2204      	movs	r2, #4
 8008030:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	2201      	movs	r2, #1
 8008036:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	2200      	movs	r2, #0
 800803e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8008042:	2301      	movs	r3, #1
 8008044:	73fb      	strb	r3, [r7, #15]
 8008046:	e047      	b.n	80080d8 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	681a      	ldr	r2, [r3, #0]
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	f022 020e 	bic.w	r2, r2, #14
 8008056:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	681a      	ldr	r2, [r3, #0]
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	f022 0201 	bic.w	r2, r2, #1
 8008066:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800806c:	681a      	ldr	r2, [r3, #0]
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008072:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008076:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800807c:	f003 021f 	and.w	r2, r3, #31
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008084:	2101      	movs	r1, #1
 8008086:	fa01 f202 	lsl.w	r2, r1, r2
 800808a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008090:	687a      	ldr	r2, [r7, #4]
 8008092:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8008094:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800809a:	2b00      	cmp	r3, #0
 800809c:	d00c      	beq.n	80080b8 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80080a2:	681a      	ldr	r2, [r3, #0]
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80080a8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80080ac:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80080b2:	687a      	ldr	r2, [r7, #4]
 80080b4:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80080b6:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	2201      	movs	r2, #1
 80080bc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	2200      	movs	r2, #0
 80080c4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d003      	beq.n	80080d8 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080d4:	6878      	ldr	r0, [r7, #4]
 80080d6:	4798      	blx	r3
    }
  }
  return status;
 80080d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80080da:	4618      	mov	r0, r3
 80080dc:	3710      	adds	r7, #16
 80080de:	46bd      	mov	sp, r7
 80080e0:	bd80      	pop	{r7, pc}

080080e2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80080e2:	b580      	push	{r7, lr}
 80080e4:	b084      	sub	sp, #16
 80080e6:	af00      	add	r7, sp, #0
 80080e8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80080fe:	f003 031f 	and.w	r3, r3, #31
 8008102:	2204      	movs	r2, #4
 8008104:	409a      	lsls	r2, r3
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	4013      	ands	r3, r2
 800810a:	2b00      	cmp	r3, #0
 800810c:	d026      	beq.n	800815c <HAL_DMA_IRQHandler+0x7a>
 800810e:	68bb      	ldr	r3, [r7, #8]
 8008110:	f003 0304 	and.w	r3, r3, #4
 8008114:	2b00      	cmp	r3, #0
 8008116:	d021      	beq.n	800815c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	f003 0320 	and.w	r3, r3, #32
 8008122:	2b00      	cmp	r3, #0
 8008124:	d107      	bne.n	8008136 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	681a      	ldr	r2, [r3, #0]
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	f022 0204 	bic.w	r2, r2, #4
 8008134:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800813a:	f003 021f 	and.w	r2, r3, #31
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008142:	2104      	movs	r1, #4
 8008144:	fa01 f202 	lsl.w	r2, r1, r2
 8008148:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800814e:	2b00      	cmp	r3, #0
 8008150:	d071      	beq.n	8008236 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008156:	6878      	ldr	r0, [r7, #4]
 8008158:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800815a:	e06c      	b.n	8008236 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008160:	f003 031f 	and.w	r3, r3, #31
 8008164:	2202      	movs	r2, #2
 8008166:	409a      	lsls	r2, r3
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	4013      	ands	r3, r2
 800816c:	2b00      	cmp	r3, #0
 800816e:	d02e      	beq.n	80081ce <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8008170:	68bb      	ldr	r3, [r7, #8]
 8008172:	f003 0302 	and.w	r3, r3, #2
 8008176:	2b00      	cmp	r3, #0
 8008178:	d029      	beq.n	80081ce <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	f003 0320 	and.w	r3, r3, #32
 8008184:	2b00      	cmp	r3, #0
 8008186:	d10b      	bne.n	80081a0 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	681a      	ldr	r2, [r3, #0]
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	f022 020a 	bic.w	r2, r2, #10
 8008196:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	2201      	movs	r2, #1
 800819c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80081a4:	f003 021f 	and.w	r2, r3, #31
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081ac:	2102      	movs	r1, #2
 80081ae:	fa01 f202 	lsl.w	r2, r1, r2
 80081b2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	2200      	movs	r2, #0
 80081b8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d038      	beq.n	8008236 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081c8:	6878      	ldr	r0, [r7, #4]
 80081ca:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80081cc:	e033      	b.n	8008236 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80081d2:	f003 031f 	and.w	r3, r3, #31
 80081d6:	2208      	movs	r2, #8
 80081d8:	409a      	lsls	r2, r3
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	4013      	ands	r3, r2
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d02a      	beq.n	8008238 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80081e2:	68bb      	ldr	r3, [r7, #8]
 80081e4:	f003 0308 	and.w	r3, r3, #8
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d025      	beq.n	8008238 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	681a      	ldr	r2, [r3, #0]
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	f022 020e 	bic.w	r2, r2, #14
 80081fa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008200:	f003 021f 	and.w	r2, r3, #31
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008208:	2101      	movs	r1, #1
 800820a:	fa01 f202 	lsl.w	r2, r1, r2
 800820e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	2201      	movs	r2, #1
 8008214:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	2201      	movs	r2, #1
 800821a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	2200      	movs	r2, #0
 8008222:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800822a:	2b00      	cmp	r3, #0
 800822c:	d004      	beq.n	8008238 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008232:	6878      	ldr	r0, [r7, #4]
 8008234:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8008236:	bf00      	nop
 8008238:	bf00      	nop
}
 800823a:	3710      	adds	r7, #16
 800823c:	46bd      	mov	sp, r7
 800823e:	bd80      	pop	{r7, pc}

08008240 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8008240:	b480      	push	{r7}
 8008242:	b083      	sub	sp, #12
 8008244:	af00      	add	r7, sp, #0
 8008246:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 800824c:	4618      	mov	r0, r3
 800824e:	370c      	adds	r7, #12
 8008250:	46bd      	mov	sp, r7
 8008252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008256:	4770      	bx	lr

08008258 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008258:	b480      	push	{r7}
 800825a:	b085      	sub	sp, #20
 800825c:	af00      	add	r7, sp, #0
 800825e:	60f8      	str	r0, [r7, #12]
 8008260:	60b9      	str	r1, [r7, #8]
 8008262:	607a      	str	r2, [r7, #4]
 8008264:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800826a:	68fa      	ldr	r2, [r7, #12]
 800826c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800826e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008274:	2b00      	cmp	r3, #0
 8008276:	d004      	beq.n	8008282 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800827c:	68fa      	ldr	r2, [r7, #12]
 800827e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8008280:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008286:	f003 021f 	and.w	r2, r3, #31
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800828e:	2101      	movs	r1, #1
 8008290:	fa01 f202 	lsl.w	r2, r1, r2
 8008294:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	683a      	ldr	r2, [r7, #0]
 800829c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	689b      	ldr	r3, [r3, #8]
 80082a2:	2b10      	cmp	r3, #16
 80082a4:	d108      	bne.n	80082b8 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	687a      	ldr	r2, [r7, #4]
 80082ac:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	68ba      	ldr	r2, [r7, #8]
 80082b4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80082b6:	e007      	b.n	80082c8 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	68ba      	ldr	r2, [r7, #8]
 80082be:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	687a      	ldr	r2, [r7, #4]
 80082c6:	60da      	str	r2, [r3, #12]
}
 80082c8:	bf00      	nop
 80082ca:	3714      	adds	r7, #20
 80082cc:	46bd      	mov	sp, r7
 80082ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d2:	4770      	bx	lr

080082d4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80082d4:	b480      	push	{r7}
 80082d6:	b087      	sub	sp, #28
 80082d8:	af00      	add	r7, sp, #0
 80082da:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	461a      	mov	r2, r3
 80082e2:	4b16      	ldr	r3, [pc, #88]	@ (800833c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80082e4:	429a      	cmp	r2, r3
 80082e6:	d802      	bhi.n	80082ee <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80082e8:	4b15      	ldr	r3, [pc, #84]	@ (8008340 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80082ea:	617b      	str	r3, [r7, #20]
 80082ec:	e001      	b.n	80082f2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 80082ee:	4b15      	ldr	r3, [pc, #84]	@ (8008344 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80082f0:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80082f2:	697b      	ldr	r3, [r7, #20]
 80082f4:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	b2db      	uxtb	r3, r3
 80082fc:	3b08      	subs	r3, #8
 80082fe:	4a12      	ldr	r2, [pc, #72]	@ (8008348 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8008300:	fba2 2303 	umull	r2, r3, r2, r3
 8008304:	091b      	lsrs	r3, r3, #4
 8008306:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800830c:	089b      	lsrs	r3, r3, #2
 800830e:	009a      	lsls	r2, r3, #2
 8008310:	693b      	ldr	r3, [r7, #16]
 8008312:	4413      	add	r3, r2
 8008314:	461a      	mov	r2, r3
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	4a0b      	ldr	r2, [pc, #44]	@ (800834c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800831e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	f003 031f 	and.w	r3, r3, #31
 8008326:	2201      	movs	r2, #1
 8008328:	409a      	lsls	r2, r3
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800832e:	bf00      	nop
 8008330:	371c      	adds	r7, #28
 8008332:	46bd      	mov	sp, r7
 8008334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008338:	4770      	bx	lr
 800833a:	bf00      	nop
 800833c:	40020407 	.word	0x40020407
 8008340:	40020800 	.word	0x40020800
 8008344:	40020820 	.word	0x40020820
 8008348:	cccccccd 	.word	0xcccccccd
 800834c:	40020880 	.word	0x40020880

08008350 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008350:	b480      	push	{r7}
 8008352:	b085      	sub	sp, #20
 8008354:	af00      	add	r7, sp, #0
 8008356:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	685b      	ldr	r3, [r3, #4]
 800835c:	b2db      	uxtb	r3, r3
 800835e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8008360:	68fa      	ldr	r2, [r7, #12]
 8008362:	4b0b      	ldr	r3, [pc, #44]	@ (8008390 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8008364:	4413      	add	r3, r2
 8008366:	009b      	lsls	r3, r3, #2
 8008368:	461a      	mov	r2, r3
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	4a08      	ldr	r2, [pc, #32]	@ (8008394 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8008372:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	3b01      	subs	r3, #1
 8008378:	f003 031f 	and.w	r3, r3, #31
 800837c:	2201      	movs	r2, #1
 800837e:	409a      	lsls	r2, r3
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8008384:	bf00      	nop
 8008386:	3714      	adds	r7, #20
 8008388:	46bd      	mov	sp, r7
 800838a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800838e:	4770      	bx	lr
 8008390:	1000823f 	.word	0x1000823f
 8008394:	40020940 	.word	0x40020940

08008398 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008398:	b480      	push	{r7}
 800839a:	b087      	sub	sp, #28
 800839c:	af00      	add	r7, sp, #0
 800839e:	6078      	str	r0, [r7, #4]
 80083a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80083a2:	2300      	movs	r3, #0
 80083a4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80083a6:	e15a      	b.n	800865e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80083a8:	683b      	ldr	r3, [r7, #0]
 80083aa:	681a      	ldr	r2, [r3, #0]
 80083ac:	2101      	movs	r1, #1
 80083ae:	697b      	ldr	r3, [r7, #20]
 80083b0:	fa01 f303 	lsl.w	r3, r1, r3
 80083b4:	4013      	ands	r3, r2
 80083b6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	f000 814c 	beq.w	8008658 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80083c0:	683b      	ldr	r3, [r7, #0]
 80083c2:	685b      	ldr	r3, [r3, #4]
 80083c4:	f003 0303 	and.w	r3, r3, #3
 80083c8:	2b01      	cmp	r3, #1
 80083ca:	d005      	beq.n	80083d8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80083cc:	683b      	ldr	r3, [r7, #0]
 80083ce:	685b      	ldr	r3, [r3, #4]
 80083d0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80083d4:	2b02      	cmp	r3, #2
 80083d6:	d130      	bne.n	800843a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	689b      	ldr	r3, [r3, #8]
 80083dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80083de:	697b      	ldr	r3, [r7, #20]
 80083e0:	005b      	lsls	r3, r3, #1
 80083e2:	2203      	movs	r2, #3
 80083e4:	fa02 f303 	lsl.w	r3, r2, r3
 80083e8:	43db      	mvns	r3, r3
 80083ea:	693a      	ldr	r2, [r7, #16]
 80083ec:	4013      	ands	r3, r2
 80083ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80083f0:	683b      	ldr	r3, [r7, #0]
 80083f2:	68da      	ldr	r2, [r3, #12]
 80083f4:	697b      	ldr	r3, [r7, #20]
 80083f6:	005b      	lsls	r3, r3, #1
 80083f8:	fa02 f303 	lsl.w	r3, r2, r3
 80083fc:	693a      	ldr	r2, [r7, #16]
 80083fe:	4313      	orrs	r3, r2
 8008400:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	693a      	ldr	r2, [r7, #16]
 8008406:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	685b      	ldr	r3, [r3, #4]
 800840c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800840e:	2201      	movs	r2, #1
 8008410:	697b      	ldr	r3, [r7, #20]
 8008412:	fa02 f303 	lsl.w	r3, r2, r3
 8008416:	43db      	mvns	r3, r3
 8008418:	693a      	ldr	r2, [r7, #16]
 800841a:	4013      	ands	r3, r2
 800841c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800841e:	683b      	ldr	r3, [r7, #0]
 8008420:	685b      	ldr	r3, [r3, #4]
 8008422:	091b      	lsrs	r3, r3, #4
 8008424:	f003 0201 	and.w	r2, r3, #1
 8008428:	697b      	ldr	r3, [r7, #20]
 800842a:	fa02 f303 	lsl.w	r3, r2, r3
 800842e:	693a      	ldr	r2, [r7, #16]
 8008430:	4313      	orrs	r3, r2
 8008432:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	693a      	ldr	r2, [r7, #16]
 8008438:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800843a:	683b      	ldr	r3, [r7, #0]
 800843c:	685b      	ldr	r3, [r3, #4]
 800843e:	f003 0303 	and.w	r3, r3, #3
 8008442:	2b03      	cmp	r3, #3
 8008444:	d017      	beq.n	8008476 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	68db      	ldr	r3, [r3, #12]
 800844a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800844c:	697b      	ldr	r3, [r7, #20]
 800844e:	005b      	lsls	r3, r3, #1
 8008450:	2203      	movs	r2, #3
 8008452:	fa02 f303 	lsl.w	r3, r2, r3
 8008456:	43db      	mvns	r3, r3
 8008458:	693a      	ldr	r2, [r7, #16]
 800845a:	4013      	ands	r3, r2
 800845c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800845e:	683b      	ldr	r3, [r7, #0]
 8008460:	689a      	ldr	r2, [r3, #8]
 8008462:	697b      	ldr	r3, [r7, #20]
 8008464:	005b      	lsls	r3, r3, #1
 8008466:	fa02 f303 	lsl.w	r3, r2, r3
 800846a:	693a      	ldr	r2, [r7, #16]
 800846c:	4313      	orrs	r3, r2
 800846e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	693a      	ldr	r2, [r7, #16]
 8008474:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008476:	683b      	ldr	r3, [r7, #0]
 8008478:	685b      	ldr	r3, [r3, #4]
 800847a:	f003 0303 	and.w	r3, r3, #3
 800847e:	2b02      	cmp	r3, #2
 8008480:	d123      	bne.n	80084ca <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008482:	697b      	ldr	r3, [r7, #20]
 8008484:	08da      	lsrs	r2, r3, #3
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	3208      	adds	r2, #8
 800848a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800848e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8008490:	697b      	ldr	r3, [r7, #20]
 8008492:	f003 0307 	and.w	r3, r3, #7
 8008496:	009b      	lsls	r3, r3, #2
 8008498:	220f      	movs	r2, #15
 800849a:	fa02 f303 	lsl.w	r3, r2, r3
 800849e:	43db      	mvns	r3, r3
 80084a0:	693a      	ldr	r2, [r7, #16]
 80084a2:	4013      	ands	r3, r2
 80084a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80084a6:	683b      	ldr	r3, [r7, #0]
 80084a8:	691a      	ldr	r2, [r3, #16]
 80084aa:	697b      	ldr	r3, [r7, #20]
 80084ac:	f003 0307 	and.w	r3, r3, #7
 80084b0:	009b      	lsls	r3, r3, #2
 80084b2:	fa02 f303 	lsl.w	r3, r2, r3
 80084b6:	693a      	ldr	r2, [r7, #16]
 80084b8:	4313      	orrs	r3, r2
 80084ba:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80084bc:	697b      	ldr	r3, [r7, #20]
 80084be:	08da      	lsrs	r2, r3, #3
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	3208      	adds	r2, #8
 80084c4:	6939      	ldr	r1, [r7, #16]
 80084c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80084d0:	697b      	ldr	r3, [r7, #20]
 80084d2:	005b      	lsls	r3, r3, #1
 80084d4:	2203      	movs	r2, #3
 80084d6:	fa02 f303 	lsl.w	r3, r2, r3
 80084da:	43db      	mvns	r3, r3
 80084dc:	693a      	ldr	r2, [r7, #16]
 80084de:	4013      	ands	r3, r2
 80084e0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80084e2:	683b      	ldr	r3, [r7, #0]
 80084e4:	685b      	ldr	r3, [r3, #4]
 80084e6:	f003 0203 	and.w	r2, r3, #3
 80084ea:	697b      	ldr	r3, [r7, #20]
 80084ec:	005b      	lsls	r3, r3, #1
 80084ee:	fa02 f303 	lsl.w	r3, r2, r3
 80084f2:	693a      	ldr	r2, [r7, #16]
 80084f4:	4313      	orrs	r3, r2
 80084f6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	693a      	ldr	r2, [r7, #16]
 80084fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80084fe:	683b      	ldr	r3, [r7, #0]
 8008500:	685b      	ldr	r3, [r3, #4]
 8008502:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8008506:	2b00      	cmp	r3, #0
 8008508:	f000 80a6 	beq.w	8008658 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800850c:	4b5b      	ldr	r3, [pc, #364]	@ (800867c <HAL_GPIO_Init+0x2e4>)
 800850e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008510:	4a5a      	ldr	r2, [pc, #360]	@ (800867c <HAL_GPIO_Init+0x2e4>)
 8008512:	f043 0301 	orr.w	r3, r3, #1
 8008516:	6613      	str	r3, [r2, #96]	@ 0x60
 8008518:	4b58      	ldr	r3, [pc, #352]	@ (800867c <HAL_GPIO_Init+0x2e4>)
 800851a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800851c:	f003 0301 	and.w	r3, r3, #1
 8008520:	60bb      	str	r3, [r7, #8]
 8008522:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008524:	4a56      	ldr	r2, [pc, #344]	@ (8008680 <HAL_GPIO_Init+0x2e8>)
 8008526:	697b      	ldr	r3, [r7, #20]
 8008528:	089b      	lsrs	r3, r3, #2
 800852a:	3302      	adds	r3, #2
 800852c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008530:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008532:	697b      	ldr	r3, [r7, #20]
 8008534:	f003 0303 	and.w	r3, r3, #3
 8008538:	009b      	lsls	r3, r3, #2
 800853a:	220f      	movs	r2, #15
 800853c:	fa02 f303 	lsl.w	r3, r2, r3
 8008540:	43db      	mvns	r3, r3
 8008542:	693a      	ldr	r2, [r7, #16]
 8008544:	4013      	ands	r3, r2
 8008546:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800854e:	d01f      	beq.n	8008590 <HAL_GPIO_Init+0x1f8>
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	4a4c      	ldr	r2, [pc, #304]	@ (8008684 <HAL_GPIO_Init+0x2ec>)
 8008554:	4293      	cmp	r3, r2
 8008556:	d019      	beq.n	800858c <HAL_GPIO_Init+0x1f4>
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	4a4b      	ldr	r2, [pc, #300]	@ (8008688 <HAL_GPIO_Init+0x2f0>)
 800855c:	4293      	cmp	r3, r2
 800855e:	d013      	beq.n	8008588 <HAL_GPIO_Init+0x1f0>
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	4a4a      	ldr	r2, [pc, #296]	@ (800868c <HAL_GPIO_Init+0x2f4>)
 8008564:	4293      	cmp	r3, r2
 8008566:	d00d      	beq.n	8008584 <HAL_GPIO_Init+0x1ec>
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	4a49      	ldr	r2, [pc, #292]	@ (8008690 <HAL_GPIO_Init+0x2f8>)
 800856c:	4293      	cmp	r3, r2
 800856e:	d007      	beq.n	8008580 <HAL_GPIO_Init+0x1e8>
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	4a48      	ldr	r2, [pc, #288]	@ (8008694 <HAL_GPIO_Init+0x2fc>)
 8008574:	4293      	cmp	r3, r2
 8008576:	d101      	bne.n	800857c <HAL_GPIO_Init+0x1e4>
 8008578:	2305      	movs	r3, #5
 800857a:	e00a      	b.n	8008592 <HAL_GPIO_Init+0x1fa>
 800857c:	2306      	movs	r3, #6
 800857e:	e008      	b.n	8008592 <HAL_GPIO_Init+0x1fa>
 8008580:	2304      	movs	r3, #4
 8008582:	e006      	b.n	8008592 <HAL_GPIO_Init+0x1fa>
 8008584:	2303      	movs	r3, #3
 8008586:	e004      	b.n	8008592 <HAL_GPIO_Init+0x1fa>
 8008588:	2302      	movs	r3, #2
 800858a:	e002      	b.n	8008592 <HAL_GPIO_Init+0x1fa>
 800858c:	2301      	movs	r3, #1
 800858e:	e000      	b.n	8008592 <HAL_GPIO_Init+0x1fa>
 8008590:	2300      	movs	r3, #0
 8008592:	697a      	ldr	r2, [r7, #20]
 8008594:	f002 0203 	and.w	r2, r2, #3
 8008598:	0092      	lsls	r2, r2, #2
 800859a:	4093      	lsls	r3, r2
 800859c:	693a      	ldr	r2, [r7, #16]
 800859e:	4313      	orrs	r3, r2
 80085a0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80085a2:	4937      	ldr	r1, [pc, #220]	@ (8008680 <HAL_GPIO_Init+0x2e8>)
 80085a4:	697b      	ldr	r3, [r7, #20]
 80085a6:	089b      	lsrs	r3, r3, #2
 80085a8:	3302      	adds	r3, #2
 80085aa:	693a      	ldr	r2, [r7, #16]
 80085ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80085b0:	4b39      	ldr	r3, [pc, #228]	@ (8008698 <HAL_GPIO_Init+0x300>)
 80085b2:	689b      	ldr	r3, [r3, #8]
 80085b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	43db      	mvns	r3, r3
 80085ba:	693a      	ldr	r2, [r7, #16]
 80085bc:	4013      	ands	r3, r2
 80085be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80085c0:	683b      	ldr	r3, [r7, #0]
 80085c2:	685b      	ldr	r3, [r3, #4]
 80085c4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d003      	beq.n	80085d4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80085cc:	693a      	ldr	r2, [r7, #16]
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	4313      	orrs	r3, r2
 80085d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80085d4:	4a30      	ldr	r2, [pc, #192]	@ (8008698 <HAL_GPIO_Init+0x300>)
 80085d6:	693b      	ldr	r3, [r7, #16]
 80085d8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80085da:	4b2f      	ldr	r3, [pc, #188]	@ (8008698 <HAL_GPIO_Init+0x300>)
 80085dc:	68db      	ldr	r3, [r3, #12]
 80085de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	43db      	mvns	r3, r3
 80085e4:	693a      	ldr	r2, [r7, #16]
 80085e6:	4013      	ands	r3, r2
 80085e8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80085ea:	683b      	ldr	r3, [r7, #0]
 80085ec:	685b      	ldr	r3, [r3, #4]
 80085ee:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d003      	beq.n	80085fe <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80085f6:	693a      	ldr	r2, [r7, #16]
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	4313      	orrs	r3, r2
 80085fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80085fe:	4a26      	ldr	r2, [pc, #152]	@ (8008698 <HAL_GPIO_Init+0x300>)
 8008600:	693b      	ldr	r3, [r7, #16]
 8008602:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8008604:	4b24      	ldr	r3, [pc, #144]	@ (8008698 <HAL_GPIO_Init+0x300>)
 8008606:	685b      	ldr	r3, [r3, #4]
 8008608:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	43db      	mvns	r3, r3
 800860e:	693a      	ldr	r2, [r7, #16]
 8008610:	4013      	ands	r3, r2
 8008612:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008614:	683b      	ldr	r3, [r7, #0]
 8008616:	685b      	ldr	r3, [r3, #4]
 8008618:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800861c:	2b00      	cmp	r3, #0
 800861e:	d003      	beq.n	8008628 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8008620:	693a      	ldr	r2, [r7, #16]
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	4313      	orrs	r3, r2
 8008626:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8008628:	4a1b      	ldr	r2, [pc, #108]	@ (8008698 <HAL_GPIO_Init+0x300>)
 800862a:	693b      	ldr	r3, [r7, #16]
 800862c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800862e:	4b1a      	ldr	r3, [pc, #104]	@ (8008698 <HAL_GPIO_Init+0x300>)
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	43db      	mvns	r3, r3
 8008638:	693a      	ldr	r2, [r7, #16]
 800863a:	4013      	ands	r3, r2
 800863c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800863e:	683b      	ldr	r3, [r7, #0]
 8008640:	685b      	ldr	r3, [r3, #4]
 8008642:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008646:	2b00      	cmp	r3, #0
 8008648:	d003      	beq.n	8008652 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800864a:	693a      	ldr	r2, [r7, #16]
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	4313      	orrs	r3, r2
 8008650:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8008652:	4a11      	ldr	r2, [pc, #68]	@ (8008698 <HAL_GPIO_Init+0x300>)
 8008654:	693b      	ldr	r3, [r7, #16]
 8008656:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8008658:	697b      	ldr	r3, [r7, #20]
 800865a:	3301      	adds	r3, #1
 800865c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800865e:	683b      	ldr	r3, [r7, #0]
 8008660:	681a      	ldr	r2, [r3, #0]
 8008662:	697b      	ldr	r3, [r7, #20]
 8008664:	fa22 f303 	lsr.w	r3, r2, r3
 8008668:	2b00      	cmp	r3, #0
 800866a:	f47f ae9d 	bne.w	80083a8 <HAL_GPIO_Init+0x10>
  }
}
 800866e:	bf00      	nop
 8008670:	bf00      	nop
 8008672:	371c      	adds	r7, #28
 8008674:	46bd      	mov	sp, r7
 8008676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800867a:	4770      	bx	lr
 800867c:	40021000 	.word	0x40021000
 8008680:	40010000 	.word	0x40010000
 8008684:	48000400 	.word	0x48000400
 8008688:	48000800 	.word	0x48000800
 800868c:	48000c00 	.word	0x48000c00
 8008690:	48001000 	.word	0x48001000
 8008694:	48001400 	.word	0x48001400
 8008698:	40010400 	.word	0x40010400

0800869c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800869c:	b480      	push	{r7}
 800869e:	b083      	sub	sp, #12
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	6078      	str	r0, [r7, #4]
 80086a4:	460b      	mov	r3, r1
 80086a6:	807b      	strh	r3, [r7, #2]
 80086a8:	4613      	mov	r3, r2
 80086aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80086ac:	787b      	ldrb	r3, [r7, #1]
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d003      	beq.n	80086ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80086b2:	887a      	ldrh	r2, [r7, #2]
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80086b8:	e002      	b.n	80086c0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80086ba:	887a      	ldrh	r2, [r7, #2]
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80086c0:	bf00      	nop
 80086c2:	370c      	adds	r7, #12
 80086c4:	46bd      	mov	sp, r7
 80086c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ca:	4770      	bx	lr

080086cc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80086cc:	b580      	push	{r7, lr}
 80086ce:	b082      	sub	sp, #8
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	4603      	mov	r3, r0
 80086d4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80086d6:	4b08      	ldr	r3, [pc, #32]	@ (80086f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80086d8:	695a      	ldr	r2, [r3, #20]
 80086da:	88fb      	ldrh	r3, [r7, #6]
 80086dc:	4013      	ands	r3, r2
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d006      	beq.n	80086f0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80086e2:	4a05      	ldr	r2, [pc, #20]	@ (80086f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80086e4:	88fb      	ldrh	r3, [r7, #6]
 80086e6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80086e8:	88fb      	ldrh	r3, [r7, #6]
 80086ea:	4618      	mov	r0, r3
 80086ec:	f7fc fca8 	bl	8005040 <HAL_GPIO_EXTI_Callback>
  }
}
 80086f0:	bf00      	nop
 80086f2:	3708      	adds	r7, #8
 80086f4:	46bd      	mov	sp, r7
 80086f6:	bd80      	pop	{r7, pc}
 80086f8:	40010400 	.word	0x40010400

080086fc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80086fc:	b480      	push	{r7}
 80086fe:	b085      	sub	sp, #20
 8008700:	af00      	add	r7, sp, #0
 8008702:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	2b00      	cmp	r3, #0
 8008708:	d141      	bne.n	800878e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800870a:	4b4b      	ldr	r3, [pc, #300]	@ (8008838 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8008712:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008716:	d131      	bne.n	800877c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008718:	4b47      	ldr	r3, [pc, #284]	@ (8008838 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800871a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800871e:	4a46      	ldr	r2, [pc, #280]	@ (8008838 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008720:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008724:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8008728:	4b43      	ldr	r3, [pc, #268]	@ (8008838 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8008730:	4a41      	ldr	r2, [pc, #260]	@ (8008838 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008732:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8008736:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8008738:	4b40      	ldr	r3, [pc, #256]	@ (800883c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	2232      	movs	r2, #50	@ 0x32
 800873e:	fb02 f303 	mul.w	r3, r2, r3
 8008742:	4a3f      	ldr	r2, [pc, #252]	@ (8008840 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8008744:	fba2 2303 	umull	r2, r3, r2, r3
 8008748:	0c9b      	lsrs	r3, r3, #18
 800874a:	3301      	adds	r3, #1
 800874c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800874e:	e002      	b.n	8008756 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	3b01      	subs	r3, #1
 8008754:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008756:	4b38      	ldr	r3, [pc, #224]	@ (8008838 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008758:	695b      	ldr	r3, [r3, #20]
 800875a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800875e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008762:	d102      	bne.n	800876a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	2b00      	cmp	r3, #0
 8008768:	d1f2      	bne.n	8008750 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800876a:	4b33      	ldr	r3, [pc, #204]	@ (8008838 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800876c:	695b      	ldr	r3, [r3, #20]
 800876e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008772:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008776:	d158      	bne.n	800882a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8008778:	2303      	movs	r3, #3
 800877a:	e057      	b.n	800882c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800877c:	4b2e      	ldr	r3, [pc, #184]	@ (8008838 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800877e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008782:	4a2d      	ldr	r2, [pc, #180]	@ (8008838 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008784:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008788:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800878c:	e04d      	b.n	800882a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008794:	d141      	bne.n	800881a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8008796:	4b28      	ldr	r3, [pc, #160]	@ (8008838 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800879e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80087a2:	d131      	bne.n	8008808 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80087a4:	4b24      	ldr	r3, [pc, #144]	@ (8008838 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80087a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80087aa:	4a23      	ldr	r2, [pc, #140]	@ (8008838 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80087ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80087b0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80087b4:	4b20      	ldr	r3, [pc, #128]	@ (8008838 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80087bc:	4a1e      	ldr	r2, [pc, #120]	@ (8008838 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80087be:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80087c2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80087c4:	4b1d      	ldr	r3, [pc, #116]	@ (800883c <HAL_PWREx_ControlVoltageScaling+0x140>)
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	2232      	movs	r2, #50	@ 0x32
 80087ca:	fb02 f303 	mul.w	r3, r2, r3
 80087ce:	4a1c      	ldr	r2, [pc, #112]	@ (8008840 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80087d0:	fba2 2303 	umull	r2, r3, r2, r3
 80087d4:	0c9b      	lsrs	r3, r3, #18
 80087d6:	3301      	adds	r3, #1
 80087d8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80087da:	e002      	b.n	80087e2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	3b01      	subs	r3, #1
 80087e0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80087e2:	4b15      	ldr	r3, [pc, #84]	@ (8008838 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80087e4:	695b      	ldr	r3, [r3, #20]
 80087e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80087ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80087ee:	d102      	bne.n	80087f6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d1f2      	bne.n	80087dc <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80087f6:	4b10      	ldr	r3, [pc, #64]	@ (8008838 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80087f8:	695b      	ldr	r3, [r3, #20]
 80087fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80087fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008802:	d112      	bne.n	800882a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8008804:	2303      	movs	r3, #3
 8008806:	e011      	b.n	800882c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008808:	4b0b      	ldr	r3, [pc, #44]	@ (8008838 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800880a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800880e:	4a0a      	ldr	r2, [pc, #40]	@ (8008838 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008810:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008814:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8008818:	e007      	b.n	800882a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800881a:	4b07      	ldr	r3, [pc, #28]	@ (8008838 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8008822:	4a05      	ldr	r2, [pc, #20]	@ (8008838 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008824:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8008828:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800882a:	2300      	movs	r3, #0
}
 800882c:	4618      	mov	r0, r3
 800882e:	3714      	adds	r7, #20
 8008830:	46bd      	mov	sp, r7
 8008832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008836:	4770      	bx	lr
 8008838:	40007000 	.word	0x40007000
 800883c:	2000020c 	.word	0x2000020c
 8008840:	431bde83 	.word	0x431bde83

08008844 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8008844:	b480      	push	{r7}
 8008846:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8008848:	4b05      	ldr	r3, [pc, #20]	@ (8008860 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800884a:	689b      	ldr	r3, [r3, #8]
 800884c:	4a04      	ldr	r2, [pc, #16]	@ (8008860 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800884e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008852:	6093      	str	r3, [r2, #8]
}
 8008854:	bf00      	nop
 8008856:	46bd      	mov	sp, r7
 8008858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800885c:	4770      	bx	lr
 800885e:	bf00      	nop
 8008860:	40007000 	.word	0x40007000

08008864 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008864:	b580      	push	{r7, lr}
 8008866:	b088      	sub	sp, #32
 8008868:	af00      	add	r7, sp, #0
 800886a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	2b00      	cmp	r3, #0
 8008870:	d101      	bne.n	8008876 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008872:	2301      	movs	r3, #1
 8008874:	e2fe      	b.n	8008e74 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	f003 0301 	and.w	r3, r3, #1
 800887e:	2b00      	cmp	r3, #0
 8008880:	d075      	beq.n	800896e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008882:	4b97      	ldr	r3, [pc, #604]	@ (8008ae0 <HAL_RCC_OscConfig+0x27c>)
 8008884:	689b      	ldr	r3, [r3, #8]
 8008886:	f003 030c 	and.w	r3, r3, #12
 800888a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800888c:	4b94      	ldr	r3, [pc, #592]	@ (8008ae0 <HAL_RCC_OscConfig+0x27c>)
 800888e:	68db      	ldr	r3, [r3, #12]
 8008890:	f003 0303 	and.w	r3, r3, #3
 8008894:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8008896:	69bb      	ldr	r3, [r7, #24]
 8008898:	2b0c      	cmp	r3, #12
 800889a:	d102      	bne.n	80088a2 <HAL_RCC_OscConfig+0x3e>
 800889c:	697b      	ldr	r3, [r7, #20]
 800889e:	2b03      	cmp	r3, #3
 80088a0:	d002      	beq.n	80088a8 <HAL_RCC_OscConfig+0x44>
 80088a2:	69bb      	ldr	r3, [r7, #24]
 80088a4:	2b08      	cmp	r3, #8
 80088a6:	d10b      	bne.n	80088c0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80088a8:	4b8d      	ldr	r3, [pc, #564]	@ (8008ae0 <HAL_RCC_OscConfig+0x27c>)
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d05b      	beq.n	800896c <HAL_RCC_OscConfig+0x108>
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	685b      	ldr	r3, [r3, #4]
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d157      	bne.n	800896c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80088bc:	2301      	movs	r3, #1
 80088be:	e2d9      	b.n	8008e74 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	685b      	ldr	r3, [r3, #4]
 80088c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80088c8:	d106      	bne.n	80088d8 <HAL_RCC_OscConfig+0x74>
 80088ca:	4b85      	ldr	r3, [pc, #532]	@ (8008ae0 <HAL_RCC_OscConfig+0x27c>)
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	4a84      	ldr	r2, [pc, #528]	@ (8008ae0 <HAL_RCC_OscConfig+0x27c>)
 80088d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80088d4:	6013      	str	r3, [r2, #0]
 80088d6:	e01d      	b.n	8008914 <HAL_RCC_OscConfig+0xb0>
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	685b      	ldr	r3, [r3, #4]
 80088dc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80088e0:	d10c      	bne.n	80088fc <HAL_RCC_OscConfig+0x98>
 80088e2:	4b7f      	ldr	r3, [pc, #508]	@ (8008ae0 <HAL_RCC_OscConfig+0x27c>)
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	4a7e      	ldr	r2, [pc, #504]	@ (8008ae0 <HAL_RCC_OscConfig+0x27c>)
 80088e8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80088ec:	6013      	str	r3, [r2, #0]
 80088ee:	4b7c      	ldr	r3, [pc, #496]	@ (8008ae0 <HAL_RCC_OscConfig+0x27c>)
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	4a7b      	ldr	r2, [pc, #492]	@ (8008ae0 <HAL_RCC_OscConfig+0x27c>)
 80088f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80088f8:	6013      	str	r3, [r2, #0]
 80088fa:	e00b      	b.n	8008914 <HAL_RCC_OscConfig+0xb0>
 80088fc:	4b78      	ldr	r3, [pc, #480]	@ (8008ae0 <HAL_RCC_OscConfig+0x27c>)
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	4a77      	ldr	r2, [pc, #476]	@ (8008ae0 <HAL_RCC_OscConfig+0x27c>)
 8008902:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008906:	6013      	str	r3, [r2, #0]
 8008908:	4b75      	ldr	r3, [pc, #468]	@ (8008ae0 <HAL_RCC_OscConfig+0x27c>)
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	4a74      	ldr	r2, [pc, #464]	@ (8008ae0 <HAL_RCC_OscConfig+0x27c>)
 800890e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008912:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	685b      	ldr	r3, [r3, #4]
 8008918:	2b00      	cmp	r3, #0
 800891a:	d013      	beq.n	8008944 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800891c:	f7fd fe24 	bl	8006568 <HAL_GetTick>
 8008920:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008922:	e008      	b.n	8008936 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008924:	f7fd fe20 	bl	8006568 <HAL_GetTick>
 8008928:	4602      	mov	r2, r0
 800892a:	693b      	ldr	r3, [r7, #16]
 800892c:	1ad3      	subs	r3, r2, r3
 800892e:	2b64      	cmp	r3, #100	@ 0x64
 8008930:	d901      	bls.n	8008936 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008932:	2303      	movs	r3, #3
 8008934:	e29e      	b.n	8008e74 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008936:	4b6a      	ldr	r3, [pc, #424]	@ (8008ae0 <HAL_RCC_OscConfig+0x27c>)
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800893e:	2b00      	cmp	r3, #0
 8008940:	d0f0      	beq.n	8008924 <HAL_RCC_OscConfig+0xc0>
 8008942:	e014      	b.n	800896e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008944:	f7fd fe10 	bl	8006568 <HAL_GetTick>
 8008948:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800894a:	e008      	b.n	800895e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800894c:	f7fd fe0c 	bl	8006568 <HAL_GetTick>
 8008950:	4602      	mov	r2, r0
 8008952:	693b      	ldr	r3, [r7, #16]
 8008954:	1ad3      	subs	r3, r2, r3
 8008956:	2b64      	cmp	r3, #100	@ 0x64
 8008958:	d901      	bls.n	800895e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800895a:	2303      	movs	r3, #3
 800895c:	e28a      	b.n	8008e74 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800895e:	4b60      	ldr	r3, [pc, #384]	@ (8008ae0 <HAL_RCC_OscConfig+0x27c>)
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008966:	2b00      	cmp	r3, #0
 8008968:	d1f0      	bne.n	800894c <HAL_RCC_OscConfig+0xe8>
 800896a:	e000      	b.n	800896e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800896c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	f003 0302 	and.w	r3, r3, #2
 8008976:	2b00      	cmp	r3, #0
 8008978:	d075      	beq.n	8008a66 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800897a:	4b59      	ldr	r3, [pc, #356]	@ (8008ae0 <HAL_RCC_OscConfig+0x27c>)
 800897c:	689b      	ldr	r3, [r3, #8]
 800897e:	f003 030c 	and.w	r3, r3, #12
 8008982:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008984:	4b56      	ldr	r3, [pc, #344]	@ (8008ae0 <HAL_RCC_OscConfig+0x27c>)
 8008986:	68db      	ldr	r3, [r3, #12]
 8008988:	f003 0303 	and.w	r3, r3, #3
 800898c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800898e:	69bb      	ldr	r3, [r7, #24]
 8008990:	2b0c      	cmp	r3, #12
 8008992:	d102      	bne.n	800899a <HAL_RCC_OscConfig+0x136>
 8008994:	697b      	ldr	r3, [r7, #20]
 8008996:	2b02      	cmp	r3, #2
 8008998:	d002      	beq.n	80089a0 <HAL_RCC_OscConfig+0x13c>
 800899a:	69bb      	ldr	r3, [r7, #24]
 800899c:	2b04      	cmp	r3, #4
 800899e:	d11f      	bne.n	80089e0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80089a0:	4b4f      	ldr	r3, [pc, #316]	@ (8008ae0 <HAL_RCC_OscConfig+0x27c>)
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d005      	beq.n	80089b8 <HAL_RCC_OscConfig+0x154>
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	68db      	ldr	r3, [r3, #12]
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d101      	bne.n	80089b8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80089b4:	2301      	movs	r3, #1
 80089b6:	e25d      	b.n	8008e74 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80089b8:	4b49      	ldr	r3, [pc, #292]	@ (8008ae0 <HAL_RCC_OscConfig+0x27c>)
 80089ba:	685b      	ldr	r3, [r3, #4]
 80089bc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	691b      	ldr	r3, [r3, #16]
 80089c4:	061b      	lsls	r3, r3, #24
 80089c6:	4946      	ldr	r1, [pc, #280]	@ (8008ae0 <HAL_RCC_OscConfig+0x27c>)
 80089c8:	4313      	orrs	r3, r2
 80089ca:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80089cc:	4b45      	ldr	r3, [pc, #276]	@ (8008ae4 <HAL_RCC_OscConfig+0x280>)
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	4618      	mov	r0, r3
 80089d2:	f7fd fd7d 	bl	80064d0 <HAL_InitTick>
 80089d6:	4603      	mov	r3, r0
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d043      	beq.n	8008a64 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80089dc:	2301      	movs	r3, #1
 80089de:	e249      	b.n	8008e74 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	68db      	ldr	r3, [r3, #12]
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d023      	beq.n	8008a30 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80089e8:	4b3d      	ldr	r3, [pc, #244]	@ (8008ae0 <HAL_RCC_OscConfig+0x27c>)
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	4a3c      	ldr	r2, [pc, #240]	@ (8008ae0 <HAL_RCC_OscConfig+0x27c>)
 80089ee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80089f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80089f4:	f7fd fdb8 	bl	8006568 <HAL_GetTick>
 80089f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80089fa:	e008      	b.n	8008a0e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80089fc:	f7fd fdb4 	bl	8006568 <HAL_GetTick>
 8008a00:	4602      	mov	r2, r0
 8008a02:	693b      	ldr	r3, [r7, #16]
 8008a04:	1ad3      	subs	r3, r2, r3
 8008a06:	2b02      	cmp	r3, #2
 8008a08:	d901      	bls.n	8008a0e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8008a0a:	2303      	movs	r3, #3
 8008a0c:	e232      	b.n	8008e74 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008a0e:	4b34      	ldr	r3, [pc, #208]	@ (8008ae0 <HAL_RCC_OscConfig+0x27c>)
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d0f0      	beq.n	80089fc <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008a1a:	4b31      	ldr	r3, [pc, #196]	@ (8008ae0 <HAL_RCC_OscConfig+0x27c>)
 8008a1c:	685b      	ldr	r3, [r3, #4]
 8008a1e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	691b      	ldr	r3, [r3, #16]
 8008a26:	061b      	lsls	r3, r3, #24
 8008a28:	492d      	ldr	r1, [pc, #180]	@ (8008ae0 <HAL_RCC_OscConfig+0x27c>)
 8008a2a:	4313      	orrs	r3, r2
 8008a2c:	604b      	str	r3, [r1, #4]
 8008a2e:	e01a      	b.n	8008a66 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008a30:	4b2b      	ldr	r3, [pc, #172]	@ (8008ae0 <HAL_RCC_OscConfig+0x27c>)
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	4a2a      	ldr	r2, [pc, #168]	@ (8008ae0 <HAL_RCC_OscConfig+0x27c>)
 8008a36:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008a3a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a3c:	f7fd fd94 	bl	8006568 <HAL_GetTick>
 8008a40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008a42:	e008      	b.n	8008a56 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008a44:	f7fd fd90 	bl	8006568 <HAL_GetTick>
 8008a48:	4602      	mov	r2, r0
 8008a4a:	693b      	ldr	r3, [r7, #16]
 8008a4c:	1ad3      	subs	r3, r2, r3
 8008a4e:	2b02      	cmp	r3, #2
 8008a50:	d901      	bls.n	8008a56 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8008a52:	2303      	movs	r3, #3
 8008a54:	e20e      	b.n	8008e74 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008a56:	4b22      	ldr	r3, [pc, #136]	@ (8008ae0 <HAL_RCC_OscConfig+0x27c>)
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d1f0      	bne.n	8008a44 <HAL_RCC_OscConfig+0x1e0>
 8008a62:	e000      	b.n	8008a66 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008a64:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	f003 0308 	and.w	r3, r3, #8
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d041      	beq.n	8008af6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	695b      	ldr	r3, [r3, #20]
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d01c      	beq.n	8008ab4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008a7a:	4b19      	ldr	r3, [pc, #100]	@ (8008ae0 <HAL_RCC_OscConfig+0x27c>)
 8008a7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008a80:	4a17      	ldr	r2, [pc, #92]	@ (8008ae0 <HAL_RCC_OscConfig+0x27c>)
 8008a82:	f043 0301 	orr.w	r3, r3, #1
 8008a86:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008a8a:	f7fd fd6d 	bl	8006568 <HAL_GetTick>
 8008a8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008a90:	e008      	b.n	8008aa4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008a92:	f7fd fd69 	bl	8006568 <HAL_GetTick>
 8008a96:	4602      	mov	r2, r0
 8008a98:	693b      	ldr	r3, [r7, #16]
 8008a9a:	1ad3      	subs	r3, r2, r3
 8008a9c:	2b02      	cmp	r3, #2
 8008a9e:	d901      	bls.n	8008aa4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8008aa0:	2303      	movs	r3, #3
 8008aa2:	e1e7      	b.n	8008e74 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008aa4:	4b0e      	ldr	r3, [pc, #56]	@ (8008ae0 <HAL_RCC_OscConfig+0x27c>)
 8008aa6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008aaa:	f003 0302 	and.w	r3, r3, #2
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d0ef      	beq.n	8008a92 <HAL_RCC_OscConfig+0x22e>
 8008ab2:	e020      	b.n	8008af6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008ab4:	4b0a      	ldr	r3, [pc, #40]	@ (8008ae0 <HAL_RCC_OscConfig+0x27c>)
 8008ab6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008aba:	4a09      	ldr	r2, [pc, #36]	@ (8008ae0 <HAL_RCC_OscConfig+0x27c>)
 8008abc:	f023 0301 	bic.w	r3, r3, #1
 8008ac0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008ac4:	f7fd fd50 	bl	8006568 <HAL_GetTick>
 8008ac8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008aca:	e00d      	b.n	8008ae8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008acc:	f7fd fd4c 	bl	8006568 <HAL_GetTick>
 8008ad0:	4602      	mov	r2, r0
 8008ad2:	693b      	ldr	r3, [r7, #16]
 8008ad4:	1ad3      	subs	r3, r2, r3
 8008ad6:	2b02      	cmp	r3, #2
 8008ad8:	d906      	bls.n	8008ae8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8008ada:	2303      	movs	r3, #3
 8008adc:	e1ca      	b.n	8008e74 <HAL_RCC_OscConfig+0x610>
 8008ade:	bf00      	nop
 8008ae0:	40021000 	.word	0x40021000
 8008ae4:	20000210 	.word	0x20000210
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008ae8:	4b8c      	ldr	r3, [pc, #560]	@ (8008d1c <HAL_RCC_OscConfig+0x4b8>)
 8008aea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008aee:	f003 0302 	and.w	r3, r3, #2
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d1ea      	bne.n	8008acc <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	f003 0304 	and.w	r3, r3, #4
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	f000 80a6 	beq.w	8008c50 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008b04:	2300      	movs	r3, #0
 8008b06:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8008b08:	4b84      	ldr	r3, [pc, #528]	@ (8008d1c <HAL_RCC_OscConfig+0x4b8>)
 8008b0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008b0c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d101      	bne.n	8008b18 <HAL_RCC_OscConfig+0x2b4>
 8008b14:	2301      	movs	r3, #1
 8008b16:	e000      	b.n	8008b1a <HAL_RCC_OscConfig+0x2b6>
 8008b18:	2300      	movs	r3, #0
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d00d      	beq.n	8008b3a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008b1e:	4b7f      	ldr	r3, [pc, #508]	@ (8008d1c <HAL_RCC_OscConfig+0x4b8>)
 8008b20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008b22:	4a7e      	ldr	r2, [pc, #504]	@ (8008d1c <HAL_RCC_OscConfig+0x4b8>)
 8008b24:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008b28:	6593      	str	r3, [r2, #88]	@ 0x58
 8008b2a:	4b7c      	ldr	r3, [pc, #496]	@ (8008d1c <HAL_RCC_OscConfig+0x4b8>)
 8008b2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008b2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008b32:	60fb      	str	r3, [r7, #12]
 8008b34:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8008b36:	2301      	movs	r3, #1
 8008b38:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008b3a:	4b79      	ldr	r3, [pc, #484]	@ (8008d20 <HAL_RCC_OscConfig+0x4bc>)
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d118      	bne.n	8008b78 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008b46:	4b76      	ldr	r3, [pc, #472]	@ (8008d20 <HAL_RCC_OscConfig+0x4bc>)
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	4a75      	ldr	r2, [pc, #468]	@ (8008d20 <HAL_RCC_OscConfig+0x4bc>)
 8008b4c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008b50:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008b52:	f7fd fd09 	bl	8006568 <HAL_GetTick>
 8008b56:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008b58:	e008      	b.n	8008b6c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008b5a:	f7fd fd05 	bl	8006568 <HAL_GetTick>
 8008b5e:	4602      	mov	r2, r0
 8008b60:	693b      	ldr	r3, [r7, #16]
 8008b62:	1ad3      	subs	r3, r2, r3
 8008b64:	2b02      	cmp	r3, #2
 8008b66:	d901      	bls.n	8008b6c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8008b68:	2303      	movs	r3, #3
 8008b6a:	e183      	b.n	8008e74 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008b6c:	4b6c      	ldr	r3, [pc, #432]	@ (8008d20 <HAL_RCC_OscConfig+0x4bc>)
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d0f0      	beq.n	8008b5a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	689b      	ldr	r3, [r3, #8]
 8008b7c:	2b01      	cmp	r3, #1
 8008b7e:	d108      	bne.n	8008b92 <HAL_RCC_OscConfig+0x32e>
 8008b80:	4b66      	ldr	r3, [pc, #408]	@ (8008d1c <HAL_RCC_OscConfig+0x4b8>)
 8008b82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008b86:	4a65      	ldr	r2, [pc, #404]	@ (8008d1c <HAL_RCC_OscConfig+0x4b8>)
 8008b88:	f043 0301 	orr.w	r3, r3, #1
 8008b8c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008b90:	e024      	b.n	8008bdc <HAL_RCC_OscConfig+0x378>
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	689b      	ldr	r3, [r3, #8]
 8008b96:	2b05      	cmp	r3, #5
 8008b98:	d110      	bne.n	8008bbc <HAL_RCC_OscConfig+0x358>
 8008b9a:	4b60      	ldr	r3, [pc, #384]	@ (8008d1c <HAL_RCC_OscConfig+0x4b8>)
 8008b9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008ba0:	4a5e      	ldr	r2, [pc, #376]	@ (8008d1c <HAL_RCC_OscConfig+0x4b8>)
 8008ba2:	f043 0304 	orr.w	r3, r3, #4
 8008ba6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008baa:	4b5c      	ldr	r3, [pc, #368]	@ (8008d1c <HAL_RCC_OscConfig+0x4b8>)
 8008bac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008bb0:	4a5a      	ldr	r2, [pc, #360]	@ (8008d1c <HAL_RCC_OscConfig+0x4b8>)
 8008bb2:	f043 0301 	orr.w	r3, r3, #1
 8008bb6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008bba:	e00f      	b.n	8008bdc <HAL_RCC_OscConfig+0x378>
 8008bbc:	4b57      	ldr	r3, [pc, #348]	@ (8008d1c <HAL_RCC_OscConfig+0x4b8>)
 8008bbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008bc2:	4a56      	ldr	r2, [pc, #344]	@ (8008d1c <HAL_RCC_OscConfig+0x4b8>)
 8008bc4:	f023 0301 	bic.w	r3, r3, #1
 8008bc8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008bcc:	4b53      	ldr	r3, [pc, #332]	@ (8008d1c <HAL_RCC_OscConfig+0x4b8>)
 8008bce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008bd2:	4a52      	ldr	r2, [pc, #328]	@ (8008d1c <HAL_RCC_OscConfig+0x4b8>)
 8008bd4:	f023 0304 	bic.w	r3, r3, #4
 8008bd8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	689b      	ldr	r3, [r3, #8]
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d016      	beq.n	8008c12 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008be4:	f7fd fcc0 	bl	8006568 <HAL_GetTick>
 8008be8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008bea:	e00a      	b.n	8008c02 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008bec:	f7fd fcbc 	bl	8006568 <HAL_GetTick>
 8008bf0:	4602      	mov	r2, r0
 8008bf2:	693b      	ldr	r3, [r7, #16]
 8008bf4:	1ad3      	subs	r3, r2, r3
 8008bf6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008bfa:	4293      	cmp	r3, r2
 8008bfc:	d901      	bls.n	8008c02 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8008bfe:	2303      	movs	r3, #3
 8008c00:	e138      	b.n	8008e74 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008c02:	4b46      	ldr	r3, [pc, #280]	@ (8008d1c <HAL_RCC_OscConfig+0x4b8>)
 8008c04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008c08:	f003 0302 	and.w	r3, r3, #2
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d0ed      	beq.n	8008bec <HAL_RCC_OscConfig+0x388>
 8008c10:	e015      	b.n	8008c3e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008c12:	f7fd fca9 	bl	8006568 <HAL_GetTick>
 8008c16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008c18:	e00a      	b.n	8008c30 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008c1a:	f7fd fca5 	bl	8006568 <HAL_GetTick>
 8008c1e:	4602      	mov	r2, r0
 8008c20:	693b      	ldr	r3, [r7, #16]
 8008c22:	1ad3      	subs	r3, r2, r3
 8008c24:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008c28:	4293      	cmp	r3, r2
 8008c2a:	d901      	bls.n	8008c30 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8008c2c:	2303      	movs	r3, #3
 8008c2e:	e121      	b.n	8008e74 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008c30:	4b3a      	ldr	r3, [pc, #232]	@ (8008d1c <HAL_RCC_OscConfig+0x4b8>)
 8008c32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008c36:	f003 0302 	and.w	r3, r3, #2
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d1ed      	bne.n	8008c1a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008c3e:	7ffb      	ldrb	r3, [r7, #31]
 8008c40:	2b01      	cmp	r3, #1
 8008c42:	d105      	bne.n	8008c50 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008c44:	4b35      	ldr	r3, [pc, #212]	@ (8008d1c <HAL_RCC_OscConfig+0x4b8>)
 8008c46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008c48:	4a34      	ldr	r2, [pc, #208]	@ (8008d1c <HAL_RCC_OscConfig+0x4b8>)
 8008c4a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008c4e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	f003 0320 	and.w	r3, r3, #32
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d03c      	beq.n	8008cd6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	699b      	ldr	r3, [r3, #24]
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d01c      	beq.n	8008c9e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008c64:	4b2d      	ldr	r3, [pc, #180]	@ (8008d1c <HAL_RCC_OscConfig+0x4b8>)
 8008c66:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008c6a:	4a2c      	ldr	r2, [pc, #176]	@ (8008d1c <HAL_RCC_OscConfig+0x4b8>)
 8008c6c:	f043 0301 	orr.w	r3, r3, #1
 8008c70:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008c74:	f7fd fc78 	bl	8006568 <HAL_GetTick>
 8008c78:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8008c7a:	e008      	b.n	8008c8e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008c7c:	f7fd fc74 	bl	8006568 <HAL_GetTick>
 8008c80:	4602      	mov	r2, r0
 8008c82:	693b      	ldr	r3, [r7, #16]
 8008c84:	1ad3      	subs	r3, r2, r3
 8008c86:	2b02      	cmp	r3, #2
 8008c88:	d901      	bls.n	8008c8e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8008c8a:	2303      	movs	r3, #3
 8008c8c:	e0f2      	b.n	8008e74 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8008c8e:	4b23      	ldr	r3, [pc, #140]	@ (8008d1c <HAL_RCC_OscConfig+0x4b8>)
 8008c90:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008c94:	f003 0302 	and.w	r3, r3, #2
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d0ef      	beq.n	8008c7c <HAL_RCC_OscConfig+0x418>
 8008c9c:	e01b      	b.n	8008cd6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008c9e:	4b1f      	ldr	r3, [pc, #124]	@ (8008d1c <HAL_RCC_OscConfig+0x4b8>)
 8008ca0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008ca4:	4a1d      	ldr	r2, [pc, #116]	@ (8008d1c <HAL_RCC_OscConfig+0x4b8>)
 8008ca6:	f023 0301 	bic.w	r3, r3, #1
 8008caa:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008cae:	f7fd fc5b 	bl	8006568 <HAL_GetTick>
 8008cb2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8008cb4:	e008      	b.n	8008cc8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008cb6:	f7fd fc57 	bl	8006568 <HAL_GetTick>
 8008cba:	4602      	mov	r2, r0
 8008cbc:	693b      	ldr	r3, [r7, #16]
 8008cbe:	1ad3      	subs	r3, r2, r3
 8008cc0:	2b02      	cmp	r3, #2
 8008cc2:	d901      	bls.n	8008cc8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8008cc4:	2303      	movs	r3, #3
 8008cc6:	e0d5      	b.n	8008e74 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8008cc8:	4b14      	ldr	r3, [pc, #80]	@ (8008d1c <HAL_RCC_OscConfig+0x4b8>)
 8008cca:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008cce:	f003 0302 	and.w	r3, r3, #2
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d1ef      	bne.n	8008cb6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	69db      	ldr	r3, [r3, #28]
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	f000 80c9 	beq.w	8008e72 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008ce0:	4b0e      	ldr	r3, [pc, #56]	@ (8008d1c <HAL_RCC_OscConfig+0x4b8>)
 8008ce2:	689b      	ldr	r3, [r3, #8]
 8008ce4:	f003 030c 	and.w	r3, r3, #12
 8008ce8:	2b0c      	cmp	r3, #12
 8008cea:	f000 8083 	beq.w	8008df4 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	69db      	ldr	r3, [r3, #28]
 8008cf2:	2b02      	cmp	r3, #2
 8008cf4:	d15e      	bne.n	8008db4 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008cf6:	4b09      	ldr	r3, [pc, #36]	@ (8008d1c <HAL_RCC_OscConfig+0x4b8>)
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	4a08      	ldr	r2, [pc, #32]	@ (8008d1c <HAL_RCC_OscConfig+0x4b8>)
 8008cfc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008d00:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d02:	f7fd fc31 	bl	8006568 <HAL_GetTick>
 8008d06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008d08:	e00c      	b.n	8008d24 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008d0a:	f7fd fc2d 	bl	8006568 <HAL_GetTick>
 8008d0e:	4602      	mov	r2, r0
 8008d10:	693b      	ldr	r3, [r7, #16]
 8008d12:	1ad3      	subs	r3, r2, r3
 8008d14:	2b02      	cmp	r3, #2
 8008d16:	d905      	bls.n	8008d24 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8008d18:	2303      	movs	r3, #3
 8008d1a:	e0ab      	b.n	8008e74 <HAL_RCC_OscConfig+0x610>
 8008d1c:	40021000 	.word	0x40021000
 8008d20:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008d24:	4b55      	ldr	r3, [pc, #340]	@ (8008e7c <HAL_RCC_OscConfig+0x618>)
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d1ec      	bne.n	8008d0a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008d30:	4b52      	ldr	r3, [pc, #328]	@ (8008e7c <HAL_RCC_OscConfig+0x618>)
 8008d32:	68da      	ldr	r2, [r3, #12]
 8008d34:	4b52      	ldr	r3, [pc, #328]	@ (8008e80 <HAL_RCC_OscConfig+0x61c>)
 8008d36:	4013      	ands	r3, r2
 8008d38:	687a      	ldr	r2, [r7, #4]
 8008d3a:	6a11      	ldr	r1, [r2, #32]
 8008d3c:	687a      	ldr	r2, [r7, #4]
 8008d3e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8008d40:	3a01      	subs	r2, #1
 8008d42:	0112      	lsls	r2, r2, #4
 8008d44:	4311      	orrs	r1, r2
 8008d46:	687a      	ldr	r2, [r7, #4]
 8008d48:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8008d4a:	0212      	lsls	r2, r2, #8
 8008d4c:	4311      	orrs	r1, r2
 8008d4e:	687a      	ldr	r2, [r7, #4]
 8008d50:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8008d52:	0852      	lsrs	r2, r2, #1
 8008d54:	3a01      	subs	r2, #1
 8008d56:	0552      	lsls	r2, r2, #21
 8008d58:	4311      	orrs	r1, r2
 8008d5a:	687a      	ldr	r2, [r7, #4]
 8008d5c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8008d5e:	0852      	lsrs	r2, r2, #1
 8008d60:	3a01      	subs	r2, #1
 8008d62:	0652      	lsls	r2, r2, #25
 8008d64:	4311      	orrs	r1, r2
 8008d66:	687a      	ldr	r2, [r7, #4]
 8008d68:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8008d6a:	06d2      	lsls	r2, r2, #27
 8008d6c:	430a      	orrs	r2, r1
 8008d6e:	4943      	ldr	r1, [pc, #268]	@ (8008e7c <HAL_RCC_OscConfig+0x618>)
 8008d70:	4313      	orrs	r3, r2
 8008d72:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008d74:	4b41      	ldr	r3, [pc, #260]	@ (8008e7c <HAL_RCC_OscConfig+0x618>)
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	4a40      	ldr	r2, [pc, #256]	@ (8008e7c <HAL_RCC_OscConfig+0x618>)
 8008d7a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008d7e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008d80:	4b3e      	ldr	r3, [pc, #248]	@ (8008e7c <HAL_RCC_OscConfig+0x618>)
 8008d82:	68db      	ldr	r3, [r3, #12]
 8008d84:	4a3d      	ldr	r2, [pc, #244]	@ (8008e7c <HAL_RCC_OscConfig+0x618>)
 8008d86:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008d8a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d8c:	f7fd fbec 	bl	8006568 <HAL_GetTick>
 8008d90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008d92:	e008      	b.n	8008da6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008d94:	f7fd fbe8 	bl	8006568 <HAL_GetTick>
 8008d98:	4602      	mov	r2, r0
 8008d9a:	693b      	ldr	r3, [r7, #16]
 8008d9c:	1ad3      	subs	r3, r2, r3
 8008d9e:	2b02      	cmp	r3, #2
 8008da0:	d901      	bls.n	8008da6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8008da2:	2303      	movs	r3, #3
 8008da4:	e066      	b.n	8008e74 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008da6:	4b35      	ldr	r3, [pc, #212]	@ (8008e7c <HAL_RCC_OscConfig+0x618>)
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d0f0      	beq.n	8008d94 <HAL_RCC_OscConfig+0x530>
 8008db2:	e05e      	b.n	8008e72 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008db4:	4b31      	ldr	r3, [pc, #196]	@ (8008e7c <HAL_RCC_OscConfig+0x618>)
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	4a30      	ldr	r2, [pc, #192]	@ (8008e7c <HAL_RCC_OscConfig+0x618>)
 8008dba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008dbe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008dc0:	f7fd fbd2 	bl	8006568 <HAL_GetTick>
 8008dc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008dc6:	e008      	b.n	8008dda <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008dc8:	f7fd fbce 	bl	8006568 <HAL_GetTick>
 8008dcc:	4602      	mov	r2, r0
 8008dce:	693b      	ldr	r3, [r7, #16]
 8008dd0:	1ad3      	subs	r3, r2, r3
 8008dd2:	2b02      	cmp	r3, #2
 8008dd4:	d901      	bls.n	8008dda <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8008dd6:	2303      	movs	r3, #3
 8008dd8:	e04c      	b.n	8008e74 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008dda:	4b28      	ldr	r3, [pc, #160]	@ (8008e7c <HAL_RCC_OscConfig+0x618>)
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d1f0      	bne.n	8008dc8 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8008de6:	4b25      	ldr	r3, [pc, #148]	@ (8008e7c <HAL_RCC_OscConfig+0x618>)
 8008de8:	68da      	ldr	r2, [r3, #12]
 8008dea:	4924      	ldr	r1, [pc, #144]	@ (8008e7c <HAL_RCC_OscConfig+0x618>)
 8008dec:	4b25      	ldr	r3, [pc, #148]	@ (8008e84 <HAL_RCC_OscConfig+0x620>)
 8008dee:	4013      	ands	r3, r2
 8008df0:	60cb      	str	r3, [r1, #12]
 8008df2:	e03e      	b.n	8008e72 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	69db      	ldr	r3, [r3, #28]
 8008df8:	2b01      	cmp	r3, #1
 8008dfa:	d101      	bne.n	8008e00 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8008dfc:	2301      	movs	r3, #1
 8008dfe:	e039      	b.n	8008e74 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8008e00:	4b1e      	ldr	r3, [pc, #120]	@ (8008e7c <HAL_RCC_OscConfig+0x618>)
 8008e02:	68db      	ldr	r3, [r3, #12]
 8008e04:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008e06:	697b      	ldr	r3, [r7, #20]
 8008e08:	f003 0203 	and.w	r2, r3, #3
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	6a1b      	ldr	r3, [r3, #32]
 8008e10:	429a      	cmp	r2, r3
 8008e12:	d12c      	bne.n	8008e6e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008e14:	697b      	ldr	r3, [r7, #20]
 8008e16:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e1e:	3b01      	subs	r3, #1
 8008e20:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008e22:	429a      	cmp	r2, r3
 8008e24:	d123      	bne.n	8008e6e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8008e26:	697b      	ldr	r3, [r7, #20]
 8008e28:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e30:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008e32:	429a      	cmp	r2, r3
 8008e34:	d11b      	bne.n	8008e6e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8008e36:	697b      	ldr	r3, [r7, #20]
 8008e38:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e40:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8008e42:	429a      	cmp	r2, r3
 8008e44:	d113      	bne.n	8008e6e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008e46:	697b      	ldr	r3, [r7, #20]
 8008e48:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e50:	085b      	lsrs	r3, r3, #1
 8008e52:	3b01      	subs	r3, #1
 8008e54:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8008e56:	429a      	cmp	r2, r3
 8008e58:	d109      	bne.n	8008e6e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8008e5a:	697b      	ldr	r3, [r7, #20]
 8008e5c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008e64:	085b      	lsrs	r3, r3, #1
 8008e66:	3b01      	subs	r3, #1
 8008e68:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008e6a:	429a      	cmp	r2, r3
 8008e6c:	d001      	beq.n	8008e72 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8008e6e:	2301      	movs	r3, #1
 8008e70:	e000      	b.n	8008e74 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8008e72:	2300      	movs	r3, #0
}
 8008e74:	4618      	mov	r0, r3
 8008e76:	3720      	adds	r7, #32
 8008e78:	46bd      	mov	sp, r7
 8008e7a:	bd80      	pop	{r7, pc}
 8008e7c:	40021000 	.word	0x40021000
 8008e80:	019f800c 	.word	0x019f800c
 8008e84:	feeefffc 	.word	0xfeeefffc

08008e88 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008e88:	b580      	push	{r7, lr}
 8008e8a:	b086      	sub	sp, #24
 8008e8c:	af00      	add	r7, sp, #0
 8008e8e:	6078      	str	r0, [r7, #4]
 8008e90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8008e92:	2300      	movs	r3, #0
 8008e94:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d101      	bne.n	8008ea0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8008e9c:	2301      	movs	r3, #1
 8008e9e:	e11e      	b.n	80090de <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008ea0:	4b91      	ldr	r3, [pc, #580]	@ (80090e8 <HAL_RCC_ClockConfig+0x260>)
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	f003 030f 	and.w	r3, r3, #15
 8008ea8:	683a      	ldr	r2, [r7, #0]
 8008eaa:	429a      	cmp	r2, r3
 8008eac:	d910      	bls.n	8008ed0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008eae:	4b8e      	ldr	r3, [pc, #568]	@ (80090e8 <HAL_RCC_ClockConfig+0x260>)
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	f023 020f 	bic.w	r2, r3, #15
 8008eb6:	498c      	ldr	r1, [pc, #560]	@ (80090e8 <HAL_RCC_ClockConfig+0x260>)
 8008eb8:	683b      	ldr	r3, [r7, #0]
 8008eba:	4313      	orrs	r3, r2
 8008ebc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008ebe:	4b8a      	ldr	r3, [pc, #552]	@ (80090e8 <HAL_RCC_ClockConfig+0x260>)
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	f003 030f 	and.w	r3, r3, #15
 8008ec6:	683a      	ldr	r2, [r7, #0]
 8008ec8:	429a      	cmp	r2, r3
 8008eca:	d001      	beq.n	8008ed0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8008ecc:	2301      	movs	r3, #1
 8008ece:	e106      	b.n	80090de <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	f003 0301 	and.w	r3, r3, #1
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d073      	beq.n	8008fc4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	685b      	ldr	r3, [r3, #4]
 8008ee0:	2b03      	cmp	r3, #3
 8008ee2:	d129      	bne.n	8008f38 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008ee4:	4b81      	ldr	r3, [pc, #516]	@ (80090ec <HAL_RCC_ClockConfig+0x264>)
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d101      	bne.n	8008ef4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8008ef0:	2301      	movs	r3, #1
 8008ef2:	e0f4      	b.n	80090de <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8008ef4:	f000 f99e 	bl	8009234 <RCC_GetSysClockFreqFromPLLSource>
 8008ef8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8008efa:	693b      	ldr	r3, [r7, #16]
 8008efc:	4a7c      	ldr	r2, [pc, #496]	@ (80090f0 <HAL_RCC_ClockConfig+0x268>)
 8008efe:	4293      	cmp	r3, r2
 8008f00:	d93f      	bls.n	8008f82 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8008f02:	4b7a      	ldr	r3, [pc, #488]	@ (80090ec <HAL_RCC_ClockConfig+0x264>)
 8008f04:	689b      	ldr	r3, [r3, #8]
 8008f06:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d009      	beq.n	8008f22 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d033      	beq.n	8008f82 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d12f      	bne.n	8008f82 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8008f22:	4b72      	ldr	r3, [pc, #456]	@ (80090ec <HAL_RCC_ClockConfig+0x264>)
 8008f24:	689b      	ldr	r3, [r3, #8]
 8008f26:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008f2a:	4a70      	ldr	r2, [pc, #448]	@ (80090ec <HAL_RCC_ClockConfig+0x264>)
 8008f2c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008f30:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8008f32:	2380      	movs	r3, #128	@ 0x80
 8008f34:	617b      	str	r3, [r7, #20]
 8008f36:	e024      	b.n	8008f82 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	685b      	ldr	r3, [r3, #4]
 8008f3c:	2b02      	cmp	r3, #2
 8008f3e:	d107      	bne.n	8008f50 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008f40:	4b6a      	ldr	r3, [pc, #424]	@ (80090ec <HAL_RCC_ClockConfig+0x264>)
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d109      	bne.n	8008f60 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8008f4c:	2301      	movs	r3, #1
 8008f4e:	e0c6      	b.n	80090de <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008f50:	4b66      	ldr	r3, [pc, #408]	@ (80090ec <HAL_RCC_ClockConfig+0x264>)
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d101      	bne.n	8008f60 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8008f5c:	2301      	movs	r3, #1
 8008f5e:	e0be      	b.n	80090de <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8008f60:	f000 f8ce 	bl	8009100 <HAL_RCC_GetSysClockFreq>
 8008f64:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8008f66:	693b      	ldr	r3, [r7, #16]
 8008f68:	4a61      	ldr	r2, [pc, #388]	@ (80090f0 <HAL_RCC_ClockConfig+0x268>)
 8008f6a:	4293      	cmp	r3, r2
 8008f6c:	d909      	bls.n	8008f82 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8008f6e:	4b5f      	ldr	r3, [pc, #380]	@ (80090ec <HAL_RCC_ClockConfig+0x264>)
 8008f70:	689b      	ldr	r3, [r3, #8]
 8008f72:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008f76:	4a5d      	ldr	r2, [pc, #372]	@ (80090ec <HAL_RCC_ClockConfig+0x264>)
 8008f78:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008f7c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8008f7e:	2380      	movs	r3, #128	@ 0x80
 8008f80:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008f82:	4b5a      	ldr	r3, [pc, #360]	@ (80090ec <HAL_RCC_ClockConfig+0x264>)
 8008f84:	689b      	ldr	r3, [r3, #8]
 8008f86:	f023 0203 	bic.w	r2, r3, #3
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	685b      	ldr	r3, [r3, #4]
 8008f8e:	4957      	ldr	r1, [pc, #348]	@ (80090ec <HAL_RCC_ClockConfig+0x264>)
 8008f90:	4313      	orrs	r3, r2
 8008f92:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008f94:	f7fd fae8 	bl	8006568 <HAL_GetTick>
 8008f98:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008f9a:	e00a      	b.n	8008fb2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008f9c:	f7fd fae4 	bl	8006568 <HAL_GetTick>
 8008fa0:	4602      	mov	r2, r0
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	1ad3      	subs	r3, r2, r3
 8008fa6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008faa:	4293      	cmp	r3, r2
 8008fac:	d901      	bls.n	8008fb2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8008fae:	2303      	movs	r3, #3
 8008fb0:	e095      	b.n	80090de <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008fb2:	4b4e      	ldr	r3, [pc, #312]	@ (80090ec <HAL_RCC_ClockConfig+0x264>)
 8008fb4:	689b      	ldr	r3, [r3, #8]
 8008fb6:	f003 020c 	and.w	r2, r3, #12
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	685b      	ldr	r3, [r3, #4]
 8008fbe:	009b      	lsls	r3, r3, #2
 8008fc0:	429a      	cmp	r2, r3
 8008fc2:	d1eb      	bne.n	8008f9c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	f003 0302 	and.w	r3, r3, #2
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d023      	beq.n	8009018 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	f003 0304 	and.w	r3, r3, #4
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d005      	beq.n	8008fe8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008fdc:	4b43      	ldr	r3, [pc, #268]	@ (80090ec <HAL_RCC_ClockConfig+0x264>)
 8008fde:	689b      	ldr	r3, [r3, #8]
 8008fe0:	4a42      	ldr	r2, [pc, #264]	@ (80090ec <HAL_RCC_ClockConfig+0x264>)
 8008fe2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8008fe6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	f003 0308 	and.w	r3, r3, #8
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d007      	beq.n	8009004 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8008ff4:	4b3d      	ldr	r3, [pc, #244]	@ (80090ec <HAL_RCC_ClockConfig+0x264>)
 8008ff6:	689b      	ldr	r3, [r3, #8]
 8008ff8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8008ffc:	4a3b      	ldr	r2, [pc, #236]	@ (80090ec <HAL_RCC_ClockConfig+0x264>)
 8008ffe:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8009002:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009004:	4b39      	ldr	r3, [pc, #228]	@ (80090ec <HAL_RCC_ClockConfig+0x264>)
 8009006:	689b      	ldr	r3, [r3, #8]
 8009008:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	689b      	ldr	r3, [r3, #8]
 8009010:	4936      	ldr	r1, [pc, #216]	@ (80090ec <HAL_RCC_ClockConfig+0x264>)
 8009012:	4313      	orrs	r3, r2
 8009014:	608b      	str	r3, [r1, #8]
 8009016:	e008      	b.n	800902a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8009018:	697b      	ldr	r3, [r7, #20]
 800901a:	2b80      	cmp	r3, #128	@ 0x80
 800901c:	d105      	bne.n	800902a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800901e:	4b33      	ldr	r3, [pc, #204]	@ (80090ec <HAL_RCC_ClockConfig+0x264>)
 8009020:	689b      	ldr	r3, [r3, #8]
 8009022:	4a32      	ldr	r2, [pc, #200]	@ (80090ec <HAL_RCC_ClockConfig+0x264>)
 8009024:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009028:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800902a:	4b2f      	ldr	r3, [pc, #188]	@ (80090e8 <HAL_RCC_ClockConfig+0x260>)
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	f003 030f 	and.w	r3, r3, #15
 8009032:	683a      	ldr	r2, [r7, #0]
 8009034:	429a      	cmp	r2, r3
 8009036:	d21d      	bcs.n	8009074 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009038:	4b2b      	ldr	r3, [pc, #172]	@ (80090e8 <HAL_RCC_ClockConfig+0x260>)
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	f023 020f 	bic.w	r2, r3, #15
 8009040:	4929      	ldr	r1, [pc, #164]	@ (80090e8 <HAL_RCC_ClockConfig+0x260>)
 8009042:	683b      	ldr	r3, [r7, #0]
 8009044:	4313      	orrs	r3, r2
 8009046:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8009048:	f7fd fa8e 	bl	8006568 <HAL_GetTick>
 800904c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800904e:	e00a      	b.n	8009066 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009050:	f7fd fa8a 	bl	8006568 <HAL_GetTick>
 8009054:	4602      	mov	r2, r0
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	1ad3      	subs	r3, r2, r3
 800905a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800905e:	4293      	cmp	r3, r2
 8009060:	d901      	bls.n	8009066 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8009062:	2303      	movs	r3, #3
 8009064:	e03b      	b.n	80090de <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009066:	4b20      	ldr	r3, [pc, #128]	@ (80090e8 <HAL_RCC_ClockConfig+0x260>)
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	f003 030f 	and.w	r3, r3, #15
 800906e:	683a      	ldr	r2, [r7, #0]
 8009070:	429a      	cmp	r2, r3
 8009072:	d1ed      	bne.n	8009050 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	f003 0304 	and.w	r3, r3, #4
 800907c:	2b00      	cmp	r3, #0
 800907e:	d008      	beq.n	8009092 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009080:	4b1a      	ldr	r3, [pc, #104]	@ (80090ec <HAL_RCC_ClockConfig+0x264>)
 8009082:	689b      	ldr	r3, [r3, #8]
 8009084:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	68db      	ldr	r3, [r3, #12]
 800908c:	4917      	ldr	r1, [pc, #92]	@ (80090ec <HAL_RCC_ClockConfig+0x264>)
 800908e:	4313      	orrs	r3, r2
 8009090:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	f003 0308 	and.w	r3, r3, #8
 800909a:	2b00      	cmp	r3, #0
 800909c:	d009      	beq.n	80090b2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800909e:	4b13      	ldr	r3, [pc, #76]	@ (80090ec <HAL_RCC_ClockConfig+0x264>)
 80090a0:	689b      	ldr	r3, [r3, #8]
 80090a2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	691b      	ldr	r3, [r3, #16]
 80090aa:	00db      	lsls	r3, r3, #3
 80090ac:	490f      	ldr	r1, [pc, #60]	@ (80090ec <HAL_RCC_ClockConfig+0x264>)
 80090ae:	4313      	orrs	r3, r2
 80090b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80090b2:	f000 f825 	bl	8009100 <HAL_RCC_GetSysClockFreq>
 80090b6:	4602      	mov	r2, r0
 80090b8:	4b0c      	ldr	r3, [pc, #48]	@ (80090ec <HAL_RCC_ClockConfig+0x264>)
 80090ba:	689b      	ldr	r3, [r3, #8]
 80090bc:	091b      	lsrs	r3, r3, #4
 80090be:	f003 030f 	and.w	r3, r3, #15
 80090c2:	490c      	ldr	r1, [pc, #48]	@ (80090f4 <HAL_RCC_ClockConfig+0x26c>)
 80090c4:	5ccb      	ldrb	r3, [r1, r3]
 80090c6:	f003 031f 	and.w	r3, r3, #31
 80090ca:	fa22 f303 	lsr.w	r3, r2, r3
 80090ce:	4a0a      	ldr	r2, [pc, #40]	@ (80090f8 <HAL_RCC_ClockConfig+0x270>)
 80090d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80090d2:	4b0a      	ldr	r3, [pc, #40]	@ (80090fc <HAL_RCC_ClockConfig+0x274>)
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	4618      	mov	r0, r3
 80090d8:	f7fd f9fa 	bl	80064d0 <HAL_InitTick>
 80090dc:	4603      	mov	r3, r0
}
 80090de:	4618      	mov	r0, r3
 80090e0:	3718      	adds	r7, #24
 80090e2:	46bd      	mov	sp, r7
 80090e4:	bd80      	pop	{r7, pc}
 80090e6:	bf00      	nop
 80090e8:	40022000 	.word	0x40022000
 80090ec:	40021000 	.word	0x40021000
 80090f0:	04c4b400 	.word	0x04c4b400
 80090f4:	08011378 	.word	0x08011378
 80090f8:	2000020c 	.word	0x2000020c
 80090fc:	20000210 	.word	0x20000210

08009100 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009100:	b480      	push	{r7}
 8009102:	b087      	sub	sp, #28
 8009104:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8009106:	4b2c      	ldr	r3, [pc, #176]	@ (80091b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009108:	689b      	ldr	r3, [r3, #8]
 800910a:	f003 030c 	and.w	r3, r3, #12
 800910e:	2b04      	cmp	r3, #4
 8009110:	d102      	bne.n	8009118 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8009112:	4b2a      	ldr	r3, [pc, #168]	@ (80091bc <HAL_RCC_GetSysClockFreq+0xbc>)
 8009114:	613b      	str	r3, [r7, #16]
 8009116:	e047      	b.n	80091a8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8009118:	4b27      	ldr	r3, [pc, #156]	@ (80091b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800911a:	689b      	ldr	r3, [r3, #8]
 800911c:	f003 030c 	and.w	r3, r3, #12
 8009120:	2b08      	cmp	r3, #8
 8009122:	d102      	bne.n	800912a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8009124:	4b26      	ldr	r3, [pc, #152]	@ (80091c0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8009126:	613b      	str	r3, [r7, #16]
 8009128:	e03e      	b.n	80091a8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800912a:	4b23      	ldr	r3, [pc, #140]	@ (80091b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800912c:	689b      	ldr	r3, [r3, #8]
 800912e:	f003 030c 	and.w	r3, r3, #12
 8009132:	2b0c      	cmp	r3, #12
 8009134:	d136      	bne.n	80091a4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8009136:	4b20      	ldr	r3, [pc, #128]	@ (80091b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009138:	68db      	ldr	r3, [r3, #12]
 800913a:	f003 0303 	and.w	r3, r3, #3
 800913e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009140:	4b1d      	ldr	r3, [pc, #116]	@ (80091b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009142:	68db      	ldr	r3, [r3, #12]
 8009144:	091b      	lsrs	r3, r3, #4
 8009146:	f003 030f 	and.w	r3, r3, #15
 800914a:	3301      	adds	r3, #1
 800914c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	2b03      	cmp	r3, #3
 8009152:	d10c      	bne.n	800916e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009154:	4a1a      	ldr	r2, [pc, #104]	@ (80091c0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8009156:	68bb      	ldr	r3, [r7, #8]
 8009158:	fbb2 f3f3 	udiv	r3, r2, r3
 800915c:	4a16      	ldr	r2, [pc, #88]	@ (80091b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800915e:	68d2      	ldr	r2, [r2, #12]
 8009160:	0a12      	lsrs	r2, r2, #8
 8009162:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8009166:	fb02 f303 	mul.w	r3, r2, r3
 800916a:	617b      	str	r3, [r7, #20]
      break;
 800916c:	e00c      	b.n	8009188 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800916e:	4a13      	ldr	r2, [pc, #76]	@ (80091bc <HAL_RCC_GetSysClockFreq+0xbc>)
 8009170:	68bb      	ldr	r3, [r7, #8]
 8009172:	fbb2 f3f3 	udiv	r3, r2, r3
 8009176:	4a10      	ldr	r2, [pc, #64]	@ (80091b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009178:	68d2      	ldr	r2, [r2, #12]
 800917a:	0a12      	lsrs	r2, r2, #8
 800917c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8009180:	fb02 f303 	mul.w	r3, r2, r3
 8009184:	617b      	str	r3, [r7, #20]
      break;
 8009186:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8009188:	4b0b      	ldr	r3, [pc, #44]	@ (80091b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800918a:	68db      	ldr	r3, [r3, #12]
 800918c:	0e5b      	lsrs	r3, r3, #25
 800918e:	f003 0303 	and.w	r3, r3, #3
 8009192:	3301      	adds	r3, #1
 8009194:	005b      	lsls	r3, r3, #1
 8009196:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8009198:	697a      	ldr	r2, [r7, #20]
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	fbb2 f3f3 	udiv	r3, r2, r3
 80091a0:	613b      	str	r3, [r7, #16]
 80091a2:	e001      	b.n	80091a8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80091a4:	2300      	movs	r3, #0
 80091a6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80091a8:	693b      	ldr	r3, [r7, #16]
}
 80091aa:	4618      	mov	r0, r3
 80091ac:	371c      	adds	r7, #28
 80091ae:	46bd      	mov	sp, r7
 80091b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b4:	4770      	bx	lr
 80091b6:	bf00      	nop
 80091b8:	40021000 	.word	0x40021000
 80091bc:	00f42400 	.word	0x00f42400
 80091c0:	016e3600 	.word	0x016e3600

080091c4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80091c4:	b480      	push	{r7}
 80091c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80091c8:	4b03      	ldr	r3, [pc, #12]	@ (80091d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80091ca:	681b      	ldr	r3, [r3, #0]
}
 80091cc:	4618      	mov	r0, r3
 80091ce:	46bd      	mov	sp, r7
 80091d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d4:	4770      	bx	lr
 80091d6:	bf00      	nop
 80091d8:	2000020c 	.word	0x2000020c

080091dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80091dc:	b580      	push	{r7, lr}
 80091de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80091e0:	f7ff fff0 	bl	80091c4 <HAL_RCC_GetHCLKFreq>
 80091e4:	4602      	mov	r2, r0
 80091e6:	4b06      	ldr	r3, [pc, #24]	@ (8009200 <HAL_RCC_GetPCLK1Freq+0x24>)
 80091e8:	689b      	ldr	r3, [r3, #8]
 80091ea:	0a1b      	lsrs	r3, r3, #8
 80091ec:	f003 0307 	and.w	r3, r3, #7
 80091f0:	4904      	ldr	r1, [pc, #16]	@ (8009204 <HAL_RCC_GetPCLK1Freq+0x28>)
 80091f2:	5ccb      	ldrb	r3, [r1, r3]
 80091f4:	f003 031f 	and.w	r3, r3, #31
 80091f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80091fc:	4618      	mov	r0, r3
 80091fe:	bd80      	pop	{r7, pc}
 8009200:	40021000 	.word	0x40021000
 8009204:	08011388 	.word	0x08011388

08009208 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009208:	b580      	push	{r7, lr}
 800920a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800920c:	f7ff ffda 	bl	80091c4 <HAL_RCC_GetHCLKFreq>
 8009210:	4602      	mov	r2, r0
 8009212:	4b06      	ldr	r3, [pc, #24]	@ (800922c <HAL_RCC_GetPCLK2Freq+0x24>)
 8009214:	689b      	ldr	r3, [r3, #8]
 8009216:	0adb      	lsrs	r3, r3, #11
 8009218:	f003 0307 	and.w	r3, r3, #7
 800921c:	4904      	ldr	r1, [pc, #16]	@ (8009230 <HAL_RCC_GetPCLK2Freq+0x28>)
 800921e:	5ccb      	ldrb	r3, [r1, r3]
 8009220:	f003 031f 	and.w	r3, r3, #31
 8009224:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009228:	4618      	mov	r0, r3
 800922a:	bd80      	pop	{r7, pc}
 800922c:	40021000 	.word	0x40021000
 8009230:	08011388 	.word	0x08011388

08009234 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8009234:	b480      	push	{r7}
 8009236:	b087      	sub	sp, #28
 8009238:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800923a:	4b1e      	ldr	r3, [pc, #120]	@ (80092b4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800923c:	68db      	ldr	r3, [r3, #12]
 800923e:	f003 0303 	and.w	r3, r3, #3
 8009242:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009244:	4b1b      	ldr	r3, [pc, #108]	@ (80092b4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009246:	68db      	ldr	r3, [r3, #12]
 8009248:	091b      	lsrs	r3, r3, #4
 800924a:	f003 030f 	and.w	r3, r3, #15
 800924e:	3301      	adds	r3, #1
 8009250:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8009252:	693b      	ldr	r3, [r7, #16]
 8009254:	2b03      	cmp	r3, #3
 8009256:	d10c      	bne.n	8009272 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009258:	4a17      	ldr	r2, [pc, #92]	@ (80092b8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009260:	4a14      	ldr	r2, [pc, #80]	@ (80092b4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009262:	68d2      	ldr	r2, [r2, #12]
 8009264:	0a12      	lsrs	r2, r2, #8
 8009266:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800926a:	fb02 f303 	mul.w	r3, r2, r3
 800926e:	617b      	str	r3, [r7, #20]
    break;
 8009270:	e00c      	b.n	800928c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009272:	4a12      	ldr	r2, [pc, #72]	@ (80092bc <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	fbb2 f3f3 	udiv	r3, r2, r3
 800927a:	4a0e      	ldr	r2, [pc, #56]	@ (80092b4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800927c:	68d2      	ldr	r2, [r2, #12]
 800927e:	0a12      	lsrs	r2, r2, #8
 8009280:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8009284:	fb02 f303 	mul.w	r3, r2, r3
 8009288:	617b      	str	r3, [r7, #20]
    break;
 800928a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800928c:	4b09      	ldr	r3, [pc, #36]	@ (80092b4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800928e:	68db      	ldr	r3, [r3, #12]
 8009290:	0e5b      	lsrs	r3, r3, #25
 8009292:	f003 0303 	and.w	r3, r3, #3
 8009296:	3301      	adds	r3, #1
 8009298:	005b      	lsls	r3, r3, #1
 800929a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800929c:	697a      	ldr	r2, [r7, #20]
 800929e:	68bb      	ldr	r3, [r7, #8]
 80092a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80092a4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80092a6:	687b      	ldr	r3, [r7, #4]
}
 80092a8:	4618      	mov	r0, r3
 80092aa:	371c      	adds	r7, #28
 80092ac:	46bd      	mov	sp, r7
 80092ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b2:	4770      	bx	lr
 80092b4:	40021000 	.word	0x40021000
 80092b8:	016e3600 	.word	0x016e3600
 80092bc:	00f42400 	.word	0x00f42400

080092c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80092c0:	b580      	push	{r7, lr}
 80092c2:	b086      	sub	sp, #24
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80092c8:	2300      	movs	r3, #0
 80092ca:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80092cc:	2300      	movs	r3, #0
 80092ce:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80092d8:	2b00      	cmp	r3, #0
 80092da:	f000 8098 	beq.w	800940e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80092de:	2300      	movs	r3, #0
 80092e0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80092e2:	4b43      	ldr	r3, [pc, #268]	@ (80093f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80092e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80092e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d10d      	bne.n	800930a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80092ee:	4b40      	ldr	r3, [pc, #256]	@ (80093f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80092f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80092f2:	4a3f      	ldr	r2, [pc, #252]	@ (80093f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80092f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80092f8:	6593      	str	r3, [r2, #88]	@ 0x58
 80092fa:	4b3d      	ldr	r3, [pc, #244]	@ (80093f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80092fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80092fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009302:	60bb      	str	r3, [r7, #8]
 8009304:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009306:	2301      	movs	r3, #1
 8009308:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800930a:	4b3a      	ldr	r3, [pc, #232]	@ (80093f4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	4a39      	ldr	r2, [pc, #228]	@ (80093f4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8009310:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009314:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009316:	f7fd f927 	bl	8006568 <HAL_GetTick>
 800931a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800931c:	e009      	b.n	8009332 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800931e:	f7fd f923 	bl	8006568 <HAL_GetTick>
 8009322:	4602      	mov	r2, r0
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	1ad3      	subs	r3, r2, r3
 8009328:	2b02      	cmp	r3, #2
 800932a:	d902      	bls.n	8009332 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800932c:	2303      	movs	r3, #3
 800932e:	74fb      	strb	r3, [r7, #19]
        break;
 8009330:	e005      	b.n	800933e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009332:	4b30      	ldr	r3, [pc, #192]	@ (80093f4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800933a:	2b00      	cmp	r3, #0
 800933c:	d0ef      	beq.n	800931e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800933e:	7cfb      	ldrb	r3, [r7, #19]
 8009340:	2b00      	cmp	r3, #0
 8009342:	d159      	bne.n	80093f8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8009344:	4b2a      	ldr	r3, [pc, #168]	@ (80093f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009346:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800934a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800934e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8009350:	697b      	ldr	r3, [r7, #20]
 8009352:	2b00      	cmp	r3, #0
 8009354:	d01e      	beq.n	8009394 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800935a:	697a      	ldr	r2, [r7, #20]
 800935c:	429a      	cmp	r2, r3
 800935e:	d019      	beq.n	8009394 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8009360:	4b23      	ldr	r3, [pc, #140]	@ (80093f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009362:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009366:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800936a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800936c:	4b20      	ldr	r3, [pc, #128]	@ (80093f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800936e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009372:	4a1f      	ldr	r2, [pc, #124]	@ (80093f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009374:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009378:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800937c:	4b1c      	ldr	r3, [pc, #112]	@ (80093f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800937e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009382:	4a1b      	ldr	r2, [pc, #108]	@ (80093f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009384:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009388:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800938c:	4a18      	ldr	r2, [pc, #96]	@ (80093f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800938e:	697b      	ldr	r3, [r7, #20]
 8009390:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8009394:	697b      	ldr	r3, [r7, #20]
 8009396:	f003 0301 	and.w	r3, r3, #1
 800939a:	2b00      	cmp	r3, #0
 800939c:	d016      	beq.n	80093cc <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800939e:	f7fd f8e3 	bl	8006568 <HAL_GetTick>
 80093a2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80093a4:	e00b      	b.n	80093be <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80093a6:	f7fd f8df 	bl	8006568 <HAL_GetTick>
 80093aa:	4602      	mov	r2, r0
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	1ad3      	subs	r3, r2, r3
 80093b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80093b4:	4293      	cmp	r3, r2
 80093b6:	d902      	bls.n	80093be <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80093b8:	2303      	movs	r3, #3
 80093ba:	74fb      	strb	r3, [r7, #19]
            break;
 80093bc:	e006      	b.n	80093cc <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80093be:	4b0c      	ldr	r3, [pc, #48]	@ (80093f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80093c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80093c4:	f003 0302 	and.w	r3, r3, #2
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d0ec      	beq.n	80093a6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80093cc:	7cfb      	ldrb	r3, [r7, #19]
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d10b      	bne.n	80093ea <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80093d2:	4b07      	ldr	r3, [pc, #28]	@ (80093f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80093d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80093d8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80093e0:	4903      	ldr	r1, [pc, #12]	@ (80093f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80093e2:	4313      	orrs	r3, r2
 80093e4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80093e8:	e008      	b.n	80093fc <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80093ea:	7cfb      	ldrb	r3, [r7, #19]
 80093ec:	74bb      	strb	r3, [r7, #18]
 80093ee:	e005      	b.n	80093fc <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80093f0:	40021000 	.word	0x40021000
 80093f4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80093f8:	7cfb      	ldrb	r3, [r7, #19]
 80093fa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80093fc:	7c7b      	ldrb	r3, [r7, #17]
 80093fe:	2b01      	cmp	r3, #1
 8009400:	d105      	bne.n	800940e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009402:	4ba7      	ldr	r3, [pc, #668]	@ (80096a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009404:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009406:	4aa6      	ldr	r2, [pc, #664]	@ (80096a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009408:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800940c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	f003 0301 	and.w	r3, r3, #1
 8009416:	2b00      	cmp	r3, #0
 8009418:	d00a      	beq.n	8009430 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800941a:	4ba1      	ldr	r3, [pc, #644]	@ (80096a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800941c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009420:	f023 0203 	bic.w	r2, r3, #3
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	685b      	ldr	r3, [r3, #4]
 8009428:	499d      	ldr	r1, [pc, #628]	@ (80096a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800942a:	4313      	orrs	r3, r2
 800942c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	f003 0302 	and.w	r3, r3, #2
 8009438:	2b00      	cmp	r3, #0
 800943a:	d00a      	beq.n	8009452 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800943c:	4b98      	ldr	r3, [pc, #608]	@ (80096a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800943e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009442:	f023 020c 	bic.w	r2, r3, #12
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	689b      	ldr	r3, [r3, #8]
 800944a:	4995      	ldr	r1, [pc, #596]	@ (80096a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800944c:	4313      	orrs	r3, r2
 800944e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	f003 0304 	and.w	r3, r3, #4
 800945a:	2b00      	cmp	r3, #0
 800945c:	d00a      	beq.n	8009474 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800945e:	4b90      	ldr	r3, [pc, #576]	@ (80096a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009460:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009464:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	68db      	ldr	r3, [r3, #12]
 800946c:	498c      	ldr	r1, [pc, #560]	@ (80096a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800946e:	4313      	orrs	r3, r2
 8009470:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	f003 0308 	and.w	r3, r3, #8
 800947c:	2b00      	cmp	r3, #0
 800947e:	d00a      	beq.n	8009496 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8009480:	4b87      	ldr	r3, [pc, #540]	@ (80096a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009482:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009486:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	691b      	ldr	r3, [r3, #16]
 800948e:	4984      	ldr	r1, [pc, #528]	@ (80096a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009490:	4313      	orrs	r3, r2
 8009492:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	f003 0310 	and.w	r3, r3, #16
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d00a      	beq.n	80094b8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80094a2:	4b7f      	ldr	r3, [pc, #508]	@ (80096a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80094a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80094a8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	695b      	ldr	r3, [r3, #20]
 80094b0:	497b      	ldr	r1, [pc, #492]	@ (80096a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80094b2:	4313      	orrs	r3, r2
 80094b4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	f003 0320 	and.w	r3, r3, #32
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d00a      	beq.n	80094da <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80094c4:	4b76      	ldr	r3, [pc, #472]	@ (80096a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80094c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80094ca:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	699b      	ldr	r3, [r3, #24]
 80094d2:	4973      	ldr	r1, [pc, #460]	@ (80096a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80094d4:	4313      	orrs	r3, r2
 80094d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d00a      	beq.n	80094fc <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80094e6:	4b6e      	ldr	r3, [pc, #440]	@ (80096a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80094e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80094ec:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	69db      	ldr	r3, [r3, #28]
 80094f4:	496a      	ldr	r1, [pc, #424]	@ (80096a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80094f6:	4313      	orrs	r3, r2
 80094f8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009504:	2b00      	cmp	r3, #0
 8009506:	d00a      	beq.n	800951e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8009508:	4b65      	ldr	r3, [pc, #404]	@ (80096a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800950a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800950e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	6a1b      	ldr	r3, [r3, #32]
 8009516:	4962      	ldr	r1, [pc, #392]	@ (80096a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009518:	4313      	orrs	r3, r2
 800951a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009526:	2b00      	cmp	r3, #0
 8009528:	d00a      	beq.n	8009540 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800952a:	4b5d      	ldr	r3, [pc, #372]	@ (80096a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800952c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009530:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009538:	4959      	ldr	r1, [pc, #356]	@ (80096a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800953a:	4313      	orrs	r3, r2
 800953c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009548:	2b00      	cmp	r3, #0
 800954a:	d00a      	beq.n	8009562 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800954c:	4b54      	ldr	r3, [pc, #336]	@ (80096a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800954e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009552:	f023 0203 	bic.w	r2, r3, #3
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800955a:	4951      	ldr	r1, [pc, #324]	@ (80096a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800955c:	4313      	orrs	r3, r2
 800955e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800956a:	2b00      	cmp	r3, #0
 800956c:	d00a      	beq.n	8009584 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800956e:	4b4c      	ldr	r3, [pc, #304]	@ (80096a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009570:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009574:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800957c:	4948      	ldr	r1, [pc, #288]	@ (80096a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800957e:	4313      	orrs	r3, r2
 8009580:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800958c:	2b00      	cmp	r3, #0
 800958e:	d015      	beq.n	80095bc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009590:	4b43      	ldr	r3, [pc, #268]	@ (80096a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009592:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009596:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800959e:	4940      	ldr	r1, [pc, #256]	@ (80096a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80095a0:	4313      	orrs	r3, r2
 80095a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80095aa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80095ae:	d105      	bne.n	80095bc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80095b0:	4b3b      	ldr	r3, [pc, #236]	@ (80096a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80095b2:	68db      	ldr	r3, [r3, #12]
 80095b4:	4a3a      	ldr	r2, [pc, #232]	@ (80096a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80095b6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80095ba:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d015      	beq.n	80095f4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80095c8:	4b35      	ldr	r3, [pc, #212]	@ (80096a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80095ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80095ce:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80095d6:	4932      	ldr	r1, [pc, #200]	@ (80096a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80095d8:	4313      	orrs	r3, r2
 80095da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80095e2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80095e6:	d105      	bne.n	80095f4 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80095e8:	4b2d      	ldr	r3, [pc, #180]	@ (80096a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80095ea:	68db      	ldr	r3, [r3, #12]
 80095ec:	4a2c      	ldr	r2, [pc, #176]	@ (80096a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80095ee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80095f2:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d015      	beq.n	800962c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009600:	4b27      	ldr	r3, [pc, #156]	@ (80096a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009602:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009606:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800960e:	4924      	ldr	r1, [pc, #144]	@ (80096a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009610:	4313      	orrs	r3, r2
 8009612:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800961a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800961e:	d105      	bne.n	800962c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009620:	4b1f      	ldr	r3, [pc, #124]	@ (80096a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009622:	68db      	ldr	r3, [r3, #12]
 8009624:	4a1e      	ldr	r2, [pc, #120]	@ (80096a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009626:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800962a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009634:	2b00      	cmp	r3, #0
 8009636:	d015      	beq.n	8009664 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009638:	4b19      	ldr	r3, [pc, #100]	@ (80096a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800963a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800963e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009646:	4916      	ldr	r1, [pc, #88]	@ (80096a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009648:	4313      	orrs	r3, r2
 800964a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009652:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009656:	d105      	bne.n	8009664 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009658:	4b11      	ldr	r3, [pc, #68]	@ (80096a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800965a:	68db      	ldr	r3, [r3, #12]
 800965c:	4a10      	ldr	r2, [pc, #64]	@ (80096a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800965e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009662:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800966c:	2b00      	cmp	r3, #0
 800966e:	d019      	beq.n	80096a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009670:	4b0b      	ldr	r3, [pc, #44]	@ (80096a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009672:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009676:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800967e:	4908      	ldr	r1, [pc, #32]	@ (80096a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009680:	4313      	orrs	r3, r2
 8009682:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800968a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800968e:	d109      	bne.n	80096a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009690:	4b03      	ldr	r3, [pc, #12]	@ (80096a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009692:	68db      	ldr	r3, [r3, #12]
 8009694:	4a02      	ldr	r2, [pc, #8]	@ (80096a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009696:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800969a:	60d3      	str	r3, [r2, #12]
 800969c:	e002      	b.n	80096a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800969e:	bf00      	nop
 80096a0:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d015      	beq.n	80096dc <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80096b0:	4b29      	ldr	r3, [pc, #164]	@ (8009758 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80096b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80096b6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80096be:	4926      	ldr	r1, [pc, #152]	@ (8009758 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80096c0:	4313      	orrs	r3, r2
 80096c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80096ca:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80096ce:	d105      	bne.n	80096dc <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80096d0:	4b21      	ldr	r3, [pc, #132]	@ (8009758 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80096d2:	68db      	ldr	r3, [r3, #12]
 80096d4:	4a20      	ldr	r2, [pc, #128]	@ (8009758 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80096d6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80096da:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d015      	beq.n	8009714 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80096e8:	4b1b      	ldr	r3, [pc, #108]	@ (8009758 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80096ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80096ee:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80096f6:	4918      	ldr	r1, [pc, #96]	@ (8009758 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80096f8:	4313      	orrs	r3, r2
 80096fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009702:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009706:	d105      	bne.n	8009714 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8009708:	4b13      	ldr	r3, [pc, #76]	@ (8009758 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800970a:	68db      	ldr	r3, [r3, #12]
 800970c:	4a12      	ldr	r2, [pc, #72]	@ (8009758 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800970e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009712:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800971c:	2b00      	cmp	r3, #0
 800971e:	d015      	beq.n	800974c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8009720:	4b0d      	ldr	r3, [pc, #52]	@ (8009758 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009722:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009726:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800972e:	490a      	ldr	r1, [pc, #40]	@ (8009758 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009730:	4313      	orrs	r3, r2
 8009732:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800973a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800973e:	d105      	bne.n	800974c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009740:	4b05      	ldr	r3, [pc, #20]	@ (8009758 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009742:	68db      	ldr	r3, [r3, #12]
 8009744:	4a04      	ldr	r2, [pc, #16]	@ (8009758 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009746:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800974a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800974c:	7cbb      	ldrb	r3, [r7, #18]
}
 800974e:	4618      	mov	r0, r3
 8009750:	3718      	adds	r7, #24
 8009752:	46bd      	mov	sp, r7
 8009754:	bd80      	pop	{r7, pc}
 8009756:	bf00      	nop
 8009758:	40021000 	.word	0x40021000

0800975c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800975c:	b580      	push	{r7, lr}
 800975e:	b084      	sub	sp, #16
 8009760:	af00      	add	r7, sp, #0
 8009762:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	2b00      	cmp	r3, #0
 8009768:	d101      	bne.n	800976e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800976a:	2301      	movs	r3, #1
 800976c:	e09d      	b.n	80098aa <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009772:	2b00      	cmp	r3, #0
 8009774:	d108      	bne.n	8009788 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	685b      	ldr	r3, [r3, #4]
 800977a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800977e:	d009      	beq.n	8009794 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	2200      	movs	r2, #0
 8009784:	61da      	str	r2, [r3, #28]
 8009786:	e005      	b.n	8009794 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	2200      	movs	r2, #0
 800978c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	2200      	movs	r2, #0
 8009792:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	2200      	movs	r2, #0
 8009798:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80097a0:	b2db      	uxtb	r3, r3
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d106      	bne.n	80097b4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	2200      	movs	r2, #0
 80097aa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80097ae:	6878      	ldr	r0, [r7, #4]
 80097b0:	f7fb ff9c 	bl	80056ec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	2202      	movs	r2, #2
 80097b8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	681a      	ldr	r2, [r3, #0]
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80097ca:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	68db      	ldr	r3, [r3, #12]
 80097d0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80097d4:	d902      	bls.n	80097dc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80097d6:	2300      	movs	r3, #0
 80097d8:	60fb      	str	r3, [r7, #12]
 80097da:	e002      	b.n	80097e2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80097dc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80097e0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	68db      	ldr	r3, [r3, #12]
 80097e6:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80097ea:	d007      	beq.n	80097fc <HAL_SPI_Init+0xa0>
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	68db      	ldr	r3, [r3, #12]
 80097f0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80097f4:	d002      	beq.n	80097fc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	2200      	movs	r2, #0
 80097fa:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	685b      	ldr	r3, [r3, #4]
 8009800:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	689b      	ldr	r3, [r3, #8]
 8009808:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800980c:	431a      	orrs	r2, r3
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	691b      	ldr	r3, [r3, #16]
 8009812:	f003 0302 	and.w	r3, r3, #2
 8009816:	431a      	orrs	r2, r3
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	695b      	ldr	r3, [r3, #20]
 800981c:	f003 0301 	and.w	r3, r3, #1
 8009820:	431a      	orrs	r2, r3
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	699b      	ldr	r3, [r3, #24]
 8009826:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800982a:	431a      	orrs	r2, r3
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	69db      	ldr	r3, [r3, #28]
 8009830:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009834:	431a      	orrs	r2, r3
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	6a1b      	ldr	r3, [r3, #32]
 800983a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800983e:	ea42 0103 	orr.w	r1, r2, r3
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009846:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	430a      	orrs	r2, r1
 8009850:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	699b      	ldr	r3, [r3, #24]
 8009856:	0c1b      	lsrs	r3, r3, #16
 8009858:	f003 0204 	and.w	r2, r3, #4
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009860:	f003 0310 	and.w	r3, r3, #16
 8009864:	431a      	orrs	r2, r3
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800986a:	f003 0308 	and.w	r3, r3, #8
 800986e:	431a      	orrs	r2, r3
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	68db      	ldr	r3, [r3, #12]
 8009874:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8009878:	ea42 0103 	orr.w	r1, r2, r3
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	430a      	orrs	r2, r1
 8009888:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	69da      	ldr	r2, [r3, #28]
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8009898:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	2200      	movs	r2, #0
 800989e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	2201      	movs	r2, #1
 80098a4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80098a8:	2300      	movs	r3, #0
}
 80098aa:	4618      	mov	r0, r3
 80098ac:	3710      	adds	r7, #16
 80098ae:	46bd      	mov	sp, r7
 80098b0:	bd80      	pop	{r7, pc}

080098b2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80098b2:	b580      	push	{r7, lr}
 80098b4:	b08a      	sub	sp, #40	@ 0x28
 80098b6:	af00      	add	r7, sp, #0
 80098b8:	60f8      	str	r0, [r7, #12]
 80098ba:	60b9      	str	r1, [r7, #8]
 80098bc:	607a      	str	r2, [r7, #4]
 80098be:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80098c0:	2301      	movs	r3, #1
 80098c2:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80098c4:	f7fc fe50 	bl	8006568 <HAL_GetTick>
 80098c8:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80098d0:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	685b      	ldr	r3, [r3, #4]
 80098d6:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80098d8:	887b      	ldrh	r3, [r7, #2]
 80098da:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 80098dc:	887b      	ldrh	r3, [r7, #2]
 80098de:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80098e0:	7ffb      	ldrb	r3, [r7, #31]
 80098e2:	2b01      	cmp	r3, #1
 80098e4:	d00c      	beq.n	8009900 <HAL_SPI_TransmitReceive+0x4e>
 80098e6:	69bb      	ldr	r3, [r7, #24]
 80098e8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80098ec:	d106      	bne.n	80098fc <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	689b      	ldr	r3, [r3, #8]
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d102      	bne.n	80098fc <HAL_SPI_TransmitReceive+0x4a>
 80098f6:	7ffb      	ldrb	r3, [r7, #31]
 80098f8:	2b04      	cmp	r3, #4
 80098fa:	d001      	beq.n	8009900 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 80098fc:	2302      	movs	r3, #2
 80098fe:	e1f3      	b.n	8009ce8 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009900:	68bb      	ldr	r3, [r7, #8]
 8009902:	2b00      	cmp	r3, #0
 8009904:	d005      	beq.n	8009912 <HAL_SPI_TransmitReceive+0x60>
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	2b00      	cmp	r3, #0
 800990a:	d002      	beq.n	8009912 <HAL_SPI_TransmitReceive+0x60>
 800990c:	887b      	ldrh	r3, [r7, #2]
 800990e:	2b00      	cmp	r3, #0
 8009910:	d101      	bne.n	8009916 <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 8009912:	2301      	movs	r3, #1
 8009914:	e1e8      	b.n	8009ce8 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800991c:	2b01      	cmp	r3, #1
 800991e:	d101      	bne.n	8009924 <HAL_SPI_TransmitReceive+0x72>
 8009920:	2302      	movs	r3, #2
 8009922:	e1e1      	b.n	8009ce8 <HAL_SPI_TransmitReceive+0x436>
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	2201      	movs	r2, #1
 8009928:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8009932:	b2db      	uxtb	r3, r3
 8009934:	2b04      	cmp	r3, #4
 8009936:	d003      	beq.n	8009940 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	2205      	movs	r2, #5
 800993c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	2200      	movs	r2, #0
 8009944:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	687a      	ldr	r2, [r7, #4]
 800994a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	887a      	ldrh	r2, [r7, #2]
 8009950:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	887a      	ldrh	r2, [r7, #2]
 8009958:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	68ba      	ldr	r2, [r7, #8]
 8009960:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	887a      	ldrh	r2, [r7, #2]
 8009966:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	887a      	ldrh	r2, [r7, #2]
 800996c:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	2200      	movs	r2, #0
 8009972:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	2200      	movs	r2, #0
 8009978:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	68db      	ldr	r3, [r3, #12]
 800997e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8009982:	d802      	bhi.n	800998a <HAL_SPI_TransmitReceive+0xd8>
 8009984:	8abb      	ldrh	r3, [r7, #20]
 8009986:	2b01      	cmp	r3, #1
 8009988:	d908      	bls.n	800999c <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	685a      	ldr	r2, [r3, #4]
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8009998:	605a      	str	r2, [r3, #4]
 800999a:	e007      	b.n	80099ac <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	685a      	ldr	r2, [r3, #4]
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80099aa:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80099b6:	2b40      	cmp	r3, #64	@ 0x40
 80099b8:	d007      	beq.n	80099ca <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	681a      	ldr	r2, [r3, #0]
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80099c8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	68db      	ldr	r3, [r3, #12]
 80099ce:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80099d2:	f240 8083 	bls.w	8009adc <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	685b      	ldr	r3, [r3, #4]
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d002      	beq.n	80099e4 <HAL_SPI_TransmitReceive+0x132>
 80099de:	8afb      	ldrh	r3, [r7, #22]
 80099e0:	2b01      	cmp	r3, #1
 80099e2:	d16f      	bne.n	8009ac4 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80099e8:	881a      	ldrh	r2, [r3, #0]
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80099f4:	1c9a      	adds	r2, r3, #2
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80099fe:	b29b      	uxth	r3, r3
 8009a00:	3b01      	subs	r3, #1
 8009a02:	b29a      	uxth	r2, r3
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009a08:	e05c      	b.n	8009ac4 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	689b      	ldr	r3, [r3, #8]
 8009a10:	f003 0302 	and.w	r3, r3, #2
 8009a14:	2b02      	cmp	r3, #2
 8009a16:	d11b      	bne.n	8009a50 <HAL_SPI_TransmitReceive+0x19e>
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009a1c:	b29b      	uxth	r3, r3
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d016      	beq.n	8009a50 <HAL_SPI_TransmitReceive+0x19e>
 8009a22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a24:	2b01      	cmp	r3, #1
 8009a26:	d113      	bne.n	8009a50 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a2c:	881a      	ldrh	r2, [r3, #0]
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a38:	1c9a      	adds	r2, r3, #2
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009a42:	b29b      	uxth	r3, r3
 8009a44:	3b01      	subs	r3, #1
 8009a46:	b29a      	uxth	r2, r3
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009a4c:	2300      	movs	r3, #0
 8009a4e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	689b      	ldr	r3, [r3, #8]
 8009a56:	f003 0301 	and.w	r3, r3, #1
 8009a5a:	2b01      	cmp	r3, #1
 8009a5c:	d11c      	bne.n	8009a98 <HAL_SPI_TransmitReceive+0x1e6>
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009a64:	b29b      	uxth	r3, r3
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d016      	beq.n	8009a98 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	68da      	ldr	r2, [r3, #12]
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a74:	b292      	uxth	r2, r2
 8009a76:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a7c:	1c9a      	adds	r2, r3, #2
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009a88:	b29b      	uxth	r3, r3
 8009a8a:	3b01      	subs	r3, #1
 8009a8c:	b29a      	uxth	r2, r3
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009a94:	2301      	movs	r3, #1
 8009a96:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8009a98:	f7fc fd66 	bl	8006568 <HAL_GetTick>
 8009a9c:	4602      	mov	r2, r0
 8009a9e:	6a3b      	ldr	r3, [r7, #32]
 8009aa0:	1ad3      	subs	r3, r2, r3
 8009aa2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009aa4:	429a      	cmp	r2, r3
 8009aa6:	d80d      	bhi.n	8009ac4 <HAL_SPI_TransmitReceive+0x212>
 8009aa8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009aaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009aae:	d009      	beq.n	8009ac4 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	2201      	movs	r2, #1
 8009ab4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	2200      	movs	r2, #0
 8009abc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8009ac0:	2303      	movs	r3, #3
 8009ac2:	e111      	b.n	8009ce8 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009ac8:	b29b      	uxth	r3, r3
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d19d      	bne.n	8009a0a <HAL_SPI_TransmitReceive+0x158>
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009ad4:	b29b      	uxth	r3, r3
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d197      	bne.n	8009a0a <HAL_SPI_TransmitReceive+0x158>
 8009ada:	e0e5      	b.n	8009ca8 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	685b      	ldr	r3, [r3, #4]
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d003      	beq.n	8009aec <HAL_SPI_TransmitReceive+0x23a>
 8009ae4:	8afb      	ldrh	r3, [r7, #22]
 8009ae6:	2b01      	cmp	r3, #1
 8009ae8:	f040 80d1 	bne.w	8009c8e <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009af0:	b29b      	uxth	r3, r3
 8009af2:	2b01      	cmp	r3, #1
 8009af4:	d912      	bls.n	8009b1c <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009afa:	881a      	ldrh	r2, [r3, #0]
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b06:	1c9a      	adds	r2, r3, #2
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009b10:	b29b      	uxth	r3, r3
 8009b12:	3b02      	subs	r3, #2
 8009b14:	b29a      	uxth	r2, r3
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8009b1a:	e0b8      	b.n	8009c8e <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	330c      	adds	r3, #12
 8009b26:	7812      	ldrb	r2, [r2, #0]
 8009b28:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b2e:	1c5a      	adds	r2, r3, #1
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009b38:	b29b      	uxth	r3, r3
 8009b3a:	3b01      	subs	r3, #1
 8009b3c:	b29a      	uxth	r2, r3
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009b42:	e0a4      	b.n	8009c8e <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	689b      	ldr	r3, [r3, #8]
 8009b4a:	f003 0302 	and.w	r3, r3, #2
 8009b4e:	2b02      	cmp	r3, #2
 8009b50:	d134      	bne.n	8009bbc <HAL_SPI_TransmitReceive+0x30a>
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009b56:	b29b      	uxth	r3, r3
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d02f      	beq.n	8009bbc <HAL_SPI_TransmitReceive+0x30a>
 8009b5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b5e:	2b01      	cmp	r3, #1
 8009b60:	d12c      	bne.n	8009bbc <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009b66:	b29b      	uxth	r3, r3
 8009b68:	2b01      	cmp	r3, #1
 8009b6a:	d912      	bls.n	8009b92 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b70:	881a      	ldrh	r2, [r3, #0]
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b7c:	1c9a      	adds	r2, r3, #2
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009b86:	b29b      	uxth	r3, r3
 8009b88:	3b02      	subs	r3, #2
 8009b8a:	b29a      	uxth	r2, r3
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8009b90:	e012      	b.n	8009bb8 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	330c      	adds	r3, #12
 8009b9c:	7812      	ldrb	r2, [r2, #0]
 8009b9e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ba4:	1c5a      	adds	r2, r3, #1
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009bae:	b29b      	uxth	r3, r3
 8009bb0:	3b01      	subs	r3, #1
 8009bb2:	b29a      	uxth	r2, r3
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009bb8:	2300      	movs	r3, #0
 8009bba:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	689b      	ldr	r3, [r3, #8]
 8009bc2:	f003 0301 	and.w	r3, r3, #1
 8009bc6:	2b01      	cmp	r3, #1
 8009bc8:	d148      	bne.n	8009c5c <HAL_SPI_TransmitReceive+0x3aa>
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009bd0:	b29b      	uxth	r3, r3
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d042      	beq.n	8009c5c <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009bdc:	b29b      	uxth	r3, r3
 8009bde:	2b01      	cmp	r3, #1
 8009be0:	d923      	bls.n	8009c2a <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	68da      	ldr	r2, [r3, #12]
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009bec:	b292      	uxth	r2, r2
 8009bee:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009bf4:	1c9a      	adds	r2, r3, #2
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009c00:	b29b      	uxth	r3, r3
 8009c02:	3b02      	subs	r3, #2
 8009c04:	b29a      	uxth	r2, r3
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009c12:	b29b      	uxth	r3, r3
 8009c14:	2b01      	cmp	r3, #1
 8009c16:	d81f      	bhi.n	8009c58 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	685a      	ldr	r2, [r3, #4]
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8009c26:	605a      	str	r2, [r3, #4]
 8009c28:	e016      	b.n	8009c58 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	f103 020c 	add.w	r2, r3, #12
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009c36:	7812      	ldrb	r2, [r2, #0]
 8009c38:	b2d2      	uxtb	r2, r2
 8009c3a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009c40:	1c5a      	adds	r2, r3, #1
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009c4c:	b29b      	uxth	r3, r3
 8009c4e:	3b01      	subs	r3, #1
 8009c50:	b29a      	uxth	r2, r3
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009c58:	2301      	movs	r3, #1
 8009c5a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8009c5c:	f7fc fc84 	bl	8006568 <HAL_GetTick>
 8009c60:	4602      	mov	r2, r0
 8009c62:	6a3b      	ldr	r3, [r7, #32]
 8009c64:	1ad3      	subs	r3, r2, r3
 8009c66:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009c68:	429a      	cmp	r2, r3
 8009c6a:	d803      	bhi.n	8009c74 <HAL_SPI_TransmitReceive+0x3c2>
 8009c6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c72:	d102      	bne.n	8009c7a <HAL_SPI_TransmitReceive+0x3c8>
 8009c74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d109      	bne.n	8009c8e <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	2201      	movs	r2, #1
 8009c7e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	2200      	movs	r2, #0
 8009c86:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8009c8a:	2303      	movs	r3, #3
 8009c8c:	e02c      	b.n	8009ce8 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009c92:	b29b      	uxth	r3, r3
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	f47f af55 	bne.w	8009b44 <HAL_SPI_TransmitReceive+0x292>
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009ca0:	b29b      	uxth	r3, r3
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	f47f af4e 	bne.w	8009b44 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009ca8:	6a3a      	ldr	r2, [r7, #32]
 8009caa:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009cac:	68f8      	ldr	r0, [r7, #12]
 8009cae:	f000 f93d 	bl	8009f2c <SPI_EndRxTxTransaction>
 8009cb2:	4603      	mov	r3, r0
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d008      	beq.n	8009cca <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	2220      	movs	r2, #32
 8009cbc:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	2200      	movs	r2, #0
 8009cc2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8009cc6:	2301      	movs	r3, #1
 8009cc8:	e00e      	b.n	8009ce8 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	2201      	movs	r2, #1
 8009cce:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	2200      	movs	r2, #0
 8009cd6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d001      	beq.n	8009ce6 <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 8009ce2:	2301      	movs	r3, #1
 8009ce4:	e000      	b.n	8009ce8 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 8009ce6:	2300      	movs	r3, #0
  }
}
 8009ce8:	4618      	mov	r0, r3
 8009cea:	3728      	adds	r7, #40	@ 0x28
 8009cec:	46bd      	mov	sp, r7
 8009cee:	bd80      	pop	{r7, pc}

08009cf0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009cf0:	b580      	push	{r7, lr}
 8009cf2:	b088      	sub	sp, #32
 8009cf4:	af00      	add	r7, sp, #0
 8009cf6:	60f8      	str	r0, [r7, #12]
 8009cf8:	60b9      	str	r1, [r7, #8]
 8009cfa:	603b      	str	r3, [r7, #0]
 8009cfc:	4613      	mov	r3, r2
 8009cfe:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009d00:	f7fc fc32 	bl	8006568 <HAL_GetTick>
 8009d04:	4602      	mov	r2, r0
 8009d06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d08:	1a9b      	subs	r3, r3, r2
 8009d0a:	683a      	ldr	r2, [r7, #0]
 8009d0c:	4413      	add	r3, r2
 8009d0e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009d10:	f7fc fc2a 	bl	8006568 <HAL_GetTick>
 8009d14:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009d16:	4b39      	ldr	r3, [pc, #228]	@ (8009dfc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	015b      	lsls	r3, r3, #5
 8009d1c:	0d1b      	lsrs	r3, r3, #20
 8009d1e:	69fa      	ldr	r2, [r7, #28]
 8009d20:	fb02 f303 	mul.w	r3, r2, r3
 8009d24:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009d26:	e054      	b.n	8009dd2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009d28:	683b      	ldr	r3, [r7, #0]
 8009d2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d2e:	d050      	beq.n	8009dd2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009d30:	f7fc fc1a 	bl	8006568 <HAL_GetTick>
 8009d34:	4602      	mov	r2, r0
 8009d36:	69bb      	ldr	r3, [r7, #24]
 8009d38:	1ad3      	subs	r3, r2, r3
 8009d3a:	69fa      	ldr	r2, [r7, #28]
 8009d3c:	429a      	cmp	r2, r3
 8009d3e:	d902      	bls.n	8009d46 <SPI_WaitFlagStateUntilTimeout+0x56>
 8009d40:	69fb      	ldr	r3, [r7, #28]
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d13d      	bne.n	8009dc2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	685a      	ldr	r2, [r3, #4]
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8009d54:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	685b      	ldr	r3, [r3, #4]
 8009d5a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009d5e:	d111      	bne.n	8009d84 <SPI_WaitFlagStateUntilTimeout+0x94>
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	689b      	ldr	r3, [r3, #8]
 8009d64:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009d68:	d004      	beq.n	8009d74 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	689b      	ldr	r3, [r3, #8]
 8009d6e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009d72:	d107      	bne.n	8009d84 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	681a      	ldr	r2, [r3, #0]
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009d82:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d88:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009d8c:	d10f      	bne.n	8009dae <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	681a      	ldr	r2, [r3, #0]
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009d9c:	601a      	str	r2, [r3, #0]
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	681a      	ldr	r2, [r3, #0]
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009dac:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	2201      	movs	r2, #1
 8009db2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	2200      	movs	r2, #0
 8009dba:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8009dbe:	2303      	movs	r3, #3
 8009dc0:	e017      	b.n	8009df2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009dc2:	697b      	ldr	r3, [r7, #20]
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d101      	bne.n	8009dcc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8009dc8:	2300      	movs	r3, #0
 8009dca:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009dcc:	697b      	ldr	r3, [r7, #20]
 8009dce:	3b01      	subs	r3, #1
 8009dd0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	689a      	ldr	r2, [r3, #8]
 8009dd8:	68bb      	ldr	r3, [r7, #8]
 8009dda:	4013      	ands	r3, r2
 8009ddc:	68ba      	ldr	r2, [r7, #8]
 8009dde:	429a      	cmp	r2, r3
 8009de0:	bf0c      	ite	eq
 8009de2:	2301      	moveq	r3, #1
 8009de4:	2300      	movne	r3, #0
 8009de6:	b2db      	uxtb	r3, r3
 8009de8:	461a      	mov	r2, r3
 8009dea:	79fb      	ldrb	r3, [r7, #7]
 8009dec:	429a      	cmp	r2, r3
 8009dee:	d19b      	bne.n	8009d28 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009df0:	2300      	movs	r3, #0
}
 8009df2:	4618      	mov	r0, r3
 8009df4:	3720      	adds	r7, #32
 8009df6:	46bd      	mov	sp, r7
 8009df8:	bd80      	pop	{r7, pc}
 8009dfa:	bf00      	nop
 8009dfc:	2000020c 	.word	0x2000020c

08009e00 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009e00:	b580      	push	{r7, lr}
 8009e02:	b08a      	sub	sp, #40	@ 0x28
 8009e04:	af00      	add	r7, sp, #0
 8009e06:	60f8      	str	r0, [r7, #12]
 8009e08:	60b9      	str	r1, [r7, #8]
 8009e0a:	607a      	str	r2, [r7, #4]
 8009e0c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8009e0e:	2300      	movs	r3, #0
 8009e10:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8009e12:	f7fc fba9 	bl	8006568 <HAL_GetTick>
 8009e16:	4602      	mov	r2, r0
 8009e18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e1a:	1a9b      	subs	r3, r3, r2
 8009e1c:	683a      	ldr	r2, [r7, #0]
 8009e1e:	4413      	add	r3, r2
 8009e20:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8009e22:	f7fc fba1 	bl	8006568 <HAL_GetTick>
 8009e26:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	330c      	adds	r3, #12
 8009e2e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8009e30:	4b3d      	ldr	r3, [pc, #244]	@ (8009f28 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8009e32:	681a      	ldr	r2, [r3, #0]
 8009e34:	4613      	mov	r3, r2
 8009e36:	009b      	lsls	r3, r3, #2
 8009e38:	4413      	add	r3, r2
 8009e3a:	00da      	lsls	r2, r3, #3
 8009e3c:	1ad3      	subs	r3, r2, r3
 8009e3e:	0d1b      	lsrs	r3, r3, #20
 8009e40:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009e42:	fb02 f303 	mul.w	r3, r2, r3
 8009e46:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8009e48:	e060      	b.n	8009f0c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8009e4a:	68bb      	ldr	r3, [r7, #8]
 8009e4c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8009e50:	d107      	bne.n	8009e62 <SPI_WaitFifoStateUntilTimeout+0x62>
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d104      	bne.n	8009e62 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8009e58:	69fb      	ldr	r3, [r7, #28]
 8009e5a:	781b      	ldrb	r3, [r3, #0]
 8009e5c:	b2db      	uxtb	r3, r3
 8009e5e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8009e60:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8009e62:	683b      	ldr	r3, [r7, #0]
 8009e64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e68:	d050      	beq.n	8009f0c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009e6a:	f7fc fb7d 	bl	8006568 <HAL_GetTick>
 8009e6e:	4602      	mov	r2, r0
 8009e70:	6a3b      	ldr	r3, [r7, #32]
 8009e72:	1ad3      	subs	r3, r2, r3
 8009e74:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009e76:	429a      	cmp	r2, r3
 8009e78:	d902      	bls.n	8009e80 <SPI_WaitFifoStateUntilTimeout+0x80>
 8009e7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d13d      	bne.n	8009efc <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	685a      	ldr	r2, [r3, #4]
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8009e8e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	685b      	ldr	r3, [r3, #4]
 8009e94:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009e98:	d111      	bne.n	8009ebe <SPI_WaitFifoStateUntilTimeout+0xbe>
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	689b      	ldr	r3, [r3, #8]
 8009e9e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009ea2:	d004      	beq.n	8009eae <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	689b      	ldr	r3, [r3, #8]
 8009ea8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009eac:	d107      	bne.n	8009ebe <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	681a      	ldr	r2, [r3, #0]
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009ebc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ec2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009ec6:	d10f      	bne.n	8009ee8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	681a      	ldr	r2, [r3, #0]
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009ed6:	601a      	str	r2, [r3, #0]
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	681a      	ldr	r2, [r3, #0]
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009ee6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	2201      	movs	r2, #1
 8009eec:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	2200      	movs	r2, #0
 8009ef4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8009ef8:	2303      	movs	r3, #3
 8009efa:	e010      	b.n	8009f1e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009efc:	69bb      	ldr	r3, [r7, #24]
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d101      	bne.n	8009f06 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8009f02:	2300      	movs	r3, #0
 8009f04:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8009f06:	69bb      	ldr	r3, [r7, #24]
 8009f08:	3b01      	subs	r3, #1
 8009f0a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	689a      	ldr	r2, [r3, #8]
 8009f12:	68bb      	ldr	r3, [r7, #8]
 8009f14:	4013      	ands	r3, r2
 8009f16:	687a      	ldr	r2, [r7, #4]
 8009f18:	429a      	cmp	r2, r3
 8009f1a:	d196      	bne.n	8009e4a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8009f1c:	2300      	movs	r3, #0
}
 8009f1e:	4618      	mov	r0, r3
 8009f20:	3728      	adds	r7, #40	@ 0x28
 8009f22:	46bd      	mov	sp, r7
 8009f24:	bd80      	pop	{r7, pc}
 8009f26:	bf00      	nop
 8009f28:	2000020c 	.word	0x2000020c

08009f2c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009f2c:	b580      	push	{r7, lr}
 8009f2e:	b086      	sub	sp, #24
 8009f30:	af02      	add	r7, sp, #8
 8009f32:	60f8      	str	r0, [r7, #12]
 8009f34:	60b9      	str	r1, [r7, #8]
 8009f36:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	9300      	str	r3, [sp, #0]
 8009f3c:	68bb      	ldr	r3, [r7, #8]
 8009f3e:	2200      	movs	r2, #0
 8009f40:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8009f44:	68f8      	ldr	r0, [r7, #12]
 8009f46:	f7ff ff5b 	bl	8009e00 <SPI_WaitFifoStateUntilTimeout>
 8009f4a:	4603      	mov	r3, r0
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d007      	beq.n	8009f60 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009f54:	f043 0220 	orr.w	r2, r3, #32
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8009f5c:	2303      	movs	r3, #3
 8009f5e:	e027      	b.n	8009fb0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	9300      	str	r3, [sp, #0]
 8009f64:	68bb      	ldr	r3, [r7, #8]
 8009f66:	2200      	movs	r2, #0
 8009f68:	2180      	movs	r1, #128	@ 0x80
 8009f6a:	68f8      	ldr	r0, [r7, #12]
 8009f6c:	f7ff fec0 	bl	8009cf0 <SPI_WaitFlagStateUntilTimeout>
 8009f70:	4603      	mov	r3, r0
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d007      	beq.n	8009f86 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009f7a:	f043 0220 	orr.w	r2, r3, #32
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8009f82:	2303      	movs	r3, #3
 8009f84:	e014      	b.n	8009fb0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	9300      	str	r3, [sp, #0]
 8009f8a:	68bb      	ldr	r3, [r7, #8]
 8009f8c:	2200      	movs	r2, #0
 8009f8e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8009f92:	68f8      	ldr	r0, [r7, #12]
 8009f94:	f7ff ff34 	bl	8009e00 <SPI_WaitFifoStateUntilTimeout>
 8009f98:	4603      	mov	r3, r0
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d007      	beq.n	8009fae <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009fa2:	f043 0220 	orr.w	r2, r3, #32
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8009faa:	2303      	movs	r3, #3
 8009fac:	e000      	b.n	8009fb0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8009fae:	2300      	movs	r3, #0
}
 8009fb0:	4618      	mov	r0, r3
 8009fb2:	3710      	adds	r7, #16
 8009fb4:	46bd      	mov	sp, r7
 8009fb6:	bd80      	pop	{r7, pc}

08009fb8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009fb8:	b580      	push	{r7, lr}
 8009fba:	b082      	sub	sp, #8
 8009fbc:	af00      	add	r7, sp, #0
 8009fbe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d101      	bne.n	8009fca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009fc6:	2301      	movs	r3, #1
 8009fc8:	e054      	b.n	800a074 <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009fd0:	b2db      	uxtb	r3, r3
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d111      	bne.n	8009ffa <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	2200      	movs	r2, #0
 8009fda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8009fde:	6878      	ldr	r0, [r7, #4]
 8009fe0:	f001 ffd4 	bl	800bf8c <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d102      	bne.n	8009ff2 <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	4a23      	ldr	r2, [pc, #140]	@ (800a07c <HAL_TIM_Base_Init+0xc4>)
 8009ff0:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009ff6:	6878      	ldr	r0, [r7, #4]
 8009ff8:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	2202      	movs	r2, #2
 8009ffe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	681a      	ldr	r2, [r3, #0]
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	3304      	adds	r3, #4
 800a00a:	4619      	mov	r1, r3
 800a00c:	4610      	mov	r0, r2
 800a00e:	f001 fb1d 	bl	800b64c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	2201      	movs	r2, #1
 800a016:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	2201      	movs	r2, #1
 800a01e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	2201      	movs	r2, #1
 800a026:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	2201      	movs	r2, #1
 800a02e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	2201      	movs	r2, #1
 800a036:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	2201      	movs	r2, #1
 800a03e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	2201      	movs	r2, #1
 800a046:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	2201      	movs	r2, #1
 800a04e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	2201      	movs	r2, #1
 800a056:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	2201      	movs	r2, #1
 800a05e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	2201      	movs	r2, #1
 800a066:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	2201      	movs	r2, #1
 800a06e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a072:	2300      	movs	r3, #0
}
 800a074:	4618      	mov	r0, r3
 800a076:	3708      	adds	r7, #8
 800a078:	46bd      	mov	sp, r7
 800a07a:	bd80      	pop	{r7, pc}
 800a07c:	08005fa1 	.word	0x08005fa1

0800a080 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800a080:	b480      	push	{r7}
 800a082:	b085      	sub	sp, #20
 800a084:	af00      	add	r7, sp, #0
 800a086:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a08e:	b2db      	uxtb	r3, r3
 800a090:	2b01      	cmp	r3, #1
 800a092:	d001      	beq.n	800a098 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800a094:	2301      	movs	r3, #1
 800a096:	e04c      	b.n	800a132 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	2202      	movs	r2, #2
 800a09c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	4a26      	ldr	r2, [pc, #152]	@ (800a140 <HAL_TIM_Base_Start+0xc0>)
 800a0a6:	4293      	cmp	r3, r2
 800a0a8:	d022      	beq.n	800a0f0 <HAL_TIM_Base_Start+0x70>
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a0b2:	d01d      	beq.n	800a0f0 <HAL_TIM_Base_Start+0x70>
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	4a22      	ldr	r2, [pc, #136]	@ (800a144 <HAL_TIM_Base_Start+0xc4>)
 800a0ba:	4293      	cmp	r3, r2
 800a0bc:	d018      	beq.n	800a0f0 <HAL_TIM_Base_Start+0x70>
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	4a21      	ldr	r2, [pc, #132]	@ (800a148 <HAL_TIM_Base_Start+0xc8>)
 800a0c4:	4293      	cmp	r3, r2
 800a0c6:	d013      	beq.n	800a0f0 <HAL_TIM_Base_Start+0x70>
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	4a1f      	ldr	r2, [pc, #124]	@ (800a14c <HAL_TIM_Base_Start+0xcc>)
 800a0ce:	4293      	cmp	r3, r2
 800a0d0:	d00e      	beq.n	800a0f0 <HAL_TIM_Base_Start+0x70>
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	4a1e      	ldr	r2, [pc, #120]	@ (800a150 <HAL_TIM_Base_Start+0xd0>)
 800a0d8:	4293      	cmp	r3, r2
 800a0da:	d009      	beq.n	800a0f0 <HAL_TIM_Base_Start+0x70>
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	4a1c      	ldr	r2, [pc, #112]	@ (800a154 <HAL_TIM_Base_Start+0xd4>)
 800a0e2:	4293      	cmp	r3, r2
 800a0e4:	d004      	beq.n	800a0f0 <HAL_TIM_Base_Start+0x70>
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	4a1b      	ldr	r2, [pc, #108]	@ (800a158 <HAL_TIM_Base_Start+0xd8>)
 800a0ec:	4293      	cmp	r3, r2
 800a0ee:	d115      	bne.n	800a11c <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	689a      	ldr	r2, [r3, #8]
 800a0f6:	4b19      	ldr	r3, [pc, #100]	@ (800a15c <HAL_TIM_Base_Start+0xdc>)
 800a0f8:	4013      	ands	r3, r2
 800a0fa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	2b06      	cmp	r3, #6
 800a100:	d015      	beq.n	800a12e <HAL_TIM_Base_Start+0xae>
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a108:	d011      	beq.n	800a12e <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	681a      	ldr	r2, [r3, #0]
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	f042 0201 	orr.w	r2, r2, #1
 800a118:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a11a:	e008      	b.n	800a12e <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	681a      	ldr	r2, [r3, #0]
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	f042 0201 	orr.w	r2, r2, #1
 800a12a:	601a      	str	r2, [r3, #0]
 800a12c:	e000      	b.n	800a130 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a12e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a130:	2300      	movs	r3, #0
}
 800a132:	4618      	mov	r0, r3
 800a134:	3714      	adds	r7, #20
 800a136:	46bd      	mov	sp, r7
 800a138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a13c:	4770      	bx	lr
 800a13e:	bf00      	nop
 800a140:	40012c00 	.word	0x40012c00
 800a144:	40000400 	.word	0x40000400
 800a148:	40000800 	.word	0x40000800
 800a14c:	40000c00 	.word	0x40000c00
 800a150:	40013400 	.word	0x40013400
 800a154:	40014000 	.word	0x40014000
 800a158:	40015000 	.word	0x40015000
 800a15c:	00010007 	.word	0x00010007

0800a160 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a160:	b480      	push	{r7}
 800a162:	b085      	sub	sp, #20
 800a164:	af00      	add	r7, sp, #0
 800a166:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a16e:	b2db      	uxtb	r3, r3
 800a170:	2b01      	cmp	r3, #1
 800a172:	d001      	beq.n	800a178 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a174:	2301      	movs	r3, #1
 800a176:	e054      	b.n	800a222 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	2202      	movs	r2, #2
 800a17c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	68da      	ldr	r2, [r3, #12]
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	f042 0201 	orr.w	r2, r2, #1
 800a18e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	4a26      	ldr	r2, [pc, #152]	@ (800a230 <HAL_TIM_Base_Start_IT+0xd0>)
 800a196:	4293      	cmp	r3, r2
 800a198:	d022      	beq.n	800a1e0 <HAL_TIM_Base_Start_IT+0x80>
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a1a2:	d01d      	beq.n	800a1e0 <HAL_TIM_Base_Start_IT+0x80>
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	4a22      	ldr	r2, [pc, #136]	@ (800a234 <HAL_TIM_Base_Start_IT+0xd4>)
 800a1aa:	4293      	cmp	r3, r2
 800a1ac:	d018      	beq.n	800a1e0 <HAL_TIM_Base_Start_IT+0x80>
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	4a21      	ldr	r2, [pc, #132]	@ (800a238 <HAL_TIM_Base_Start_IT+0xd8>)
 800a1b4:	4293      	cmp	r3, r2
 800a1b6:	d013      	beq.n	800a1e0 <HAL_TIM_Base_Start_IT+0x80>
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	4a1f      	ldr	r2, [pc, #124]	@ (800a23c <HAL_TIM_Base_Start_IT+0xdc>)
 800a1be:	4293      	cmp	r3, r2
 800a1c0:	d00e      	beq.n	800a1e0 <HAL_TIM_Base_Start_IT+0x80>
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	4a1e      	ldr	r2, [pc, #120]	@ (800a240 <HAL_TIM_Base_Start_IT+0xe0>)
 800a1c8:	4293      	cmp	r3, r2
 800a1ca:	d009      	beq.n	800a1e0 <HAL_TIM_Base_Start_IT+0x80>
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	4a1c      	ldr	r2, [pc, #112]	@ (800a244 <HAL_TIM_Base_Start_IT+0xe4>)
 800a1d2:	4293      	cmp	r3, r2
 800a1d4:	d004      	beq.n	800a1e0 <HAL_TIM_Base_Start_IT+0x80>
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	4a1b      	ldr	r2, [pc, #108]	@ (800a248 <HAL_TIM_Base_Start_IT+0xe8>)
 800a1dc:	4293      	cmp	r3, r2
 800a1de:	d115      	bne.n	800a20c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	689a      	ldr	r2, [r3, #8]
 800a1e6:	4b19      	ldr	r3, [pc, #100]	@ (800a24c <HAL_TIM_Base_Start_IT+0xec>)
 800a1e8:	4013      	ands	r3, r2
 800a1ea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	2b06      	cmp	r3, #6
 800a1f0:	d015      	beq.n	800a21e <HAL_TIM_Base_Start_IT+0xbe>
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a1f8:	d011      	beq.n	800a21e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	681a      	ldr	r2, [r3, #0]
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	f042 0201 	orr.w	r2, r2, #1
 800a208:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a20a:	e008      	b.n	800a21e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	681a      	ldr	r2, [r3, #0]
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	f042 0201 	orr.w	r2, r2, #1
 800a21a:	601a      	str	r2, [r3, #0]
 800a21c:	e000      	b.n	800a220 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a21e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a220:	2300      	movs	r3, #0
}
 800a222:	4618      	mov	r0, r3
 800a224:	3714      	adds	r7, #20
 800a226:	46bd      	mov	sp, r7
 800a228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a22c:	4770      	bx	lr
 800a22e:	bf00      	nop
 800a230:	40012c00 	.word	0x40012c00
 800a234:	40000400 	.word	0x40000400
 800a238:	40000800 	.word	0x40000800
 800a23c:	40000c00 	.word	0x40000c00
 800a240:	40013400 	.word	0x40013400
 800a244:	40014000 	.word	0x40014000
 800a248:	40015000 	.word	0x40015000
 800a24c:	00010007 	.word	0x00010007

0800a250 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800a250:	b580      	push	{r7, lr}
 800a252:	b082      	sub	sp, #8
 800a254:	af00      	add	r7, sp, #0
 800a256:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d101      	bne.n	800a262 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800a25e:	2301      	movs	r3, #1
 800a260:	e054      	b.n	800a30c <HAL_TIM_OC_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a268:	b2db      	uxtb	r3, r3
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d111      	bne.n	800a292 <HAL_TIM_OC_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	2200      	movs	r2, #0
 800a272:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800a276:	6878      	ldr	r0, [r7, #4]
 800a278:	f001 fe88 	bl	800bf8c <TIM_ResetCallback>

    if (htim->OC_MspInitCallback == NULL)
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a280:	2b00      	cmp	r3, #0
 800a282:	d102      	bne.n	800a28a <HAL_TIM_OC_Init+0x3a>
    {
      htim->OC_MspInitCallback = HAL_TIM_OC_MspInit;
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	4a23      	ldr	r2, [pc, #140]	@ (800a314 <HAL_TIM_OC_Init+0xc4>)
 800a288:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a28e:	6878      	ldr	r0, [r7, #4]
 800a290:	4798      	blx	r3
    HAL_TIM_OC_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	2202      	movs	r2, #2
 800a296:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	681a      	ldr	r2, [r3, #0]
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	3304      	adds	r3, #4
 800a2a2:	4619      	mov	r1, r3
 800a2a4:	4610      	mov	r0, r2
 800a2a6:	f001 f9d1 	bl	800b64c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	2201      	movs	r2, #1
 800a2ae:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	2201      	movs	r2, #1
 800a2b6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	2201      	movs	r2, #1
 800a2be:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	2201      	movs	r2, #1
 800a2c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	2201      	movs	r2, #1
 800a2ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	2201      	movs	r2, #1
 800a2d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	2201      	movs	r2, #1
 800a2de:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	2201      	movs	r2, #1
 800a2e6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	2201      	movs	r2, #1
 800a2ee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	2201      	movs	r2, #1
 800a2f6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	2201      	movs	r2, #1
 800a2fe:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	2201      	movs	r2, #1
 800a306:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a30a:	2300      	movs	r3, #0
}
 800a30c:	4618      	mov	r0, r3
 800a30e:	3708      	adds	r7, #8
 800a310:	46bd      	mov	sp, r7
 800a312:	bd80      	pop	{r7, pc}
 800a314:	0800a319 	.word	0x0800a319

0800a318 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800a318:	b480      	push	{r7}
 800a31a:	b083      	sub	sp, #12
 800a31c:	af00      	add	r7, sp, #0
 800a31e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800a320:	bf00      	nop
 800a322:	370c      	adds	r7, #12
 800a324:	46bd      	mov	sp, r7
 800a326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a32a:	4770      	bx	lr

0800a32c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a32c:	b580      	push	{r7, lr}
 800a32e:	b082      	sub	sp, #8
 800a330:	af00      	add	r7, sp, #0
 800a332:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	2b00      	cmp	r3, #0
 800a338:	d101      	bne.n	800a33e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a33a:	2301      	movs	r3, #1
 800a33c:	e054      	b.n	800a3e8 <HAL_TIM_PWM_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a344:	b2db      	uxtb	r3, r3
 800a346:	2b00      	cmp	r3, #0
 800a348:	d111      	bne.n	800a36e <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	2200      	movs	r2, #0
 800a34e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800a352:	6878      	ldr	r0, [r7, #4]
 800a354:	f001 fe1a 	bl	800bf8c <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d102      	bne.n	800a366 <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	4a23      	ldr	r2, [pc, #140]	@ (800a3f0 <HAL_TIM_PWM_Init+0xc4>)
 800a364:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a36a:	6878      	ldr	r0, [r7, #4]
 800a36c:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	2202      	movs	r2, #2
 800a372:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	681a      	ldr	r2, [r3, #0]
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	3304      	adds	r3, #4
 800a37e:	4619      	mov	r1, r3
 800a380:	4610      	mov	r0, r2
 800a382:	f001 f963 	bl	800b64c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	2201      	movs	r2, #1
 800a38a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	2201      	movs	r2, #1
 800a392:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	2201      	movs	r2, #1
 800a39a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	2201      	movs	r2, #1
 800a3a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	2201      	movs	r2, #1
 800a3aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	2201      	movs	r2, #1
 800a3b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	2201      	movs	r2, #1
 800a3ba:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	2201      	movs	r2, #1
 800a3c2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	2201      	movs	r2, #1
 800a3ca:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	2201      	movs	r2, #1
 800a3d2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	2201      	movs	r2, #1
 800a3da:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	2201      	movs	r2, #1
 800a3e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a3e6:	2300      	movs	r3, #0
}
 800a3e8:	4618      	mov	r0, r3
 800a3ea:	3708      	adds	r7, #8
 800a3ec:	46bd      	mov	sp, r7
 800a3ee:	bd80      	pop	{r7, pc}
 800a3f0:	0800a3f5 	.word	0x0800a3f5

0800a3f4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800a3f4:	b480      	push	{r7}
 800a3f6:	b083      	sub	sp, #12
 800a3f8:	af00      	add	r7, sp, #0
 800a3fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800a3fc:	bf00      	nop
 800a3fe:	370c      	adds	r7, #12
 800a400:	46bd      	mov	sp, r7
 800a402:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a406:	4770      	bx	lr

0800a408 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a408:	b580      	push	{r7, lr}
 800a40a:	b084      	sub	sp, #16
 800a40c:	af00      	add	r7, sp, #0
 800a40e:	6078      	str	r0, [r7, #4]
 800a410:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a412:	683b      	ldr	r3, [r7, #0]
 800a414:	2b00      	cmp	r3, #0
 800a416:	d109      	bne.n	800a42c <HAL_TIM_PWM_Start+0x24>
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800a41e:	b2db      	uxtb	r3, r3
 800a420:	2b01      	cmp	r3, #1
 800a422:	bf14      	ite	ne
 800a424:	2301      	movne	r3, #1
 800a426:	2300      	moveq	r3, #0
 800a428:	b2db      	uxtb	r3, r3
 800a42a:	e03c      	b.n	800a4a6 <HAL_TIM_PWM_Start+0x9e>
 800a42c:	683b      	ldr	r3, [r7, #0]
 800a42e:	2b04      	cmp	r3, #4
 800a430:	d109      	bne.n	800a446 <HAL_TIM_PWM_Start+0x3e>
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800a438:	b2db      	uxtb	r3, r3
 800a43a:	2b01      	cmp	r3, #1
 800a43c:	bf14      	ite	ne
 800a43e:	2301      	movne	r3, #1
 800a440:	2300      	moveq	r3, #0
 800a442:	b2db      	uxtb	r3, r3
 800a444:	e02f      	b.n	800a4a6 <HAL_TIM_PWM_Start+0x9e>
 800a446:	683b      	ldr	r3, [r7, #0]
 800a448:	2b08      	cmp	r3, #8
 800a44a:	d109      	bne.n	800a460 <HAL_TIM_PWM_Start+0x58>
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a452:	b2db      	uxtb	r3, r3
 800a454:	2b01      	cmp	r3, #1
 800a456:	bf14      	ite	ne
 800a458:	2301      	movne	r3, #1
 800a45a:	2300      	moveq	r3, #0
 800a45c:	b2db      	uxtb	r3, r3
 800a45e:	e022      	b.n	800a4a6 <HAL_TIM_PWM_Start+0x9e>
 800a460:	683b      	ldr	r3, [r7, #0]
 800a462:	2b0c      	cmp	r3, #12
 800a464:	d109      	bne.n	800a47a <HAL_TIM_PWM_Start+0x72>
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a46c:	b2db      	uxtb	r3, r3
 800a46e:	2b01      	cmp	r3, #1
 800a470:	bf14      	ite	ne
 800a472:	2301      	movne	r3, #1
 800a474:	2300      	moveq	r3, #0
 800a476:	b2db      	uxtb	r3, r3
 800a478:	e015      	b.n	800a4a6 <HAL_TIM_PWM_Start+0x9e>
 800a47a:	683b      	ldr	r3, [r7, #0]
 800a47c:	2b10      	cmp	r3, #16
 800a47e:	d109      	bne.n	800a494 <HAL_TIM_PWM_Start+0x8c>
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a486:	b2db      	uxtb	r3, r3
 800a488:	2b01      	cmp	r3, #1
 800a48a:	bf14      	ite	ne
 800a48c:	2301      	movne	r3, #1
 800a48e:	2300      	moveq	r3, #0
 800a490:	b2db      	uxtb	r3, r3
 800a492:	e008      	b.n	800a4a6 <HAL_TIM_PWM_Start+0x9e>
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800a49a:	b2db      	uxtb	r3, r3
 800a49c:	2b01      	cmp	r3, #1
 800a49e:	bf14      	ite	ne
 800a4a0:	2301      	movne	r3, #1
 800a4a2:	2300      	moveq	r3, #0
 800a4a4:	b2db      	uxtb	r3, r3
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d001      	beq.n	800a4ae <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800a4aa:	2301      	movs	r3, #1
 800a4ac:	e0a6      	b.n	800a5fc <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a4ae:	683b      	ldr	r3, [r7, #0]
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d104      	bne.n	800a4be <HAL_TIM_PWM_Start+0xb6>
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	2202      	movs	r2, #2
 800a4b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a4bc:	e023      	b.n	800a506 <HAL_TIM_PWM_Start+0xfe>
 800a4be:	683b      	ldr	r3, [r7, #0]
 800a4c0:	2b04      	cmp	r3, #4
 800a4c2:	d104      	bne.n	800a4ce <HAL_TIM_PWM_Start+0xc6>
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	2202      	movs	r2, #2
 800a4c8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a4cc:	e01b      	b.n	800a506 <HAL_TIM_PWM_Start+0xfe>
 800a4ce:	683b      	ldr	r3, [r7, #0]
 800a4d0:	2b08      	cmp	r3, #8
 800a4d2:	d104      	bne.n	800a4de <HAL_TIM_PWM_Start+0xd6>
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	2202      	movs	r2, #2
 800a4d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a4dc:	e013      	b.n	800a506 <HAL_TIM_PWM_Start+0xfe>
 800a4de:	683b      	ldr	r3, [r7, #0]
 800a4e0:	2b0c      	cmp	r3, #12
 800a4e2:	d104      	bne.n	800a4ee <HAL_TIM_PWM_Start+0xe6>
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	2202      	movs	r2, #2
 800a4e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a4ec:	e00b      	b.n	800a506 <HAL_TIM_PWM_Start+0xfe>
 800a4ee:	683b      	ldr	r3, [r7, #0]
 800a4f0:	2b10      	cmp	r3, #16
 800a4f2:	d104      	bne.n	800a4fe <HAL_TIM_PWM_Start+0xf6>
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	2202      	movs	r2, #2
 800a4f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a4fc:	e003      	b.n	800a506 <HAL_TIM_PWM_Start+0xfe>
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	2202      	movs	r2, #2
 800a502:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	2201      	movs	r2, #1
 800a50c:	6839      	ldr	r1, [r7, #0]
 800a50e:	4618      	mov	r0, r3
 800a510:	f001 fd16 	bl	800bf40 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	4a3a      	ldr	r2, [pc, #232]	@ (800a604 <HAL_TIM_PWM_Start+0x1fc>)
 800a51a:	4293      	cmp	r3, r2
 800a51c:	d018      	beq.n	800a550 <HAL_TIM_PWM_Start+0x148>
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	4a39      	ldr	r2, [pc, #228]	@ (800a608 <HAL_TIM_PWM_Start+0x200>)
 800a524:	4293      	cmp	r3, r2
 800a526:	d013      	beq.n	800a550 <HAL_TIM_PWM_Start+0x148>
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	4a37      	ldr	r2, [pc, #220]	@ (800a60c <HAL_TIM_PWM_Start+0x204>)
 800a52e:	4293      	cmp	r3, r2
 800a530:	d00e      	beq.n	800a550 <HAL_TIM_PWM_Start+0x148>
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	4a36      	ldr	r2, [pc, #216]	@ (800a610 <HAL_TIM_PWM_Start+0x208>)
 800a538:	4293      	cmp	r3, r2
 800a53a:	d009      	beq.n	800a550 <HAL_TIM_PWM_Start+0x148>
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	4a34      	ldr	r2, [pc, #208]	@ (800a614 <HAL_TIM_PWM_Start+0x20c>)
 800a542:	4293      	cmp	r3, r2
 800a544:	d004      	beq.n	800a550 <HAL_TIM_PWM_Start+0x148>
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	4a33      	ldr	r2, [pc, #204]	@ (800a618 <HAL_TIM_PWM_Start+0x210>)
 800a54c:	4293      	cmp	r3, r2
 800a54e:	d101      	bne.n	800a554 <HAL_TIM_PWM_Start+0x14c>
 800a550:	2301      	movs	r3, #1
 800a552:	e000      	b.n	800a556 <HAL_TIM_PWM_Start+0x14e>
 800a554:	2300      	movs	r3, #0
 800a556:	2b00      	cmp	r3, #0
 800a558:	d007      	beq.n	800a56a <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a568:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	4a25      	ldr	r2, [pc, #148]	@ (800a604 <HAL_TIM_PWM_Start+0x1fc>)
 800a570:	4293      	cmp	r3, r2
 800a572:	d022      	beq.n	800a5ba <HAL_TIM_PWM_Start+0x1b2>
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a57c:	d01d      	beq.n	800a5ba <HAL_TIM_PWM_Start+0x1b2>
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	4a26      	ldr	r2, [pc, #152]	@ (800a61c <HAL_TIM_PWM_Start+0x214>)
 800a584:	4293      	cmp	r3, r2
 800a586:	d018      	beq.n	800a5ba <HAL_TIM_PWM_Start+0x1b2>
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	4a24      	ldr	r2, [pc, #144]	@ (800a620 <HAL_TIM_PWM_Start+0x218>)
 800a58e:	4293      	cmp	r3, r2
 800a590:	d013      	beq.n	800a5ba <HAL_TIM_PWM_Start+0x1b2>
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	4a23      	ldr	r2, [pc, #140]	@ (800a624 <HAL_TIM_PWM_Start+0x21c>)
 800a598:	4293      	cmp	r3, r2
 800a59a:	d00e      	beq.n	800a5ba <HAL_TIM_PWM_Start+0x1b2>
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	4a19      	ldr	r2, [pc, #100]	@ (800a608 <HAL_TIM_PWM_Start+0x200>)
 800a5a2:	4293      	cmp	r3, r2
 800a5a4:	d009      	beq.n	800a5ba <HAL_TIM_PWM_Start+0x1b2>
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	4a18      	ldr	r2, [pc, #96]	@ (800a60c <HAL_TIM_PWM_Start+0x204>)
 800a5ac:	4293      	cmp	r3, r2
 800a5ae:	d004      	beq.n	800a5ba <HAL_TIM_PWM_Start+0x1b2>
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	4a18      	ldr	r2, [pc, #96]	@ (800a618 <HAL_TIM_PWM_Start+0x210>)
 800a5b6:	4293      	cmp	r3, r2
 800a5b8:	d115      	bne.n	800a5e6 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	689a      	ldr	r2, [r3, #8]
 800a5c0:	4b19      	ldr	r3, [pc, #100]	@ (800a628 <HAL_TIM_PWM_Start+0x220>)
 800a5c2:	4013      	ands	r3, r2
 800a5c4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	2b06      	cmp	r3, #6
 800a5ca:	d015      	beq.n	800a5f8 <HAL_TIM_PWM_Start+0x1f0>
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a5d2:	d011      	beq.n	800a5f8 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	681a      	ldr	r2, [r3, #0]
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	f042 0201 	orr.w	r2, r2, #1
 800a5e2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a5e4:	e008      	b.n	800a5f8 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	681a      	ldr	r2, [r3, #0]
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	f042 0201 	orr.w	r2, r2, #1
 800a5f4:	601a      	str	r2, [r3, #0]
 800a5f6:	e000      	b.n	800a5fa <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a5f8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a5fa:	2300      	movs	r3, #0
}
 800a5fc:	4618      	mov	r0, r3
 800a5fe:	3710      	adds	r7, #16
 800a600:	46bd      	mov	sp, r7
 800a602:	bd80      	pop	{r7, pc}
 800a604:	40012c00 	.word	0x40012c00
 800a608:	40013400 	.word	0x40013400
 800a60c:	40014000 	.word	0x40014000
 800a610:	40014400 	.word	0x40014400
 800a614:	40014800 	.word	0x40014800
 800a618:	40015000 	.word	0x40015000
 800a61c:	40000400 	.word	0x40000400
 800a620:	40000800 	.word	0x40000800
 800a624:	40000c00 	.word	0x40000c00
 800a628:	00010007 	.word	0x00010007

0800a62c <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 800a62c:	b580      	push	{r7, lr}
 800a62e:	b082      	sub	sp, #8
 800a630:	af00      	add	r7, sp, #0
 800a632:	6078      	str	r0, [r7, #4]
 800a634:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d101      	bne.n	800a640 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 800a63c:	2301      	movs	r3, #1
 800a63e:	e04c      	b.n	800a6da <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a646:	b2db      	uxtb	r3, r3
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d111      	bne.n	800a670 <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	2200      	movs	r2, #0
 800a650:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800a654:	6878      	ldr	r0, [r7, #4]
 800a656:	f001 fc99 	bl	800bf8c <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d102      	bne.n	800a668 <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	4a1f      	ldr	r2, [pc, #124]	@ (800a6e4 <HAL_TIM_OnePulse_Init+0xb8>)
 800a666:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a66c:	6878      	ldr	r0, [r7, #4]
 800a66e:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	2202      	movs	r2, #2
 800a674:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	681a      	ldr	r2, [r3, #0]
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	3304      	adds	r3, #4
 800a680:	4619      	mov	r1, r3
 800a682:	4610      	mov	r0, r2
 800a684:	f000 ffe2 	bl	800b64c <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	681a      	ldr	r2, [r3, #0]
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	f022 0208 	bic.w	r2, r2, #8
 800a696:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	6819      	ldr	r1, [r3, #0]
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	683a      	ldr	r2, [r7, #0]
 800a6a4:	430a      	orrs	r2, r1
 800a6a6:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	2201      	movs	r2, #1
 800a6ac:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	2201      	movs	r2, #1
 800a6b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	2201      	movs	r2, #1
 800a6bc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	2201      	movs	r2, #1
 800a6c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	2201      	movs	r2, #1
 800a6cc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	2201      	movs	r2, #1
 800a6d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a6d8:	2300      	movs	r3, #0
}
 800a6da:	4618      	mov	r0, r3
 800a6dc:	3708      	adds	r7, #8
 800a6de:	46bd      	mov	sp, r7
 800a6e0:	bd80      	pop	{r7, pc}
 800a6e2:	bf00      	nop
 800a6e4:	0800a6e9 	.word	0x0800a6e9

0800a6e8 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 800a6e8:	b480      	push	{r7}
 800a6ea:	b083      	sub	sp, #12
 800a6ec:	af00      	add	r7, sp, #0
 800a6ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 800a6f0:	bf00      	nop
 800a6f2:	370c      	adds	r7, #12
 800a6f4:	46bd      	mov	sp, r7
 800a6f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6fa:	4770      	bx	lr

0800a6fc <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 800a6fc:	b580      	push	{r7, lr}
 800a6fe:	b084      	sub	sp, #16
 800a700:	af00      	add	r7, sp, #0
 800a702:	6078      	str	r0, [r7, #4]
 800a704:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800a70c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800a714:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a71c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a724:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800a726:	7bfb      	ldrb	r3, [r7, #15]
 800a728:	2b01      	cmp	r3, #1
 800a72a:	d108      	bne.n	800a73e <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800a72c:	7bbb      	ldrb	r3, [r7, #14]
 800a72e:	2b01      	cmp	r3, #1
 800a730:	d105      	bne.n	800a73e <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800a732:	7b7b      	ldrb	r3, [r7, #13]
 800a734:	2b01      	cmp	r3, #1
 800a736:	d102      	bne.n	800a73e <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800a738:	7b3b      	ldrb	r3, [r7, #12]
 800a73a:	2b01      	cmp	r3, #1
 800a73c:	d001      	beq.n	800a742 <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 800a73e:	2301      	movs	r3, #1
 800a740:	e059      	b.n	800a7f6 <HAL_TIM_OnePulse_Start_IT+0xfa>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	2202      	movs	r2, #2
 800a746:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	2202      	movs	r2, #2
 800a74e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	2202      	movs	r2, #2
 800a756:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	2202      	movs	r2, #2
 800a75e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	68da      	ldr	r2, [r3, #12]
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	f042 0202 	orr.w	r2, r2, #2
 800a770:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	68da      	ldr	r2, [r3, #12]
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	f042 0204 	orr.w	r2, r2, #4
 800a780:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	2201      	movs	r2, #1
 800a788:	2100      	movs	r1, #0
 800a78a:	4618      	mov	r0, r3
 800a78c:	f001 fbd8 	bl	800bf40 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	2201      	movs	r2, #1
 800a796:	2104      	movs	r1, #4
 800a798:	4618      	mov	r0, r3
 800a79a:	f001 fbd1 	bl	800bf40 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	4a17      	ldr	r2, [pc, #92]	@ (800a800 <HAL_TIM_OnePulse_Start_IT+0x104>)
 800a7a4:	4293      	cmp	r3, r2
 800a7a6:	d018      	beq.n	800a7da <HAL_TIM_OnePulse_Start_IT+0xde>
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	4a15      	ldr	r2, [pc, #84]	@ (800a804 <HAL_TIM_OnePulse_Start_IT+0x108>)
 800a7ae:	4293      	cmp	r3, r2
 800a7b0:	d013      	beq.n	800a7da <HAL_TIM_OnePulse_Start_IT+0xde>
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	4a14      	ldr	r2, [pc, #80]	@ (800a808 <HAL_TIM_OnePulse_Start_IT+0x10c>)
 800a7b8:	4293      	cmp	r3, r2
 800a7ba:	d00e      	beq.n	800a7da <HAL_TIM_OnePulse_Start_IT+0xde>
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	4a12      	ldr	r2, [pc, #72]	@ (800a80c <HAL_TIM_OnePulse_Start_IT+0x110>)
 800a7c2:	4293      	cmp	r3, r2
 800a7c4:	d009      	beq.n	800a7da <HAL_TIM_OnePulse_Start_IT+0xde>
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	4a11      	ldr	r2, [pc, #68]	@ (800a810 <HAL_TIM_OnePulse_Start_IT+0x114>)
 800a7cc:	4293      	cmp	r3, r2
 800a7ce:	d004      	beq.n	800a7da <HAL_TIM_OnePulse_Start_IT+0xde>
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	4a0f      	ldr	r2, [pc, #60]	@ (800a814 <HAL_TIM_OnePulse_Start_IT+0x118>)
 800a7d6:	4293      	cmp	r3, r2
 800a7d8:	d101      	bne.n	800a7de <HAL_TIM_OnePulse_Start_IT+0xe2>
 800a7da:	2301      	movs	r3, #1
 800a7dc:	e000      	b.n	800a7e0 <HAL_TIM_OnePulse_Start_IT+0xe4>
 800a7de:	2300      	movs	r3, #0
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d007      	beq.n	800a7f4 <HAL_TIM_OnePulse_Start_IT+0xf8>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a7f2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 800a7f4:	2300      	movs	r3, #0
}
 800a7f6:	4618      	mov	r0, r3
 800a7f8:	3710      	adds	r7, #16
 800a7fa:	46bd      	mov	sp, r7
 800a7fc:	bd80      	pop	{r7, pc}
 800a7fe:	bf00      	nop
 800a800:	40012c00 	.word	0x40012c00
 800a804:	40013400 	.word	0x40013400
 800a808:	40014000 	.word	0x40014000
 800a80c:	40014400 	.word	0x40014400
 800a810:	40014800 	.word	0x40014800
 800a814:	40015000 	.word	0x40015000

0800a818 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800a818:	b580      	push	{r7, lr}
 800a81a:	b086      	sub	sp, #24
 800a81c:	af00      	add	r7, sp, #0
 800a81e:	6078      	str	r0, [r7, #4]
 800a820:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	2b00      	cmp	r3, #0
 800a826:	d101      	bne.n	800a82c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800a828:	2301      	movs	r3, #1
 800a82a:	e0a2      	b.n	800a972 <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a832:	b2db      	uxtb	r3, r3
 800a834:	2b00      	cmp	r3, #0
 800a836:	d111      	bne.n	800a85c <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	2200      	movs	r2, #0
 800a83c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800a840:	6878      	ldr	r0, [r7, #4]
 800a842:	f001 fba3 	bl	800bf8c <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d102      	bne.n	800a854 <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	4a4a      	ldr	r2, [pc, #296]	@ (800a97c <HAL_TIM_Encoder_Init+0x164>)
 800a852:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a858:	6878      	ldr	r0, [r7, #4]
 800a85a:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	2202      	movs	r2, #2
 800a860:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	689b      	ldr	r3, [r3, #8]
 800a86a:	687a      	ldr	r2, [r7, #4]
 800a86c:	6812      	ldr	r2, [r2, #0]
 800a86e:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 800a872:	f023 0307 	bic.w	r3, r3, #7
 800a876:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	681a      	ldr	r2, [r3, #0]
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	3304      	adds	r3, #4
 800a880:	4619      	mov	r1, r3
 800a882:	4610      	mov	r0, r2
 800a884:	f000 fee2 	bl	800b64c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	689b      	ldr	r3, [r3, #8]
 800a88e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	699b      	ldr	r3, [r3, #24]
 800a896:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	6a1b      	ldr	r3, [r3, #32]
 800a89e:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800a8a0:	683b      	ldr	r3, [r7, #0]
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	697a      	ldr	r2, [r7, #20]
 800a8a6:	4313      	orrs	r3, r2
 800a8a8:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800a8aa:	693b      	ldr	r3, [r7, #16]
 800a8ac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a8b0:	f023 0303 	bic.w	r3, r3, #3
 800a8b4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800a8b6:	683b      	ldr	r3, [r7, #0]
 800a8b8:	689a      	ldr	r2, [r3, #8]
 800a8ba:	683b      	ldr	r3, [r7, #0]
 800a8bc:	699b      	ldr	r3, [r3, #24]
 800a8be:	021b      	lsls	r3, r3, #8
 800a8c0:	4313      	orrs	r3, r2
 800a8c2:	693a      	ldr	r2, [r7, #16]
 800a8c4:	4313      	orrs	r3, r2
 800a8c6:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800a8c8:	693b      	ldr	r3, [r7, #16]
 800a8ca:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800a8ce:	f023 030c 	bic.w	r3, r3, #12
 800a8d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800a8d4:	693b      	ldr	r3, [r7, #16]
 800a8d6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a8da:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a8de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800a8e0:	683b      	ldr	r3, [r7, #0]
 800a8e2:	68da      	ldr	r2, [r3, #12]
 800a8e4:	683b      	ldr	r3, [r7, #0]
 800a8e6:	69db      	ldr	r3, [r3, #28]
 800a8e8:	021b      	lsls	r3, r3, #8
 800a8ea:	4313      	orrs	r3, r2
 800a8ec:	693a      	ldr	r2, [r7, #16]
 800a8ee:	4313      	orrs	r3, r2
 800a8f0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800a8f2:	683b      	ldr	r3, [r7, #0]
 800a8f4:	691b      	ldr	r3, [r3, #16]
 800a8f6:	011a      	lsls	r2, r3, #4
 800a8f8:	683b      	ldr	r3, [r7, #0]
 800a8fa:	6a1b      	ldr	r3, [r3, #32]
 800a8fc:	031b      	lsls	r3, r3, #12
 800a8fe:	4313      	orrs	r3, r2
 800a900:	693a      	ldr	r2, [r7, #16]
 800a902:	4313      	orrs	r3, r2
 800a904:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800a90c:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800a914:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800a916:	683b      	ldr	r3, [r7, #0]
 800a918:	685a      	ldr	r2, [r3, #4]
 800a91a:	683b      	ldr	r3, [r7, #0]
 800a91c:	695b      	ldr	r3, [r3, #20]
 800a91e:	011b      	lsls	r3, r3, #4
 800a920:	4313      	orrs	r3, r2
 800a922:	68fa      	ldr	r2, [r7, #12]
 800a924:	4313      	orrs	r3, r2
 800a926:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	697a      	ldr	r2, [r7, #20]
 800a92e:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	693a      	ldr	r2, [r7, #16]
 800a936:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	68fa      	ldr	r2, [r7, #12]
 800a93e:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	2201      	movs	r2, #1
 800a944:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	2201      	movs	r2, #1
 800a94c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	2201      	movs	r2, #1
 800a954:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	2201      	movs	r2, #1
 800a95c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	2201      	movs	r2, #1
 800a964:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	2201      	movs	r2, #1
 800a96c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a970:	2300      	movs	r3, #0
}
 800a972:	4618      	mov	r0, r3
 800a974:	3718      	adds	r7, #24
 800a976:	46bd      	mov	sp, r7
 800a978:	bd80      	pop	{r7, pc}
 800a97a:	bf00      	nop
 800a97c:	080060b9 	.word	0x080060b9

0800a980 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a980:	b580      	push	{r7, lr}
 800a982:	b084      	sub	sp, #16
 800a984:	af00      	add	r7, sp, #0
 800a986:	6078      	str	r0, [r7, #4]
 800a988:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800a990:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800a998:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a9a0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a9a8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800a9aa:	683b      	ldr	r3, [r7, #0]
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d110      	bne.n	800a9d2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800a9b0:	7bfb      	ldrb	r3, [r7, #15]
 800a9b2:	2b01      	cmp	r3, #1
 800a9b4:	d102      	bne.n	800a9bc <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800a9b6:	7b7b      	ldrb	r3, [r7, #13]
 800a9b8:	2b01      	cmp	r3, #1
 800a9ba:	d001      	beq.n	800a9c0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800a9bc:	2301      	movs	r3, #1
 800a9be:	e069      	b.n	800aa94 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	2202      	movs	r2, #2
 800a9c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	2202      	movs	r2, #2
 800a9cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a9d0:	e031      	b.n	800aa36 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800a9d2:	683b      	ldr	r3, [r7, #0]
 800a9d4:	2b04      	cmp	r3, #4
 800a9d6:	d110      	bne.n	800a9fa <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800a9d8:	7bbb      	ldrb	r3, [r7, #14]
 800a9da:	2b01      	cmp	r3, #1
 800a9dc:	d102      	bne.n	800a9e4 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800a9de:	7b3b      	ldrb	r3, [r7, #12]
 800a9e0:	2b01      	cmp	r3, #1
 800a9e2:	d001      	beq.n	800a9e8 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800a9e4:	2301      	movs	r3, #1
 800a9e6:	e055      	b.n	800aa94 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	2202      	movs	r2, #2
 800a9ec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	2202      	movs	r2, #2
 800a9f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a9f8:	e01d      	b.n	800aa36 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800a9fa:	7bfb      	ldrb	r3, [r7, #15]
 800a9fc:	2b01      	cmp	r3, #1
 800a9fe:	d108      	bne.n	800aa12 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800aa00:	7bbb      	ldrb	r3, [r7, #14]
 800aa02:	2b01      	cmp	r3, #1
 800aa04:	d105      	bne.n	800aa12 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800aa06:	7b7b      	ldrb	r3, [r7, #13]
 800aa08:	2b01      	cmp	r3, #1
 800aa0a:	d102      	bne.n	800aa12 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800aa0c:	7b3b      	ldrb	r3, [r7, #12]
 800aa0e:	2b01      	cmp	r3, #1
 800aa10:	d001      	beq.n	800aa16 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800aa12:	2301      	movs	r3, #1
 800aa14:	e03e      	b.n	800aa94 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	2202      	movs	r2, #2
 800aa1a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	2202      	movs	r2, #2
 800aa22:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	2202      	movs	r2, #2
 800aa2a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	2202      	movs	r2, #2
 800aa32:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800aa36:	683b      	ldr	r3, [r7, #0]
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d003      	beq.n	800aa44 <HAL_TIM_Encoder_Start+0xc4>
 800aa3c:	683b      	ldr	r3, [r7, #0]
 800aa3e:	2b04      	cmp	r3, #4
 800aa40:	d008      	beq.n	800aa54 <HAL_TIM_Encoder_Start+0xd4>
 800aa42:	e00f      	b.n	800aa64 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	2201      	movs	r2, #1
 800aa4a:	2100      	movs	r1, #0
 800aa4c:	4618      	mov	r0, r3
 800aa4e:	f001 fa77 	bl	800bf40 <TIM_CCxChannelCmd>
      break;
 800aa52:	e016      	b.n	800aa82 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	2201      	movs	r2, #1
 800aa5a:	2104      	movs	r1, #4
 800aa5c:	4618      	mov	r0, r3
 800aa5e:	f001 fa6f 	bl	800bf40 <TIM_CCxChannelCmd>
      break;
 800aa62:	e00e      	b.n	800aa82 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	2201      	movs	r2, #1
 800aa6a:	2100      	movs	r1, #0
 800aa6c:	4618      	mov	r0, r3
 800aa6e:	f001 fa67 	bl	800bf40 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	2201      	movs	r2, #1
 800aa78:	2104      	movs	r1, #4
 800aa7a:	4618      	mov	r0, r3
 800aa7c:	f001 fa60 	bl	800bf40 <TIM_CCxChannelCmd>
      break;
 800aa80:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	681a      	ldr	r2, [r3, #0]
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	f042 0201 	orr.w	r2, r2, #1
 800aa90:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800aa92:	2300      	movs	r3, #0
}
 800aa94:	4618      	mov	r0, r3
 800aa96:	3710      	adds	r7, #16
 800aa98:	46bd      	mov	sp, r7
 800aa9a:	bd80      	pop	{r7, pc}

0800aa9c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800aa9c:	b580      	push	{r7, lr}
 800aa9e:	b084      	sub	sp, #16
 800aaa0:	af00      	add	r7, sp, #0
 800aaa2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	68db      	ldr	r3, [r3, #12]
 800aaaa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	691b      	ldr	r3, [r3, #16]
 800aab2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800aab4:	68bb      	ldr	r3, [r7, #8]
 800aab6:	f003 0302 	and.w	r3, r3, #2
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d026      	beq.n	800ab0c <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	f003 0302 	and.w	r3, r3, #2
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d021      	beq.n	800ab0c <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	f06f 0202 	mvn.w	r2, #2
 800aad0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	2201      	movs	r2, #1
 800aad6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	699b      	ldr	r3, [r3, #24]
 800aade:	f003 0303 	and.w	r3, r3, #3
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d005      	beq.n	800aaf2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800aaec:	6878      	ldr	r0, [r7, #4]
 800aaee:	4798      	blx	r3
 800aaf0:	e009      	b.n	800ab06 <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800aaf8:	6878      	ldr	r0, [r7, #4]
 800aafa:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800ab02:	6878      	ldr	r0, [r7, #4]
 800ab04:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	2200      	movs	r2, #0
 800ab0a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800ab0c:	68bb      	ldr	r3, [r7, #8]
 800ab0e:	f003 0304 	and.w	r3, r3, #4
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d026      	beq.n	800ab64 <HAL_TIM_IRQHandler+0xc8>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	f003 0304 	and.w	r3, r3, #4
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d021      	beq.n	800ab64 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	f06f 0204 	mvn.w	r2, #4
 800ab28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	2202      	movs	r2, #2
 800ab2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	699b      	ldr	r3, [r3, #24]
 800ab36:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d005      	beq.n	800ab4a <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ab44:	6878      	ldr	r0, [r7, #4]
 800ab46:	4798      	blx	r3
 800ab48:	e009      	b.n	800ab5e <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800ab50:	6878      	ldr	r0, [r7, #4]
 800ab52:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800ab5a:	6878      	ldr	r0, [r7, #4]
 800ab5c:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	2200      	movs	r2, #0
 800ab62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800ab64:	68bb      	ldr	r3, [r7, #8]
 800ab66:	f003 0308 	and.w	r3, r3, #8
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d026      	beq.n	800abbc <HAL_TIM_IRQHandler+0x120>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	f003 0308 	and.w	r3, r3, #8
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d021      	beq.n	800abbc <HAL_TIM_IRQHandler+0x120>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	f06f 0208 	mvn.w	r2, #8
 800ab80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	2204      	movs	r2, #4
 800ab86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	69db      	ldr	r3, [r3, #28]
 800ab8e:	f003 0303 	and.w	r3, r3, #3
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d005      	beq.n	800aba2 <HAL_TIM_IRQHandler+0x106>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ab9c:	6878      	ldr	r0, [r7, #4]
 800ab9e:	4798      	blx	r3
 800aba0:	e009      	b.n	800abb6 <HAL_TIM_IRQHandler+0x11a>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800aba8:	6878      	ldr	r0, [r7, #4]
 800abaa:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800abb2:	6878      	ldr	r0, [r7, #4]
 800abb4:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	2200      	movs	r2, #0
 800abba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800abbc:	68bb      	ldr	r3, [r7, #8]
 800abbe:	f003 0310 	and.w	r3, r3, #16
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d026      	beq.n	800ac14 <HAL_TIM_IRQHandler+0x178>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	f003 0310 	and.w	r3, r3, #16
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d021      	beq.n	800ac14 <HAL_TIM_IRQHandler+0x178>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	f06f 0210 	mvn.w	r2, #16
 800abd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	2208      	movs	r2, #8
 800abde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	69db      	ldr	r3, [r3, #28]
 800abe6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800abea:	2b00      	cmp	r3, #0
 800abec:	d005      	beq.n	800abfa <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800abf4:	6878      	ldr	r0, [r7, #4]
 800abf6:	4798      	blx	r3
 800abf8:	e009      	b.n	800ac0e <HAL_TIM_IRQHandler+0x172>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800ac00:	6878      	ldr	r0, [r7, #4]
 800ac02:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800ac0a:	6878      	ldr	r0, [r7, #4]
 800ac0c:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	2200      	movs	r2, #0
 800ac12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800ac14:	68bb      	ldr	r3, [r7, #8]
 800ac16:	f003 0301 	and.w	r3, r3, #1
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d00e      	beq.n	800ac3c <HAL_TIM_IRQHandler+0x1a0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	f003 0301 	and.w	r3, r3, #1
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d009      	beq.n	800ac3c <HAL_TIM_IRQHandler+0x1a0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	f06f 0201 	mvn.w	r2, #1
 800ac30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ac38:	6878      	ldr	r0, [r7, #4]
 800ac3a:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800ac3c:	68bb      	ldr	r3, [r7, #8]
 800ac3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d104      	bne.n	800ac50 <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800ac46:	68bb      	ldr	r3, [r7, #8]
 800ac48:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d00e      	beq.n	800ac6e <HAL_TIM_IRQHandler+0x1d2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d009      	beq.n	800ac6e <HAL_TIM_IRQHandler+0x1d2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800ac62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800ac6a:	6878      	ldr	r0, [r7, #4]
 800ac6c:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800ac6e:	68bb      	ldr	r3, [r7, #8]
 800ac70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d00e      	beq.n	800ac96 <HAL_TIM_IRQHandler+0x1fa>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d009      	beq.n	800ac96 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800ac8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800ac92:	6878      	ldr	r0, [r7, #4]
 800ac94:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800ac96:	68bb      	ldr	r3, [r7, #8]
 800ac98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d00e      	beq.n	800acbe <HAL_TIM_IRQHandler+0x222>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d009      	beq.n	800acbe <HAL_TIM_IRQHandler+0x222>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800acb2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800acba:	6878      	ldr	r0, [r7, #4]
 800acbc:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800acbe:	68bb      	ldr	r3, [r7, #8]
 800acc0:	f003 0320 	and.w	r3, r3, #32
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d00e      	beq.n	800ace6 <HAL_TIM_IRQHandler+0x24a>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	f003 0320 	and.w	r3, r3, #32
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d009      	beq.n	800ace6 <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	f06f 0220 	mvn.w	r2, #32
 800acda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800ace2:	6878      	ldr	r0, [r7, #4]
 800ace4:	4798      	blx	r3
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800ace6:	68bb      	ldr	r3, [r7, #8]
 800ace8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800acec:	2b00      	cmp	r3, #0
 800acee:	d00e      	beq.n	800ad0e <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d009      	beq.n	800ad0e <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800ad02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800ad0a:	6878      	ldr	r0, [r7, #4]
 800ad0c:	4798      	blx	r3
      HAL_TIMEx_EncoderIndexCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800ad0e:	68bb      	ldr	r3, [r7, #8]
 800ad10:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d00e      	beq.n	800ad36 <HAL_TIM_IRQHandler+0x29a>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d009      	beq.n	800ad36 <HAL_TIM_IRQHandler+0x29a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800ad2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800ad32:	6878      	ldr	r0, [r7, #4]
 800ad34:	4798      	blx	r3
      HAL_TIMEx_DirectionChangeCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800ad36:	68bb      	ldr	r3, [r7, #8]
 800ad38:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d00e      	beq.n	800ad5e <HAL_TIM_IRQHandler+0x2c2>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d009      	beq.n	800ad5e <HAL_TIM_IRQHandler+0x2c2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800ad52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800ad5a:	6878      	ldr	r0, [r7, #4]
 800ad5c:	4798      	blx	r3
      HAL_TIMEx_IndexErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800ad5e:	68bb      	ldr	r3, [r7, #8]
 800ad60:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d00e      	beq.n	800ad86 <HAL_TIM_IRQHandler+0x2ea>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d009      	beq.n	800ad86 <HAL_TIM_IRQHandler+0x2ea>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800ad7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800ad82:	6878      	ldr	r0, [r7, #4]
 800ad84:	4798      	blx	r3
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ad86:	bf00      	nop
 800ad88:	3710      	adds	r7, #16
 800ad8a:	46bd      	mov	sp, r7
 800ad8c:	bd80      	pop	{r7, pc}
	...

0800ad90 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800ad90:	b580      	push	{r7, lr}
 800ad92:	b086      	sub	sp, #24
 800ad94:	af00      	add	r7, sp, #0
 800ad96:	60f8      	str	r0, [r7, #12]
 800ad98:	60b9      	str	r1, [r7, #8]
 800ad9a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ad9c:	2300      	movs	r3, #0
 800ad9e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_CHANNEL_MODE(sConfig->OCMode, Channel));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ada6:	2b01      	cmp	r3, #1
 800ada8:	d101      	bne.n	800adae <HAL_TIM_OC_ConfigChannel+0x1e>
 800adaa:	2302      	movs	r3, #2
 800adac:	e066      	b.n	800ae7c <HAL_TIM_OC_ConfigChannel+0xec>
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	2201      	movs	r2, #1
 800adb2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	2b14      	cmp	r3, #20
 800adba:	d857      	bhi.n	800ae6c <HAL_TIM_OC_ConfigChannel+0xdc>
 800adbc:	a201      	add	r2, pc, #4	@ (adr r2, 800adc4 <HAL_TIM_OC_ConfigChannel+0x34>)
 800adbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800adc2:	bf00      	nop
 800adc4:	0800ae19 	.word	0x0800ae19
 800adc8:	0800ae6d 	.word	0x0800ae6d
 800adcc:	0800ae6d 	.word	0x0800ae6d
 800add0:	0800ae6d 	.word	0x0800ae6d
 800add4:	0800ae27 	.word	0x0800ae27
 800add8:	0800ae6d 	.word	0x0800ae6d
 800addc:	0800ae6d 	.word	0x0800ae6d
 800ade0:	0800ae6d 	.word	0x0800ae6d
 800ade4:	0800ae35 	.word	0x0800ae35
 800ade8:	0800ae6d 	.word	0x0800ae6d
 800adec:	0800ae6d 	.word	0x0800ae6d
 800adf0:	0800ae6d 	.word	0x0800ae6d
 800adf4:	0800ae43 	.word	0x0800ae43
 800adf8:	0800ae6d 	.word	0x0800ae6d
 800adfc:	0800ae6d 	.word	0x0800ae6d
 800ae00:	0800ae6d 	.word	0x0800ae6d
 800ae04:	0800ae51 	.word	0x0800ae51
 800ae08:	0800ae6d 	.word	0x0800ae6d
 800ae0c:	0800ae6d 	.word	0x0800ae6d
 800ae10:	0800ae6d 	.word	0x0800ae6d
 800ae14:	0800ae5f 	.word	0x0800ae5f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	68b9      	ldr	r1, [r7, #8]
 800ae1e:	4618      	mov	r0, r3
 800ae20:	f000 fcc8 	bl	800b7b4 <TIM_OC1_SetConfig>
      break;
 800ae24:	e025      	b.n	800ae72 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	68b9      	ldr	r1, [r7, #8]
 800ae2c:	4618      	mov	r0, r3
 800ae2e:	f000 fd5b 	bl	800b8e8 <TIM_OC2_SetConfig>
      break;
 800ae32:	e01e      	b.n	800ae72 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	68b9      	ldr	r1, [r7, #8]
 800ae3a:	4618      	mov	r0, r3
 800ae3c:	f000 fde8 	bl	800ba10 <TIM_OC3_SetConfig>
      break;
 800ae40:	e017      	b.n	800ae72 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	68b9      	ldr	r1, [r7, #8]
 800ae48:	4618      	mov	r0, r3
 800ae4a:	f000 fe73 	bl	800bb34 <TIM_OC4_SetConfig>
      break;
 800ae4e:	e010      	b.n	800ae72 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	68b9      	ldr	r1, [r7, #8]
 800ae56:	4618      	mov	r0, r3
 800ae58:	f000 ff00 	bl	800bc5c <TIM_OC5_SetConfig>
      break;
 800ae5c:	e009      	b.n	800ae72 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	68b9      	ldr	r1, [r7, #8]
 800ae64:	4618      	mov	r0, r3
 800ae66:	f000 ff63 	bl	800bd30 <TIM_OC6_SetConfig>
      break;
 800ae6a:	e002      	b.n	800ae72 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 800ae6c:	2301      	movs	r3, #1
 800ae6e:	75fb      	strb	r3, [r7, #23]
      break;
 800ae70:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	2200      	movs	r2, #0
 800ae76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800ae7a:	7dfb      	ldrb	r3, [r7, #23]
}
 800ae7c:	4618      	mov	r0, r3
 800ae7e:	3718      	adds	r7, #24
 800ae80:	46bd      	mov	sp, r7
 800ae82:	bd80      	pop	{r7, pc}

0800ae84 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800ae84:	b580      	push	{r7, lr}
 800ae86:	b086      	sub	sp, #24
 800ae88:	af00      	add	r7, sp, #0
 800ae8a:	60f8      	str	r0, [r7, #12]
 800ae8c:	60b9      	str	r1, [r7, #8]
 800ae8e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ae90:	2300      	movs	r3, #0
 800ae92:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ae9a:	2b01      	cmp	r3, #1
 800ae9c:	d101      	bne.n	800aea2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800ae9e:	2302      	movs	r3, #2
 800aea0:	e0ff      	b.n	800b0a2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	2201      	movs	r2, #1
 800aea6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	2b14      	cmp	r3, #20
 800aeae:	f200 80f0 	bhi.w	800b092 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800aeb2:	a201      	add	r2, pc, #4	@ (adr r2, 800aeb8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800aeb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aeb8:	0800af0d 	.word	0x0800af0d
 800aebc:	0800b093 	.word	0x0800b093
 800aec0:	0800b093 	.word	0x0800b093
 800aec4:	0800b093 	.word	0x0800b093
 800aec8:	0800af4d 	.word	0x0800af4d
 800aecc:	0800b093 	.word	0x0800b093
 800aed0:	0800b093 	.word	0x0800b093
 800aed4:	0800b093 	.word	0x0800b093
 800aed8:	0800af8f 	.word	0x0800af8f
 800aedc:	0800b093 	.word	0x0800b093
 800aee0:	0800b093 	.word	0x0800b093
 800aee4:	0800b093 	.word	0x0800b093
 800aee8:	0800afcf 	.word	0x0800afcf
 800aeec:	0800b093 	.word	0x0800b093
 800aef0:	0800b093 	.word	0x0800b093
 800aef4:	0800b093 	.word	0x0800b093
 800aef8:	0800b011 	.word	0x0800b011
 800aefc:	0800b093 	.word	0x0800b093
 800af00:	0800b093 	.word	0x0800b093
 800af04:	0800b093 	.word	0x0800b093
 800af08:	0800b051 	.word	0x0800b051
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	68b9      	ldr	r1, [r7, #8]
 800af12:	4618      	mov	r0, r3
 800af14:	f000 fc4e 	bl	800b7b4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	699a      	ldr	r2, [r3, #24]
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	f042 0208 	orr.w	r2, r2, #8
 800af26:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	699a      	ldr	r2, [r3, #24]
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	f022 0204 	bic.w	r2, r2, #4
 800af36:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	6999      	ldr	r1, [r3, #24]
 800af3e:	68bb      	ldr	r3, [r7, #8]
 800af40:	691a      	ldr	r2, [r3, #16]
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	430a      	orrs	r2, r1
 800af48:	619a      	str	r2, [r3, #24]
      break;
 800af4a:	e0a5      	b.n	800b098 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	68b9      	ldr	r1, [r7, #8]
 800af52:	4618      	mov	r0, r3
 800af54:	f000 fcc8 	bl	800b8e8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	699a      	ldr	r2, [r3, #24]
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800af66:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	699a      	ldr	r2, [r3, #24]
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800af76:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	6999      	ldr	r1, [r3, #24]
 800af7e:	68bb      	ldr	r3, [r7, #8]
 800af80:	691b      	ldr	r3, [r3, #16]
 800af82:	021a      	lsls	r2, r3, #8
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	430a      	orrs	r2, r1
 800af8a:	619a      	str	r2, [r3, #24]
      break;
 800af8c:	e084      	b.n	800b098 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	68b9      	ldr	r1, [r7, #8]
 800af94:	4618      	mov	r0, r3
 800af96:	f000 fd3b 	bl	800ba10 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	69da      	ldr	r2, [r3, #28]
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	f042 0208 	orr.w	r2, r2, #8
 800afa8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	69da      	ldr	r2, [r3, #28]
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	f022 0204 	bic.w	r2, r2, #4
 800afb8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	69d9      	ldr	r1, [r3, #28]
 800afc0:	68bb      	ldr	r3, [r7, #8]
 800afc2:	691a      	ldr	r2, [r3, #16]
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	430a      	orrs	r2, r1
 800afca:	61da      	str	r2, [r3, #28]
      break;
 800afcc:	e064      	b.n	800b098 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	68b9      	ldr	r1, [r7, #8]
 800afd4:	4618      	mov	r0, r3
 800afd6:	f000 fdad 	bl	800bb34 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	69da      	ldr	r2, [r3, #28]
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800afe8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	69da      	ldr	r2, [r3, #28]
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800aff8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	69d9      	ldr	r1, [r3, #28]
 800b000:	68bb      	ldr	r3, [r7, #8]
 800b002:	691b      	ldr	r3, [r3, #16]
 800b004:	021a      	lsls	r2, r3, #8
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	430a      	orrs	r2, r1
 800b00c:	61da      	str	r2, [r3, #28]
      break;
 800b00e:	e043      	b.n	800b098 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	68b9      	ldr	r1, [r7, #8]
 800b016:	4618      	mov	r0, r3
 800b018:	f000 fe20 	bl	800bc5c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	f042 0208 	orr.w	r2, r2, #8
 800b02a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	f022 0204 	bic.w	r2, r2, #4
 800b03a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800b042:	68bb      	ldr	r3, [r7, #8]
 800b044:	691a      	ldr	r2, [r3, #16]
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	430a      	orrs	r2, r1
 800b04c:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800b04e:	e023      	b.n	800b098 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	68b9      	ldr	r1, [r7, #8]
 800b056:	4618      	mov	r0, r3
 800b058:	f000 fe6a 	bl	800bd30 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b06a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b07a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800b082:	68bb      	ldr	r3, [r7, #8]
 800b084:	691b      	ldr	r3, [r3, #16]
 800b086:	021a      	lsls	r2, r3, #8
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	430a      	orrs	r2, r1
 800b08e:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800b090:	e002      	b.n	800b098 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800b092:	2301      	movs	r3, #1
 800b094:	75fb      	strb	r3, [r7, #23]
      break;
 800b096:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	2200      	movs	r2, #0
 800b09c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800b0a0:	7dfb      	ldrb	r3, [r7, #23]
}
 800b0a2:	4618      	mov	r0, r3
 800b0a4:	3718      	adds	r7, #24
 800b0a6:	46bd      	mov	sp, r7
 800b0a8:	bd80      	pop	{r7, pc}
 800b0aa:	bf00      	nop

0800b0ac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b0ac:	b580      	push	{r7, lr}
 800b0ae:	b084      	sub	sp, #16
 800b0b0:	af00      	add	r7, sp, #0
 800b0b2:	6078      	str	r0, [r7, #4]
 800b0b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b0b6:	2300      	movs	r3, #0
 800b0b8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b0c0:	2b01      	cmp	r3, #1
 800b0c2:	d101      	bne.n	800b0c8 <HAL_TIM_ConfigClockSource+0x1c>
 800b0c4:	2302      	movs	r3, #2
 800b0c6:	e0f6      	b.n	800b2b6 <HAL_TIM_ConfigClockSource+0x20a>
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	2201      	movs	r2, #1
 800b0cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	2202      	movs	r2, #2
 800b0d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	689b      	ldr	r3, [r3, #8]
 800b0de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b0e0:	68bb      	ldr	r3, [r7, #8]
 800b0e2:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800b0e6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800b0ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b0ec:	68bb      	ldr	r3, [r7, #8]
 800b0ee:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b0f2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	68ba      	ldr	r2, [r7, #8]
 800b0fa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b0fc:	683b      	ldr	r3, [r7, #0]
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	4a6f      	ldr	r2, [pc, #444]	@ (800b2c0 <HAL_TIM_ConfigClockSource+0x214>)
 800b102:	4293      	cmp	r3, r2
 800b104:	f000 80c1 	beq.w	800b28a <HAL_TIM_ConfigClockSource+0x1de>
 800b108:	4a6d      	ldr	r2, [pc, #436]	@ (800b2c0 <HAL_TIM_ConfigClockSource+0x214>)
 800b10a:	4293      	cmp	r3, r2
 800b10c:	f200 80c6 	bhi.w	800b29c <HAL_TIM_ConfigClockSource+0x1f0>
 800b110:	4a6c      	ldr	r2, [pc, #432]	@ (800b2c4 <HAL_TIM_ConfigClockSource+0x218>)
 800b112:	4293      	cmp	r3, r2
 800b114:	f000 80b9 	beq.w	800b28a <HAL_TIM_ConfigClockSource+0x1de>
 800b118:	4a6a      	ldr	r2, [pc, #424]	@ (800b2c4 <HAL_TIM_ConfigClockSource+0x218>)
 800b11a:	4293      	cmp	r3, r2
 800b11c:	f200 80be 	bhi.w	800b29c <HAL_TIM_ConfigClockSource+0x1f0>
 800b120:	4a69      	ldr	r2, [pc, #420]	@ (800b2c8 <HAL_TIM_ConfigClockSource+0x21c>)
 800b122:	4293      	cmp	r3, r2
 800b124:	f000 80b1 	beq.w	800b28a <HAL_TIM_ConfigClockSource+0x1de>
 800b128:	4a67      	ldr	r2, [pc, #412]	@ (800b2c8 <HAL_TIM_ConfigClockSource+0x21c>)
 800b12a:	4293      	cmp	r3, r2
 800b12c:	f200 80b6 	bhi.w	800b29c <HAL_TIM_ConfigClockSource+0x1f0>
 800b130:	4a66      	ldr	r2, [pc, #408]	@ (800b2cc <HAL_TIM_ConfigClockSource+0x220>)
 800b132:	4293      	cmp	r3, r2
 800b134:	f000 80a9 	beq.w	800b28a <HAL_TIM_ConfigClockSource+0x1de>
 800b138:	4a64      	ldr	r2, [pc, #400]	@ (800b2cc <HAL_TIM_ConfigClockSource+0x220>)
 800b13a:	4293      	cmp	r3, r2
 800b13c:	f200 80ae 	bhi.w	800b29c <HAL_TIM_ConfigClockSource+0x1f0>
 800b140:	4a63      	ldr	r2, [pc, #396]	@ (800b2d0 <HAL_TIM_ConfigClockSource+0x224>)
 800b142:	4293      	cmp	r3, r2
 800b144:	f000 80a1 	beq.w	800b28a <HAL_TIM_ConfigClockSource+0x1de>
 800b148:	4a61      	ldr	r2, [pc, #388]	@ (800b2d0 <HAL_TIM_ConfigClockSource+0x224>)
 800b14a:	4293      	cmp	r3, r2
 800b14c:	f200 80a6 	bhi.w	800b29c <HAL_TIM_ConfigClockSource+0x1f0>
 800b150:	4a60      	ldr	r2, [pc, #384]	@ (800b2d4 <HAL_TIM_ConfigClockSource+0x228>)
 800b152:	4293      	cmp	r3, r2
 800b154:	f000 8099 	beq.w	800b28a <HAL_TIM_ConfigClockSource+0x1de>
 800b158:	4a5e      	ldr	r2, [pc, #376]	@ (800b2d4 <HAL_TIM_ConfigClockSource+0x228>)
 800b15a:	4293      	cmp	r3, r2
 800b15c:	f200 809e 	bhi.w	800b29c <HAL_TIM_ConfigClockSource+0x1f0>
 800b160:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800b164:	f000 8091 	beq.w	800b28a <HAL_TIM_ConfigClockSource+0x1de>
 800b168:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800b16c:	f200 8096 	bhi.w	800b29c <HAL_TIM_ConfigClockSource+0x1f0>
 800b170:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b174:	f000 8089 	beq.w	800b28a <HAL_TIM_ConfigClockSource+0x1de>
 800b178:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b17c:	f200 808e 	bhi.w	800b29c <HAL_TIM_ConfigClockSource+0x1f0>
 800b180:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b184:	d03e      	beq.n	800b204 <HAL_TIM_ConfigClockSource+0x158>
 800b186:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b18a:	f200 8087 	bhi.w	800b29c <HAL_TIM_ConfigClockSource+0x1f0>
 800b18e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b192:	f000 8086 	beq.w	800b2a2 <HAL_TIM_ConfigClockSource+0x1f6>
 800b196:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b19a:	d87f      	bhi.n	800b29c <HAL_TIM_ConfigClockSource+0x1f0>
 800b19c:	2b70      	cmp	r3, #112	@ 0x70
 800b19e:	d01a      	beq.n	800b1d6 <HAL_TIM_ConfigClockSource+0x12a>
 800b1a0:	2b70      	cmp	r3, #112	@ 0x70
 800b1a2:	d87b      	bhi.n	800b29c <HAL_TIM_ConfigClockSource+0x1f0>
 800b1a4:	2b60      	cmp	r3, #96	@ 0x60
 800b1a6:	d050      	beq.n	800b24a <HAL_TIM_ConfigClockSource+0x19e>
 800b1a8:	2b60      	cmp	r3, #96	@ 0x60
 800b1aa:	d877      	bhi.n	800b29c <HAL_TIM_ConfigClockSource+0x1f0>
 800b1ac:	2b50      	cmp	r3, #80	@ 0x50
 800b1ae:	d03c      	beq.n	800b22a <HAL_TIM_ConfigClockSource+0x17e>
 800b1b0:	2b50      	cmp	r3, #80	@ 0x50
 800b1b2:	d873      	bhi.n	800b29c <HAL_TIM_ConfigClockSource+0x1f0>
 800b1b4:	2b40      	cmp	r3, #64	@ 0x40
 800b1b6:	d058      	beq.n	800b26a <HAL_TIM_ConfigClockSource+0x1be>
 800b1b8:	2b40      	cmp	r3, #64	@ 0x40
 800b1ba:	d86f      	bhi.n	800b29c <HAL_TIM_ConfigClockSource+0x1f0>
 800b1bc:	2b30      	cmp	r3, #48	@ 0x30
 800b1be:	d064      	beq.n	800b28a <HAL_TIM_ConfigClockSource+0x1de>
 800b1c0:	2b30      	cmp	r3, #48	@ 0x30
 800b1c2:	d86b      	bhi.n	800b29c <HAL_TIM_ConfigClockSource+0x1f0>
 800b1c4:	2b20      	cmp	r3, #32
 800b1c6:	d060      	beq.n	800b28a <HAL_TIM_ConfigClockSource+0x1de>
 800b1c8:	2b20      	cmp	r3, #32
 800b1ca:	d867      	bhi.n	800b29c <HAL_TIM_ConfigClockSource+0x1f0>
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d05c      	beq.n	800b28a <HAL_TIM_ConfigClockSource+0x1de>
 800b1d0:	2b10      	cmp	r3, #16
 800b1d2:	d05a      	beq.n	800b28a <HAL_TIM_ConfigClockSource+0x1de>
 800b1d4:	e062      	b.n	800b29c <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b1da:	683b      	ldr	r3, [r7, #0]
 800b1dc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b1de:	683b      	ldr	r3, [r7, #0]
 800b1e0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b1e2:	683b      	ldr	r3, [r7, #0]
 800b1e4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b1e6:	f000 fe8b 	bl	800bf00 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	689b      	ldr	r3, [r3, #8]
 800b1f0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b1f2:	68bb      	ldr	r3, [r7, #8]
 800b1f4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800b1f8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	68ba      	ldr	r2, [r7, #8]
 800b200:	609a      	str	r2, [r3, #8]
      break;
 800b202:	e04f      	b.n	800b2a4 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b208:	683b      	ldr	r3, [r7, #0]
 800b20a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b20c:	683b      	ldr	r3, [r7, #0]
 800b20e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b210:	683b      	ldr	r3, [r7, #0]
 800b212:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b214:	f000 fe74 	bl	800bf00 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	689a      	ldr	r2, [r3, #8]
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800b226:	609a      	str	r2, [r3, #8]
      break;
 800b228:	e03c      	b.n	800b2a4 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b22e:	683b      	ldr	r3, [r7, #0]
 800b230:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b232:	683b      	ldr	r3, [r7, #0]
 800b234:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b236:	461a      	mov	r2, r3
 800b238:	f000 fde6 	bl	800be08 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	2150      	movs	r1, #80	@ 0x50
 800b242:	4618      	mov	r0, r3
 800b244:	f000 fe3f 	bl	800bec6 <TIM_ITRx_SetConfig>
      break;
 800b248:	e02c      	b.n	800b2a4 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b24e:	683b      	ldr	r3, [r7, #0]
 800b250:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b252:	683b      	ldr	r3, [r7, #0]
 800b254:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b256:	461a      	mov	r2, r3
 800b258:	f000 fe05 	bl	800be66 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	2160      	movs	r1, #96	@ 0x60
 800b262:	4618      	mov	r0, r3
 800b264:	f000 fe2f 	bl	800bec6 <TIM_ITRx_SetConfig>
      break;
 800b268:	e01c      	b.n	800b2a4 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b26e:	683b      	ldr	r3, [r7, #0]
 800b270:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b272:	683b      	ldr	r3, [r7, #0]
 800b274:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b276:	461a      	mov	r2, r3
 800b278:	f000 fdc6 	bl	800be08 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	2140      	movs	r1, #64	@ 0x40
 800b282:	4618      	mov	r0, r3
 800b284:	f000 fe1f 	bl	800bec6 <TIM_ITRx_SetConfig>
      break;
 800b288:	e00c      	b.n	800b2a4 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	681a      	ldr	r2, [r3, #0]
 800b28e:	683b      	ldr	r3, [r7, #0]
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	4619      	mov	r1, r3
 800b294:	4610      	mov	r0, r2
 800b296:	f000 fe16 	bl	800bec6 <TIM_ITRx_SetConfig>
      break;
 800b29a:	e003      	b.n	800b2a4 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 800b29c:	2301      	movs	r3, #1
 800b29e:	73fb      	strb	r3, [r7, #15]
      break;
 800b2a0:	e000      	b.n	800b2a4 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800b2a2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	2201      	movs	r2, #1
 800b2a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	2200      	movs	r2, #0
 800b2b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800b2b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2b6:	4618      	mov	r0, r3
 800b2b8:	3710      	adds	r7, #16
 800b2ba:	46bd      	mov	sp, r7
 800b2bc:	bd80      	pop	{r7, pc}
 800b2be:	bf00      	nop
 800b2c0:	00100070 	.word	0x00100070
 800b2c4:	00100060 	.word	0x00100060
 800b2c8:	00100050 	.word	0x00100050
 800b2cc:	00100040 	.word	0x00100040
 800b2d0:	00100030 	.word	0x00100030
 800b2d4:	00100020 	.word	0x00100020

0800b2d8 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800b2d8:	b480      	push	{r7}
 800b2da:	b083      	sub	sp, #12
 800b2dc:	af00      	add	r7, sp, #0
 800b2de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 800b2e0:	bf00      	nop
 800b2e2:	370c      	adds	r7, #12
 800b2e4:	46bd      	mov	sp, r7
 800b2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ea:	4770      	bx	lr

0800b2ec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b2ec:	b480      	push	{r7}
 800b2ee:	b083      	sub	sp, #12
 800b2f0:	af00      	add	r7, sp, #0
 800b2f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b2f4:	bf00      	nop
 800b2f6:	370c      	adds	r7, #12
 800b2f8:	46bd      	mov	sp, r7
 800b2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2fe:	4770      	bx	lr

0800b300 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b300:	b480      	push	{r7}
 800b302:	b083      	sub	sp, #12
 800b304:	af00      	add	r7, sp, #0
 800b306:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b308:	bf00      	nop
 800b30a:	370c      	adds	r7, #12
 800b30c:	46bd      	mov	sp, r7
 800b30e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b312:	4770      	bx	lr

0800b314 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800b314:	b480      	push	{r7}
 800b316:	b083      	sub	sp, #12
 800b318:	af00      	add	r7, sp, #0
 800b31a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 800b31c:	bf00      	nop
 800b31e:	370c      	adds	r7, #12
 800b320:	46bd      	mov	sp, r7
 800b322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b326:	4770      	bx	lr

0800b328 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b328:	b480      	push	{r7}
 800b32a:	b083      	sub	sp, #12
 800b32c:	af00      	add	r7, sp, #0
 800b32e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b330:	bf00      	nop
 800b332:	370c      	adds	r7, #12
 800b334:	46bd      	mov	sp, r7
 800b336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b33a:	4770      	bx	lr

0800b33c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800b33c:	b480      	push	{r7}
 800b33e:	b083      	sub	sp, #12
 800b340:	af00      	add	r7, sp, #0
 800b342:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800b344:	bf00      	nop
 800b346:	370c      	adds	r7, #12
 800b348:	46bd      	mov	sp, r7
 800b34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b34e:	4770      	bx	lr

0800b350 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b350:	b480      	push	{r7}
 800b352:	b083      	sub	sp, #12
 800b354:	af00      	add	r7, sp, #0
 800b356:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b358:	bf00      	nop
 800b35a:	370c      	adds	r7, #12
 800b35c:	46bd      	mov	sp, r7
 800b35e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b362:	4770      	bx	lr

0800b364 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800b364:	b480      	push	{r7}
 800b366:	b083      	sub	sp, #12
 800b368:	af00      	add	r7, sp, #0
 800b36a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 800b36c:	bf00      	nop
 800b36e:	370c      	adds	r7, #12
 800b370:	46bd      	mov	sp, r7
 800b372:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b376:	4770      	bx	lr

0800b378 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800b378:	b480      	push	{r7}
 800b37a:	b083      	sub	sp, #12
 800b37c:	af00      	add	r7, sp, #0
 800b37e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800b380:	bf00      	nop
 800b382:	370c      	adds	r7, #12
 800b384:	46bd      	mov	sp, r7
 800b386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b38a:	4770      	bx	lr

0800b38c <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 800b38c:	b480      	push	{r7}
 800b38e:	b087      	sub	sp, #28
 800b390:	af00      	add	r7, sp, #0
 800b392:	60f8      	str	r0, [r7, #12]
 800b394:	460b      	mov	r3, r1
 800b396:	607a      	str	r2, [r7, #4]
 800b398:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800b39a:	2300      	movs	r3, #0
 800b39c:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d101      	bne.n	800b3a8 <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 800b3a4:	2301      	movs	r3, #1
 800b3a6:	e14a      	b.n	800b63e <HAL_TIM_RegisterCallback+0x2b2>
  }

  if (htim->State == HAL_TIM_STATE_READY)
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b3ae:	b2db      	uxtb	r3, r3
 800b3b0:	2b01      	cmp	r3, #1
 800b3b2:	f040 80dd 	bne.w	800b570 <HAL_TIM_RegisterCallback+0x1e4>
  {
    switch (CallbackID)
 800b3b6:	7afb      	ldrb	r3, [r7, #11]
 800b3b8:	2b1f      	cmp	r3, #31
 800b3ba:	f200 80d6 	bhi.w	800b56a <HAL_TIM_RegisterCallback+0x1de>
 800b3be:	a201      	add	r2, pc, #4	@ (adr r2, 800b3c4 <HAL_TIM_RegisterCallback+0x38>)
 800b3c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3c4:	0800b445 	.word	0x0800b445
 800b3c8:	0800b44d 	.word	0x0800b44d
 800b3cc:	0800b455 	.word	0x0800b455
 800b3d0:	0800b45d 	.word	0x0800b45d
 800b3d4:	0800b465 	.word	0x0800b465
 800b3d8:	0800b46d 	.word	0x0800b46d
 800b3dc:	0800b475 	.word	0x0800b475
 800b3e0:	0800b47d 	.word	0x0800b47d
 800b3e4:	0800b485 	.word	0x0800b485
 800b3e8:	0800b48d 	.word	0x0800b48d
 800b3ec:	0800b495 	.word	0x0800b495
 800b3f0:	0800b49d 	.word	0x0800b49d
 800b3f4:	0800b4a5 	.word	0x0800b4a5
 800b3f8:	0800b4ad 	.word	0x0800b4ad
 800b3fc:	0800b4b7 	.word	0x0800b4b7
 800b400:	0800b4c1 	.word	0x0800b4c1
 800b404:	0800b4cb 	.word	0x0800b4cb
 800b408:	0800b4d5 	.word	0x0800b4d5
 800b40c:	0800b4df 	.word	0x0800b4df
 800b410:	0800b4e9 	.word	0x0800b4e9
 800b414:	0800b4f3 	.word	0x0800b4f3
 800b418:	0800b4fd 	.word	0x0800b4fd
 800b41c:	0800b507 	.word	0x0800b507
 800b420:	0800b511 	.word	0x0800b511
 800b424:	0800b51b 	.word	0x0800b51b
 800b428:	0800b525 	.word	0x0800b525
 800b42c:	0800b52f 	.word	0x0800b52f
 800b430:	0800b539 	.word	0x0800b539
 800b434:	0800b543 	.word	0x0800b543
 800b438:	0800b54d 	.word	0x0800b54d
 800b43c:	0800b557 	.word	0x0800b557
 800b440:	0800b561 	.word	0x0800b561
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 800b444:	68fb      	ldr	r3, [r7, #12]
 800b446:	687a      	ldr	r2, [r7, #4]
 800b448:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 800b44a:	e0f7      	b.n	800b63c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	687a      	ldr	r2, [r7, #4]
 800b450:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 800b452:	e0f3      	b.n	800b63c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 800b454:	68fb      	ldr	r3, [r7, #12]
 800b456:	687a      	ldr	r2, [r7, #4]
 800b458:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 800b45a:	e0ef      	b.n	800b63c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	687a      	ldr	r2, [r7, #4]
 800b460:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 800b462:	e0eb      	b.n	800b63c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	687a      	ldr	r2, [r7, #4]
 800b468:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 800b46a:	e0e7      	b.n	800b63c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 800b46c:	68fb      	ldr	r3, [r7, #12]
 800b46e:	687a      	ldr	r2, [r7, #4]
 800b470:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 800b472:	e0e3      	b.n	800b63c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	687a      	ldr	r2, [r7, #4]
 800b478:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 800b47a:	e0df      	b.n	800b63c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	687a      	ldr	r2, [r7, #4]
 800b480:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 800b482:	e0db      	b.n	800b63c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	687a      	ldr	r2, [r7, #4]
 800b488:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 800b48a:	e0d7      	b.n	800b63c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	687a      	ldr	r2, [r7, #4]
 800b490:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 800b492:	e0d3      	b.n	800b63c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	687a      	ldr	r2, [r7, #4]
 800b498:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 800b49a:	e0cf      	b.n	800b63c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	687a      	ldr	r2, [r7, #4]
 800b4a0:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 800b4a2:	e0cb      	b.n	800b63c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	687a      	ldr	r2, [r7, #4]
 800b4a8:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 800b4aa:	e0c7      	b.n	800b63c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	687a      	ldr	r2, [r7, #4]
 800b4b0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 800b4b4:	e0c2      	b.n	800b63c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	687a      	ldr	r2, [r7, #4]
 800b4ba:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        break;
 800b4be:	e0bd      	b.n	800b63c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 800b4c0:	68fb      	ldr	r3, [r7, #12]
 800b4c2:	687a      	ldr	r2, [r7, #4]
 800b4c4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        break;
 800b4c8:	e0b8      	b.n	800b63c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	687a      	ldr	r2, [r7, #4]
 800b4ce:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        break;
 800b4d2:	e0b3      	b.n	800b63c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	687a      	ldr	r2, [r7, #4]
 800b4d8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        break;
 800b4dc:	e0ae      	b.n	800b63c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 800b4de:	68fb      	ldr	r3, [r7, #12]
 800b4e0:	687a      	ldr	r2, [r7, #4]
 800b4e2:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 800b4e6:	e0a9      	b.n	800b63c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	687a      	ldr	r2, [r7, #4]
 800b4ec:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 800b4f0:	e0a4      	b.n	800b63c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 800b4f2:	68fb      	ldr	r3, [r7, #12]
 800b4f4:	687a      	ldr	r2, [r7, #4]
 800b4f6:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 800b4fa:	e09f      	b.n	800b63c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	687a      	ldr	r2, [r7, #4]
 800b500:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 800b504:	e09a      	b.n	800b63c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 800b506:	68fb      	ldr	r3, [r7, #12]
 800b508:	687a      	ldr	r2, [r7, #4]
 800b50a:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 800b50e:	e095      	b.n	800b63c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	687a      	ldr	r2, [r7, #4]
 800b514:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 800b518:	e090      	b.n	800b63c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	687a      	ldr	r2, [r7, #4]
 800b51e:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 800b522:	e08b      	b.n	800b63c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	687a      	ldr	r2, [r7, #4]
 800b528:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 800b52c:	e086      	b.n	800b63c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	687a      	ldr	r2, [r7, #4]
 800b532:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 800b536:	e081      	b.n	800b63c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK2_CB_ID :
        htim->Break2Callback                       = pCallback;
 800b538:	68fb      	ldr	r3, [r7, #12]
 800b53a:	687a      	ldr	r2, [r7, #4]
 800b53c:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 800b540:	e07c      	b.n	800b63c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_INDEX_CB_ID :
        htim->EncoderIndexCallback                 = pCallback;
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	687a      	ldr	r2, [r7, #4]
 800b546:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 800b54a:	e077      	b.n	800b63c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_DIRECTION_CHANGE_CB_ID :
        htim->DirectionChangeCallback              = pCallback;
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	687a      	ldr	r2, [r7, #4]
 800b550:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
        break;
 800b554:	e072      	b.n	800b63c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_INDEX_ERROR_CB_ID :
        htim->IndexErrorCallback                   = pCallback;
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	687a      	ldr	r2, [r7, #4]
 800b55a:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800b55e:	e06d      	b.n	800b63c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRANSITION_ERROR_CB_ID :
        htim->TransitionErrorCallback              = pCallback;
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	687a      	ldr	r2, [r7, #4]
 800b564:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 800b568:	e068      	b.n	800b63c <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 800b56a:	2301      	movs	r3, #1
 800b56c:	75fb      	strb	r3, [r7, #23]
        break;
 800b56e:	e065      	b.n	800b63c <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b576:	b2db      	uxtb	r3, r3
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d15d      	bne.n	800b638 <HAL_TIM_RegisterCallback+0x2ac>
  {
    switch (CallbackID)
 800b57c:	7afb      	ldrb	r3, [r7, #11]
 800b57e:	2b0d      	cmp	r3, #13
 800b580:	d857      	bhi.n	800b632 <HAL_TIM_RegisterCallback+0x2a6>
 800b582:	a201      	add	r2, pc, #4	@ (adr r2, 800b588 <HAL_TIM_RegisterCallback+0x1fc>)
 800b584:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b588:	0800b5c1 	.word	0x0800b5c1
 800b58c:	0800b5c9 	.word	0x0800b5c9
 800b590:	0800b5d1 	.word	0x0800b5d1
 800b594:	0800b5d9 	.word	0x0800b5d9
 800b598:	0800b5e1 	.word	0x0800b5e1
 800b59c:	0800b5e9 	.word	0x0800b5e9
 800b5a0:	0800b5f1 	.word	0x0800b5f1
 800b5a4:	0800b5f9 	.word	0x0800b5f9
 800b5a8:	0800b601 	.word	0x0800b601
 800b5ac:	0800b609 	.word	0x0800b609
 800b5b0:	0800b611 	.word	0x0800b611
 800b5b4:	0800b619 	.word	0x0800b619
 800b5b8:	0800b621 	.word	0x0800b621
 800b5bc:	0800b629 	.word	0x0800b629
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 800b5c0:	68fb      	ldr	r3, [r7, #12]
 800b5c2:	687a      	ldr	r2, [r7, #4]
 800b5c4:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 800b5c6:	e039      	b.n	800b63c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 800b5c8:	68fb      	ldr	r3, [r7, #12]
 800b5ca:	687a      	ldr	r2, [r7, #4]
 800b5cc:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 800b5ce:	e035      	b.n	800b63c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	687a      	ldr	r2, [r7, #4]
 800b5d4:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 800b5d6:	e031      	b.n	800b63c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	687a      	ldr	r2, [r7, #4]
 800b5dc:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 800b5de:	e02d      	b.n	800b63c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	687a      	ldr	r2, [r7, #4]
 800b5e4:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 800b5e6:	e029      	b.n	800b63c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	687a      	ldr	r2, [r7, #4]
 800b5ec:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 800b5ee:	e025      	b.n	800b63c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	687a      	ldr	r2, [r7, #4]
 800b5f4:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 800b5f6:	e021      	b.n	800b63c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	687a      	ldr	r2, [r7, #4]
 800b5fc:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 800b5fe:	e01d      	b.n	800b63c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 800b600:	68fb      	ldr	r3, [r7, #12]
 800b602:	687a      	ldr	r2, [r7, #4]
 800b604:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 800b606:	e019      	b.n	800b63c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	687a      	ldr	r2, [r7, #4]
 800b60c:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 800b60e:	e015      	b.n	800b63c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 800b610:	68fb      	ldr	r3, [r7, #12]
 800b612:	687a      	ldr	r2, [r7, #4]
 800b614:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 800b616:	e011      	b.n	800b63c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	687a      	ldr	r2, [r7, #4]
 800b61c:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 800b61e:	e00d      	b.n	800b63c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	687a      	ldr	r2, [r7, #4]
 800b624:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 800b626:	e009      	b.n	800b63c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 800b628:	68fb      	ldr	r3, [r7, #12]
 800b62a:	687a      	ldr	r2, [r7, #4]
 800b62c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 800b630:	e004      	b.n	800b63c <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 800b632:	2301      	movs	r3, #1
 800b634:	75fb      	strb	r3, [r7, #23]
        break;
 800b636:	e001      	b.n	800b63c <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 800b638:	2301      	movs	r3, #1
 800b63a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800b63c:	7dfb      	ldrb	r3, [r7, #23]
}
 800b63e:	4618      	mov	r0, r3
 800b640:	371c      	adds	r7, #28
 800b642:	46bd      	mov	sp, r7
 800b644:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b648:	4770      	bx	lr
 800b64a:	bf00      	nop

0800b64c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b64c:	b480      	push	{r7}
 800b64e:	b085      	sub	sp, #20
 800b650:	af00      	add	r7, sp, #0
 800b652:	6078      	str	r0, [r7, #4]
 800b654:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	4a4c      	ldr	r2, [pc, #304]	@ (800b790 <TIM_Base_SetConfig+0x144>)
 800b660:	4293      	cmp	r3, r2
 800b662:	d017      	beq.n	800b694 <TIM_Base_SetConfig+0x48>
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b66a:	d013      	beq.n	800b694 <TIM_Base_SetConfig+0x48>
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	4a49      	ldr	r2, [pc, #292]	@ (800b794 <TIM_Base_SetConfig+0x148>)
 800b670:	4293      	cmp	r3, r2
 800b672:	d00f      	beq.n	800b694 <TIM_Base_SetConfig+0x48>
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	4a48      	ldr	r2, [pc, #288]	@ (800b798 <TIM_Base_SetConfig+0x14c>)
 800b678:	4293      	cmp	r3, r2
 800b67a:	d00b      	beq.n	800b694 <TIM_Base_SetConfig+0x48>
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	4a47      	ldr	r2, [pc, #284]	@ (800b79c <TIM_Base_SetConfig+0x150>)
 800b680:	4293      	cmp	r3, r2
 800b682:	d007      	beq.n	800b694 <TIM_Base_SetConfig+0x48>
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	4a46      	ldr	r2, [pc, #280]	@ (800b7a0 <TIM_Base_SetConfig+0x154>)
 800b688:	4293      	cmp	r3, r2
 800b68a:	d003      	beq.n	800b694 <TIM_Base_SetConfig+0x48>
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	4a45      	ldr	r2, [pc, #276]	@ (800b7a4 <TIM_Base_SetConfig+0x158>)
 800b690:	4293      	cmp	r3, r2
 800b692:	d108      	bne.n	800b6a6 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b69a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b69c:	683b      	ldr	r3, [r7, #0]
 800b69e:	685b      	ldr	r3, [r3, #4]
 800b6a0:	68fa      	ldr	r2, [r7, #12]
 800b6a2:	4313      	orrs	r3, r2
 800b6a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	4a39      	ldr	r2, [pc, #228]	@ (800b790 <TIM_Base_SetConfig+0x144>)
 800b6aa:	4293      	cmp	r3, r2
 800b6ac:	d023      	beq.n	800b6f6 <TIM_Base_SetConfig+0xaa>
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b6b4:	d01f      	beq.n	800b6f6 <TIM_Base_SetConfig+0xaa>
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	4a36      	ldr	r2, [pc, #216]	@ (800b794 <TIM_Base_SetConfig+0x148>)
 800b6ba:	4293      	cmp	r3, r2
 800b6bc:	d01b      	beq.n	800b6f6 <TIM_Base_SetConfig+0xaa>
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	4a35      	ldr	r2, [pc, #212]	@ (800b798 <TIM_Base_SetConfig+0x14c>)
 800b6c2:	4293      	cmp	r3, r2
 800b6c4:	d017      	beq.n	800b6f6 <TIM_Base_SetConfig+0xaa>
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	4a34      	ldr	r2, [pc, #208]	@ (800b79c <TIM_Base_SetConfig+0x150>)
 800b6ca:	4293      	cmp	r3, r2
 800b6cc:	d013      	beq.n	800b6f6 <TIM_Base_SetConfig+0xaa>
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	4a33      	ldr	r2, [pc, #204]	@ (800b7a0 <TIM_Base_SetConfig+0x154>)
 800b6d2:	4293      	cmp	r3, r2
 800b6d4:	d00f      	beq.n	800b6f6 <TIM_Base_SetConfig+0xaa>
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	4a33      	ldr	r2, [pc, #204]	@ (800b7a8 <TIM_Base_SetConfig+0x15c>)
 800b6da:	4293      	cmp	r3, r2
 800b6dc:	d00b      	beq.n	800b6f6 <TIM_Base_SetConfig+0xaa>
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	4a32      	ldr	r2, [pc, #200]	@ (800b7ac <TIM_Base_SetConfig+0x160>)
 800b6e2:	4293      	cmp	r3, r2
 800b6e4:	d007      	beq.n	800b6f6 <TIM_Base_SetConfig+0xaa>
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	4a31      	ldr	r2, [pc, #196]	@ (800b7b0 <TIM_Base_SetConfig+0x164>)
 800b6ea:	4293      	cmp	r3, r2
 800b6ec:	d003      	beq.n	800b6f6 <TIM_Base_SetConfig+0xaa>
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	4a2c      	ldr	r2, [pc, #176]	@ (800b7a4 <TIM_Base_SetConfig+0x158>)
 800b6f2:	4293      	cmp	r3, r2
 800b6f4:	d108      	bne.n	800b708 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b6f6:	68fb      	ldr	r3, [r7, #12]
 800b6f8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b6fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b6fe:	683b      	ldr	r3, [r7, #0]
 800b700:	68db      	ldr	r3, [r3, #12]
 800b702:	68fa      	ldr	r2, [r7, #12]
 800b704:	4313      	orrs	r3, r2
 800b706:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800b70e:	683b      	ldr	r3, [r7, #0]
 800b710:	695b      	ldr	r3, [r3, #20]
 800b712:	4313      	orrs	r3, r2
 800b714:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	68fa      	ldr	r2, [r7, #12]
 800b71a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b71c:	683b      	ldr	r3, [r7, #0]
 800b71e:	689a      	ldr	r2, [r3, #8]
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b724:	683b      	ldr	r3, [r7, #0]
 800b726:	681a      	ldr	r2, [r3, #0]
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	4a18      	ldr	r2, [pc, #96]	@ (800b790 <TIM_Base_SetConfig+0x144>)
 800b730:	4293      	cmp	r3, r2
 800b732:	d013      	beq.n	800b75c <TIM_Base_SetConfig+0x110>
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	4a1a      	ldr	r2, [pc, #104]	@ (800b7a0 <TIM_Base_SetConfig+0x154>)
 800b738:	4293      	cmp	r3, r2
 800b73a:	d00f      	beq.n	800b75c <TIM_Base_SetConfig+0x110>
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	4a1a      	ldr	r2, [pc, #104]	@ (800b7a8 <TIM_Base_SetConfig+0x15c>)
 800b740:	4293      	cmp	r3, r2
 800b742:	d00b      	beq.n	800b75c <TIM_Base_SetConfig+0x110>
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	4a19      	ldr	r2, [pc, #100]	@ (800b7ac <TIM_Base_SetConfig+0x160>)
 800b748:	4293      	cmp	r3, r2
 800b74a:	d007      	beq.n	800b75c <TIM_Base_SetConfig+0x110>
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	4a18      	ldr	r2, [pc, #96]	@ (800b7b0 <TIM_Base_SetConfig+0x164>)
 800b750:	4293      	cmp	r3, r2
 800b752:	d003      	beq.n	800b75c <TIM_Base_SetConfig+0x110>
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	4a13      	ldr	r2, [pc, #76]	@ (800b7a4 <TIM_Base_SetConfig+0x158>)
 800b758:	4293      	cmp	r3, r2
 800b75a:	d103      	bne.n	800b764 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b75c:	683b      	ldr	r3, [r7, #0]
 800b75e:	691a      	ldr	r2, [r3, #16]
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	2201      	movs	r2, #1
 800b768:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	691b      	ldr	r3, [r3, #16]
 800b76e:	f003 0301 	and.w	r3, r3, #1
 800b772:	2b01      	cmp	r3, #1
 800b774:	d105      	bne.n	800b782 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	691b      	ldr	r3, [r3, #16]
 800b77a:	f023 0201 	bic.w	r2, r3, #1
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	611a      	str	r2, [r3, #16]
  }
}
 800b782:	bf00      	nop
 800b784:	3714      	adds	r7, #20
 800b786:	46bd      	mov	sp, r7
 800b788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b78c:	4770      	bx	lr
 800b78e:	bf00      	nop
 800b790:	40012c00 	.word	0x40012c00
 800b794:	40000400 	.word	0x40000400
 800b798:	40000800 	.word	0x40000800
 800b79c:	40000c00 	.word	0x40000c00
 800b7a0:	40013400 	.word	0x40013400
 800b7a4:	40015000 	.word	0x40015000
 800b7a8:	40014000 	.word	0x40014000
 800b7ac:	40014400 	.word	0x40014400
 800b7b0:	40014800 	.word	0x40014800

0800b7b4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b7b4:	b480      	push	{r7}
 800b7b6:	b087      	sub	sp, #28
 800b7b8:	af00      	add	r7, sp, #0
 800b7ba:	6078      	str	r0, [r7, #4]
 800b7bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	6a1b      	ldr	r3, [r3, #32]
 800b7c2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	6a1b      	ldr	r3, [r3, #32]
 800b7c8:	f023 0201 	bic.w	r2, r3, #1
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	685b      	ldr	r3, [r3, #4]
 800b7d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	699b      	ldr	r3, [r3, #24]
 800b7da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b7dc:	68fb      	ldr	r3, [r7, #12]
 800b7de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b7e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b7e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	f023 0303 	bic.w	r3, r3, #3
 800b7ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b7f0:	683b      	ldr	r3, [r7, #0]
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	68fa      	ldr	r2, [r7, #12]
 800b7f6:	4313      	orrs	r3, r2
 800b7f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b7fa:	697b      	ldr	r3, [r7, #20]
 800b7fc:	f023 0302 	bic.w	r3, r3, #2
 800b800:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b802:	683b      	ldr	r3, [r7, #0]
 800b804:	689b      	ldr	r3, [r3, #8]
 800b806:	697a      	ldr	r2, [r7, #20]
 800b808:	4313      	orrs	r3, r2
 800b80a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	4a30      	ldr	r2, [pc, #192]	@ (800b8d0 <TIM_OC1_SetConfig+0x11c>)
 800b810:	4293      	cmp	r3, r2
 800b812:	d013      	beq.n	800b83c <TIM_OC1_SetConfig+0x88>
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	4a2f      	ldr	r2, [pc, #188]	@ (800b8d4 <TIM_OC1_SetConfig+0x120>)
 800b818:	4293      	cmp	r3, r2
 800b81a:	d00f      	beq.n	800b83c <TIM_OC1_SetConfig+0x88>
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	4a2e      	ldr	r2, [pc, #184]	@ (800b8d8 <TIM_OC1_SetConfig+0x124>)
 800b820:	4293      	cmp	r3, r2
 800b822:	d00b      	beq.n	800b83c <TIM_OC1_SetConfig+0x88>
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	4a2d      	ldr	r2, [pc, #180]	@ (800b8dc <TIM_OC1_SetConfig+0x128>)
 800b828:	4293      	cmp	r3, r2
 800b82a:	d007      	beq.n	800b83c <TIM_OC1_SetConfig+0x88>
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	4a2c      	ldr	r2, [pc, #176]	@ (800b8e0 <TIM_OC1_SetConfig+0x12c>)
 800b830:	4293      	cmp	r3, r2
 800b832:	d003      	beq.n	800b83c <TIM_OC1_SetConfig+0x88>
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	4a2b      	ldr	r2, [pc, #172]	@ (800b8e4 <TIM_OC1_SetConfig+0x130>)
 800b838:	4293      	cmp	r3, r2
 800b83a:	d10c      	bne.n	800b856 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b83c:	697b      	ldr	r3, [r7, #20]
 800b83e:	f023 0308 	bic.w	r3, r3, #8
 800b842:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b844:	683b      	ldr	r3, [r7, #0]
 800b846:	68db      	ldr	r3, [r3, #12]
 800b848:	697a      	ldr	r2, [r7, #20]
 800b84a:	4313      	orrs	r3, r2
 800b84c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b84e:	697b      	ldr	r3, [r7, #20]
 800b850:	f023 0304 	bic.w	r3, r3, #4
 800b854:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	4a1d      	ldr	r2, [pc, #116]	@ (800b8d0 <TIM_OC1_SetConfig+0x11c>)
 800b85a:	4293      	cmp	r3, r2
 800b85c:	d013      	beq.n	800b886 <TIM_OC1_SetConfig+0xd2>
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	4a1c      	ldr	r2, [pc, #112]	@ (800b8d4 <TIM_OC1_SetConfig+0x120>)
 800b862:	4293      	cmp	r3, r2
 800b864:	d00f      	beq.n	800b886 <TIM_OC1_SetConfig+0xd2>
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	4a1b      	ldr	r2, [pc, #108]	@ (800b8d8 <TIM_OC1_SetConfig+0x124>)
 800b86a:	4293      	cmp	r3, r2
 800b86c:	d00b      	beq.n	800b886 <TIM_OC1_SetConfig+0xd2>
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	4a1a      	ldr	r2, [pc, #104]	@ (800b8dc <TIM_OC1_SetConfig+0x128>)
 800b872:	4293      	cmp	r3, r2
 800b874:	d007      	beq.n	800b886 <TIM_OC1_SetConfig+0xd2>
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	4a19      	ldr	r2, [pc, #100]	@ (800b8e0 <TIM_OC1_SetConfig+0x12c>)
 800b87a:	4293      	cmp	r3, r2
 800b87c:	d003      	beq.n	800b886 <TIM_OC1_SetConfig+0xd2>
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	4a18      	ldr	r2, [pc, #96]	@ (800b8e4 <TIM_OC1_SetConfig+0x130>)
 800b882:	4293      	cmp	r3, r2
 800b884:	d111      	bne.n	800b8aa <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b886:	693b      	ldr	r3, [r7, #16]
 800b888:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b88c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b88e:	693b      	ldr	r3, [r7, #16]
 800b890:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800b894:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b896:	683b      	ldr	r3, [r7, #0]
 800b898:	695b      	ldr	r3, [r3, #20]
 800b89a:	693a      	ldr	r2, [r7, #16]
 800b89c:	4313      	orrs	r3, r2
 800b89e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b8a0:	683b      	ldr	r3, [r7, #0]
 800b8a2:	699b      	ldr	r3, [r3, #24]
 800b8a4:	693a      	ldr	r2, [r7, #16]
 800b8a6:	4313      	orrs	r3, r2
 800b8a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	693a      	ldr	r2, [r7, #16]
 800b8ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	68fa      	ldr	r2, [r7, #12]
 800b8b4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b8b6:	683b      	ldr	r3, [r7, #0]
 800b8b8:	685a      	ldr	r2, [r3, #4]
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	697a      	ldr	r2, [r7, #20]
 800b8c2:	621a      	str	r2, [r3, #32]
}
 800b8c4:	bf00      	nop
 800b8c6:	371c      	adds	r7, #28
 800b8c8:	46bd      	mov	sp, r7
 800b8ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ce:	4770      	bx	lr
 800b8d0:	40012c00 	.word	0x40012c00
 800b8d4:	40013400 	.word	0x40013400
 800b8d8:	40014000 	.word	0x40014000
 800b8dc:	40014400 	.word	0x40014400
 800b8e0:	40014800 	.word	0x40014800
 800b8e4:	40015000 	.word	0x40015000

0800b8e8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b8e8:	b480      	push	{r7}
 800b8ea:	b087      	sub	sp, #28
 800b8ec:	af00      	add	r7, sp, #0
 800b8ee:	6078      	str	r0, [r7, #4]
 800b8f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	6a1b      	ldr	r3, [r3, #32]
 800b8f6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	6a1b      	ldr	r3, [r3, #32]
 800b8fc:	f023 0210 	bic.w	r2, r3, #16
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	685b      	ldr	r3, [r3, #4]
 800b908:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	699b      	ldr	r3, [r3, #24]
 800b90e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b916:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b91a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b91c:	68fb      	ldr	r3, [r7, #12]
 800b91e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b922:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b924:	683b      	ldr	r3, [r7, #0]
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	021b      	lsls	r3, r3, #8
 800b92a:	68fa      	ldr	r2, [r7, #12]
 800b92c:	4313      	orrs	r3, r2
 800b92e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b930:	697b      	ldr	r3, [r7, #20]
 800b932:	f023 0320 	bic.w	r3, r3, #32
 800b936:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b938:	683b      	ldr	r3, [r7, #0]
 800b93a:	689b      	ldr	r3, [r3, #8]
 800b93c:	011b      	lsls	r3, r3, #4
 800b93e:	697a      	ldr	r2, [r7, #20]
 800b940:	4313      	orrs	r3, r2
 800b942:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	4a2c      	ldr	r2, [pc, #176]	@ (800b9f8 <TIM_OC2_SetConfig+0x110>)
 800b948:	4293      	cmp	r3, r2
 800b94a:	d007      	beq.n	800b95c <TIM_OC2_SetConfig+0x74>
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	4a2b      	ldr	r2, [pc, #172]	@ (800b9fc <TIM_OC2_SetConfig+0x114>)
 800b950:	4293      	cmp	r3, r2
 800b952:	d003      	beq.n	800b95c <TIM_OC2_SetConfig+0x74>
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	4a2a      	ldr	r2, [pc, #168]	@ (800ba00 <TIM_OC2_SetConfig+0x118>)
 800b958:	4293      	cmp	r3, r2
 800b95a:	d10d      	bne.n	800b978 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b95c:	697b      	ldr	r3, [r7, #20]
 800b95e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b962:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b964:	683b      	ldr	r3, [r7, #0]
 800b966:	68db      	ldr	r3, [r3, #12]
 800b968:	011b      	lsls	r3, r3, #4
 800b96a:	697a      	ldr	r2, [r7, #20]
 800b96c:	4313      	orrs	r3, r2
 800b96e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b970:	697b      	ldr	r3, [r7, #20]
 800b972:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b976:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	4a1f      	ldr	r2, [pc, #124]	@ (800b9f8 <TIM_OC2_SetConfig+0x110>)
 800b97c:	4293      	cmp	r3, r2
 800b97e:	d013      	beq.n	800b9a8 <TIM_OC2_SetConfig+0xc0>
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	4a1e      	ldr	r2, [pc, #120]	@ (800b9fc <TIM_OC2_SetConfig+0x114>)
 800b984:	4293      	cmp	r3, r2
 800b986:	d00f      	beq.n	800b9a8 <TIM_OC2_SetConfig+0xc0>
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	4a1e      	ldr	r2, [pc, #120]	@ (800ba04 <TIM_OC2_SetConfig+0x11c>)
 800b98c:	4293      	cmp	r3, r2
 800b98e:	d00b      	beq.n	800b9a8 <TIM_OC2_SetConfig+0xc0>
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	4a1d      	ldr	r2, [pc, #116]	@ (800ba08 <TIM_OC2_SetConfig+0x120>)
 800b994:	4293      	cmp	r3, r2
 800b996:	d007      	beq.n	800b9a8 <TIM_OC2_SetConfig+0xc0>
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	4a1c      	ldr	r2, [pc, #112]	@ (800ba0c <TIM_OC2_SetConfig+0x124>)
 800b99c:	4293      	cmp	r3, r2
 800b99e:	d003      	beq.n	800b9a8 <TIM_OC2_SetConfig+0xc0>
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	4a17      	ldr	r2, [pc, #92]	@ (800ba00 <TIM_OC2_SetConfig+0x118>)
 800b9a4:	4293      	cmp	r3, r2
 800b9a6:	d113      	bne.n	800b9d0 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b9a8:	693b      	ldr	r3, [r7, #16]
 800b9aa:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800b9ae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b9b0:	693b      	ldr	r3, [r7, #16]
 800b9b2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800b9b6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b9b8:	683b      	ldr	r3, [r7, #0]
 800b9ba:	695b      	ldr	r3, [r3, #20]
 800b9bc:	009b      	lsls	r3, r3, #2
 800b9be:	693a      	ldr	r2, [r7, #16]
 800b9c0:	4313      	orrs	r3, r2
 800b9c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b9c4:	683b      	ldr	r3, [r7, #0]
 800b9c6:	699b      	ldr	r3, [r3, #24]
 800b9c8:	009b      	lsls	r3, r3, #2
 800b9ca:	693a      	ldr	r2, [r7, #16]
 800b9cc:	4313      	orrs	r3, r2
 800b9ce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	693a      	ldr	r2, [r7, #16]
 800b9d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	68fa      	ldr	r2, [r7, #12]
 800b9da:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b9dc:	683b      	ldr	r3, [r7, #0]
 800b9de:	685a      	ldr	r2, [r3, #4]
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	697a      	ldr	r2, [r7, #20]
 800b9e8:	621a      	str	r2, [r3, #32]
}
 800b9ea:	bf00      	nop
 800b9ec:	371c      	adds	r7, #28
 800b9ee:	46bd      	mov	sp, r7
 800b9f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9f4:	4770      	bx	lr
 800b9f6:	bf00      	nop
 800b9f8:	40012c00 	.word	0x40012c00
 800b9fc:	40013400 	.word	0x40013400
 800ba00:	40015000 	.word	0x40015000
 800ba04:	40014000 	.word	0x40014000
 800ba08:	40014400 	.word	0x40014400
 800ba0c:	40014800 	.word	0x40014800

0800ba10 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ba10:	b480      	push	{r7}
 800ba12:	b087      	sub	sp, #28
 800ba14:	af00      	add	r7, sp, #0
 800ba16:	6078      	str	r0, [r7, #4]
 800ba18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	6a1b      	ldr	r3, [r3, #32]
 800ba1e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	6a1b      	ldr	r3, [r3, #32]
 800ba24:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	685b      	ldr	r3, [r3, #4]
 800ba30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	69db      	ldr	r3, [r3, #28]
 800ba36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ba3e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ba42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	f023 0303 	bic.w	r3, r3, #3
 800ba4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ba4c:	683b      	ldr	r3, [r7, #0]
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	68fa      	ldr	r2, [r7, #12]
 800ba52:	4313      	orrs	r3, r2
 800ba54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800ba56:	697b      	ldr	r3, [r7, #20]
 800ba58:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800ba5c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ba5e:	683b      	ldr	r3, [r7, #0]
 800ba60:	689b      	ldr	r3, [r3, #8]
 800ba62:	021b      	lsls	r3, r3, #8
 800ba64:	697a      	ldr	r2, [r7, #20]
 800ba66:	4313      	orrs	r3, r2
 800ba68:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	4a2b      	ldr	r2, [pc, #172]	@ (800bb1c <TIM_OC3_SetConfig+0x10c>)
 800ba6e:	4293      	cmp	r3, r2
 800ba70:	d007      	beq.n	800ba82 <TIM_OC3_SetConfig+0x72>
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	4a2a      	ldr	r2, [pc, #168]	@ (800bb20 <TIM_OC3_SetConfig+0x110>)
 800ba76:	4293      	cmp	r3, r2
 800ba78:	d003      	beq.n	800ba82 <TIM_OC3_SetConfig+0x72>
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	4a29      	ldr	r2, [pc, #164]	@ (800bb24 <TIM_OC3_SetConfig+0x114>)
 800ba7e:	4293      	cmp	r3, r2
 800ba80:	d10d      	bne.n	800ba9e <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800ba82:	697b      	ldr	r3, [r7, #20]
 800ba84:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800ba88:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800ba8a:	683b      	ldr	r3, [r7, #0]
 800ba8c:	68db      	ldr	r3, [r3, #12]
 800ba8e:	021b      	lsls	r3, r3, #8
 800ba90:	697a      	ldr	r2, [r7, #20]
 800ba92:	4313      	orrs	r3, r2
 800ba94:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800ba96:	697b      	ldr	r3, [r7, #20]
 800ba98:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800ba9c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	4a1e      	ldr	r2, [pc, #120]	@ (800bb1c <TIM_OC3_SetConfig+0x10c>)
 800baa2:	4293      	cmp	r3, r2
 800baa4:	d013      	beq.n	800bace <TIM_OC3_SetConfig+0xbe>
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	4a1d      	ldr	r2, [pc, #116]	@ (800bb20 <TIM_OC3_SetConfig+0x110>)
 800baaa:	4293      	cmp	r3, r2
 800baac:	d00f      	beq.n	800bace <TIM_OC3_SetConfig+0xbe>
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	4a1d      	ldr	r2, [pc, #116]	@ (800bb28 <TIM_OC3_SetConfig+0x118>)
 800bab2:	4293      	cmp	r3, r2
 800bab4:	d00b      	beq.n	800bace <TIM_OC3_SetConfig+0xbe>
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	4a1c      	ldr	r2, [pc, #112]	@ (800bb2c <TIM_OC3_SetConfig+0x11c>)
 800baba:	4293      	cmp	r3, r2
 800babc:	d007      	beq.n	800bace <TIM_OC3_SetConfig+0xbe>
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	4a1b      	ldr	r2, [pc, #108]	@ (800bb30 <TIM_OC3_SetConfig+0x120>)
 800bac2:	4293      	cmp	r3, r2
 800bac4:	d003      	beq.n	800bace <TIM_OC3_SetConfig+0xbe>
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	4a16      	ldr	r2, [pc, #88]	@ (800bb24 <TIM_OC3_SetConfig+0x114>)
 800baca:	4293      	cmp	r3, r2
 800bacc:	d113      	bne.n	800baf6 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800bace:	693b      	ldr	r3, [r7, #16]
 800bad0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800bad4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800bad6:	693b      	ldr	r3, [r7, #16]
 800bad8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800badc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800bade:	683b      	ldr	r3, [r7, #0]
 800bae0:	695b      	ldr	r3, [r3, #20]
 800bae2:	011b      	lsls	r3, r3, #4
 800bae4:	693a      	ldr	r2, [r7, #16]
 800bae6:	4313      	orrs	r3, r2
 800bae8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800baea:	683b      	ldr	r3, [r7, #0]
 800baec:	699b      	ldr	r3, [r3, #24]
 800baee:	011b      	lsls	r3, r3, #4
 800baf0:	693a      	ldr	r2, [r7, #16]
 800baf2:	4313      	orrs	r3, r2
 800baf4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	693a      	ldr	r2, [r7, #16]
 800bafa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	68fa      	ldr	r2, [r7, #12]
 800bb00:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800bb02:	683b      	ldr	r3, [r7, #0]
 800bb04:	685a      	ldr	r2, [r3, #4]
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	697a      	ldr	r2, [r7, #20]
 800bb0e:	621a      	str	r2, [r3, #32]
}
 800bb10:	bf00      	nop
 800bb12:	371c      	adds	r7, #28
 800bb14:	46bd      	mov	sp, r7
 800bb16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb1a:	4770      	bx	lr
 800bb1c:	40012c00 	.word	0x40012c00
 800bb20:	40013400 	.word	0x40013400
 800bb24:	40015000 	.word	0x40015000
 800bb28:	40014000 	.word	0x40014000
 800bb2c:	40014400 	.word	0x40014400
 800bb30:	40014800 	.word	0x40014800

0800bb34 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800bb34:	b480      	push	{r7}
 800bb36:	b087      	sub	sp, #28
 800bb38:	af00      	add	r7, sp, #0
 800bb3a:	6078      	str	r0, [r7, #4]
 800bb3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	6a1b      	ldr	r3, [r3, #32]
 800bb42:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	6a1b      	ldr	r3, [r3, #32]
 800bb48:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	685b      	ldr	r3, [r3, #4]
 800bb54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	69db      	ldr	r3, [r3, #28]
 800bb5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800bb62:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bb66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800bb6e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bb70:	683b      	ldr	r3, [r7, #0]
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	021b      	lsls	r3, r3, #8
 800bb76:	68fa      	ldr	r2, [r7, #12]
 800bb78:	4313      	orrs	r3, r2
 800bb7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800bb7c:	697b      	ldr	r3, [r7, #20]
 800bb7e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800bb82:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800bb84:	683b      	ldr	r3, [r7, #0]
 800bb86:	689b      	ldr	r3, [r3, #8]
 800bb88:	031b      	lsls	r3, r3, #12
 800bb8a:	697a      	ldr	r2, [r7, #20]
 800bb8c:	4313      	orrs	r3, r2
 800bb8e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	4a2c      	ldr	r2, [pc, #176]	@ (800bc44 <TIM_OC4_SetConfig+0x110>)
 800bb94:	4293      	cmp	r3, r2
 800bb96:	d007      	beq.n	800bba8 <TIM_OC4_SetConfig+0x74>
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	4a2b      	ldr	r2, [pc, #172]	@ (800bc48 <TIM_OC4_SetConfig+0x114>)
 800bb9c:	4293      	cmp	r3, r2
 800bb9e:	d003      	beq.n	800bba8 <TIM_OC4_SetConfig+0x74>
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	4a2a      	ldr	r2, [pc, #168]	@ (800bc4c <TIM_OC4_SetConfig+0x118>)
 800bba4:	4293      	cmp	r3, r2
 800bba6:	d10d      	bne.n	800bbc4 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800bba8:	697b      	ldr	r3, [r7, #20]
 800bbaa:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800bbae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800bbb0:	683b      	ldr	r3, [r7, #0]
 800bbb2:	68db      	ldr	r3, [r3, #12]
 800bbb4:	031b      	lsls	r3, r3, #12
 800bbb6:	697a      	ldr	r2, [r7, #20]
 800bbb8:	4313      	orrs	r3, r2
 800bbba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800bbbc:	697b      	ldr	r3, [r7, #20]
 800bbbe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800bbc2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	4a1f      	ldr	r2, [pc, #124]	@ (800bc44 <TIM_OC4_SetConfig+0x110>)
 800bbc8:	4293      	cmp	r3, r2
 800bbca:	d013      	beq.n	800bbf4 <TIM_OC4_SetConfig+0xc0>
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	4a1e      	ldr	r2, [pc, #120]	@ (800bc48 <TIM_OC4_SetConfig+0x114>)
 800bbd0:	4293      	cmp	r3, r2
 800bbd2:	d00f      	beq.n	800bbf4 <TIM_OC4_SetConfig+0xc0>
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	4a1e      	ldr	r2, [pc, #120]	@ (800bc50 <TIM_OC4_SetConfig+0x11c>)
 800bbd8:	4293      	cmp	r3, r2
 800bbda:	d00b      	beq.n	800bbf4 <TIM_OC4_SetConfig+0xc0>
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	4a1d      	ldr	r2, [pc, #116]	@ (800bc54 <TIM_OC4_SetConfig+0x120>)
 800bbe0:	4293      	cmp	r3, r2
 800bbe2:	d007      	beq.n	800bbf4 <TIM_OC4_SetConfig+0xc0>
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	4a1c      	ldr	r2, [pc, #112]	@ (800bc58 <TIM_OC4_SetConfig+0x124>)
 800bbe8:	4293      	cmp	r3, r2
 800bbea:	d003      	beq.n	800bbf4 <TIM_OC4_SetConfig+0xc0>
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	4a17      	ldr	r2, [pc, #92]	@ (800bc4c <TIM_OC4_SetConfig+0x118>)
 800bbf0:	4293      	cmp	r3, r2
 800bbf2:	d113      	bne.n	800bc1c <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800bbf4:	693b      	ldr	r3, [r7, #16]
 800bbf6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800bbfa:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800bbfc:	693b      	ldr	r3, [r7, #16]
 800bbfe:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800bc02:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800bc04:	683b      	ldr	r3, [r7, #0]
 800bc06:	695b      	ldr	r3, [r3, #20]
 800bc08:	019b      	lsls	r3, r3, #6
 800bc0a:	693a      	ldr	r2, [r7, #16]
 800bc0c:	4313      	orrs	r3, r2
 800bc0e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800bc10:	683b      	ldr	r3, [r7, #0]
 800bc12:	699b      	ldr	r3, [r3, #24]
 800bc14:	019b      	lsls	r3, r3, #6
 800bc16:	693a      	ldr	r2, [r7, #16]
 800bc18:	4313      	orrs	r3, r2
 800bc1a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	693a      	ldr	r2, [r7, #16]
 800bc20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	68fa      	ldr	r2, [r7, #12]
 800bc26:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800bc28:	683b      	ldr	r3, [r7, #0]
 800bc2a:	685a      	ldr	r2, [r3, #4]
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	697a      	ldr	r2, [r7, #20]
 800bc34:	621a      	str	r2, [r3, #32]
}
 800bc36:	bf00      	nop
 800bc38:	371c      	adds	r7, #28
 800bc3a:	46bd      	mov	sp, r7
 800bc3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc40:	4770      	bx	lr
 800bc42:	bf00      	nop
 800bc44:	40012c00 	.word	0x40012c00
 800bc48:	40013400 	.word	0x40013400
 800bc4c:	40015000 	.word	0x40015000
 800bc50:	40014000 	.word	0x40014000
 800bc54:	40014400 	.word	0x40014400
 800bc58:	40014800 	.word	0x40014800

0800bc5c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800bc5c:	b480      	push	{r7}
 800bc5e:	b087      	sub	sp, #28
 800bc60:	af00      	add	r7, sp, #0
 800bc62:	6078      	str	r0, [r7, #4]
 800bc64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	6a1b      	ldr	r3, [r3, #32]
 800bc6a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	6a1b      	ldr	r3, [r3, #32]
 800bc70:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	685b      	ldr	r3, [r3, #4]
 800bc7c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bc82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800bc8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bc8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bc90:	683b      	ldr	r3, [r7, #0]
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	68fa      	ldr	r2, [r7, #12]
 800bc96:	4313      	orrs	r3, r2
 800bc98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800bc9a:	693b      	ldr	r3, [r7, #16]
 800bc9c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800bca0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800bca2:	683b      	ldr	r3, [r7, #0]
 800bca4:	689b      	ldr	r3, [r3, #8]
 800bca6:	041b      	lsls	r3, r3, #16
 800bca8:	693a      	ldr	r2, [r7, #16]
 800bcaa:	4313      	orrs	r3, r2
 800bcac:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	4a19      	ldr	r2, [pc, #100]	@ (800bd18 <TIM_OC5_SetConfig+0xbc>)
 800bcb2:	4293      	cmp	r3, r2
 800bcb4:	d013      	beq.n	800bcde <TIM_OC5_SetConfig+0x82>
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	4a18      	ldr	r2, [pc, #96]	@ (800bd1c <TIM_OC5_SetConfig+0xc0>)
 800bcba:	4293      	cmp	r3, r2
 800bcbc:	d00f      	beq.n	800bcde <TIM_OC5_SetConfig+0x82>
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	4a17      	ldr	r2, [pc, #92]	@ (800bd20 <TIM_OC5_SetConfig+0xc4>)
 800bcc2:	4293      	cmp	r3, r2
 800bcc4:	d00b      	beq.n	800bcde <TIM_OC5_SetConfig+0x82>
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	4a16      	ldr	r2, [pc, #88]	@ (800bd24 <TIM_OC5_SetConfig+0xc8>)
 800bcca:	4293      	cmp	r3, r2
 800bccc:	d007      	beq.n	800bcde <TIM_OC5_SetConfig+0x82>
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	4a15      	ldr	r2, [pc, #84]	@ (800bd28 <TIM_OC5_SetConfig+0xcc>)
 800bcd2:	4293      	cmp	r3, r2
 800bcd4:	d003      	beq.n	800bcde <TIM_OC5_SetConfig+0x82>
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	4a14      	ldr	r2, [pc, #80]	@ (800bd2c <TIM_OC5_SetConfig+0xd0>)
 800bcda:	4293      	cmp	r3, r2
 800bcdc:	d109      	bne.n	800bcf2 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800bcde:	697b      	ldr	r3, [r7, #20]
 800bce0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800bce4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800bce6:	683b      	ldr	r3, [r7, #0]
 800bce8:	695b      	ldr	r3, [r3, #20]
 800bcea:	021b      	lsls	r3, r3, #8
 800bcec:	697a      	ldr	r2, [r7, #20]
 800bcee:	4313      	orrs	r3, r2
 800bcf0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	697a      	ldr	r2, [r7, #20]
 800bcf6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	68fa      	ldr	r2, [r7, #12]
 800bcfc:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800bcfe:	683b      	ldr	r3, [r7, #0]
 800bd00:	685a      	ldr	r2, [r3, #4]
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	693a      	ldr	r2, [r7, #16]
 800bd0a:	621a      	str	r2, [r3, #32]
}
 800bd0c:	bf00      	nop
 800bd0e:	371c      	adds	r7, #28
 800bd10:	46bd      	mov	sp, r7
 800bd12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd16:	4770      	bx	lr
 800bd18:	40012c00 	.word	0x40012c00
 800bd1c:	40013400 	.word	0x40013400
 800bd20:	40014000 	.word	0x40014000
 800bd24:	40014400 	.word	0x40014400
 800bd28:	40014800 	.word	0x40014800
 800bd2c:	40015000 	.word	0x40015000

0800bd30 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800bd30:	b480      	push	{r7}
 800bd32:	b087      	sub	sp, #28
 800bd34:	af00      	add	r7, sp, #0
 800bd36:	6078      	str	r0, [r7, #4]
 800bd38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	6a1b      	ldr	r3, [r3, #32]
 800bd3e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	6a1b      	ldr	r3, [r3, #32]
 800bd44:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	685b      	ldr	r3, [r3, #4]
 800bd50:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bd56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800bd58:	68fb      	ldr	r3, [r7, #12]
 800bd5a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800bd5e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bd62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bd64:	683b      	ldr	r3, [r7, #0]
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	021b      	lsls	r3, r3, #8
 800bd6a:	68fa      	ldr	r2, [r7, #12]
 800bd6c:	4313      	orrs	r3, r2
 800bd6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800bd70:	693b      	ldr	r3, [r7, #16]
 800bd72:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800bd76:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800bd78:	683b      	ldr	r3, [r7, #0]
 800bd7a:	689b      	ldr	r3, [r3, #8]
 800bd7c:	051b      	lsls	r3, r3, #20
 800bd7e:	693a      	ldr	r2, [r7, #16]
 800bd80:	4313      	orrs	r3, r2
 800bd82:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	4a1a      	ldr	r2, [pc, #104]	@ (800bdf0 <TIM_OC6_SetConfig+0xc0>)
 800bd88:	4293      	cmp	r3, r2
 800bd8a:	d013      	beq.n	800bdb4 <TIM_OC6_SetConfig+0x84>
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	4a19      	ldr	r2, [pc, #100]	@ (800bdf4 <TIM_OC6_SetConfig+0xc4>)
 800bd90:	4293      	cmp	r3, r2
 800bd92:	d00f      	beq.n	800bdb4 <TIM_OC6_SetConfig+0x84>
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	4a18      	ldr	r2, [pc, #96]	@ (800bdf8 <TIM_OC6_SetConfig+0xc8>)
 800bd98:	4293      	cmp	r3, r2
 800bd9a:	d00b      	beq.n	800bdb4 <TIM_OC6_SetConfig+0x84>
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	4a17      	ldr	r2, [pc, #92]	@ (800bdfc <TIM_OC6_SetConfig+0xcc>)
 800bda0:	4293      	cmp	r3, r2
 800bda2:	d007      	beq.n	800bdb4 <TIM_OC6_SetConfig+0x84>
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	4a16      	ldr	r2, [pc, #88]	@ (800be00 <TIM_OC6_SetConfig+0xd0>)
 800bda8:	4293      	cmp	r3, r2
 800bdaa:	d003      	beq.n	800bdb4 <TIM_OC6_SetConfig+0x84>
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	4a15      	ldr	r2, [pc, #84]	@ (800be04 <TIM_OC6_SetConfig+0xd4>)
 800bdb0:	4293      	cmp	r3, r2
 800bdb2:	d109      	bne.n	800bdc8 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800bdb4:	697b      	ldr	r3, [r7, #20]
 800bdb6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800bdba:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800bdbc:	683b      	ldr	r3, [r7, #0]
 800bdbe:	695b      	ldr	r3, [r3, #20]
 800bdc0:	029b      	lsls	r3, r3, #10
 800bdc2:	697a      	ldr	r2, [r7, #20]
 800bdc4:	4313      	orrs	r3, r2
 800bdc6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	697a      	ldr	r2, [r7, #20]
 800bdcc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	68fa      	ldr	r2, [r7, #12]
 800bdd2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800bdd4:	683b      	ldr	r3, [r7, #0]
 800bdd6:	685a      	ldr	r2, [r3, #4]
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	693a      	ldr	r2, [r7, #16]
 800bde0:	621a      	str	r2, [r3, #32]
}
 800bde2:	bf00      	nop
 800bde4:	371c      	adds	r7, #28
 800bde6:	46bd      	mov	sp, r7
 800bde8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdec:	4770      	bx	lr
 800bdee:	bf00      	nop
 800bdf0:	40012c00 	.word	0x40012c00
 800bdf4:	40013400 	.word	0x40013400
 800bdf8:	40014000 	.word	0x40014000
 800bdfc:	40014400 	.word	0x40014400
 800be00:	40014800 	.word	0x40014800
 800be04:	40015000 	.word	0x40015000

0800be08 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800be08:	b480      	push	{r7}
 800be0a:	b087      	sub	sp, #28
 800be0c:	af00      	add	r7, sp, #0
 800be0e:	60f8      	str	r0, [r7, #12]
 800be10:	60b9      	str	r1, [r7, #8]
 800be12:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800be14:	68fb      	ldr	r3, [r7, #12]
 800be16:	6a1b      	ldr	r3, [r3, #32]
 800be18:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800be1a:	68fb      	ldr	r3, [r7, #12]
 800be1c:	6a1b      	ldr	r3, [r3, #32]
 800be1e:	f023 0201 	bic.w	r2, r3, #1
 800be22:	68fb      	ldr	r3, [r7, #12]
 800be24:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800be26:	68fb      	ldr	r3, [r7, #12]
 800be28:	699b      	ldr	r3, [r3, #24]
 800be2a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800be2c:	693b      	ldr	r3, [r7, #16]
 800be2e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800be32:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	011b      	lsls	r3, r3, #4
 800be38:	693a      	ldr	r2, [r7, #16]
 800be3a:	4313      	orrs	r3, r2
 800be3c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800be3e:	697b      	ldr	r3, [r7, #20]
 800be40:	f023 030a 	bic.w	r3, r3, #10
 800be44:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800be46:	697a      	ldr	r2, [r7, #20]
 800be48:	68bb      	ldr	r3, [r7, #8]
 800be4a:	4313      	orrs	r3, r2
 800be4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	693a      	ldr	r2, [r7, #16]
 800be52:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	697a      	ldr	r2, [r7, #20]
 800be58:	621a      	str	r2, [r3, #32]
}
 800be5a:	bf00      	nop
 800be5c:	371c      	adds	r7, #28
 800be5e:	46bd      	mov	sp, r7
 800be60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be64:	4770      	bx	lr

0800be66 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800be66:	b480      	push	{r7}
 800be68:	b087      	sub	sp, #28
 800be6a:	af00      	add	r7, sp, #0
 800be6c:	60f8      	str	r0, [r7, #12]
 800be6e:	60b9      	str	r1, [r7, #8]
 800be70:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800be72:	68fb      	ldr	r3, [r7, #12]
 800be74:	6a1b      	ldr	r3, [r3, #32]
 800be76:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800be78:	68fb      	ldr	r3, [r7, #12]
 800be7a:	6a1b      	ldr	r3, [r3, #32]
 800be7c:	f023 0210 	bic.w	r2, r3, #16
 800be80:	68fb      	ldr	r3, [r7, #12]
 800be82:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800be84:	68fb      	ldr	r3, [r7, #12]
 800be86:	699b      	ldr	r3, [r3, #24]
 800be88:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800be8a:	693b      	ldr	r3, [r7, #16]
 800be8c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800be90:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	031b      	lsls	r3, r3, #12
 800be96:	693a      	ldr	r2, [r7, #16]
 800be98:	4313      	orrs	r3, r2
 800be9a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800be9c:	697b      	ldr	r3, [r7, #20]
 800be9e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800bea2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800bea4:	68bb      	ldr	r3, [r7, #8]
 800bea6:	011b      	lsls	r3, r3, #4
 800bea8:	697a      	ldr	r2, [r7, #20]
 800beaa:	4313      	orrs	r3, r2
 800beac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800beae:	68fb      	ldr	r3, [r7, #12]
 800beb0:	693a      	ldr	r2, [r7, #16]
 800beb2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800beb4:	68fb      	ldr	r3, [r7, #12]
 800beb6:	697a      	ldr	r2, [r7, #20]
 800beb8:	621a      	str	r2, [r3, #32]
}
 800beba:	bf00      	nop
 800bebc:	371c      	adds	r7, #28
 800bebe:	46bd      	mov	sp, r7
 800bec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bec4:	4770      	bx	lr

0800bec6 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800bec6:	b480      	push	{r7}
 800bec8:	b085      	sub	sp, #20
 800beca:	af00      	add	r7, sp, #0
 800becc:	6078      	str	r0, [r7, #4]
 800bece:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	689b      	ldr	r3, [r3, #8]
 800bed4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800bed6:	68fb      	ldr	r3, [r7, #12]
 800bed8:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800bedc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bee0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800bee2:	683a      	ldr	r2, [r7, #0]
 800bee4:	68fb      	ldr	r3, [r7, #12]
 800bee6:	4313      	orrs	r3, r2
 800bee8:	f043 0307 	orr.w	r3, r3, #7
 800beec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	68fa      	ldr	r2, [r7, #12]
 800bef2:	609a      	str	r2, [r3, #8]
}
 800bef4:	bf00      	nop
 800bef6:	3714      	adds	r7, #20
 800bef8:	46bd      	mov	sp, r7
 800befa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800befe:	4770      	bx	lr

0800bf00 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800bf00:	b480      	push	{r7}
 800bf02:	b087      	sub	sp, #28
 800bf04:	af00      	add	r7, sp, #0
 800bf06:	60f8      	str	r0, [r7, #12]
 800bf08:	60b9      	str	r1, [r7, #8]
 800bf0a:	607a      	str	r2, [r7, #4]
 800bf0c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800bf0e:	68fb      	ldr	r3, [r7, #12]
 800bf10:	689b      	ldr	r3, [r3, #8]
 800bf12:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bf14:	697b      	ldr	r3, [r7, #20]
 800bf16:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800bf1a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800bf1c:	683b      	ldr	r3, [r7, #0]
 800bf1e:	021a      	lsls	r2, r3, #8
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	431a      	orrs	r2, r3
 800bf24:	68bb      	ldr	r3, [r7, #8]
 800bf26:	4313      	orrs	r3, r2
 800bf28:	697a      	ldr	r2, [r7, #20]
 800bf2a:	4313      	orrs	r3, r2
 800bf2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bf2e:	68fb      	ldr	r3, [r7, #12]
 800bf30:	697a      	ldr	r2, [r7, #20]
 800bf32:	609a      	str	r2, [r3, #8]
}
 800bf34:	bf00      	nop
 800bf36:	371c      	adds	r7, #28
 800bf38:	46bd      	mov	sp, r7
 800bf3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf3e:	4770      	bx	lr

0800bf40 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800bf40:	b480      	push	{r7}
 800bf42:	b087      	sub	sp, #28
 800bf44:	af00      	add	r7, sp, #0
 800bf46:	60f8      	str	r0, [r7, #12]
 800bf48:	60b9      	str	r1, [r7, #8]
 800bf4a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800bf4c:	68bb      	ldr	r3, [r7, #8]
 800bf4e:	f003 031f 	and.w	r3, r3, #31
 800bf52:	2201      	movs	r2, #1
 800bf54:	fa02 f303 	lsl.w	r3, r2, r3
 800bf58:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800bf5a:	68fb      	ldr	r3, [r7, #12]
 800bf5c:	6a1a      	ldr	r2, [r3, #32]
 800bf5e:	697b      	ldr	r3, [r7, #20]
 800bf60:	43db      	mvns	r3, r3
 800bf62:	401a      	ands	r2, r3
 800bf64:	68fb      	ldr	r3, [r7, #12]
 800bf66:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	6a1a      	ldr	r2, [r3, #32]
 800bf6c:	68bb      	ldr	r3, [r7, #8]
 800bf6e:	f003 031f 	and.w	r3, r3, #31
 800bf72:	6879      	ldr	r1, [r7, #4]
 800bf74:	fa01 f303 	lsl.w	r3, r1, r3
 800bf78:	431a      	orrs	r2, r3
 800bf7a:	68fb      	ldr	r3, [r7, #12]
 800bf7c:	621a      	str	r2, [r3, #32]
}
 800bf7e:	bf00      	nop
 800bf80:	371c      	adds	r7, #28
 800bf82:	46bd      	mov	sp, r7
 800bf84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf88:	4770      	bx	lr
	...

0800bf8c <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 800bf8c:	b480      	push	{r7}
 800bf8e:	b083      	sub	sp, #12
 800bf90:	af00      	add	r7, sp, #0
 800bf92:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	4a26      	ldr	r2, [pc, #152]	@ (800c030 <TIM_ResetCallback+0xa4>)
 800bf98:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	4a25      	ldr	r2, [pc, #148]	@ (800c034 <TIM_ResetCallback+0xa8>)
 800bfa0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	4a24      	ldr	r2, [pc, #144]	@ (800c038 <TIM_ResetCallback+0xac>)
 800bfa8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	4a23      	ldr	r2, [pc, #140]	@ (800c03c <TIM_ResetCallback+0xb0>)
 800bfb0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	4a22      	ldr	r2, [pc, #136]	@ (800c040 <TIM_ResetCallback+0xb4>)
 800bfb8:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	4a21      	ldr	r2, [pc, #132]	@ (800c044 <TIM_ResetCallback+0xb8>)
 800bfc0:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	4a20      	ldr	r2, [pc, #128]	@ (800c048 <TIM_ResetCallback+0xbc>)
 800bfc8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	4a1f      	ldr	r2, [pc, #124]	@ (800c04c <TIM_ResetCallback+0xc0>)
 800bfd0:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	4a1e      	ldr	r2, [pc, #120]	@ (800c050 <TIM_ResetCallback+0xc4>)
 800bfd8:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	4a1d      	ldr	r2, [pc, #116]	@ (800c054 <TIM_ResetCallback+0xc8>)
 800bfe0:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	4a1c      	ldr	r2, [pc, #112]	@ (800c058 <TIM_ResetCallback+0xcc>)
 800bfe8:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	4a1b      	ldr	r2, [pc, #108]	@ (800c05c <TIM_ResetCallback+0xd0>)
 800bff0:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	4a1a      	ldr	r2, [pc, #104]	@ (800c060 <TIM_ResetCallback+0xd4>)
 800bff8:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	4a19      	ldr	r2, [pc, #100]	@ (800c064 <TIM_ResetCallback+0xd8>)
 800c000:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  htim->EncoderIndexCallback              = HAL_TIMEx_EncoderIndexCallback;
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	4a18      	ldr	r2, [pc, #96]	@ (800c068 <TIM_ResetCallback+0xdc>)
 800c008:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  htim->DirectionChangeCallback           = HAL_TIMEx_DirectionChangeCallback;
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	4a17      	ldr	r2, [pc, #92]	@ (800c06c <TIM_ResetCallback+0xe0>)
 800c010:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  htim->IndexErrorCallback                = HAL_TIMEx_IndexErrorCallback;
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	4a16      	ldr	r2, [pc, #88]	@ (800c070 <TIM_ResetCallback+0xe4>)
 800c018:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  htim->TransitionErrorCallback           = HAL_TIMEx_TransitionErrorCallback;
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	4a15      	ldr	r2, [pc, #84]	@ (800c074 <TIM_ResetCallback+0xe8>)
 800c020:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 800c024:	bf00      	nop
 800c026:	370c      	adds	r7, #12
 800c028:	46bd      	mov	sp, r7
 800c02a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c02e:	4770      	bx	lr
 800c030:	08005121 	.word	0x08005121
 800c034:	0800b2d9 	.word	0x0800b2d9
 800c038:	0800b351 	.word	0x0800b351
 800c03c:	0800b365 	.word	0x0800b365
 800c040:	0800b301 	.word	0x0800b301
 800c044:	0800b315 	.word	0x0800b315
 800c048:	0800b2ed 	.word	0x0800b2ed
 800c04c:	0800b329 	.word	0x0800b329
 800c050:	0800b33d 	.word	0x0800b33d
 800c054:	0800b379 	.word	0x0800b379
 800c058:	0800c2cd 	.word	0x0800c2cd
 800c05c:	0800c2e1 	.word	0x0800c2e1
 800c060:	0800c2f5 	.word	0x0800c2f5
 800c064:	0800c309 	.word	0x0800c309
 800c068:	0800c31d 	.word	0x0800c31d
 800c06c:	0800c331 	.word	0x0800c331
 800c070:	0800c345 	.word	0x0800c345
 800c074:	0800c359 	.word	0x0800c359

0800c078 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c078:	b480      	push	{r7}
 800c07a:	b085      	sub	sp, #20
 800c07c:	af00      	add	r7, sp, #0
 800c07e:	6078      	str	r0, [r7, #4]
 800c080:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c088:	2b01      	cmp	r3, #1
 800c08a:	d101      	bne.n	800c090 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c08c:	2302      	movs	r3, #2
 800c08e:	e074      	b.n	800c17a <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	2201      	movs	r2, #1
 800c094:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	2202      	movs	r2, #2
 800c09c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	681b      	ldr	r3, [r3, #0]
 800c0a4:	685b      	ldr	r3, [r3, #4]
 800c0a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	689b      	ldr	r3, [r3, #8]
 800c0ae:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	681b      	ldr	r3, [r3, #0]
 800c0b4:	4a34      	ldr	r2, [pc, #208]	@ (800c188 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800c0b6:	4293      	cmp	r3, r2
 800c0b8:	d009      	beq.n	800c0ce <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	681b      	ldr	r3, [r3, #0]
 800c0be:	4a33      	ldr	r2, [pc, #204]	@ (800c18c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800c0c0:	4293      	cmp	r3, r2
 800c0c2:	d004      	beq.n	800c0ce <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	4a31      	ldr	r2, [pc, #196]	@ (800c190 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800c0ca:	4293      	cmp	r3, r2
 800c0cc:	d108      	bne.n	800c0e0 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800c0ce:	68fb      	ldr	r3, [r7, #12]
 800c0d0:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800c0d4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800c0d6:	683b      	ldr	r3, [r7, #0]
 800c0d8:	685b      	ldr	r3, [r3, #4]
 800c0da:	68fa      	ldr	r2, [r7, #12]
 800c0dc:	4313      	orrs	r3, r2
 800c0de:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800c0e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c0ea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c0ec:	683b      	ldr	r3, [r7, #0]
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	68fa      	ldr	r2, [r7, #12]
 800c0f2:	4313      	orrs	r3, r2
 800c0f4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	681b      	ldr	r3, [r3, #0]
 800c0fa:	68fa      	ldr	r2, [r7, #12]
 800c0fc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	4a21      	ldr	r2, [pc, #132]	@ (800c188 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800c104:	4293      	cmp	r3, r2
 800c106:	d022      	beq.n	800c14e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c110:	d01d      	beq.n	800c14e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	4a1f      	ldr	r2, [pc, #124]	@ (800c194 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800c118:	4293      	cmp	r3, r2
 800c11a:	d018      	beq.n	800c14e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	4a1d      	ldr	r2, [pc, #116]	@ (800c198 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800c122:	4293      	cmp	r3, r2
 800c124:	d013      	beq.n	800c14e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	4a1c      	ldr	r2, [pc, #112]	@ (800c19c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800c12c:	4293      	cmp	r3, r2
 800c12e:	d00e      	beq.n	800c14e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	4a15      	ldr	r2, [pc, #84]	@ (800c18c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800c136:	4293      	cmp	r3, r2
 800c138:	d009      	beq.n	800c14e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	681b      	ldr	r3, [r3, #0]
 800c13e:	4a18      	ldr	r2, [pc, #96]	@ (800c1a0 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800c140:	4293      	cmp	r3, r2
 800c142:	d004      	beq.n	800c14e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	681b      	ldr	r3, [r3, #0]
 800c148:	4a11      	ldr	r2, [pc, #68]	@ (800c190 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800c14a:	4293      	cmp	r3, r2
 800c14c:	d10c      	bne.n	800c168 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c14e:	68bb      	ldr	r3, [r7, #8]
 800c150:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c154:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c156:	683b      	ldr	r3, [r7, #0]
 800c158:	689b      	ldr	r3, [r3, #8]
 800c15a:	68ba      	ldr	r2, [r7, #8]
 800c15c:	4313      	orrs	r3, r2
 800c15e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	681b      	ldr	r3, [r3, #0]
 800c164:	68ba      	ldr	r2, [r7, #8]
 800c166:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	2201      	movs	r2, #1
 800c16c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	2200      	movs	r2, #0
 800c174:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800c178:	2300      	movs	r3, #0
}
 800c17a:	4618      	mov	r0, r3
 800c17c:	3714      	adds	r7, #20
 800c17e:	46bd      	mov	sp, r7
 800c180:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c184:	4770      	bx	lr
 800c186:	bf00      	nop
 800c188:	40012c00 	.word	0x40012c00
 800c18c:	40013400 	.word	0x40013400
 800c190:	40015000 	.word	0x40015000
 800c194:	40000400 	.word	0x40000400
 800c198:	40000800 	.word	0x40000800
 800c19c:	40000c00 	.word	0x40000c00
 800c1a0:	40014000 	.word	0x40014000

0800c1a4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800c1a4:	b480      	push	{r7}
 800c1a6:	b085      	sub	sp, #20
 800c1a8:	af00      	add	r7, sp, #0
 800c1aa:	6078      	str	r0, [r7, #4]
 800c1ac:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800c1ae:	2300      	movs	r3, #0
 800c1b0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c1b8:	2b01      	cmp	r3, #1
 800c1ba:	d101      	bne.n	800c1c0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800c1bc:	2302      	movs	r3, #2
 800c1be:	e078      	b.n	800c2b2 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	2201      	movs	r2, #1
 800c1c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800c1c8:	68fb      	ldr	r3, [r7, #12]
 800c1ca:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800c1ce:	683b      	ldr	r3, [r7, #0]
 800c1d0:	68db      	ldr	r3, [r3, #12]
 800c1d2:	4313      	orrs	r3, r2
 800c1d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800c1d6:	68fb      	ldr	r3, [r7, #12]
 800c1d8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800c1dc:	683b      	ldr	r3, [r7, #0]
 800c1de:	689b      	ldr	r3, [r3, #8]
 800c1e0:	4313      	orrs	r3, r2
 800c1e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800c1e4:	68fb      	ldr	r3, [r7, #12]
 800c1e6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800c1ea:	683b      	ldr	r3, [r7, #0]
 800c1ec:	685b      	ldr	r3, [r3, #4]
 800c1ee:	4313      	orrs	r3, r2
 800c1f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800c1f2:	68fb      	ldr	r3, [r7, #12]
 800c1f4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800c1f8:	683b      	ldr	r3, [r7, #0]
 800c1fa:	681b      	ldr	r3, [r3, #0]
 800c1fc:	4313      	orrs	r3, r2
 800c1fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800c200:	68fb      	ldr	r3, [r7, #12]
 800c202:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800c206:	683b      	ldr	r3, [r7, #0]
 800c208:	691b      	ldr	r3, [r3, #16]
 800c20a:	4313      	orrs	r3, r2
 800c20c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800c20e:	68fb      	ldr	r3, [r7, #12]
 800c210:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800c214:	683b      	ldr	r3, [r7, #0]
 800c216:	695b      	ldr	r3, [r3, #20]
 800c218:	4313      	orrs	r3, r2
 800c21a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800c21c:	68fb      	ldr	r3, [r7, #12]
 800c21e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800c222:	683b      	ldr	r3, [r7, #0]
 800c224:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c226:	4313      	orrs	r3, r2
 800c228:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800c22a:	68fb      	ldr	r3, [r7, #12]
 800c22c:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800c230:	683b      	ldr	r3, [r7, #0]
 800c232:	699b      	ldr	r3, [r3, #24]
 800c234:	041b      	lsls	r3, r3, #16
 800c236:	4313      	orrs	r3, r2
 800c238:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800c23a:	68fb      	ldr	r3, [r7, #12]
 800c23c:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800c240:	683b      	ldr	r3, [r7, #0]
 800c242:	69db      	ldr	r3, [r3, #28]
 800c244:	4313      	orrs	r3, r2
 800c246:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	681b      	ldr	r3, [r3, #0]
 800c24c:	4a1c      	ldr	r2, [pc, #112]	@ (800c2c0 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800c24e:	4293      	cmp	r3, r2
 800c250:	d009      	beq.n	800c266 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	681b      	ldr	r3, [r3, #0]
 800c256:	4a1b      	ldr	r2, [pc, #108]	@ (800c2c4 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800c258:	4293      	cmp	r3, r2
 800c25a:	d004      	beq.n	800c266 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	681b      	ldr	r3, [r3, #0]
 800c260:	4a19      	ldr	r2, [pc, #100]	@ (800c2c8 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800c262:	4293      	cmp	r3, r2
 800c264:	d11c      	bne.n	800c2a0 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800c266:	68fb      	ldr	r3, [r7, #12]
 800c268:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800c26c:	683b      	ldr	r3, [r7, #0]
 800c26e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c270:	051b      	lsls	r3, r3, #20
 800c272:	4313      	orrs	r3, r2
 800c274:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800c276:	68fb      	ldr	r3, [r7, #12]
 800c278:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800c27c:	683b      	ldr	r3, [r7, #0]
 800c27e:	6a1b      	ldr	r3, [r3, #32]
 800c280:	4313      	orrs	r3, r2
 800c282:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800c284:	68fb      	ldr	r3, [r7, #12]
 800c286:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800c28a:	683b      	ldr	r3, [r7, #0]
 800c28c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c28e:	4313      	orrs	r3, r2
 800c290:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800c292:	68fb      	ldr	r3, [r7, #12]
 800c294:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800c298:	683b      	ldr	r3, [r7, #0]
 800c29a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c29c:	4313      	orrs	r3, r2
 800c29e:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	68fa      	ldr	r2, [r7, #12]
 800c2a6:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	2200      	movs	r2, #0
 800c2ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800c2b0:	2300      	movs	r3, #0
}
 800c2b2:	4618      	mov	r0, r3
 800c2b4:	3714      	adds	r7, #20
 800c2b6:	46bd      	mov	sp, r7
 800c2b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2bc:	4770      	bx	lr
 800c2be:	bf00      	nop
 800c2c0:	40012c00 	.word	0x40012c00
 800c2c4:	40013400 	.word	0x40013400
 800c2c8:	40015000 	.word	0x40015000

0800c2cc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c2cc:	b480      	push	{r7}
 800c2ce:	b083      	sub	sp, #12
 800c2d0:	af00      	add	r7, sp, #0
 800c2d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c2d4:	bf00      	nop
 800c2d6:	370c      	adds	r7, #12
 800c2d8:	46bd      	mov	sp, r7
 800c2da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2de:	4770      	bx	lr

0800c2e0 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800c2e0:	b480      	push	{r7}
 800c2e2:	b083      	sub	sp, #12
 800c2e4:	af00      	add	r7, sp, #0
 800c2e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 800c2e8:	bf00      	nop
 800c2ea:	370c      	adds	r7, #12
 800c2ec:	46bd      	mov	sp, r7
 800c2ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2f2:	4770      	bx	lr

0800c2f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c2f4:	b480      	push	{r7}
 800c2f6:	b083      	sub	sp, #12
 800c2f8:	af00      	add	r7, sp, #0
 800c2fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c2fc:	bf00      	nop
 800c2fe:	370c      	adds	r7, #12
 800c300:	46bd      	mov	sp, r7
 800c302:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c306:	4770      	bx	lr

0800c308 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800c308:	b480      	push	{r7}
 800c30a:	b083      	sub	sp, #12
 800c30c:	af00      	add	r7, sp, #0
 800c30e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800c310:	bf00      	nop
 800c312:	370c      	adds	r7, #12
 800c314:	46bd      	mov	sp, r7
 800c316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c31a:	4770      	bx	lr

0800c31c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800c31c:	b480      	push	{r7}
 800c31e:	b083      	sub	sp, #12
 800c320:	af00      	add	r7, sp, #0
 800c322:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800c324:	bf00      	nop
 800c326:	370c      	adds	r7, #12
 800c328:	46bd      	mov	sp, r7
 800c32a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c32e:	4770      	bx	lr

0800c330 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800c330:	b480      	push	{r7}
 800c332:	b083      	sub	sp, #12
 800c334:	af00      	add	r7, sp, #0
 800c336:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800c338:	bf00      	nop
 800c33a:	370c      	adds	r7, #12
 800c33c:	46bd      	mov	sp, r7
 800c33e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c342:	4770      	bx	lr

0800c344 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800c344:	b480      	push	{r7}
 800c346:	b083      	sub	sp, #12
 800c348:	af00      	add	r7, sp, #0
 800c34a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800c34c:	bf00      	nop
 800c34e:	370c      	adds	r7, #12
 800c350:	46bd      	mov	sp, r7
 800c352:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c356:	4770      	bx	lr

0800c358 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800c358:	b480      	push	{r7}
 800c35a:	b083      	sub	sp, #12
 800c35c:	af00      	add	r7, sp, #0
 800c35e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800c360:	bf00      	nop
 800c362:	370c      	adds	r7, #12
 800c364:	46bd      	mov	sp, r7
 800c366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c36a:	4770      	bx	lr

0800c36c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c36c:	b580      	push	{r7, lr}
 800c36e:	b082      	sub	sp, #8
 800c370:	af00      	add	r7, sp, #0
 800c372:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	2b00      	cmp	r3, #0
 800c378:	d101      	bne.n	800c37e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c37a:	2301      	movs	r3, #1
 800c37c:	e050      	b.n	800c420 <HAL_UART_Init+0xb4>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c384:	2b00      	cmp	r3, #0
 800c386:	d114      	bne.n	800c3b2 <HAL_UART_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	2200      	movs	r2, #0
 800c38c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 800c390:	6878      	ldr	r0, [r7, #4]
 800c392:	f000 fe37 	bl	800d004 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d103      	bne.n	800c3a8 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	4a21      	ldr	r2, [pc, #132]	@ (800c428 <HAL_UART_Init+0xbc>)
 800c3a4:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800c3ae:	6878      	ldr	r0, [r7, #4]
 800c3b0:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	2224      	movs	r2, #36	@ 0x24
 800c3b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	681b      	ldr	r3, [r3, #0]
 800c3be:	681a      	ldr	r2, [r3, #0]
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	f022 0201 	bic.w	r2, r2, #1
 800c3c8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c3ce:	2b00      	cmp	r3, #0
 800c3d0:	d002      	beq.n	800c3d8 <HAL_UART_Init+0x6c>
  {
    UART_AdvFeatureConfig(huart);
 800c3d2:	6878      	ldr	r0, [r7, #4]
 800c3d4:	f001 f964 	bl	800d6a0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c3d8:	6878      	ldr	r0, [r7, #4]
 800c3da:	f000 fe65 	bl	800d0a8 <UART_SetConfig>
 800c3de:	4603      	mov	r3, r0
 800c3e0:	2b01      	cmp	r3, #1
 800c3e2:	d101      	bne.n	800c3e8 <HAL_UART_Init+0x7c>
  {
    return HAL_ERROR;
 800c3e4:	2301      	movs	r3, #1
 800c3e6:	e01b      	b.n	800c420 <HAL_UART_Init+0xb4>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	681b      	ldr	r3, [r3, #0]
 800c3ec:	685a      	ldr	r2, [r3, #4]
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800c3f6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	681b      	ldr	r3, [r3, #0]
 800c3fc:	689a      	ldr	r2, [r3, #8]
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	681b      	ldr	r3, [r3, #0]
 800c402:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800c406:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	681a      	ldr	r2, [r3, #0]
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	f042 0201 	orr.w	r2, r2, #1
 800c416:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c418:	6878      	ldr	r0, [r7, #4]
 800c41a:	f001 f9e3 	bl	800d7e4 <UART_CheckIdleState>
 800c41e:	4603      	mov	r3, r0
}
 800c420:	4618      	mov	r0, r3
 800c422:	3708      	adds	r7, #8
 800c424:	46bd      	mov	sp, r7
 800c426:	bd80      	pop	{r7, pc}
 800c428:	08006335 	.word	0x08006335

0800c42c <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 800c42c:	b480      	push	{r7}
 800c42e:	b087      	sub	sp, #28
 800c430:	af00      	add	r7, sp, #0
 800c432:	60f8      	str	r0, [r7, #12]
 800c434:	460b      	mov	r3, r1
 800c436:	607a      	str	r2, [r7, #4]
 800c438:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800c43a:	2300      	movs	r3, #0
 800c43c:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	2b00      	cmp	r3, #0
 800c442:	d109      	bne.n	800c458 <HAL_UART_RegisterCallback+0x2c>
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800c444:	68fb      	ldr	r3, [r7, #12]
 800c446:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c44a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800c44e:	68fb      	ldr	r3, [r7, #12]
 800c450:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    return HAL_ERROR;
 800c454:	2301      	movs	r3, #1
 800c456:	e09c      	b.n	800c592 <HAL_UART_RegisterCallback+0x166>
  }

  if (huart->gState == HAL_UART_STATE_READY)
 800c458:	68fb      	ldr	r3, [r7, #12]
 800c45a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c45e:	2b20      	cmp	r3, #32
 800c460:	d16c      	bne.n	800c53c <HAL_UART_RegisterCallback+0x110>
  {
    switch (CallbackID)
 800c462:	7afb      	ldrb	r3, [r7, #11]
 800c464:	2b0c      	cmp	r3, #12
 800c466:	d85e      	bhi.n	800c526 <HAL_UART_RegisterCallback+0xfa>
 800c468:	a201      	add	r2, pc, #4	@ (adr r2, 800c470 <HAL_UART_RegisterCallback+0x44>)
 800c46a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c46e:	bf00      	nop
 800c470:	0800c4a5 	.word	0x0800c4a5
 800c474:	0800c4af 	.word	0x0800c4af
 800c478:	0800c4b9 	.word	0x0800c4b9
 800c47c:	0800c4c3 	.word	0x0800c4c3
 800c480:	0800c4cd 	.word	0x0800c4cd
 800c484:	0800c4d7 	.word	0x0800c4d7
 800c488:	0800c4e1 	.word	0x0800c4e1
 800c48c:	0800c4eb 	.word	0x0800c4eb
 800c490:	0800c4f5 	.word	0x0800c4f5
 800c494:	0800c4ff 	.word	0x0800c4ff
 800c498:	0800c509 	.word	0x0800c509
 800c49c:	0800c513 	.word	0x0800c513
 800c4a0:	0800c51d 	.word	0x0800c51d
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 800c4a4:	68fb      	ldr	r3, [r7, #12]
 800c4a6:	687a      	ldr	r2, [r7, #4]
 800c4a8:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 800c4ac:	e070      	b.n	800c590 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 800c4ae:	68fb      	ldr	r3, [r7, #12]
 800c4b0:	687a      	ldr	r2, [r7, #4]
 800c4b2:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 800c4b6:	e06b      	b.n	800c590 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 800c4b8:	68fb      	ldr	r3, [r7, #12]
 800c4ba:	687a      	ldr	r2, [r7, #4]
 800c4bc:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 800c4c0:	e066      	b.n	800c590 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 800c4c2:	68fb      	ldr	r3, [r7, #12]
 800c4c4:	687a      	ldr	r2, [r7, #4]
 800c4c6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 800c4ca:	e061      	b.n	800c590 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 800c4cc:	68fb      	ldr	r3, [r7, #12]
 800c4ce:	687a      	ldr	r2, [r7, #4]
 800c4d0:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 800c4d4:	e05c      	b.n	800c590 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 800c4d6:	68fb      	ldr	r3, [r7, #12]
 800c4d8:	687a      	ldr	r2, [r7, #4]
 800c4da:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 800c4de:	e057      	b.n	800c590 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 800c4e0:	68fb      	ldr	r3, [r7, #12]
 800c4e2:	687a      	ldr	r2, [r7, #4]
 800c4e4:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 800c4e8:	e052      	b.n	800c590 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 800c4ea:	68fb      	ldr	r3, [r7, #12]
 800c4ec:	687a      	ldr	r2, [r7, #4]
 800c4ee:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 800c4f2:	e04d      	b.n	800c590 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_WAKEUP_CB_ID :
        huart->WakeupCallback = pCallback;
 800c4f4:	68fb      	ldr	r3, [r7, #12]
 800c4f6:	687a      	ldr	r2, [r7, #4]
 800c4f8:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 800c4fc:	e048      	b.n	800c590 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_FIFO_FULL_CB_ID :
        huart->RxFifoFullCallback = pCallback;
 800c4fe:	68fb      	ldr	r3, [r7, #12]
 800c500:	687a      	ldr	r2, [r7, #4]
 800c502:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 800c506:	e043      	b.n	800c590 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_FIFO_EMPTY_CB_ID :
        huart->TxFifoEmptyCallback = pCallback;
 800c508:	68fb      	ldr	r3, [r7, #12]
 800c50a:	687a      	ldr	r2, [r7, #4]
 800c50c:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 800c510:	e03e      	b.n	800c590 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800c512:	68fb      	ldr	r3, [r7, #12]
 800c514:	687a      	ldr	r2, [r7, #4]
 800c516:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800c51a:	e039      	b.n	800c590 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800c51c:	68fb      	ldr	r3, [r7, #12]
 800c51e:	687a      	ldr	r2, [r7, #4]
 800c520:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 800c524:	e034      	b.n	800c590 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800c526:	68fb      	ldr	r3, [r7, #12]
 800c528:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c52c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800c530:	68fb      	ldr	r3, [r7, #12]
 800c532:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 800c536:	2301      	movs	r3, #1
 800c538:	75fb      	strb	r3, [r7, #23]
        break;
 800c53a:	e029      	b.n	800c590 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 800c53c:	68fb      	ldr	r3, [r7, #12]
 800c53e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c542:	2b00      	cmp	r3, #0
 800c544:	d11a      	bne.n	800c57c <HAL_UART_RegisterCallback+0x150>
  {
    switch (CallbackID)
 800c546:	7afb      	ldrb	r3, [r7, #11]
 800c548:	2b0b      	cmp	r3, #11
 800c54a:	d002      	beq.n	800c552 <HAL_UART_RegisterCallback+0x126>
 800c54c:	2b0c      	cmp	r3, #12
 800c54e:	d005      	beq.n	800c55c <HAL_UART_RegisterCallback+0x130>
 800c550:	e009      	b.n	800c566 <HAL_UART_RegisterCallback+0x13a>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800c552:	68fb      	ldr	r3, [r7, #12]
 800c554:	687a      	ldr	r2, [r7, #4]
 800c556:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800c55a:	e019      	b.n	800c590 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	687a      	ldr	r2, [r7, #4]
 800c560:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 800c564:	e014      	b.n	800c590 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800c566:	68fb      	ldr	r3, [r7, #12]
 800c568:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c56c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800c570:	68fb      	ldr	r3, [r7, #12]
 800c572:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 800c576:	2301      	movs	r3, #1
 800c578:	75fb      	strb	r3, [r7, #23]
        break;
 800c57a:	e009      	b.n	800c590 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800c57c:	68fb      	ldr	r3, [r7, #12]
 800c57e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c582:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800c586:	68fb      	ldr	r3, [r7, #12]
 800c588:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    status =  HAL_ERROR;
 800c58c:	2301      	movs	r3, #1
 800c58e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800c590:	7dfb      	ldrb	r3, [r7, #23]
}
 800c592:	4618      	mov	r0, r3
 800c594:	371c      	adds	r7, #28
 800c596:	46bd      	mov	sp, r7
 800c598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c59c:	4770      	bx	lr
 800c59e:	bf00      	nop

0800c5a0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c5a0:	b580      	push	{r7, lr}
 800c5a2:	b08a      	sub	sp, #40	@ 0x28
 800c5a4:	af00      	add	r7, sp, #0
 800c5a6:	60f8      	str	r0, [r7, #12]
 800c5a8:	60b9      	str	r1, [r7, #8]
 800c5aa:	4613      	mov	r3, r2
 800c5ac:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c5ae:	68fb      	ldr	r3, [r7, #12]
 800c5b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c5b4:	2b20      	cmp	r3, #32
 800c5b6:	d137      	bne.n	800c628 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800c5b8:	68bb      	ldr	r3, [r7, #8]
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	d002      	beq.n	800c5c4 <HAL_UART_Receive_IT+0x24>
 800c5be:	88fb      	ldrh	r3, [r7, #6]
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	d101      	bne.n	800c5c8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800c5c4:	2301      	movs	r3, #1
 800c5c6:	e030      	b.n	800c62a <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c5c8:	68fb      	ldr	r3, [r7, #12]
 800c5ca:	2200      	movs	r2, #0
 800c5cc:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c5ce:	68fb      	ldr	r3, [r7, #12]
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	4a18      	ldr	r2, [pc, #96]	@ (800c634 <HAL_UART_Receive_IT+0x94>)
 800c5d4:	4293      	cmp	r3, r2
 800c5d6:	d01f      	beq.n	800c618 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c5d8:	68fb      	ldr	r3, [r7, #12]
 800c5da:	681b      	ldr	r3, [r3, #0]
 800c5dc:	685b      	ldr	r3, [r3, #4]
 800c5de:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	d018      	beq.n	800c618 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c5e6:	68fb      	ldr	r3, [r7, #12]
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5ec:	697b      	ldr	r3, [r7, #20]
 800c5ee:	e853 3f00 	ldrex	r3, [r3]
 800c5f2:	613b      	str	r3, [r7, #16]
   return(result);
 800c5f4:	693b      	ldr	r3, [r7, #16]
 800c5f6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800c5fa:	627b      	str	r3, [r7, #36]	@ 0x24
 800c5fc:	68fb      	ldr	r3, [r7, #12]
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	461a      	mov	r2, r3
 800c602:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c604:	623b      	str	r3, [r7, #32]
 800c606:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c608:	69f9      	ldr	r1, [r7, #28]
 800c60a:	6a3a      	ldr	r2, [r7, #32]
 800c60c:	e841 2300 	strex	r3, r2, [r1]
 800c610:	61bb      	str	r3, [r7, #24]
   return(result);
 800c612:	69bb      	ldr	r3, [r7, #24]
 800c614:	2b00      	cmp	r3, #0
 800c616:	d1e6      	bne.n	800c5e6 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800c618:	88fb      	ldrh	r3, [r7, #6]
 800c61a:	461a      	mov	r2, r3
 800c61c:	68b9      	ldr	r1, [r7, #8]
 800c61e:	68f8      	ldr	r0, [r7, #12]
 800c620:	f001 f9f8 	bl	800da14 <UART_Start_Receive_IT>
 800c624:	4603      	mov	r3, r0
 800c626:	e000      	b.n	800c62a <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800c628:	2302      	movs	r3, #2
  }
}
 800c62a:	4618      	mov	r0, r3
 800c62c:	3728      	adds	r7, #40	@ 0x28
 800c62e:	46bd      	mov	sp, r7
 800c630:	bd80      	pop	{r7, pc}
 800c632:	bf00      	nop
 800c634:	40008000 	.word	0x40008000

0800c638 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800c638:	b580      	push	{r7, lr}
 800c63a:	b08a      	sub	sp, #40	@ 0x28
 800c63c:	af00      	add	r7, sp, #0
 800c63e:	60f8      	str	r0, [r7, #12]
 800c640:	60b9      	str	r1, [r7, #8]
 800c642:	4613      	mov	r3, r2
 800c644:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c646:	68fb      	ldr	r3, [r7, #12]
 800c648:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c64c:	2b20      	cmp	r3, #32
 800c64e:	d167      	bne.n	800c720 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800c650:	68bb      	ldr	r3, [r7, #8]
 800c652:	2b00      	cmp	r3, #0
 800c654:	d002      	beq.n	800c65c <HAL_UART_Transmit_DMA+0x24>
 800c656:	88fb      	ldrh	r3, [r7, #6]
 800c658:	2b00      	cmp	r3, #0
 800c65a:	d101      	bne.n	800c660 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800c65c:	2301      	movs	r3, #1
 800c65e:	e060      	b.n	800c722 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 800c660:	68fb      	ldr	r3, [r7, #12]
 800c662:	68ba      	ldr	r2, [r7, #8]
 800c664:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800c666:	68fb      	ldr	r3, [r7, #12]
 800c668:	88fa      	ldrh	r2, [r7, #6]
 800c66a:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800c66e:	68fb      	ldr	r3, [r7, #12]
 800c670:	88fa      	ldrh	r2, [r7, #6]
 800c672:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c676:	68fb      	ldr	r3, [r7, #12]
 800c678:	2200      	movs	r2, #0
 800c67a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c67e:	68fb      	ldr	r3, [r7, #12]
 800c680:	2221      	movs	r2, #33	@ 0x21
 800c682:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 800c686:	68fb      	ldr	r3, [r7, #12]
 800c688:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d028      	beq.n	800c6e0 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800c68e:	68fb      	ldr	r3, [r7, #12]
 800c690:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c692:	4a26      	ldr	r2, [pc, #152]	@ (800c72c <HAL_UART_Transmit_DMA+0xf4>)
 800c694:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800c696:	68fb      	ldr	r3, [r7, #12]
 800c698:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c69a:	4a25      	ldr	r2, [pc, #148]	@ (800c730 <HAL_UART_Transmit_DMA+0xf8>)
 800c69c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800c69e:	68fb      	ldr	r3, [r7, #12]
 800c6a0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c6a2:	4a24      	ldr	r2, [pc, #144]	@ (800c734 <HAL_UART_Transmit_DMA+0xfc>)
 800c6a4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800c6a6:	68fb      	ldr	r3, [r7, #12]
 800c6a8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c6aa:	2200      	movs	r2, #0
 800c6ac:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800c6ae:	68fb      	ldr	r3, [r7, #12]
 800c6b0:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 800c6b2:	68fb      	ldr	r3, [r7, #12]
 800c6b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c6b6:	4619      	mov	r1, r3
 800c6b8:	68fb      	ldr	r3, [r7, #12]
 800c6ba:	681b      	ldr	r3, [r3, #0]
 800c6bc:	3328      	adds	r3, #40	@ 0x28
 800c6be:	461a      	mov	r2, r3
 800c6c0:	88fb      	ldrh	r3, [r7, #6]
 800c6c2:	f7fb fbd3 	bl	8007e6c <HAL_DMA_Start_IT>
 800c6c6:	4603      	mov	r3, r0
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	d009      	beq.n	800c6e0 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800c6cc:	68fb      	ldr	r3, [r7, #12]
 800c6ce:	2210      	movs	r2, #16
 800c6d0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800c6d4:	68fb      	ldr	r3, [r7, #12]
 800c6d6:	2220      	movs	r2, #32
 800c6d8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 800c6dc:	2301      	movs	r3, #1
 800c6de:	e020      	b.n	800c722 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800c6e0:	68fb      	ldr	r3, [r7, #12]
 800c6e2:	681b      	ldr	r3, [r3, #0]
 800c6e4:	2240      	movs	r2, #64	@ 0x40
 800c6e6:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800c6e8:	68fb      	ldr	r3, [r7, #12]
 800c6ea:	681b      	ldr	r3, [r3, #0]
 800c6ec:	3308      	adds	r3, #8
 800c6ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6f0:	697b      	ldr	r3, [r7, #20]
 800c6f2:	e853 3f00 	ldrex	r3, [r3]
 800c6f6:	613b      	str	r3, [r7, #16]
   return(result);
 800c6f8:	693b      	ldr	r3, [r7, #16]
 800c6fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c6fe:	627b      	str	r3, [r7, #36]	@ 0x24
 800c700:	68fb      	ldr	r3, [r7, #12]
 800c702:	681b      	ldr	r3, [r3, #0]
 800c704:	3308      	adds	r3, #8
 800c706:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c708:	623a      	str	r2, [r7, #32]
 800c70a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c70c:	69f9      	ldr	r1, [r7, #28]
 800c70e:	6a3a      	ldr	r2, [r7, #32]
 800c710:	e841 2300 	strex	r3, r2, [r1]
 800c714:	61bb      	str	r3, [r7, #24]
   return(result);
 800c716:	69bb      	ldr	r3, [r7, #24]
 800c718:	2b00      	cmp	r3, #0
 800c71a:	d1e5      	bne.n	800c6e8 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 800c71c:	2300      	movs	r3, #0
 800c71e:	e000      	b.n	800c722 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800c720:	2302      	movs	r3, #2
  }
}
 800c722:	4618      	mov	r0, r3
 800c724:	3728      	adds	r7, #40	@ 0x28
 800c726:	46bd      	mov	sp, r7
 800c728:	bd80      	pop	{r7, pc}
 800c72a:	bf00      	nop
 800c72c:	0800dda7 	.word	0x0800dda7
 800c730:	0800de45 	.word	0x0800de45
 800c734:	0800de65 	.word	0x0800de65

0800c738 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 800c738:	b580      	push	{r7, lr}
 800c73a:	b09a      	sub	sp, #104	@ 0x68
 800c73c:	af00      	add	r7, sp, #0
 800c73e:	6078      	str	r0, [r7, #4]
  /* Disable PEIE, EIE, RXNEIE and RXFTIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	681b      	ldr	r3, [r3, #0]
 800c744:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c746:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c748:	e853 3f00 	ldrex	r3, [r3]
 800c74c:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800c74e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c750:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c754:	667b      	str	r3, [r7, #100]	@ 0x64
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	681b      	ldr	r3, [r3, #0]
 800c75a:	461a      	mov	r2, r3
 800c75c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c75e:	657b      	str	r3, [r7, #84]	@ 0x54
 800c760:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c762:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800c764:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800c766:	e841 2300 	strex	r3, r2, [r1]
 800c76a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800c76c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c76e:	2b00      	cmp	r3, #0
 800c770:	d1e6      	bne.n	800c740 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE);
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	681b      	ldr	r3, [r3, #0]
 800c776:	3308      	adds	r3, #8
 800c778:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c77a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c77c:	e853 3f00 	ldrex	r3, [r3]
 800c780:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800c782:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c784:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c788:	f023 0301 	bic.w	r3, r3, #1
 800c78c:	663b      	str	r3, [r7, #96]	@ 0x60
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	3308      	adds	r3, #8
 800c794:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800c796:	643a      	str	r2, [r7, #64]	@ 0x40
 800c798:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c79a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c79c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c79e:	e841 2300 	strex	r3, r2, [r1]
 800c7a2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c7a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	d1e3      	bne.n	800c772 <HAL_UART_AbortReceive+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c7ae:	2b01      	cmp	r3, #1
 800c7b0:	d118      	bne.n	800c7e4 <HAL_UART_AbortReceive+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	681b      	ldr	r3, [r3, #0]
 800c7b6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c7b8:	6a3b      	ldr	r3, [r7, #32]
 800c7ba:	e853 3f00 	ldrex	r3, [r3]
 800c7be:	61fb      	str	r3, [r7, #28]
   return(result);
 800c7c0:	69fb      	ldr	r3, [r7, #28]
 800c7c2:	f023 0310 	bic.w	r3, r3, #16
 800c7c6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	681b      	ldr	r3, [r3, #0]
 800c7cc:	461a      	mov	r2, r3
 800c7ce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c7d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c7d2:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7d4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c7d6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c7d8:	e841 2300 	strex	r3, r2, [r1]
 800c7dc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c7de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7e0:	2b00      	cmp	r3, #0
 800c7e2:	d1e6      	bne.n	800c7b2 <HAL_UART_AbortReceive+0x7a>
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	681b      	ldr	r3, [r3, #0]
 800c7e8:	689b      	ldr	r3, [r3, #8]
 800c7ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c7ee:	2b40      	cmp	r3, #64	@ 0x40
 800c7f0:	d13b      	bne.n	800c86a <HAL_UART_AbortReceive+0x132>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	681b      	ldr	r3, [r3, #0]
 800c7f6:	3308      	adds	r3, #8
 800c7f8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c7fa:	68fb      	ldr	r3, [r7, #12]
 800c7fc:	e853 3f00 	ldrex	r3, [r3]
 800c800:	60bb      	str	r3, [r7, #8]
   return(result);
 800c802:	68bb      	ldr	r3, [r7, #8]
 800c804:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c808:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	681b      	ldr	r3, [r3, #0]
 800c80e:	3308      	adds	r3, #8
 800c810:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c812:	61ba      	str	r2, [r7, #24]
 800c814:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c816:	6979      	ldr	r1, [r7, #20]
 800c818:	69ba      	ldr	r2, [r7, #24]
 800c81a:	e841 2300 	strex	r3, r2, [r1]
 800c81e:	613b      	str	r3, [r7, #16]
   return(result);
 800c820:	693b      	ldr	r3, [r7, #16]
 800c822:	2b00      	cmp	r3, #0
 800c824:	d1e5      	bne.n	800c7f2 <HAL_UART_AbortReceive+0xba>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c82c:	2b00      	cmp	r3, #0
 800c82e:	d01c      	beq.n	800c86a <HAL_UART_AbortReceive+0x132>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c836:	2200      	movs	r2, #0
 800c838:	639a      	str	r2, [r3, #56]	@ 0x38

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c840:	4618      	mov	r0, r3
 800c842:	f7fb fb8e 	bl	8007f62 <HAL_DMA_Abort>
 800c846:	4603      	mov	r3, r0
 800c848:	2b00      	cmp	r3, #0
 800c84a:	d00e      	beq.n	800c86a <HAL_UART_AbortReceive+0x132>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c852:	4618      	mov	r0, r3
 800c854:	f7fb fcf4 	bl	8008240 <HAL_DMA_GetError>
 800c858:	4603      	mov	r3, r0
 800c85a:	2b20      	cmp	r3, #32
 800c85c:	d105      	bne.n	800c86a <HAL_UART_AbortReceive+0x132>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	2210      	movs	r2, #16
 800c862:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 800c866:	2303      	movs	r3, #3
 800c868:	e017      	b.n	800c89a <HAL_UART_AbortReceive+0x162>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0U;
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	2200      	movs	r2, #0
 800c86e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	681b      	ldr	r3, [r3, #0]
 800c876:	220f      	movs	r2, #15
 800c878:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	681b      	ldr	r3, [r3, #0]
 800c87e:	699a      	ldr	r2, [r3, #24]
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	681b      	ldr	r3, [r3, #0]
 800c884:	f042 0208 	orr.w	r2, r2, #8
 800c888:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	2220      	movs	r2, #32
 800c88e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	2200      	movs	r2, #0
 800c896:	66da      	str	r2, [r3, #108]	@ 0x6c

  return HAL_OK;
 800c898:	2300      	movs	r3, #0
}
 800c89a:	4618      	mov	r0, r3
 800c89c:	3768      	adds	r7, #104	@ 0x68
 800c89e:	46bd      	mov	sp, r7
 800c8a0:	bd80      	pop	{r7, pc}
	...

0800c8a4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c8a4:	b580      	push	{r7, lr}
 800c8a6:	b0ba      	sub	sp, #232	@ 0xe8
 800c8a8:	af00      	add	r7, sp, #0
 800c8aa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	69db      	ldr	r3, [r3, #28]
 800c8b2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	681b      	ldr	r3, [r3, #0]
 800c8ba:	681b      	ldr	r3, [r3, #0]
 800c8bc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	681b      	ldr	r3, [r3, #0]
 800c8c4:	689b      	ldr	r3, [r3, #8]
 800c8c6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800c8ca:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800c8ce:	f640 030f 	movw	r3, #2063	@ 0x80f
 800c8d2:	4013      	ands	r3, r2
 800c8d4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800c8d8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	d11b      	bne.n	800c918 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c8e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c8e4:	f003 0320 	and.w	r3, r3, #32
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	d015      	beq.n	800c918 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c8ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c8f0:	f003 0320 	and.w	r3, r3, #32
 800c8f4:	2b00      	cmp	r3, #0
 800c8f6:	d105      	bne.n	800c904 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c8f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c8fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c900:	2b00      	cmp	r3, #0
 800c902:	d009      	beq.n	800c918 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c908:	2b00      	cmp	r3, #0
 800c90a:	f000 8312 	beq.w	800cf32 <HAL_UART_IRQHandler+0x68e>
      {
        huart->RxISR(huart);
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c912:	6878      	ldr	r0, [r7, #4]
 800c914:	4798      	blx	r3
      }
      return;
 800c916:	e30c      	b.n	800cf32 <HAL_UART_IRQHandler+0x68e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800c918:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	f000 8129 	beq.w	800cb74 <HAL_UART_IRQHandler+0x2d0>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800c922:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800c926:	4b90      	ldr	r3, [pc, #576]	@ (800cb68 <HAL_UART_IRQHandler+0x2c4>)
 800c928:	4013      	ands	r3, r2
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	d106      	bne.n	800c93c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800c92e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800c932:	4b8e      	ldr	r3, [pc, #568]	@ (800cb6c <HAL_UART_IRQHandler+0x2c8>)
 800c934:	4013      	ands	r3, r2
 800c936:	2b00      	cmp	r3, #0
 800c938:	f000 811c 	beq.w	800cb74 <HAL_UART_IRQHandler+0x2d0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c93c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c940:	f003 0301 	and.w	r3, r3, #1
 800c944:	2b00      	cmp	r3, #0
 800c946:	d011      	beq.n	800c96c <HAL_UART_IRQHandler+0xc8>
 800c948:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c94c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c950:	2b00      	cmp	r3, #0
 800c952:	d00b      	beq.n	800c96c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	681b      	ldr	r3, [r3, #0]
 800c958:	2201      	movs	r2, #1
 800c95a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c962:	f043 0201 	orr.w	r2, r3, #1
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c96c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c970:	f003 0302 	and.w	r3, r3, #2
 800c974:	2b00      	cmp	r3, #0
 800c976:	d011      	beq.n	800c99c <HAL_UART_IRQHandler+0xf8>
 800c978:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c97c:	f003 0301 	and.w	r3, r3, #1
 800c980:	2b00      	cmp	r3, #0
 800c982:	d00b      	beq.n	800c99c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	681b      	ldr	r3, [r3, #0]
 800c988:	2202      	movs	r2, #2
 800c98a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c992:	f043 0204 	orr.w	r2, r3, #4
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c99c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c9a0:	f003 0304 	and.w	r3, r3, #4
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	d011      	beq.n	800c9cc <HAL_UART_IRQHandler+0x128>
 800c9a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c9ac:	f003 0301 	and.w	r3, r3, #1
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	d00b      	beq.n	800c9cc <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	681b      	ldr	r3, [r3, #0]
 800c9b8:	2204      	movs	r2, #4
 800c9ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c9c2:	f043 0202 	orr.w	r2, r3, #2
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800c9cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c9d0:	f003 0308 	and.w	r3, r3, #8
 800c9d4:	2b00      	cmp	r3, #0
 800c9d6:	d017      	beq.n	800ca08 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c9d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c9dc:	f003 0320 	and.w	r3, r3, #32
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	d105      	bne.n	800c9f0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800c9e4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800c9e8:	4b5f      	ldr	r3, [pc, #380]	@ (800cb68 <HAL_UART_IRQHandler+0x2c4>)
 800c9ea:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	d00b      	beq.n	800ca08 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	681b      	ldr	r3, [r3, #0]
 800c9f4:	2208      	movs	r2, #8
 800c9f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c9fe:	f043 0208 	orr.w	r2, r3, #8
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800ca08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ca0c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	d012      	beq.n	800ca3a <HAL_UART_IRQHandler+0x196>
 800ca14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ca18:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	d00c      	beq.n	800ca3a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	681b      	ldr	r3, [r3, #0]
 800ca24:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800ca28:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ca30:	f043 0220 	orr.w	r2, r3, #32
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	f000 8278 	beq.w	800cf36 <HAL_UART_IRQHandler+0x692>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ca46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ca4a:	f003 0320 	and.w	r3, r3, #32
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	d013      	beq.n	800ca7a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800ca52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ca56:	f003 0320 	and.w	r3, r3, #32
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	d105      	bne.n	800ca6a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800ca5e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ca62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	d007      	beq.n	800ca7a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	d003      	beq.n	800ca7a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ca76:	6878      	ldr	r0, [r7, #4]
 800ca78:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ca80:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	681b      	ldr	r3, [r3, #0]
 800ca88:	689b      	ldr	r3, [r3, #8]
 800ca8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ca8e:	2b40      	cmp	r3, #64	@ 0x40
 800ca90:	d005      	beq.n	800ca9e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800ca92:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800ca96:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	d058      	beq.n	800cb50 <HAL_UART_IRQHandler+0x2ac>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800ca9e:	6878      	ldr	r0, [r7, #4]
 800caa0:	f001 f91b 	bl	800dcda <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	681b      	ldr	r3, [r3, #0]
 800caa8:	689b      	ldr	r3, [r3, #8]
 800caaa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800caae:	2b40      	cmp	r3, #64	@ 0x40
 800cab0:	d148      	bne.n	800cb44 <HAL_UART_IRQHandler+0x2a0>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	681b      	ldr	r3, [r3, #0]
 800cab6:	3308      	adds	r3, #8
 800cab8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cabc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800cac0:	e853 3f00 	ldrex	r3, [r3]
 800cac4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800cac8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800cacc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cad0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	681b      	ldr	r3, [r3, #0]
 800cad8:	3308      	adds	r3, #8
 800cada:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800cade:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800cae2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cae6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800caea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800caee:	e841 2300 	strex	r3, r2, [r1]
 800caf2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800caf6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	d1d9      	bne.n	800cab2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cb04:	2b00      	cmp	r3, #0
 800cb06:	d017      	beq.n	800cb38 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cb0e:	4a18      	ldr	r2, [pc, #96]	@ (800cb70 <HAL_UART_IRQHandler+0x2cc>)
 800cb10:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cb18:	4618      	mov	r0, r3
 800cb1a:	f7fb fa7b 	bl	8008014 <HAL_DMA_Abort_IT>
 800cb1e:	4603      	mov	r3, r0
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	d01f      	beq.n	800cb64 <HAL_UART_IRQHandler+0x2c0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cb2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cb2c:	687a      	ldr	r2, [r7, #4]
 800cb2e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800cb32:	4610      	mov	r0, r2
 800cb34:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cb36:	e015      	b.n	800cb64 <HAL_UART_IRQHandler+0x2c0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800cb3e:	6878      	ldr	r0, [r7, #4]
 800cb40:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cb42:	e00f      	b.n	800cb64 <HAL_UART_IRQHandler+0x2c0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800cb4a:	6878      	ldr	r0, [r7, #4]
 800cb4c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cb4e:	e009      	b.n	800cb64 <HAL_UART_IRQHandler+0x2c0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800cb56:	6878      	ldr	r0, [r7, #4]
 800cb58:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	2200      	movs	r2, #0
 800cb5e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800cb62:	e1e8      	b.n	800cf36 <HAL_UART_IRQHandler+0x692>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cb64:	bf00      	nop
    return;
 800cb66:	e1e6      	b.n	800cf36 <HAL_UART_IRQHandler+0x692>
 800cb68:	10000001 	.word	0x10000001
 800cb6c:	04000120 	.word	0x04000120
 800cb70:	0800dee9 	.word	0x0800dee9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cb78:	2b01      	cmp	r3, #1
 800cb7a:	f040 8176 	bne.w	800ce6a <HAL_UART_IRQHandler+0x5c6>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800cb7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cb82:	f003 0310 	and.w	r3, r3, #16
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	f000 816f 	beq.w	800ce6a <HAL_UART_IRQHandler+0x5c6>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800cb8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cb90:	f003 0310 	and.w	r3, r3, #16
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	f000 8168 	beq.w	800ce6a <HAL_UART_IRQHandler+0x5c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	681b      	ldr	r3, [r3, #0]
 800cb9e:	2210      	movs	r2, #16
 800cba0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	681b      	ldr	r3, [r3, #0]
 800cba6:	689b      	ldr	r3, [r3, #8]
 800cba8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cbac:	2b40      	cmp	r3, #64	@ 0x40
 800cbae:	f040 80dc 	bne.w	800cd6a <HAL_UART_IRQHandler+0x4c6>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cbb8:	681b      	ldr	r3, [r3, #0]
 800cbba:	685b      	ldr	r3, [r3, #4]
 800cbbc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800cbc0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800cbc4:	2b00      	cmp	r3, #0
 800cbc6:	f000 80b1 	beq.w	800cd2c <HAL_UART_IRQHandler+0x488>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800cbd0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800cbd4:	429a      	cmp	r2, r3
 800cbd6:	f080 80a9 	bcs.w	800cd2c <HAL_UART_IRQHandler+0x488>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800cbe0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cbea:	681b      	ldr	r3, [r3, #0]
 800cbec:	681b      	ldr	r3, [r3, #0]
 800cbee:	f003 0320 	and.w	r3, r3, #32
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	f040 8087 	bne.w	800cd06 <HAL_UART_IRQHandler+0x462>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	681b      	ldr	r3, [r3, #0]
 800cbfc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc00:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800cc04:	e853 3f00 	ldrex	r3, [r3]
 800cc08:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800cc0c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800cc10:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800cc14:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	681b      	ldr	r3, [r3, #0]
 800cc1c:	461a      	mov	r2, r3
 800cc1e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800cc22:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800cc26:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc2a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800cc2e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800cc32:	e841 2300 	strex	r3, r2, [r1]
 800cc36:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800cc3a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	d1da      	bne.n	800cbf8 <HAL_UART_IRQHandler+0x354>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	681b      	ldr	r3, [r3, #0]
 800cc46:	3308      	adds	r3, #8
 800cc48:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc4a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800cc4c:	e853 3f00 	ldrex	r3, [r3]
 800cc50:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800cc52:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800cc54:	f023 0301 	bic.w	r3, r3, #1
 800cc58:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	681b      	ldr	r3, [r3, #0]
 800cc60:	3308      	adds	r3, #8
 800cc62:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800cc66:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800cc6a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc6c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800cc6e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800cc72:	e841 2300 	strex	r3, r2, [r1]
 800cc76:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800cc78:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800cc7a:	2b00      	cmp	r3, #0
 800cc7c:	d1e1      	bne.n	800cc42 <HAL_UART_IRQHandler+0x39e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	681b      	ldr	r3, [r3, #0]
 800cc82:	3308      	adds	r3, #8
 800cc84:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc86:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800cc88:	e853 3f00 	ldrex	r3, [r3]
 800cc8c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800cc8e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800cc90:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cc94:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	681b      	ldr	r3, [r3, #0]
 800cc9c:	3308      	adds	r3, #8
 800cc9e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800cca2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800cca4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cca6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800cca8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800ccaa:	e841 2300 	strex	r3, r2, [r1]
 800ccae:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800ccb0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ccb2:	2b00      	cmp	r3, #0
 800ccb4:	d1e3      	bne.n	800cc7e <HAL_UART_IRQHandler+0x3da>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	2220      	movs	r2, #32
 800ccba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	2200      	movs	r2, #0
 800ccc2:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	681b      	ldr	r3, [r3, #0]
 800ccc8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ccca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cccc:	e853 3f00 	ldrex	r3, [r3]
 800ccd0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800ccd2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ccd4:	f023 0310 	bic.w	r3, r3, #16
 800ccd8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	681b      	ldr	r3, [r3, #0]
 800cce0:	461a      	mov	r2, r3
 800cce2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cce6:	65bb      	str	r3, [r7, #88]	@ 0x58
 800cce8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ccea:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800ccec:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ccee:	e841 2300 	strex	r3, r2, [r1]
 800ccf2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800ccf4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	d1e4      	bne.n	800ccc4 <HAL_UART_IRQHandler+0x420>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cd00:	4618      	mov	r0, r3
 800cd02:	f7fb f92e 	bl	8007f62 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	2202      	movs	r2, #2
 800cd0a:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800cd12:	687a      	ldr	r2, [r7, #4]
 800cd14:	f8b2 105c 	ldrh.w	r1, [r2, #92]	@ 0x5c
 800cd18:	687a      	ldr	r2, [r7, #4]
 800cd1a:	f8b2 205e 	ldrh.w	r2, [r2, #94]	@ 0x5e
 800cd1e:	b292      	uxth	r2, r2
 800cd20:	1a8a      	subs	r2, r1, r2
 800cd22:	b292      	uxth	r2, r2
 800cd24:	4611      	mov	r1, r2
 800cd26:	6878      	ldr	r0, [r7, #4]
 800cd28:	4798      	blx	r3
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800cd2a:	e106      	b.n	800cf3a <HAL_UART_IRQHandler+0x696>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800cd32:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800cd36:	429a      	cmp	r2, r3
 800cd38:	f040 80ff 	bne.w	800cf3a <HAL_UART_IRQHandler+0x696>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cd42:	681b      	ldr	r3, [r3, #0]
 800cd44:	681b      	ldr	r3, [r3, #0]
 800cd46:	f003 0320 	and.w	r3, r3, #32
 800cd4a:	2b20      	cmp	r3, #32
 800cd4c:	f040 80f5 	bne.w	800cf3a <HAL_UART_IRQHandler+0x696>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	2202      	movs	r2, #2
 800cd54:	671a      	str	r2, [r3, #112]	@ 0x70
            huart->RxEventCallback(huart, huart->RxXferSize);
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800cd5c:	687a      	ldr	r2, [r7, #4]
 800cd5e:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800cd62:	4611      	mov	r1, r2
 800cd64:	6878      	ldr	r0, [r7, #4]
 800cd66:	4798      	blx	r3
      return;
 800cd68:	e0e7      	b.n	800cf3a <HAL_UART_IRQHandler+0x696>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800cd76:	b29b      	uxth	r3, r3
 800cd78:	1ad3      	subs	r3, r2, r3
 800cd7a:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800cd84:	b29b      	uxth	r3, r3
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	f000 80d9 	beq.w	800cf3e <HAL_UART_IRQHandler+0x69a>
          && (nb_rx_data > 0U))
 800cd8c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800cd90:	2b00      	cmp	r3, #0
 800cd92:	f000 80d4 	beq.w	800cf3e <HAL_UART_IRQHandler+0x69a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	681b      	ldr	r3, [r3, #0]
 800cd9a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd9e:	e853 3f00 	ldrex	r3, [r3]
 800cda2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800cda4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cda6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800cdaa:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	681b      	ldr	r3, [r3, #0]
 800cdb2:	461a      	mov	r2, r3
 800cdb4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800cdb8:	647b      	str	r3, [r7, #68]	@ 0x44
 800cdba:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cdbc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800cdbe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800cdc0:	e841 2300 	strex	r3, r2, [r1]
 800cdc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800cdc6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	d1e4      	bne.n	800cd96 <HAL_UART_IRQHandler+0x4f2>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	681b      	ldr	r3, [r3, #0]
 800cdd0:	3308      	adds	r3, #8
 800cdd2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cdd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cdd6:	e853 3f00 	ldrex	r3, [r3]
 800cdda:	623b      	str	r3, [r7, #32]
   return(result);
 800cddc:	6a3b      	ldr	r3, [r7, #32]
 800cdde:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800cde2:	f023 0301 	bic.w	r3, r3, #1
 800cde6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	681b      	ldr	r3, [r3, #0]
 800cdee:	3308      	adds	r3, #8
 800cdf0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800cdf4:	633a      	str	r2, [r7, #48]	@ 0x30
 800cdf6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cdf8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800cdfa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cdfc:	e841 2300 	strex	r3, r2, [r1]
 800ce00:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ce02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	d1e1      	bne.n	800cdcc <HAL_UART_IRQHandler+0x528>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	2220      	movs	r2, #32
 800ce0c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	2200      	movs	r2, #0
 800ce14:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	2200      	movs	r2, #0
 800ce1a:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	681b      	ldr	r3, [r3, #0]
 800ce20:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce22:	693b      	ldr	r3, [r7, #16]
 800ce24:	e853 3f00 	ldrex	r3, [r3]
 800ce28:	60fb      	str	r3, [r7, #12]
   return(result);
 800ce2a:	68fb      	ldr	r3, [r7, #12]
 800ce2c:	f023 0310 	bic.w	r3, r3, #16
 800ce30:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	681b      	ldr	r3, [r3, #0]
 800ce38:	461a      	mov	r2, r3
 800ce3a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800ce3e:	61fb      	str	r3, [r7, #28]
 800ce40:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce42:	69b9      	ldr	r1, [r7, #24]
 800ce44:	69fa      	ldr	r2, [r7, #28]
 800ce46:	e841 2300 	strex	r3, r2, [r1]
 800ce4a:	617b      	str	r3, [r7, #20]
   return(result);
 800ce4c:	697b      	ldr	r3, [r7, #20]
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	d1e4      	bne.n	800ce1c <HAL_UART_IRQHandler+0x578>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	2202      	movs	r2, #2
 800ce56:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800ce5e:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	@ 0xce
 800ce62:	4611      	mov	r1, r2
 800ce64:	6878      	ldr	r0, [r7, #4]
 800ce66:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800ce68:	e069      	b.n	800cf3e <HAL_UART_IRQHandler+0x69a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800ce6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ce6e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800ce72:	2b00      	cmp	r3, #0
 800ce74:	d010      	beq.n	800ce98 <HAL_UART_IRQHandler+0x5f4>
 800ce76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ce7a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	d00a      	beq.n	800ce98 <HAL_UART_IRQHandler+0x5f4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	681b      	ldr	r3, [r3, #0]
 800ce86:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800ce8a:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800ce92:	6878      	ldr	r0, [r7, #4]
 800ce94:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ce96:	e055      	b.n	800cf44 <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800ce98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ce9c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cea0:	2b00      	cmp	r3, #0
 800cea2:	d014      	beq.n	800cece <HAL_UART_IRQHandler+0x62a>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800cea4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cea8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ceac:	2b00      	cmp	r3, #0
 800ceae:	d105      	bne.n	800cebc <HAL_UART_IRQHandler+0x618>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800ceb0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ceb4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	d008      	beq.n	800cece <HAL_UART_IRQHandler+0x62a>
  {
    if (huart->TxISR != NULL)
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	d03e      	beq.n	800cf42 <HAL_UART_IRQHandler+0x69e>
    {
      huart->TxISR(huart);
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800cec8:	6878      	ldr	r0, [r7, #4]
 800ceca:	4798      	blx	r3
    }
    return;
 800cecc:	e039      	b.n	800cf42 <HAL_UART_IRQHandler+0x69e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800cece:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ced2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	d009      	beq.n	800ceee <HAL_UART_IRQHandler+0x64a>
 800ceda:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cede:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cee2:	2b00      	cmp	r3, #0
 800cee4:	d003      	beq.n	800ceee <HAL_UART_IRQHandler+0x64a>
  {
    UART_EndTransmit_IT(huart);
 800cee6:	6878      	ldr	r0, [r7, #4]
 800cee8:	f001 f812 	bl	800df10 <UART_EndTransmit_IT>
    return;
 800ceec:	e02a      	b.n	800cf44 <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800ceee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cef2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800cef6:	2b00      	cmp	r3, #0
 800cef8:	d00b      	beq.n	800cf12 <HAL_UART_IRQHandler+0x66e>
 800cefa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cefe:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800cf02:	2b00      	cmp	r3, #0
 800cf04:	d005      	beq.n	800cf12 <HAL_UART_IRQHandler+0x66e>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800cf0c:	6878      	ldr	r0, [r7, #4]
 800cf0e:	4798      	blx	r3
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800cf10:	e018      	b.n	800cf44 <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800cf12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cf16:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800cf1a:	2b00      	cmp	r3, #0
 800cf1c:	d012      	beq.n	800cf44 <HAL_UART_IRQHandler+0x6a0>
 800cf1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cf22:	2b00      	cmp	r3, #0
 800cf24:	da0e      	bge.n	800cf44 <HAL_UART_IRQHandler+0x6a0>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800cf2c:	6878      	ldr	r0, [r7, #4]
 800cf2e:	4798      	blx	r3
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800cf30:	e008      	b.n	800cf44 <HAL_UART_IRQHandler+0x6a0>
      return;
 800cf32:	bf00      	nop
 800cf34:	e006      	b.n	800cf44 <HAL_UART_IRQHandler+0x6a0>
    return;
 800cf36:	bf00      	nop
 800cf38:	e004      	b.n	800cf44 <HAL_UART_IRQHandler+0x6a0>
      return;
 800cf3a:	bf00      	nop
 800cf3c:	e002      	b.n	800cf44 <HAL_UART_IRQHandler+0x6a0>
      return;
 800cf3e:	bf00      	nop
 800cf40:	e000      	b.n	800cf44 <HAL_UART_IRQHandler+0x6a0>
    return;
 800cf42:	bf00      	nop
  }
}
 800cf44:	37e8      	adds	r7, #232	@ 0xe8
 800cf46:	46bd      	mov	sp, r7
 800cf48:	bd80      	pop	{r7, pc}
 800cf4a:	bf00      	nop

0800cf4c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800cf4c:	b480      	push	{r7}
 800cf4e:	b083      	sub	sp, #12
 800cf50:	af00      	add	r7, sp, #0
 800cf52:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800cf54:	bf00      	nop
 800cf56:	370c      	adds	r7, #12
 800cf58:	46bd      	mov	sp, r7
 800cf5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf5e:	4770      	bx	lr

0800cf60 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800cf60:	b480      	push	{r7}
 800cf62:	b083      	sub	sp, #12
 800cf64:	af00      	add	r7, sp, #0
 800cf66:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800cf68:	bf00      	nop
 800cf6a:	370c      	adds	r7, #12
 800cf6c:	46bd      	mov	sp, r7
 800cf6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf72:	4770      	bx	lr

0800cf74 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800cf74:	b480      	push	{r7}
 800cf76:	b083      	sub	sp, #12
 800cf78:	af00      	add	r7, sp, #0
 800cf7a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800cf7c:	bf00      	nop
 800cf7e:	370c      	adds	r7, #12
 800cf80:	46bd      	mov	sp, r7
 800cf82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf86:	4770      	bx	lr

0800cf88 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800cf88:	b480      	push	{r7}
 800cf8a:	b083      	sub	sp, #12
 800cf8c:	af00      	add	r7, sp, #0
 800cf8e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800cf90:	bf00      	nop
 800cf92:	370c      	adds	r7, #12
 800cf94:	46bd      	mov	sp, r7
 800cf96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf9a:	4770      	bx	lr

0800cf9c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800cf9c:	b480      	push	{r7}
 800cf9e:	b083      	sub	sp, #12
 800cfa0:	af00      	add	r7, sp, #0
 800cfa2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800cfa4:	bf00      	nop
 800cfa6:	370c      	adds	r7, #12
 800cfa8:	46bd      	mov	sp, r7
 800cfaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfae:	4770      	bx	lr

0800cfb0 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800cfb0:	b480      	push	{r7}
 800cfb2:	b083      	sub	sp, #12
 800cfb4:	af00      	add	r7, sp, #0
 800cfb6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800cfb8:	bf00      	nop
 800cfba:	370c      	adds	r7, #12
 800cfbc:	46bd      	mov	sp, r7
 800cfbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfc2:	4770      	bx	lr

0800cfc4 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800cfc4:	b480      	push	{r7}
 800cfc6:	b083      	sub	sp, #12
 800cfc8:	af00      	add	r7, sp, #0
 800cfca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800cfcc:	bf00      	nop
 800cfce:	370c      	adds	r7, #12
 800cfd0:	46bd      	mov	sp, r7
 800cfd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfd6:	4770      	bx	lr

0800cfd8 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800cfd8:	b480      	push	{r7}
 800cfda:	b083      	sub	sp, #12
 800cfdc:	af00      	add	r7, sp, #0
 800cfde:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800cfe0:	bf00      	nop
 800cfe2:	370c      	adds	r7, #12
 800cfe4:	46bd      	mov	sp, r7
 800cfe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfea:	4770      	bx	lr

0800cfec <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800cfec:	b480      	push	{r7}
 800cfee:	b083      	sub	sp, #12
 800cff0:	af00      	add	r7, sp, #0
 800cff2:	6078      	str	r0, [r7, #4]
 800cff4:	460b      	mov	r3, r1
 800cff6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800cff8:	bf00      	nop
 800cffa:	370c      	adds	r7, #12
 800cffc:	46bd      	mov	sp, r7
 800cffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d002:	4770      	bx	lr

0800d004 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 800d004:	b480      	push	{r7}
 800d006:	b083      	sub	sp, #12
 800d008:	af00      	add	r7, sp, #0
 800d00a:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	4a1a      	ldr	r2, [pc, #104]	@ (800d078 <UART_InitCallbacksToDefault+0x74>)
 800d010:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	4a19      	ldr	r2, [pc, #100]	@ (800d07c <UART_InitCallbacksToDefault+0x78>)
 800d018:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	4a18      	ldr	r2, [pc, #96]	@ (800d080 <UART_InitCallbacksToDefault+0x7c>)
 800d020:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	4a17      	ldr	r2, [pc, #92]	@ (800d084 <UART_InitCallbacksToDefault+0x80>)
 800d028:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	4a16      	ldr	r2, [pc, #88]	@ (800d088 <UART_InitCallbacksToDefault+0x84>)
 800d030:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	4a15      	ldr	r2, [pc, #84]	@ (800d08c <UART_InitCallbacksToDefault+0x88>)
 800d038:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	4a14      	ldr	r2, [pc, #80]	@ (800d090 <UART_InitCallbacksToDefault+0x8c>)
 800d040:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	4a13      	ldr	r2, [pc, #76]	@ (800d094 <UART_InitCallbacksToDefault+0x90>)
 800d048:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	4a12      	ldr	r2, [pc, #72]	@ (800d098 <UART_InitCallbacksToDefault+0x94>)
 800d050:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	4a11      	ldr	r2, [pc, #68]	@ (800d09c <UART_InitCallbacksToDefault+0x98>)
 800d058:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	4a10      	ldr	r2, [pc, #64]	@ (800d0a0 <UART_InitCallbacksToDefault+0x9c>)
 800d060:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	4a0f      	ldr	r2, [pc, #60]	@ (800d0a4 <UART_InitCallbacksToDefault+0xa0>)
 800d068:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

}
 800d06c:	bf00      	nop
 800d06e:	370c      	adds	r7, #12
 800d070:	46bd      	mov	sp, r7
 800d072:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d076:	4770      	bx	lr
 800d078:	0800cf61 	.word	0x0800cf61
 800d07c:	0800cf4d 	.word	0x0800cf4d
 800d080:	0800cf89 	.word	0x0800cf89
 800d084:	0800cf75 	.word	0x0800cf75
 800d088:	0800cf9d 	.word	0x0800cf9d
 800d08c:	0800cfb1 	.word	0x0800cfb1
 800d090:	0800cfc5 	.word	0x0800cfc5
 800d094:	0800cfd9 	.word	0x0800cfd9
 800d098:	0800e9d5 	.word	0x0800e9d5
 800d09c:	0800e9e9 	.word	0x0800e9e9
 800d0a0:	0800e9fd 	.word	0x0800e9fd
 800d0a4:	0800cfed 	.word	0x0800cfed

0800d0a8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d0a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d0ac:	b08c      	sub	sp, #48	@ 0x30
 800d0ae:	af00      	add	r7, sp, #0
 800d0b0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d0b2:	2300      	movs	r3, #0
 800d0b4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d0b8:	697b      	ldr	r3, [r7, #20]
 800d0ba:	689a      	ldr	r2, [r3, #8]
 800d0bc:	697b      	ldr	r3, [r7, #20]
 800d0be:	691b      	ldr	r3, [r3, #16]
 800d0c0:	431a      	orrs	r2, r3
 800d0c2:	697b      	ldr	r3, [r7, #20]
 800d0c4:	695b      	ldr	r3, [r3, #20]
 800d0c6:	431a      	orrs	r2, r3
 800d0c8:	697b      	ldr	r3, [r7, #20]
 800d0ca:	69db      	ldr	r3, [r3, #28]
 800d0cc:	4313      	orrs	r3, r2
 800d0ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d0d0:	697b      	ldr	r3, [r7, #20]
 800d0d2:	681b      	ldr	r3, [r3, #0]
 800d0d4:	681a      	ldr	r2, [r3, #0]
 800d0d6:	4baa      	ldr	r3, [pc, #680]	@ (800d380 <UART_SetConfig+0x2d8>)
 800d0d8:	4013      	ands	r3, r2
 800d0da:	697a      	ldr	r2, [r7, #20]
 800d0dc:	6812      	ldr	r2, [r2, #0]
 800d0de:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d0e0:	430b      	orrs	r3, r1
 800d0e2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d0e4:	697b      	ldr	r3, [r7, #20]
 800d0e6:	681b      	ldr	r3, [r3, #0]
 800d0e8:	685b      	ldr	r3, [r3, #4]
 800d0ea:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800d0ee:	697b      	ldr	r3, [r7, #20]
 800d0f0:	68da      	ldr	r2, [r3, #12]
 800d0f2:	697b      	ldr	r3, [r7, #20]
 800d0f4:	681b      	ldr	r3, [r3, #0]
 800d0f6:	430a      	orrs	r2, r1
 800d0f8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d0fa:	697b      	ldr	r3, [r7, #20]
 800d0fc:	699b      	ldr	r3, [r3, #24]
 800d0fe:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800d100:	697b      	ldr	r3, [r7, #20]
 800d102:	681b      	ldr	r3, [r3, #0]
 800d104:	4a9f      	ldr	r2, [pc, #636]	@ (800d384 <UART_SetConfig+0x2dc>)
 800d106:	4293      	cmp	r3, r2
 800d108:	d004      	beq.n	800d114 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800d10a:	697b      	ldr	r3, [r7, #20]
 800d10c:	6a1b      	ldr	r3, [r3, #32]
 800d10e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d110:	4313      	orrs	r3, r2
 800d112:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d114:	697b      	ldr	r3, [r7, #20]
 800d116:	681b      	ldr	r3, [r3, #0]
 800d118:	689b      	ldr	r3, [r3, #8]
 800d11a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800d11e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800d122:	697a      	ldr	r2, [r7, #20]
 800d124:	6812      	ldr	r2, [r2, #0]
 800d126:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d128:	430b      	orrs	r3, r1
 800d12a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800d12c:	697b      	ldr	r3, [r7, #20]
 800d12e:	681b      	ldr	r3, [r3, #0]
 800d130:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d132:	f023 010f 	bic.w	r1, r3, #15
 800d136:	697b      	ldr	r3, [r7, #20]
 800d138:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d13a:	697b      	ldr	r3, [r7, #20]
 800d13c:	681b      	ldr	r3, [r3, #0]
 800d13e:	430a      	orrs	r2, r1
 800d140:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d142:	697b      	ldr	r3, [r7, #20]
 800d144:	681b      	ldr	r3, [r3, #0]
 800d146:	4a90      	ldr	r2, [pc, #576]	@ (800d388 <UART_SetConfig+0x2e0>)
 800d148:	4293      	cmp	r3, r2
 800d14a:	d125      	bne.n	800d198 <UART_SetConfig+0xf0>
 800d14c:	4b8f      	ldr	r3, [pc, #572]	@ (800d38c <UART_SetConfig+0x2e4>)
 800d14e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d152:	f003 0303 	and.w	r3, r3, #3
 800d156:	2b03      	cmp	r3, #3
 800d158:	d81a      	bhi.n	800d190 <UART_SetConfig+0xe8>
 800d15a:	a201      	add	r2, pc, #4	@ (adr r2, 800d160 <UART_SetConfig+0xb8>)
 800d15c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d160:	0800d171 	.word	0x0800d171
 800d164:	0800d181 	.word	0x0800d181
 800d168:	0800d179 	.word	0x0800d179
 800d16c:	0800d189 	.word	0x0800d189
 800d170:	2301      	movs	r3, #1
 800d172:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d176:	e116      	b.n	800d3a6 <UART_SetConfig+0x2fe>
 800d178:	2302      	movs	r3, #2
 800d17a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d17e:	e112      	b.n	800d3a6 <UART_SetConfig+0x2fe>
 800d180:	2304      	movs	r3, #4
 800d182:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d186:	e10e      	b.n	800d3a6 <UART_SetConfig+0x2fe>
 800d188:	2308      	movs	r3, #8
 800d18a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d18e:	e10a      	b.n	800d3a6 <UART_SetConfig+0x2fe>
 800d190:	2310      	movs	r3, #16
 800d192:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d196:	e106      	b.n	800d3a6 <UART_SetConfig+0x2fe>
 800d198:	697b      	ldr	r3, [r7, #20]
 800d19a:	681b      	ldr	r3, [r3, #0]
 800d19c:	4a7c      	ldr	r2, [pc, #496]	@ (800d390 <UART_SetConfig+0x2e8>)
 800d19e:	4293      	cmp	r3, r2
 800d1a0:	d138      	bne.n	800d214 <UART_SetConfig+0x16c>
 800d1a2:	4b7a      	ldr	r3, [pc, #488]	@ (800d38c <UART_SetConfig+0x2e4>)
 800d1a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d1a8:	f003 030c 	and.w	r3, r3, #12
 800d1ac:	2b0c      	cmp	r3, #12
 800d1ae:	d82d      	bhi.n	800d20c <UART_SetConfig+0x164>
 800d1b0:	a201      	add	r2, pc, #4	@ (adr r2, 800d1b8 <UART_SetConfig+0x110>)
 800d1b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d1b6:	bf00      	nop
 800d1b8:	0800d1ed 	.word	0x0800d1ed
 800d1bc:	0800d20d 	.word	0x0800d20d
 800d1c0:	0800d20d 	.word	0x0800d20d
 800d1c4:	0800d20d 	.word	0x0800d20d
 800d1c8:	0800d1fd 	.word	0x0800d1fd
 800d1cc:	0800d20d 	.word	0x0800d20d
 800d1d0:	0800d20d 	.word	0x0800d20d
 800d1d4:	0800d20d 	.word	0x0800d20d
 800d1d8:	0800d1f5 	.word	0x0800d1f5
 800d1dc:	0800d20d 	.word	0x0800d20d
 800d1e0:	0800d20d 	.word	0x0800d20d
 800d1e4:	0800d20d 	.word	0x0800d20d
 800d1e8:	0800d205 	.word	0x0800d205
 800d1ec:	2300      	movs	r3, #0
 800d1ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d1f2:	e0d8      	b.n	800d3a6 <UART_SetConfig+0x2fe>
 800d1f4:	2302      	movs	r3, #2
 800d1f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d1fa:	e0d4      	b.n	800d3a6 <UART_SetConfig+0x2fe>
 800d1fc:	2304      	movs	r3, #4
 800d1fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d202:	e0d0      	b.n	800d3a6 <UART_SetConfig+0x2fe>
 800d204:	2308      	movs	r3, #8
 800d206:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d20a:	e0cc      	b.n	800d3a6 <UART_SetConfig+0x2fe>
 800d20c:	2310      	movs	r3, #16
 800d20e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d212:	e0c8      	b.n	800d3a6 <UART_SetConfig+0x2fe>
 800d214:	697b      	ldr	r3, [r7, #20]
 800d216:	681b      	ldr	r3, [r3, #0]
 800d218:	4a5e      	ldr	r2, [pc, #376]	@ (800d394 <UART_SetConfig+0x2ec>)
 800d21a:	4293      	cmp	r3, r2
 800d21c:	d125      	bne.n	800d26a <UART_SetConfig+0x1c2>
 800d21e:	4b5b      	ldr	r3, [pc, #364]	@ (800d38c <UART_SetConfig+0x2e4>)
 800d220:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d224:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800d228:	2b30      	cmp	r3, #48	@ 0x30
 800d22a:	d016      	beq.n	800d25a <UART_SetConfig+0x1b2>
 800d22c:	2b30      	cmp	r3, #48	@ 0x30
 800d22e:	d818      	bhi.n	800d262 <UART_SetConfig+0x1ba>
 800d230:	2b20      	cmp	r3, #32
 800d232:	d00a      	beq.n	800d24a <UART_SetConfig+0x1a2>
 800d234:	2b20      	cmp	r3, #32
 800d236:	d814      	bhi.n	800d262 <UART_SetConfig+0x1ba>
 800d238:	2b00      	cmp	r3, #0
 800d23a:	d002      	beq.n	800d242 <UART_SetConfig+0x19a>
 800d23c:	2b10      	cmp	r3, #16
 800d23e:	d008      	beq.n	800d252 <UART_SetConfig+0x1aa>
 800d240:	e00f      	b.n	800d262 <UART_SetConfig+0x1ba>
 800d242:	2300      	movs	r3, #0
 800d244:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d248:	e0ad      	b.n	800d3a6 <UART_SetConfig+0x2fe>
 800d24a:	2302      	movs	r3, #2
 800d24c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d250:	e0a9      	b.n	800d3a6 <UART_SetConfig+0x2fe>
 800d252:	2304      	movs	r3, #4
 800d254:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d258:	e0a5      	b.n	800d3a6 <UART_SetConfig+0x2fe>
 800d25a:	2308      	movs	r3, #8
 800d25c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d260:	e0a1      	b.n	800d3a6 <UART_SetConfig+0x2fe>
 800d262:	2310      	movs	r3, #16
 800d264:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d268:	e09d      	b.n	800d3a6 <UART_SetConfig+0x2fe>
 800d26a:	697b      	ldr	r3, [r7, #20]
 800d26c:	681b      	ldr	r3, [r3, #0]
 800d26e:	4a4a      	ldr	r2, [pc, #296]	@ (800d398 <UART_SetConfig+0x2f0>)
 800d270:	4293      	cmp	r3, r2
 800d272:	d125      	bne.n	800d2c0 <UART_SetConfig+0x218>
 800d274:	4b45      	ldr	r3, [pc, #276]	@ (800d38c <UART_SetConfig+0x2e4>)
 800d276:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d27a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800d27e:	2bc0      	cmp	r3, #192	@ 0xc0
 800d280:	d016      	beq.n	800d2b0 <UART_SetConfig+0x208>
 800d282:	2bc0      	cmp	r3, #192	@ 0xc0
 800d284:	d818      	bhi.n	800d2b8 <UART_SetConfig+0x210>
 800d286:	2b80      	cmp	r3, #128	@ 0x80
 800d288:	d00a      	beq.n	800d2a0 <UART_SetConfig+0x1f8>
 800d28a:	2b80      	cmp	r3, #128	@ 0x80
 800d28c:	d814      	bhi.n	800d2b8 <UART_SetConfig+0x210>
 800d28e:	2b00      	cmp	r3, #0
 800d290:	d002      	beq.n	800d298 <UART_SetConfig+0x1f0>
 800d292:	2b40      	cmp	r3, #64	@ 0x40
 800d294:	d008      	beq.n	800d2a8 <UART_SetConfig+0x200>
 800d296:	e00f      	b.n	800d2b8 <UART_SetConfig+0x210>
 800d298:	2300      	movs	r3, #0
 800d29a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d29e:	e082      	b.n	800d3a6 <UART_SetConfig+0x2fe>
 800d2a0:	2302      	movs	r3, #2
 800d2a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d2a6:	e07e      	b.n	800d3a6 <UART_SetConfig+0x2fe>
 800d2a8:	2304      	movs	r3, #4
 800d2aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d2ae:	e07a      	b.n	800d3a6 <UART_SetConfig+0x2fe>
 800d2b0:	2308      	movs	r3, #8
 800d2b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d2b6:	e076      	b.n	800d3a6 <UART_SetConfig+0x2fe>
 800d2b8:	2310      	movs	r3, #16
 800d2ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d2be:	e072      	b.n	800d3a6 <UART_SetConfig+0x2fe>
 800d2c0:	697b      	ldr	r3, [r7, #20]
 800d2c2:	681b      	ldr	r3, [r3, #0]
 800d2c4:	4a35      	ldr	r2, [pc, #212]	@ (800d39c <UART_SetConfig+0x2f4>)
 800d2c6:	4293      	cmp	r3, r2
 800d2c8:	d12a      	bne.n	800d320 <UART_SetConfig+0x278>
 800d2ca:	4b30      	ldr	r3, [pc, #192]	@ (800d38c <UART_SetConfig+0x2e4>)
 800d2cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d2d0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d2d4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d2d8:	d01a      	beq.n	800d310 <UART_SetConfig+0x268>
 800d2da:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d2de:	d81b      	bhi.n	800d318 <UART_SetConfig+0x270>
 800d2e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d2e4:	d00c      	beq.n	800d300 <UART_SetConfig+0x258>
 800d2e6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d2ea:	d815      	bhi.n	800d318 <UART_SetConfig+0x270>
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	d003      	beq.n	800d2f8 <UART_SetConfig+0x250>
 800d2f0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d2f4:	d008      	beq.n	800d308 <UART_SetConfig+0x260>
 800d2f6:	e00f      	b.n	800d318 <UART_SetConfig+0x270>
 800d2f8:	2300      	movs	r3, #0
 800d2fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d2fe:	e052      	b.n	800d3a6 <UART_SetConfig+0x2fe>
 800d300:	2302      	movs	r3, #2
 800d302:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d306:	e04e      	b.n	800d3a6 <UART_SetConfig+0x2fe>
 800d308:	2304      	movs	r3, #4
 800d30a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d30e:	e04a      	b.n	800d3a6 <UART_SetConfig+0x2fe>
 800d310:	2308      	movs	r3, #8
 800d312:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d316:	e046      	b.n	800d3a6 <UART_SetConfig+0x2fe>
 800d318:	2310      	movs	r3, #16
 800d31a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d31e:	e042      	b.n	800d3a6 <UART_SetConfig+0x2fe>
 800d320:	697b      	ldr	r3, [r7, #20]
 800d322:	681b      	ldr	r3, [r3, #0]
 800d324:	4a17      	ldr	r2, [pc, #92]	@ (800d384 <UART_SetConfig+0x2dc>)
 800d326:	4293      	cmp	r3, r2
 800d328:	d13a      	bne.n	800d3a0 <UART_SetConfig+0x2f8>
 800d32a:	4b18      	ldr	r3, [pc, #96]	@ (800d38c <UART_SetConfig+0x2e4>)
 800d32c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d330:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800d334:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800d338:	d01a      	beq.n	800d370 <UART_SetConfig+0x2c8>
 800d33a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800d33e:	d81b      	bhi.n	800d378 <UART_SetConfig+0x2d0>
 800d340:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d344:	d00c      	beq.n	800d360 <UART_SetConfig+0x2b8>
 800d346:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d34a:	d815      	bhi.n	800d378 <UART_SetConfig+0x2d0>
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	d003      	beq.n	800d358 <UART_SetConfig+0x2b0>
 800d350:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d354:	d008      	beq.n	800d368 <UART_SetConfig+0x2c0>
 800d356:	e00f      	b.n	800d378 <UART_SetConfig+0x2d0>
 800d358:	2300      	movs	r3, #0
 800d35a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d35e:	e022      	b.n	800d3a6 <UART_SetConfig+0x2fe>
 800d360:	2302      	movs	r3, #2
 800d362:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d366:	e01e      	b.n	800d3a6 <UART_SetConfig+0x2fe>
 800d368:	2304      	movs	r3, #4
 800d36a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d36e:	e01a      	b.n	800d3a6 <UART_SetConfig+0x2fe>
 800d370:	2308      	movs	r3, #8
 800d372:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d376:	e016      	b.n	800d3a6 <UART_SetConfig+0x2fe>
 800d378:	2310      	movs	r3, #16
 800d37a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d37e:	e012      	b.n	800d3a6 <UART_SetConfig+0x2fe>
 800d380:	cfff69f3 	.word	0xcfff69f3
 800d384:	40008000 	.word	0x40008000
 800d388:	40013800 	.word	0x40013800
 800d38c:	40021000 	.word	0x40021000
 800d390:	40004400 	.word	0x40004400
 800d394:	40004800 	.word	0x40004800
 800d398:	40004c00 	.word	0x40004c00
 800d39c:	40005000 	.word	0x40005000
 800d3a0:	2310      	movs	r3, #16
 800d3a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800d3a6:	697b      	ldr	r3, [r7, #20]
 800d3a8:	681b      	ldr	r3, [r3, #0]
 800d3aa:	4aae      	ldr	r2, [pc, #696]	@ (800d664 <UART_SetConfig+0x5bc>)
 800d3ac:	4293      	cmp	r3, r2
 800d3ae:	f040 8097 	bne.w	800d4e0 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800d3b2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800d3b6:	2b08      	cmp	r3, #8
 800d3b8:	d823      	bhi.n	800d402 <UART_SetConfig+0x35a>
 800d3ba:	a201      	add	r2, pc, #4	@ (adr r2, 800d3c0 <UART_SetConfig+0x318>)
 800d3bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d3c0:	0800d3e5 	.word	0x0800d3e5
 800d3c4:	0800d403 	.word	0x0800d403
 800d3c8:	0800d3ed 	.word	0x0800d3ed
 800d3cc:	0800d403 	.word	0x0800d403
 800d3d0:	0800d3f3 	.word	0x0800d3f3
 800d3d4:	0800d403 	.word	0x0800d403
 800d3d8:	0800d403 	.word	0x0800d403
 800d3dc:	0800d403 	.word	0x0800d403
 800d3e0:	0800d3fb 	.word	0x0800d3fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d3e4:	f7fb fefa 	bl	80091dc <HAL_RCC_GetPCLK1Freq>
 800d3e8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800d3ea:	e010      	b.n	800d40e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d3ec:	4b9e      	ldr	r3, [pc, #632]	@ (800d668 <UART_SetConfig+0x5c0>)
 800d3ee:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800d3f0:	e00d      	b.n	800d40e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d3f2:	f7fb fe85 	bl	8009100 <HAL_RCC_GetSysClockFreq>
 800d3f6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800d3f8:	e009      	b.n	800d40e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d3fa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d3fe:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800d400:	e005      	b.n	800d40e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800d402:	2300      	movs	r3, #0
 800d404:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800d406:	2301      	movs	r3, #1
 800d408:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800d40c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800d40e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d410:	2b00      	cmp	r3, #0
 800d412:	f000 8130 	beq.w	800d676 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800d416:	697b      	ldr	r3, [r7, #20]
 800d418:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d41a:	4a94      	ldr	r2, [pc, #592]	@ (800d66c <UART_SetConfig+0x5c4>)
 800d41c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d420:	461a      	mov	r2, r3
 800d422:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d424:	fbb3 f3f2 	udiv	r3, r3, r2
 800d428:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d42a:	697b      	ldr	r3, [r7, #20]
 800d42c:	685a      	ldr	r2, [r3, #4]
 800d42e:	4613      	mov	r3, r2
 800d430:	005b      	lsls	r3, r3, #1
 800d432:	4413      	add	r3, r2
 800d434:	69ba      	ldr	r2, [r7, #24]
 800d436:	429a      	cmp	r2, r3
 800d438:	d305      	bcc.n	800d446 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800d43a:	697b      	ldr	r3, [r7, #20]
 800d43c:	685b      	ldr	r3, [r3, #4]
 800d43e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d440:	69ba      	ldr	r2, [r7, #24]
 800d442:	429a      	cmp	r2, r3
 800d444:	d903      	bls.n	800d44e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800d446:	2301      	movs	r3, #1
 800d448:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800d44c:	e113      	b.n	800d676 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d44e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d450:	2200      	movs	r2, #0
 800d452:	60bb      	str	r3, [r7, #8]
 800d454:	60fa      	str	r2, [r7, #12]
 800d456:	697b      	ldr	r3, [r7, #20]
 800d458:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d45a:	4a84      	ldr	r2, [pc, #528]	@ (800d66c <UART_SetConfig+0x5c4>)
 800d45c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d460:	b29b      	uxth	r3, r3
 800d462:	2200      	movs	r2, #0
 800d464:	603b      	str	r3, [r7, #0]
 800d466:	607a      	str	r2, [r7, #4]
 800d468:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d46c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800d470:	f7f3 fcbc 	bl	8000dec <__aeabi_uldivmod>
 800d474:	4602      	mov	r2, r0
 800d476:	460b      	mov	r3, r1
 800d478:	4610      	mov	r0, r2
 800d47a:	4619      	mov	r1, r3
 800d47c:	f04f 0200 	mov.w	r2, #0
 800d480:	f04f 0300 	mov.w	r3, #0
 800d484:	020b      	lsls	r3, r1, #8
 800d486:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800d48a:	0202      	lsls	r2, r0, #8
 800d48c:	6979      	ldr	r1, [r7, #20]
 800d48e:	6849      	ldr	r1, [r1, #4]
 800d490:	0849      	lsrs	r1, r1, #1
 800d492:	2000      	movs	r0, #0
 800d494:	460c      	mov	r4, r1
 800d496:	4605      	mov	r5, r0
 800d498:	eb12 0804 	adds.w	r8, r2, r4
 800d49c:	eb43 0905 	adc.w	r9, r3, r5
 800d4a0:	697b      	ldr	r3, [r7, #20]
 800d4a2:	685b      	ldr	r3, [r3, #4]
 800d4a4:	2200      	movs	r2, #0
 800d4a6:	469a      	mov	sl, r3
 800d4a8:	4693      	mov	fp, r2
 800d4aa:	4652      	mov	r2, sl
 800d4ac:	465b      	mov	r3, fp
 800d4ae:	4640      	mov	r0, r8
 800d4b0:	4649      	mov	r1, r9
 800d4b2:	f7f3 fc9b 	bl	8000dec <__aeabi_uldivmod>
 800d4b6:	4602      	mov	r2, r0
 800d4b8:	460b      	mov	r3, r1
 800d4ba:	4613      	mov	r3, r2
 800d4bc:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800d4be:	6a3b      	ldr	r3, [r7, #32]
 800d4c0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d4c4:	d308      	bcc.n	800d4d8 <UART_SetConfig+0x430>
 800d4c6:	6a3b      	ldr	r3, [r7, #32]
 800d4c8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d4cc:	d204      	bcs.n	800d4d8 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800d4ce:	697b      	ldr	r3, [r7, #20]
 800d4d0:	681b      	ldr	r3, [r3, #0]
 800d4d2:	6a3a      	ldr	r2, [r7, #32]
 800d4d4:	60da      	str	r2, [r3, #12]
 800d4d6:	e0ce      	b.n	800d676 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800d4d8:	2301      	movs	r3, #1
 800d4da:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800d4de:	e0ca      	b.n	800d676 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d4e0:	697b      	ldr	r3, [r7, #20]
 800d4e2:	69db      	ldr	r3, [r3, #28]
 800d4e4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d4e8:	d166      	bne.n	800d5b8 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800d4ea:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800d4ee:	2b08      	cmp	r3, #8
 800d4f0:	d827      	bhi.n	800d542 <UART_SetConfig+0x49a>
 800d4f2:	a201      	add	r2, pc, #4	@ (adr r2, 800d4f8 <UART_SetConfig+0x450>)
 800d4f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d4f8:	0800d51d 	.word	0x0800d51d
 800d4fc:	0800d525 	.word	0x0800d525
 800d500:	0800d52d 	.word	0x0800d52d
 800d504:	0800d543 	.word	0x0800d543
 800d508:	0800d533 	.word	0x0800d533
 800d50c:	0800d543 	.word	0x0800d543
 800d510:	0800d543 	.word	0x0800d543
 800d514:	0800d543 	.word	0x0800d543
 800d518:	0800d53b 	.word	0x0800d53b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d51c:	f7fb fe5e 	bl	80091dc <HAL_RCC_GetPCLK1Freq>
 800d520:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800d522:	e014      	b.n	800d54e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d524:	f7fb fe70 	bl	8009208 <HAL_RCC_GetPCLK2Freq>
 800d528:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800d52a:	e010      	b.n	800d54e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d52c:	4b4e      	ldr	r3, [pc, #312]	@ (800d668 <UART_SetConfig+0x5c0>)
 800d52e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800d530:	e00d      	b.n	800d54e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d532:	f7fb fde5 	bl	8009100 <HAL_RCC_GetSysClockFreq>
 800d536:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800d538:	e009      	b.n	800d54e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d53a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d53e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800d540:	e005      	b.n	800d54e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800d542:	2300      	movs	r3, #0
 800d544:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800d546:	2301      	movs	r3, #1
 800d548:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800d54c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d54e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d550:	2b00      	cmp	r3, #0
 800d552:	f000 8090 	beq.w	800d676 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d556:	697b      	ldr	r3, [r7, #20]
 800d558:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d55a:	4a44      	ldr	r2, [pc, #272]	@ (800d66c <UART_SetConfig+0x5c4>)
 800d55c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d560:	461a      	mov	r2, r3
 800d562:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d564:	fbb3 f3f2 	udiv	r3, r3, r2
 800d568:	005a      	lsls	r2, r3, #1
 800d56a:	697b      	ldr	r3, [r7, #20]
 800d56c:	685b      	ldr	r3, [r3, #4]
 800d56e:	085b      	lsrs	r3, r3, #1
 800d570:	441a      	add	r2, r3
 800d572:	697b      	ldr	r3, [r7, #20]
 800d574:	685b      	ldr	r3, [r3, #4]
 800d576:	fbb2 f3f3 	udiv	r3, r2, r3
 800d57a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d57c:	6a3b      	ldr	r3, [r7, #32]
 800d57e:	2b0f      	cmp	r3, #15
 800d580:	d916      	bls.n	800d5b0 <UART_SetConfig+0x508>
 800d582:	6a3b      	ldr	r3, [r7, #32]
 800d584:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d588:	d212      	bcs.n	800d5b0 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d58a:	6a3b      	ldr	r3, [r7, #32]
 800d58c:	b29b      	uxth	r3, r3
 800d58e:	f023 030f 	bic.w	r3, r3, #15
 800d592:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d594:	6a3b      	ldr	r3, [r7, #32]
 800d596:	085b      	lsrs	r3, r3, #1
 800d598:	b29b      	uxth	r3, r3
 800d59a:	f003 0307 	and.w	r3, r3, #7
 800d59e:	b29a      	uxth	r2, r3
 800d5a0:	8bfb      	ldrh	r3, [r7, #30]
 800d5a2:	4313      	orrs	r3, r2
 800d5a4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800d5a6:	697b      	ldr	r3, [r7, #20]
 800d5a8:	681b      	ldr	r3, [r3, #0]
 800d5aa:	8bfa      	ldrh	r2, [r7, #30]
 800d5ac:	60da      	str	r2, [r3, #12]
 800d5ae:	e062      	b.n	800d676 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800d5b0:	2301      	movs	r3, #1
 800d5b2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800d5b6:	e05e      	b.n	800d676 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800d5b8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800d5bc:	2b08      	cmp	r3, #8
 800d5be:	d828      	bhi.n	800d612 <UART_SetConfig+0x56a>
 800d5c0:	a201      	add	r2, pc, #4	@ (adr r2, 800d5c8 <UART_SetConfig+0x520>)
 800d5c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d5c6:	bf00      	nop
 800d5c8:	0800d5ed 	.word	0x0800d5ed
 800d5cc:	0800d5f5 	.word	0x0800d5f5
 800d5d0:	0800d5fd 	.word	0x0800d5fd
 800d5d4:	0800d613 	.word	0x0800d613
 800d5d8:	0800d603 	.word	0x0800d603
 800d5dc:	0800d613 	.word	0x0800d613
 800d5e0:	0800d613 	.word	0x0800d613
 800d5e4:	0800d613 	.word	0x0800d613
 800d5e8:	0800d60b 	.word	0x0800d60b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d5ec:	f7fb fdf6 	bl	80091dc <HAL_RCC_GetPCLK1Freq>
 800d5f0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800d5f2:	e014      	b.n	800d61e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d5f4:	f7fb fe08 	bl	8009208 <HAL_RCC_GetPCLK2Freq>
 800d5f8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800d5fa:	e010      	b.n	800d61e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d5fc:	4b1a      	ldr	r3, [pc, #104]	@ (800d668 <UART_SetConfig+0x5c0>)
 800d5fe:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800d600:	e00d      	b.n	800d61e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d602:	f7fb fd7d 	bl	8009100 <HAL_RCC_GetSysClockFreq>
 800d606:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800d608:	e009      	b.n	800d61e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d60a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d60e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800d610:	e005      	b.n	800d61e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800d612:	2300      	movs	r3, #0
 800d614:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800d616:	2301      	movs	r3, #1
 800d618:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800d61c:	bf00      	nop
    }

    if (pclk != 0U)
 800d61e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d620:	2b00      	cmp	r3, #0
 800d622:	d028      	beq.n	800d676 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d624:	697b      	ldr	r3, [r7, #20]
 800d626:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d628:	4a10      	ldr	r2, [pc, #64]	@ (800d66c <UART_SetConfig+0x5c4>)
 800d62a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d62e:	461a      	mov	r2, r3
 800d630:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d632:	fbb3 f2f2 	udiv	r2, r3, r2
 800d636:	697b      	ldr	r3, [r7, #20]
 800d638:	685b      	ldr	r3, [r3, #4]
 800d63a:	085b      	lsrs	r3, r3, #1
 800d63c:	441a      	add	r2, r3
 800d63e:	697b      	ldr	r3, [r7, #20]
 800d640:	685b      	ldr	r3, [r3, #4]
 800d642:	fbb2 f3f3 	udiv	r3, r2, r3
 800d646:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d648:	6a3b      	ldr	r3, [r7, #32]
 800d64a:	2b0f      	cmp	r3, #15
 800d64c:	d910      	bls.n	800d670 <UART_SetConfig+0x5c8>
 800d64e:	6a3b      	ldr	r3, [r7, #32]
 800d650:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d654:	d20c      	bcs.n	800d670 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800d656:	6a3b      	ldr	r3, [r7, #32]
 800d658:	b29a      	uxth	r2, r3
 800d65a:	697b      	ldr	r3, [r7, #20]
 800d65c:	681b      	ldr	r3, [r3, #0]
 800d65e:	60da      	str	r2, [r3, #12]
 800d660:	e009      	b.n	800d676 <UART_SetConfig+0x5ce>
 800d662:	bf00      	nop
 800d664:	40008000 	.word	0x40008000
 800d668:	00f42400 	.word	0x00f42400
 800d66c:	08011390 	.word	0x08011390
      }
      else
      {
        ret = HAL_ERROR;
 800d670:	2301      	movs	r3, #1
 800d672:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800d676:	697b      	ldr	r3, [r7, #20]
 800d678:	2201      	movs	r2, #1
 800d67a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800d67e:	697b      	ldr	r3, [r7, #20]
 800d680:	2201      	movs	r2, #1
 800d682:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d686:	697b      	ldr	r3, [r7, #20]
 800d688:	2200      	movs	r2, #0
 800d68a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800d68c:	697b      	ldr	r3, [r7, #20]
 800d68e:	2200      	movs	r2, #0
 800d690:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800d692:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800d696:	4618      	mov	r0, r3
 800d698:	3730      	adds	r7, #48	@ 0x30
 800d69a:	46bd      	mov	sp, r7
 800d69c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800d6a0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d6a0:	b480      	push	{r7}
 800d6a2:	b083      	sub	sp, #12
 800d6a4:	af00      	add	r7, sp, #0
 800d6a6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d6ac:	f003 0308 	and.w	r3, r3, #8
 800d6b0:	2b00      	cmp	r3, #0
 800d6b2:	d00a      	beq.n	800d6ca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	681b      	ldr	r3, [r3, #0]
 800d6b8:	685b      	ldr	r3, [r3, #4]
 800d6ba:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	681b      	ldr	r3, [r3, #0]
 800d6c6:	430a      	orrs	r2, r1
 800d6c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d6ce:	f003 0301 	and.w	r3, r3, #1
 800d6d2:	2b00      	cmp	r3, #0
 800d6d4:	d00a      	beq.n	800d6ec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	681b      	ldr	r3, [r3, #0]
 800d6da:	685b      	ldr	r3, [r3, #4]
 800d6dc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	681b      	ldr	r3, [r3, #0]
 800d6e8:	430a      	orrs	r2, r1
 800d6ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d6f0:	f003 0302 	and.w	r3, r3, #2
 800d6f4:	2b00      	cmp	r3, #0
 800d6f6:	d00a      	beq.n	800d70e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	681b      	ldr	r3, [r3, #0]
 800d6fc:	685b      	ldr	r3, [r3, #4]
 800d6fe:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	681b      	ldr	r3, [r3, #0]
 800d70a:	430a      	orrs	r2, r1
 800d70c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d712:	f003 0304 	and.w	r3, r3, #4
 800d716:	2b00      	cmp	r3, #0
 800d718:	d00a      	beq.n	800d730 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	681b      	ldr	r3, [r3, #0]
 800d71e:	685b      	ldr	r3, [r3, #4]
 800d720:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	681b      	ldr	r3, [r3, #0]
 800d72c:	430a      	orrs	r2, r1
 800d72e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d734:	f003 0310 	and.w	r3, r3, #16
 800d738:	2b00      	cmp	r3, #0
 800d73a:	d00a      	beq.n	800d752 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	681b      	ldr	r3, [r3, #0]
 800d740:	689b      	ldr	r3, [r3, #8]
 800d742:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	681b      	ldr	r3, [r3, #0]
 800d74e:	430a      	orrs	r2, r1
 800d750:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d756:	f003 0320 	and.w	r3, r3, #32
 800d75a:	2b00      	cmp	r3, #0
 800d75c:	d00a      	beq.n	800d774 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	681b      	ldr	r3, [r3, #0]
 800d762:	689b      	ldr	r3, [r3, #8]
 800d764:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	681b      	ldr	r3, [r3, #0]
 800d770:	430a      	orrs	r2, r1
 800d772:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d778:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d77c:	2b00      	cmp	r3, #0
 800d77e:	d01a      	beq.n	800d7b6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	681b      	ldr	r3, [r3, #0]
 800d784:	685b      	ldr	r3, [r3, #4]
 800d786:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	681b      	ldr	r3, [r3, #0]
 800d792:	430a      	orrs	r2, r1
 800d794:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d79a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d79e:	d10a      	bne.n	800d7b6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	681b      	ldr	r3, [r3, #0]
 800d7a4:	685b      	ldr	r3, [r3, #4]
 800d7a6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	681b      	ldr	r3, [r3, #0]
 800d7b2:	430a      	orrs	r2, r1
 800d7b4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d7ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d7be:	2b00      	cmp	r3, #0
 800d7c0:	d00a      	beq.n	800d7d8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	681b      	ldr	r3, [r3, #0]
 800d7c6:	685b      	ldr	r3, [r3, #4]
 800d7c8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	681b      	ldr	r3, [r3, #0]
 800d7d4:	430a      	orrs	r2, r1
 800d7d6:	605a      	str	r2, [r3, #4]
  }
}
 800d7d8:	bf00      	nop
 800d7da:	370c      	adds	r7, #12
 800d7dc:	46bd      	mov	sp, r7
 800d7de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7e2:	4770      	bx	lr

0800d7e4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d7e4:	b580      	push	{r7, lr}
 800d7e6:	b098      	sub	sp, #96	@ 0x60
 800d7e8:	af02      	add	r7, sp, #8
 800d7ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	2200      	movs	r2, #0
 800d7f0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d7f4:	f7f8 feb8 	bl	8006568 <HAL_GetTick>
 800d7f8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	681b      	ldr	r3, [r3, #0]
 800d7fe:	681b      	ldr	r3, [r3, #0]
 800d800:	f003 0308 	and.w	r3, r3, #8
 800d804:	2b08      	cmp	r3, #8
 800d806:	d12f      	bne.n	800d868 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d808:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800d80c:	9300      	str	r3, [sp, #0]
 800d80e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d810:	2200      	movs	r2, #0
 800d812:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800d816:	6878      	ldr	r0, [r7, #4]
 800d818:	f000 f88e 	bl	800d938 <UART_WaitOnFlagUntilTimeout>
 800d81c:	4603      	mov	r3, r0
 800d81e:	2b00      	cmp	r3, #0
 800d820:	d022      	beq.n	800d868 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	681b      	ldr	r3, [r3, #0]
 800d826:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d828:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d82a:	e853 3f00 	ldrex	r3, [r3]
 800d82e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800d830:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d832:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d836:	653b      	str	r3, [r7, #80]	@ 0x50
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	681b      	ldr	r3, [r3, #0]
 800d83c:	461a      	mov	r2, r3
 800d83e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d840:	647b      	str	r3, [r7, #68]	@ 0x44
 800d842:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d844:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d846:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d848:	e841 2300 	strex	r3, r2, [r1]
 800d84c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d84e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d850:	2b00      	cmp	r3, #0
 800d852:	d1e6      	bne.n	800d822 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	2220      	movs	r2, #32
 800d858:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	2200      	movs	r2, #0
 800d860:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d864:	2303      	movs	r3, #3
 800d866:	e063      	b.n	800d930 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	681b      	ldr	r3, [r3, #0]
 800d86c:	681b      	ldr	r3, [r3, #0]
 800d86e:	f003 0304 	and.w	r3, r3, #4
 800d872:	2b04      	cmp	r3, #4
 800d874:	d149      	bne.n	800d90a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d876:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800d87a:	9300      	str	r3, [sp, #0]
 800d87c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d87e:	2200      	movs	r2, #0
 800d880:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800d884:	6878      	ldr	r0, [r7, #4]
 800d886:	f000 f857 	bl	800d938 <UART_WaitOnFlagUntilTimeout>
 800d88a:	4603      	mov	r3, r0
 800d88c:	2b00      	cmp	r3, #0
 800d88e:	d03c      	beq.n	800d90a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	681b      	ldr	r3, [r3, #0]
 800d894:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d896:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d898:	e853 3f00 	ldrex	r3, [r3]
 800d89c:	623b      	str	r3, [r7, #32]
   return(result);
 800d89e:	6a3b      	ldr	r3, [r7, #32]
 800d8a0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d8a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	681b      	ldr	r3, [r3, #0]
 800d8aa:	461a      	mov	r2, r3
 800d8ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d8ae:	633b      	str	r3, [r7, #48]	@ 0x30
 800d8b0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d8b2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d8b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d8b6:	e841 2300 	strex	r3, r2, [r1]
 800d8ba:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d8bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d8be:	2b00      	cmp	r3, #0
 800d8c0:	d1e6      	bne.n	800d890 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	681b      	ldr	r3, [r3, #0]
 800d8c6:	3308      	adds	r3, #8
 800d8c8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d8ca:	693b      	ldr	r3, [r7, #16]
 800d8cc:	e853 3f00 	ldrex	r3, [r3]
 800d8d0:	60fb      	str	r3, [r7, #12]
   return(result);
 800d8d2:	68fb      	ldr	r3, [r7, #12]
 800d8d4:	f023 0301 	bic.w	r3, r3, #1
 800d8d8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	681b      	ldr	r3, [r3, #0]
 800d8de:	3308      	adds	r3, #8
 800d8e0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d8e2:	61fa      	str	r2, [r7, #28]
 800d8e4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d8e6:	69b9      	ldr	r1, [r7, #24]
 800d8e8:	69fa      	ldr	r2, [r7, #28]
 800d8ea:	e841 2300 	strex	r3, r2, [r1]
 800d8ee:	617b      	str	r3, [r7, #20]
   return(result);
 800d8f0:	697b      	ldr	r3, [r7, #20]
 800d8f2:	2b00      	cmp	r3, #0
 800d8f4:	d1e5      	bne.n	800d8c2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	2220      	movs	r2, #32
 800d8fa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	2200      	movs	r2, #0
 800d902:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d906:	2303      	movs	r3, #3
 800d908:	e012      	b.n	800d930 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	2220      	movs	r2, #32
 800d90e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	2220      	movs	r2, #32
 800d916:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	2200      	movs	r2, #0
 800d91e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	2200      	movs	r2, #0
 800d924:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	2200      	movs	r2, #0
 800d92a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d92e:	2300      	movs	r3, #0
}
 800d930:	4618      	mov	r0, r3
 800d932:	3758      	adds	r7, #88	@ 0x58
 800d934:	46bd      	mov	sp, r7
 800d936:	bd80      	pop	{r7, pc}

0800d938 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d938:	b580      	push	{r7, lr}
 800d93a:	b084      	sub	sp, #16
 800d93c:	af00      	add	r7, sp, #0
 800d93e:	60f8      	str	r0, [r7, #12]
 800d940:	60b9      	str	r1, [r7, #8]
 800d942:	603b      	str	r3, [r7, #0]
 800d944:	4613      	mov	r3, r2
 800d946:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d948:	e04f      	b.n	800d9ea <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d94a:	69bb      	ldr	r3, [r7, #24]
 800d94c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d950:	d04b      	beq.n	800d9ea <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d952:	f7f8 fe09 	bl	8006568 <HAL_GetTick>
 800d956:	4602      	mov	r2, r0
 800d958:	683b      	ldr	r3, [r7, #0]
 800d95a:	1ad3      	subs	r3, r2, r3
 800d95c:	69ba      	ldr	r2, [r7, #24]
 800d95e:	429a      	cmp	r2, r3
 800d960:	d302      	bcc.n	800d968 <UART_WaitOnFlagUntilTimeout+0x30>
 800d962:	69bb      	ldr	r3, [r7, #24]
 800d964:	2b00      	cmp	r3, #0
 800d966:	d101      	bne.n	800d96c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800d968:	2303      	movs	r3, #3
 800d96a:	e04e      	b.n	800da0a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800d96c:	68fb      	ldr	r3, [r7, #12]
 800d96e:	681b      	ldr	r3, [r3, #0]
 800d970:	681b      	ldr	r3, [r3, #0]
 800d972:	f003 0304 	and.w	r3, r3, #4
 800d976:	2b00      	cmp	r3, #0
 800d978:	d037      	beq.n	800d9ea <UART_WaitOnFlagUntilTimeout+0xb2>
 800d97a:	68bb      	ldr	r3, [r7, #8]
 800d97c:	2b80      	cmp	r3, #128	@ 0x80
 800d97e:	d034      	beq.n	800d9ea <UART_WaitOnFlagUntilTimeout+0xb2>
 800d980:	68bb      	ldr	r3, [r7, #8]
 800d982:	2b40      	cmp	r3, #64	@ 0x40
 800d984:	d031      	beq.n	800d9ea <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800d986:	68fb      	ldr	r3, [r7, #12]
 800d988:	681b      	ldr	r3, [r3, #0]
 800d98a:	69db      	ldr	r3, [r3, #28]
 800d98c:	f003 0308 	and.w	r3, r3, #8
 800d990:	2b08      	cmp	r3, #8
 800d992:	d110      	bne.n	800d9b6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d994:	68fb      	ldr	r3, [r7, #12]
 800d996:	681b      	ldr	r3, [r3, #0]
 800d998:	2208      	movs	r2, #8
 800d99a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d99c:	68f8      	ldr	r0, [r7, #12]
 800d99e:	f000 f99c 	bl	800dcda <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800d9a2:	68fb      	ldr	r3, [r7, #12]
 800d9a4:	2208      	movs	r2, #8
 800d9a6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d9aa:	68fb      	ldr	r3, [r7, #12]
 800d9ac:	2200      	movs	r2, #0
 800d9ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800d9b2:	2301      	movs	r3, #1
 800d9b4:	e029      	b.n	800da0a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d9b6:	68fb      	ldr	r3, [r7, #12]
 800d9b8:	681b      	ldr	r3, [r3, #0]
 800d9ba:	69db      	ldr	r3, [r3, #28]
 800d9bc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d9c0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d9c4:	d111      	bne.n	800d9ea <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d9c6:	68fb      	ldr	r3, [r7, #12]
 800d9c8:	681b      	ldr	r3, [r3, #0]
 800d9ca:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800d9ce:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d9d0:	68f8      	ldr	r0, [r7, #12]
 800d9d2:	f000 f982 	bl	800dcda <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d9d6:	68fb      	ldr	r3, [r7, #12]
 800d9d8:	2220      	movs	r2, #32
 800d9da:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d9de:	68fb      	ldr	r3, [r7, #12]
 800d9e0:	2200      	movs	r2, #0
 800d9e2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800d9e6:	2303      	movs	r3, #3
 800d9e8:	e00f      	b.n	800da0a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d9ea:	68fb      	ldr	r3, [r7, #12]
 800d9ec:	681b      	ldr	r3, [r3, #0]
 800d9ee:	69da      	ldr	r2, [r3, #28]
 800d9f0:	68bb      	ldr	r3, [r7, #8]
 800d9f2:	4013      	ands	r3, r2
 800d9f4:	68ba      	ldr	r2, [r7, #8]
 800d9f6:	429a      	cmp	r2, r3
 800d9f8:	bf0c      	ite	eq
 800d9fa:	2301      	moveq	r3, #1
 800d9fc:	2300      	movne	r3, #0
 800d9fe:	b2db      	uxtb	r3, r3
 800da00:	461a      	mov	r2, r3
 800da02:	79fb      	ldrb	r3, [r7, #7]
 800da04:	429a      	cmp	r2, r3
 800da06:	d0a0      	beq.n	800d94a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800da08:	2300      	movs	r3, #0
}
 800da0a:	4618      	mov	r0, r3
 800da0c:	3710      	adds	r7, #16
 800da0e:	46bd      	mov	sp, r7
 800da10:	bd80      	pop	{r7, pc}
	...

0800da14 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800da14:	b480      	push	{r7}
 800da16:	b0a3      	sub	sp, #140	@ 0x8c
 800da18:	af00      	add	r7, sp, #0
 800da1a:	60f8      	str	r0, [r7, #12]
 800da1c:	60b9      	str	r1, [r7, #8]
 800da1e:	4613      	mov	r3, r2
 800da20:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800da22:	68fb      	ldr	r3, [r7, #12]
 800da24:	68ba      	ldr	r2, [r7, #8]
 800da26:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 800da28:	68fb      	ldr	r3, [r7, #12]
 800da2a:	88fa      	ldrh	r2, [r7, #6]
 800da2c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 800da30:	68fb      	ldr	r3, [r7, #12]
 800da32:	88fa      	ldrh	r2, [r7, #6]
 800da34:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 800da38:	68fb      	ldr	r3, [r7, #12]
 800da3a:	2200      	movs	r2, #0
 800da3c:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800da3e:	68fb      	ldr	r3, [r7, #12]
 800da40:	689b      	ldr	r3, [r3, #8]
 800da42:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800da46:	d10e      	bne.n	800da66 <UART_Start_Receive_IT+0x52>
 800da48:	68fb      	ldr	r3, [r7, #12]
 800da4a:	691b      	ldr	r3, [r3, #16]
 800da4c:	2b00      	cmp	r3, #0
 800da4e:	d105      	bne.n	800da5c <UART_Start_Receive_IT+0x48>
 800da50:	68fb      	ldr	r3, [r7, #12]
 800da52:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800da56:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800da5a:	e02d      	b.n	800dab8 <UART_Start_Receive_IT+0xa4>
 800da5c:	68fb      	ldr	r3, [r7, #12]
 800da5e:	22ff      	movs	r2, #255	@ 0xff
 800da60:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800da64:	e028      	b.n	800dab8 <UART_Start_Receive_IT+0xa4>
 800da66:	68fb      	ldr	r3, [r7, #12]
 800da68:	689b      	ldr	r3, [r3, #8]
 800da6a:	2b00      	cmp	r3, #0
 800da6c:	d10d      	bne.n	800da8a <UART_Start_Receive_IT+0x76>
 800da6e:	68fb      	ldr	r3, [r7, #12]
 800da70:	691b      	ldr	r3, [r3, #16]
 800da72:	2b00      	cmp	r3, #0
 800da74:	d104      	bne.n	800da80 <UART_Start_Receive_IT+0x6c>
 800da76:	68fb      	ldr	r3, [r7, #12]
 800da78:	22ff      	movs	r2, #255	@ 0xff
 800da7a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800da7e:	e01b      	b.n	800dab8 <UART_Start_Receive_IT+0xa4>
 800da80:	68fb      	ldr	r3, [r7, #12]
 800da82:	227f      	movs	r2, #127	@ 0x7f
 800da84:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800da88:	e016      	b.n	800dab8 <UART_Start_Receive_IT+0xa4>
 800da8a:	68fb      	ldr	r3, [r7, #12]
 800da8c:	689b      	ldr	r3, [r3, #8]
 800da8e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800da92:	d10d      	bne.n	800dab0 <UART_Start_Receive_IT+0x9c>
 800da94:	68fb      	ldr	r3, [r7, #12]
 800da96:	691b      	ldr	r3, [r3, #16]
 800da98:	2b00      	cmp	r3, #0
 800da9a:	d104      	bne.n	800daa6 <UART_Start_Receive_IT+0x92>
 800da9c:	68fb      	ldr	r3, [r7, #12]
 800da9e:	227f      	movs	r2, #127	@ 0x7f
 800daa0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800daa4:	e008      	b.n	800dab8 <UART_Start_Receive_IT+0xa4>
 800daa6:	68fb      	ldr	r3, [r7, #12]
 800daa8:	223f      	movs	r2, #63	@ 0x3f
 800daaa:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800daae:	e003      	b.n	800dab8 <UART_Start_Receive_IT+0xa4>
 800dab0:	68fb      	ldr	r3, [r7, #12]
 800dab2:	2200      	movs	r2, #0
 800dab4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dab8:	68fb      	ldr	r3, [r7, #12]
 800daba:	2200      	movs	r2, #0
 800dabc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800dac0:	68fb      	ldr	r3, [r7, #12]
 800dac2:	2222      	movs	r2, #34	@ 0x22
 800dac4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dac8:	68fb      	ldr	r3, [r7, #12]
 800daca:	681b      	ldr	r3, [r3, #0]
 800dacc:	3308      	adds	r3, #8
 800dace:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dad0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800dad2:	e853 3f00 	ldrex	r3, [r3]
 800dad6:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800dad8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800dada:	f043 0301 	orr.w	r3, r3, #1
 800dade:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800dae2:	68fb      	ldr	r3, [r7, #12]
 800dae4:	681b      	ldr	r3, [r3, #0]
 800dae6:	3308      	adds	r3, #8
 800dae8:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800daec:	673a      	str	r2, [r7, #112]	@ 0x70
 800daee:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800daf0:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800daf2:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800daf4:	e841 2300 	strex	r3, r2, [r1]
 800daf8:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 800dafa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800dafc:	2b00      	cmp	r3, #0
 800dafe:	d1e3      	bne.n	800dac8 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800db00:	68fb      	ldr	r3, [r7, #12]
 800db02:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800db04:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800db08:	d14f      	bne.n	800dbaa <UART_Start_Receive_IT+0x196>
 800db0a:	68fb      	ldr	r3, [r7, #12]
 800db0c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800db10:	88fa      	ldrh	r2, [r7, #6]
 800db12:	429a      	cmp	r2, r3
 800db14:	d349      	bcc.n	800dbaa <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800db16:	68fb      	ldr	r3, [r7, #12]
 800db18:	689b      	ldr	r3, [r3, #8]
 800db1a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800db1e:	d107      	bne.n	800db30 <UART_Start_Receive_IT+0x11c>
 800db20:	68fb      	ldr	r3, [r7, #12]
 800db22:	691b      	ldr	r3, [r3, #16]
 800db24:	2b00      	cmp	r3, #0
 800db26:	d103      	bne.n	800db30 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800db28:	68fb      	ldr	r3, [r7, #12]
 800db2a:	4a47      	ldr	r2, [pc, #284]	@ (800dc48 <UART_Start_Receive_IT+0x234>)
 800db2c:	675a      	str	r2, [r3, #116]	@ 0x74
 800db2e:	e002      	b.n	800db36 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800db30:	68fb      	ldr	r3, [r7, #12]
 800db32:	4a46      	ldr	r2, [pc, #280]	@ (800dc4c <UART_Start_Receive_IT+0x238>)
 800db34:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800db36:	68fb      	ldr	r3, [r7, #12]
 800db38:	691b      	ldr	r3, [r3, #16]
 800db3a:	2b00      	cmp	r3, #0
 800db3c:	d01a      	beq.n	800db74 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800db3e:	68fb      	ldr	r3, [r7, #12]
 800db40:	681b      	ldr	r3, [r3, #0]
 800db42:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db44:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800db46:	e853 3f00 	ldrex	r3, [r3]
 800db4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800db4c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800db4e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800db52:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800db56:	68fb      	ldr	r3, [r7, #12]
 800db58:	681b      	ldr	r3, [r3, #0]
 800db5a:	461a      	mov	r2, r3
 800db5c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800db60:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800db62:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db64:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800db66:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800db68:	e841 2300 	strex	r3, r2, [r1]
 800db6c:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800db6e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800db70:	2b00      	cmp	r3, #0
 800db72:	d1e4      	bne.n	800db3e <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800db74:	68fb      	ldr	r3, [r7, #12]
 800db76:	681b      	ldr	r3, [r3, #0]
 800db78:	3308      	adds	r3, #8
 800db7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db7c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800db7e:	e853 3f00 	ldrex	r3, [r3]
 800db82:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800db84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db86:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800db8a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800db8c:	68fb      	ldr	r3, [r7, #12]
 800db8e:	681b      	ldr	r3, [r3, #0]
 800db90:	3308      	adds	r3, #8
 800db92:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800db94:	64ba      	str	r2, [r7, #72]	@ 0x48
 800db96:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db98:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800db9a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800db9c:	e841 2300 	strex	r3, r2, [r1]
 800dba0:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800dba2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dba4:	2b00      	cmp	r3, #0
 800dba6:	d1e5      	bne.n	800db74 <UART_Start_Receive_IT+0x160>
 800dba8:	e046      	b.n	800dc38 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800dbaa:	68fb      	ldr	r3, [r7, #12]
 800dbac:	689b      	ldr	r3, [r3, #8]
 800dbae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800dbb2:	d107      	bne.n	800dbc4 <UART_Start_Receive_IT+0x1b0>
 800dbb4:	68fb      	ldr	r3, [r7, #12]
 800dbb6:	691b      	ldr	r3, [r3, #16]
 800dbb8:	2b00      	cmp	r3, #0
 800dbba:	d103      	bne.n	800dbc4 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800dbbc:	68fb      	ldr	r3, [r7, #12]
 800dbbe:	4a24      	ldr	r2, [pc, #144]	@ (800dc50 <UART_Start_Receive_IT+0x23c>)
 800dbc0:	675a      	str	r2, [r3, #116]	@ 0x74
 800dbc2:	e002      	b.n	800dbca <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800dbc4:	68fb      	ldr	r3, [r7, #12]
 800dbc6:	4a23      	ldr	r2, [pc, #140]	@ (800dc54 <UART_Start_Receive_IT+0x240>)
 800dbc8:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800dbca:	68fb      	ldr	r3, [r7, #12]
 800dbcc:	691b      	ldr	r3, [r3, #16]
 800dbce:	2b00      	cmp	r3, #0
 800dbd0:	d019      	beq.n	800dc06 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800dbd2:	68fb      	ldr	r3, [r7, #12]
 800dbd4:	681b      	ldr	r3, [r3, #0]
 800dbd6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dbd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dbda:	e853 3f00 	ldrex	r3, [r3]
 800dbde:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800dbe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dbe2:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800dbe6:	677b      	str	r3, [r7, #116]	@ 0x74
 800dbe8:	68fb      	ldr	r3, [r7, #12]
 800dbea:	681b      	ldr	r3, [r3, #0]
 800dbec:	461a      	mov	r2, r3
 800dbee:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800dbf0:	637b      	str	r3, [r7, #52]	@ 0x34
 800dbf2:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dbf4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800dbf6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800dbf8:	e841 2300 	strex	r3, r2, [r1]
 800dbfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800dbfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc00:	2b00      	cmp	r3, #0
 800dc02:	d1e6      	bne.n	800dbd2 <UART_Start_Receive_IT+0x1be>
 800dc04:	e018      	b.n	800dc38 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800dc06:	68fb      	ldr	r3, [r7, #12]
 800dc08:	681b      	ldr	r3, [r3, #0]
 800dc0a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc0c:	697b      	ldr	r3, [r7, #20]
 800dc0e:	e853 3f00 	ldrex	r3, [r3]
 800dc12:	613b      	str	r3, [r7, #16]
   return(result);
 800dc14:	693b      	ldr	r3, [r7, #16]
 800dc16:	f043 0320 	orr.w	r3, r3, #32
 800dc1a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800dc1c:	68fb      	ldr	r3, [r7, #12]
 800dc1e:	681b      	ldr	r3, [r3, #0]
 800dc20:	461a      	mov	r2, r3
 800dc22:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800dc24:	623b      	str	r3, [r7, #32]
 800dc26:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc28:	69f9      	ldr	r1, [r7, #28]
 800dc2a:	6a3a      	ldr	r2, [r7, #32]
 800dc2c:	e841 2300 	strex	r3, r2, [r1]
 800dc30:	61bb      	str	r3, [r7, #24]
   return(result);
 800dc32:	69bb      	ldr	r3, [r7, #24]
 800dc34:	2b00      	cmp	r3, #0
 800dc36:	d1e6      	bne.n	800dc06 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800dc38:	2300      	movs	r3, #0
}
 800dc3a:	4618      	mov	r0, r3
 800dc3c:	378c      	adds	r7, #140	@ 0x8c
 800dc3e:	46bd      	mov	sp, r7
 800dc40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc44:	4770      	bx	lr
 800dc46:	bf00      	nop
 800dc48:	0800e65d 	.word	0x0800e65d
 800dc4c:	0800e2ed 	.word	0x0800e2ed
 800dc50:	0800e12d 	.word	0x0800e12d
 800dc54:	0800df6d 	.word	0x0800df6d

0800dc58 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800dc58:	b480      	push	{r7}
 800dc5a:	b08f      	sub	sp, #60	@ 0x3c
 800dc5c:	af00      	add	r7, sp, #0
 800dc5e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	681b      	ldr	r3, [r3, #0]
 800dc64:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc66:	6a3b      	ldr	r3, [r7, #32]
 800dc68:	e853 3f00 	ldrex	r3, [r3]
 800dc6c:	61fb      	str	r3, [r7, #28]
   return(result);
 800dc6e:	69fb      	ldr	r3, [r7, #28]
 800dc70:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800dc74:	637b      	str	r3, [r7, #52]	@ 0x34
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	681b      	ldr	r3, [r3, #0]
 800dc7a:	461a      	mov	r2, r3
 800dc7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dc7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800dc80:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc82:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800dc84:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800dc86:	e841 2300 	strex	r3, r2, [r1]
 800dc8a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800dc8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc8e:	2b00      	cmp	r3, #0
 800dc90:	d1e6      	bne.n	800dc60 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	681b      	ldr	r3, [r3, #0]
 800dc96:	3308      	adds	r3, #8
 800dc98:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc9a:	68fb      	ldr	r3, [r7, #12]
 800dc9c:	e853 3f00 	ldrex	r3, [r3]
 800dca0:	60bb      	str	r3, [r7, #8]
   return(result);
 800dca2:	68bb      	ldr	r3, [r7, #8]
 800dca4:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800dca8:	633b      	str	r3, [r7, #48]	@ 0x30
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	681b      	ldr	r3, [r3, #0]
 800dcae:	3308      	adds	r3, #8
 800dcb0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800dcb2:	61ba      	str	r2, [r7, #24]
 800dcb4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dcb6:	6979      	ldr	r1, [r7, #20]
 800dcb8:	69ba      	ldr	r2, [r7, #24]
 800dcba:	e841 2300 	strex	r3, r2, [r1]
 800dcbe:	613b      	str	r3, [r7, #16]
   return(result);
 800dcc0:	693b      	ldr	r3, [r7, #16]
 800dcc2:	2b00      	cmp	r3, #0
 800dcc4:	d1e5      	bne.n	800dc92 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	2220      	movs	r2, #32
 800dcca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800dcce:	bf00      	nop
 800dcd0:	373c      	adds	r7, #60	@ 0x3c
 800dcd2:	46bd      	mov	sp, r7
 800dcd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcd8:	4770      	bx	lr

0800dcda <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800dcda:	b480      	push	{r7}
 800dcdc:	b095      	sub	sp, #84	@ 0x54
 800dcde:	af00      	add	r7, sp, #0
 800dce0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	681b      	ldr	r3, [r3, #0]
 800dce6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dce8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dcea:	e853 3f00 	ldrex	r3, [r3]
 800dcee:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800dcf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dcf2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800dcf6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	681b      	ldr	r3, [r3, #0]
 800dcfc:	461a      	mov	r2, r3
 800dcfe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dd00:	643b      	str	r3, [r7, #64]	@ 0x40
 800dd02:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd04:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800dd06:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800dd08:	e841 2300 	strex	r3, r2, [r1]
 800dd0c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800dd0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dd10:	2b00      	cmp	r3, #0
 800dd12:	d1e6      	bne.n	800dce2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	681b      	ldr	r3, [r3, #0]
 800dd18:	3308      	adds	r3, #8
 800dd1a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd1c:	6a3b      	ldr	r3, [r7, #32]
 800dd1e:	e853 3f00 	ldrex	r3, [r3]
 800dd22:	61fb      	str	r3, [r7, #28]
   return(result);
 800dd24:	69fb      	ldr	r3, [r7, #28]
 800dd26:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800dd2a:	f023 0301 	bic.w	r3, r3, #1
 800dd2e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	681b      	ldr	r3, [r3, #0]
 800dd34:	3308      	adds	r3, #8
 800dd36:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800dd38:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800dd3a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd3c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800dd3e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800dd40:	e841 2300 	strex	r3, r2, [r1]
 800dd44:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800dd46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd48:	2b00      	cmp	r3, #0
 800dd4a:	d1e3      	bne.n	800dd14 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800dd50:	2b01      	cmp	r3, #1
 800dd52:	d118      	bne.n	800dd86 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	681b      	ldr	r3, [r3, #0]
 800dd58:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd5a:	68fb      	ldr	r3, [r7, #12]
 800dd5c:	e853 3f00 	ldrex	r3, [r3]
 800dd60:	60bb      	str	r3, [r7, #8]
   return(result);
 800dd62:	68bb      	ldr	r3, [r7, #8]
 800dd64:	f023 0310 	bic.w	r3, r3, #16
 800dd68:	647b      	str	r3, [r7, #68]	@ 0x44
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	681b      	ldr	r3, [r3, #0]
 800dd6e:	461a      	mov	r2, r3
 800dd70:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800dd72:	61bb      	str	r3, [r7, #24]
 800dd74:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd76:	6979      	ldr	r1, [r7, #20]
 800dd78:	69ba      	ldr	r2, [r7, #24]
 800dd7a:	e841 2300 	strex	r3, r2, [r1]
 800dd7e:	613b      	str	r3, [r7, #16]
   return(result);
 800dd80:	693b      	ldr	r3, [r7, #16]
 800dd82:	2b00      	cmp	r3, #0
 800dd84:	d1e6      	bne.n	800dd54 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	2220      	movs	r2, #32
 800dd8a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	2200      	movs	r2, #0
 800dd92:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	2200      	movs	r2, #0
 800dd98:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800dd9a:	bf00      	nop
 800dd9c:	3754      	adds	r7, #84	@ 0x54
 800dd9e:	46bd      	mov	sp, r7
 800dda0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dda4:	4770      	bx	lr

0800dda6 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800dda6:	b580      	push	{r7, lr}
 800dda8:	b090      	sub	sp, #64	@ 0x40
 800ddaa:	af00      	add	r7, sp, #0
 800ddac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ddb2:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	681b      	ldr	r3, [r3, #0]
 800ddb8:	681b      	ldr	r3, [r3, #0]
 800ddba:	f003 0320 	and.w	r3, r3, #32
 800ddbe:	2b00      	cmp	r3, #0
 800ddc0:	d137      	bne.n	800de32 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800ddc2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ddc4:	2200      	movs	r2, #0
 800ddc6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800ddca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ddcc:	681b      	ldr	r3, [r3, #0]
 800ddce:	3308      	adds	r3, #8
 800ddd0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ddd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ddd4:	e853 3f00 	ldrex	r3, [r3]
 800ddd8:	623b      	str	r3, [r7, #32]
   return(result);
 800ddda:	6a3b      	ldr	r3, [r7, #32]
 800dddc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800dde0:	63bb      	str	r3, [r7, #56]	@ 0x38
 800dde2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dde4:	681b      	ldr	r3, [r3, #0]
 800dde6:	3308      	adds	r3, #8
 800dde8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ddea:	633a      	str	r2, [r7, #48]	@ 0x30
 800ddec:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ddee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ddf0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ddf2:	e841 2300 	strex	r3, r2, [r1]
 800ddf6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ddf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ddfa:	2b00      	cmp	r3, #0
 800ddfc:	d1e5      	bne.n	800ddca <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ddfe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800de00:	681b      	ldr	r3, [r3, #0]
 800de02:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de04:	693b      	ldr	r3, [r7, #16]
 800de06:	e853 3f00 	ldrex	r3, [r3]
 800de0a:	60fb      	str	r3, [r7, #12]
   return(result);
 800de0c:	68fb      	ldr	r3, [r7, #12]
 800de0e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800de12:	637b      	str	r3, [r7, #52]	@ 0x34
 800de14:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800de16:	681b      	ldr	r3, [r3, #0]
 800de18:	461a      	mov	r2, r3
 800de1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800de1c:	61fb      	str	r3, [r7, #28]
 800de1e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de20:	69b9      	ldr	r1, [r7, #24]
 800de22:	69fa      	ldr	r2, [r7, #28]
 800de24:	e841 2300 	strex	r3, r2, [r1]
 800de28:	617b      	str	r3, [r7, #20]
   return(result);
 800de2a:	697b      	ldr	r3, [r7, #20]
 800de2c:	2b00      	cmp	r3, #0
 800de2e:	d1e6      	bne.n	800ddfe <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800de30:	e004      	b.n	800de3c <UART_DMATransmitCplt+0x96>
    huart->TxCpltCallback(huart);
 800de32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800de34:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800de38:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800de3a:	4798      	blx	r3
}
 800de3c:	bf00      	nop
 800de3e:	3740      	adds	r7, #64	@ 0x40
 800de40:	46bd      	mov	sp, r7
 800de42:	bd80      	pop	{r7, pc}

0800de44 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800de44:	b580      	push	{r7, lr}
 800de46:	b084      	sub	sp, #16
 800de48:	af00      	add	r7, sp, #0
 800de4a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800de50:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 800de52:	68fb      	ldr	r3, [r7, #12]
 800de54:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800de58:	68f8      	ldr	r0, [r7, #12]
 800de5a:	4798      	blx	r3
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800de5c:	bf00      	nop
 800de5e:	3710      	adds	r7, #16
 800de60:	46bd      	mov	sp, r7
 800de62:	bd80      	pop	{r7, pc}

0800de64 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800de64:	b580      	push	{r7, lr}
 800de66:	b086      	sub	sp, #24
 800de68:	af00      	add	r7, sp, #0
 800de6a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800de70:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800de72:	697b      	ldr	r3, [r7, #20]
 800de74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800de78:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800de7a:	697b      	ldr	r3, [r7, #20]
 800de7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800de80:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800de82:	697b      	ldr	r3, [r7, #20]
 800de84:	681b      	ldr	r3, [r3, #0]
 800de86:	689b      	ldr	r3, [r3, #8]
 800de88:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800de8c:	2b80      	cmp	r3, #128	@ 0x80
 800de8e:	d109      	bne.n	800dea4 <UART_DMAError+0x40>
 800de90:	693b      	ldr	r3, [r7, #16]
 800de92:	2b21      	cmp	r3, #33	@ 0x21
 800de94:	d106      	bne.n	800dea4 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800de96:	697b      	ldr	r3, [r7, #20]
 800de98:	2200      	movs	r2, #0
 800de9a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800de9e:	6978      	ldr	r0, [r7, #20]
 800dea0:	f7ff feda 	bl	800dc58 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800dea4:	697b      	ldr	r3, [r7, #20]
 800dea6:	681b      	ldr	r3, [r3, #0]
 800dea8:	689b      	ldr	r3, [r3, #8]
 800deaa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800deae:	2b40      	cmp	r3, #64	@ 0x40
 800deb0:	d109      	bne.n	800dec6 <UART_DMAError+0x62>
 800deb2:	68fb      	ldr	r3, [r7, #12]
 800deb4:	2b22      	cmp	r3, #34	@ 0x22
 800deb6:	d106      	bne.n	800dec6 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800deb8:	697b      	ldr	r3, [r7, #20]
 800deba:	2200      	movs	r2, #0
 800debc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800dec0:	6978      	ldr	r0, [r7, #20]
 800dec2:	f7ff ff0a 	bl	800dcda <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800dec6:	697b      	ldr	r3, [r7, #20]
 800dec8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800decc:	f043 0210 	orr.w	r2, r3, #16
 800ded0:	697b      	ldr	r3, [r7, #20]
 800ded2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800ded6:	697b      	ldr	r3, [r7, #20]
 800ded8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800dedc:	6978      	ldr	r0, [r7, #20]
 800dede:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800dee0:	bf00      	nop
 800dee2:	3718      	adds	r7, #24
 800dee4:	46bd      	mov	sp, r7
 800dee6:	bd80      	pop	{r7, pc}

0800dee8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800dee8:	b580      	push	{r7, lr}
 800deea:	b084      	sub	sp, #16
 800deec:	af00      	add	r7, sp, #0
 800deee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800def4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800def6:	68fb      	ldr	r3, [r7, #12]
 800def8:	2200      	movs	r2, #0
 800defa:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800defe:	68fb      	ldr	r3, [r7, #12]
 800df00:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800df04:	68f8      	ldr	r0, [r7, #12]
 800df06:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800df08:	bf00      	nop
 800df0a:	3710      	adds	r7, #16
 800df0c:	46bd      	mov	sp, r7
 800df0e:	bd80      	pop	{r7, pc}

0800df10 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800df10:	b580      	push	{r7, lr}
 800df12:	b088      	sub	sp, #32
 800df14:	af00      	add	r7, sp, #0
 800df16:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	681b      	ldr	r3, [r3, #0]
 800df1c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df1e:	68fb      	ldr	r3, [r7, #12]
 800df20:	e853 3f00 	ldrex	r3, [r3]
 800df24:	60bb      	str	r3, [r7, #8]
   return(result);
 800df26:	68bb      	ldr	r3, [r7, #8]
 800df28:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800df2c:	61fb      	str	r3, [r7, #28]
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	681b      	ldr	r3, [r3, #0]
 800df32:	461a      	mov	r2, r3
 800df34:	69fb      	ldr	r3, [r7, #28]
 800df36:	61bb      	str	r3, [r7, #24]
 800df38:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df3a:	6979      	ldr	r1, [r7, #20]
 800df3c:	69ba      	ldr	r2, [r7, #24]
 800df3e:	e841 2300 	strex	r3, r2, [r1]
 800df42:	613b      	str	r3, [r7, #16]
   return(result);
 800df44:	693b      	ldr	r3, [r7, #16]
 800df46:	2b00      	cmp	r3, #0
 800df48:	d1e6      	bne.n	800df18 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	2220      	movs	r2, #32
 800df4e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	2200      	movs	r2, #0
 800df56:	679a      	str	r2, [r3, #120]	@ 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800df5e:	6878      	ldr	r0, [r7, #4]
 800df60:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800df62:	bf00      	nop
 800df64:	3720      	adds	r7, #32
 800df66:	46bd      	mov	sp, r7
 800df68:	bd80      	pop	{r7, pc}
	...

0800df6c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800df6c:	b580      	push	{r7, lr}
 800df6e:	b09c      	sub	sp, #112	@ 0x70
 800df70:	af00      	add	r7, sp, #0
 800df72:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800df7a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800df84:	2b22      	cmp	r3, #34	@ 0x22
 800df86:	f040 80c2 	bne.w	800e10e <UART_RxISR_8BIT+0x1a2>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	681b      	ldr	r3, [r3, #0]
 800df8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800df90:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800df94:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800df98:	b2d9      	uxtb	r1, r3
 800df9a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800df9e:	b2da      	uxtb	r2, r3
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800dfa4:	400a      	ands	r2, r1
 800dfa6:	b2d2      	uxtb	r2, r2
 800dfa8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800dfae:	1c5a      	adds	r2, r3, #1
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800dfba:	b29b      	uxth	r3, r3
 800dfbc:	3b01      	subs	r3, #1
 800dfbe:	b29a      	uxth	r2, r3
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800dfcc:	b29b      	uxth	r3, r3
 800dfce:	2b00      	cmp	r3, #0
 800dfd0:	f040 80a5 	bne.w	800e11e <UART_RxISR_8BIT+0x1b2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	681b      	ldr	r3, [r3, #0]
 800dfd8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dfda:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dfdc:	e853 3f00 	ldrex	r3, [r3]
 800dfe0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800dfe2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800dfe4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800dfe8:	66bb      	str	r3, [r7, #104]	@ 0x68
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	681b      	ldr	r3, [r3, #0]
 800dfee:	461a      	mov	r2, r3
 800dff0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800dff2:	65bb      	str	r3, [r7, #88]	@ 0x58
 800dff4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dff6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800dff8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800dffa:	e841 2300 	strex	r3, r2, [r1]
 800dffe:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800e000:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e002:	2b00      	cmp	r3, #0
 800e004:	d1e6      	bne.n	800dfd4 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	681b      	ldr	r3, [r3, #0]
 800e00a:	3308      	adds	r3, #8
 800e00c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e00e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e010:	e853 3f00 	ldrex	r3, [r3]
 800e014:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800e016:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e018:	f023 0301 	bic.w	r3, r3, #1
 800e01c:	667b      	str	r3, [r7, #100]	@ 0x64
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	681b      	ldr	r3, [r3, #0]
 800e022:	3308      	adds	r3, #8
 800e024:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800e026:	647a      	str	r2, [r7, #68]	@ 0x44
 800e028:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e02a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800e02c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e02e:	e841 2300 	strex	r3, r2, [r1]
 800e032:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800e034:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e036:	2b00      	cmp	r3, #0
 800e038:	d1e5      	bne.n	800e006 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	2220      	movs	r2, #32
 800e03e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	2200      	movs	r2, #0
 800e046:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	2200      	movs	r2, #0
 800e04c:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	681b      	ldr	r3, [r3, #0]
 800e052:	4a35      	ldr	r2, [pc, #212]	@ (800e128 <UART_RxISR_8BIT+0x1bc>)
 800e054:	4293      	cmp	r3, r2
 800e056:	d01f      	beq.n	800e098 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	681b      	ldr	r3, [r3, #0]
 800e05c:	685b      	ldr	r3, [r3, #4]
 800e05e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800e062:	2b00      	cmp	r3, #0
 800e064:	d018      	beq.n	800e098 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	681b      	ldr	r3, [r3, #0]
 800e06a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e06c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e06e:	e853 3f00 	ldrex	r3, [r3]
 800e072:	623b      	str	r3, [r7, #32]
   return(result);
 800e074:	6a3b      	ldr	r3, [r7, #32]
 800e076:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800e07a:	663b      	str	r3, [r7, #96]	@ 0x60
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	681b      	ldr	r3, [r3, #0]
 800e080:	461a      	mov	r2, r3
 800e082:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e084:	633b      	str	r3, [r7, #48]	@ 0x30
 800e086:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e088:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e08a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e08c:	e841 2300 	strex	r3, r2, [r1]
 800e090:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800e092:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e094:	2b00      	cmp	r3, #0
 800e096:	d1e6      	bne.n	800e066 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e09c:	2b01      	cmp	r3, #1
 800e09e:	d130      	bne.n	800e102 <UART_RxISR_8BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	2200      	movs	r2, #0
 800e0a4:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	681b      	ldr	r3, [r3, #0]
 800e0aa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e0ac:	693b      	ldr	r3, [r7, #16]
 800e0ae:	e853 3f00 	ldrex	r3, [r3]
 800e0b2:	60fb      	str	r3, [r7, #12]
   return(result);
 800e0b4:	68fb      	ldr	r3, [r7, #12]
 800e0b6:	f023 0310 	bic.w	r3, r3, #16
 800e0ba:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	681b      	ldr	r3, [r3, #0]
 800e0c0:	461a      	mov	r2, r3
 800e0c2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e0c4:	61fb      	str	r3, [r7, #28]
 800e0c6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e0c8:	69b9      	ldr	r1, [r7, #24]
 800e0ca:	69fa      	ldr	r2, [r7, #28]
 800e0cc:	e841 2300 	strex	r3, r2, [r1]
 800e0d0:	617b      	str	r3, [r7, #20]
   return(result);
 800e0d2:	697b      	ldr	r3, [r7, #20]
 800e0d4:	2b00      	cmp	r3, #0
 800e0d6:	d1e6      	bne.n	800e0a6 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	681b      	ldr	r3, [r3, #0]
 800e0dc:	69db      	ldr	r3, [r3, #28]
 800e0de:	f003 0310 	and.w	r3, r3, #16
 800e0e2:	2b10      	cmp	r3, #16
 800e0e4:	d103      	bne.n	800e0ee <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	681b      	ldr	r3, [r3, #0]
 800e0ea:	2210      	movs	r2, #16
 800e0ec:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800e0f4:	687a      	ldr	r2, [r7, #4]
 800e0f6:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800e0fa:	4611      	mov	r1, r2
 800e0fc:	6878      	ldr	r0, [r7, #4]
 800e0fe:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800e100:	e00d      	b.n	800e11e <UART_RxISR_8BIT+0x1b2>
        huart->RxCpltCallback(huart);
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800e108:	6878      	ldr	r0, [r7, #4]
 800e10a:	4798      	blx	r3
}
 800e10c:	e007      	b.n	800e11e <UART_RxISR_8BIT+0x1b2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	681b      	ldr	r3, [r3, #0]
 800e112:	699a      	ldr	r2, [r3, #24]
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	681b      	ldr	r3, [r3, #0]
 800e118:	f042 0208 	orr.w	r2, r2, #8
 800e11c:	619a      	str	r2, [r3, #24]
}
 800e11e:	bf00      	nop
 800e120:	3770      	adds	r7, #112	@ 0x70
 800e122:	46bd      	mov	sp, r7
 800e124:	bd80      	pop	{r7, pc}
 800e126:	bf00      	nop
 800e128:	40008000 	.word	0x40008000

0800e12c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800e12c:	b580      	push	{r7, lr}
 800e12e:	b09c      	sub	sp, #112	@ 0x70
 800e130:	af00      	add	r7, sp, #0
 800e132:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800e13a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e144:	2b22      	cmp	r3, #34	@ 0x22
 800e146:	f040 80c2 	bne.w	800e2ce <UART_RxISR_16BIT+0x1a2>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	681b      	ldr	r3, [r3, #0]
 800e14e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e150:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e158:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800e15a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800e15e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800e162:	4013      	ands	r3, r2
 800e164:	b29a      	uxth	r2, r3
 800e166:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800e168:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e16e:	1c9a      	adds	r2, r3, #2
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800e17a:	b29b      	uxth	r3, r3
 800e17c:	3b01      	subs	r3, #1
 800e17e:	b29a      	uxth	r2, r3
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800e18c:	b29b      	uxth	r3, r3
 800e18e:	2b00      	cmp	r3, #0
 800e190:	f040 80a5 	bne.w	800e2de <UART_RxISR_16BIT+0x1b2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	681b      	ldr	r3, [r3, #0]
 800e198:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e19a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e19c:	e853 3f00 	ldrex	r3, [r3]
 800e1a0:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800e1a2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e1a4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800e1a8:	667b      	str	r3, [r7, #100]	@ 0x64
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	681b      	ldr	r3, [r3, #0]
 800e1ae:	461a      	mov	r2, r3
 800e1b0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e1b2:	657b      	str	r3, [r7, #84]	@ 0x54
 800e1b4:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e1b6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800e1b8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800e1ba:	e841 2300 	strex	r3, r2, [r1]
 800e1be:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800e1c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e1c2:	2b00      	cmp	r3, #0
 800e1c4:	d1e6      	bne.n	800e194 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	681b      	ldr	r3, [r3, #0]
 800e1ca:	3308      	adds	r3, #8
 800e1cc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e1ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e1d0:	e853 3f00 	ldrex	r3, [r3]
 800e1d4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800e1d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e1d8:	f023 0301 	bic.w	r3, r3, #1
 800e1dc:	663b      	str	r3, [r7, #96]	@ 0x60
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	681b      	ldr	r3, [r3, #0]
 800e1e2:	3308      	adds	r3, #8
 800e1e4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800e1e6:	643a      	str	r2, [r7, #64]	@ 0x40
 800e1e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e1ea:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800e1ec:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800e1ee:	e841 2300 	strex	r3, r2, [r1]
 800e1f2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800e1f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e1f6:	2b00      	cmp	r3, #0
 800e1f8:	d1e5      	bne.n	800e1c6 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	2220      	movs	r2, #32
 800e1fe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	2200      	movs	r2, #0
 800e206:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	2200      	movs	r2, #0
 800e20c:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	681b      	ldr	r3, [r3, #0]
 800e212:	4a35      	ldr	r2, [pc, #212]	@ (800e2e8 <UART_RxISR_16BIT+0x1bc>)
 800e214:	4293      	cmp	r3, r2
 800e216:	d01f      	beq.n	800e258 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	681b      	ldr	r3, [r3, #0]
 800e21c:	685b      	ldr	r3, [r3, #4]
 800e21e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800e222:	2b00      	cmp	r3, #0
 800e224:	d018      	beq.n	800e258 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	681b      	ldr	r3, [r3, #0]
 800e22a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e22c:	6a3b      	ldr	r3, [r7, #32]
 800e22e:	e853 3f00 	ldrex	r3, [r3]
 800e232:	61fb      	str	r3, [r7, #28]
   return(result);
 800e234:	69fb      	ldr	r3, [r7, #28]
 800e236:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800e23a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	681b      	ldr	r3, [r3, #0]
 800e240:	461a      	mov	r2, r3
 800e242:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e244:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e246:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e248:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e24a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e24c:	e841 2300 	strex	r3, r2, [r1]
 800e250:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800e252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e254:	2b00      	cmp	r3, #0
 800e256:	d1e6      	bne.n	800e226 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e25c:	2b01      	cmp	r3, #1
 800e25e:	d130      	bne.n	800e2c2 <UART_RxISR_16BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	2200      	movs	r2, #0
 800e264:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	681b      	ldr	r3, [r3, #0]
 800e26a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e26c:	68fb      	ldr	r3, [r7, #12]
 800e26e:	e853 3f00 	ldrex	r3, [r3]
 800e272:	60bb      	str	r3, [r7, #8]
   return(result);
 800e274:	68bb      	ldr	r3, [r7, #8]
 800e276:	f023 0310 	bic.w	r3, r3, #16
 800e27a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	681b      	ldr	r3, [r3, #0]
 800e280:	461a      	mov	r2, r3
 800e282:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e284:	61bb      	str	r3, [r7, #24]
 800e286:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e288:	6979      	ldr	r1, [r7, #20]
 800e28a:	69ba      	ldr	r2, [r7, #24]
 800e28c:	e841 2300 	strex	r3, r2, [r1]
 800e290:	613b      	str	r3, [r7, #16]
   return(result);
 800e292:	693b      	ldr	r3, [r7, #16]
 800e294:	2b00      	cmp	r3, #0
 800e296:	d1e6      	bne.n	800e266 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	681b      	ldr	r3, [r3, #0]
 800e29c:	69db      	ldr	r3, [r3, #28]
 800e29e:	f003 0310 	and.w	r3, r3, #16
 800e2a2:	2b10      	cmp	r3, #16
 800e2a4:	d103      	bne.n	800e2ae <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	681b      	ldr	r3, [r3, #0]
 800e2aa:	2210      	movs	r2, #16
 800e2ac:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800e2b4:	687a      	ldr	r2, [r7, #4]
 800e2b6:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800e2ba:	4611      	mov	r1, r2
 800e2bc:	6878      	ldr	r0, [r7, #4]
 800e2be:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800e2c0:	e00d      	b.n	800e2de <UART_RxISR_16BIT+0x1b2>
        huart->RxCpltCallback(huart);
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800e2c8:	6878      	ldr	r0, [r7, #4]
 800e2ca:	4798      	blx	r3
}
 800e2cc:	e007      	b.n	800e2de <UART_RxISR_16BIT+0x1b2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	681b      	ldr	r3, [r3, #0]
 800e2d2:	699a      	ldr	r2, [r3, #24]
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	681b      	ldr	r3, [r3, #0]
 800e2d8:	f042 0208 	orr.w	r2, r2, #8
 800e2dc:	619a      	str	r2, [r3, #24]
}
 800e2de:	bf00      	nop
 800e2e0:	3770      	adds	r7, #112	@ 0x70
 800e2e2:	46bd      	mov	sp, r7
 800e2e4:	bd80      	pop	{r7, pc}
 800e2e6:	bf00      	nop
 800e2e8:	40008000 	.word	0x40008000

0800e2ec <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800e2ec:	b580      	push	{r7, lr}
 800e2ee:	b0ac      	sub	sp, #176	@ 0xb0
 800e2f0:	af00      	add	r7, sp, #0
 800e2f2:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800e2fa:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	681b      	ldr	r3, [r3, #0]
 800e302:	69db      	ldr	r3, [r3, #28]
 800e304:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	681b      	ldr	r3, [r3, #0]
 800e30c:	681b      	ldr	r3, [r3, #0]
 800e30e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800e312:	687b      	ldr	r3, [r7, #4]
 800e314:	681b      	ldr	r3, [r3, #0]
 800e316:	689b      	ldr	r3, [r3, #8]
 800e318:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e322:	2b22      	cmp	r3, #34	@ 0x22
 800e324:	f040 8189 	bne.w	800e63a <UART_RxISR_8BIT_FIFOEN+0x34e>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800e32e:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800e332:	e12c      	b.n	800e58e <UART_RxISR_8BIT_FIFOEN+0x2a2>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	681b      	ldr	r3, [r3, #0]
 800e338:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e33a:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800e33e:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800e342:	b2d9      	uxtb	r1, r3
 800e344:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 800e348:	b2da      	uxtb	r2, r3
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e34e:	400a      	ands	r2, r1
 800e350:	b2d2      	uxtb	r2, r2
 800e352:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e358:	1c5a      	adds	r2, r3, #1
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800e364:	b29b      	uxth	r3, r3
 800e366:	3b01      	subs	r3, #1
 800e368:	b29a      	uxth	r2, r3
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	681b      	ldr	r3, [r3, #0]
 800e374:	69db      	ldr	r3, [r3, #28]
 800e376:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800e37a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e37e:	f003 0307 	and.w	r3, r3, #7
 800e382:	2b00      	cmp	r3, #0
 800e384:	d055      	beq.n	800e432 <UART_RxISR_8BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800e386:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e38a:	f003 0301 	and.w	r3, r3, #1
 800e38e:	2b00      	cmp	r3, #0
 800e390:	d011      	beq.n	800e3b6 <UART_RxISR_8BIT_FIFOEN+0xca>
 800e392:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e396:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e39a:	2b00      	cmp	r3, #0
 800e39c:	d00b      	beq.n	800e3b6 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	681b      	ldr	r3, [r3, #0]
 800e3a2:	2201      	movs	r2, #1
 800e3a4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e3ac:	f043 0201 	orr.w	r2, r3, #1
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e3b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e3ba:	f003 0302 	and.w	r3, r3, #2
 800e3be:	2b00      	cmp	r3, #0
 800e3c0:	d011      	beq.n	800e3e6 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800e3c2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800e3c6:	f003 0301 	and.w	r3, r3, #1
 800e3ca:	2b00      	cmp	r3, #0
 800e3cc:	d00b      	beq.n	800e3e6 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	681b      	ldr	r3, [r3, #0]
 800e3d2:	2202      	movs	r2, #2
 800e3d4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e3dc:	f043 0204 	orr.w	r2, r3, #4
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e3e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e3ea:	f003 0304 	and.w	r3, r3, #4
 800e3ee:	2b00      	cmp	r3, #0
 800e3f0:	d011      	beq.n	800e416 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800e3f2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800e3f6:	f003 0301 	and.w	r3, r3, #1
 800e3fa:	2b00      	cmp	r3, #0
 800e3fc:	d00b      	beq.n	800e416 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	681b      	ldr	r3, [r3, #0]
 800e402:	2204      	movs	r2, #4
 800e404:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e40c:	f043 0202 	orr.w	r2, r3, #2
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e41c:	2b00      	cmp	r3, #0
 800e41e:	d008      	beq.n	800e432 <UART_RxISR_8BIT_FIFOEN+0x146>
        {
          /* Non Blocking error : transfer could go on.
          Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800e426:	6878      	ldr	r0, [r7, #4]
 800e428:	4798      	blx	r3
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	2200      	movs	r2, #0
 800e42e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800e438:	b29b      	uxth	r3, r3
 800e43a:	2b00      	cmp	r3, #0
 800e43c:	f040 80a7 	bne.w	800e58e <UART_RxISR_8BIT_FIFOEN+0x2a2>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	681b      	ldr	r3, [r3, #0]
 800e444:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e446:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800e448:	e853 3f00 	ldrex	r3, [r3]
 800e44c:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 800e44e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e450:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e454:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	681b      	ldr	r3, [r3, #0]
 800e45c:	461a      	mov	r2, r3
 800e45e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800e462:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800e464:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e466:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800e468:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800e46a:	e841 2300 	strex	r3, r2, [r1]
 800e46e:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 800e470:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800e472:	2b00      	cmp	r3, #0
 800e474:	d1e4      	bne.n	800e440 <UART_RxISR_8BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	681b      	ldr	r3, [r3, #0]
 800e47a:	3308      	adds	r3, #8
 800e47c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e47e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e480:	e853 3f00 	ldrex	r3, [r3]
 800e484:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800e486:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e488:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800e48c:	f023 0301 	bic.w	r3, r3, #1
 800e490:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	681b      	ldr	r3, [r3, #0]
 800e498:	3308      	adds	r3, #8
 800e49a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800e49e:	66ba      	str	r2, [r7, #104]	@ 0x68
 800e4a0:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e4a2:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800e4a4:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800e4a6:	e841 2300 	strex	r3, r2, [r1]
 800e4aa:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800e4ac:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e4ae:	2b00      	cmp	r3, #0
 800e4b0:	d1e1      	bne.n	800e476 <UART_RxISR_8BIT_FIFOEN+0x18a>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	2220      	movs	r2, #32
 800e4b6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	2200      	movs	r2, #0
 800e4be:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	2200      	movs	r2, #0
 800e4c4:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	681b      	ldr	r3, [r3, #0]
 800e4ca:	4a62      	ldr	r2, [pc, #392]	@ (800e654 <UART_RxISR_8BIT_FIFOEN+0x368>)
 800e4cc:	4293      	cmp	r3, r2
 800e4ce:	d021      	beq.n	800e514 <UART_RxISR_8BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	681b      	ldr	r3, [r3, #0]
 800e4d4:	685b      	ldr	r3, [r3, #4]
 800e4d6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800e4da:	2b00      	cmp	r3, #0
 800e4dc:	d01a      	beq.n	800e514 <UART_RxISR_8BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	681b      	ldr	r3, [r3, #0]
 800e4e2:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e4e4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e4e6:	e853 3f00 	ldrex	r3, [r3]
 800e4ea:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800e4ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e4ee:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800e4f2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	681b      	ldr	r3, [r3, #0]
 800e4fa:	461a      	mov	r2, r3
 800e4fc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800e500:	657b      	str	r3, [r7, #84]	@ 0x54
 800e502:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e504:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800e506:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800e508:	e841 2300 	strex	r3, r2, [r1]
 800e50c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800e50e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e510:	2b00      	cmp	r3, #0
 800e512:	d1e4      	bne.n	800e4de <UART_RxISR_8BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e518:	2b01      	cmp	r3, #1
 800e51a:	d132      	bne.n	800e582 <UART_RxISR_8BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	2200      	movs	r2, #0
 800e520:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	681b      	ldr	r3, [r3, #0]
 800e526:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e528:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e52a:	e853 3f00 	ldrex	r3, [r3]
 800e52e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800e530:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e532:	f023 0310 	bic.w	r3, r3, #16
 800e536:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	681b      	ldr	r3, [r3, #0]
 800e53e:	461a      	mov	r2, r3
 800e540:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800e544:	643b      	str	r3, [r7, #64]	@ 0x40
 800e546:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e548:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800e54a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800e54c:	e841 2300 	strex	r3, r2, [r1]
 800e550:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800e552:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e554:	2b00      	cmp	r3, #0
 800e556:	d1e4      	bne.n	800e522 <UART_RxISR_8BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	681b      	ldr	r3, [r3, #0]
 800e55c:	69db      	ldr	r3, [r3, #28]
 800e55e:	f003 0310 	and.w	r3, r3, #16
 800e562:	2b10      	cmp	r3, #16
 800e564:	d103      	bne.n	800e56e <UART_RxISR_8BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e566:	687b      	ldr	r3, [r7, #4]
 800e568:	681b      	ldr	r3, [r3, #0]
 800e56a:	2210      	movs	r2, #16
 800e56c:	621a      	str	r2, [r3, #32]
          }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800e574:	687a      	ldr	r2, [r7, #4]
 800e576:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800e57a:	4611      	mov	r1, r2
 800e57c:	6878      	ldr	r0, [r7, #4]
 800e57e:	4798      	blx	r3
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 800e580:	e010      	b.n	800e5a4 <UART_RxISR_8BIT_FIFOEN+0x2b8>
          huart->RxCpltCallback(huart);
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800e588:	6878      	ldr	r0, [r7, #4]
 800e58a:	4798      	blx	r3
        break;
 800e58c:	e00a      	b.n	800e5a4 <UART_RxISR_8BIT_FIFOEN+0x2b8>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800e58e:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800e592:	2b00      	cmp	r3, #0
 800e594:	d006      	beq.n	800e5a4 <UART_RxISR_8BIT_FIFOEN+0x2b8>
 800e596:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e59a:	f003 0320 	and.w	r3, r3, #32
 800e59e:	2b00      	cmp	r3, #0
 800e5a0:	f47f aec8 	bne.w	800e334 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800e5aa:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800e5ae:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800e5b2:	2b00      	cmp	r3, #0
 800e5b4:	d049      	beq.n	800e64a <UART_RxISR_8BIT_FIFOEN+0x35e>
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800e5bc:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800e5c0:	429a      	cmp	r2, r3
 800e5c2:	d242      	bcs.n	800e64a <UART_RxISR_8BIT_FIFOEN+0x35e>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	681b      	ldr	r3, [r3, #0]
 800e5c8:	3308      	adds	r3, #8
 800e5ca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e5cc:	6a3b      	ldr	r3, [r7, #32]
 800e5ce:	e853 3f00 	ldrex	r3, [r3]
 800e5d2:	61fb      	str	r3, [r7, #28]
   return(result);
 800e5d4:	69fb      	ldr	r3, [r7, #28]
 800e5d6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800e5da:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	681b      	ldr	r3, [r3, #0]
 800e5e2:	3308      	adds	r3, #8
 800e5e4:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800e5e8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800e5ea:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e5ec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e5ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e5f0:	e841 2300 	strex	r3, r2, [r1]
 800e5f4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800e5f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e5f8:	2b00      	cmp	r3, #0
 800e5fa:	d1e3      	bne.n	800e5c4 <UART_RxISR_8BIT_FIFOEN+0x2d8>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	4a16      	ldr	r2, [pc, #88]	@ (800e658 <UART_RxISR_8BIT_FIFOEN+0x36c>)
 800e600:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	681b      	ldr	r3, [r3, #0]
 800e606:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e608:	68fb      	ldr	r3, [r7, #12]
 800e60a:	e853 3f00 	ldrex	r3, [r3]
 800e60e:	60bb      	str	r3, [r7, #8]
   return(result);
 800e610:	68bb      	ldr	r3, [r7, #8]
 800e612:	f043 0320 	orr.w	r3, r3, #32
 800e616:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	681b      	ldr	r3, [r3, #0]
 800e61e:	461a      	mov	r2, r3
 800e620:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800e624:	61bb      	str	r3, [r7, #24]
 800e626:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e628:	6979      	ldr	r1, [r7, #20]
 800e62a:	69ba      	ldr	r2, [r7, #24]
 800e62c:	e841 2300 	strex	r3, r2, [r1]
 800e630:	613b      	str	r3, [r7, #16]
   return(result);
 800e632:	693b      	ldr	r3, [r7, #16]
 800e634:	2b00      	cmp	r3, #0
 800e636:	d1e4      	bne.n	800e602 <UART_RxISR_8BIT_FIFOEN+0x316>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800e638:	e007      	b.n	800e64a <UART_RxISR_8BIT_FIFOEN+0x35e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	681b      	ldr	r3, [r3, #0]
 800e63e:	699a      	ldr	r2, [r3, #24]
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	681b      	ldr	r3, [r3, #0]
 800e644:	f042 0208 	orr.w	r2, r2, #8
 800e648:	619a      	str	r2, [r3, #24]
}
 800e64a:	bf00      	nop
 800e64c:	37b0      	adds	r7, #176	@ 0xb0
 800e64e:	46bd      	mov	sp, r7
 800e650:	bd80      	pop	{r7, pc}
 800e652:	bf00      	nop
 800e654:	40008000 	.word	0x40008000
 800e658:	0800df6d 	.word	0x0800df6d

0800e65c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800e65c:	b580      	push	{r7, lr}
 800e65e:	b0ae      	sub	sp, #184	@ 0xb8
 800e660:	af00      	add	r7, sp, #0
 800e662:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800e66a:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	681b      	ldr	r3, [r3, #0]
 800e672:	69db      	ldr	r3, [r3, #28]
 800e674:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800e678:	687b      	ldr	r3, [r7, #4]
 800e67a:	681b      	ldr	r3, [r3, #0]
 800e67c:	681b      	ldr	r3, [r3, #0]
 800e67e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	681b      	ldr	r3, [r3, #0]
 800e686:	689b      	ldr	r3, [r3, #8]
 800e688:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e692:	2b22      	cmp	r3, #34	@ 0x22
 800e694:	f040 818d 	bne.w	800e9b2 <UART_RxISR_16BIT_FIFOEN+0x356>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800e69e:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800e6a2:	e130      	b.n	800e906 <UART_RxISR_16BIT_FIFOEN+0x2aa>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	681b      	ldr	r3, [r3, #0]
 800e6a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e6aa:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e6b2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800e6b6:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800e6ba:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800e6be:	4013      	ands	r3, r2
 800e6c0:	b29a      	uxth	r2, r3
 800e6c2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800e6c6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e6cc:	1c9a      	adds	r2, r3, #2
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800e6d8:	b29b      	uxth	r3, r3
 800e6da:	3b01      	subs	r3, #1
 800e6dc:	b29a      	uxth	r2, r3
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	681b      	ldr	r3, [r3, #0]
 800e6e8:	69db      	ldr	r3, [r3, #28]
 800e6ea:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800e6ee:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800e6f2:	f003 0307 	and.w	r3, r3, #7
 800e6f6:	2b00      	cmp	r3, #0
 800e6f8:	d055      	beq.n	800e7a6 <UART_RxISR_16BIT_FIFOEN+0x14a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800e6fa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800e6fe:	f003 0301 	and.w	r3, r3, #1
 800e702:	2b00      	cmp	r3, #0
 800e704:	d011      	beq.n	800e72a <UART_RxISR_16BIT_FIFOEN+0xce>
 800e706:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e70a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e70e:	2b00      	cmp	r3, #0
 800e710:	d00b      	beq.n	800e72a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	681b      	ldr	r3, [r3, #0]
 800e716:	2201      	movs	r2, #1
 800e718:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e720:	f043 0201 	orr.w	r2, r3, #1
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e72a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800e72e:	f003 0302 	and.w	r3, r3, #2
 800e732:	2b00      	cmp	r3, #0
 800e734:	d011      	beq.n	800e75a <UART_RxISR_16BIT_FIFOEN+0xfe>
 800e736:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800e73a:	f003 0301 	and.w	r3, r3, #1
 800e73e:	2b00      	cmp	r3, #0
 800e740:	d00b      	beq.n	800e75a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800e742:	687b      	ldr	r3, [r7, #4]
 800e744:	681b      	ldr	r3, [r3, #0]
 800e746:	2202      	movs	r2, #2
 800e748:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e74a:	687b      	ldr	r3, [r7, #4]
 800e74c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e750:	f043 0204 	orr.w	r2, r3, #4
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e75a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800e75e:	f003 0304 	and.w	r3, r3, #4
 800e762:	2b00      	cmp	r3, #0
 800e764:	d011      	beq.n	800e78a <UART_RxISR_16BIT_FIFOEN+0x12e>
 800e766:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800e76a:	f003 0301 	and.w	r3, r3, #1
 800e76e:	2b00      	cmp	r3, #0
 800e770:	d00b      	beq.n	800e78a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	681b      	ldr	r3, [r3, #0]
 800e776:	2204      	movs	r2, #4
 800e778:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e780:	f043 0202 	orr.w	r2, r3, #2
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e78a:	687b      	ldr	r3, [r7, #4]
 800e78c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e790:	2b00      	cmp	r3, #0
 800e792:	d008      	beq.n	800e7a6 <UART_RxISR_16BIT_FIFOEN+0x14a>
        {
          /* Non Blocking error : transfer could go on.
          Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800e79a:	6878      	ldr	r0, [r7, #4]
 800e79c:	4798      	blx	r3
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e79e:	687b      	ldr	r3, [r7, #4]
 800e7a0:	2200      	movs	r2, #0
 800e7a2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800e7a6:	687b      	ldr	r3, [r7, #4]
 800e7a8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800e7ac:	b29b      	uxth	r3, r3
 800e7ae:	2b00      	cmp	r3, #0
 800e7b0:	f040 80a9 	bne.w	800e906 <UART_RxISR_16BIT_FIFOEN+0x2aa>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	681b      	ldr	r3, [r3, #0]
 800e7b8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e7ba:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800e7bc:	e853 3f00 	ldrex	r3, [r3]
 800e7c0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800e7c2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800e7c4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e7c8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	681b      	ldr	r3, [r3, #0]
 800e7d0:	461a      	mov	r2, r3
 800e7d2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800e7d6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800e7da:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e7dc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800e7de:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800e7e2:	e841 2300 	strex	r3, r2, [r1]
 800e7e6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800e7e8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e7ea:	2b00      	cmp	r3, #0
 800e7ec:	d1e2      	bne.n	800e7b4 <UART_RxISR_16BIT_FIFOEN+0x158>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	681b      	ldr	r3, [r3, #0]
 800e7f2:	3308      	adds	r3, #8
 800e7f4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e7f6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e7f8:	e853 3f00 	ldrex	r3, [r3]
 800e7fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800e7fe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e800:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800e804:	f023 0301 	bic.w	r3, r3, #1
 800e808:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	681b      	ldr	r3, [r3, #0]
 800e810:	3308      	adds	r3, #8
 800e812:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800e816:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800e818:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e81a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800e81c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800e81e:	e841 2300 	strex	r3, r2, [r1]
 800e822:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800e824:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e826:	2b00      	cmp	r3, #0
 800e828:	d1e1      	bne.n	800e7ee <UART_RxISR_16BIT_FIFOEN+0x192>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	2220      	movs	r2, #32
 800e82e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	2200      	movs	r2, #0
 800e836:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	2200      	movs	r2, #0
 800e83c:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	681b      	ldr	r3, [r3, #0]
 800e842:	4a62      	ldr	r2, [pc, #392]	@ (800e9cc <UART_RxISR_16BIT_FIFOEN+0x370>)
 800e844:	4293      	cmp	r3, r2
 800e846:	d021      	beq.n	800e88c <UART_RxISR_16BIT_FIFOEN+0x230>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	681b      	ldr	r3, [r3, #0]
 800e84c:	685b      	ldr	r3, [r3, #4]
 800e84e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800e852:	2b00      	cmp	r3, #0
 800e854:	d01a      	beq.n	800e88c <UART_RxISR_16BIT_FIFOEN+0x230>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	681b      	ldr	r3, [r3, #0]
 800e85a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e85c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e85e:	e853 3f00 	ldrex	r3, [r3]
 800e862:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800e864:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e866:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800e86a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	681b      	ldr	r3, [r3, #0]
 800e872:	461a      	mov	r2, r3
 800e874:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800e878:	65bb      	str	r3, [r7, #88]	@ 0x58
 800e87a:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e87c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800e87e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800e880:	e841 2300 	strex	r3, r2, [r1]
 800e884:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800e886:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e888:	2b00      	cmp	r3, #0
 800e88a:	d1e4      	bne.n	800e856 <UART_RxISR_16BIT_FIFOEN+0x1fa>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e890:	2b01      	cmp	r3, #1
 800e892:	d132      	bne.n	800e8fa <UART_RxISR_16BIT_FIFOEN+0x29e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	2200      	movs	r2, #0
 800e898:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	681b      	ldr	r3, [r3, #0]
 800e89e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e8a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e8a2:	e853 3f00 	ldrex	r3, [r3]
 800e8a6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800e8a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e8aa:	f023 0310 	bic.w	r3, r3, #16
 800e8ae:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	681b      	ldr	r3, [r3, #0]
 800e8b6:	461a      	mov	r2, r3
 800e8b8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800e8bc:	647b      	str	r3, [r7, #68]	@ 0x44
 800e8be:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e8c0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800e8c2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e8c4:	e841 2300 	strex	r3, r2, [r1]
 800e8c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800e8ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e8cc:	2b00      	cmp	r3, #0
 800e8ce:	d1e4      	bne.n	800e89a <UART_RxISR_16BIT_FIFOEN+0x23e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	681b      	ldr	r3, [r3, #0]
 800e8d4:	69db      	ldr	r3, [r3, #28]
 800e8d6:	f003 0310 	and.w	r3, r3, #16
 800e8da:	2b10      	cmp	r3, #16
 800e8dc:	d103      	bne.n	800e8e6 <UART_RxISR_16BIT_FIFOEN+0x28a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e8de:	687b      	ldr	r3, [r7, #4]
 800e8e0:	681b      	ldr	r3, [r3, #0]
 800e8e2:	2210      	movs	r2, #16
 800e8e4:	621a      	str	r2, [r3, #32]
          }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800e8ec:	687a      	ldr	r2, [r7, #4]
 800e8ee:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800e8f2:	4611      	mov	r1, r2
 800e8f4:	6878      	ldr	r0, [r7, #4]
 800e8f6:	4798      	blx	r3
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 800e8f8:	e010      	b.n	800e91c <UART_RxISR_16BIT_FIFOEN+0x2c0>
          huart->RxCpltCallback(huart);
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800e900:	6878      	ldr	r0, [r7, #4]
 800e902:	4798      	blx	r3
        break;
 800e904:	e00a      	b.n	800e91c <UART_RxISR_16BIT_FIFOEN+0x2c0>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800e906:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800e90a:	2b00      	cmp	r3, #0
 800e90c:	d006      	beq.n	800e91c <UART_RxISR_16BIT_FIFOEN+0x2c0>
 800e90e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800e912:	f003 0320 	and.w	r3, r3, #32
 800e916:	2b00      	cmp	r3, #0
 800e918:	f47f aec4 	bne.w	800e6a4 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800e922:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800e926:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800e92a:	2b00      	cmp	r3, #0
 800e92c:	d049      	beq.n	800e9c2 <UART_RxISR_16BIT_FIFOEN+0x366>
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800e934:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800e938:	429a      	cmp	r2, r3
 800e93a:	d242      	bcs.n	800e9c2 <UART_RxISR_16BIT_FIFOEN+0x366>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	681b      	ldr	r3, [r3, #0]
 800e940:	3308      	adds	r3, #8
 800e942:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e944:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e946:	e853 3f00 	ldrex	r3, [r3]
 800e94a:	623b      	str	r3, [r7, #32]
   return(result);
 800e94c:	6a3b      	ldr	r3, [r7, #32]
 800e94e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800e952:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	681b      	ldr	r3, [r3, #0]
 800e95a:	3308      	adds	r3, #8
 800e95c:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800e960:	633a      	str	r2, [r7, #48]	@ 0x30
 800e962:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e964:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e966:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e968:	e841 2300 	strex	r3, r2, [r1]
 800e96c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800e96e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e970:	2b00      	cmp	r3, #0
 800e972:	d1e3      	bne.n	800e93c <UART_RxISR_16BIT_FIFOEN+0x2e0>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	4a16      	ldr	r2, [pc, #88]	@ (800e9d0 <UART_RxISR_16BIT_FIFOEN+0x374>)
 800e978:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	681b      	ldr	r3, [r3, #0]
 800e97e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e980:	693b      	ldr	r3, [r7, #16]
 800e982:	e853 3f00 	ldrex	r3, [r3]
 800e986:	60fb      	str	r3, [r7, #12]
   return(result);
 800e988:	68fb      	ldr	r3, [r7, #12]
 800e98a:	f043 0320 	orr.w	r3, r3, #32
 800e98e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	681b      	ldr	r3, [r3, #0]
 800e996:	461a      	mov	r2, r3
 800e998:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800e99c:	61fb      	str	r3, [r7, #28]
 800e99e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e9a0:	69b9      	ldr	r1, [r7, #24]
 800e9a2:	69fa      	ldr	r2, [r7, #28]
 800e9a4:	e841 2300 	strex	r3, r2, [r1]
 800e9a8:	617b      	str	r3, [r7, #20]
   return(result);
 800e9aa:	697b      	ldr	r3, [r7, #20]
 800e9ac:	2b00      	cmp	r3, #0
 800e9ae:	d1e4      	bne.n	800e97a <UART_RxISR_16BIT_FIFOEN+0x31e>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800e9b0:	e007      	b.n	800e9c2 <UART_RxISR_16BIT_FIFOEN+0x366>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	681b      	ldr	r3, [r3, #0]
 800e9b6:	699a      	ldr	r2, [r3, #24]
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	681b      	ldr	r3, [r3, #0]
 800e9bc:	f042 0208 	orr.w	r2, r2, #8
 800e9c0:	619a      	str	r2, [r3, #24]
}
 800e9c2:	bf00      	nop
 800e9c4:	37b8      	adds	r7, #184	@ 0xb8
 800e9c6:	46bd      	mov	sp, r7
 800e9c8:	bd80      	pop	{r7, pc}
 800e9ca:	bf00      	nop
 800e9cc:	40008000 	.word	0x40008000
 800e9d0:	0800e12d 	.word	0x0800e12d

0800e9d4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800e9d4:	b480      	push	{r7}
 800e9d6:	b083      	sub	sp, #12
 800e9d8:	af00      	add	r7, sp, #0
 800e9da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800e9dc:	bf00      	nop
 800e9de:	370c      	adds	r7, #12
 800e9e0:	46bd      	mov	sp, r7
 800e9e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9e6:	4770      	bx	lr

0800e9e8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800e9e8:	b480      	push	{r7}
 800e9ea:	b083      	sub	sp, #12
 800e9ec:	af00      	add	r7, sp, #0
 800e9ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800e9f0:	bf00      	nop
 800e9f2:	370c      	adds	r7, #12
 800e9f4:	46bd      	mov	sp, r7
 800e9f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9fa:	4770      	bx	lr

0800e9fc <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800e9fc:	b480      	push	{r7}
 800e9fe:	b083      	sub	sp, #12
 800ea00:	af00      	add	r7, sp, #0
 800ea02:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800ea04:	bf00      	nop
 800ea06:	370c      	adds	r7, #12
 800ea08:	46bd      	mov	sp, r7
 800ea0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea0e:	4770      	bx	lr

0800ea10 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ea10:	b480      	push	{r7}
 800ea12:	b085      	sub	sp, #20
 800ea14:	af00      	add	r7, sp, #0
 800ea16:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ea1e:	2b01      	cmp	r3, #1
 800ea20:	d101      	bne.n	800ea26 <HAL_UARTEx_DisableFifoMode+0x16>
 800ea22:	2302      	movs	r3, #2
 800ea24:	e027      	b.n	800ea76 <HAL_UARTEx_DisableFifoMode+0x66>
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	2201      	movs	r2, #1
 800ea2a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	2224      	movs	r2, #36	@ 0x24
 800ea32:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	681b      	ldr	r3, [r3, #0]
 800ea3a:	681b      	ldr	r3, [r3, #0]
 800ea3c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ea3e:	687b      	ldr	r3, [r7, #4]
 800ea40:	681b      	ldr	r3, [r3, #0]
 800ea42:	681a      	ldr	r2, [r3, #0]
 800ea44:	687b      	ldr	r3, [r7, #4]
 800ea46:	681b      	ldr	r3, [r3, #0]
 800ea48:	f022 0201 	bic.w	r2, r2, #1
 800ea4c:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ea4e:	68fb      	ldr	r3, [r7, #12]
 800ea50:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800ea54:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	2200      	movs	r2, #0
 800ea5a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	681b      	ldr	r3, [r3, #0]
 800ea60:	68fa      	ldr	r2, [r7, #12]
 800ea62:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	2220      	movs	r2, #32
 800ea68:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	2200      	movs	r2, #0
 800ea70:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ea74:	2300      	movs	r3, #0
}
 800ea76:	4618      	mov	r0, r3
 800ea78:	3714      	adds	r7, #20
 800ea7a:	46bd      	mov	sp, r7
 800ea7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea80:	4770      	bx	lr

0800ea82 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ea82:	b580      	push	{r7, lr}
 800ea84:	b084      	sub	sp, #16
 800ea86:	af00      	add	r7, sp, #0
 800ea88:	6078      	str	r0, [r7, #4]
 800ea8a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ea92:	2b01      	cmp	r3, #1
 800ea94:	d101      	bne.n	800ea9a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800ea96:	2302      	movs	r3, #2
 800ea98:	e02d      	b.n	800eaf6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	2201      	movs	r2, #1
 800ea9e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	2224      	movs	r2, #36	@ 0x24
 800eaa6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	681b      	ldr	r3, [r3, #0]
 800eaae:	681b      	ldr	r3, [r3, #0]
 800eab0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	681b      	ldr	r3, [r3, #0]
 800eab6:	681a      	ldr	r2, [r3, #0]
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	681b      	ldr	r3, [r3, #0]
 800eabc:	f022 0201 	bic.w	r2, r2, #1
 800eac0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	681b      	ldr	r3, [r3, #0]
 800eac6:	689b      	ldr	r3, [r3, #8]
 800eac8:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	681b      	ldr	r3, [r3, #0]
 800ead0:	683a      	ldr	r2, [r7, #0]
 800ead2:	430a      	orrs	r2, r1
 800ead4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ead6:	6878      	ldr	r0, [r7, #4]
 800ead8:	f000 f850 	bl	800eb7c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	681b      	ldr	r3, [r3, #0]
 800eae0:	68fa      	ldr	r2, [r7, #12]
 800eae2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	2220      	movs	r2, #32
 800eae8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	2200      	movs	r2, #0
 800eaf0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800eaf4:	2300      	movs	r3, #0
}
 800eaf6:	4618      	mov	r0, r3
 800eaf8:	3710      	adds	r7, #16
 800eafa:	46bd      	mov	sp, r7
 800eafc:	bd80      	pop	{r7, pc}

0800eafe <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800eafe:	b580      	push	{r7, lr}
 800eb00:	b084      	sub	sp, #16
 800eb02:	af00      	add	r7, sp, #0
 800eb04:	6078      	str	r0, [r7, #4]
 800eb06:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800eb0e:	2b01      	cmp	r3, #1
 800eb10:	d101      	bne.n	800eb16 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800eb12:	2302      	movs	r3, #2
 800eb14:	e02d      	b.n	800eb72 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	2201      	movs	r2, #1
 800eb1a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	2224      	movs	r2, #36	@ 0x24
 800eb22:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800eb26:	687b      	ldr	r3, [r7, #4]
 800eb28:	681b      	ldr	r3, [r3, #0]
 800eb2a:	681b      	ldr	r3, [r3, #0]
 800eb2c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	681b      	ldr	r3, [r3, #0]
 800eb32:	681a      	ldr	r2, [r3, #0]
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	681b      	ldr	r3, [r3, #0]
 800eb38:	f022 0201 	bic.w	r2, r2, #1
 800eb3c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	681b      	ldr	r3, [r3, #0]
 800eb42:	689b      	ldr	r3, [r3, #8]
 800eb44:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	681b      	ldr	r3, [r3, #0]
 800eb4c:	683a      	ldr	r2, [r7, #0]
 800eb4e:	430a      	orrs	r2, r1
 800eb50:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800eb52:	6878      	ldr	r0, [r7, #4]
 800eb54:	f000 f812 	bl	800eb7c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	681b      	ldr	r3, [r3, #0]
 800eb5c:	68fa      	ldr	r2, [r7, #12]
 800eb5e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	2220      	movs	r2, #32
 800eb64:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	2200      	movs	r2, #0
 800eb6c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800eb70:	2300      	movs	r3, #0
}
 800eb72:	4618      	mov	r0, r3
 800eb74:	3710      	adds	r7, #16
 800eb76:	46bd      	mov	sp, r7
 800eb78:	bd80      	pop	{r7, pc}
	...

0800eb7c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800eb7c:	b480      	push	{r7}
 800eb7e:	b085      	sub	sp, #20
 800eb80:	af00      	add	r7, sp, #0
 800eb82:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800eb88:	2b00      	cmp	r3, #0
 800eb8a:	d108      	bne.n	800eb9e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	2201      	movs	r2, #1
 800eb90:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	2201      	movs	r2, #1
 800eb98:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800eb9c:	e031      	b.n	800ec02 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800eb9e:	2308      	movs	r3, #8
 800eba0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800eba2:	2308      	movs	r3, #8
 800eba4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	681b      	ldr	r3, [r3, #0]
 800ebaa:	689b      	ldr	r3, [r3, #8]
 800ebac:	0e5b      	lsrs	r3, r3, #25
 800ebae:	b2db      	uxtb	r3, r3
 800ebb0:	f003 0307 	and.w	r3, r3, #7
 800ebb4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	681b      	ldr	r3, [r3, #0]
 800ebba:	689b      	ldr	r3, [r3, #8]
 800ebbc:	0f5b      	lsrs	r3, r3, #29
 800ebbe:	b2db      	uxtb	r3, r3
 800ebc0:	f003 0307 	and.w	r3, r3, #7
 800ebc4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ebc6:	7bbb      	ldrb	r3, [r7, #14]
 800ebc8:	7b3a      	ldrb	r2, [r7, #12]
 800ebca:	4911      	ldr	r1, [pc, #68]	@ (800ec10 <UARTEx_SetNbDataToProcess+0x94>)
 800ebcc:	5c8a      	ldrb	r2, [r1, r2]
 800ebce:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800ebd2:	7b3a      	ldrb	r2, [r7, #12]
 800ebd4:	490f      	ldr	r1, [pc, #60]	@ (800ec14 <UARTEx_SetNbDataToProcess+0x98>)
 800ebd6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ebd8:	fb93 f3f2 	sdiv	r3, r3, r2
 800ebdc:	b29a      	uxth	r2, r3
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ebe4:	7bfb      	ldrb	r3, [r7, #15]
 800ebe6:	7b7a      	ldrb	r2, [r7, #13]
 800ebe8:	4909      	ldr	r1, [pc, #36]	@ (800ec10 <UARTEx_SetNbDataToProcess+0x94>)
 800ebea:	5c8a      	ldrb	r2, [r1, r2]
 800ebec:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800ebf0:	7b7a      	ldrb	r2, [r7, #13]
 800ebf2:	4908      	ldr	r1, [pc, #32]	@ (800ec14 <UARTEx_SetNbDataToProcess+0x98>)
 800ebf4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ebf6:	fb93 f3f2 	sdiv	r3, r3, r2
 800ebfa:	b29a      	uxth	r2, r3
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800ec02:	bf00      	nop
 800ec04:	3714      	adds	r7, #20
 800ec06:	46bd      	mov	sp, r7
 800ec08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec0c:	4770      	bx	lr
 800ec0e:	bf00      	nop
 800ec10:	080113a8 	.word	0x080113a8
 800ec14:	080113b0 	.word	0x080113b0

0800ec18 <arm_pid_init_f32>:
 */

void arm_pid_init_f32(
  arm_pid_instance_f32 * S,
  int32_t resetStateFlag)
{
 800ec18:	b580      	push	{r7, lr}
 800ec1a:	b082      	sub	sp, #8
 800ec1c:	af00      	add	r7, sp, #0
 800ec1e:	6078      	str	r0, [r7, #4]
 800ec20:	6039      	str	r1, [r7, #0]
  /* Derived coefficient A0 */
  S->A0 = S->Kp + S->Ki + S->Kd;
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	ed93 7a06 	vldr	s14, [r3, #24]
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	edd3 7a07 	vldr	s15, [r3, #28]
 800ec2e:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	edd3 7a08 	vldr	s15, [r3, #32]
 800ec38:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	edc3 7a00 	vstr	s15, [r3]

  /* Derived coefficient A1 */
  S->A1 = (-S->Kp) - ((float32_t) 2.0f * S->Kd);
 800ec42:	687b      	ldr	r3, [r7, #4]
 800ec44:	edd3 7a06 	vldr	s15, [r3, #24]
 800ec48:	eeb1 7a67 	vneg.f32	s14, s15
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	edd3 7a08 	vldr	s15, [r3, #32]
 800ec52:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800ec56:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ec5a:	687b      	ldr	r3, [r7, #4]
 800ec5c:	edc3 7a01 	vstr	s15, [r3, #4]

  /* Derived coefficient A2 */
  S->A2 = S->Kd;
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	6a1a      	ldr	r2, [r3, #32]
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	609a      	str	r2, [r3, #8]

  /* Check whether state needs reset or not */
  if (resetStateFlag)
 800ec68:	683b      	ldr	r3, [r7, #0]
 800ec6a:	2b00      	cmp	r3, #0
 800ec6c:	d006      	beq.n	800ec7c <arm_pid_init_f32+0x64>
  {
    /* Reset state to zero, The size will be always 3 samples */
    memset(S->state, 0, 3U * sizeof(float32_t));
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	330c      	adds	r3, #12
 800ec72:	220c      	movs	r2, #12
 800ec74:	2100      	movs	r1, #0
 800ec76:	4618      	mov	r0, r3
 800ec78:	f000 fcc4 	bl	800f604 <memset>
  }

}
 800ec7c:	bf00      	nop
 800ec7e:	3708      	adds	r7, #8
 800ec80:	46bd      	mov	sp, r7
 800ec82:	bd80      	pop	{r7, pc}

0800ec84 <arm_mat_add_f32>:
#else
arm_status arm_mat_add_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 800ec84:	b480      	push	{r7}
 800ec86:	b08b      	sub	sp, #44	@ 0x2c
 800ec88:	af00      	add	r7, sp, #0
 800ec8a:	60f8      	str	r0, [r7, #12]
 800ec8c:	60b9      	str	r1, [r7, #8]
 800ec8e:	607a      	str	r2, [r7, #4]
  float32_t *pInA = pSrcA->pData;                /* input data matrix pointer A */
 800ec90:	68fb      	ldr	r3, [r7, #12]
 800ec92:	685b      	ldr	r3, [r3, #4]
 800ec94:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pInB = pSrcB->pData;                /* input data matrix pointer B */
 800ec96:	68bb      	ldr	r3, [r7, #8]
 800ec98:	685b      	ldr	r3, [r3, #4]
 800ec9a:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	685b      	ldr	r3, [r3, #4]
 800eca0:	61fb      	str	r3, [r7, #28]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrcA->numRows * pSrcA->numCols;
 800eca2:	68fb      	ldr	r3, [r7, #12]
 800eca4:	881b      	ldrh	r3, [r3, #0]
 800eca6:	461a      	mov	r2, r3
 800eca8:	68fb      	ldr	r3, [r7, #12]
 800ecaa:	885b      	ldrh	r3, [r3, #2]
 800ecac:	fb02 f303 	mul.w	r3, r2, r3
 800ecb0:	617b      	str	r3, [r7, #20]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 800ecb2:	697b      	ldr	r3, [r7, #20]
 800ecb4:	61bb      	str	r3, [r7, #24]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 800ecb6:	e013      	b.n	800ece0 <arm_mat_add_f32+0x5c>
    {
      /* C(m,n) = A(m,n) + B(m,n) */

      /* Add and store result in destination buffer. */
      *pOut++ = *pInA++ + *pInB++;
 800ecb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ecba:	1d1a      	adds	r2, r3, #4
 800ecbc:	627a      	str	r2, [r7, #36]	@ 0x24
 800ecbe:	ed93 7a00 	vldr	s14, [r3]
 800ecc2:	6a3b      	ldr	r3, [r7, #32]
 800ecc4:	1d1a      	adds	r2, r3, #4
 800ecc6:	623a      	str	r2, [r7, #32]
 800ecc8:	edd3 7a00 	vldr	s15, [r3]
 800eccc:	69fb      	ldr	r3, [r7, #28]
 800ecce:	1d1a      	adds	r2, r3, #4
 800ecd0:	61fa      	str	r2, [r7, #28]
 800ecd2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ecd6:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 800ecda:	69bb      	ldr	r3, [r7, #24]
 800ecdc:	3b01      	subs	r3, #1
 800ecde:	61bb      	str	r3, [r7, #24]
    while (blkCnt > 0U)
 800ece0:	69bb      	ldr	r3, [r7, #24]
 800ece2:	2b00      	cmp	r3, #0
 800ece4:	d1e8      	bne.n	800ecb8 <arm_mat_add_f32+0x34>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800ece6:	2300      	movs	r3, #0
 800ece8:	74fb      	strb	r3, [r7, #19]
  }

  /* Return to application */
  return (status);
 800ecea:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800ecee:	4618      	mov	r0, r3
 800ecf0:	372c      	adds	r7, #44	@ 0x2c
 800ecf2:	46bd      	mov	sp, r7
 800ecf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecf8:	4770      	bx	lr

0800ecfa <arm_mat_init_f32>:
void arm_mat_init_f32(
  arm_matrix_instance_f32 * S,
  uint16_t nRows,
  uint16_t nColumns,
  float32_t * pData)
{
 800ecfa:	b480      	push	{r7}
 800ecfc:	b085      	sub	sp, #20
 800ecfe:	af00      	add	r7, sp, #0
 800ed00:	60f8      	str	r0, [r7, #12]
 800ed02:	607b      	str	r3, [r7, #4]
 800ed04:	460b      	mov	r3, r1
 800ed06:	817b      	strh	r3, [r7, #10]
 800ed08:	4613      	mov	r3, r2
 800ed0a:	813b      	strh	r3, [r7, #8]
  /* Assign Number of Rows */
  S->numRows = nRows;
 800ed0c:	68fb      	ldr	r3, [r7, #12]
 800ed0e:	897a      	ldrh	r2, [r7, #10]
 800ed10:	801a      	strh	r2, [r3, #0]

  /* Assign Number of Columns */
  S->numCols = nColumns;
 800ed12:	68fb      	ldr	r3, [r7, #12]
 800ed14:	893a      	ldrh	r2, [r7, #8]
 800ed16:	805a      	strh	r2, [r3, #2]

  /* Assign Data pointer */
  S->pData = pData;
 800ed18:	68fb      	ldr	r3, [r7, #12]
 800ed1a:	687a      	ldr	r2, [r7, #4]
 800ed1c:	605a      	str	r2, [r3, #4]
}
 800ed1e:	bf00      	nop
 800ed20:	3714      	adds	r7, #20
 800ed22:	46bd      	mov	sp, r7
 800ed24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed28:	4770      	bx	lr

0800ed2a <arm_mat_inverse_f32>:
                   - \ref ARM_MATH_SINGULAR      : Input matrix is found to be singular (non-invertible)
 */
arm_status arm_mat_inverse_f32(
  const arm_matrix_instance_f32 * pSrc,
        arm_matrix_instance_f32 * pDst)
{
 800ed2a:	b480      	push	{r7}
 800ed2c:	b0bb      	sub	sp, #236	@ 0xec
 800ed2e:	af00      	add	r7, sp, #0
 800ed30:	6078      	str	r0, [r7, #4]
 800ed32:	6039      	str	r1, [r7, #0]
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
 800ed34:	687b      	ldr	r3, [r7, #4]
 800ed36:	685b      	ldr	r3, [r3, #4]
 800ed38:	667b      	str	r3, [r7, #100]	@ 0x64
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 800ed3a:	683b      	ldr	r3, [r7, #0]
 800ed3c:	685b      	ldr	r3, [r3, #4]
 800ed3e:	663b      	str	r3, [r7, #96]	@ 0x60
  
  float32_t *pTmp;
  uint32_t numRows = pSrc->numRows;              /* Number of rows in the matrix  */
 800ed40:	687b      	ldr	r3, [r7, #4]
 800ed42:	881b      	ldrh	r3, [r3, #0]
 800ed44:	65fb      	str	r3, [r7, #92]	@ 0x5c
  uint32_t numCols = pSrc->numCols;              /* Number of Cols in the matrix  */
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	885b      	ldrh	r3, [r3, #2]
 800ed4a:	65bb      	str	r3, [r7, #88]	@ 0x58


  float32_t pivot = 0.0f, newPivot=0.0f;                /* Temporary input values  */
 800ed4c:	f04f 0300 	mov.w	r3, #0
 800ed50:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800ed54:	f04f 0300 	mov.w	r3, #0
 800ed58:	657b      	str	r3, [r7, #84]	@ 0x54
  uint32_t selectedRow,pivotRow,i, rowNb, rowCnt, flag = 0U, j,column;      /* loop counters */
 800ed5a:	2300      	movs	r3, #0
 800ed5c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
     *      8. Now an identical matrix is formed to the left of the bar(input matrix, pSrc).
     *         Therefore, the matrix to the right of the bar is our solution(pDst matrix, pDst).
     *----------------------------------------------------------------------------------------------------------------*/

    /* Working pointer for destination matrix */
    pTmp = pOut;
 800ed60:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ed62:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4

    /* Loop over the number of rows */
    rowCnt = numRows;
 800ed66:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ed68:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0

    /* Making the destination matrix as identity matrix */
    while (rowCnt > 0U)
 800ed6c:	e03b      	b.n	800ede6 <arm_mat_inverse_f32+0xbc>
    {
      /* Writing all zeroes in lower triangle of the destination matrix */
      j = numRows - rowCnt;
 800ed6e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800ed70:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800ed74:	1ad3      	subs	r3, r2, r3
 800ed76:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      while (j > 0U)
 800ed7a:	e00c      	b.n	800ed96 <arm_mat_inverse_f32+0x6c>
      {
        *pTmp++ = 0.0f;
 800ed7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ed80:	1d1a      	adds	r2, r3, #4
 800ed82:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 800ed86:	f04f 0200 	mov.w	r2, #0
 800ed8a:	601a      	str	r2, [r3, #0]
        j--;
 800ed8c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800ed90:	3b01      	subs	r3, #1
 800ed92:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      while (j > 0U)
 800ed96:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800ed9a:	2b00      	cmp	r3, #0
 800ed9c:	d1ee      	bne.n	800ed7c <arm_mat_inverse_f32+0x52>
      }

      /* Writing all ones in the diagonal of the destination matrix */
      *pTmp++ = 1.0f;
 800ed9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800eda2:	1d1a      	adds	r2, r3, #4
 800eda4:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 800eda8:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800edac:	601a      	str	r2, [r3, #0]

      /* Writing all zeroes in upper triangle of the destination matrix */
      j = rowCnt - 1U;
 800edae:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800edb2:	3b01      	subs	r3, #1
 800edb4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      while (j > 0U)
 800edb8:	e00c      	b.n	800edd4 <arm_mat_inverse_f32+0xaa>
      {
        *pTmp++ = 0.0f;
 800edba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800edbe:	1d1a      	adds	r2, r3, #4
 800edc0:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 800edc4:	f04f 0200 	mov.w	r2, #0
 800edc8:	601a      	str	r2, [r3, #0]
        j--;
 800edca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800edce:	3b01      	subs	r3, #1
 800edd0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      while (j > 0U)
 800edd4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800edd8:	2b00      	cmp	r3, #0
 800edda:	d1ee      	bne.n	800edba <arm_mat_inverse_f32+0x90>
      }

      /* Decrement loop counter */
      rowCnt--;
 800eddc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800ede0:	3b01      	subs	r3, #1
 800ede2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    while (rowCnt > 0U)
 800ede6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800edea:	2b00      	cmp	r3, #0
 800edec:	d1bf      	bne.n	800ed6e <arm_mat_inverse_f32+0x44>

    /* Loop over the number of columns of the input matrix.
       All the elements in each column are processed by the row operations */

    /* Index modifier to navigate through the columns */
    for(column = 0U; column < numCols; column++)
 800edee:	2300      	movs	r3, #0
 800edf0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800edf4:	e2c7      	b.n	800f386 <arm_mat_inverse_f32+0x65c>
      /* Check if the pivot element is zero..
       * If it is zero then interchange the row with non zero row below.
       * If there is no non zero element to replace in the rows below,
       * then the matrix is Singular. */

      pivotRow = column;
 800edf6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800edfa:	653b      	str	r3, [r7, #80]	@ 0x50

      /* Temporary variable to hold the pivot value */
      pTmp = ELEM(pSrc,column,column) ;
 800edfc:	687b      	ldr	r3, [r7, #4]
 800edfe:	685a      	ldr	r2, [r3, #4]
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	885b      	ldrh	r3, [r3, #2]
 800ee04:	3301      	adds	r3, #1
 800ee06:	f8d7 10c4 	ldr.w	r1, [r7, #196]	@ 0xc4
 800ee0a:	fb01 f303 	mul.w	r3, r1, r3
 800ee0e:	009b      	lsls	r3, r3, #2
 800ee10:	4413      	add	r3, r2
 800ee12:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
      pivot = *pTmp;
 800ee16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ee1a:	681b      	ldr	r3, [r3, #0]
 800ee1c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
      selectedRow = column;
 800ee20:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800ee24:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

      /* Find maximum pivot in column */
      
        /* Loop over the number rows present below */

      for (rowNb = column+1; rowNb < numRows; rowNb++)
 800ee28:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800ee2c:	3301      	adds	r3, #1
 800ee2e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800ee32:	e02c      	b.n	800ee8e <arm_mat_inverse_f32+0x164>
      {
          /* Update the input and destination pointers */
          pTmp = ELEM(pSrc,rowNb,column);
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	685a      	ldr	r2, [r3, #4]
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	885b      	ldrh	r3, [r3, #2]
 800ee3c:	4619      	mov	r1, r3
 800ee3e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800ee42:	fb03 f101 	mul.w	r1, r3, r1
 800ee46:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800ee4a:	440b      	add	r3, r1
 800ee4c:	009b      	lsls	r3, r3, #2
 800ee4e:	4413      	add	r3, r2
 800ee50:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
          newPivot = *pTmp;
 800ee54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ee58:	681b      	ldr	r3, [r3, #0]
 800ee5a:	657b      	str	r3, [r7, #84]	@ 0x54
          if (fabsf(newPivot) > fabsf(pivot))
 800ee5c:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 800ee60:	eeb0 7ae7 	vabs.f32	s14, s15
 800ee64:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800ee68:	eef0 7ae7 	vabs.f32	s15, s15
 800ee6c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ee70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee74:	dd06      	ble.n	800ee84 <arm_mat_inverse_f32+0x15a>
          {
            selectedRow = rowNb; 
 800ee76:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800ee7a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
            pivot = newPivot;
 800ee7e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ee80:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
      for (rowNb = column+1; rowNb < numRows; rowNb++)
 800ee84:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800ee88:	3301      	adds	r3, #1
 800ee8a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800ee8e:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800ee92:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ee94:	429a      	cmp	r2, r3
 800ee96:	d3cd      	bcc.n	800ee34 <arm_mat_inverse_f32+0x10a>
          }
      }
        
      /* Check if there is a non zero pivot element to
       * replace in the rows below */
      if ((pivot != 0.0f) && (selectedRow != column))
 800ee98:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800ee9c:	eef5 7a40 	vcmp.f32	s15, #0.0
 800eea0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eea4:	f000 809b 	beq.w	800efde <arm_mat_inverse_f32+0x2b4>
 800eea8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800eeac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800eeb0:	429a      	cmp	r2, r3
 800eeb2:	f000 8094 	beq.w	800efde <arm_mat_inverse_f32+0x2b4>
      {
            
            SWAP_ROWS_F32(pSrc,column, pivotRow,selectedRow);
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	685b      	ldr	r3, [r3, #4]
 800eeba:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	685b      	ldr	r3, [r3, #4]
 800eec2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800eec6:	687b      	ldr	r3, [r7, #4]
 800eec8:	885b      	ldrh	r3, [r3, #2]
 800eeca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800eecc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800eece:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800eed2:	1ad3      	subs	r3, r2, r3
 800eed4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800eed6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800eed8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800eeda:	fb03 f202 	mul.w	r2, r3, r2
 800eede:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800eee2:	4413      	add	r3, r2
 800eee4:	009b      	lsls	r3, r3, #2
 800eee6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800eeea:	4413      	add	r3, r2
 800eeec:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800eef0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800eef2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800eef6:	fb03 f202 	mul.w	r2, r3, r2
 800eefa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800eefe:	4413      	add	r3, r2
 800ef00:	009b      	lsls	r3, r3, #2
 800ef02:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800ef06:	4413      	add	r3, r2
 800ef08:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800ef0c:	2300      	movs	r3, #0
 800ef0e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800ef12:	e018      	b.n	800ef46 <arm_mat_inverse_f32+0x21c>
 800ef14:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800ef18:	681b      	ldr	r3, [r3, #0]
 800ef1a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800ef1c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800ef20:	1d1a      	adds	r2, r3, #4
 800ef22:	f8c7 20b8 	str.w	r2, [r7, #184]	@ 0xb8
 800ef26:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800ef2a:	6812      	ldr	r2, [r2, #0]
 800ef2c:	601a      	str	r2, [r3, #0]
 800ef2e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800ef32:	1d1a      	adds	r2, r3, #4
 800ef34:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 800ef38:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ef3a:	601a      	str	r2, [r3, #0]
 800ef3c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800ef40:	3301      	adds	r3, #1
 800ef42:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800ef46:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 800ef4a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ef4c:	429a      	cmp	r2, r3
 800ef4e:	dbe1      	blt.n	800ef14 <arm_mat_inverse_f32+0x1ea>
            SWAP_ROWS_F32(pDst,0, pivotRow,selectedRow);
 800ef50:	683b      	ldr	r3, [r7, #0]
 800ef52:	685b      	ldr	r3, [r3, #4]
 800ef54:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800ef58:	683b      	ldr	r3, [r7, #0]
 800ef5a:	685b      	ldr	r3, [r3, #4]
 800ef5c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800ef60:	683b      	ldr	r3, [r7, #0]
 800ef62:	885b      	ldrh	r3, [r3, #2]
 800ef64:	647b      	str	r3, [r7, #68]	@ 0x44
 800ef66:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ef68:	643b      	str	r3, [r7, #64]	@ 0x40
 800ef6a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ef6c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800ef6e:	fb02 f303 	mul.w	r3, r2, r3
 800ef72:	009b      	lsls	r3, r3, #2
 800ef74:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800ef78:	4413      	add	r3, r2
 800ef7a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800ef7e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ef80:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800ef84:	fb02 f303 	mul.w	r3, r2, r3
 800ef88:	009b      	lsls	r3, r3, #2
 800ef8a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800ef8e:	4413      	add	r3, r2
 800ef90:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800ef94:	2300      	movs	r3, #0
 800ef96:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800ef9a:	e018      	b.n	800efce <arm_mat_inverse_f32+0x2a4>
 800ef9c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800efa0:	681b      	ldr	r3, [r3, #0]
 800efa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800efa4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800efa8:	1d1a      	adds	r2, r3, #4
 800efaa:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800efae:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800efb2:	6812      	ldr	r2, [r2, #0]
 800efb4:	601a      	str	r2, [r3, #0]
 800efb6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800efba:	1d1a      	adds	r2, r3, #4
 800efbc:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800efc0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800efc2:	601a      	str	r2, [r3, #0]
 800efc4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800efc8:	3301      	adds	r3, #1
 800efca:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800efce:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800efd2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800efd4:	429a      	cmp	r2, r3
 800efd6:	dbe1      	blt.n	800ef9c <arm_mat_inverse_f32+0x272>

    
            /* Flag to indicate whether exchange is done or not */
            flag = 1U;
 800efd8:	2301      	movs	r3, #1
 800efda:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc

      
      

      /* Update the status if the matrix is singular */
      if ((flag != 1U) && (pivot == 0.0f))
 800efde:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800efe2:	2b01      	cmp	r3, #1
 800efe4:	d009      	beq.n	800effa <arm_mat_inverse_f32+0x2d0>
 800efe6:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800efea:	eef5 7a40 	vcmp.f32	s15, #0.0
 800efee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eff2:	d102      	bne.n	800effa <arm_mat_inverse_f32+0x2d0>
      {
        return ARM_MATH_SINGULAR;
 800eff4:	f06f 0304 	mvn.w	r3, #4
 800eff8:	e208      	b.n	800f40c <arm_mat_inverse_f32+0x6e2>
      }

     
      /* Pivot element of the row */
      pivot = 1.0f / pivot;
 800effa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800effe:	ed97 7a38 	vldr	s14, [r7, #224]	@ 0xe0
 800f002:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f006:	edc7 7a38 	vstr	s15, [r7, #224]	@ 0xe0

      SCALE_ROW_F32(pSrc,column,pivot,pivotRow);
 800f00a:	687b      	ldr	r3, [r7, #4]
 800f00c:	685b      	ldr	r3, [r3, #4]
 800f00e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	885b      	ldrh	r3, [r3, #2]
 800f016:	637b      	str	r3, [r7, #52]	@ 0x34
 800f018:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f01a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800f01e:	1ad3      	subs	r3, r2, r3
 800f020:	633b      	str	r3, [r7, #48]	@ 0x30
 800f022:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f024:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800f026:	fb03 f202 	mul.w	r2, r3, r2
 800f02a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800f02e:	4413      	add	r3, r2
 800f030:	009b      	lsls	r3, r3, #2
 800f032:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 800f036:	4413      	add	r3, r2
 800f038:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800f03c:	2300      	movs	r3, #0
 800f03e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800f042:	e011      	b.n	800f068 <arm_mat_inverse_f32+0x33e>
 800f044:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800f048:	1d1a      	adds	r2, r3, #4
 800f04a:	f8c7 20a0 	str.w	r2, [r7, #160]	@ 0xa0
 800f04e:	ed93 7a00 	vldr	s14, [r3]
 800f052:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800f056:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f05a:	edc3 7a00 	vstr	s15, [r3]
 800f05e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800f062:	3301      	adds	r3, #1
 800f064:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800f068:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 800f06c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f06e:	429a      	cmp	r2, r3
 800f070:	dbe8      	blt.n	800f044 <arm_mat_inverse_f32+0x31a>
      SCALE_ROW_F32(pDst,0,pivot,pivotRow);
 800f072:	683b      	ldr	r3, [r7, #0]
 800f074:	685b      	ldr	r3, [r3, #4]
 800f076:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800f07a:	683b      	ldr	r3, [r7, #0]
 800f07c:	885b      	ldrh	r3, [r3, #2]
 800f07e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800f080:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f082:	62bb      	str	r3, [r7, #40]	@ 0x28
 800f084:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f086:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800f088:	fb02 f303 	mul.w	r3, r2, r3
 800f08c:	009b      	lsls	r3, r3, #2
 800f08e:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800f092:	4413      	add	r3, r2
 800f094:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800f098:	2300      	movs	r3, #0
 800f09a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800f09e:	e011      	b.n	800f0c4 <arm_mat_inverse_f32+0x39a>
 800f0a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800f0a4:	1d1a      	adds	r2, r3, #4
 800f0a6:	f8c7 2098 	str.w	r2, [r7, #152]	@ 0x98
 800f0aa:	ed93 7a00 	vldr	s14, [r3]
 800f0ae:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800f0b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f0b6:	edc3 7a00 	vstr	s15, [r3]
 800f0ba:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800f0be:	3301      	adds	r3, #1
 800f0c0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800f0c4:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 800f0c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f0ca:	429a      	cmp	r2, r3
 800f0cc:	dbe8      	blt.n	800f0a0 <arm_mat_inverse_f32+0x376>

      
      /* Replace the rows with the sum of that row and a multiple of row i
       * so that each new element in column i above row i is zero.*/

      rowNb = 0;
 800f0ce:	2300      	movs	r3, #0
 800f0d0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      for (;rowNb < pivotRow; rowNb++)
 800f0d4:	e0ae      	b.n	800f234 <arm_mat_inverse_f32+0x50a>
      {
           pTmp = ELEM(pSrc,rowNb,column) ;
 800f0d6:	687b      	ldr	r3, [r7, #4]
 800f0d8:	685a      	ldr	r2, [r3, #4]
 800f0da:	687b      	ldr	r3, [r7, #4]
 800f0dc:	885b      	ldrh	r3, [r3, #2]
 800f0de:	4619      	mov	r1, r3
 800f0e0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800f0e4:	fb03 f101 	mul.w	r1, r3, r1
 800f0e8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800f0ec:	440b      	add	r3, r1
 800f0ee:	009b      	lsls	r3, r3, #2
 800f0f0:	4413      	add	r3, r2
 800f0f2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
           pivot = *pTmp;
 800f0f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f0fa:	681b      	ldr	r3, [r3, #0]
 800f0fc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0

           MAS_ROW_F32(column,pSrc,rowNb,pivot,pSrc,pivotRow);
 800f100:	687b      	ldr	r3, [r7, #4]
 800f102:	685b      	ldr	r3, [r3, #4]
 800f104:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	685b      	ldr	r3, [r3, #4]
 800f10c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	885b      	ldrh	r3, [r3, #2]
 800f114:	617b      	str	r3, [r7, #20]
 800f116:	697a      	ldr	r2, [r7, #20]
 800f118:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800f11c:	1ad3      	subs	r3, r2, r3
 800f11e:	613b      	str	r3, [r7, #16]
 800f120:	697b      	ldr	r3, [r7, #20]
 800f122:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800f126:	fb03 f202 	mul.w	r2, r3, r2
 800f12a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800f12e:	4413      	add	r3, r2
 800f130:	009b      	lsls	r3, r3, #2
 800f132:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 800f136:	4413      	add	r3, r2
 800f138:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800f13c:	697b      	ldr	r3, [r7, #20]
 800f13e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800f140:	fb03 f202 	mul.w	r2, r3, r2
 800f144:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800f148:	4413      	add	r3, r2
 800f14a:	009b      	lsls	r3, r3, #2
 800f14c:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 800f150:	4413      	add	r3, r2
 800f152:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800f156:	2300      	movs	r3, #0
 800f158:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800f15c:	e01a      	b.n	800f194 <arm_mat_inverse_f32+0x46a>
 800f15e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800f162:	1d1a      	adds	r2, r3, #4
 800f164:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800f168:	ed93 7a00 	vldr	s14, [r3]
 800f16c:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800f170:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f174:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800f178:	1d1a      	adds	r2, r3, #4
 800f17a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 800f17e:	ed93 7a00 	vldr	s14, [r3]
 800f182:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f186:	edc3 7a00 	vstr	s15, [r3]
 800f18a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800f18e:	3301      	adds	r3, #1
 800f190:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800f194:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800f198:	693b      	ldr	r3, [r7, #16]
 800f19a:	429a      	cmp	r2, r3
 800f19c:	dbdf      	blt.n	800f15e <arm_mat_inverse_f32+0x434>
           MAS_ROW_F32(0     ,pDst,rowNb,pivot,pDst,pivotRow);
 800f19e:	683b      	ldr	r3, [r7, #0]
 800f1a0:	685b      	ldr	r3, [r3, #4]
 800f1a2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800f1a6:	683b      	ldr	r3, [r7, #0]
 800f1a8:	685b      	ldr	r3, [r3, #4]
 800f1aa:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800f1ae:	683b      	ldr	r3, [r7, #0]
 800f1b0:	885b      	ldrh	r3, [r3, #2]
 800f1b2:	60fb      	str	r3, [r7, #12]
 800f1b4:	68fb      	ldr	r3, [r7, #12]
 800f1b6:	60bb      	str	r3, [r7, #8]
 800f1b8:	68fb      	ldr	r3, [r7, #12]
 800f1ba:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800f1be:	fb02 f303 	mul.w	r3, r2, r3
 800f1c2:	009b      	lsls	r3, r3, #2
 800f1c4:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800f1c8:	4413      	add	r3, r2
 800f1ca:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800f1ce:	68fb      	ldr	r3, [r7, #12]
 800f1d0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800f1d2:	fb02 f303 	mul.w	r3, r2, r3
 800f1d6:	009b      	lsls	r3, r3, #2
 800f1d8:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800f1dc:	4413      	add	r3, r2
 800f1de:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800f1e2:	2300      	movs	r3, #0
 800f1e4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800f1e8:	e01a      	b.n	800f220 <arm_mat_inverse_f32+0x4f6>
 800f1ea:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800f1ee:	1d1a      	adds	r2, r3, #4
 800f1f0:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800f1f4:	ed93 7a00 	vldr	s14, [r3]
 800f1f8:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800f1fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f200:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800f204:	1d1a      	adds	r2, r3, #4
 800f206:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 800f20a:	ed93 7a00 	vldr	s14, [r3]
 800f20e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f212:	edc3 7a00 	vstr	s15, [r3]
 800f216:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800f21a:	3301      	adds	r3, #1
 800f21c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800f220:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800f224:	68bb      	ldr	r3, [r7, #8]
 800f226:	429a      	cmp	r2, r3
 800f228:	dbdf      	blt.n	800f1ea <arm_mat_inverse_f32+0x4c0>
      for (;rowNb < pivotRow; rowNb++)
 800f22a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800f22e:	3301      	adds	r3, #1
 800f230:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800f234:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800f238:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f23a:	429a      	cmp	r2, r3
 800f23c:	f4ff af4b 	bcc.w	800f0d6 <arm_mat_inverse_f32+0x3ac>


      }

      for (rowNb = pivotRow + 1; rowNb < numRows; rowNb++)
 800f240:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f242:	3301      	adds	r3, #1
 800f244:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800f248:	e092      	b.n	800f370 <arm_mat_inverse_f32+0x646>
      {
           pTmp = ELEM(pSrc,rowNb,column) ;
 800f24a:	687b      	ldr	r3, [r7, #4]
 800f24c:	685a      	ldr	r2, [r3, #4]
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	885b      	ldrh	r3, [r3, #2]
 800f252:	4619      	mov	r1, r3
 800f254:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800f258:	fb03 f101 	mul.w	r1, r3, r1
 800f25c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800f260:	440b      	add	r3, r1
 800f262:	009b      	lsls	r3, r3, #2
 800f264:	4413      	add	r3, r2
 800f266:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
           pivot = *pTmp;
 800f26a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f26e:	681b      	ldr	r3, [r3, #0]
 800f270:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0

           MAS_ROW_F32(column,pSrc,rowNb,pivot,pSrc,pivotRow);
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	685b      	ldr	r3, [r3, #4]
 800f278:	67bb      	str	r3, [r7, #120]	@ 0x78
 800f27a:	687b      	ldr	r3, [r7, #4]
 800f27c:	685b      	ldr	r3, [r3, #4]
 800f27e:	677b      	str	r3, [r7, #116]	@ 0x74
 800f280:	687b      	ldr	r3, [r7, #4]
 800f282:	885b      	ldrh	r3, [r3, #2]
 800f284:	627b      	str	r3, [r7, #36]	@ 0x24
 800f286:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f288:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800f28c:	1ad3      	subs	r3, r2, r3
 800f28e:	623b      	str	r3, [r7, #32]
 800f290:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f292:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800f296:	fb03 f202 	mul.w	r2, r3, r2
 800f29a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800f29e:	4413      	add	r3, r2
 800f2a0:	009b      	lsls	r3, r3, #2
 800f2a2:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800f2a4:	4413      	add	r3, r2
 800f2a6:	67bb      	str	r3, [r7, #120]	@ 0x78
 800f2a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f2aa:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800f2ac:	fb03 f202 	mul.w	r2, r3, r2
 800f2b0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800f2b4:	4413      	add	r3, r2
 800f2b6:	009b      	lsls	r3, r3, #2
 800f2b8:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800f2ba:	4413      	add	r3, r2
 800f2bc:	677b      	str	r3, [r7, #116]	@ 0x74
 800f2be:	2300      	movs	r3, #0
 800f2c0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800f2c2:	e014      	b.n	800f2ee <arm_mat_inverse_f32+0x5c4>
 800f2c4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800f2c6:	1d1a      	adds	r2, r3, #4
 800f2c8:	677a      	str	r2, [r7, #116]	@ 0x74
 800f2ca:	ed93 7a00 	vldr	s14, [r3]
 800f2ce:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800f2d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f2d6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800f2d8:	1d1a      	adds	r2, r3, #4
 800f2da:	67ba      	str	r2, [r7, #120]	@ 0x78
 800f2dc:	ed93 7a00 	vldr	s14, [r3]
 800f2e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f2e4:	edc3 7a00 	vstr	s15, [r3]
 800f2e8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800f2ea:	3301      	adds	r3, #1
 800f2ec:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800f2ee:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800f2f0:	6a3b      	ldr	r3, [r7, #32]
 800f2f2:	429a      	cmp	r2, r3
 800f2f4:	dbe6      	blt.n	800f2c4 <arm_mat_inverse_f32+0x59a>
           MAS_ROW_F32(0     ,pDst,rowNb,pivot,pDst,pivotRow);
 800f2f6:	683b      	ldr	r3, [r7, #0]
 800f2f8:	685b      	ldr	r3, [r3, #4]
 800f2fa:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800f2fc:	683b      	ldr	r3, [r7, #0]
 800f2fe:	685b      	ldr	r3, [r3, #4]
 800f300:	66bb      	str	r3, [r7, #104]	@ 0x68
 800f302:	683b      	ldr	r3, [r7, #0]
 800f304:	885b      	ldrh	r3, [r3, #2]
 800f306:	61fb      	str	r3, [r7, #28]
 800f308:	69fb      	ldr	r3, [r7, #28]
 800f30a:	61bb      	str	r3, [r7, #24]
 800f30c:	69fb      	ldr	r3, [r7, #28]
 800f30e:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800f312:	fb02 f303 	mul.w	r3, r2, r3
 800f316:	009b      	lsls	r3, r3, #2
 800f318:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800f31a:	4413      	add	r3, r2
 800f31c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800f31e:	69fb      	ldr	r3, [r7, #28]
 800f320:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800f322:	fb02 f303 	mul.w	r3, r2, r3
 800f326:	009b      	lsls	r3, r3, #2
 800f328:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800f32a:	4413      	add	r3, r2
 800f32c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800f32e:	2300      	movs	r3, #0
 800f330:	673b      	str	r3, [r7, #112]	@ 0x70
 800f332:	e014      	b.n	800f35e <arm_mat_inverse_f32+0x634>
 800f334:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800f336:	1d1a      	adds	r2, r3, #4
 800f338:	66ba      	str	r2, [r7, #104]	@ 0x68
 800f33a:	ed93 7a00 	vldr	s14, [r3]
 800f33e:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800f342:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f346:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f348:	1d1a      	adds	r2, r3, #4
 800f34a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800f34c:	ed93 7a00 	vldr	s14, [r3]
 800f350:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f354:	edc3 7a00 	vstr	s15, [r3]
 800f358:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800f35a:	3301      	adds	r3, #1
 800f35c:	673b      	str	r3, [r7, #112]	@ 0x70
 800f35e:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800f360:	69bb      	ldr	r3, [r7, #24]
 800f362:	429a      	cmp	r2, r3
 800f364:	dbe6      	blt.n	800f334 <arm_mat_inverse_f32+0x60a>
      for (rowNb = pivotRow + 1; rowNb < numRows; rowNb++)
 800f366:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800f36a:	3301      	adds	r3, #1
 800f36c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800f370:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800f374:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f376:	429a      	cmp	r2, r3
 800f378:	f4ff af67 	bcc.w	800f24a <arm_mat_inverse_f32+0x520>
    for(column = 0U; column < numCols; column++)
 800f37c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800f380:	3301      	adds	r3, #1
 800f382:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800f386:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800f38a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800f38c:	429a      	cmp	r2, r3
 800f38e:	f4ff ad32 	bcc.w	800edf6 <arm_mat_inverse_f32+0xcc>
      }

    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800f392:	2300      	movs	r3, #0
 800f394:	f887 30c3 	strb.w	r3, [r7, #195]	@ 0xc3

    if ((flag != 1U) && (pivot == 0.0f))
 800f398:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800f39c:	2b01      	cmp	r3, #1
 800f39e:	d033      	beq.n	800f408 <arm_mat_inverse_f32+0x6de>
 800f3a0:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800f3a4:	eef5 7a40 	vcmp.f32	s15, #0.0
 800f3a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f3ac:	d12c      	bne.n	800f408 <arm_mat_inverse_f32+0x6de>
    {
      pIn = pSrc->pData;
 800f3ae:	687b      	ldr	r3, [r7, #4]
 800f3b0:	685b      	ldr	r3, [r3, #4]
 800f3b2:	667b      	str	r3, [r7, #100]	@ 0x64
      for (i = 0; i < numRows * numCols; i++)
 800f3b4:	2300      	movs	r3, #0
 800f3b6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800f3ba:	e010      	b.n	800f3de <arm_mat_inverse_f32+0x6b4>
      {
        if (pIn[i] != 0.0f)
 800f3bc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800f3c0:	009b      	lsls	r3, r3, #2
 800f3c2:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800f3c4:	4413      	add	r3, r2
 800f3c6:	edd3 7a00 	vldr	s15, [r3]
 800f3ca:	eef5 7a40 	vcmp.f32	s15, #0.0
 800f3ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f3d2:	d10d      	bne.n	800f3f0 <arm_mat_inverse_f32+0x6c6>
      for (i = 0; i < numRows * numCols; i++)
 800f3d4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800f3d8:	3301      	adds	r3, #1
 800f3da:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800f3de:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f3e0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800f3e2:	fb02 f303 	mul.w	r3, r2, r3
 800f3e6:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 800f3ea:	429a      	cmp	r2, r3
 800f3ec:	d3e6      	bcc.n	800f3bc <arm_mat_inverse_f32+0x692>
 800f3ee:	e000      	b.n	800f3f2 <arm_mat_inverse_f32+0x6c8>
            break;
 800f3f0:	bf00      	nop
      }

      if (i == numRows * numCols)
 800f3f2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f3f4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800f3f6:	fb02 f303 	mul.w	r3, r2, r3
 800f3fa:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 800f3fe:	429a      	cmp	r2, r3
 800f400:	d102      	bne.n	800f408 <arm_mat_inverse_f32+0x6de>
        status = ARM_MATH_SINGULAR;
 800f402:	23fb      	movs	r3, #251	@ 0xfb
 800f404:	f887 30c3 	strb.w	r3, [r7, #195]	@ 0xc3
    }
  }

  /* Return to application */
  return (status);
 800f408:	f997 30c3 	ldrsb.w	r3, [r7, #195]	@ 0xc3
}
 800f40c:	4618      	mov	r0, r3
 800f40e:	37ec      	adds	r7, #236	@ 0xec
 800f410:	46bd      	mov	sp, r7
 800f412:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f416:	4770      	bx	lr

0800f418 <arm_mat_mult_f32>:
 */
arm_status arm_mat_mult_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 800f418:	b480      	push	{r7}
 800f41a:	b093      	sub	sp, #76	@ 0x4c
 800f41c:	af00      	add	r7, sp, #0
 800f41e:	60f8      	str	r0, [r7, #12]
 800f420:	60b9      	str	r1, [r7, #8]
 800f422:	607a      	str	r2, [r7, #4]
  float32_t *pIn1 = pSrcA->pData;                /* Input data matrix pointer A */
 800f424:	68fb      	ldr	r3, [r7, #12]
 800f426:	685b      	ldr	r3, [r3, #4]
 800f428:	647b      	str	r3, [r7, #68]	@ 0x44
  float32_t *pIn2 = pSrcB->pData;                /* Input data matrix pointer B */
 800f42a:	68bb      	ldr	r3, [r7, #8]
 800f42c:	685b      	ldr	r3, [r3, #4]
 800f42e:	643b      	str	r3, [r7, #64]	@ 0x40
  float32_t *pInA = pSrcA->pData;                /* Input data matrix pointer A */
 800f430:	68fb      	ldr	r3, [r7, #12]
 800f432:	685b      	ldr	r3, [r3, #4]
 800f434:	63fb      	str	r3, [r7, #60]	@ 0x3c
  float32_t *pInB = pSrcB->pData;                /* Input data matrix pointer B */
 800f436:	68bb      	ldr	r3, [r7, #8]
 800f438:	685b      	ldr	r3, [r3, #4]
 800f43a:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* Output data matrix pointer */
 800f43c:	687b      	ldr	r3, [r7, #4]
 800f43e:	685b      	ldr	r3, [r3, #4]
 800f440:	61fb      	str	r3, [r7, #28]
  float32_t *px;                                 /* Temporary output data matrix pointer */
  float32_t sum;                                 /* Accumulator */
  uint16_t numRowsA = pSrcA->numRows;            /* Number of rows of input matrix A */
 800f442:	68fb      	ldr	r3, [r7, #12]
 800f444:	881b      	ldrh	r3, [r3, #0]
 800f446:	837b      	strh	r3, [r7, #26]
  uint16_t numColsB = pSrcB->numCols;            /* Number of columns of input matrix B */
 800f448:	68bb      	ldr	r3, [r7, #8]
 800f44a:	885b      	ldrh	r3, [r3, #2]
 800f44c:	833b      	strh	r3, [r7, #24]
  uint16_t numColsA = pSrcA->numCols;            /* Number of columns of input matrix A */
 800f44e:	68fb      	ldr	r3, [r7, #12]
 800f450:	885b      	ldrh	r3, [r3, #2]
 800f452:	82fb      	strh	r3, [r7, #22]
  uint32_t col, i = 0U, row = numRowsA, colCnt;  /* Loop counters */
 800f454:	2300      	movs	r3, #0
 800f456:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800f458:	8b7b      	ldrh	r3, [r7, #26]
 800f45a:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* The following loop performs the dot-product of each row in pSrcA with each column in pSrcB */
    /* row loop */
    do
    {
      /* Output pointer is set to starting address of row being processed */
      px = pOut + i;
 800f45c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f45e:	009b      	lsls	r3, r3, #2
 800f460:	69fa      	ldr	r2, [r7, #28]
 800f462:	4413      	add	r3, r2
 800f464:	63bb      	str	r3, [r7, #56]	@ 0x38

      /* For every row wise process, column loop counter is to be initiated */
      col = numColsB;
 800f466:	8b3b      	ldrh	r3, [r7, #24]
 800f468:	633b      	str	r3, [r7, #48]	@ 0x30

      /* For every row wise process, pIn2 pointer is set to starting address of pSrcB data */
      pIn2 = pSrcB->pData;
 800f46a:	68bb      	ldr	r3, [r7, #8]
 800f46c:	685b      	ldr	r3, [r3, #4]
 800f46e:	643b      	str	r3, [r7, #64]	@ 0x40

      /* column loop */
      do
      {
        /* Set the variable sum, that acts as accumulator, to zero */
        sum = 0.0f;
 800f470:	f04f 0300 	mov.w	r3, #0
 800f474:	637b      	str	r3, [r7, #52]	@ 0x34

        /* Initialize pointer pIn1 to point to starting address of column being processed */
        pIn1 = pInA;
 800f476:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f478:	647b      	str	r3, [r7, #68]	@ 0x44
        colCnt = numColsA % 0x4U;

#else

        /* Initialize cntCnt with number of columns */
        colCnt = numColsA;
 800f47a:	8afb      	ldrh	r3, [r7, #22]
 800f47c:	627b      	str	r3, [r7, #36]	@ 0x24

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

        while (colCnt > 0U)
 800f47e:	e017      	b.n	800f4b0 <arm_mat_mult_f32+0x98>
        {
          /* c(m,p) = a(m,1) * b(1,p) + a(m,2) * b(2,p) + .... + a(m,n) * b(n,p) */

          /* Perform the multiply-accumulates */
          sum += *pIn1++ * *pIn2;
 800f480:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f482:	1d1a      	adds	r2, r3, #4
 800f484:	647a      	str	r2, [r7, #68]	@ 0x44
 800f486:	ed93 7a00 	vldr	s14, [r3]
 800f48a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f48c:	edd3 7a00 	vldr	s15, [r3]
 800f490:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f494:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 800f498:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f49c:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
          pIn2 += numColsB;
 800f4a0:	8b3b      	ldrh	r3, [r7, #24]
 800f4a2:	009b      	lsls	r3, r3, #2
 800f4a4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800f4a6:	4413      	add	r3, r2
 800f4a8:	643b      	str	r3, [r7, #64]	@ 0x40

          /* Decrement loop counter */
          colCnt--;
 800f4aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f4ac:	3b01      	subs	r3, #1
 800f4ae:	627b      	str	r3, [r7, #36]	@ 0x24
        while (colCnt > 0U)
 800f4b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f4b2:	2b00      	cmp	r3, #0
 800f4b4:	d1e4      	bne.n	800f480 <arm_mat_mult_f32+0x68>
        }

        /* Store result in destination buffer */
        *px++ = sum;
 800f4b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f4b8:	1d1a      	adds	r2, r3, #4
 800f4ba:	63ba      	str	r2, [r7, #56]	@ 0x38
 800f4bc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f4be:	601a      	str	r2, [r3, #0]

        /* Decrement column loop counter */
        col--;
 800f4c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f4c2:	3b01      	subs	r3, #1
 800f4c4:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Update pointer pIn2 to point to starting address of next column */
        pIn2 = pInB + (numColsB - col);
 800f4c6:	8b3a      	ldrh	r2, [r7, #24]
 800f4c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f4ca:	1ad3      	subs	r3, r2, r3
 800f4cc:	009b      	lsls	r3, r3, #2
 800f4ce:	6a3a      	ldr	r2, [r7, #32]
 800f4d0:	4413      	add	r3, r2
 800f4d2:	643b      	str	r3, [r7, #64]	@ 0x40

      } while (col > 0U);
 800f4d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f4d6:	2b00      	cmp	r3, #0
 800f4d8:	d1ca      	bne.n	800f470 <arm_mat_mult_f32+0x58>

      /* Update pointer pInA to point to starting address of next row */
      i = i + numColsB;
 800f4da:	8b3b      	ldrh	r3, [r7, #24]
 800f4dc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f4de:	4413      	add	r3, r2
 800f4e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pInA = pInA + numColsA;
 800f4e2:	8afb      	ldrh	r3, [r7, #22]
 800f4e4:	009b      	lsls	r3, r3, #2
 800f4e6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800f4e8:	4413      	add	r3, r2
 800f4ea:	63fb      	str	r3, [r7, #60]	@ 0x3c

      /* Decrement row loop counter */
      row--;
 800f4ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f4ee:	3b01      	subs	r3, #1
 800f4f0:	62bb      	str	r3, [r7, #40]	@ 0x28

    } while (row > 0U);
 800f4f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f4f4:	2b00      	cmp	r3, #0
 800f4f6:	d1b1      	bne.n	800f45c <arm_mat_mult_f32+0x44>

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800f4f8:	2300      	movs	r3, #0
 800f4fa:	757b      	strb	r3, [r7, #21]
  }

  /* Return to application */
  return (status);
 800f4fc:	f997 3015 	ldrsb.w	r3, [r7, #21]
}
 800f500:	4618      	mov	r0, r3
 800f502:	374c      	adds	r7, #76	@ 0x4c
 800f504:	46bd      	mov	sp, r7
 800f506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f50a:	4770      	bx	lr

0800f50c <arm_mat_sub_f32>:
#else
arm_status arm_mat_sub_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 800f50c:	b480      	push	{r7}
 800f50e:	b08b      	sub	sp, #44	@ 0x2c
 800f510:	af00      	add	r7, sp, #0
 800f512:	60f8      	str	r0, [r7, #12]
 800f514:	60b9      	str	r1, [r7, #8]
 800f516:	607a      	str	r2, [r7, #4]
  float32_t *pInA = pSrcA->pData;                /* input data matrix pointer A */
 800f518:	68fb      	ldr	r3, [r7, #12]
 800f51a:	685b      	ldr	r3, [r3, #4]
 800f51c:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pInB = pSrcB->pData;                /* input data matrix pointer B */
 800f51e:	68bb      	ldr	r3, [r7, #8]
 800f520:	685b      	ldr	r3, [r3, #4]
 800f522:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 800f524:	687b      	ldr	r3, [r7, #4]
 800f526:	685b      	ldr	r3, [r3, #4]
 800f528:	61fb      	str	r3, [r7, #28]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrcA->numRows * pSrcA->numCols;
 800f52a:	68fb      	ldr	r3, [r7, #12]
 800f52c:	881b      	ldrh	r3, [r3, #0]
 800f52e:	461a      	mov	r2, r3
 800f530:	68fb      	ldr	r3, [r7, #12]
 800f532:	885b      	ldrh	r3, [r3, #2]
 800f534:	fb02 f303 	mul.w	r3, r2, r3
 800f538:	617b      	str	r3, [r7, #20]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 800f53a:	697b      	ldr	r3, [r7, #20]
 800f53c:	61bb      	str	r3, [r7, #24]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 800f53e:	e013      	b.n	800f568 <arm_mat_sub_f32+0x5c>
    {
      /* C(m,n) = A(m,n) - B(m,n) */

      /* Subtract and store result in destination buffer. */
      *pOut++ = (*pInA++) - (*pInB++);
 800f540:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f542:	1d1a      	adds	r2, r3, #4
 800f544:	627a      	str	r2, [r7, #36]	@ 0x24
 800f546:	ed93 7a00 	vldr	s14, [r3]
 800f54a:	6a3b      	ldr	r3, [r7, #32]
 800f54c:	1d1a      	adds	r2, r3, #4
 800f54e:	623a      	str	r2, [r7, #32]
 800f550:	edd3 7a00 	vldr	s15, [r3]
 800f554:	69fb      	ldr	r3, [r7, #28]
 800f556:	1d1a      	adds	r2, r3, #4
 800f558:	61fa      	str	r2, [r7, #28]
 800f55a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f55e:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 800f562:	69bb      	ldr	r3, [r7, #24]
 800f564:	3b01      	subs	r3, #1
 800f566:	61bb      	str	r3, [r7, #24]
    while (blkCnt > 0U)
 800f568:	69bb      	ldr	r3, [r7, #24]
 800f56a:	2b00      	cmp	r3, #0
 800f56c:	d1e8      	bne.n	800f540 <arm_mat_sub_f32+0x34>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800f56e:	2300      	movs	r3, #0
 800f570:	74fb      	strb	r3, [r7, #19]
  }

  /* Return to application */
  return (status);
 800f572:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800f576:	4618      	mov	r0, r3
 800f578:	372c      	adds	r7, #44	@ 0x2c
 800f57a:	46bd      	mov	sp, r7
 800f57c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f580:	4770      	bx	lr

0800f582 <arm_mat_trans_f32>:
}
#else
arm_status arm_mat_trans_f32(
  const arm_matrix_instance_f32 * pSrc,
        arm_matrix_instance_f32 * pDst)
{
 800f582:	b480      	push	{r7}
 800f584:	b08b      	sub	sp, #44	@ 0x2c
 800f586:	af00      	add	r7, sp, #0
 800f588:	6078      	str	r0, [r7, #4]
 800f58a:	6039      	str	r1, [r7, #0]
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
 800f58c:	687b      	ldr	r3, [r7, #4]
 800f58e:	685b      	ldr	r3, [r3, #4]
 800f590:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 800f592:	683b      	ldr	r3, [r7, #0]
 800f594:	685b      	ldr	r3, [r3, #4]
 800f596:	613b      	str	r3, [r7, #16]
  float32_t *px;                                 /* Temporary output data matrix pointer */
  uint16_t nRows = pSrc->numRows;                /* number of rows */
 800f598:	687b      	ldr	r3, [r7, #4]
 800f59a:	881b      	ldrh	r3, [r3, #0]
 800f59c:	81fb      	strh	r3, [r7, #14]
  uint16_t nCols = pSrc->numCols;                /* number of columns */
 800f59e:	687b      	ldr	r3, [r7, #4]
 800f5a0:	885b      	ldrh	r3, [r3, #2]
 800f5a2:	81bb      	strh	r3, [r7, #12]
  uint32_t col, row = nRows, i = 0U;             /* Loop counters */
 800f5a4:	89fb      	ldrh	r3, [r7, #14]
 800f5a6:	61bb      	str	r3, [r7, #24]
 800f5a8:	2300      	movs	r3, #0
 800f5aa:	617b      	str	r3, [r7, #20]
    /* Matrix transpose by exchanging the rows with columns */
    /* row loop */
    do
    {
      /* Pointer px is set to starting address of column being processed */
      px = pOut + i;
 800f5ac:	697b      	ldr	r3, [r7, #20]
 800f5ae:	009b      	lsls	r3, r3, #2
 800f5b0:	693a      	ldr	r2, [r7, #16]
 800f5b2:	4413      	add	r3, r2
 800f5b4:	623b      	str	r3, [r7, #32]
      col = nCols % 0x4U;

#else

      /* Initialize col with number of samples */
      col = nCols;
 800f5b6:	89bb      	ldrh	r3, [r7, #12]
 800f5b8:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

      while (col > 0U)
 800f5ba:	e00d      	b.n	800f5d8 <arm_mat_trans_f32+0x56>
      {
        /* Read and store input element in destination */
        *px = *pIn++;
 800f5bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f5be:	1d1a      	adds	r2, r3, #4
 800f5c0:	627a      	str	r2, [r7, #36]	@ 0x24
 800f5c2:	681a      	ldr	r2, [r3, #0]
 800f5c4:	6a3b      	ldr	r3, [r7, #32]
 800f5c6:	601a      	str	r2, [r3, #0]

        /* Update pointer px to point to next row of transposed matrix */
        px += nRows;
 800f5c8:	89fb      	ldrh	r3, [r7, #14]
 800f5ca:	009b      	lsls	r3, r3, #2
 800f5cc:	6a3a      	ldr	r2, [r7, #32]
 800f5ce:	4413      	add	r3, r2
 800f5d0:	623b      	str	r3, [r7, #32]

        /* Decrement column loop counter */
        col--;
 800f5d2:	69fb      	ldr	r3, [r7, #28]
 800f5d4:	3b01      	subs	r3, #1
 800f5d6:	61fb      	str	r3, [r7, #28]
      while (col > 0U)
 800f5d8:	69fb      	ldr	r3, [r7, #28]
 800f5da:	2b00      	cmp	r3, #0
 800f5dc:	d1ee      	bne.n	800f5bc <arm_mat_trans_f32+0x3a>
      }

      i++;
 800f5de:	697b      	ldr	r3, [r7, #20]
 800f5e0:	3301      	adds	r3, #1
 800f5e2:	617b      	str	r3, [r7, #20]

      /* Decrement row loop counter */
      row--;
 800f5e4:	69bb      	ldr	r3, [r7, #24]
 800f5e6:	3b01      	subs	r3, #1
 800f5e8:	61bb      	str	r3, [r7, #24]

    } while (row > 0U);          /* row loop end */
 800f5ea:	69bb      	ldr	r3, [r7, #24]
 800f5ec:	2b00      	cmp	r3, #0
 800f5ee:	d1dd      	bne.n	800f5ac <arm_mat_trans_f32+0x2a>

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800f5f0:	2300      	movs	r3, #0
 800f5f2:	72fb      	strb	r3, [r7, #11]
  }

  /* Return to application */
  return (status);
 800f5f4:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800f5f8:	4618      	mov	r0, r3
 800f5fa:	372c      	adds	r7, #44	@ 0x2c
 800f5fc:	46bd      	mov	sp, r7
 800f5fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f602:	4770      	bx	lr

0800f604 <memset>:
 800f604:	4402      	add	r2, r0
 800f606:	4603      	mov	r3, r0
 800f608:	4293      	cmp	r3, r2
 800f60a:	d100      	bne.n	800f60e <memset+0xa>
 800f60c:	4770      	bx	lr
 800f60e:	f803 1b01 	strb.w	r1, [r3], #1
 800f612:	e7f9      	b.n	800f608 <memset+0x4>

0800f614 <__errno>:
 800f614:	4b01      	ldr	r3, [pc, #4]	@ (800f61c <__errno+0x8>)
 800f616:	6818      	ldr	r0, [r3, #0]
 800f618:	4770      	bx	lr
 800f61a:	bf00      	nop
 800f61c:	20000218 	.word	0x20000218

0800f620 <__libc_init_array>:
 800f620:	b570      	push	{r4, r5, r6, lr}
 800f622:	4d0d      	ldr	r5, [pc, #52]	@ (800f658 <__libc_init_array+0x38>)
 800f624:	4c0d      	ldr	r4, [pc, #52]	@ (800f65c <__libc_init_array+0x3c>)
 800f626:	1b64      	subs	r4, r4, r5
 800f628:	10a4      	asrs	r4, r4, #2
 800f62a:	2600      	movs	r6, #0
 800f62c:	42a6      	cmp	r6, r4
 800f62e:	d109      	bne.n	800f644 <__libc_init_array+0x24>
 800f630:	4d0b      	ldr	r5, [pc, #44]	@ (800f660 <__libc_init_array+0x40>)
 800f632:	4c0c      	ldr	r4, [pc, #48]	@ (800f664 <__libc_init_array+0x44>)
 800f634:	f001 fe92 	bl	801135c <_init>
 800f638:	1b64      	subs	r4, r4, r5
 800f63a:	10a4      	asrs	r4, r4, #2
 800f63c:	2600      	movs	r6, #0
 800f63e:	42a6      	cmp	r6, r4
 800f640:	d105      	bne.n	800f64e <__libc_init_array+0x2e>
 800f642:	bd70      	pop	{r4, r5, r6, pc}
 800f644:	f855 3b04 	ldr.w	r3, [r5], #4
 800f648:	4798      	blx	r3
 800f64a:	3601      	adds	r6, #1
 800f64c:	e7ee      	b.n	800f62c <__libc_init_array+0xc>
 800f64e:	f855 3b04 	ldr.w	r3, [r5], #4
 800f652:	4798      	blx	r3
 800f654:	3601      	adds	r6, #1
 800f656:	e7f2      	b.n	800f63e <__libc_init_array+0x1e>
 800f658:	080117d8 	.word	0x080117d8
 800f65c:	080117d8 	.word	0x080117d8
 800f660:	080117d8 	.word	0x080117d8
 800f664:	080117dc 	.word	0x080117dc

0800f668 <memcpy>:
 800f668:	440a      	add	r2, r1
 800f66a:	4291      	cmp	r1, r2
 800f66c:	f100 33ff 	add.w	r3, r0, #4294967295
 800f670:	d100      	bne.n	800f674 <memcpy+0xc>
 800f672:	4770      	bx	lr
 800f674:	b510      	push	{r4, lr}
 800f676:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f67a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f67e:	4291      	cmp	r1, r2
 800f680:	d1f9      	bne.n	800f676 <memcpy+0xe>
 800f682:	bd10      	pop	{r4, pc}

0800f684 <pow>:
 800f684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f686:	ed2d 8b02 	vpush	{d8}
 800f68a:	eeb0 8a40 	vmov.f32	s16, s0
 800f68e:	eef0 8a60 	vmov.f32	s17, s1
 800f692:	ec55 4b11 	vmov	r4, r5, d1
 800f696:	f000 fa7f 	bl	800fb98 <__ieee754_pow>
 800f69a:	4622      	mov	r2, r4
 800f69c:	462b      	mov	r3, r5
 800f69e:	4620      	mov	r0, r4
 800f6a0:	4629      	mov	r1, r5
 800f6a2:	ec57 6b10 	vmov	r6, r7, d0
 800f6a6:	f7f1 fa0d 	bl	8000ac4 <__aeabi_dcmpun>
 800f6aa:	2800      	cmp	r0, #0
 800f6ac:	d13b      	bne.n	800f726 <pow+0xa2>
 800f6ae:	ec51 0b18 	vmov	r0, r1, d8
 800f6b2:	2200      	movs	r2, #0
 800f6b4:	2300      	movs	r3, #0
 800f6b6:	f7f1 f9d3 	bl	8000a60 <__aeabi_dcmpeq>
 800f6ba:	b1b8      	cbz	r0, 800f6ec <pow+0x68>
 800f6bc:	2200      	movs	r2, #0
 800f6be:	2300      	movs	r3, #0
 800f6c0:	4620      	mov	r0, r4
 800f6c2:	4629      	mov	r1, r5
 800f6c4:	f7f1 f9cc 	bl	8000a60 <__aeabi_dcmpeq>
 800f6c8:	2800      	cmp	r0, #0
 800f6ca:	d146      	bne.n	800f75a <pow+0xd6>
 800f6cc:	ec45 4b10 	vmov	d0, r4, r5
 800f6d0:	f000 f950 	bl	800f974 <finite>
 800f6d4:	b338      	cbz	r0, 800f726 <pow+0xa2>
 800f6d6:	2200      	movs	r2, #0
 800f6d8:	2300      	movs	r3, #0
 800f6da:	4620      	mov	r0, r4
 800f6dc:	4629      	mov	r1, r5
 800f6de:	f7f1 f9c9 	bl	8000a74 <__aeabi_dcmplt>
 800f6e2:	b300      	cbz	r0, 800f726 <pow+0xa2>
 800f6e4:	f7ff ff96 	bl	800f614 <__errno>
 800f6e8:	2322      	movs	r3, #34	@ 0x22
 800f6ea:	e01b      	b.n	800f724 <pow+0xa0>
 800f6ec:	ec47 6b10 	vmov	d0, r6, r7
 800f6f0:	f000 f940 	bl	800f974 <finite>
 800f6f4:	b9e0      	cbnz	r0, 800f730 <pow+0xac>
 800f6f6:	eeb0 0a48 	vmov.f32	s0, s16
 800f6fa:	eef0 0a68 	vmov.f32	s1, s17
 800f6fe:	f000 f939 	bl	800f974 <finite>
 800f702:	b1a8      	cbz	r0, 800f730 <pow+0xac>
 800f704:	ec45 4b10 	vmov	d0, r4, r5
 800f708:	f000 f934 	bl	800f974 <finite>
 800f70c:	b180      	cbz	r0, 800f730 <pow+0xac>
 800f70e:	4632      	mov	r2, r6
 800f710:	463b      	mov	r3, r7
 800f712:	4630      	mov	r0, r6
 800f714:	4639      	mov	r1, r7
 800f716:	f7f1 f9d5 	bl	8000ac4 <__aeabi_dcmpun>
 800f71a:	2800      	cmp	r0, #0
 800f71c:	d0e2      	beq.n	800f6e4 <pow+0x60>
 800f71e:	f7ff ff79 	bl	800f614 <__errno>
 800f722:	2321      	movs	r3, #33	@ 0x21
 800f724:	6003      	str	r3, [r0, #0]
 800f726:	ecbd 8b02 	vpop	{d8}
 800f72a:	ec47 6b10 	vmov	d0, r6, r7
 800f72e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f730:	2200      	movs	r2, #0
 800f732:	2300      	movs	r3, #0
 800f734:	4630      	mov	r0, r6
 800f736:	4639      	mov	r1, r7
 800f738:	f7f1 f992 	bl	8000a60 <__aeabi_dcmpeq>
 800f73c:	2800      	cmp	r0, #0
 800f73e:	d0f2      	beq.n	800f726 <pow+0xa2>
 800f740:	eeb0 0a48 	vmov.f32	s0, s16
 800f744:	eef0 0a68 	vmov.f32	s1, s17
 800f748:	f000 f914 	bl	800f974 <finite>
 800f74c:	2800      	cmp	r0, #0
 800f74e:	d0ea      	beq.n	800f726 <pow+0xa2>
 800f750:	ec45 4b10 	vmov	d0, r4, r5
 800f754:	f000 f90e 	bl	800f974 <finite>
 800f758:	e7c3      	b.n	800f6e2 <pow+0x5e>
 800f75a:	4f01      	ldr	r7, [pc, #4]	@ (800f760 <pow+0xdc>)
 800f75c:	2600      	movs	r6, #0
 800f75e:	e7e2      	b.n	800f726 <pow+0xa2>
 800f760:	3ff00000 	.word	0x3ff00000

0800f764 <sqrt>:
 800f764:	b538      	push	{r3, r4, r5, lr}
 800f766:	ed2d 8b02 	vpush	{d8}
 800f76a:	ec55 4b10 	vmov	r4, r5, d0
 800f76e:	f000 f913 	bl	800f998 <__ieee754_sqrt>
 800f772:	4622      	mov	r2, r4
 800f774:	462b      	mov	r3, r5
 800f776:	4620      	mov	r0, r4
 800f778:	4629      	mov	r1, r5
 800f77a:	eeb0 8a40 	vmov.f32	s16, s0
 800f77e:	eef0 8a60 	vmov.f32	s17, s1
 800f782:	f7f1 f99f 	bl	8000ac4 <__aeabi_dcmpun>
 800f786:	b990      	cbnz	r0, 800f7ae <sqrt+0x4a>
 800f788:	2200      	movs	r2, #0
 800f78a:	2300      	movs	r3, #0
 800f78c:	4620      	mov	r0, r4
 800f78e:	4629      	mov	r1, r5
 800f790:	f7f1 f970 	bl	8000a74 <__aeabi_dcmplt>
 800f794:	b158      	cbz	r0, 800f7ae <sqrt+0x4a>
 800f796:	f7ff ff3d 	bl	800f614 <__errno>
 800f79a:	2321      	movs	r3, #33	@ 0x21
 800f79c:	6003      	str	r3, [r0, #0]
 800f79e:	2200      	movs	r2, #0
 800f7a0:	2300      	movs	r3, #0
 800f7a2:	4610      	mov	r0, r2
 800f7a4:	4619      	mov	r1, r3
 800f7a6:	f7f1 f81d 	bl	80007e4 <__aeabi_ddiv>
 800f7aa:	ec41 0b18 	vmov	d8, r0, r1
 800f7ae:	eeb0 0a48 	vmov.f32	s0, s16
 800f7b2:	eef0 0a68 	vmov.f32	s1, s17
 800f7b6:	ecbd 8b02 	vpop	{d8}
 800f7ba:	bd38      	pop	{r3, r4, r5, pc}

0800f7bc <acosf>:
 800f7bc:	b508      	push	{r3, lr}
 800f7be:	ed2d 8b02 	vpush	{d8}
 800f7c2:	eeb0 8a40 	vmov.f32	s16, s0
 800f7c6:	f000 ffd9 	bl	801077c <__ieee754_acosf>
 800f7ca:	eeb4 8a48 	vcmp.f32	s16, s16
 800f7ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f7d2:	eef0 8a40 	vmov.f32	s17, s0
 800f7d6:	d615      	bvs.n	800f804 <acosf+0x48>
 800f7d8:	eeb0 0a48 	vmov.f32	s0, s16
 800f7dc:	f000 f87c 	bl	800f8d8 <fabsf>
 800f7e0:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800f7e4:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800f7e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f7ec:	dd0a      	ble.n	800f804 <acosf+0x48>
 800f7ee:	f7ff ff11 	bl	800f614 <__errno>
 800f7f2:	ecbd 8b02 	vpop	{d8}
 800f7f6:	2321      	movs	r3, #33	@ 0x21
 800f7f8:	6003      	str	r3, [r0, #0]
 800f7fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800f7fe:	4804      	ldr	r0, [pc, #16]	@ (800f810 <acosf+0x54>)
 800f800:	f000 b8c4 	b.w	800f98c <nanf>
 800f804:	eeb0 0a68 	vmov.f32	s0, s17
 800f808:	ecbd 8b02 	vpop	{d8}
 800f80c:	bd08      	pop	{r3, pc}
 800f80e:	bf00      	nop
 800f810:	080113b8 	.word	0x080113b8

0800f814 <sqrtf>:
 800f814:	b508      	push	{r3, lr}
 800f816:	ed2d 8b02 	vpush	{d8}
 800f81a:	eeb0 8a40 	vmov.f32	s16, s0
 800f81e:	f000 f991 	bl	800fb44 <__ieee754_sqrtf>
 800f822:	eeb4 8a48 	vcmp.f32	s16, s16
 800f826:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f82a:	d60c      	bvs.n	800f846 <sqrtf+0x32>
 800f82c:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800f84c <sqrtf+0x38>
 800f830:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800f834:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f838:	d505      	bpl.n	800f846 <sqrtf+0x32>
 800f83a:	f7ff feeb 	bl	800f614 <__errno>
 800f83e:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800f842:	2321      	movs	r3, #33	@ 0x21
 800f844:	6003      	str	r3, [r0, #0]
 800f846:	ecbd 8b02 	vpop	{d8}
 800f84a:	bd08      	pop	{r3, pc}
 800f84c:	00000000 	.word	0x00000000

0800f850 <cosf>:
 800f850:	ee10 3a10 	vmov	r3, s0
 800f854:	b507      	push	{r0, r1, r2, lr}
 800f856:	4a1e      	ldr	r2, [pc, #120]	@ (800f8d0 <cosf+0x80>)
 800f858:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800f85c:	4293      	cmp	r3, r2
 800f85e:	d806      	bhi.n	800f86e <cosf+0x1e>
 800f860:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 800f8d4 <cosf+0x84>
 800f864:	b003      	add	sp, #12
 800f866:	f85d eb04 	ldr.w	lr, [sp], #4
 800f86a:	f000 bee7 	b.w	801063c <__kernel_cosf>
 800f86e:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800f872:	d304      	bcc.n	800f87e <cosf+0x2e>
 800f874:	ee30 0a40 	vsub.f32	s0, s0, s0
 800f878:	b003      	add	sp, #12
 800f87a:	f85d fb04 	ldr.w	pc, [sp], #4
 800f87e:	4668      	mov	r0, sp
 800f880:	f001 f872 	bl	8010968 <__ieee754_rem_pio2f>
 800f884:	f000 0003 	and.w	r0, r0, #3
 800f888:	2801      	cmp	r0, #1
 800f88a:	d009      	beq.n	800f8a0 <cosf+0x50>
 800f88c:	2802      	cmp	r0, #2
 800f88e:	d010      	beq.n	800f8b2 <cosf+0x62>
 800f890:	b9b0      	cbnz	r0, 800f8c0 <cosf+0x70>
 800f892:	eddd 0a01 	vldr	s1, [sp, #4]
 800f896:	ed9d 0a00 	vldr	s0, [sp]
 800f89a:	f000 fecf 	bl	801063c <__kernel_cosf>
 800f89e:	e7eb      	b.n	800f878 <cosf+0x28>
 800f8a0:	eddd 0a01 	vldr	s1, [sp, #4]
 800f8a4:	ed9d 0a00 	vldr	s0, [sp]
 800f8a8:	f000 ff20 	bl	80106ec <__kernel_sinf>
 800f8ac:	eeb1 0a40 	vneg.f32	s0, s0
 800f8b0:	e7e2      	b.n	800f878 <cosf+0x28>
 800f8b2:	eddd 0a01 	vldr	s1, [sp, #4]
 800f8b6:	ed9d 0a00 	vldr	s0, [sp]
 800f8ba:	f000 febf 	bl	801063c <__kernel_cosf>
 800f8be:	e7f5      	b.n	800f8ac <cosf+0x5c>
 800f8c0:	eddd 0a01 	vldr	s1, [sp, #4]
 800f8c4:	ed9d 0a00 	vldr	s0, [sp]
 800f8c8:	2001      	movs	r0, #1
 800f8ca:	f000 ff0f 	bl	80106ec <__kernel_sinf>
 800f8ce:	e7d3      	b.n	800f878 <cosf+0x28>
 800f8d0:	3f490fd8 	.word	0x3f490fd8
 800f8d4:	00000000 	.word	0x00000000

0800f8d8 <fabsf>:
 800f8d8:	ee10 3a10 	vmov	r3, s0
 800f8dc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800f8e0:	ee00 3a10 	vmov	s0, r3
 800f8e4:	4770      	bx	lr
	...

0800f8e8 <sinf>:
 800f8e8:	ee10 3a10 	vmov	r3, s0
 800f8ec:	b507      	push	{r0, r1, r2, lr}
 800f8ee:	4a1f      	ldr	r2, [pc, #124]	@ (800f96c <sinf+0x84>)
 800f8f0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800f8f4:	4293      	cmp	r3, r2
 800f8f6:	d807      	bhi.n	800f908 <sinf+0x20>
 800f8f8:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 800f970 <sinf+0x88>
 800f8fc:	2000      	movs	r0, #0
 800f8fe:	b003      	add	sp, #12
 800f900:	f85d eb04 	ldr.w	lr, [sp], #4
 800f904:	f000 bef2 	b.w	80106ec <__kernel_sinf>
 800f908:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800f90c:	d304      	bcc.n	800f918 <sinf+0x30>
 800f90e:	ee30 0a40 	vsub.f32	s0, s0, s0
 800f912:	b003      	add	sp, #12
 800f914:	f85d fb04 	ldr.w	pc, [sp], #4
 800f918:	4668      	mov	r0, sp
 800f91a:	f001 f825 	bl	8010968 <__ieee754_rem_pio2f>
 800f91e:	f000 0003 	and.w	r0, r0, #3
 800f922:	2801      	cmp	r0, #1
 800f924:	d00a      	beq.n	800f93c <sinf+0x54>
 800f926:	2802      	cmp	r0, #2
 800f928:	d00f      	beq.n	800f94a <sinf+0x62>
 800f92a:	b9c0      	cbnz	r0, 800f95e <sinf+0x76>
 800f92c:	eddd 0a01 	vldr	s1, [sp, #4]
 800f930:	ed9d 0a00 	vldr	s0, [sp]
 800f934:	2001      	movs	r0, #1
 800f936:	f000 fed9 	bl	80106ec <__kernel_sinf>
 800f93a:	e7ea      	b.n	800f912 <sinf+0x2a>
 800f93c:	eddd 0a01 	vldr	s1, [sp, #4]
 800f940:	ed9d 0a00 	vldr	s0, [sp]
 800f944:	f000 fe7a 	bl	801063c <__kernel_cosf>
 800f948:	e7e3      	b.n	800f912 <sinf+0x2a>
 800f94a:	eddd 0a01 	vldr	s1, [sp, #4]
 800f94e:	ed9d 0a00 	vldr	s0, [sp]
 800f952:	2001      	movs	r0, #1
 800f954:	f000 feca 	bl	80106ec <__kernel_sinf>
 800f958:	eeb1 0a40 	vneg.f32	s0, s0
 800f95c:	e7d9      	b.n	800f912 <sinf+0x2a>
 800f95e:	eddd 0a01 	vldr	s1, [sp, #4]
 800f962:	ed9d 0a00 	vldr	s0, [sp]
 800f966:	f000 fe69 	bl	801063c <__kernel_cosf>
 800f96a:	e7f5      	b.n	800f958 <sinf+0x70>
 800f96c:	3f490fd8 	.word	0x3f490fd8
 800f970:	00000000 	.word	0x00000000

0800f974 <finite>:
 800f974:	b082      	sub	sp, #8
 800f976:	ed8d 0b00 	vstr	d0, [sp]
 800f97a:	9801      	ldr	r0, [sp, #4]
 800f97c:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 800f980:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 800f984:	0fc0      	lsrs	r0, r0, #31
 800f986:	b002      	add	sp, #8
 800f988:	4770      	bx	lr
	...

0800f98c <nanf>:
 800f98c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800f994 <nanf+0x8>
 800f990:	4770      	bx	lr
 800f992:	bf00      	nop
 800f994:	7fc00000 	.word	0x7fc00000

0800f998 <__ieee754_sqrt>:
 800f998:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f99c:	4a66      	ldr	r2, [pc, #408]	@ (800fb38 <__ieee754_sqrt+0x1a0>)
 800f99e:	ec55 4b10 	vmov	r4, r5, d0
 800f9a2:	43aa      	bics	r2, r5
 800f9a4:	462b      	mov	r3, r5
 800f9a6:	4621      	mov	r1, r4
 800f9a8:	d110      	bne.n	800f9cc <__ieee754_sqrt+0x34>
 800f9aa:	4622      	mov	r2, r4
 800f9ac:	4620      	mov	r0, r4
 800f9ae:	4629      	mov	r1, r5
 800f9b0:	f7f0 fdee 	bl	8000590 <__aeabi_dmul>
 800f9b4:	4602      	mov	r2, r0
 800f9b6:	460b      	mov	r3, r1
 800f9b8:	4620      	mov	r0, r4
 800f9ba:	4629      	mov	r1, r5
 800f9bc:	f7f0 fc32 	bl	8000224 <__adddf3>
 800f9c0:	4604      	mov	r4, r0
 800f9c2:	460d      	mov	r5, r1
 800f9c4:	ec45 4b10 	vmov	d0, r4, r5
 800f9c8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f9cc:	2d00      	cmp	r5, #0
 800f9ce:	dc0e      	bgt.n	800f9ee <__ieee754_sqrt+0x56>
 800f9d0:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800f9d4:	4322      	orrs	r2, r4
 800f9d6:	d0f5      	beq.n	800f9c4 <__ieee754_sqrt+0x2c>
 800f9d8:	b19d      	cbz	r5, 800fa02 <__ieee754_sqrt+0x6a>
 800f9da:	4622      	mov	r2, r4
 800f9dc:	4620      	mov	r0, r4
 800f9de:	4629      	mov	r1, r5
 800f9e0:	f7f0 fc1e 	bl	8000220 <__aeabi_dsub>
 800f9e4:	4602      	mov	r2, r0
 800f9e6:	460b      	mov	r3, r1
 800f9e8:	f7f0 fefc 	bl	80007e4 <__aeabi_ddiv>
 800f9ec:	e7e8      	b.n	800f9c0 <__ieee754_sqrt+0x28>
 800f9ee:	152a      	asrs	r2, r5, #20
 800f9f0:	d115      	bne.n	800fa1e <__ieee754_sqrt+0x86>
 800f9f2:	2000      	movs	r0, #0
 800f9f4:	e009      	b.n	800fa0a <__ieee754_sqrt+0x72>
 800f9f6:	0acb      	lsrs	r3, r1, #11
 800f9f8:	3a15      	subs	r2, #21
 800f9fa:	0549      	lsls	r1, r1, #21
 800f9fc:	2b00      	cmp	r3, #0
 800f9fe:	d0fa      	beq.n	800f9f6 <__ieee754_sqrt+0x5e>
 800fa00:	e7f7      	b.n	800f9f2 <__ieee754_sqrt+0x5a>
 800fa02:	462a      	mov	r2, r5
 800fa04:	e7fa      	b.n	800f9fc <__ieee754_sqrt+0x64>
 800fa06:	005b      	lsls	r3, r3, #1
 800fa08:	3001      	adds	r0, #1
 800fa0a:	02dc      	lsls	r4, r3, #11
 800fa0c:	d5fb      	bpl.n	800fa06 <__ieee754_sqrt+0x6e>
 800fa0e:	1e44      	subs	r4, r0, #1
 800fa10:	1b12      	subs	r2, r2, r4
 800fa12:	f1c0 0420 	rsb	r4, r0, #32
 800fa16:	fa21 f404 	lsr.w	r4, r1, r4
 800fa1a:	4323      	orrs	r3, r4
 800fa1c:	4081      	lsls	r1, r0
 800fa1e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800fa22:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 800fa26:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800fa2a:	07d2      	lsls	r2, r2, #31
 800fa2c:	bf5c      	itt	pl
 800fa2e:	005b      	lslpl	r3, r3, #1
 800fa30:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800fa34:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800fa38:	bf58      	it	pl
 800fa3a:	0049      	lslpl	r1, r1, #1
 800fa3c:	2600      	movs	r6, #0
 800fa3e:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800fa42:	107f      	asrs	r7, r7, #1
 800fa44:	0049      	lsls	r1, r1, #1
 800fa46:	2016      	movs	r0, #22
 800fa48:	4632      	mov	r2, r6
 800fa4a:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800fa4e:	1915      	adds	r5, r2, r4
 800fa50:	429d      	cmp	r5, r3
 800fa52:	bfde      	ittt	le
 800fa54:	192a      	addle	r2, r5, r4
 800fa56:	1b5b      	suble	r3, r3, r5
 800fa58:	1936      	addle	r6, r6, r4
 800fa5a:	0fcd      	lsrs	r5, r1, #31
 800fa5c:	3801      	subs	r0, #1
 800fa5e:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 800fa62:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800fa66:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800fa6a:	d1f0      	bne.n	800fa4e <__ieee754_sqrt+0xb6>
 800fa6c:	4605      	mov	r5, r0
 800fa6e:	2420      	movs	r4, #32
 800fa70:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800fa74:	4293      	cmp	r3, r2
 800fa76:	eb0c 0e00 	add.w	lr, ip, r0
 800fa7a:	dc02      	bgt.n	800fa82 <__ieee754_sqrt+0xea>
 800fa7c:	d113      	bne.n	800faa6 <__ieee754_sqrt+0x10e>
 800fa7e:	458e      	cmp	lr, r1
 800fa80:	d811      	bhi.n	800faa6 <__ieee754_sqrt+0x10e>
 800fa82:	f1be 0f00 	cmp.w	lr, #0
 800fa86:	eb0e 000c 	add.w	r0, lr, ip
 800fa8a:	da3f      	bge.n	800fb0c <__ieee754_sqrt+0x174>
 800fa8c:	2800      	cmp	r0, #0
 800fa8e:	db3d      	blt.n	800fb0c <__ieee754_sqrt+0x174>
 800fa90:	f102 0801 	add.w	r8, r2, #1
 800fa94:	1a9b      	subs	r3, r3, r2
 800fa96:	458e      	cmp	lr, r1
 800fa98:	bf88      	it	hi
 800fa9a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800fa9e:	eba1 010e 	sub.w	r1, r1, lr
 800faa2:	4465      	add	r5, ip
 800faa4:	4642      	mov	r2, r8
 800faa6:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800faaa:	3c01      	subs	r4, #1
 800faac:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800fab0:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800fab4:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800fab8:	d1dc      	bne.n	800fa74 <__ieee754_sqrt+0xdc>
 800faba:	4319      	orrs	r1, r3
 800fabc:	d01b      	beq.n	800faf6 <__ieee754_sqrt+0x15e>
 800fabe:	f8df a07c 	ldr.w	sl, [pc, #124]	@ 800fb3c <__ieee754_sqrt+0x1a4>
 800fac2:	f8df b07c 	ldr.w	fp, [pc, #124]	@ 800fb40 <__ieee754_sqrt+0x1a8>
 800fac6:	e9da 0100 	ldrd	r0, r1, [sl]
 800faca:	e9db 2300 	ldrd	r2, r3, [fp]
 800face:	f7f0 fba7 	bl	8000220 <__aeabi_dsub>
 800fad2:	e9da 8900 	ldrd	r8, r9, [sl]
 800fad6:	4602      	mov	r2, r0
 800fad8:	460b      	mov	r3, r1
 800fada:	4640      	mov	r0, r8
 800fadc:	4649      	mov	r1, r9
 800fade:	f7f0 ffd3 	bl	8000a88 <__aeabi_dcmple>
 800fae2:	b140      	cbz	r0, 800faf6 <__ieee754_sqrt+0x15e>
 800fae4:	f1b5 3fff 	cmp.w	r5, #4294967295
 800fae8:	e9da 0100 	ldrd	r0, r1, [sl]
 800faec:	e9db 2300 	ldrd	r2, r3, [fp]
 800faf0:	d10e      	bne.n	800fb10 <__ieee754_sqrt+0x178>
 800faf2:	3601      	adds	r6, #1
 800faf4:	4625      	mov	r5, r4
 800faf6:	1073      	asrs	r3, r6, #1
 800faf8:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 800fafc:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 800fb00:	eb03 5107 	add.w	r1, r3, r7, lsl #20
 800fb04:	086b      	lsrs	r3, r5, #1
 800fb06:	ea43 70c6 	orr.w	r0, r3, r6, lsl #31
 800fb0a:	e759      	b.n	800f9c0 <__ieee754_sqrt+0x28>
 800fb0c:	4690      	mov	r8, r2
 800fb0e:	e7c1      	b.n	800fa94 <__ieee754_sqrt+0xfc>
 800fb10:	f7f0 fb88 	bl	8000224 <__adddf3>
 800fb14:	e9da 8900 	ldrd	r8, r9, [sl]
 800fb18:	4602      	mov	r2, r0
 800fb1a:	460b      	mov	r3, r1
 800fb1c:	4640      	mov	r0, r8
 800fb1e:	4649      	mov	r1, r9
 800fb20:	f7f0 ffa8 	bl	8000a74 <__aeabi_dcmplt>
 800fb24:	b120      	cbz	r0, 800fb30 <__ieee754_sqrt+0x198>
 800fb26:	1cab      	adds	r3, r5, #2
 800fb28:	bf08      	it	eq
 800fb2a:	3601      	addeq	r6, #1
 800fb2c:	3502      	adds	r5, #2
 800fb2e:	e7e2      	b.n	800faf6 <__ieee754_sqrt+0x15e>
 800fb30:	1c6b      	adds	r3, r5, #1
 800fb32:	f023 0501 	bic.w	r5, r3, #1
 800fb36:	e7de      	b.n	800faf6 <__ieee754_sqrt+0x15e>
 800fb38:	7ff00000 	.word	0x7ff00000
 800fb3c:	080113c8 	.word	0x080113c8
 800fb40:	080113c0 	.word	0x080113c0

0800fb44 <__ieee754_sqrtf>:
 800fb44:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800fb48:	4770      	bx	lr
	...

0800fb4c <roundf>:
 800fb4c:	ee10 0a10 	vmov	r0, s0
 800fb50:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 800fb54:	3a7f      	subs	r2, #127	@ 0x7f
 800fb56:	2a16      	cmp	r2, #22
 800fb58:	dc15      	bgt.n	800fb86 <roundf+0x3a>
 800fb5a:	2a00      	cmp	r2, #0
 800fb5c:	da08      	bge.n	800fb70 <roundf+0x24>
 800fb5e:	3201      	adds	r2, #1
 800fb60:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800fb64:	d101      	bne.n	800fb6a <roundf+0x1e>
 800fb66:	f043 537e 	orr.w	r3, r3, #1065353216	@ 0x3f800000
 800fb6a:	ee00 3a10 	vmov	s0, r3
 800fb6e:	4770      	bx	lr
 800fb70:	4907      	ldr	r1, [pc, #28]	@ (800fb90 <roundf+0x44>)
 800fb72:	4111      	asrs	r1, r2
 800fb74:	4201      	tst	r1, r0
 800fb76:	d0fa      	beq.n	800fb6e <roundf+0x22>
 800fb78:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800fb7c:	4113      	asrs	r3, r2
 800fb7e:	4403      	add	r3, r0
 800fb80:	ea23 0301 	bic.w	r3, r3, r1
 800fb84:	e7f1      	b.n	800fb6a <roundf+0x1e>
 800fb86:	2a80      	cmp	r2, #128	@ 0x80
 800fb88:	d1f1      	bne.n	800fb6e <roundf+0x22>
 800fb8a:	ee30 0a00 	vadd.f32	s0, s0, s0
 800fb8e:	4770      	bx	lr
 800fb90:	007fffff 	.word	0x007fffff
 800fb94:	00000000 	.word	0x00000000

0800fb98 <__ieee754_pow>:
 800fb98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb9c:	b091      	sub	sp, #68	@ 0x44
 800fb9e:	ed8d 1b00 	vstr	d1, [sp]
 800fba2:	e9dd 1900 	ldrd	r1, r9, [sp]
 800fba6:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 800fbaa:	ea5a 0001 	orrs.w	r0, sl, r1
 800fbae:	ec57 6b10 	vmov	r6, r7, d0
 800fbb2:	d113      	bne.n	800fbdc <__ieee754_pow+0x44>
 800fbb4:	19b3      	adds	r3, r6, r6
 800fbb6:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 800fbba:	4152      	adcs	r2, r2
 800fbbc:	4298      	cmp	r0, r3
 800fbbe:	4b9a      	ldr	r3, [pc, #616]	@ (800fe28 <__ieee754_pow+0x290>)
 800fbc0:	4193      	sbcs	r3, r2
 800fbc2:	f080 84ee 	bcs.w	80105a2 <__ieee754_pow+0xa0a>
 800fbc6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fbca:	4630      	mov	r0, r6
 800fbcc:	4639      	mov	r1, r7
 800fbce:	f7f0 fb29 	bl	8000224 <__adddf3>
 800fbd2:	ec41 0b10 	vmov	d0, r0, r1
 800fbd6:	b011      	add	sp, #68	@ 0x44
 800fbd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fbdc:	4a93      	ldr	r2, [pc, #588]	@ (800fe2c <__ieee754_pow+0x294>)
 800fbde:	f027 4500 	bic.w	r5, r7, #2147483648	@ 0x80000000
 800fbe2:	4295      	cmp	r5, r2
 800fbe4:	46b8      	mov	r8, r7
 800fbe6:	4633      	mov	r3, r6
 800fbe8:	d80a      	bhi.n	800fc00 <__ieee754_pow+0x68>
 800fbea:	d104      	bne.n	800fbf6 <__ieee754_pow+0x5e>
 800fbec:	2e00      	cmp	r6, #0
 800fbee:	d1ea      	bne.n	800fbc6 <__ieee754_pow+0x2e>
 800fbf0:	45aa      	cmp	sl, r5
 800fbf2:	d8e8      	bhi.n	800fbc6 <__ieee754_pow+0x2e>
 800fbf4:	e001      	b.n	800fbfa <__ieee754_pow+0x62>
 800fbf6:	4592      	cmp	sl, r2
 800fbf8:	d802      	bhi.n	800fc00 <__ieee754_pow+0x68>
 800fbfa:	4592      	cmp	sl, r2
 800fbfc:	d10f      	bne.n	800fc1e <__ieee754_pow+0x86>
 800fbfe:	b171      	cbz	r1, 800fc1e <__ieee754_pow+0x86>
 800fc00:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 800fc04:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 800fc08:	ea58 0803 	orrs.w	r8, r8, r3
 800fc0c:	d1db      	bne.n	800fbc6 <__ieee754_pow+0x2e>
 800fc0e:	e9dd 3200 	ldrd	r3, r2, [sp]
 800fc12:	18db      	adds	r3, r3, r3
 800fc14:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 800fc18:	4152      	adcs	r2, r2
 800fc1a:	4598      	cmp	r8, r3
 800fc1c:	e7cf      	b.n	800fbbe <__ieee754_pow+0x26>
 800fc1e:	f1b8 0f00 	cmp.w	r8, #0
 800fc22:	46ab      	mov	fp, r5
 800fc24:	da43      	bge.n	800fcae <__ieee754_pow+0x116>
 800fc26:	4a82      	ldr	r2, [pc, #520]	@ (800fe30 <__ieee754_pow+0x298>)
 800fc28:	4592      	cmp	sl, r2
 800fc2a:	d856      	bhi.n	800fcda <__ieee754_pow+0x142>
 800fc2c:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 800fc30:	4592      	cmp	sl, r2
 800fc32:	f240 84c5 	bls.w	80105c0 <__ieee754_pow+0xa28>
 800fc36:	ea4f 522a 	mov.w	r2, sl, asr #20
 800fc3a:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800fc3e:	2a14      	cmp	r2, #20
 800fc40:	dd18      	ble.n	800fc74 <__ieee754_pow+0xdc>
 800fc42:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 800fc46:	fa21 f402 	lsr.w	r4, r1, r2
 800fc4a:	fa04 f202 	lsl.w	r2, r4, r2
 800fc4e:	428a      	cmp	r2, r1
 800fc50:	f040 84b6 	bne.w	80105c0 <__ieee754_pow+0xa28>
 800fc54:	f004 0401 	and.w	r4, r4, #1
 800fc58:	f1c4 0402 	rsb	r4, r4, #2
 800fc5c:	2900      	cmp	r1, #0
 800fc5e:	d159      	bne.n	800fd14 <__ieee754_pow+0x17c>
 800fc60:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 800fc64:	d148      	bne.n	800fcf8 <__ieee754_pow+0x160>
 800fc66:	4632      	mov	r2, r6
 800fc68:	463b      	mov	r3, r7
 800fc6a:	4630      	mov	r0, r6
 800fc6c:	4639      	mov	r1, r7
 800fc6e:	f7f0 fc8f 	bl	8000590 <__aeabi_dmul>
 800fc72:	e7ae      	b.n	800fbd2 <__ieee754_pow+0x3a>
 800fc74:	2900      	cmp	r1, #0
 800fc76:	d14c      	bne.n	800fd12 <__ieee754_pow+0x17a>
 800fc78:	f1c2 0214 	rsb	r2, r2, #20
 800fc7c:	fa4a f402 	asr.w	r4, sl, r2
 800fc80:	fa04 f202 	lsl.w	r2, r4, r2
 800fc84:	4552      	cmp	r2, sl
 800fc86:	f040 8498 	bne.w	80105ba <__ieee754_pow+0xa22>
 800fc8a:	f004 0401 	and.w	r4, r4, #1
 800fc8e:	f1c4 0402 	rsb	r4, r4, #2
 800fc92:	4a68      	ldr	r2, [pc, #416]	@ (800fe34 <__ieee754_pow+0x29c>)
 800fc94:	4592      	cmp	sl, r2
 800fc96:	d1e3      	bne.n	800fc60 <__ieee754_pow+0xc8>
 800fc98:	f1b9 0f00 	cmp.w	r9, #0
 800fc9c:	f280 8489 	bge.w	80105b2 <__ieee754_pow+0xa1a>
 800fca0:	4964      	ldr	r1, [pc, #400]	@ (800fe34 <__ieee754_pow+0x29c>)
 800fca2:	4632      	mov	r2, r6
 800fca4:	463b      	mov	r3, r7
 800fca6:	2000      	movs	r0, #0
 800fca8:	f7f0 fd9c 	bl	80007e4 <__aeabi_ddiv>
 800fcac:	e791      	b.n	800fbd2 <__ieee754_pow+0x3a>
 800fcae:	2400      	movs	r4, #0
 800fcb0:	bb81      	cbnz	r1, 800fd14 <__ieee754_pow+0x17c>
 800fcb2:	4a5e      	ldr	r2, [pc, #376]	@ (800fe2c <__ieee754_pow+0x294>)
 800fcb4:	4592      	cmp	sl, r2
 800fcb6:	d1ec      	bne.n	800fc92 <__ieee754_pow+0xfa>
 800fcb8:	f105 4240 	add.w	r2, r5, #3221225472	@ 0xc0000000
 800fcbc:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 800fcc0:	431a      	orrs	r2, r3
 800fcc2:	f000 846e 	beq.w	80105a2 <__ieee754_pow+0xa0a>
 800fcc6:	4b5c      	ldr	r3, [pc, #368]	@ (800fe38 <__ieee754_pow+0x2a0>)
 800fcc8:	429d      	cmp	r5, r3
 800fcca:	d908      	bls.n	800fcde <__ieee754_pow+0x146>
 800fccc:	f1b9 0f00 	cmp.w	r9, #0
 800fcd0:	f280 846b 	bge.w	80105aa <__ieee754_pow+0xa12>
 800fcd4:	2000      	movs	r0, #0
 800fcd6:	2100      	movs	r1, #0
 800fcd8:	e77b      	b.n	800fbd2 <__ieee754_pow+0x3a>
 800fcda:	2402      	movs	r4, #2
 800fcdc:	e7e8      	b.n	800fcb0 <__ieee754_pow+0x118>
 800fcde:	f1b9 0f00 	cmp.w	r9, #0
 800fce2:	f04f 0000 	mov.w	r0, #0
 800fce6:	f04f 0100 	mov.w	r1, #0
 800fcea:	f6bf af72 	bge.w	800fbd2 <__ieee754_pow+0x3a>
 800fcee:	e9dd 0300 	ldrd	r0, r3, [sp]
 800fcf2:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800fcf6:	e76c      	b.n	800fbd2 <__ieee754_pow+0x3a>
 800fcf8:	4a50      	ldr	r2, [pc, #320]	@ (800fe3c <__ieee754_pow+0x2a4>)
 800fcfa:	4591      	cmp	r9, r2
 800fcfc:	d10a      	bne.n	800fd14 <__ieee754_pow+0x17c>
 800fcfe:	f1b8 0f00 	cmp.w	r8, #0
 800fd02:	db07      	blt.n	800fd14 <__ieee754_pow+0x17c>
 800fd04:	ec47 6b10 	vmov	d0, r6, r7
 800fd08:	b011      	add	sp, #68	@ 0x44
 800fd0a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd0e:	f7ff be43 	b.w	800f998 <__ieee754_sqrt>
 800fd12:	2400      	movs	r4, #0
 800fd14:	ec47 6b10 	vmov	d0, r6, r7
 800fd18:	9302      	str	r3, [sp, #8]
 800fd1a:	f000 fc87 	bl	801062c <fabs>
 800fd1e:	9b02      	ldr	r3, [sp, #8]
 800fd20:	ec51 0b10 	vmov	r0, r1, d0
 800fd24:	bb43      	cbnz	r3, 800fd78 <__ieee754_pow+0x1e0>
 800fd26:	4b43      	ldr	r3, [pc, #268]	@ (800fe34 <__ieee754_pow+0x29c>)
 800fd28:	f028 4240 	bic.w	r2, r8, #3221225472	@ 0xc0000000
 800fd2c:	429a      	cmp	r2, r3
 800fd2e:	d000      	beq.n	800fd32 <__ieee754_pow+0x19a>
 800fd30:	bb15      	cbnz	r5, 800fd78 <__ieee754_pow+0x1e0>
 800fd32:	f1b9 0f00 	cmp.w	r9, #0
 800fd36:	da05      	bge.n	800fd44 <__ieee754_pow+0x1ac>
 800fd38:	4602      	mov	r2, r0
 800fd3a:	460b      	mov	r3, r1
 800fd3c:	2000      	movs	r0, #0
 800fd3e:	493d      	ldr	r1, [pc, #244]	@ (800fe34 <__ieee754_pow+0x29c>)
 800fd40:	f7f0 fd50 	bl	80007e4 <__aeabi_ddiv>
 800fd44:	f1b8 0f00 	cmp.w	r8, #0
 800fd48:	f6bf af43 	bge.w	800fbd2 <__ieee754_pow+0x3a>
 800fd4c:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 800fd50:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 800fd54:	4325      	orrs	r5, r4
 800fd56:	d108      	bne.n	800fd6a <__ieee754_pow+0x1d2>
 800fd58:	4602      	mov	r2, r0
 800fd5a:	460b      	mov	r3, r1
 800fd5c:	4610      	mov	r0, r2
 800fd5e:	4619      	mov	r1, r3
 800fd60:	f7f0 fa5e 	bl	8000220 <__aeabi_dsub>
 800fd64:	4602      	mov	r2, r0
 800fd66:	460b      	mov	r3, r1
 800fd68:	e79e      	b.n	800fca8 <__ieee754_pow+0x110>
 800fd6a:	2c01      	cmp	r4, #1
 800fd6c:	f47f af31 	bne.w	800fbd2 <__ieee754_pow+0x3a>
 800fd70:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800fd74:	4619      	mov	r1, r3
 800fd76:	e72c      	b.n	800fbd2 <__ieee754_pow+0x3a>
 800fd78:	ea4f 73d8 	mov.w	r3, r8, lsr #31
 800fd7c:	3b01      	subs	r3, #1
 800fd7e:	ea53 0204 	orrs.w	r2, r3, r4
 800fd82:	d102      	bne.n	800fd8a <__ieee754_pow+0x1f2>
 800fd84:	4632      	mov	r2, r6
 800fd86:	463b      	mov	r3, r7
 800fd88:	e7e8      	b.n	800fd5c <__ieee754_pow+0x1c4>
 800fd8a:	3c01      	subs	r4, #1
 800fd8c:	431c      	orrs	r4, r3
 800fd8e:	d016      	beq.n	800fdbe <__ieee754_pow+0x226>
 800fd90:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800fe18 <__ieee754_pow+0x280>
 800fd94:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 800fd98:	ed8d 7b02 	vstr	d7, [sp, #8]
 800fd9c:	f240 8110 	bls.w	800ffc0 <__ieee754_pow+0x428>
 800fda0:	4b27      	ldr	r3, [pc, #156]	@ (800fe40 <__ieee754_pow+0x2a8>)
 800fda2:	459a      	cmp	sl, r3
 800fda4:	4b24      	ldr	r3, [pc, #144]	@ (800fe38 <__ieee754_pow+0x2a0>)
 800fda6:	d916      	bls.n	800fdd6 <__ieee754_pow+0x23e>
 800fda8:	429d      	cmp	r5, r3
 800fdaa:	d80b      	bhi.n	800fdc4 <__ieee754_pow+0x22c>
 800fdac:	f1b9 0f00 	cmp.w	r9, #0
 800fdb0:	da0b      	bge.n	800fdca <__ieee754_pow+0x232>
 800fdb2:	2000      	movs	r0, #0
 800fdb4:	b011      	add	sp, #68	@ 0x44
 800fdb6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fdba:	f000 bfb5 	b.w	8010d28 <__math_oflow>
 800fdbe:	ed9f 7b18 	vldr	d7, [pc, #96]	@ 800fe20 <__ieee754_pow+0x288>
 800fdc2:	e7e7      	b.n	800fd94 <__ieee754_pow+0x1fc>
 800fdc4:	f1b9 0f00 	cmp.w	r9, #0
 800fdc8:	dcf3      	bgt.n	800fdb2 <__ieee754_pow+0x21a>
 800fdca:	2000      	movs	r0, #0
 800fdcc:	b011      	add	sp, #68	@ 0x44
 800fdce:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fdd2:	f000 bfa1 	b.w	8010d18 <__math_uflow>
 800fdd6:	429d      	cmp	r5, r3
 800fdd8:	d20c      	bcs.n	800fdf4 <__ieee754_pow+0x25c>
 800fdda:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fdde:	2200      	movs	r2, #0
 800fde0:	2300      	movs	r3, #0
 800fde2:	f7f0 fe47 	bl	8000a74 <__aeabi_dcmplt>
 800fde6:	3800      	subs	r0, #0
 800fde8:	bf18      	it	ne
 800fdea:	2001      	movne	r0, #1
 800fdec:	f1b9 0f00 	cmp.w	r9, #0
 800fdf0:	daec      	bge.n	800fdcc <__ieee754_pow+0x234>
 800fdf2:	e7df      	b.n	800fdb4 <__ieee754_pow+0x21c>
 800fdf4:	4b0f      	ldr	r3, [pc, #60]	@ (800fe34 <__ieee754_pow+0x29c>)
 800fdf6:	429d      	cmp	r5, r3
 800fdf8:	f04f 0200 	mov.w	r2, #0
 800fdfc:	d922      	bls.n	800fe44 <__ieee754_pow+0x2ac>
 800fdfe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fe02:	2300      	movs	r3, #0
 800fe04:	f7f0 fe36 	bl	8000a74 <__aeabi_dcmplt>
 800fe08:	3800      	subs	r0, #0
 800fe0a:	bf18      	it	ne
 800fe0c:	2001      	movne	r0, #1
 800fe0e:	f1b9 0f00 	cmp.w	r9, #0
 800fe12:	dccf      	bgt.n	800fdb4 <__ieee754_pow+0x21c>
 800fe14:	e7da      	b.n	800fdcc <__ieee754_pow+0x234>
 800fe16:	bf00      	nop
 800fe18:	00000000 	.word	0x00000000
 800fe1c:	3ff00000 	.word	0x3ff00000
 800fe20:	00000000 	.word	0x00000000
 800fe24:	bff00000 	.word	0xbff00000
 800fe28:	fff00000 	.word	0xfff00000
 800fe2c:	7ff00000 	.word	0x7ff00000
 800fe30:	433fffff 	.word	0x433fffff
 800fe34:	3ff00000 	.word	0x3ff00000
 800fe38:	3fefffff 	.word	0x3fefffff
 800fe3c:	3fe00000 	.word	0x3fe00000
 800fe40:	43f00000 	.word	0x43f00000
 800fe44:	4b5a      	ldr	r3, [pc, #360]	@ (800ffb0 <__ieee754_pow+0x418>)
 800fe46:	f7f0 f9eb 	bl	8000220 <__aeabi_dsub>
 800fe4a:	a351      	add	r3, pc, #324	@ (adr r3, 800ff90 <__ieee754_pow+0x3f8>)
 800fe4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe50:	4604      	mov	r4, r0
 800fe52:	460d      	mov	r5, r1
 800fe54:	f7f0 fb9c 	bl	8000590 <__aeabi_dmul>
 800fe58:	a34f      	add	r3, pc, #316	@ (adr r3, 800ff98 <__ieee754_pow+0x400>)
 800fe5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe5e:	4606      	mov	r6, r0
 800fe60:	460f      	mov	r7, r1
 800fe62:	4620      	mov	r0, r4
 800fe64:	4629      	mov	r1, r5
 800fe66:	f7f0 fb93 	bl	8000590 <__aeabi_dmul>
 800fe6a:	4b52      	ldr	r3, [pc, #328]	@ (800ffb4 <__ieee754_pow+0x41c>)
 800fe6c:	4682      	mov	sl, r0
 800fe6e:	468b      	mov	fp, r1
 800fe70:	2200      	movs	r2, #0
 800fe72:	4620      	mov	r0, r4
 800fe74:	4629      	mov	r1, r5
 800fe76:	f7f0 fb8b 	bl	8000590 <__aeabi_dmul>
 800fe7a:	4602      	mov	r2, r0
 800fe7c:	460b      	mov	r3, r1
 800fe7e:	a148      	add	r1, pc, #288	@ (adr r1, 800ffa0 <__ieee754_pow+0x408>)
 800fe80:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fe84:	f7f0 f9cc 	bl	8000220 <__aeabi_dsub>
 800fe88:	4622      	mov	r2, r4
 800fe8a:	462b      	mov	r3, r5
 800fe8c:	f7f0 fb80 	bl	8000590 <__aeabi_dmul>
 800fe90:	4602      	mov	r2, r0
 800fe92:	460b      	mov	r3, r1
 800fe94:	2000      	movs	r0, #0
 800fe96:	4948      	ldr	r1, [pc, #288]	@ (800ffb8 <__ieee754_pow+0x420>)
 800fe98:	f7f0 f9c2 	bl	8000220 <__aeabi_dsub>
 800fe9c:	4622      	mov	r2, r4
 800fe9e:	4680      	mov	r8, r0
 800fea0:	4689      	mov	r9, r1
 800fea2:	462b      	mov	r3, r5
 800fea4:	4620      	mov	r0, r4
 800fea6:	4629      	mov	r1, r5
 800fea8:	f7f0 fb72 	bl	8000590 <__aeabi_dmul>
 800feac:	4602      	mov	r2, r0
 800feae:	460b      	mov	r3, r1
 800feb0:	4640      	mov	r0, r8
 800feb2:	4649      	mov	r1, r9
 800feb4:	f7f0 fb6c 	bl	8000590 <__aeabi_dmul>
 800feb8:	a33b      	add	r3, pc, #236	@ (adr r3, 800ffa8 <__ieee754_pow+0x410>)
 800feba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800febe:	f7f0 fb67 	bl	8000590 <__aeabi_dmul>
 800fec2:	4602      	mov	r2, r0
 800fec4:	460b      	mov	r3, r1
 800fec6:	4650      	mov	r0, sl
 800fec8:	4659      	mov	r1, fp
 800feca:	f7f0 f9a9 	bl	8000220 <__aeabi_dsub>
 800fece:	4602      	mov	r2, r0
 800fed0:	460b      	mov	r3, r1
 800fed2:	4680      	mov	r8, r0
 800fed4:	4689      	mov	r9, r1
 800fed6:	4630      	mov	r0, r6
 800fed8:	4639      	mov	r1, r7
 800feda:	f7f0 f9a3 	bl	8000224 <__adddf3>
 800fede:	2400      	movs	r4, #0
 800fee0:	4632      	mov	r2, r6
 800fee2:	463b      	mov	r3, r7
 800fee4:	4620      	mov	r0, r4
 800fee6:	460d      	mov	r5, r1
 800fee8:	f7f0 f99a 	bl	8000220 <__aeabi_dsub>
 800feec:	4602      	mov	r2, r0
 800feee:	460b      	mov	r3, r1
 800fef0:	4640      	mov	r0, r8
 800fef2:	4649      	mov	r1, r9
 800fef4:	f7f0 f994 	bl	8000220 <__aeabi_dsub>
 800fef8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fefc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ff00:	2300      	movs	r3, #0
 800ff02:	9304      	str	r3, [sp, #16]
 800ff04:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800ff08:	4606      	mov	r6, r0
 800ff0a:	460f      	mov	r7, r1
 800ff0c:	465b      	mov	r3, fp
 800ff0e:	4652      	mov	r2, sl
 800ff10:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ff14:	f7f0 f984 	bl	8000220 <__aeabi_dsub>
 800ff18:	4622      	mov	r2, r4
 800ff1a:	462b      	mov	r3, r5
 800ff1c:	f7f0 fb38 	bl	8000590 <__aeabi_dmul>
 800ff20:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ff24:	4680      	mov	r8, r0
 800ff26:	4689      	mov	r9, r1
 800ff28:	4630      	mov	r0, r6
 800ff2a:	4639      	mov	r1, r7
 800ff2c:	f7f0 fb30 	bl	8000590 <__aeabi_dmul>
 800ff30:	4602      	mov	r2, r0
 800ff32:	460b      	mov	r3, r1
 800ff34:	4640      	mov	r0, r8
 800ff36:	4649      	mov	r1, r9
 800ff38:	f7f0 f974 	bl	8000224 <__adddf3>
 800ff3c:	465b      	mov	r3, fp
 800ff3e:	4606      	mov	r6, r0
 800ff40:	460f      	mov	r7, r1
 800ff42:	4652      	mov	r2, sl
 800ff44:	4620      	mov	r0, r4
 800ff46:	4629      	mov	r1, r5
 800ff48:	f7f0 fb22 	bl	8000590 <__aeabi_dmul>
 800ff4c:	460b      	mov	r3, r1
 800ff4e:	4602      	mov	r2, r0
 800ff50:	4680      	mov	r8, r0
 800ff52:	4689      	mov	r9, r1
 800ff54:	4630      	mov	r0, r6
 800ff56:	4639      	mov	r1, r7
 800ff58:	f7f0 f964 	bl	8000224 <__adddf3>
 800ff5c:	4b17      	ldr	r3, [pc, #92]	@ (800ffbc <__ieee754_pow+0x424>)
 800ff5e:	4299      	cmp	r1, r3
 800ff60:	4604      	mov	r4, r0
 800ff62:	460d      	mov	r5, r1
 800ff64:	468b      	mov	fp, r1
 800ff66:	f340 820b 	ble.w	8010380 <__ieee754_pow+0x7e8>
 800ff6a:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 800ff6e:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 800ff72:	4303      	orrs	r3, r0
 800ff74:	f000 81ea 	beq.w	801034c <__ieee754_pow+0x7b4>
 800ff78:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ff7c:	2200      	movs	r2, #0
 800ff7e:	2300      	movs	r3, #0
 800ff80:	f7f0 fd78 	bl	8000a74 <__aeabi_dcmplt>
 800ff84:	3800      	subs	r0, #0
 800ff86:	bf18      	it	ne
 800ff88:	2001      	movne	r0, #1
 800ff8a:	e713      	b.n	800fdb4 <__ieee754_pow+0x21c>
 800ff8c:	f3af 8000 	nop.w
 800ff90:	60000000 	.word	0x60000000
 800ff94:	3ff71547 	.word	0x3ff71547
 800ff98:	f85ddf44 	.word	0xf85ddf44
 800ff9c:	3e54ae0b 	.word	0x3e54ae0b
 800ffa0:	55555555 	.word	0x55555555
 800ffa4:	3fd55555 	.word	0x3fd55555
 800ffa8:	652b82fe 	.word	0x652b82fe
 800ffac:	3ff71547 	.word	0x3ff71547
 800ffb0:	3ff00000 	.word	0x3ff00000
 800ffb4:	3fd00000 	.word	0x3fd00000
 800ffb8:	3fe00000 	.word	0x3fe00000
 800ffbc:	408fffff 	.word	0x408fffff
 800ffc0:	4bd5      	ldr	r3, [pc, #852]	@ (8010318 <__ieee754_pow+0x780>)
 800ffc2:	ea08 0303 	and.w	r3, r8, r3
 800ffc6:	2200      	movs	r2, #0
 800ffc8:	b92b      	cbnz	r3, 800ffd6 <__ieee754_pow+0x43e>
 800ffca:	4bd4      	ldr	r3, [pc, #848]	@ (801031c <__ieee754_pow+0x784>)
 800ffcc:	f7f0 fae0 	bl	8000590 <__aeabi_dmul>
 800ffd0:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 800ffd4:	468b      	mov	fp, r1
 800ffd6:	ea4f 532b 	mov.w	r3, fp, asr #20
 800ffda:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800ffde:	4413      	add	r3, r2
 800ffe0:	930a      	str	r3, [sp, #40]	@ 0x28
 800ffe2:	4bcf      	ldr	r3, [pc, #828]	@ (8010320 <__ieee754_pow+0x788>)
 800ffe4:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 800ffe8:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 800ffec:	459b      	cmp	fp, r3
 800ffee:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800fff2:	dd08      	ble.n	8010006 <__ieee754_pow+0x46e>
 800fff4:	4bcb      	ldr	r3, [pc, #812]	@ (8010324 <__ieee754_pow+0x78c>)
 800fff6:	459b      	cmp	fp, r3
 800fff8:	f340 81a5 	ble.w	8010346 <__ieee754_pow+0x7ae>
 800fffc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fffe:	3301      	adds	r3, #1
 8010000:	930a      	str	r3, [sp, #40]	@ 0x28
 8010002:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8010006:	f04f 0a00 	mov.w	sl, #0
 801000a:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 801000e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010010:	4bc5      	ldr	r3, [pc, #788]	@ (8010328 <__ieee754_pow+0x790>)
 8010012:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8010016:	ed93 7b00 	vldr	d7, [r3]
 801001a:	4629      	mov	r1, r5
 801001c:	ec53 2b17 	vmov	r2, r3, d7
 8010020:	ed8d 7b06 	vstr	d7, [sp, #24]
 8010024:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8010028:	f7f0 f8fa 	bl	8000220 <__aeabi_dsub>
 801002c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8010030:	4606      	mov	r6, r0
 8010032:	460f      	mov	r7, r1
 8010034:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010038:	f7f0 f8f4 	bl	8000224 <__adddf3>
 801003c:	4602      	mov	r2, r0
 801003e:	460b      	mov	r3, r1
 8010040:	2000      	movs	r0, #0
 8010042:	49ba      	ldr	r1, [pc, #744]	@ (801032c <__ieee754_pow+0x794>)
 8010044:	f7f0 fbce 	bl	80007e4 <__aeabi_ddiv>
 8010048:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 801004c:	4602      	mov	r2, r0
 801004e:	460b      	mov	r3, r1
 8010050:	4630      	mov	r0, r6
 8010052:	4639      	mov	r1, r7
 8010054:	f7f0 fa9c 	bl	8000590 <__aeabi_dmul>
 8010058:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801005c:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 8010060:	106d      	asrs	r5, r5, #1
 8010062:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 8010066:	f04f 0b00 	mov.w	fp, #0
 801006a:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 801006e:	4661      	mov	r1, ip
 8010070:	2200      	movs	r2, #0
 8010072:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8010076:	4658      	mov	r0, fp
 8010078:	46e1      	mov	r9, ip
 801007a:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 801007e:	4614      	mov	r4, r2
 8010080:	461d      	mov	r5, r3
 8010082:	f7f0 fa85 	bl	8000590 <__aeabi_dmul>
 8010086:	4602      	mov	r2, r0
 8010088:	460b      	mov	r3, r1
 801008a:	4630      	mov	r0, r6
 801008c:	4639      	mov	r1, r7
 801008e:	f7f0 f8c7 	bl	8000220 <__aeabi_dsub>
 8010092:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010096:	4606      	mov	r6, r0
 8010098:	460f      	mov	r7, r1
 801009a:	4620      	mov	r0, r4
 801009c:	4629      	mov	r1, r5
 801009e:	f7f0 f8bf 	bl	8000220 <__aeabi_dsub>
 80100a2:	4602      	mov	r2, r0
 80100a4:	460b      	mov	r3, r1
 80100a6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80100aa:	f7f0 f8b9 	bl	8000220 <__aeabi_dsub>
 80100ae:	465a      	mov	r2, fp
 80100b0:	464b      	mov	r3, r9
 80100b2:	f7f0 fa6d 	bl	8000590 <__aeabi_dmul>
 80100b6:	4602      	mov	r2, r0
 80100b8:	460b      	mov	r3, r1
 80100ba:	4630      	mov	r0, r6
 80100bc:	4639      	mov	r1, r7
 80100be:	f7f0 f8af 	bl	8000220 <__aeabi_dsub>
 80100c2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80100c6:	f7f0 fa63 	bl	8000590 <__aeabi_dmul>
 80100ca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80100ce:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80100d2:	4610      	mov	r0, r2
 80100d4:	4619      	mov	r1, r3
 80100d6:	f7f0 fa5b 	bl	8000590 <__aeabi_dmul>
 80100da:	a37d      	add	r3, pc, #500	@ (adr r3, 80102d0 <__ieee754_pow+0x738>)
 80100dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100e0:	4604      	mov	r4, r0
 80100e2:	460d      	mov	r5, r1
 80100e4:	f7f0 fa54 	bl	8000590 <__aeabi_dmul>
 80100e8:	a37b      	add	r3, pc, #492	@ (adr r3, 80102d8 <__ieee754_pow+0x740>)
 80100ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100ee:	f7f0 f899 	bl	8000224 <__adddf3>
 80100f2:	4622      	mov	r2, r4
 80100f4:	462b      	mov	r3, r5
 80100f6:	f7f0 fa4b 	bl	8000590 <__aeabi_dmul>
 80100fa:	a379      	add	r3, pc, #484	@ (adr r3, 80102e0 <__ieee754_pow+0x748>)
 80100fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010100:	f7f0 f890 	bl	8000224 <__adddf3>
 8010104:	4622      	mov	r2, r4
 8010106:	462b      	mov	r3, r5
 8010108:	f7f0 fa42 	bl	8000590 <__aeabi_dmul>
 801010c:	a376      	add	r3, pc, #472	@ (adr r3, 80102e8 <__ieee754_pow+0x750>)
 801010e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010112:	f7f0 f887 	bl	8000224 <__adddf3>
 8010116:	4622      	mov	r2, r4
 8010118:	462b      	mov	r3, r5
 801011a:	f7f0 fa39 	bl	8000590 <__aeabi_dmul>
 801011e:	a374      	add	r3, pc, #464	@ (adr r3, 80102f0 <__ieee754_pow+0x758>)
 8010120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010124:	f7f0 f87e 	bl	8000224 <__adddf3>
 8010128:	4622      	mov	r2, r4
 801012a:	462b      	mov	r3, r5
 801012c:	f7f0 fa30 	bl	8000590 <__aeabi_dmul>
 8010130:	a371      	add	r3, pc, #452	@ (adr r3, 80102f8 <__ieee754_pow+0x760>)
 8010132:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010136:	f7f0 f875 	bl	8000224 <__adddf3>
 801013a:	4622      	mov	r2, r4
 801013c:	4606      	mov	r6, r0
 801013e:	460f      	mov	r7, r1
 8010140:	462b      	mov	r3, r5
 8010142:	4620      	mov	r0, r4
 8010144:	4629      	mov	r1, r5
 8010146:	f7f0 fa23 	bl	8000590 <__aeabi_dmul>
 801014a:	4602      	mov	r2, r0
 801014c:	460b      	mov	r3, r1
 801014e:	4630      	mov	r0, r6
 8010150:	4639      	mov	r1, r7
 8010152:	f7f0 fa1d 	bl	8000590 <__aeabi_dmul>
 8010156:	465a      	mov	r2, fp
 8010158:	4604      	mov	r4, r0
 801015a:	460d      	mov	r5, r1
 801015c:	464b      	mov	r3, r9
 801015e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010162:	f7f0 f85f 	bl	8000224 <__adddf3>
 8010166:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801016a:	f7f0 fa11 	bl	8000590 <__aeabi_dmul>
 801016e:	4622      	mov	r2, r4
 8010170:	462b      	mov	r3, r5
 8010172:	f7f0 f857 	bl	8000224 <__adddf3>
 8010176:	465a      	mov	r2, fp
 8010178:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801017c:	464b      	mov	r3, r9
 801017e:	4658      	mov	r0, fp
 8010180:	4649      	mov	r1, r9
 8010182:	f7f0 fa05 	bl	8000590 <__aeabi_dmul>
 8010186:	4b6a      	ldr	r3, [pc, #424]	@ (8010330 <__ieee754_pow+0x798>)
 8010188:	2200      	movs	r2, #0
 801018a:	4606      	mov	r6, r0
 801018c:	460f      	mov	r7, r1
 801018e:	f7f0 f849 	bl	8000224 <__adddf3>
 8010192:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8010196:	f7f0 f845 	bl	8000224 <__adddf3>
 801019a:	46d8      	mov	r8, fp
 801019c:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 80101a0:	460d      	mov	r5, r1
 80101a2:	465a      	mov	r2, fp
 80101a4:	460b      	mov	r3, r1
 80101a6:	4640      	mov	r0, r8
 80101a8:	4649      	mov	r1, r9
 80101aa:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 80101ae:	f7f0 f9ef 	bl	8000590 <__aeabi_dmul>
 80101b2:	465c      	mov	r4, fp
 80101b4:	4680      	mov	r8, r0
 80101b6:	4689      	mov	r9, r1
 80101b8:	4b5d      	ldr	r3, [pc, #372]	@ (8010330 <__ieee754_pow+0x798>)
 80101ba:	2200      	movs	r2, #0
 80101bc:	4620      	mov	r0, r4
 80101be:	4629      	mov	r1, r5
 80101c0:	f7f0 f82e 	bl	8000220 <__aeabi_dsub>
 80101c4:	4632      	mov	r2, r6
 80101c6:	463b      	mov	r3, r7
 80101c8:	f7f0 f82a 	bl	8000220 <__aeabi_dsub>
 80101cc:	4602      	mov	r2, r0
 80101ce:	460b      	mov	r3, r1
 80101d0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80101d4:	f7f0 f824 	bl	8000220 <__aeabi_dsub>
 80101d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80101dc:	f7f0 f9d8 	bl	8000590 <__aeabi_dmul>
 80101e0:	4622      	mov	r2, r4
 80101e2:	4606      	mov	r6, r0
 80101e4:	460f      	mov	r7, r1
 80101e6:	462b      	mov	r3, r5
 80101e8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80101ec:	f7f0 f9d0 	bl	8000590 <__aeabi_dmul>
 80101f0:	4602      	mov	r2, r0
 80101f2:	460b      	mov	r3, r1
 80101f4:	4630      	mov	r0, r6
 80101f6:	4639      	mov	r1, r7
 80101f8:	f7f0 f814 	bl	8000224 <__adddf3>
 80101fc:	4606      	mov	r6, r0
 80101fe:	460f      	mov	r7, r1
 8010200:	4602      	mov	r2, r0
 8010202:	460b      	mov	r3, r1
 8010204:	4640      	mov	r0, r8
 8010206:	4649      	mov	r1, r9
 8010208:	f7f0 f80c 	bl	8000224 <__adddf3>
 801020c:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 8010210:	a33b      	add	r3, pc, #236	@ (adr r3, 8010300 <__ieee754_pow+0x768>)
 8010212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010216:	4658      	mov	r0, fp
 8010218:	e9cd bc08 	strd	fp, ip, [sp, #32]
 801021c:	460d      	mov	r5, r1
 801021e:	f7f0 f9b7 	bl	8000590 <__aeabi_dmul>
 8010222:	465c      	mov	r4, fp
 8010224:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010228:	4642      	mov	r2, r8
 801022a:	464b      	mov	r3, r9
 801022c:	4620      	mov	r0, r4
 801022e:	4629      	mov	r1, r5
 8010230:	f7ef fff6 	bl	8000220 <__aeabi_dsub>
 8010234:	4602      	mov	r2, r0
 8010236:	460b      	mov	r3, r1
 8010238:	4630      	mov	r0, r6
 801023a:	4639      	mov	r1, r7
 801023c:	f7ef fff0 	bl	8000220 <__aeabi_dsub>
 8010240:	a331      	add	r3, pc, #196	@ (adr r3, 8010308 <__ieee754_pow+0x770>)
 8010242:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010246:	f7f0 f9a3 	bl	8000590 <__aeabi_dmul>
 801024a:	a331      	add	r3, pc, #196	@ (adr r3, 8010310 <__ieee754_pow+0x778>)
 801024c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010250:	4606      	mov	r6, r0
 8010252:	460f      	mov	r7, r1
 8010254:	4620      	mov	r0, r4
 8010256:	4629      	mov	r1, r5
 8010258:	f7f0 f99a 	bl	8000590 <__aeabi_dmul>
 801025c:	4602      	mov	r2, r0
 801025e:	460b      	mov	r3, r1
 8010260:	4630      	mov	r0, r6
 8010262:	4639      	mov	r1, r7
 8010264:	f7ef ffde 	bl	8000224 <__adddf3>
 8010268:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801026a:	4b32      	ldr	r3, [pc, #200]	@ (8010334 <__ieee754_pow+0x79c>)
 801026c:	4413      	add	r3, r2
 801026e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010272:	f7ef ffd7 	bl	8000224 <__adddf3>
 8010276:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801027a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801027c:	f7f0 f91e 	bl	80004bc <__aeabi_i2d>
 8010280:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8010282:	4b2d      	ldr	r3, [pc, #180]	@ (8010338 <__ieee754_pow+0x7a0>)
 8010284:	4413      	add	r3, r2
 8010286:	e9d3 8900 	ldrd	r8, r9, [r3]
 801028a:	4606      	mov	r6, r0
 801028c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010290:	460f      	mov	r7, r1
 8010292:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010296:	f7ef ffc5 	bl	8000224 <__adddf3>
 801029a:	4642      	mov	r2, r8
 801029c:	464b      	mov	r3, r9
 801029e:	f7ef ffc1 	bl	8000224 <__adddf3>
 80102a2:	4632      	mov	r2, r6
 80102a4:	463b      	mov	r3, r7
 80102a6:	f7ef ffbd 	bl	8000224 <__adddf3>
 80102aa:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 80102ae:	4632      	mov	r2, r6
 80102b0:	463b      	mov	r3, r7
 80102b2:	4658      	mov	r0, fp
 80102b4:	460d      	mov	r5, r1
 80102b6:	f7ef ffb3 	bl	8000220 <__aeabi_dsub>
 80102ba:	4642      	mov	r2, r8
 80102bc:	464b      	mov	r3, r9
 80102be:	f7ef ffaf 	bl	8000220 <__aeabi_dsub>
 80102c2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80102c6:	f7ef ffab 	bl	8000220 <__aeabi_dsub>
 80102ca:	465c      	mov	r4, fp
 80102cc:	e036      	b.n	801033c <__ieee754_pow+0x7a4>
 80102ce:	bf00      	nop
 80102d0:	4a454eef 	.word	0x4a454eef
 80102d4:	3fca7e28 	.word	0x3fca7e28
 80102d8:	93c9db65 	.word	0x93c9db65
 80102dc:	3fcd864a 	.word	0x3fcd864a
 80102e0:	a91d4101 	.word	0xa91d4101
 80102e4:	3fd17460 	.word	0x3fd17460
 80102e8:	518f264d 	.word	0x518f264d
 80102ec:	3fd55555 	.word	0x3fd55555
 80102f0:	db6fabff 	.word	0xdb6fabff
 80102f4:	3fdb6db6 	.word	0x3fdb6db6
 80102f8:	33333303 	.word	0x33333303
 80102fc:	3fe33333 	.word	0x3fe33333
 8010300:	e0000000 	.word	0xe0000000
 8010304:	3feec709 	.word	0x3feec709
 8010308:	dc3a03fd 	.word	0xdc3a03fd
 801030c:	3feec709 	.word	0x3feec709
 8010310:	145b01f5 	.word	0x145b01f5
 8010314:	be3e2fe0 	.word	0xbe3e2fe0
 8010318:	7ff00000 	.word	0x7ff00000
 801031c:	43400000 	.word	0x43400000
 8010320:	0003988e 	.word	0x0003988e
 8010324:	000bb679 	.word	0x000bb679
 8010328:	080113f0 	.word	0x080113f0
 801032c:	3ff00000 	.word	0x3ff00000
 8010330:	40080000 	.word	0x40080000
 8010334:	080113d0 	.word	0x080113d0
 8010338:	080113e0 	.word	0x080113e0
 801033c:	4602      	mov	r2, r0
 801033e:	460b      	mov	r3, r1
 8010340:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010344:	e5d6      	b.n	800fef4 <__ieee754_pow+0x35c>
 8010346:	f04f 0a01 	mov.w	sl, #1
 801034a:	e65e      	b.n	801000a <__ieee754_pow+0x472>
 801034c:	a3b5      	add	r3, pc, #724	@ (adr r3, 8010624 <__ieee754_pow+0xa8c>)
 801034e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010352:	4630      	mov	r0, r6
 8010354:	4639      	mov	r1, r7
 8010356:	f7ef ff65 	bl	8000224 <__adddf3>
 801035a:	4642      	mov	r2, r8
 801035c:	e9cd 0100 	strd	r0, r1, [sp]
 8010360:	464b      	mov	r3, r9
 8010362:	4620      	mov	r0, r4
 8010364:	4629      	mov	r1, r5
 8010366:	f7ef ff5b 	bl	8000220 <__aeabi_dsub>
 801036a:	4602      	mov	r2, r0
 801036c:	460b      	mov	r3, r1
 801036e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010372:	f7f0 fb9d 	bl	8000ab0 <__aeabi_dcmpgt>
 8010376:	2800      	cmp	r0, #0
 8010378:	f47f adfe 	bne.w	800ff78 <__ieee754_pow+0x3e0>
 801037c:	4ba2      	ldr	r3, [pc, #648]	@ (8010608 <__ieee754_pow+0xa70>)
 801037e:	e022      	b.n	80103c6 <__ieee754_pow+0x82e>
 8010380:	4ca2      	ldr	r4, [pc, #648]	@ (801060c <__ieee754_pow+0xa74>)
 8010382:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8010386:	42a3      	cmp	r3, r4
 8010388:	d919      	bls.n	80103be <__ieee754_pow+0x826>
 801038a:	4ba1      	ldr	r3, [pc, #644]	@ (8010610 <__ieee754_pow+0xa78>)
 801038c:	440b      	add	r3, r1
 801038e:	4303      	orrs	r3, r0
 8010390:	d009      	beq.n	80103a6 <__ieee754_pow+0x80e>
 8010392:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010396:	2200      	movs	r2, #0
 8010398:	2300      	movs	r3, #0
 801039a:	f7f0 fb6b 	bl	8000a74 <__aeabi_dcmplt>
 801039e:	3800      	subs	r0, #0
 80103a0:	bf18      	it	ne
 80103a2:	2001      	movne	r0, #1
 80103a4:	e512      	b.n	800fdcc <__ieee754_pow+0x234>
 80103a6:	4642      	mov	r2, r8
 80103a8:	464b      	mov	r3, r9
 80103aa:	f7ef ff39 	bl	8000220 <__aeabi_dsub>
 80103ae:	4632      	mov	r2, r6
 80103b0:	463b      	mov	r3, r7
 80103b2:	f7f0 fb73 	bl	8000a9c <__aeabi_dcmpge>
 80103b6:	2800      	cmp	r0, #0
 80103b8:	d1eb      	bne.n	8010392 <__ieee754_pow+0x7fa>
 80103ba:	4b96      	ldr	r3, [pc, #600]	@ (8010614 <__ieee754_pow+0xa7c>)
 80103bc:	e003      	b.n	80103c6 <__ieee754_pow+0x82e>
 80103be:	4a96      	ldr	r2, [pc, #600]	@ (8010618 <__ieee754_pow+0xa80>)
 80103c0:	4293      	cmp	r3, r2
 80103c2:	f240 80e7 	bls.w	8010594 <__ieee754_pow+0x9fc>
 80103c6:	151b      	asrs	r3, r3, #20
 80103c8:	f2a3 33fe 	subw	r3, r3, #1022	@ 0x3fe
 80103cc:	f44f 1a80 	mov.w	sl, #1048576	@ 0x100000
 80103d0:	fa4a fa03 	asr.w	sl, sl, r3
 80103d4:	44da      	add	sl, fp
 80103d6:	f3ca 510a 	ubfx	r1, sl, #20, #11
 80103da:	4890      	ldr	r0, [pc, #576]	@ (801061c <__ieee754_pow+0xa84>)
 80103dc:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 80103e0:	4108      	asrs	r0, r1
 80103e2:	ea00 030a 	and.w	r3, r0, sl
 80103e6:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 80103ea:	f1c1 0114 	rsb	r1, r1, #20
 80103ee:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 80103f2:	fa4a fa01 	asr.w	sl, sl, r1
 80103f6:	f1bb 0f00 	cmp.w	fp, #0
 80103fa:	4640      	mov	r0, r8
 80103fc:	4649      	mov	r1, r9
 80103fe:	f04f 0200 	mov.w	r2, #0
 8010402:	bfb8      	it	lt
 8010404:	f1ca 0a00 	rsblt	sl, sl, #0
 8010408:	f7ef ff0a 	bl	8000220 <__aeabi_dsub>
 801040c:	4680      	mov	r8, r0
 801040e:	4689      	mov	r9, r1
 8010410:	4632      	mov	r2, r6
 8010412:	463b      	mov	r3, r7
 8010414:	4640      	mov	r0, r8
 8010416:	4649      	mov	r1, r9
 8010418:	f7ef ff04 	bl	8000224 <__adddf3>
 801041c:	2400      	movs	r4, #0
 801041e:	a36a      	add	r3, pc, #424	@ (adr r3, 80105c8 <__ieee754_pow+0xa30>)
 8010420:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010424:	4620      	mov	r0, r4
 8010426:	460d      	mov	r5, r1
 8010428:	f7f0 f8b2 	bl	8000590 <__aeabi_dmul>
 801042c:	4642      	mov	r2, r8
 801042e:	e9cd 0100 	strd	r0, r1, [sp]
 8010432:	464b      	mov	r3, r9
 8010434:	4620      	mov	r0, r4
 8010436:	4629      	mov	r1, r5
 8010438:	f7ef fef2 	bl	8000220 <__aeabi_dsub>
 801043c:	4602      	mov	r2, r0
 801043e:	460b      	mov	r3, r1
 8010440:	4630      	mov	r0, r6
 8010442:	4639      	mov	r1, r7
 8010444:	f7ef feec 	bl	8000220 <__aeabi_dsub>
 8010448:	a361      	add	r3, pc, #388	@ (adr r3, 80105d0 <__ieee754_pow+0xa38>)
 801044a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801044e:	f7f0 f89f 	bl	8000590 <__aeabi_dmul>
 8010452:	a361      	add	r3, pc, #388	@ (adr r3, 80105d8 <__ieee754_pow+0xa40>)
 8010454:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010458:	4680      	mov	r8, r0
 801045a:	4689      	mov	r9, r1
 801045c:	4620      	mov	r0, r4
 801045e:	4629      	mov	r1, r5
 8010460:	f7f0 f896 	bl	8000590 <__aeabi_dmul>
 8010464:	4602      	mov	r2, r0
 8010466:	460b      	mov	r3, r1
 8010468:	4640      	mov	r0, r8
 801046a:	4649      	mov	r1, r9
 801046c:	f7ef feda 	bl	8000224 <__adddf3>
 8010470:	4604      	mov	r4, r0
 8010472:	460d      	mov	r5, r1
 8010474:	4602      	mov	r2, r0
 8010476:	460b      	mov	r3, r1
 8010478:	e9dd 0100 	ldrd	r0, r1, [sp]
 801047c:	f7ef fed2 	bl	8000224 <__adddf3>
 8010480:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010484:	4680      	mov	r8, r0
 8010486:	4689      	mov	r9, r1
 8010488:	f7ef feca 	bl	8000220 <__aeabi_dsub>
 801048c:	4602      	mov	r2, r0
 801048e:	460b      	mov	r3, r1
 8010490:	4620      	mov	r0, r4
 8010492:	4629      	mov	r1, r5
 8010494:	f7ef fec4 	bl	8000220 <__aeabi_dsub>
 8010498:	4642      	mov	r2, r8
 801049a:	4606      	mov	r6, r0
 801049c:	460f      	mov	r7, r1
 801049e:	464b      	mov	r3, r9
 80104a0:	4640      	mov	r0, r8
 80104a2:	4649      	mov	r1, r9
 80104a4:	f7f0 f874 	bl	8000590 <__aeabi_dmul>
 80104a8:	a34d      	add	r3, pc, #308	@ (adr r3, 80105e0 <__ieee754_pow+0xa48>)
 80104aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104ae:	4604      	mov	r4, r0
 80104b0:	460d      	mov	r5, r1
 80104b2:	f7f0 f86d 	bl	8000590 <__aeabi_dmul>
 80104b6:	a34c      	add	r3, pc, #304	@ (adr r3, 80105e8 <__ieee754_pow+0xa50>)
 80104b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104bc:	f7ef feb0 	bl	8000220 <__aeabi_dsub>
 80104c0:	4622      	mov	r2, r4
 80104c2:	462b      	mov	r3, r5
 80104c4:	f7f0 f864 	bl	8000590 <__aeabi_dmul>
 80104c8:	a349      	add	r3, pc, #292	@ (adr r3, 80105f0 <__ieee754_pow+0xa58>)
 80104ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104ce:	f7ef fea9 	bl	8000224 <__adddf3>
 80104d2:	4622      	mov	r2, r4
 80104d4:	462b      	mov	r3, r5
 80104d6:	f7f0 f85b 	bl	8000590 <__aeabi_dmul>
 80104da:	a347      	add	r3, pc, #284	@ (adr r3, 80105f8 <__ieee754_pow+0xa60>)
 80104dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104e0:	f7ef fe9e 	bl	8000220 <__aeabi_dsub>
 80104e4:	4622      	mov	r2, r4
 80104e6:	462b      	mov	r3, r5
 80104e8:	f7f0 f852 	bl	8000590 <__aeabi_dmul>
 80104ec:	a344      	add	r3, pc, #272	@ (adr r3, 8010600 <__ieee754_pow+0xa68>)
 80104ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104f2:	f7ef fe97 	bl	8000224 <__adddf3>
 80104f6:	4622      	mov	r2, r4
 80104f8:	462b      	mov	r3, r5
 80104fa:	f7f0 f849 	bl	8000590 <__aeabi_dmul>
 80104fe:	4602      	mov	r2, r0
 8010500:	460b      	mov	r3, r1
 8010502:	4640      	mov	r0, r8
 8010504:	4649      	mov	r1, r9
 8010506:	f7ef fe8b 	bl	8000220 <__aeabi_dsub>
 801050a:	4604      	mov	r4, r0
 801050c:	460d      	mov	r5, r1
 801050e:	4602      	mov	r2, r0
 8010510:	460b      	mov	r3, r1
 8010512:	4640      	mov	r0, r8
 8010514:	4649      	mov	r1, r9
 8010516:	f7f0 f83b 	bl	8000590 <__aeabi_dmul>
 801051a:	2200      	movs	r2, #0
 801051c:	e9cd 0100 	strd	r0, r1, [sp]
 8010520:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8010524:	4620      	mov	r0, r4
 8010526:	4629      	mov	r1, r5
 8010528:	f7ef fe7a 	bl	8000220 <__aeabi_dsub>
 801052c:	4602      	mov	r2, r0
 801052e:	460b      	mov	r3, r1
 8010530:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010534:	f7f0 f956 	bl	80007e4 <__aeabi_ddiv>
 8010538:	4632      	mov	r2, r6
 801053a:	4604      	mov	r4, r0
 801053c:	460d      	mov	r5, r1
 801053e:	463b      	mov	r3, r7
 8010540:	4640      	mov	r0, r8
 8010542:	4649      	mov	r1, r9
 8010544:	f7f0 f824 	bl	8000590 <__aeabi_dmul>
 8010548:	4632      	mov	r2, r6
 801054a:	463b      	mov	r3, r7
 801054c:	f7ef fe6a 	bl	8000224 <__adddf3>
 8010550:	4602      	mov	r2, r0
 8010552:	460b      	mov	r3, r1
 8010554:	4620      	mov	r0, r4
 8010556:	4629      	mov	r1, r5
 8010558:	f7ef fe62 	bl	8000220 <__aeabi_dsub>
 801055c:	4642      	mov	r2, r8
 801055e:	464b      	mov	r3, r9
 8010560:	f7ef fe5e 	bl	8000220 <__aeabi_dsub>
 8010564:	460b      	mov	r3, r1
 8010566:	4602      	mov	r2, r0
 8010568:	492d      	ldr	r1, [pc, #180]	@ (8010620 <__ieee754_pow+0xa88>)
 801056a:	2000      	movs	r0, #0
 801056c:	f7ef fe58 	bl	8000220 <__aeabi_dsub>
 8010570:	ec41 0b10 	vmov	d0, r0, r1
 8010574:	ee10 3a90 	vmov	r3, s1
 8010578:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 801057c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8010580:	da0b      	bge.n	801059a <__ieee754_pow+0xa02>
 8010582:	4650      	mov	r0, sl
 8010584:	f000 fb20 	bl	8010bc8 <scalbn>
 8010588:	ec51 0b10 	vmov	r0, r1, d0
 801058c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010590:	f7ff bb6d 	b.w	800fc6e <__ieee754_pow+0xd6>
 8010594:	f8dd a010 	ldr.w	sl, [sp, #16]
 8010598:	e73a      	b.n	8010410 <__ieee754_pow+0x878>
 801059a:	ec51 0b10 	vmov	r0, r1, d0
 801059e:	4619      	mov	r1, r3
 80105a0:	e7f4      	b.n	801058c <__ieee754_pow+0x9f4>
 80105a2:	491f      	ldr	r1, [pc, #124]	@ (8010620 <__ieee754_pow+0xa88>)
 80105a4:	2000      	movs	r0, #0
 80105a6:	f7ff bb14 	b.w	800fbd2 <__ieee754_pow+0x3a>
 80105aa:	e9dd 0100 	ldrd	r0, r1, [sp]
 80105ae:	f7ff bb10 	b.w	800fbd2 <__ieee754_pow+0x3a>
 80105b2:	4630      	mov	r0, r6
 80105b4:	4639      	mov	r1, r7
 80105b6:	f7ff bb0c 	b.w	800fbd2 <__ieee754_pow+0x3a>
 80105ba:	460c      	mov	r4, r1
 80105bc:	f7ff bb69 	b.w	800fc92 <__ieee754_pow+0xfa>
 80105c0:	2400      	movs	r4, #0
 80105c2:	f7ff bb4b 	b.w	800fc5c <__ieee754_pow+0xc4>
 80105c6:	bf00      	nop
 80105c8:	00000000 	.word	0x00000000
 80105cc:	3fe62e43 	.word	0x3fe62e43
 80105d0:	fefa39ef 	.word	0xfefa39ef
 80105d4:	3fe62e42 	.word	0x3fe62e42
 80105d8:	0ca86c39 	.word	0x0ca86c39
 80105dc:	be205c61 	.word	0xbe205c61
 80105e0:	72bea4d0 	.word	0x72bea4d0
 80105e4:	3e663769 	.word	0x3e663769
 80105e8:	c5d26bf1 	.word	0xc5d26bf1
 80105ec:	3ebbbd41 	.word	0x3ebbbd41
 80105f0:	af25de2c 	.word	0xaf25de2c
 80105f4:	3f11566a 	.word	0x3f11566a
 80105f8:	16bebd93 	.word	0x16bebd93
 80105fc:	3f66c16c 	.word	0x3f66c16c
 8010600:	5555553e 	.word	0x5555553e
 8010604:	3fc55555 	.word	0x3fc55555
 8010608:	40900000 	.word	0x40900000
 801060c:	4090cbff 	.word	0x4090cbff
 8010610:	3f6f3400 	.word	0x3f6f3400
 8010614:	4090cc00 	.word	0x4090cc00
 8010618:	3fe00000 	.word	0x3fe00000
 801061c:	fff00000 	.word	0xfff00000
 8010620:	3ff00000 	.word	0x3ff00000
 8010624:	652b82fe 	.word	0x652b82fe
 8010628:	3c971547 	.word	0x3c971547

0801062c <fabs>:
 801062c:	ec51 0b10 	vmov	r0, r1, d0
 8010630:	4602      	mov	r2, r0
 8010632:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8010636:	ec43 2b10 	vmov	d0, r2, r3
 801063a:	4770      	bx	lr

0801063c <__kernel_cosf>:
 801063c:	ee10 3a10 	vmov	r3, s0
 8010640:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8010644:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8010648:	eef0 6a40 	vmov.f32	s13, s0
 801064c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8010650:	d204      	bcs.n	801065c <__kernel_cosf+0x20>
 8010652:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 8010656:	ee17 2a90 	vmov	r2, s15
 801065a:	b342      	cbz	r2, 80106ae <__kernel_cosf+0x72>
 801065c:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8010660:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 80106cc <__kernel_cosf+0x90>
 8010664:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 80106d0 <__kernel_cosf+0x94>
 8010668:	4a1a      	ldr	r2, [pc, #104]	@ (80106d4 <__kernel_cosf+0x98>)
 801066a:	eea7 6a27 	vfma.f32	s12, s14, s15
 801066e:	4293      	cmp	r3, r2
 8010670:	eddf 7a19 	vldr	s15, [pc, #100]	@ 80106d8 <__kernel_cosf+0x9c>
 8010674:	eee6 7a07 	vfma.f32	s15, s12, s14
 8010678:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 80106dc <__kernel_cosf+0xa0>
 801067c:	eea7 6a87 	vfma.f32	s12, s15, s14
 8010680:	eddf 7a17 	vldr	s15, [pc, #92]	@ 80106e0 <__kernel_cosf+0xa4>
 8010684:	eee6 7a07 	vfma.f32	s15, s12, s14
 8010688:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 80106e4 <__kernel_cosf+0xa8>
 801068c:	eea7 6a87 	vfma.f32	s12, s15, s14
 8010690:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 8010694:	ee26 6a07 	vmul.f32	s12, s12, s14
 8010698:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 801069c:	eee7 0a06 	vfma.f32	s1, s14, s12
 80106a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80106a4:	d804      	bhi.n	80106b0 <__kernel_cosf+0x74>
 80106a6:	ee77 7ae0 	vsub.f32	s15, s15, s1
 80106aa:	ee30 0a67 	vsub.f32	s0, s0, s15
 80106ae:	4770      	bx	lr
 80106b0:	4a0d      	ldr	r2, [pc, #52]	@ (80106e8 <__kernel_cosf+0xac>)
 80106b2:	4293      	cmp	r3, r2
 80106b4:	bf9a      	itte	ls
 80106b6:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 80106ba:	ee07 3a10 	vmovls	s14, r3
 80106be:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 80106c2:	ee30 0a47 	vsub.f32	s0, s0, s14
 80106c6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80106ca:	e7ec      	b.n	80106a6 <__kernel_cosf+0x6a>
 80106cc:	ad47d74e 	.word	0xad47d74e
 80106d0:	310f74f6 	.word	0x310f74f6
 80106d4:	3e999999 	.word	0x3e999999
 80106d8:	b493f27c 	.word	0xb493f27c
 80106dc:	37d00d01 	.word	0x37d00d01
 80106e0:	bab60b61 	.word	0xbab60b61
 80106e4:	3d2aaaab 	.word	0x3d2aaaab
 80106e8:	3f480000 	.word	0x3f480000

080106ec <__kernel_sinf>:
 80106ec:	ee10 3a10 	vmov	r3, s0
 80106f0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80106f4:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 80106f8:	d204      	bcs.n	8010704 <__kernel_sinf+0x18>
 80106fa:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80106fe:	ee17 3a90 	vmov	r3, s15
 8010702:	b35b      	cbz	r3, 801075c <__kernel_sinf+0x70>
 8010704:	ee20 7a00 	vmul.f32	s14, s0, s0
 8010708:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8010760 <__kernel_sinf+0x74>
 801070c:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 8010764 <__kernel_sinf+0x78>
 8010710:	eea7 6a27 	vfma.f32	s12, s14, s15
 8010714:	eddf 7a14 	vldr	s15, [pc, #80]	@ 8010768 <__kernel_sinf+0x7c>
 8010718:	eee6 7a07 	vfma.f32	s15, s12, s14
 801071c:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 801076c <__kernel_sinf+0x80>
 8010720:	eea7 6a87 	vfma.f32	s12, s15, s14
 8010724:	eddf 7a12 	vldr	s15, [pc, #72]	@ 8010770 <__kernel_sinf+0x84>
 8010728:	ee60 6a07 	vmul.f32	s13, s0, s14
 801072c:	eee6 7a07 	vfma.f32	s15, s12, s14
 8010730:	b930      	cbnz	r0, 8010740 <__kernel_sinf+0x54>
 8010732:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 8010774 <__kernel_sinf+0x88>
 8010736:	eea7 6a27 	vfma.f32	s12, s14, s15
 801073a:	eea6 0a26 	vfma.f32	s0, s12, s13
 801073e:	4770      	bx	lr
 8010740:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8010744:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 8010748:	eee0 7a86 	vfma.f32	s15, s1, s12
 801074c:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8010750:	eddf 7a09 	vldr	s15, [pc, #36]	@ 8010778 <__kernel_sinf+0x8c>
 8010754:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8010758:	ee30 0a60 	vsub.f32	s0, s0, s1
 801075c:	4770      	bx	lr
 801075e:	bf00      	nop
 8010760:	2f2ec9d3 	.word	0x2f2ec9d3
 8010764:	b2d72f34 	.word	0xb2d72f34
 8010768:	3638ef1b 	.word	0x3638ef1b
 801076c:	b9500d01 	.word	0xb9500d01
 8010770:	3c088889 	.word	0x3c088889
 8010774:	be2aaaab 	.word	0xbe2aaaab
 8010778:	3e2aaaab 	.word	0x3e2aaaab

0801077c <__ieee754_acosf>:
 801077c:	b508      	push	{r3, lr}
 801077e:	ee10 3a10 	vmov	r3, s0
 8010782:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8010786:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 801078a:	ed2d 8b0c 	vpush	{d8-d13}
 801078e:	d10a      	bne.n	80107a6 <__ieee754_acosf+0x2a>
 8010790:	ed9f 0a64 	vldr	s0, [pc, #400]	@ 8010924 <__ieee754_acosf+0x1a8>
 8010794:	eddf 7a64 	vldr	s15, [pc, #400]	@ 8010928 <__ieee754_acosf+0x1ac>
 8010798:	2b00      	cmp	r3, #0
 801079a:	bfc8      	it	gt
 801079c:	eeb0 0a67 	vmovgt.f32	s0, s15
 80107a0:	ecbd 8b0c 	vpop	{d8-d13}
 80107a4:	bd08      	pop	{r3, pc}
 80107a6:	d904      	bls.n	80107b2 <__ieee754_acosf+0x36>
 80107a8:	ee30 8a40 	vsub.f32	s16, s0, s0
 80107ac:	ee88 0a08 	vdiv.f32	s0, s16, s16
 80107b0:	e7f6      	b.n	80107a0 <__ieee754_acosf+0x24>
 80107b2:	f1b2 5f7c 	cmp.w	r2, #1056964608	@ 0x3f000000
 80107b6:	d23c      	bcs.n	8010832 <__ieee754_acosf+0xb6>
 80107b8:	f1b2 5f0c 	cmp.w	r2, #587202560	@ 0x23000000
 80107bc:	f240 80af 	bls.w	801091e <__ieee754_acosf+0x1a2>
 80107c0:	ee60 7a00 	vmul.f32	s15, s0, s0
 80107c4:	eddf 6a59 	vldr	s13, [pc, #356]	@ 801092c <__ieee754_acosf+0x1b0>
 80107c8:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 8010930 <__ieee754_acosf+0x1b4>
 80107cc:	ed9f 6a59 	vldr	s12, [pc, #356]	@ 8010934 <__ieee754_acosf+0x1b8>
 80107d0:	eea7 7aa6 	vfma.f32	s14, s15, s13
 80107d4:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8010938 <__ieee754_acosf+0x1bc>
 80107d8:	eee7 6a27 	vfma.f32	s13, s14, s15
 80107dc:	ed9f 7a57 	vldr	s14, [pc, #348]	@ 801093c <__ieee754_acosf+0x1c0>
 80107e0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80107e4:	eddf 6a56 	vldr	s13, [pc, #344]	@ 8010940 <__ieee754_acosf+0x1c4>
 80107e8:	eee7 6a27 	vfma.f32	s13, s14, s15
 80107ec:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 8010944 <__ieee754_acosf+0x1c8>
 80107f0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80107f4:	eddf 6a54 	vldr	s13, [pc, #336]	@ 8010948 <__ieee754_acosf+0x1cc>
 80107f8:	eea7 6aa6 	vfma.f32	s12, s15, s13
 80107fc:	eddf 6a53 	vldr	s13, [pc, #332]	@ 801094c <__ieee754_acosf+0x1d0>
 8010800:	eee6 6a27 	vfma.f32	s13, s12, s15
 8010804:	ed9f 6a52 	vldr	s12, [pc, #328]	@ 8010950 <__ieee754_acosf+0x1d4>
 8010808:	eea6 6aa7 	vfma.f32	s12, s13, s15
 801080c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8010810:	eee6 6a27 	vfma.f32	s13, s12, s15
 8010814:	ee27 7a27 	vmul.f32	s14, s14, s15
 8010818:	eddf 7a4e 	vldr	s15, [pc, #312]	@ 8010954 <__ieee754_acosf+0x1d8>
 801081c:	ee87 6a26 	vdiv.f32	s12, s14, s13
 8010820:	eee0 7a46 	vfms.f32	s15, s0, s12
 8010824:	ee70 7a67 	vsub.f32	s15, s0, s15
 8010828:	ed9f 0a4b 	vldr	s0, [pc, #300]	@ 8010958 <__ieee754_acosf+0x1dc>
 801082c:	ee30 0a67 	vsub.f32	s0, s0, s15
 8010830:	e7b6      	b.n	80107a0 <__ieee754_acosf+0x24>
 8010832:	2b00      	cmp	r3, #0
 8010834:	eddf da3d 	vldr	s27, [pc, #244]	@ 801092c <__ieee754_acosf+0x1b0>
 8010838:	eddf ca3d 	vldr	s25, [pc, #244]	@ 8010930 <__ieee754_acosf+0x1b4>
 801083c:	ed9f ca3e 	vldr	s24, [pc, #248]	@ 8010938 <__ieee754_acosf+0x1bc>
 8010840:	eddf ba3e 	vldr	s23, [pc, #248]	@ 801093c <__ieee754_acosf+0x1c0>
 8010844:	ed9f ba3e 	vldr	s22, [pc, #248]	@ 8010940 <__ieee754_acosf+0x1c4>
 8010848:	eddf 8a3e 	vldr	s17, [pc, #248]	@ 8010944 <__ieee754_acosf+0x1c8>
 801084c:	ed9f da3e 	vldr	s26, [pc, #248]	@ 8010948 <__ieee754_acosf+0x1cc>
 8010850:	eddf aa38 	vldr	s21, [pc, #224]	@ 8010934 <__ieee754_acosf+0x1b8>
 8010854:	ed9f aa3d 	vldr	s20, [pc, #244]	@ 801094c <__ieee754_acosf+0x1d0>
 8010858:	eddf 9a3d 	vldr	s19, [pc, #244]	@ 8010950 <__ieee754_acosf+0x1d4>
 801085c:	eeb7 9a00 	vmov.f32	s18, #112	@ 0x3f800000  1.0
 8010860:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8010864:	da28      	bge.n	80108b8 <__ieee754_acosf+0x13c>
 8010866:	ee30 8a09 	vadd.f32	s16, s0, s18
 801086a:	ee28 0a27 	vmul.f32	s0, s16, s15
 801086e:	eee0 ca2d 	vfma.f32	s25, s0, s27
 8010872:	eee0 aa0d 	vfma.f32	s21, s0, s26
 8010876:	eeac ca80 	vfma.f32	s24, s25, s0
 801087a:	eeaa aa80 	vfma.f32	s20, s21, s0
 801087e:	eeec ba00 	vfma.f32	s23, s24, s0
 8010882:	eeea 9a00 	vfma.f32	s19, s20, s0
 8010886:	eeab ba80 	vfma.f32	s22, s23, s0
 801088a:	eea9 9a80 	vfma.f32	s18, s19, s0
 801088e:	eeeb 8a00 	vfma.f32	s17, s22, s0
 8010892:	ee68 8a80 	vmul.f32	s17, s17, s0
 8010896:	f7ff f955 	bl	800fb44 <__ieee754_sqrtf>
 801089a:	ee88 7a89 	vdiv.f32	s14, s17, s18
 801089e:	eddf 7a2f 	vldr	s15, [pc, #188]	@ 801095c <__ieee754_acosf+0x1e0>
 80108a2:	eee0 7a07 	vfma.f32	s15, s0, s14
 80108a6:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 80108aa:	ee77 7a80 	vadd.f32	s15, s15, s0
 80108ae:	ed9f 0a2c 	vldr	s0, [pc, #176]	@ 8010960 <__ieee754_acosf+0x1e4>
 80108b2:	eea7 0ac7 	vfms.f32	s0, s15, s14
 80108b6:	e773      	b.n	80107a0 <__ieee754_acosf+0x24>
 80108b8:	ee39 8a40 	vsub.f32	s16, s18, s0
 80108bc:	ee28 8a27 	vmul.f32	s16, s16, s15
 80108c0:	eeb0 0a48 	vmov.f32	s0, s16
 80108c4:	f7ff f93e 	bl	800fb44 <__ieee754_sqrtf>
 80108c8:	eee8 ca2d 	vfma.f32	s25, s16, s27
 80108cc:	eee8 aa0d 	vfma.f32	s21, s16, s26
 80108d0:	eeac ca88 	vfma.f32	s24, s25, s16
 80108d4:	eeaa aa88 	vfma.f32	s20, s21, s16
 80108d8:	eeec ba08 	vfma.f32	s23, s24, s16
 80108dc:	ee10 3a10 	vmov	r3, s0
 80108e0:	eeab ba88 	vfma.f32	s22, s23, s16
 80108e4:	f36f 030b 	bfc	r3, #0, #12
 80108e8:	eeea 9a08 	vfma.f32	s19, s20, s16
 80108ec:	ee07 3a90 	vmov	s15, r3
 80108f0:	eeeb 8a08 	vfma.f32	s17, s22, s16
 80108f4:	eeb0 6a48 	vmov.f32	s12, s16
 80108f8:	eea7 6ae7 	vfms.f32	s12, s15, s15
 80108fc:	eea9 9a88 	vfma.f32	s18, s19, s16
 8010900:	ee70 6a27 	vadd.f32	s13, s0, s15
 8010904:	ee68 8a88 	vmul.f32	s17, s17, s16
 8010908:	ee86 7a26 	vdiv.f32	s14, s12, s13
 801090c:	eec8 6a89 	vdiv.f32	s13, s17, s18
 8010910:	eea0 7a26 	vfma.f32	s14, s0, s13
 8010914:	ee37 0a87 	vadd.f32	s0, s15, s14
 8010918:	ee30 0a00 	vadd.f32	s0, s0, s0
 801091c:	e740      	b.n	80107a0 <__ieee754_acosf+0x24>
 801091e:	ed9f 0a11 	vldr	s0, [pc, #68]	@ 8010964 <__ieee754_acosf+0x1e8>
 8010922:	e73d      	b.n	80107a0 <__ieee754_acosf+0x24>
 8010924:	40490fdb 	.word	0x40490fdb
 8010928:	00000000 	.word	0x00000000
 801092c:	3811ef08 	.word	0x3811ef08
 8010930:	3a4f7f04 	.word	0x3a4f7f04
 8010934:	bf303361 	.word	0xbf303361
 8010938:	bd241146 	.word	0xbd241146
 801093c:	3e4e0aa8 	.word	0x3e4e0aa8
 8010940:	bea6b090 	.word	0xbea6b090
 8010944:	3e2aaaab 	.word	0x3e2aaaab
 8010948:	3d9dc62e 	.word	0x3d9dc62e
 801094c:	4001572d 	.word	0x4001572d
 8010950:	c019d139 	.word	0xc019d139
 8010954:	33a22168 	.word	0x33a22168
 8010958:	3fc90fda 	.word	0x3fc90fda
 801095c:	b3a22168 	.word	0xb3a22168
 8010960:	40490fda 	.word	0x40490fda
 8010964:	3fc90fdb 	.word	0x3fc90fdb

08010968 <__ieee754_rem_pio2f>:
 8010968:	b5f0      	push	{r4, r5, r6, r7, lr}
 801096a:	ee10 6a10 	vmov	r6, s0
 801096e:	4b88      	ldr	r3, [pc, #544]	@ (8010b90 <__ieee754_rem_pio2f+0x228>)
 8010970:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 8010974:	429d      	cmp	r5, r3
 8010976:	b087      	sub	sp, #28
 8010978:	4604      	mov	r4, r0
 801097a:	d805      	bhi.n	8010988 <__ieee754_rem_pio2f+0x20>
 801097c:	2300      	movs	r3, #0
 801097e:	ed80 0a00 	vstr	s0, [r0]
 8010982:	6043      	str	r3, [r0, #4]
 8010984:	2000      	movs	r0, #0
 8010986:	e022      	b.n	80109ce <__ieee754_rem_pio2f+0x66>
 8010988:	4b82      	ldr	r3, [pc, #520]	@ (8010b94 <__ieee754_rem_pio2f+0x22c>)
 801098a:	429d      	cmp	r5, r3
 801098c:	d83a      	bhi.n	8010a04 <__ieee754_rem_pio2f+0x9c>
 801098e:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8010992:	2e00      	cmp	r6, #0
 8010994:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 8010b98 <__ieee754_rem_pio2f+0x230>
 8010998:	4a80      	ldr	r2, [pc, #512]	@ (8010b9c <__ieee754_rem_pio2f+0x234>)
 801099a:	f023 030f 	bic.w	r3, r3, #15
 801099e:	dd18      	ble.n	80109d2 <__ieee754_rem_pio2f+0x6a>
 80109a0:	4293      	cmp	r3, r2
 80109a2:	ee70 7a47 	vsub.f32	s15, s0, s14
 80109a6:	bf09      	itett	eq
 80109a8:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 8010ba0 <__ieee754_rem_pio2f+0x238>
 80109ac:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 8010ba4 <__ieee754_rem_pio2f+0x23c>
 80109b0:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 8010ba8 <__ieee754_rem_pio2f+0x240>
 80109b4:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 80109b8:	ee37 7ae6 	vsub.f32	s14, s15, s13
 80109bc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80109c0:	ed80 7a00 	vstr	s14, [r0]
 80109c4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80109c8:	edc0 7a01 	vstr	s15, [r0, #4]
 80109cc:	2001      	movs	r0, #1
 80109ce:	b007      	add	sp, #28
 80109d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80109d2:	4293      	cmp	r3, r2
 80109d4:	ee70 7a07 	vadd.f32	s15, s0, s14
 80109d8:	bf09      	itett	eq
 80109da:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 8010ba0 <__ieee754_rem_pio2f+0x238>
 80109de:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 8010ba4 <__ieee754_rem_pio2f+0x23c>
 80109e2:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 8010ba8 <__ieee754_rem_pio2f+0x240>
 80109e6:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 80109ea:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80109ee:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80109f2:	ed80 7a00 	vstr	s14, [r0]
 80109f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80109fa:	edc0 7a01 	vstr	s15, [r0, #4]
 80109fe:	f04f 30ff 	mov.w	r0, #4294967295
 8010a02:	e7e4      	b.n	80109ce <__ieee754_rem_pio2f+0x66>
 8010a04:	4b69      	ldr	r3, [pc, #420]	@ (8010bac <__ieee754_rem_pio2f+0x244>)
 8010a06:	429d      	cmp	r5, r3
 8010a08:	d873      	bhi.n	8010af2 <__ieee754_rem_pio2f+0x18a>
 8010a0a:	f7fe ff65 	bl	800f8d8 <fabsf>
 8010a0e:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 8010bb0 <__ieee754_rem_pio2f+0x248>
 8010a12:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8010a16:	eee0 7a07 	vfma.f32	s15, s0, s14
 8010a1a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010a1e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8010a22:	ee17 0a90 	vmov	r0, s15
 8010a26:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8010b98 <__ieee754_rem_pio2f+0x230>
 8010a2a:	eea7 0a67 	vfms.f32	s0, s14, s15
 8010a2e:	281f      	cmp	r0, #31
 8010a30:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8010ba4 <__ieee754_rem_pio2f+0x23c>
 8010a34:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010a38:	eeb1 6a47 	vneg.f32	s12, s14
 8010a3c:	ee70 6a67 	vsub.f32	s13, s0, s15
 8010a40:	ee16 1a90 	vmov	r1, s13
 8010a44:	dc09      	bgt.n	8010a5a <__ieee754_rem_pio2f+0xf2>
 8010a46:	4a5b      	ldr	r2, [pc, #364]	@ (8010bb4 <__ieee754_rem_pio2f+0x24c>)
 8010a48:	1e47      	subs	r7, r0, #1
 8010a4a:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8010a4e:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 8010a52:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8010a56:	4293      	cmp	r3, r2
 8010a58:	d107      	bne.n	8010a6a <__ieee754_rem_pio2f+0x102>
 8010a5a:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 8010a5e:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 8010a62:	2a08      	cmp	r2, #8
 8010a64:	ea4f 53e5 	mov.w	r3, r5, asr #23
 8010a68:	dc14      	bgt.n	8010a94 <__ieee754_rem_pio2f+0x12c>
 8010a6a:	6021      	str	r1, [r4, #0]
 8010a6c:	ed94 7a00 	vldr	s14, [r4]
 8010a70:	ee30 0a47 	vsub.f32	s0, s0, s14
 8010a74:	2e00      	cmp	r6, #0
 8010a76:	ee30 0a67 	vsub.f32	s0, s0, s15
 8010a7a:	ed84 0a01 	vstr	s0, [r4, #4]
 8010a7e:	daa6      	bge.n	80109ce <__ieee754_rem_pio2f+0x66>
 8010a80:	eeb1 7a47 	vneg.f32	s14, s14
 8010a84:	eeb1 0a40 	vneg.f32	s0, s0
 8010a88:	ed84 7a00 	vstr	s14, [r4]
 8010a8c:	ed84 0a01 	vstr	s0, [r4, #4]
 8010a90:	4240      	negs	r0, r0
 8010a92:	e79c      	b.n	80109ce <__ieee754_rem_pio2f+0x66>
 8010a94:	eddf 5a42 	vldr	s11, [pc, #264]	@ 8010ba0 <__ieee754_rem_pio2f+0x238>
 8010a98:	eef0 6a40 	vmov.f32	s13, s0
 8010a9c:	eee6 6a25 	vfma.f32	s13, s12, s11
 8010aa0:	ee70 7a66 	vsub.f32	s15, s0, s13
 8010aa4:	eee6 7a25 	vfma.f32	s15, s12, s11
 8010aa8:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8010ba8 <__ieee754_rem_pio2f+0x240>
 8010aac:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8010ab0:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8010ab4:	ee15 2a90 	vmov	r2, s11
 8010ab8:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8010abc:	1a5b      	subs	r3, r3, r1
 8010abe:	2b19      	cmp	r3, #25
 8010ac0:	dc04      	bgt.n	8010acc <__ieee754_rem_pio2f+0x164>
 8010ac2:	edc4 5a00 	vstr	s11, [r4]
 8010ac6:	eeb0 0a66 	vmov.f32	s0, s13
 8010aca:	e7cf      	b.n	8010a6c <__ieee754_rem_pio2f+0x104>
 8010acc:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 8010bb8 <__ieee754_rem_pio2f+0x250>
 8010ad0:	eeb0 0a66 	vmov.f32	s0, s13
 8010ad4:	eea6 0a25 	vfma.f32	s0, s12, s11
 8010ad8:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8010adc:	eddf 6a37 	vldr	s13, [pc, #220]	@ 8010bbc <__ieee754_rem_pio2f+0x254>
 8010ae0:	eee6 7a25 	vfma.f32	s15, s12, s11
 8010ae4:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8010ae8:	ee30 7a67 	vsub.f32	s14, s0, s15
 8010aec:	ed84 7a00 	vstr	s14, [r4]
 8010af0:	e7bc      	b.n	8010a6c <__ieee754_rem_pio2f+0x104>
 8010af2:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 8010af6:	d306      	bcc.n	8010b06 <__ieee754_rem_pio2f+0x19e>
 8010af8:	ee70 7a40 	vsub.f32	s15, s0, s0
 8010afc:	edc0 7a01 	vstr	s15, [r0, #4]
 8010b00:	edc0 7a00 	vstr	s15, [r0]
 8010b04:	e73e      	b.n	8010984 <__ieee754_rem_pio2f+0x1c>
 8010b06:	15ea      	asrs	r2, r5, #23
 8010b08:	3a86      	subs	r2, #134	@ 0x86
 8010b0a:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8010b0e:	ee07 3a90 	vmov	s15, r3
 8010b12:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8010b16:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 8010bc0 <__ieee754_rem_pio2f+0x258>
 8010b1a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8010b1e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010b22:	ed8d 7a03 	vstr	s14, [sp, #12]
 8010b26:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8010b2a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8010b2e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8010b32:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010b36:	ed8d 7a04 	vstr	s14, [sp, #16]
 8010b3a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8010b3e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8010b42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b46:	edcd 7a05 	vstr	s15, [sp, #20]
 8010b4a:	d11e      	bne.n	8010b8a <__ieee754_rem_pio2f+0x222>
 8010b4c:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8010b50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b54:	bf0c      	ite	eq
 8010b56:	2301      	moveq	r3, #1
 8010b58:	2302      	movne	r3, #2
 8010b5a:	491a      	ldr	r1, [pc, #104]	@ (8010bc4 <__ieee754_rem_pio2f+0x25c>)
 8010b5c:	9101      	str	r1, [sp, #4]
 8010b5e:	2102      	movs	r1, #2
 8010b60:	9100      	str	r1, [sp, #0]
 8010b62:	a803      	add	r0, sp, #12
 8010b64:	4621      	mov	r1, r4
 8010b66:	f000 f94d 	bl	8010e04 <__kernel_rem_pio2f>
 8010b6a:	2e00      	cmp	r6, #0
 8010b6c:	f6bf af2f 	bge.w	80109ce <__ieee754_rem_pio2f+0x66>
 8010b70:	edd4 7a00 	vldr	s15, [r4]
 8010b74:	eef1 7a67 	vneg.f32	s15, s15
 8010b78:	edc4 7a00 	vstr	s15, [r4]
 8010b7c:	edd4 7a01 	vldr	s15, [r4, #4]
 8010b80:	eef1 7a67 	vneg.f32	s15, s15
 8010b84:	edc4 7a01 	vstr	s15, [r4, #4]
 8010b88:	e782      	b.n	8010a90 <__ieee754_rem_pio2f+0x128>
 8010b8a:	2303      	movs	r3, #3
 8010b8c:	e7e5      	b.n	8010b5a <__ieee754_rem_pio2f+0x1f2>
 8010b8e:	bf00      	nop
 8010b90:	3f490fd8 	.word	0x3f490fd8
 8010b94:	4016cbe3 	.word	0x4016cbe3
 8010b98:	3fc90f80 	.word	0x3fc90f80
 8010b9c:	3fc90fd0 	.word	0x3fc90fd0
 8010ba0:	37354400 	.word	0x37354400
 8010ba4:	37354443 	.word	0x37354443
 8010ba8:	2e85a308 	.word	0x2e85a308
 8010bac:	43490f80 	.word	0x43490f80
 8010bb0:	3f22f984 	.word	0x3f22f984
 8010bb4:	08011400 	.word	0x08011400
 8010bb8:	2e85a300 	.word	0x2e85a300
 8010bbc:	248d3132 	.word	0x248d3132
 8010bc0:	43800000 	.word	0x43800000
 8010bc4:	08011480 	.word	0x08011480

08010bc8 <scalbn>:
 8010bc8:	b570      	push	{r4, r5, r6, lr}
 8010bca:	ec55 4b10 	vmov	r4, r5, d0
 8010bce:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8010bd2:	4606      	mov	r6, r0
 8010bd4:	462b      	mov	r3, r5
 8010bd6:	b991      	cbnz	r1, 8010bfe <scalbn+0x36>
 8010bd8:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8010bdc:	4323      	orrs	r3, r4
 8010bde:	d03b      	beq.n	8010c58 <scalbn+0x90>
 8010be0:	4b33      	ldr	r3, [pc, #204]	@ (8010cb0 <scalbn+0xe8>)
 8010be2:	4620      	mov	r0, r4
 8010be4:	4629      	mov	r1, r5
 8010be6:	2200      	movs	r2, #0
 8010be8:	f7ef fcd2 	bl	8000590 <__aeabi_dmul>
 8010bec:	4b31      	ldr	r3, [pc, #196]	@ (8010cb4 <scalbn+0xec>)
 8010bee:	429e      	cmp	r6, r3
 8010bf0:	4604      	mov	r4, r0
 8010bf2:	460d      	mov	r5, r1
 8010bf4:	da0f      	bge.n	8010c16 <scalbn+0x4e>
 8010bf6:	a326      	add	r3, pc, #152	@ (adr r3, 8010c90 <scalbn+0xc8>)
 8010bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010bfc:	e01e      	b.n	8010c3c <scalbn+0x74>
 8010bfe:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8010c02:	4291      	cmp	r1, r2
 8010c04:	d10b      	bne.n	8010c1e <scalbn+0x56>
 8010c06:	4622      	mov	r2, r4
 8010c08:	4620      	mov	r0, r4
 8010c0a:	4629      	mov	r1, r5
 8010c0c:	f7ef fb0a 	bl	8000224 <__adddf3>
 8010c10:	4604      	mov	r4, r0
 8010c12:	460d      	mov	r5, r1
 8010c14:	e020      	b.n	8010c58 <scalbn+0x90>
 8010c16:	460b      	mov	r3, r1
 8010c18:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8010c1c:	3936      	subs	r1, #54	@ 0x36
 8010c1e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8010c22:	4296      	cmp	r6, r2
 8010c24:	dd0d      	ble.n	8010c42 <scalbn+0x7a>
 8010c26:	2d00      	cmp	r5, #0
 8010c28:	a11b      	add	r1, pc, #108	@ (adr r1, 8010c98 <scalbn+0xd0>)
 8010c2a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010c2e:	da02      	bge.n	8010c36 <scalbn+0x6e>
 8010c30:	a11b      	add	r1, pc, #108	@ (adr r1, 8010ca0 <scalbn+0xd8>)
 8010c32:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010c36:	a318      	add	r3, pc, #96	@ (adr r3, 8010c98 <scalbn+0xd0>)
 8010c38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c3c:	f7ef fca8 	bl	8000590 <__aeabi_dmul>
 8010c40:	e7e6      	b.n	8010c10 <scalbn+0x48>
 8010c42:	1872      	adds	r2, r6, r1
 8010c44:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8010c48:	428a      	cmp	r2, r1
 8010c4a:	dcec      	bgt.n	8010c26 <scalbn+0x5e>
 8010c4c:	2a00      	cmp	r2, #0
 8010c4e:	dd06      	ble.n	8010c5e <scalbn+0x96>
 8010c50:	f36f 531e 	bfc	r3, #20, #11
 8010c54:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8010c58:	ec45 4b10 	vmov	d0, r4, r5
 8010c5c:	bd70      	pop	{r4, r5, r6, pc}
 8010c5e:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8010c62:	da08      	bge.n	8010c76 <scalbn+0xae>
 8010c64:	2d00      	cmp	r5, #0
 8010c66:	a10a      	add	r1, pc, #40	@ (adr r1, 8010c90 <scalbn+0xc8>)
 8010c68:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010c6c:	dac3      	bge.n	8010bf6 <scalbn+0x2e>
 8010c6e:	a10e      	add	r1, pc, #56	@ (adr r1, 8010ca8 <scalbn+0xe0>)
 8010c70:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010c74:	e7bf      	b.n	8010bf6 <scalbn+0x2e>
 8010c76:	3236      	adds	r2, #54	@ 0x36
 8010c78:	f36f 531e 	bfc	r3, #20, #11
 8010c7c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8010c80:	4620      	mov	r0, r4
 8010c82:	4b0d      	ldr	r3, [pc, #52]	@ (8010cb8 <scalbn+0xf0>)
 8010c84:	4629      	mov	r1, r5
 8010c86:	2200      	movs	r2, #0
 8010c88:	e7d8      	b.n	8010c3c <scalbn+0x74>
 8010c8a:	bf00      	nop
 8010c8c:	f3af 8000 	nop.w
 8010c90:	c2f8f359 	.word	0xc2f8f359
 8010c94:	01a56e1f 	.word	0x01a56e1f
 8010c98:	8800759c 	.word	0x8800759c
 8010c9c:	7e37e43c 	.word	0x7e37e43c
 8010ca0:	8800759c 	.word	0x8800759c
 8010ca4:	fe37e43c 	.word	0xfe37e43c
 8010ca8:	c2f8f359 	.word	0xc2f8f359
 8010cac:	81a56e1f 	.word	0x81a56e1f
 8010cb0:	43500000 	.word	0x43500000
 8010cb4:	ffff3cb0 	.word	0xffff3cb0
 8010cb8:	3c900000 	.word	0x3c900000

08010cbc <with_errno>:
 8010cbc:	b510      	push	{r4, lr}
 8010cbe:	ed2d 8b02 	vpush	{d8}
 8010cc2:	eeb0 8a40 	vmov.f32	s16, s0
 8010cc6:	eef0 8a60 	vmov.f32	s17, s1
 8010cca:	4604      	mov	r4, r0
 8010ccc:	f7fe fca2 	bl	800f614 <__errno>
 8010cd0:	eeb0 0a48 	vmov.f32	s0, s16
 8010cd4:	eef0 0a68 	vmov.f32	s1, s17
 8010cd8:	ecbd 8b02 	vpop	{d8}
 8010cdc:	6004      	str	r4, [r0, #0]
 8010cde:	bd10      	pop	{r4, pc}

08010ce0 <xflow>:
 8010ce0:	4603      	mov	r3, r0
 8010ce2:	b507      	push	{r0, r1, r2, lr}
 8010ce4:	ec51 0b10 	vmov	r0, r1, d0
 8010ce8:	b183      	cbz	r3, 8010d0c <xflow+0x2c>
 8010cea:	4602      	mov	r2, r0
 8010cec:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8010cf0:	e9cd 2300 	strd	r2, r3, [sp]
 8010cf4:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010cf8:	f7ef fc4a 	bl	8000590 <__aeabi_dmul>
 8010cfc:	ec41 0b10 	vmov	d0, r0, r1
 8010d00:	2022      	movs	r0, #34	@ 0x22
 8010d02:	b003      	add	sp, #12
 8010d04:	f85d eb04 	ldr.w	lr, [sp], #4
 8010d08:	f7ff bfd8 	b.w	8010cbc <with_errno>
 8010d0c:	4602      	mov	r2, r0
 8010d0e:	460b      	mov	r3, r1
 8010d10:	e7ee      	b.n	8010cf0 <xflow+0x10>
 8010d12:	0000      	movs	r0, r0
 8010d14:	0000      	movs	r0, r0
	...

08010d18 <__math_uflow>:
 8010d18:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8010d20 <__math_uflow+0x8>
 8010d1c:	f7ff bfe0 	b.w	8010ce0 <xflow>
 8010d20:	00000000 	.word	0x00000000
 8010d24:	10000000 	.word	0x10000000

08010d28 <__math_oflow>:
 8010d28:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8010d30 <__math_oflow+0x8>
 8010d2c:	f7ff bfd8 	b.w	8010ce0 <xflow>
 8010d30:	00000000 	.word	0x00000000
 8010d34:	70000000 	.word	0x70000000

08010d38 <scalbnf>:
 8010d38:	ee10 3a10 	vmov	r3, s0
 8010d3c:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8010d40:	d02b      	beq.n	8010d9a <scalbnf+0x62>
 8010d42:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8010d46:	d302      	bcc.n	8010d4e <scalbnf+0x16>
 8010d48:	ee30 0a00 	vadd.f32	s0, s0, s0
 8010d4c:	4770      	bx	lr
 8010d4e:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 8010d52:	d123      	bne.n	8010d9c <scalbnf+0x64>
 8010d54:	4b24      	ldr	r3, [pc, #144]	@ (8010de8 <scalbnf+0xb0>)
 8010d56:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8010dec <scalbnf+0xb4>
 8010d5a:	4298      	cmp	r0, r3
 8010d5c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8010d60:	db17      	blt.n	8010d92 <scalbnf+0x5a>
 8010d62:	ee10 3a10 	vmov	r3, s0
 8010d66:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8010d6a:	3a19      	subs	r2, #25
 8010d6c:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8010d70:	4288      	cmp	r0, r1
 8010d72:	dd15      	ble.n	8010da0 <scalbnf+0x68>
 8010d74:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 8010df0 <scalbnf+0xb8>
 8010d78:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8010df4 <scalbnf+0xbc>
 8010d7c:	ee10 3a10 	vmov	r3, s0
 8010d80:	eeb0 7a67 	vmov.f32	s14, s15
 8010d84:	2b00      	cmp	r3, #0
 8010d86:	bfb8      	it	lt
 8010d88:	eef0 7a66 	vmovlt.f32	s15, s13
 8010d8c:	ee27 0a87 	vmul.f32	s0, s15, s14
 8010d90:	4770      	bx	lr
 8010d92:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8010df8 <scalbnf+0xc0>
 8010d96:	ee27 0a80 	vmul.f32	s0, s15, s0
 8010d9a:	4770      	bx	lr
 8010d9c:	0dd2      	lsrs	r2, r2, #23
 8010d9e:	e7e5      	b.n	8010d6c <scalbnf+0x34>
 8010da0:	4410      	add	r0, r2
 8010da2:	28fe      	cmp	r0, #254	@ 0xfe
 8010da4:	dce6      	bgt.n	8010d74 <scalbnf+0x3c>
 8010da6:	2800      	cmp	r0, #0
 8010da8:	dd06      	ble.n	8010db8 <scalbnf+0x80>
 8010daa:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8010dae:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8010db2:	ee00 3a10 	vmov	s0, r3
 8010db6:	4770      	bx	lr
 8010db8:	f110 0f16 	cmn.w	r0, #22
 8010dbc:	da09      	bge.n	8010dd2 <scalbnf+0x9a>
 8010dbe:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8010df8 <scalbnf+0xc0>
 8010dc2:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8010dfc <scalbnf+0xc4>
 8010dc6:	ee10 3a10 	vmov	r3, s0
 8010dca:	eeb0 7a67 	vmov.f32	s14, s15
 8010dce:	2b00      	cmp	r3, #0
 8010dd0:	e7d9      	b.n	8010d86 <scalbnf+0x4e>
 8010dd2:	3019      	adds	r0, #25
 8010dd4:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8010dd8:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8010ddc:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8010e00 <scalbnf+0xc8>
 8010de0:	ee07 3a90 	vmov	s15, r3
 8010de4:	e7d7      	b.n	8010d96 <scalbnf+0x5e>
 8010de6:	bf00      	nop
 8010de8:	ffff3cb0 	.word	0xffff3cb0
 8010dec:	4c000000 	.word	0x4c000000
 8010df0:	7149f2ca 	.word	0x7149f2ca
 8010df4:	f149f2ca 	.word	0xf149f2ca
 8010df8:	0da24260 	.word	0x0da24260
 8010dfc:	8da24260 	.word	0x8da24260
 8010e00:	33000000 	.word	0x33000000

08010e04 <__kernel_rem_pio2f>:
 8010e04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e08:	ed2d 8b04 	vpush	{d8-d9}
 8010e0c:	b0d9      	sub	sp, #356	@ 0x164
 8010e0e:	4690      	mov	r8, r2
 8010e10:	9001      	str	r0, [sp, #4]
 8010e12:	4ab6      	ldr	r2, [pc, #728]	@ (80110ec <__kernel_rem_pio2f+0x2e8>)
 8010e14:	9866      	ldr	r0, [sp, #408]	@ 0x198
 8010e16:	f118 0f04 	cmn.w	r8, #4
 8010e1a:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 8010e1e:	460f      	mov	r7, r1
 8010e20:	f103 3bff 	add.w	fp, r3, #4294967295
 8010e24:	db26      	blt.n	8010e74 <__kernel_rem_pio2f+0x70>
 8010e26:	f1b8 0203 	subs.w	r2, r8, #3
 8010e2a:	bf48      	it	mi
 8010e2c:	f108 0204 	addmi.w	r2, r8, #4
 8010e30:	10d2      	asrs	r2, r2, #3
 8010e32:	1c55      	adds	r5, r2, #1
 8010e34:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8010e36:	ed9f 7ab1 	vldr	s14, [pc, #708]	@ 80110fc <__kernel_rem_pio2f+0x2f8>
 8010e3a:	00e8      	lsls	r0, r5, #3
 8010e3c:	eba2 060b 	sub.w	r6, r2, fp
 8010e40:	9002      	str	r0, [sp, #8]
 8010e42:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 8010e46:	eb0a 0c0b 	add.w	ip, sl, fp
 8010e4a:	ac1c      	add	r4, sp, #112	@ 0x70
 8010e4c:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 8010e50:	2000      	movs	r0, #0
 8010e52:	4560      	cmp	r0, ip
 8010e54:	dd10      	ble.n	8010e78 <__kernel_rem_pio2f+0x74>
 8010e56:	a91c      	add	r1, sp, #112	@ 0x70
 8010e58:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 8010e5c:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 8010e60:	2600      	movs	r6, #0
 8010e62:	4556      	cmp	r6, sl
 8010e64:	dc24      	bgt.n	8010eb0 <__kernel_rem_pio2f+0xac>
 8010e66:	f8dd e004 	ldr.w	lr, [sp, #4]
 8010e6a:	eddf 7aa4 	vldr	s15, [pc, #656]	@ 80110fc <__kernel_rem_pio2f+0x2f8>
 8010e6e:	4684      	mov	ip, r0
 8010e70:	2400      	movs	r4, #0
 8010e72:	e016      	b.n	8010ea2 <__kernel_rem_pio2f+0x9e>
 8010e74:	2200      	movs	r2, #0
 8010e76:	e7dc      	b.n	8010e32 <__kernel_rem_pio2f+0x2e>
 8010e78:	42c6      	cmn	r6, r0
 8010e7a:	bf5d      	ittte	pl
 8010e7c:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 8010e80:	ee07 1a90 	vmovpl	s15, r1
 8010e84:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8010e88:	eef0 7a47 	vmovmi.f32	s15, s14
 8010e8c:	ece4 7a01 	vstmia	r4!, {s15}
 8010e90:	3001      	adds	r0, #1
 8010e92:	e7de      	b.n	8010e52 <__kernel_rem_pio2f+0x4e>
 8010e94:	ecfe 6a01 	vldmia	lr!, {s13}
 8010e98:	ed3c 7a01 	vldmdb	ip!, {s14}
 8010e9c:	eee6 7a87 	vfma.f32	s15, s13, s14
 8010ea0:	3401      	adds	r4, #1
 8010ea2:	455c      	cmp	r4, fp
 8010ea4:	ddf6      	ble.n	8010e94 <__kernel_rem_pio2f+0x90>
 8010ea6:	ece9 7a01 	vstmia	r9!, {s15}
 8010eaa:	3601      	adds	r6, #1
 8010eac:	3004      	adds	r0, #4
 8010eae:	e7d8      	b.n	8010e62 <__kernel_rem_pio2f+0x5e>
 8010eb0:	a908      	add	r1, sp, #32
 8010eb2:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010eb6:	9104      	str	r1, [sp, #16]
 8010eb8:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8010eba:	eddf 8a8f 	vldr	s17, [pc, #572]	@ 80110f8 <__kernel_rem_pio2f+0x2f4>
 8010ebe:	ed9f 9a8d 	vldr	s18, [pc, #564]	@ 80110f4 <__kernel_rem_pio2f+0x2f0>
 8010ec2:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8010ec6:	9203      	str	r2, [sp, #12]
 8010ec8:	4654      	mov	r4, sl
 8010eca:	00a2      	lsls	r2, r4, #2
 8010ecc:	9205      	str	r2, [sp, #20]
 8010ece:	aa58      	add	r2, sp, #352	@ 0x160
 8010ed0:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8010ed4:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 8010ed8:	a944      	add	r1, sp, #272	@ 0x110
 8010eda:	aa08      	add	r2, sp, #32
 8010edc:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 8010ee0:	4694      	mov	ip, r2
 8010ee2:	4626      	mov	r6, r4
 8010ee4:	2e00      	cmp	r6, #0
 8010ee6:	dc4c      	bgt.n	8010f82 <__kernel_rem_pio2f+0x17e>
 8010ee8:	4628      	mov	r0, r5
 8010eea:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8010eee:	f7ff ff23 	bl	8010d38 <scalbnf>
 8010ef2:	eeb0 8a40 	vmov.f32	s16, s0
 8010ef6:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 8010efa:	ee28 0a00 	vmul.f32	s0, s16, s0
 8010efe:	f000 f9e9 	bl	80112d4 <floorf>
 8010f02:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 8010f06:	eea0 8a67 	vfms.f32	s16, s0, s15
 8010f0a:	2d00      	cmp	r5, #0
 8010f0c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010f10:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8010f14:	ee17 9a90 	vmov	r9, s15
 8010f18:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010f1c:	ee38 8a67 	vsub.f32	s16, s16, s15
 8010f20:	dd41      	ble.n	8010fa6 <__kernel_rem_pio2f+0x1a2>
 8010f22:	f104 3cff 	add.w	ip, r4, #4294967295
 8010f26:	a908      	add	r1, sp, #32
 8010f28:	f1c5 0e08 	rsb	lr, r5, #8
 8010f2c:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 8010f30:	fa46 f00e 	asr.w	r0, r6, lr
 8010f34:	4481      	add	r9, r0
 8010f36:	fa00 f00e 	lsl.w	r0, r0, lr
 8010f3a:	1a36      	subs	r6, r6, r0
 8010f3c:	f1c5 0007 	rsb	r0, r5, #7
 8010f40:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 8010f44:	4106      	asrs	r6, r0
 8010f46:	2e00      	cmp	r6, #0
 8010f48:	dd3c      	ble.n	8010fc4 <__kernel_rem_pio2f+0x1c0>
 8010f4a:	f04f 0e00 	mov.w	lr, #0
 8010f4e:	f109 0901 	add.w	r9, r9, #1
 8010f52:	4670      	mov	r0, lr
 8010f54:	4574      	cmp	r4, lr
 8010f56:	dc68      	bgt.n	801102a <__kernel_rem_pio2f+0x226>
 8010f58:	2d00      	cmp	r5, #0
 8010f5a:	dd03      	ble.n	8010f64 <__kernel_rem_pio2f+0x160>
 8010f5c:	2d01      	cmp	r5, #1
 8010f5e:	d074      	beq.n	801104a <__kernel_rem_pio2f+0x246>
 8010f60:	2d02      	cmp	r5, #2
 8010f62:	d07d      	beq.n	8011060 <__kernel_rem_pio2f+0x25c>
 8010f64:	2e02      	cmp	r6, #2
 8010f66:	d12d      	bne.n	8010fc4 <__kernel_rem_pio2f+0x1c0>
 8010f68:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8010f6c:	ee30 8a48 	vsub.f32	s16, s0, s16
 8010f70:	b340      	cbz	r0, 8010fc4 <__kernel_rem_pio2f+0x1c0>
 8010f72:	4628      	mov	r0, r5
 8010f74:	9306      	str	r3, [sp, #24]
 8010f76:	f7ff fedf 	bl	8010d38 <scalbnf>
 8010f7a:	9b06      	ldr	r3, [sp, #24]
 8010f7c:	ee38 8a40 	vsub.f32	s16, s16, s0
 8010f80:	e020      	b.n	8010fc4 <__kernel_rem_pio2f+0x1c0>
 8010f82:	ee60 7a28 	vmul.f32	s15, s0, s17
 8010f86:	3e01      	subs	r6, #1
 8010f88:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010f8c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010f90:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8010f94:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8010f98:	ecac 0a01 	vstmia	ip!, {s0}
 8010f9c:	ed30 0a01 	vldmdb	r0!, {s0}
 8010fa0:	ee37 0a80 	vadd.f32	s0, s15, s0
 8010fa4:	e79e      	b.n	8010ee4 <__kernel_rem_pio2f+0xe0>
 8010fa6:	d105      	bne.n	8010fb4 <__kernel_rem_pio2f+0x1b0>
 8010fa8:	1e60      	subs	r0, r4, #1
 8010faa:	a908      	add	r1, sp, #32
 8010fac:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 8010fb0:	11f6      	asrs	r6, r6, #7
 8010fb2:	e7c8      	b.n	8010f46 <__kernel_rem_pio2f+0x142>
 8010fb4:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8010fb8:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8010fbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010fc0:	da31      	bge.n	8011026 <__kernel_rem_pio2f+0x222>
 8010fc2:	2600      	movs	r6, #0
 8010fc4:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8010fc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010fcc:	f040 8098 	bne.w	8011100 <__kernel_rem_pio2f+0x2fc>
 8010fd0:	1e60      	subs	r0, r4, #1
 8010fd2:	2200      	movs	r2, #0
 8010fd4:	4550      	cmp	r0, sl
 8010fd6:	da4b      	bge.n	8011070 <__kernel_rem_pio2f+0x26c>
 8010fd8:	2a00      	cmp	r2, #0
 8010fda:	d065      	beq.n	80110a8 <__kernel_rem_pio2f+0x2a4>
 8010fdc:	3c01      	subs	r4, #1
 8010fde:	ab08      	add	r3, sp, #32
 8010fe0:	3d08      	subs	r5, #8
 8010fe2:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8010fe6:	2b00      	cmp	r3, #0
 8010fe8:	d0f8      	beq.n	8010fdc <__kernel_rem_pio2f+0x1d8>
 8010fea:	4628      	mov	r0, r5
 8010fec:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8010ff0:	f7ff fea2 	bl	8010d38 <scalbnf>
 8010ff4:	1c63      	adds	r3, r4, #1
 8010ff6:	aa44      	add	r2, sp, #272	@ 0x110
 8010ff8:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 80110f8 <__kernel_rem_pio2f+0x2f4>
 8010ffc:	0099      	lsls	r1, r3, #2
 8010ffe:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8011002:	4623      	mov	r3, r4
 8011004:	2b00      	cmp	r3, #0
 8011006:	f280 80a9 	bge.w	801115c <__kernel_rem_pio2f+0x358>
 801100a:	4623      	mov	r3, r4
 801100c:	2b00      	cmp	r3, #0
 801100e:	f2c0 80c7 	blt.w	80111a0 <__kernel_rem_pio2f+0x39c>
 8011012:	aa44      	add	r2, sp, #272	@ 0x110
 8011014:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8011018:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 80110f0 <__kernel_rem_pio2f+0x2ec>
 801101c:	eddf 7a37 	vldr	s15, [pc, #220]	@ 80110fc <__kernel_rem_pio2f+0x2f8>
 8011020:	2000      	movs	r0, #0
 8011022:	1ae2      	subs	r2, r4, r3
 8011024:	e0b1      	b.n	801118a <__kernel_rem_pio2f+0x386>
 8011026:	2602      	movs	r6, #2
 8011028:	e78f      	b.n	8010f4a <__kernel_rem_pio2f+0x146>
 801102a:	f852 1b04 	ldr.w	r1, [r2], #4
 801102e:	b948      	cbnz	r0, 8011044 <__kernel_rem_pio2f+0x240>
 8011030:	b121      	cbz	r1, 801103c <__kernel_rem_pio2f+0x238>
 8011032:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 8011036:	f842 1c04 	str.w	r1, [r2, #-4]
 801103a:	2101      	movs	r1, #1
 801103c:	f10e 0e01 	add.w	lr, lr, #1
 8011040:	4608      	mov	r0, r1
 8011042:	e787      	b.n	8010f54 <__kernel_rem_pio2f+0x150>
 8011044:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 8011048:	e7f5      	b.n	8011036 <__kernel_rem_pio2f+0x232>
 801104a:	f104 3cff 	add.w	ip, r4, #4294967295
 801104e:	aa08      	add	r2, sp, #32
 8011050:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8011054:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8011058:	a908      	add	r1, sp, #32
 801105a:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 801105e:	e781      	b.n	8010f64 <__kernel_rem_pio2f+0x160>
 8011060:	f104 3cff 	add.w	ip, r4, #4294967295
 8011064:	aa08      	add	r2, sp, #32
 8011066:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 801106a:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 801106e:	e7f3      	b.n	8011058 <__kernel_rem_pio2f+0x254>
 8011070:	a908      	add	r1, sp, #32
 8011072:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8011076:	3801      	subs	r0, #1
 8011078:	430a      	orrs	r2, r1
 801107a:	e7ab      	b.n	8010fd4 <__kernel_rem_pio2f+0x1d0>
 801107c:	3201      	adds	r2, #1
 801107e:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 8011082:	2e00      	cmp	r6, #0
 8011084:	d0fa      	beq.n	801107c <__kernel_rem_pio2f+0x278>
 8011086:	9905      	ldr	r1, [sp, #20]
 8011088:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 801108c:	eb0d 0001 	add.w	r0, sp, r1
 8011090:	18e6      	adds	r6, r4, r3
 8011092:	a91c      	add	r1, sp, #112	@ 0x70
 8011094:	f104 0c01 	add.w	ip, r4, #1
 8011098:	384c      	subs	r0, #76	@ 0x4c
 801109a:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 801109e:	4422      	add	r2, r4
 80110a0:	4562      	cmp	r2, ip
 80110a2:	da04      	bge.n	80110ae <__kernel_rem_pio2f+0x2aa>
 80110a4:	4614      	mov	r4, r2
 80110a6:	e710      	b.n	8010eca <__kernel_rem_pio2f+0xc6>
 80110a8:	9804      	ldr	r0, [sp, #16]
 80110aa:	2201      	movs	r2, #1
 80110ac:	e7e7      	b.n	801107e <__kernel_rem_pio2f+0x27a>
 80110ae:	9903      	ldr	r1, [sp, #12]
 80110b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80110b4:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 80110b8:	9105      	str	r1, [sp, #20]
 80110ba:	ee07 1a90 	vmov	s15, r1
 80110be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80110c2:	2400      	movs	r4, #0
 80110c4:	ece6 7a01 	vstmia	r6!, {s15}
 80110c8:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 80110fc <__kernel_rem_pio2f+0x2f8>
 80110cc:	46b1      	mov	r9, r6
 80110ce:	455c      	cmp	r4, fp
 80110d0:	dd04      	ble.n	80110dc <__kernel_rem_pio2f+0x2d8>
 80110d2:	ece0 7a01 	vstmia	r0!, {s15}
 80110d6:	f10c 0c01 	add.w	ip, ip, #1
 80110da:	e7e1      	b.n	80110a0 <__kernel_rem_pio2f+0x29c>
 80110dc:	ecfe 6a01 	vldmia	lr!, {s13}
 80110e0:	ed39 7a01 	vldmdb	r9!, {s14}
 80110e4:	3401      	adds	r4, #1
 80110e6:	eee6 7a87 	vfma.f32	s15, s13, s14
 80110ea:	e7f0      	b.n	80110ce <__kernel_rem_pio2f+0x2ca>
 80110ec:	080117c4 	.word	0x080117c4
 80110f0:	08011798 	.word	0x08011798
 80110f4:	43800000 	.word	0x43800000
 80110f8:	3b800000 	.word	0x3b800000
 80110fc:	00000000 	.word	0x00000000
 8011100:	9b02      	ldr	r3, [sp, #8]
 8011102:	eeb0 0a48 	vmov.f32	s0, s16
 8011106:	eba3 0008 	sub.w	r0, r3, r8
 801110a:	f7ff fe15 	bl	8010d38 <scalbnf>
 801110e:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 80110f4 <__kernel_rem_pio2f+0x2f0>
 8011112:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8011116:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801111a:	db19      	blt.n	8011150 <__kernel_rem_pio2f+0x34c>
 801111c:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 80110f8 <__kernel_rem_pio2f+0x2f4>
 8011120:	ee60 7a27 	vmul.f32	s15, s0, s15
 8011124:	aa08      	add	r2, sp, #32
 8011126:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801112a:	3508      	adds	r5, #8
 801112c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011130:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8011134:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011138:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801113c:	ee10 3a10 	vmov	r3, s0
 8011140:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8011144:	ee17 3a90 	vmov	r3, s15
 8011148:	3401      	adds	r4, #1
 801114a:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 801114e:	e74c      	b.n	8010fea <__kernel_rem_pio2f+0x1e6>
 8011150:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8011154:	aa08      	add	r2, sp, #32
 8011156:	ee10 3a10 	vmov	r3, s0
 801115a:	e7f6      	b.n	801114a <__kernel_rem_pio2f+0x346>
 801115c:	a808      	add	r0, sp, #32
 801115e:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8011162:	9001      	str	r0, [sp, #4]
 8011164:	ee07 0a90 	vmov	s15, r0
 8011168:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801116c:	3b01      	subs	r3, #1
 801116e:	ee67 7a80 	vmul.f32	s15, s15, s0
 8011172:	ee20 0a07 	vmul.f32	s0, s0, s14
 8011176:	ed62 7a01 	vstmdb	r2!, {s15}
 801117a:	e743      	b.n	8011004 <__kernel_rem_pio2f+0x200>
 801117c:	ecfc 6a01 	vldmia	ip!, {s13}
 8011180:	ecb5 7a01 	vldmia	r5!, {s14}
 8011184:	eee6 7a87 	vfma.f32	s15, s13, s14
 8011188:	3001      	adds	r0, #1
 801118a:	4550      	cmp	r0, sl
 801118c:	dc01      	bgt.n	8011192 <__kernel_rem_pio2f+0x38e>
 801118e:	4290      	cmp	r0, r2
 8011190:	ddf4      	ble.n	801117c <__kernel_rem_pio2f+0x378>
 8011192:	a858      	add	r0, sp, #352	@ 0x160
 8011194:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8011198:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 801119c:	3b01      	subs	r3, #1
 801119e:	e735      	b.n	801100c <__kernel_rem_pio2f+0x208>
 80111a0:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 80111a2:	2b02      	cmp	r3, #2
 80111a4:	dc09      	bgt.n	80111ba <__kernel_rem_pio2f+0x3b6>
 80111a6:	2b00      	cmp	r3, #0
 80111a8:	dc27      	bgt.n	80111fa <__kernel_rem_pio2f+0x3f6>
 80111aa:	d040      	beq.n	801122e <__kernel_rem_pio2f+0x42a>
 80111ac:	f009 0007 	and.w	r0, r9, #7
 80111b0:	b059      	add	sp, #356	@ 0x164
 80111b2:	ecbd 8b04 	vpop	{d8-d9}
 80111b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80111ba:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 80111bc:	2b03      	cmp	r3, #3
 80111be:	d1f5      	bne.n	80111ac <__kernel_rem_pio2f+0x3a8>
 80111c0:	aa30      	add	r2, sp, #192	@ 0xc0
 80111c2:	1f0b      	subs	r3, r1, #4
 80111c4:	4413      	add	r3, r2
 80111c6:	461a      	mov	r2, r3
 80111c8:	4620      	mov	r0, r4
 80111ca:	2800      	cmp	r0, #0
 80111cc:	dc50      	bgt.n	8011270 <__kernel_rem_pio2f+0x46c>
 80111ce:	4622      	mov	r2, r4
 80111d0:	2a01      	cmp	r2, #1
 80111d2:	dc5d      	bgt.n	8011290 <__kernel_rem_pio2f+0x48c>
 80111d4:	ab30      	add	r3, sp, #192	@ 0xc0
 80111d6:	ed5f 7a37 	vldr	s15, [pc, #-220]	@ 80110fc <__kernel_rem_pio2f+0x2f8>
 80111da:	440b      	add	r3, r1
 80111dc:	2c01      	cmp	r4, #1
 80111de:	dc67      	bgt.n	80112b0 <__kernel_rem_pio2f+0x4ac>
 80111e0:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 80111e4:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 80111e8:	2e00      	cmp	r6, #0
 80111ea:	d167      	bne.n	80112bc <__kernel_rem_pio2f+0x4b8>
 80111ec:	edc7 6a00 	vstr	s13, [r7]
 80111f0:	ed87 7a01 	vstr	s14, [r7, #4]
 80111f4:	edc7 7a02 	vstr	s15, [r7, #8]
 80111f8:	e7d8      	b.n	80111ac <__kernel_rem_pio2f+0x3a8>
 80111fa:	ab30      	add	r3, sp, #192	@ 0xc0
 80111fc:	ed1f 7a41 	vldr	s14, [pc, #-260]	@ 80110fc <__kernel_rem_pio2f+0x2f8>
 8011200:	440b      	add	r3, r1
 8011202:	4622      	mov	r2, r4
 8011204:	2a00      	cmp	r2, #0
 8011206:	da24      	bge.n	8011252 <__kernel_rem_pio2f+0x44e>
 8011208:	b34e      	cbz	r6, 801125e <__kernel_rem_pio2f+0x45a>
 801120a:	eef1 7a47 	vneg.f32	s15, s14
 801120e:	edc7 7a00 	vstr	s15, [r7]
 8011212:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 8011216:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801121a:	aa31      	add	r2, sp, #196	@ 0xc4
 801121c:	2301      	movs	r3, #1
 801121e:	429c      	cmp	r4, r3
 8011220:	da20      	bge.n	8011264 <__kernel_rem_pio2f+0x460>
 8011222:	b10e      	cbz	r6, 8011228 <__kernel_rem_pio2f+0x424>
 8011224:	eef1 7a67 	vneg.f32	s15, s15
 8011228:	edc7 7a01 	vstr	s15, [r7, #4]
 801122c:	e7be      	b.n	80111ac <__kernel_rem_pio2f+0x3a8>
 801122e:	ab30      	add	r3, sp, #192	@ 0xc0
 8011230:	ed5f 7a4e 	vldr	s15, [pc, #-312]	@ 80110fc <__kernel_rem_pio2f+0x2f8>
 8011234:	440b      	add	r3, r1
 8011236:	2c00      	cmp	r4, #0
 8011238:	da05      	bge.n	8011246 <__kernel_rem_pio2f+0x442>
 801123a:	b10e      	cbz	r6, 8011240 <__kernel_rem_pio2f+0x43c>
 801123c:	eef1 7a67 	vneg.f32	s15, s15
 8011240:	edc7 7a00 	vstr	s15, [r7]
 8011244:	e7b2      	b.n	80111ac <__kernel_rem_pio2f+0x3a8>
 8011246:	ed33 7a01 	vldmdb	r3!, {s14}
 801124a:	3c01      	subs	r4, #1
 801124c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011250:	e7f1      	b.n	8011236 <__kernel_rem_pio2f+0x432>
 8011252:	ed73 7a01 	vldmdb	r3!, {s15}
 8011256:	3a01      	subs	r2, #1
 8011258:	ee37 7a27 	vadd.f32	s14, s14, s15
 801125c:	e7d2      	b.n	8011204 <__kernel_rem_pio2f+0x400>
 801125e:	eef0 7a47 	vmov.f32	s15, s14
 8011262:	e7d4      	b.n	801120e <__kernel_rem_pio2f+0x40a>
 8011264:	ecb2 7a01 	vldmia	r2!, {s14}
 8011268:	3301      	adds	r3, #1
 801126a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801126e:	e7d6      	b.n	801121e <__kernel_rem_pio2f+0x41a>
 8011270:	ed72 7a01 	vldmdb	r2!, {s15}
 8011274:	edd2 6a01 	vldr	s13, [r2, #4]
 8011278:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801127c:	3801      	subs	r0, #1
 801127e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011282:	ed82 7a00 	vstr	s14, [r2]
 8011286:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801128a:	edc2 7a01 	vstr	s15, [r2, #4]
 801128e:	e79c      	b.n	80111ca <__kernel_rem_pio2f+0x3c6>
 8011290:	ed73 7a01 	vldmdb	r3!, {s15}
 8011294:	edd3 6a01 	vldr	s13, [r3, #4]
 8011298:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801129c:	3a01      	subs	r2, #1
 801129e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80112a2:	ed83 7a00 	vstr	s14, [r3]
 80112a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80112aa:	edc3 7a01 	vstr	s15, [r3, #4]
 80112ae:	e78f      	b.n	80111d0 <__kernel_rem_pio2f+0x3cc>
 80112b0:	ed33 7a01 	vldmdb	r3!, {s14}
 80112b4:	3c01      	subs	r4, #1
 80112b6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80112ba:	e78f      	b.n	80111dc <__kernel_rem_pio2f+0x3d8>
 80112bc:	eef1 6a66 	vneg.f32	s13, s13
 80112c0:	eeb1 7a47 	vneg.f32	s14, s14
 80112c4:	edc7 6a00 	vstr	s13, [r7]
 80112c8:	ed87 7a01 	vstr	s14, [r7, #4]
 80112cc:	eef1 7a67 	vneg.f32	s15, s15
 80112d0:	e790      	b.n	80111f4 <__kernel_rem_pio2f+0x3f0>
 80112d2:	bf00      	nop

080112d4 <floorf>:
 80112d4:	ee10 3a10 	vmov	r3, s0
 80112d8:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80112dc:	3a7f      	subs	r2, #127	@ 0x7f
 80112de:	2a16      	cmp	r2, #22
 80112e0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80112e4:	dc2b      	bgt.n	801133e <floorf+0x6a>
 80112e6:	2a00      	cmp	r2, #0
 80112e8:	da12      	bge.n	8011310 <floorf+0x3c>
 80112ea:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8011350 <floorf+0x7c>
 80112ee:	ee30 0a27 	vadd.f32	s0, s0, s15
 80112f2:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80112f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80112fa:	dd06      	ble.n	801130a <floorf+0x36>
 80112fc:	2b00      	cmp	r3, #0
 80112fe:	da24      	bge.n	801134a <floorf+0x76>
 8011300:	2900      	cmp	r1, #0
 8011302:	4b14      	ldr	r3, [pc, #80]	@ (8011354 <floorf+0x80>)
 8011304:	bf08      	it	eq
 8011306:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 801130a:	ee00 3a10 	vmov	s0, r3
 801130e:	4770      	bx	lr
 8011310:	4911      	ldr	r1, [pc, #68]	@ (8011358 <floorf+0x84>)
 8011312:	4111      	asrs	r1, r2
 8011314:	420b      	tst	r3, r1
 8011316:	d0fa      	beq.n	801130e <floorf+0x3a>
 8011318:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 8011350 <floorf+0x7c>
 801131c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8011320:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8011324:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011328:	ddef      	ble.n	801130a <floorf+0x36>
 801132a:	2b00      	cmp	r3, #0
 801132c:	bfbe      	ittt	lt
 801132e:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 8011332:	fa40 f202 	asrlt.w	r2, r0, r2
 8011336:	189b      	addlt	r3, r3, r2
 8011338:	ea23 0301 	bic.w	r3, r3, r1
 801133c:	e7e5      	b.n	801130a <floorf+0x36>
 801133e:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8011342:	d3e4      	bcc.n	801130e <floorf+0x3a>
 8011344:	ee30 0a00 	vadd.f32	s0, s0, s0
 8011348:	4770      	bx	lr
 801134a:	2300      	movs	r3, #0
 801134c:	e7dd      	b.n	801130a <floorf+0x36>
 801134e:	bf00      	nop
 8011350:	7149f2ca 	.word	0x7149f2ca
 8011354:	bf800000 	.word	0xbf800000
 8011358:	007fffff 	.word	0x007fffff

0801135c <_init>:
 801135c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801135e:	bf00      	nop
 8011360:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011362:	bc08      	pop	{r3}
 8011364:	469e      	mov	lr, r3
 8011366:	4770      	bx	lr

08011368 <_fini>:
 8011368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801136a:	bf00      	nop
 801136c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801136e:	bc08      	pop	{r3}
 8011370:	469e      	mov	lr, r3
 8011372:	4770      	bx	lr
