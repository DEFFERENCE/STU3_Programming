
Modbus_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007f94  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800816c  0800816c  0000916c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080081ac  080081ac  0000a20c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080081ac  080081ac  000091ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080081b4  080081b4  0000a20c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080081b4  080081b4  000091b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080081b8  080081b8  000091b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000020c  20000000  080081bc  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000095c  2000020c  080083c8  0000a20c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000b68  080083c8  0000ab68  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a20c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000169fe  00000000  00000000  0000a23c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b5e  00000000  00000000  00020c3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011a8  00000000  00000000  00023798  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000dcf  00000000  00000000  00024940  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026739  00000000  00000000  0002570f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000149c7  00000000  00000000  0004be48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fc6d4  00000000  00000000  0006080f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015cee3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c88  00000000  00000000  0015cf28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  00161bb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000020c 	.word	0x2000020c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08008154 	.word	0x08008154

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000210 	.word	0x20000210
 8000214:	08008154 	.word	0x08008154

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__aeabi_d2uiz>:
 80009b4:	004a      	lsls	r2, r1, #1
 80009b6:	d211      	bcs.n	80009dc <__aeabi_d2uiz+0x28>
 80009b8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80009bc:	d211      	bcs.n	80009e2 <__aeabi_d2uiz+0x2e>
 80009be:	d50d      	bpl.n	80009dc <__aeabi_d2uiz+0x28>
 80009c0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80009c4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009c8:	d40e      	bmi.n	80009e8 <__aeabi_d2uiz+0x34>
 80009ca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009ce:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80009d2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009d6:	fa23 f002 	lsr.w	r0, r3, r2
 80009da:	4770      	bx	lr
 80009dc:	f04f 0000 	mov.w	r0, #0
 80009e0:	4770      	bx	lr
 80009e2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009e6:	d102      	bne.n	80009ee <__aeabi_d2uiz+0x3a>
 80009e8:	f04f 30ff 	mov.w	r0, #4294967295
 80009ec:	4770      	bx	lr
 80009ee:	f04f 0000 	mov.w	r0, #0
 80009f2:	4770      	bx	lr

080009f4 <__aeabi_uldivmod>:
 80009f4:	b953      	cbnz	r3, 8000a0c <__aeabi_uldivmod+0x18>
 80009f6:	b94a      	cbnz	r2, 8000a0c <__aeabi_uldivmod+0x18>
 80009f8:	2900      	cmp	r1, #0
 80009fa:	bf08      	it	eq
 80009fc:	2800      	cmpeq	r0, #0
 80009fe:	bf1c      	itt	ne
 8000a00:	f04f 31ff 	movne.w	r1, #4294967295
 8000a04:	f04f 30ff 	movne.w	r0, #4294967295
 8000a08:	f000 b988 	b.w	8000d1c <__aeabi_idiv0>
 8000a0c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a10:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a14:	f000 f806 	bl	8000a24 <__udivmoddi4>
 8000a18:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a20:	b004      	add	sp, #16
 8000a22:	4770      	bx	lr

08000a24 <__udivmoddi4>:
 8000a24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a28:	9d08      	ldr	r5, [sp, #32]
 8000a2a:	468e      	mov	lr, r1
 8000a2c:	4604      	mov	r4, r0
 8000a2e:	4688      	mov	r8, r1
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d14a      	bne.n	8000aca <__udivmoddi4+0xa6>
 8000a34:	428a      	cmp	r2, r1
 8000a36:	4617      	mov	r7, r2
 8000a38:	d962      	bls.n	8000b00 <__udivmoddi4+0xdc>
 8000a3a:	fab2 f682 	clz	r6, r2
 8000a3e:	b14e      	cbz	r6, 8000a54 <__udivmoddi4+0x30>
 8000a40:	f1c6 0320 	rsb	r3, r6, #32
 8000a44:	fa01 f806 	lsl.w	r8, r1, r6
 8000a48:	fa20 f303 	lsr.w	r3, r0, r3
 8000a4c:	40b7      	lsls	r7, r6
 8000a4e:	ea43 0808 	orr.w	r8, r3, r8
 8000a52:	40b4      	lsls	r4, r6
 8000a54:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a58:	fa1f fc87 	uxth.w	ip, r7
 8000a5c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000a60:	0c23      	lsrs	r3, r4, #16
 8000a62:	fb0e 8811 	mls	r8, lr, r1, r8
 8000a66:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000a6a:	fb01 f20c 	mul.w	r2, r1, ip
 8000a6e:	429a      	cmp	r2, r3
 8000a70:	d909      	bls.n	8000a86 <__udivmoddi4+0x62>
 8000a72:	18fb      	adds	r3, r7, r3
 8000a74:	f101 30ff 	add.w	r0, r1, #4294967295
 8000a78:	f080 80ea 	bcs.w	8000c50 <__udivmoddi4+0x22c>
 8000a7c:	429a      	cmp	r2, r3
 8000a7e:	f240 80e7 	bls.w	8000c50 <__udivmoddi4+0x22c>
 8000a82:	3902      	subs	r1, #2
 8000a84:	443b      	add	r3, r7
 8000a86:	1a9a      	subs	r2, r3, r2
 8000a88:	b2a3      	uxth	r3, r4
 8000a8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000a8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000a92:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000a96:	fb00 fc0c 	mul.w	ip, r0, ip
 8000a9a:	459c      	cmp	ip, r3
 8000a9c:	d909      	bls.n	8000ab2 <__udivmoddi4+0x8e>
 8000a9e:	18fb      	adds	r3, r7, r3
 8000aa0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000aa4:	f080 80d6 	bcs.w	8000c54 <__udivmoddi4+0x230>
 8000aa8:	459c      	cmp	ip, r3
 8000aaa:	f240 80d3 	bls.w	8000c54 <__udivmoddi4+0x230>
 8000aae:	443b      	add	r3, r7
 8000ab0:	3802      	subs	r0, #2
 8000ab2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000ab6:	eba3 030c 	sub.w	r3, r3, ip
 8000aba:	2100      	movs	r1, #0
 8000abc:	b11d      	cbz	r5, 8000ac6 <__udivmoddi4+0xa2>
 8000abe:	40f3      	lsrs	r3, r6
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	e9c5 3200 	strd	r3, r2, [r5]
 8000ac6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aca:	428b      	cmp	r3, r1
 8000acc:	d905      	bls.n	8000ada <__udivmoddi4+0xb6>
 8000ace:	b10d      	cbz	r5, 8000ad4 <__udivmoddi4+0xb0>
 8000ad0:	e9c5 0100 	strd	r0, r1, [r5]
 8000ad4:	2100      	movs	r1, #0
 8000ad6:	4608      	mov	r0, r1
 8000ad8:	e7f5      	b.n	8000ac6 <__udivmoddi4+0xa2>
 8000ada:	fab3 f183 	clz	r1, r3
 8000ade:	2900      	cmp	r1, #0
 8000ae0:	d146      	bne.n	8000b70 <__udivmoddi4+0x14c>
 8000ae2:	4573      	cmp	r3, lr
 8000ae4:	d302      	bcc.n	8000aec <__udivmoddi4+0xc8>
 8000ae6:	4282      	cmp	r2, r0
 8000ae8:	f200 8105 	bhi.w	8000cf6 <__udivmoddi4+0x2d2>
 8000aec:	1a84      	subs	r4, r0, r2
 8000aee:	eb6e 0203 	sbc.w	r2, lr, r3
 8000af2:	2001      	movs	r0, #1
 8000af4:	4690      	mov	r8, r2
 8000af6:	2d00      	cmp	r5, #0
 8000af8:	d0e5      	beq.n	8000ac6 <__udivmoddi4+0xa2>
 8000afa:	e9c5 4800 	strd	r4, r8, [r5]
 8000afe:	e7e2      	b.n	8000ac6 <__udivmoddi4+0xa2>
 8000b00:	2a00      	cmp	r2, #0
 8000b02:	f000 8090 	beq.w	8000c26 <__udivmoddi4+0x202>
 8000b06:	fab2 f682 	clz	r6, r2
 8000b0a:	2e00      	cmp	r6, #0
 8000b0c:	f040 80a4 	bne.w	8000c58 <__udivmoddi4+0x234>
 8000b10:	1a8a      	subs	r2, r1, r2
 8000b12:	0c03      	lsrs	r3, r0, #16
 8000b14:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b18:	b280      	uxth	r0, r0
 8000b1a:	b2bc      	uxth	r4, r7
 8000b1c:	2101      	movs	r1, #1
 8000b1e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000b22:	fb0e 221c 	mls	r2, lr, ip, r2
 8000b26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000b2a:	fb04 f20c 	mul.w	r2, r4, ip
 8000b2e:	429a      	cmp	r2, r3
 8000b30:	d907      	bls.n	8000b42 <__udivmoddi4+0x11e>
 8000b32:	18fb      	adds	r3, r7, r3
 8000b34:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000b38:	d202      	bcs.n	8000b40 <__udivmoddi4+0x11c>
 8000b3a:	429a      	cmp	r2, r3
 8000b3c:	f200 80e0 	bhi.w	8000d00 <__udivmoddi4+0x2dc>
 8000b40:	46c4      	mov	ip, r8
 8000b42:	1a9b      	subs	r3, r3, r2
 8000b44:	fbb3 f2fe 	udiv	r2, r3, lr
 8000b48:	fb0e 3312 	mls	r3, lr, r2, r3
 8000b4c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000b50:	fb02 f404 	mul.w	r4, r2, r4
 8000b54:	429c      	cmp	r4, r3
 8000b56:	d907      	bls.n	8000b68 <__udivmoddi4+0x144>
 8000b58:	18fb      	adds	r3, r7, r3
 8000b5a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000b5e:	d202      	bcs.n	8000b66 <__udivmoddi4+0x142>
 8000b60:	429c      	cmp	r4, r3
 8000b62:	f200 80ca 	bhi.w	8000cfa <__udivmoddi4+0x2d6>
 8000b66:	4602      	mov	r2, r0
 8000b68:	1b1b      	subs	r3, r3, r4
 8000b6a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000b6e:	e7a5      	b.n	8000abc <__udivmoddi4+0x98>
 8000b70:	f1c1 0620 	rsb	r6, r1, #32
 8000b74:	408b      	lsls	r3, r1
 8000b76:	fa22 f706 	lsr.w	r7, r2, r6
 8000b7a:	431f      	orrs	r7, r3
 8000b7c:	fa0e f401 	lsl.w	r4, lr, r1
 8000b80:	fa20 f306 	lsr.w	r3, r0, r6
 8000b84:	fa2e fe06 	lsr.w	lr, lr, r6
 8000b88:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000b8c:	4323      	orrs	r3, r4
 8000b8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000b92:	fa1f fc87 	uxth.w	ip, r7
 8000b96:	fbbe f0f9 	udiv	r0, lr, r9
 8000b9a:	0c1c      	lsrs	r4, r3, #16
 8000b9c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ba0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ba4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ba8:	45a6      	cmp	lr, r4
 8000baa:	fa02 f201 	lsl.w	r2, r2, r1
 8000bae:	d909      	bls.n	8000bc4 <__udivmoddi4+0x1a0>
 8000bb0:	193c      	adds	r4, r7, r4
 8000bb2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000bb6:	f080 809c 	bcs.w	8000cf2 <__udivmoddi4+0x2ce>
 8000bba:	45a6      	cmp	lr, r4
 8000bbc:	f240 8099 	bls.w	8000cf2 <__udivmoddi4+0x2ce>
 8000bc0:	3802      	subs	r0, #2
 8000bc2:	443c      	add	r4, r7
 8000bc4:	eba4 040e 	sub.w	r4, r4, lr
 8000bc8:	fa1f fe83 	uxth.w	lr, r3
 8000bcc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000bd0:	fb09 4413 	mls	r4, r9, r3, r4
 8000bd4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000bd8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000bdc:	45a4      	cmp	ip, r4
 8000bde:	d908      	bls.n	8000bf2 <__udivmoddi4+0x1ce>
 8000be0:	193c      	adds	r4, r7, r4
 8000be2:	f103 3eff 	add.w	lr, r3, #4294967295
 8000be6:	f080 8082 	bcs.w	8000cee <__udivmoddi4+0x2ca>
 8000bea:	45a4      	cmp	ip, r4
 8000bec:	d97f      	bls.n	8000cee <__udivmoddi4+0x2ca>
 8000bee:	3b02      	subs	r3, #2
 8000bf0:	443c      	add	r4, r7
 8000bf2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000bf6:	eba4 040c 	sub.w	r4, r4, ip
 8000bfa:	fba0 ec02 	umull	lr, ip, r0, r2
 8000bfe:	4564      	cmp	r4, ip
 8000c00:	4673      	mov	r3, lr
 8000c02:	46e1      	mov	r9, ip
 8000c04:	d362      	bcc.n	8000ccc <__udivmoddi4+0x2a8>
 8000c06:	d05f      	beq.n	8000cc8 <__udivmoddi4+0x2a4>
 8000c08:	b15d      	cbz	r5, 8000c22 <__udivmoddi4+0x1fe>
 8000c0a:	ebb8 0203 	subs.w	r2, r8, r3
 8000c0e:	eb64 0409 	sbc.w	r4, r4, r9
 8000c12:	fa04 f606 	lsl.w	r6, r4, r6
 8000c16:	fa22 f301 	lsr.w	r3, r2, r1
 8000c1a:	431e      	orrs	r6, r3
 8000c1c:	40cc      	lsrs	r4, r1
 8000c1e:	e9c5 6400 	strd	r6, r4, [r5]
 8000c22:	2100      	movs	r1, #0
 8000c24:	e74f      	b.n	8000ac6 <__udivmoddi4+0xa2>
 8000c26:	fbb1 fcf2 	udiv	ip, r1, r2
 8000c2a:	0c01      	lsrs	r1, r0, #16
 8000c2c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000c30:	b280      	uxth	r0, r0
 8000c32:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000c36:	463b      	mov	r3, r7
 8000c38:	4638      	mov	r0, r7
 8000c3a:	463c      	mov	r4, r7
 8000c3c:	46b8      	mov	r8, r7
 8000c3e:	46be      	mov	lr, r7
 8000c40:	2620      	movs	r6, #32
 8000c42:	fbb1 f1f7 	udiv	r1, r1, r7
 8000c46:	eba2 0208 	sub.w	r2, r2, r8
 8000c4a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000c4e:	e766      	b.n	8000b1e <__udivmoddi4+0xfa>
 8000c50:	4601      	mov	r1, r0
 8000c52:	e718      	b.n	8000a86 <__udivmoddi4+0x62>
 8000c54:	4610      	mov	r0, r2
 8000c56:	e72c      	b.n	8000ab2 <__udivmoddi4+0x8e>
 8000c58:	f1c6 0220 	rsb	r2, r6, #32
 8000c5c:	fa2e f302 	lsr.w	r3, lr, r2
 8000c60:	40b7      	lsls	r7, r6
 8000c62:	40b1      	lsls	r1, r6
 8000c64:	fa20 f202 	lsr.w	r2, r0, r2
 8000c68:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c6c:	430a      	orrs	r2, r1
 8000c6e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000c72:	b2bc      	uxth	r4, r7
 8000c74:	fb0e 3318 	mls	r3, lr, r8, r3
 8000c78:	0c11      	lsrs	r1, r2, #16
 8000c7a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c7e:	fb08 f904 	mul.w	r9, r8, r4
 8000c82:	40b0      	lsls	r0, r6
 8000c84:	4589      	cmp	r9, r1
 8000c86:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000c8a:	b280      	uxth	r0, r0
 8000c8c:	d93e      	bls.n	8000d0c <__udivmoddi4+0x2e8>
 8000c8e:	1879      	adds	r1, r7, r1
 8000c90:	f108 3cff 	add.w	ip, r8, #4294967295
 8000c94:	d201      	bcs.n	8000c9a <__udivmoddi4+0x276>
 8000c96:	4589      	cmp	r9, r1
 8000c98:	d81f      	bhi.n	8000cda <__udivmoddi4+0x2b6>
 8000c9a:	eba1 0109 	sub.w	r1, r1, r9
 8000c9e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ca2:	fb09 f804 	mul.w	r8, r9, r4
 8000ca6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000caa:	b292      	uxth	r2, r2
 8000cac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000cb0:	4542      	cmp	r2, r8
 8000cb2:	d229      	bcs.n	8000d08 <__udivmoddi4+0x2e4>
 8000cb4:	18ba      	adds	r2, r7, r2
 8000cb6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000cba:	d2c4      	bcs.n	8000c46 <__udivmoddi4+0x222>
 8000cbc:	4542      	cmp	r2, r8
 8000cbe:	d2c2      	bcs.n	8000c46 <__udivmoddi4+0x222>
 8000cc0:	f1a9 0102 	sub.w	r1, r9, #2
 8000cc4:	443a      	add	r2, r7
 8000cc6:	e7be      	b.n	8000c46 <__udivmoddi4+0x222>
 8000cc8:	45f0      	cmp	r8, lr
 8000cca:	d29d      	bcs.n	8000c08 <__udivmoddi4+0x1e4>
 8000ccc:	ebbe 0302 	subs.w	r3, lr, r2
 8000cd0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000cd4:	3801      	subs	r0, #1
 8000cd6:	46e1      	mov	r9, ip
 8000cd8:	e796      	b.n	8000c08 <__udivmoddi4+0x1e4>
 8000cda:	eba7 0909 	sub.w	r9, r7, r9
 8000cde:	4449      	add	r1, r9
 8000ce0:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ce4:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ce8:	fb09 f804 	mul.w	r8, r9, r4
 8000cec:	e7db      	b.n	8000ca6 <__udivmoddi4+0x282>
 8000cee:	4673      	mov	r3, lr
 8000cf0:	e77f      	b.n	8000bf2 <__udivmoddi4+0x1ce>
 8000cf2:	4650      	mov	r0, sl
 8000cf4:	e766      	b.n	8000bc4 <__udivmoddi4+0x1a0>
 8000cf6:	4608      	mov	r0, r1
 8000cf8:	e6fd      	b.n	8000af6 <__udivmoddi4+0xd2>
 8000cfa:	443b      	add	r3, r7
 8000cfc:	3a02      	subs	r2, #2
 8000cfe:	e733      	b.n	8000b68 <__udivmoddi4+0x144>
 8000d00:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d04:	443b      	add	r3, r7
 8000d06:	e71c      	b.n	8000b42 <__udivmoddi4+0x11e>
 8000d08:	4649      	mov	r1, r9
 8000d0a:	e79c      	b.n	8000c46 <__udivmoddi4+0x222>
 8000d0c:	eba1 0109 	sub.w	r1, r1, r9
 8000d10:	46c4      	mov	ip, r8
 8000d12:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d16:	fb09 f804 	mul.w	r8, r9, r4
 8000d1a:	e7c4      	b.n	8000ca6 <__udivmoddi4+0x282>

08000d1c <__aeabi_idiv0>:
 8000d1c:	4770      	bx	lr
 8000d1e:	bf00      	nop

08000d20 <modbus_Base_System_Status>:
	if (hmodbus->RegisterAddress[0x00].U16 == 18537) {
		hmodbus->RegisterAddress[0x00].U16 = 22881;
	}
}

uint8_t modbus_Base_System_Status(ModbusHandleTypedef *hmodbus) {
 8000d20:	b480      	push	{r7}
 8000d22:	b085      	sub	sp, #20
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
	uint8_t status = hmodbus->RegisterAddress[0x01].U16;
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	685b      	ldr	r3, [r3, #4]
 8000d2c:	3302      	adds	r3, #2
 8000d2e:	881b      	ldrh	r3, [r3, #0]
 8000d30:	73fb      	strb	r3, [r7, #15]
	return status;
 8000d32:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d34:	4618      	mov	r0, r3
 8000d36:	3714      	adds	r7, #20
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3e:	4770      	bx	lr

08000d40 <R_Theta_moving_Status>:

	}
	return status;
}

void R_Theta_moving_Status(ModbusHandleTypedef *hmodbus, uint8_t Moving_Status) {
 8000d40:	b480      	push	{r7}
 8000d42:	b083      	sub	sp, #12
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
 8000d48:	460b      	mov	r3, r1
 8000d4a:	70fb      	strb	r3, [r7, #3]
	hmodbus->RegisterAddress[0x10].U16 = Moving_Status;
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	685b      	ldr	r3, [r3, #4]
 8000d50:	3320      	adds	r3, #32
 8000d52:	78fa      	ldrb	r2, [r7, #3]
 8000d54:	b292      	uxth	r2, r2
 8000d56:	801a      	strh	r2, [r3, #0]
}
 8000d58:	bf00      	nop
 8000d5a:	370c      	adds	r7, #12
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d62:	4770      	bx	lr

08000d64 <modbus_set_goal_r_position>:
	if (index >= 0 && index <= 9) {
		hmodbus->RegisterAddress[0x20 + index * 2].U16 = r_pos;
		hmodbus->RegisterAddress[0x20 + (index * 2) + 1].U16 = theta_pos;
	}
}
uint16_t modbus_set_goal_r_position(ModbusHandleTypedef *hmodbus) {
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b084      	sub	sp, #16
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
	uint16_t goal_r_position = hmodbus->RegisterAddress[0x40].U16;
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	685b      	ldr	r3, [r3, #4]
 8000d70:	3380      	adds	r3, #128	@ 0x80
 8000d72:	881b      	ldrh	r3, [r3, #0]
 8000d74:	81fb      	strh	r3, [r7, #14]
	return goal_r_position/10.0;
 8000d76:	89fb      	ldrh	r3, [r7, #14]
 8000d78:	4618      	mov	r0, r3
 8000d7a:	f7ff fb9f 	bl	80004bc <__aeabi_i2d>
 8000d7e:	f04f 0200 	mov.w	r2, #0
 8000d82:	4b07      	ldr	r3, [pc, #28]	@ (8000da0 <modbus_set_goal_r_position+0x3c>)
 8000d84:	f7ff fd2e 	bl	80007e4 <__aeabi_ddiv>
 8000d88:	4602      	mov	r2, r0
 8000d8a:	460b      	mov	r3, r1
 8000d8c:	4610      	mov	r0, r2
 8000d8e:	4619      	mov	r1, r3
 8000d90:	f7ff fe10 	bl	80009b4 <__aeabi_d2uiz>
 8000d94:	4603      	mov	r3, r0
 8000d96:	b29b      	uxth	r3, r3
}
 8000d98:	4618      	mov	r0, r3
 8000d9a:	3710      	adds	r7, #16
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	40240000 	.word	0x40240000

08000da4 <modbus_set_goal_theta_position>:
uint16_t modbus_set_goal_theta_position(ModbusHandleTypedef *hmodbus) {
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b084      	sub	sp, #16
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
	uint16_t goal_theta_position = hmodbus->RegisterAddress[0x41].U16;
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	685b      	ldr	r3, [r3, #4]
 8000db0:	3382      	adds	r3, #130	@ 0x82
 8000db2:	881b      	ldrh	r3, [r3, #0]
 8000db4:	81fb      	strh	r3, [r7, #14]
	return goal_theta_position/10.0;
 8000db6:	89fb      	ldrh	r3, [r7, #14]
 8000db8:	4618      	mov	r0, r3
 8000dba:	f7ff fb7f 	bl	80004bc <__aeabi_i2d>
 8000dbe:	f04f 0200 	mov.w	r2, #0
 8000dc2:	4b07      	ldr	r3, [pc, #28]	@ (8000de0 <modbus_set_goal_theta_position+0x3c>)
 8000dc4:	f7ff fd0e 	bl	80007e4 <__aeabi_ddiv>
 8000dc8:	4602      	mov	r2, r0
 8000dca:	460b      	mov	r3, r1
 8000dcc:	4610      	mov	r0, r2
 8000dce:	4619      	mov	r1, r3
 8000dd0:	f7ff fdf0 	bl	80009b4 <__aeabi_d2uiz>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	b29b      	uxth	r3, r3
}
 8000dd8:	4618      	mov	r0, r3
 8000dda:	3710      	adds	r7, #16
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	40240000 	.word	0x40240000

08000de4 <modbus_1t5_Timeout>:
void Modbus_frame_response();


// function for interrupt
void modbus_1t5_Timeout(TIM_HandleTypeDef *htim)
{
 8000de4:	b480      	push	{r7}
 8000de6:	b083      	sub	sp, #12
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 8000dec:	4b04      	ldr	r3, [pc, #16]	@ (8000e00 <modbus_1t5_Timeout+0x1c>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	2201      	movs	r2, #1
 8000df2:	751a      	strb	r2, [r3, #20]
}
 8000df4:	bf00      	nop
 8000df6:	370c      	adds	r7, #12
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfe:	4770      	bx	lr
 8000e00:	20000228 	.word	0x20000228

08000e04 <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b083      	sub	sp, #12
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 8000e0c:	4b04      	ldr	r3, [pc, #16]	@ (8000e20 <modbus_3t5_Timeout+0x1c>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	2201      	movs	r2, #1
 8000e12:	755a      	strb	r2, [r3, #21]
}
 8000e14:	bf00      	nop
 8000e16:	370c      	adds	r7, #12
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1e:	4770      	bx	lr
 8000e20:	20000228 	.word	0x20000228

08000e24 <modbus_UART_Recived>:
void modbus_UART_Recived(UART_HandleTypeDef *huart,uint32_t pos)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b082      	sub	sp, #8
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
 8000e2c:	6039      	str	r1, [r7, #0]

	//restart timer / start timer of counting time with modbus RTU
	hModbus->Flag_URev =1;
 8000e2e:	4b15      	ldr	r3, [pc, #84]	@ (8000e84 <modbus_UART_Recived+0x60>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	2201      	movs	r2, #1
 8000e34:	759a      	strb	r2, [r3, #22]
	if(hModbus->modbusUartStructure.RxTail++<MODBUS_MESSAGEBUFFER_SIZE)
 8000e36:	4b13      	ldr	r3, [pc, #76]	@ (8000e84 <modbus_UART_Recived+0x60>)
 8000e38:	681a      	ldr	r2, [r3, #0]
 8000e3a:	f8b2 33a2 	ldrh.w	r3, [r2, #930]	@ 0x3a2
 8000e3e:	1c59      	adds	r1, r3, #1
 8000e40:	b289      	uxth	r1, r1
 8000e42:	f8a2 13a2 	strh.w	r1, [r2, #930]	@ 0x3a2
 8000e46:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8000e4a:	d210      	bcs.n	8000e6e <modbus_UART_Recived+0x4a>
	{


	    HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 8000e4c:	4b0d      	ldr	r3, [pc, #52]	@ (8000e84 <modbus_UART_Recived+0x60>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	68d8      	ldr	r0, [r3, #12]
 8000e52:	4b0c      	ldr	r3, [pc, #48]	@ (8000e84 <modbus_UART_Recived+0x60>)
 8000e54:	681a      	ldr	r2, [r3, #0]
 8000e56:	4b0b      	ldr	r3, [pc, #44]	@ (8000e84 <modbus_UART_Recived+0x60>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8000e5e:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 8000e62:	4413      	add	r3, r2
 8000e64:	3302      	adds	r3, #2
 8000e66:	2201      	movs	r2, #1
 8000e68:	4619      	mov	r1, r3
 8000e6a:	f004 fdfd 	bl	8005a68 <HAL_UART_Receive_IT>
	}
	__HAL_TIM_SET_COUNTER(hModbus->htim,0);
 8000e6e:	4b05      	ldr	r3, [pc, #20]	@ (8000e84 <modbus_UART_Recived+0x60>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	691b      	ldr	r3, [r3, #16]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	2200      	movs	r2, #0
 8000e78:	625a      	str	r2, [r3, #36]	@ 0x24

}
 8000e7a:	bf00      	nop
 8000e7c:	3708      	adds	r7, #8
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	20000228 	.word	0x20000228

08000e88 <Modbus_init>:


void Modbus_init(ModbusHandleTypedef* hmodbus,u16u8_t* RegisterStartAddress)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
 8000e90:	6039      	str	r1, [r7, #0]
	hModbus = hmodbus;
 8000e92:	4a24      	ldr	r2, [pc, #144]	@ (8000f24 <Modbus_init+0x9c>)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	6013      	str	r3, [r2, #0]

	hModbus->RegisterAddress = RegisterStartAddress;
 8000e98:	4b22      	ldr	r3, [pc, #136]	@ (8000f24 <Modbus_init+0x9c>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	683a      	ldr	r2, [r7, #0]
 8000e9e:	605a      	str	r2, [r3, #4]

	//config timer interrupt
	HAL_TIM_RegisterCallback(hModbus->htim,HAL_TIM_OC_DELAY_ELAPSED_CB_ID,(void*)modbus_1t5_Timeout);
 8000ea0:	4b20      	ldr	r3, [pc, #128]	@ (8000f24 <Modbus_init+0x9c>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	691b      	ldr	r3, [r3, #16]
 8000ea6:	4a20      	ldr	r2, [pc, #128]	@ (8000f28 <Modbus_init+0xa0>)
 8000ea8:	2114      	movs	r1, #20
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f003 fcd2 	bl	8004854 <HAL_TIM_RegisterCallback>
	HAL_TIM_RegisterCallback(hModbus->htim,HAL_TIM_PERIOD_ELAPSED_CB_ID ,(void*)modbus_3t5_Timeout);
 8000eb0:	4b1c      	ldr	r3, [pc, #112]	@ (8000f24 <Modbus_init+0x9c>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	691b      	ldr	r3, [r3, #16]
 8000eb6:	4a1d      	ldr	r2, [pc, #116]	@ (8000f2c <Modbus_init+0xa4>)
 8000eb8:	210e      	movs	r1, #14
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f003 fcca 	bl	8004854 <HAL_TIM_RegisterCallback>

	//config UART interrupt
	HAL_UART_RegisterCallback(hModbus->huart,HAL_UART_RX_COMPLETE_CB_ID,(void*)modbus_UART_Recived);
 8000ec0:	4b18      	ldr	r3, [pc, #96]	@ (8000f24 <Modbus_init+0x9c>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	68db      	ldr	r3, [r3, #12]
 8000ec6:	4a1a      	ldr	r2, [pc, #104]	@ (8000f30 <Modbus_init+0xa8>)
 8000ec8:	2103      	movs	r1, #3
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f004 fd12 	bl	80058f4 <HAL_UART_RegisterCallback>
	//start Receive
    HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 8000ed0:	4b14      	ldr	r3, [pc, #80]	@ (8000f24 <Modbus_init+0x9c>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	68d8      	ldr	r0, [r3, #12]
 8000ed6:	4b13      	ldr	r3, [pc, #76]	@ (8000f24 <Modbus_init+0x9c>)
 8000ed8:	681a      	ldr	r2, [r3, #0]
 8000eda:	4b12      	ldr	r3, [pc, #72]	@ (8000f24 <Modbus_init+0x9c>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8000ee2:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 8000ee6:	4413      	add	r3, r2
 8000ee8:	3302      	adds	r3, #2
 8000eea:	2201      	movs	r2, #1
 8000eec:	4619      	mov	r1, r3
 8000eee:	f004 fdbb 	bl	8005a68 <HAL_UART_Receive_IT>


    if(hModbus->htim->State == HAL_TIM_STATE_READY)
 8000ef2:	4b0c      	ldr	r3, [pc, #48]	@ (8000f24 <Modbus_init+0x9c>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	691b      	ldr	r3, [r3, #16]
 8000ef8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8000efc:	b2db      	uxtb	r3, r3
 8000efe:	2b01      	cmp	r3, #1
 8000f00:	d10c      	bne.n	8000f1c <Modbus_init+0x94>
    	{
    		HAL_TIM_Base_Start_IT(hModbus->htim);
 8000f02:	4b08      	ldr	r3, [pc, #32]	@ (8000f24 <Modbus_init+0x9c>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	691b      	ldr	r3, [r3, #16]
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f002 fdd7 	bl	8003abc <HAL_TIM_Base_Start_IT>
    		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 8000f0e:	4b05      	ldr	r3, [pc, #20]	@ (8000f24 <Modbus_init+0x9c>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	691b      	ldr	r3, [r3, #16]
 8000f14:	2100      	movs	r1, #0
 8000f16:	4618      	mov	r0, r3
 8000f18:	f002 ff8c 	bl	8003e34 <HAL_TIM_OnePulse_Start_IT>
    	}

}
 8000f1c:	bf00      	nop
 8000f1e:	3708      	adds	r7, #8
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	20000228 	.word	0x20000228
 8000f28:	08000de5 	.word	0x08000de5
 8000f2c:	08000e05 	.word	0x08000e05
 8000f30:	08000e25 	.word	0x08000e25

08000f34 <CRC16>:
} ;

unsigned short CRC16 ( puchMsg, usDataLen ) /* The function returns the CRC as a unsigned short type */
unsigned char *puchMsg ; /* message to calculate CRC upon */
unsigned short usDataLen ; /* quantity of bytes in message */
{
 8000f34:	b480      	push	{r7}
 8000f36:	b085      	sub	sp, #20
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
 8000f3c:	460b      	mov	r3, r1
 8000f3e:	803b      	strh	r3, [r7, #0]
	unsigned char uchCRCHi = 0xFF ; /* high byte of CRC initialized */
 8000f40:	23ff      	movs	r3, #255	@ 0xff
 8000f42:	73fb      	strb	r3, [r7, #15]
	unsigned char uchCRCLo = 0xFF ; /* low byte of CRC initialized */
 8000f44:	23ff      	movs	r3, #255	@ 0xff
 8000f46:	73bb      	strb	r3, [r7, #14]
	unsigned uIndex ; /* will index into CRC lookup table */
	while (usDataLen--) /* pass through message buffer */
 8000f48:	e013      	b.n	8000f72 <CRC16+0x3e>
	{
		uIndex = uchCRCLo ^ *puchMsg++ ; /* calculate the CRC */
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	1c5a      	adds	r2, r3, #1
 8000f4e:	607a      	str	r2, [r7, #4]
 8000f50:	781a      	ldrb	r2, [r3, #0]
 8000f52:	7bbb      	ldrb	r3, [r7, #14]
 8000f54:	4053      	eors	r3, r2
 8000f56:	b2db      	uxtb	r3, r3
 8000f58:	60bb      	str	r3, [r7, #8]
		uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex] ;
 8000f5a:	4a10      	ldr	r2, [pc, #64]	@ (8000f9c <CRC16+0x68>)
 8000f5c:	68bb      	ldr	r3, [r7, #8]
 8000f5e:	4413      	add	r3, r2
 8000f60:	781a      	ldrb	r2, [r3, #0]
 8000f62:	7bfb      	ldrb	r3, [r7, #15]
 8000f64:	4053      	eors	r3, r2
 8000f66:	73bb      	strb	r3, [r7, #14]
		uchCRCHi = auchCRCLo[uIndex] ;
 8000f68:	4a0d      	ldr	r2, [pc, #52]	@ (8000fa0 <CRC16+0x6c>)
 8000f6a:	68bb      	ldr	r3, [r7, #8]
 8000f6c:	4413      	add	r3, r2
 8000f6e:	781b      	ldrb	r3, [r3, #0]
 8000f70:	73fb      	strb	r3, [r7, #15]
	while (usDataLen--) /* pass through message buffer */
 8000f72:	883b      	ldrh	r3, [r7, #0]
 8000f74:	1e5a      	subs	r2, r3, #1
 8000f76:	803a      	strh	r2, [r7, #0]
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d1e6      	bne.n	8000f4a <CRC16+0x16>
	}
	return (uchCRCHi << 8 | uchCRCLo) ;
 8000f7c:	7bfb      	ldrb	r3, [r7, #15]
 8000f7e:	b21b      	sxth	r3, r3
 8000f80:	021b      	lsls	r3, r3, #8
 8000f82:	b21a      	sxth	r2, r3
 8000f84:	7bbb      	ldrb	r3, [r7, #14]
 8000f86:	b21b      	sxth	r3, r3
 8000f88:	4313      	orrs	r3, r2
 8000f8a:	b21b      	sxth	r3, r3
 8000f8c:	b29b      	uxth	r3, r3
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	3714      	adds	r7, #20
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop
 8000f9c:	20000100 	.word	0x20000100
 8000fa0:	20000000 	.word	0x20000000

08000fa4 <Modbus_Protocal_Worker>:



void Modbus_Protocal_Worker()
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
	switch(hModbus->Mstatus)
 8000faa:	4b80      	ldr	r3, [pc, #512]	@ (80011ac <Modbus_Protocal_Worker+0x208>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	7e1b      	ldrb	r3, [r3, #24]
 8000fb0:	3b01      	subs	r3, #1
 8000fb2:	2b03      	cmp	r3, #3
 8000fb4:	d80a      	bhi.n	8000fcc <Modbus_Protocal_Worker+0x28>
 8000fb6:	a201      	add	r2, pc, #4	@ (adr r2, 8000fbc <Modbus_Protocal_Worker+0x18>)
 8000fb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fbc:	08000fd7 	.word	0x08000fd7
 8000fc0:	08001175 	.word	0x08001175
 8000fc4:	08001061 	.word	0x08001061
 8000fc8:	08001087 	.word	0x08001087
	{
	default:
	case Modbus_state_Init:
		/*init Modbus protocal*/

		hModbus->Mstatus = Modbus_state_Idle;
 8000fcc:	4b77      	ldr	r3, [pc, #476]	@ (80011ac <Modbus_Protocal_Worker+0x208>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	761a      	strb	r2, [r3, #24]
		break;
 8000fd4:	e0e6      	b.n	80011a4 <Modbus_Protocal_Worker+0x200>
	case Modbus_state_Idle:
		/*Idle state*/

		//check that we have response message
		if(hModbus->TxCount)
 8000fd6:	4b75      	ldr	r3, [pc, #468]	@ (80011ac <Modbus_Protocal_Worker+0x208>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	f893 3271 	ldrb.w	r3, [r3, #625]	@ 0x271
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d002      	beq.n	8000fe8 <Modbus_Protocal_Worker+0x44>
		{
			Modbus_Emission();
 8000fe2:	f000 f9d5 	bl	8001390 <Modbus_Emission>
 8000fe6:	e01c      	b.n	8001022 <Modbus_Protocal_Worker+0x7e>
		}

		// Received character
		else if(hModbus->Flag_URev)
 8000fe8:	4b70      	ldr	r3, [pc, #448]	@ (80011ac <Modbus_Protocal_Worker+0x208>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	7d9b      	ldrb	r3, [r3, #22]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d017      	beq.n	8001022 <Modbus_Protocal_Worker+0x7e>
		{
			/*reset Timer flag*/
			hModbus->Flag_T15TimeOut = 0;
 8000ff2:	4b6e      	ldr	r3, [pc, #440]	@ (80011ac <Modbus_Protocal_Worker+0x208>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	751a      	strb	r2, [r3, #20]
			hModbus->Flag_T35TimeOut = 0;
 8000ffa:	4b6c      	ldr	r3, [pc, #432]	@ (80011ac <Modbus_Protocal_Worker+0x208>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	2200      	movs	r2, #0
 8001000:	755a      	strb	r2, [r3, #21]
			__HAL_TIM_ENABLE(hModbus->htim);
 8001002:	4b6a      	ldr	r3, [pc, #424]	@ (80011ac <Modbus_Protocal_Worker+0x208>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	691b      	ldr	r3, [r3, #16]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	681a      	ldr	r2, [r3, #0]
 800100c:	4b67      	ldr	r3, [pc, #412]	@ (80011ac <Modbus_Protocal_Worker+0x208>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	691b      	ldr	r3, [r3, #16]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	f042 0201 	orr.w	r2, r2, #1
 8001018:	601a      	str	r2, [r3, #0]
			/*set state*/
			hModbus->Mstatus= Modbus_state_Reception;
 800101a:	4b64      	ldr	r3, [pc, #400]	@ (80011ac <Modbus_Protocal_Worker+0x208>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	2203      	movs	r2, #3
 8001020:	761a      	strb	r2, [r3, #24]
		}

		//check that if UART RX not start, start receiving
		if(hModbus->huart->RxState == HAL_UART_STATE_READY)
 8001022:	4b62      	ldr	r3, [pc, #392]	@ (80011ac <Modbus_Protocal_Worker+0x208>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	68db      	ldr	r3, [r3, #12]
 8001028:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800102c:	2b20      	cmp	r3, #32
 800102e:	f040 80b2 	bne.w	8001196 <Modbus_Protocal_Worker+0x1f2>
		{
			hModbus->modbusUartStructure.RxTail =0;
 8001032:	4b5e      	ldr	r3, [pc, #376]	@ (80011ac <Modbus_Protocal_Worker+0x208>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	2200      	movs	r2, #0
 8001038:	f8a3 23a2 	strh.w	r2, [r3, #930]	@ 0x3a2
			HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 800103c:	4b5b      	ldr	r3, [pc, #364]	@ (80011ac <Modbus_Protocal_Worker+0x208>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	68d8      	ldr	r0, [r3, #12]
 8001042:	4b5a      	ldr	r3, [pc, #360]	@ (80011ac <Modbus_Protocal_Worker+0x208>)
 8001044:	681a      	ldr	r2, [r3, #0]
 8001046:	4b59      	ldr	r3, [pc, #356]	@ (80011ac <Modbus_Protocal_Worker+0x208>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 800104e:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 8001052:	4413      	add	r3, r2
 8001054:	3302      	adds	r3, #2
 8001056:	2201      	movs	r2, #1
 8001058:	4619      	mov	r1, r3
 800105a:	f004 fd05 	bl	8005a68 <HAL_UART_Receive_IT>
		}
		break;
 800105e:	e09a      	b.n	8001196 <Modbus_Protocal_Worker+0x1f2>
	case Modbus_state_Reception:

		if(hModbus->Flag_T15TimeOut)
 8001060:	4b52      	ldr	r3, [pc, #328]	@ (80011ac <Modbus_Protocal_Worker+0x208>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	7d1b      	ldrb	r3, [r3, #20]
 8001066:	2b00      	cmp	r3, #0
 8001068:	f000 8097 	beq.w	800119a <Modbus_Protocal_Worker+0x1f6>
		{
			/*reset recived flag*/
			hModbus->Flag_URev =0;
 800106c:	4b4f      	ldr	r3, [pc, #316]	@ (80011ac <Modbus_Protocal_Worker+0x208>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	2200      	movs	r2, #0
 8001072:	759a      	strb	r2, [r3, #22]
			hModbus->RecvStatus = Modbus_RecvFrame_Null;
 8001074:	4b4d      	ldr	r3, [pc, #308]	@ (80011ac <Modbus_Protocal_Worker+0x208>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	22fe      	movs	r2, #254	@ 0xfe
 800107a:	75da      	strb	r2, [r3, #23]

			/*compute CRC and Slave address*/



			hModbus->Mstatus = Modbus_state_ControlAndWaiting;
 800107c:	4b4b      	ldr	r3, [pc, #300]	@ (80011ac <Modbus_Protocal_Worker+0x208>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	2204      	movs	r2, #4
 8001082:	761a      	strb	r2, [r3, #24]
		}
		break;
 8001084:	e089      	b.n	800119a <Modbus_Protocal_Worker+0x1f6>
	case Modbus_state_ControlAndWaiting:
		/*Frame error , Not generate response , Clear buffer*/
		if(hModbus->Flag_URev)
 8001086:	4b49      	ldr	r3, [pc, #292]	@ (80011ac <Modbus_Protocal_Worker+0x208>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	7d9b      	ldrb	r3, [r3, #22]
 800108c:	2b00      	cmp	r3, #0
 800108e:	d009      	beq.n	80010a4 <Modbus_Protocal_Worker+0x100>
		{

			if(!hModbus->RecvStatus)
 8001090:	4b46      	ldr	r3, [pc, #280]	@ (80011ac <Modbus_Protocal_Worker+0x208>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	f993 3017 	ldrsb.w	r3, [r3, #23]
 8001098:	2b00      	cmp	r3, #0
 800109a:	d103      	bne.n	80010a4 <Modbus_Protocal_Worker+0x100>
			{
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 800109c:	4b43      	ldr	r3, [pc, #268]	@ (80011ac <Modbus_Protocal_Worker+0x208>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	22ff      	movs	r2, #255	@ 0xff
 80010a2:	75da      	strb	r2, [r3, #23]
			}
		}

		/*Frame Calculation , calculate once*/
		if(hModbus->RecvStatus == Modbus_RecvFrame_Null)
 80010a4:	4b41      	ldr	r3, [pc, #260]	@ (80011ac <Modbus_Protocal_Worker+0x208>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	f993 3017 	ldrsb.w	r3, [r3, #23]
 80010ac:	f113 0f02 	cmn.w	r3, #2
 80010b0:	d150      	bne.n	8001154 <Modbus_Protocal_Worker+0x1b0>
		{
			hModbus->RecvStatus = Modbus_RecvFrame_Normal;
 80010b2:	4b3e      	ldr	r3, [pc, #248]	@ (80011ac <Modbus_Protocal_Worker+0x208>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	2200      	movs	r2, #0
 80010b8:	75da      	strb	r2, [r3, #23]
			// check CRC
			u16u8_t CalculateCRC;
			CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferRx,hModbus->modbusUartStructure.RxTail - 2);
 80010ba:	4b3c      	ldr	r3, [pc, #240]	@ (80011ac <Modbus_Protocal_Worker+0x208>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	f203 2272 	addw	r2, r3, #626	@ 0x272
 80010c2:	4b3a      	ldr	r3, [pc, #232]	@ (80011ac <Modbus_Protocal_Worker+0x208>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 80010ca:	3b02      	subs	r3, #2
 80010cc:	4619      	mov	r1, r3
 80010ce:	4610      	mov	r0, r2
 80010d0:	f7ff ff30 	bl	8000f34 <CRC16>
 80010d4:	4603      	mov	r3, r0
 80010d6:	80bb      	strh	r3, [r7, #4]

			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 80010d8:	793a      	ldrb	r2, [r7, #4]
 80010da:	4b34      	ldr	r3, [pc, #208]	@ (80011ac <Modbus_Protocal_Worker+0x208>)
 80010dc:	6819      	ldr	r1, [r3, #0]
 80010de:	4b33      	ldr	r3, [pc, #204]	@ (80011ac <Modbus_Protocal_Worker+0x208>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 80010e6:	3b02      	subs	r3, #2
 80010e8:	440b      	add	r3, r1
 80010ea:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
 80010ee:	429a      	cmp	r2, r3
 80010f0:	d10c      	bne.n	800110c <Modbus_Protocal_Worker+0x168>
			&& CalculateCRC.U8[1] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail -1]))
 80010f2:	797a      	ldrb	r2, [r7, #5]
 80010f4:	4b2d      	ldr	r3, [pc, #180]	@ (80011ac <Modbus_Protocal_Worker+0x208>)
 80010f6:	6819      	ldr	r1, [r3, #0]
 80010f8:	4b2c      	ldr	r3, [pc, #176]	@ (80011ac <Modbus_Protocal_Worker+0x208>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8001100:	3b01      	subs	r3, #1
 8001102:	440b      	add	r3, r1
 8001104:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 8001108:	429a      	cmp	r2, r3
 800110a:	d004      	beq.n	8001116 <Modbus_Protocal_Worker+0x172>
			{
				// communication unsuccessful
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 800110c:	4b27      	ldr	r3, [pc, #156]	@ (80011ac <Modbus_Protocal_Worker+0x208>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	22ff      	movs	r2, #255	@ 0xff
 8001112:	75da      	strb	r2, [r3, #23]
				break;
 8001114:	e046      	b.n	80011a4 <Modbus_Protocal_Worker+0x200>
			}

			//check Slave Address
			if(hModbus->modbusUartStructure.MessageBufferRx[0] != hModbus->slaveAddress)
 8001116:	4b25      	ldr	r3, [pc, #148]	@ (80011ac <Modbus_Protocal_Worker+0x208>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f893 2272 	ldrb.w	r2, [r3, #626]	@ 0x272
 800111e:	4b23      	ldr	r3, [pc, #140]	@ (80011ac <Modbus_Protocal_Worker+0x208>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	429a      	cmp	r2, r3
 8001126:	d113      	bne.n	8001150 <Modbus_Protocal_Worker+0x1ac>
				break;

			//copy recivced frame
			memcpy(hModbus->Rxframe,
 8001128:	4b20      	ldr	r3, [pc, #128]	@ (80011ac <Modbus_Protocal_Worker+0x208>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f103 0019 	add.w	r0, r3, #25
					hModbus->modbusUartStructure.MessageBufferRx+1,
 8001130:	4b1e      	ldr	r3, [pc, #120]	@ (80011ac <Modbus_Protocal_Worker+0x208>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f203 2372 	addw	r3, r3, #626	@ 0x272
			memcpy(hModbus->Rxframe,
 8001138:	1c59      	adds	r1, r3, #1
					hModbus->modbusUartStructure.RxTail-3);
 800113a:	4b1c      	ldr	r3, [pc, #112]	@ (80011ac <Modbus_Protocal_Worker+0x208>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8001142:	3b03      	subs	r3, #3
			memcpy(hModbus->Rxframe,
 8001144:	461a      	mov	r2, r3
 8001146:	f006 fff7 	bl	8008138 <memcpy>

			//execute command
			Modbus_frame_response();
 800114a:	f000 f909 	bl	8001360 <Modbus_frame_response>
 800114e:	e001      	b.n	8001154 <Modbus_Protocal_Worker+0x1b0>
				break;
 8001150:	bf00      	nop
					}
		break;


	}
}
 8001152:	e027      	b.n	80011a4 <Modbus_Protocal_Worker+0x200>
		if(hModbus->Flag_T35TimeOut)
 8001154:	4b15      	ldr	r3, [pc, #84]	@ (80011ac <Modbus_Protocal_Worker+0x208>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	7d5b      	ldrb	r3, [r3, #21]
 800115a:	2b00      	cmp	r3, #0
 800115c:	d01f      	beq.n	800119e <Modbus_Protocal_Worker+0x1fa>
			hModbus->Mstatus = Modbus_state_Idle;
 800115e:	4b13      	ldr	r3, [pc, #76]	@ (80011ac <Modbus_Protocal_Worker+0x208>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	2201      	movs	r2, #1
 8001164:	761a      	strb	r2, [r3, #24]
			HAL_UART_AbortReceive(hModbus->huart);
 8001166:	4b11      	ldr	r3, [pc, #68]	@ (80011ac <Modbus_Protocal_Worker+0x208>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	68db      	ldr	r3, [r3, #12]
 800116c:	4618      	mov	r0, r3
 800116e:	f004 fd47 	bl	8005c00 <HAL_UART_AbortReceive>
		break;
 8001172:	e014      	b.n	800119e <Modbus_Protocal_Worker+0x1fa>
		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8001174:	4b0d      	ldr	r3, [pc, #52]	@ (80011ac <Modbus_Protocal_Worker+0x208>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	68db      	ldr	r3, [r3, #12]
 800117a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800117e:	2b20      	cmp	r3, #32
 8001180:	d10f      	bne.n	80011a2 <Modbus_Protocal_Worker+0x1fe>
			hModbus->TxCount=0;
 8001182:	4b0a      	ldr	r3, [pc, #40]	@ (80011ac <Modbus_Protocal_Worker+0x208>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	2200      	movs	r2, #0
 8001188:	f883 2271 	strb.w	r2, [r3, #625]	@ 0x271
			hModbus->Mstatus = Modbus_state_Idle;
 800118c:	4b07      	ldr	r3, [pc, #28]	@ (80011ac <Modbus_Protocal_Worker+0x208>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	2201      	movs	r2, #1
 8001192:	761a      	strb	r2, [r3, #24]
		break;
 8001194:	e005      	b.n	80011a2 <Modbus_Protocal_Worker+0x1fe>
		break;
 8001196:	bf00      	nop
 8001198:	e004      	b.n	80011a4 <Modbus_Protocal_Worker+0x200>
		break;
 800119a:	bf00      	nop
 800119c:	e002      	b.n	80011a4 <Modbus_Protocal_Worker+0x200>
		break;
 800119e:	bf00      	nop
 80011a0:	e000      	b.n	80011a4 <Modbus_Protocal_Worker+0x200>
		break;
 80011a2:	bf00      	nop
}
 80011a4:	bf00      	nop
 80011a6:	3708      	adds	r7, #8
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	20000228 	.word	0x20000228

080011b0 <modbusWrite1Register>:
void modbusWrite1Register() //function 06
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0

	//write data to register
	uint16_t startAddress = (hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]);
 80011b6:	4b1d      	ldr	r3, [pc, #116]	@ (800122c <modbusWrite1Register+0x7c>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	7e9b      	ldrb	r3, [r3, #26]
 80011bc:	021b      	lsls	r3, r3, #8
 80011be:	b29b      	uxth	r3, r3
 80011c0:	4a1a      	ldr	r2, [pc, #104]	@ (800122c <modbusWrite1Register+0x7c>)
 80011c2:	6812      	ldr	r2, [r2, #0]
 80011c4:	7ed2      	ldrb	r2, [r2, #27]
 80011c6:	4413      	add	r3, r2
 80011c8:	80fb      	strh	r3, [r7, #6]

	if(startAddress > hModbus->RegisterSize)
 80011ca:	88fa      	ldrh	r2, [r7, #6]
 80011cc:	4b17      	ldr	r3, [pc, #92]	@ (800122c <modbusWrite1Register+0x7c>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	689b      	ldr	r3, [r3, #8]
 80011d2:	429a      	cmp	r2, r3
 80011d4:	d903      	bls.n	80011de <modbusWrite1Register+0x2e>
		{
			 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 80011d6:	2002      	movs	r0, #2
 80011d8:	f000 f8a0 	bl	800131c <ModbusErrorReply>
			 return;
 80011dc:	e023      	b.n	8001226 <modbusWrite1Register+0x76>
		}


	hModbus->RegisterAddress[startAddress].U8[1] = hModbus->Rxframe[3];
 80011de:	4b13      	ldr	r3, [pc, #76]	@ (800122c <modbusWrite1Register+0x7c>)
 80011e0:	681a      	ldr	r2, [r3, #0]
 80011e2:	4b12      	ldr	r3, [pc, #72]	@ (800122c <modbusWrite1Register+0x7c>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	6859      	ldr	r1, [r3, #4]
 80011e8:	88fb      	ldrh	r3, [r7, #6]
 80011ea:	005b      	lsls	r3, r3, #1
 80011ec:	440b      	add	r3, r1
 80011ee:	7f12      	ldrb	r2, [r2, #28]
 80011f0:	705a      	strb	r2, [r3, #1]
	hModbus->RegisterAddress[startAddress].U8[0] = hModbus->Rxframe[4];
 80011f2:	4b0e      	ldr	r3, [pc, #56]	@ (800122c <modbusWrite1Register+0x7c>)
 80011f4:	681a      	ldr	r2, [r3, #0]
 80011f6:	4b0d      	ldr	r3, [pc, #52]	@ (800122c <modbusWrite1Register+0x7c>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	6859      	ldr	r1, [r3, #4]
 80011fc:	88fb      	ldrh	r3, [r7, #6]
 80011fe:	005b      	lsls	r3, r3, #1
 8001200:	440b      	add	r3, r1
 8001202:	7f52      	ldrb	r2, [r2, #29]
 8001204:	701a      	strb	r2, [r3, #0]



	//generate response
	memcpy(hModbus->Txframe,
 8001206:	4b09      	ldr	r3, [pc, #36]	@ (800122c <modbusWrite1Register+0x7c>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f203 1045 	addw	r0, r3, #325	@ 0x145
			hModbus->Rxframe,
 800120e:	4b07      	ldr	r3, [pc, #28]	@ (800122c <modbusWrite1Register+0x7c>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	3319      	adds	r3, #25
	memcpy(hModbus->Txframe,
 8001214:	2208      	movs	r2, #8
 8001216:	4619      	mov	r1, r3
 8001218:	f006 ff8e 	bl	8008138 <memcpy>
			8);
	//set number of byte to sent
	hModbus->TxCount=5;
 800121c:	4b03      	ldr	r3, [pc, #12]	@ (800122c <modbusWrite1Register+0x7c>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	2205      	movs	r2, #5
 8001222:	f883 2271 	strb.w	r2, [r3, #625]	@ 0x271



}
 8001226:	3708      	adds	r7, #8
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}
 800122c:	20000228 	.word	0x20000228

08001230 <modbusRead1Register>:

void modbusRead1Register() // function 03
{
 8001230:	b590      	push	{r4, r7, lr}
 8001232:	b083      	sub	sp, #12
 8001234:	af00      	add	r7, sp, #0



	uint16_t numberOfDataToRead =((hModbus->Rxframe[3]<<8)+(hModbus->Rxframe[4]));
 8001236:	4b38      	ldr	r3, [pc, #224]	@ (8001318 <modbusRead1Register+0xe8>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	7f1b      	ldrb	r3, [r3, #28]
 800123c:	021b      	lsls	r3, r3, #8
 800123e:	b29b      	uxth	r3, r3
 8001240:	4a35      	ldr	r2, [pc, #212]	@ (8001318 <modbusRead1Register+0xe8>)
 8001242:	6812      	ldr	r2, [r2, #0]
 8001244:	7f52      	ldrb	r2, [r2, #29]
 8001246:	4413      	add	r3, r2
 8001248:	80fb      	strh	r3, [r7, #6]
	uint16_t startAddress =((hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]));
 800124a:	4b33      	ldr	r3, [pc, #204]	@ (8001318 <modbusRead1Register+0xe8>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	7e9b      	ldrb	r3, [r3, #26]
 8001250:	021b      	lsls	r3, r3, #8
 8001252:	b29b      	uxth	r3, r3
 8001254:	4a30      	ldr	r2, [pc, #192]	@ (8001318 <modbusRead1Register+0xe8>)
 8001256:	6812      	ldr	r2, [r2, #0]
 8001258:	7ed2      	ldrb	r2, [r2, #27]
 800125a:	4413      	add	r3, r2
 800125c:	80bb      	strh	r3, [r7, #4]

	//check quantity and address range

	if(numberOfDataToRead <1 ||numberOfDataToRead > 0x7D)
 800125e:	88fb      	ldrh	r3, [r7, #6]
 8001260:	2b00      	cmp	r3, #0
 8001262:	d002      	beq.n	800126a <modbusRead1Register+0x3a>
 8001264:	88fb      	ldrh	r3, [r7, #6]
 8001266:	2b7d      	cmp	r3, #125	@ 0x7d
 8001268:	d903      	bls.n	8001272 <modbusRead1Register+0x42>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataValue);
 800126a:	2003      	movs	r0, #3
 800126c:	f000 f856 	bl	800131c <ModbusErrorReply>
		 return;
 8001270:	e04e      	b.n	8001310 <modbusRead1Register+0xe0>
	}

	if(startAddress > hModbus->RegisterSize || (startAddress +  numberOfDataToRead) > hModbus->RegisterSize)
 8001272:	88ba      	ldrh	r2, [r7, #4]
 8001274:	4b28      	ldr	r3, [pc, #160]	@ (8001318 <modbusRead1Register+0xe8>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	689b      	ldr	r3, [r3, #8]
 800127a:	429a      	cmp	r2, r3
 800127c:	d808      	bhi.n	8001290 <modbusRead1Register+0x60>
 800127e:	88ba      	ldrh	r2, [r7, #4]
 8001280:	88fb      	ldrh	r3, [r7, #6]
 8001282:	4413      	add	r3, r2
 8001284:	461a      	mov	r2, r3
 8001286:	4b24      	ldr	r3, [pc, #144]	@ (8001318 <modbusRead1Register+0xe8>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	689b      	ldr	r3, [r3, #8]
 800128c:	429a      	cmp	r2, r3
 800128e:	d903      	bls.n	8001298 <modbusRead1Register+0x68>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 8001290:	2002      	movs	r0, #2
 8001292:	f000 f843 	bl	800131c <ModbusErrorReply>
		 return;
 8001296:	e03b      	b.n	8001310 <modbusRead1Register+0xe0>
	}


	//generate response
	hModbus->Txframe[0] = Modbus_function_Read_Holding_Register;
 8001298:	4b1f      	ldr	r3, [pc, #124]	@ (8001318 <modbusRead1Register+0xe8>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	2203      	movs	r2, #3
 800129e:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	hModbus->Txframe[1] = (2*numberOfDataToRead) & 0xFF;
 80012a2:	88fb      	ldrh	r3, [r7, #6]
 80012a4:	b2da      	uxtb	r2, r3
 80012a6:	4b1c      	ldr	r3, [pc, #112]	@ (8001318 <modbusRead1Register+0xe8>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	0052      	lsls	r2, r2, #1
 80012ac:	b2d2      	uxtb	r2, r2
 80012ae:	f883 2146 	strb.w	r2, [r3, #326]	@ 0x146
	register int i;
	for(i=0; i<numberOfDataToRead;i++)
 80012b2:	2400      	movs	r4, #0
 80012b4:	e020      	b.n	80012f8 <modbusRead1Register+0xc8>
	{
		hModbus->Txframe[2*i+2]=hModbus->RegisterAddress[startAddress+i].U8[1];
 80012b6:	4b18      	ldr	r3, [pc, #96]	@ (8001318 <modbusRead1Register+0xe8>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	685a      	ldr	r2, [r3, #4]
 80012bc:	88bb      	ldrh	r3, [r7, #4]
 80012be:	4423      	add	r3, r4
 80012c0:	005b      	lsls	r3, r3, #1
 80012c2:	18d1      	adds	r1, r2, r3
 80012c4:	4b14      	ldr	r3, [pc, #80]	@ (8001318 <modbusRead1Register+0xe8>)
 80012c6:	681a      	ldr	r2, [r3, #0]
 80012c8:	1c63      	adds	r3, r4, #1
 80012ca:	005b      	lsls	r3, r3, #1
 80012cc:	7849      	ldrb	r1, [r1, #1]
 80012ce:	4413      	add	r3, r2
 80012d0:	460a      	mov	r2, r1
 80012d2:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
		hModbus->Txframe[2*i+3]=hModbus->RegisterAddress[startAddress+i].U8[0];
 80012d6:	4b10      	ldr	r3, [pc, #64]	@ (8001318 <modbusRead1Register+0xe8>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	685a      	ldr	r2, [r3, #4]
 80012dc:	88bb      	ldrh	r3, [r7, #4]
 80012de:	4423      	add	r3, r4
 80012e0:	005b      	lsls	r3, r3, #1
 80012e2:	18d1      	adds	r1, r2, r3
 80012e4:	4b0c      	ldr	r3, [pc, #48]	@ (8001318 <modbusRead1Register+0xe8>)
 80012e6:	681a      	ldr	r2, [r3, #0]
 80012e8:	0063      	lsls	r3, r4, #1
 80012ea:	3303      	adds	r3, #3
 80012ec:	7809      	ldrb	r1, [r1, #0]
 80012ee:	4413      	add	r3, r2
 80012f0:	460a      	mov	r2, r1
 80012f2:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	for(i=0; i<numberOfDataToRead;i++)
 80012f6:	3401      	adds	r4, #1
 80012f8:	88fb      	ldrh	r3, [r7, #6]
 80012fa:	429c      	cmp	r4, r3
 80012fc:	dbdb      	blt.n	80012b6 <modbusRead1Register+0x86>
	}
	hModbus->TxCount = 2+2*numberOfDataToRead;
 80012fe:	88fb      	ldrh	r3, [r7, #6]
 8001300:	3301      	adds	r3, #1
 8001302:	b2da      	uxtb	r2, r3
 8001304:	4b04      	ldr	r3, [pc, #16]	@ (8001318 <modbusRead1Register+0xe8>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	0052      	lsls	r2, r2, #1
 800130a:	b2d2      	uxtb	r2, r2
 800130c:	f883 2271 	strb.w	r2, [r3, #625]	@ 0x271

}
 8001310:	370c      	adds	r7, #12
 8001312:	46bd      	mov	sp, r7
 8001314:	bd90      	pop	{r4, r7, pc}
 8001316:	bf00      	nop
 8001318:	20000228 	.word	0x20000228

0800131c <ModbusErrorReply>:

void ModbusErrorReply(uint8_t Errorcode)
{
 800131c:	b480      	push	{r7}
 800131e:	b083      	sub	sp, #12
 8001320:	af00      	add	r7, sp, #0
 8001322:	4603      	mov	r3, r0
 8001324:	71fb      	strb	r3, [r7, #7]
	hModbus->Txframe[0] = hModbus->Rxframe[0] | 0x80;
 8001326:	4b0d      	ldr	r3, [pc, #52]	@ (800135c <ModbusErrorReply+0x40>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	7e5a      	ldrb	r2, [r3, #25]
 800132c:	4b0b      	ldr	r3, [pc, #44]	@ (800135c <ModbusErrorReply+0x40>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8001334:	b2d2      	uxtb	r2, r2
 8001336:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	hModbus->Txframe[1] = Errorcode;
 800133a:	4b08      	ldr	r3, [pc, #32]	@ (800135c <ModbusErrorReply+0x40>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	79fa      	ldrb	r2, [r7, #7]
 8001340:	f883 2146 	strb.w	r2, [r3, #326]	@ 0x146
	hModbus->TxCount = 2;
 8001344:	4b05      	ldr	r3, [pc, #20]	@ (800135c <ModbusErrorReply+0x40>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	2202      	movs	r2, #2
 800134a:	f883 2271 	strb.w	r2, [r3, #625]	@ 0x271
}
 800134e:	bf00      	nop
 8001350:	370c      	adds	r7, #12
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr
 800135a:	bf00      	nop
 800135c:	20000228 	.word	0x20000228

08001360 <Modbus_frame_response>:

void Modbus_frame_response()
{
 8001360:	b580      	push	{r7, lr}
 8001362:	af00      	add	r7, sp, #0
	switch(hModbus->Rxframe[0]) //check funcion
 8001364:	4b09      	ldr	r3, [pc, #36]	@ (800138c <Modbus_frame_response+0x2c>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	7e5b      	ldrb	r3, [r3, #25]
 800136a:	2b03      	cmp	r3, #3
 800136c:	d004      	beq.n	8001378 <Modbus_frame_response+0x18>
 800136e:	2b06      	cmp	r3, #6
 8001370:	d105      	bne.n	800137e <Modbus_frame_response+0x1e>
	{
	case Modbus_function_Write_SingleRegister:
		modbusWrite1Register();
 8001372:	f7ff ff1d 	bl	80011b0 <modbusWrite1Register>
		break;
 8001376:	e006      	b.n	8001386 <Modbus_frame_response+0x26>
	case Modbus_function_Read_Holding_Register:
		modbusRead1Register();
 8001378:	f7ff ff5a 	bl	8001230 <modbusRead1Register>
		break;
 800137c:	e003      	b.n	8001386 <Modbus_frame_response+0x26>
	default:
		 ModbusErrorReply(Modbus_RecvFrame_IllegalFunction);
 800137e:	2001      	movs	r0, #1
 8001380:	f7ff ffcc 	bl	800131c <ModbusErrorReply>
		break;
 8001384:	bf00      	nop

	}
}
 8001386:	bf00      	nop
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	20000228 	.word	0x20000228

08001390 <Modbus_Emission>:

void Modbus_Emission()
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b082      	sub	sp, #8
 8001394:	af00      	add	r7, sp, #0
	if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8001396:	4b3c      	ldr	r3, [pc, #240]	@ (8001488 <Modbus_Emission+0xf8>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	68db      	ldr	r3, [r3, #12]
 800139c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80013a0:	2b20      	cmp	r3, #32
 80013a2:	d15d      	bne.n	8001460 <Modbus_Emission+0xd0>
	{
		//generate response package
		hModbus->modbusUartStructure.MessageBufferTx[0] = hModbus->slaveAddress;
 80013a4:	4b38      	ldr	r3, [pc, #224]	@ (8001488 <Modbus_Emission+0xf8>)
 80013a6:	681a      	ldr	r2, [r3, #0]
 80013a8:	4b37      	ldr	r3, [pc, #220]	@ (8001488 <Modbus_Emission+0xf8>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	7812      	ldrb	r2, [r2, #0]
 80013ae:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		memcpy
		(
				hModbus->modbusUartStructure.MessageBufferTx+1,
 80013b2:	4b35      	ldr	r3, [pc, #212]	@ (8001488 <Modbus_Emission+0xf8>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f503 7369 	add.w	r3, r3, #932	@ 0x3a4
		memcpy
 80013ba:	1c58      	adds	r0, r3, #1
				hModbus->Txframe,
 80013bc:	4b32      	ldr	r3, [pc, #200]	@ (8001488 <Modbus_Emission+0xf8>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f203 1145 	addw	r1, r3, #325	@ 0x145
				hModbus->TxCount
 80013c4:	4b30      	ldr	r3, [pc, #192]	@ (8001488 <Modbus_Emission+0xf8>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f893 3271 	ldrb.w	r3, [r3, #625]	@ 0x271
		memcpy
 80013cc:	461a      	mov	r2, r3
 80013ce:	f006 feb3 	bl	8008138 <memcpy>
		);

		hModbus->modbusUartStructure.TxTail = hModbus->TxCount+3;
 80013d2:	4b2d      	ldr	r3, [pc, #180]	@ (8001488 <Modbus_Emission+0xf8>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f893 3271 	ldrb.w	r3, [r3, #625]	@ 0x271
 80013da:	461a      	mov	r2, r3
 80013dc:	4b2a      	ldr	r3, [pc, #168]	@ (8001488 <Modbus_Emission+0xf8>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	3203      	adds	r2, #3
 80013e2:	b292      	uxth	r2, r2
 80013e4:	f8a3 24d4 	strh.w	r2, [r3, #1236]	@ 0x4d4

		u16u8_t CalculateCRC;
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 80013e8:	4b27      	ldr	r3, [pc, #156]	@ (8001488 <Modbus_Emission+0xf8>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f503 7269 	add.w	r2, r3, #932	@ 0x3a4
				hModbus->modbusUartStructure.TxTail - 2);
 80013f0:	4b25      	ldr	r3, [pc, #148]	@ (8001488 <Modbus_Emission+0xf8>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 80013f8:	3b02      	subs	r3, #2
 80013fa:	4619      	mov	r1, r3
 80013fc:	4610      	mov	r0, r2
 80013fe:	f7ff fd99 	bl	8000f34 <CRC16>
 8001402:	4603      	mov	r3, r0
 8001404:	80bb      	strh	r3, [r7, #4]

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-2]
 8001406:	4b20      	ldr	r3, [pc, #128]	@ (8001488 <Modbus_Emission+0xf8>)
 8001408:	681a      	ldr	r2, [r3, #0]
 800140a:	4b1f      	ldr	r3, [pc, #124]	@ (8001488 <Modbus_Emission+0xf8>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 8001412:	3b02      	subs	r3, #2
													 =CalculateCRC.U8[0];
 8001414:	7939      	ldrb	r1, [r7, #4]
 8001416:	4413      	add	r3, r2
 8001418:	460a      	mov	r2, r1
 800141a:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-1]
 800141e:	4b1a      	ldr	r3, [pc, #104]	@ (8001488 <Modbus_Emission+0xf8>)
 8001420:	681a      	ldr	r2, [r3, #0]
 8001422:	4b19      	ldr	r3, [pc, #100]	@ (8001488 <Modbus_Emission+0xf8>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 800142a:	3b01      	subs	r3, #1
													 =CalculateCRC.U8[1];
 800142c:	7979      	ldrb	r1, [r7, #5]
 800142e:	4413      	add	r3, r2
 8001430:	460a      	mov	r2, r1
 8001432:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4


		//sent modbus

		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8001436:	4b14      	ldr	r3, [pc, #80]	@ (8001488 <Modbus_Emission+0xf8>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	68db      	ldr	r3, [r3, #12]
 800143c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001440:	2b20      	cmp	r3, #32
 8001442:	d10d      	bne.n	8001460 <Modbus_Emission+0xd0>
		{
			HAL_UART_Transmit_DMA(hModbus->huart
 8001444:	4b10      	ldr	r3, [pc, #64]	@ (8001488 <Modbus_Emission+0xf8>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	68d8      	ldr	r0, [r3, #12]
					,hModbus->modbusUartStructure.MessageBufferTx
 800144a:	4b0f      	ldr	r3, [pc, #60]	@ (8001488 <Modbus_Emission+0xf8>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f503 7169 	add.w	r1, r3, #932	@ 0x3a4
					,hModbus->modbusUartStructure.TxTail);
 8001452:	4b0d      	ldr	r3, [pc, #52]	@ (8001488 <Modbus_Emission+0xf8>)
 8001454:	681b      	ldr	r3, [r3, #0]
			HAL_UART_Transmit_DMA(hModbus->huart
 8001456:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 800145a:	461a      	mov	r2, r3
 800145c:	f004 fb50 	bl	8005b00 <HAL_UART_Transmit_DMA>



	}
	/*reset Timer flag*/
	hModbus->Flag_T15TimeOut = 0;
 8001460:	4b09      	ldr	r3, [pc, #36]	@ (8001488 <Modbus_Emission+0xf8>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	2200      	movs	r2, #0
 8001466:	751a      	strb	r2, [r3, #20]
	hModbus->Flag_T35TimeOut = 0;
 8001468:	4b07      	ldr	r3, [pc, #28]	@ (8001488 <Modbus_Emission+0xf8>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	2200      	movs	r2, #0
 800146e:	755a      	strb	r2, [r3, #21]
	hModbus->Flag_URev =0;
 8001470:	4b05      	ldr	r3, [pc, #20]	@ (8001488 <Modbus_Emission+0xf8>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	2200      	movs	r2, #0
 8001476:	759a      	strb	r2, [r3, #22]
	/*set state*/
	hModbus->Mstatus= Modbus_state_Emission;
 8001478:	4b03      	ldr	r3, [pc, #12]	@ (8001488 <Modbus_Emission+0xf8>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	2202      	movs	r2, #2
 800147e:	761a      	strb	r2, [r3, #24]
}
 8001480:	bf00      	nop
 8001482:	3708      	adds	r7, #8
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}
 8001488:	20000228 	.word	0x20000228

0800148c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001490:	f000 fc3f 	bl	8001d12 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001494:	f000 f85c 	bl	8001550 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001498:	f000 fa4e 	bl	8001938 <MX_GPIO_Init>
  MX_DMA_Init();
 800149c:	f000 fa22 	bl	80018e4 <MX_DMA_Init>
  MX_TIM16_Init();
 80014a0:	f000 f952 	bl	8001748 <MX_TIM16_Init>
  MX_USART2_UART_Init();
 80014a4:	f000 f9d0 	bl	8001848 <MX_USART2_UART_Init>
  MX_TIM8_Init();
 80014a8:	f000 f89e 	bl	80015e8 <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */
  hmodbus.huart = &huart2;
 80014ac:	4b1f      	ldr	r3, [pc, #124]	@ (800152c <main+0xa0>)
 80014ae:	4a20      	ldr	r2, [pc, #128]	@ (8001530 <main+0xa4>)
 80014b0:	60da      	str	r2, [r3, #12]
  hmodbus.htim = &htim16;
 80014b2:	4b1e      	ldr	r3, [pc, #120]	@ (800152c <main+0xa0>)
 80014b4:	4a1f      	ldr	r2, [pc, #124]	@ (8001534 <main+0xa8>)
 80014b6:	611a      	str	r2, [r3, #16]
  hmodbus.slaveAddress = 0x15;
 80014b8:	4b1c      	ldr	r3, [pc, #112]	@ (800152c <main+0xa0>)
 80014ba:	2215      	movs	r2, #21
 80014bc:	701a      	strb	r2, [r3, #0]
  hmodbus.RegisterSize =200;
 80014be:	4b1b      	ldr	r3, [pc, #108]	@ (800152c <main+0xa0>)
 80014c0:	22c8      	movs	r2, #200	@ 0xc8
 80014c2:	609a      	str	r2, [r3, #8]
  Modbus_init(&hmodbus, registerFrame);
 80014c4:	491c      	ldr	r1, [pc, #112]	@ (8001538 <main+0xac>)
 80014c6:	4819      	ldr	r0, [pc, #100]	@ (800152c <main+0xa0>)
 80014c8:	f7ff fcde 	bl	8000e88 <Modbus_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  Modbus_Protocal_Worker();
 80014cc:	f7ff fd6a 	bl	8000fa4 <Modbus_Protocal_Worker>
	  R_goal =modbus_set_goal_r_position(&hmodbus);
 80014d0:	4816      	ldr	r0, [pc, #88]	@ (800152c <main+0xa0>)
 80014d2:	f7ff fc47 	bl	8000d64 <modbus_set_goal_r_position>
 80014d6:	ee07 0a90 	vmov	s15, r0
 80014da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014de:	4b17      	ldr	r3, [pc, #92]	@ (800153c <main+0xb0>)
 80014e0:	edc3 7a00 	vstr	s15, [r3]
	  theta_goal =modbus_set_goal_theta_position(&hmodbus);
 80014e4:	4811      	ldr	r0, [pc, #68]	@ (800152c <main+0xa0>)
 80014e6:	f7ff fc5d 	bl	8000da4 <modbus_set_goal_theta_position>
 80014ea:	ee07 0a90 	vmov	s15, r0
 80014ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014f2:	4b13      	ldr	r3, [pc, #76]	@ (8001540 <main+0xb4>)
 80014f4:	edc3 7a00 	vstr	s15, [r3]
	  status_Base = modbus_Base_System_Status(&hmodbus);
 80014f8:	480c      	ldr	r0, [pc, #48]	@ (800152c <main+0xa0>)
 80014fa:	f7ff fc11 	bl	8000d20 <modbus_Base_System_Status>
 80014fe:	4603      	mov	r3, r0
 8001500:	b2da      	uxtb	r2, r3
 8001502:	4b10      	ldr	r3, [pc, #64]	@ (8001544 <main+0xb8>)
 8001504:	701a      	strb	r2, [r3, #0]
	  status_moving =R_Theta_moving_Status(&hmodbus,A);
 8001506:	4b10      	ldr	r3, [pc, #64]	@ (8001548 <main+0xbc>)
 8001508:	781b      	ldrb	r3, [r3, #0]
 800150a:	4619      	mov	r1, r3
 800150c:	4807      	ldr	r0, [pc, #28]	@ (800152c <main+0xa0>)
 800150e:	f7ff fc17 	bl	8000d40 <R_Theta_moving_Status>
 8001512:	4603      	mov	r3, r0
 8001514:	b2da      	uxtb	r2, r3
 8001516:	4b0d      	ldr	r3, [pc, #52]	@ (800154c <main+0xc0>)
 8001518:	701a      	strb	r2, [r3, #0]
	  registerFrame[0x00].U16 = 22881;
 800151a:	4b07      	ldr	r3, [pc, #28]	@ (8001538 <main+0xac>)
 800151c:	f645 1261 	movw	r2, #22881	@ 0x5961
 8001520:	801a      	strh	r2, [r3, #0]
	  registerFrame[0x15].U16 = 100;
 8001522:	4b05      	ldr	r3, [pc, #20]	@ (8001538 <main+0xac>)
 8001524:	2264      	movs	r2, #100	@ 0x64
 8001526:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
 8001528:	bf00      	nop
 800152a:	e7cf      	b.n	80014cc <main+0x40>
 800152c:	200004f0 	.word	0x200004f0
 8001530:	200003c4 	.word	0x200003c4
 8001534:	200002f8 	.word	0x200002f8
 8001538:	200009c8 	.word	0x200009c8
 800153c:	20000b58 	.word	0x20000b58
 8001540:	20000b5c 	.word	0x20000b5c
 8001544:	20000b60 	.word	0x20000b60
 8001548:	20000b62 	.word	0x20000b62
 800154c:	20000b61 	.word	0x20000b61

08001550 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b094      	sub	sp, #80	@ 0x50
 8001554:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001556:	f107 0318 	add.w	r3, r7, #24
 800155a:	2238      	movs	r2, #56	@ 0x38
 800155c:	2100      	movs	r1, #0
 800155e:	4618      	mov	r0, r3
 8001560:	f006 fdbe 	bl	80080e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001564:	1d3b      	adds	r3, r7, #4
 8001566:	2200      	movs	r2, #0
 8001568:	601a      	str	r2, [r3, #0]
 800156a:	605a      	str	r2, [r3, #4]
 800156c:	609a      	str	r2, [r3, #8]
 800156e:	60da      	str	r2, [r3, #12]
 8001570:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001572:	2000      	movs	r0, #0
 8001574:	f001 fa0e 	bl	8002994 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001578:	2302      	movs	r3, #2
 800157a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800157c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001580:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001582:	2340      	movs	r3, #64	@ 0x40
 8001584:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001586:	2302      	movs	r3, #2
 8001588:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800158a:	2302      	movs	r3, #2
 800158c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800158e:	2304      	movs	r3, #4
 8001590:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001592:	2355      	movs	r3, #85	@ 0x55
 8001594:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001596:	2302      	movs	r3, #2
 8001598:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800159a:	2302      	movs	r3, #2
 800159c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800159e:	2302      	movs	r3, #2
 80015a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015a2:	f107 0318 	add.w	r3, r7, #24
 80015a6:	4618      	mov	r0, r3
 80015a8:	f001 faa8 	bl	8002afc <HAL_RCC_OscConfig>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d001      	beq.n	80015b6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80015b2:	f000 f9fd 	bl	80019b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015b6:	230f      	movs	r3, #15
 80015b8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015ba:	2303      	movs	r3, #3
 80015bc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015be:	2300      	movs	r3, #0
 80015c0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80015c2:	2300      	movs	r3, #0
 80015c4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015c6:	2300      	movs	r3, #0
 80015c8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80015ca:	1d3b      	adds	r3, r7, #4
 80015cc:	2104      	movs	r1, #4
 80015ce:	4618      	mov	r0, r3
 80015d0:	f001 fda6 	bl	8003120 <HAL_RCC_ClockConfig>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d001      	beq.n	80015de <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80015da:	f000 f9e9 	bl	80019b0 <Error_Handler>
  }
}
 80015de:	bf00      	nop
 80015e0:	3750      	adds	r7, #80	@ 0x50
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
	...

080015e8 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b09c      	sub	sp, #112	@ 0x70
 80015ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015ee:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80015f2:	2200      	movs	r2, #0
 80015f4:	601a      	str	r2, [r3, #0]
 80015f6:	605a      	str	r2, [r3, #4]
 80015f8:	609a      	str	r2, [r3, #8]
 80015fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015fc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001600:	2200      	movs	r2, #0
 8001602:	601a      	str	r2, [r3, #0]
 8001604:	605a      	str	r2, [r3, #4]
 8001606:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001608:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800160c:	2200      	movs	r2, #0
 800160e:	601a      	str	r2, [r3, #0]
 8001610:	605a      	str	r2, [r3, #4]
 8001612:	609a      	str	r2, [r3, #8]
 8001614:	60da      	str	r2, [r3, #12]
 8001616:	611a      	str	r2, [r3, #16]
 8001618:	615a      	str	r2, [r3, #20]
 800161a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800161c:	1d3b      	adds	r3, r7, #4
 800161e:	2234      	movs	r2, #52	@ 0x34
 8001620:	2100      	movs	r1, #0
 8001622:	4618      	mov	r0, r3
 8001624:	f006 fd5c 	bl	80080e0 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001628:	4b45      	ldr	r3, [pc, #276]	@ (8001740 <MX_TIM8_Init+0x158>)
 800162a:	4a46      	ldr	r2, [pc, #280]	@ (8001744 <MX_TIM8_Init+0x15c>)
 800162c:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800162e:	4b44      	ldr	r3, [pc, #272]	@ (8001740 <MX_TIM8_Init+0x158>)
 8001630:	2200      	movs	r2, #0
 8001632:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001634:	4b42      	ldr	r3, [pc, #264]	@ (8001740 <MX_TIM8_Init+0x158>)
 8001636:	2200      	movs	r2, #0
 8001638:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 800163a:	4b41      	ldr	r3, [pc, #260]	@ (8001740 <MX_TIM8_Init+0x158>)
 800163c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001640:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001642:	4b3f      	ldr	r3, [pc, #252]	@ (8001740 <MX_TIM8_Init+0x158>)
 8001644:	2200      	movs	r2, #0
 8001646:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001648:	4b3d      	ldr	r3, [pc, #244]	@ (8001740 <MX_TIM8_Init+0x158>)
 800164a:	2200      	movs	r2, #0
 800164c:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800164e:	4b3c      	ldr	r3, [pc, #240]	@ (8001740 <MX_TIM8_Init+0x158>)
 8001650:	2200      	movs	r2, #0
 8001652:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001654:	483a      	ldr	r0, [pc, #232]	@ (8001740 <MX_TIM8_Init+0x158>)
 8001656:	f002 f9cd 	bl	80039f4 <HAL_TIM_Base_Init>
 800165a:	4603      	mov	r3, r0
 800165c:	2b00      	cmp	r3, #0
 800165e:	d001      	beq.n	8001664 <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 8001660:	f000 f9a6 	bl	80019b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001664:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001668:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800166a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800166e:	4619      	mov	r1, r3
 8001670:	4833      	ldr	r0, [pc, #204]	@ (8001740 <MX_TIM8_Init+0x158>)
 8001672:	f002 ff75 	bl	8004560 <HAL_TIM_ConfigClockSource>
 8001676:	4603      	mov	r3, r0
 8001678:	2b00      	cmp	r3, #0
 800167a:	d001      	beq.n	8001680 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 800167c:	f000 f998 	bl	80019b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001680:	482f      	ldr	r0, [pc, #188]	@ (8001740 <MX_TIM8_Init+0x158>)
 8001682:	f002 fb01 	bl	8003c88 <HAL_TIM_PWM_Init>
 8001686:	4603      	mov	r3, r0
 8001688:	2b00      	cmp	r3, #0
 800168a:	d001      	beq.n	8001690 <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 800168c:	f000 f990 	bl	80019b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001690:	2300      	movs	r3, #0
 8001692:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001694:	2300      	movs	r3, #0
 8001696:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001698:	2300      	movs	r3, #0
 800169a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800169c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80016a0:	4619      	mov	r1, r3
 80016a2:	4827      	ldr	r0, [pc, #156]	@ (8001740 <MX_TIM8_Init+0x158>)
 80016a4:	f003 ff4c 	bl	8005540 <HAL_TIMEx_MasterConfigSynchronization>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d001      	beq.n	80016b2 <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 80016ae:	f000 f97f 	bl	80019b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016b2:	2360      	movs	r3, #96	@ 0x60
 80016b4:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 80016b6:	2300      	movs	r3, #0
 80016b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016ba:	2300      	movs	r3, #0
 80016bc:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80016be:	2300      	movs	r3, #0
 80016c0:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016c2:	2300      	movs	r3, #0
 80016c4:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80016c6:	2300      	movs	r3, #0
 80016c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80016ca:	2300      	movs	r3, #0
 80016cc:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80016ce:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80016d2:	220c      	movs	r2, #12
 80016d4:	4619      	mov	r1, r3
 80016d6:	481a      	ldr	r0, [pc, #104]	@ (8001740 <MX_TIM8_Init+0x158>)
 80016d8:	f002 fe2e 	bl	8004338 <HAL_TIM_PWM_ConfigChannel>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d001      	beq.n	80016e6 <MX_TIM8_Init+0xfe>
  {
    Error_Handler();
 80016e2:	f000 f965 	bl	80019b0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80016e6:	2300      	movs	r3, #0
 80016e8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80016ea:	2300      	movs	r3, #0
 80016ec:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80016ee:	2300      	movs	r3, #0
 80016f0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80016f2:	2300      	movs	r3, #0
 80016f4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80016f6:	2300      	movs	r3, #0
 80016f8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80016fa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80016fe:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001700:	2300      	movs	r3, #0
 8001702:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001704:	2300      	movs	r3, #0
 8001706:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001708:	2300      	movs	r3, #0
 800170a:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800170c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001710:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001712:	2300      	movs	r3, #0
 8001714:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001716:	2300      	movs	r3, #0
 8001718:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800171a:	2300      	movs	r3, #0
 800171c:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800171e:	1d3b      	adds	r3, r7, #4
 8001720:	4619      	mov	r1, r3
 8001722:	4807      	ldr	r0, [pc, #28]	@ (8001740 <MX_TIM8_Init+0x158>)
 8001724:	f003 ffa2 	bl	800566c <HAL_TIMEx_ConfigBreakDeadTime>
 8001728:	4603      	mov	r3, r0
 800172a:	2b00      	cmp	r3, #0
 800172c:	d001      	beq.n	8001732 <MX_TIM8_Init+0x14a>
  {
    Error_Handler();
 800172e:	f000 f93f 	bl	80019b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001732:	4803      	ldr	r0, [pc, #12]	@ (8001740 <MX_TIM8_Init+0x158>)
 8001734:	f000 f9a0 	bl	8001a78 <HAL_TIM_MspPostInit>

}
 8001738:	bf00      	nop
 800173a:	3770      	adds	r7, #112	@ 0x70
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	2000022c 	.word	0x2000022c
 8001744:	40013400 	.word	0x40013400

08001748 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b094      	sub	sp, #80	@ 0x50
 800174c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800174e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001752:	2200      	movs	r2, #0
 8001754:	601a      	str	r2, [r3, #0]
 8001756:	605a      	str	r2, [r3, #4]
 8001758:	609a      	str	r2, [r3, #8]
 800175a:	60da      	str	r2, [r3, #12]
 800175c:	611a      	str	r2, [r3, #16]
 800175e:	615a      	str	r2, [r3, #20]
 8001760:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001762:	463b      	mov	r3, r7
 8001764:	2234      	movs	r2, #52	@ 0x34
 8001766:	2100      	movs	r1, #0
 8001768:	4618      	mov	r0, r3
 800176a:	f006 fcb9 	bl	80080e0 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800176e:	4b34      	ldr	r3, [pc, #208]	@ (8001840 <MX_TIM16_Init+0xf8>)
 8001770:	4a34      	ldr	r2, [pc, #208]	@ (8001844 <MX_TIM16_Init+0xfc>)
 8001772:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 169;
 8001774:	4b32      	ldr	r3, [pc, #200]	@ (8001840 <MX_TIM16_Init+0xf8>)
 8001776:	22a9      	movs	r2, #169	@ 0xa9
 8001778:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800177a:	4b31      	ldr	r3, [pc, #196]	@ (8001840 <MX_TIM16_Init+0xf8>)
 800177c:	2200      	movs	r2, #0
 800177e:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 335;
 8001780:	4b2f      	ldr	r3, [pc, #188]	@ (8001840 <MX_TIM16_Init+0xf8>)
 8001782:	f240 124f 	movw	r2, #335	@ 0x14f
 8001786:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001788:	4b2d      	ldr	r3, [pc, #180]	@ (8001840 <MX_TIM16_Init+0xf8>)
 800178a:	2200      	movs	r2, #0
 800178c:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800178e:	4b2c      	ldr	r3, [pc, #176]	@ (8001840 <MX_TIM16_Init+0xf8>)
 8001790:	2200      	movs	r2, #0
 8001792:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001794:	4b2a      	ldr	r3, [pc, #168]	@ (8001840 <MX_TIM16_Init+0xf8>)
 8001796:	2200      	movs	r2, #0
 8001798:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800179a:	4829      	ldr	r0, [pc, #164]	@ (8001840 <MX_TIM16_Init+0xf8>)
 800179c:	f002 f92a 	bl	80039f4 <HAL_TIM_Base_Init>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d001      	beq.n	80017aa <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 80017a6:	f000 f903 	bl	80019b0 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim16) != HAL_OK)
 80017aa:	4825      	ldr	r0, [pc, #148]	@ (8001840 <MX_TIM16_Init+0xf8>)
 80017ac:	f002 f9fe 	bl	8003bac <HAL_TIM_OC_Init>
 80017b0:	4603      	mov	r3, r0
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d001      	beq.n	80017ba <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 80017b6:	f000 f8fb 	bl	80019b0 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim16, TIM_OPMODE_SINGLE) != HAL_OK)
 80017ba:	2108      	movs	r1, #8
 80017bc:	4820      	ldr	r0, [pc, #128]	@ (8001840 <MX_TIM16_Init+0xf8>)
 80017be:	f002 fad1 	bl	8003d64 <HAL_TIM_OnePulse_Init>
 80017c2:	4603      	mov	r3, r0
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d001      	beq.n	80017cc <MX_TIM16_Init+0x84>
  {
    Error_Handler();
 80017c8:	f000 f8f2 	bl	80019b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_ACTIVE;
 80017cc:	2310      	movs	r3, #16
 80017ce:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.Pulse = 239;
 80017d0:	23ef      	movs	r3, #239	@ 0xef
 80017d2:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017d4:	2300      	movs	r3, #0
 80017d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80017d8:	2300      	movs	r3, #0
 80017da:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017dc:	2300      	movs	r3, #0
 80017de:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80017e0:	2300      	movs	r3, #0
 80017e2:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80017e4:	2300      	movs	r3, #0
 80017e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_TIM_OC_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80017e8:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80017ec:	2200      	movs	r2, #0
 80017ee:	4619      	mov	r1, r3
 80017f0:	4813      	ldr	r0, [pc, #76]	@ (8001840 <MX_TIM16_Init+0xf8>)
 80017f2:	f002 fd27 	bl	8004244 <HAL_TIM_OC_ConfigChannel>
 80017f6:	4603      	mov	r3, r0
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d001      	beq.n	8001800 <MX_TIM16_Init+0xb8>
  {
    Error_Handler();
 80017fc:	f000 f8d8 	bl	80019b0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001800:	2300      	movs	r3, #0
 8001802:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001804:	2300      	movs	r3, #0
 8001806:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001808:	2300      	movs	r3, #0
 800180a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800180c:	2300      	movs	r3, #0
 800180e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001810:	2300      	movs	r3, #0
 8001812:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001814:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001818:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800181a:	2300      	movs	r3, #0
 800181c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800181e:	2300      	movs	r3, #0
 8001820:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8001822:	463b      	mov	r3, r7
 8001824:	4619      	mov	r1, r3
 8001826:	4806      	ldr	r0, [pc, #24]	@ (8001840 <MX_TIM16_Init+0xf8>)
 8001828:	f003 ff20 	bl	800566c <HAL_TIMEx_ConfigBreakDeadTime>
 800182c:	4603      	mov	r3, r0
 800182e:	2b00      	cmp	r3, #0
 8001830:	d001      	beq.n	8001836 <MX_TIM16_Init+0xee>
  {
    Error_Handler();
 8001832:	f000 f8bd 	bl	80019b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8001836:	bf00      	nop
 8001838:	3750      	adds	r7, #80	@ 0x50
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	200002f8 	.word	0x200002f8
 8001844:	40014400 	.word	0x40014400

08001848 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800184c:	4b23      	ldr	r3, [pc, #140]	@ (80018dc <MX_USART2_UART_Init+0x94>)
 800184e:	4a24      	ldr	r2, [pc, #144]	@ (80018e0 <MX_USART2_UART_Init+0x98>)
 8001850:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001852:	4b22      	ldr	r3, [pc, #136]	@ (80018dc <MX_USART2_UART_Init+0x94>)
 8001854:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001858:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 800185a:	4b20      	ldr	r3, [pc, #128]	@ (80018dc <MX_USART2_UART_Init+0x94>)
 800185c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001860:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001862:	4b1e      	ldr	r3, [pc, #120]	@ (80018dc <MX_USART2_UART_Init+0x94>)
 8001864:	2200      	movs	r2, #0
 8001866:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8001868:	4b1c      	ldr	r3, [pc, #112]	@ (80018dc <MX_USART2_UART_Init+0x94>)
 800186a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800186e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001870:	4b1a      	ldr	r3, [pc, #104]	@ (80018dc <MX_USART2_UART_Init+0x94>)
 8001872:	220c      	movs	r2, #12
 8001874:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001876:	4b19      	ldr	r3, [pc, #100]	@ (80018dc <MX_USART2_UART_Init+0x94>)
 8001878:	2200      	movs	r2, #0
 800187a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800187c:	4b17      	ldr	r3, [pc, #92]	@ (80018dc <MX_USART2_UART_Init+0x94>)
 800187e:	2200      	movs	r2, #0
 8001880:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001882:	4b16      	ldr	r3, [pc, #88]	@ (80018dc <MX_USART2_UART_Init+0x94>)
 8001884:	2200      	movs	r2, #0
 8001886:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001888:	4b14      	ldr	r3, [pc, #80]	@ (80018dc <MX_USART2_UART_Init+0x94>)
 800188a:	2200      	movs	r2, #0
 800188c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800188e:	4b13      	ldr	r3, [pc, #76]	@ (80018dc <MX_USART2_UART_Init+0x94>)
 8001890:	2200      	movs	r2, #0
 8001892:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001894:	4811      	ldr	r0, [pc, #68]	@ (80018dc <MX_USART2_UART_Init+0x94>)
 8001896:	f003 ffcd 	bl	8005834 <HAL_UART_Init>
 800189a:	4603      	mov	r3, r0
 800189c:	2b00      	cmp	r3, #0
 800189e:	d001      	beq.n	80018a4 <MX_USART2_UART_Init+0x5c>
  {
    Error_Handler();
 80018a0:	f000 f886 	bl	80019b0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80018a4:	2100      	movs	r1, #0
 80018a6:	480d      	ldr	r0, [pc, #52]	@ (80018dc <MX_USART2_UART_Init+0x94>)
 80018a8:	f006 fb4f 	bl	8007f4a <HAL_UARTEx_SetTxFifoThreshold>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d001      	beq.n	80018b6 <MX_USART2_UART_Init+0x6e>
  {
    Error_Handler();
 80018b2:	f000 f87d 	bl	80019b0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80018b6:	2100      	movs	r1, #0
 80018b8:	4808      	ldr	r0, [pc, #32]	@ (80018dc <MX_USART2_UART_Init+0x94>)
 80018ba:	f006 fb84 	bl	8007fc6 <HAL_UARTEx_SetRxFifoThreshold>
 80018be:	4603      	mov	r3, r0
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d001      	beq.n	80018c8 <MX_USART2_UART_Init+0x80>
  {
    Error_Handler();
 80018c4:	f000 f874 	bl	80019b0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80018c8:	4804      	ldr	r0, [pc, #16]	@ (80018dc <MX_USART2_UART_Init+0x94>)
 80018ca:	f006 fb05 	bl	8007ed8 <HAL_UARTEx_DisableFifoMode>
 80018ce:	4603      	mov	r3, r0
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d001      	beq.n	80018d8 <MX_USART2_UART_Init+0x90>
  {
    Error_Handler();
 80018d4:	f000 f86c 	bl	80019b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80018d8:	bf00      	nop
 80018da:	bd80      	pop	{r7, pc}
 80018dc:	200003c4 	.word	0x200003c4
 80018e0:	40004400 	.word	0x40004400

080018e4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b082      	sub	sp, #8
 80018e8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80018ea:	4b12      	ldr	r3, [pc, #72]	@ (8001934 <MX_DMA_Init+0x50>)
 80018ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80018ee:	4a11      	ldr	r2, [pc, #68]	@ (8001934 <MX_DMA_Init+0x50>)
 80018f0:	f043 0304 	orr.w	r3, r3, #4
 80018f4:	6493      	str	r3, [r2, #72]	@ 0x48
 80018f6:	4b0f      	ldr	r3, [pc, #60]	@ (8001934 <MX_DMA_Init+0x50>)
 80018f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80018fa:	f003 0304 	and.w	r3, r3, #4
 80018fe:	607b      	str	r3, [r7, #4]
 8001900:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001902:	4b0c      	ldr	r3, [pc, #48]	@ (8001934 <MX_DMA_Init+0x50>)
 8001904:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001906:	4a0b      	ldr	r2, [pc, #44]	@ (8001934 <MX_DMA_Init+0x50>)
 8001908:	f043 0301 	orr.w	r3, r3, #1
 800190c:	6493      	str	r3, [r2, #72]	@ 0x48
 800190e:	4b09      	ldr	r3, [pc, #36]	@ (8001934 <MX_DMA_Init+0x50>)
 8001910:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001912:	f003 0301 	and.w	r3, r3, #1
 8001916:	603b      	str	r3, [r7, #0]
 8001918:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800191a:	2200      	movs	r2, #0
 800191c:	2100      	movs	r1, #0
 800191e:	200b      	movs	r0, #11
 8001920:	f000 fb43 	bl	8001faa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001924:	200b      	movs	r0, #11
 8001926:	f000 fb5a 	bl	8001fde <HAL_NVIC_EnableIRQ>

}
 800192a:	bf00      	nop
 800192c:	3708      	adds	r7, #8
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	40021000 	.word	0x40021000

08001938 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001938:	b480      	push	{r7}
 800193a:	b085      	sub	sp, #20
 800193c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800193e:	4b1b      	ldr	r3, [pc, #108]	@ (80019ac <MX_GPIO_Init+0x74>)
 8001940:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001942:	4a1a      	ldr	r2, [pc, #104]	@ (80019ac <MX_GPIO_Init+0x74>)
 8001944:	f043 0304 	orr.w	r3, r3, #4
 8001948:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800194a:	4b18      	ldr	r3, [pc, #96]	@ (80019ac <MX_GPIO_Init+0x74>)
 800194c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800194e:	f003 0304 	and.w	r3, r3, #4
 8001952:	60fb      	str	r3, [r7, #12]
 8001954:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001956:	4b15      	ldr	r3, [pc, #84]	@ (80019ac <MX_GPIO_Init+0x74>)
 8001958:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800195a:	4a14      	ldr	r2, [pc, #80]	@ (80019ac <MX_GPIO_Init+0x74>)
 800195c:	f043 0320 	orr.w	r3, r3, #32
 8001960:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001962:	4b12      	ldr	r3, [pc, #72]	@ (80019ac <MX_GPIO_Init+0x74>)
 8001964:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001966:	f003 0320 	and.w	r3, r3, #32
 800196a:	60bb      	str	r3, [r7, #8]
 800196c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800196e:	4b0f      	ldr	r3, [pc, #60]	@ (80019ac <MX_GPIO_Init+0x74>)
 8001970:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001972:	4a0e      	ldr	r2, [pc, #56]	@ (80019ac <MX_GPIO_Init+0x74>)
 8001974:	f043 0301 	orr.w	r3, r3, #1
 8001978:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800197a:	4b0c      	ldr	r3, [pc, #48]	@ (80019ac <MX_GPIO_Init+0x74>)
 800197c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800197e:	f003 0301 	and.w	r3, r3, #1
 8001982:	607b      	str	r3, [r7, #4]
 8001984:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001986:	4b09      	ldr	r3, [pc, #36]	@ (80019ac <MX_GPIO_Init+0x74>)
 8001988:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800198a:	4a08      	ldr	r2, [pc, #32]	@ (80019ac <MX_GPIO_Init+0x74>)
 800198c:	f043 0302 	orr.w	r3, r3, #2
 8001990:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001992:	4b06      	ldr	r3, [pc, #24]	@ (80019ac <MX_GPIO_Init+0x74>)
 8001994:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001996:	f003 0302 	and.w	r3, r3, #2
 800199a:	603b      	str	r3, [r7, #0]
 800199c:	683b      	ldr	r3, [r7, #0]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800199e:	bf00      	nop
 80019a0:	3714      	adds	r7, #20
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr
 80019aa:	bf00      	nop
 80019ac:	40021000 	.word	0x40021000

080019b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019b0:	b480      	push	{r7}
 80019b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019b4:	b672      	cpsid	i
}
 80019b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019b8:	bf00      	nop
 80019ba:	e7fd      	b.n	80019b8 <Error_Handler+0x8>

080019bc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b082      	sub	sp, #8
 80019c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019c2:	4b0f      	ldr	r3, [pc, #60]	@ (8001a00 <HAL_MspInit+0x44>)
 80019c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019c6:	4a0e      	ldr	r2, [pc, #56]	@ (8001a00 <HAL_MspInit+0x44>)
 80019c8:	f043 0301 	orr.w	r3, r3, #1
 80019cc:	6613      	str	r3, [r2, #96]	@ 0x60
 80019ce:	4b0c      	ldr	r3, [pc, #48]	@ (8001a00 <HAL_MspInit+0x44>)
 80019d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019d2:	f003 0301 	and.w	r3, r3, #1
 80019d6:	607b      	str	r3, [r7, #4]
 80019d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019da:	4b09      	ldr	r3, [pc, #36]	@ (8001a00 <HAL_MspInit+0x44>)
 80019dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019de:	4a08      	ldr	r2, [pc, #32]	@ (8001a00 <HAL_MspInit+0x44>)
 80019e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019e4:	6593      	str	r3, [r2, #88]	@ 0x58
 80019e6:	4b06      	ldr	r3, [pc, #24]	@ (8001a00 <HAL_MspInit+0x44>)
 80019e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019ee:	603b      	str	r3, [r7, #0]
 80019f0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80019f2:	f001 f873 	bl	8002adc <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019f6:	bf00      	nop
 80019f8:	3708      	adds	r7, #8
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	40021000 	.word	0x40021000

08001a04 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b084      	sub	sp, #16
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM8)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a16      	ldr	r2, [pc, #88]	@ (8001a6c <HAL_TIM_Base_MspInit+0x68>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d10c      	bne.n	8001a30 <HAL_TIM_Base_MspInit+0x2c>
  {
    /* USER CODE BEGIN TIM8_MspInit 0 */

    /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001a16:	4b16      	ldr	r3, [pc, #88]	@ (8001a70 <HAL_TIM_Base_MspInit+0x6c>)
 8001a18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a1a:	4a15      	ldr	r2, [pc, #84]	@ (8001a70 <HAL_TIM_Base_MspInit+0x6c>)
 8001a1c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001a20:	6613      	str	r3, [r2, #96]	@ 0x60
 8001a22:	4b13      	ldr	r3, [pc, #76]	@ (8001a70 <HAL_TIM_Base_MspInit+0x6c>)
 8001a24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a26:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001a2a:	60fb      	str	r3, [r7, #12]
 8001a2c:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN TIM16_MspInit 1 */

    /* USER CODE END TIM16_MspInit 1 */
  }

}
 8001a2e:	e018      	b.n	8001a62 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM16)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a0f      	ldr	r2, [pc, #60]	@ (8001a74 <HAL_TIM_Base_MspInit+0x70>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d113      	bne.n	8001a62 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001a3a:	4b0d      	ldr	r3, [pc, #52]	@ (8001a70 <HAL_TIM_Base_MspInit+0x6c>)
 8001a3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a3e:	4a0c      	ldr	r2, [pc, #48]	@ (8001a70 <HAL_TIM_Base_MspInit+0x6c>)
 8001a40:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a44:	6613      	str	r3, [r2, #96]	@ 0x60
 8001a46:	4b0a      	ldr	r3, [pc, #40]	@ (8001a70 <HAL_TIM_Base_MspInit+0x6c>)
 8001a48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a4e:	60bb      	str	r3, [r7, #8]
 8001a50:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001a52:	2200      	movs	r2, #0
 8001a54:	2100      	movs	r1, #0
 8001a56:	2019      	movs	r0, #25
 8001a58:	f000 faa7 	bl	8001faa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001a5c:	2019      	movs	r0, #25
 8001a5e:	f000 fabe 	bl	8001fde <HAL_NVIC_EnableIRQ>
}
 8001a62:	bf00      	nop
 8001a64:	3710      	adds	r7, #16
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	40013400 	.word	0x40013400
 8001a70:	40021000 	.word	0x40021000
 8001a74:	40014400 	.word	0x40014400

08001a78 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b088      	sub	sp, #32
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a80:	f107 030c 	add.w	r3, r7, #12
 8001a84:	2200      	movs	r2, #0
 8001a86:	601a      	str	r2, [r3, #0]
 8001a88:	605a      	str	r2, [r3, #4]
 8001a8a:	609a      	str	r2, [r3, #8]
 8001a8c:	60da      	str	r2, [r3, #12]
 8001a8e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM8)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a11      	ldr	r2, [pc, #68]	@ (8001adc <HAL_TIM_MspPostInit+0x64>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d11c      	bne.n	8001ad4 <HAL_TIM_MspPostInit+0x5c>
  {
    /* USER CODE BEGIN TIM8_MspPostInit 0 */

    /* USER CODE END TIM8_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a9a:	4b11      	ldr	r3, [pc, #68]	@ (8001ae0 <HAL_TIM_MspPostInit+0x68>)
 8001a9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a9e:	4a10      	ldr	r2, [pc, #64]	@ (8001ae0 <HAL_TIM_MspPostInit+0x68>)
 8001aa0:	f043 0304 	orr.w	r3, r3, #4
 8001aa4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001aa6:	4b0e      	ldr	r3, [pc, #56]	@ (8001ae0 <HAL_TIM_MspPostInit+0x68>)
 8001aa8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001aaa:	f003 0304 	and.w	r3, r3, #4
 8001aae:	60bb      	str	r3, [r7, #8]
 8001ab0:	68bb      	ldr	r3, [r7, #8]
    /**TIM8 GPIO Configuration
    PC9     ------> TIM8_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001ab2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001ab6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ab8:	2302      	movs	r3, #2
 8001aba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001abc:	2300      	movs	r3, #0
 8001abe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8001ac4:	2304      	movs	r3, #4
 8001ac6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ac8:	f107 030c 	add.w	r3, r7, #12
 8001acc:	4619      	mov	r1, r3
 8001ace:	4805      	ldr	r0, [pc, #20]	@ (8001ae4 <HAL_TIM_MspPostInit+0x6c>)
 8001ad0:	f000 fdde 	bl	8002690 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM8_MspPostInit 1 */

    /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8001ad4:	bf00      	nop
 8001ad6:	3720      	adds	r7, #32
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}
 8001adc:	40013400 	.word	0x40013400
 8001ae0:	40021000 	.word	0x40021000
 8001ae4:	48000800 	.word	0x48000800

08001ae8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b09e      	sub	sp, #120	@ 0x78
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001af0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001af4:	2200      	movs	r2, #0
 8001af6:	601a      	str	r2, [r3, #0]
 8001af8:	605a      	str	r2, [r3, #4]
 8001afa:	609a      	str	r2, [r3, #8]
 8001afc:	60da      	str	r2, [r3, #12]
 8001afe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b00:	f107 0310 	add.w	r3, r7, #16
 8001b04:	2254      	movs	r2, #84	@ 0x54
 8001b06:	2100      	movs	r1, #0
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f006 fae9 	bl	80080e0 <memset>
  if(huart->Instance==USART2)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4a37      	ldr	r2, [pc, #220]	@ (8001bf0 <HAL_UART_MspInit+0x108>)
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d167      	bne.n	8001be8 <HAL_UART_MspInit+0x100>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001b18:	2302      	movs	r3, #2
 8001b1a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b20:	f107 0310 	add.w	r3, r7, #16
 8001b24:	4618      	mov	r0, r3
 8001b26:	f001 fd17 	bl	8003558 <HAL_RCCEx_PeriphCLKConfig>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d001      	beq.n	8001b34 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001b30:	f7ff ff3e 	bl	80019b0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b34:	4b2f      	ldr	r3, [pc, #188]	@ (8001bf4 <HAL_UART_MspInit+0x10c>)
 8001b36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b38:	4a2e      	ldr	r2, [pc, #184]	@ (8001bf4 <HAL_UART_MspInit+0x10c>)
 8001b3a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b3e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001b40:	4b2c      	ldr	r3, [pc, #176]	@ (8001bf4 <HAL_UART_MspInit+0x10c>)
 8001b42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b44:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b48:	60fb      	str	r3, [r7, #12]
 8001b4a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b4c:	4b29      	ldr	r3, [pc, #164]	@ (8001bf4 <HAL_UART_MspInit+0x10c>)
 8001b4e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b50:	4a28      	ldr	r2, [pc, #160]	@ (8001bf4 <HAL_UART_MspInit+0x10c>)
 8001b52:	f043 0301 	orr.w	r3, r3, #1
 8001b56:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b58:	4b26      	ldr	r3, [pc, #152]	@ (8001bf4 <HAL_UART_MspInit+0x10c>)
 8001b5a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b5c:	f003 0301 	and.w	r3, r3, #1
 8001b60:	60bb      	str	r3, [r7, #8]
 8001b62:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001b64:	230c      	movs	r3, #12
 8001b66:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b68:	2302      	movs	r3, #2
 8001b6a:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b70:	2300      	movs	r3, #0
 8001b72:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b74:	2307      	movs	r3, #7
 8001b76:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b78:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b82:	f000 fd85 	bl	8002690 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel1;
 8001b86:	4b1c      	ldr	r3, [pc, #112]	@ (8001bf8 <HAL_UART_MspInit+0x110>)
 8001b88:	4a1c      	ldr	r2, [pc, #112]	@ (8001bfc <HAL_UART_MspInit+0x114>)
 8001b8a:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8001b8c:	4b1a      	ldr	r3, [pc, #104]	@ (8001bf8 <HAL_UART_MspInit+0x110>)
 8001b8e:	221b      	movs	r2, #27
 8001b90:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001b92:	4b19      	ldr	r3, [pc, #100]	@ (8001bf8 <HAL_UART_MspInit+0x110>)
 8001b94:	2210      	movs	r2, #16
 8001b96:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b98:	4b17      	ldr	r3, [pc, #92]	@ (8001bf8 <HAL_UART_MspInit+0x110>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001b9e:	4b16      	ldr	r3, [pc, #88]	@ (8001bf8 <HAL_UART_MspInit+0x110>)
 8001ba0:	2280      	movs	r2, #128	@ 0x80
 8001ba2:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001ba4:	4b14      	ldr	r3, [pc, #80]	@ (8001bf8 <HAL_UART_MspInit+0x110>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001baa:	4b13      	ldr	r3, [pc, #76]	@ (8001bf8 <HAL_UART_MspInit+0x110>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001bb0:	4b11      	ldr	r3, [pc, #68]	@ (8001bf8 <HAL_UART_MspInit+0x110>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001bb6:	4b10      	ldr	r3, [pc, #64]	@ (8001bf8 <HAL_UART_MspInit+0x110>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001bbc:	480e      	ldr	r0, [pc, #56]	@ (8001bf8 <HAL_UART_MspInit+0x110>)
 8001bbe:	f000 fa29 	bl	8002014 <HAL_DMA_Init>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d001      	beq.n	8001bcc <HAL_UART_MspInit+0xe4>
    {
      Error_Handler();
 8001bc8:	f7ff fef2 	bl	80019b0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	4a0a      	ldr	r2, [pc, #40]	@ (8001bf8 <HAL_UART_MspInit+0x110>)
 8001bd0:	67da      	str	r2, [r3, #124]	@ 0x7c
 8001bd2:	4a09      	ldr	r2, [pc, #36]	@ (8001bf8 <HAL_UART_MspInit+0x110>)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001bd8:	2200      	movs	r2, #0
 8001bda:	2100      	movs	r1, #0
 8001bdc:	2026      	movs	r0, #38	@ 0x26
 8001bde:	f000 f9e4 	bl	8001faa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001be2:	2026      	movs	r0, #38	@ 0x26
 8001be4:	f000 f9fb 	bl	8001fde <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8001be8:	bf00      	nop
 8001bea:	3778      	adds	r7, #120	@ 0x78
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	40004400 	.word	0x40004400
 8001bf4:	40021000 	.word	0x40021000
 8001bf8:	20000490 	.word	0x20000490
 8001bfc:	40020008 	.word	0x40020008

08001c00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c00:	b480      	push	{r7}
 8001c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001c04:	bf00      	nop
 8001c06:	e7fd      	b.n	8001c04 <NMI_Handler+0x4>

08001c08 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c0c:	bf00      	nop
 8001c0e:	e7fd      	b.n	8001c0c <HardFault_Handler+0x4>

08001c10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c10:	b480      	push	{r7}
 8001c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c14:	bf00      	nop
 8001c16:	e7fd      	b.n	8001c14 <MemManage_Handler+0x4>

08001c18 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c1c:	bf00      	nop
 8001c1e:	e7fd      	b.n	8001c1c <BusFault_Handler+0x4>

08001c20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c20:	b480      	push	{r7}
 8001c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c24:	bf00      	nop
 8001c26:	e7fd      	b.n	8001c24 <UsageFault_Handler+0x4>

08001c28 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c2c:	bf00      	nop
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr

08001c36 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c36:	b480      	push	{r7}
 8001c38:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c3a:	bf00      	nop
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c42:	4770      	bx	lr

08001c44 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c44:	b480      	push	{r7}
 8001c46:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c48:	bf00      	nop
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr

08001c52 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c52:	b580      	push	{r7, lr}
 8001c54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c56:	f000 f8af 	bl	8001db8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c5a:	bf00      	nop
 8001c5c:	bd80      	pop	{r7, pc}
	...

08001c60 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001c64:	4802      	ldr	r0, [pc, #8]	@ (8001c70 <DMA1_Channel1_IRQHandler+0x10>)
 8001c66:	f000 fbb8 	bl	80023da <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001c6a:	bf00      	nop
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	20000490 	.word	0x20000490

08001c74 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8001c78:	4802      	ldr	r0, [pc, #8]	@ (8001c84 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001c7a:	f002 f969 	bl	8003f50 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001c7e:	bf00      	nop
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	bf00      	nop
 8001c84:	200002f8 	.word	0x200002f8

08001c88 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001c8c:	4802      	ldr	r0, [pc, #8]	@ (8001c98 <USART2_IRQHandler+0x10>)
 8001c8e:	f004 f86d 	bl	8005d6c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001c92:	bf00      	nop
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	200003c4 	.word	0x200003c4

08001c9c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001ca0:	4b06      	ldr	r3, [pc, #24]	@ (8001cbc <SystemInit+0x20>)
 8001ca2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ca6:	4a05      	ldr	r2, [pc, #20]	@ (8001cbc <SystemInit+0x20>)
 8001ca8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001cac:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001cb0:	bf00      	nop
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb8:	4770      	bx	lr
 8001cba:	bf00      	nop
 8001cbc:	e000ed00 	.word	0xe000ed00

08001cc0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001cc0:	480d      	ldr	r0, [pc, #52]	@ (8001cf8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001cc2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001cc4:	f7ff ffea 	bl	8001c9c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001cc8:	480c      	ldr	r0, [pc, #48]	@ (8001cfc <LoopForever+0x6>)
  ldr r1, =_edata
 8001cca:	490d      	ldr	r1, [pc, #52]	@ (8001d00 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001ccc:	4a0d      	ldr	r2, [pc, #52]	@ (8001d04 <LoopForever+0xe>)
  movs r3, #0
 8001cce:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001cd0:	e002      	b.n	8001cd8 <LoopCopyDataInit>

08001cd2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cd2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cd4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cd6:	3304      	adds	r3, #4

08001cd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001cd8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001cdc:	d3f9      	bcc.n	8001cd2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cde:	4a0a      	ldr	r2, [pc, #40]	@ (8001d08 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001ce0:	4c0a      	ldr	r4, [pc, #40]	@ (8001d0c <LoopForever+0x16>)
  movs r3, #0
 8001ce2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ce4:	e001      	b.n	8001cea <LoopFillZerobss>

08001ce6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ce6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ce8:	3204      	adds	r2, #4

08001cea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cec:	d3fb      	bcc.n	8001ce6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001cee:	f006 f9ff 	bl	80080f0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001cf2:	f7ff fbcb 	bl	800148c <main>

08001cf6 <LoopForever>:

LoopForever:
    b LoopForever
 8001cf6:	e7fe      	b.n	8001cf6 <LoopForever>
  ldr   r0, =_estack
 8001cf8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001cfc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d00:	2000020c 	.word	0x2000020c
  ldr r2, =_sidata
 8001d04:	080081bc 	.word	0x080081bc
  ldr r2, =_sbss
 8001d08:	2000020c 	.word	0x2000020c
  ldr r4, =_ebss
 8001d0c:	20000b68 	.word	0x20000b68

08001d10 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001d10:	e7fe      	b.n	8001d10 <ADC1_2_IRQHandler>

08001d12 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d12:	b580      	push	{r7, lr}
 8001d14:	b082      	sub	sp, #8
 8001d16:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d1c:	2003      	movs	r0, #3
 8001d1e:	f000 f939 	bl	8001f94 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d22:	2000      	movs	r0, #0
 8001d24:	f000 f80e 	bl	8001d44 <HAL_InitTick>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d002      	beq.n	8001d34 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	71fb      	strb	r3, [r7, #7]
 8001d32:	e001      	b.n	8001d38 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001d34:	f7ff fe42 	bl	80019bc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001d38:	79fb      	ldrb	r3, [r7, #7]

}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	3708      	adds	r7, #8
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}
	...

08001d44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b084      	sub	sp, #16
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001d50:	4b16      	ldr	r3, [pc, #88]	@ (8001dac <HAL_InitTick+0x68>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d022      	beq.n	8001d9e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001d58:	4b15      	ldr	r3, [pc, #84]	@ (8001db0 <HAL_InitTick+0x6c>)
 8001d5a:	681a      	ldr	r2, [r3, #0]
 8001d5c:	4b13      	ldr	r3, [pc, #76]	@ (8001dac <HAL_InitTick+0x68>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001d64:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d68:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f000 f944 	bl	8001ffa <HAL_SYSTICK_Config>
 8001d72:	4603      	mov	r3, r0
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d10f      	bne.n	8001d98 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2b0f      	cmp	r3, #15
 8001d7c:	d809      	bhi.n	8001d92 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d7e:	2200      	movs	r2, #0
 8001d80:	6879      	ldr	r1, [r7, #4]
 8001d82:	f04f 30ff 	mov.w	r0, #4294967295
 8001d86:	f000 f910 	bl	8001faa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001d8a:	4a0a      	ldr	r2, [pc, #40]	@ (8001db4 <HAL_InitTick+0x70>)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6013      	str	r3, [r2, #0]
 8001d90:	e007      	b.n	8001da2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001d92:	2301      	movs	r3, #1
 8001d94:	73fb      	strb	r3, [r7, #15]
 8001d96:	e004      	b.n	8001da2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	73fb      	strb	r3, [r7, #15]
 8001d9c:	e001      	b.n	8001da2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001da2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	3710      	adds	r7, #16
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}
 8001dac:	20000208 	.word	0x20000208
 8001db0:	20000200 	.word	0x20000200
 8001db4:	20000204 	.word	0x20000204

08001db8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001db8:	b480      	push	{r7}
 8001dba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001dbc:	4b05      	ldr	r3, [pc, #20]	@ (8001dd4 <HAL_IncTick+0x1c>)
 8001dbe:	681a      	ldr	r2, [r3, #0]
 8001dc0:	4b05      	ldr	r3, [pc, #20]	@ (8001dd8 <HAL_IncTick+0x20>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4413      	add	r3, r2
 8001dc6:	4a03      	ldr	r2, [pc, #12]	@ (8001dd4 <HAL_IncTick+0x1c>)
 8001dc8:	6013      	str	r3, [r2, #0]
}
 8001dca:	bf00      	nop
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd2:	4770      	bx	lr
 8001dd4:	20000b64 	.word	0x20000b64
 8001dd8:	20000208 	.word	0x20000208

08001ddc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	af00      	add	r7, sp, #0
  return uwTick;
 8001de0:	4b03      	ldr	r3, [pc, #12]	@ (8001df0 <HAL_GetTick+0x14>)
 8001de2:	681b      	ldr	r3, [r3, #0]
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr
 8001dee:	bf00      	nop
 8001df0:	20000b64 	.word	0x20000b64

08001df4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b085      	sub	sp, #20
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	f003 0307 	and.w	r3, r3, #7
 8001e02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e04:	4b0c      	ldr	r3, [pc, #48]	@ (8001e38 <__NVIC_SetPriorityGrouping+0x44>)
 8001e06:	68db      	ldr	r3, [r3, #12]
 8001e08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e0a:	68ba      	ldr	r2, [r7, #8]
 8001e0c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001e10:	4013      	ands	r3, r2
 8001e12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e18:	68bb      	ldr	r3, [r7, #8]
 8001e1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e1c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001e20:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e26:	4a04      	ldr	r2, [pc, #16]	@ (8001e38 <__NVIC_SetPriorityGrouping+0x44>)
 8001e28:	68bb      	ldr	r3, [r7, #8]
 8001e2a:	60d3      	str	r3, [r2, #12]
}
 8001e2c:	bf00      	nop
 8001e2e:	3714      	adds	r7, #20
 8001e30:	46bd      	mov	sp, r7
 8001e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e36:	4770      	bx	lr
 8001e38:	e000ed00 	.word	0xe000ed00

08001e3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e40:	4b04      	ldr	r3, [pc, #16]	@ (8001e54 <__NVIC_GetPriorityGrouping+0x18>)
 8001e42:	68db      	ldr	r3, [r3, #12]
 8001e44:	0a1b      	lsrs	r3, r3, #8
 8001e46:	f003 0307 	and.w	r3, r3, #7
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e52:	4770      	bx	lr
 8001e54:	e000ed00 	.word	0xe000ed00

08001e58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b083      	sub	sp, #12
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	4603      	mov	r3, r0
 8001e60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	db0b      	blt.n	8001e82 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e6a:	79fb      	ldrb	r3, [r7, #7]
 8001e6c:	f003 021f 	and.w	r2, r3, #31
 8001e70:	4907      	ldr	r1, [pc, #28]	@ (8001e90 <__NVIC_EnableIRQ+0x38>)
 8001e72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e76:	095b      	lsrs	r3, r3, #5
 8001e78:	2001      	movs	r0, #1
 8001e7a:	fa00 f202 	lsl.w	r2, r0, r2
 8001e7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001e82:	bf00      	nop
 8001e84:	370c      	adds	r7, #12
 8001e86:	46bd      	mov	sp, r7
 8001e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8c:	4770      	bx	lr
 8001e8e:	bf00      	nop
 8001e90:	e000e100 	.word	0xe000e100

08001e94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b083      	sub	sp, #12
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	6039      	str	r1, [r7, #0]
 8001e9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ea0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	db0a      	blt.n	8001ebe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	b2da      	uxtb	r2, r3
 8001eac:	490c      	ldr	r1, [pc, #48]	@ (8001ee0 <__NVIC_SetPriority+0x4c>)
 8001eae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eb2:	0112      	lsls	r2, r2, #4
 8001eb4:	b2d2      	uxtb	r2, r2
 8001eb6:	440b      	add	r3, r1
 8001eb8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ebc:	e00a      	b.n	8001ed4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	b2da      	uxtb	r2, r3
 8001ec2:	4908      	ldr	r1, [pc, #32]	@ (8001ee4 <__NVIC_SetPriority+0x50>)
 8001ec4:	79fb      	ldrb	r3, [r7, #7]
 8001ec6:	f003 030f 	and.w	r3, r3, #15
 8001eca:	3b04      	subs	r3, #4
 8001ecc:	0112      	lsls	r2, r2, #4
 8001ece:	b2d2      	uxtb	r2, r2
 8001ed0:	440b      	add	r3, r1
 8001ed2:	761a      	strb	r2, [r3, #24]
}
 8001ed4:	bf00      	nop
 8001ed6:	370c      	adds	r7, #12
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ede:	4770      	bx	lr
 8001ee0:	e000e100 	.word	0xe000e100
 8001ee4:	e000ed00 	.word	0xe000ed00

08001ee8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b089      	sub	sp, #36	@ 0x24
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	60f8      	str	r0, [r7, #12]
 8001ef0:	60b9      	str	r1, [r7, #8]
 8001ef2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	f003 0307 	and.w	r3, r3, #7
 8001efa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001efc:	69fb      	ldr	r3, [r7, #28]
 8001efe:	f1c3 0307 	rsb	r3, r3, #7
 8001f02:	2b04      	cmp	r3, #4
 8001f04:	bf28      	it	cs
 8001f06:	2304      	movcs	r3, #4
 8001f08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f0a:	69fb      	ldr	r3, [r7, #28]
 8001f0c:	3304      	adds	r3, #4
 8001f0e:	2b06      	cmp	r3, #6
 8001f10:	d902      	bls.n	8001f18 <NVIC_EncodePriority+0x30>
 8001f12:	69fb      	ldr	r3, [r7, #28]
 8001f14:	3b03      	subs	r3, #3
 8001f16:	e000      	b.n	8001f1a <NVIC_EncodePriority+0x32>
 8001f18:	2300      	movs	r3, #0
 8001f1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f1c:	f04f 32ff 	mov.w	r2, #4294967295
 8001f20:	69bb      	ldr	r3, [r7, #24]
 8001f22:	fa02 f303 	lsl.w	r3, r2, r3
 8001f26:	43da      	mvns	r2, r3
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	401a      	ands	r2, r3
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f30:	f04f 31ff 	mov.w	r1, #4294967295
 8001f34:	697b      	ldr	r3, [r7, #20]
 8001f36:	fa01 f303 	lsl.w	r3, r1, r3
 8001f3a:	43d9      	mvns	r1, r3
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f40:	4313      	orrs	r3, r2
         );
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	3724      	adds	r7, #36	@ 0x24
 8001f46:	46bd      	mov	sp, r7
 8001f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4c:	4770      	bx	lr
	...

08001f50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b082      	sub	sp, #8
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	3b01      	subs	r3, #1
 8001f5c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001f60:	d301      	bcc.n	8001f66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f62:	2301      	movs	r3, #1
 8001f64:	e00f      	b.n	8001f86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f66:	4a0a      	ldr	r2, [pc, #40]	@ (8001f90 <SysTick_Config+0x40>)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	3b01      	subs	r3, #1
 8001f6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f6e:	210f      	movs	r1, #15
 8001f70:	f04f 30ff 	mov.w	r0, #4294967295
 8001f74:	f7ff ff8e 	bl	8001e94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f78:	4b05      	ldr	r3, [pc, #20]	@ (8001f90 <SysTick_Config+0x40>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f7e:	4b04      	ldr	r3, [pc, #16]	@ (8001f90 <SysTick_Config+0x40>)
 8001f80:	2207      	movs	r2, #7
 8001f82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f84:	2300      	movs	r3, #0
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	3708      	adds	r7, #8
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}
 8001f8e:	bf00      	nop
 8001f90:	e000e010 	.word	0xe000e010

08001f94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b082      	sub	sp, #8
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f9c:	6878      	ldr	r0, [r7, #4]
 8001f9e:	f7ff ff29 	bl	8001df4 <__NVIC_SetPriorityGrouping>
}
 8001fa2:	bf00      	nop
 8001fa4:	3708      	adds	r7, #8
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}

08001faa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001faa:	b580      	push	{r7, lr}
 8001fac:	b086      	sub	sp, #24
 8001fae:	af00      	add	r7, sp, #0
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	60b9      	str	r1, [r7, #8]
 8001fb4:	607a      	str	r2, [r7, #4]
 8001fb6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001fb8:	f7ff ff40 	bl	8001e3c <__NVIC_GetPriorityGrouping>
 8001fbc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fbe:	687a      	ldr	r2, [r7, #4]
 8001fc0:	68b9      	ldr	r1, [r7, #8]
 8001fc2:	6978      	ldr	r0, [r7, #20]
 8001fc4:	f7ff ff90 	bl	8001ee8 <NVIC_EncodePriority>
 8001fc8:	4602      	mov	r2, r0
 8001fca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fce:	4611      	mov	r1, r2
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f7ff ff5f 	bl	8001e94 <__NVIC_SetPriority>
}
 8001fd6:	bf00      	nop
 8001fd8:	3718      	adds	r7, #24
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}

08001fde <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fde:	b580      	push	{r7, lr}
 8001fe0:	b082      	sub	sp, #8
 8001fe2:	af00      	add	r7, sp, #0
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001fe8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fec:	4618      	mov	r0, r3
 8001fee:	f7ff ff33 	bl	8001e58 <__NVIC_EnableIRQ>
}
 8001ff2:	bf00      	nop
 8001ff4:	3708      	adds	r7, #8
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}

08001ffa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ffa:	b580      	push	{r7, lr}
 8001ffc:	b082      	sub	sp, #8
 8001ffe:	af00      	add	r7, sp, #0
 8002000:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002002:	6878      	ldr	r0, [r7, #4]
 8002004:	f7ff ffa4 	bl	8001f50 <SysTick_Config>
 8002008:	4603      	mov	r3, r0
}
 800200a:	4618      	mov	r0, r3
 800200c:	3708      	adds	r7, #8
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}
	...

08002014 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b084      	sub	sp, #16
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d101      	bne.n	8002026 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002022:	2301      	movs	r3, #1
 8002024:	e08d      	b.n	8002142 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	461a      	mov	r2, r3
 800202c:	4b47      	ldr	r3, [pc, #284]	@ (800214c <HAL_DMA_Init+0x138>)
 800202e:	429a      	cmp	r2, r3
 8002030:	d80f      	bhi.n	8002052 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	461a      	mov	r2, r3
 8002038:	4b45      	ldr	r3, [pc, #276]	@ (8002150 <HAL_DMA_Init+0x13c>)
 800203a:	4413      	add	r3, r2
 800203c:	4a45      	ldr	r2, [pc, #276]	@ (8002154 <HAL_DMA_Init+0x140>)
 800203e:	fba2 2303 	umull	r2, r3, r2, r3
 8002042:	091b      	lsrs	r3, r3, #4
 8002044:	009a      	lsls	r2, r3, #2
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	4a42      	ldr	r2, [pc, #264]	@ (8002158 <HAL_DMA_Init+0x144>)
 800204e:	641a      	str	r2, [r3, #64]	@ 0x40
 8002050:	e00e      	b.n	8002070 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	461a      	mov	r2, r3
 8002058:	4b40      	ldr	r3, [pc, #256]	@ (800215c <HAL_DMA_Init+0x148>)
 800205a:	4413      	add	r3, r2
 800205c:	4a3d      	ldr	r2, [pc, #244]	@ (8002154 <HAL_DMA_Init+0x140>)
 800205e:	fba2 2303 	umull	r2, r3, r2, r3
 8002062:	091b      	lsrs	r3, r3, #4
 8002064:	009a      	lsls	r2, r3, #2
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	4a3c      	ldr	r2, [pc, #240]	@ (8002160 <HAL_DMA_Init+0x14c>)
 800206e:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2202      	movs	r2, #2
 8002074:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8002086:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800208a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002094:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	691b      	ldr	r3, [r3, #16]
 800209a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	699b      	ldr	r3, [r3, #24]
 80020a6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020ac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6a1b      	ldr	r3, [r3, #32]
 80020b2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80020b4:	68fa      	ldr	r2, [r7, #12]
 80020b6:	4313      	orrs	r3, r2
 80020b8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	68fa      	ldr	r2, [r7, #12]
 80020c0:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80020c2:	6878      	ldr	r0, [r7, #4]
 80020c4:	f000 fa82 	bl	80025cc <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	689b      	ldr	r3, [r3, #8]
 80020cc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80020d0:	d102      	bne.n	80020d8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2200      	movs	r2, #0
 80020d6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	685a      	ldr	r2, [r3, #4]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80020e0:	b2d2      	uxtb	r2, r2
 80020e2:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020e8:	687a      	ldr	r2, [r7, #4]
 80020ea:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80020ec:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d010      	beq.n	8002118 <HAL_DMA_Init+0x104>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	2b04      	cmp	r3, #4
 80020fc:	d80c      	bhi.n	8002118 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80020fe:	6878      	ldr	r0, [r7, #4]
 8002100:	f000 faa2 	bl	8002648 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002108:	2200      	movs	r2, #0
 800210a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002110:	687a      	ldr	r2, [r7, #4]
 8002112:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002114:	605a      	str	r2, [r3, #4]
 8002116:	e008      	b.n	800212a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2200      	movs	r2, #0
 800211c:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2200      	movs	r2, #0
 8002122:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2200      	movs	r2, #0
 8002128:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2200      	movs	r2, #0
 800212e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2201      	movs	r2, #1
 8002134:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2200      	movs	r2, #0
 800213c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002140:	2300      	movs	r3, #0
}
 8002142:	4618      	mov	r0, r3
 8002144:	3710      	adds	r7, #16
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}
 800214a:	bf00      	nop
 800214c:	40020407 	.word	0x40020407
 8002150:	bffdfff8 	.word	0xbffdfff8
 8002154:	cccccccd 	.word	0xcccccccd
 8002158:	40020000 	.word	0x40020000
 800215c:	bffdfbf8 	.word	0xbffdfbf8
 8002160:	40020400 	.word	0x40020400

08002164 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b086      	sub	sp, #24
 8002168:	af00      	add	r7, sp, #0
 800216a:	60f8      	str	r0, [r7, #12]
 800216c:	60b9      	str	r1, [r7, #8]
 800216e:	607a      	str	r2, [r7, #4]
 8002170:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002172:	2300      	movs	r3, #0
 8002174:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800217c:	2b01      	cmp	r3, #1
 800217e:	d101      	bne.n	8002184 <HAL_DMA_Start_IT+0x20>
 8002180:	2302      	movs	r3, #2
 8002182:	e066      	b.n	8002252 <HAL_DMA_Start_IT+0xee>
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	2201      	movs	r2, #1
 8002188:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002192:	b2db      	uxtb	r3, r3
 8002194:	2b01      	cmp	r3, #1
 8002196:	d155      	bne.n	8002244 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	2202      	movs	r2, #2
 800219c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	2200      	movs	r2, #0
 80021a4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	681a      	ldr	r2, [r3, #0]
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f022 0201 	bic.w	r2, r2, #1
 80021b4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	687a      	ldr	r2, [r7, #4]
 80021ba:	68b9      	ldr	r1, [r7, #8]
 80021bc:	68f8      	ldr	r0, [r7, #12]
 80021be:	f000 f9c7 	bl	8002550 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d008      	beq.n	80021dc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	681a      	ldr	r2, [r3, #0]
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f042 020e 	orr.w	r2, r2, #14
 80021d8:	601a      	str	r2, [r3, #0]
 80021da:	e00f      	b.n	80021fc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	681a      	ldr	r2, [r3, #0]
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f022 0204 	bic.w	r2, r2, #4
 80021ea:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	681a      	ldr	r2, [r3, #0]
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f042 020a 	orr.w	r2, r2, #10
 80021fa:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002206:	2b00      	cmp	r3, #0
 8002208:	d007      	beq.n	800221a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800220e:	681a      	ldr	r2, [r3, #0]
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002214:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002218:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800221e:	2b00      	cmp	r3, #0
 8002220:	d007      	beq.n	8002232 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002226:	681a      	ldr	r2, [r3, #0]
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800222c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002230:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	681a      	ldr	r2, [r3, #0]
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f042 0201 	orr.w	r2, r2, #1
 8002240:	601a      	str	r2, [r3, #0]
 8002242:	e005      	b.n	8002250 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	2200      	movs	r2, #0
 8002248:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800224c:	2302      	movs	r3, #2
 800224e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002250:	7dfb      	ldrb	r3, [r7, #23]
}
 8002252:	4618      	mov	r0, r3
 8002254:	3718      	adds	r7, #24
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}

0800225a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800225a:	b480      	push	{r7}
 800225c:	b085      	sub	sp, #20
 800225e:	af00      	add	r7, sp, #0
 8002260:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002262:	2300      	movs	r3, #0
 8002264:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800226c:	b2db      	uxtb	r3, r3
 800226e:	2b02      	cmp	r3, #2
 8002270:	d005      	beq.n	800227e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2204      	movs	r2, #4
 8002276:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8002278:	2301      	movs	r3, #1
 800227a:	73fb      	strb	r3, [r7, #15]
 800227c:	e037      	b.n	80022ee <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	681a      	ldr	r2, [r3, #0]
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f022 020e 	bic.w	r2, r2, #14
 800228c:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002292:	681a      	ldr	r2, [r3, #0]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002298:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800229c:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	681a      	ldr	r2, [r3, #0]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f022 0201 	bic.w	r2, r2, #1
 80022ac:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022b2:	f003 021f 	and.w	r2, r3, #31
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022ba:	2101      	movs	r1, #1
 80022bc:	fa01 f202 	lsl.w	r2, r1, r2
 80022c0:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022c6:	687a      	ldr	r2, [r7, #4]
 80022c8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80022ca:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d00c      	beq.n	80022ee <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022d8:	681a      	ldr	r2, [r3, #0]
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022de:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80022e2:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022e8:	687a      	ldr	r2, [r7, #4]
 80022ea:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80022ec:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2201      	movs	r2, #1
 80022f2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2200      	movs	r2, #0
 80022fa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 80022fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002300:	4618      	mov	r0, r3
 8002302:	3714      	adds	r7, #20
 8002304:	46bd      	mov	sp, r7
 8002306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230a:	4770      	bx	lr

0800230c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b084      	sub	sp, #16
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002314:	2300      	movs	r3, #0
 8002316:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800231e:	b2db      	uxtb	r3, r3
 8002320:	2b02      	cmp	r3, #2
 8002322:	d00d      	beq.n	8002340 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2204      	movs	r2, #4
 8002328:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2201      	movs	r2, #1
 800232e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2200      	movs	r2, #0
 8002336:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 800233a:	2301      	movs	r3, #1
 800233c:	73fb      	strb	r3, [r7, #15]
 800233e:	e047      	b.n	80023d0 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	681a      	ldr	r2, [r3, #0]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f022 020e 	bic.w	r2, r2, #14
 800234e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	681a      	ldr	r2, [r3, #0]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f022 0201 	bic.w	r2, r2, #1
 800235e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002364:	681a      	ldr	r2, [r3, #0]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800236a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800236e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002374:	f003 021f 	and.w	r2, r3, #31
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800237c:	2101      	movs	r1, #1
 800237e:	fa01 f202 	lsl.w	r2, r1, r2
 8002382:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002388:	687a      	ldr	r2, [r7, #4]
 800238a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800238c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002392:	2b00      	cmp	r3, #0
 8002394:	d00c      	beq.n	80023b0 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800239a:	681a      	ldr	r2, [r3, #0]
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023a0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80023a4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023aa:	687a      	ldr	r2, [r7, #4]
 80023ac:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80023ae:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2201      	movs	r2, #1
 80023b4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2200      	movs	r2, #0
 80023bc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d003      	beq.n	80023d0 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023cc:	6878      	ldr	r0, [r7, #4]
 80023ce:	4798      	blx	r3
    }
  }
  return status;
 80023d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	3710      	adds	r7, #16
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}

080023da <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80023da:	b580      	push	{r7, lr}
 80023dc:	b084      	sub	sp, #16
 80023de:	af00      	add	r7, sp, #0
 80023e0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023f6:	f003 031f 	and.w	r3, r3, #31
 80023fa:	2204      	movs	r2, #4
 80023fc:	409a      	lsls	r2, r3
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	4013      	ands	r3, r2
 8002402:	2b00      	cmp	r3, #0
 8002404:	d026      	beq.n	8002454 <HAL_DMA_IRQHandler+0x7a>
 8002406:	68bb      	ldr	r3, [r7, #8]
 8002408:	f003 0304 	and.w	r3, r3, #4
 800240c:	2b00      	cmp	r3, #0
 800240e:	d021      	beq.n	8002454 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f003 0320 	and.w	r3, r3, #32
 800241a:	2b00      	cmp	r3, #0
 800241c:	d107      	bne.n	800242e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	681a      	ldr	r2, [r3, #0]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f022 0204 	bic.w	r2, r2, #4
 800242c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002432:	f003 021f 	and.w	r2, r3, #31
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800243a:	2104      	movs	r1, #4
 800243c:	fa01 f202 	lsl.w	r2, r1, r2
 8002440:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002446:	2b00      	cmp	r3, #0
 8002448:	d071      	beq.n	800252e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800244e:	6878      	ldr	r0, [r7, #4]
 8002450:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002452:	e06c      	b.n	800252e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002458:	f003 031f 	and.w	r3, r3, #31
 800245c:	2202      	movs	r2, #2
 800245e:	409a      	lsls	r2, r3
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	4013      	ands	r3, r2
 8002464:	2b00      	cmp	r3, #0
 8002466:	d02e      	beq.n	80024c6 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	f003 0302 	and.w	r3, r3, #2
 800246e:	2b00      	cmp	r3, #0
 8002470:	d029      	beq.n	80024c6 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f003 0320 	and.w	r3, r3, #32
 800247c:	2b00      	cmp	r3, #0
 800247e:	d10b      	bne.n	8002498 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	681a      	ldr	r2, [r3, #0]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f022 020a 	bic.w	r2, r2, #10
 800248e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2201      	movs	r2, #1
 8002494:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800249c:	f003 021f 	and.w	r2, r3, #31
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024a4:	2102      	movs	r1, #2
 80024a6:	fa01 f202 	lsl.w	r2, r1, r2
 80024aa:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2200      	movs	r2, #0
 80024b0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d038      	beq.n	800252e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024c0:	6878      	ldr	r0, [r7, #4]
 80024c2:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80024c4:	e033      	b.n	800252e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024ca:	f003 031f 	and.w	r3, r3, #31
 80024ce:	2208      	movs	r2, #8
 80024d0:	409a      	lsls	r2, r3
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	4013      	ands	r3, r2
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d02a      	beq.n	8002530 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80024da:	68bb      	ldr	r3, [r7, #8]
 80024dc:	f003 0308 	and.w	r3, r3, #8
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d025      	beq.n	8002530 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	681a      	ldr	r2, [r3, #0]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f022 020e 	bic.w	r2, r2, #14
 80024f2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024f8:	f003 021f 	and.w	r2, r3, #31
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002500:	2101      	movs	r1, #1
 8002502:	fa01 f202 	lsl.w	r2, r1, r2
 8002506:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2201      	movs	r2, #1
 800250c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2201      	movs	r2, #1
 8002512:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2200      	movs	r2, #0
 800251a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002522:	2b00      	cmp	r3, #0
 8002524:	d004      	beq.n	8002530 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800252a:	6878      	ldr	r0, [r7, #4]
 800252c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800252e:	bf00      	nop
 8002530:	bf00      	nop
}
 8002532:	3710      	adds	r7, #16
 8002534:	46bd      	mov	sp, r7
 8002536:	bd80      	pop	{r7, pc}

08002538 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002538:	b480      	push	{r7}
 800253a:	b083      	sub	sp, #12
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 8002544:	4618      	mov	r0, r3
 8002546:	370c      	adds	r7, #12
 8002548:	46bd      	mov	sp, r7
 800254a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254e:	4770      	bx	lr

08002550 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002550:	b480      	push	{r7}
 8002552:	b085      	sub	sp, #20
 8002554:	af00      	add	r7, sp, #0
 8002556:	60f8      	str	r0, [r7, #12]
 8002558:	60b9      	str	r1, [r7, #8]
 800255a:	607a      	str	r2, [r7, #4]
 800255c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002562:	68fa      	ldr	r2, [r7, #12]
 8002564:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002566:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800256c:	2b00      	cmp	r3, #0
 800256e:	d004      	beq.n	800257a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002574:	68fa      	ldr	r2, [r7, #12]
 8002576:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002578:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800257e:	f003 021f 	and.w	r2, r3, #31
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002586:	2101      	movs	r1, #1
 8002588:	fa01 f202 	lsl.w	r2, r1, r2
 800258c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	683a      	ldr	r2, [r7, #0]
 8002594:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	689b      	ldr	r3, [r3, #8]
 800259a:	2b10      	cmp	r3, #16
 800259c:	d108      	bne.n	80025b0 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	687a      	ldr	r2, [r7, #4]
 80025a4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	68ba      	ldr	r2, [r7, #8]
 80025ac:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80025ae:	e007      	b.n	80025c0 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	68ba      	ldr	r2, [r7, #8]
 80025b6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	687a      	ldr	r2, [r7, #4]
 80025be:	60da      	str	r2, [r3, #12]
}
 80025c0:	bf00      	nop
 80025c2:	3714      	adds	r7, #20
 80025c4:	46bd      	mov	sp, r7
 80025c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ca:	4770      	bx	lr

080025cc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80025cc:	b480      	push	{r7}
 80025ce:	b087      	sub	sp, #28
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	461a      	mov	r2, r3
 80025da:	4b16      	ldr	r3, [pc, #88]	@ (8002634 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80025dc:	429a      	cmp	r2, r3
 80025de:	d802      	bhi.n	80025e6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80025e0:	4b15      	ldr	r3, [pc, #84]	@ (8002638 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80025e2:	617b      	str	r3, [r7, #20]
 80025e4:	e001      	b.n	80025ea <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 80025e6:	4b15      	ldr	r3, [pc, #84]	@ (800263c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80025e8:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80025ea:	697b      	ldr	r3, [r7, #20]
 80025ec:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	b2db      	uxtb	r3, r3
 80025f4:	3b08      	subs	r3, #8
 80025f6:	4a12      	ldr	r2, [pc, #72]	@ (8002640 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80025f8:	fba2 2303 	umull	r2, r3, r2, r3
 80025fc:	091b      	lsrs	r3, r3, #4
 80025fe:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002604:	089b      	lsrs	r3, r3, #2
 8002606:	009a      	lsls	r2, r3, #2
 8002608:	693b      	ldr	r3, [r7, #16]
 800260a:	4413      	add	r3, r2
 800260c:	461a      	mov	r2, r3
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	4a0b      	ldr	r2, [pc, #44]	@ (8002644 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8002616:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	f003 031f 	and.w	r3, r3, #31
 800261e:	2201      	movs	r2, #1
 8002620:	409a      	lsls	r2, r3
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8002626:	bf00      	nop
 8002628:	371c      	adds	r7, #28
 800262a:	46bd      	mov	sp, r7
 800262c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002630:	4770      	bx	lr
 8002632:	bf00      	nop
 8002634:	40020407 	.word	0x40020407
 8002638:	40020800 	.word	0x40020800
 800263c:	40020820 	.word	0x40020820
 8002640:	cccccccd 	.word	0xcccccccd
 8002644:	40020880 	.word	0x40020880

08002648 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002648:	b480      	push	{r7}
 800264a:	b085      	sub	sp, #20
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	b2db      	uxtb	r3, r3
 8002656:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002658:	68fa      	ldr	r2, [r7, #12]
 800265a:	4b0b      	ldr	r3, [pc, #44]	@ (8002688 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800265c:	4413      	add	r3, r2
 800265e:	009b      	lsls	r3, r3, #2
 8002660:	461a      	mov	r2, r3
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	4a08      	ldr	r2, [pc, #32]	@ (800268c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800266a:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	3b01      	subs	r3, #1
 8002670:	f003 031f 	and.w	r3, r3, #31
 8002674:	2201      	movs	r2, #1
 8002676:	409a      	lsls	r2, r3
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 800267c:	bf00      	nop
 800267e:	3714      	adds	r7, #20
 8002680:	46bd      	mov	sp, r7
 8002682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002686:	4770      	bx	lr
 8002688:	1000823f 	.word	0x1000823f
 800268c:	40020940 	.word	0x40020940

08002690 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002690:	b480      	push	{r7}
 8002692:	b087      	sub	sp, #28
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
 8002698:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800269a:	2300      	movs	r3, #0
 800269c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800269e:	e15a      	b.n	8002956 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	681a      	ldr	r2, [r3, #0]
 80026a4:	2101      	movs	r1, #1
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	fa01 f303 	lsl.w	r3, r1, r3
 80026ac:	4013      	ands	r3, r2
 80026ae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	f000 814c 	beq.w	8002950 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	f003 0303 	and.w	r3, r3, #3
 80026c0:	2b01      	cmp	r3, #1
 80026c2:	d005      	beq.n	80026d0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80026cc:	2b02      	cmp	r3, #2
 80026ce:	d130      	bne.n	8002732 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80026d6:	697b      	ldr	r3, [r7, #20]
 80026d8:	005b      	lsls	r3, r3, #1
 80026da:	2203      	movs	r2, #3
 80026dc:	fa02 f303 	lsl.w	r3, r2, r3
 80026e0:	43db      	mvns	r3, r3
 80026e2:	693a      	ldr	r2, [r7, #16]
 80026e4:	4013      	ands	r3, r2
 80026e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	68da      	ldr	r2, [r3, #12]
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	005b      	lsls	r3, r3, #1
 80026f0:	fa02 f303 	lsl.w	r3, r2, r3
 80026f4:	693a      	ldr	r2, [r7, #16]
 80026f6:	4313      	orrs	r3, r2
 80026f8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	693a      	ldr	r2, [r7, #16]
 80026fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002706:	2201      	movs	r2, #1
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	fa02 f303 	lsl.w	r3, r2, r3
 800270e:	43db      	mvns	r3, r3
 8002710:	693a      	ldr	r2, [r7, #16]
 8002712:	4013      	ands	r3, r2
 8002714:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	091b      	lsrs	r3, r3, #4
 800271c:	f003 0201 	and.w	r2, r3, #1
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	fa02 f303 	lsl.w	r3, r2, r3
 8002726:	693a      	ldr	r2, [r7, #16]
 8002728:	4313      	orrs	r3, r2
 800272a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	693a      	ldr	r2, [r7, #16]
 8002730:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	f003 0303 	and.w	r3, r3, #3
 800273a:	2b03      	cmp	r3, #3
 800273c:	d017      	beq.n	800276e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	68db      	ldr	r3, [r3, #12]
 8002742:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002744:	697b      	ldr	r3, [r7, #20]
 8002746:	005b      	lsls	r3, r3, #1
 8002748:	2203      	movs	r2, #3
 800274a:	fa02 f303 	lsl.w	r3, r2, r3
 800274e:	43db      	mvns	r3, r3
 8002750:	693a      	ldr	r2, [r7, #16]
 8002752:	4013      	ands	r3, r2
 8002754:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	689a      	ldr	r2, [r3, #8]
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	005b      	lsls	r3, r3, #1
 800275e:	fa02 f303 	lsl.w	r3, r2, r3
 8002762:	693a      	ldr	r2, [r7, #16]
 8002764:	4313      	orrs	r3, r2
 8002766:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	693a      	ldr	r2, [r7, #16]
 800276c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	f003 0303 	and.w	r3, r3, #3
 8002776:	2b02      	cmp	r3, #2
 8002778:	d123      	bne.n	80027c2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	08da      	lsrs	r2, r3, #3
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	3208      	adds	r2, #8
 8002782:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002786:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002788:	697b      	ldr	r3, [r7, #20]
 800278a:	f003 0307 	and.w	r3, r3, #7
 800278e:	009b      	lsls	r3, r3, #2
 8002790:	220f      	movs	r2, #15
 8002792:	fa02 f303 	lsl.w	r3, r2, r3
 8002796:	43db      	mvns	r3, r3
 8002798:	693a      	ldr	r2, [r7, #16]
 800279a:	4013      	ands	r3, r2
 800279c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	691a      	ldr	r2, [r3, #16]
 80027a2:	697b      	ldr	r3, [r7, #20]
 80027a4:	f003 0307 	and.w	r3, r3, #7
 80027a8:	009b      	lsls	r3, r3, #2
 80027aa:	fa02 f303 	lsl.w	r3, r2, r3
 80027ae:	693a      	ldr	r2, [r7, #16]
 80027b0:	4313      	orrs	r3, r2
 80027b2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80027b4:	697b      	ldr	r3, [r7, #20]
 80027b6:	08da      	lsrs	r2, r3, #3
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	3208      	adds	r2, #8
 80027bc:	6939      	ldr	r1, [r7, #16]
 80027be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	005b      	lsls	r3, r3, #1
 80027cc:	2203      	movs	r2, #3
 80027ce:	fa02 f303 	lsl.w	r3, r2, r3
 80027d2:	43db      	mvns	r3, r3
 80027d4:	693a      	ldr	r2, [r7, #16]
 80027d6:	4013      	ands	r3, r2
 80027d8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	f003 0203 	and.w	r2, r3, #3
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	005b      	lsls	r3, r3, #1
 80027e6:	fa02 f303 	lsl.w	r3, r2, r3
 80027ea:	693a      	ldr	r2, [r7, #16]
 80027ec:	4313      	orrs	r3, r2
 80027ee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	693a      	ldr	r2, [r7, #16]
 80027f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80027fe:	2b00      	cmp	r3, #0
 8002800:	f000 80a6 	beq.w	8002950 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002804:	4b5b      	ldr	r3, [pc, #364]	@ (8002974 <HAL_GPIO_Init+0x2e4>)
 8002806:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002808:	4a5a      	ldr	r2, [pc, #360]	@ (8002974 <HAL_GPIO_Init+0x2e4>)
 800280a:	f043 0301 	orr.w	r3, r3, #1
 800280e:	6613      	str	r3, [r2, #96]	@ 0x60
 8002810:	4b58      	ldr	r3, [pc, #352]	@ (8002974 <HAL_GPIO_Init+0x2e4>)
 8002812:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002814:	f003 0301 	and.w	r3, r3, #1
 8002818:	60bb      	str	r3, [r7, #8]
 800281a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800281c:	4a56      	ldr	r2, [pc, #344]	@ (8002978 <HAL_GPIO_Init+0x2e8>)
 800281e:	697b      	ldr	r3, [r7, #20]
 8002820:	089b      	lsrs	r3, r3, #2
 8002822:	3302      	adds	r3, #2
 8002824:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002828:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800282a:	697b      	ldr	r3, [r7, #20]
 800282c:	f003 0303 	and.w	r3, r3, #3
 8002830:	009b      	lsls	r3, r3, #2
 8002832:	220f      	movs	r2, #15
 8002834:	fa02 f303 	lsl.w	r3, r2, r3
 8002838:	43db      	mvns	r3, r3
 800283a:	693a      	ldr	r2, [r7, #16]
 800283c:	4013      	ands	r3, r2
 800283e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002846:	d01f      	beq.n	8002888 <HAL_GPIO_Init+0x1f8>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	4a4c      	ldr	r2, [pc, #304]	@ (800297c <HAL_GPIO_Init+0x2ec>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d019      	beq.n	8002884 <HAL_GPIO_Init+0x1f4>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	4a4b      	ldr	r2, [pc, #300]	@ (8002980 <HAL_GPIO_Init+0x2f0>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d013      	beq.n	8002880 <HAL_GPIO_Init+0x1f0>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	4a4a      	ldr	r2, [pc, #296]	@ (8002984 <HAL_GPIO_Init+0x2f4>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d00d      	beq.n	800287c <HAL_GPIO_Init+0x1ec>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	4a49      	ldr	r2, [pc, #292]	@ (8002988 <HAL_GPIO_Init+0x2f8>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d007      	beq.n	8002878 <HAL_GPIO_Init+0x1e8>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	4a48      	ldr	r2, [pc, #288]	@ (800298c <HAL_GPIO_Init+0x2fc>)
 800286c:	4293      	cmp	r3, r2
 800286e:	d101      	bne.n	8002874 <HAL_GPIO_Init+0x1e4>
 8002870:	2305      	movs	r3, #5
 8002872:	e00a      	b.n	800288a <HAL_GPIO_Init+0x1fa>
 8002874:	2306      	movs	r3, #6
 8002876:	e008      	b.n	800288a <HAL_GPIO_Init+0x1fa>
 8002878:	2304      	movs	r3, #4
 800287a:	e006      	b.n	800288a <HAL_GPIO_Init+0x1fa>
 800287c:	2303      	movs	r3, #3
 800287e:	e004      	b.n	800288a <HAL_GPIO_Init+0x1fa>
 8002880:	2302      	movs	r3, #2
 8002882:	e002      	b.n	800288a <HAL_GPIO_Init+0x1fa>
 8002884:	2301      	movs	r3, #1
 8002886:	e000      	b.n	800288a <HAL_GPIO_Init+0x1fa>
 8002888:	2300      	movs	r3, #0
 800288a:	697a      	ldr	r2, [r7, #20]
 800288c:	f002 0203 	and.w	r2, r2, #3
 8002890:	0092      	lsls	r2, r2, #2
 8002892:	4093      	lsls	r3, r2
 8002894:	693a      	ldr	r2, [r7, #16]
 8002896:	4313      	orrs	r3, r2
 8002898:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800289a:	4937      	ldr	r1, [pc, #220]	@ (8002978 <HAL_GPIO_Init+0x2e8>)
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	089b      	lsrs	r3, r3, #2
 80028a0:	3302      	adds	r3, #2
 80028a2:	693a      	ldr	r2, [r7, #16]
 80028a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80028a8:	4b39      	ldr	r3, [pc, #228]	@ (8002990 <HAL_GPIO_Init+0x300>)
 80028aa:	689b      	ldr	r3, [r3, #8]
 80028ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	43db      	mvns	r3, r3
 80028b2:	693a      	ldr	r2, [r7, #16]
 80028b4:	4013      	ands	r3, r2
 80028b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d003      	beq.n	80028cc <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80028c4:	693a      	ldr	r2, [r7, #16]
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	4313      	orrs	r3, r2
 80028ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80028cc:	4a30      	ldr	r2, [pc, #192]	@ (8002990 <HAL_GPIO_Init+0x300>)
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80028d2:	4b2f      	ldr	r3, [pc, #188]	@ (8002990 <HAL_GPIO_Init+0x300>)
 80028d4:	68db      	ldr	r3, [r3, #12]
 80028d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	43db      	mvns	r3, r3
 80028dc:	693a      	ldr	r2, [r7, #16]
 80028de:	4013      	ands	r3, r2
 80028e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d003      	beq.n	80028f6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80028ee:	693a      	ldr	r2, [r7, #16]
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	4313      	orrs	r3, r2
 80028f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80028f6:	4a26      	ldr	r2, [pc, #152]	@ (8002990 <HAL_GPIO_Init+0x300>)
 80028f8:	693b      	ldr	r3, [r7, #16]
 80028fa:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80028fc:	4b24      	ldr	r3, [pc, #144]	@ (8002990 <HAL_GPIO_Init+0x300>)
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	43db      	mvns	r3, r3
 8002906:	693a      	ldr	r2, [r7, #16]
 8002908:	4013      	ands	r3, r2
 800290a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002914:	2b00      	cmp	r3, #0
 8002916:	d003      	beq.n	8002920 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002918:	693a      	ldr	r2, [r7, #16]
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	4313      	orrs	r3, r2
 800291e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002920:	4a1b      	ldr	r2, [pc, #108]	@ (8002990 <HAL_GPIO_Init+0x300>)
 8002922:	693b      	ldr	r3, [r7, #16]
 8002924:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002926:	4b1a      	ldr	r3, [pc, #104]	@ (8002990 <HAL_GPIO_Init+0x300>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	43db      	mvns	r3, r3
 8002930:	693a      	ldr	r2, [r7, #16]
 8002932:	4013      	ands	r3, r2
 8002934:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800293e:	2b00      	cmp	r3, #0
 8002940:	d003      	beq.n	800294a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002942:	693a      	ldr	r2, [r7, #16]
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	4313      	orrs	r3, r2
 8002948:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800294a:	4a11      	ldr	r2, [pc, #68]	@ (8002990 <HAL_GPIO_Init+0x300>)
 800294c:	693b      	ldr	r3, [r7, #16]
 800294e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	3301      	adds	r3, #1
 8002954:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	681a      	ldr	r2, [r3, #0]
 800295a:	697b      	ldr	r3, [r7, #20]
 800295c:	fa22 f303 	lsr.w	r3, r2, r3
 8002960:	2b00      	cmp	r3, #0
 8002962:	f47f ae9d 	bne.w	80026a0 <HAL_GPIO_Init+0x10>
  }
}
 8002966:	bf00      	nop
 8002968:	bf00      	nop
 800296a:	371c      	adds	r7, #28
 800296c:	46bd      	mov	sp, r7
 800296e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002972:	4770      	bx	lr
 8002974:	40021000 	.word	0x40021000
 8002978:	40010000 	.word	0x40010000
 800297c:	48000400 	.word	0x48000400
 8002980:	48000800 	.word	0x48000800
 8002984:	48000c00 	.word	0x48000c00
 8002988:	48001000 	.word	0x48001000
 800298c:	48001400 	.word	0x48001400
 8002990:	40010400 	.word	0x40010400

08002994 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002994:	b480      	push	{r7}
 8002996:	b085      	sub	sp, #20
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d141      	bne.n	8002a26 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80029a2:	4b4b      	ldr	r3, [pc, #300]	@ (8002ad0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80029aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80029ae:	d131      	bne.n	8002a14 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80029b0:	4b47      	ldr	r3, [pc, #284]	@ (8002ad0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80029b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80029b6:	4a46      	ldr	r2, [pc, #280]	@ (8002ad0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80029b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80029bc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80029c0:	4b43      	ldr	r3, [pc, #268]	@ (8002ad0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80029c8:	4a41      	ldr	r2, [pc, #260]	@ (8002ad0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80029ca:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80029ce:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80029d0:	4b40      	ldr	r3, [pc, #256]	@ (8002ad4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	2232      	movs	r2, #50	@ 0x32
 80029d6:	fb02 f303 	mul.w	r3, r2, r3
 80029da:	4a3f      	ldr	r2, [pc, #252]	@ (8002ad8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80029dc:	fba2 2303 	umull	r2, r3, r2, r3
 80029e0:	0c9b      	lsrs	r3, r3, #18
 80029e2:	3301      	adds	r3, #1
 80029e4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80029e6:	e002      	b.n	80029ee <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	3b01      	subs	r3, #1
 80029ec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80029ee:	4b38      	ldr	r3, [pc, #224]	@ (8002ad0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80029f0:	695b      	ldr	r3, [r3, #20]
 80029f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80029fa:	d102      	bne.n	8002a02 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d1f2      	bne.n	80029e8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002a02:	4b33      	ldr	r3, [pc, #204]	@ (8002ad0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a04:	695b      	ldr	r3, [r3, #20]
 8002a06:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a0a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a0e:	d158      	bne.n	8002ac2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002a10:	2303      	movs	r3, #3
 8002a12:	e057      	b.n	8002ac4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002a14:	4b2e      	ldr	r3, [pc, #184]	@ (8002ad0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a16:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002a1a:	4a2d      	ldr	r2, [pc, #180]	@ (8002ad0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a1c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002a20:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002a24:	e04d      	b.n	8002ac2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002a2c:	d141      	bne.n	8002ab2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002a2e:	4b28      	ldr	r3, [pc, #160]	@ (8002ad0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002a36:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a3a:	d131      	bne.n	8002aa0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002a3c:	4b24      	ldr	r3, [pc, #144]	@ (8002ad0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002a42:	4a23      	ldr	r2, [pc, #140]	@ (8002ad0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a44:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a48:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002a4c:	4b20      	ldr	r3, [pc, #128]	@ (8002ad0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002a54:	4a1e      	ldr	r2, [pc, #120]	@ (8002ad0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a56:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002a5a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002a5c:	4b1d      	ldr	r3, [pc, #116]	@ (8002ad4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	2232      	movs	r2, #50	@ 0x32
 8002a62:	fb02 f303 	mul.w	r3, r2, r3
 8002a66:	4a1c      	ldr	r2, [pc, #112]	@ (8002ad8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002a68:	fba2 2303 	umull	r2, r3, r2, r3
 8002a6c:	0c9b      	lsrs	r3, r3, #18
 8002a6e:	3301      	adds	r3, #1
 8002a70:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002a72:	e002      	b.n	8002a7a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	3b01      	subs	r3, #1
 8002a78:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002a7a:	4b15      	ldr	r3, [pc, #84]	@ (8002ad0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a7c:	695b      	ldr	r3, [r3, #20]
 8002a7e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a82:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a86:	d102      	bne.n	8002a8e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d1f2      	bne.n	8002a74 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002a8e:	4b10      	ldr	r3, [pc, #64]	@ (8002ad0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a90:	695b      	ldr	r3, [r3, #20]
 8002a92:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a96:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a9a:	d112      	bne.n	8002ac2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002a9c:	2303      	movs	r3, #3
 8002a9e:	e011      	b.n	8002ac4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002aa0:	4b0b      	ldr	r3, [pc, #44]	@ (8002ad0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002aa2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002aa6:	4a0a      	ldr	r2, [pc, #40]	@ (8002ad0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002aa8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002aac:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002ab0:	e007      	b.n	8002ac2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002ab2:	4b07      	ldr	r3, [pc, #28]	@ (8002ad0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002aba:	4a05      	ldr	r2, [pc, #20]	@ (8002ad0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002abc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002ac0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002ac2:	2300      	movs	r3, #0
}
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	3714      	adds	r7, #20
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ace:	4770      	bx	lr
 8002ad0:	40007000 	.word	0x40007000
 8002ad4:	20000200 	.word	0x20000200
 8002ad8:	431bde83 	.word	0x431bde83

08002adc <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002adc:	b480      	push	{r7}
 8002ade:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002ae0:	4b05      	ldr	r3, [pc, #20]	@ (8002af8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002ae2:	689b      	ldr	r3, [r3, #8]
 8002ae4:	4a04      	ldr	r2, [pc, #16]	@ (8002af8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002ae6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002aea:	6093      	str	r3, [r2, #8]
}
 8002aec:	bf00      	nop
 8002aee:	46bd      	mov	sp, r7
 8002af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af4:	4770      	bx	lr
 8002af6:	bf00      	nop
 8002af8:	40007000 	.word	0x40007000

08002afc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b088      	sub	sp, #32
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d101      	bne.n	8002b0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	e2fe      	b.n	800310c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f003 0301 	and.w	r3, r3, #1
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d075      	beq.n	8002c06 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b1a:	4b97      	ldr	r3, [pc, #604]	@ (8002d78 <HAL_RCC_OscConfig+0x27c>)
 8002b1c:	689b      	ldr	r3, [r3, #8]
 8002b1e:	f003 030c 	and.w	r3, r3, #12
 8002b22:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b24:	4b94      	ldr	r3, [pc, #592]	@ (8002d78 <HAL_RCC_OscConfig+0x27c>)
 8002b26:	68db      	ldr	r3, [r3, #12]
 8002b28:	f003 0303 	and.w	r3, r3, #3
 8002b2c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002b2e:	69bb      	ldr	r3, [r7, #24]
 8002b30:	2b0c      	cmp	r3, #12
 8002b32:	d102      	bne.n	8002b3a <HAL_RCC_OscConfig+0x3e>
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	2b03      	cmp	r3, #3
 8002b38:	d002      	beq.n	8002b40 <HAL_RCC_OscConfig+0x44>
 8002b3a:	69bb      	ldr	r3, [r7, #24]
 8002b3c:	2b08      	cmp	r3, #8
 8002b3e:	d10b      	bne.n	8002b58 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b40:	4b8d      	ldr	r3, [pc, #564]	@ (8002d78 <HAL_RCC_OscConfig+0x27c>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d05b      	beq.n	8002c04 <HAL_RCC_OscConfig+0x108>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d157      	bne.n	8002c04 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002b54:	2301      	movs	r3, #1
 8002b56:	e2d9      	b.n	800310c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b60:	d106      	bne.n	8002b70 <HAL_RCC_OscConfig+0x74>
 8002b62:	4b85      	ldr	r3, [pc, #532]	@ (8002d78 <HAL_RCC_OscConfig+0x27c>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4a84      	ldr	r2, [pc, #528]	@ (8002d78 <HAL_RCC_OscConfig+0x27c>)
 8002b68:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b6c:	6013      	str	r3, [r2, #0]
 8002b6e:	e01d      	b.n	8002bac <HAL_RCC_OscConfig+0xb0>
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002b78:	d10c      	bne.n	8002b94 <HAL_RCC_OscConfig+0x98>
 8002b7a:	4b7f      	ldr	r3, [pc, #508]	@ (8002d78 <HAL_RCC_OscConfig+0x27c>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4a7e      	ldr	r2, [pc, #504]	@ (8002d78 <HAL_RCC_OscConfig+0x27c>)
 8002b80:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002b84:	6013      	str	r3, [r2, #0]
 8002b86:	4b7c      	ldr	r3, [pc, #496]	@ (8002d78 <HAL_RCC_OscConfig+0x27c>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4a7b      	ldr	r2, [pc, #492]	@ (8002d78 <HAL_RCC_OscConfig+0x27c>)
 8002b8c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b90:	6013      	str	r3, [r2, #0]
 8002b92:	e00b      	b.n	8002bac <HAL_RCC_OscConfig+0xb0>
 8002b94:	4b78      	ldr	r3, [pc, #480]	@ (8002d78 <HAL_RCC_OscConfig+0x27c>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a77      	ldr	r2, [pc, #476]	@ (8002d78 <HAL_RCC_OscConfig+0x27c>)
 8002b9a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b9e:	6013      	str	r3, [r2, #0]
 8002ba0:	4b75      	ldr	r3, [pc, #468]	@ (8002d78 <HAL_RCC_OscConfig+0x27c>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a74      	ldr	r2, [pc, #464]	@ (8002d78 <HAL_RCC_OscConfig+0x27c>)
 8002ba6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002baa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d013      	beq.n	8002bdc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bb4:	f7ff f912 	bl	8001ddc <HAL_GetTick>
 8002bb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002bba:	e008      	b.n	8002bce <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002bbc:	f7ff f90e 	bl	8001ddc <HAL_GetTick>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	693b      	ldr	r3, [r7, #16]
 8002bc4:	1ad3      	subs	r3, r2, r3
 8002bc6:	2b64      	cmp	r3, #100	@ 0x64
 8002bc8:	d901      	bls.n	8002bce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002bca:	2303      	movs	r3, #3
 8002bcc:	e29e      	b.n	800310c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002bce:	4b6a      	ldr	r3, [pc, #424]	@ (8002d78 <HAL_RCC_OscConfig+0x27c>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d0f0      	beq.n	8002bbc <HAL_RCC_OscConfig+0xc0>
 8002bda:	e014      	b.n	8002c06 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bdc:	f7ff f8fe 	bl	8001ddc <HAL_GetTick>
 8002be0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002be2:	e008      	b.n	8002bf6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002be4:	f7ff f8fa 	bl	8001ddc <HAL_GetTick>
 8002be8:	4602      	mov	r2, r0
 8002bea:	693b      	ldr	r3, [r7, #16]
 8002bec:	1ad3      	subs	r3, r2, r3
 8002bee:	2b64      	cmp	r3, #100	@ 0x64
 8002bf0:	d901      	bls.n	8002bf6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002bf2:	2303      	movs	r3, #3
 8002bf4:	e28a      	b.n	800310c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002bf6:	4b60      	ldr	r3, [pc, #384]	@ (8002d78 <HAL_RCC_OscConfig+0x27c>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d1f0      	bne.n	8002be4 <HAL_RCC_OscConfig+0xe8>
 8002c02:	e000      	b.n	8002c06 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f003 0302 	and.w	r3, r3, #2
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d075      	beq.n	8002cfe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c12:	4b59      	ldr	r3, [pc, #356]	@ (8002d78 <HAL_RCC_OscConfig+0x27c>)
 8002c14:	689b      	ldr	r3, [r3, #8]
 8002c16:	f003 030c 	and.w	r3, r3, #12
 8002c1a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c1c:	4b56      	ldr	r3, [pc, #344]	@ (8002d78 <HAL_RCC_OscConfig+0x27c>)
 8002c1e:	68db      	ldr	r3, [r3, #12]
 8002c20:	f003 0303 	and.w	r3, r3, #3
 8002c24:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002c26:	69bb      	ldr	r3, [r7, #24]
 8002c28:	2b0c      	cmp	r3, #12
 8002c2a:	d102      	bne.n	8002c32 <HAL_RCC_OscConfig+0x136>
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	2b02      	cmp	r3, #2
 8002c30:	d002      	beq.n	8002c38 <HAL_RCC_OscConfig+0x13c>
 8002c32:	69bb      	ldr	r3, [r7, #24]
 8002c34:	2b04      	cmp	r3, #4
 8002c36:	d11f      	bne.n	8002c78 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c38:	4b4f      	ldr	r3, [pc, #316]	@ (8002d78 <HAL_RCC_OscConfig+0x27c>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d005      	beq.n	8002c50 <HAL_RCC_OscConfig+0x154>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	68db      	ldr	r3, [r3, #12]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d101      	bne.n	8002c50 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	e25d      	b.n	800310c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c50:	4b49      	ldr	r3, [pc, #292]	@ (8002d78 <HAL_RCC_OscConfig+0x27c>)
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	691b      	ldr	r3, [r3, #16]
 8002c5c:	061b      	lsls	r3, r3, #24
 8002c5e:	4946      	ldr	r1, [pc, #280]	@ (8002d78 <HAL_RCC_OscConfig+0x27c>)
 8002c60:	4313      	orrs	r3, r2
 8002c62:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002c64:	4b45      	ldr	r3, [pc, #276]	@ (8002d7c <HAL_RCC_OscConfig+0x280>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4618      	mov	r0, r3
 8002c6a:	f7ff f86b 	bl	8001d44 <HAL_InitTick>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d043      	beq.n	8002cfc <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002c74:	2301      	movs	r3, #1
 8002c76:	e249      	b.n	800310c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	68db      	ldr	r3, [r3, #12]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d023      	beq.n	8002cc8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c80:	4b3d      	ldr	r3, [pc, #244]	@ (8002d78 <HAL_RCC_OscConfig+0x27c>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a3c      	ldr	r2, [pc, #240]	@ (8002d78 <HAL_RCC_OscConfig+0x27c>)
 8002c86:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c8a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c8c:	f7ff f8a6 	bl	8001ddc <HAL_GetTick>
 8002c90:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c92:	e008      	b.n	8002ca6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c94:	f7ff f8a2 	bl	8001ddc <HAL_GetTick>
 8002c98:	4602      	mov	r2, r0
 8002c9a:	693b      	ldr	r3, [r7, #16]
 8002c9c:	1ad3      	subs	r3, r2, r3
 8002c9e:	2b02      	cmp	r3, #2
 8002ca0:	d901      	bls.n	8002ca6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002ca2:	2303      	movs	r3, #3
 8002ca4:	e232      	b.n	800310c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ca6:	4b34      	ldr	r3, [pc, #208]	@ (8002d78 <HAL_RCC_OscConfig+0x27c>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d0f0      	beq.n	8002c94 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cb2:	4b31      	ldr	r3, [pc, #196]	@ (8002d78 <HAL_RCC_OscConfig+0x27c>)
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	691b      	ldr	r3, [r3, #16]
 8002cbe:	061b      	lsls	r3, r3, #24
 8002cc0:	492d      	ldr	r1, [pc, #180]	@ (8002d78 <HAL_RCC_OscConfig+0x27c>)
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	604b      	str	r3, [r1, #4]
 8002cc6:	e01a      	b.n	8002cfe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002cc8:	4b2b      	ldr	r3, [pc, #172]	@ (8002d78 <HAL_RCC_OscConfig+0x27c>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a2a      	ldr	r2, [pc, #168]	@ (8002d78 <HAL_RCC_OscConfig+0x27c>)
 8002cce:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002cd2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cd4:	f7ff f882 	bl	8001ddc <HAL_GetTick>
 8002cd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002cda:	e008      	b.n	8002cee <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cdc:	f7ff f87e 	bl	8001ddc <HAL_GetTick>
 8002ce0:	4602      	mov	r2, r0
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	1ad3      	subs	r3, r2, r3
 8002ce6:	2b02      	cmp	r3, #2
 8002ce8:	d901      	bls.n	8002cee <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002cea:	2303      	movs	r3, #3
 8002cec:	e20e      	b.n	800310c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002cee:	4b22      	ldr	r3, [pc, #136]	@ (8002d78 <HAL_RCC_OscConfig+0x27c>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d1f0      	bne.n	8002cdc <HAL_RCC_OscConfig+0x1e0>
 8002cfa:	e000      	b.n	8002cfe <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002cfc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f003 0308 	and.w	r3, r3, #8
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d041      	beq.n	8002d8e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	695b      	ldr	r3, [r3, #20]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d01c      	beq.n	8002d4c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d12:	4b19      	ldr	r3, [pc, #100]	@ (8002d78 <HAL_RCC_OscConfig+0x27c>)
 8002d14:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002d18:	4a17      	ldr	r2, [pc, #92]	@ (8002d78 <HAL_RCC_OscConfig+0x27c>)
 8002d1a:	f043 0301 	orr.w	r3, r3, #1
 8002d1e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d22:	f7ff f85b 	bl	8001ddc <HAL_GetTick>
 8002d26:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002d28:	e008      	b.n	8002d3c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d2a:	f7ff f857 	bl	8001ddc <HAL_GetTick>
 8002d2e:	4602      	mov	r2, r0
 8002d30:	693b      	ldr	r3, [r7, #16]
 8002d32:	1ad3      	subs	r3, r2, r3
 8002d34:	2b02      	cmp	r3, #2
 8002d36:	d901      	bls.n	8002d3c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002d38:	2303      	movs	r3, #3
 8002d3a:	e1e7      	b.n	800310c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002d3c:	4b0e      	ldr	r3, [pc, #56]	@ (8002d78 <HAL_RCC_OscConfig+0x27c>)
 8002d3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002d42:	f003 0302 	and.w	r3, r3, #2
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d0ef      	beq.n	8002d2a <HAL_RCC_OscConfig+0x22e>
 8002d4a:	e020      	b.n	8002d8e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d4c:	4b0a      	ldr	r3, [pc, #40]	@ (8002d78 <HAL_RCC_OscConfig+0x27c>)
 8002d4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002d52:	4a09      	ldr	r2, [pc, #36]	@ (8002d78 <HAL_RCC_OscConfig+0x27c>)
 8002d54:	f023 0301 	bic.w	r3, r3, #1
 8002d58:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d5c:	f7ff f83e 	bl	8001ddc <HAL_GetTick>
 8002d60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002d62:	e00d      	b.n	8002d80 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d64:	f7ff f83a 	bl	8001ddc <HAL_GetTick>
 8002d68:	4602      	mov	r2, r0
 8002d6a:	693b      	ldr	r3, [r7, #16]
 8002d6c:	1ad3      	subs	r3, r2, r3
 8002d6e:	2b02      	cmp	r3, #2
 8002d70:	d906      	bls.n	8002d80 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002d72:	2303      	movs	r3, #3
 8002d74:	e1ca      	b.n	800310c <HAL_RCC_OscConfig+0x610>
 8002d76:	bf00      	nop
 8002d78:	40021000 	.word	0x40021000
 8002d7c:	20000204 	.word	0x20000204
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002d80:	4b8c      	ldr	r3, [pc, #560]	@ (8002fb4 <HAL_RCC_OscConfig+0x4b8>)
 8002d82:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002d86:	f003 0302 	and.w	r3, r3, #2
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d1ea      	bne.n	8002d64 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f003 0304 	and.w	r3, r3, #4
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	f000 80a6 	beq.w	8002ee8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002da0:	4b84      	ldr	r3, [pc, #528]	@ (8002fb4 <HAL_RCC_OscConfig+0x4b8>)
 8002da2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002da4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d101      	bne.n	8002db0 <HAL_RCC_OscConfig+0x2b4>
 8002dac:	2301      	movs	r3, #1
 8002dae:	e000      	b.n	8002db2 <HAL_RCC_OscConfig+0x2b6>
 8002db0:	2300      	movs	r3, #0
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d00d      	beq.n	8002dd2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002db6:	4b7f      	ldr	r3, [pc, #508]	@ (8002fb4 <HAL_RCC_OscConfig+0x4b8>)
 8002db8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dba:	4a7e      	ldr	r2, [pc, #504]	@ (8002fb4 <HAL_RCC_OscConfig+0x4b8>)
 8002dbc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002dc0:	6593      	str	r3, [r2, #88]	@ 0x58
 8002dc2:	4b7c      	ldr	r3, [pc, #496]	@ (8002fb4 <HAL_RCC_OscConfig+0x4b8>)
 8002dc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dc6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002dca:	60fb      	str	r3, [r7, #12]
 8002dcc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002dd2:	4b79      	ldr	r3, [pc, #484]	@ (8002fb8 <HAL_RCC_OscConfig+0x4bc>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d118      	bne.n	8002e10 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002dde:	4b76      	ldr	r3, [pc, #472]	@ (8002fb8 <HAL_RCC_OscConfig+0x4bc>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a75      	ldr	r2, [pc, #468]	@ (8002fb8 <HAL_RCC_OscConfig+0x4bc>)
 8002de4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002de8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002dea:	f7fe fff7 	bl	8001ddc <HAL_GetTick>
 8002dee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002df0:	e008      	b.n	8002e04 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002df2:	f7fe fff3 	bl	8001ddc <HAL_GetTick>
 8002df6:	4602      	mov	r2, r0
 8002df8:	693b      	ldr	r3, [r7, #16]
 8002dfa:	1ad3      	subs	r3, r2, r3
 8002dfc:	2b02      	cmp	r3, #2
 8002dfe:	d901      	bls.n	8002e04 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002e00:	2303      	movs	r3, #3
 8002e02:	e183      	b.n	800310c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e04:	4b6c      	ldr	r3, [pc, #432]	@ (8002fb8 <HAL_RCC_OscConfig+0x4bc>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d0f0      	beq.n	8002df2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	689b      	ldr	r3, [r3, #8]
 8002e14:	2b01      	cmp	r3, #1
 8002e16:	d108      	bne.n	8002e2a <HAL_RCC_OscConfig+0x32e>
 8002e18:	4b66      	ldr	r3, [pc, #408]	@ (8002fb4 <HAL_RCC_OscConfig+0x4b8>)
 8002e1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e1e:	4a65      	ldr	r2, [pc, #404]	@ (8002fb4 <HAL_RCC_OscConfig+0x4b8>)
 8002e20:	f043 0301 	orr.w	r3, r3, #1
 8002e24:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002e28:	e024      	b.n	8002e74 <HAL_RCC_OscConfig+0x378>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	689b      	ldr	r3, [r3, #8]
 8002e2e:	2b05      	cmp	r3, #5
 8002e30:	d110      	bne.n	8002e54 <HAL_RCC_OscConfig+0x358>
 8002e32:	4b60      	ldr	r3, [pc, #384]	@ (8002fb4 <HAL_RCC_OscConfig+0x4b8>)
 8002e34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e38:	4a5e      	ldr	r2, [pc, #376]	@ (8002fb4 <HAL_RCC_OscConfig+0x4b8>)
 8002e3a:	f043 0304 	orr.w	r3, r3, #4
 8002e3e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002e42:	4b5c      	ldr	r3, [pc, #368]	@ (8002fb4 <HAL_RCC_OscConfig+0x4b8>)
 8002e44:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e48:	4a5a      	ldr	r2, [pc, #360]	@ (8002fb4 <HAL_RCC_OscConfig+0x4b8>)
 8002e4a:	f043 0301 	orr.w	r3, r3, #1
 8002e4e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002e52:	e00f      	b.n	8002e74 <HAL_RCC_OscConfig+0x378>
 8002e54:	4b57      	ldr	r3, [pc, #348]	@ (8002fb4 <HAL_RCC_OscConfig+0x4b8>)
 8002e56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e5a:	4a56      	ldr	r2, [pc, #344]	@ (8002fb4 <HAL_RCC_OscConfig+0x4b8>)
 8002e5c:	f023 0301 	bic.w	r3, r3, #1
 8002e60:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002e64:	4b53      	ldr	r3, [pc, #332]	@ (8002fb4 <HAL_RCC_OscConfig+0x4b8>)
 8002e66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e6a:	4a52      	ldr	r2, [pc, #328]	@ (8002fb4 <HAL_RCC_OscConfig+0x4b8>)
 8002e6c:	f023 0304 	bic.w	r3, r3, #4
 8002e70:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	689b      	ldr	r3, [r3, #8]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d016      	beq.n	8002eaa <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e7c:	f7fe ffae 	bl	8001ddc <HAL_GetTick>
 8002e80:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e82:	e00a      	b.n	8002e9a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e84:	f7fe ffaa 	bl	8001ddc <HAL_GetTick>
 8002e88:	4602      	mov	r2, r0
 8002e8a:	693b      	ldr	r3, [r7, #16]
 8002e8c:	1ad3      	subs	r3, r2, r3
 8002e8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d901      	bls.n	8002e9a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002e96:	2303      	movs	r3, #3
 8002e98:	e138      	b.n	800310c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e9a:	4b46      	ldr	r3, [pc, #280]	@ (8002fb4 <HAL_RCC_OscConfig+0x4b8>)
 8002e9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ea0:	f003 0302 	and.w	r3, r3, #2
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d0ed      	beq.n	8002e84 <HAL_RCC_OscConfig+0x388>
 8002ea8:	e015      	b.n	8002ed6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002eaa:	f7fe ff97 	bl	8001ddc <HAL_GetTick>
 8002eae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002eb0:	e00a      	b.n	8002ec8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002eb2:	f7fe ff93 	bl	8001ddc <HAL_GetTick>
 8002eb6:	4602      	mov	r2, r0
 8002eb8:	693b      	ldr	r3, [r7, #16]
 8002eba:	1ad3      	subs	r3, r2, r3
 8002ebc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d901      	bls.n	8002ec8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002ec4:	2303      	movs	r3, #3
 8002ec6:	e121      	b.n	800310c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002ec8:	4b3a      	ldr	r3, [pc, #232]	@ (8002fb4 <HAL_RCC_OscConfig+0x4b8>)
 8002eca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ece:	f003 0302 	and.w	r3, r3, #2
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d1ed      	bne.n	8002eb2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002ed6:	7ffb      	ldrb	r3, [r7, #31]
 8002ed8:	2b01      	cmp	r3, #1
 8002eda:	d105      	bne.n	8002ee8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002edc:	4b35      	ldr	r3, [pc, #212]	@ (8002fb4 <HAL_RCC_OscConfig+0x4b8>)
 8002ede:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ee0:	4a34      	ldr	r2, [pc, #208]	@ (8002fb4 <HAL_RCC_OscConfig+0x4b8>)
 8002ee2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002ee6:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f003 0320 	and.w	r3, r3, #32
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d03c      	beq.n	8002f6e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	699b      	ldr	r3, [r3, #24]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d01c      	beq.n	8002f36 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002efc:	4b2d      	ldr	r3, [pc, #180]	@ (8002fb4 <HAL_RCC_OscConfig+0x4b8>)
 8002efe:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002f02:	4a2c      	ldr	r2, [pc, #176]	@ (8002fb4 <HAL_RCC_OscConfig+0x4b8>)
 8002f04:	f043 0301 	orr.w	r3, r3, #1
 8002f08:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f0c:	f7fe ff66 	bl	8001ddc <HAL_GetTick>
 8002f10:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002f12:	e008      	b.n	8002f26 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002f14:	f7fe ff62 	bl	8001ddc <HAL_GetTick>
 8002f18:	4602      	mov	r2, r0
 8002f1a:	693b      	ldr	r3, [r7, #16]
 8002f1c:	1ad3      	subs	r3, r2, r3
 8002f1e:	2b02      	cmp	r3, #2
 8002f20:	d901      	bls.n	8002f26 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002f22:	2303      	movs	r3, #3
 8002f24:	e0f2      	b.n	800310c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002f26:	4b23      	ldr	r3, [pc, #140]	@ (8002fb4 <HAL_RCC_OscConfig+0x4b8>)
 8002f28:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002f2c:	f003 0302 	and.w	r3, r3, #2
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d0ef      	beq.n	8002f14 <HAL_RCC_OscConfig+0x418>
 8002f34:	e01b      	b.n	8002f6e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002f36:	4b1f      	ldr	r3, [pc, #124]	@ (8002fb4 <HAL_RCC_OscConfig+0x4b8>)
 8002f38:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002f3c:	4a1d      	ldr	r2, [pc, #116]	@ (8002fb4 <HAL_RCC_OscConfig+0x4b8>)
 8002f3e:	f023 0301 	bic.w	r3, r3, #1
 8002f42:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f46:	f7fe ff49 	bl	8001ddc <HAL_GetTick>
 8002f4a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002f4c:	e008      	b.n	8002f60 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002f4e:	f7fe ff45 	bl	8001ddc <HAL_GetTick>
 8002f52:	4602      	mov	r2, r0
 8002f54:	693b      	ldr	r3, [r7, #16]
 8002f56:	1ad3      	subs	r3, r2, r3
 8002f58:	2b02      	cmp	r3, #2
 8002f5a:	d901      	bls.n	8002f60 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002f5c:	2303      	movs	r3, #3
 8002f5e:	e0d5      	b.n	800310c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002f60:	4b14      	ldr	r3, [pc, #80]	@ (8002fb4 <HAL_RCC_OscConfig+0x4b8>)
 8002f62:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002f66:	f003 0302 	and.w	r3, r3, #2
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d1ef      	bne.n	8002f4e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	69db      	ldr	r3, [r3, #28]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	f000 80c9 	beq.w	800310a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002f78:	4b0e      	ldr	r3, [pc, #56]	@ (8002fb4 <HAL_RCC_OscConfig+0x4b8>)
 8002f7a:	689b      	ldr	r3, [r3, #8]
 8002f7c:	f003 030c 	and.w	r3, r3, #12
 8002f80:	2b0c      	cmp	r3, #12
 8002f82:	f000 8083 	beq.w	800308c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	69db      	ldr	r3, [r3, #28]
 8002f8a:	2b02      	cmp	r3, #2
 8002f8c:	d15e      	bne.n	800304c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f8e:	4b09      	ldr	r3, [pc, #36]	@ (8002fb4 <HAL_RCC_OscConfig+0x4b8>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a08      	ldr	r2, [pc, #32]	@ (8002fb4 <HAL_RCC_OscConfig+0x4b8>)
 8002f94:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002f98:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f9a:	f7fe ff1f 	bl	8001ddc <HAL_GetTick>
 8002f9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002fa0:	e00c      	b.n	8002fbc <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fa2:	f7fe ff1b 	bl	8001ddc <HAL_GetTick>
 8002fa6:	4602      	mov	r2, r0
 8002fa8:	693b      	ldr	r3, [r7, #16]
 8002faa:	1ad3      	subs	r3, r2, r3
 8002fac:	2b02      	cmp	r3, #2
 8002fae:	d905      	bls.n	8002fbc <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002fb0:	2303      	movs	r3, #3
 8002fb2:	e0ab      	b.n	800310c <HAL_RCC_OscConfig+0x610>
 8002fb4:	40021000 	.word	0x40021000
 8002fb8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002fbc:	4b55      	ldr	r3, [pc, #340]	@ (8003114 <HAL_RCC_OscConfig+0x618>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d1ec      	bne.n	8002fa2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002fc8:	4b52      	ldr	r3, [pc, #328]	@ (8003114 <HAL_RCC_OscConfig+0x618>)
 8002fca:	68da      	ldr	r2, [r3, #12]
 8002fcc:	4b52      	ldr	r3, [pc, #328]	@ (8003118 <HAL_RCC_OscConfig+0x61c>)
 8002fce:	4013      	ands	r3, r2
 8002fd0:	687a      	ldr	r2, [r7, #4]
 8002fd2:	6a11      	ldr	r1, [r2, #32]
 8002fd4:	687a      	ldr	r2, [r7, #4]
 8002fd6:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002fd8:	3a01      	subs	r2, #1
 8002fda:	0112      	lsls	r2, r2, #4
 8002fdc:	4311      	orrs	r1, r2
 8002fde:	687a      	ldr	r2, [r7, #4]
 8002fe0:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8002fe2:	0212      	lsls	r2, r2, #8
 8002fe4:	4311      	orrs	r1, r2
 8002fe6:	687a      	ldr	r2, [r7, #4]
 8002fe8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002fea:	0852      	lsrs	r2, r2, #1
 8002fec:	3a01      	subs	r2, #1
 8002fee:	0552      	lsls	r2, r2, #21
 8002ff0:	4311      	orrs	r1, r2
 8002ff2:	687a      	ldr	r2, [r7, #4]
 8002ff4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002ff6:	0852      	lsrs	r2, r2, #1
 8002ff8:	3a01      	subs	r2, #1
 8002ffa:	0652      	lsls	r2, r2, #25
 8002ffc:	4311      	orrs	r1, r2
 8002ffe:	687a      	ldr	r2, [r7, #4]
 8003000:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003002:	06d2      	lsls	r2, r2, #27
 8003004:	430a      	orrs	r2, r1
 8003006:	4943      	ldr	r1, [pc, #268]	@ (8003114 <HAL_RCC_OscConfig+0x618>)
 8003008:	4313      	orrs	r3, r2
 800300a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800300c:	4b41      	ldr	r3, [pc, #260]	@ (8003114 <HAL_RCC_OscConfig+0x618>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a40      	ldr	r2, [pc, #256]	@ (8003114 <HAL_RCC_OscConfig+0x618>)
 8003012:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003016:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003018:	4b3e      	ldr	r3, [pc, #248]	@ (8003114 <HAL_RCC_OscConfig+0x618>)
 800301a:	68db      	ldr	r3, [r3, #12]
 800301c:	4a3d      	ldr	r2, [pc, #244]	@ (8003114 <HAL_RCC_OscConfig+0x618>)
 800301e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003022:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003024:	f7fe feda 	bl	8001ddc <HAL_GetTick>
 8003028:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800302a:	e008      	b.n	800303e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800302c:	f7fe fed6 	bl	8001ddc <HAL_GetTick>
 8003030:	4602      	mov	r2, r0
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	1ad3      	subs	r3, r2, r3
 8003036:	2b02      	cmp	r3, #2
 8003038:	d901      	bls.n	800303e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800303a:	2303      	movs	r3, #3
 800303c:	e066      	b.n	800310c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800303e:	4b35      	ldr	r3, [pc, #212]	@ (8003114 <HAL_RCC_OscConfig+0x618>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003046:	2b00      	cmp	r3, #0
 8003048:	d0f0      	beq.n	800302c <HAL_RCC_OscConfig+0x530>
 800304a:	e05e      	b.n	800310a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800304c:	4b31      	ldr	r3, [pc, #196]	@ (8003114 <HAL_RCC_OscConfig+0x618>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a30      	ldr	r2, [pc, #192]	@ (8003114 <HAL_RCC_OscConfig+0x618>)
 8003052:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003056:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003058:	f7fe fec0 	bl	8001ddc <HAL_GetTick>
 800305c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800305e:	e008      	b.n	8003072 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003060:	f7fe febc 	bl	8001ddc <HAL_GetTick>
 8003064:	4602      	mov	r2, r0
 8003066:	693b      	ldr	r3, [r7, #16]
 8003068:	1ad3      	subs	r3, r2, r3
 800306a:	2b02      	cmp	r3, #2
 800306c:	d901      	bls.n	8003072 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800306e:	2303      	movs	r3, #3
 8003070:	e04c      	b.n	800310c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003072:	4b28      	ldr	r3, [pc, #160]	@ (8003114 <HAL_RCC_OscConfig+0x618>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800307a:	2b00      	cmp	r3, #0
 800307c:	d1f0      	bne.n	8003060 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800307e:	4b25      	ldr	r3, [pc, #148]	@ (8003114 <HAL_RCC_OscConfig+0x618>)
 8003080:	68da      	ldr	r2, [r3, #12]
 8003082:	4924      	ldr	r1, [pc, #144]	@ (8003114 <HAL_RCC_OscConfig+0x618>)
 8003084:	4b25      	ldr	r3, [pc, #148]	@ (800311c <HAL_RCC_OscConfig+0x620>)
 8003086:	4013      	ands	r3, r2
 8003088:	60cb      	str	r3, [r1, #12]
 800308a:	e03e      	b.n	800310a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	69db      	ldr	r3, [r3, #28]
 8003090:	2b01      	cmp	r3, #1
 8003092:	d101      	bne.n	8003098 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8003094:	2301      	movs	r3, #1
 8003096:	e039      	b.n	800310c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003098:	4b1e      	ldr	r3, [pc, #120]	@ (8003114 <HAL_RCC_OscConfig+0x618>)
 800309a:	68db      	ldr	r3, [r3, #12]
 800309c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800309e:	697b      	ldr	r3, [r7, #20]
 80030a0:	f003 0203 	and.w	r2, r3, #3
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6a1b      	ldr	r3, [r3, #32]
 80030a8:	429a      	cmp	r2, r3
 80030aa:	d12c      	bne.n	8003106 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80030ac:	697b      	ldr	r3, [r7, #20]
 80030ae:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030b6:	3b01      	subs	r3, #1
 80030b8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030ba:	429a      	cmp	r2, r3
 80030bc:	d123      	bne.n	8003106 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80030be:	697b      	ldr	r3, [r7, #20]
 80030c0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030c8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80030ca:	429a      	cmp	r2, r3
 80030cc:	d11b      	bne.n	8003106 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030d8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80030da:	429a      	cmp	r2, r3
 80030dc:	d113      	bne.n	8003106 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80030de:	697b      	ldr	r3, [r7, #20]
 80030e0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030e8:	085b      	lsrs	r3, r3, #1
 80030ea:	3b01      	subs	r3, #1
 80030ec:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80030ee:	429a      	cmp	r2, r3
 80030f0:	d109      	bne.n	8003106 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030fc:	085b      	lsrs	r3, r3, #1
 80030fe:	3b01      	subs	r3, #1
 8003100:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003102:	429a      	cmp	r2, r3
 8003104:	d001      	beq.n	800310a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8003106:	2301      	movs	r3, #1
 8003108:	e000      	b.n	800310c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800310a:	2300      	movs	r3, #0
}
 800310c:	4618      	mov	r0, r3
 800310e:	3720      	adds	r7, #32
 8003110:	46bd      	mov	sp, r7
 8003112:	bd80      	pop	{r7, pc}
 8003114:	40021000 	.word	0x40021000
 8003118:	019f800c 	.word	0x019f800c
 800311c:	feeefffc 	.word	0xfeeefffc

08003120 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b086      	sub	sp, #24
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
 8003128:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800312a:	2300      	movs	r3, #0
 800312c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d101      	bne.n	8003138 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003134:	2301      	movs	r3, #1
 8003136:	e11e      	b.n	8003376 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003138:	4b91      	ldr	r3, [pc, #580]	@ (8003380 <HAL_RCC_ClockConfig+0x260>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f003 030f 	and.w	r3, r3, #15
 8003140:	683a      	ldr	r2, [r7, #0]
 8003142:	429a      	cmp	r2, r3
 8003144:	d910      	bls.n	8003168 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003146:	4b8e      	ldr	r3, [pc, #568]	@ (8003380 <HAL_RCC_ClockConfig+0x260>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f023 020f 	bic.w	r2, r3, #15
 800314e:	498c      	ldr	r1, [pc, #560]	@ (8003380 <HAL_RCC_ClockConfig+0x260>)
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	4313      	orrs	r3, r2
 8003154:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003156:	4b8a      	ldr	r3, [pc, #552]	@ (8003380 <HAL_RCC_ClockConfig+0x260>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f003 030f 	and.w	r3, r3, #15
 800315e:	683a      	ldr	r2, [r7, #0]
 8003160:	429a      	cmp	r2, r3
 8003162:	d001      	beq.n	8003168 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003164:	2301      	movs	r3, #1
 8003166:	e106      	b.n	8003376 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f003 0301 	and.w	r3, r3, #1
 8003170:	2b00      	cmp	r3, #0
 8003172:	d073      	beq.n	800325c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	2b03      	cmp	r3, #3
 800317a:	d129      	bne.n	80031d0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800317c:	4b81      	ldr	r3, [pc, #516]	@ (8003384 <HAL_RCC_ClockConfig+0x264>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003184:	2b00      	cmp	r3, #0
 8003186:	d101      	bne.n	800318c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003188:	2301      	movs	r3, #1
 800318a:	e0f4      	b.n	8003376 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800318c:	f000 f99e 	bl	80034cc <RCC_GetSysClockFreqFromPLLSource>
 8003190:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003192:	693b      	ldr	r3, [r7, #16]
 8003194:	4a7c      	ldr	r2, [pc, #496]	@ (8003388 <HAL_RCC_ClockConfig+0x268>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d93f      	bls.n	800321a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800319a:	4b7a      	ldr	r3, [pc, #488]	@ (8003384 <HAL_RCC_ClockConfig+0x264>)
 800319c:	689b      	ldr	r3, [r3, #8]
 800319e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d009      	beq.n	80031ba <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d033      	beq.n	800321a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d12f      	bne.n	800321a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80031ba:	4b72      	ldr	r3, [pc, #456]	@ (8003384 <HAL_RCC_ClockConfig+0x264>)
 80031bc:	689b      	ldr	r3, [r3, #8]
 80031be:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80031c2:	4a70      	ldr	r2, [pc, #448]	@ (8003384 <HAL_RCC_ClockConfig+0x264>)
 80031c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80031c8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80031ca:	2380      	movs	r3, #128	@ 0x80
 80031cc:	617b      	str	r3, [r7, #20]
 80031ce:	e024      	b.n	800321a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	2b02      	cmp	r3, #2
 80031d6:	d107      	bne.n	80031e8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80031d8:	4b6a      	ldr	r3, [pc, #424]	@ (8003384 <HAL_RCC_ClockConfig+0x264>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d109      	bne.n	80031f8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	e0c6      	b.n	8003376 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80031e8:	4b66      	ldr	r3, [pc, #408]	@ (8003384 <HAL_RCC_ClockConfig+0x264>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d101      	bne.n	80031f8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80031f4:	2301      	movs	r3, #1
 80031f6:	e0be      	b.n	8003376 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80031f8:	f000 f8ce 	bl	8003398 <HAL_RCC_GetSysClockFreq>
 80031fc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	4a61      	ldr	r2, [pc, #388]	@ (8003388 <HAL_RCC_ClockConfig+0x268>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d909      	bls.n	800321a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003206:	4b5f      	ldr	r3, [pc, #380]	@ (8003384 <HAL_RCC_ClockConfig+0x264>)
 8003208:	689b      	ldr	r3, [r3, #8]
 800320a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800320e:	4a5d      	ldr	r2, [pc, #372]	@ (8003384 <HAL_RCC_ClockConfig+0x264>)
 8003210:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003214:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003216:	2380      	movs	r3, #128	@ 0x80
 8003218:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800321a:	4b5a      	ldr	r3, [pc, #360]	@ (8003384 <HAL_RCC_ClockConfig+0x264>)
 800321c:	689b      	ldr	r3, [r3, #8]
 800321e:	f023 0203 	bic.w	r2, r3, #3
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	4957      	ldr	r1, [pc, #348]	@ (8003384 <HAL_RCC_ClockConfig+0x264>)
 8003228:	4313      	orrs	r3, r2
 800322a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800322c:	f7fe fdd6 	bl	8001ddc <HAL_GetTick>
 8003230:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003232:	e00a      	b.n	800324a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003234:	f7fe fdd2 	bl	8001ddc <HAL_GetTick>
 8003238:	4602      	mov	r2, r0
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	1ad3      	subs	r3, r2, r3
 800323e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003242:	4293      	cmp	r3, r2
 8003244:	d901      	bls.n	800324a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003246:	2303      	movs	r3, #3
 8003248:	e095      	b.n	8003376 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800324a:	4b4e      	ldr	r3, [pc, #312]	@ (8003384 <HAL_RCC_ClockConfig+0x264>)
 800324c:	689b      	ldr	r3, [r3, #8]
 800324e:	f003 020c 	and.w	r2, r3, #12
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	009b      	lsls	r3, r3, #2
 8003258:	429a      	cmp	r2, r3
 800325a:	d1eb      	bne.n	8003234 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f003 0302 	and.w	r3, r3, #2
 8003264:	2b00      	cmp	r3, #0
 8003266:	d023      	beq.n	80032b0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f003 0304 	and.w	r3, r3, #4
 8003270:	2b00      	cmp	r3, #0
 8003272:	d005      	beq.n	8003280 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003274:	4b43      	ldr	r3, [pc, #268]	@ (8003384 <HAL_RCC_ClockConfig+0x264>)
 8003276:	689b      	ldr	r3, [r3, #8]
 8003278:	4a42      	ldr	r2, [pc, #264]	@ (8003384 <HAL_RCC_ClockConfig+0x264>)
 800327a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800327e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f003 0308 	and.w	r3, r3, #8
 8003288:	2b00      	cmp	r3, #0
 800328a:	d007      	beq.n	800329c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800328c:	4b3d      	ldr	r3, [pc, #244]	@ (8003384 <HAL_RCC_ClockConfig+0x264>)
 800328e:	689b      	ldr	r3, [r3, #8]
 8003290:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003294:	4a3b      	ldr	r2, [pc, #236]	@ (8003384 <HAL_RCC_ClockConfig+0x264>)
 8003296:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800329a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800329c:	4b39      	ldr	r3, [pc, #228]	@ (8003384 <HAL_RCC_ClockConfig+0x264>)
 800329e:	689b      	ldr	r3, [r3, #8]
 80032a0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	689b      	ldr	r3, [r3, #8]
 80032a8:	4936      	ldr	r1, [pc, #216]	@ (8003384 <HAL_RCC_ClockConfig+0x264>)
 80032aa:	4313      	orrs	r3, r2
 80032ac:	608b      	str	r3, [r1, #8]
 80032ae:	e008      	b.n	80032c2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80032b0:	697b      	ldr	r3, [r7, #20]
 80032b2:	2b80      	cmp	r3, #128	@ 0x80
 80032b4:	d105      	bne.n	80032c2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80032b6:	4b33      	ldr	r3, [pc, #204]	@ (8003384 <HAL_RCC_ClockConfig+0x264>)
 80032b8:	689b      	ldr	r3, [r3, #8]
 80032ba:	4a32      	ldr	r2, [pc, #200]	@ (8003384 <HAL_RCC_ClockConfig+0x264>)
 80032bc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80032c0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80032c2:	4b2f      	ldr	r3, [pc, #188]	@ (8003380 <HAL_RCC_ClockConfig+0x260>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f003 030f 	and.w	r3, r3, #15
 80032ca:	683a      	ldr	r2, [r7, #0]
 80032cc:	429a      	cmp	r2, r3
 80032ce:	d21d      	bcs.n	800330c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032d0:	4b2b      	ldr	r3, [pc, #172]	@ (8003380 <HAL_RCC_ClockConfig+0x260>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f023 020f 	bic.w	r2, r3, #15
 80032d8:	4929      	ldr	r1, [pc, #164]	@ (8003380 <HAL_RCC_ClockConfig+0x260>)
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	4313      	orrs	r3, r2
 80032de:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80032e0:	f7fe fd7c 	bl	8001ddc <HAL_GetTick>
 80032e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032e6:	e00a      	b.n	80032fe <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032e8:	f7fe fd78 	bl	8001ddc <HAL_GetTick>
 80032ec:	4602      	mov	r2, r0
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	1ad3      	subs	r3, r2, r3
 80032f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d901      	bls.n	80032fe <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80032fa:	2303      	movs	r3, #3
 80032fc:	e03b      	b.n	8003376 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032fe:	4b20      	ldr	r3, [pc, #128]	@ (8003380 <HAL_RCC_ClockConfig+0x260>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f003 030f 	and.w	r3, r3, #15
 8003306:	683a      	ldr	r2, [r7, #0]
 8003308:	429a      	cmp	r2, r3
 800330a:	d1ed      	bne.n	80032e8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f003 0304 	and.w	r3, r3, #4
 8003314:	2b00      	cmp	r3, #0
 8003316:	d008      	beq.n	800332a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003318:	4b1a      	ldr	r3, [pc, #104]	@ (8003384 <HAL_RCC_ClockConfig+0x264>)
 800331a:	689b      	ldr	r3, [r3, #8]
 800331c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	68db      	ldr	r3, [r3, #12]
 8003324:	4917      	ldr	r1, [pc, #92]	@ (8003384 <HAL_RCC_ClockConfig+0x264>)
 8003326:	4313      	orrs	r3, r2
 8003328:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f003 0308 	and.w	r3, r3, #8
 8003332:	2b00      	cmp	r3, #0
 8003334:	d009      	beq.n	800334a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003336:	4b13      	ldr	r3, [pc, #76]	@ (8003384 <HAL_RCC_ClockConfig+0x264>)
 8003338:	689b      	ldr	r3, [r3, #8]
 800333a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	691b      	ldr	r3, [r3, #16]
 8003342:	00db      	lsls	r3, r3, #3
 8003344:	490f      	ldr	r1, [pc, #60]	@ (8003384 <HAL_RCC_ClockConfig+0x264>)
 8003346:	4313      	orrs	r3, r2
 8003348:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800334a:	f000 f825 	bl	8003398 <HAL_RCC_GetSysClockFreq>
 800334e:	4602      	mov	r2, r0
 8003350:	4b0c      	ldr	r3, [pc, #48]	@ (8003384 <HAL_RCC_ClockConfig+0x264>)
 8003352:	689b      	ldr	r3, [r3, #8]
 8003354:	091b      	lsrs	r3, r3, #4
 8003356:	f003 030f 	and.w	r3, r3, #15
 800335a:	490c      	ldr	r1, [pc, #48]	@ (800338c <HAL_RCC_ClockConfig+0x26c>)
 800335c:	5ccb      	ldrb	r3, [r1, r3]
 800335e:	f003 031f 	and.w	r3, r3, #31
 8003362:	fa22 f303 	lsr.w	r3, r2, r3
 8003366:	4a0a      	ldr	r2, [pc, #40]	@ (8003390 <HAL_RCC_ClockConfig+0x270>)
 8003368:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800336a:	4b0a      	ldr	r3, [pc, #40]	@ (8003394 <HAL_RCC_ClockConfig+0x274>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4618      	mov	r0, r3
 8003370:	f7fe fce8 	bl	8001d44 <HAL_InitTick>
 8003374:	4603      	mov	r3, r0
}
 8003376:	4618      	mov	r0, r3
 8003378:	3718      	adds	r7, #24
 800337a:	46bd      	mov	sp, r7
 800337c:	bd80      	pop	{r7, pc}
 800337e:	bf00      	nop
 8003380:	40022000 	.word	0x40022000
 8003384:	40021000 	.word	0x40021000
 8003388:	04c4b400 	.word	0x04c4b400
 800338c:	0800816c 	.word	0x0800816c
 8003390:	20000200 	.word	0x20000200
 8003394:	20000204 	.word	0x20000204

08003398 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003398:	b480      	push	{r7}
 800339a:	b087      	sub	sp, #28
 800339c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800339e:	4b2c      	ldr	r3, [pc, #176]	@ (8003450 <HAL_RCC_GetSysClockFreq+0xb8>)
 80033a0:	689b      	ldr	r3, [r3, #8]
 80033a2:	f003 030c 	and.w	r3, r3, #12
 80033a6:	2b04      	cmp	r3, #4
 80033a8:	d102      	bne.n	80033b0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80033aa:	4b2a      	ldr	r3, [pc, #168]	@ (8003454 <HAL_RCC_GetSysClockFreq+0xbc>)
 80033ac:	613b      	str	r3, [r7, #16]
 80033ae:	e047      	b.n	8003440 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80033b0:	4b27      	ldr	r3, [pc, #156]	@ (8003450 <HAL_RCC_GetSysClockFreq+0xb8>)
 80033b2:	689b      	ldr	r3, [r3, #8]
 80033b4:	f003 030c 	and.w	r3, r3, #12
 80033b8:	2b08      	cmp	r3, #8
 80033ba:	d102      	bne.n	80033c2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80033bc:	4b26      	ldr	r3, [pc, #152]	@ (8003458 <HAL_RCC_GetSysClockFreq+0xc0>)
 80033be:	613b      	str	r3, [r7, #16]
 80033c0:	e03e      	b.n	8003440 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80033c2:	4b23      	ldr	r3, [pc, #140]	@ (8003450 <HAL_RCC_GetSysClockFreq+0xb8>)
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	f003 030c 	and.w	r3, r3, #12
 80033ca:	2b0c      	cmp	r3, #12
 80033cc:	d136      	bne.n	800343c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80033ce:	4b20      	ldr	r3, [pc, #128]	@ (8003450 <HAL_RCC_GetSysClockFreq+0xb8>)
 80033d0:	68db      	ldr	r3, [r3, #12]
 80033d2:	f003 0303 	and.w	r3, r3, #3
 80033d6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80033d8:	4b1d      	ldr	r3, [pc, #116]	@ (8003450 <HAL_RCC_GetSysClockFreq+0xb8>)
 80033da:	68db      	ldr	r3, [r3, #12]
 80033dc:	091b      	lsrs	r3, r3, #4
 80033de:	f003 030f 	and.w	r3, r3, #15
 80033e2:	3301      	adds	r3, #1
 80033e4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	2b03      	cmp	r3, #3
 80033ea:	d10c      	bne.n	8003406 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80033ec:	4a1a      	ldr	r2, [pc, #104]	@ (8003458 <HAL_RCC_GetSysClockFreq+0xc0>)
 80033ee:	68bb      	ldr	r3, [r7, #8]
 80033f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80033f4:	4a16      	ldr	r2, [pc, #88]	@ (8003450 <HAL_RCC_GetSysClockFreq+0xb8>)
 80033f6:	68d2      	ldr	r2, [r2, #12]
 80033f8:	0a12      	lsrs	r2, r2, #8
 80033fa:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80033fe:	fb02 f303 	mul.w	r3, r2, r3
 8003402:	617b      	str	r3, [r7, #20]
      break;
 8003404:	e00c      	b.n	8003420 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003406:	4a13      	ldr	r2, [pc, #76]	@ (8003454 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003408:	68bb      	ldr	r3, [r7, #8]
 800340a:	fbb2 f3f3 	udiv	r3, r2, r3
 800340e:	4a10      	ldr	r2, [pc, #64]	@ (8003450 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003410:	68d2      	ldr	r2, [r2, #12]
 8003412:	0a12      	lsrs	r2, r2, #8
 8003414:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003418:	fb02 f303 	mul.w	r3, r2, r3
 800341c:	617b      	str	r3, [r7, #20]
      break;
 800341e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003420:	4b0b      	ldr	r3, [pc, #44]	@ (8003450 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003422:	68db      	ldr	r3, [r3, #12]
 8003424:	0e5b      	lsrs	r3, r3, #25
 8003426:	f003 0303 	and.w	r3, r3, #3
 800342a:	3301      	adds	r3, #1
 800342c:	005b      	lsls	r3, r3, #1
 800342e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003430:	697a      	ldr	r2, [r7, #20]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	fbb2 f3f3 	udiv	r3, r2, r3
 8003438:	613b      	str	r3, [r7, #16]
 800343a:	e001      	b.n	8003440 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800343c:	2300      	movs	r3, #0
 800343e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003440:	693b      	ldr	r3, [r7, #16]
}
 8003442:	4618      	mov	r0, r3
 8003444:	371c      	adds	r7, #28
 8003446:	46bd      	mov	sp, r7
 8003448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344c:	4770      	bx	lr
 800344e:	bf00      	nop
 8003450:	40021000 	.word	0x40021000
 8003454:	00f42400 	.word	0x00f42400
 8003458:	016e3600 	.word	0x016e3600

0800345c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800345c:	b480      	push	{r7}
 800345e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003460:	4b03      	ldr	r3, [pc, #12]	@ (8003470 <HAL_RCC_GetHCLKFreq+0x14>)
 8003462:	681b      	ldr	r3, [r3, #0]
}
 8003464:	4618      	mov	r0, r3
 8003466:	46bd      	mov	sp, r7
 8003468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346c:	4770      	bx	lr
 800346e:	bf00      	nop
 8003470:	20000200 	.word	0x20000200

08003474 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003478:	f7ff fff0 	bl	800345c <HAL_RCC_GetHCLKFreq>
 800347c:	4602      	mov	r2, r0
 800347e:	4b06      	ldr	r3, [pc, #24]	@ (8003498 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003480:	689b      	ldr	r3, [r3, #8]
 8003482:	0a1b      	lsrs	r3, r3, #8
 8003484:	f003 0307 	and.w	r3, r3, #7
 8003488:	4904      	ldr	r1, [pc, #16]	@ (800349c <HAL_RCC_GetPCLK1Freq+0x28>)
 800348a:	5ccb      	ldrb	r3, [r1, r3]
 800348c:	f003 031f 	and.w	r3, r3, #31
 8003490:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003494:	4618      	mov	r0, r3
 8003496:	bd80      	pop	{r7, pc}
 8003498:	40021000 	.word	0x40021000
 800349c:	0800817c 	.word	0x0800817c

080034a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80034a4:	f7ff ffda 	bl	800345c <HAL_RCC_GetHCLKFreq>
 80034a8:	4602      	mov	r2, r0
 80034aa:	4b06      	ldr	r3, [pc, #24]	@ (80034c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80034ac:	689b      	ldr	r3, [r3, #8]
 80034ae:	0adb      	lsrs	r3, r3, #11
 80034b0:	f003 0307 	and.w	r3, r3, #7
 80034b4:	4904      	ldr	r1, [pc, #16]	@ (80034c8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80034b6:	5ccb      	ldrb	r3, [r1, r3]
 80034b8:	f003 031f 	and.w	r3, r3, #31
 80034bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034c0:	4618      	mov	r0, r3
 80034c2:	bd80      	pop	{r7, pc}
 80034c4:	40021000 	.word	0x40021000
 80034c8:	0800817c 	.word	0x0800817c

080034cc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80034cc:	b480      	push	{r7}
 80034ce:	b087      	sub	sp, #28
 80034d0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80034d2:	4b1e      	ldr	r3, [pc, #120]	@ (800354c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80034d4:	68db      	ldr	r3, [r3, #12]
 80034d6:	f003 0303 	and.w	r3, r3, #3
 80034da:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80034dc:	4b1b      	ldr	r3, [pc, #108]	@ (800354c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80034de:	68db      	ldr	r3, [r3, #12]
 80034e0:	091b      	lsrs	r3, r3, #4
 80034e2:	f003 030f 	and.w	r3, r3, #15
 80034e6:	3301      	adds	r3, #1
 80034e8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80034ea:	693b      	ldr	r3, [r7, #16]
 80034ec:	2b03      	cmp	r3, #3
 80034ee:	d10c      	bne.n	800350a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80034f0:	4a17      	ldr	r2, [pc, #92]	@ (8003550 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80034f8:	4a14      	ldr	r2, [pc, #80]	@ (800354c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80034fa:	68d2      	ldr	r2, [r2, #12]
 80034fc:	0a12      	lsrs	r2, r2, #8
 80034fe:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003502:	fb02 f303 	mul.w	r3, r2, r3
 8003506:	617b      	str	r3, [r7, #20]
    break;
 8003508:	e00c      	b.n	8003524 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800350a:	4a12      	ldr	r2, [pc, #72]	@ (8003554 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003512:	4a0e      	ldr	r2, [pc, #56]	@ (800354c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003514:	68d2      	ldr	r2, [r2, #12]
 8003516:	0a12      	lsrs	r2, r2, #8
 8003518:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800351c:	fb02 f303 	mul.w	r3, r2, r3
 8003520:	617b      	str	r3, [r7, #20]
    break;
 8003522:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003524:	4b09      	ldr	r3, [pc, #36]	@ (800354c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003526:	68db      	ldr	r3, [r3, #12]
 8003528:	0e5b      	lsrs	r3, r3, #25
 800352a:	f003 0303 	and.w	r3, r3, #3
 800352e:	3301      	adds	r3, #1
 8003530:	005b      	lsls	r3, r3, #1
 8003532:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003534:	697a      	ldr	r2, [r7, #20]
 8003536:	68bb      	ldr	r3, [r7, #8]
 8003538:	fbb2 f3f3 	udiv	r3, r2, r3
 800353c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800353e:	687b      	ldr	r3, [r7, #4]
}
 8003540:	4618      	mov	r0, r3
 8003542:	371c      	adds	r7, #28
 8003544:	46bd      	mov	sp, r7
 8003546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354a:	4770      	bx	lr
 800354c:	40021000 	.word	0x40021000
 8003550:	016e3600 	.word	0x016e3600
 8003554:	00f42400 	.word	0x00f42400

08003558 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b086      	sub	sp, #24
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003560:	2300      	movs	r3, #0
 8003562:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003564:	2300      	movs	r3, #0
 8003566:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003570:	2b00      	cmp	r3, #0
 8003572:	f000 8098 	beq.w	80036a6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003576:	2300      	movs	r3, #0
 8003578:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800357a:	4b43      	ldr	r3, [pc, #268]	@ (8003688 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800357c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800357e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003582:	2b00      	cmp	r3, #0
 8003584:	d10d      	bne.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003586:	4b40      	ldr	r3, [pc, #256]	@ (8003688 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003588:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800358a:	4a3f      	ldr	r2, [pc, #252]	@ (8003688 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800358c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003590:	6593      	str	r3, [r2, #88]	@ 0x58
 8003592:	4b3d      	ldr	r3, [pc, #244]	@ (8003688 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003594:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003596:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800359a:	60bb      	str	r3, [r7, #8]
 800359c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800359e:	2301      	movs	r3, #1
 80035a0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80035a2:	4b3a      	ldr	r3, [pc, #232]	@ (800368c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a39      	ldr	r2, [pc, #228]	@ (800368c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80035a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80035ac:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80035ae:	f7fe fc15 	bl	8001ddc <HAL_GetTick>
 80035b2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80035b4:	e009      	b.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035b6:	f7fe fc11 	bl	8001ddc <HAL_GetTick>
 80035ba:	4602      	mov	r2, r0
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	1ad3      	subs	r3, r2, r3
 80035c0:	2b02      	cmp	r3, #2
 80035c2:	d902      	bls.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80035c4:	2303      	movs	r3, #3
 80035c6:	74fb      	strb	r3, [r7, #19]
        break;
 80035c8:	e005      	b.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80035ca:	4b30      	ldr	r3, [pc, #192]	@ (800368c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d0ef      	beq.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80035d6:	7cfb      	ldrb	r3, [r7, #19]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d159      	bne.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80035dc:	4b2a      	ldr	r3, [pc, #168]	@ (8003688 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80035de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80035e6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80035e8:	697b      	ldr	r3, [r7, #20]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d01e      	beq.n	800362c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80035f2:	697a      	ldr	r2, [r7, #20]
 80035f4:	429a      	cmp	r2, r3
 80035f6:	d019      	beq.n	800362c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80035f8:	4b23      	ldr	r3, [pc, #140]	@ (8003688 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80035fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035fe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003602:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003604:	4b20      	ldr	r3, [pc, #128]	@ (8003688 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003606:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800360a:	4a1f      	ldr	r2, [pc, #124]	@ (8003688 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800360c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003610:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003614:	4b1c      	ldr	r3, [pc, #112]	@ (8003688 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003616:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800361a:	4a1b      	ldr	r2, [pc, #108]	@ (8003688 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800361c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003620:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003624:	4a18      	ldr	r2, [pc, #96]	@ (8003688 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003626:	697b      	ldr	r3, [r7, #20]
 8003628:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800362c:	697b      	ldr	r3, [r7, #20]
 800362e:	f003 0301 	and.w	r3, r3, #1
 8003632:	2b00      	cmp	r3, #0
 8003634:	d016      	beq.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003636:	f7fe fbd1 	bl	8001ddc <HAL_GetTick>
 800363a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800363c:	e00b      	b.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800363e:	f7fe fbcd 	bl	8001ddc <HAL_GetTick>
 8003642:	4602      	mov	r2, r0
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	1ad3      	subs	r3, r2, r3
 8003648:	f241 3288 	movw	r2, #5000	@ 0x1388
 800364c:	4293      	cmp	r3, r2
 800364e:	d902      	bls.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003650:	2303      	movs	r3, #3
 8003652:	74fb      	strb	r3, [r7, #19]
            break;
 8003654:	e006      	b.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003656:	4b0c      	ldr	r3, [pc, #48]	@ (8003688 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003658:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800365c:	f003 0302 	and.w	r3, r3, #2
 8003660:	2b00      	cmp	r3, #0
 8003662:	d0ec      	beq.n	800363e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003664:	7cfb      	ldrb	r3, [r7, #19]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d10b      	bne.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800366a:	4b07      	ldr	r3, [pc, #28]	@ (8003688 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800366c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003670:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003678:	4903      	ldr	r1, [pc, #12]	@ (8003688 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800367a:	4313      	orrs	r3, r2
 800367c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003680:	e008      	b.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003682:	7cfb      	ldrb	r3, [r7, #19]
 8003684:	74bb      	strb	r3, [r7, #18]
 8003686:	e005      	b.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003688:	40021000 	.word	0x40021000
 800368c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003690:	7cfb      	ldrb	r3, [r7, #19]
 8003692:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003694:	7c7b      	ldrb	r3, [r7, #17]
 8003696:	2b01      	cmp	r3, #1
 8003698:	d105      	bne.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800369a:	4ba7      	ldr	r3, [pc, #668]	@ (8003938 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800369c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800369e:	4aa6      	ldr	r2, [pc, #664]	@ (8003938 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80036a0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80036a4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f003 0301 	and.w	r3, r3, #1
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d00a      	beq.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80036b2:	4ba1      	ldr	r3, [pc, #644]	@ (8003938 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80036b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036b8:	f023 0203 	bic.w	r2, r3, #3
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	499d      	ldr	r1, [pc, #628]	@ (8003938 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80036c2:	4313      	orrs	r3, r2
 80036c4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f003 0302 	and.w	r3, r3, #2
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d00a      	beq.n	80036ea <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80036d4:	4b98      	ldr	r3, [pc, #608]	@ (8003938 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80036d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036da:	f023 020c 	bic.w	r2, r3, #12
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	689b      	ldr	r3, [r3, #8]
 80036e2:	4995      	ldr	r1, [pc, #596]	@ (8003938 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80036e4:	4313      	orrs	r3, r2
 80036e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f003 0304 	and.w	r3, r3, #4
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d00a      	beq.n	800370c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80036f6:	4b90      	ldr	r3, [pc, #576]	@ (8003938 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80036f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036fc:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	68db      	ldr	r3, [r3, #12]
 8003704:	498c      	ldr	r1, [pc, #560]	@ (8003938 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003706:	4313      	orrs	r3, r2
 8003708:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f003 0308 	and.w	r3, r3, #8
 8003714:	2b00      	cmp	r3, #0
 8003716:	d00a      	beq.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003718:	4b87      	ldr	r3, [pc, #540]	@ (8003938 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800371a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800371e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	691b      	ldr	r3, [r3, #16]
 8003726:	4984      	ldr	r1, [pc, #528]	@ (8003938 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003728:	4313      	orrs	r3, r2
 800372a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f003 0310 	and.w	r3, r3, #16
 8003736:	2b00      	cmp	r3, #0
 8003738:	d00a      	beq.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800373a:	4b7f      	ldr	r3, [pc, #508]	@ (8003938 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800373c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003740:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	695b      	ldr	r3, [r3, #20]
 8003748:	497b      	ldr	r1, [pc, #492]	@ (8003938 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800374a:	4313      	orrs	r3, r2
 800374c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f003 0320 	and.w	r3, r3, #32
 8003758:	2b00      	cmp	r3, #0
 800375a:	d00a      	beq.n	8003772 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800375c:	4b76      	ldr	r3, [pc, #472]	@ (8003938 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800375e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003762:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	699b      	ldr	r3, [r3, #24]
 800376a:	4973      	ldr	r1, [pc, #460]	@ (8003938 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800376c:	4313      	orrs	r3, r2
 800376e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800377a:	2b00      	cmp	r3, #0
 800377c:	d00a      	beq.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800377e:	4b6e      	ldr	r3, [pc, #440]	@ (8003938 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003780:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003784:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	69db      	ldr	r3, [r3, #28]
 800378c:	496a      	ldr	r1, [pc, #424]	@ (8003938 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800378e:	4313      	orrs	r3, r2
 8003790:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800379c:	2b00      	cmp	r3, #0
 800379e:	d00a      	beq.n	80037b6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80037a0:	4b65      	ldr	r3, [pc, #404]	@ (8003938 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80037a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037a6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6a1b      	ldr	r3, [r3, #32]
 80037ae:	4962      	ldr	r1, [pc, #392]	@ (8003938 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80037b0:	4313      	orrs	r3, r2
 80037b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d00a      	beq.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80037c2:	4b5d      	ldr	r3, [pc, #372]	@ (8003938 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80037c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037c8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037d0:	4959      	ldr	r1, [pc, #356]	@ (8003938 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80037d2:	4313      	orrs	r3, r2
 80037d4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d00a      	beq.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80037e4:	4b54      	ldr	r3, [pc, #336]	@ (8003938 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80037e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80037ea:	f023 0203 	bic.w	r2, r3, #3
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037f2:	4951      	ldr	r1, [pc, #324]	@ (8003938 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80037f4:	4313      	orrs	r3, r2
 80037f6:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003802:	2b00      	cmp	r3, #0
 8003804:	d00a      	beq.n	800381c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003806:	4b4c      	ldr	r3, [pc, #304]	@ (8003938 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003808:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800380c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003814:	4948      	ldr	r1, [pc, #288]	@ (8003938 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003816:	4313      	orrs	r3, r2
 8003818:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003824:	2b00      	cmp	r3, #0
 8003826:	d015      	beq.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003828:	4b43      	ldr	r3, [pc, #268]	@ (8003938 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800382a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800382e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003836:	4940      	ldr	r1, [pc, #256]	@ (8003938 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003838:	4313      	orrs	r3, r2
 800383a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003842:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003846:	d105      	bne.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003848:	4b3b      	ldr	r3, [pc, #236]	@ (8003938 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800384a:	68db      	ldr	r3, [r3, #12]
 800384c:	4a3a      	ldr	r2, [pc, #232]	@ (8003938 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800384e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003852:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800385c:	2b00      	cmp	r3, #0
 800385e:	d015      	beq.n	800388c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003860:	4b35      	ldr	r3, [pc, #212]	@ (8003938 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003862:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003866:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800386e:	4932      	ldr	r1, [pc, #200]	@ (8003938 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003870:	4313      	orrs	r3, r2
 8003872:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800387a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800387e:	d105      	bne.n	800388c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003880:	4b2d      	ldr	r3, [pc, #180]	@ (8003938 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003882:	68db      	ldr	r3, [r3, #12]
 8003884:	4a2c      	ldr	r2, [pc, #176]	@ (8003938 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003886:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800388a:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003894:	2b00      	cmp	r3, #0
 8003896:	d015      	beq.n	80038c4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003898:	4b27      	ldr	r3, [pc, #156]	@ (8003938 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800389a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800389e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038a6:	4924      	ldr	r1, [pc, #144]	@ (8003938 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038a8:	4313      	orrs	r3, r2
 80038aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038b2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80038b6:	d105      	bne.n	80038c4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80038b8:	4b1f      	ldr	r3, [pc, #124]	@ (8003938 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038ba:	68db      	ldr	r3, [r3, #12]
 80038bc:	4a1e      	ldr	r2, [pc, #120]	@ (8003938 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038be:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80038c2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d015      	beq.n	80038fc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80038d0:	4b19      	ldr	r3, [pc, #100]	@ (8003938 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038d6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038de:	4916      	ldr	r1, [pc, #88]	@ (8003938 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038e0:	4313      	orrs	r3, r2
 80038e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038ea:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80038ee:	d105      	bne.n	80038fc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80038f0:	4b11      	ldr	r3, [pc, #68]	@ (8003938 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038f2:	68db      	ldr	r3, [r3, #12]
 80038f4:	4a10      	ldr	r2, [pc, #64]	@ (8003938 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038f6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80038fa:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003904:	2b00      	cmp	r3, #0
 8003906:	d019      	beq.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003908:	4b0b      	ldr	r3, [pc, #44]	@ (8003938 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800390a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800390e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003916:	4908      	ldr	r1, [pc, #32]	@ (8003938 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003918:	4313      	orrs	r3, r2
 800391a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003922:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003926:	d109      	bne.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003928:	4b03      	ldr	r3, [pc, #12]	@ (8003938 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800392a:	68db      	ldr	r3, [r3, #12]
 800392c:	4a02      	ldr	r2, [pc, #8]	@ (8003938 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800392e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003932:	60d3      	str	r3, [r2, #12]
 8003934:	e002      	b.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8003936:	bf00      	nop
 8003938:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003944:	2b00      	cmp	r3, #0
 8003946:	d015      	beq.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003948:	4b29      	ldr	r3, [pc, #164]	@ (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800394a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800394e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003956:	4926      	ldr	r1, [pc, #152]	@ (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003958:	4313      	orrs	r3, r2
 800395a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003962:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003966:	d105      	bne.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003968:	4b21      	ldr	r3, [pc, #132]	@ (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800396a:	68db      	ldr	r3, [r3, #12]
 800396c:	4a20      	ldr	r2, [pc, #128]	@ (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800396e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003972:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800397c:	2b00      	cmp	r3, #0
 800397e:	d015      	beq.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8003980:	4b1b      	ldr	r3, [pc, #108]	@ (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003982:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003986:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800398e:	4918      	ldr	r1, [pc, #96]	@ (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003990:	4313      	orrs	r3, r2
 8003992:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800399a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800399e:	d105      	bne.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80039a0:	4b13      	ldr	r3, [pc, #76]	@ (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80039a2:	68db      	ldr	r3, [r3, #12]
 80039a4:	4a12      	ldr	r2, [pc, #72]	@ (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80039a6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80039aa:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d015      	beq.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80039b8:	4b0d      	ldr	r3, [pc, #52]	@ (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80039ba:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80039be:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039c6:	490a      	ldr	r1, [pc, #40]	@ (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80039c8:	4313      	orrs	r3, r2
 80039ca:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039d2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80039d6:	d105      	bne.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80039d8:	4b05      	ldr	r3, [pc, #20]	@ (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80039da:	68db      	ldr	r3, [r3, #12]
 80039dc:	4a04      	ldr	r2, [pc, #16]	@ (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80039de:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80039e2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80039e4:	7cbb      	ldrb	r3, [r7, #18]
}
 80039e6:	4618      	mov	r0, r3
 80039e8:	3718      	adds	r7, #24
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd80      	pop	{r7, pc}
 80039ee:	bf00      	nop
 80039f0:	40021000 	.word	0x40021000

080039f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b082      	sub	sp, #8
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d101      	bne.n	8003a06 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003a02:	2301      	movs	r3, #1
 8003a04:	e054      	b.n	8003ab0 <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a0c:	b2db      	uxtb	r3, r3
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d111      	bne.n	8003a36 <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2200      	movs	r2, #0
 8003a16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8003a1a:	6878      	ldr	r0, [r7, #4]
 8003a1c:	f001 fd1a 	bl	8005454 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d102      	bne.n	8003a2e <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	4a23      	ldr	r2, [pc, #140]	@ (8003ab8 <HAL_TIM_Base_Init+0xc4>)
 8003a2c:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a32:	6878      	ldr	r0, [r7, #4]
 8003a34:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2202      	movs	r2, #2
 8003a3a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681a      	ldr	r2, [r3, #0]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	3304      	adds	r3, #4
 8003a46:	4619      	mov	r1, r3
 8003a48:	4610      	mov	r0, r2
 8003a4a:	f001 f863 	bl	8004b14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2201      	movs	r2, #1
 8003a52:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2201      	movs	r2, #1
 8003a5a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2201      	movs	r2, #1
 8003a62:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2201      	movs	r2, #1
 8003a6a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2201      	movs	r2, #1
 8003a72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2201      	movs	r2, #1
 8003a7a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2201      	movs	r2, #1
 8003a82:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2201      	movs	r2, #1
 8003a8a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2201      	movs	r2, #1
 8003a92:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2201      	movs	r2, #1
 8003a9a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2201      	movs	r2, #1
 8003aa2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2201      	movs	r2, #1
 8003aaa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003aae:	2300      	movs	r3, #0
}
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	3708      	adds	r7, #8
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bd80      	pop	{r7, pc}
 8003ab8:	08001a05 	.word	0x08001a05

08003abc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003abc:	b480      	push	{r7}
 8003abe:	b085      	sub	sp, #20
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003aca:	b2db      	uxtb	r3, r3
 8003acc:	2b01      	cmp	r3, #1
 8003ace:	d001      	beq.n	8003ad4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	e054      	b.n	8003b7e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2202      	movs	r2, #2
 8003ad8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	68da      	ldr	r2, [r3, #12]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f042 0201 	orr.w	r2, r2, #1
 8003aea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a26      	ldr	r2, [pc, #152]	@ (8003b8c <HAL_TIM_Base_Start_IT+0xd0>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d022      	beq.n	8003b3c <HAL_TIM_Base_Start_IT+0x80>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003afe:	d01d      	beq.n	8003b3c <HAL_TIM_Base_Start_IT+0x80>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a22      	ldr	r2, [pc, #136]	@ (8003b90 <HAL_TIM_Base_Start_IT+0xd4>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d018      	beq.n	8003b3c <HAL_TIM_Base_Start_IT+0x80>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a21      	ldr	r2, [pc, #132]	@ (8003b94 <HAL_TIM_Base_Start_IT+0xd8>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d013      	beq.n	8003b3c <HAL_TIM_Base_Start_IT+0x80>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a1f      	ldr	r2, [pc, #124]	@ (8003b98 <HAL_TIM_Base_Start_IT+0xdc>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d00e      	beq.n	8003b3c <HAL_TIM_Base_Start_IT+0x80>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a1e      	ldr	r2, [pc, #120]	@ (8003b9c <HAL_TIM_Base_Start_IT+0xe0>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d009      	beq.n	8003b3c <HAL_TIM_Base_Start_IT+0x80>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a1c      	ldr	r2, [pc, #112]	@ (8003ba0 <HAL_TIM_Base_Start_IT+0xe4>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d004      	beq.n	8003b3c <HAL_TIM_Base_Start_IT+0x80>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a1b      	ldr	r2, [pc, #108]	@ (8003ba4 <HAL_TIM_Base_Start_IT+0xe8>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d115      	bne.n	8003b68 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	689a      	ldr	r2, [r3, #8]
 8003b42:	4b19      	ldr	r3, [pc, #100]	@ (8003ba8 <HAL_TIM_Base_Start_IT+0xec>)
 8003b44:	4013      	ands	r3, r2
 8003b46:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	2b06      	cmp	r3, #6
 8003b4c:	d015      	beq.n	8003b7a <HAL_TIM_Base_Start_IT+0xbe>
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b54:	d011      	beq.n	8003b7a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	681a      	ldr	r2, [r3, #0]
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f042 0201 	orr.w	r2, r2, #1
 8003b64:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b66:	e008      	b.n	8003b7a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	681a      	ldr	r2, [r3, #0]
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f042 0201 	orr.w	r2, r2, #1
 8003b76:	601a      	str	r2, [r3, #0]
 8003b78:	e000      	b.n	8003b7c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b7a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003b7c:	2300      	movs	r3, #0
}
 8003b7e:	4618      	mov	r0, r3
 8003b80:	3714      	adds	r7, #20
 8003b82:	46bd      	mov	sp, r7
 8003b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b88:	4770      	bx	lr
 8003b8a:	bf00      	nop
 8003b8c:	40012c00 	.word	0x40012c00
 8003b90:	40000400 	.word	0x40000400
 8003b94:	40000800 	.word	0x40000800
 8003b98:	40000c00 	.word	0x40000c00
 8003b9c:	40013400 	.word	0x40013400
 8003ba0:	40014000 	.word	0x40014000
 8003ba4:	40015000 	.word	0x40015000
 8003ba8:	00010007 	.word	0x00010007

08003bac <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b082      	sub	sp, #8
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d101      	bne.n	8003bbe <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8003bba:	2301      	movs	r3, #1
 8003bbc:	e054      	b.n	8003c68 <HAL_TIM_OC_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003bc4:	b2db      	uxtb	r3, r3
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d111      	bne.n	8003bee <HAL_TIM_OC_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2200      	movs	r2, #0
 8003bce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8003bd2:	6878      	ldr	r0, [r7, #4]
 8003bd4:	f001 fc3e 	bl	8005454 <TIM_ResetCallback>

    if (htim->OC_MspInitCallback == NULL)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d102      	bne.n	8003be6 <HAL_TIM_OC_Init+0x3a>
    {
      htim->OC_MspInitCallback = HAL_TIM_OC_MspInit;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	4a23      	ldr	r2, [pc, #140]	@ (8003c70 <HAL_TIM_OC_Init+0xc4>)
 8003be4:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bea:	6878      	ldr	r0, [r7, #4]
 8003bec:	4798      	blx	r3
    HAL_TIM_OC_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2202      	movs	r2, #2
 8003bf2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681a      	ldr	r2, [r3, #0]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	3304      	adds	r3, #4
 8003bfe:	4619      	mov	r1, r3
 8003c00:	4610      	mov	r0, r2
 8003c02:	f000 ff87 	bl	8004b14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2201      	movs	r2, #1
 8003c0a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2201      	movs	r2, #1
 8003c12:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2201      	movs	r2, #1
 8003c1a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2201      	movs	r2, #1
 8003c22:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2201      	movs	r2, #1
 8003c2a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2201      	movs	r2, #1
 8003c32:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2201      	movs	r2, #1
 8003c3a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2201      	movs	r2, #1
 8003c42:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2201      	movs	r2, #1
 8003c4a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2201      	movs	r2, #1
 8003c52:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2201      	movs	r2, #1
 8003c5a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2201      	movs	r2, #1
 8003c62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003c66:	2300      	movs	r3, #0
}
 8003c68:	4618      	mov	r0, r3
 8003c6a:	3708      	adds	r7, #8
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bd80      	pop	{r7, pc}
 8003c70:	08003c75 	.word	0x08003c75

08003c74 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8003c74:	b480      	push	{r7}
 8003c76:	b083      	sub	sp, #12
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8003c7c:	bf00      	nop
 8003c7e:	370c      	adds	r7, #12
 8003c80:	46bd      	mov	sp, r7
 8003c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c86:	4770      	bx	lr

08003c88 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b082      	sub	sp, #8
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d101      	bne.n	8003c9a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003c96:	2301      	movs	r3, #1
 8003c98:	e054      	b.n	8003d44 <HAL_TIM_PWM_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ca0:	b2db      	uxtb	r3, r3
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d111      	bne.n	8003cca <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8003cae:	6878      	ldr	r0, [r7, #4]
 8003cb0:	f001 fbd0 	bl	8005454 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d102      	bne.n	8003cc2 <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	4a23      	ldr	r2, [pc, #140]	@ (8003d4c <HAL_TIM_PWM_Init+0xc4>)
 8003cc0:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003cc6:	6878      	ldr	r0, [r7, #4]
 8003cc8:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2202      	movs	r2, #2
 8003cce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681a      	ldr	r2, [r3, #0]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	3304      	adds	r3, #4
 8003cda:	4619      	mov	r1, r3
 8003cdc:	4610      	mov	r0, r2
 8003cde:	f000 ff19 	bl	8004b14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2201      	movs	r2, #1
 8003ce6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2201      	movs	r2, #1
 8003cee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2201      	movs	r2, #1
 8003cf6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2201      	movs	r2, #1
 8003cfe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2201      	movs	r2, #1
 8003d06:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2201      	movs	r2, #1
 8003d0e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2201      	movs	r2, #1
 8003d16:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2201      	movs	r2, #1
 8003d1e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2201      	movs	r2, #1
 8003d26:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2201      	movs	r2, #1
 8003d2e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2201      	movs	r2, #1
 8003d36:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2201      	movs	r2, #1
 8003d3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003d42:	2300      	movs	r3, #0
}
 8003d44:	4618      	mov	r0, r3
 8003d46:	3708      	adds	r7, #8
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	bd80      	pop	{r7, pc}
 8003d4c:	08003d51 	.word	0x08003d51

08003d50 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003d50:	b480      	push	{r7}
 8003d52:	b083      	sub	sp, #12
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003d58:	bf00      	nop
 8003d5a:	370c      	adds	r7, #12
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d62:	4770      	bx	lr

08003d64 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b082      	sub	sp, #8
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
 8003d6c:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d101      	bne.n	8003d78 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8003d74:	2301      	movs	r3, #1
 8003d76:	e04c      	b.n	8003e12 <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d7e:	b2db      	uxtb	r3, r3
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d111      	bne.n	8003da8 <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2200      	movs	r2, #0
 8003d88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8003d8c:	6878      	ldr	r0, [r7, #4]
 8003d8e:	f001 fb61 	bl	8005454 <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d102      	bne.n	8003da0 <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	4a1f      	ldr	r2, [pc, #124]	@ (8003e1c <HAL_TIM_OnePulse_Init+0xb8>)
 8003d9e:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003da4:	6878      	ldr	r0, [r7, #4]
 8003da6:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2202      	movs	r2, #2
 8003dac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681a      	ldr	r2, [r3, #0]
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	3304      	adds	r3, #4
 8003db8:	4619      	mov	r1, r3
 8003dba:	4610      	mov	r0, r2
 8003dbc:	f000 feaa 	bl	8004b14 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	681a      	ldr	r2, [r3, #0]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f022 0208 	bic.w	r2, r2, #8
 8003dce:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	6819      	ldr	r1, [r3, #0]
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	683a      	ldr	r2, [r7, #0]
 8003ddc:	430a      	orrs	r2, r1
 8003dde:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2201      	movs	r2, #1
 8003de4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2201      	movs	r2, #1
 8003dec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2201      	movs	r2, #1
 8003df4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2201      	movs	r2, #1
 8003dfc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2201      	movs	r2, #1
 8003e04:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2201      	movs	r2, #1
 8003e0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003e10:	2300      	movs	r3, #0
}
 8003e12:	4618      	mov	r0, r3
 8003e14:	3708      	adds	r7, #8
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bd80      	pop	{r7, pc}
 8003e1a:	bf00      	nop
 8003e1c:	08003e21 	.word	0x08003e21

08003e20 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8003e20:	b480      	push	{r7}
 8003e22:	b083      	sub	sp, #12
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8003e28:	bf00      	nop
 8003e2a:	370c      	adds	r7, #12
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e32:	4770      	bx	lr

08003e34 <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b084      	sub	sp, #16
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
 8003e3c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003e44:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003e4c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003e54:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003e5c:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003e5e:	7bfb      	ldrb	r3, [r7, #15]
 8003e60:	2b01      	cmp	r3, #1
 8003e62:	d108      	bne.n	8003e76 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003e64:	7bbb      	ldrb	r3, [r7, #14]
 8003e66:	2b01      	cmp	r3, #1
 8003e68:	d105      	bne.n	8003e76 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003e6a:	7b7b      	ldrb	r3, [r7, #13]
 8003e6c:	2b01      	cmp	r3, #1
 8003e6e:	d102      	bne.n	8003e76 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003e70:	7b3b      	ldrb	r3, [r7, #12]
 8003e72:	2b01      	cmp	r3, #1
 8003e74:	d001      	beq.n	8003e7a <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 8003e76:	2301      	movs	r3, #1
 8003e78:	e059      	b.n	8003f2e <HAL_TIM_OnePulse_Start_IT+0xfa>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2202      	movs	r2, #2
 8003e7e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2202      	movs	r2, #2
 8003e86:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2202      	movs	r2, #2
 8003e8e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2202      	movs	r2, #2
 8003e96:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	68da      	ldr	r2, [r3, #12]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f042 0202 	orr.w	r2, r2, #2
 8003ea8:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	68da      	ldr	r2, [r3, #12]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f042 0204 	orr.w	r2, r2, #4
 8003eb8:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	2201      	movs	r2, #1
 8003ec0:	2100      	movs	r1, #0
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	f001 faa0 	bl	8005408 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	2201      	movs	r2, #1
 8003ece:	2104      	movs	r1, #4
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	f001 fa99 	bl	8005408 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4a17      	ldr	r2, [pc, #92]	@ (8003f38 <HAL_TIM_OnePulse_Start_IT+0x104>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d018      	beq.n	8003f12 <HAL_TIM_OnePulse_Start_IT+0xde>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4a15      	ldr	r2, [pc, #84]	@ (8003f3c <HAL_TIM_OnePulse_Start_IT+0x108>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d013      	beq.n	8003f12 <HAL_TIM_OnePulse_Start_IT+0xde>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a14      	ldr	r2, [pc, #80]	@ (8003f40 <HAL_TIM_OnePulse_Start_IT+0x10c>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d00e      	beq.n	8003f12 <HAL_TIM_OnePulse_Start_IT+0xde>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a12      	ldr	r2, [pc, #72]	@ (8003f44 <HAL_TIM_OnePulse_Start_IT+0x110>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d009      	beq.n	8003f12 <HAL_TIM_OnePulse_Start_IT+0xde>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4a11      	ldr	r2, [pc, #68]	@ (8003f48 <HAL_TIM_OnePulse_Start_IT+0x114>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d004      	beq.n	8003f12 <HAL_TIM_OnePulse_Start_IT+0xde>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a0f      	ldr	r2, [pc, #60]	@ (8003f4c <HAL_TIM_OnePulse_Start_IT+0x118>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d101      	bne.n	8003f16 <HAL_TIM_OnePulse_Start_IT+0xe2>
 8003f12:	2301      	movs	r3, #1
 8003f14:	e000      	b.n	8003f18 <HAL_TIM_OnePulse_Start_IT+0xe4>
 8003f16:	2300      	movs	r3, #0
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d007      	beq.n	8003f2c <HAL_TIM_OnePulse_Start_IT+0xf8>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003f2a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8003f2c:	2300      	movs	r3, #0
}
 8003f2e:	4618      	mov	r0, r3
 8003f30:	3710      	adds	r7, #16
 8003f32:	46bd      	mov	sp, r7
 8003f34:	bd80      	pop	{r7, pc}
 8003f36:	bf00      	nop
 8003f38:	40012c00 	.word	0x40012c00
 8003f3c:	40013400 	.word	0x40013400
 8003f40:	40014000 	.word	0x40014000
 8003f44:	40014400 	.word	0x40014400
 8003f48:	40014800 	.word	0x40014800
 8003f4c:	40015000 	.word	0x40015000

08003f50 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b084      	sub	sp, #16
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	68db      	ldr	r3, [r3, #12]
 8003f5e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	691b      	ldr	r3, [r3, #16]
 8003f66:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	f003 0302 	and.w	r3, r3, #2
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d026      	beq.n	8003fc0 <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	f003 0302 	and.w	r3, r3, #2
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d021      	beq.n	8003fc0 <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f06f 0202 	mvn.w	r2, #2
 8003f84:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2201      	movs	r2, #1
 8003f8a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	699b      	ldr	r3, [r3, #24]
 8003f92:	f003 0303 	and.w	r3, r3, #3
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d005      	beq.n	8003fa6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003fa0:	6878      	ldr	r0, [r7, #4]
 8003fa2:	4798      	blx	r3
 8003fa4:	e009      	b.n	8003fba <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003fac:	6878      	ldr	r0, [r7, #4]
 8003fae:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003fb6:	6878      	ldr	r0, [r7, #4]
 8003fb8:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003fc0:	68bb      	ldr	r3, [r7, #8]
 8003fc2:	f003 0304 	and.w	r3, r3, #4
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d026      	beq.n	8004018 <HAL_TIM_IRQHandler+0xc8>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	f003 0304 	and.w	r3, r3, #4
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d021      	beq.n	8004018 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f06f 0204 	mvn.w	r2, #4
 8003fdc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2202      	movs	r2, #2
 8003fe2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	699b      	ldr	r3, [r3, #24]
 8003fea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d005      	beq.n	8003ffe <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003ff8:	6878      	ldr	r0, [r7, #4]
 8003ffa:	4798      	blx	r3
 8003ffc:	e009      	b.n	8004012 <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004004:	6878      	ldr	r0, [r7, #4]
 8004006:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800400e:	6878      	ldr	r0, [r7, #4]
 8004010:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2200      	movs	r2, #0
 8004016:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	f003 0308 	and.w	r3, r3, #8
 800401e:	2b00      	cmp	r3, #0
 8004020:	d026      	beq.n	8004070 <HAL_TIM_IRQHandler+0x120>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	f003 0308 	and.w	r3, r3, #8
 8004028:	2b00      	cmp	r3, #0
 800402a:	d021      	beq.n	8004070 <HAL_TIM_IRQHandler+0x120>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f06f 0208 	mvn.w	r2, #8
 8004034:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2204      	movs	r2, #4
 800403a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	69db      	ldr	r3, [r3, #28]
 8004042:	f003 0303 	and.w	r3, r3, #3
 8004046:	2b00      	cmp	r3, #0
 8004048:	d005      	beq.n	8004056 <HAL_TIM_IRQHandler+0x106>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004050:	6878      	ldr	r0, [r7, #4]
 8004052:	4798      	blx	r3
 8004054:	e009      	b.n	800406a <HAL_TIM_IRQHandler+0x11a>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800405c:	6878      	ldr	r0, [r7, #4]
 800405e:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004066:	6878      	ldr	r0, [r7, #4]
 8004068:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2200      	movs	r2, #0
 800406e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	f003 0310 	and.w	r3, r3, #16
 8004076:	2b00      	cmp	r3, #0
 8004078:	d026      	beq.n	80040c8 <HAL_TIM_IRQHandler+0x178>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	f003 0310 	and.w	r3, r3, #16
 8004080:	2b00      	cmp	r3, #0
 8004082:	d021      	beq.n	80040c8 <HAL_TIM_IRQHandler+0x178>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f06f 0210 	mvn.w	r2, #16
 800408c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2208      	movs	r2, #8
 8004092:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	69db      	ldr	r3, [r3, #28]
 800409a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d005      	beq.n	80040ae <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80040a8:	6878      	ldr	r0, [r7, #4]
 80040aa:	4798      	blx	r3
 80040ac:	e009      	b.n	80040c2 <HAL_TIM_IRQHandler+0x172>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80040b4:	6878      	ldr	r0, [r7, #4]
 80040b6:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80040be:	6878      	ldr	r0, [r7, #4]
 80040c0:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2200      	movs	r2, #0
 80040c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	f003 0301 	and.w	r3, r3, #1
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d00e      	beq.n	80040f0 <HAL_TIM_IRQHandler+0x1a0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	f003 0301 	and.w	r3, r3, #1
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d009      	beq.n	80040f0 <HAL_TIM_IRQHandler+0x1a0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f06f 0201 	mvn.w	r2, #1
 80040e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80040ec:	6878      	ldr	r0, [r7, #4]
 80040ee:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80040f0:	68bb      	ldr	r3, [r7, #8]
 80040f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d104      	bne.n	8004104 <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80040fa:	68bb      	ldr	r3, [r7, #8]
 80040fc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004100:	2b00      	cmp	r3, #0
 8004102:	d00e      	beq.n	8004122 <HAL_TIM_IRQHandler+0x1d2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800410a:	2b00      	cmp	r3, #0
 800410c:	d009      	beq.n	8004122 <HAL_TIM_IRQHandler+0x1d2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8004116:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800411e:	6878      	ldr	r0, [r7, #4]
 8004120:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004122:	68bb      	ldr	r3, [r7, #8]
 8004124:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004128:	2b00      	cmp	r3, #0
 800412a:	d00e      	beq.n	800414a <HAL_TIM_IRQHandler+0x1fa>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004132:	2b00      	cmp	r3, #0
 8004134:	d009      	beq.n	800414a <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800413e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8004146:	6878      	ldr	r0, [r7, #4]
 8004148:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800414a:	68bb      	ldr	r3, [r7, #8]
 800414c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004150:	2b00      	cmp	r3, #0
 8004152:	d00e      	beq.n	8004172 <HAL_TIM_IRQHandler+0x222>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800415a:	2b00      	cmp	r3, #0
 800415c:	d009      	beq.n	8004172 <HAL_TIM_IRQHandler+0x222>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004166:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800416e:	6878      	ldr	r0, [r7, #4]
 8004170:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004172:	68bb      	ldr	r3, [r7, #8]
 8004174:	f003 0320 	and.w	r3, r3, #32
 8004178:	2b00      	cmp	r3, #0
 800417a:	d00e      	beq.n	800419a <HAL_TIM_IRQHandler+0x24a>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	f003 0320 	and.w	r3, r3, #32
 8004182:	2b00      	cmp	r3, #0
 8004184:	d009      	beq.n	800419a <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f06f 0220 	mvn.w	r2, #32
 800418e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004196:	6878      	ldr	r0, [r7, #4]
 8004198:	4798      	blx	r3
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800419a:	68bb      	ldr	r3, [r7, #8]
 800419c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d00e      	beq.n	80041c2 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d009      	beq.n	80041c2 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 80041b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80041be:	6878      	ldr	r0, [r7, #4]
 80041c0:	4798      	blx	r3
      HAL_TIMEx_EncoderIndexCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80041c2:	68bb      	ldr	r3, [r7, #8]
 80041c4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d00e      	beq.n	80041ea <HAL_TIM_IRQHandler+0x29a>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d009      	beq.n	80041ea <HAL_TIM_IRQHandler+0x29a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 80041de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80041e6:	6878      	ldr	r0, [r7, #4]
 80041e8:	4798      	blx	r3
      HAL_TIMEx_DirectionChangeCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d00e      	beq.n	8004212 <HAL_TIM_IRQHandler+0x2c2>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d009      	beq.n	8004212 <HAL_TIM_IRQHandler+0x2c2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8004206:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800420e:	6878      	ldr	r0, [r7, #4]
 8004210:	4798      	blx	r3
      HAL_TIMEx_IndexErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8004212:	68bb      	ldr	r3, [r7, #8]
 8004214:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004218:	2b00      	cmp	r3, #0
 800421a:	d00e      	beq.n	800423a <HAL_TIM_IRQHandler+0x2ea>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004222:	2b00      	cmp	r3, #0
 8004224:	d009      	beq.n	800423a <HAL_TIM_IRQHandler+0x2ea>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800422e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8004236:	6878      	ldr	r0, [r7, #4]
 8004238:	4798      	blx	r3
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800423a:	bf00      	nop
 800423c:	3710      	adds	r7, #16
 800423e:	46bd      	mov	sp, r7
 8004240:	bd80      	pop	{r7, pc}
	...

08004244 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b086      	sub	sp, #24
 8004248:	af00      	add	r7, sp, #0
 800424a:	60f8      	str	r0, [r7, #12]
 800424c:	60b9      	str	r1, [r7, #8]
 800424e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004250:	2300      	movs	r3, #0
 8004252:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_CHANNEL_MODE(sConfig->OCMode, Channel));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800425a:	2b01      	cmp	r3, #1
 800425c:	d101      	bne.n	8004262 <HAL_TIM_OC_ConfigChannel+0x1e>
 800425e:	2302      	movs	r3, #2
 8004260:	e066      	b.n	8004330 <HAL_TIM_OC_ConfigChannel+0xec>
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	2201      	movs	r2, #1
 8004266:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2b14      	cmp	r3, #20
 800426e:	d857      	bhi.n	8004320 <HAL_TIM_OC_ConfigChannel+0xdc>
 8004270:	a201      	add	r2, pc, #4	@ (adr r2, 8004278 <HAL_TIM_OC_ConfigChannel+0x34>)
 8004272:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004276:	bf00      	nop
 8004278:	080042cd 	.word	0x080042cd
 800427c:	08004321 	.word	0x08004321
 8004280:	08004321 	.word	0x08004321
 8004284:	08004321 	.word	0x08004321
 8004288:	080042db 	.word	0x080042db
 800428c:	08004321 	.word	0x08004321
 8004290:	08004321 	.word	0x08004321
 8004294:	08004321 	.word	0x08004321
 8004298:	080042e9 	.word	0x080042e9
 800429c:	08004321 	.word	0x08004321
 80042a0:	08004321 	.word	0x08004321
 80042a4:	08004321 	.word	0x08004321
 80042a8:	080042f7 	.word	0x080042f7
 80042ac:	08004321 	.word	0x08004321
 80042b0:	08004321 	.word	0x08004321
 80042b4:	08004321 	.word	0x08004321
 80042b8:	08004305 	.word	0x08004305
 80042bc:	08004321 	.word	0x08004321
 80042c0:	08004321 	.word	0x08004321
 80042c4:	08004321 	.word	0x08004321
 80042c8:	08004313 	.word	0x08004313
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	68b9      	ldr	r1, [r7, #8]
 80042d2:	4618      	mov	r0, r3
 80042d4:	f000 fcd2 	bl	8004c7c <TIM_OC1_SetConfig>
      break;
 80042d8:	e025      	b.n	8004326 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	68b9      	ldr	r1, [r7, #8]
 80042e0:	4618      	mov	r0, r3
 80042e2:	f000 fd65 	bl	8004db0 <TIM_OC2_SetConfig>
      break;
 80042e6:	e01e      	b.n	8004326 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	68b9      	ldr	r1, [r7, #8]
 80042ee:	4618      	mov	r0, r3
 80042f0:	f000 fdf2 	bl	8004ed8 <TIM_OC3_SetConfig>
      break;
 80042f4:	e017      	b.n	8004326 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	68b9      	ldr	r1, [r7, #8]
 80042fc:	4618      	mov	r0, r3
 80042fe:	f000 fe7d 	bl	8004ffc <TIM_OC4_SetConfig>
      break;
 8004302:	e010      	b.n	8004326 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	68b9      	ldr	r1, [r7, #8]
 800430a:	4618      	mov	r0, r3
 800430c:	f000 ff0a 	bl	8005124 <TIM_OC5_SetConfig>
      break;
 8004310:	e009      	b.n	8004326 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	68b9      	ldr	r1, [r7, #8]
 8004318:	4618      	mov	r0, r3
 800431a:	f000 ff6d 	bl	80051f8 <TIM_OC6_SetConfig>
      break;
 800431e:	e002      	b.n	8004326 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8004320:	2301      	movs	r3, #1
 8004322:	75fb      	strb	r3, [r7, #23]
      break;
 8004324:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	2200      	movs	r2, #0
 800432a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800432e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004330:	4618      	mov	r0, r3
 8004332:	3718      	adds	r7, #24
 8004334:	46bd      	mov	sp, r7
 8004336:	bd80      	pop	{r7, pc}

08004338 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b086      	sub	sp, #24
 800433c:	af00      	add	r7, sp, #0
 800433e:	60f8      	str	r0, [r7, #12]
 8004340:	60b9      	str	r1, [r7, #8]
 8004342:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004344:	2300      	movs	r3, #0
 8004346:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800434e:	2b01      	cmp	r3, #1
 8004350:	d101      	bne.n	8004356 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004352:	2302      	movs	r3, #2
 8004354:	e0ff      	b.n	8004556 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	2201      	movs	r2, #1
 800435a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2b14      	cmp	r3, #20
 8004362:	f200 80f0 	bhi.w	8004546 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004366:	a201      	add	r2, pc, #4	@ (adr r2, 800436c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004368:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800436c:	080043c1 	.word	0x080043c1
 8004370:	08004547 	.word	0x08004547
 8004374:	08004547 	.word	0x08004547
 8004378:	08004547 	.word	0x08004547
 800437c:	08004401 	.word	0x08004401
 8004380:	08004547 	.word	0x08004547
 8004384:	08004547 	.word	0x08004547
 8004388:	08004547 	.word	0x08004547
 800438c:	08004443 	.word	0x08004443
 8004390:	08004547 	.word	0x08004547
 8004394:	08004547 	.word	0x08004547
 8004398:	08004547 	.word	0x08004547
 800439c:	08004483 	.word	0x08004483
 80043a0:	08004547 	.word	0x08004547
 80043a4:	08004547 	.word	0x08004547
 80043a8:	08004547 	.word	0x08004547
 80043ac:	080044c5 	.word	0x080044c5
 80043b0:	08004547 	.word	0x08004547
 80043b4:	08004547 	.word	0x08004547
 80043b8:	08004547 	.word	0x08004547
 80043bc:	08004505 	.word	0x08004505
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	68b9      	ldr	r1, [r7, #8]
 80043c6:	4618      	mov	r0, r3
 80043c8:	f000 fc58 	bl	8004c7c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	699a      	ldr	r2, [r3, #24]
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f042 0208 	orr.w	r2, r2, #8
 80043da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	699a      	ldr	r2, [r3, #24]
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f022 0204 	bic.w	r2, r2, #4
 80043ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	6999      	ldr	r1, [r3, #24]
 80043f2:	68bb      	ldr	r3, [r7, #8]
 80043f4:	691a      	ldr	r2, [r3, #16]
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	430a      	orrs	r2, r1
 80043fc:	619a      	str	r2, [r3, #24]
      break;
 80043fe:	e0a5      	b.n	800454c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	68b9      	ldr	r1, [r7, #8]
 8004406:	4618      	mov	r0, r3
 8004408:	f000 fcd2 	bl	8004db0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	699a      	ldr	r2, [r3, #24]
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800441a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	699a      	ldr	r2, [r3, #24]
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800442a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	6999      	ldr	r1, [r3, #24]
 8004432:	68bb      	ldr	r3, [r7, #8]
 8004434:	691b      	ldr	r3, [r3, #16]
 8004436:	021a      	lsls	r2, r3, #8
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	430a      	orrs	r2, r1
 800443e:	619a      	str	r2, [r3, #24]
      break;
 8004440:	e084      	b.n	800454c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	68b9      	ldr	r1, [r7, #8]
 8004448:	4618      	mov	r0, r3
 800444a:	f000 fd45 	bl	8004ed8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	69da      	ldr	r2, [r3, #28]
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f042 0208 	orr.w	r2, r2, #8
 800445c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	69da      	ldr	r2, [r3, #28]
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f022 0204 	bic.w	r2, r2, #4
 800446c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	69d9      	ldr	r1, [r3, #28]
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	691a      	ldr	r2, [r3, #16]
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	430a      	orrs	r2, r1
 800447e:	61da      	str	r2, [r3, #28]
      break;
 8004480:	e064      	b.n	800454c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	68b9      	ldr	r1, [r7, #8]
 8004488:	4618      	mov	r0, r3
 800448a:	f000 fdb7 	bl	8004ffc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	69da      	ldr	r2, [r3, #28]
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800449c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	69da      	ldr	r2, [r3, #28]
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80044ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	69d9      	ldr	r1, [r3, #28]
 80044b4:	68bb      	ldr	r3, [r7, #8]
 80044b6:	691b      	ldr	r3, [r3, #16]
 80044b8:	021a      	lsls	r2, r3, #8
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	430a      	orrs	r2, r1
 80044c0:	61da      	str	r2, [r3, #28]
      break;
 80044c2:	e043      	b.n	800454c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	68b9      	ldr	r1, [r7, #8]
 80044ca:	4618      	mov	r0, r3
 80044cc:	f000 fe2a 	bl	8005124 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f042 0208 	orr.w	r2, r2, #8
 80044de:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f022 0204 	bic.w	r2, r2, #4
 80044ee:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80044f6:	68bb      	ldr	r3, [r7, #8]
 80044f8:	691a      	ldr	r2, [r3, #16]
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	430a      	orrs	r2, r1
 8004500:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8004502:	e023      	b.n	800454c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	68b9      	ldr	r1, [r7, #8]
 800450a:	4618      	mov	r0, r3
 800450c:	f000 fe74 	bl	80051f8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800451e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800452e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8004536:	68bb      	ldr	r3, [r7, #8]
 8004538:	691b      	ldr	r3, [r3, #16]
 800453a:	021a      	lsls	r2, r3, #8
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	430a      	orrs	r2, r1
 8004542:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8004544:	e002      	b.n	800454c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004546:	2301      	movs	r3, #1
 8004548:	75fb      	strb	r3, [r7, #23]
      break;
 800454a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	2200      	movs	r2, #0
 8004550:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004554:	7dfb      	ldrb	r3, [r7, #23]
}
 8004556:	4618      	mov	r0, r3
 8004558:	3718      	adds	r7, #24
 800455a:	46bd      	mov	sp, r7
 800455c:	bd80      	pop	{r7, pc}
 800455e:	bf00      	nop

08004560 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b084      	sub	sp, #16
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
 8004568:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800456a:	2300      	movs	r3, #0
 800456c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004574:	2b01      	cmp	r3, #1
 8004576:	d101      	bne.n	800457c <HAL_TIM_ConfigClockSource+0x1c>
 8004578:	2302      	movs	r3, #2
 800457a:	e0f6      	b.n	800476a <HAL_TIM_ConfigClockSource+0x20a>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2201      	movs	r2, #1
 8004580:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2202      	movs	r2, #2
 8004588:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	689b      	ldr	r3, [r3, #8]
 8004592:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004594:	68bb      	ldr	r3, [r7, #8]
 8004596:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800459a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800459e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80045a6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	68ba      	ldr	r2, [r7, #8]
 80045ae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a6f      	ldr	r2, [pc, #444]	@ (8004774 <HAL_TIM_ConfigClockSource+0x214>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	f000 80c1 	beq.w	800473e <HAL_TIM_ConfigClockSource+0x1de>
 80045bc:	4a6d      	ldr	r2, [pc, #436]	@ (8004774 <HAL_TIM_ConfigClockSource+0x214>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	f200 80c6 	bhi.w	8004750 <HAL_TIM_ConfigClockSource+0x1f0>
 80045c4:	4a6c      	ldr	r2, [pc, #432]	@ (8004778 <HAL_TIM_ConfigClockSource+0x218>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	f000 80b9 	beq.w	800473e <HAL_TIM_ConfigClockSource+0x1de>
 80045cc:	4a6a      	ldr	r2, [pc, #424]	@ (8004778 <HAL_TIM_ConfigClockSource+0x218>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	f200 80be 	bhi.w	8004750 <HAL_TIM_ConfigClockSource+0x1f0>
 80045d4:	4a69      	ldr	r2, [pc, #420]	@ (800477c <HAL_TIM_ConfigClockSource+0x21c>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	f000 80b1 	beq.w	800473e <HAL_TIM_ConfigClockSource+0x1de>
 80045dc:	4a67      	ldr	r2, [pc, #412]	@ (800477c <HAL_TIM_ConfigClockSource+0x21c>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	f200 80b6 	bhi.w	8004750 <HAL_TIM_ConfigClockSource+0x1f0>
 80045e4:	4a66      	ldr	r2, [pc, #408]	@ (8004780 <HAL_TIM_ConfigClockSource+0x220>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	f000 80a9 	beq.w	800473e <HAL_TIM_ConfigClockSource+0x1de>
 80045ec:	4a64      	ldr	r2, [pc, #400]	@ (8004780 <HAL_TIM_ConfigClockSource+0x220>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	f200 80ae 	bhi.w	8004750 <HAL_TIM_ConfigClockSource+0x1f0>
 80045f4:	4a63      	ldr	r2, [pc, #396]	@ (8004784 <HAL_TIM_ConfigClockSource+0x224>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	f000 80a1 	beq.w	800473e <HAL_TIM_ConfigClockSource+0x1de>
 80045fc:	4a61      	ldr	r2, [pc, #388]	@ (8004784 <HAL_TIM_ConfigClockSource+0x224>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	f200 80a6 	bhi.w	8004750 <HAL_TIM_ConfigClockSource+0x1f0>
 8004604:	4a60      	ldr	r2, [pc, #384]	@ (8004788 <HAL_TIM_ConfigClockSource+0x228>)
 8004606:	4293      	cmp	r3, r2
 8004608:	f000 8099 	beq.w	800473e <HAL_TIM_ConfigClockSource+0x1de>
 800460c:	4a5e      	ldr	r2, [pc, #376]	@ (8004788 <HAL_TIM_ConfigClockSource+0x228>)
 800460e:	4293      	cmp	r3, r2
 8004610:	f200 809e 	bhi.w	8004750 <HAL_TIM_ConfigClockSource+0x1f0>
 8004614:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8004618:	f000 8091 	beq.w	800473e <HAL_TIM_ConfigClockSource+0x1de>
 800461c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8004620:	f200 8096 	bhi.w	8004750 <HAL_TIM_ConfigClockSource+0x1f0>
 8004624:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004628:	f000 8089 	beq.w	800473e <HAL_TIM_ConfigClockSource+0x1de>
 800462c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004630:	f200 808e 	bhi.w	8004750 <HAL_TIM_ConfigClockSource+0x1f0>
 8004634:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004638:	d03e      	beq.n	80046b8 <HAL_TIM_ConfigClockSource+0x158>
 800463a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800463e:	f200 8087 	bhi.w	8004750 <HAL_TIM_ConfigClockSource+0x1f0>
 8004642:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004646:	f000 8086 	beq.w	8004756 <HAL_TIM_ConfigClockSource+0x1f6>
 800464a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800464e:	d87f      	bhi.n	8004750 <HAL_TIM_ConfigClockSource+0x1f0>
 8004650:	2b70      	cmp	r3, #112	@ 0x70
 8004652:	d01a      	beq.n	800468a <HAL_TIM_ConfigClockSource+0x12a>
 8004654:	2b70      	cmp	r3, #112	@ 0x70
 8004656:	d87b      	bhi.n	8004750 <HAL_TIM_ConfigClockSource+0x1f0>
 8004658:	2b60      	cmp	r3, #96	@ 0x60
 800465a:	d050      	beq.n	80046fe <HAL_TIM_ConfigClockSource+0x19e>
 800465c:	2b60      	cmp	r3, #96	@ 0x60
 800465e:	d877      	bhi.n	8004750 <HAL_TIM_ConfigClockSource+0x1f0>
 8004660:	2b50      	cmp	r3, #80	@ 0x50
 8004662:	d03c      	beq.n	80046de <HAL_TIM_ConfigClockSource+0x17e>
 8004664:	2b50      	cmp	r3, #80	@ 0x50
 8004666:	d873      	bhi.n	8004750 <HAL_TIM_ConfigClockSource+0x1f0>
 8004668:	2b40      	cmp	r3, #64	@ 0x40
 800466a:	d058      	beq.n	800471e <HAL_TIM_ConfigClockSource+0x1be>
 800466c:	2b40      	cmp	r3, #64	@ 0x40
 800466e:	d86f      	bhi.n	8004750 <HAL_TIM_ConfigClockSource+0x1f0>
 8004670:	2b30      	cmp	r3, #48	@ 0x30
 8004672:	d064      	beq.n	800473e <HAL_TIM_ConfigClockSource+0x1de>
 8004674:	2b30      	cmp	r3, #48	@ 0x30
 8004676:	d86b      	bhi.n	8004750 <HAL_TIM_ConfigClockSource+0x1f0>
 8004678:	2b20      	cmp	r3, #32
 800467a:	d060      	beq.n	800473e <HAL_TIM_ConfigClockSource+0x1de>
 800467c:	2b20      	cmp	r3, #32
 800467e:	d867      	bhi.n	8004750 <HAL_TIM_ConfigClockSource+0x1f0>
 8004680:	2b00      	cmp	r3, #0
 8004682:	d05c      	beq.n	800473e <HAL_TIM_ConfigClockSource+0x1de>
 8004684:	2b10      	cmp	r3, #16
 8004686:	d05a      	beq.n	800473e <HAL_TIM_ConfigClockSource+0x1de>
 8004688:	e062      	b.n	8004750 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800469a:	f000 fe95 	bl	80053c8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	689b      	ldr	r3, [r3, #8]
 80046a4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80046a6:	68bb      	ldr	r3, [r7, #8]
 80046a8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80046ac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	68ba      	ldr	r2, [r7, #8]
 80046b4:	609a      	str	r2, [r3, #8]
      break;
 80046b6:	e04f      	b.n	8004758 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80046c8:	f000 fe7e 	bl	80053c8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	689a      	ldr	r2, [r3, #8]
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80046da:	609a      	str	r2, [r3, #8]
      break;
 80046dc:	e03c      	b.n	8004758 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80046ea:	461a      	mov	r2, r3
 80046ec:	f000 fdf0 	bl	80052d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	2150      	movs	r1, #80	@ 0x50
 80046f6:	4618      	mov	r0, r3
 80046f8:	f000 fe49 	bl	800538e <TIM_ITRx_SetConfig>
      break;
 80046fc:	e02c      	b.n	8004758 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800470a:	461a      	mov	r2, r3
 800470c:	f000 fe0f 	bl	800532e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	2160      	movs	r1, #96	@ 0x60
 8004716:	4618      	mov	r0, r3
 8004718:	f000 fe39 	bl	800538e <TIM_ITRx_SetConfig>
      break;
 800471c:	e01c      	b.n	8004758 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800472a:	461a      	mov	r2, r3
 800472c:	f000 fdd0 	bl	80052d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	2140      	movs	r1, #64	@ 0x40
 8004736:	4618      	mov	r0, r3
 8004738:	f000 fe29 	bl	800538e <TIM_ITRx_SetConfig>
      break;
 800473c:	e00c      	b.n	8004758 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681a      	ldr	r2, [r3, #0]
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4619      	mov	r1, r3
 8004748:	4610      	mov	r0, r2
 800474a:	f000 fe20 	bl	800538e <TIM_ITRx_SetConfig>
      break;
 800474e:	e003      	b.n	8004758 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8004750:	2301      	movs	r3, #1
 8004752:	73fb      	strb	r3, [r7, #15]
      break;
 8004754:	e000      	b.n	8004758 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8004756:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2201      	movs	r2, #1
 800475c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2200      	movs	r2, #0
 8004764:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004768:	7bfb      	ldrb	r3, [r7, #15]
}
 800476a:	4618      	mov	r0, r3
 800476c:	3710      	adds	r7, #16
 800476e:	46bd      	mov	sp, r7
 8004770:	bd80      	pop	{r7, pc}
 8004772:	bf00      	nop
 8004774:	00100070 	.word	0x00100070
 8004778:	00100060 	.word	0x00100060
 800477c:	00100050 	.word	0x00100050
 8004780:	00100040 	.word	0x00100040
 8004784:	00100030 	.word	0x00100030
 8004788:	00100020 	.word	0x00100020

0800478c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800478c:	b480      	push	{r7}
 800478e:	b083      	sub	sp, #12
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004794:	bf00      	nop
 8004796:	370c      	adds	r7, #12
 8004798:	46bd      	mov	sp, r7
 800479a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479e:	4770      	bx	lr

080047a0 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80047a0:	b480      	push	{r7}
 80047a2:	b083      	sub	sp, #12
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 80047a8:	bf00      	nop
 80047aa:	370c      	adds	r7, #12
 80047ac:	46bd      	mov	sp, r7
 80047ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b2:	4770      	bx	lr

080047b4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80047b4:	b480      	push	{r7}
 80047b6:	b083      	sub	sp, #12
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80047bc:	bf00      	nop
 80047be:	370c      	adds	r7, #12
 80047c0:	46bd      	mov	sp, r7
 80047c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c6:	4770      	bx	lr

080047c8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80047c8:	b480      	push	{r7}
 80047ca:	b083      	sub	sp, #12
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80047d0:	bf00      	nop
 80047d2:	370c      	adds	r7, #12
 80047d4:	46bd      	mov	sp, r7
 80047d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047da:	4770      	bx	lr

080047dc <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80047dc:	b480      	push	{r7}
 80047de:	b083      	sub	sp, #12
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 80047e4:	bf00      	nop
 80047e6:	370c      	adds	r7, #12
 80047e8:	46bd      	mov	sp, r7
 80047ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ee:	4770      	bx	lr

080047f0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80047f0:	b480      	push	{r7}
 80047f2:	b083      	sub	sp, #12
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80047f8:	bf00      	nop
 80047fa:	370c      	adds	r7, #12
 80047fc:	46bd      	mov	sp, r7
 80047fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004802:	4770      	bx	lr

08004804 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8004804:	b480      	push	{r7}
 8004806:	b083      	sub	sp, #12
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800480c:	bf00      	nop
 800480e:	370c      	adds	r7, #12
 8004810:	46bd      	mov	sp, r7
 8004812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004816:	4770      	bx	lr

08004818 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004818:	b480      	push	{r7}
 800481a:	b083      	sub	sp, #12
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004820:	bf00      	nop
 8004822:	370c      	adds	r7, #12
 8004824:	46bd      	mov	sp, r7
 8004826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482a:	4770      	bx	lr

0800482c <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800482c:	b480      	push	{r7}
 800482e:	b083      	sub	sp, #12
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8004834:	bf00      	nop
 8004836:	370c      	adds	r7, #12
 8004838:	46bd      	mov	sp, r7
 800483a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483e:	4770      	bx	lr

08004840 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8004840:	b480      	push	{r7}
 8004842:	b083      	sub	sp, #12
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8004848:	bf00      	nop
 800484a:	370c      	adds	r7, #12
 800484c:	46bd      	mov	sp, r7
 800484e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004852:	4770      	bx	lr

08004854 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 8004854:	b480      	push	{r7}
 8004856:	b087      	sub	sp, #28
 8004858:	af00      	add	r7, sp, #0
 800485a:	60f8      	str	r0, [r7, #12]
 800485c:	460b      	mov	r3, r1
 800485e:	607a      	str	r2, [r7, #4]
 8004860:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8004862:	2300      	movs	r3, #0
 8004864:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d101      	bne.n	8004870 <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 800486c:	2301      	movs	r3, #1
 800486e:	e14a      	b.n	8004b06 <HAL_TIM_RegisterCallback+0x2b2>
  }

  if (htim->State == HAL_TIM_STATE_READY)
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004876:	b2db      	uxtb	r3, r3
 8004878:	2b01      	cmp	r3, #1
 800487a:	f040 80dd 	bne.w	8004a38 <HAL_TIM_RegisterCallback+0x1e4>
  {
    switch (CallbackID)
 800487e:	7afb      	ldrb	r3, [r7, #11]
 8004880:	2b1f      	cmp	r3, #31
 8004882:	f200 80d6 	bhi.w	8004a32 <HAL_TIM_RegisterCallback+0x1de>
 8004886:	a201      	add	r2, pc, #4	@ (adr r2, 800488c <HAL_TIM_RegisterCallback+0x38>)
 8004888:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800488c:	0800490d 	.word	0x0800490d
 8004890:	08004915 	.word	0x08004915
 8004894:	0800491d 	.word	0x0800491d
 8004898:	08004925 	.word	0x08004925
 800489c:	0800492d 	.word	0x0800492d
 80048a0:	08004935 	.word	0x08004935
 80048a4:	0800493d 	.word	0x0800493d
 80048a8:	08004945 	.word	0x08004945
 80048ac:	0800494d 	.word	0x0800494d
 80048b0:	08004955 	.word	0x08004955
 80048b4:	0800495d 	.word	0x0800495d
 80048b8:	08004965 	.word	0x08004965
 80048bc:	0800496d 	.word	0x0800496d
 80048c0:	08004975 	.word	0x08004975
 80048c4:	0800497f 	.word	0x0800497f
 80048c8:	08004989 	.word	0x08004989
 80048cc:	08004993 	.word	0x08004993
 80048d0:	0800499d 	.word	0x0800499d
 80048d4:	080049a7 	.word	0x080049a7
 80048d8:	080049b1 	.word	0x080049b1
 80048dc:	080049bb 	.word	0x080049bb
 80048e0:	080049c5 	.word	0x080049c5
 80048e4:	080049cf 	.word	0x080049cf
 80048e8:	080049d9 	.word	0x080049d9
 80048ec:	080049e3 	.word	0x080049e3
 80048f0:	080049ed 	.word	0x080049ed
 80048f4:	080049f7 	.word	0x080049f7
 80048f8:	08004a01 	.word	0x08004a01
 80048fc:	08004a0b 	.word	0x08004a0b
 8004900:	08004a15 	.word	0x08004a15
 8004904:	08004a1f 	.word	0x08004a1f
 8004908:	08004a29 	.word	0x08004a29
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	687a      	ldr	r2, [r7, #4]
 8004910:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 8004912:	e0f7      	b.n	8004b04 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	687a      	ldr	r2, [r7, #4]
 8004918:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 800491a:	e0f3      	b.n	8004b04 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	687a      	ldr	r2, [r7, #4]
 8004920:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8004922:	e0ef      	b.n	8004b04 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	687a      	ldr	r2, [r7, #4]
 8004928:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 800492a:	e0eb      	b.n	8004b04 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	687a      	ldr	r2, [r7, #4]
 8004930:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 8004932:	e0e7      	b.n	8004b04 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	687a      	ldr	r2, [r7, #4]
 8004938:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 800493a:	e0e3      	b.n	8004b04 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	687a      	ldr	r2, [r7, #4]
 8004940:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 8004942:	e0df      	b.n	8004b04 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	687a      	ldr	r2, [r7, #4]
 8004948:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 800494a:	e0db      	b.n	8004b04 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	687a      	ldr	r2, [r7, #4]
 8004950:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 8004952:	e0d7      	b.n	8004b04 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	687a      	ldr	r2, [r7, #4]
 8004958:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 800495a:	e0d3      	b.n	8004b04 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	687a      	ldr	r2, [r7, #4]
 8004960:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 8004962:	e0cf      	b.n	8004b04 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	687a      	ldr	r2, [r7, #4]
 8004968:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 800496a:	e0cb      	b.n	8004b04 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	687a      	ldr	r2, [r7, #4]
 8004970:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 8004972:	e0c7      	b.n	8004b04 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	687a      	ldr	r2, [r7, #4]
 8004978:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 800497c:	e0c2      	b.n	8004b04 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	687a      	ldr	r2, [r7, #4]
 8004982:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        break;
 8004986:	e0bd      	b.n	8004b04 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	687a      	ldr	r2, [r7, #4]
 800498c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        break;
 8004990:	e0b8      	b.n	8004b04 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	687a      	ldr	r2, [r7, #4]
 8004996:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        break;
 800499a:	e0b3      	b.n	8004b04 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	687a      	ldr	r2, [r7, #4]
 80049a0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        break;
 80049a4:	e0ae      	b.n	8004b04 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	687a      	ldr	r2, [r7, #4]
 80049aa:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 80049ae:	e0a9      	b.n	8004b04 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	687a      	ldr	r2, [r7, #4]
 80049b4:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 80049b8:	e0a4      	b.n	8004b04 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	687a      	ldr	r2, [r7, #4]
 80049be:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 80049c2:	e09f      	b.n	8004b04 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	687a      	ldr	r2, [r7, #4]
 80049c8:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 80049cc:	e09a      	b.n	8004b04 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	687a      	ldr	r2, [r7, #4]
 80049d2:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 80049d6:	e095      	b.n	8004b04 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	687a      	ldr	r2, [r7, #4]
 80049dc:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 80049e0:	e090      	b.n	8004b04 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	687a      	ldr	r2, [r7, #4]
 80049e6:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 80049ea:	e08b      	b.n	8004b04 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	687a      	ldr	r2, [r7, #4]
 80049f0:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 80049f4:	e086      	b.n	8004b04 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	687a      	ldr	r2, [r7, #4]
 80049fa:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 80049fe:	e081      	b.n	8004b04 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK2_CB_ID :
        htim->Break2Callback                       = pCallback;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	687a      	ldr	r2, [r7, #4]
 8004a04:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 8004a08:	e07c      	b.n	8004b04 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_INDEX_CB_ID :
        htim->EncoderIndexCallback                 = pCallback;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	687a      	ldr	r2, [r7, #4]
 8004a0e:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 8004a12:	e077      	b.n	8004b04 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_DIRECTION_CHANGE_CB_ID :
        htim->DirectionChangeCallback              = pCallback;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	687a      	ldr	r2, [r7, #4]
 8004a18:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
        break;
 8004a1c:	e072      	b.n	8004b04 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_INDEX_ERROR_CB_ID :
        htim->IndexErrorCallback                   = pCallback;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	687a      	ldr	r2, [r7, #4]
 8004a22:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 8004a26:	e06d      	b.n	8004b04 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRANSITION_ERROR_CB_ID :
        htim->TransitionErrorCallback              = pCallback;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	687a      	ldr	r2, [r7, #4]
 8004a2c:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 8004a30:	e068      	b.n	8004b04 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8004a32:	2301      	movs	r3, #1
 8004a34:	75fb      	strb	r3, [r7, #23]
        break;
 8004a36:	e065      	b.n	8004b04 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a3e:	b2db      	uxtb	r3, r3
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d15d      	bne.n	8004b00 <HAL_TIM_RegisterCallback+0x2ac>
  {
    switch (CallbackID)
 8004a44:	7afb      	ldrb	r3, [r7, #11]
 8004a46:	2b0d      	cmp	r3, #13
 8004a48:	d857      	bhi.n	8004afa <HAL_TIM_RegisterCallback+0x2a6>
 8004a4a:	a201      	add	r2, pc, #4	@ (adr r2, 8004a50 <HAL_TIM_RegisterCallback+0x1fc>)
 8004a4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a50:	08004a89 	.word	0x08004a89
 8004a54:	08004a91 	.word	0x08004a91
 8004a58:	08004a99 	.word	0x08004a99
 8004a5c:	08004aa1 	.word	0x08004aa1
 8004a60:	08004aa9 	.word	0x08004aa9
 8004a64:	08004ab1 	.word	0x08004ab1
 8004a68:	08004ab9 	.word	0x08004ab9
 8004a6c:	08004ac1 	.word	0x08004ac1
 8004a70:	08004ac9 	.word	0x08004ac9
 8004a74:	08004ad1 	.word	0x08004ad1
 8004a78:	08004ad9 	.word	0x08004ad9
 8004a7c:	08004ae1 	.word	0x08004ae1
 8004a80:	08004ae9 	.word	0x08004ae9
 8004a84:	08004af1 	.word	0x08004af1
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	687a      	ldr	r2, [r7, #4]
 8004a8c:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 8004a8e:	e039      	b.n	8004b04 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	687a      	ldr	r2, [r7, #4]
 8004a94:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 8004a96:	e035      	b.n	8004b04 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	687a      	ldr	r2, [r7, #4]
 8004a9c:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8004a9e:	e031      	b.n	8004b04 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	687a      	ldr	r2, [r7, #4]
 8004aa4:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 8004aa6:	e02d      	b.n	8004b04 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	687a      	ldr	r2, [r7, #4]
 8004aac:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 8004aae:	e029      	b.n	8004b04 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	687a      	ldr	r2, [r7, #4]
 8004ab4:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 8004ab6:	e025      	b.n	8004b04 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	687a      	ldr	r2, [r7, #4]
 8004abc:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 8004abe:	e021      	b.n	8004b04 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	687a      	ldr	r2, [r7, #4]
 8004ac4:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 8004ac6:	e01d      	b.n	8004b04 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	687a      	ldr	r2, [r7, #4]
 8004acc:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 8004ace:	e019      	b.n	8004b04 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	687a      	ldr	r2, [r7, #4]
 8004ad4:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 8004ad6:	e015      	b.n	8004b04 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	687a      	ldr	r2, [r7, #4]
 8004adc:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 8004ade:	e011      	b.n	8004b04 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	687a      	ldr	r2, [r7, #4]
 8004ae4:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 8004ae6:	e00d      	b.n	8004b04 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	687a      	ldr	r2, [r7, #4]
 8004aec:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 8004aee:	e009      	b.n	8004b04 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	687a      	ldr	r2, [r7, #4]
 8004af4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 8004af8:	e004      	b.n	8004b04 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8004afa:	2301      	movs	r3, #1
 8004afc:	75fb      	strb	r3, [r7, #23]
        break;
 8004afe:	e001      	b.n	8004b04 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 8004b00:	2301      	movs	r3, #1
 8004b02:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8004b04:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b06:	4618      	mov	r0, r3
 8004b08:	371c      	adds	r7, #28
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b10:	4770      	bx	lr
 8004b12:	bf00      	nop

08004b14 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004b14:	b480      	push	{r7}
 8004b16:	b085      	sub	sp, #20
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
 8004b1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	4a4c      	ldr	r2, [pc, #304]	@ (8004c58 <TIM_Base_SetConfig+0x144>)
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d017      	beq.n	8004b5c <TIM_Base_SetConfig+0x48>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b32:	d013      	beq.n	8004b5c <TIM_Base_SetConfig+0x48>
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	4a49      	ldr	r2, [pc, #292]	@ (8004c5c <TIM_Base_SetConfig+0x148>)
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d00f      	beq.n	8004b5c <TIM_Base_SetConfig+0x48>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	4a48      	ldr	r2, [pc, #288]	@ (8004c60 <TIM_Base_SetConfig+0x14c>)
 8004b40:	4293      	cmp	r3, r2
 8004b42:	d00b      	beq.n	8004b5c <TIM_Base_SetConfig+0x48>
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	4a47      	ldr	r2, [pc, #284]	@ (8004c64 <TIM_Base_SetConfig+0x150>)
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	d007      	beq.n	8004b5c <TIM_Base_SetConfig+0x48>
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	4a46      	ldr	r2, [pc, #280]	@ (8004c68 <TIM_Base_SetConfig+0x154>)
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d003      	beq.n	8004b5c <TIM_Base_SetConfig+0x48>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	4a45      	ldr	r2, [pc, #276]	@ (8004c6c <TIM_Base_SetConfig+0x158>)
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d108      	bne.n	8004b6e <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b62:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	685b      	ldr	r3, [r3, #4]
 8004b68:	68fa      	ldr	r2, [r7, #12]
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	4a39      	ldr	r2, [pc, #228]	@ (8004c58 <TIM_Base_SetConfig+0x144>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d023      	beq.n	8004bbe <TIM_Base_SetConfig+0xaa>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b7c:	d01f      	beq.n	8004bbe <TIM_Base_SetConfig+0xaa>
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	4a36      	ldr	r2, [pc, #216]	@ (8004c5c <TIM_Base_SetConfig+0x148>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d01b      	beq.n	8004bbe <TIM_Base_SetConfig+0xaa>
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	4a35      	ldr	r2, [pc, #212]	@ (8004c60 <TIM_Base_SetConfig+0x14c>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d017      	beq.n	8004bbe <TIM_Base_SetConfig+0xaa>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	4a34      	ldr	r2, [pc, #208]	@ (8004c64 <TIM_Base_SetConfig+0x150>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d013      	beq.n	8004bbe <TIM_Base_SetConfig+0xaa>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	4a33      	ldr	r2, [pc, #204]	@ (8004c68 <TIM_Base_SetConfig+0x154>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d00f      	beq.n	8004bbe <TIM_Base_SetConfig+0xaa>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	4a33      	ldr	r2, [pc, #204]	@ (8004c70 <TIM_Base_SetConfig+0x15c>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d00b      	beq.n	8004bbe <TIM_Base_SetConfig+0xaa>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	4a32      	ldr	r2, [pc, #200]	@ (8004c74 <TIM_Base_SetConfig+0x160>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d007      	beq.n	8004bbe <TIM_Base_SetConfig+0xaa>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	4a31      	ldr	r2, [pc, #196]	@ (8004c78 <TIM_Base_SetConfig+0x164>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d003      	beq.n	8004bbe <TIM_Base_SetConfig+0xaa>
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	4a2c      	ldr	r2, [pc, #176]	@ (8004c6c <TIM_Base_SetConfig+0x158>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d108      	bne.n	8004bd0 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004bc4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	68db      	ldr	r3, [r3, #12]
 8004bca:	68fa      	ldr	r2, [r7, #12]
 8004bcc:	4313      	orrs	r3, r2
 8004bce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	695b      	ldr	r3, [r3, #20]
 8004bda:	4313      	orrs	r3, r2
 8004bdc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	68fa      	ldr	r2, [r7, #12]
 8004be2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	689a      	ldr	r2, [r3, #8]
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	681a      	ldr	r2, [r3, #0]
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	4a18      	ldr	r2, [pc, #96]	@ (8004c58 <TIM_Base_SetConfig+0x144>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d013      	beq.n	8004c24 <TIM_Base_SetConfig+0x110>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	4a1a      	ldr	r2, [pc, #104]	@ (8004c68 <TIM_Base_SetConfig+0x154>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d00f      	beq.n	8004c24 <TIM_Base_SetConfig+0x110>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	4a1a      	ldr	r2, [pc, #104]	@ (8004c70 <TIM_Base_SetConfig+0x15c>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d00b      	beq.n	8004c24 <TIM_Base_SetConfig+0x110>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	4a19      	ldr	r2, [pc, #100]	@ (8004c74 <TIM_Base_SetConfig+0x160>)
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d007      	beq.n	8004c24 <TIM_Base_SetConfig+0x110>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	4a18      	ldr	r2, [pc, #96]	@ (8004c78 <TIM_Base_SetConfig+0x164>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d003      	beq.n	8004c24 <TIM_Base_SetConfig+0x110>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	4a13      	ldr	r2, [pc, #76]	@ (8004c6c <TIM_Base_SetConfig+0x158>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d103      	bne.n	8004c2c <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	691a      	ldr	r2, [r3, #16]
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2201      	movs	r2, #1
 8004c30:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	691b      	ldr	r3, [r3, #16]
 8004c36:	f003 0301 	and.w	r3, r3, #1
 8004c3a:	2b01      	cmp	r3, #1
 8004c3c:	d105      	bne.n	8004c4a <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	691b      	ldr	r3, [r3, #16]
 8004c42:	f023 0201 	bic.w	r2, r3, #1
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	611a      	str	r2, [r3, #16]
  }
}
 8004c4a:	bf00      	nop
 8004c4c:	3714      	adds	r7, #20
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c54:	4770      	bx	lr
 8004c56:	bf00      	nop
 8004c58:	40012c00 	.word	0x40012c00
 8004c5c:	40000400 	.word	0x40000400
 8004c60:	40000800 	.word	0x40000800
 8004c64:	40000c00 	.word	0x40000c00
 8004c68:	40013400 	.word	0x40013400
 8004c6c:	40015000 	.word	0x40015000
 8004c70:	40014000 	.word	0x40014000
 8004c74:	40014400 	.word	0x40014400
 8004c78:	40014800 	.word	0x40014800

08004c7c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	b087      	sub	sp, #28
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
 8004c84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6a1b      	ldr	r3, [r3, #32]
 8004c8a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6a1b      	ldr	r3, [r3, #32]
 8004c90:	f023 0201 	bic.w	r2, r3, #1
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	685b      	ldr	r3, [r3, #4]
 8004c9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	699b      	ldr	r3, [r3, #24]
 8004ca2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004caa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004cae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	f023 0303 	bic.w	r3, r3, #3
 8004cb6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	68fa      	ldr	r2, [r7, #12]
 8004cbe:	4313      	orrs	r3, r2
 8004cc0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004cc2:	697b      	ldr	r3, [r7, #20]
 8004cc4:	f023 0302 	bic.w	r3, r3, #2
 8004cc8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	689b      	ldr	r3, [r3, #8]
 8004cce:	697a      	ldr	r2, [r7, #20]
 8004cd0:	4313      	orrs	r3, r2
 8004cd2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	4a30      	ldr	r2, [pc, #192]	@ (8004d98 <TIM_OC1_SetConfig+0x11c>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d013      	beq.n	8004d04 <TIM_OC1_SetConfig+0x88>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	4a2f      	ldr	r2, [pc, #188]	@ (8004d9c <TIM_OC1_SetConfig+0x120>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d00f      	beq.n	8004d04 <TIM_OC1_SetConfig+0x88>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	4a2e      	ldr	r2, [pc, #184]	@ (8004da0 <TIM_OC1_SetConfig+0x124>)
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d00b      	beq.n	8004d04 <TIM_OC1_SetConfig+0x88>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	4a2d      	ldr	r2, [pc, #180]	@ (8004da4 <TIM_OC1_SetConfig+0x128>)
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d007      	beq.n	8004d04 <TIM_OC1_SetConfig+0x88>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	4a2c      	ldr	r2, [pc, #176]	@ (8004da8 <TIM_OC1_SetConfig+0x12c>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d003      	beq.n	8004d04 <TIM_OC1_SetConfig+0x88>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	4a2b      	ldr	r2, [pc, #172]	@ (8004dac <TIM_OC1_SetConfig+0x130>)
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d10c      	bne.n	8004d1e <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004d04:	697b      	ldr	r3, [r7, #20]
 8004d06:	f023 0308 	bic.w	r3, r3, #8
 8004d0a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	68db      	ldr	r3, [r3, #12]
 8004d10:	697a      	ldr	r2, [r7, #20]
 8004d12:	4313      	orrs	r3, r2
 8004d14:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004d16:	697b      	ldr	r3, [r7, #20]
 8004d18:	f023 0304 	bic.w	r3, r3, #4
 8004d1c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	4a1d      	ldr	r2, [pc, #116]	@ (8004d98 <TIM_OC1_SetConfig+0x11c>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d013      	beq.n	8004d4e <TIM_OC1_SetConfig+0xd2>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	4a1c      	ldr	r2, [pc, #112]	@ (8004d9c <TIM_OC1_SetConfig+0x120>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d00f      	beq.n	8004d4e <TIM_OC1_SetConfig+0xd2>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	4a1b      	ldr	r2, [pc, #108]	@ (8004da0 <TIM_OC1_SetConfig+0x124>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d00b      	beq.n	8004d4e <TIM_OC1_SetConfig+0xd2>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	4a1a      	ldr	r2, [pc, #104]	@ (8004da4 <TIM_OC1_SetConfig+0x128>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d007      	beq.n	8004d4e <TIM_OC1_SetConfig+0xd2>
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	4a19      	ldr	r2, [pc, #100]	@ (8004da8 <TIM_OC1_SetConfig+0x12c>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d003      	beq.n	8004d4e <TIM_OC1_SetConfig+0xd2>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	4a18      	ldr	r2, [pc, #96]	@ (8004dac <TIM_OC1_SetConfig+0x130>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d111      	bne.n	8004d72 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004d4e:	693b      	ldr	r3, [r7, #16]
 8004d50:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004d54:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004d56:	693b      	ldr	r3, [r7, #16]
 8004d58:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004d5c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	695b      	ldr	r3, [r3, #20]
 8004d62:	693a      	ldr	r2, [r7, #16]
 8004d64:	4313      	orrs	r3, r2
 8004d66:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	699b      	ldr	r3, [r3, #24]
 8004d6c:	693a      	ldr	r2, [r7, #16]
 8004d6e:	4313      	orrs	r3, r2
 8004d70:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	693a      	ldr	r2, [r7, #16]
 8004d76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	68fa      	ldr	r2, [r7, #12]
 8004d7c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	685a      	ldr	r2, [r3, #4]
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	697a      	ldr	r2, [r7, #20]
 8004d8a:	621a      	str	r2, [r3, #32]
}
 8004d8c:	bf00      	nop
 8004d8e:	371c      	adds	r7, #28
 8004d90:	46bd      	mov	sp, r7
 8004d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d96:	4770      	bx	lr
 8004d98:	40012c00 	.word	0x40012c00
 8004d9c:	40013400 	.word	0x40013400
 8004da0:	40014000 	.word	0x40014000
 8004da4:	40014400 	.word	0x40014400
 8004da8:	40014800 	.word	0x40014800
 8004dac:	40015000 	.word	0x40015000

08004db0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004db0:	b480      	push	{r7}
 8004db2:	b087      	sub	sp, #28
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
 8004db8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6a1b      	ldr	r3, [r3, #32]
 8004dbe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6a1b      	ldr	r3, [r3, #32]
 8004dc4:	f023 0210 	bic.w	r2, r3, #16
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	685b      	ldr	r3, [r3, #4]
 8004dd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	699b      	ldr	r3, [r3, #24]
 8004dd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004dde:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004de2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004dea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	021b      	lsls	r3, r3, #8
 8004df2:	68fa      	ldr	r2, [r7, #12]
 8004df4:	4313      	orrs	r3, r2
 8004df6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004df8:	697b      	ldr	r3, [r7, #20]
 8004dfa:	f023 0320 	bic.w	r3, r3, #32
 8004dfe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	689b      	ldr	r3, [r3, #8]
 8004e04:	011b      	lsls	r3, r3, #4
 8004e06:	697a      	ldr	r2, [r7, #20]
 8004e08:	4313      	orrs	r3, r2
 8004e0a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	4a2c      	ldr	r2, [pc, #176]	@ (8004ec0 <TIM_OC2_SetConfig+0x110>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d007      	beq.n	8004e24 <TIM_OC2_SetConfig+0x74>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	4a2b      	ldr	r2, [pc, #172]	@ (8004ec4 <TIM_OC2_SetConfig+0x114>)
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d003      	beq.n	8004e24 <TIM_OC2_SetConfig+0x74>
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	4a2a      	ldr	r2, [pc, #168]	@ (8004ec8 <TIM_OC2_SetConfig+0x118>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d10d      	bne.n	8004e40 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004e24:	697b      	ldr	r3, [r7, #20]
 8004e26:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004e2a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	68db      	ldr	r3, [r3, #12]
 8004e30:	011b      	lsls	r3, r3, #4
 8004e32:	697a      	ldr	r2, [r7, #20]
 8004e34:	4313      	orrs	r3, r2
 8004e36:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004e38:	697b      	ldr	r3, [r7, #20]
 8004e3a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004e3e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	4a1f      	ldr	r2, [pc, #124]	@ (8004ec0 <TIM_OC2_SetConfig+0x110>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d013      	beq.n	8004e70 <TIM_OC2_SetConfig+0xc0>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	4a1e      	ldr	r2, [pc, #120]	@ (8004ec4 <TIM_OC2_SetConfig+0x114>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d00f      	beq.n	8004e70 <TIM_OC2_SetConfig+0xc0>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	4a1e      	ldr	r2, [pc, #120]	@ (8004ecc <TIM_OC2_SetConfig+0x11c>)
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d00b      	beq.n	8004e70 <TIM_OC2_SetConfig+0xc0>
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	4a1d      	ldr	r2, [pc, #116]	@ (8004ed0 <TIM_OC2_SetConfig+0x120>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d007      	beq.n	8004e70 <TIM_OC2_SetConfig+0xc0>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	4a1c      	ldr	r2, [pc, #112]	@ (8004ed4 <TIM_OC2_SetConfig+0x124>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d003      	beq.n	8004e70 <TIM_OC2_SetConfig+0xc0>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	4a17      	ldr	r2, [pc, #92]	@ (8004ec8 <TIM_OC2_SetConfig+0x118>)
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d113      	bne.n	8004e98 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004e70:	693b      	ldr	r3, [r7, #16]
 8004e72:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004e76:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004e78:	693b      	ldr	r3, [r7, #16]
 8004e7a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004e7e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	695b      	ldr	r3, [r3, #20]
 8004e84:	009b      	lsls	r3, r3, #2
 8004e86:	693a      	ldr	r2, [r7, #16]
 8004e88:	4313      	orrs	r3, r2
 8004e8a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	699b      	ldr	r3, [r3, #24]
 8004e90:	009b      	lsls	r3, r3, #2
 8004e92:	693a      	ldr	r2, [r7, #16]
 8004e94:	4313      	orrs	r3, r2
 8004e96:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	693a      	ldr	r2, [r7, #16]
 8004e9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	68fa      	ldr	r2, [r7, #12]
 8004ea2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	685a      	ldr	r2, [r3, #4]
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	697a      	ldr	r2, [r7, #20]
 8004eb0:	621a      	str	r2, [r3, #32]
}
 8004eb2:	bf00      	nop
 8004eb4:	371c      	adds	r7, #28
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebc:	4770      	bx	lr
 8004ebe:	bf00      	nop
 8004ec0:	40012c00 	.word	0x40012c00
 8004ec4:	40013400 	.word	0x40013400
 8004ec8:	40015000 	.word	0x40015000
 8004ecc:	40014000 	.word	0x40014000
 8004ed0:	40014400 	.word	0x40014400
 8004ed4:	40014800 	.word	0x40014800

08004ed8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ed8:	b480      	push	{r7}
 8004eda:	b087      	sub	sp, #28
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
 8004ee0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6a1b      	ldr	r3, [r3, #32]
 8004ee6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6a1b      	ldr	r3, [r3, #32]
 8004eec:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	685b      	ldr	r3, [r3, #4]
 8004ef8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	69db      	ldr	r3, [r3, #28]
 8004efe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004f06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	f023 0303 	bic.w	r3, r3, #3
 8004f12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	68fa      	ldr	r2, [r7, #12]
 8004f1a:	4313      	orrs	r3, r2
 8004f1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004f1e:	697b      	ldr	r3, [r7, #20]
 8004f20:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004f24:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	689b      	ldr	r3, [r3, #8]
 8004f2a:	021b      	lsls	r3, r3, #8
 8004f2c:	697a      	ldr	r2, [r7, #20]
 8004f2e:	4313      	orrs	r3, r2
 8004f30:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	4a2b      	ldr	r2, [pc, #172]	@ (8004fe4 <TIM_OC3_SetConfig+0x10c>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d007      	beq.n	8004f4a <TIM_OC3_SetConfig+0x72>
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	4a2a      	ldr	r2, [pc, #168]	@ (8004fe8 <TIM_OC3_SetConfig+0x110>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d003      	beq.n	8004f4a <TIM_OC3_SetConfig+0x72>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	4a29      	ldr	r2, [pc, #164]	@ (8004fec <TIM_OC3_SetConfig+0x114>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d10d      	bne.n	8004f66 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004f4a:	697b      	ldr	r3, [r7, #20]
 8004f4c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004f50:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	68db      	ldr	r3, [r3, #12]
 8004f56:	021b      	lsls	r3, r3, #8
 8004f58:	697a      	ldr	r2, [r7, #20]
 8004f5a:	4313      	orrs	r3, r2
 8004f5c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004f5e:	697b      	ldr	r3, [r7, #20]
 8004f60:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004f64:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	4a1e      	ldr	r2, [pc, #120]	@ (8004fe4 <TIM_OC3_SetConfig+0x10c>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d013      	beq.n	8004f96 <TIM_OC3_SetConfig+0xbe>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	4a1d      	ldr	r2, [pc, #116]	@ (8004fe8 <TIM_OC3_SetConfig+0x110>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d00f      	beq.n	8004f96 <TIM_OC3_SetConfig+0xbe>
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	4a1d      	ldr	r2, [pc, #116]	@ (8004ff0 <TIM_OC3_SetConfig+0x118>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d00b      	beq.n	8004f96 <TIM_OC3_SetConfig+0xbe>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	4a1c      	ldr	r2, [pc, #112]	@ (8004ff4 <TIM_OC3_SetConfig+0x11c>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d007      	beq.n	8004f96 <TIM_OC3_SetConfig+0xbe>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	4a1b      	ldr	r2, [pc, #108]	@ (8004ff8 <TIM_OC3_SetConfig+0x120>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d003      	beq.n	8004f96 <TIM_OC3_SetConfig+0xbe>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	4a16      	ldr	r2, [pc, #88]	@ (8004fec <TIM_OC3_SetConfig+0x114>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d113      	bne.n	8004fbe <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004f96:	693b      	ldr	r3, [r7, #16]
 8004f98:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004f9c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004f9e:	693b      	ldr	r3, [r7, #16]
 8004fa0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004fa4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	695b      	ldr	r3, [r3, #20]
 8004faa:	011b      	lsls	r3, r3, #4
 8004fac:	693a      	ldr	r2, [r7, #16]
 8004fae:	4313      	orrs	r3, r2
 8004fb0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	699b      	ldr	r3, [r3, #24]
 8004fb6:	011b      	lsls	r3, r3, #4
 8004fb8:	693a      	ldr	r2, [r7, #16]
 8004fba:	4313      	orrs	r3, r2
 8004fbc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	693a      	ldr	r2, [r7, #16]
 8004fc2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	68fa      	ldr	r2, [r7, #12]
 8004fc8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	685a      	ldr	r2, [r3, #4]
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	697a      	ldr	r2, [r7, #20]
 8004fd6:	621a      	str	r2, [r3, #32]
}
 8004fd8:	bf00      	nop
 8004fda:	371c      	adds	r7, #28
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe2:	4770      	bx	lr
 8004fe4:	40012c00 	.word	0x40012c00
 8004fe8:	40013400 	.word	0x40013400
 8004fec:	40015000 	.word	0x40015000
 8004ff0:	40014000 	.word	0x40014000
 8004ff4:	40014400 	.word	0x40014400
 8004ff8:	40014800 	.word	0x40014800

08004ffc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ffc:	b480      	push	{r7}
 8004ffe:	b087      	sub	sp, #28
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
 8005004:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6a1b      	ldr	r3, [r3, #32]
 800500a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6a1b      	ldr	r3, [r3, #32]
 8005010:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	685b      	ldr	r3, [r3, #4]
 800501c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	69db      	ldr	r3, [r3, #28]
 8005022:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800502a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800502e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005036:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	021b      	lsls	r3, r3, #8
 800503e:	68fa      	ldr	r2, [r7, #12]
 8005040:	4313      	orrs	r3, r2
 8005042:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005044:	697b      	ldr	r3, [r7, #20]
 8005046:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800504a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	689b      	ldr	r3, [r3, #8]
 8005050:	031b      	lsls	r3, r3, #12
 8005052:	697a      	ldr	r2, [r7, #20]
 8005054:	4313      	orrs	r3, r2
 8005056:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	4a2c      	ldr	r2, [pc, #176]	@ (800510c <TIM_OC4_SetConfig+0x110>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d007      	beq.n	8005070 <TIM_OC4_SetConfig+0x74>
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	4a2b      	ldr	r2, [pc, #172]	@ (8005110 <TIM_OC4_SetConfig+0x114>)
 8005064:	4293      	cmp	r3, r2
 8005066:	d003      	beq.n	8005070 <TIM_OC4_SetConfig+0x74>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	4a2a      	ldr	r2, [pc, #168]	@ (8005114 <TIM_OC4_SetConfig+0x118>)
 800506c:	4293      	cmp	r3, r2
 800506e:	d10d      	bne.n	800508c <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8005070:	697b      	ldr	r3, [r7, #20]
 8005072:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005076:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	68db      	ldr	r3, [r3, #12]
 800507c:	031b      	lsls	r3, r3, #12
 800507e:	697a      	ldr	r2, [r7, #20]
 8005080:	4313      	orrs	r3, r2
 8005082:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8005084:	697b      	ldr	r3, [r7, #20]
 8005086:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800508a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	4a1f      	ldr	r2, [pc, #124]	@ (800510c <TIM_OC4_SetConfig+0x110>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d013      	beq.n	80050bc <TIM_OC4_SetConfig+0xc0>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	4a1e      	ldr	r2, [pc, #120]	@ (8005110 <TIM_OC4_SetConfig+0x114>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d00f      	beq.n	80050bc <TIM_OC4_SetConfig+0xc0>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	4a1e      	ldr	r2, [pc, #120]	@ (8005118 <TIM_OC4_SetConfig+0x11c>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d00b      	beq.n	80050bc <TIM_OC4_SetConfig+0xc0>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	4a1d      	ldr	r2, [pc, #116]	@ (800511c <TIM_OC4_SetConfig+0x120>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d007      	beq.n	80050bc <TIM_OC4_SetConfig+0xc0>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	4a1c      	ldr	r2, [pc, #112]	@ (8005120 <TIM_OC4_SetConfig+0x124>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d003      	beq.n	80050bc <TIM_OC4_SetConfig+0xc0>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	4a17      	ldr	r2, [pc, #92]	@ (8005114 <TIM_OC4_SetConfig+0x118>)
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d113      	bne.n	80050e4 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80050bc:	693b      	ldr	r3, [r7, #16]
 80050be:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80050c2:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80050c4:	693b      	ldr	r3, [r7, #16]
 80050c6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80050ca:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	695b      	ldr	r3, [r3, #20]
 80050d0:	019b      	lsls	r3, r3, #6
 80050d2:	693a      	ldr	r2, [r7, #16]
 80050d4:	4313      	orrs	r3, r2
 80050d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	699b      	ldr	r3, [r3, #24]
 80050dc:	019b      	lsls	r3, r3, #6
 80050de:	693a      	ldr	r2, [r7, #16]
 80050e0:	4313      	orrs	r3, r2
 80050e2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	693a      	ldr	r2, [r7, #16]
 80050e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	68fa      	ldr	r2, [r7, #12]
 80050ee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	685a      	ldr	r2, [r3, #4]
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	697a      	ldr	r2, [r7, #20]
 80050fc:	621a      	str	r2, [r3, #32]
}
 80050fe:	bf00      	nop
 8005100:	371c      	adds	r7, #28
 8005102:	46bd      	mov	sp, r7
 8005104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005108:	4770      	bx	lr
 800510a:	bf00      	nop
 800510c:	40012c00 	.word	0x40012c00
 8005110:	40013400 	.word	0x40013400
 8005114:	40015000 	.word	0x40015000
 8005118:	40014000 	.word	0x40014000
 800511c:	40014400 	.word	0x40014400
 8005120:	40014800 	.word	0x40014800

08005124 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005124:	b480      	push	{r7}
 8005126:	b087      	sub	sp, #28
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
 800512c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6a1b      	ldr	r3, [r3, #32]
 8005132:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6a1b      	ldr	r3, [r3, #32]
 8005138:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	685b      	ldr	r3, [r3, #4]
 8005144:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800514a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005152:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005156:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	68fa      	ldr	r2, [r7, #12]
 800515e:	4313      	orrs	r3, r2
 8005160:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005162:	693b      	ldr	r3, [r7, #16]
 8005164:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005168:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	689b      	ldr	r3, [r3, #8]
 800516e:	041b      	lsls	r3, r3, #16
 8005170:	693a      	ldr	r2, [r7, #16]
 8005172:	4313      	orrs	r3, r2
 8005174:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	4a19      	ldr	r2, [pc, #100]	@ (80051e0 <TIM_OC5_SetConfig+0xbc>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d013      	beq.n	80051a6 <TIM_OC5_SetConfig+0x82>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	4a18      	ldr	r2, [pc, #96]	@ (80051e4 <TIM_OC5_SetConfig+0xc0>)
 8005182:	4293      	cmp	r3, r2
 8005184:	d00f      	beq.n	80051a6 <TIM_OC5_SetConfig+0x82>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	4a17      	ldr	r2, [pc, #92]	@ (80051e8 <TIM_OC5_SetConfig+0xc4>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d00b      	beq.n	80051a6 <TIM_OC5_SetConfig+0x82>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	4a16      	ldr	r2, [pc, #88]	@ (80051ec <TIM_OC5_SetConfig+0xc8>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d007      	beq.n	80051a6 <TIM_OC5_SetConfig+0x82>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	4a15      	ldr	r2, [pc, #84]	@ (80051f0 <TIM_OC5_SetConfig+0xcc>)
 800519a:	4293      	cmp	r3, r2
 800519c:	d003      	beq.n	80051a6 <TIM_OC5_SetConfig+0x82>
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	4a14      	ldr	r2, [pc, #80]	@ (80051f4 <TIM_OC5_SetConfig+0xd0>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d109      	bne.n	80051ba <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80051a6:	697b      	ldr	r3, [r7, #20]
 80051a8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80051ac:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	695b      	ldr	r3, [r3, #20]
 80051b2:	021b      	lsls	r3, r3, #8
 80051b4:	697a      	ldr	r2, [r7, #20]
 80051b6:	4313      	orrs	r3, r2
 80051b8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	697a      	ldr	r2, [r7, #20]
 80051be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	68fa      	ldr	r2, [r7, #12]
 80051c4:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	685a      	ldr	r2, [r3, #4]
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	693a      	ldr	r2, [r7, #16]
 80051d2:	621a      	str	r2, [r3, #32]
}
 80051d4:	bf00      	nop
 80051d6:	371c      	adds	r7, #28
 80051d8:	46bd      	mov	sp, r7
 80051da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051de:	4770      	bx	lr
 80051e0:	40012c00 	.word	0x40012c00
 80051e4:	40013400 	.word	0x40013400
 80051e8:	40014000 	.word	0x40014000
 80051ec:	40014400 	.word	0x40014400
 80051f0:	40014800 	.word	0x40014800
 80051f4:	40015000 	.word	0x40015000

080051f8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80051f8:	b480      	push	{r7}
 80051fa:	b087      	sub	sp, #28
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
 8005200:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6a1b      	ldr	r3, [r3, #32]
 8005206:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6a1b      	ldr	r3, [r3, #32]
 800520c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	685b      	ldr	r3, [r3, #4]
 8005218:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800521e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005226:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800522a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	021b      	lsls	r3, r3, #8
 8005232:	68fa      	ldr	r2, [r7, #12]
 8005234:	4313      	orrs	r3, r2
 8005236:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005238:	693b      	ldr	r3, [r7, #16]
 800523a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800523e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	689b      	ldr	r3, [r3, #8]
 8005244:	051b      	lsls	r3, r3, #20
 8005246:	693a      	ldr	r2, [r7, #16]
 8005248:	4313      	orrs	r3, r2
 800524a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	4a1a      	ldr	r2, [pc, #104]	@ (80052b8 <TIM_OC6_SetConfig+0xc0>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d013      	beq.n	800527c <TIM_OC6_SetConfig+0x84>
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	4a19      	ldr	r2, [pc, #100]	@ (80052bc <TIM_OC6_SetConfig+0xc4>)
 8005258:	4293      	cmp	r3, r2
 800525a:	d00f      	beq.n	800527c <TIM_OC6_SetConfig+0x84>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	4a18      	ldr	r2, [pc, #96]	@ (80052c0 <TIM_OC6_SetConfig+0xc8>)
 8005260:	4293      	cmp	r3, r2
 8005262:	d00b      	beq.n	800527c <TIM_OC6_SetConfig+0x84>
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	4a17      	ldr	r2, [pc, #92]	@ (80052c4 <TIM_OC6_SetConfig+0xcc>)
 8005268:	4293      	cmp	r3, r2
 800526a:	d007      	beq.n	800527c <TIM_OC6_SetConfig+0x84>
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	4a16      	ldr	r2, [pc, #88]	@ (80052c8 <TIM_OC6_SetConfig+0xd0>)
 8005270:	4293      	cmp	r3, r2
 8005272:	d003      	beq.n	800527c <TIM_OC6_SetConfig+0x84>
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	4a15      	ldr	r2, [pc, #84]	@ (80052cc <TIM_OC6_SetConfig+0xd4>)
 8005278:	4293      	cmp	r3, r2
 800527a:	d109      	bne.n	8005290 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800527c:	697b      	ldr	r3, [r7, #20]
 800527e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005282:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	695b      	ldr	r3, [r3, #20]
 8005288:	029b      	lsls	r3, r3, #10
 800528a:	697a      	ldr	r2, [r7, #20]
 800528c:	4313      	orrs	r3, r2
 800528e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	697a      	ldr	r2, [r7, #20]
 8005294:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	68fa      	ldr	r2, [r7, #12]
 800529a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	685a      	ldr	r2, [r3, #4]
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	693a      	ldr	r2, [r7, #16]
 80052a8:	621a      	str	r2, [r3, #32]
}
 80052aa:	bf00      	nop
 80052ac:	371c      	adds	r7, #28
 80052ae:	46bd      	mov	sp, r7
 80052b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b4:	4770      	bx	lr
 80052b6:	bf00      	nop
 80052b8:	40012c00 	.word	0x40012c00
 80052bc:	40013400 	.word	0x40013400
 80052c0:	40014000 	.word	0x40014000
 80052c4:	40014400 	.word	0x40014400
 80052c8:	40014800 	.word	0x40014800
 80052cc:	40015000 	.word	0x40015000

080052d0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80052d0:	b480      	push	{r7}
 80052d2:	b087      	sub	sp, #28
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	60f8      	str	r0, [r7, #12]
 80052d8:	60b9      	str	r1, [r7, #8]
 80052da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	6a1b      	ldr	r3, [r3, #32]
 80052e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	6a1b      	ldr	r3, [r3, #32]
 80052e6:	f023 0201 	bic.w	r2, r3, #1
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	699b      	ldr	r3, [r3, #24]
 80052f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80052f4:	693b      	ldr	r3, [r7, #16]
 80052f6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80052fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	011b      	lsls	r3, r3, #4
 8005300:	693a      	ldr	r2, [r7, #16]
 8005302:	4313      	orrs	r3, r2
 8005304:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005306:	697b      	ldr	r3, [r7, #20]
 8005308:	f023 030a 	bic.w	r3, r3, #10
 800530c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800530e:	697a      	ldr	r2, [r7, #20]
 8005310:	68bb      	ldr	r3, [r7, #8]
 8005312:	4313      	orrs	r3, r2
 8005314:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	693a      	ldr	r2, [r7, #16]
 800531a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	697a      	ldr	r2, [r7, #20]
 8005320:	621a      	str	r2, [r3, #32]
}
 8005322:	bf00      	nop
 8005324:	371c      	adds	r7, #28
 8005326:	46bd      	mov	sp, r7
 8005328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532c:	4770      	bx	lr

0800532e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800532e:	b480      	push	{r7}
 8005330:	b087      	sub	sp, #28
 8005332:	af00      	add	r7, sp, #0
 8005334:	60f8      	str	r0, [r7, #12]
 8005336:	60b9      	str	r1, [r7, #8]
 8005338:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	6a1b      	ldr	r3, [r3, #32]
 800533e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	6a1b      	ldr	r3, [r3, #32]
 8005344:	f023 0210 	bic.w	r2, r3, #16
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	699b      	ldr	r3, [r3, #24]
 8005350:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005352:	693b      	ldr	r3, [r7, #16]
 8005354:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005358:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	031b      	lsls	r3, r3, #12
 800535e:	693a      	ldr	r2, [r7, #16]
 8005360:	4313      	orrs	r3, r2
 8005362:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005364:	697b      	ldr	r3, [r7, #20]
 8005366:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800536a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800536c:	68bb      	ldr	r3, [r7, #8]
 800536e:	011b      	lsls	r3, r3, #4
 8005370:	697a      	ldr	r2, [r7, #20]
 8005372:	4313      	orrs	r3, r2
 8005374:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	693a      	ldr	r2, [r7, #16]
 800537a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	697a      	ldr	r2, [r7, #20]
 8005380:	621a      	str	r2, [r3, #32]
}
 8005382:	bf00      	nop
 8005384:	371c      	adds	r7, #28
 8005386:	46bd      	mov	sp, r7
 8005388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538c:	4770      	bx	lr

0800538e <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800538e:	b480      	push	{r7}
 8005390:	b085      	sub	sp, #20
 8005392:	af00      	add	r7, sp, #0
 8005394:	6078      	str	r0, [r7, #4]
 8005396:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	689b      	ldr	r3, [r3, #8]
 800539c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80053a4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80053a8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80053aa:	683a      	ldr	r2, [r7, #0]
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	4313      	orrs	r3, r2
 80053b0:	f043 0307 	orr.w	r3, r3, #7
 80053b4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	68fa      	ldr	r2, [r7, #12]
 80053ba:	609a      	str	r2, [r3, #8]
}
 80053bc:	bf00      	nop
 80053be:	3714      	adds	r7, #20
 80053c0:	46bd      	mov	sp, r7
 80053c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c6:	4770      	bx	lr

080053c8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80053c8:	b480      	push	{r7}
 80053ca:	b087      	sub	sp, #28
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	60f8      	str	r0, [r7, #12]
 80053d0:	60b9      	str	r1, [r7, #8]
 80053d2:	607a      	str	r2, [r7, #4]
 80053d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	689b      	ldr	r3, [r3, #8]
 80053da:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80053dc:	697b      	ldr	r3, [r7, #20]
 80053de:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80053e2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	021a      	lsls	r2, r3, #8
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	431a      	orrs	r2, r3
 80053ec:	68bb      	ldr	r3, [r7, #8]
 80053ee:	4313      	orrs	r3, r2
 80053f0:	697a      	ldr	r2, [r7, #20]
 80053f2:	4313      	orrs	r3, r2
 80053f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	697a      	ldr	r2, [r7, #20]
 80053fa:	609a      	str	r2, [r3, #8]
}
 80053fc:	bf00      	nop
 80053fe:	371c      	adds	r7, #28
 8005400:	46bd      	mov	sp, r7
 8005402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005406:	4770      	bx	lr

08005408 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005408:	b480      	push	{r7}
 800540a:	b087      	sub	sp, #28
 800540c:	af00      	add	r7, sp, #0
 800540e:	60f8      	str	r0, [r7, #12]
 8005410:	60b9      	str	r1, [r7, #8]
 8005412:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005414:	68bb      	ldr	r3, [r7, #8]
 8005416:	f003 031f 	and.w	r3, r3, #31
 800541a:	2201      	movs	r2, #1
 800541c:	fa02 f303 	lsl.w	r3, r2, r3
 8005420:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	6a1a      	ldr	r2, [r3, #32]
 8005426:	697b      	ldr	r3, [r7, #20]
 8005428:	43db      	mvns	r3, r3
 800542a:	401a      	ands	r2, r3
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	6a1a      	ldr	r2, [r3, #32]
 8005434:	68bb      	ldr	r3, [r7, #8]
 8005436:	f003 031f 	and.w	r3, r3, #31
 800543a:	6879      	ldr	r1, [r7, #4]
 800543c:	fa01 f303 	lsl.w	r3, r1, r3
 8005440:	431a      	orrs	r2, r3
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	621a      	str	r2, [r3, #32]
}
 8005446:	bf00      	nop
 8005448:	371c      	adds	r7, #28
 800544a:	46bd      	mov	sp, r7
 800544c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005450:	4770      	bx	lr
	...

08005454 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8005454:	b480      	push	{r7}
 8005456:	b083      	sub	sp, #12
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	4a26      	ldr	r2, [pc, #152]	@ (80054f8 <TIM_ResetCallback+0xa4>)
 8005460:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	4a25      	ldr	r2, [pc, #148]	@ (80054fc <TIM_ResetCallback+0xa8>)
 8005468:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	4a24      	ldr	r2, [pc, #144]	@ (8005500 <TIM_ResetCallback+0xac>)
 8005470:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	4a23      	ldr	r2, [pc, #140]	@ (8005504 <TIM_ResetCallback+0xb0>)
 8005478:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	4a22      	ldr	r2, [pc, #136]	@ (8005508 <TIM_ResetCallback+0xb4>)
 8005480:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	4a21      	ldr	r2, [pc, #132]	@ (800550c <TIM_ResetCallback+0xb8>)
 8005488:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	4a20      	ldr	r2, [pc, #128]	@ (8005510 <TIM_ResetCallback+0xbc>)
 8005490:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	4a1f      	ldr	r2, [pc, #124]	@ (8005514 <TIM_ResetCallback+0xc0>)
 8005498:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	4a1e      	ldr	r2, [pc, #120]	@ (8005518 <TIM_ResetCallback+0xc4>)
 80054a0:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	4a1d      	ldr	r2, [pc, #116]	@ (800551c <TIM_ResetCallback+0xc8>)
 80054a8:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	4a1c      	ldr	r2, [pc, #112]	@ (8005520 <TIM_ResetCallback+0xcc>)
 80054b0:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	4a1b      	ldr	r2, [pc, #108]	@ (8005524 <TIM_ResetCallback+0xd0>)
 80054b8:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	4a1a      	ldr	r2, [pc, #104]	@ (8005528 <TIM_ResetCallback+0xd4>)
 80054c0:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	4a19      	ldr	r2, [pc, #100]	@ (800552c <TIM_ResetCallback+0xd8>)
 80054c8:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  htim->EncoderIndexCallback              = HAL_TIMEx_EncoderIndexCallback;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	4a18      	ldr	r2, [pc, #96]	@ (8005530 <TIM_ResetCallback+0xdc>)
 80054d0:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  htim->DirectionChangeCallback           = HAL_TIMEx_DirectionChangeCallback;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	4a17      	ldr	r2, [pc, #92]	@ (8005534 <TIM_ResetCallback+0xe0>)
 80054d8:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  htim->IndexErrorCallback                = HAL_TIMEx_IndexErrorCallback;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	4a16      	ldr	r2, [pc, #88]	@ (8005538 <TIM_ResetCallback+0xe4>)
 80054e0:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  htim->TransitionErrorCallback           = HAL_TIMEx_TransitionErrorCallback;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	4a15      	ldr	r2, [pc, #84]	@ (800553c <TIM_ResetCallback+0xe8>)
 80054e8:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 80054ec:	bf00      	nop
 80054ee:	370c      	adds	r7, #12
 80054f0:	46bd      	mov	sp, r7
 80054f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f6:	4770      	bx	lr
 80054f8:	0800478d 	.word	0x0800478d
 80054fc:	080047a1 	.word	0x080047a1
 8005500:	08004819 	.word	0x08004819
 8005504:	0800482d 	.word	0x0800482d
 8005508:	080047c9 	.word	0x080047c9
 800550c:	080047dd 	.word	0x080047dd
 8005510:	080047b5 	.word	0x080047b5
 8005514:	080047f1 	.word	0x080047f1
 8005518:	08004805 	.word	0x08004805
 800551c:	08004841 	.word	0x08004841
 8005520:	08005795 	.word	0x08005795
 8005524:	080057a9 	.word	0x080057a9
 8005528:	080057bd 	.word	0x080057bd
 800552c:	080057d1 	.word	0x080057d1
 8005530:	080057e5 	.word	0x080057e5
 8005534:	080057f9 	.word	0x080057f9
 8005538:	0800580d 	.word	0x0800580d
 800553c:	08005821 	.word	0x08005821

08005540 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005540:	b480      	push	{r7}
 8005542:	b085      	sub	sp, #20
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
 8005548:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005550:	2b01      	cmp	r3, #1
 8005552:	d101      	bne.n	8005558 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005554:	2302      	movs	r3, #2
 8005556:	e074      	b.n	8005642 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2201      	movs	r2, #1
 800555c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2202      	movs	r2, #2
 8005564:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	685b      	ldr	r3, [r3, #4]
 800556e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	689b      	ldr	r3, [r3, #8]
 8005576:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	4a34      	ldr	r2, [pc, #208]	@ (8005650 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d009      	beq.n	8005596 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	4a33      	ldr	r2, [pc, #204]	@ (8005654 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005588:	4293      	cmp	r3, r2
 800558a:	d004      	beq.n	8005596 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	4a31      	ldr	r2, [pc, #196]	@ (8005658 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d108      	bne.n	80055a8 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800559c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	685b      	ldr	r3, [r3, #4]
 80055a2:	68fa      	ldr	r2, [r7, #12]
 80055a4:	4313      	orrs	r3, r2
 80055a6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80055ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80055b2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	68fa      	ldr	r2, [r7, #12]
 80055ba:	4313      	orrs	r3, r2
 80055bc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	68fa      	ldr	r2, [r7, #12]
 80055c4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	4a21      	ldr	r2, [pc, #132]	@ (8005650 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80055cc:	4293      	cmp	r3, r2
 80055ce:	d022      	beq.n	8005616 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80055d8:	d01d      	beq.n	8005616 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	4a1f      	ldr	r2, [pc, #124]	@ (800565c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d018      	beq.n	8005616 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	4a1d      	ldr	r2, [pc, #116]	@ (8005660 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d013      	beq.n	8005616 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	4a1c      	ldr	r2, [pc, #112]	@ (8005664 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d00e      	beq.n	8005616 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	4a15      	ldr	r2, [pc, #84]	@ (8005654 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80055fe:	4293      	cmp	r3, r2
 8005600:	d009      	beq.n	8005616 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	4a18      	ldr	r2, [pc, #96]	@ (8005668 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8005608:	4293      	cmp	r3, r2
 800560a:	d004      	beq.n	8005616 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	4a11      	ldr	r2, [pc, #68]	@ (8005658 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d10c      	bne.n	8005630 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005616:	68bb      	ldr	r3, [r7, #8]
 8005618:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800561c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	689b      	ldr	r3, [r3, #8]
 8005622:	68ba      	ldr	r2, [r7, #8]
 8005624:	4313      	orrs	r3, r2
 8005626:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	68ba      	ldr	r2, [r7, #8]
 800562e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2201      	movs	r2, #1
 8005634:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2200      	movs	r2, #0
 800563c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005640:	2300      	movs	r3, #0
}
 8005642:	4618      	mov	r0, r3
 8005644:	3714      	adds	r7, #20
 8005646:	46bd      	mov	sp, r7
 8005648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564c:	4770      	bx	lr
 800564e:	bf00      	nop
 8005650:	40012c00 	.word	0x40012c00
 8005654:	40013400 	.word	0x40013400
 8005658:	40015000 	.word	0x40015000
 800565c:	40000400 	.word	0x40000400
 8005660:	40000800 	.word	0x40000800
 8005664:	40000c00 	.word	0x40000c00
 8005668:	40014000 	.word	0x40014000

0800566c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800566c:	b480      	push	{r7}
 800566e:	b085      	sub	sp, #20
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
 8005674:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005676:	2300      	movs	r3, #0
 8005678:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005680:	2b01      	cmp	r3, #1
 8005682:	d101      	bne.n	8005688 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005684:	2302      	movs	r3, #2
 8005686:	e078      	b.n	800577a <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2201      	movs	r2, #1
 800568c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	68db      	ldr	r3, [r3, #12]
 800569a:	4313      	orrs	r3, r2
 800569c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	689b      	ldr	r3, [r3, #8]
 80056a8:	4313      	orrs	r3, r2
 80056aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	685b      	ldr	r3, [r3, #4]
 80056b6:	4313      	orrs	r3, r2
 80056b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	4313      	orrs	r3, r2
 80056c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	691b      	ldr	r3, [r3, #16]
 80056d2:	4313      	orrs	r3, r2
 80056d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	695b      	ldr	r3, [r3, #20]
 80056e0:	4313      	orrs	r3, r2
 80056e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056ee:	4313      	orrs	r3, r2
 80056f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	699b      	ldr	r3, [r3, #24]
 80056fc:	041b      	lsls	r3, r3, #16
 80056fe:	4313      	orrs	r3, r2
 8005700:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	69db      	ldr	r3, [r3, #28]
 800570c:	4313      	orrs	r3, r2
 800570e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	4a1c      	ldr	r2, [pc, #112]	@ (8005788 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d009      	beq.n	800572e <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	4a1b      	ldr	r2, [pc, #108]	@ (800578c <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8005720:	4293      	cmp	r3, r2
 8005722:	d004      	beq.n	800572e <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	4a19      	ldr	r2, [pc, #100]	@ (8005790 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800572a:	4293      	cmp	r3, r2
 800572c:	d11c      	bne.n	8005768 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005738:	051b      	lsls	r3, r3, #20
 800573a:	4313      	orrs	r3, r2
 800573c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	6a1b      	ldr	r3, [r3, #32]
 8005748:	4313      	orrs	r3, r2
 800574a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005756:	4313      	orrs	r3, r2
 8005758:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005764:	4313      	orrs	r3, r2
 8005766:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	68fa      	ldr	r2, [r7, #12]
 800576e:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2200      	movs	r2, #0
 8005774:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005778:	2300      	movs	r3, #0
}
 800577a:	4618      	mov	r0, r3
 800577c:	3714      	adds	r7, #20
 800577e:	46bd      	mov	sp, r7
 8005780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005784:	4770      	bx	lr
 8005786:	bf00      	nop
 8005788:	40012c00 	.word	0x40012c00
 800578c:	40013400 	.word	0x40013400
 8005790:	40015000 	.word	0x40015000

08005794 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005794:	b480      	push	{r7}
 8005796:	b083      	sub	sp, #12
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800579c:	bf00      	nop
 800579e:	370c      	adds	r7, #12
 80057a0:	46bd      	mov	sp, r7
 80057a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a6:	4770      	bx	lr

080057a8 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80057a8:	b480      	push	{r7}
 80057aa:	b083      	sub	sp, #12
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 80057b0:	bf00      	nop
 80057b2:	370c      	adds	r7, #12
 80057b4:	46bd      	mov	sp, r7
 80057b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ba:	4770      	bx	lr

080057bc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80057bc:	b480      	push	{r7}
 80057be:	b083      	sub	sp, #12
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80057c4:	bf00      	nop
 80057c6:	370c      	adds	r7, #12
 80057c8:	46bd      	mov	sp, r7
 80057ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ce:	4770      	bx	lr

080057d0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80057d0:	b480      	push	{r7}
 80057d2:	b083      	sub	sp, #12
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80057d8:	bf00      	nop
 80057da:	370c      	adds	r7, #12
 80057dc:	46bd      	mov	sp, r7
 80057de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e2:	4770      	bx	lr

080057e4 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80057e4:	b480      	push	{r7}
 80057e6:	b083      	sub	sp, #12
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80057ec:	bf00      	nop
 80057ee:	370c      	adds	r7, #12
 80057f0:	46bd      	mov	sp, r7
 80057f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f6:	4770      	bx	lr

080057f8 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80057f8:	b480      	push	{r7}
 80057fa:	b083      	sub	sp, #12
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8005800:	bf00      	nop
 8005802:	370c      	adds	r7, #12
 8005804:	46bd      	mov	sp, r7
 8005806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580a:	4770      	bx	lr

0800580c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800580c:	b480      	push	{r7}
 800580e:	b083      	sub	sp, #12
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8005814:	bf00      	nop
 8005816:	370c      	adds	r7, #12
 8005818:	46bd      	mov	sp, r7
 800581a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581e:	4770      	bx	lr

08005820 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8005820:	b480      	push	{r7}
 8005822:	b083      	sub	sp, #12
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8005828:	bf00      	nop
 800582a:	370c      	adds	r7, #12
 800582c:	46bd      	mov	sp, r7
 800582e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005832:	4770      	bx	lr

08005834 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b082      	sub	sp, #8
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d101      	bne.n	8005846 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005842:	2301      	movs	r3, #1
 8005844:	e050      	b.n	80058e8 <HAL_UART_Init+0xb4>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800584c:	2b00      	cmp	r3, #0
 800584e:	d114      	bne.n	800587a <HAL_UART_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2200      	movs	r2, #0
 8005854:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 8005858:	6878      	ldr	r0, [r7, #4]
 800585a:	f000 fe37 	bl	80064cc <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8005864:	2b00      	cmp	r3, #0
 8005866:	d103      	bne.n	8005870 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	4a21      	ldr	r2, [pc, #132]	@ (80058f0 <HAL_UART_Init+0xbc>)
 800586c:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8005876:	6878      	ldr	r0, [r7, #4]
 8005878:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	2224      	movs	r2, #36	@ 0x24
 800587e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	681a      	ldr	r2, [r3, #0]
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f022 0201 	bic.w	r2, r2, #1
 8005890:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005896:	2b00      	cmp	r3, #0
 8005898:	d002      	beq.n	80058a0 <HAL_UART_Init+0x6c>
  {
    UART_AdvFeatureConfig(huart);
 800589a:	6878      	ldr	r0, [r7, #4]
 800589c:	f001 f964 	bl	8006b68 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80058a0:	6878      	ldr	r0, [r7, #4]
 80058a2:	f000 fe65 	bl	8006570 <UART_SetConfig>
 80058a6:	4603      	mov	r3, r0
 80058a8:	2b01      	cmp	r3, #1
 80058aa:	d101      	bne.n	80058b0 <HAL_UART_Init+0x7c>
  {
    return HAL_ERROR;
 80058ac:	2301      	movs	r3, #1
 80058ae:	e01b      	b.n	80058e8 <HAL_UART_Init+0xb4>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	685a      	ldr	r2, [r3, #4]
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80058be:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	689a      	ldr	r2, [r3, #8]
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80058ce:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	681a      	ldr	r2, [r3, #0]
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f042 0201 	orr.w	r2, r2, #1
 80058de:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80058e0:	6878      	ldr	r0, [r7, #4]
 80058e2:	f001 f9e3 	bl	8006cac <UART_CheckIdleState>
 80058e6:	4603      	mov	r3, r0
}
 80058e8:	4618      	mov	r0, r3
 80058ea:	3708      	adds	r7, #8
 80058ec:	46bd      	mov	sp, r7
 80058ee:	bd80      	pop	{r7, pc}
 80058f0:	08001ae9 	.word	0x08001ae9

080058f4 <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 80058f4:	b480      	push	{r7}
 80058f6:	b087      	sub	sp, #28
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	60f8      	str	r0, [r7, #12]
 80058fc:	460b      	mov	r3, r1
 80058fe:	607a      	str	r2, [r7, #4]
 8005900:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8005902:	2300      	movs	r3, #0
 8005904:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d109      	bne.n	8005920 <HAL_UART_RegisterCallback+0x2c>
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005912:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    return HAL_ERROR;
 800591c:	2301      	movs	r3, #1
 800591e:	e09c      	b.n	8005a5a <HAL_UART_RegisterCallback+0x166>
  }

  if (huart->gState == HAL_UART_STATE_READY)
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005926:	2b20      	cmp	r3, #32
 8005928:	d16c      	bne.n	8005a04 <HAL_UART_RegisterCallback+0x110>
  {
    switch (CallbackID)
 800592a:	7afb      	ldrb	r3, [r7, #11]
 800592c:	2b0c      	cmp	r3, #12
 800592e:	d85e      	bhi.n	80059ee <HAL_UART_RegisterCallback+0xfa>
 8005930:	a201      	add	r2, pc, #4	@ (adr r2, 8005938 <HAL_UART_RegisterCallback+0x44>)
 8005932:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005936:	bf00      	nop
 8005938:	0800596d 	.word	0x0800596d
 800593c:	08005977 	.word	0x08005977
 8005940:	08005981 	.word	0x08005981
 8005944:	0800598b 	.word	0x0800598b
 8005948:	08005995 	.word	0x08005995
 800594c:	0800599f 	.word	0x0800599f
 8005950:	080059a9 	.word	0x080059a9
 8005954:	080059b3 	.word	0x080059b3
 8005958:	080059bd 	.word	0x080059bd
 800595c:	080059c7 	.word	0x080059c7
 8005960:	080059d1 	.word	0x080059d1
 8005964:	080059db 	.word	0x080059db
 8005968:	080059e5 	.word	0x080059e5
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	687a      	ldr	r2, [r7, #4]
 8005970:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 8005974:	e070      	b.n	8005a58 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	687a      	ldr	r2, [r7, #4]
 800597a:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 800597e:	e06b      	b.n	8005a58 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	687a      	ldr	r2, [r7, #4]
 8005984:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 8005988:	e066      	b.n	8005a58 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	687a      	ldr	r2, [r7, #4]
 800598e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 8005992:	e061      	b.n	8005a58 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	687a      	ldr	r2, [r7, #4]
 8005998:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 800599c:	e05c      	b.n	8005a58 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	687a      	ldr	r2, [r7, #4]
 80059a2:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 80059a6:	e057      	b.n	8005a58 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	687a      	ldr	r2, [r7, #4]
 80059ac:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 80059b0:	e052      	b.n	8005a58 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	687a      	ldr	r2, [r7, #4]
 80059b6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 80059ba:	e04d      	b.n	8005a58 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_WAKEUP_CB_ID :
        huart->WakeupCallback = pCallback;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	687a      	ldr	r2, [r7, #4]
 80059c0:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 80059c4:	e048      	b.n	8005a58 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_FIFO_FULL_CB_ID :
        huart->RxFifoFullCallback = pCallback;
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	687a      	ldr	r2, [r7, #4]
 80059ca:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 80059ce:	e043      	b.n	8005a58 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_FIFO_EMPTY_CB_ID :
        huart->TxFifoEmptyCallback = pCallback;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	687a      	ldr	r2, [r7, #4]
 80059d4:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 80059d8:	e03e      	b.n	8005a58 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	687a      	ldr	r2, [r7, #4]
 80059de:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 80059e2:	e039      	b.n	8005a58 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	687a      	ldr	r2, [r7, #4]
 80059e8:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 80059ec:	e034      	b.n	8005a58 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80059f4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 80059fe:	2301      	movs	r3, #1
 8005a00:	75fb      	strb	r3, [r7, #23]
        break;
 8005a02:	e029      	b.n	8005a58 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d11a      	bne.n	8005a44 <HAL_UART_RegisterCallback+0x150>
  {
    switch (CallbackID)
 8005a0e:	7afb      	ldrb	r3, [r7, #11]
 8005a10:	2b0b      	cmp	r3, #11
 8005a12:	d002      	beq.n	8005a1a <HAL_UART_RegisterCallback+0x126>
 8005a14:	2b0c      	cmp	r3, #12
 8005a16:	d005      	beq.n	8005a24 <HAL_UART_RegisterCallback+0x130>
 8005a18:	e009      	b.n	8005a2e <HAL_UART_RegisterCallback+0x13a>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	687a      	ldr	r2, [r7, #4]
 8005a1e:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 8005a22:	e019      	b.n	8005a58 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	687a      	ldr	r2, [r7, #4]
 8005a28:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 8005a2c:	e014      	b.n	8005a58 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a34:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 8005a3e:	2301      	movs	r3, #1
 8005a40:	75fb      	strb	r3, [r7, #23]
        break;
 8005a42:	e009      	b.n	8005a58 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a4a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    status =  HAL_ERROR;
 8005a54:	2301      	movs	r3, #1
 8005a56:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8005a58:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	371c      	adds	r7, #28
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a64:	4770      	bx	lr
 8005a66:	bf00      	nop

08005a68 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b08a      	sub	sp, #40	@ 0x28
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	60f8      	str	r0, [r7, #12]
 8005a70:	60b9      	str	r1, [r7, #8]
 8005a72:	4613      	mov	r3, r2
 8005a74:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005a7c:	2b20      	cmp	r3, #32
 8005a7e:	d137      	bne.n	8005af0 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a80:	68bb      	ldr	r3, [r7, #8]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d002      	beq.n	8005a8c <HAL_UART_Receive_IT+0x24>
 8005a86:	88fb      	ldrh	r3, [r7, #6]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d101      	bne.n	8005a90 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005a8c:	2301      	movs	r3, #1
 8005a8e:	e030      	b.n	8005af2 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	2200      	movs	r2, #0
 8005a94:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	4a18      	ldr	r2, [pc, #96]	@ (8005afc <HAL_UART_Receive_IT+0x94>)
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d01f      	beq.n	8005ae0 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	685b      	ldr	r3, [r3, #4]
 8005aa6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d018      	beq.n	8005ae0 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ab4:	697b      	ldr	r3, [r7, #20]
 8005ab6:	e853 3f00 	ldrex	r3, [r3]
 8005aba:	613b      	str	r3, [r7, #16]
   return(result);
 8005abc:	693b      	ldr	r3, [r7, #16]
 8005abe:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005ac2:	627b      	str	r3, [r7, #36]	@ 0x24
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	461a      	mov	r2, r3
 8005aca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005acc:	623b      	str	r3, [r7, #32]
 8005ace:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ad0:	69f9      	ldr	r1, [r7, #28]
 8005ad2:	6a3a      	ldr	r2, [r7, #32]
 8005ad4:	e841 2300 	strex	r3, r2, [r1]
 8005ad8:	61bb      	str	r3, [r7, #24]
   return(result);
 8005ada:	69bb      	ldr	r3, [r7, #24]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d1e6      	bne.n	8005aae <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005ae0:	88fb      	ldrh	r3, [r7, #6]
 8005ae2:	461a      	mov	r2, r3
 8005ae4:	68b9      	ldr	r1, [r7, #8]
 8005ae6:	68f8      	ldr	r0, [r7, #12]
 8005ae8:	f001 f9f8 	bl	8006edc <UART_Start_Receive_IT>
 8005aec:	4603      	mov	r3, r0
 8005aee:	e000      	b.n	8005af2 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005af0:	2302      	movs	r3, #2
  }
}
 8005af2:	4618      	mov	r0, r3
 8005af4:	3728      	adds	r7, #40	@ 0x28
 8005af6:	46bd      	mov	sp, r7
 8005af8:	bd80      	pop	{r7, pc}
 8005afa:	bf00      	nop
 8005afc:	40008000 	.word	0x40008000

08005b00 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b08a      	sub	sp, #40	@ 0x28
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	60f8      	str	r0, [r7, #12]
 8005b08:	60b9      	str	r1, [r7, #8]
 8005b0a:	4613      	mov	r3, r2
 8005b0c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b14:	2b20      	cmp	r3, #32
 8005b16:	d167      	bne.n	8005be8 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b18:	68bb      	ldr	r3, [r7, #8]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d002      	beq.n	8005b24 <HAL_UART_Transmit_DMA+0x24>
 8005b1e:	88fb      	ldrh	r3, [r7, #6]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d101      	bne.n	8005b28 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8005b24:	2301      	movs	r3, #1
 8005b26:	e060      	b.n	8005bea <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	68ba      	ldr	r2, [r7, #8]
 8005b2c:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	88fa      	ldrh	r2, [r7, #6]
 8005b32:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	88fa      	ldrh	r2, [r7, #6]
 8005b3a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	2200      	movs	r2, #0
 8005b42:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	2221      	movs	r2, #33	@ 0x21
 8005b4a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d028      	beq.n	8005ba8 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005b5a:	4a26      	ldr	r2, [pc, #152]	@ (8005bf4 <HAL_UART_Transmit_DMA+0xf4>)
 8005b5c:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005b62:	4a25      	ldr	r2, [pc, #148]	@ (8005bf8 <HAL_UART_Transmit_DMA+0xf8>)
 8005b64:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005b6a:	4a24      	ldr	r2, [pc, #144]	@ (8005bfc <HAL_UART_Transmit_DMA+0xfc>)
 8005b6c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005b72:	2200      	movs	r2, #0
 8005b74:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b7e:	4619      	mov	r1, r3
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	3328      	adds	r3, #40	@ 0x28
 8005b86:	461a      	mov	r2, r3
 8005b88:	88fb      	ldrh	r3, [r7, #6]
 8005b8a:	f7fc faeb 	bl	8002164 <HAL_DMA_Start_IT>
 8005b8e:	4603      	mov	r3, r0
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d009      	beq.n	8005ba8 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	2210      	movs	r2, #16
 8005b98:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	2220      	movs	r2, #32
 8005ba0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 8005ba4:	2301      	movs	r3, #1
 8005ba6:	e020      	b.n	8005bea <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	2240      	movs	r2, #64	@ 0x40
 8005bae:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	3308      	adds	r3, #8
 8005bb6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bb8:	697b      	ldr	r3, [r7, #20]
 8005bba:	e853 3f00 	ldrex	r3, [r3]
 8005bbe:	613b      	str	r3, [r7, #16]
   return(result);
 8005bc0:	693b      	ldr	r3, [r7, #16]
 8005bc2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005bc6:	627b      	str	r3, [r7, #36]	@ 0x24
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	3308      	adds	r3, #8
 8005bce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005bd0:	623a      	str	r2, [r7, #32]
 8005bd2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bd4:	69f9      	ldr	r1, [r7, #28]
 8005bd6:	6a3a      	ldr	r2, [r7, #32]
 8005bd8:	e841 2300 	strex	r3, r2, [r1]
 8005bdc:	61bb      	str	r3, [r7, #24]
   return(result);
 8005bde:	69bb      	ldr	r3, [r7, #24]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d1e5      	bne.n	8005bb0 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8005be4:	2300      	movs	r3, #0
 8005be6:	e000      	b.n	8005bea <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8005be8:	2302      	movs	r3, #2
  }
}
 8005bea:	4618      	mov	r0, r3
 8005bec:	3728      	adds	r7, #40	@ 0x28
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	bd80      	pop	{r7, pc}
 8005bf2:	bf00      	nop
 8005bf4:	0800726f 	.word	0x0800726f
 8005bf8:	0800730d 	.word	0x0800730d
 8005bfc:	0800732d 	.word	0x0800732d

08005c00 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b09a      	sub	sp, #104	@ 0x68
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
  /* Disable PEIE, EIE, RXNEIE and RXFTIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c0e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005c10:	e853 3f00 	ldrex	r3, [r3]
 8005c14:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8005c16:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005c18:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005c1c:	667b      	str	r3, [r7, #100]	@ 0x64
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	461a      	mov	r2, r3
 8005c24:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005c26:	657b      	str	r3, [r7, #84]	@ 0x54
 8005c28:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c2a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005c2c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005c2e:	e841 2300 	strex	r3, r2, [r1]
 8005c32:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8005c34:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d1e6      	bne.n	8005c08 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	3308      	adds	r3, #8
 8005c40:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c44:	e853 3f00 	ldrex	r3, [r3]
 8005c48:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005c4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c4c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005c50:	f023 0301 	bic.w	r3, r3, #1
 8005c54:	663b      	str	r3, [r7, #96]	@ 0x60
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	3308      	adds	r3, #8
 8005c5c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005c5e:	643a      	str	r2, [r7, #64]	@ 0x40
 8005c60:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c62:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005c64:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005c66:	e841 2300 	strex	r3, r2, [r1]
 8005c6a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005c6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d1e3      	bne.n	8005c3a <HAL_UART_AbortReceive+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005c76:	2b01      	cmp	r3, #1
 8005c78:	d118      	bne.n	8005cac <HAL_UART_AbortReceive+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c80:	6a3b      	ldr	r3, [r7, #32]
 8005c82:	e853 3f00 	ldrex	r3, [r3]
 8005c86:	61fb      	str	r3, [r7, #28]
   return(result);
 8005c88:	69fb      	ldr	r3, [r7, #28]
 8005c8a:	f023 0310 	bic.w	r3, r3, #16
 8005c8e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	461a      	mov	r2, r3
 8005c96:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005c98:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005c9a:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c9c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005c9e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005ca0:	e841 2300 	strex	r3, r2, [r1]
 8005ca4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005ca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d1e6      	bne.n	8005c7a <HAL_UART_AbortReceive+0x7a>
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	689b      	ldr	r3, [r3, #8]
 8005cb2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005cb6:	2b40      	cmp	r3, #64	@ 0x40
 8005cb8:	d13b      	bne.n	8005d32 <HAL_UART_AbortReceive+0x132>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	3308      	adds	r3, #8
 8005cc0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	e853 3f00 	ldrex	r3, [r3]
 8005cc8:	60bb      	str	r3, [r7, #8]
   return(result);
 8005cca:	68bb      	ldr	r3, [r7, #8]
 8005ccc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005cd0:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	3308      	adds	r3, #8
 8005cd8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005cda:	61ba      	str	r2, [r7, #24]
 8005cdc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cde:	6979      	ldr	r1, [r7, #20]
 8005ce0:	69ba      	ldr	r2, [r7, #24]
 8005ce2:	e841 2300 	strex	r3, r2, [r1]
 8005ce6:	613b      	str	r3, [r7, #16]
   return(result);
 8005ce8:	693b      	ldr	r3, [r7, #16]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d1e5      	bne.n	8005cba <HAL_UART_AbortReceive+0xba>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d01c      	beq.n	8005d32 <HAL_UART_AbortReceive+0x132>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005cfe:	2200      	movs	r2, #0
 8005d00:	639a      	str	r2, [r3, #56]	@ 0x38

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005d08:	4618      	mov	r0, r3
 8005d0a:	f7fc faa6 	bl	800225a <HAL_DMA_Abort>
 8005d0e:	4603      	mov	r3, r0
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d00e      	beq.n	8005d32 <HAL_UART_AbortReceive+0x132>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	f7fc fc0c 	bl	8002538 <HAL_DMA_GetError>
 8005d20:	4603      	mov	r3, r0
 8005d22:	2b20      	cmp	r3, #32
 8005d24:	d105      	bne.n	8005d32 <HAL_UART_AbortReceive+0x132>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2210      	movs	r2, #16
 8005d2a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 8005d2e:	2303      	movs	r3, #3
 8005d30:	e017      	b.n	8005d62 <HAL_UART_AbortReceive+0x162>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0U;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	2200      	movs	r2, #0
 8005d36:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	220f      	movs	r2, #15
 8005d40:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	699a      	ldr	r2, [r3, #24]
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f042 0208 	orr.w	r2, r2, #8
 8005d50:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2220      	movs	r2, #32
 8005d56:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return HAL_OK;
 8005d60:	2300      	movs	r3, #0
}
 8005d62:	4618      	mov	r0, r3
 8005d64:	3768      	adds	r7, #104	@ 0x68
 8005d66:	46bd      	mov	sp, r7
 8005d68:	bd80      	pop	{r7, pc}
	...

08005d6c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	b0ba      	sub	sp, #232	@ 0xe8
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	69db      	ldr	r3, [r3, #28]
 8005d7a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	689b      	ldr	r3, [r3, #8]
 8005d8e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005d92:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8005d96:	f640 030f 	movw	r3, #2063	@ 0x80f
 8005d9a:	4013      	ands	r3, r2
 8005d9c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8005da0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d11b      	bne.n	8005de0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005da8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005dac:	f003 0320 	and.w	r3, r3, #32
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d015      	beq.n	8005de0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005db4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005db8:	f003 0320 	and.w	r3, r3, #32
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d105      	bne.n	8005dcc <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005dc0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005dc4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d009      	beq.n	8005de0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	f000 8312 	beq.w	80063fa <HAL_UART_IRQHandler+0x68e>
      {
        huart->RxISR(huart);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005dda:	6878      	ldr	r0, [r7, #4]
 8005ddc:	4798      	blx	r3
      }
      return;
 8005dde:	e30c      	b.n	80063fa <HAL_UART_IRQHandler+0x68e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005de0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	f000 8129 	beq.w	800603c <HAL_UART_IRQHandler+0x2d0>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005dea:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8005dee:	4b90      	ldr	r3, [pc, #576]	@ (8006030 <HAL_UART_IRQHandler+0x2c4>)
 8005df0:	4013      	ands	r3, r2
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d106      	bne.n	8005e04 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005df6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8005dfa:	4b8e      	ldr	r3, [pc, #568]	@ (8006034 <HAL_UART_IRQHandler+0x2c8>)
 8005dfc:	4013      	ands	r3, r2
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	f000 811c 	beq.w	800603c <HAL_UART_IRQHandler+0x2d0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005e04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e08:	f003 0301 	and.w	r3, r3, #1
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d011      	beq.n	8005e34 <HAL_UART_IRQHandler+0xc8>
 8005e10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005e14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d00b      	beq.n	8005e34 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	2201      	movs	r2, #1
 8005e22:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e2a:	f043 0201 	orr.w	r2, r3, #1
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005e34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e38:	f003 0302 	and.w	r3, r3, #2
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d011      	beq.n	8005e64 <HAL_UART_IRQHandler+0xf8>
 8005e40:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005e44:	f003 0301 	and.w	r3, r3, #1
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d00b      	beq.n	8005e64 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	2202      	movs	r2, #2
 8005e52:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e5a:	f043 0204 	orr.w	r2, r3, #4
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005e64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e68:	f003 0304 	and.w	r3, r3, #4
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d011      	beq.n	8005e94 <HAL_UART_IRQHandler+0x128>
 8005e70:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005e74:	f003 0301 	and.w	r3, r3, #1
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d00b      	beq.n	8005e94 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	2204      	movs	r2, #4
 8005e82:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e8a:	f043 0202 	orr.w	r2, r3, #2
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005e94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e98:	f003 0308 	and.w	r3, r3, #8
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d017      	beq.n	8005ed0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005ea0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005ea4:	f003 0320 	and.w	r3, r3, #32
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d105      	bne.n	8005eb8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005eac:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8005eb0:	4b5f      	ldr	r3, [pc, #380]	@ (8006030 <HAL_UART_IRQHandler+0x2c4>)
 8005eb2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d00b      	beq.n	8005ed0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	2208      	movs	r2, #8
 8005ebe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ec6:	f043 0208 	orr.w	r2, r3, #8
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005ed0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ed4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d012      	beq.n	8005f02 <HAL_UART_IRQHandler+0x196>
 8005edc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005ee0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d00c      	beq.n	8005f02 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005ef0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ef8:	f043 0220 	orr.w	r2, r3, #32
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	f000 8278 	beq.w	80063fe <HAL_UART_IRQHandler+0x692>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005f0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f12:	f003 0320 	and.w	r3, r3, #32
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d013      	beq.n	8005f42 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005f1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f1e:	f003 0320 	and.w	r3, r3, #32
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d105      	bne.n	8005f32 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005f26:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005f2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d007      	beq.n	8005f42 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d003      	beq.n	8005f42 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005f3e:	6878      	ldr	r0, [r7, #4]
 8005f40:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f48:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	689b      	ldr	r3, [r3, #8]
 8005f52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f56:	2b40      	cmp	r3, #64	@ 0x40
 8005f58:	d005      	beq.n	8005f66 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005f5a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005f5e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d058      	beq.n	8006018 <HAL_UART_IRQHandler+0x2ac>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005f66:	6878      	ldr	r0, [r7, #4]
 8005f68:	f001 f91b 	bl	80071a2 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	689b      	ldr	r3, [r3, #8]
 8005f72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f76:	2b40      	cmp	r3, #64	@ 0x40
 8005f78:	d148      	bne.n	800600c <HAL_UART_IRQHandler+0x2a0>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	3308      	adds	r3, #8
 8005f80:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f84:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005f88:	e853 3f00 	ldrex	r3, [r3]
 8005f8c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005f90:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005f94:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005f98:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	3308      	adds	r3, #8
 8005fa2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005fa6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005faa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fae:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005fb2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005fb6:	e841 2300 	strex	r3, r2, [r1]
 8005fba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005fbe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d1d9      	bne.n	8005f7a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d017      	beq.n	8006000 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005fd6:	4a18      	ldr	r2, [pc, #96]	@ (8006038 <HAL_UART_IRQHandler+0x2cc>)
 8005fd8:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	f7fc f993 	bl	800230c <HAL_DMA_Abort_IT>
 8005fe6:	4603      	mov	r3, r0
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d01f      	beq.n	800602c <HAL_UART_IRQHandler+0x2c0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005ff2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ff4:	687a      	ldr	r2, [r7, #4]
 8005ff6:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8005ffa:	4610      	mov	r0, r2
 8005ffc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ffe:	e015      	b.n	800602c <HAL_UART_IRQHandler+0x2c0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006006:	6878      	ldr	r0, [r7, #4]
 8006008:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800600a:	e00f      	b.n	800602c <HAL_UART_IRQHandler+0x2c0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006012:	6878      	ldr	r0, [r7, #4]
 8006014:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006016:	e009      	b.n	800602c <HAL_UART_IRQHandler+0x2c0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800601e:	6878      	ldr	r0, [r7, #4]
 8006020:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	2200      	movs	r2, #0
 8006026:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800602a:	e1e8      	b.n	80063fe <HAL_UART_IRQHandler+0x692>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800602c:	bf00      	nop
    return;
 800602e:	e1e6      	b.n	80063fe <HAL_UART_IRQHandler+0x692>
 8006030:	10000001 	.word	0x10000001
 8006034:	04000120 	.word	0x04000120
 8006038:	080073b1 	.word	0x080073b1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006040:	2b01      	cmp	r3, #1
 8006042:	f040 8176 	bne.w	8006332 <HAL_UART_IRQHandler+0x5c6>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006046:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800604a:	f003 0310 	and.w	r3, r3, #16
 800604e:	2b00      	cmp	r3, #0
 8006050:	f000 816f 	beq.w	8006332 <HAL_UART_IRQHandler+0x5c6>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006054:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006058:	f003 0310 	and.w	r3, r3, #16
 800605c:	2b00      	cmp	r3, #0
 800605e:	f000 8168 	beq.w	8006332 <HAL_UART_IRQHandler+0x5c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	2210      	movs	r2, #16
 8006068:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	689b      	ldr	r3, [r3, #8]
 8006070:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006074:	2b40      	cmp	r3, #64	@ 0x40
 8006076:	f040 80dc 	bne.w	8006232 <HAL_UART_IRQHandler+0x4c6>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	685b      	ldr	r3, [r3, #4]
 8006084:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006088:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800608c:	2b00      	cmp	r3, #0
 800608e:	f000 80b1 	beq.w	80061f4 <HAL_UART_IRQHandler+0x488>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006098:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800609c:	429a      	cmp	r2, r3
 800609e:	f080 80a9 	bcs.w	80061f4 <HAL_UART_IRQHandler+0x488>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80060a8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f003 0320 	and.w	r3, r3, #32
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	f040 8087 	bne.w	80061ce <HAL_UART_IRQHandler+0x462>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060c8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80060cc:	e853 3f00 	ldrex	r3, [r3]
 80060d0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80060d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80060d8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80060dc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	461a      	mov	r2, r3
 80060e6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80060ea:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80060ee:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060f2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80060f6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80060fa:	e841 2300 	strex	r3, r2, [r1]
 80060fe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006102:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006106:	2b00      	cmp	r3, #0
 8006108:	d1da      	bne.n	80060c0 <HAL_UART_IRQHandler+0x354>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	3308      	adds	r3, #8
 8006110:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006112:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006114:	e853 3f00 	ldrex	r3, [r3]
 8006118:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800611a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800611c:	f023 0301 	bic.w	r3, r3, #1
 8006120:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	3308      	adds	r3, #8
 800612a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800612e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006132:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006134:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006136:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800613a:	e841 2300 	strex	r3, r2, [r1]
 800613e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006140:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006142:	2b00      	cmp	r3, #0
 8006144:	d1e1      	bne.n	800610a <HAL_UART_IRQHandler+0x39e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	3308      	adds	r3, #8
 800614c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800614e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006150:	e853 3f00 	ldrex	r3, [r3]
 8006154:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006156:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006158:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800615c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	3308      	adds	r3, #8
 8006166:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800616a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800616c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800616e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006170:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006172:	e841 2300 	strex	r3, r2, [r1]
 8006176:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006178:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800617a:	2b00      	cmp	r3, #0
 800617c:	d1e3      	bne.n	8006146 <HAL_UART_IRQHandler+0x3da>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2220      	movs	r2, #32
 8006182:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	2200      	movs	r2, #0
 800618a:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006192:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006194:	e853 3f00 	ldrex	r3, [r3]
 8006198:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800619a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800619c:	f023 0310 	bic.w	r3, r3, #16
 80061a0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	461a      	mov	r2, r3
 80061aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80061ae:	65bb      	str	r3, [r7, #88]	@ 0x58
 80061b0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061b2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80061b4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80061b6:	e841 2300 	strex	r3, r2, [r1]
 80061ba:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80061bc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d1e4      	bne.n	800618c <HAL_UART_IRQHandler+0x420>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80061c8:	4618      	mov	r0, r3
 80061ca:	f7fc f846 	bl	800225a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	2202      	movs	r2, #2
 80061d2:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80061da:	687a      	ldr	r2, [r7, #4]
 80061dc:	f8b2 105c 	ldrh.w	r1, [r2, #92]	@ 0x5c
 80061e0:	687a      	ldr	r2, [r7, #4]
 80061e2:	f8b2 205e 	ldrh.w	r2, [r2, #94]	@ 0x5e
 80061e6:	b292      	uxth	r2, r2
 80061e8:	1a8a      	subs	r2, r1, r2
 80061ea:	b292      	uxth	r2, r2
 80061ec:	4611      	mov	r1, r2
 80061ee:	6878      	ldr	r0, [r7, #4]
 80061f0:	4798      	blx	r3
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80061f2:	e106      	b.n	8006402 <HAL_UART_IRQHandler+0x696>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80061fa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80061fe:	429a      	cmp	r2, r3
 8006200:	f040 80ff 	bne.w	8006402 <HAL_UART_IRQHandler+0x696>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f003 0320 	and.w	r3, r3, #32
 8006212:	2b20      	cmp	r3, #32
 8006214:	f040 80f5 	bne.w	8006402 <HAL_UART_IRQHandler+0x696>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2202      	movs	r2, #2
 800621c:	671a      	str	r2, [r3, #112]	@ 0x70
            huart->RxEventCallback(huart, huart->RxXferSize);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8006224:	687a      	ldr	r2, [r7, #4]
 8006226:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800622a:	4611      	mov	r1, r2
 800622c:	6878      	ldr	r0, [r7, #4]
 800622e:	4798      	blx	r3
      return;
 8006230:	e0e7      	b.n	8006402 <HAL_UART_IRQHandler+0x696>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800623e:	b29b      	uxth	r3, r3
 8006240:	1ad3      	subs	r3, r2, r3
 8006242:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800624c:	b29b      	uxth	r3, r3
 800624e:	2b00      	cmp	r3, #0
 8006250:	f000 80d9 	beq.w	8006406 <HAL_UART_IRQHandler+0x69a>
          && (nb_rx_data > 0U))
 8006254:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006258:	2b00      	cmp	r3, #0
 800625a:	f000 80d4 	beq.w	8006406 <HAL_UART_IRQHandler+0x69a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006264:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006266:	e853 3f00 	ldrex	r3, [r3]
 800626a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800626c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800626e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006272:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	461a      	mov	r2, r3
 800627c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006280:	647b      	str	r3, [r7, #68]	@ 0x44
 8006282:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006284:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006286:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006288:	e841 2300 	strex	r3, r2, [r1]
 800628c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800628e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006290:	2b00      	cmp	r3, #0
 8006292:	d1e4      	bne.n	800625e <HAL_UART_IRQHandler+0x4f2>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	3308      	adds	r3, #8
 800629a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800629c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800629e:	e853 3f00 	ldrex	r3, [r3]
 80062a2:	623b      	str	r3, [r7, #32]
   return(result);
 80062a4:	6a3b      	ldr	r3, [r7, #32]
 80062a6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80062aa:	f023 0301 	bic.w	r3, r3, #1
 80062ae:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	3308      	adds	r3, #8
 80062b8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80062bc:	633a      	str	r2, [r7, #48]	@ 0x30
 80062be:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062c0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80062c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80062c4:	e841 2300 	strex	r3, r2, [r1]
 80062c8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80062ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d1e1      	bne.n	8006294 <HAL_UART_IRQHandler+0x528>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2220      	movs	r2, #32
 80062d4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2200      	movs	r2, #0
 80062dc:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	2200      	movs	r2, #0
 80062e2:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062ea:	693b      	ldr	r3, [r7, #16]
 80062ec:	e853 3f00 	ldrex	r3, [r3]
 80062f0:	60fb      	str	r3, [r7, #12]
   return(result);
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	f023 0310 	bic.w	r3, r3, #16
 80062f8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	461a      	mov	r2, r3
 8006302:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006306:	61fb      	str	r3, [r7, #28]
 8006308:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800630a:	69b9      	ldr	r1, [r7, #24]
 800630c:	69fa      	ldr	r2, [r7, #28]
 800630e:	e841 2300 	strex	r3, r2, [r1]
 8006312:	617b      	str	r3, [r7, #20]
   return(result);
 8006314:	697b      	ldr	r3, [r7, #20]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d1e4      	bne.n	80062e4 <HAL_UART_IRQHandler+0x578>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	2202      	movs	r2, #2
 800631e:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8006326:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	@ 0xce
 800632a:	4611      	mov	r1, r2
 800632c:	6878      	ldr	r0, [r7, #4]
 800632e:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006330:	e069      	b.n	8006406 <HAL_UART_IRQHandler+0x69a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006332:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006336:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800633a:	2b00      	cmp	r3, #0
 800633c:	d010      	beq.n	8006360 <HAL_UART_IRQHandler+0x5f4>
 800633e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006342:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006346:	2b00      	cmp	r3, #0
 8006348:	d00a      	beq.n	8006360 <HAL_UART_IRQHandler+0x5f4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8006352:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800635a:	6878      	ldr	r0, [r7, #4]
 800635c:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800635e:	e055      	b.n	800640c <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006360:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006364:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006368:	2b00      	cmp	r3, #0
 800636a:	d014      	beq.n	8006396 <HAL_UART_IRQHandler+0x62a>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800636c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006370:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006374:	2b00      	cmp	r3, #0
 8006376:	d105      	bne.n	8006384 <HAL_UART_IRQHandler+0x618>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006378:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800637c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006380:	2b00      	cmp	r3, #0
 8006382:	d008      	beq.n	8006396 <HAL_UART_IRQHandler+0x62a>
  {
    if (huart->TxISR != NULL)
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006388:	2b00      	cmp	r3, #0
 800638a:	d03e      	beq.n	800640a <HAL_UART_IRQHandler+0x69e>
    {
      huart->TxISR(huart);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006390:	6878      	ldr	r0, [r7, #4]
 8006392:	4798      	blx	r3
    }
    return;
 8006394:	e039      	b.n	800640a <HAL_UART_IRQHandler+0x69e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006396:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800639a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d009      	beq.n	80063b6 <HAL_UART_IRQHandler+0x64a>
 80063a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80063a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d003      	beq.n	80063b6 <HAL_UART_IRQHandler+0x64a>
  {
    UART_EndTransmit_IT(huart);
 80063ae:	6878      	ldr	r0, [r7, #4]
 80063b0:	f001 f812 	bl	80073d8 <UART_EndTransmit_IT>
    return;
 80063b4:	e02a      	b.n	800640c <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80063b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80063ba:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d00b      	beq.n	80063da <HAL_UART_IRQHandler+0x66e>
 80063c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80063c6:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d005      	beq.n	80063da <HAL_UART_IRQHandler+0x66e>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80063d4:	6878      	ldr	r0, [r7, #4]
 80063d6:	4798      	blx	r3
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80063d8:	e018      	b.n	800640c <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80063da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80063de:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d012      	beq.n	800640c <HAL_UART_IRQHandler+0x6a0>
 80063e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	da0e      	bge.n	800640c <HAL_UART_IRQHandler+0x6a0>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80063f4:	6878      	ldr	r0, [r7, #4]
 80063f6:	4798      	blx	r3
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80063f8:	e008      	b.n	800640c <HAL_UART_IRQHandler+0x6a0>
      return;
 80063fa:	bf00      	nop
 80063fc:	e006      	b.n	800640c <HAL_UART_IRQHandler+0x6a0>
    return;
 80063fe:	bf00      	nop
 8006400:	e004      	b.n	800640c <HAL_UART_IRQHandler+0x6a0>
      return;
 8006402:	bf00      	nop
 8006404:	e002      	b.n	800640c <HAL_UART_IRQHandler+0x6a0>
      return;
 8006406:	bf00      	nop
 8006408:	e000      	b.n	800640c <HAL_UART_IRQHandler+0x6a0>
    return;
 800640a:	bf00      	nop
  }
}
 800640c:	37e8      	adds	r7, #232	@ 0xe8
 800640e:	46bd      	mov	sp, r7
 8006410:	bd80      	pop	{r7, pc}
 8006412:	bf00      	nop

08006414 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006414:	b480      	push	{r7}
 8006416:	b083      	sub	sp, #12
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800641c:	bf00      	nop
 800641e:	370c      	adds	r7, #12
 8006420:	46bd      	mov	sp, r7
 8006422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006426:	4770      	bx	lr

08006428 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006428:	b480      	push	{r7}
 800642a:	b083      	sub	sp, #12
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8006430:	bf00      	nop
 8006432:	370c      	adds	r7, #12
 8006434:	46bd      	mov	sp, r7
 8006436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643a:	4770      	bx	lr

0800643c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800643c:	b480      	push	{r7}
 800643e:	b083      	sub	sp, #12
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8006444:	bf00      	nop
 8006446:	370c      	adds	r7, #12
 8006448:	46bd      	mov	sp, r7
 800644a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644e:	4770      	bx	lr

08006450 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006450:	b480      	push	{r7}
 8006452:	b083      	sub	sp, #12
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8006458:	bf00      	nop
 800645a:	370c      	adds	r7, #12
 800645c:	46bd      	mov	sp, r7
 800645e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006462:	4770      	bx	lr

08006464 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006464:	b480      	push	{r7}
 8006466:	b083      	sub	sp, #12
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800646c:	bf00      	nop
 800646e:	370c      	adds	r7, #12
 8006470:	46bd      	mov	sp, r7
 8006472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006476:	4770      	bx	lr

08006478 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8006478:	b480      	push	{r7}
 800647a:	b083      	sub	sp, #12
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8006480:	bf00      	nop
 8006482:	370c      	adds	r7, #12
 8006484:	46bd      	mov	sp, r7
 8006486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648a:	4770      	bx	lr

0800648c <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800648c:	b480      	push	{r7}
 800648e:	b083      	sub	sp, #12
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8006494:	bf00      	nop
 8006496:	370c      	adds	r7, #12
 8006498:	46bd      	mov	sp, r7
 800649a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649e:	4770      	bx	lr

080064a0 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 80064a0:	b480      	push	{r7}
 80064a2:	b083      	sub	sp, #12
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 80064a8:	bf00      	nop
 80064aa:	370c      	adds	r7, #12
 80064ac:	46bd      	mov	sp, r7
 80064ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b2:	4770      	bx	lr

080064b4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80064b4:	b480      	push	{r7}
 80064b6:	b083      	sub	sp, #12
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
 80064bc:	460b      	mov	r3, r1
 80064be:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80064c0:	bf00      	nop
 80064c2:	370c      	adds	r7, #12
 80064c4:	46bd      	mov	sp, r7
 80064c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ca:	4770      	bx	lr

080064cc <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 80064cc:	b480      	push	{r7}
 80064ce:	b083      	sub	sp, #12
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	4a1a      	ldr	r2, [pc, #104]	@ (8006540 <UART_InitCallbacksToDefault+0x74>)
 80064d8:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	4a19      	ldr	r2, [pc, #100]	@ (8006544 <UART_InitCallbacksToDefault+0x78>)
 80064e0:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	4a18      	ldr	r2, [pc, #96]	@ (8006548 <UART_InitCallbacksToDefault+0x7c>)
 80064e8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	4a17      	ldr	r2, [pc, #92]	@ (800654c <UART_InitCallbacksToDefault+0x80>)
 80064f0:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	4a16      	ldr	r2, [pc, #88]	@ (8006550 <UART_InitCallbacksToDefault+0x84>)
 80064f8:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	4a15      	ldr	r2, [pc, #84]	@ (8006554 <UART_InitCallbacksToDefault+0x88>)
 8006500:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	4a14      	ldr	r2, [pc, #80]	@ (8006558 <UART_InitCallbacksToDefault+0x8c>)
 8006508:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	4a13      	ldr	r2, [pc, #76]	@ (800655c <UART_InitCallbacksToDefault+0x90>)
 8006510:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	4a12      	ldr	r2, [pc, #72]	@ (8006560 <UART_InitCallbacksToDefault+0x94>)
 8006518:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	4a11      	ldr	r2, [pc, #68]	@ (8006564 <UART_InitCallbacksToDefault+0x98>)
 8006520:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	4a10      	ldr	r2, [pc, #64]	@ (8006568 <UART_InitCallbacksToDefault+0x9c>)
 8006528:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	4a0f      	ldr	r2, [pc, #60]	@ (800656c <UART_InitCallbacksToDefault+0xa0>)
 8006530:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

}
 8006534:	bf00      	nop
 8006536:	370c      	adds	r7, #12
 8006538:	46bd      	mov	sp, r7
 800653a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653e:	4770      	bx	lr
 8006540:	08006429 	.word	0x08006429
 8006544:	08006415 	.word	0x08006415
 8006548:	08006451 	.word	0x08006451
 800654c:	0800643d 	.word	0x0800643d
 8006550:	08006465 	.word	0x08006465
 8006554:	08006479 	.word	0x08006479
 8006558:	0800648d 	.word	0x0800648d
 800655c:	080064a1 	.word	0x080064a1
 8006560:	08007e9d 	.word	0x08007e9d
 8006564:	08007eb1 	.word	0x08007eb1
 8006568:	08007ec5 	.word	0x08007ec5
 800656c:	080064b5 	.word	0x080064b5

08006570 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006570:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006574:	b08c      	sub	sp, #48	@ 0x30
 8006576:	af00      	add	r7, sp, #0
 8006578:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800657a:	2300      	movs	r3, #0
 800657c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006580:	697b      	ldr	r3, [r7, #20]
 8006582:	689a      	ldr	r2, [r3, #8]
 8006584:	697b      	ldr	r3, [r7, #20]
 8006586:	691b      	ldr	r3, [r3, #16]
 8006588:	431a      	orrs	r2, r3
 800658a:	697b      	ldr	r3, [r7, #20]
 800658c:	695b      	ldr	r3, [r3, #20]
 800658e:	431a      	orrs	r2, r3
 8006590:	697b      	ldr	r3, [r7, #20]
 8006592:	69db      	ldr	r3, [r3, #28]
 8006594:	4313      	orrs	r3, r2
 8006596:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006598:	697b      	ldr	r3, [r7, #20]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	681a      	ldr	r2, [r3, #0]
 800659e:	4baa      	ldr	r3, [pc, #680]	@ (8006848 <UART_SetConfig+0x2d8>)
 80065a0:	4013      	ands	r3, r2
 80065a2:	697a      	ldr	r2, [r7, #20]
 80065a4:	6812      	ldr	r2, [r2, #0]
 80065a6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80065a8:	430b      	orrs	r3, r1
 80065aa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80065ac:	697b      	ldr	r3, [r7, #20]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	685b      	ldr	r3, [r3, #4]
 80065b2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80065b6:	697b      	ldr	r3, [r7, #20]
 80065b8:	68da      	ldr	r2, [r3, #12]
 80065ba:	697b      	ldr	r3, [r7, #20]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	430a      	orrs	r2, r1
 80065c0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80065c2:	697b      	ldr	r3, [r7, #20]
 80065c4:	699b      	ldr	r3, [r3, #24]
 80065c6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80065c8:	697b      	ldr	r3, [r7, #20]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	4a9f      	ldr	r2, [pc, #636]	@ (800684c <UART_SetConfig+0x2dc>)
 80065ce:	4293      	cmp	r3, r2
 80065d0:	d004      	beq.n	80065dc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80065d2:	697b      	ldr	r3, [r7, #20]
 80065d4:	6a1b      	ldr	r3, [r3, #32]
 80065d6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80065d8:	4313      	orrs	r3, r2
 80065da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80065dc:	697b      	ldr	r3, [r7, #20]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	689b      	ldr	r3, [r3, #8]
 80065e2:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80065e6:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80065ea:	697a      	ldr	r2, [r7, #20]
 80065ec:	6812      	ldr	r2, [r2, #0]
 80065ee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80065f0:	430b      	orrs	r3, r1
 80065f2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80065f4:	697b      	ldr	r3, [r7, #20]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065fa:	f023 010f 	bic.w	r1, r3, #15
 80065fe:	697b      	ldr	r3, [r7, #20]
 8006600:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006602:	697b      	ldr	r3, [r7, #20]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	430a      	orrs	r2, r1
 8006608:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800660a:	697b      	ldr	r3, [r7, #20]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	4a90      	ldr	r2, [pc, #576]	@ (8006850 <UART_SetConfig+0x2e0>)
 8006610:	4293      	cmp	r3, r2
 8006612:	d125      	bne.n	8006660 <UART_SetConfig+0xf0>
 8006614:	4b8f      	ldr	r3, [pc, #572]	@ (8006854 <UART_SetConfig+0x2e4>)
 8006616:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800661a:	f003 0303 	and.w	r3, r3, #3
 800661e:	2b03      	cmp	r3, #3
 8006620:	d81a      	bhi.n	8006658 <UART_SetConfig+0xe8>
 8006622:	a201      	add	r2, pc, #4	@ (adr r2, 8006628 <UART_SetConfig+0xb8>)
 8006624:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006628:	08006639 	.word	0x08006639
 800662c:	08006649 	.word	0x08006649
 8006630:	08006641 	.word	0x08006641
 8006634:	08006651 	.word	0x08006651
 8006638:	2301      	movs	r3, #1
 800663a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800663e:	e116      	b.n	800686e <UART_SetConfig+0x2fe>
 8006640:	2302      	movs	r3, #2
 8006642:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006646:	e112      	b.n	800686e <UART_SetConfig+0x2fe>
 8006648:	2304      	movs	r3, #4
 800664a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800664e:	e10e      	b.n	800686e <UART_SetConfig+0x2fe>
 8006650:	2308      	movs	r3, #8
 8006652:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006656:	e10a      	b.n	800686e <UART_SetConfig+0x2fe>
 8006658:	2310      	movs	r3, #16
 800665a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800665e:	e106      	b.n	800686e <UART_SetConfig+0x2fe>
 8006660:	697b      	ldr	r3, [r7, #20]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	4a7c      	ldr	r2, [pc, #496]	@ (8006858 <UART_SetConfig+0x2e8>)
 8006666:	4293      	cmp	r3, r2
 8006668:	d138      	bne.n	80066dc <UART_SetConfig+0x16c>
 800666a:	4b7a      	ldr	r3, [pc, #488]	@ (8006854 <UART_SetConfig+0x2e4>)
 800666c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006670:	f003 030c 	and.w	r3, r3, #12
 8006674:	2b0c      	cmp	r3, #12
 8006676:	d82d      	bhi.n	80066d4 <UART_SetConfig+0x164>
 8006678:	a201      	add	r2, pc, #4	@ (adr r2, 8006680 <UART_SetConfig+0x110>)
 800667a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800667e:	bf00      	nop
 8006680:	080066b5 	.word	0x080066b5
 8006684:	080066d5 	.word	0x080066d5
 8006688:	080066d5 	.word	0x080066d5
 800668c:	080066d5 	.word	0x080066d5
 8006690:	080066c5 	.word	0x080066c5
 8006694:	080066d5 	.word	0x080066d5
 8006698:	080066d5 	.word	0x080066d5
 800669c:	080066d5 	.word	0x080066d5
 80066a0:	080066bd 	.word	0x080066bd
 80066a4:	080066d5 	.word	0x080066d5
 80066a8:	080066d5 	.word	0x080066d5
 80066ac:	080066d5 	.word	0x080066d5
 80066b0:	080066cd 	.word	0x080066cd
 80066b4:	2300      	movs	r3, #0
 80066b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80066ba:	e0d8      	b.n	800686e <UART_SetConfig+0x2fe>
 80066bc:	2302      	movs	r3, #2
 80066be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80066c2:	e0d4      	b.n	800686e <UART_SetConfig+0x2fe>
 80066c4:	2304      	movs	r3, #4
 80066c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80066ca:	e0d0      	b.n	800686e <UART_SetConfig+0x2fe>
 80066cc:	2308      	movs	r3, #8
 80066ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80066d2:	e0cc      	b.n	800686e <UART_SetConfig+0x2fe>
 80066d4:	2310      	movs	r3, #16
 80066d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80066da:	e0c8      	b.n	800686e <UART_SetConfig+0x2fe>
 80066dc:	697b      	ldr	r3, [r7, #20]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	4a5e      	ldr	r2, [pc, #376]	@ (800685c <UART_SetConfig+0x2ec>)
 80066e2:	4293      	cmp	r3, r2
 80066e4:	d125      	bne.n	8006732 <UART_SetConfig+0x1c2>
 80066e6:	4b5b      	ldr	r3, [pc, #364]	@ (8006854 <UART_SetConfig+0x2e4>)
 80066e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80066ec:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80066f0:	2b30      	cmp	r3, #48	@ 0x30
 80066f2:	d016      	beq.n	8006722 <UART_SetConfig+0x1b2>
 80066f4:	2b30      	cmp	r3, #48	@ 0x30
 80066f6:	d818      	bhi.n	800672a <UART_SetConfig+0x1ba>
 80066f8:	2b20      	cmp	r3, #32
 80066fa:	d00a      	beq.n	8006712 <UART_SetConfig+0x1a2>
 80066fc:	2b20      	cmp	r3, #32
 80066fe:	d814      	bhi.n	800672a <UART_SetConfig+0x1ba>
 8006700:	2b00      	cmp	r3, #0
 8006702:	d002      	beq.n	800670a <UART_SetConfig+0x19a>
 8006704:	2b10      	cmp	r3, #16
 8006706:	d008      	beq.n	800671a <UART_SetConfig+0x1aa>
 8006708:	e00f      	b.n	800672a <UART_SetConfig+0x1ba>
 800670a:	2300      	movs	r3, #0
 800670c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006710:	e0ad      	b.n	800686e <UART_SetConfig+0x2fe>
 8006712:	2302      	movs	r3, #2
 8006714:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006718:	e0a9      	b.n	800686e <UART_SetConfig+0x2fe>
 800671a:	2304      	movs	r3, #4
 800671c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006720:	e0a5      	b.n	800686e <UART_SetConfig+0x2fe>
 8006722:	2308      	movs	r3, #8
 8006724:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006728:	e0a1      	b.n	800686e <UART_SetConfig+0x2fe>
 800672a:	2310      	movs	r3, #16
 800672c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006730:	e09d      	b.n	800686e <UART_SetConfig+0x2fe>
 8006732:	697b      	ldr	r3, [r7, #20]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	4a4a      	ldr	r2, [pc, #296]	@ (8006860 <UART_SetConfig+0x2f0>)
 8006738:	4293      	cmp	r3, r2
 800673a:	d125      	bne.n	8006788 <UART_SetConfig+0x218>
 800673c:	4b45      	ldr	r3, [pc, #276]	@ (8006854 <UART_SetConfig+0x2e4>)
 800673e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006742:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006746:	2bc0      	cmp	r3, #192	@ 0xc0
 8006748:	d016      	beq.n	8006778 <UART_SetConfig+0x208>
 800674a:	2bc0      	cmp	r3, #192	@ 0xc0
 800674c:	d818      	bhi.n	8006780 <UART_SetConfig+0x210>
 800674e:	2b80      	cmp	r3, #128	@ 0x80
 8006750:	d00a      	beq.n	8006768 <UART_SetConfig+0x1f8>
 8006752:	2b80      	cmp	r3, #128	@ 0x80
 8006754:	d814      	bhi.n	8006780 <UART_SetConfig+0x210>
 8006756:	2b00      	cmp	r3, #0
 8006758:	d002      	beq.n	8006760 <UART_SetConfig+0x1f0>
 800675a:	2b40      	cmp	r3, #64	@ 0x40
 800675c:	d008      	beq.n	8006770 <UART_SetConfig+0x200>
 800675e:	e00f      	b.n	8006780 <UART_SetConfig+0x210>
 8006760:	2300      	movs	r3, #0
 8006762:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006766:	e082      	b.n	800686e <UART_SetConfig+0x2fe>
 8006768:	2302      	movs	r3, #2
 800676a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800676e:	e07e      	b.n	800686e <UART_SetConfig+0x2fe>
 8006770:	2304      	movs	r3, #4
 8006772:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006776:	e07a      	b.n	800686e <UART_SetConfig+0x2fe>
 8006778:	2308      	movs	r3, #8
 800677a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800677e:	e076      	b.n	800686e <UART_SetConfig+0x2fe>
 8006780:	2310      	movs	r3, #16
 8006782:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006786:	e072      	b.n	800686e <UART_SetConfig+0x2fe>
 8006788:	697b      	ldr	r3, [r7, #20]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	4a35      	ldr	r2, [pc, #212]	@ (8006864 <UART_SetConfig+0x2f4>)
 800678e:	4293      	cmp	r3, r2
 8006790:	d12a      	bne.n	80067e8 <UART_SetConfig+0x278>
 8006792:	4b30      	ldr	r3, [pc, #192]	@ (8006854 <UART_SetConfig+0x2e4>)
 8006794:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006798:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800679c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80067a0:	d01a      	beq.n	80067d8 <UART_SetConfig+0x268>
 80067a2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80067a6:	d81b      	bhi.n	80067e0 <UART_SetConfig+0x270>
 80067a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80067ac:	d00c      	beq.n	80067c8 <UART_SetConfig+0x258>
 80067ae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80067b2:	d815      	bhi.n	80067e0 <UART_SetConfig+0x270>
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d003      	beq.n	80067c0 <UART_SetConfig+0x250>
 80067b8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80067bc:	d008      	beq.n	80067d0 <UART_SetConfig+0x260>
 80067be:	e00f      	b.n	80067e0 <UART_SetConfig+0x270>
 80067c0:	2300      	movs	r3, #0
 80067c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80067c6:	e052      	b.n	800686e <UART_SetConfig+0x2fe>
 80067c8:	2302      	movs	r3, #2
 80067ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80067ce:	e04e      	b.n	800686e <UART_SetConfig+0x2fe>
 80067d0:	2304      	movs	r3, #4
 80067d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80067d6:	e04a      	b.n	800686e <UART_SetConfig+0x2fe>
 80067d8:	2308      	movs	r3, #8
 80067da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80067de:	e046      	b.n	800686e <UART_SetConfig+0x2fe>
 80067e0:	2310      	movs	r3, #16
 80067e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80067e6:	e042      	b.n	800686e <UART_SetConfig+0x2fe>
 80067e8:	697b      	ldr	r3, [r7, #20]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	4a17      	ldr	r2, [pc, #92]	@ (800684c <UART_SetConfig+0x2dc>)
 80067ee:	4293      	cmp	r3, r2
 80067f0:	d13a      	bne.n	8006868 <UART_SetConfig+0x2f8>
 80067f2:	4b18      	ldr	r3, [pc, #96]	@ (8006854 <UART_SetConfig+0x2e4>)
 80067f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80067f8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80067fc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006800:	d01a      	beq.n	8006838 <UART_SetConfig+0x2c8>
 8006802:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006806:	d81b      	bhi.n	8006840 <UART_SetConfig+0x2d0>
 8006808:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800680c:	d00c      	beq.n	8006828 <UART_SetConfig+0x2b8>
 800680e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006812:	d815      	bhi.n	8006840 <UART_SetConfig+0x2d0>
 8006814:	2b00      	cmp	r3, #0
 8006816:	d003      	beq.n	8006820 <UART_SetConfig+0x2b0>
 8006818:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800681c:	d008      	beq.n	8006830 <UART_SetConfig+0x2c0>
 800681e:	e00f      	b.n	8006840 <UART_SetConfig+0x2d0>
 8006820:	2300      	movs	r3, #0
 8006822:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006826:	e022      	b.n	800686e <UART_SetConfig+0x2fe>
 8006828:	2302      	movs	r3, #2
 800682a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800682e:	e01e      	b.n	800686e <UART_SetConfig+0x2fe>
 8006830:	2304      	movs	r3, #4
 8006832:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006836:	e01a      	b.n	800686e <UART_SetConfig+0x2fe>
 8006838:	2308      	movs	r3, #8
 800683a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800683e:	e016      	b.n	800686e <UART_SetConfig+0x2fe>
 8006840:	2310      	movs	r3, #16
 8006842:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006846:	e012      	b.n	800686e <UART_SetConfig+0x2fe>
 8006848:	cfff69f3 	.word	0xcfff69f3
 800684c:	40008000 	.word	0x40008000
 8006850:	40013800 	.word	0x40013800
 8006854:	40021000 	.word	0x40021000
 8006858:	40004400 	.word	0x40004400
 800685c:	40004800 	.word	0x40004800
 8006860:	40004c00 	.word	0x40004c00
 8006864:	40005000 	.word	0x40005000
 8006868:	2310      	movs	r3, #16
 800686a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800686e:	697b      	ldr	r3, [r7, #20]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	4aae      	ldr	r2, [pc, #696]	@ (8006b2c <UART_SetConfig+0x5bc>)
 8006874:	4293      	cmp	r3, r2
 8006876:	f040 8097 	bne.w	80069a8 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800687a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800687e:	2b08      	cmp	r3, #8
 8006880:	d823      	bhi.n	80068ca <UART_SetConfig+0x35a>
 8006882:	a201      	add	r2, pc, #4	@ (adr r2, 8006888 <UART_SetConfig+0x318>)
 8006884:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006888:	080068ad 	.word	0x080068ad
 800688c:	080068cb 	.word	0x080068cb
 8006890:	080068b5 	.word	0x080068b5
 8006894:	080068cb 	.word	0x080068cb
 8006898:	080068bb 	.word	0x080068bb
 800689c:	080068cb 	.word	0x080068cb
 80068a0:	080068cb 	.word	0x080068cb
 80068a4:	080068cb 	.word	0x080068cb
 80068a8:	080068c3 	.word	0x080068c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80068ac:	f7fc fde2 	bl	8003474 <HAL_RCC_GetPCLK1Freq>
 80068b0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80068b2:	e010      	b.n	80068d6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80068b4:	4b9e      	ldr	r3, [pc, #632]	@ (8006b30 <UART_SetConfig+0x5c0>)
 80068b6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80068b8:	e00d      	b.n	80068d6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80068ba:	f7fc fd6d 	bl	8003398 <HAL_RCC_GetSysClockFreq>
 80068be:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80068c0:	e009      	b.n	80068d6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80068c2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80068c6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80068c8:	e005      	b.n	80068d6 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80068ca:	2300      	movs	r3, #0
 80068cc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80068ce:	2301      	movs	r3, #1
 80068d0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80068d4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80068d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068d8:	2b00      	cmp	r3, #0
 80068da:	f000 8130 	beq.w	8006b3e <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80068de:	697b      	ldr	r3, [r7, #20]
 80068e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068e2:	4a94      	ldr	r2, [pc, #592]	@ (8006b34 <UART_SetConfig+0x5c4>)
 80068e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80068e8:	461a      	mov	r2, r3
 80068ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068ec:	fbb3 f3f2 	udiv	r3, r3, r2
 80068f0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80068f2:	697b      	ldr	r3, [r7, #20]
 80068f4:	685a      	ldr	r2, [r3, #4]
 80068f6:	4613      	mov	r3, r2
 80068f8:	005b      	lsls	r3, r3, #1
 80068fa:	4413      	add	r3, r2
 80068fc:	69ba      	ldr	r2, [r7, #24]
 80068fe:	429a      	cmp	r2, r3
 8006900:	d305      	bcc.n	800690e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006902:	697b      	ldr	r3, [r7, #20]
 8006904:	685b      	ldr	r3, [r3, #4]
 8006906:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006908:	69ba      	ldr	r2, [r7, #24]
 800690a:	429a      	cmp	r2, r3
 800690c:	d903      	bls.n	8006916 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800690e:	2301      	movs	r3, #1
 8006910:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006914:	e113      	b.n	8006b3e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006916:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006918:	2200      	movs	r2, #0
 800691a:	60bb      	str	r3, [r7, #8]
 800691c:	60fa      	str	r2, [r7, #12]
 800691e:	697b      	ldr	r3, [r7, #20]
 8006920:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006922:	4a84      	ldr	r2, [pc, #528]	@ (8006b34 <UART_SetConfig+0x5c4>)
 8006924:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006928:	b29b      	uxth	r3, r3
 800692a:	2200      	movs	r2, #0
 800692c:	603b      	str	r3, [r7, #0]
 800692e:	607a      	str	r2, [r7, #4]
 8006930:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006934:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006938:	f7fa f85c 	bl	80009f4 <__aeabi_uldivmod>
 800693c:	4602      	mov	r2, r0
 800693e:	460b      	mov	r3, r1
 8006940:	4610      	mov	r0, r2
 8006942:	4619      	mov	r1, r3
 8006944:	f04f 0200 	mov.w	r2, #0
 8006948:	f04f 0300 	mov.w	r3, #0
 800694c:	020b      	lsls	r3, r1, #8
 800694e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006952:	0202      	lsls	r2, r0, #8
 8006954:	6979      	ldr	r1, [r7, #20]
 8006956:	6849      	ldr	r1, [r1, #4]
 8006958:	0849      	lsrs	r1, r1, #1
 800695a:	2000      	movs	r0, #0
 800695c:	460c      	mov	r4, r1
 800695e:	4605      	mov	r5, r0
 8006960:	eb12 0804 	adds.w	r8, r2, r4
 8006964:	eb43 0905 	adc.w	r9, r3, r5
 8006968:	697b      	ldr	r3, [r7, #20]
 800696a:	685b      	ldr	r3, [r3, #4]
 800696c:	2200      	movs	r2, #0
 800696e:	469a      	mov	sl, r3
 8006970:	4693      	mov	fp, r2
 8006972:	4652      	mov	r2, sl
 8006974:	465b      	mov	r3, fp
 8006976:	4640      	mov	r0, r8
 8006978:	4649      	mov	r1, r9
 800697a:	f7fa f83b 	bl	80009f4 <__aeabi_uldivmod>
 800697e:	4602      	mov	r2, r0
 8006980:	460b      	mov	r3, r1
 8006982:	4613      	mov	r3, r2
 8006984:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006986:	6a3b      	ldr	r3, [r7, #32]
 8006988:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800698c:	d308      	bcc.n	80069a0 <UART_SetConfig+0x430>
 800698e:	6a3b      	ldr	r3, [r7, #32]
 8006990:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006994:	d204      	bcs.n	80069a0 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8006996:	697b      	ldr	r3, [r7, #20]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	6a3a      	ldr	r2, [r7, #32]
 800699c:	60da      	str	r2, [r3, #12]
 800699e:	e0ce      	b.n	8006b3e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80069a0:	2301      	movs	r3, #1
 80069a2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80069a6:	e0ca      	b.n	8006b3e <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80069a8:	697b      	ldr	r3, [r7, #20]
 80069aa:	69db      	ldr	r3, [r3, #28]
 80069ac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80069b0:	d166      	bne.n	8006a80 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80069b2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80069b6:	2b08      	cmp	r3, #8
 80069b8:	d827      	bhi.n	8006a0a <UART_SetConfig+0x49a>
 80069ba:	a201      	add	r2, pc, #4	@ (adr r2, 80069c0 <UART_SetConfig+0x450>)
 80069bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069c0:	080069e5 	.word	0x080069e5
 80069c4:	080069ed 	.word	0x080069ed
 80069c8:	080069f5 	.word	0x080069f5
 80069cc:	08006a0b 	.word	0x08006a0b
 80069d0:	080069fb 	.word	0x080069fb
 80069d4:	08006a0b 	.word	0x08006a0b
 80069d8:	08006a0b 	.word	0x08006a0b
 80069dc:	08006a0b 	.word	0x08006a0b
 80069e0:	08006a03 	.word	0x08006a03
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80069e4:	f7fc fd46 	bl	8003474 <HAL_RCC_GetPCLK1Freq>
 80069e8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80069ea:	e014      	b.n	8006a16 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80069ec:	f7fc fd58 	bl	80034a0 <HAL_RCC_GetPCLK2Freq>
 80069f0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80069f2:	e010      	b.n	8006a16 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80069f4:	4b4e      	ldr	r3, [pc, #312]	@ (8006b30 <UART_SetConfig+0x5c0>)
 80069f6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80069f8:	e00d      	b.n	8006a16 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80069fa:	f7fc fccd 	bl	8003398 <HAL_RCC_GetSysClockFreq>
 80069fe:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006a00:	e009      	b.n	8006a16 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006a02:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006a06:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006a08:	e005      	b.n	8006a16 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006a0e:	2301      	movs	r3, #1
 8006a10:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006a14:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006a16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	f000 8090 	beq.w	8006b3e <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006a1e:	697b      	ldr	r3, [r7, #20]
 8006a20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a22:	4a44      	ldr	r2, [pc, #272]	@ (8006b34 <UART_SetConfig+0x5c4>)
 8006a24:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006a28:	461a      	mov	r2, r3
 8006a2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a2c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006a30:	005a      	lsls	r2, r3, #1
 8006a32:	697b      	ldr	r3, [r7, #20]
 8006a34:	685b      	ldr	r3, [r3, #4]
 8006a36:	085b      	lsrs	r3, r3, #1
 8006a38:	441a      	add	r2, r3
 8006a3a:	697b      	ldr	r3, [r7, #20]
 8006a3c:	685b      	ldr	r3, [r3, #4]
 8006a3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a42:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006a44:	6a3b      	ldr	r3, [r7, #32]
 8006a46:	2b0f      	cmp	r3, #15
 8006a48:	d916      	bls.n	8006a78 <UART_SetConfig+0x508>
 8006a4a:	6a3b      	ldr	r3, [r7, #32]
 8006a4c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006a50:	d212      	bcs.n	8006a78 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006a52:	6a3b      	ldr	r3, [r7, #32]
 8006a54:	b29b      	uxth	r3, r3
 8006a56:	f023 030f 	bic.w	r3, r3, #15
 8006a5a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006a5c:	6a3b      	ldr	r3, [r7, #32]
 8006a5e:	085b      	lsrs	r3, r3, #1
 8006a60:	b29b      	uxth	r3, r3
 8006a62:	f003 0307 	and.w	r3, r3, #7
 8006a66:	b29a      	uxth	r2, r3
 8006a68:	8bfb      	ldrh	r3, [r7, #30]
 8006a6a:	4313      	orrs	r3, r2
 8006a6c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006a6e:	697b      	ldr	r3, [r7, #20]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	8bfa      	ldrh	r2, [r7, #30]
 8006a74:	60da      	str	r2, [r3, #12]
 8006a76:	e062      	b.n	8006b3e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8006a78:	2301      	movs	r3, #1
 8006a7a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006a7e:	e05e      	b.n	8006b3e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006a80:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006a84:	2b08      	cmp	r3, #8
 8006a86:	d828      	bhi.n	8006ada <UART_SetConfig+0x56a>
 8006a88:	a201      	add	r2, pc, #4	@ (adr r2, 8006a90 <UART_SetConfig+0x520>)
 8006a8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a8e:	bf00      	nop
 8006a90:	08006ab5 	.word	0x08006ab5
 8006a94:	08006abd 	.word	0x08006abd
 8006a98:	08006ac5 	.word	0x08006ac5
 8006a9c:	08006adb 	.word	0x08006adb
 8006aa0:	08006acb 	.word	0x08006acb
 8006aa4:	08006adb 	.word	0x08006adb
 8006aa8:	08006adb 	.word	0x08006adb
 8006aac:	08006adb 	.word	0x08006adb
 8006ab0:	08006ad3 	.word	0x08006ad3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ab4:	f7fc fcde 	bl	8003474 <HAL_RCC_GetPCLK1Freq>
 8006ab8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006aba:	e014      	b.n	8006ae6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006abc:	f7fc fcf0 	bl	80034a0 <HAL_RCC_GetPCLK2Freq>
 8006ac0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006ac2:	e010      	b.n	8006ae6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006ac4:	4b1a      	ldr	r3, [pc, #104]	@ (8006b30 <UART_SetConfig+0x5c0>)
 8006ac6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006ac8:	e00d      	b.n	8006ae6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006aca:	f7fc fc65 	bl	8003398 <HAL_RCC_GetSysClockFreq>
 8006ace:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006ad0:	e009      	b.n	8006ae6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006ad2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006ad6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006ad8:	e005      	b.n	8006ae6 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8006ada:	2300      	movs	r3, #0
 8006adc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006ade:	2301      	movs	r3, #1
 8006ae0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006ae4:	bf00      	nop
    }

    if (pclk != 0U)
 8006ae6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d028      	beq.n	8006b3e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006aec:	697b      	ldr	r3, [r7, #20]
 8006aee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006af0:	4a10      	ldr	r2, [pc, #64]	@ (8006b34 <UART_SetConfig+0x5c4>)
 8006af2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006af6:	461a      	mov	r2, r3
 8006af8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006afa:	fbb3 f2f2 	udiv	r2, r3, r2
 8006afe:	697b      	ldr	r3, [r7, #20]
 8006b00:	685b      	ldr	r3, [r3, #4]
 8006b02:	085b      	lsrs	r3, r3, #1
 8006b04:	441a      	add	r2, r3
 8006b06:	697b      	ldr	r3, [r7, #20]
 8006b08:	685b      	ldr	r3, [r3, #4]
 8006b0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b0e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006b10:	6a3b      	ldr	r3, [r7, #32]
 8006b12:	2b0f      	cmp	r3, #15
 8006b14:	d910      	bls.n	8006b38 <UART_SetConfig+0x5c8>
 8006b16:	6a3b      	ldr	r3, [r7, #32]
 8006b18:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006b1c:	d20c      	bcs.n	8006b38 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006b1e:	6a3b      	ldr	r3, [r7, #32]
 8006b20:	b29a      	uxth	r2, r3
 8006b22:	697b      	ldr	r3, [r7, #20]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	60da      	str	r2, [r3, #12]
 8006b28:	e009      	b.n	8006b3e <UART_SetConfig+0x5ce>
 8006b2a:	bf00      	nop
 8006b2c:	40008000 	.word	0x40008000
 8006b30:	00f42400 	.word	0x00f42400
 8006b34:	08008184 	.word	0x08008184
      }
      else
      {
        ret = HAL_ERROR;
 8006b38:	2301      	movs	r3, #1
 8006b3a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006b3e:	697b      	ldr	r3, [r7, #20]
 8006b40:	2201      	movs	r2, #1
 8006b42:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006b46:	697b      	ldr	r3, [r7, #20]
 8006b48:	2201      	movs	r2, #1
 8006b4a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006b4e:	697b      	ldr	r3, [r7, #20]
 8006b50:	2200      	movs	r2, #0
 8006b52:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006b54:	697b      	ldr	r3, [r7, #20]
 8006b56:	2200      	movs	r2, #0
 8006b58:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006b5a:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8006b5e:	4618      	mov	r0, r3
 8006b60:	3730      	adds	r7, #48	@ 0x30
 8006b62:	46bd      	mov	sp, r7
 8006b64:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08006b68 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006b68:	b480      	push	{r7}
 8006b6a:	b083      	sub	sp, #12
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b74:	f003 0308 	and.w	r3, r3, #8
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d00a      	beq.n	8006b92 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	685b      	ldr	r3, [r3, #4]
 8006b82:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	430a      	orrs	r2, r1
 8006b90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b96:	f003 0301 	and.w	r3, r3, #1
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d00a      	beq.n	8006bb4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	685b      	ldr	r3, [r3, #4]
 8006ba4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	430a      	orrs	r2, r1
 8006bb2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bb8:	f003 0302 	and.w	r3, r3, #2
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d00a      	beq.n	8006bd6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	685b      	ldr	r3, [r3, #4]
 8006bc6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	430a      	orrs	r2, r1
 8006bd4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bda:	f003 0304 	and.w	r3, r3, #4
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d00a      	beq.n	8006bf8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	685b      	ldr	r3, [r3, #4]
 8006be8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	430a      	orrs	r2, r1
 8006bf6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bfc:	f003 0310 	and.w	r3, r3, #16
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d00a      	beq.n	8006c1a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	689b      	ldr	r3, [r3, #8]
 8006c0a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	430a      	orrs	r2, r1
 8006c18:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c1e:	f003 0320 	and.w	r3, r3, #32
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d00a      	beq.n	8006c3c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	689b      	ldr	r3, [r3, #8]
 8006c2c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	430a      	orrs	r2, r1
 8006c3a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d01a      	beq.n	8006c7e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	685b      	ldr	r3, [r3, #4]
 8006c4e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	430a      	orrs	r2, r1
 8006c5c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c62:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006c66:	d10a      	bne.n	8006c7e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	685b      	ldr	r3, [r3, #4]
 8006c6e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	430a      	orrs	r2, r1
 8006c7c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d00a      	beq.n	8006ca0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	685b      	ldr	r3, [r3, #4]
 8006c90:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	430a      	orrs	r2, r1
 8006c9e:	605a      	str	r2, [r3, #4]
  }
}
 8006ca0:	bf00      	nop
 8006ca2:	370c      	adds	r7, #12
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006caa:	4770      	bx	lr

08006cac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006cac:	b580      	push	{r7, lr}
 8006cae:	b098      	sub	sp, #96	@ 0x60
 8006cb0:	af02      	add	r7, sp, #8
 8006cb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006cbc:	f7fb f88e 	bl	8001ddc <HAL_GetTick>
 8006cc0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	f003 0308 	and.w	r3, r3, #8
 8006ccc:	2b08      	cmp	r3, #8
 8006cce:	d12f      	bne.n	8006d30 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006cd0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006cd4:	9300      	str	r3, [sp, #0]
 8006cd6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006cd8:	2200      	movs	r2, #0
 8006cda:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006cde:	6878      	ldr	r0, [r7, #4]
 8006ce0:	f000 f88e 	bl	8006e00 <UART_WaitOnFlagUntilTimeout>
 8006ce4:	4603      	mov	r3, r0
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d022      	beq.n	8006d30 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cf0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cf2:	e853 3f00 	ldrex	r3, [r3]
 8006cf6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006cf8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006cfa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006cfe:	653b      	str	r3, [r7, #80]	@ 0x50
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	461a      	mov	r2, r3
 8006d06:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006d08:	647b      	str	r3, [r7, #68]	@ 0x44
 8006d0a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d0c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006d0e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006d10:	e841 2300 	strex	r3, r2, [r1]
 8006d14:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006d16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d1e6      	bne.n	8006cea <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2220      	movs	r2, #32
 8006d20:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2200      	movs	r2, #0
 8006d28:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006d2c:	2303      	movs	r3, #3
 8006d2e:	e063      	b.n	8006df8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f003 0304 	and.w	r3, r3, #4
 8006d3a:	2b04      	cmp	r3, #4
 8006d3c:	d149      	bne.n	8006dd2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006d3e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006d42:	9300      	str	r3, [sp, #0]
 8006d44:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006d46:	2200      	movs	r2, #0
 8006d48:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006d4c:	6878      	ldr	r0, [r7, #4]
 8006d4e:	f000 f857 	bl	8006e00 <UART_WaitOnFlagUntilTimeout>
 8006d52:	4603      	mov	r3, r0
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d03c      	beq.n	8006dd2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d60:	e853 3f00 	ldrex	r3, [r3]
 8006d64:	623b      	str	r3, [r7, #32]
   return(result);
 8006d66:	6a3b      	ldr	r3, [r7, #32]
 8006d68:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006d6c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	461a      	mov	r2, r3
 8006d74:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006d76:	633b      	str	r3, [r7, #48]	@ 0x30
 8006d78:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d7a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006d7c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006d7e:	e841 2300 	strex	r3, r2, [r1]
 8006d82:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006d84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d1e6      	bne.n	8006d58 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	3308      	adds	r3, #8
 8006d90:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d92:	693b      	ldr	r3, [r7, #16]
 8006d94:	e853 3f00 	ldrex	r3, [r3]
 8006d98:	60fb      	str	r3, [r7, #12]
   return(result);
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	f023 0301 	bic.w	r3, r3, #1
 8006da0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	3308      	adds	r3, #8
 8006da8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006daa:	61fa      	str	r2, [r7, #28]
 8006dac:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dae:	69b9      	ldr	r1, [r7, #24]
 8006db0:	69fa      	ldr	r2, [r7, #28]
 8006db2:	e841 2300 	strex	r3, r2, [r1]
 8006db6:	617b      	str	r3, [r7, #20]
   return(result);
 8006db8:	697b      	ldr	r3, [r7, #20]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d1e5      	bne.n	8006d8a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	2220      	movs	r2, #32
 8006dc2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	2200      	movs	r2, #0
 8006dca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006dce:	2303      	movs	r3, #3
 8006dd0:	e012      	b.n	8006df8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	2220      	movs	r2, #32
 8006dd6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	2220      	movs	r2, #32
 8006dde:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	2200      	movs	r2, #0
 8006de6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2200      	movs	r2, #0
 8006dec:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	2200      	movs	r2, #0
 8006df2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006df6:	2300      	movs	r3, #0
}
 8006df8:	4618      	mov	r0, r3
 8006dfa:	3758      	adds	r7, #88	@ 0x58
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	bd80      	pop	{r7, pc}

08006e00 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b084      	sub	sp, #16
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	60f8      	str	r0, [r7, #12]
 8006e08:	60b9      	str	r1, [r7, #8]
 8006e0a:	603b      	str	r3, [r7, #0]
 8006e0c:	4613      	mov	r3, r2
 8006e0e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e10:	e04f      	b.n	8006eb2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e12:	69bb      	ldr	r3, [r7, #24]
 8006e14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e18:	d04b      	beq.n	8006eb2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e1a:	f7fa ffdf 	bl	8001ddc <HAL_GetTick>
 8006e1e:	4602      	mov	r2, r0
 8006e20:	683b      	ldr	r3, [r7, #0]
 8006e22:	1ad3      	subs	r3, r2, r3
 8006e24:	69ba      	ldr	r2, [r7, #24]
 8006e26:	429a      	cmp	r2, r3
 8006e28:	d302      	bcc.n	8006e30 <UART_WaitOnFlagUntilTimeout+0x30>
 8006e2a:	69bb      	ldr	r3, [r7, #24]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d101      	bne.n	8006e34 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006e30:	2303      	movs	r3, #3
 8006e32:	e04e      	b.n	8006ed2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	f003 0304 	and.w	r3, r3, #4
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d037      	beq.n	8006eb2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006e42:	68bb      	ldr	r3, [r7, #8]
 8006e44:	2b80      	cmp	r3, #128	@ 0x80
 8006e46:	d034      	beq.n	8006eb2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006e48:	68bb      	ldr	r3, [r7, #8]
 8006e4a:	2b40      	cmp	r3, #64	@ 0x40
 8006e4c:	d031      	beq.n	8006eb2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	69db      	ldr	r3, [r3, #28]
 8006e54:	f003 0308 	and.w	r3, r3, #8
 8006e58:	2b08      	cmp	r3, #8
 8006e5a:	d110      	bne.n	8006e7e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	2208      	movs	r2, #8
 8006e62:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006e64:	68f8      	ldr	r0, [r7, #12]
 8006e66:	f000 f99c 	bl	80071a2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	2208      	movs	r2, #8
 8006e6e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	2200      	movs	r2, #0
 8006e76:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8006e7a:	2301      	movs	r3, #1
 8006e7c:	e029      	b.n	8006ed2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	69db      	ldr	r3, [r3, #28]
 8006e84:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006e88:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006e8c:	d111      	bne.n	8006eb2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006e96:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006e98:	68f8      	ldr	r0, [r7, #12]
 8006e9a:	f000 f982 	bl	80071a2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	2220      	movs	r2, #32
 8006ea2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8006eae:	2303      	movs	r3, #3
 8006eb0:	e00f      	b.n	8006ed2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	69da      	ldr	r2, [r3, #28]
 8006eb8:	68bb      	ldr	r3, [r7, #8]
 8006eba:	4013      	ands	r3, r2
 8006ebc:	68ba      	ldr	r2, [r7, #8]
 8006ebe:	429a      	cmp	r2, r3
 8006ec0:	bf0c      	ite	eq
 8006ec2:	2301      	moveq	r3, #1
 8006ec4:	2300      	movne	r3, #0
 8006ec6:	b2db      	uxtb	r3, r3
 8006ec8:	461a      	mov	r2, r3
 8006eca:	79fb      	ldrb	r3, [r7, #7]
 8006ecc:	429a      	cmp	r2, r3
 8006ece:	d0a0      	beq.n	8006e12 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006ed0:	2300      	movs	r3, #0
}
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	3710      	adds	r7, #16
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	bd80      	pop	{r7, pc}
	...

08006edc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006edc:	b480      	push	{r7}
 8006ede:	b0a3      	sub	sp, #140	@ 0x8c
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	60f8      	str	r0, [r7, #12]
 8006ee4:	60b9      	str	r1, [r7, #8]
 8006ee6:	4613      	mov	r3, r2
 8006ee8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	68ba      	ldr	r2, [r7, #8]
 8006eee:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	88fa      	ldrh	r2, [r7, #6]
 8006ef4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	88fa      	ldrh	r2, [r7, #6]
 8006efc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	2200      	movs	r2, #0
 8006f04:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	689b      	ldr	r3, [r3, #8]
 8006f0a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006f0e:	d10e      	bne.n	8006f2e <UART_Start_Receive_IT+0x52>
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	691b      	ldr	r3, [r3, #16]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d105      	bne.n	8006f24 <UART_Start_Receive_IT+0x48>
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8006f1e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006f22:	e02d      	b.n	8006f80 <UART_Start_Receive_IT+0xa4>
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	22ff      	movs	r2, #255	@ 0xff
 8006f28:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006f2c:	e028      	b.n	8006f80 <UART_Start_Receive_IT+0xa4>
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	689b      	ldr	r3, [r3, #8]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d10d      	bne.n	8006f52 <UART_Start_Receive_IT+0x76>
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	691b      	ldr	r3, [r3, #16]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d104      	bne.n	8006f48 <UART_Start_Receive_IT+0x6c>
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	22ff      	movs	r2, #255	@ 0xff
 8006f42:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006f46:	e01b      	b.n	8006f80 <UART_Start_Receive_IT+0xa4>
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	227f      	movs	r2, #127	@ 0x7f
 8006f4c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006f50:	e016      	b.n	8006f80 <UART_Start_Receive_IT+0xa4>
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	689b      	ldr	r3, [r3, #8]
 8006f56:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006f5a:	d10d      	bne.n	8006f78 <UART_Start_Receive_IT+0x9c>
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	691b      	ldr	r3, [r3, #16]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d104      	bne.n	8006f6e <UART_Start_Receive_IT+0x92>
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	227f      	movs	r2, #127	@ 0x7f
 8006f68:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006f6c:	e008      	b.n	8006f80 <UART_Start_Receive_IT+0xa4>
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	223f      	movs	r2, #63	@ 0x3f
 8006f72:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006f76:	e003      	b.n	8006f80 <UART_Start_Receive_IT+0xa4>
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	2200      	movs	r2, #0
 8006f84:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	2222      	movs	r2, #34	@ 0x22
 8006f8c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	3308      	adds	r3, #8
 8006f96:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f98:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006f9a:	e853 3f00 	ldrex	r3, [r3]
 8006f9e:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8006fa0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006fa2:	f043 0301 	orr.w	r3, r3, #1
 8006fa6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	3308      	adds	r3, #8
 8006fb0:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8006fb4:	673a      	str	r2, [r7, #112]	@ 0x70
 8006fb6:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fb8:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8006fba:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8006fbc:	e841 2300 	strex	r3, r2, [r1]
 8006fc0:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 8006fc2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d1e3      	bne.n	8006f90 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006fcc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006fd0:	d14f      	bne.n	8007072 <UART_Start_Receive_IT+0x196>
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8006fd8:	88fa      	ldrh	r2, [r7, #6]
 8006fda:	429a      	cmp	r2, r3
 8006fdc:	d349      	bcc.n	8007072 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	689b      	ldr	r3, [r3, #8]
 8006fe2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006fe6:	d107      	bne.n	8006ff8 <UART_Start_Receive_IT+0x11c>
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	691b      	ldr	r3, [r3, #16]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d103      	bne.n	8006ff8 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	4a47      	ldr	r2, [pc, #284]	@ (8007110 <UART_Start_Receive_IT+0x234>)
 8006ff4:	675a      	str	r2, [r3, #116]	@ 0x74
 8006ff6:	e002      	b.n	8006ffe <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	4a46      	ldr	r2, [pc, #280]	@ (8007114 <UART_Start_Receive_IT+0x238>)
 8006ffc:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	691b      	ldr	r3, [r3, #16]
 8007002:	2b00      	cmp	r3, #0
 8007004:	d01a      	beq.n	800703c <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800700c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800700e:	e853 3f00 	ldrex	r3, [r3]
 8007012:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8007014:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007016:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800701a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	461a      	mov	r2, r3
 8007024:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007028:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800702a:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800702c:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800702e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8007030:	e841 2300 	strex	r3, r2, [r1]
 8007034:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8007036:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007038:	2b00      	cmp	r3, #0
 800703a:	d1e4      	bne.n	8007006 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	3308      	adds	r3, #8
 8007042:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007044:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007046:	e853 3f00 	ldrex	r3, [r3]
 800704a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800704c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800704e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007052:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	3308      	adds	r3, #8
 800705a:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800705c:	64ba      	str	r2, [r7, #72]	@ 0x48
 800705e:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007060:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007062:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007064:	e841 2300 	strex	r3, r2, [r1]
 8007068:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800706a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800706c:	2b00      	cmp	r3, #0
 800706e:	d1e5      	bne.n	800703c <UART_Start_Receive_IT+0x160>
 8007070:	e046      	b.n	8007100 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	689b      	ldr	r3, [r3, #8]
 8007076:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800707a:	d107      	bne.n	800708c <UART_Start_Receive_IT+0x1b0>
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	691b      	ldr	r3, [r3, #16]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d103      	bne.n	800708c <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	4a24      	ldr	r2, [pc, #144]	@ (8007118 <UART_Start_Receive_IT+0x23c>)
 8007088:	675a      	str	r2, [r3, #116]	@ 0x74
 800708a:	e002      	b.n	8007092 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	4a23      	ldr	r2, [pc, #140]	@ (800711c <UART_Start_Receive_IT+0x240>)
 8007090:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	691b      	ldr	r3, [r3, #16]
 8007096:	2b00      	cmp	r3, #0
 8007098:	d019      	beq.n	80070ce <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070a2:	e853 3f00 	ldrex	r3, [r3]
 80070a6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80070a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070aa:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 80070ae:	677b      	str	r3, [r7, #116]	@ 0x74
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	461a      	mov	r2, r3
 80070b6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80070b8:	637b      	str	r3, [r7, #52]	@ 0x34
 80070ba:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070bc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80070be:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80070c0:	e841 2300 	strex	r3, r2, [r1]
 80070c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80070c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d1e6      	bne.n	800709a <UART_Start_Receive_IT+0x1be>
 80070cc:	e018      	b.n	8007100 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070d4:	697b      	ldr	r3, [r7, #20]
 80070d6:	e853 3f00 	ldrex	r3, [r3]
 80070da:	613b      	str	r3, [r7, #16]
   return(result);
 80070dc:	693b      	ldr	r3, [r7, #16]
 80070de:	f043 0320 	orr.w	r3, r3, #32
 80070e2:	67bb      	str	r3, [r7, #120]	@ 0x78
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	461a      	mov	r2, r3
 80070ea:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80070ec:	623b      	str	r3, [r7, #32]
 80070ee:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070f0:	69f9      	ldr	r1, [r7, #28]
 80070f2:	6a3a      	ldr	r2, [r7, #32]
 80070f4:	e841 2300 	strex	r3, r2, [r1]
 80070f8:	61bb      	str	r3, [r7, #24]
   return(result);
 80070fa:	69bb      	ldr	r3, [r7, #24]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d1e6      	bne.n	80070ce <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8007100:	2300      	movs	r3, #0
}
 8007102:	4618      	mov	r0, r3
 8007104:	378c      	adds	r7, #140	@ 0x8c
 8007106:	46bd      	mov	sp, r7
 8007108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710c:	4770      	bx	lr
 800710e:	bf00      	nop
 8007110:	08007b25 	.word	0x08007b25
 8007114:	080077b5 	.word	0x080077b5
 8007118:	080075f5 	.word	0x080075f5
 800711c:	08007435 	.word	0x08007435

08007120 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007120:	b480      	push	{r7}
 8007122:	b08f      	sub	sp, #60	@ 0x3c
 8007124:	af00      	add	r7, sp, #0
 8007126:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800712e:	6a3b      	ldr	r3, [r7, #32]
 8007130:	e853 3f00 	ldrex	r3, [r3]
 8007134:	61fb      	str	r3, [r7, #28]
   return(result);
 8007136:	69fb      	ldr	r3, [r7, #28]
 8007138:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800713c:	637b      	str	r3, [r7, #52]	@ 0x34
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	461a      	mov	r2, r3
 8007144:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007146:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007148:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800714a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800714c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800714e:	e841 2300 	strex	r3, r2, [r1]
 8007152:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007154:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007156:	2b00      	cmp	r3, #0
 8007158:	d1e6      	bne.n	8007128 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	3308      	adds	r3, #8
 8007160:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	e853 3f00 	ldrex	r3, [r3]
 8007168:	60bb      	str	r3, [r7, #8]
   return(result);
 800716a:	68bb      	ldr	r3, [r7, #8]
 800716c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8007170:	633b      	str	r3, [r7, #48]	@ 0x30
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	3308      	adds	r3, #8
 8007178:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800717a:	61ba      	str	r2, [r7, #24]
 800717c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800717e:	6979      	ldr	r1, [r7, #20]
 8007180:	69ba      	ldr	r2, [r7, #24]
 8007182:	e841 2300 	strex	r3, r2, [r1]
 8007186:	613b      	str	r3, [r7, #16]
   return(result);
 8007188:	693b      	ldr	r3, [r7, #16]
 800718a:	2b00      	cmp	r3, #0
 800718c:	d1e5      	bne.n	800715a <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	2220      	movs	r2, #32
 8007192:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8007196:	bf00      	nop
 8007198:	373c      	adds	r7, #60	@ 0x3c
 800719a:	46bd      	mov	sp, r7
 800719c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a0:	4770      	bx	lr

080071a2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80071a2:	b480      	push	{r7}
 80071a4:	b095      	sub	sp, #84	@ 0x54
 80071a6:	af00      	add	r7, sp, #0
 80071a8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80071b2:	e853 3f00 	ldrex	r3, [r3]
 80071b6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80071b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071ba:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80071be:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	461a      	mov	r2, r3
 80071c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80071c8:	643b      	str	r3, [r7, #64]	@ 0x40
 80071ca:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071cc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80071ce:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80071d0:	e841 2300 	strex	r3, r2, [r1]
 80071d4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80071d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d1e6      	bne.n	80071aa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	3308      	adds	r3, #8
 80071e2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071e4:	6a3b      	ldr	r3, [r7, #32]
 80071e6:	e853 3f00 	ldrex	r3, [r3]
 80071ea:	61fb      	str	r3, [r7, #28]
   return(result);
 80071ec:	69fb      	ldr	r3, [r7, #28]
 80071ee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80071f2:	f023 0301 	bic.w	r3, r3, #1
 80071f6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	3308      	adds	r3, #8
 80071fe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007200:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007202:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007204:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007206:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007208:	e841 2300 	strex	r3, r2, [r1]
 800720c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800720e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007210:	2b00      	cmp	r3, #0
 8007212:	d1e3      	bne.n	80071dc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007218:	2b01      	cmp	r3, #1
 800721a:	d118      	bne.n	800724e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	e853 3f00 	ldrex	r3, [r3]
 8007228:	60bb      	str	r3, [r7, #8]
   return(result);
 800722a:	68bb      	ldr	r3, [r7, #8]
 800722c:	f023 0310 	bic.w	r3, r3, #16
 8007230:	647b      	str	r3, [r7, #68]	@ 0x44
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	461a      	mov	r2, r3
 8007238:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800723a:	61bb      	str	r3, [r7, #24]
 800723c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800723e:	6979      	ldr	r1, [r7, #20]
 8007240:	69ba      	ldr	r2, [r7, #24]
 8007242:	e841 2300 	strex	r3, r2, [r1]
 8007246:	613b      	str	r3, [r7, #16]
   return(result);
 8007248:	693b      	ldr	r3, [r7, #16]
 800724a:	2b00      	cmp	r3, #0
 800724c:	d1e6      	bne.n	800721c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	2220      	movs	r2, #32
 8007252:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	2200      	movs	r2, #0
 800725a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	2200      	movs	r2, #0
 8007260:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007262:	bf00      	nop
 8007264:	3754      	adds	r7, #84	@ 0x54
 8007266:	46bd      	mov	sp, r7
 8007268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726c:	4770      	bx	lr

0800726e <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800726e:	b580      	push	{r7, lr}
 8007270:	b090      	sub	sp, #64	@ 0x40
 8007272:	af00      	add	r7, sp, #0
 8007274:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800727a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	f003 0320 	and.w	r3, r3, #32
 8007286:	2b00      	cmp	r3, #0
 8007288:	d137      	bne.n	80072fa <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800728a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800728c:	2200      	movs	r2, #0
 800728e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007292:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	3308      	adds	r3, #8
 8007298:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800729a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800729c:	e853 3f00 	ldrex	r3, [r3]
 80072a0:	623b      	str	r3, [r7, #32]
   return(result);
 80072a2:	6a3b      	ldr	r3, [r7, #32]
 80072a4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80072a8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80072aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	3308      	adds	r3, #8
 80072b0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80072b2:	633a      	str	r2, [r7, #48]	@ 0x30
 80072b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072b6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80072b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80072ba:	e841 2300 	strex	r3, r2, [r1]
 80072be:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80072c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d1e5      	bne.n	8007292 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80072c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072cc:	693b      	ldr	r3, [r7, #16]
 80072ce:	e853 3f00 	ldrex	r3, [r3]
 80072d2:	60fb      	str	r3, [r7, #12]
   return(result);
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80072da:	637b      	str	r3, [r7, #52]	@ 0x34
 80072dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	461a      	mov	r2, r3
 80072e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80072e4:	61fb      	str	r3, [r7, #28]
 80072e6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072e8:	69b9      	ldr	r1, [r7, #24]
 80072ea:	69fa      	ldr	r2, [r7, #28]
 80072ec:	e841 2300 	strex	r3, r2, [r1]
 80072f0:	617b      	str	r3, [r7, #20]
   return(result);
 80072f2:	697b      	ldr	r3, [r7, #20]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d1e6      	bne.n	80072c6 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80072f8:	e004      	b.n	8007304 <UART_DMATransmitCplt+0x96>
    huart->TxCpltCallback(huart);
 80072fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80072fc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007300:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8007302:	4798      	blx	r3
}
 8007304:	bf00      	nop
 8007306:	3740      	adds	r7, #64	@ 0x40
 8007308:	46bd      	mov	sp, r7
 800730a:	bd80      	pop	{r7, pc}

0800730c <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800730c:	b580      	push	{r7, lr}
 800730e:	b084      	sub	sp, #16
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007318:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007320:	68f8      	ldr	r0, [r7, #12]
 8007322:	4798      	blx	r3
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007324:	bf00      	nop
 8007326:	3710      	adds	r7, #16
 8007328:	46bd      	mov	sp, r7
 800732a:	bd80      	pop	{r7, pc}

0800732c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800732c:	b580      	push	{r7, lr}
 800732e:	b086      	sub	sp, #24
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007338:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800733a:	697b      	ldr	r3, [r7, #20]
 800733c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007340:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8007342:	697b      	ldr	r3, [r7, #20]
 8007344:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007348:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800734a:	697b      	ldr	r3, [r7, #20]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	689b      	ldr	r3, [r3, #8]
 8007350:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007354:	2b80      	cmp	r3, #128	@ 0x80
 8007356:	d109      	bne.n	800736c <UART_DMAError+0x40>
 8007358:	693b      	ldr	r3, [r7, #16]
 800735a:	2b21      	cmp	r3, #33	@ 0x21
 800735c:	d106      	bne.n	800736c <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800735e:	697b      	ldr	r3, [r7, #20]
 8007360:	2200      	movs	r2, #0
 8007362:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8007366:	6978      	ldr	r0, [r7, #20]
 8007368:	f7ff feda 	bl	8007120 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800736c:	697b      	ldr	r3, [r7, #20]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	689b      	ldr	r3, [r3, #8]
 8007372:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007376:	2b40      	cmp	r3, #64	@ 0x40
 8007378:	d109      	bne.n	800738e <UART_DMAError+0x62>
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	2b22      	cmp	r3, #34	@ 0x22
 800737e:	d106      	bne.n	800738e <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8007380:	697b      	ldr	r3, [r7, #20]
 8007382:	2200      	movs	r2, #0
 8007384:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8007388:	6978      	ldr	r0, [r7, #20]
 800738a:	f7ff ff0a 	bl	80071a2 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800738e:	697b      	ldr	r3, [r7, #20]
 8007390:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007394:	f043 0210 	orr.w	r2, r3, #16
 8007398:	697b      	ldr	r3, [r7, #20]
 800739a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800739e:	697b      	ldr	r3, [r7, #20]
 80073a0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80073a4:	6978      	ldr	r0, [r7, #20]
 80073a6:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80073a8:	bf00      	nop
 80073aa:	3718      	adds	r7, #24
 80073ac:	46bd      	mov	sp, r7
 80073ae:	bd80      	pop	{r7, pc}

080073b0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80073b0:	b580      	push	{r7, lr}
 80073b2:	b084      	sub	sp, #16
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073bc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	2200      	movs	r2, #0
 80073c2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80073cc:	68f8      	ldr	r0, [r7, #12]
 80073ce:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80073d0:	bf00      	nop
 80073d2:	3710      	adds	r7, #16
 80073d4:	46bd      	mov	sp, r7
 80073d6:	bd80      	pop	{r7, pc}

080073d8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80073d8:	b580      	push	{r7, lr}
 80073da:	b088      	sub	sp, #32
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	e853 3f00 	ldrex	r3, [r3]
 80073ec:	60bb      	str	r3, [r7, #8]
   return(result);
 80073ee:	68bb      	ldr	r3, [r7, #8]
 80073f0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80073f4:	61fb      	str	r3, [r7, #28]
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	461a      	mov	r2, r3
 80073fc:	69fb      	ldr	r3, [r7, #28]
 80073fe:	61bb      	str	r3, [r7, #24]
 8007400:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007402:	6979      	ldr	r1, [r7, #20]
 8007404:	69ba      	ldr	r2, [r7, #24]
 8007406:	e841 2300 	strex	r3, r2, [r1]
 800740a:	613b      	str	r3, [r7, #16]
   return(result);
 800740c:	693b      	ldr	r3, [r7, #16]
 800740e:	2b00      	cmp	r3, #0
 8007410:	d1e6      	bne.n	80073e0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	2220      	movs	r2, #32
 8007416:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	2200      	movs	r2, #0
 800741e:	679a      	str	r2, [r3, #120]	@ 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007426:	6878      	ldr	r0, [r7, #4]
 8007428:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800742a:	bf00      	nop
 800742c:	3720      	adds	r7, #32
 800742e:	46bd      	mov	sp, r7
 8007430:	bd80      	pop	{r7, pc}
	...

08007434 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007434:	b580      	push	{r7, lr}
 8007436:	b09c      	sub	sp, #112	@ 0x70
 8007438:	af00      	add	r7, sp, #0
 800743a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8007442:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800744c:	2b22      	cmp	r3, #34	@ 0x22
 800744e:	f040 80c2 	bne.w	80075d6 <UART_RxISR_8BIT+0x1a2>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007458:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800745c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8007460:	b2d9      	uxtb	r1, r3
 8007462:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8007466:	b2da      	uxtb	r2, r3
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800746c:	400a      	ands	r2, r1
 800746e:	b2d2      	uxtb	r2, r2
 8007470:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007476:	1c5a      	adds	r2, r3, #1
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007482:	b29b      	uxth	r3, r3
 8007484:	3b01      	subs	r3, #1
 8007486:	b29a      	uxth	r2, r3
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007494:	b29b      	uxth	r3, r3
 8007496:	2b00      	cmp	r3, #0
 8007498:	f040 80a5 	bne.w	80075e6 <UART_RxISR_8BIT+0x1b2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80074a4:	e853 3f00 	ldrex	r3, [r3]
 80074a8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80074aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80074ac:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80074b0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	461a      	mov	r2, r3
 80074b8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80074ba:	65bb      	str	r3, [r7, #88]	@ 0x58
 80074bc:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074be:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80074c0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80074c2:	e841 2300 	strex	r3, r2, [r1]
 80074c6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80074c8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d1e6      	bne.n	800749c <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	3308      	adds	r3, #8
 80074d4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074d8:	e853 3f00 	ldrex	r3, [r3]
 80074dc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80074de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80074e0:	f023 0301 	bic.w	r3, r3, #1
 80074e4:	667b      	str	r3, [r7, #100]	@ 0x64
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	3308      	adds	r3, #8
 80074ec:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80074ee:	647a      	str	r2, [r7, #68]	@ 0x44
 80074f0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074f2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80074f4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80074f6:	e841 2300 	strex	r3, r2, [r1]
 80074fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80074fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d1e5      	bne.n	80074ce <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	2220      	movs	r2, #32
 8007506:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	2200      	movs	r2, #0
 800750e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	2200      	movs	r2, #0
 8007514:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	4a35      	ldr	r2, [pc, #212]	@ (80075f0 <UART_RxISR_8BIT+0x1bc>)
 800751c:	4293      	cmp	r3, r2
 800751e:	d01f      	beq.n	8007560 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	685b      	ldr	r3, [r3, #4]
 8007526:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800752a:	2b00      	cmp	r3, #0
 800752c:	d018      	beq.n	8007560 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007534:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007536:	e853 3f00 	ldrex	r3, [r3]
 800753a:	623b      	str	r3, [r7, #32]
   return(result);
 800753c:	6a3b      	ldr	r3, [r7, #32]
 800753e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007542:	663b      	str	r3, [r7, #96]	@ 0x60
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	461a      	mov	r2, r3
 800754a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800754c:	633b      	str	r3, [r7, #48]	@ 0x30
 800754e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007550:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007552:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007554:	e841 2300 	strex	r3, r2, [r1]
 8007558:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800755a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800755c:	2b00      	cmp	r3, #0
 800755e:	d1e6      	bne.n	800752e <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007564:	2b01      	cmp	r3, #1
 8007566:	d130      	bne.n	80075ca <UART_RxISR_8BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	2200      	movs	r2, #0
 800756c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007574:	693b      	ldr	r3, [r7, #16]
 8007576:	e853 3f00 	ldrex	r3, [r3]
 800757a:	60fb      	str	r3, [r7, #12]
   return(result);
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	f023 0310 	bic.w	r3, r3, #16
 8007582:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	461a      	mov	r2, r3
 800758a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800758c:	61fb      	str	r3, [r7, #28]
 800758e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007590:	69b9      	ldr	r1, [r7, #24]
 8007592:	69fa      	ldr	r2, [r7, #28]
 8007594:	e841 2300 	strex	r3, r2, [r1]
 8007598:	617b      	str	r3, [r7, #20]
   return(result);
 800759a:	697b      	ldr	r3, [r7, #20]
 800759c:	2b00      	cmp	r3, #0
 800759e:	d1e6      	bne.n	800756e <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	69db      	ldr	r3, [r3, #28]
 80075a6:	f003 0310 	and.w	r3, r3, #16
 80075aa:	2b10      	cmp	r3, #16
 80075ac:	d103      	bne.n	80075b6 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	2210      	movs	r2, #16
 80075b4:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80075bc:	687a      	ldr	r2, [r7, #4]
 80075be:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 80075c2:	4611      	mov	r1, r2
 80075c4:	6878      	ldr	r0, [r7, #4]
 80075c6:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80075c8:	e00d      	b.n	80075e6 <UART_RxISR_8BIT+0x1b2>
        huart->RxCpltCallback(huart);
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80075d0:	6878      	ldr	r0, [r7, #4]
 80075d2:	4798      	blx	r3
}
 80075d4:	e007      	b.n	80075e6 <UART_RxISR_8BIT+0x1b2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	699a      	ldr	r2, [r3, #24]
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	f042 0208 	orr.w	r2, r2, #8
 80075e4:	619a      	str	r2, [r3, #24]
}
 80075e6:	bf00      	nop
 80075e8:	3770      	adds	r7, #112	@ 0x70
 80075ea:	46bd      	mov	sp, r7
 80075ec:	bd80      	pop	{r7, pc}
 80075ee:	bf00      	nop
 80075f0:	40008000 	.word	0x40008000

080075f4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80075f4:	b580      	push	{r7, lr}
 80075f6:	b09c      	sub	sp, #112	@ 0x70
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8007602:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800760c:	2b22      	cmp	r3, #34	@ 0x22
 800760e:	f040 80c2 	bne.w	8007796 <UART_RxISR_16BIT+0x1a2>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007618:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007620:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8007622:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8007626:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800762a:	4013      	ands	r3, r2
 800762c:	b29a      	uxth	r2, r3
 800762e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007630:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007636:	1c9a      	adds	r2, r3, #2
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007642:	b29b      	uxth	r3, r3
 8007644:	3b01      	subs	r3, #1
 8007646:	b29a      	uxth	r2, r3
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007654:	b29b      	uxth	r3, r3
 8007656:	2b00      	cmp	r3, #0
 8007658:	f040 80a5 	bne.w	80077a6 <UART_RxISR_16BIT+0x1b2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007662:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007664:	e853 3f00 	ldrex	r3, [r3]
 8007668:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800766a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800766c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007670:	667b      	str	r3, [r7, #100]	@ 0x64
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	461a      	mov	r2, r3
 8007678:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800767a:	657b      	str	r3, [r7, #84]	@ 0x54
 800767c:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800767e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007680:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007682:	e841 2300 	strex	r3, r2, [r1]
 8007686:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8007688:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800768a:	2b00      	cmp	r3, #0
 800768c:	d1e6      	bne.n	800765c <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	3308      	adds	r3, #8
 8007694:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007696:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007698:	e853 3f00 	ldrex	r3, [r3]
 800769c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800769e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076a0:	f023 0301 	bic.w	r3, r3, #1
 80076a4:	663b      	str	r3, [r7, #96]	@ 0x60
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	3308      	adds	r3, #8
 80076ac:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80076ae:	643a      	str	r2, [r7, #64]	@ 0x40
 80076b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076b2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80076b4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80076b6:	e841 2300 	strex	r3, r2, [r1]
 80076ba:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80076bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d1e5      	bne.n	800768e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	2220      	movs	r2, #32
 80076c6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	2200      	movs	r2, #0
 80076ce:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2200      	movs	r2, #0
 80076d4:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	4a35      	ldr	r2, [pc, #212]	@ (80077b0 <UART_RxISR_16BIT+0x1bc>)
 80076dc:	4293      	cmp	r3, r2
 80076de:	d01f      	beq.n	8007720 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	685b      	ldr	r3, [r3, #4]
 80076e6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d018      	beq.n	8007720 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076f4:	6a3b      	ldr	r3, [r7, #32]
 80076f6:	e853 3f00 	ldrex	r3, [r3]
 80076fa:	61fb      	str	r3, [r7, #28]
   return(result);
 80076fc:	69fb      	ldr	r3, [r7, #28]
 80076fe:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007702:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	461a      	mov	r2, r3
 800770a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800770c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800770e:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007710:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007712:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007714:	e841 2300 	strex	r3, r2, [r1]
 8007718:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800771a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800771c:	2b00      	cmp	r3, #0
 800771e:	d1e6      	bne.n	80076ee <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007724:	2b01      	cmp	r3, #1
 8007726:	d130      	bne.n	800778a <UART_RxISR_16BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2200      	movs	r2, #0
 800772c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	e853 3f00 	ldrex	r3, [r3]
 800773a:	60bb      	str	r3, [r7, #8]
   return(result);
 800773c:	68bb      	ldr	r3, [r7, #8]
 800773e:	f023 0310 	bic.w	r3, r3, #16
 8007742:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	461a      	mov	r2, r3
 800774a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800774c:	61bb      	str	r3, [r7, #24]
 800774e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007750:	6979      	ldr	r1, [r7, #20]
 8007752:	69ba      	ldr	r2, [r7, #24]
 8007754:	e841 2300 	strex	r3, r2, [r1]
 8007758:	613b      	str	r3, [r7, #16]
   return(result);
 800775a:	693b      	ldr	r3, [r7, #16]
 800775c:	2b00      	cmp	r3, #0
 800775e:	d1e6      	bne.n	800772e <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	69db      	ldr	r3, [r3, #28]
 8007766:	f003 0310 	and.w	r3, r3, #16
 800776a:	2b10      	cmp	r3, #16
 800776c:	d103      	bne.n	8007776 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	2210      	movs	r2, #16
 8007774:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800777c:	687a      	ldr	r2, [r7, #4]
 800777e:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 8007782:	4611      	mov	r1, r2
 8007784:	6878      	ldr	r0, [r7, #4]
 8007786:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007788:	e00d      	b.n	80077a6 <UART_RxISR_16BIT+0x1b2>
        huart->RxCpltCallback(huart);
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007790:	6878      	ldr	r0, [r7, #4]
 8007792:	4798      	blx	r3
}
 8007794:	e007      	b.n	80077a6 <UART_RxISR_16BIT+0x1b2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	699a      	ldr	r2, [r3, #24]
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	f042 0208 	orr.w	r2, r2, #8
 80077a4:	619a      	str	r2, [r3, #24]
}
 80077a6:	bf00      	nop
 80077a8:	3770      	adds	r7, #112	@ 0x70
 80077aa:	46bd      	mov	sp, r7
 80077ac:	bd80      	pop	{r7, pc}
 80077ae:	bf00      	nop
 80077b0:	40008000 	.word	0x40008000

080077b4 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80077b4:	b580      	push	{r7, lr}
 80077b6:	b0ac      	sub	sp, #176	@ 0xb0
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80077c2:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	69db      	ldr	r3, [r3, #28]
 80077cc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	689b      	ldr	r3, [r3, #8]
 80077e0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80077ea:	2b22      	cmp	r3, #34	@ 0x22
 80077ec:	f040 8189 	bne.w	8007b02 <UART_RxISR_8BIT_FIFOEN+0x34e>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80077f6:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80077fa:	e12c      	b.n	8007a56 <UART_RxISR_8BIT_FIFOEN+0x2a2>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007802:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007806:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800780a:	b2d9      	uxtb	r1, r3
 800780c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8007810:	b2da      	uxtb	r2, r3
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007816:	400a      	ands	r2, r1
 8007818:	b2d2      	uxtb	r2, r2
 800781a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007820:	1c5a      	adds	r2, r3, #1
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800782c:	b29b      	uxth	r3, r3
 800782e:	3b01      	subs	r3, #1
 8007830:	b29a      	uxth	r2, r3
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	69db      	ldr	r3, [r3, #28]
 800783e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007842:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007846:	f003 0307 	and.w	r3, r3, #7
 800784a:	2b00      	cmp	r3, #0
 800784c:	d055      	beq.n	80078fa <UART_RxISR_8BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800784e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007852:	f003 0301 	and.w	r3, r3, #1
 8007856:	2b00      	cmp	r3, #0
 8007858:	d011      	beq.n	800787e <UART_RxISR_8BIT_FIFOEN+0xca>
 800785a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800785e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007862:	2b00      	cmp	r3, #0
 8007864:	d00b      	beq.n	800787e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	2201      	movs	r2, #1
 800786c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007874:	f043 0201 	orr.w	r2, r3, #1
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800787e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007882:	f003 0302 	and.w	r3, r3, #2
 8007886:	2b00      	cmp	r3, #0
 8007888:	d011      	beq.n	80078ae <UART_RxISR_8BIT_FIFOEN+0xfa>
 800788a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800788e:	f003 0301 	and.w	r3, r3, #1
 8007892:	2b00      	cmp	r3, #0
 8007894:	d00b      	beq.n	80078ae <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	2202      	movs	r2, #2
 800789c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80078a4:	f043 0204 	orr.w	r2, r3, #4
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80078ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80078b2:	f003 0304 	and.w	r3, r3, #4
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d011      	beq.n	80078de <UART_RxISR_8BIT_FIFOEN+0x12a>
 80078ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80078be:	f003 0301 	and.w	r3, r3, #1
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d00b      	beq.n	80078de <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	2204      	movs	r2, #4
 80078cc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80078d4:	f043 0202 	orr.w	r2, r3, #2
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d008      	beq.n	80078fa <UART_RxISR_8BIT_FIFOEN+0x146>
        {
          /* Non Blocking error : transfer could go on.
          Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80078ee:	6878      	ldr	r0, [r7, #4]
 80078f0:	4798      	blx	r3
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	2200      	movs	r2, #0
 80078f6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007900:	b29b      	uxth	r3, r3
 8007902:	2b00      	cmp	r3, #0
 8007904:	f040 80a7 	bne.w	8007a56 <UART_RxISR_8BIT_FIFOEN+0x2a2>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800790e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007910:	e853 3f00 	ldrex	r3, [r3]
 8007914:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 8007916:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007918:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800791c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	461a      	mov	r2, r3
 8007926:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800792a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800792c:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800792e:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8007930:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8007932:	e841 2300 	strex	r3, r2, [r1]
 8007936:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8007938:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800793a:	2b00      	cmp	r3, #0
 800793c:	d1e4      	bne.n	8007908 <UART_RxISR_8BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	3308      	adds	r3, #8
 8007944:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007946:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007948:	e853 3f00 	ldrex	r3, [r3]
 800794c:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800794e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007950:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007954:	f023 0301 	bic.w	r3, r3, #1
 8007958:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	3308      	adds	r3, #8
 8007962:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007966:	66ba      	str	r2, [r7, #104]	@ 0x68
 8007968:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800796a:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800796c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800796e:	e841 2300 	strex	r3, r2, [r1]
 8007972:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8007974:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007976:	2b00      	cmp	r3, #0
 8007978:	d1e1      	bne.n	800793e <UART_RxISR_8BIT_FIFOEN+0x18a>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	2220      	movs	r2, #32
 800797e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	2200      	movs	r2, #0
 8007986:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	2200      	movs	r2, #0
 800798c:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	4a62      	ldr	r2, [pc, #392]	@ (8007b1c <UART_RxISR_8BIT_FIFOEN+0x368>)
 8007994:	4293      	cmp	r3, r2
 8007996:	d021      	beq.n	80079dc <UART_RxISR_8BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	685b      	ldr	r3, [r3, #4]
 800799e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d01a      	beq.n	80079dc <UART_RxISR_8BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079ac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80079ae:	e853 3f00 	ldrex	r3, [r3]
 80079b2:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80079b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80079b6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80079ba:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	461a      	mov	r2, r3
 80079c4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80079c8:	657b      	str	r3, [r7, #84]	@ 0x54
 80079ca:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079cc:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80079ce:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80079d0:	e841 2300 	strex	r3, r2, [r1]
 80079d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80079d6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d1e4      	bne.n	80079a6 <UART_RxISR_8BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80079e0:	2b01      	cmp	r3, #1
 80079e2:	d132      	bne.n	8007a4a <UART_RxISR_8BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	2200      	movs	r2, #0
 80079e8:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80079f2:	e853 3f00 	ldrex	r3, [r3]
 80079f6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80079f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079fa:	f023 0310 	bic.w	r3, r3, #16
 80079fe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	461a      	mov	r2, r3
 8007a08:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007a0c:	643b      	str	r3, [r7, #64]	@ 0x40
 8007a0e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a10:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007a12:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007a14:	e841 2300 	strex	r3, r2, [r1]
 8007a18:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007a1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d1e4      	bne.n	80079ea <UART_RxISR_8BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	69db      	ldr	r3, [r3, #28]
 8007a26:	f003 0310 	and.w	r3, r3, #16
 8007a2a:	2b10      	cmp	r3, #16
 8007a2c:	d103      	bne.n	8007a36 <UART_RxISR_8BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	2210      	movs	r2, #16
 8007a34:	621a      	str	r2, [r3, #32]
          }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8007a3c:	687a      	ldr	r2, [r7, #4]
 8007a3e:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 8007a42:	4611      	mov	r1, r2
 8007a44:	6878      	ldr	r0, [r7, #4]
 8007a46:	4798      	blx	r3
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8007a48:	e010      	b.n	8007a6c <UART_RxISR_8BIT_FIFOEN+0x2b8>
          huart->RxCpltCallback(huart);
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007a50:	6878      	ldr	r0, [r7, #4]
 8007a52:	4798      	blx	r3
        break;
 8007a54:	e00a      	b.n	8007a6c <UART_RxISR_8BIT_FIFOEN+0x2b8>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007a56:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d006      	beq.n	8007a6c <UART_RxISR_8BIT_FIFOEN+0x2b8>
 8007a5e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007a62:	f003 0320 	and.w	r3, r3, #32
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	f47f aec8 	bne.w	80077fc <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007a72:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007a76:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d049      	beq.n	8007b12 <UART_RxISR_8BIT_FIFOEN+0x35e>
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007a84:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 8007a88:	429a      	cmp	r2, r3
 8007a8a:	d242      	bcs.n	8007b12 <UART_RxISR_8BIT_FIFOEN+0x35e>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	3308      	adds	r3, #8
 8007a92:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a94:	6a3b      	ldr	r3, [r7, #32]
 8007a96:	e853 3f00 	ldrex	r3, [r3]
 8007a9a:	61fb      	str	r3, [r7, #28]
   return(result);
 8007a9c:	69fb      	ldr	r3, [r7, #28]
 8007a9e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007aa2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	3308      	adds	r3, #8
 8007aac:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8007ab0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007ab2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ab4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007ab6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007ab8:	e841 2300 	strex	r3, r2, [r1]
 8007abc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007abe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d1e3      	bne.n	8007a8c <UART_RxISR_8BIT_FIFOEN+0x2d8>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	4a16      	ldr	r2, [pc, #88]	@ (8007b20 <UART_RxISR_8BIT_FIFOEN+0x36c>)
 8007ac8:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	e853 3f00 	ldrex	r3, [r3]
 8007ad6:	60bb      	str	r3, [r7, #8]
   return(result);
 8007ad8:	68bb      	ldr	r3, [r7, #8]
 8007ada:	f043 0320 	orr.w	r3, r3, #32
 8007ade:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	461a      	mov	r2, r3
 8007ae8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007aec:	61bb      	str	r3, [r7, #24]
 8007aee:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007af0:	6979      	ldr	r1, [r7, #20]
 8007af2:	69ba      	ldr	r2, [r7, #24]
 8007af4:	e841 2300 	strex	r3, r2, [r1]
 8007af8:	613b      	str	r3, [r7, #16]
   return(result);
 8007afa:	693b      	ldr	r3, [r7, #16]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d1e4      	bne.n	8007aca <UART_RxISR_8BIT_FIFOEN+0x316>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007b00:	e007      	b.n	8007b12 <UART_RxISR_8BIT_FIFOEN+0x35e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	699a      	ldr	r2, [r3, #24]
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	f042 0208 	orr.w	r2, r2, #8
 8007b10:	619a      	str	r2, [r3, #24]
}
 8007b12:	bf00      	nop
 8007b14:	37b0      	adds	r7, #176	@ 0xb0
 8007b16:	46bd      	mov	sp, r7
 8007b18:	bd80      	pop	{r7, pc}
 8007b1a:	bf00      	nop
 8007b1c:	40008000 	.word	0x40008000
 8007b20:	08007435 	.word	0x08007435

08007b24 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007b24:	b580      	push	{r7, lr}
 8007b26:	b0ae      	sub	sp, #184	@ 0xb8
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8007b32:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	69db      	ldr	r3, [r3, #28]
 8007b3c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	689b      	ldr	r3, [r3, #8]
 8007b50:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007b5a:	2b22      	cmp	r3, #34	@ 0x22
 8007b5c:	f040 818d 	bne.w	8007e7a <UART_RxISR_16BIT_FIFOEN+0x356>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007b66:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007b6a:	e130      	b.n	8007dce <UART_RxISR_16BIT_FIFOEN+0x2aa>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b72:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007b7a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8007b7e:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 8007b82:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8007b86:	4013      	ands	r3, r2
 8007b88:	b29a      	uxth	r2, r3
 8007b8a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007b8e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007b94:	1c9a      	adds	r2, r3, #2
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007ba0:	b29b      	uxth	r3, r3
 8007ba2:	3b01      	subs	r3, #1
 8007ba4:	b29a      	uxth	r2, r3
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	69db      	ldr	r3, [r3, #28]
 8007bb2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007bb6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007bba:	f003 0307 	and.w	r3, r3, #7
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d055      	beq.n	8007c6e <UART_RxISR_16BIT_FIFOEN+0x14a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007bc2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007bc6:	f003 0301 	and.w	r3, r3, #1
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d011      	beq.n	8007bf2 <UART_RxISR_16BIT_FIFOEN+0xce>
 8007bce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007bd2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d00b      	beq.n	8007bf2 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	2201      	movs	r2, #1
 8007be0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007be8:	f043 0201 	orr.w	r2, r3, #1
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007bf2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007bf6:	f003 0302 	and.w	r3, r3, #2
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d011      	beq.n	8007c22 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8007bfe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007c02:	f003 0301 	and.w	r3, r3, #1
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d00b      	beq.n	8007c22 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	2202      	movs	r2, #2
 8007c10:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c18:	f043 0204 	orr.w	r2, r3, #4
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007c22:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007c26:	f003 0304 	and.w	r3, r3, #4
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d011      	beq.n	8007c52 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8007c2e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007c32:	f003 0301 	and.w	r3, r3, #1
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d00b      	beq.n	8007c52 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	2204      	movs	r2, #4
 8007c40:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c48:	f043 0202 	orr.w	r2, r3, #2
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d008      	beq.n	8007c6e <UART_RxISR_16BIT_FIFOEN+0x14a>
        {
          /* Non Blocking error : transfer could go on.
          Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007c62:	6878      	ldr	r0, [r7, #4]
 8007c64:	4798      	blx	r3
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	2200      	movs	r2, #0
 8007c6a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007c74:	b29b      	uxth	r3, r3
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	f040 80a9 	bne.w	8007dce <UART_RxISR_16BIT_FIFOEN+0x2aa>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c82:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007c84:	e853 3f00 	ldrex	r3, [r3]
 8007c88:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007c8a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007c8c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007c90:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	461a      	mov	r2, r3
 8007c9a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007c9e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007ca2:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ca4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007ca6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007caa:	e841 2300 	strex	r3, r2, [r1]
 8007cae:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007cb0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d1e2      	bne.n	8007c7c <UART_RxISR_16BIT_FIFOEN+0x158>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	3308      	adds	r3, #8
 8007cbc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cbe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007cc0:	e853 3f00 	ldrex	r3, [r3]
 8007cc4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007cc6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007cc8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007ccc:	f023 0301 	bic.w	r3, r3, #1
 8007cd0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	3308      	adds	r3, #8
 8007cda:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8007cde:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007ce0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ce2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007ce4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007ce6:	e841 2300 	strex	r3, r2, [r1]
 8007cea:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007cec:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d1e1      	bne.n	8007cb6 <UART_RxISR_16BIT_FIFOEN+0x192>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	2220      	movs	r2, #32
 8007cf6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	2200      	movs	r2, #0
 8007cfe:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	2200      	movs	r2, #0
 8007d04:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	4a62      	ldr	r2, [pc, #392]	@ (8007e94 <UART_RxISR_16BIT_FIFOEN+0x370>)
 8007d0c:	4293      	cmp	r3, r2
 8007d0e:	d021      	beq.n	8007d54 <UART_RxISR_16BIT_FIFOEN+0x230>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	685b      	ldr	r3, [r3, #4]
 8007d16:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d01a      	beq.n	8007d54 <UART_RxISR_16BIT_FIFOEN+0x230>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d24:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007d26:	e853 3f00 	ldrex	r3, [r3]
 8007d2a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007d2c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007d2e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007d32:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	461a      	mov	r2, r3
 8007d3c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007d40:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007d42:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d44:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007d46:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007d48:	e841 2300 	strex	r3, r2, [r1]
 8007d4c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007d4e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d1e4      	bne.n	8007d1e <UART_RxISR_16BIT_FIFOEN+0x1fa>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007d58:	2b01      	cmp	r3, #1
 8007d5a:	d132      	bne.n	8007dc2 <UART_RxISR_16BIT_FIFOEN+0x29e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	2200      	movs	r2, #0
 8007d60:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d6a:	e853 3f00 	ldrex	r3, [r3]
 8007d6e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007d70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d72:	f023 0310 	bic.w	r3, r3, #16
 8007d76:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	461a      	mov	r2, r3
 8007d80:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007d84:	647b      	str	r3, [r7, #68]	@ 0x44
 8007d86:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d88:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007d8a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007d8c:	e841 2300 	strex	r3, r2, [r1]
 8007d90:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007d92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d1e4      	bne.n	8007d62 <UART_RxISR_16BIT_FIFOEN+0x23e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	69db      	ldr	r3, [r3, #28]
 8007d9e:	f003 0310 	and.w	r3, r3, #16
 8007da2:	2b10      	cmp	r3, #16
 8007da4:	d103      	bne.n	8007dae <UART_RxISR_16BIT_FIFOEN+0x28a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	2210      	movs	r2, #16
 8007dac:	621a      	str	r2, [r3, #32]
          }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8007db4:	687a      	ldr	r2, [r7, #4]
 8007db6:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 8007dba:	4611      	mov	r1, r2
 8007dbc:	6878      	ldr	r0, [r7, #4]
 8007dbe:	4798      	blx	r3
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8007dc0:	e010      	b.n	8007de4 <UART_RxISR_16BIT_FIFOEN+0x2c0>
          huart->RxCpltCallback(huart);
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007dc8:	6878      	ldr	r0, [r7, #4]
 8007dca:	4798      	blx	r3
        break;
 8007dcc:	e00a      	b.n	8007de4 <UART_RxISR_16BIT_FIFOEN+0x2c0>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007dce:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d006      	beq.n	8007de4 <UART_RxISR_16BIT_FIFOEN+0x2c0>
 8007dd6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007dda:	f003 0320 	and.w	r3, r3, #32
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	f47f aec4 	bne.w	8007b6c <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007dea:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007dee:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d049      	beq.n	8007e8a <UART_RxISR_16BIT_FIFOEN+0x366>
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007dfc:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8007e00:	429a      	cmp	r2, r3
 8007e02:	d242      	bcs.n	8007e8a <UART_RxISR_16BIT_FIFOEN+0x366>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	3308      	adds	r3, #8
 8007e0a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e0e:	e853 3f00 	ldrex	r3, [r3]
 8007e12:	623b      	str	r3, [r7, #32]
   return(result);
 8007e14:	6a3b      	ldr	r3, [r7, #32]
 8007e16:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007e1a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	3308      	adds	r3, #8
 8007e24:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8007e28:	633a      	str	r2, [r7, #48]	@ 0x30
 8007e2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e2c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007e2e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007e30:	e841 2300 	strex	r3, r2, [r1]
 8007e34:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007e36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d1e3      	bne.n	8007e04 <UART_RxISR_16BIT_FIFOEN+0x2e0>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	4a16      	ldr	r2, [pc, #88]	@ (8007e98 <UART_RxISR_16BIT_FIFOEN+0x374>)
 8007e40:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e48:	693b      	ldr	r3, [r7, #16]
 8007e4a:	e853 3f00 	ldrex	r3, [r3]
 8007e4e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	f043 0320 	orr.w	r3, r3, #32
 8007e56:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	461a      	mov	r2, r3
 8007e60:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007e64:	61fb      	str	r3, [r7, #28]
 8007e66:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e68:	69b9      	ldr	r1, [r7, #24]
 8007e6a:	69fa      	ldr	r2, [r7, #28]
 8007e6c:	e841 2300 	strex	r3, r2, [r1]
 8007e70:	617b      	str	r3, [r7, #20]
   return(result);
 8007e72:	697b      	ldr	r3, [r7, #20]
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d1e4      	bne.n	8007e42 <UART_RxISR_16BIT_FIFOEN+0x31e>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007e78:	e007      	b.n	8007e8a <UART_RxISR_16BIT_FIFOEN+0x366>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	699a      	ldr	r2, [r3, #24]
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	f042 0208 	orr.w	r2, r2, #8
 8007e88:	619a      	str	r2, [r3, #24]
}
 8007e8a:	bf00      	nop
 8007e8c:	37b8      	adds	r7, #184	@ 0xb8
 8007e8e:	46bd      	mov	sp, r7
 8007e90:	bd80      	pop	{r7, pc}
 8007e92:	bf00      	nop
 8007e94:	40008000 	.word	0x40008000
 8007e98:	080075f5 	.word	0x080075f5

08007e9c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007e9c:	b480      	push	{r7}
 8007e9e:	b083      	sub	sp, #12
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007ea4:	bf00      	nop
 8007ea6:	370c      	adds	r7, #12
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eae:	4770      	bx	lr

08007eb0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007eb0:	b480      	push	{r7}
 8007eb2:	b083      	sub	sp, #12
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007eb8:	bf00      	nop
 8007eba:	370c      	adds	r7, #12
 8007ebc:	46bd      	mov	sp, r7
 8007ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec2:	4770      	bx	lr

08007ec4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007ec4:	b480      	push	{r7}
 8007ec6:	b083      	sub	sp, #12
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007ecc:	bf00      	nop
 8007ece:	370c      	adds	r7, #12
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed6:	4770      	bx	lr

08007ed8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007ed8:	b480      	push	{r7}
 8007eda:	b085      	sub	sp, #20
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007ee6:	2b01      	cmp	r3, #1
 8007ee8:	d101      	bne.n	8007eee <HAL_UARTEx_DisableFifoMode+0x16>
 8007eea:	2302      	movs	r3, #2
 8007eec:	e027      	b.n	8007f3e <HAL_UARTEx_DisableFifoMode+0x66>
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	2201      	movs	r2, #1
 8007ef2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	2224      	movs	r2, #36	@ 0x24
 8007efa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	681a      	ldr	r2, [r3, #0]
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	f022 0201 	bic.w	r2, r2, #1
 8007f14:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007f1c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	2200      	movs	r2, #0
 8007f22:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	68fa      	ldr	r2, [r7, #12]
 8007f2a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	2220      	movs	r2, #32
 8007f30:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	2200      	movs	r2, #0
 8007f38:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007f3c:	2300      	movs	r3, #0
}
 8007f3e:	4618      	mov	r0, r3
 8007f40:	3714      	adds	r7, #20
 8007f42:	46bd      	mov	sp, r7
 8007f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f48:	4770      	bx	lr

08007f4a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007f4a:	b580      	push	{r7, lr}
 8007f4c:	b084      	sub	sp, #16
 8007f4e:	af00      	add	r7, sp, #0
 8007f50:	6078      	str	r0, [r7, #4]
 8007f52:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007f5a:	2b01      	cmp	r3, #1
 8007f5c:	d101      	bne.n	8007f62 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007f5e:	2302      	movs	r3, #2
 8007f60:	e02d      	b.n	8007fbe <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	2201      	movs	r2, #1
 8007f66:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	2224      	movs	r2, #36	@ 0x24
 8007f6e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	681a      	ldr	r2, [r3, #0]
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	f022 0201 	bic.w	r2, r2, #1
 8007f88:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	689b      	ldr	r3, [r3, #8]
 8007f90:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	683a      	ldr	r2, [r7, #0]
 8007f9a:	430a      	orrs	r2, r1
 8007f9c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007f9e:	6878      	ldr	r0, [r7, #4]
 8007fa0:	f000 f850 	bl	8008044 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	68fa      	ldr	r2, [r7, #12]
 8007faa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	2220      	movs	r2, #32
 8007fb0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	2200      	movs	r2, #0
 8007fb8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007fbc:	2300      	movs	r3, #0
}
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	3710      	adds	r7, #16
 8007fc2:	46bd      	mov	sp, r7
 8007fc4:	bd80      	pop	{r7, pc}

08007fc6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007fc6:	b580      	push	{r7, lr}
 8007fc8:	b084      	sub	sp, #16
 8007fca:	af00      	add	r7, sp, #0
 8007fcc:	6078      	str	r0, [r7, #4]
 8007fce:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007fd6:	2b01      	cmp	r3, #1
 8007fd8:	d101      	bne.n	8007fde <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007fda:	2302      	movs	r3, #2
 8007fdc:	e02d      	b.n	800803a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	2201      	movs	r2, #1
 8007fe2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	2224      	movs	r2, #36	@ 0x24
 8007fea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	681a      	ldr	r2, [r3, #0]
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	f022 0201 	bic.w	r2, r2, #1
 8008004:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	689b      	ldr	r3, [r3, #8]
 800800c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	683a      	ldr	r2, [r7, #0]
 8008016:	430a      	orrs	r2, r1
 8008018:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800801a:	6878      	ldr	r0, [r7, #4]
 800801c:	f000 f812 	bl	8008044 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	68fa      	ldr	r2, [r7, #12]
 8008026:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	2220      	movs	r2, #32
 800802c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	2200      	movs	r2, #0
 8008034:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008038:	2300      	movs	r3, #0
}
 800803a:	4618      	mov	r0, r3
 800803c:	3710      	adds	r7, #16
 800803e:	46bd      	mov	sp, r7
 8008040:	bd80      	pop	{r7, pc}
	...

08008044 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008044:	b480      	push	{r7}
 8008046:	b085      	sub	sp, #20
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008050:	2b00      	cmp	r3, #0
 8008052:	d108      	bne.n	8008066 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	2201      	movs	r2, #1
 8008058:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	2201      	movs	r2, #1
 8008060:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008064:	e031      	b.n	80080ca <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008066:	2308      	movs	r3, #8
 8008068:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800806a:	2308      	movs	r3, #8
 800806c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	689b      	ldr	r3, [r3, #8]
 8008074:	0e5b      	lsrs	r3, r3, #25
 8008076:	b2db      	uxtb	r3, r3
 8008078:	f003 0307 	and.w	r3, r3, #7
 800807c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	689b      	ldr	r3, [r3, #8]
 8008084:	0f5b      	lsrs	r3, r3, #29
 8008086:	b2db      	uxtb	r3, r3
 8008088:	f003 0307 	and.w	r3, r3, #7
 800808c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800808e:	7bbb      	ldrb	r3, [r7, #14]
 8008090:	7b3a      	ldrb	r2, [r7, #12]
 8008092:	4911      	ldr	r1, [pc, #68]	@ (80080d8 <UARTEx_SetNbDataToProcess+0x94>)
 8008094:	5c8a      	ldrb	r2, [r1, r2]
 8008096:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800809a:	7b3a      	ldrb	r2, [r7, #12]
 800809c:	490f      	ldr	r1, [pc, #60]	@ (80080dc <UARTEx_SetNbDataToProcess+0x98>)
 800809e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80080a0:	fb93 f3f2 	sdiv	r3, r3, r2
 80080a4:	b29a      	uxth	r2, r3
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80080ac:	7bfb      	ldrb	r3, [r7, #15]
 80080ae:	7b7a      	ldrb	r2, [r7, #13]
 80080b0:	4909      	ldr	r1, [pc, #36]	@ (80080d8 <UARTEx_SetNbDataToProcess+0x94>)
 80080b2:	5c8a      	ldrb	r2, [r1, r2]
 80080b4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80080b8:	7b7a      	ldrb	r2, [r7, #13]
 80080ba:	4908      	ldr	r1, [pc, #32]	@ (80080dc <UARTEx_SetNbDataToProcess+0x98>)
 80080bc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80080be:	fb93 f3f2 	sdiv	r3, r3, r2
 80080c2:	b29a      	uxth	r2, r3
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80080ca:	bf00      	nop
 80080cc:	3714      	adds	r7, #20
 80080ce:	46bd      	mov	sp, r7
 80080d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d4:	4770      	bx	lr
 80080d6:	bf00      	nop
 80080d8:	0800819c 	.word	0x0800819c
 80080dc:	080081a4 	.word	0x080081a4

080080e0 <memset>:
 80080e0:	4402      	add	r2, r0
 80080e2:	4603      	mov	r3, r0
 80080e4:	4293      	cmp	r3, r2
 80080e6:	d100      	bne.n	80080ea <memset+0xa>
 80080e8:	4770      	bx	lr
 80080ea:	f803 1b01 	strb.w	r1, [r3], #1
 80080ee:	e7f9      	b.n	80080e4 <memset+0x4>

080080f0 <__libc_init_array>:
 80080f0:	b570      	push	{r4, r5, r6, lr}
 80080f2:	4d0d      	ldr	r5, [pc, #52]	@ (8008128 <__libc_init_array+0x38>)
 80080f4:	4c0d      	ldr	r4, [pc, #52]	@ (800812c <__libc_init_array+0x3c>)
 80080f6:	1b64      	subs	r4, r4, r5
 80080f8:	10a4      	asrs	r4, r4, #2
 80080fa:	2600      	movs	r6, #0
 80080fc:	42a6      	cmp	r6, r4
 80080fe:	d109      	bne.n	8008114 <__libc_init_array+0x24>
 8008100:	4d0b      	ldr	r5, [pc, #44]	@ (8008130 <__libc_init_array+0x40>)
 8008102:	4c0c      	ldr	r4, [pc, #48]	@ (8008134 <__libc_init_array+0x44>)
 8008104:	f000 f826 	bl	8008154 <_init>
 8008108:	1b64      	subs	r4, r4, r5
 800810a:	10a4      	asrs	r4, r4, #2
 800810c:	2600      	movs	r6, #0
 800810e:	42a6      	cmp	r6, r4
 8008110:	d105      	bne.n	800811e <__libc_init_array+0x2e>
 8008112:	bd70      	pop	{r4, r5, r6, pc}
 8008114:	f855 3b04 	ldr.w	r3, [r5], #4
 8008118:	4798      	blx	r3
 800811a:	3601      	adds	r6, #1
 800811c:	e7ee      	b.n	80080fc <__libc_init_array+0xc>
 800811e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008122:	4798      	blx	r3
 8008124:	3601      	adds	r6, #1
 8008126:	e7f2      	b.n	800810e <__libc_init_array+0x1e>
 8008128:	080081b4 	.word	0x080081b4
 800812c:	080081b4 	.word	0x080081b4
 8008130:	080081b4 	.word	0x080081b4
 8008134:	080081b8 	.word	0x080081b8

08008138 <memcpy>:
 8008138:	440a      	add	r2, r1
 800813a:	4291      	cmp	r1, r2
 800813c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008140:	d100      	bne.n	8008144 <memcpy+0xc>
 8008142:	4770      	bx	lr
 8008144:	b510      	push	{r4, lr}
 8008146:	f811 4b01 	ldrb.w	r4, [r1], #1
 800814a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800814e:	4291      	cmp	r1, r2
 8008150:	d1f9      	bne.n	8008146 <memcpy+0xe>
 8008152:	bd10      	pop	{r4, pc}

08008154 <_init>:
 8008154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008156:	bf00      	nop
 8008158:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800815a:	bc08      	pop	{r3}
 800815c:	469e      	mov	lr, r3
 800815e:	4770      	bx	lr

08008160 <_fini>:
 8008160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008162:	bf00      	nop
 8008164:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008166:	bc08      	pop	{r3}
 8008168:	469e      	mov	lr, r3
 800816a:	4770      	bx	lr
