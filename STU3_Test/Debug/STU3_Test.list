
STU3_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b054  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  0800b22c  0800b22c  0000c22c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b27c  0800b27c  0000d20c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800b27c  0800b27c  0000c27c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b284  0800b284  0000d20c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b284  0800b284  0000c284  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b288  0800b288  0000c288  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000020c  20000000  0800b28c  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000011b4  2000020c  0800b498  0000d20c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200013c0  0800b498  0000d3c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d20c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002193b  00000000  00000000  0000d23c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003601  00000000  00000000  0002eb77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017c8  00000000  00000000  00032178  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000012ad  00000000  00000000  00033940  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003831  00000000  00000000  00034bed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e3fd  00000000  00000000  0003841e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00116d5e  00000000  00000000  0005681b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0016d579  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006860  00000000  00000000  0016d5bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  00173e1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000020c 	.word	0x2000020c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800b214 	.word	0x0800b214

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000210 	.word	0x20000210
 8000214:	0800b214 	.word	0x0800b214

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b988 	b.w	8000540 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	468e      	mov	lr, r1
 8000250:	4604      	mov	r4, r0
 8000252:	4688      	mov	r8, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4617      	mov	r7, r2
 800025c:	d962      	bls.n	8000324 <__udivmoddi4+0xdc>
 800025e:	fab2 f682 	clz	r6, r2
 8000262:	b14e      	cbz	r6, 8000278 <__udivmoddi4+0x30>
 8000264:	f1c6 0320 	rsb	r3, r6, #32
 8000268:	fa01 f806 	lsl.w	r8, r1, r6
 800026c:	fa20 f303 	lsr.w	r3, r0, r3
 8000270:	40b7      	lsls	r7, r6
 8000272:	ea43 0808 	orr.w	r8, r3, r8
 8000276:	40b4      	lsls	r4, r6
 8000278:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800027c:	fa1f fc87 	uxth.w	ip, r7
 8000280:	fbb8 f1fe 	udiv	r1, r8, lr
 8000284:	0c23      	lsrs	r3, r4, #16
 8000286:	fb0e 8811 	mls	r8, lr, r1, r8
 800028a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800028e:	fb01 f20c 	mul.w	r2, r1, ip
 8000292:	429a      	cmp	r2, r3
 8000294:	d909      	bls.n	80002aa <__udivmoddi4+0x62>
 8000296:	18fb      	adds	r3, r7, r3
 8000298:	f101 30ff 	add.w	r0, r1, #4294967295
 800029c:	f080 80ea 	bcs.w	8000474 <__udivmoddi4+0x22c>
 80002a0:	429a      	cmp	r2, r3
 80002a2:	f240 80e7 	bls.w	8000474 <__udivmoddi4+0x22c>
 80002a6:	3902      	subs	r1, #2
 80002a8:	443b      	add	r3, r7
 80002aa:	1a9a      	subs	r2, r3, r2
 80002ac:	b2a3      	uxth	r3, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002ba:	fb00 fc0c 	mul.w	ip, r0, ip
 80002be:	459c      	cmp	ip, r3
 80002c0:	d909      	bls.n	80002d6 <__udivmoddi4+0x8e>
 80002c2:	18fb      	adds	r3, r7, r3
 80002c4:	f100 32ff 	add.w	r2, r0, #4294967295
 80002c8:	f080 80d6 	bcs.w	8000478 <__udivmoddi4+0x230>
 80002cc:	459c      	cmp	ip, r3
 80002ce:	f240 80d3 	bls.w	8000478 <__udivmoddi4+0x230>
 80002d2:	443b      	add	r3, r7
 80002d4:	3802      	subs	r0, #2
 80002d6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002da:	eba3 030c 	sub.w	r3, r3, ip
 80002de:	2100      	movs	r1, #0
 80002e0:	b11d      	cbz	r5, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40f3      	lsrs	r3, r6
 80002e4:	2200      	movs	r2, #0
 80002e6:	e9c5 3200 	strd	r3, r2, [r5]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d905      	bls.n	80002fe <__udivmoddi4+0xb6>
 80002f2:	b10d      	cbz	r5, 80002f8 <__udivmoddi4+0xb0>
 80002f4:	e9c5 0100 	strd	r0, r1, [r5]
 80002f8:	2100      	movs	r1, #0
 80002fa:	4608      	mov	r0, r1
 80002fc:	e7f5      	b.n	80002ea <__udivmoddi4+0xa2>
 80002fe:	fab3 f183 	clz	r1, r3
 8000302:	2900      	cmp	r1, #0
 8000304:	d146      	bne.n	8000394 <__udivmoddi4+0x14c>
 8000306:	4573      	cmp	r3, lr
 8000308:	d302      	bcc.n	8000310 <__udivmoddi4+0xc8>
 800030a:	4282      	cmp	r2, r0
 800030c:	f200 8105 	bhi.w	800051a <__udivmoddi4+0x2d2>
 8000310:	1a84      	subs	r4, r0, r2
 8000312:	eb6e 0203 	sbc.w	r2, lr, r3
 8000316:	2001      	movs	r0, #1
 8000318:	4690      	mov	r8, r2
 800031a:	2d00      	cmp	r5, #0
 800031c:	d0e5      	beq.n	80002ea <__udivmoddi4+0xa2>
 800031e:	e9c5 4800 	strd	r4, r8, [r5]
 8000322:	e7e2      	b.n	80002ea <__udivmoddi4+0xa2>
 8000324:	2a00      	cmp	r2, #0
 8000326:	f000 8090 	beq.w	800044a <__udivmoddi4+0x202>
 800032a:	fab2 f682 	clz	r6, r2
 800032e:	2e00      	cmp	r6, #0
 8000330:	f040 80a4 	bne.w	800047c <__udivmoddi4+0x234>
 8000334:	1a8a      	subs	r2, r1, r2
 8000336:	0c03      	lsrs	r3, r0, #16
 8000338:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800033c:	b280      	uxth	r0, r0
 800033e:	b2bc      	uxth	r4, r7
 8000340:	2101      	movs	r1, #1
 8000342:	fbb2 fcfe 	udiv	ip, r2, lr
 8000346:	fb0e 221c 	mls	r2, lr, ip, r2
 800034a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800034e:	fb04 f20c 	mul.w	r2, r4, ip
 8000352:	429a      	cmp	r2, r3
 8000354:	d907      	bls.n	8000366 <__udivmoddi4+0x11e>
 8000356:	18fb      	adds	r3, r7, r3
 8000358:	f10c 38ff 	add.w	r8, ip, #4294967295
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x11c>
 800035e:	429a      	cmp	r2, r3
 8000360:	f200 80e0 	bhi.w	8000524 <__udivmoddi4+0x2dc>
 8000364:	46c4      	mov	ip, r8
 8000366:	1a9b      	subs	r3, r3, r2
 8000368:	fbb3 f2fe 	udiv	r2, r3, lr
 800036c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000370:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000374:	fb02 f404 	mul.w	r4, r2, r4
 8000378:	429c      	cmp	r4, r3
 800037a:	d907      	bls.n	800038c <__udivmoddi4+0x144>
 800037c:	18fb      	adds	r3, r7, r3
 800037e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x142>
 8000384:	429c      	cmp	r4, r3
 8000386:	f200 80ca 	bhi.w	800051e <__udivmoddi4+0x2d6>
 800038a:	4602      	mov	r2, r0
 800038c:	1b1b      	subs	r3, r3, r4
 800038e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000392:	e7a5      	b.n	80002e0 <__udivmoddi4+0x98>
 8000394:	f1c1 0620 	rsb	r6, r1, #32
 8000398:	408b      	lsls	r3, r1
 800039a:	fa22 f706 	lsr.w	r7, r2, r6
 800039e:	431f      	orrs	r7, r3
 80003a0:	fa0e f401 	lsl.w	r4, lr, r1
 80003a4:	fa20 f306 	lsr.w	r3, r0, r6
 80003a8:	fa2e fe06 	lsr.w	lr, lr, r6
 80003ac:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003b0:	4323      	orrs	r3, r4
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	fa1f fc87 	uxth.w	ip, r7
 80003ba:	fbbe f0f9 	udiv	r0, lr, r9
 80003be:	0c1c      	lsrs	r4, r3, #16
 80003c0:	fb09 ee10 	mls	lr, r9, r0, lr
 80003c4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003c8:	fb00 fe0c 	mul.w	lr, r0, ip
 80003cc:	45a6      	cmp	lr, r4
 80003ce:	fa02 f201 	lsl.w	r2, r2, r1
 80003d2:	d909      	bls.n	80003e8 <__udivmoddi4+0x1a0>
 80003d4:	193c      	adds	r4, r7, r4
 80003d6:	f100 3aff 	add.w	sl, r0, #4294967295
 80003da:	f080 809c 	bcs.w	8000516 <__udivmoddi4+0x2ce>
 80003de:	45a6      	cmp	lr, r4
 80003e0:	f240 8099 	bls.w	8000516 <__udivmoddi4+0x2ce>
 80003e4:	3802      	subs	r0, #2
 80003e6:	443c      	add	r4, r7
 80003e8:	eba4 040e 	sub.w	r4, r4, lr
 80003ec:	fa1f fe83 	uxth.w	lr, r3
 80003f0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003f4:	fb09 4413 	mls	r4, r9, r3, r4
 80003f8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003fc:	fb03 fc0c 	mul.w	ip, r3, ip
 8000400:	45a4      	cmp	ip, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1ce>
 8000404:	193c      	adds	r4, r7, r4
 8000406:	f103 3eff 	add.w	lr, r3, #4294967295
 800040a:	f080 8082 	bcs.w	8000512 <__udivmoddi4+0x2ca>
 800040e:	45a4      	cmp	ip, r4
 8000410:	d97f      	bls.n	8000512 <__udivmoddi4+0x2ca>
 8000412:	3b02      	subs	r3, #2
 8000414:	443c      	add	r4, r7
 8000416:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800041a:	eba4 040c 	sub.w	r4, r4, ip
 800041e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000422:	4564      	cmp	r4, ip
 8000424:	4673      	mov	r3, lr
 8000426:	46e1      	mov	r9, ip
 8000428:	d362      	bcc.n	80004f0 <__udivmoddi4+0x2a8>
 800042a:	d05f      	beq.n	80004ec <__udivmoddi4+0x2a4>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x1fe>
 800042e:	ebb8 0203 	subs.w	r2, r8, r3
 8000432:	eb64 0409 	sbc.w	r4, r4, r9
 8000436:	fa04 f606 	lsl.w	r6, r4, r6
 800043a:	fa22 f301 	lsr.w	r3, r2, r1
 800043e:	431e      	orrs	r6, r3
 8000440:	40cc      	lsrs	r4, r1
 8000442:	e9c5 6400 	strd	r6, r4, [r5]
 8000446:	2100      	movs	r1, #0
 8000448:	e74f      	b.n	80002ea <__udivmoddi4+0xa2>
 800044a:	fbb1 fcf2 	udiv	ip, r1, r2
 800044e:	0c01      	lsrs	r1, r0, #16
 8000450:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000454:	b280      	uxth	r0, r0
 8000456:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800045a:	463b      	mov	r3, r7
 800045c:	4638      	mov	r0, r7
 800045e:	463c      	mov	r4, r7
 8000460:	46b8      	mov	r8, r7
 8000462:	46be      	mov	lr, r7
 8000464:	2620      	movs	r6, #32
 8000466:	fbb1 f1f7 	udiv	r1, r1, r7
 800046a:	eba2 0208 	sub.w	r2, r2, r8
 800046e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000472:	e766      	b.n	8000342 <__udivmoddi4+0xfa>
 8000474:	4601      	mov	r1, r0
 8000476:	e718      	b.n	80002aa <__udivmoddi4+0x62>
 8000478:	4610      	mov	r0, r2
 800047a:	e72c      	b.n	80002d6 <__udivmoddi4+0x8e>
 800047c:	f1c6 0220 	rsb	r2, r6, #32
 8000480:	fa2e f302 	lsr.w	r3, lr, r2
 8000484:	40b7      	lsls	r7, r6
 8000486:	40b1      	lsls	r1, r6
 8000488:	fa20 f202 	lsr.w	r2, r0, r2
 800048c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000490:	430a      	orrs	r2, r1
 8000492:	fbb3 f8fe 	udiv	r8, r3, lr
 8000496:	b2bc      	uxth	r4, r7
 8000498:	fb0e 3318 	mls	r3, lr, r8, r3
 800049c:	0c11      	lsrs	r1, r2, #16
 800049e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a2:	fb08 f904 	mul.w	r9, r8, r4
 80004a6:	40b0      	lsls	r0, r6
 80004a8:	4589      	cmp	r9, r1
 80004aa:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004ae:	b280      	uxth	r0, r0
 80004b0:	d93e      	bls.n	8000530 <__udivmoddi4+0x2e8>
 80004b2:	1879      	adds	r1, r7, r1
 80004b4:	f108 3cff 	add.w	ip, r8, #4294967295
 80004b8:	d201      	bcs.n	80004be <__udivmoddi4+0x276>
 80004ba:	4589      	cmp	r9, r1
 80004bc:	d81f      	bhi.n	80004fe <__udivmoddi4+0x2b6>
 80004be:	eba1 0109 	sub.w	r1, r1, r9
 80004c2:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c6:	fb09 f804 	mul.w	r8, r9, r4
 80004ca:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ce:	b292      	uxth	r2, r2
 80004d0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004d4:	4542      	cmp	r2, r8
 80004d6:	d229      	bcs.n	800052c <__udivmoddi4+0x2e4>
 80004d8:	18ba      	adds	r2, r7, r2
 80004da:	f109 31ff 	add.w	r1, r9, #4294967295
 80004de:	d2c4      	bcs.n	800046a <__udivmoddi4+0x222>
 80004e0:	4542      	cmp	r2, r8
 80004e2:	d2c2      	bcs.n	800046a <__udivmoddi4+0x222>
 80004e4:	f1a9 0102 	sub.w	r1, r9, #2
 80004e8:	443a      	add	r2, r7
 80004ea:	e7be      	b.n	800046a <__udivmoddi4+0x222>
 80004ec:	45f0      	cmp	r8, lr
 80004ee:	d29d      	bcs.n	800042c <__udivmoddi4+0x1e4>
 80004f0:	ebbe 0302 	subs.w	r3, lr, r2
 80004f4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004f8:	3801      	subs	r0, #1
 80004fa:	46e1      	mov	r9, ip
 80004fc:	e796      	b.n	800042c <__udivmoddi4+0x1e4>
 80004fe:	eba7 0909 	sub.w	r9, r7, r9
 8000502:	4449      	add	r1, r9
 8000504:	f1a8 0c02 	sub.w	ip, r8, #2
 8000508:	fbb1 f9fe 	udiv	r9, r1, lr
 800050c:	fb09 f804 	mul.w	r8, r9, r4
 8000510:	e7db      	b.n	80004ca <__udivmoddi4+0x282>
 8000512:	4673      	mov	r3, lr
 8000514:	e77f      	b.n	8000416 <__udivmoddi4+0x1ce>
 8000516:	4650      	mov	r0, sl
 8000518:	e766      	b.n	80003e8 <__udivmoddi4+0x1a0>
 800051a:	4608      	mov	r0, r1
 800051c:	e6fd      	b.n	800031a <__udivmoddi4+0xd2>
 800051e:	443b      	add	r3, r7
 8000520:	3a02      	subs	r2, #2
 8000522:	e733      	b.n	800038c <__udivmoddi4+0x144>
 8000524:	f1ac 0c02 	sub.w	ip, ip, #2
 8000528:	443b      	add	r3, r7
 800052a:	e71c      	b.n	8000366 <__udivmoddi4+0x11e>
 800052c:	4649      	mov	r1, r9
 800052e:	e79c      	b.n	800046a <__udivmoddi4+0x222>
 8000530:	eba1 0109 	sub.w	r1, r1, r9
 8000534:	46c4      	mov	ip, r8
 8000536:	fbb1 f9fe 	udiv	r9, r1, lr
 800053a:	fb09 f804 	mul.w	r8, r9, r4
 800053e:	e7c4      	b.n	80004ca <__udivmoddi4+0x282>

08000540 <__aeabi_idiv0>:
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop

08000544 <Encoder_Init>:
#include "Encoder.h"

#define Count_PER_REV 12000.0f
#define TWO_PI 6.283185f

void Encoder_Init(Encoder *enc, TIM_HandleTypeDef *htim) {
 8000544:	b580      	push	{r7, lr}
 8000546:	b082      	sub	sp, #8
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
 800054c:	6039      	str	r1, [r7, #0]
    enc->htim = htim;
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	683a      	ldr	r2, [r7, #0]
 8000552:	601a      	str	r2, [r3, #0]
    HAL_TIM_Encoder_Start(htim, TIM_CHANNEL_ALL);
 8000554:	213c      	movs	r1, #60	@ 0x3c
 8000556:	6838      	ldr	r0, [r7, #0]
 8000558:	f006 f80c 	bl	8006574 <HAL_TIM_Encoder_Start>

    enc->lastRawPosition = __HAL_TIM_GET_COUNTER(htim);
 800055c:	683b      	ldr	r3, [r7, #0]
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000562:	461a      	mov	r2, r3
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	605a      	str	r2, [r3, #4]
    enc->position = 0;
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	f04f 0200 	mov.w	r2, #0
 800056e:	609a      	str	r2, [r3, #8]
    enc->velocity = 0;
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	f04f 0200 	mov.w	r2, #0
 8000576:	60da      	str	r2, [r3, #12]
    enc->acceleration = 0;
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	f04f 0200 	mov.w	r2, #0
 800057e:	611a      	str	r2, [r3, #16]
    enc->lastPosition = 0;
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	f04f 0200 	mov.w	r2, #0
 8000586:	615a      	str	r2, [r3, #20]
    enc->lastVelocity = 0;
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	f04f 0200 	mov.w	r2, #0
 800058e:	619a      	str	r2, [r3, #24]
}
 8000590:	bf00      	nop
 8000592:	3708      	adds	r7, #8
 8000594:	46bd      	mov	sp, r7
 8000596:	bd80      	pop	{r7, pc}

08000598 <Encoder_Update>:

void Encoder_Update(Encoder *enc, float dt) {
 8000598:	b480      	push	{r7}
 800059a:	b085      	sub	sp, #20
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
 80005a0:	ed87 0a00 	vstr	s0, [r7]
    int32_t rawPosition = __HAL_TIM_GET_COUNTER(enc->htim);
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80005ac:	60bb      	str	r3, [r7, #8]
    int32_t deltaRaw = rawPosition - enc->lastRawPosition;
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	685b      	ldr	r3, [r3, #4]
 80005b2:	68ba      	ldr	r2, [r7, #8]
 80005b4:	1ad3      	subs	r3, r2, r3
 80005b6:	60fb      	str	r3, [r7, #12]

    // Handle 16-bit counter wrap-around
    if (deltaRaw > 30000) {
 80005b8:	68fb      	ldr	r3, [r7, #12]
 80005ba:	f247 5230 	movw	r2, #30000	@ 0x7530
 80005be:	4293      	cmp	r3, r2
 80005c0:	dd05      	ble.n	80005ce <Encoder_Update+0x36>
        deltaRaw -= 60000;
 80005c2:	68fb      	ldr	r3, [r7, #12]
 80005c4:	f5a3 436a 	sub.w	r3, r3, #59904	@ 0xea00
 80005c8:	3b60      	subs	r3, #96	@ 0x60
 80005ca:	60fb      	str	r3, [r7, #12]
 80005cc:	e008      	b.n	80005e0 <Encoder_Update+0x48>
    } else if (deltaRaw < -30000) {
 80005ce:	68fb      	ldr	r3, [r7, #12]
 80005d0:	4a25      	ldr	r2, [pc, #148]	@ (8000668 <Encoder_Update+0xd0>)
 80005d2:	4293      	cmp	r3, r2
 80005d4:	da04      	bge.n	80005e0 <Encoder_Update+0x48>
        deltaRaw += 60000;
 80005d6:	68fb      	ldr	r3, [r7, #12]
 80005d8:	f503 436a 	add.w	r3, r3, #59904	@ 0xea00
 80005dc:	3360      	adds	r3, #96	@ 0x60
 80005de:	60fb      	str	r3, [r7, #12]
    }

    enc->position += ((float)deltaRaw * TWO_PI) / Count_PER_REV;
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	ed93 7a02 	vldr	s14, [r3, #8]
 80005e6:	68fb      	ldr	r3, [r7, #12]
 80005e8:	ee07 3a90 	vmov	s15, r3
 80005ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80005f0:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 800066c <Encoder_Update+0xd4>
 80005f4:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80005f8:	ed9f 6a1d 	vldr	s12, [pc, #116]	@ 8000670 <Encoder_Update+0xd8>
 80005fc:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8000600:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	edc3 7a02 	vstr	s15, [r3, #8]
    enc->velocity = (enc->position - enc->lastPosition) / dt;
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	ed93 7a02 	vldr	s14, [r3, #8]
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	edd3 7a05 	vldr	s15, [r3, #20]
 8000616:	ee77 6a67 	vsub.f32	s13, s14, s15
 800061a:	ed97 7a00 	vldr	s14, [r7]
 800061e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	edc3 7a03 	vstr	s15, [r3, #12]
    enc->acceleration = (enc->velocity - enc->lastVelocity) / dt;
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	ed93 7a03 	vldr	s14, [r3, #12]
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	edd3 7a06 	vldr	s15, [r3, #24]
 8000634:	ee77 6a67 	vsub.f32	s13, s14, s15
 8000638:	ed97 7a00 	vldr	s14, [r7]
 800063c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	edc3 7a04 	vstr	s15, [r3, #16]

    enc->lastRawPosition = rawPosition;
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	68ba      	ldr	r2, [r7, #8]
 800064a:	605a      	str	r2, [r3, #4]
    enc->lastPosition = enc->position;
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	689a      	ldr	r2, [r3, #8]
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	615a      	str	r2, [r3, #20]
    enc->lastVelocity = enc->velocity;
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	68da      	ldr	r2, [r3, #12]
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	619a      	str	r2, [r3, #24]
}
 800065c:	bf00      	nop
 800065e:	3714      	adds	r7, #20
 8000660:	46bd      	mov	sp, r7
 8000662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000666:	4770      	bx	lr
 8000668:	ffff8ad0 	.word	0xffff8ad0
 800066c:	40c90fda 	.word	0x40c90fda
 8000670:	463b8000 	.word	0x463b8000

08000674 <Encoder_GetPosition>:
void Encoder_setLimit(Encoder *enc, float limit)
{
		enc->position = limit;
}

float Encoder_GetPosition(Encoder *enc) {
 8000674:	b480      	push	{r7}
 8000676:	b083      	sub	sp, #12
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
    return enc->position;
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	689b      	ldr	r3, [r3, #8]
 8000680:	ee07 3a90 	vmov	s15, r3
}
 8000684:	eeb0 0a67 	vmov.f32	s0, s15
 8000688:	370c      	adds	r7, #12
 800068a:	46bd      	mov	sp, r7
 800068c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000690:	4770      	bx	lr

08000692 <Encoder_GetVelocity>:

float Encoder_GetVelocity(Encoder *enc) {
 8000692:	b480      	push	{r7}
 8000694:	b083      	sub	sp, #12
 8000696:	af00      	add	r7, sp, #0
 8000698:	6078      	str	r0, [r7, #4]
    return enc->velocity;
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	68db      	ldr	r3, [r3, #12]
 800069e:	ee07 3a90 	vmov	s15, r3
}
 80006a2:	eeb0 0a67 	vmov.f32	s0, s15
 80006a6:	370c      	adds	r7, #12
 80006a8:	46bd      	mov	sp, r7
 80006aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ae:	4770      	bx	lr

080006b0 <Encoder_GetAcceleration>:

float Encoder_GetAcceleration(Encoder *enc) {
 80006b0:	b480      	push	{r7}
 80006b2:	b083      	sub	sp, #12
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
    return enc->acceleration;
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	691b      	ldr	r3, [r3, #16]
 80006bc:	ee07 3a90 	vmov	s15, r3
}
 80006c0:	eeb0 0a67 	vmov.f32	s0, s15
 80006c4:	370c      	adds	r7, #12
 80006c6:	46bd      	mov	sp, r7
 80006c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006cc:	4770      	bx	lr

080006ce <Kalman_Init>:
#include "Kalman_Filter.h"

void Kalman_Init(KalmanFilter *kf) {
 80006ce:	b580      	push	{r7, lr}
 80006d0:	b084      	sub	sp, #16
 80006d2:	af00      	add	r7, sp, #0
 80006d4:	6078      	str	r0, [r7, #4]
    arm_mat_init_f32(&kf->A, KALMAN_STATE_DIM, KALMAN_STATE_DIM, kf->A_data);
 80006d6:	6878      	ldr	r0, [r7, #4]
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	3370      	adds	r3, #112	@ 0x70
 80006dc:	2204      	movs	r2, #4
 80006de:	2104      	movs	r1, #4
 80006e0:	f00a f8d9 	bl	800a896 <arm_mat_init_f32>
    arm_mat_init_f32(&kf->B, KALMAN_STATE_DIM, KALMAN_MEAS_DIM, kf->B_data);
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	f103 0008 	add.w	r0, r3, #8
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	33b0      	adds	r3, #176	@ 0xb0
 80006ee:	2204      	movs	r2, #4
 80006f0:	2104      	movs	r1, #4
 80006f2:	f00a f8d0 	bl	800a896 <arm_mat_init_f32>
    arm_mat_init_f32(&kf->H, KALMAN_MEAS_DIM, KALMAN_STATE_DIM, kf->H_data);
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	f103 0010 	add.w	r0, r3, #16
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	33f0      	adds	r3, #240	@ 0xf0
 8000700:	2204      	movs	r2, #4
 8000702:	2104      	movs	r1, #4
 8000704:	f00a f8c7 	bl	800a896 <arm_mat_init_f32>
    arm_mat_init_f32(&kf->Q, KALMAN_STATE_DIM, KALMAN_STATE_DIM, kf->Q_data);
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	f103 0018 	add.w	r0, r3, #24
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 8000714:	2204      	movs	r2, #4
 8000716:	2104      	movs	r1, #4
 8000718:	f00a f8bd 	bl	800a896 <arm_mat_init_f32>
    arm_mat_init_f32(&kf->R, KALMAN_MEAS_DIM, KALMAN_MEAS_DIM, kf->R_data);
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	f103 0020 	add.w	r0, r3, #32
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	f503 73b8 	add.w	r3, r3, #368	@ 0x170
 8000728:	2204      	movs	r2, #4
 800072a:	2104      	movs	r1, #4
 800072c:	f00a f8b3 	bl	800a896 <arm_mat_init_f32>
    arm_mat_init_f32(&kf->P, KALMAN_STATE_DIM, KALMAN_STATE_DIM, kf->P_data);
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	f503 73d8 	add.w	r3, r3, #432	@ 0x1b0
 800073c:	2204      	movs	r2, #4
 800073e:	2104      	movs	r1, #4
 8000740:	f00a f8a9 	bl	800a896 <arm_mat_init_f32>
    arm_mat_init_f32(&kf->K, KALMAN_STATE_DIM, KALMAN_MEAS_DIM, kf->K_data);
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	f503 73f8 	add.w	r3, r3, #496	@ 0x1f0
 8000750:	2204      	movs	r2, #4
 8000752:	2104      	movs	r1, #4
 8000754:	f00a f89f 	bl	800a896 <arm_mat_init_f32>
    arm_mat_init_f32(&kf->Input, KALMAN_STATE_DIM, KALMAN_MEAS_DIM, kf->Input_data);
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8000764:	2204      	movs	r2, #4
 8000766:	2104      	movs	r1, #4
 8000768:	f00a f895 	bl	800a896 <arm_mat_init_f32>

    arm_mat_init_f32(&kf->x, KALMAN_STATE_DIM, 1, kf->x_data);
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	f103 0040 	add.w	r0, r3, #64	@ 0x40
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 8000778:	2201      	movs	r2, #1
 800077a:	2104      	movs	r1, #4
 800077c:	f00a f88b 	bl	800a896 <arm_mat_init_f32>
    arm_mat_init_f32(&kf->u, KALMAN_MEAS_DIM, 1, kf->u_data);
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	f103 0048 	add.w	r0, r3, #72	@ 0x48
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	f503 7311 	add.w	r3, r3, #580	@ 0x244
 800078c:	2201      	movs	r2, #1
 800078e:	2104      	movs	r1, #4
 8000790:	f00a f881 	bl	800a896 <arm_mat_init_f32>
    arm_mat_init_f32(&kf->z, KALMAN_MEAS_DIM, 1, kf->z_data);
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	f103 0050 	add.w	r0, r3, #80	@ 0x50
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80007a0:	2201      	movs	r2, #1
 80007a2:	2104      	movs	r1, #4
 80007a4:	f00a f877 	bl	800a896 <arm_mat_init_f32>

    arm_mat_init_f32(&kf->temp1, KALMAN_STATE_DIM, KALMAN_STATE_DIM, kf->temp1_data);
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	f103 0058 	add.w	r0, r3, #88	@ 0x58
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80007b4:	2204      	movs	r2, #4
 80007b6:	2104      	movs	r1, #4
 80007b8:	f00a f86d 	bl	800a896 <arm_mat_init_f32>
    arm_mat_init_f32(&kf->temp2, KALMAN_STATE_DIM, KALMAN_MEAS_DIM, kf->temp2_data);
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	f103 0060 	add.w	r0, r3, #96	@ 0x60
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	f503 7329 	add.w	r3, r3, #676	@ 0x2a4
 80007c8:	2204      	movs	r2, #4
 80007ca:	2104      	movs	r1, #4
 80007cc:	f00a f863 	bl	800a896 <arm_mat_init_f32>
    arm_mat_init_f32(&kf->temp3, KALMAN_MEAS_DIM, KALMAN_MEAS_DIM, kf->temp3_data);
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	f103 0068 	add.w	r0, r3, #104	@ 0x68
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	f503 7339 	add.w	r3, r3, #740	@ 0x2e4
 80007dc:	2204      	movs	r2, #4
 80007de:	2104      	movs	r1, #4
 80007e0:	f00a f859 	bl	800a896 <arm_mat_init_f32>

    // Clear state
    for (int i = 0; i < KALMAN_STATE_DIM; i++) {
 80007e4:	2300      	movs	r3, #0
 80007e6:	60fb      	str	r3, [r7, #12]
 80007e8:	e00b      	b.n	8000802 <Kalman_Init+0x134>
        kf->x_data[i] = 0.0f;
 80007ea:	687a      	ldr	r2, [r7, #4]
 80007ec:	68fb      	ldr	r3, [r7, #12]
 80007ee:	338c      	adds	r3, #140	@ 0x8c
 80007f0:	009b      	lsls	r3, r3, #2
 80007f2:	4413      	add	r3, r2
 80007f4:	3304      	adds	r3, #4
 80007f6:	f04f 0200 	mov.w	r2, #0
 80007fa:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < KALMAN_STATE_DIM; i++) {
 80007fc:	68fb      	ldr	r3, [r7, #12]
 80007fe:	3301      	adds	r3, #1
 8000800:	60fb      	str	r3, [r7, #12]
 8000802:	68fb      	ldr	r3, [r7, #12]
 8000804:	2b03      	cmp	r3, #3
 8000806:	ddf0      	ble.n	80007ea <Kalman_Init+0x11c>
    }
}
 8000808:	bf00      	nop
 800080a:	bf00      	nop
 800080c:	3710      	adds	r7, #16
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}

08000812 <Kalman_SetProcessNoise>:

void Kalman_SetProcessNoise(KalmanFilter *kf, float value) {
 8000812:	b480      	push	{r7}
 8000814:	b085      	sub	sp, #20
 8000816:	af00      	add	r7, sp, #0
 8000818:	6078      	str	r0, [r7, #4]
 800081a:	ed87 0a00 	vstr	s0, [r7]
    for (int i = 0; i < KALMAN_STATE_DIM; i++) {
 800081e:	2300      	movs	r3, #0
 8000820:	60fb      	str	r3, [r7, #12]
 8000822:	e01c      	b.n	800085e <Kalman_SetProcessNoise+0x4c>
        for (int j = 0; j < KALMAN_STATE_DIM; j++) {
 8000824:	2300      	movs	r3, #0
 8000826:	60bb      	str	r3, [r7, #8]
 8000828:	e013      	b.n	8000852 <Kalman_SetProcessNoise+0x40>
            kf->Q_data[i * KALMAN_STATE_DIM + j] = (i == j) ? value : 0.0f;
 800082a:	68fa      	ldr	r2, [r7, #12]
 800082c:	68bb      	ldr	r3, [r7, #8]
 800082e:	429a      	cmp	r2, r3
 8000830:	d101      	bne.n	8000836 <Kalman_SetProcessNoise+0x24>
 8000832:	683b      	ldr	r3, [r7, #0]
 8000834:	e001      	b.n	800083a <Kalman_SetProcessNoise+0x28>
 8000836:	f04f 0300 	mov.w	r3, #0
 800083a:	68fa      	ldr	r2, [r7, #12]
 800083c:	0091      	lsls	r1, r2, #2
 800083e:	68ba      	ldr	r2, [r7, #8]
 8000840:	440a      	add	r2, r1
 8000842:	6879      	ldr	r1, [r7, #4]
 8000844:	324c      	adds	r2, #76	@ 0x4c
 8000846:	0092      	lsls	r2, r2, #2
 8000848:	440a      	add	r2, r1
 800084a:	6013      	str	r3, [r2, #0]
        for (int j = 0; j < KALMAN_STATE_DIM; j++) {
 800084c:	68bb      	ldr	r3, [r7, #8]
 800084e:	3301      	adds	r3, #1
 8000850:	60bb      	str	r3, [r7, #8]
 8000852:	68bb      	ldr	r3, [r7, #8]
 8000854:	2b03      	cmp	r3, #3
 8000856:	dde8      	ble.n	800082a <Kalman_SetProcessNoise+0x18>
    for (int i = 0; i < KALMAN_STATE_DIM; i++) {
 8000858:	68fb      	ldr	r3, [r7, #12]
 800085a:	3301      	adds	r3, #1
 800085c:	60fb      	str	r3, [r7, #12]
 800085e:	68fb      	ldr	r3, [r7, #12]
 8000860:	2b03      	cmp	r3, #3
 8000862:	dddf      	ble.n	8000824 <Kalman_SetProcessNoise+0x12>
        }
    }
}
 8000864:	bf00      	nop
 8000866:	bf00      	nop
 8000868:	3714      	adds	r7, #20
 800086a:	46bd      	mov	sp, r7
 800086c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000870:	4770      	bx	lr

08000872 <Kalman_SetMeasurementNoise>:

void Kalman_SetMeasurementNoise(KalmanFilter *kf, float value) {
 8000872:	b480      	push	{r7}
 8000874:	b085      	sub	sp, #20
 8000876:	af00      	add	r7, sp, #0
 8000878:	6078      	str	r0, [r7, #4]
 800087a:	ed87 0a00 	vstr	s0, [r7]
    for (int i = 0; i < KALMAN_MEAS_DIM; i++) {
 800087e:	2300      	movs	r3, #0
 8000880:	60fb      	str	r3, [r7, #12]
 8000882:	e01c      	b.n	80008be <Kalman_SetMeasurementNoise+0x4c>
        for (int j = 0; j < KALMAN_MEAS_DIM; j++) {
 8000884:	2300      	movs	r3, #0
 8000886:	60bb      	str	r3, [r7, #8]
 8000888:	e013      	b.n	80008b2 <Kalman_SetMeasurementNoise+0x40>
            kf->R_data[i * KALMAN_MEAS_DIM + j] = (i == j) ? value : 0.0f;
 800088a:	68fa      	ldr	r2, [r7, #12]
 800088c:	68bb      	ldr	r3, [r7, #8]
 800088e:	429a      	cmp	r2, r3
 8000890:	d101      	bne.n	8000896 <Kalman_SetMeasurementNoise+0x24>
 8000892:	683b      	ldr	r3, [r7, #0]
 8000894:	e001      	b.n	800089a <Kalman_SetMeasurementNoise+0x28>
 8000896:	f04f 0300 	mov.w	r3, #0
 800089a:	68fa      	ldr	r2, [r7, #12]
 800089c:	0091      	lsls	r1, r2, #2
 800089e:	68ba      	ldr	r2, [r7, #8]
 80008a0:	440a      	add	r2, r1
 80008a2:	6879      	ldr	r1, [r7, #4]
 80008a4:	325c      	adds	r2, #92	@ 0x5c
 80008a6:	0092      	lsls	r2, r2, #2
 80008a8:	440a      	add	r2, r1
 80008aa:	6013      	str	r3, [r2, #0]
        for (int j = 0; j < KALMAN_MEAS_DIM; j++) {
 80008ac:	68bb      	ldr	r3, [r7, #8]
 80008ae:	3301      	adds	r3, #1
 80008b0:	60bb      	str	r3, [r7, #8]
 80008b2:	68bb      	ldr	r3, [r7, #8]
 80008b4:	2b03      	cmp	r3, #3
 80008b6:	dde8      	ble.n	800088a <Kalman_SetMeasurementNoise+0x18>
    for (int i = 0; i < KALMAN_MEAS_DIM; i++) {
 80008b8:	68fb      	ldr	r3, [r7, #12]
 80008ba:	3301      	adds	r3, #1
 80008bc:	60fb      	str	r3, [r7, #12]
 80008be:	68fb      	ldr	r3, [r7, #12]
 80008c0:	2b03      	cmp	r3, #3
 80008c2:	dddf      	ble.n	8000884 <Kalman_SetMeasurementNoise+0x12>
        }
    }
}
 80008c4:	bf00      	nop
 80008c6:	bf00      	nop
 80008c8:	3714      	adds	r7, #20
 80008ca:	46bd      	mov	sp, r7
 80008cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d0:	4770      	bx	lr

080008d2 <Kalman_Predict>:

void Kalman_Predict(KalmanFilter *kf) {
 80008d2:	b580      	push	{r7, lr}
 80008d4:	b082      	sub	sp, #8
 80008d6:	af00      	add	r7, sp, #0
 80008d8:	6078      	str	r0, [r7, #4]
	// x = A * x + B * u
	arm_mat_mult_f32(&kf->A, &kf->x, &kf->temp1);   // temp1 = A * x
 80008da:	6878      	ldr	r0, [r7, #4]
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	3358      	adds	r3, #88	@ 0x58
 80008e6:	461a      	mov	r2, r3
 80008e8:	f00a fb64 	bl	800afb4 <arm_mat_mult_f32>
	arm_mat_mult_f32(&kf->B, &kf->Input, &kf->temp2);   // temp2 = B * u
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	f103 0008 	add.w	r0, r3, #8
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	3360      	adds	r3, #96	@ 0x60
 80008fc:	461a      	mov	r2, r3
 80008fe:	f00a fb59 	bl	800afb4 <arm_mat_mult_f32>
	arm_mat_add_f32(&kf->temp1, &kf->temp2, &kf->x); // x = temp1 + temp2
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	f103 0058 	add.w	r0, r3, #88	@ 0x58
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	f103 0160 	add.w	r1, r3, #96	@ 0x60
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	3340      	adds	r3, #64	@ 0x40
 8000912:	461a      	mov	r2, r3
 8000914:	f009 ff84 	bl	800a820 <arm_mat_add_f32>

    // P = A * P * A' + Q
    arm_mat_mult_f32(&kf->A, &kf->P, &kf->temp1);
 8000918:	6878      	ldr	r0, [r7, #4]
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	3358      	adds	r3, #88	@ 0x58
 8000924:	461a      	mov	r2, r3
 8000926:	f00a fb45 	bl	800afb4 <arm_mat_mult_f32>
    arm_mat_trans_f32(&kf->A, &kf->temp2);  // reuse temp2
 800092a:	687a      	ldr	r2, [r7, #4]
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	3360      	adds	r3, #96	@ 0x60
 8000930:	4619      	mov	r1, r3
 8000932:	4610      	mov	r0, r2
 8000934:	f00a fbf3 	bl	800b11e <arm_mat_trans_f32>
    arm_mat_mult_f32(&kf->temp1, &kf->temp2, &kf->P);
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	f103 0058 	add.w	r0, r3, #88	@ 0x58
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	f103 0160 	add.w	r1, r3, #96	@ 0x60
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	3328      	adds	r3, #40	@ 0x28
 8000948:	461a      	mov	r2, r3
 800094a:	f00a fb33 	bl	800afb4 <arm_mat_mult_f32>
    arm_mat_add_f32(&kf->P, &kf->Q, &kf->P);
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	f103 0118 	add.w	r1, r3, #24
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	3328      	adds	r3, #40	@ 0x28
 800095e:	461a      	mov	r2, r3
 8000960:	f009 ff5e 	bl	800a820 <arm_mat_add_f32>
}
 8000964:	bf00      	nop
 8000966:	3708      	adds	r7, #8
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}

0800096c <Kalman_Update>:

void Kalman_Update(KalmanFilter *kf, float32_t *measurement) {
 800096c:	b580      	push	{r7, lr}
 800096e:	b088      	sub	sp, #32
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
 8000974:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < KALMAN_MEAS_DIM; i++) {
 8000976:	2300      	movs	r3, #0
 8000978:	61fb      	str	r3, [r7, #28]
 800097a:	e00e      	b.n	800099a <Kalman_Update+0x2e>
        kf->z_data[i] = measurement[i];
 800097c:	69fb      	ldr	r3, [r7, #28]
 800097e:	009b      	lsls	r3, r3, #2
 8000980:	683a      	ldr	r2, [r7, #0]
 8000982:	4413      	add	r3, r2
 8000984:	681a      	ldr	r2, [r3, #0]
 8000986:	6879      	ldr	r1, [r7, #4]
 8000988:	69fb      	ldr	r3, [r7, #28]
 800098a:	3394      	adds	r3, #148	@ 0x94
 800098c:	009b      	lsls	r3, r3, #2
 800098e:	440b      	add	r3, r1
 8000990:	3304      	adds	r3, #4
 8000992:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < KALMAN_MEAS_DIM; i++) {
 8000994:	69fb      	ldr	r3, [r7, #28]
 8000996:	3301      	adds	r3, #1
 8000998:	61fb      	str	r3, [r7, #28]
 800099a:	69fb      	ldr	r3, [r7, #28]
 800099c:	2b03      	cmp	r3, #3
 800099e:	dded      	ble.n	800097c <Kalman_Update+0x10>
    }

    // K = P * H' * (H * P * H' + R)^-1
    arm_mat_trans_f32(&kf->H, &kf->temp2);
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	f103 0210 	add.w	r2, r3, #16
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	3360      	adds	r3, #96	@ 0x60
 80009aa:	4619      	mov	r1, r3
 80009ac:	4610      	mov	r0, r2
 80009ae:	f00a fbb6 	bl	800b11e <arm_mat_trans_f32>
    arm_mat_mult_f32(&kf->P, &kf->temp2, &kf->temp1);
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	f103 0160 	add.w	r1, r3, #96	@ 0x60
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	3358      	adds	r3, #88	@ 0x58
 80009c2:	461a      	mov	r2, r3
 80009c4:	f00a faf6 	bl	800afb4 <arm_mat_mult_f32>
    arm_mat_mult_f32(&kf->H, &kf->temp1, &kf->temp3);
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	f103 0010 	add.w	r0, r3, #16
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	f103 0158 	add.w	r1, r3, #88	@ 0x58
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	3368      	adds	r3, #104	@ 0x68
 80009d8:	461a      	mov	r2, r3
 80009da:	f00a faeb 	bl	800afb4 <arm_mat_mult_f32>
    arm_mat_add_f32(&kf->temp3, &kf->R, &kf->temp3);
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	f103 0068 	add.w	r0, r3, #104	@ 0x68
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	f103 0120 	add.w	r1, r3, #32
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	3368      	adds	r3, #104	@ 0x68
 80009ee:	461a      	mov	r2, r3
 80009f0:	f009 ff16 	bl	800a820 <arm_mat_add_f32>
    arm_mat_inverse_f32(&kf->temp3, &kf->temp3);
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	3368      	adds	r3, #104	@ 0x68
 80009fe:	4619      	mov	r1, r3
 8000a00:	4610      	mov	r0, r2
 8000a02:	f009 ff60 	bl	800a8c6 <arm_mat_inverse_f32>
    arm_mat_mult_f32(&kf->temp1, &kf->temp3, &kf->K);
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	f103 0058 	add.w	r0, r3, #88	@ 0x58
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	f103 0168 	add.w	r1, r3, #104	@ 0x68
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	3330      	adds	r3, #48	@ 0x30
 8000a16:	461a      	mov	r2, r3
 8000a18:	f00a facc 	bl	800afb4 <arm_mat_mult_f32>

    // x = x + K * (z - H * x)
    arm_mat_mult_f32(&kf->H, &kf->x, &kf->u);         // reuse u for Hx
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	f103 0010 	add.w	r0, r3, #16
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	3348      	adds	r3, #72	@ 0x48
 8000a2c:	461a      	mov	r2, r3
 8000a2e:	f00a fac1 	bl	800afb4 <arm_mat_mult_f32>
    for (int i = 0; i < KALMAN_MEAS_DIM; i++) {
 8000a32:	2300      	movs	r3, #0
 8000a34:	61bb      	str	r3, [r7, #24]
 8000a36:	e01c      	b.n	8000a72 <Kalman_Update+0x106>
        kf->u_data[i] = kf->z_data[i] - kf->u_data[i]; // z - Hx
 8000a38:	687a      	ldr	r2, [r7, #4]
 8000a3a:	69bb      	ldr	r3, [r7, #24]
 8000a3c:	3394      	adds	r3, #148	@ 0x94
 8000a3e:	009b      	lsls	r3, r3, #2
 8000a40:	4413      	add	r3, r2
 8000a42:	3304      	adds	r3, #4
 8000a44:	ed93 7a00 	vldr	s14, [r3]
 8000a48:	687a      	ldr	r2, [r7, #4]
 8000a4a:	69bb      	ldr	r3, [r7, #24]
 8000a4c:	3390      	adds	r3, #144	@ 0x90
 8000a4e:	009b      	lsls	r3, r3, #2
 8000a50:	4413      	add	r3, r2
 8000a52:	3304      	adds	r3, #4
 8000a54:	edd3 7a00 	vldr	s15, [r3]
 8000a58:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000a5c:	687a      	ldr	r2, [r7, #4]
 8000a5e:	69bb      	ldr	r3, [r7, #24]
 8000a60:	3390      	adds	r3, #144	@ 0x90
 8000a62:	009b      	lsls	r3, r3, #2
 8000a64:	4413      	add	r3, r2
 8000a66:	3304      	adds	r3, #4
 8000a68:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < KALMAN_MEAS_DIM; i++) {
 8000a6c:	69bb      	ldr	r3, [r7, #24]
 8000a6e:	3301      	adds	r3, #1
 8000a70:	61bb      	str	r3, [r7, #24]
 8000a72:	69bb      	ldr	r3, [r7, #24]
 8000a74:	2b03      	cmp	r3, #3
 8000a76:	dddf      	ble.n	8000a38 <Kalman_Update+0xcc>
    }
    arm_mat_mult_f32(&kf->K, &kf->u, &kf->u);         // reuse u for K*(z-Hx)
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	f103 0148 	add.w	r1, r3, #72	@ 0x48
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	3348      	adds	r3, #72	@ 0x48
 8000a88:	461a      	mov	r2, r3
 8000a8a:	f00a fa93 	bl	800afb4 <arm_mat_mult_f32>
    for (int i = 0; i < KALMAN_STATE_DIM; i++) {
 8000a8e:	2300      	movs	r3, #0
 8000a90:	617b      	str	r3, [r7, #20]
 8000a92:	e01c      	b.n	8000ace <Kalman_Update+0x162>
        kf->x_data[i] += kf->u_data[i];
 8000a94:	687a      	ldr	r2, [r7, #4]
 8000a96:	697b      	ldr	r3, [r7, #20]
 8000a98:	338c      	adds	r3, #140	@ 0x8c
 8000a9a:	009b      	lsls	r3, r3, #2
 8000a9c:	4413      	add	r3, r2
 8000a9e:	3304      	adds	r3, #4
 8000aa0:	ed93 7a00 	vldr	s14, [r3]
 8000aa4:	687a      	ldr	r2, [r7, #4]
 8000aa6:	697b      	ldr	r3, [r7, #20]
 8000aa8:	3390      	adds	r3, #144	@ 0x90
 8000aaa:	009b      	lsls	r3, r3, #2
 8000aac:	4413      	add	r3, r2
 8000aae:	3304      	adds	r3, #4
 8000ab0:	edd3 7a00 	vldr	s15, [r3]
 8000ab4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ab8:	687a      	ldr	r2, [r7, #4]
 8000aba:	697b      	ldr	r3, [r7, #20]
 8000abc:	338c      	adds	r3, #140	@ 0x8c
 8000abe:	009b      	lsls	r3, r3, #2
 8000ac0:	4413      	add	r3, r2
 8000ac2:	3304      	adds	r3, #4
 8000ac4:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < KALMAN_STATE_DIM; i++) {
 8000ac8:	697b      	ldr	r3, [r7, #20]
 8000aca:	3301      	adds	r3, #1
 8000acc:	617b      	str	r3, [r7, #20]
 8000ace:	697b      	ldr	r3, [r7, #20]
 8000ad0:	2b03      	cmp	r3, #3
 8000ad2:	dddf      	ble.n	8000a94 <Kalman_Update+0x128>
    }

    // P = (I - K * H) * P
    for (int i = 0; i < KALMAN_STATE_DIM * KALMAN_STATE_DIM; i++) {
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	613b      	str	r3, [r7, #16]
 8000ad8:	e00b      	b.n	8000af2 <Kalman_Update+0x186>
        kf->temp1_data[i] = 0.0f;
 8000ada:	687a      	ldr	r2, [r7, #4]
 8000adc:	693b      	ldr	r3, [r7, #16]
 8000ade:	3398      	adds	r3, #152	@ 0x98
 8000ae0:	009b      	lsls	r3, r3, #2
 8000ae2:	4413      	add	r3, r2
 8000ae4:	3304      	adds	r3, #4
 8000ae6:	f04f 0200 	mov.w	r2, #0
 8000aea:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < KALMAN_STATE_DIM * KALMAN_STATE_DIM; i++) {
 8000aec:	693b      	ldr	r3, [r7, #16]
 8000aee:	3301      	adds	r3, #1
 8000af0:	613b      	str	r3, [r7, #16]
 8000af2:	693b      	ldr	r3, [r7, #16]
 8000af4:	2b0f      	cmp	r3, #15
 8000af6:	ddf0      	ble.n	8000ada <Kalman_Update+0x16e>
    }
    for (int i = 0; i < KALMAN_STATE_DIM; i++) {
 8000af8:	2300      	movs	r3, #0
 8000afa:	60fb      	str	r3, [r7, #12]
 8000afc:	e00e      	b.n	8000b1c <Kalman_Update+0x1b0>
        kf->temp1_data[i * KALMAN_STATE_DIM + i] = 1.0f;
 8000afe:	68fa      	ldr	r2, [r7, #12]
 8000b00:	4613      	mov	r3, r2
 8000b02:	009b      	lsls	r3, r3, #2
 8000b04:	4413      	add	r3, r2
 8000b06:	687a      	ldr	r2, [r7, #4]
 8000b08:	3398      	adds	r3, #152	@ 0x98
 8000b0a:	009b      	lsls	r3, r3, #2
 8000b0c:	4413      	add	r3, r2
 8000b0e:	3304      	adds	r3, #4
 8000b10:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8000b14:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < KALMAN_STATE_DIM; i++) {
 8000b16:	68fb      	ldr	r3, [r7, #12]
 8000b18:	3301      	adds	r3, #1
 8000b1a:	60fb      	str	r3, [r7, #12]
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	2b03      	cmp	r3, #3
 8000b20:	dded      	ble.n	8000afe <Kalman_Update+0x192>
    }
    arm_mat_mult_f32(&kf->K, &kf->H, &kf->temp2);
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	f103 0110 	add.w	r1, r3, #16
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	3360      	adds	r3, #96	@ 0x60
 8000b32:	461a      	mov	r2, r3
 8000b34:	f00a fa3e 	bl	800afb4 <arm_mat_mult_f32>
    arm_mat_sub_f32(&kf->temp1, &kf->temp2, &kf->temp1);
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	f103 0058 	add.w	r0, r3, #88	@ 0x58
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	f103 0160 	add.w	r1, r3, #96	@ 0x60
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	3358      	adds	r3, #88	@ 0x58
 8000b48:	461a      	mov	r2, r3
 8000b4a:	f00a faad 	bl	800b0a8 <arm_mat_sub_f32>
    arm_mat_mult_f32(&kf->temp1, &kf->P, &kf->P);
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	f103 0058 	add.w	r0, r3, #88	@ 0x58
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	3328      	adds	r3, #40	@ 0x28
 8000b5e:	461a      	mov	r2, r3
 8000b60:	f00a fa28 	bl	800afb4 <arm_mat_mult_f32>
}
 8000b64:	bf00      	nop
 8000b66:	3720      	adds	r7, #32
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}

08000b6c <modbus_1t5_Timeout>:
void Modbus_frame_response();


// function for interrupt
void modbus_1t5_Timeout(TIM_HandleTypeDef *htim)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	b083      	sub	sp, #12
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 8000b74:	4b04      	ldr	r3, [pc, #16]	@ (8000b88 <modbus_1t5_Timeout+0x1c>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	2201      	movs	r2, #1
 8000b7a:	751a      	strb	r2, [r3, #20]
}
 8000b7c:	bf00      	nop
 8000b7e:	370c      	adds	r7, #12
 8000b80:	46bd      	mov	sp, r7
 8000b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b86:	4770      	bx	lr
 8000b88:	20000228 	.word	0x20000228

08000b8c <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	b083      	sub	sp, #12
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 8000b94:	4b04      	ldr	r3, [pc, #16]	@ (8000ba8 <modbus_3t5_Timeout+0x1c>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	2201      	movs	r2, #1
 8000b9a:	755a      	strb	r2, [r3, #21]
}
 8000b9c:	bf00      	nop
 8000b9e:	370c      	adds	r7, #12
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba6:	4770      	bx	lr
 8000ba8:	20000228 	.word	0x20000228

08000bac <modbus_UART_Recived>:
void modbus_UART_Recived(UART_HandleTypeDef *huart,uint32_t pos)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b082      	sub	sp, #8
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
 8000bb4:	6039      	str	r1, [r7, #0]

	//restart timer / start timer of counting time with modbus RTU
	hModbus->Flag_URev =1;
 8000bb6:	4b15      	ldr	r3, [pc, #84]	@ (8000c0c <modbus_UART_Recived+0x60>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	2201      	movs	r2, #1
 8000bbc:	759a      	strb	r2, [r3, #22]
	if(hModbus->modbusUartStructure.RxTail++<MODBUS_MESSAGEBUFFER_SIZE)
 8000bbe:	4b13      	ldr	r3, [pc, #76]	@ (8000c0c <modbus_UART_Recived+0x60>)
 8000bc0:	681a      	ldr	r2, [r3, #0]
 8000bc2:	f8b2 33a2 	ldrh.w	r3, [r2, #930]	@ 0x3a2
 8000bc6:	1c59      	adds	r1, r3, #1
 8000bc8:	b289      	uxth	r1, r1
 8000bca:	f8a2 13a2 	strh.w	r1, [r2, #930]	@ 0x3a2
 8000bce:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8000bd2:	d210      	bcs.n	8000bf6 <modbus_UART_Recived+0x4a>
	{


	    HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 8000bd4:	4b0d      	ldr	r3, [pc, #52]	@ (8000c0c <modbus_UART_Recived+0x60>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	68d8      	ldr	r0, [r3, #12]
 8000bda:	4b0c      	ldr	r3, [pc, #48]	@ (8000c0c <modbus_UART_Recived+0x60>)
 8000bdc:	681a      	ldr	r2, [r3, #0]
 8000bde:	4b0b      	ldr	r3, [pc, #44]	@ (8000c0c <modbus_UART_Recived+0x60>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8000be6:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 8000bea:	4413      	add	r3, r2
 8000bec:	3302      	adds	r3, #2
 8000bee:	2201      	movs	r2, #1
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	f007 fad9 	bl	80081a8 <HAL_UART_Receive_IT>
	}
	__HAL_TIM_SET_COUNTER(hModbus->htim,0);
 8000bf6:	4b05      	ldr	r3, [pc, #20]	@ (8000c0c <modbus_UART_Recived+0x60>)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	691b      	ldr	r3, [r3, #16]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	2200      	movs	r2, #0
 8000c00:	625a      	str	r2, [r3, #36]	@ 0x24

}
 8000c02:	bf00      	nop
 8000c04:	3708      	adds	r7, #8
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	20000228 	.word	0x20000228

08000c10 <Modbus_init>:


void Modbus_init(ModbusHandleTypedef* hmodbus,u16u8_t* RegisterStartAddress)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b082      	sub	sp, #8
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
 8000c18:	6039      	str	r1, [r7, #0]
	hModbus = hmodbus;
 8000c1a:	4a24      	ldr	r2, [pc, #144]	@ (8000cac <Modbus_init+0x9c>)
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	6013      	str	r3, [r2, #0]

	hModbus->RegisterAddress = RegisterStartAddress;
 8000c20:	4b22      	ldr	r3, [pc, #136]	@ (8000cac <Modbus_init+0x9c>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	683a      	ldr	r2, [r7, #0]
 8000c26:	605a      	str	r2, [r3, #4]

	//config timer interrupt
	HAL_TIM_RegisterCallback(hModbus->htim,HAL_TIM_OC_DELAY_ELAPSED_CB_ID,(void*)modbus_1t5_Timeout);
 8000c28:	4b20      	ldr	r3, [pc, #128]	@ (8000cac <Modbus_init+0x9c>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	691b      	ldr	r3, [r3, #16]
 8000c2e:	4a20      	ldr	r2, [pc, #128]	@ (8000cb0 <Modbus_init+0xa0>)
 8000c30:	2114      	movs	r1, #20
 8000c32:	4618      	mov	r0, r3
 8000c34:	f006 f9ae 	bl	8006f94 <HAL_TIM_RegisterCallback>
	HAL_TIM_RegisterCallback(hModbus->htim,HAL_TIM_PERIOD_ELAPSED_CB_ID ,(void*)modbus_3t5_Timeout);
 8000c38:	4b1c      	ldr	r3, [pc, #112]	@ (8000cac <Modbus_init+0x9c>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	691b      	ldr	r3, [r3, #16]
 8000c3e:	4a1d      	ldr	r2, [pc, #116]	@ (8000cb4 <Modbus_init+0xa4>)
 8000c40:	210e      	movs	r1, #14
 8000c42:	4618      	mov	r0, r3
 8000c44:	f006 f9a6 	bl	8006f94 <HAL_TIM_RegisterCallback>

	//config UART interrupt
	HAL_UART_RegisterCallback(hModbus->huart,HAL_UART_RX_COMPLETE_CB_ID,(void*)modbus_UART_Recived);
 8000c48:	4b18      	ldr	r3, [pc, #96]	@ (8000cac <Modbus_init+0x9c>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	68db      	ldr	r3, [r3, #12]
 8000c4e:	4a1a      	ldr	r2, [pc, #104]	@ (8000cb8 <Modbus_init+0xa8>)
 8000c50:	2103      	movs	r1, #3
 8000c52:	4618      	mov	r0, r3
 8000c54:	f007 f9ee 	bl	8008034 <HAL_UART_RegisterCallback>
	//start Receive
    HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 8000c58:	4b14      	ldr	r3, [pc, #80]	@ (8000cac <Modbus_init+0x9c>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	68d8      	ldr	r0, [r3, #12]
 8000c5e:	4b13      	ldr	r3, [pc, #76]	@ (8000cac <Modbus_init+0x9c>)
 8000c60:	681a      	ldr	r2, [r3, #0]
 8000c62:	4b12      	ldr	r3, [pc, #72]	@ (8000cac <Modbus_init+0x9c>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8000c6a:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 8000c6e:	4413      	add	r3, r2
 8000c70:	3302      	adds	r3, #2
 8000c72:	2201      	movs	r2, #1
 8000c74:	4619      	mov	r1, r3
 8000c76:	f007 fa97 	bl	80081a8 <HAL_UART_Receive_IT>


    if(hModbus->htim->State == HAL_TIM_STATE_READY)
 8000c7a:	4b0c      	ldr	r3, [pc, #48]	@ (8000cac <Modbus_init+0x9c>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	691b      	ldr	r3, [r3, #16]
 8000c80:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8000c84:	b2db      	uxtb	r3, r3
 8000c86:	2b01      	cmp	r3, #1
 8000c88:	d10c      	bne.n	8000ca4 <Modbus_init+0x94>
    	{
    		HAL_TIM_Base_Start_IT(hModbus->htim);
 8000c8a:	4b08      	ldr	r3, [pc, #32]	@ (8000cac <Modbus_init+0x9c>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	691b      	ldr	r3, [r3, #16]
 8000c90:	4618      	mov	r0, r3
 8000c92:	f005 f85f 	bl	8005d54 <HAL_TIM_Base_Start_IT>
    		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 8000c96:	4b05      	ldr	r3, [pc, #20]	@ (8000cac <Modbus_init+0x9c>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	691b      	ldr	r3, [r3, #16]
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f005 fb26 	bl	80062f0 <HAL_TIM_OnePulse_Start_IT>
    	}

}
 8000ca4:	bf00      	nop
 8000ca6:	3708      	adds	r7, #8
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	20000228 	.word	0x20000228
 8000cb0:	08000b6d 	.word	0x08000b6d
 8000cb4:	08000b8d 	.word	0x08000b8d
 8000cb8:	08000bad 	.word	0x08000bad

08000cbc <CRC16>:
} ;

unsigned short CRC16 ( puchMsg, usDataLen ) /* The function returns the CRC as a unsigned short type */
unsigned char *puchMsg ; /* message to calculate CRC upon */
unsigned short usDataLen ; /* quantity of bytes in message */
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	b085      	sub	sp, #20
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
 8000cc4:	460b      	mov	r3, r1
 8000cc6:	803b      	strh	r3, [r7, #0]
	unsigned char uchCRCHi = 0xFF ; /* high byte of CRC initialized */
 8000cc8:	23ff      	movs	r3, #255	@ 0xff
 8000cca:	73fb      	strb	r3, [r7, #15]
	unsigned char uchCRCLo = 0xFF ; /* low byte of CRC initialized */
 8000ccc:	23ff      	movs	r3, #255	@ 0xff
 8000cce:	73bb      	strb	r3, [r7, #14]
	unsigned uIndex ; /* will index into CRC lookup table */
	while (usDataLen--) /* pass through message buffer */
 8000cd0:	e013      	b.n	8000cfa <CRC16+0x3e>
	{
		uIndex = uchCRCLo ^ *puchMsg++ ; /* calculate the CRC */
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	1c5a      	adds	r2, r3, #1
 8000cd6:	607a      	str	r2, [r7, #4]
 8000cd8:	781a      	ldrb	r2, [r3, #0]
 8000cda:	7bbb      	ldrb	r3, [r7, #14]
 8000cdc:	4053      	eors	r3, r2
 8000cde:	b2db      	uxtb	r3, r3
 8000ce0:	60bb      	str	r3, [r7, #8]
		uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex] ;
 8000ce2:	4a10      	ldr	r2, [pc, #64]	@ (8000d24 <CRC16+0x68>)
 8000ce4:	68bb      	ldr	r3, [r7, #8]
 8000ce6:	4413      	add	r3, r2
 8000ce8:	781a      	ldrb	r2, [r3, #0]
 8000cea:	7bfb      	ldrb	r3, [r7, #15]
 8000cec:	4053      	eors	r3, r2
 8000cee:	73bb      	strb	r3, [r7, #14]
		uchCRCHi = auchCRCLo[uIndex] ;
 8000cf0:	4a0d      	ldr	r2, [pc, #52]	@ (8000d28 <CRC16+0x6c>)
 8000cf2:	68bb      	ldr	r3, [r7, #8]
 8000cf4:	4413      	add	r3, r2
 8000cf6:	781b      	ldrb	r3, [r3, #0]
 8000cf8:	73fb      	strb	r3, [r7, #15]
	while (usDataLen--) /* pass through message buffer */
 8000cfa:	883b      	ldrh	r3, [r7, #0]
 8000cfc:	1e5a      	subs	r2, r3, #1
 8000cfe:	803a      	strh	r2, [r7, #0]
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d1e6      	bne.n	8000cd2 <CRC16+0x16>
	}
	return (uchCRCHi << 8 | uchCRCLo) ;
 8000d04:	7bfb      	ldrb	r3, [r7, #15]
 8000d06:	b21b      	sxth	r3, r3
 8000d08:	021b      	lsls	r3, r3, #8
 8000d0a:	b21a      	sxth	r2, r3
 8000d0c:	7bbb      	ldrb	r3, [r7, #14]
 8000d0e:	b21b      	sxth	r3, r3
 8000d10:	4313      	orrs	r3, r2
 8000d12:	b21b      	sxth	r3, r3
 8000d14:	b29b      	uxth	r3, r3
}
 8000d16:	4618      	mov	r0, r3
 8000d18:	3714      	adds	r7, #20
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr
 8000d22:	bf00      	nop
 8000d24:	20000100 	.word	0x20000100
 8000d28:	20000000 	.word	0x20000000

08000d2c <Modbus_Protocal_Worker>:



void Modbus_Protocal_Worker()
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b082      	sub	sp, #8
 8000d30:	af00      	add	r7, sp, #0
	switch(hModbus->Mstatus)
 8000d32:	4b80      	ldr	r3, [pc, #512]	@ (8000f34 <Modbus_Protocal_Worker+0x208>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	7e1b      	ldrb	r3, [r3, #24]
 8000d38:	3b01      	subs	r3, #1
 8000d3a:	2b03      	cmp	r3, #3
 8000d3c:	d80a      	bhi.n	8000d54 <Modbus_Protocal_Worker+0x28>
 8000d3e:	a201      	add	r2, pc, #4	@ (adr r2, 8000d44 <Modbus_Protocal_Worker+0x18>)
 8000d40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d44:	08000d5f 	.word	0x08000d5f
 8000d48:	08000efd 	.word	0x08000efd
 8000d4c:	08000de9 	.word	0x08000de9
 8000d50:	08000e0f 	.word	0x08000e0f
	{
	default:
	case Modbus_state_Init:
		/*init Modbus protocal*/

		hModbus->Mstatus = Modbus_state_Idle;
 8000d54:	4b77      	ldr	r3, [pc, #476]	@ (8000f34 <Modbus_Protocal_Worker+0x208>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	2201      	movs	r2, #1
 8000d5a:	761a      	strb	r2, [r3, #24]
		break;
 8000d5c:	e0e6      	b.n	8000f2c <Modbus_Protocal_Worker+0x200>
	case Modbus_state_Idle:
		/*Idle state*/

		//check that we have response message
		if(hModbus->TxCount)
 8000d5e:	4b75      	ldr	r3, [pc, #468]	@ (8000f34 <Modbus_Protocal_Worker+0x208>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	f893 3271 	ldrb.w	r3, [r3, #625]	@ 0x271
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d002      	beq.n	8000d70 <Modbus_Protocal_Worker+0x44>
		{
			Modbus_Emission();
 8000d6a:	f000 f9d5 	bl	8001118 <Modbus_Emission>
 8000d6e:	e01c      	b.n	8000daa <Modbus_Protocal_Worker+0x7e>
		}

		// Received character
		else if(hModbus->Flag_URev)
 8000d70:	4b70      	ldr	r3, [pc, #448]	@ (8000f34 <Modbus_Protocal_Worker+0x208>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	7d9b      	ldrb	r3, [r3, #22]
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d017      	beq.n	8000daa <Modbus_Protocal_Worker+0x7e>
		{
			/*reset Timer flag*/
			hModbus->Flag_T15TimeOut = 0;
 8000d7a:	4b6e      	ldr	r3, [pc, #440]	@ (8000f34 <Modbus_Protocal_Worker+0x208>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	2200      	movs	r2, #0
 8000d80:	751a      	strb	r2, [r3, #20]
			hModbus->Flag_T35TimeOut = 0;
 8000d82:	4b6c      	ldr	r3, [pc, #432]	@ (8000f34 <Modbus_Protocal_Worker+0x208>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	2200      	movs	r2, #0
 8000d88:	755a      	strb	r2, [r3, #21]
			__HAL_TIM_ENABLE(hModbus->htim);
 8000d8a:	4b6a      	ldr	r3, [pc, #424]	@ (8000f34 <Modbus_Protocal_Worker+0x208>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	691b      	ldr	r3, [r3, #16]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	681a      	ldr	r2, [r3, #0]
 8000d94:	4b67      	ldr	r3, [pc, #412]	@ (8000f34 <Modbus_Protocal_Worker+0x208>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	691b      	ldr	r3, [r3, #16]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	f042 0201 	orr.w	r2, r2, #1
 8000da0:	601a      	str	r2, [r3, #0]
			/*set state*/
			hModbus->Mstatus= Modbus_state_Reception;
 8000da2:	4b64      	ldr	r3, [pc, #400]	@ (8000f34 <Modbus_Protocal_Worker+0x208>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	2203      	movs	r2, #3
 8000da8:	761a      	strb	r2, [r3, #24]
		}

		//check that if UART RX not start, start receiving
		if(hModbus->huart->RxState == HAL_UART_STATE_READY)
 8000daa:	4b62      	ldr	r3, [pc, #392]	@ (8000f34 <Modbus_Protocal_Worker+0x208>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	68db      	ldr	r3, [r3, #12]
 8000db0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000db4:	2b20      	cmp	r3, #32
 8000db6:	f040 80b2 	bne.w	8000f1e <Modbus_Protocal_Worker+0x1f2>
		{
			hModbus->modbusUartStructure.RxTail =0;
 8000dba:	4b5e      	ldr	r3, [pc, #376]	@ (8000f34 <Modbus_Protocal_Worker+0x208>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	f8a3 23a2 	strh.w	r2, [r3, #930]	@ 0x3a2
			HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 8000dc4:	4b5b      	ldr	r3, [pc, #364]	@ (8000f34 <Modbus_Protocal_Worker+0x208>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	68d8      	ldr	r0, [r3, #12]
 8000dca:	4b5a      	ldr	r3, [pc, #360]	@ (8000f34 <Modbus_Protocal_Worker+0x208>)
 8000dcc:	681a      	ldr	r2, [r3, #0]
 8000dce:	4b59      	ldr	r3, [pc, #356]	@ (8000f34 <Modbus_Protocal_Worker+0x208>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8000dd6:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 8000dda:	4413      	add	r3, r2
 8000ddc:	3302      	adds	r3, #2
 8000dde:	2201      	movs	r2, #1
 8000de0:	4619      	mov	r1, r3
 8000de2:	f007 f9e1 	bl	80081a8 <HAL_UART_Receive_IT>
		}
		break;
 8000de6:	e09a      	b.n	8000f1e <Modbus_Protocal_Worker+0x1f2>
	case Modbus_state_Reception:

		if(hModbus->Flag_T15TimeOut)
 8000de8:	4b52      	ldr	r3, [pc, #328]	@ (8000f34 <Modbus_Protocal_Worker+0x208>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	7d1b      	ldrb	r3, [r3, #20]
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	f000 8097 	beq.w	8000f22 <Modbus_Protocal_Worker+0x1f6>
		{
			/*reset recived flag*/
			hModbus->Flag_URev =0;
 8000df4:	4b4f      	ldr	r3, [pc, #316]	@ (8000f34 <Modbus_Protocal_Worker+0x208>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	2200      	movs	r2, #0
 8000dfa:	759a      	strb	r2, [r3, #22]
			hModbus->RecvStatus = Modbus_RecvFrame_Null;
 8000dfc:	4b4d      	ldr	r3, [pc, #308]	@ (8000f34 <Modbus_Protocal_Worker+0x208>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	22fe      	movs	r2, #254	@ 0xfe
 8000e02:	75da      	strb	r2, [r3, #23]

			/*compute CRC and Slave address*/



			hModbus->Mstatus = Modbus_state_ControlAndWaiting;
 8000e04:	4b4b      	ldr	r3, [pc, #300]	@ (8000f34 <Modbus_Protocal_Worker+0x208>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	2204      	movs	r2, #4
 8000e0a:	761a      	strb	r2, [r3, #24]
		}
		break;
 8000e0c:	e089      	b.n	8000f22 <Modbus_Protocal_Worker+0x1f6>
	case Modbus_state_ControlAndWaiting:
		/*Frame error , Not generate response , Clear buffer*/
		if(hModbus->Flag_URev)
 8000e0e:	4b49      	ldr	r3, [pc, #292]	@ (8000f34 <Modbus_Protocal_Worker+0x208>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	7d9b      	ldrb	r3, [r3, #22]
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d009      	beq.n	8000e2c <Modbus_Protocal_Worker+0x100>
		{

			if(!hModbus->RecvStatus)
 8000e18:	4b46      	ldr	r3, [pc, #280]	@ (8000f34 <Modbus_Protocal_Worker+0x208>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	f993 3017 	ldrsb.w	r3, [r3, #23]
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d103      	bne.n	8000e2c <Modbus_Protocal_Worker+0x100>
			{
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 8000e24:	4b43      	ldr	r3, [pc, #268]	@ (8000f34 <Modbus_Protocal_Worker+0x208>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	22ff      	movs	r2, #255	@ 0xff
 8000e2a:	75da      	strb	r2, [r3, #23]
			}
		}

		/*Frame Calculation , calculate once*/
		if(hModbus->RecvStatus == Modbus_RecvFrame_Null)
 8000e2c:	4b41      	ldr	r3, [pc, #260]	@ (8000f34 <Modbus_Protocal_Worker+0x208>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	f993 3017 	ldrsb.w	r3, [r3, #23]
 8000e34:	f113 0f02 	cmn.w	r3, #2
 8000e38:	d150      	bne.n	8000edc <Modbus_Protocal_Worker+0x1b0>
		{
			hModbus->RecvStatus = Modbus_RecvFrame_Normal;
 8000e3a:	4b3e      	ldr	r3, [pc, #248]	@ (8000f34 <Modbus_Protocal_Worker+0x208>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	2200      	movs	r2, #0
 8000e40:	75da      	strb	r2, [r3, #23]
			// check CRC
			u16u8_t CalculateCRC;
			CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferRx,hModbus->modbusUartStructure.RxTail - 2);
 8000e42:	4b3c      	ldr	r3, [pc, #240]	@ (8000f34 <Modbus_Protocal_Worker+0x208>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	f203 2272 	addw	r2, r3, #626	@ 0x272
 8000e4a:	4b3a      	ldr	r3, [pc, #232]	@ (8000f34 <Modbus_Protocal_Worker+0x208>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8000e52:	3b02      	subs	r3, #2
 8000e54:	4619      	mov	r1, r3
 8000e56:	4610      	mov	r0, r2
 8000e58:	f7ff ff30 	bl	8000cbc <CRC16>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	80bb      	strh	r3, [r7, #4]

			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 8000e60:	793a      	ldrb	r2, [r7, #4]
 8000e62:	4b34      	ldr	r3, [pc, #208]	@ (8000f34 <Modbus_Protocal_Worker+0x208>)
 8000e64:	6819      	ldr	r1, [r3, #0]
 8000e66:	4b33      	ldr	r3, [pc, #204]	@ (8000f34 <Modbus_Protocal_Worker+0x208>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8000e6e:	3b02      	subs	r3, #2
 8000e70:	440b      	add	r3, r1
 8000e72:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
 8000e76:	429a      	cmp	r2, r3
 8000e78:	d10c      	bne.n	8000e94 <Modbus_Protocal_Worker+0x168>
			&& CalculateCRC.U8[1] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail -1]))
 8000e7a:	797a      	ldrb	r2, [r7, #5]
 8000e7c:	4b2d      	ldr	r3, [pc, #180]	@ (8000f34 <Modbus_Protocal_Worker+0x208>)
 8000e7e:	6819      	ldr	r1, [r3, #0]
 8000e80:	4b2c      	ldr	r3, [pc, #176]	@ (8000f34 <Modbus_Protocal_Worker+0x208>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8000e88:	3b01      	subs	r3, #1
 8000e8a:	440b      	add	r3, r1
 8000e8c:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 8000e90:	429a      	cmp	r2, r3
 8000e92:	d004      	beq.n	8000e9e <Modbus_Protocal_Worker+0x172>
			{
				// communication unsuccessful
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 8000e94:	4b27      	ldr	r3, [pc, #156]	@ (8000f34 <Modbus_Protocal_Worker+0x208>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	22ff      	movs	r2, #255	@ 0xff
 8000e9a:	75da      	strb	r2, [r3, #23]
				break;
 8000e9c:	e046      	b.n	8000f2c <Modbus_Protocal_Worker+0x200>
			}

			//check Slave Address
			if(hModbus->modbusUartStructure.MessageBufferRx[0] != hModbus->slaveAddress)
 8000e9e:	4b25      	ldr	r3, [pc, #148]	@ (8000f34 <Modbus_Protocal_Worker+0x208>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	f893 2272 	ldrb.w	r2, [r3, #626]	@ 0x272
 8000ea6:	4b23      	ldr	r3, [pc, #140]	@ (8000f34 <Modbus_Protocal_Worker+0x208>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	781b      	ldrb	r3, [r3, #0]
 8000eac:	429a      	cmp	r2, r3
 8000eae:	d113      	bne.n	8000ed8 <Modbus_Protocal_Worker+0x1ac>
				break;

			//copy recivced frame
			memcpy(hModbus->Rxframe,
 8000eb0:	4b20      	ldr	r3, [pc, #128]	@ (8000f34 <Modbus_Protocal_Worker+0x208>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	f103 0019 	add.w	r0, r3, #25
					hModbus->modbusUartStructure.MessageBufferRx+1,
 8000eb8:	4b1e      	ldr	r3, [pc, #120]	@ (8000f34 <Modbus_Protocal_Worker+0x208>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	f203 2372 	addw	r3, r3, #626	@ 0x272
			memcpy(hModbus->Rxframe,
 8000ec0:	1c59      	adds	r1, r3, #1
					hModbus->modbusUartStructure.RxTail-3);
 8000ec2:	4b1c      	ldr	r3, [pc, #112]	@ (8000f34 <Modbus_Protocal_Worker+0x208>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8000eca:	3b03      	subs	r3, #3
			memcpy(hModbus->Rxframe,
 8000ecc:	461a      	mov	r2, r3
 8000ece:	f00a f993 	bl	800b1f8 <memcpy>

			//execute command
			Modbus_frame_response();
 8000ed2:	f000 f909 	bl	80010e8 <Modbus_frame_response>
 8000ed6:	e001      	b.n	8000edc <Modbus_Protocal_Worker+0x1b0>
				break;
 8000ed8:	bf00      	nop
					}
		break;


	}
}
 8000eda:	e027      	b.n	8000f2c <Modbus_Protocal_Worker+0x200>
		if(hModbus->Flag_T35TimeOut)
 8000edc:	4b15      	ldr	r3, [pc, #84]	@ (8000f34 <Modbus_Protocal_Worker+0x208>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	7d5b      	ldrb	r3, [r3, #21]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d01f      	beq.n	8000f26 <Modbus_Protocal_Worker+0x1fa>
			hModbus->Mstatus = Modbus_state_Idle;
 8000ee6:	4b13      	ldr	r3, [pc, #76]	@ (8000f34 <Modbus_Protocal_Worker+0x208>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	2201      	movs	r2, #1
 8000eec:	761a      	strb	r2, [r3, #24]
			HAL_UART_AbortReceive(hModbus->huart);
 8000eee:	4b11      	ldr	r3, [pc, #68]	@ (8000f34 <Modbus_Protocal_Worker+0x208>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	68db      	ldr	r3, [r3, #12]
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f007 fa23 	bl	8008340 <HAL_UART_AbortReceive>
		break;
 8000efa:	e014      	b.n	8000f26 <Modbus_Protocal_Worker+0x1fa>
		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8000efc:	4b0d      	ldr	r3, [pc, #52]	@ (8000f34 <Modbus_Protocal_Worker+0x208>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	68db      	ldr	r3, [r3, #12]
 8000f02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f06:	2b20      	cmp	r3, #32
 8000f08:	d10f      	bne.n	8000f2a <Modbus_Protocal_Worker+0x1fe>
			hModbus->TxCount=0;
 8000f0a:	4b0a      	ldr	r3, [pc, #40]	@ (8000f34 <Modbus_Protocal_Worker+0x208>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	2200      	movs	r2, #0
 8000f10:	f883 2271 	strb.w	r2, [r3, #625]	@ 0x271
			hModbus->Mstatus = Modbus_state_Idle;
 8000f14:	4b07      	ldr	r3, [pc, #28]	@ (8000f34 <Modbus_Protocal_Worker+0x208>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	2201      	movs	r2, #1
 8000f1a:	761a      	strb	r2, [r3, #24]
		break;
 8000f1c:	e005      	b.n	8000f2a <Modbus_Protocal_Worker+0x1fe>
		break;
 8000f1e:	bf00      	nop
 8000f20:	e004      	b.n	8000f2c <Modbus_Protocal_Worker+0x200>
		break;
 8000f22:	bf00      	nop
 8000f24:	e002      	b.n	8000f2c <Modbus_Protocal_Worker+0x200>
		break;
 8000f26:	bf00      	nop
 8000f28:	e000      	b.n	8000f2c <Modbus_Protocal_Worker+0x200>
		break;
 8000f2a:	bf00      	nop
}
 8000f2c:	bf00      	nop
 8000f2e:	3708      	adds	r7, #8
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	20000228 	.word	0x20000228

08000f38 <modbusWrite1Register>:
void modbusWrite1Register() //function 06
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b082      	sub	sp, #8
 8000f3c:	af00      	add	r7, sp, #0

	//write data to register
	uint16_t startAddress = (hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]);
 8000f3e:	4b1d      	ldr	r3, [pc, #116]	@ (8000fb4 <modbusWrite1Register+0x7c>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	7e9b      	ldrb	r3, [r3, #26]
 8000f44:	021b      	lsls	r3, r3, #8
 8000f46:	b29b      	uxth	r3, r3
 8000f48:	4a1a      	ldr	r2, [pc, #104]	@ (8000fb4 <modbusWrite1Register+0x7c>)
 8000f4a:	6812      	ldr	r2, [r2, #0]
 8000f4c:	7ed2      	ldrb	r2, [r2, #27]
 8000f4e:	4413      	add	r3, r2
 8000f50:	80fb      	strh	r3, [r7, #6]

	if(startAddress > hModbus->RegisterSize)
 8000f52:	88fa      	ldrh	r2, [r7, #6]
 8000f54:	4b17      	ldr	r3, [pc, #92]	@ (8000fb4 <modbusWrite1Register+0x7c>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	689b      	ldr	r3, [r3, #8]
 8000f5a:	429a      	cmp	r2, r3
 8000f5c:	d903      	bls.n	8000f66 <modbusWrite1Register+0x2e>
		{
			 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 8000f5e:	2002      	movs	r0, #2
 8000f60:	f000 f8a0 	bl	80010a4 <ModbusErrorReply>
			 return;
 8000f64:	e023      	b.n	8000fae <modbusWrite1Register+0x76>
		}


	hModbus->RegisterAddress[startAddress].U8[1] = hModbus->Rxframe[3];
 8000f66:	4b13      	ldr	r3, [pc, #76]	@ (8000fb4 <modbusWrite1Register+0x7c>)
 8000f68:	681a      	ldr	r2, [r3, #0]
 8000f6a:	4b12      	ldr	r3, [pc, #72]	@ (8000fb4 <modbusWrite1Register+0x7c>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	6859      	ldr	r1, [r3, #4]
 8000f70:	88fb      	ldrh	r3, [r7, #6]
 8000f72:	005b      	lsls	r3, r3, #1
 8000f74:	440b      	add	r3, r1
 8000f76:	7f12      	ldrb	r2, [r2, #28]
 8000f78:	705a      	strb	r2, [r3, #1]
	hModbus->RegisterAddress[startAddress].U8[0] = hModbus->Rxframe[4];
 8000f7a:	4b0e      	ldr	r3, [pc, #56]	@ (8000fb4 <modbusWrite1Register+0x7c>)
 8000f7c:	681a      	ldr	r2, [r3, #0]
 8000f7e:	4b0d      	ldr	r3, [pc, #52]	@ (8000fb4 <modbusWrite1Register+0x7c>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	6859      	ldr	r1, [r3, #4]
 8000f84:	88fb      	ldrh	r3, [r7, #6]
 8000f86:	005b      	lsls	r3, r3, #1
 8000f88:	440b      	add	r3, r1
 8000f8a:	7f52      	ldrb	r2, [r2, #29]
 8000f8c:	701a      	strb	r2, [r3, #0]



	//generate response
	memcpy(hModbus->Txframe,
 8000f8e:	4b09      	ldr	r3, [pc, #36]	@ (8000fb4 <modbusWrite1Register+0x7c>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	f203 1045 	addw	r0, r3, #325	@ 0x145
			hModbus->Rxframe,
 8000f96:	4b07      	ldr	r3, [pc, #28]	@ (8000fb4 <modbusWrite1Register+0x7c>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	3319      	adds	r3, #25
	memcpy(hModbus->Txframe,
 8000f9c:	2208      	movs	r2, #8
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	f00a f92a 	bl	800b1f8 <memcpy>
			8);
	//set number of byte to sent
	hModbus->TxCount=5;
 8000fa4:	4b03      	ldr	r3, [pc, #12]	@ (8000fb4 <modbusWrite1Register+0x7c>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	2205      	movs	r2, #5
 8000faa:	f883 2271 	strb.w	r2, [r3, #625]	@ 0x271



}
 8000fae:	3708      	adds	r7, #8
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	20000228 	.word	0x20000228

08000fb8 <modbusRead1Register>:

void modbusRead1Register() // function 03
{
 8000fb8:	b590      	push	{r4, r7, lr}
 8000fba:	b083      	sub	sp, #12
 8000fbc:	af00      	add	r7, sp, #0



	uint16_t numberOfDataToRead =((hModbus->Rxframe[3]<<8)+(hModbus->Rxframe[4]));
 8000fbe:	4b38      	ldr	r3, [pc, #224]	@ (80010a0 <modbusRead1Register+0xe8>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	7f1b      	ldrb	r3, [r3, #28]
 8000fc4:	021b      	lsls	r3, r3, #8
 8000fc6:	b29b      	uxth	r3, r3
 8000fc8:	4a35      	ldr	r2, [pc, #212]	@ (80010a0 <modbusRead1Register+0xe8>)
 8000fca:	6812      	ldr	r2, [r2, #0]
 8000fcc:	7f52      	ldrb	r2, [r2, #29]
 8000fce:	4413      	add	r3, r2
 8000fd0:	80fb      	strh	r3, [r7, #6]
	uint16_t startAddress =((hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]));
 8000fd2:	4b33      	ldr	r3, [pc, #204]	@ (80010a0 <modbusRead1Register+0xe8>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	7e9b      	ldrb	r3, [r3, #26]
 8000fd8:	021b      	lsls	r3, r3, #8
 8000fda:	b29b      	uxth	r3, r3
 8000fdc:	4a30      	ldr	r2, [pc, #192]	@ (80010a0 <modbusRead1Register+0xe8>)
 8000fde:	6812      	ldr	r2, [r2, #0]
 8000fe0:	7ed2      	ldrb	r2, [r2, #27]
 8000fe2:	4413      	add	r3, r2
 8000fe4:	80bb      	strh	r3, [r7, #4]

	//check quantity and address range

	if(numberOfDataToRead <1 ||numberOfDataToRead > 0x7D)
 8000fe6:	88fb      	ldrh	r3, [r7, #6]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d002      	beq.n	8000ff2 <modbusRead1Register+0x3a>
 8000fec:	88fb      	ldrh	r3, [r7, #6]
 8000fee:	2b7d      	cmp	r3, #125	@ 0x7d
 8000ff0:	d903      	bls.n	8000ffa <modbusRead1Register+0x42>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataValue);
 8000ff2:	2003      	movs	r0, #3
 8000ff4:	f000 f856 	bl	80010a4 <ModbusErrorReply>
		 return;
 8000ff8:	e04e      	b.n	8001098 <modbusRead1Register+0xe0>
	}

	if(startAddress > hModbus->RegisterSize || (startAddress +  numberOfDataToRead) > hModbus->RegisterSize)
 8000ffa:	88ba      	ldrh	r2, [r7, #4]
 8000ffc:	4b28      	ldr	r3, [pc, #160]	@ (80010a0 <modbusRead1Register+0xe8>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	689b      	ldr	r3, [r3, #8]
 8001002:	429a      	cmp	r2, r3
 8001004:	d808      	bhi.n	8001018 <modbusRead1Register+0x60>
 8001006:	88ba      	ldrh	r2, [r7, #4]
 8001008:	88fb      	ldrh	r3, [r7, #6]
 800100a:	4413      	add	r3, r2
 800100c:	461a      	mov	r2, r3
 800100e:	4b24      	ldr	r3, [pc, #144]	@ (80010a0 <modbusRead1Register+0xe8>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	689b      	ldr	r3, [r3, #8]
 8001014:	429a      	cmp	r2, r3
 8001016:	d903      	bls.n	8001020 <modbusRead1Register+0x68>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 8001018:	2002      	movs	r0, #2
 800101a:	f000 f843 	bl	80010a4 <ModbusErrorReply>
		 return;
 800101e:	e03b      	b.n	8001098 <modbusRead1Register+0xe0>
	}


	//generate response
	hModbus->Txframe[0] = Modbus_function_Read_Holding_Register;
 8001020:	4b1f      	ldr	r3, [pc, #124]	@ (80010a0 <modbusRead1Register+0xe8>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	2203      	movs	r2, #3
 8001026:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	hModbus->Txframe[1] = (2*numberOfDataToRead) & 0xFF;
 800102a:	88fb      	ldrh	r3, [r7, #6]
 800102c:	b2da      	uxtb	r2, r3
 800102e:	4b1c      	ldr	r3, [pc, #112]	@ (80010a0 <modbusRead1Register+0xe8>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	0052      	lsls	r2, r2, #1
 8001034:	b2d2      	uxtb	r2, r2
 8001036:	f883 2146 	strb.w	r2, [r3, #326]	@ 0x146
	register int i;
	for(i=0; i<numberOfDataToRead;i++)
 800103a:	2400      	movs	r4, #0
 800103c:	e020      	b.n	8001080 <modbusRead1Register+0xc8>
	{
		hModbus->Txframe[2*i+2]=hModbus->RegisterAddress[startAddress+i].U8[1];
 800103e:	4b18      	ldr	r3, [pc, #96]	@ (80010a0 <modbusRead1Register+0xe8>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	685a      	ldr	r2, [r3, #4]
 8001044:	88bb      	ldrh	r3, [r7, #4]
 8001046:	4423      	add	r3, r4
 8001048:	005b      	lsls	r3, r3, #1
 800104a:	18d1      	adds	r1, r2, r3
 800104c:	4b14      	ldr	r3, [pc, #80]	@ (80010a0 <modbusRead1Register+0xe8>)
 800104e:	681a      	ldr	r2, [r3, #0]
 8001050:	1c63      	adds	r3, r4, #1
 8001052:	005b      	lsls	r3, r3, #1
 8001054:	7849      	ldrb	r1, [r1, #1]
 8001056:	4413      	add	r3, r2
 8001058:	460a      	mov	r2, r1
 800105a:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
		hModbus->Txframe[2*i+3]=hModbus->RegisterAddress[startAddress+i].U8[0];
 800105e:	4b10      	ldr	r3, [pc, #64]	@ (80010a0 <modbusRead1Register+0xe8>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	685a      	ldr	r2, [r3, #4]
 8001064:	88bb      	ldrh	r3, [r7, #4]
 8001066:	4423      	add	r3, r4
 8001068:	005b      	lsls	r3, r3, #1
 800106a:	18d1      	adds	r1, r2, r3
 800106c:	4b0c      	ldr	r3, [pc, #48]	@ (80010a0 <modbusRead1Register+0xe8>)
 800106e:	681a      	ldr	r2, [r3, #0]
 8001070:	0063      	lsls	r3, r4, #1
 8001072:	3303      	adds	r3, #3
 8001074:	7809      	ldrb	r1, [r1, #0]
 8001076:	4413      	add	r3, r2
 8001078:	460a      	mov	r2, r1
 800107a:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	for(i=0; i<numberOfDataToRead;i++)
 800107e:	3401      	adds	r4, #1
 8001080:	88fb      	ldrh	r3, [r7, #6]
 8001082:	429c      	cmp	r4, r3
 8001084:	dbdb      	blt.n	800103e <modbusRead1Register+0x86>
	}
	hModbus->TxCount = 2+2*numberOfDataToRead;
 8001086:	88fb      	ldrh	r3, [r7, #6]
 8001088:	3301      	adds	r3, #1
 800108a:	b2da      	uxtb	r2, r3
 800108c:	4b04      	ldr	r3, [pc, #16]	@ (80010a0 <modbusRead1Register+0xe8>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	0052      	lsls	r2, r2, #1
 8001092:	b2d2      	uxtb	r2, r2
 8001094:	f883 2271 	strb.w	r2, [r3, #625]	@ 0x271

}
 8001098:	370c      	adds	r7, #12
 800109a:	46bd      	mov	sp, r7
 800109c:	bd90      	pop	{r4, r7, pc}
 800109e:	bf00      	nop
 80010a0:	20000228 	.word	0x20000228

080010a4 <ModbusErrorReply>:

void ModbusErrorReply(uint8_t Errorcode)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b083      	sub	sp, #12
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	4603      	mov	r3, r0
 80010ac:	71fb      	strb	r3, [r7, #7]
	hModbus->Txframe[0] = hModbus->Rxframe[0] | 0x80;
 80010ae:	4b0d      	ldr	r3, [pc, #52]	@ (80010e4 <ModbusErrorReply+0x40>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	7e5a      	ldrb	r2, [r3, #25]
 80010b4:	4b0b      	ldr	r3, [pc, #44]	@ (80010e4 <ModbusErrorReply+0x40>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80010bc:	b2d2      	uxtb	r2, r2
 80010be:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	hModbus->Txframe[1] = Errorcode;
 80010c2:	4b08      	ldr	r3, [pc, #32]	@ (80010e4 <ModbusErrorReply+0x40>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	79fa      	ldrb	r2, [r7, #7]
 80010c8:	f883 2146 	strb.w	r2, [r3, #326]	@ 0x146
	hModbus->TxCount = 2;
 80010cc:	4b05      	ldr	r3, [pc, #20]	@ (80010e4 <ModbusErrorReply+0x40>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	2202      	movs	r2, #2
 80010d2:	f883 2271 	strb.w	r2, [r3, #625]	@ 0x271
}
 80010d6:	bf00      	nop
 80010d8:	370c      	adds	r7, #12
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr
 80010e2:	bf00      	nop
 80010e4:	20000228 	.word	0x20000228

080010e8 <Modbus_frame_response>:

void Modbus_frame_response()
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	af00      	add	r7, sp, #0
	switch(hModbus->Rxframe[0]) //check funcion
 80010ec:	4b09      	ldr	r3, [pc, #36]	@ (8001114 <Modbus_frame_response+0x2c>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	7e5b      	ldrb	r3, [r3, #25]
 80010f2:	2b03      	cmp	r3, #3
 80010f4:	d004      	beq.n	8001100 <Modbus_frame_response+0x18>
 80010f6:	2b06      	cmp	r3, #6
 80010f8:	d105      	bne.n	8001106 <Modbus_frame_response+0x1e>
	{
	case Modbus_function_Write_SingleRegister:
		modbusWrite1Register();
 80010fa:	f7ff ff1d 	bl	8000f38 <modbusWrite1Register>
		break;
 80010fe:	e006      	b.n	800110e <Modbus_frame_response+0x26>
	case Modbus_function_Read_Holding_Register:
		modbusRead1Register();
 8001100:	f7ff ff5a 	bl	8000fb8 <modbusRead1Register>
		break;
 8001104:	e003      	b.n	800110e <Modbus_frame_response+0x26>
	default:
		 ModbusErrorReply(Modbus_RecvFrame_IllegalFunction);
 8001106:	2001      	movs	r0, #1
 8001108:	f7ff ffcc 	bl	80010a4 <ModbusErrorReply>
		break;
 800110c:	bf00      	nop

	}
}
 800110e:	bf00      	nop
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	20000228 	.word	0x20000228

08001118 <Modbus_Emission>:

void Modbus_Emission()
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
	if(hModbus->huart->gState==HAL_UART_STATE_READY)
 800111e:	4b3c      	ldr	r3, [pc, #240]	@ (8001210 <Modbus_Emission+0xf8>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	68db      	ldr	r3, [r3, #12]
 8001124:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001128:	2b20      	cmp	r3, #32
 800112a:	d15d      	bne.n	80011e8 <Modbus_Emission+0xd0>
	{
		//generate response package
		hModbus->modbusUartStructure.MessageBufferTx[0] = hModbus->slaveAddress;
 800112c:	4b38      	ldr	r3, [pc, #224]	@ (8001210 <Modbus_Emission+0xf8>)
 800112e:	681a      	ldr	r2, [r3, #0]
 8001130:	4b37      	ldr	r3, [pc, #220]	@ (8001210 <Modbus_Emission+0xf8>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	7812      	ldrb	r2, [r2, #0]
 8001136:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		memcpy
		(
				hModbus->modbusUartStructure.MessageBufferTx+1,
 800113a:	4b35      	ldr	r3, [pc, #212]	@ (8001210 <Modbus_Emission+0xf8>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f503 7369 	add.w	r3, r3, #932	@ 0x3a4
		memcpy
 8001142:	1c58      	adds	r0, r3, #1
				hModbus->Txframe,
 8001144:	4b32      	ldr	r3, [pc, #200]	@ (8001210 <Modbus_Emission+0xf8>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f203 1145 	addw	r1, r3, #325	@ 0x145
				hModbus->TxCount
 800114c:	4b30      	ldr	r3, [pc, #192]	@ (8001210 <Modbus_Emission+0xf8>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f893 3271 	ldrb.w	r3, [r3, #625]	@ 0x271
		memcpy
 8001154:	461a      	mov	r2, r3
 8001156:	f00a f84f 	bl	800b1f8 <memcpy>
		);

		hModbus->modbusUartStructure.TxTail = hModbus->TxCount+3;
 800115a:	4b2d      	ldr	r3, [pc, #180]	@ (8001210 <Modbus_Emission+0xf8>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f893 3271 	ldrb.w	r3, [r3, #625]	@ 0x271
 8001162:	461a      	mov	r2, r3
 8001164:	4b2a      	ldr	r3, [pc, #168]	@ (8001210 <Modbus_Emission+0xf8>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	3203      	adds	r2, #3
 800116a:	b292      	uxth	r2, r2
 800116c:	f8a3 24d4 	strh.w	r2, [r3, #1236]	@ 0x4d4

		u16u8_t CalculateCRC;
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 8001170:	4b27      	ldr	r3, [pc, #156]	@ (8001210 <Modbus_Emission+0xf8>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	f503 7269 	add.w	r2, r3, #932	@ 0x3a4
				hModbus->modbusUartStructure.TxTail - 2);
 8001178:	4b25      	ldr	r3, [pc, #148]	@ (8001210 <Modbus_Emission+0xf8>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 8001180:	3b02      	subs	r3, #2
 8001182:	4619      	mov	r1, r3
 8001184:	4610      	mov	r0, r2
 8001186:	f7ff fd99 	bl	8000cbc <CRC16>
 800118a:	4603      	mov	r3, r0
 800118c:	80bb      	strh	r3, [r7, #4]

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-2]
 800118e:	4b20      	ldr	r3, [pc, #128]	@ (8001210 <Modbus_Emission+0xf8>)
 8001190:	681a      	ldr	r2, [r3, #0]
 8001192:	4b1f      	ldr	r3, [pc, #124]	@ (8001210 <Modbus_Emission+0xf8>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 800119a:	3b02      	subs	r3, #2
													 =CalculateCRC.U8[0];
 800119c:	7939      	ldrb	r1, [r7, #4]
 800119e:	4413      	add	r3, r2
 80011a0:	460a      	mov	r2, r1
 80011a2:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-1]
 80011a6:	4b1a      	ldr	r3, [pc, #104]	@ (8001210 <Modbus_Emission+0xf8>)
 80011a8:	681a      	ldr	r2, [r3, #0]
 80011aa:	4b19      	ldr	r3, [pc, #100]	@ (8001210 <Modbus_Emission+0xf8>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 80011b2:	3b01      	subs	r3, #1
													 =CalculateCRC.U8[1];
 80011b4:	7979      	ldrb	r1, [r7, #5]
 80011b6:	4413      	add	r3, r2
 80011b8:	460a      	mov	r2, r1
 80011ba:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4


		//sent modbus

		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 80011be:	4b14      	ldr	r3, [pc, #80]	@ (8001210 <Modbus_Emission+0xf8>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	68db      	ldr	r3, [r3, #12]
 80011c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80011c8:	2b20      	cmp	r3, #32
 80011ca:	d10d      	bne.n	80011e8 <Modbus_Emission+0xd0>
		{
			HAL_UART_Transmit_DMA(hModbus->huart
 80011cc:	4b10      	ldr	r3, [pc, #64]	@ (8001210 <Modbus_Emission+0xf8>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	68d8      	ldr	r0, [r3, #12]
					,hModbus->modbusUartStructure.MessageBufferTx
 80011d2:	4b0f      	ldr	r3, [pc, #60]	@ (8001210 <Modbus_Emission+0xf8>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f503 7169 	add.w	r1, r3, #932	@ 0x3a4
					,hModbus->modbusUartStructure.TxTail);
 80011da:	4b0d      	ldr	r3, [pc, #52]	@ (8001210 <Modbus_Emission+0xf8>)
 80011dc:	681b      	ldr	r3, [r3, #0]
			HAL_UART_Transmit_DMA(hModbus->huart
 80011de:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 80011e2:	461a      	mov	r2, r3
 80011e4:	f007 f82c 	bl	8008240 <HAL_UART_Transmit_DMA>



	}
	/*reset Timer flag*/
	hModbus->Flag_T15TimeOut = 0;
 80011e8:	4b09      	ldr	r3, [pc, #36]	@ (8001210 <Modbus_Emission+0xf8>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	2200      	movs	r2, #0
 80011ee:	751a      	strb	r2, [r3, #20]
	hModbus->Flag_T35TimeOut = 0;
 80011f0:	4b07      	ldr	r3, [pc, #28]	@ (8001210 <Modbus_Emission+0xf8>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	2200      	movs	r2, #0
 80011f6:	755a      	strb	r2, [r3, #21]
	hModbus->Flag_URev =0;
 80011f8:	4b05      	ldr	r3, [pc, #20]	@ (8001210 <Modbus_Emission+0xf8>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	2200      	movs	r2, #0
 80011fe:	759a      	strb	r2, [r3, #22]
	/*set state*/
	hModbus->Mstatus= Modbus_state_Emission;
 8001200:	4b03      	ldr	r3, [pc, #12]	@ (8001210 <Modbus_Emission+0xf8>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	2202      	movs	r2, #2
 8001206:	761a      	strb	r2, [r3, #24]
}
 8001208:	bf00      	nop
 800120a:	3708      	adds	r7, #8
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}
 8001210:	20000228 	.word	0x20000228

08001214 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001214:	b590      	push	{r4, r7, lr}
 8001216:	b08b      	sub	sp, #44	@ 0x2c
 8001218:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800121a:	f001 fb68 	bl	80028ee <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800121e:	f000 f9e9 	bl	80015f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001222:	f000 fec3 	bl	8001fac <MX_GPIO_Init>
  MX_DMA_Init();
 8001226:	f000 fe97 	bl	8001f58 <MX_DMA_Init>
  MX_TIM3_Init();
 800122a:	f000 fbaf 	bl	800198c <MX_TIM3_Init>
  MX_ADC1_Init();
 800122e:	f000 fa2d 	bl	800168c <MX_ADC1_Init>
  MX_TIM1_Init();
 8001232:	f000 fb09 	bl	8001848 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001236:	f000 fb5b 	bl	80018f0 <MX_TIM2_Init>
  MX_TIM4_Init();
 800123a:	f000 fbfd 	bl	8001a38 <MX_TIM4_Init>
  MX_TIM20_Init();
 800123e:	f000 fd81 	bl	8001d44 <MX_TIM20_Init>
  MX_TIM8_Init();
 8001242:	f000 fc4f 	bl	8001ae4 <MX_TIM8_Init>
  MX_TIM16_Init();
 8001246:	f000 fcfd 	bl	8001c44 <MX_TIM16_Init>
  MX_USART2_UART_Init();
 800124a:	f000 fe37 	bl	8001ebc <MX_USART2_UART_Init>
  MX_ADC2_Init();
 800124e:	f000 fa95 	bl	800177c <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start(&htim20);
 8001252:	484d      	ldr	r0, [pc, #308]	@ (8001388 <main+0x174>)
 8001254:	f004 fd0e 	bl	8005c74 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim8);
 8001258:	484c      	ldr	r0, [pc, #304]	@ (800138c <main+0x178>)
 800125a:	f004 fd0b 	bl	8005c74 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 800125e:	210c      	movs	r1, #12
 8001260:	484a      	ldr	r0, [pc, #296]	@ (800138c <main+0x178>)
 8001262:	f004 fecb 	bl	8005ffc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim20, TIM_CHANNEL_1);
 8001266:	2100      	movs	r1, #0
 8001268:	4847      	ldr	r0, [pc, #284]	@ (8001388 <main+0x174>)
 800126a:	f004 fec7 	bl	8005ffc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim20, TIM_CHANNEL_3);
 800126e:	2108      	movs	r1, #8
 8001270:	4845      	ldr	r0, [pc, #276]	@ (8001388 <main+0x174>)
 8001272:	f004 fec3 	bl	8005ffc <HAL_TIM_PWM_Start>
	Encoder_Init(&encoder1, &htim4);
 8001276:	4946      	ldr	r1, [pc, #280]	@ (8001390 <main+0x17c>)
 8001278:	4846      	ldr	r0, [pc, #280]	@ (8001394 <main+0x180>)
 800127a:	f7ff f963 	bl	8000544 <Encoder_Init>
	Encoder_Init(&encoder2, &htim3);
 800127e:	4946      	ldr	r1, [pc, #280]	@ (8001398 <main+0x184>)
 8001280:	4846      	ldr	r0, [pc, #280]	@ (800139c <main+0x188>)
 8001282:	f7ff f95f 	bl	8000544 <Encoder_Init>
	HAL_ADC_Start(&hadc1);
 8001286:	4846      	ldr	r0, [pc, #280]	@ (80013a0 <main+0x18c>)
 8001288:	f001 ff6a 	bl	8003160 <HAL_ADC_Start>

	int lastTick = 0;
 800128c:	2300      	movs	r3, #0
 800128e:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8001290:	213c      	movs	r1, #60	@ 0x3c
 8001292:	4841      	ldr	r0, [pc, #260]	@ (8001398 <main+0x184>)
 8001294:	f005 f96e 	bl	8006574 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8001298:	213c      	movs	r1, #60	@ 0x3c
 800129a:	483d      	ldr	r0, [pc, #244]	@ (8001390 <main+0x17c>)
 800129c:	f005 f96a 	bl	8006574 <HAL_TIM_Encoder_Start>

	hmodbus.huart = &huart2;
 80012a0:	4b40      	ldr	r3, [pc, #256]	@ (80013a4 <main+0x190>)
 80012a2:	4a41      	ldr	r2, [pc, #260]	@ (80013a8 <main+0x194>)
 80012a4:	60da      	str	r2, [r3, #12]
	hmodbus.htim = &htim16;
 80012a6:	4b3f      	ldr	r3, [pc, #252]	@ (80013a4 <main+0x190>)
 80012a8:	4a40      	ldr	r2, [pc, #256]	@ (80013ac <main+0x198>)
 80012aa:	611a      	str	r2, [r3, #16]
	hmodbus.slaveAddress = 0x15;
 80012ac:	4b3d      	ldr	r3, [pc, #244]	@ (80013a4 <main+0x190>)
 80012ae:	2215      	movs	r2, #21
 80012b0:	701a      	strb	r2, [r3, #0]
	hmodbus.RegisterSize = 200;
 80012b2:	4b3c      	ldr	r3, [pc, #240]	@ (80013a4 <main+0x190>)
 80012b4:	22c8      	movs	r2, #200	@ 0xc8
 80012b6:	609a      	str	r2, [r3, #8]
	Modbus_init(&hmodbus, registerFrame);
 80012b8:	493d      	ldr	r1, [pc, #244]	@ (80013b0 <main+0x19c>)
 80012ba:	483a      	ldr	r0, [pc, #232]	@ (80013a4 <main+0x190>)
 80012bc:	f7ff fca8 	bl	8000c10 <Modbus_init>

	Kalman_Init(&kf);
 80012c0:	483c      	ldr	r0, [pc, #240]	@ (80013b4 <main+0x1a0>)
 80012c2:	f7ff fa04 	bl	80006ce <Kalman_Init>

	kf.A_data[0] = 1;
 80012c6:	4b3b      	ldr	r3, [pc, #236]	@ (80013b4 <main+0x1a0>)
 80012c8:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80012cc:	671a      	str	r2, [r3, #112]	@ 0x70
	kf.A_data[1] = 0.0009998;
 80012ce:	4b39      	ldr	r3, [pc, #228]	@ (80013b4 <main+0x1a0>)
 80012d0:	4a39      	ldr	r2, [pc, #228]	@ (80013b8 <main+0x1a4>)
 80012d2:	675a      	str	r2, [r3, #116]	@ 0x74
	kf.A_data[2] = -2.659e-06;
 80012d4:	4b37      	ldr	r3, [pc, #220]	@ (80013b4 <main+0x1a0>)
 80012d6:	4a39      	ldr	r2, [pc, #228]	@ (80013bc <main+0x1a8>)
 80012d8:	679a      	str	r2, [r3, #120]	@ 0x78
	kf.A_data[3] = 8.108e-08;
 80012da:	4b36      	ldr	r3, [pc, #216]	@ (80013b4 <main+0x1a0>)
 80012dc:	4a38      	ldr	r2, [pc, #224]	@ (80013c0 <main+0x1ac>)
 80012de:	67da      	str	r2, [r3, #124]	@ 0x7c
	kf.A_data[4] = 0;
 80012e0:	4b34      	ldr	r3, [pc, #208]	@ (80013b4 <main+0x1a0>)
 80012e2:	f04f 0200 	mov.w	r2, #0
 80012e6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
	kf.A_data[5] = 0.9996;
 80012ea:	4b32      	ldr	r3, [pc, #200]	@ (80013b4 <main+0x1a0>)
 80012ec:	4a35      	ldr	r2, [pc, #212]	@ (80013c4 <main+0x1b0>)
 80012ee:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
	kf.A_data[6] = -0.005318;
 80012f2:	4b30      	ldr	r3, [pc, #192]	@ (80013b4 <main+0x1a0>)
 80012f4:	4a34      	ldr	r2, [pc, #208]	@ (80013c8 <main+0x1b4>)
 80012f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
	kf.A_data[7] = 0.0001622;
 80012fa:	4b2e      	ldr	r3, [pc, #184]	@ (80013b4 <main+0x1a0>)
 80012fc:	4a33      	ldr	r2, [pc, #204]	@ (80013cc <main+0x1b8>)
 80012fe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
	kf.A_data[8] = 0;
 8001302:	4b2c      	ldr	r3, [pc, #176]	@ (80013b4 <main+0x1a0>)
 8001304:	f04f 0200 	mov.w	r2, #0
 8001308:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
	kf.A_data[9] = 0;
 800130c:	4b29      	ldr	r3, [pc, #164]	@ (80013b4 <main+0x1a0>)
 800130e:	f04f 0200 	mov.w	r2, #0
 8001312:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
	kf.A_data[10] = 1;
 8001316:	4b27      	ldr	r3, [pc, #156]	@ (80013b4 <main+0x1a0>)
 8001318:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800131c:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
	kf.A_data[11] = 0;
 8001320:	4b24      	ldr	r3, [pc, #144]	@ (80013b4 <main+0x1a0>)
 8001322:	f04f 0200 	mov.w	r2, #0
 8001326:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
	kf.A_data[12] = 0;
 800132a:	4b22      	ldr	r3, [pc, #136]	@ (80013b4 <main+0x1a0>)
 800132c:	f04f 0200 	mov.w	r2, #0
 8001330:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
	kf.A_data[13] = -2.746;
 8001334:	4b1f      	ldr	r3, [pc, #124]	@ (80013b4 <main+0x1a0>)
 8001336:	4a26      	ldr	r2, [pc, #152]	@ (80013d0 <main+0x1bc>)
 8001338:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
	kf.A_data[14] = 0.007303;
 800133c:	4b1d      	ldr	r3, [pc, #116]	@ (80013b4 <main+0x1a0>)
 800133e:	4a25      	ldr	r2, [pc, #148]	@ (80013d4 <main+0x1c0>)
 8001340:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
	kf.A_data[15] = 0.1354;
 8001344:	4b1b      	ldr	r3, [pc, #108]	@ (80013b4 <main+0x1a0>)
 8001346:	4a24      	ldr	r2, [pc, #144]	@ (80013d8 <main+0x1c4>)
 8001348:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac

	kf.B_data[0] = 1.203e-07;
 800134c:	4b19      	ldr	r3, [pc, #100]	@ (80013b4 <main+0x1a0>)
 800134e:	4a23      	ldr	r2, [pc, #140]	@ (80013dc <main+0x1c8>)
 8001350:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
	kf.B_data[1] = 0.0002406;
 8001354:	4b17      	ldr	r3, [pc, #92]	@ (80013b4 <main+0x1a0>)
 8001356:	4a22      	ldr	r2, [pc, #136]	@ (80013e0 <main+0x1cc>)
 8001358:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
	kf.B_data[2] = 0;
 800135c:	4b15      	ldr	r3, [pc, #84]	@ (80013b4 <main+0x1a0>)
 800135e:	f04f 0200 	mov.w	r2, #0
 8001362:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
	kf.B_data[3] = 1.685;
 8001366:	4b13      	ldr	r3, [pc, #76]	@ (80013b4 <main+0x1a0>)
 8001368:	4a1e      	ldr	r2, [pc, #120]	@ (80013e4 <main+0x1d0>)
 800136a:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc

	// Identity H
	for (int i = 0; i < KALMAN_MEAS_DIM; i++) {
 800136e:	2300      	movs	r3, #0
 8001370:	623b      	str	r3, [r7, #32]
 8001372:	e04d      	b.n	8001410 <main+0x1fc>
	    for (int j = 0; j < KALMAN_STATE_DIM; j++) {
 8001374:	2300      	movs	r3, #0
 8001376:	61fb      	str	r3, [r7, #28]
 8001378:	e044      	b.n	8001404 <main+0x1f0>
	        kf.H_data[i * KALMAN_STATE_DIM + j] = (i == j) ? 1.0f : 0.0f;
 800137a:	6a3a      	ldr	r2, [r7, #32]
 800137c:	69fb      	ldr	r3, [r7, #28]
 800137e:	429a      	cmp	r2, r3
 8001380:	d132      	bne.n	80013e8 <main+0x1d4>
 8001382:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001386:	e031      	b.n	80013ec <main+0x1d8>
 8001388:	200007cc 	.word	0x200007cc
 800138c:	20000634 	.word	0x20000634
 8001390:	20000568 	.word	0x20000568
 8001394:	200009c4 	.word	0x200009c4
 8001398:	2000049c 	.word	0x2000049c
 800139c:	200009e0 	.word	0x200009e0
 80013a0:	2000022c 	.word	0x2000022c
 80013a4:	20000a24 	.word	0x20000a24
 80013a8:	20000898 	.word	0x20000898
 80013ac:	20000700 	.word	0x20000700
 80013b0:	20000efc 	.word	0x20000efc
 80013b4:	20001094 	.word	0x20001094
 80013b8:	3a830bb9 	.word	0x3a830bb9
 80013bc:	b6327146 	.word	0xb6327146
 80013c0:	33ae1e34 	.word	0x33ae1e34
 80013c4:	3f7fe5c9 	.word	0x3f7fe5c9
 80013c8:	bbae429e 	.word	0xbbae429e
 80013cc:	392a143b 	.word	0x392a143b
 80013d0:	c02fbe77 	.word	0xc02fbe77
 80013d4:	3bef4e01 	.word	0x3bef4e01
 80013d8:	3e0aa64c 	.word	0x3e0aa64c
 80013dc:	34012bd0 	.word	0x34012bd0
 80013e0:	397c4992 	.word	0x397c4992
 80013e4:	3fd7ae14 	.word	0x3fd7ae14
 80013e8:	f04f 0200 	mov.w	r2, #0
 80013ec:	6a3b      	ldr	r3, [r7, #32]
 80013ee:	0099      	lsls	r1, r3, #2
 80013f0:	69fb      	ldr	r3, [r7, #28]
 80013f2:	440b      	add	r3, r1
 80013f4:	4964      	ldr	r1, [pc, #400]	@ (8001588 <main+0x374>)
 80013f6:	333c      	adds	r3, #60	@ 0x3c
 80013f8:	009b      	lsls	r3, r3, #2
 80013fa:	440b      	add	r3, r1
 80013fc:	601a      	str	r2, [r3, #0]
	    for (int j = 0; j < KALMAN_STATE_DIM; j++) {
 80013fe:	69fb      	ldr	r3, [r7, #28]
 8001400:	3301      	adds	r3, #1
 8001402:	61fb      	str	r3, [r7, #28]
 8001404:	69fb      	ldr	r3, [r7, #28]
 8001406:	2b03      	cmp	r3, #3
 8001408:	ddb7      	ble.n	800137a <main+0x166>
	for (int i = 0; i < KALMAN_MEAS_DIM; i++) {
 800140a:	6a3b      	ldr	r3, [r7, #32]
 800140c:	3301      	adds	r3, #1
 800140e:	623b      	str	r3, [r7, #32]
 8001410:	6a3b      	ldr	r3, [r7, #32]
 8001412:	2b03      	cmp	r3, #3
 8001414:	ddae      	ble.n	8001374 <main+0x160>
	    }
	}

	// Prismatic
	kf.x_data[0] = 0;
 8001416:	4b5c      	ldr	r3, [pc, #368]	@ (8001588 <main+0x374>)
 8001418:	f04f 0200 	mov.w	r2, #0
 800141c:	f8c3 2234 	str.w	r2, [r3, #564]	@ 0x234
	kf.x_data[1] = 0;
 8001420:	4b59      	ldr	r3, [pc, #356]	@ (8001588 <main+0x374>)
 8001422:	f04f 0200 	mov.w	r2, #0
 8001426:	f8c3 2238 	str.w	r2, [r3, #568]	@ 0x238
	kf.x_data[2] = 0;
 800142a:	4b57      	ldr	r3, [pc, #348]	@ (8001588 <main+0x374>)
 800142c:	f04f 0200 	mov.w	r2, #0
 8001430:	f8c3 223c 	str.w	r2, [r3, #572]	@ 0x23c
	kf.x_data[3] = 0;
 8001434:	4b54      	ldr	r3, [pc, #336]	@ (8001588 <main+0x374>)
 8001436:	f04f 0200 	mov.w	r2, #0
 800143a:	f8c3 2240 	str.w	r2, [r3, #576]	@ 0x240

	Kalman_SetMeasurementNoise(&kf, 0.01f);
 800143e:	ed9f 0a53 	vldr	s0, [pc, #332]	@ 800158c <main+0x378>
 8001442:	4851      	ldr	r0, [pc, #324]	@ (8001588 <main+0x374>)
 8001444:	f7ff fa15 	bl	8000872 <Kalman_SetMeasurementNoise>
	Kalman_SetProcessNoise(&kf, 0.1f);
 8001448:	ed9f 0a51 	vldr	s0, [pc, #324]	@ 8001590 <main+0x37c>
 800144c:	484e      	ldr	r0, [pc, #312]	@ (8001588 <main+0x374>)
 800144e:	f7ff f9e0 	bl	8000812 <Kalman_SetProcessNoise>
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, DIR_18V);
 8001452:	4b50      	ldr	r3, [pc, #320]	@ (8001594 <main+0x380>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	b2db      	uxtb	r3, r3
 8001458:	461a      	mov	r2, r3
 800145a:	2140      	movs	r1, #64	@ 0x40
 800145c:	484e      	ldr	r0, [pc, #312]	@ (8001598 <main+0x384>)
 800145e:	f003 fb45 	bl	8004aec <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 1);
 8001462:	2201      	movs	r2, #1
 8001464:	2102      	movs	r1, #2
 8001466:	484d      	ldr	r0, [pc, #308]	@ (800159c <main+0x388>)
 8001468:	f003 fb40 	bl	8004aec <HAL_GPIO_WritePin>
		//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 1);
		//__HAL_TIM_SET_COMPARE(&htim20,TIM_CHANNEL_1,500);
		__HAL_TIM_SET_COMPARE(&htim20,TIM_CHANNEL_3,status);
 800146c:	4b4c      	ldr	r3, [pc, #304]	@ (80015a0 <main+0x38c>)
 800146e:	881a      	ldrh	r2, [r3, #0]
 8001470:	4b4c      	ldr	r3, [pc, #304]	@ (80015a4 <main+0x390>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	63da      	str	r2, [r3, #60]	@ 0x3c
		HAL_ADC_Start(&hadc1);
 8001476:	484c      	ldr	r0, [pc, #304]	@ (80015a8 <main+0x394>)
 8001478:	f001 fe72 	bl	8003160 <HAL_ADC_Start>
		HAL_ADC_Start(&hadc2);
 800147c:	484b      	ldr	r0, [pc, #300]	@ (80015ac <main+0x398>)
 800147e:	f001 fe6f 	bl	8003160 <HAL_ADC_Start>
		adc_1 = HAL_ADC_GetValue(&hadc1);
 8001482:	4849      	ldr	r0, [pc, #292]	@ (80015a8 <main+0x394>)
 8001484:	f001 ff50 	bl	8003328 <HAL_ADC_GetValue>
 8001488:	4603      	mov	r3, r0
 800148a:	b29a      	uxth	r2, r3
 800148c:	4b48      	ldr	r3, [pc, #288]	@ (80015b0 <main+0x39c>)
 800148e:	801a      	strh	r2, [r3, #0]
		adc_2 = HAL_ADC_GetValue(&hadc2);
 8001490:	4846      	ldr	r0, [pc, #280]	@ (80015ac <main+0x398>)
 8001492:	f001 ff49 	bl	8003328 <HAL_ADC_GetValue>
 8001496:	4603      	mov	r3, r0
 8001498:	b29a      	uxth	r2, r3
 800149a:	4b46      	ldr	r3, [pc, #280]	@ (80015b4 <main+0x3a0>)
 800149c:	801a      	strh	r2, [r3, #0]
		QEIReadRaw3 = __HAL_TIM_GET_COUNTER(&htim3);
 800149e:	4b46      	ldr	r3, [pc, #280]	@ (80015b8 <main+0x3a4>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014a4:	4a45      	ldr	r2, [pc, #276]	@ (80015bc <main+0x3a8>)
 80014a6:	6013      	str	r3, [r2, #0]
		QEIReadRaw4 = __HAL_TIM_GET_COUNTER(&htim4);
 80014a8:	4b45      	ldr	r3, [pc, #276]	@ (80015c0 <main+0x3ac>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014ae:	4a45      	ldr	r2, [pc, #276]	@ (80015c4 <main+0x3b0>)
 80014b0:	6013      	str	r3, [r2, #0]
		Modbus_Protocal_Worker();
 80014b2:	f7ff fc3b 	bl	8000d2c <Modbus_Protocal_Worker>
		//modbus_r_position(&hmodbus,7);
		hmodbus.RegisterAddress[0x00].U16 = 22881;
 80014b6:	4b44      	ldr	r3, [pc, #272]	@ (80015c8 <main+0x3b4>)
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	f645 1261 	movw	r2, #22881	@ 0x5961
 80014be:	801a      	strh	r2, [r3, #0]
//		registerFrame[0x06].U16 = 7;
//		registerFrame[0x07].U16 = 8;
//		registerFrame[0x08].U16 = 9;
		//registerFrame[0x15].U16 = 10;
		//}
		uint32_t currentTick = HAL_GetTick();
 80014c0:	f001 fa7a 	bl	80029b8 <HAL_GetTick>
 80014c4:	61b8      	str	r0, [r7, #24]
		float dt = (currentTick - lastTick) / 1000.0f;
 80014c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014c8:	69ba      	ldr	r2, [r7, #24]
 80014ca:	1ad3      	subs	r3, r2, r3
 80014cc:	ee07 3a90 	vmov	s15, r3
 80014d0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80014d4:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80015cc <main+0x3b8>
 80014d8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014dc:	edc7 7a05 	vstr	s15, [r7, #20]
//		QEIReadRaw = __HAL_TIM_GET_COUNTER(&htim4);
		if (dt >= 0.01f) {
 80014e0:	edd7 7a05 	vldr	s15, [r7, #20]
 80014e4:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 800158c <main+0x378>
 80014e8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014f0:	db3b      	blt.n	800156a <main+0x356>
			Encoder_Update(&encoder1, dt);
 80014f2:	ed97 0a05 	vldr	s0, [r7, #20]
 80014f6:	4836      	ldr	r0, [pc, #216]	@ (80015d0 <main+0x3bc>)
 80014f8:	f7ff f84e 	bl	8000598 <Encoder_Update>
			Encoder_Update(&encoder2, dt);
 80014fc:	ed97 0a05 	vldr	s0, [r7, #20]
 8001500:	4834      	ldr	r0, [pc, #208]	@ (80015d4 <main+0x3c0>)
 8001502:	f7ff f849 	bl	8000598 <Encoder_Update>
			lastTick = currentTick;
 8001506:	69bb      	ldr	r3, [r7, #24]
 8001508:	627b      	str	r3, [r7, #36]	@ 0x24

			p1 = Encoder_GetPosition(&encoder1);
 800150a:	4831      	ldr	r0, [pc, #196]	@ (80015d0 <main+0x3bc>)
 800150c:	f7ff f8b2 	bl	8000674 <Encoder_GetPosition>
 8001510:	eef0 7a40 	vmov.f32	s15, s0
 8001514:	4b30      	ldr	r3, [pc, #192]	@ (80015d8 <main+0x3c4>)
 8001516:	edc3 7a00 	vstr	s15, [r3]
			v1 = Encoder_GetVelocity(&encoder1);
 800151a:	482d      	ldr	r0, [pc, #180]	@ (80015d0 <main+0x3bc>)
 800151c:	f7ff f8b9 	bl	8000692 <Encoder_GetVelocity>
 8001520:	eef0 7a40 	vmov.f32	s15, s0
 8001524:	4b2d      	ldr	r3, [pc, #180]	@ (80015dc <main+0x3c8>)
 8001526:	edc3 7a00 	vstr	s15, [r3]
			a1 = Encoder_GetAcceleration(&encoder1);
 800152a:	4829      	ldr	r0, [pc, #164]	@ (80015d0 <main+0x3bc>)
 800152c:	f7ff f8c0 	bl	80006b0 <Encoder_GetAcceleration>
 8001530:	eef0 7a40 	vmov.f32	s15, s0
 8001534:	4b2a      	ldr	r3, [pc, #168]	@ (80015e0 <main+0x3cc>)
 8001536:	edc3 7a00 	vstr	s15, [r3]

			p2 = Encoder_GetPosition(&encoder2);
 800153a:	4826      	ldr	r0, [pc, #152]	@ (80015d4 <main+0x3c0>)
 800153c:	f7ff f89a 	bl	8000674 <Encoder_GetPosition>
 8001540:	eef0 7a40 	vmov.f32	s15, s0
 8001544:	4b27      	ldr	r3, [pc, #156]	@ (80015e4 <main+0x3d0>)
 8001546:	edc3 7a00 	vstr	s15, [r3]
			v2 = Encoder_GetVelocity(&encoder2);
 800154a:	4822      	ldr	r0, [pc, #136]	@ (80015d4 <main+0x3c0>)
 800154c:	f7ff f8a1 	bl	8000692 <Encoder_GetVelocity>
 8001550:	eef0 7a40 	vmov.f32	s15, s0
 8001554:	4b24      	ldr	r3, [pc, #144]	@ (80015e8 <main+0x3d4>)
 8001556:	edc3 7a00 	vstr	s15, [r3]
			a2 = Encoder_GetAcceleration(&encoder2);
 800155a:	481e      	ldr	r0, [pc, #120]	@ (80015d4 <main+0x3c0>)
 800155c:	f7ff f8a8 	bl	80006b0 <Encoder_GetAcceleration>
 8001560:	eef0 7a40 	vmov.f32	s15, s0
 8001564:	4b21      	ldr	r3, [pc, #132]	@ (80015ec <main+0x3d8>)
 8001566:	edc3 7a00 	vstr	s15, [r3]
//			if (current_segment < MAX_SEGMENTS - 1) {
//				current_segment++;
//			}
//		}

		float measurement[4] = {1.0f, 0.2f, 0.5f, 0.1f};
 800156a:	4b21      	ldr	r3, [pc, #132]	@ (80015f0 <main+0x3dc>)
 800156c:	1d3c      	adds	r4, r7, #4
 800156e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001570:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		Kalman_Predict(&kf);
 8001574:	4804      	ldr	r0, [pc, #16]	@ (8001588 <main+0x374>)
 8001576:	f7ff f9ac 	bl	80008d2 <Kalman_Predict>
		Kalman_Update(&kf, measurement);
 800157a:	1d3b      	adds	r3, r7, #4
 800157c:	4619      	mov	r1, r3
 800157e:	4802      	ldr	r0, [pc, #8]	@ (8001588 <main+0x374>)
 8001580:	f7ff f9f4 	bl	800096c <Kalman_Update>
	while (1) {
 8001584:	e765      	b.n	8001452 <main+0x23e>
 8001586:	bf00      	nop
 8001588:	20001094 	.word	0x20001094
 800158c:	3c23d70a 	.word	0x3c23d70a
 8001590:	3dcccccd 	.word	0x3dcccccd
 8001594:	20001090 	.word	0x20001090
 8001598:	48000800 	.word	0x48000800
 800159c:	48000400 	.word	0x48000400
 80015a0:	2000108c 	.word	0x2000108c
 80015a4:	200007cc 	.word	0x200007cc
 80015a8:	2000022c 	.word	0x2000022c
 80015ac:	20000298 	.word	0x20000298
 80015b0:	20000a20 	.word	0x20000a20
 80015b4:	20000a22 	.word	0x20000a22
 80015b8:	2000049c 	.word	0x2000049c
 80015bc:	200009fc 	.word	0x200009fc
 80015c0:	20000568 	.word	0x20000568
 80015c4:	20000a00 	.word	0x20000a00
 80015c8:	20000a24 	.word	0x20000a24
 80015cc:	447a0000 	.word	0x447a0000
 80015d0:	200009c4 	.word	0x200009c4
 80015d4:	200009e0 	.word	0x200009e0
 80015d8:	20000a04 	.word	0x20000a04
 80015dc:	20000a08 	.word	0x20000a08
 80015e0:	20000a0c 	.word	0x20000a0c
 80015e4:	20000a10 	.word	0x20000a10
 80015e8:	20000a14 	.word	0x20000a14
 80015ec:	20000a18 	.word	0x20000a18
 80015f0:	0800b22c 	.word	0x0800b22c

080015f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b094      	sub	sp, #80	@ 0x50
 80015f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015fa:	f107 0318 	add.w	r3, r7, #24
 80015fe:	2238      	movs	r2, #56	@ 0x38
 8001600:	2100      	movs	r1, #0
 8001602:	4618      	mov	r0, r3
 8001604:	f009 fdcc 	bl	800b1a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001608:	1d3b      	adds	r3, r7, #4
 800160a:	2200      	movs	r2, #0
 800160c:	601a      	str	r2, [r3, #0]
 800160e:	605a      	str	r2, [r3, #4]
 8001610:	609a      	str	r2, [r3, #8]
 8001612:	60da      	str	r2, [r3, #12]
 8001614:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001616:	2000      	movs	r0, #0
 8001618:	f003 fa98 	bl	8004b4c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800161c:	2302      	movs	r3, #2
 800161e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001620:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001624:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001626:	2340      	movs	r3, #64	@ 0x40
 8001628:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800162a:	2302      	movs	r3, #2
 800162c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800162e:	2302      	movs	r3, #2
 8001630:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001632:	2304      	movs	r3, #4
 8001634:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001636:	2355      	movs	r3, #85	@ 0x55
 8001638:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800163a:	2302      	movs	r3, #2
 800163c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800163e:	2302      	movs	r3, #2
 8001640:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001642:	2302      	movs	r3, #2
 8001644:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001646:	f107 0318 	add.w	r3, r7, #24
 800164a:	4618      	mov	r0, r3
 800164c:	f003 fb32 	bl	8004cb4 <HAL_RCC_OscConfig>
 8001650:	4603      	mov	r3, r0
 8001652:	2b00      	cmp	r3, #0
 8001654:	d001      	beq.n	800165a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001656:	f000 fdc1 	bl	80021dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800165a:	230f      	movs	r3, #15
 800165c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800165e:	2303      	movs	r3, #3
 8001660:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001662:	2300      	movs	r3, #0
 8001664:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001666:	2300      	movs	r3, #0
 8001668:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800166a:	2300      	movs	r3, #0
 800166c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800166e:	1d3b      	adds	r3, r7, #4
 8001670:	2104      	movs	r1, #4
 8001672:	4618      	mov	r0, r3
 8001674:	f003 fe30 	bl	80052d8 <HAL_RCC_ClockConfig>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d001      	beq.n	8001682 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800167e:	f000 fdad 	bl	80021dc <Error_Handler>
  }
}
 8001682:	bf00      	nop
 8001684:	3750      	adds	r7, #80	@ 0x50
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}
	...

0800168c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b08c      	sub	sp, #48	@ 0x30
 8001690:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001692:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001696:	2200      	movs	r2, #0
 8001698:	601a      	str	r2, [r3, #0]
 800169a:	605a      	str	r2, [r3, #4]
 800169c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800169e:	1d3b      	adds	r3, r7, #4
 80016a0:	2220      	movs	r2, #32
 80016a2:	2100      	movs	r1, #0
 80016a4:	4618      	mov	r0, r3
 80016a6:	f009 fd7b 	bl	800b1a0 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80016aa:	4b32      	ldr	r3, [pc, #200]	@ (8001774 <MX_ADC1_Init+0xe8>)
 80016ac:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80016b0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80016b2:	4b30      	ldr	r3, [pc, #192]	@ (8001774 <MX_ADC1_Init+0xe8>)
 80016b4:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80016b8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80016ba:	4b2e      	ldr	r3, [pc, #184]	@ (8001774 <MX_ADC1_Init+0xe8>)
 80016bc:	2200      	movs	r2, #0
 80016be:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80016c0:	4b2c      	ldr	r3, [pc, #176]	@ (8001774 <MX_ADC1_Init+0xe8>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80016c6:	4b2b      	ldr	r3, [pc, #172]	@ (8001774 <MX_ADC1_Init+0xe8>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80016cc:	4b29      	ldr	r3, [pc, #164]	@ (8001774 <MX_ADC1_Init+0xe8>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80016d2:	4b28      	ldr	r3, [pc, #160]	@ (8001774 <MX_ADC1_Init+0xe8>)
 80016d4:	2204      	movs	r2, #4
 80016d6:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80016d8:	4b26      	ldr	r3, [pc, #152]	@ (8001774 <MX_ADC1_Init+0xe8>)
 80016da:	2200      	movs	r2, #0
 80016dc:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80016de:	4b25      	ldr	r3, [pc, #148]	@ (8001774 <MX_ADC1_Init+0xe8>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 80016e4:	4b23      	ldr	r3, [pc, #140]	@ (8001774 <MX_ADC1_Init+0xe8>)
 80016e6:	2201      	movs	r2, #1
 80016e8:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80016ea:	4b22      	ldr	r3, [pc, #136]	@ (8001774 <MX_ADC1_Init+0xe8>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80016f2:	4b20      	ldr	r3, [pc, #128]	@ (8001774 <MX_ADC1_Init+0xe8>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80016f8:	4b1e      	ldr	r3, [pc, #120]	@ (8001774 <MX_ADC1_Init+0xe8>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80016fe:	4b1d      	ldr	r3, [pc, #116]	@ (8001774 <MX_ADC1_Init+0xe8>)
 8001700:	2200      	movs	r2, #0
 8001702:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001706:	4b1b      	ldr	r3, [pc, #108]	@ (8001774 <MX_ADC1_Init+0xe8>)
 8001708:	2200      	movs	r2, #0
 800170a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 800170c:	4b19      	ldr	r3, [pc, #100]	@ (8001774 <MX_ADC1_Init+0xe8>)
 800170e:	2200      	movs	r2, #0
 8001710:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001714:	4817      	ldr	r0, [pc, #92]	@ (8001774 <MX_ADC1_Init+0xe8>)
 8001716:	f001 fb67 	bl	8002de8 <HAL_ADC_Init>
 800171a:	4603      	mov	r3, r0
 800171c:	2b00      	cmp	r3, #0
 800171e:	d001      	beq.n	8001724 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8001720:	f000 fd5c 	bl	80021dc <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001724:	2300      	movs	r3, #0
 8001726:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001728:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800172c:	4619      	mov	r1, r3
 800172e:	4811      	ldr	r0, [pc, #68]	@ (8001774 <MX_ADC1_Init+0xe8>)
 8001730:	f002 fb04 	bl	8003d3c <HAL_ADCEx_MultiModeConfigChannel>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d001      	beq.n	800173e <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800173a:	f000 fd4f 	bl	80021dc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800173e:	4b0e      	ldr	r3, [pc, #56]	@ (8001778 <MX_ADC1_Init+0xec>)
 8001740:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001742:	2306      	movs	r3, #6
 8001744:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001746:	2300      	movs	r3, #0
 8001748:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800174a:	237f      	movs	r3, #127	@ 0x7f
 800174c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800174e:	2304      	movs	r3, #4
 8001750:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001752:	2300      	movs	r3, #0
 8001754:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001756:	1d3b      	adds	r3, r7, #4
 8001758:	4619      	mov	r1, r3
 800175a:	4806      	ldr	r0, [pc, #24]	@ (8001774 <MX_ADC1_Init+0xe8>)
 800175c:	f001 fdf2 	bl	8003344 <HAL_ADC_ConfigChannel>
 8001760:	4603      	mov	r3, r0
 8001762:	2b00      	cmp	r3, #0
 8001764:	d001      	beq.n	800176a <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8001766:	f000 fd39 	bl	80021dc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800176a:	bf00      	nop
 800176c:	3730      	adds	r7, #48	@ 0x30
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	2000022c 	.word	0x2000022c
 8001778:	04300002 	.word	0x04300002

0800177c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b088      	sub	sp, #32
 8001780:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001782:	463b      	mov	r3, r7
 8001784:	2220      	movs	r2, #32
 8001786:	2100      	movs	r1, #0
 8001788:	4618      	mov	r0, r3
 800178a:	f009 fd09 	bl	800b1a0 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800178e:	4b2b      	ldr	r3, [pc, #172]	@ (800183c <MX_ADC2_Init+0xc0>)
 8001790:	4a2b      	ldr	r2, [pc, #172]	@ (8001840 <MX_ADC2_Init+0xc4>)
 8001792:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001794:	4b29      	ldr	r3, [pc, #164]	@ (800183c <MX_ADC2_Init+0xc0>)
 8001796:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800179a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800179c:	4b27      	ldr	r3, [pc, #156]	@ (800183c <MX_ADC2_Init+0xc0>)
 800179e:	2200      	movs	r2, #0
 80017a0:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80017a2:	4b26      	ldr	r3, [pc, #152]	@ (800183c <MX_ADC2_Init+0xc0>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 80017a8:	4b24      	ldr	r3, [pc, #144]	@ (800183c <MX_ADC2_Init+0xc0>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80017ae:	4b23      	ldr	r3, [pc, #140]	@ (800183c <MX_ADC2_Init+0xc0>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80017b4:	4b21      	ldr	r3, [pc, #132]	@ (800183c <MX_ADC2_Init+0xc0>)
 80017b6:	2204      	movs	r2, #4
 80017b8:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80017ba:	4b20      	ldr	r3, [pc, #128]	@ (800183c <MX_ADC2_Init+0xc0>)
 80017bc:	2200      	movs	r2, #0
 80017be:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80017c0:	4b1e      	ldr	r3, [pc, #120]	@ (800183c <MX_ADC2_Init+0xc0>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 80017c6:	4b1d      	ldr	r3, [pc, #116]	@ (800183c <MX_ADC2_Init+0xc0>)
 80017c8:	2201      	movs	r2, #1
 80017ca:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80017cc:	4b1b      	ldr	r3, [pc, #108]	@ (800183c <MX_ADC2_Init+0xc0>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80017d4:	4b19      	ldr	r3, [pc, #100]	@ (800183c <MX_ADC2_Init+0xc0>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80017da:	4b18      	ldr	r3, [pc, #96]	@ (800183c <MX_ADC2_Init+0xc0>)
 80017dc:	2200      	movs	r2, #0
 80017de:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80017e0:	4b16      	ldr	r3, [pc, #88]	@ (800183c <MX_ADC2_Init+0xc0>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80017e8:	4b14      	ldr	r3, [pc, #80]	@ (800183c <MX_ADC2_Init+0xc0>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 80017ee:	4b13      	ldr	r3, [pc, #76]	@ (800183c <MX_ADC2_Init+0xc0>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80017f6:	4811      	ldr	r0, [pc, #68]	@ (800183c <MX_ADC2_Init+0xc0>)
 80017f8:	f001 faf6 	bl	8002de8 <HAL_ADC_Init>
 80017fc:	4603      	mov	r3, r0
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d001      	beq.n	8001806 <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 8001802:	f000 fceb 	bl	80021dc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001806:	4b0f      	ldr	r3, [pc, #60]	@ (8001844 <MX_ADC2_Init+0xc8>)
 8001808:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800180a:	2306      	movs	r3, #6
 800180c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800180e:	2300      	movs	r3, #0
 8001810:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001812:	237f      	movs	r3, #127	@ 0x7f
 8001814:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001816:	2304      	movs	r3, #4
 8001818:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800181a:	2300      	movs	r3, #0
 800181c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800181e:	463b      	mov	r3, r7
 8001820:	4619      	mov	r1, r3
 8001822:	4806      	ldr	r0, [pc, #24]	@ (800183c <MX_ADC2_Init+0xc0>)
 8001824:	f001 fd8e 	bl	8003344 <HAL_ADC_ConfigChannel>
 8001828:	4603      	mov	r3, r0
 800182a:	2b00      	cmp	r3, #0
 800182c:	d001      	beq.n	8001832 <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 800182e:	f000 fcd5 	bl	80021dc <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001832:	bf00      	nop
 8001834:	3720      	adds	r7, #32
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	20000298 	.word	0x20000298
 8001840:	50000100 	.word	0x50000100
 8001844:	08600004 	.word	0x08600004

08001848 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b088      	sub	sp, #32
 800184c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800184e:	f107 0310 	add.w	r3, r7, #16
 8001852:	2200      	movs	r2, #0
 8001854:	601a      	str	r2, [r3, #0]
 8001856:	605a      	str	r2, [r3, #4]
 8001858:	609a      	str	r2, [r3, #8]
 800185a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800185c:	1d3b      	adds	r3, r7, #4
 800185e:	2200      	movs	r2, #0
 8001860:	601a      	str	r2, [r3, #0]
 8001862:	605a      	str	r2, [r3, #4]
 8001864:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001866:	4b20      	ldr	r3, [pc, #128]	@ (80018e8 <MX_TIM1_Init+0xa0>)
 8001868:	4a20      	ldr	r2, [pc, #128]	@ (80018ec <MX_TIM1_Init+0xa4>)
 800186a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800186c:	4b1e      	ldr	r3, [pc, #120]	@ (80018e8 <MX_TIM1_Init+0xa0>)
 800186e:	2200      	movs	r2, #0
 8001870:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001872:	4b1d      	ldr	r3, [pc, #116]	@ (80018e8 <MX_TIM1_Init+0xa0>)
 8001874:	2200      	movs	r2, #0
 8001876:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 60000;
 8001878:	4b1b      	ldr	r3, [pc, #108]	@ (80018e8 <MX_TIM1_Init+0xa0>)
 800187a:	f64e 2260 	movw	r2, #60000	@ 0xea60
 800187e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001880:	4b19      	ldr	r3, [pc, #100]	@ (80018e8 <MX_TIM1_Init+0xa0>)
 8001882:	2200      	movs	r2, #0
 8001884:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001886:	4b18      	ldr	r3, [pc, #96]	@ (80018e8 <MX_TIM1_Init+0xa0>)
 8001888:	2200      	movs	r2, #0
 800188a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800188c:	4b16      	ldr	r3, [pc, #88]	@ (80018e8 <MX_TIM1_Init+0xa0>)
 800188e:	2200      	movs	r2, #0
 8001890:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001892:	4815      	ldr	r0, [pc, #84]	@ (80018e8 <MX_TIM1_Init+0xa0>)
 8001894:	f004 f98a 	bl	8005bac <HAL_TIM_Base_Init>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d001      	beq.n	80018a2 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800189e:	f000 fc9d 	bl	80021dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018a2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80018a6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80018a8:	f107 0310 	add.w	r3, r7, #16
 80018ac:	4619      	mov	r1, r3
 80018ae:	480e      	ldr	r0, [pc, #56]	@ (80018e8 <MX_TIM1_Init+0xa0>)
 80018b0:	f005 f9f6 	bl	8006ca0 <HAL_TIM_ConfigClockSource>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d001      	beq.n	80018be <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80018ba:	f000 fc8f 	bl	80021dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018be:	2300      	movs	r3, #0
 80018c0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80018c2:	2300      	movs	r3, #0
 80018c4:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018c6:	2300      	movs	r3, #0
 80018c8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80018ca:	1d3b      	adds	r3, r7, #4
 80018cc:	4619      	mov	r1, r3
 80018ce:	4806      	ldr	r0, [pc, #24]	@ (80018e8 <MX_TIM1_Init+0xa0>)
 80018d0:	f006 f9d6 	bl	8007c80 <HAL_TIMEx_MasterConfigSynchronization>
 80018d4:	4603      	mov	r3, r0
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d001      	beq.n	80018de <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80018da:	f000 fc7f 	bl	80021dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80018de:	bf00      	nop
 80018e0:	3720      	adds	r7, #32
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	20000304 	.word	0x20000304
 80018ec:	40012c00 	.word	0x40012c00

080018f0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b088      	sub	sp, #32
 80018f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018f6:	f107 0310 	add.w	r3, r7, #16
 80018fa:	2200      	movs	r2, #0
 80018fc:	601a      	str	r2, [r3, #0]
 80018fe:	605a      	str	r2, [r3, #4]
 8001900:	609a      	str	r2, [r3, #8]
 8001902:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001904:	1d3b      	adds	r3, r7, #4
 8001906:	2200      	movs	r2, #0
 8001908:	601a      	str	r2, [r3, #0]
 800190a:	605a      	str	r2, [r3, #4]
 800190c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800190e:	4b1e      	ldr	r3, [pc, #120]	@ (8001988 <MX_TIM2_Init+0x98>)
 8001910:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001914:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001916:	4b1c      	ldr	r3, [pc, #112]	@ (8001988 <MX_TIM2_Init+0x98>)
 8001918:	2200      	movs	r2, #0
 800191a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800191c:	4b1a      	ldr	r3, [pc, #104]	@ (8001988 <MX_TIM2_Init+0x98>)
 800191e:	2200      	movs	r2, #0
 8001920:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001922:	4b19      	ldr	r3, [pc, #100]	@ (8001988 <MX_TIM2_Init+0x98>)
 8001924:	f04f 32ff 	mov.w	r2, #4294967295
 8001928:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800192a:	4b17      	ldr	r3, [pc, #92]	@ (8001988 <MX_TIM2_Init+0x98>)
 800192c:	2200      	movs	r2, #0
 800192e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001930:	4b15      	ldr	r3, [pc, #84]	@ (8001988 <MX_TIM2_Init+0x98>)
 8001932:	2200      	movs	r2, #0
 8001934:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001936:	4814      	ldr	r0, [pc, #80]	@ (8001988 <MX_TIM2_Init+0x98>)
 8001938:	f004 f938 	bl	8005bac <HAL_TIM_Base_Init>
 800193c:	4603      	mov	r3, r0
 800193e:	2b00      	cmp	r3, #0
 8001940:	d001      	beq.n	8001946 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001942:	f000 fc4b 	bl	80021dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001946:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800194a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800194c:	f107 0310 	add.w	r3, r7, #16
 8001950:	4619      	mov	r1, r3
 8001952:	480d      	ldr	r0, [pc, #52]	@ (8001988 <MX_TIM2_Init+0x98>)
 8001954:	f005 f9a4 	bl	8006ca0 <HAL_TIM_ConfigClockSource>
 8001958:	4603      	mov	r3, r0
 800195a:	2b00      	cmp	r3, #0
 800195c:	d001      	beq.n	8001962 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800195e:	f000 fc3d 	bl	80021dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001962:	2300      	movs	r3, #0
 8001964:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001966:	2300      	movs	r3, #0
 8001968:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800196a:	1d3b      	adds	r3, r7, #4
 800196c:	4619      	mov	r1, r3
 800196e:	4806      	ldr	r0, [pc, #24]	@ (8001988 <MX_TIM2_Init+0x98>)
 8001970:	f006 f986 	bl	8007c80 <HAL_TIMEx_MasterConfigSynchronization>
 8001974:	4603      	mov	r3, r0
 8001976:	2b00      	cmp	r3, #0
 8001978:	d001      	beq.n	800197e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800197a:	f000 fc2f 	bl	80021dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800197e:	bf00      	nop
 8001980:	3720      	adds	r7, #32
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	200003d0 	.word	0x200003d0

0800198c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b08c      	sub	sp, #48	@ 0x30
 8001990:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001992:	f107 030c 	add.w	r3, r7, #12
 8001996:	2224      	movs	r2, #36	@ 0x24
 8001998:	2100      	movs	r1, #0
 800199a:	4618      	mov	r0, r3
 800199c:	f009 fc00 	bl	800b1a0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019a0:	463b      	mov	r3, r7
 80019a2:	2200      	movs	r2, #0
 80019a4:	601a      	str	r2, [r3, #0]
 80019a6:	605a      	str	r2, [r3, #4]
 80019a8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80019aa:	4b21      	ldr	r3, [pc, #132]	@ (8001a30 <MX_TIM3_Init+0xa4>)
 80019ac:	4a21      	ldr	r2, [pc, #132]	@ (8001a34 <MX_TIM3_Init+0xa8>)
 80019ae:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80019b0:	4b1f      	ldr	r3, [pc, #124]	@ (8001a30 <MX_TIM3_Init+0xa4>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019b6:	4b1e      	ldr	r3, [pc, #120]	@ (8001a30 <MX_TIM3_Init+0xa4>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 59999;
 80019bc:	4b1c      	ldr	r3, [pc, #112]	@ (8001a30 <MX_TIM3_Init+0xa4>)
 80019be:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 80019c2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019c4:	4b1a      	ldr	r3, [pc, #104]	@ (8001a30 <MX_TIM3_Init+0xa4>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019ca:	4b19      	ldr	r3, [pc, #100]	@ (8001a30 <MX_TIM3_Init+0xa4>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80019d0:	2303      	movs	r3, #3
 80019d2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80019d4:	2300      	movs	r3, #0
 80019d6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80019d8:	2301      	movs	r3, #1
 80019da:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80019dc:	2300      	movs	r3, #0
 80019de:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80019e0:	2300      	movs	r3, #0
 80019e2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80019e4:	2300      	movs	r3, #0
 80019e6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80019e8:	2301      	movs	r3, #1
 80019ea:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80019ec:	2300      	movs	r3, #0
 80019ee:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80019f0:	2300      	movs	r3, #0
 80019f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80019f4:	f107 030c 	add.w	r3, r7, #12
 80019f8:	4619      	mov	r1, r3
 80019fa:	480d      	ldr	r0, [pc, #52]	@ (8001a30 <MX_TIM3_Init+0xa4>)
 80019fc:	f004 fd06 	bl	800640c <HAL_TIM_Encoder_Init>
 8001a00:	4603      	mov	r3, r0
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d001      	beq.n	8001a0a <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8001a06:	f000 fbe9 	bl	80021dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001a12:	463b      	mov	r3, r7
 8001a14:	4619      	mov	r1, r3
 8001a16:	4806      	ldr	r0, [pc, #24]	@ (8001a30 <MX_TIM3_Init+0xa4>)
 8001a18:	f006 f932 	bl	8007c80 <HAL_TIMEx_MasterConfigSynchronization>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d001      	beq.n	8001a26 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8001a22:	f000 fbdb 	bl	80021dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001a26:	bf00      	nop
 8001a28:	3730      	adds	r7, #48	@ 0x30
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	2000049c 	.word	0x2000049c
 8001a34:	40000400 	.word	0x40000400

08001a38 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b08c      	sub	sp, #48	@ 0x30
 8001a3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001a3e:	f107 030c 	add.w	r3, r7, #12
 8001a42:	2224      	movs	r2, #36	@ 0x24
 8001a44:	2100      	movs	r1, #0
 8001a46:	4618      	mov	r0, r3
 8001a48:	f009 fbaa 	bl	800b1a0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a4c:	463b      	mov	r3, r7
 8001a4e:	2200      	movs	r2, #0
 8001a50:	601a      	str	r2, [r3, #0]
 8001a52:	605a      	str	r2, [r3, #4]
 8001a54:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001a56:	4b21      	ldr	r3, [pc, #132]	@ (8001adc <MX_TIM4_Init+0xa4>)
 8001a58:	4a21      	ldr	r2, [pc, #132]	@ (8001ae0 <MX_TIM4_Init+0xa8>)
 8001a5a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001a5c:	4b1f      	ldr	r3, [pc, #124]	@ (8001adc <MX_TIM4_Init+0xa4>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a62:	4b1e      	ldr	r3, [pc, #120]	@ (8001adc <MX_TIM4_Init+0xa4>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 59999;
 8001a68:	4b1c      	ldr	r3, [pc, #112]	@ (8001adc <MX_TIM4_Init+0xa4>)
 8001a6a:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 8001a6e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a70:	4b1a      	ldr	r3, [pc, #104]	@ (8001adc <MX_TIM4_Init+0xa4>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a76:	4b19      	ldr	r3, [pc, #100]	@ (8001adc <MX_TIM4_Init+0xa4>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001a7c:	2303      	movs	r3, #3
 8001a7e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001a80:	2300      	movs	r3, #0
 8001a82:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001a84:	2301      	movs	r3, #1
 8001a86:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001a90:	2300      	movs	r3, #0
 8001a92:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001a94:	2301      	movs	r3, #1
 8001a96:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001aa0:	f107 030c 	add.w	r3, r7, #12
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	480d      	ldr	r0, [pc, #52]	@ (8001adc <MX_TIM4_Init+0xa4>)
 8001aa8:	f004 fcb0 	bl	800640c <HAL_TIM_Encoder_Init>
 8001aac:	4603      	mov	r3, r0
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d001      	beq.n	8001ab6 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8001ab2:	f000 fb93 	bl	80021dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001aba:	2300      	movs	r3, #0
 8001abc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001abe:	463b      	mov	r3, r7
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	4806      	ldr	r0, [pc, #24]	@ (8001adc <MX_TIM4_Init+0xa4>)
 8001ac4:	f006 f8dc 	bl	8007c80 <HAL_TIMEx_MasterConfigSynchronization>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d001      	beq.n	8001ad2 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8001ace:	f000 fb85 	bl	80021dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001ad2:	bf00      	nop
 8001ad4:	3730      	adds	r7, #48	@ 0x30
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	20000568 	.word	0x20000568
 8001ae0:	40000800 	.word	0x40000800

08001ae4 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b09c      	sub	sp, #112	@ 0x70
 8001ae8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001aea:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001aee:	2200      	movs	r2, #0
 8001af0:	601a      	str	r2, [r3, #0]
 8001af2:	605a      	str	r2, [r3, #4]
 8001af4:	609a      	str	r2, [r3, #8]
 8001af6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001af8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001afc:	2200      	movs	r2, #0
 8001afe:	601a      	str	r2, [r3, #0]
 8001b00:	605a      	str	r2, [r3, #4]
 8001b02:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b04:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001b08:	2200      	movs	r2, #0
 8001b0a:	601a      	str	r2, [r3, #0]
 8001b0c:	605a      	str	r2, [r3, #4]
 8001b0e:	609a      	str	r2, [r3, #8]
 8001b10:	60da      	str	r2, [r3, #12]
 8001b12:	611a      	str	r2, [r3, #16]
 8001b14:	615a      	str	r2, [r3, #20]
 8001b16:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001b18:	1d3b      	adds	r3, r7, #4
 8001b1a:	2234      	movs	r2, #52	@ 0x34
 8001b1c:	2100      	movs	r1, #0
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f009 fb3e 	bl	800b1a0 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001b24:	4b45      	ldr	r3, [pc, #276]	@ (8001c3c <MX_TIM8_Init+0x158>)
 8001b26:	4a46      	ldr	r2, [pc, #280]	@ (8001c40 <MX_TIM8_Init+0x15c>)
 8001b28:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001b2a:	4b44      	ldr	r3, [pc, #272]	@ (8001c3c <MX_TIM8_Init+0x158>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b30:	4b42      	ldr	r3, [pc, #264]	@ (8001c3c <MX_TIM8_Init+0x158>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001b36:	4b41      	ldr	r3, [pc, #260]	@ (8001c3c <MX_TIM8_Init+0x158>)
 8001b38:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001b3c:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b3e:	4b3f      	ldr	r3, [pc, #252]	@ (8001c3c <MX_TIM8_Init+0x158>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001b44:	4b3d      	ldr	r3, [pc, #244]	@ (8001c3c <MX_TIM8_Init+0x158>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b4a:	4b3c      	ldr	r3, [pc, #240]	@ (8001c3c <MX_TIM8_Init+0x158>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001b50:	483a      	ldr	r0, [pc, #232]	@ (8001c3c <MX_TIM8_Init+0x158>)
 8001b52:	f004 f82b 	bl	8005bac <HAL_TIM_Base_Init>
 8001b56:	4603      	mov	r3, r0
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d001      	beq.n	8001b60 <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 8001b5c:	f000 fb3e 	bl	80021dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b60:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b64:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001b66:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001b6a:	4619      	mov	r1, r3
 8001b6c:	4833      	ldr	r0, [pc, #204]	@ (8001c3c <MX_TIM8_Init+0x158>)
 8001b6e:	f005 f897 	bl	8006ca0 <HAL_TIM_ConfigClockSource>
 8001b72:	4603      	mov	r3, r0
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d001      	beq.n	8001b7c <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 8001b78:	f000 fb30 	bl	80021dc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001b7c:	482f      	ldr	r0, [pc, #188]	@ (8001c3c <MX_TIM8_Init+0x158>)
 8001b7e:	f004 f9cf 	bl	8005f20 <HAL_TIM_PWM_Init>
 8001b82:	4603      	mov	r3, r0
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d001      	beq.n	8001b8c <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 8001b88:	f000 fb28 	bl	80021dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001b90:	2300      	movs	r3, #0
 8001b92:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b94:	2300      	movs	r3, #0
 8001b96:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001b98:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001b9c:	4619      	mov	r1, r3
 8001b9e:	4827      	ldr	r0, [pc, #156]	@ (8001c3c <MX_TIM8_Init+0x158>)
 8001ba0:	f006 f86e 	bl	8007c80 <HAL_TIMEx_MasterConfigSynchronization>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d001      	beq.n	8001bae <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 8001baa:	f000 fb17 	bl	80021dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001bae:	2360      	movs	r3, #96	@ 0x60
 8001bb0:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001bca:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001bce:	220c      	movs	r2, #12
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	481a      	ldr	r0, [pc, #104]	@ (8001c3c <MX_TIM8_Init+0x158>)
 8001bd4:	f004 ff50 	bl	8006a78 <HAL_TIM_PWM_ConfigChannel>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d001      	beq.n	8001be2 <MX_TIM8_Init+0xfe>
  {
    Error_Handler();
 8001bde:	f000 fafd 	bl	80021dc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001be2:	2300      	movs	r3, #0
 8001be4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001be6:	2300      	movs	r3, #0
 8001be8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001bea:	2300      	movs	r3, #0
 8001bec:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001bf6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001bfa:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001c00:	2300      	movs	r3, #0
 8001c02:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001c04:	2300      	movs	r3, #0
 8001c06:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001c08:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001c0c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001c12:	2300      	movs	r3, #0
 8001c14:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001c16:	2300      	movs	r3, #0
 8001c18:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001c1a:	1d3b      	adds	r3, r7, #4
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	4807      	ldr	r0, [pc, #28]	@ (8001c3c <MX_TIM8_Init+0x158>)
 8001c20:	f006 f8c4 	bl	8007dac <HAL_TIMEx_ConfigBreakDeadTime>
 8001c24:	4603      	mov	r3, r0
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d001      	beq.n	8001c2e <MX_TIM8_Init+0x14a>
  {
    Error_Handler();
 8001c2a:	f000 fad7 	bl	80021dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001c2e:	4803      	ldr	r0, [pc, #12]	@ (8001c3c <MX_TIM8_Init+0x158>)
 8001c30:	f000 fc9a 	bl	8002568 <HAL_TIM_MspPostInit>

}
 8001c34:	bf00      	nop
 8001c36:	3770      	adds	r7, #112	@ 0x70
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}
 8001c3c:	20000634 	.word	0x20000634
 8001c40:	40013400 	.word	0x40013400

08001c44 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b094      	sub	sp, #80	@ 0x50
 8001c48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c4a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001c4e:	2200      	movs	r2, #0
 8001c50:	601a      	str	r2, [r3, #0]
 8001c52:	605a      	str	r2, [r3, #4]
 8001c54:	609a      	str	r2, [r3, #8]
 8001c56:	60da      	str	r2, [r3, #12]
 8001c58:	611a      	str	r2, [r3, #16]
 8001c5a:	615a      	str	r2, [r3, #20]
 8001c5c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001c5e:	463b      	mov	r3, r7
 8001c60:	2234      	movs	r2, #52	@ 0x34
 8001c62:	2100      	movs	r1, #0
 8001c64:	4618      	mov	r0, r3
 8001c66:	f009 fa9b 	bl	800b1a0 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001c6a:	4b34      	ldr	r3, [pc, #208]	@ (8001d3c <MX_TIM16_Init+0xf8>)
 8001c6c:	4a34      	ldr	r2, [pc, #208]	@ (8001d40 <MX_TIM16_Init+0xfc>)
 8001c6e:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 169;
 8001c70:	4b32      	ldr	r3, [pc, #200]	@ (8001d3c <MX_TIM16_Init+0xf8>)
 8001c72:	22a9      	movs	r2, #169	@ 0xa9
 8001c74:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c76:	4b31      	ldr	r3, [pc, #196]	@ (8001d3c <MX_TIM16_Init+0xf8>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 2005;
 8001c7c:	4b2f      	ldr	r3, [pc, #188]	@ (8001d3c <MX_TIM16_Init+0xf8>)
 8001c7e:	f240 72d5 	movw	r2, #2005	@ 0x7d5
 8001c82:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c84:	4b2d      	ldr	r3, [pc, #180]	@ (8001d3c <MX_TIM16_Init+0xf8>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001c8a:	4b2c      	ldr	r3, [pc, #176]	@ (8001d3c <MX_TIM16_Init+0xf8>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c90:	4b2a      	ldr	r3, [pc, #168]	@ (8001d3c <MX_TIM16_Init+0xf8>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001c96:	4829      	ldr	r0, [pc, #164]	@ (8001d3c <MX_TIM16_Init+0xf8>)
 8001c98:	f003 ff88 	bl	8005bac <HAL_TIM_Base_Init>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d001      	beq.n	8001ca6 <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 8001ca2:	f000 fa9b 	bl	80021dc <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim16) != HAL_OK)
 8001ca6:	4825      	ldr	r0, [pc, #148]	@ (8001d3c <MX_TIM16_Init+0xf8>)
 8001ca8:	f004 f8cc 	bl	8005e44 <HAL_TIM_OC_Init>
 8001cac:	4603      	mov	r3, r0
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d001      	beq.n	8001cb6 <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 8001cb2:	f000 fa93 	bl	80021dc <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim16, TIM_OPMODE_SINGLE) != HAL_OK)
 8001cb6:	2108      	movs	r1, #8
 8001cb8:	4820      	ldr	r0, [pc, #128]	@ (8001d3c <MX_TIM16_Init+0xf8>)
 8001cba:	f004 fab1 	bl	8006220 <HAL_TIM_OnePulse_Init>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d001      	beq.n	8001cc8 <MX_TIM16_Init+0x84>
  {
    Error_Handler();
 8001cc4:	f000 fa8a 	bl	80021dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_ACTIVE;
 8001cc8:	2310      	movs	r3, #16
 8001cca:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.Pulse = 1433;
 8001ccc:	f240 5399 	movw	r3, #1433	@ 0x599
 8001cd0:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_TIM_OC_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ce6:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001cea:	2200      	movs	r2, #0
 8001cec:	4619      	mov	r1, r3
 8001cee:	4813      	ldr	r0, [pc, #76]	@ (8001d3c <MX_TIM16_Init+0xf8>)
 8001cf0:	f004 fe48 	bl	8006984 <HAL_TIM_OC_ConfigChannel>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d001      	beq.n	8001cfe <MX_TIM16_Init+0xba>
  {
    Error_Handler();
 8001cfa:	f000 fa6f 	bl	80021dc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001d02:	2300      	movs	r3, #0
 8001d04:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001d06:	2300      	movs	r3, #0
 8001d08:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001d12:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001d16:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8001d20:	463b      	mov	r3, r7
 8001d22:	4619      	mov	r1, r3
 8001d24:	4805      	ldr	r0, [pc, #20]	@ (8001d3c <MX_TIM16_Init+0xf8>)
 8001d26:	f006 f841 	bl	8007dac <HAL_TIMEx_ConfigBreakDeadTime>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d001      	beq.n	8001d34 <MX_TIM16_Init+0xf0>
  {
    Error_Handler();
 8001d30:	f000 fa54 	bl	80021dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8001d34:	bf00      	nop
 8001d36:	3750      	adds	r7, #80	@ 0x50
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	20000700 	.word	0x20000700
 8001d40:	40014400 	.word	0x40014400

08001d44 <MX_TIM20_Init>:
  * @brief TIM20 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM20_Init(void)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b09c      	sub	sp, #112	@ 0x70
 8001d48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM20_Init 0 */

  /* USER CODE END TIM20_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d4a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001d4e:	2200      	movs	r2, #0
 8001d50:	601a      	str	r2, [r3, #0]
 8001d52:	605a      	str	r2, [r3, #4]
 8001d54:	609a      	str	r2, [r3, #8]
 8001d56:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d58:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	601a      	str	r2, [r3, #0]
 8001d60:	605a      	str	r2, [r3, #4]
 8001d62:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d64:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001d68:	2200      	movs	r2, #0
 8001d6a:	601a      	str	r2, [r3, #0]
 8001d6c:	605a      	str	r2, [r3, #4]
 8001d6e:	609a      	str	r2, [r3, #8]
 8001d70:	60da      	str	r2, [r3, #12]
 8001d72:	611a      	str	r2, [r3, #16]
 8001d74:	615a      	str	r2, [r3, #20]
 8001d76:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001d78:	1d3b      	adds	r3, r7, #4
 8001d7a:	2234      	movs	r2, #52	@ 0x34
 8001d7c:	2100      	movs	r1, #0
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f009 fa0e 	bl	800b1a0 <memset>

  /* USER CODE BEGIN TIM20_Init 1 */

  /* USER CODE END TIM20_Init 1 */
  htim20.Instance = TIM20;
 8001d84:	4b4b      	ldr	r3, [pc, #300]	@ (8001eb4 <MX_TIM20_Init+0x170>)
 8001d86:	4a4c      	ldr	r2, [pc, #304]	@ (8001eb8 <MX_TIM20_Init+0x174>)
 8001d88:	601a      	str	r2, [r3, #0]
  htim20.Init.Prescaler = 0;
 8001d8a:	4b4a      	ldr	r3, [pc, #296]	@ (8001eb4 <MX_TIM20_Init+0x170>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	605a      	str	r2, [r3, #4]
  htim20.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d90:	4b48      	ldr	r3, [pc, #288]	@ (8001eb4 <MX_TIM20_Init+0x170>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	609a      	str	r2, [r3, #8]
  htim20.Init.Period = 65535;
 8001d96:	4b47      	ldr	r3, [pc, #284]	@ (8001eb4 <MX_TIM20_Init+0x170>)
 8001d98:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001d9c:	60da      	str	r2, [r3, #12]
  htim20.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d9e:	4b45      	ldr	r3, [pc, #276]	@ (8001eb4 <MX_TIM20_Init+0x170>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	611a      	str	r2, [r3, #16]
  htim20.Init.RepetitionCounter = 0;
 8001da4:	4b43      	ldr	r3, [pc, #268]	@ (8001eb4 <MX_TIM20_Init+0x170>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	615a      	str	r2, [r3, #20]
  htim20.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001daa:	4b42      	ldr	r3, [pc, #264]	@ (8001eb4 <MX_TIM20_Init+0x170>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim20) != HAL_OK)
 8001db0:	4840      	ldr	r0, [pc, #256]	@ (8001eb4 <MX_TIM20_Init+0x170>)
 8001db2:	f003 fefb 	bl	8005bac <HAL_TIM_Base_Init>
 8001db6:	4603      	mov	r3, r0
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d001      	beq.n	8001dc0 <MX_TIM20_Init+0x7c>
  {
    Error_Handler();
 8001dbc:	f000 fa0e 	bl	80021dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001dc0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001dc4:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim20, &sClockSourceConfig) != HAL_OK)
 8001dc6:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001dca:	4619      	mov	r1, r3
 8001dcc:	4839      	ldr	r0, [pc, #228]	@ (8001eb4 <MX_TIM20_Init+0x170>)
 8001dce:	f004 ff67 	bl	8006ca0 <HAL_TIM_ConfigClockSource>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d001      	beq.n	8001ddc <MX_TIM20_Init+0x98>
  {
    Error_Handler();
 8001dd8:	f000 fa00 	bl	80021dc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim20) != HAL_OK)
 8001ddc:	4835      	ldr	r0, [pc, #212]	@ (8001eb4 <MX_TIM20_Init+0x170>)
 8001dde:	f004 f89f 	bl	8005f20 <HAL_TIM_PWM_Init>
 8001de2:	4603      	mov	r3, r0
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d001      	beq.n	8001dec <MX_TIM20_Init+0xa8>
  {
    Error_Handler();
 8001de8:	f000 f9f8 	bl	80021dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001dec:	2300      	movs	r3, #0
 8001dee:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001df0:	2300      	movs	r3, #0
 8001df2:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001df4:	2300      	movs	r3, #0
 8001df6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim20, &sMasterConfig) != HAL_OK)
 8001df8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001dfc:	4619      	mov	r1, r3
 8001dfe:	482d      	ldr	r0, [pc, #180]	@ (8001eb4 <MX_TIM20_Init+0x170>)
 8001e00:	f005 ff3e 	bl	8007c80 <HAL_TIMEx_MasterConfigSynchronization>
 8001e04:	4603      	mov	r3, r0
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d001      	beq.n	8001e0e <MX_TIM20_Init+0xca>
  {
    Error_Handler();
 8001e0a:	f000 f9e7 	bl	80021dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e0e:	2360      	movs	r3, #96	@ 0x60
 8001e10:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8001e12:	2300      	movs	r3, #0
 8001e14:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e16:	2300      	movs	r3, #0
 8001e18:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001e22:	2300      	movs	r3, #0
 8001e24:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001e26:	2300      	movs	r3, #0
 8001e28:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim20, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e2a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001e2e:	2200      	movs	r2, #0
 8001e30:	4619      	mov	r1, r3
 8001e32:	4820      	ldr	r0, [pc, #128]	@ (8001eb4 <MX_TIM20_Init+0x170>)
 8001e34:	f004 fe20 	bl	8006a78 <HAL_TIM_PWM_ConfigChannel>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d001      	beq.n	8001e42 <MX_TIM20_Init+0xfe>
  {
    Error_Handler();
 8001e3e:	f000 f9cd 	bl	80021dc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim20, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001e42:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001e46:	2208      	movs	r2, #8
 8001e48:	4619      	mov	r1, r3
 8001e4a:	481a      	ldr	r0, [pc, #104]	@ (8001eb4 <MX_TIM20_Init+0x170>)
 8001e4c:	f004 fe14 	bl	8006a78 <HAL_TIM_PWM_ConfigChannel>
 8001e50:	4603      	mov	r3, r0
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d001      	beq.n	8001e5a <MX_TIM20_Init+0x116>
  {
    Error_Handler();
 8001e56:	f000 f9c1 	bl	80021dc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001e62:	2300      	movs	r3, #0
 8001e64:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001e66:	2300      	movs	r3, #0
 8001e68:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001e6e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001e72:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001e74:	2300      	movs	r3, #0
 8001e76:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001e80:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001e84:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001e86:	2300      	movs	r3, #0
 8001e88:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim20, &sBreakDeadTimeConfig) != HAL_OK)
 8001e92:	1d3b      	adds	r3, r7, #4
 8001e94:	4619      	mov	r1, r3
 8001e96:	4807      	ldr	r0, [pc, #28]	@ (8001eb4 <MX_TIM20_Init+0x170>)
 8001e98:	f005 ff88 	bl	8007dac <HAL_TIMEx_ConfigBreakDeadTime>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d001      	beq.n	8001ea6 <MX_TIM20_Init+0x162>
  {
    Error_Handler();
 8001ea2:	f000 f99b 	bl	80021dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM20_Init 2 */

  /* USER CODE END TIM20_Init 2 */
  HAL_TIM_MspPostInit(&htim20);
 8001ea6:	4803      	ldr	r0, [pc, #12]	@ (8001eb4 <MX_TIM20_Init+0x170>)
 8001ea8:	f000 fb5e 	bl	8002568 <HAL_TIM_MspPostInit>

}
 8001eac:	bf00      	nop
 8001eae:	3770      	adds	r7, #112	@ 0x70
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}
 8001eb4:	200007cc 	.word	0x200007cc
 8001eb8:	40015000 	.word	0x40015000

08001ebc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001ec0:	4b23      	ldr	r3, [pc, #140]	@ (8001f50 <MX_USART2_UART_Init+0x94>)
 8001ec2:	4a24      	ldr	r2, [pc, #144]	@ (8001f54 <MX_USART2_UART_Init+0x98>)
 8001ec4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 8001ec6:	4b22      	ldr	r3, [pc, #136]	@ (8001f50 <MX_USART2_UART_Init+0x94>)
 8001ec8:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 8001ecc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8001ece:	4b20      	ldr	r3, [pc, #128]	@ (8001f50 <MX_USART2_UART_Init+0x94>)
 8001ed0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001ed4:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001ed6:	4b1e      	ldr	r3, [pc, #120]	@ (8001f50 <MX_USART2_UART_Init+0x94>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8001edc:	4b1c      	ldr	r3, [pc, #112]	@ (8001f50 <MX_USART2_UART_Init+0x94>)
 8001ede:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001ee2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001ee4:	4b1a      	ldr	r3, [pc, #104]	@ (8001f50 <MX_USART2_UART_Init+0x94>)
 8001ee6:	220c      	movs	r2, #12
 8001ee8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001eea:	4b19      	ldr	r3, [pc, #100]	@ (8001f50 <MX_USART2_UART_Init+0x94>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ef0:	4b17      	ldr	r3, [pc, #92]	@ (8001f50 <MX_USART2_UART_Init+0x94>)
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ef6:	4b16      	ldr	r3, [pc, #88]	@ (8001f50 <MX_USART2_UART_Init+0x94>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001efc:	4b14      	ldr	r3, [pc, #80]	@ (8001f50 <MX_USART2_UART_Init+0x94>)
 8001efe:	2200      	movs	r2, #0
 8001f00:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f02:	4b13      	ldr	r3, [pc, #76]	@ (8001f50 <MX_USART2_UART_Init+0x94>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001f08:	4811      	ldr	r0, [pc, #68]	@ (8001f50 <MX_USART2_UART_Init+0x94>)
 8001f0a:	f006 f833 	bl	8007f74 <HAL_UART_Init>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d001      	beq.n	8001f18 <MX_USART2_UART_Init+0x5c>
  {
    Error_Handler();
 8001f14:	f000 f962 	bl	80021dc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f18:	2100      	movs	r1, #0
 8001f1a:	480d      	ldr	r0, [pc, #52]	@ (8001f50 <MX_USART2_UART_Init+0x94>)
 8001f1c:	f008 fbb5 	bl	800a68a <HAL_UARTEx_SetTxFifoThreshold>
 8001f20:	4603      	mov	r3, r0
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d001      	beq.n	8001f2a <MX_USART2_UART_Init+0x6e>
  {
    Error_Handler();
 8001f26:	f000 f959 	bl	80021dc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f2a:	2100      	movs	r1, #0
 8001f2c:	4808      	ldr	r0, [pc, #32]	@ (8001f50 <MX_USART2_UART_Init+0x94>)
 8001f2e:	f008 fbea 	bl	800a706 <HAL_UARTEx_SetRxFifoThreshold>
 8001f32:	4603      	mov	r3, r0
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d001      	beq.n	8001f3c <MX_USART2_UART_Init+0x80>
  {
    Error_Handler();
 8001f38:	f000 f950 	bl	80021dc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001f3c:	4804      	ldr	r0, [pc, #16]	@ (8001f50 <MX_USART2_UART_Init+0x94>)
 8001f3e:	f008 fb6b 	bl	800a618 <HAL_UARTEx_DisableFifoMode>
 8001f42:	4603      	mov	r3, r0
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d001      	beq.n	8001f4c <MX_USART2_UART_Init+0x90>
  {
    Error_Handler();
 8001f48:	f000 f948 	bl	80021dc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001f4c:	bf00      	nop
 8001f4e:	bd80      	pop	{r7, pc}
 8001f50:	20000898 	.word	0x20000898
 8001f54:	40004400 	.word	0x40004400

08001f58 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b082      	sub	sp, #8
 8001f5c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001f5e:	4b12      	ldr	r3, [pc, #72]	@ (8001fa8 <MX_DMA_Init+0x50>)
 8001f60:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f62:	4a11      	ldr	r2, [pc, #68]	@ (8001fa8 <MX_DMA_Init+0x50>)
 8001f64:	f043 0304 	orr.w	r3, r3, #4
 8001f68:	6493      	str	r3, [r2, #72]	@ 0x48
 8001f6a:	4b0f      	ldr	r3, [pc, #60]	@ (8001fa8 <MX_DMA_Init+0x50>)
 8001f6c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f6e:	f003 0304 	and.w	r3, r3, #4
 8001f72:	607b      	str	r3, [r7, #4]
 8001f74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001f76:	4b0c      	ldr	r3, [pc, #48]	@ (8001fa8 <MX_DMA_Init+0x50>)
 8001f78:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f7a:	4a0b      	ldr	r2, [pc, #44]	@ (8001fa8 <MX_DMA_Init+0x50>)
 8001f7c:	f043 0301 	orr.w	r3, r3, #1
 8001f80:	6493      	str	r3, [r2, #72]	@ 0x48
 8001f82:	4b09      	ldr	r3, [pc, #36]	@ (8001fa8 <MX_DMA_Init+0x50>)
 8001f84:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f86:	f003 0301 	and.w	r3, r3, #1
 8001f8a:	603b      	str	r3, [r7, #0]
 8001f8c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001f8e:	2200      	movs	r2, #0
 8001f90:	2100      	movs	r1, #0
 8001f92:	200b      	movs	r0, #11
 8001f94:	f002 f8b5 	bl	8004102 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001f98:	200b      	movs	r0, #11
 8001f9a:	f002 f8cc 	bl	8004136 <HAL_NVIC_EnableIRQ>

}
 8001f9e:	bf00      	nop
 8001fa0:	3708      	adds	r7, #8
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}
 8001fa6:	bf00      	nop
 8001fa8:	40021000 	.word	0x40021000

08001fac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b08a      	sub	sp, #40	@ 0x28
 8001fb0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fb2:	f107 0314 	add.w	r3, r7, #20
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	601a      	str	r2, [r3, #0]
 8001fba:	605a      	str	r2, [r3, #4]
 8001fbc:	609a      	str	r2, [r3, #8]
 8001fbe:	60da      	str	r2, [r3, #12]
 8001fc0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fc2:	4b61      	ldr	r3, [pc, #388]	@ (8002148 <MX_GPIO_Init+0x19c>)
 8001fc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fc6:	4a60      	ldr	r2, [pc, #384]	@ (8002148 <MX_GPIO_Init+0x19c>)
 8001fc8:	f043 0304 	orr.w	r3, r3, #4
 8001fcc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001fce:	4b5e      	ldr	r3, [pc, #376]	@ (8002148 <MX_GPIO_Init+0x19c>)
 8001fd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fd2:	f003 0304 	and.w	r3, r3, #4
 8001fd6:	613b      	str	r3, [r7, #16]
 8001fd8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001fda:	4b5b      	ldr	r3, [pc, #364]	@ (8002148 <MX_GPIO_Init+0x19c>)
 8001fdc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fde:	4a5a      	ldr	r2, [pc, #360]	@ (8002148 <MX_GPIO_Init+0x19c>)
 8001fe0:	f043 0320 	orr.w	r3, r3, #32
 8001fe4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001fe6:	4b58      	ldr	r3, [pc, #352]	@ (8002148 <MX_GPIO_Init+0x19c>)
 8001fe8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fea:	f003 0320 	and.w	r3, r3, #32
 8001fee:	60fb      	str	r3, [r7, #12]
 8001ff0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ff2:	4b55      	ldr	r3, [pc, #340]	@ (8002148 <MX_GPIO_Init+0x19c>)
 8001ff4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ff6:	4a54      	ldr	r2, [pc, #336]	@ (8002148 <MX_GPIO_Init+0x19c>)
 8001ff8:	f043 0301 	orr.w	r3, r3, #1
 8001ffc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ffe:	4b52      	ldr	r3, [pc, #328]	@ (8002148 <MX_GPIO_Init+0x19c>)
 8002000:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002002:	f003 0301 	and.w	r3, r3, #1
 8002006:	60bb      	str	r3, [r7, #8]
 8002008:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800200a:	4b4f      	ldr	r3, [pc, #316]	@ (8002148 <MX_GPIO_Init+0x19c>)
 800200c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800200e:	4a4e      	ldr	r2, [pc, #312]	@ (8002148 <MX_GPIO_Init+0x19c>)
 8002010:	f043 0302 	orr.w	r3, r3, #2
 8002014:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002016:	4b4c      	ldr	r3, [pc, #304]	@ (8002148 <MX_GPIO_Init+0x19c>)
 8002018:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800201a:	f003 0302 	and.w	r3, r3, #2
 800201e:	607b      	str	r3, [r7, #4]
 8002020:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIR_MD20A_24V_GPIO_Port, DIR_MD20A_24V_Pin, GPIO_PIN_RESET);
 8002022:	2200      	movs	r2, #0
 8002024:	2102      	movs	r1, #2
 8002026:	4849      	ldr	r0, [pc, #292]	@ (800214c <MX_GPIO_Init+0x1a0>)
 8002028:	f002 fd60 	bl	8004aec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIR_MD20A_18V_GPIO_Port, DIR_MD20A_18V_Pin, GPIO_PIN_RESET);
 800202c:	2200      	movs	r2, #0
 800202e:	2140      	movs	r1, #64	@ 0x40
 8002030:	4847      	ldr	r0, [pc, #284]	@ (8002150 <MX_GPIO_Init+0x1a4>)
 8002032:	f002 fd5b 	bl	8004aec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002036:	2320      	movs	r3, #32
 8002038:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800203a:	2302      	movs	r3, #2
 800203c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800203e:	2300      	movs	r3, #0
 8002040:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002042:	2300      	movs	r3, #0
 8002044:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002046:	2305      	movs	r3, #5
 8002048:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800204a:	f107 0314 	add.w	r3, r7, #20
 800204e:	4619      	mov	r1, r3
 8002050:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002054:	f002 fbc8 	bl	80047e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIR_MD20A_24V_Pin */
  GPIO_InitStruct.Pin = DIR_MD20A_24V_Pin;
 8002058:	2302      	movs	r3, #2
 800205a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800205c:	2301      	movs	r3, #1
 800205e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002060:	2300      	movs	r3, #0
 8002062:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002064:	2300      	movs	r3, #0
 8002066:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DIR_MD20A_24V_GPIO_Port, &GPIO_InitStruct);
 8002068:	f107 0314 	add.w	r3, r7, #20
 800206c:	4619      	mov	r1, r3
 800206e:	4837      	ldr	r0, [pc, #220]	@ (800214c <MX_GPIO_Init+0x1a0>)
 8002070:	f002 fbba 	bl	80047e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : Limit_Switch_pen_2_Pin Proximity_Sensor_Pin Limit_Switch_Prismatic1_Pin Limit_Switch_Prismatic2_Pin
                           Limit_Switch_pen_1_Pin */
  GPIO_InitStruct.Pin = Limit_Switch_pen_2_Pin|Proximity_Sensor_Pin|Limit_Switch_Prismatic1_Pin|Limit_Switch_Prismatic2_Pin
 8002074:	f44f 4366 	mov.w	r3, #58880	@ 0xe600
 8002078:	617b      	str	r3, [r7, #20]
                          |Limit_Switch_pen_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800207a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800207e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002080:	2300      	movs	r3, #0
 8002082:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002084:	f107 0314 	add.w	r3, r7, #20
 8002088:	4619      	mov	r1, r3
 800208a:	4830      	ldr	r0, [pc, #192]	@ (800214c <MX_GPIO_Init+0x1a0>)
 800208c:	f002 fbac 	bl	80047e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIR_MD20A_18V_Pin */
  GPIO_InitStruct.Pin = DIR_MD20A_18V_Pin;
 8002090:	2340      	movs	r3, #64	@ 0x40
 8002092:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002094:	2301      	movs	r3, #1
 8002096:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002098:	2300      	movs	r3, #0
 800209a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800209c:	2300      	movs	r3, #0
 800209e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DIR_MD20A_18V_GPIO_Port, &GPIO_InitStruct);
 80020a0:	f107 0314 	add.w	r3, r7, #20
 80020a4:	4619      	mov	r1, r3
 80020a6:	482a      	ldr	r0, [pc, #168]	@ (8002150 <MX_GPIO_Init+0x1a4>)
 80020a8:	f002 fb9e 	bl	80047e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PS2_Joy_stick_Attention_Pin */
  GPIO_InitStruct.Pin = PS2_Joy_stick_Attention_Pin;
 80020ac:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80020b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020b2:	2300      	movs	r3, #0
 80020b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b6:	2300      	movs	r3, #0
 80020b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PS2_Joy_stick_Attention_GPIO_Port, &GPIO_InitStruct);
 80020ba:	f107 0314 	add.w	r3, r7, #20
 80020be:	4619      	mov	r1, r3
 80020c0:	4823      	ldr	r0, [pc, #140]	@ (8002150 <MX_GPIO_Init+0x1a4>)
 80020c2:	f002 fb91 	bl	80047e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Emergency_Pin */
  GPIO_InitStruct.Pin = Emergency_Pin;
 80020c6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80020ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80020cc:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80020d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d2:	2300      	movs	r3, #0
 80020d4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Emergency_GPIO_Port, &GPIO_InitStruct);
 80020d6:	f107 0314 	add.w	r3, r7, #20
 80020da:	4619      	mov	r1, r3
 80020dc:	481c      	ldr	r0, [pc, #112]	@ (8002150 <MX_GPIO_Init+0x1a4>)
 80020de:	f002 fb83 	bl	80047e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Proximity_sensor_Pin */
  GPIO_InitStruct.Pin = Proximity_sensor_Pin;
 80020e2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80020e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80020e8:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80020ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ee:	2300      	movs	r3, #0
 80020f0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Proximity_sensor_GPIO_Port, &GPIO_InitStruct);
 80020f2:	f107 0314 	add.w	r3, r7, #20
 80020f6:	4619      	mov	r1, r3
 80020f8:	4815      	ldr	r0, [pc, #84]	@ (8002150 <MX_GPIO_Init+0x1a4>)
 80020fa:	f002 fb75 	bl	80047e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80020fe:	2330      	movs	r3, #48	@ 0x30
 8002100:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002102:	2302      	movs	r3, #2
 8002104:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002106:	2300      	movs	r3, #0
 8002108:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800210a:	2300      	movs	r3, #0
 800210c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800210e:	2305      	movs	r3, #5
 8002110:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002112:	f107 0314 	add.w	r3, r7, #20
 8002116:	4619      	mov	r1, r3
 8002118:	480c      	ldr	r0, [pc, #48]	@ (800214c <MX_GPIO_Init+0x1a0>)
 800211a:	f002 fb65 	bl	80047e8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800211e:	2200      	movs	r2, #0
 8002120:	2100      	movs	r1, #0
 8002122:	2017      	movs	r0, #23
 8002124:	f001 ffed 	bl	8004102 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002128:	2017      	movs	r0, #23
 800212a:	f002 f804 	bl	8004136 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800212e:	2200      	movs	r2, #0
 8002130:	2100      	movs	r1, #0
 8002132:	2028      	movs	r0, #40	@ 0x28
 8002134:	f001 ffe5 	bl	8004102 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002138:	2028      	movs	r0, #40	@ 0x28
 800213a:	f001 fffc 	bl	8004136 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 800213e:	bf00      	nop
 8002140:	3728      	adds	r7, #40	@ 0x28
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}
 8002146:	bf00      	nop
 8002148:	40021000 	.word	0x40021000
 800214c:	48000400 	.word	0x48000400
 8002150:	48000800 	.word	0x48000800

08002154 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8002154:	b480      	push	{r7}
 8002156:	b083      	sub	sp, #12
 8002158:	af00      	add	r7, sp, #0
 800215a:	4603      	mov	r3, r0
 800215c:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_9) {
 800215e:	88fb      	ldrh	r3, [r7, #6]
 8002160:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002164:	d103      	bne.n	800216e <HAL_GPIO_EXTI_Callback+0x1a>
		State = 9;
 8002166:	4b1c      	ldr	r3, [pc, #112]	@ (80021d8 <HAL_GPIO_EXTI_Callback+0x84>)
 8002168:	2209      	movs	r2, #9
 800216a:	601a      	str	r2, [r3, #0]
	} else if (GPIO_Pin == GPIO_PIN_14) {
		State = 14;
	} else if (GPIO_Pin == GPIO_PIN_15) {
		State = 15;
	}
}
 800216c:	e02e      	b.n	80021cc <HAL_GPIO_EXTI_Callback+0x78>
	} else if (GPIO_Pin == GPIO_PIN_10) {
 800216e:	88fb      	ldrh	r3, [r7, #6]
 8002170:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002174:	d103      	bne.n	800217e <HAL_GPIO_EXTI_Callback+0x2a>
		State = 10;
 8002176:	4b18      	ldr	r3, [pc, #96]	@ (80021d8 <HAL_GPIO_EXTI_Callback+0x84>)
 8002178:	220a      	movs	r2, #10
 800217a:	601a      	str	r2, [r3, #0]
}
 800217c:	e026      	b.n	80021cc <HAL_GPIO_EXTI_Callback+0x78>
	} else if (GPIO_Pin == GPIO_PIN_11) {
 800217e:	88fb      	ldrh	r3, [r7, #6]
 8002180:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002184:	d103      	bne.n	800218e <HAL_GPIO_EXTI_Callback+0x3a>
		State = 11;
 8002186:	4b14      	ldr	r3, [pc, #80]	@ (80021d8 <HAL_GPIO_EXTI_Callback+0x84>)
 8002188:	220b      	movs	r2, #11
 800218a:	601a      	str	r2, [r3, #0]
}
 800218c:	e01e      	b.n	80021cc <HAL_GPIO_EXTI_Callback+0x78>
	} else if (GPIO_Pin == GPIO_PIN_12) {
 800218e:	88fb      	ldrh	r3, [r7, #6]
 8002190:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002194:	d103      	bne.n	800219e <HAL_GPIO_EXTI_Callback+0x4a>
		State = 12;
 8002196:	4b10      	ldr	r3, [pc, #64]	@ (80021d8 <HAL_GPIO_EXTI_Callback+0x84>)
 8002198:	220c      	movs	r2, #12
 800219a:	601a      	str	r2, [r3, #0]
}
 800219c:	e016      	b.n	80021cc <HAL_GPIO_EXTI_Callback+0x78>
	} else if (GPIO_Pin == GPIO_PIN_13) {
 800219e:	88fb      	ldrh	r3, [r7, #6]
 80021a0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80021a4:	d103      	bne.n	80021ae <HAL_GPIO_EXTI_Callback+0x5a>
		State = 13;
 80021a6:	4b0c      	ldr	r3, [pc, #48]	@ (80021d8 <HAL_GPIO_EXTI_Callback+0x84>)
 80021a8:	220d      	movs	r2, #13
 80021aa:	601a      	str	r2, [r3, #0]
}
 80021ac:	e00e      	b.n	80021cc <HAL_GPIO_EXTI_Callback+0x78>
	} else if (GPIO_Pin == GPIO_PIN_14) {
 80021ae:	88fb      	ldrh	r3, [r7, #6]
 80021b0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80021b4:	d103      	bne.n	80021be <HAL_GPIO_EXTI_Callback+0x6a>
		State = 14;
 80021b6:	4b08      	ldr	r3, [pc, #32]	@ (80021d8 <HAL_GPIO_EXTI_Callback+0x84>)
 80021b8:	220e      	movs	r2, #14
 80021ba:	601a      	str	r2, [r3, #0]
}
 80021bc:	e006      	b.n	80021cc <HAL_GPIO_EXTI_Callback+0x78>
	} else if (GPIO_Pin == GPIO_PIN_15) {
 80021be:	88fb      	ldrh	r3, [r7, #6]
 80021c0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80021c4:	d102      	bne.n	80021cc <HAL_GPIO_EXTI_Callback+0x78>
		State = 15;
 80021c6:	4b04      	ldr	r3, [pc, #16]	@ (80021d8 <HAL_GPIO_EXTI_Callback+0x84>)
 80021c8:	220f      	movs	r2, #15
 80021ca:	601a      	str	r2, [r3, #0]
}
 80021cc:	bf00      	nop
 80021ce:	370c      	adds	r7, #12
 80021d0:	46bd      	mov	sp, r7
 80021d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d6:	4770      	bx	lr
 80021d8:	20000a1c 	.word	0x20000a1c

080021dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80021dc:	b480      	push	{r7}
 80021de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80021e0:	b672      	cpsid	i
}
 80021e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80021e4:	bf00      	nop
 80021e6:	e7fd      	b.n	80021e4 <Error_Handler+0x8>

080021e8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b082      	sub	sp, #8
 80021ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021ee:	4b0f      	ldr	r3, [pc, #60]	@ (800222c <HAL_MspInit+0x44>)
 80021f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021f2:	4a0e      	ldr	r2, [pc, #56]	@ (800222c <HAL_MspInit+0x44>)
 80021f4:	f043 0301 	orr.w	r3, r3, #1
 80021f8:	6613      	str	r3, [r2, #96]	@ 0x60
 80021fa:	4b0c      	ldr	r3, [pc, #48]	@ (800222c <HAL_MspInit+0x44>)
 80021fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021fe:	f003 0301 	and.w	r3, r3, #1
 8002202:	607b      	str	r3, [r7, #4]
 8002204:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002206:	4b09      	ldr	r3, [pc, #36]	@ (800222c <HAL_MspInit+0x44>)
 8002208:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800220a:	4a08      	ldr	r2, [pc, #32]	@ (800222c <HAL_MspInit+0x44>)
 800220c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002210:	6593      	str	r3, [r2, #88]	@ 0x58
 8002212:	4b06      	ldr	r3, [pc, #24]	@ (800222c <HAL_MspInit+0x44>)
 8002214:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002216:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800221a:	603b      	str	r3, [r7, #0]
 800221c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800221e:	f002 fd39 	bl	8004c94 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002222:	bf00      	nop
 8002224:	3708      	adds	r7, #8
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}
 800222a:	bf00      	nop
 800222c:	40021000 	.word	0x40021000

08002230 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b0a0      	sub	sp, #128	@ 0x80
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002238:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800223c:	2200      	movs	r2, #0
 800223e:	601a      	str	r2, [r3, #0]
 8002240:	605a      	str	r2, [r3, #4]
 8002242:	609a      	str	r2, [r3, #8]
 8002244:	60da      	str	r2, [r3, #12]
 8002246:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002248:	f107 0318 	add.w	r3, r7, #24
 800224c:	2254      	movs	r2, #84	@ 0x54
 800224e:	2100      	movs	r1, #0
 8002250:	4618      	mov	r0, r3
 8002252:	f008 ffa5 	bl	800b1a0 <memset>
  if(hadc->Instance==ADC1)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800225e:	d13e      	bne.n	80022de <HAL_ADC_MspInit+0xae>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8002260:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002264:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8002266:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800226a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800226c:	f107 0318 	add.w	r3, r7, #24
 8002270:	4618      	mov	r0, r3
 8002272:	f003 fa4d 	bl	8005710 <HAL_RCCEx_PeriphCLKConfig>
 8002276:	4603      	mov	r3, r0
 8002278:	2b00      	cmp	r3, #0
 800227a:	d001      	beq.n	8002280 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 800227c:	f7ff ffae 	bl	80021dc <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8002280:	4b3a      	ldr	r3, [pc, #232]	@ (800236c <HAL_ADC_MspInit+0x13c>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	3301      	adds	r3, #1
 8002286:	4a39      	ldr	r2, [pc, #228]	@ (800236c <HAL_ADC_MspInit+0x13c>)
 8002288:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800228a:	4b38      	ldr	r3, [pc, #224]	@ (800236c <HAL_ADC_MspInit+0x13c>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	2b01      	cmp	r3, #1
 8002290:	d10b      	bne.n	80022aa <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8002292:	4b37      	ldr	r3, [pc, #220]	@ (8002370 <HAL_ADC_MspInit+0x140>)
 8002294:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002296:	4a36      	ldr	r2, [pc, #216]	@ (8002370 <HAL_ADC_MspInit+0x140>)
 8002298:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800229c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800229e:	4b34      	ldr	r3, [pc, #208]	@ (8002370 <HAL_ADC_MspInit+0x140>)
 80022a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022a2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80022a6:	617b      	str	r3, [r7, #20]
 80022a8:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022aa:	4b31      	ldr	r3, [pc, #196]	@ (8002370 <HAL_ADC_MspInit+0x140>)
 80022ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022ae:	4a30      	ldr	r2, [pc, #192]	@ (8002370 <HAL_ADC_MspInit+0x140>)
 80022b0:	f043 0301 	orr.w	r3, r3, #1
 80022b4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80022b6:	4b2e      	ldr	r3, [pc, #184]	@ (8002370 <HAL_ADC_MspInit+0x140>)
 80022b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022ba:	f003 0301 	and.w	r3, r3, #1
 80022be:	613b      	str	r3, [r7, #16]
 80022c0:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = Current_Sensor_Pin|Current_SensorA1_Pin;
 80022c2:	2303      	movs	r3, #3
 80022c4:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80022c6:	2303      	movs	r3, #3
 80022c8:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ca:	2300      	movs	r3, #0
 80022cc:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022ce:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80022d2:	4619      	mov	r1, r3
 80022d4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80022d8:	f002 fa86 	bl	80047e8 <HAL_GPIO_Init>
    /* USER CODE BEGIN ADC2_MspInit 1 */

    /* USER CODE END ADC2_MspInit 1 */
  }

}
 80022dc:	e042      	b.n	8002364 <HAL_ADC_MspInit+0x134>
  else if(hadc->Instance==ADC2)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4a24      	ldr	r2, [pc, #144]	@ (8002374 <HAL_ADC_MspInit+0x144>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d13d      	bne.n	8002364 <HAL_ADC_MspInit+0x134>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80022e8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80022ec:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80022ee:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80022f2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80022f4:	f107 0318 	add.w	r3, r7, #24
 80022f8:	4618      	mov	r0, r3
 80022fa:	f003 fa09 	bl	8005710 <HAL_RCCEx_PeriphCLKConfig>
 80022fe:	4603      	mov	r3, r0
 8002300:	2b00      	cmp	r3, #0
 8002302:	d001      	beq.n	8002308 <HAL_ADC_MspInit+0xd8>
      Error_Handler();
 8002304:	f7ff ff6a 	bl	80021dc <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8002308:	4b18      	ldr	r3, [pc, #96]	@ (800236c <HAL_ADC_MspInit+0x13c>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	3301      	adds	r3, #1
 800230e:	4a17      	ldr	r2, [pc, #92]	@ (800236c <HAL_ADC_MspInit+0x13c>)
 8002310:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8002312:	4b16      	ldr	r3, [pc, #88]	@ (800236c <HAL_ADC_MspInit+0x13c>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	2b01      	cmp	r3, #1
 8002318:	d10b      	bne.n	8002332 <HAL_ADC_MspInit+0x102>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800231a:	4b15      	ldr	r3, [pc, #84]	@ (8002370 <HAL_ADC_MspInit+0x140>)
 800231c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800231e:	4a14      	ldr	r2, [pc, #80]	@ (8002370 <HAL_ADC_MspInit+0x140>)
 8002320:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002324:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002326:	4b12      	ldr	r3, [pc, #72]	@ (8002370 <HAL_ADC_MspInit+0x140>)
 8002328:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800232a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800232e:	60fb      	str	r3, [r7, #12]
 8002330:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002332:	4b0f      	ldr	r3, [pc, #60]	@ (8002370 <HAL_ADC_MspInit+0x140>)
 8002334:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002336:	4a0e      	ldr	r2, [pc, #56]	@ (8002370 <HAL_ADC_MspInit+0x140>)
 8002338:	f043 0301 	orr.w	r3, r3, #1
 800233c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800233e:	4b0c      	ldr	r3, [pc, #48]	@ (8002370 <HAL_ADC_MspInit+0x140>)
 8002340:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002342:	f003 0301 	and.w	r3, r3, #1
 8002346:	60bb      	str	r3, [r7, #8]
 8002348:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = Current_SensorA1_Pin;
 800234a:	2302      	movs	r3, #2
 800234c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800234e:	2303      	movs	r3, #3
 8002350:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002352:	2300      	movs	r3, #0
 8002354:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(Current_SensorA1_GPIO_Port, &GPIO_InitStruct);
 8002356:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800235a:	4619      	mov	r1, r3
 800235c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002360:	f002 fa42 	bl	80047e8 <HAL_GPIO_Init>
}
 8002364:	bf00      	nop
 8002366:	3780      	adds	r7, #128	@ 0x80
 8002368:	46bd      	mov	sp, r7
 800236a:	bd80      	pop	{r7, pc}
 800236c:	200013b8 	.word	0x200013b8
 8002370:	40021000 	.word	0x40021000
 8002374:	50000100 	.word	0x50000100

08002378 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b088      	sub	sp, #32
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a39      	ldr	r2, [pc, #228]	@ (800246c <HAL_TIM_Base_MspInit+0xf4>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d11c      	bne.n	80023c4 <HAL_TIM_Base_MspInit+0x4c>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800238a:	4b39      	ldr	r3, [pc, #228]	@ (8002470 <HAL_TIM_Base_MspInit+0xf8>)
 800238c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800238e:	4a38      	ldr	r2, [pc, #224]	@ (8002470 <HAL_TIM_Base_MspInit+0xf8>)
 8002390:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002394:	6613      	str	r3, [r2, #96]	@ 0x60
 8002396:	4b36      	ldr	r3, [pc, #216]	@ (8002470 <HAL_TIM_Base_MspInit+0xf8>)
 8002398:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800239a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800239e:	61fb      	str	r3, [r7, #28]
 80023a0:	69fb      	ldr	r3, [r7, #28]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 80023a2:	2200      	movs	r2, #0
 80023a4:	2100      	movs	r1, #0
 80023a6:	2018      	movs	r0, #24
 80023a8:	f001 feab 	bl	8004102 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 80023ac:	2018      	movs	r0, #24
 80023ae:	f001 fec2 	bl	8004136 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80023b2:	2200      	movs	r2, #0
 80023b4:	2100      	movs	r1, #0
 80023b6:	2019      	movs	r0, #25
 80023b8:	f001 fea3 	bl	8004102 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80023bc:	2019      	movs	r0, #25
 80023be:	f001 feba 	bl	8004136 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM20_MspInit 1 */

    /* USER CODE END TIM20_MspInit 1 */
  }

}
 80023c2:	e04e      	b.n	8002462 <HAL_TIM_Base_MspInit+0xea>
  else if(htim_base->Instance==TIM2)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80023cc:	d10c      	bne.n	80023e8 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80023ce:	4b28      	ldr	r3, [pc, #160]	@ (8002470 <HAL_TIM_Base_MspInit+0xf8>)
 80023d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023d2:	4a27      	ldr	r2, [pc, #156]	@ (8002470 <HAL_TIM_Base_MspInit+0xf8>)
 80023d4:	f043 0301 	orr.w	r3, r3, #1
 80023d8:	6593      	str	r3, [r2, #88]	@ 0x58
 80023da:	4b25      	ldr	r3, [pc, #148]	@ (8002470 <HAL_TIM_Base_MspInit+0xf8>)
 80023dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023de:	f003 0301 	and.w	r3, r3, #1
 80023e2:	61bb      	str	r3, [r7, #24]
 80023e4:	69bb      	ldr	r3, [r7, #24]
}
 80023e6:	e03c      	b.n	8002462 <HAL_TIM_Base_MspInit+0xea>
  else if(htim_base->Instance==TIM8)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a21      	ldr	r2, [pc, #132]	@ (8002474 <HAL_TIM_Base_MspInit+0xfc>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d10c      	bne.n	800240c <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80023f2:	4b1f      	ldr	r3, [pc, #124]	@ (8002470 <HAL_TIM_Base_MspInit+0xf8>)
 80023f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023f6:	4a1e      	ldr	r2, [pc, #120]	@ (8002470 <HAL_TIM_Base_MspInit+0xf8>)
 80023f8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80023fc:	6613      	str	r3, [r2, #96]	@ 0x60
 80023fe:	4b1c      	ldr	r3, [pc, #112]	@ (8002470 <HAL_TIM_Base_MspInit+0xf8>)
 8002400:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002402:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002406:	617b      	str	r3, [r7, #20]
 8002408:	697b      	ldr	r3, [r7, #20]
}
 800240a:	e02a      	b.n	8002462 <HAL_TIM_Base_MspInit+0xea>
  else if(htim_base->Instance==TIM16)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a19      	ldr	r2, [pc, #100]	@ (8002478 <HAL_TIM_Base_MspInit+0x100>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d114      	bne.n	8002440 <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8002416:	4b16      	ldr	r3, [pc, #88]	@ (8002470 <HAL_TIM_Base_MspInit+0xf8>)
 8002418:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800241a:	4a15      	ldr	r2, [pc, #84]	@ (8002470 <HAL_TIM_Base_MspInit+0xf8>)
 800241c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002420:	6613      	str	r3, [r2, #96]	@ 0x60
 8002422:	4b13      	ldr	r3, [pc, #76]	@ (8002470 <HAL_TIM_Base_MspInit+0xf8>)
 8002424:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002426:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800242a:	613b      	str	r3, [r7, #16]
 800242c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800242e:	2200      	movs	r2, #0
 8002430:	2100      	movs	r1, #0
 8002432:	2019      	movs	r0, #25
 8002434:	f001 fe65 	bl	8004102 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8002438:	2019      	movs	r0, #25
 800243a:	f001 fe7c 	bl	8004136 <HAL_NVIC_EnableIRQ>
}
 800243e:	e010      	b.n	8002462 <HAL_TIM_Base_MspInit+0xea>
  else if(htim_base->Instance==TIM20)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a0d      	ldr	r2, [pc, #52]	@ (800247c <HAL_TIM_Base_MspInit+0x104>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d10b      	bne.n	8002462 <HAL_TIM_Base_MspInit+0xea>
    __HAL_RCC_TIM20_CLK_ENABLE();
 800244a:	4b09      	ldr	r3, [pc, #36]	@ (8002470 <HAL_TIM_Base_MspInit+0xf8>)
 800244c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800244e:	4a08      	ldr	r2, [pc, #32]	@ (8002470 <HAL_TIM_Base_MspInit+0xf8>)
 8002450:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002454:	6613      	str	r3, [r2, #96]	@ 0x60
 8002456:	4b06      	ldr	r3, [pc, #24]	@ (8002470 <HAL_TIM_Base_MspInit+0xf8>)
 8002458:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800245a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800245e:	60fb      	str	r3, [r7, #12]
 8002460:	68fb      	ldr	r3, [r7, #12]
}
 8002462:	bf00      	nop
 8002464:	3720      	adds	r7, #32
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}
 800246a:	bf00      	nop
 800246c:	40012c00 	.word	0x40012c00
 8002470:	40021000 	.word	0x40021000
 8002474:	40013400 	.word	0x40013400
 8002478:	40014400 	.word	0x40014400
 800247c:	40015000 	.word	0x40015000

08002480 <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b08c      	sub	sp, #48	@ 0x30
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002488:	f107 031c 	add.w	r3, r7, #28
 800248c:	2200      	movs	r2, #0
 800248e:	601a      	str	r2, [r3, #0]
 8002490:	605a      	str	r2, [r3, #4]
 8002492:	609a      	str	r2, [r3, #8]
 8002494:	60da      	str	r2, [r3, #12]
 8002496:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a2f      	ldr	r2, [pc, #188]	@ (800255c <HAL_TIM_Encoder_MspInit+0xdc>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d129      	bne.n	80024f6 <HAL_TIM_Encoder_MspInit+0x76>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80024a2:	4b2f      	ldr	r3, [pc, #188]	@ (8002560 <HAL_TIM_Encoder_MspInit+0xe0>)
 80024a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024a6:	4a2e      	ldr	r2, [pc, #184]	@ (8002560 <HAL_TIM_Encoder_MspInit+0xe0>)
 80024a8:	f043 0302 	orr.w	r3, r3, #2
 80024ac:	6593      	str	r3, [r2, #88]	@ 0x58
 80024ae:	4b2c      	ldr	r3, [pc, #176]	@ (8002560 <HAL_TIM_Encoder_MspInit+0xe0>)
 80024b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024b2:	f003 0302 	and.w	r3, r3, #2
 80024b6:	61bb      	str	r3, [r7, #24]
 80024b8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024ba:	4b29      	ldr	r3, [pc, #164]	@ (8002560 <HAL_TIM_Encoder_MspInit+0xe0>)
 80024bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024be:	4a28      	ldr	r2, [pc, #160]	@ (8002560 <HAL_TIM_Encoder_MspInit+0xe0>)
 80024c0:	f043 0301 	orr.w	r3, r3, #1
 80024c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80024c6:	4b26      	ldr	r3, [pc, #152]	@ (8002560 <HAL_TIM_Encoder_MspInit+0xe0>)
 80024c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024ca:	f003 0301 	and.w	r3, r3, #1
 80024ce:	617b      	str	r3, [r7, #20]
 80024d0:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = Encoder_1_Pin|Encoder_1A7_Pin;
 80024d2:	23c0      	movs	r3, #192	@ 0xc0
 80024d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024d6:	2302      	movs	r3, #2
 80024d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024da:	2300      	movs	r3, #0
 80024dc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024de:	2300      	movs	r3, #0
 80024e0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80024e2:	2302      	movs	r3, #2
 80024e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024e6:	f107 031c 	add.w	r3, r7, #28
 80024ea:	4619      	mov	r1, r3
 80024ec:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80024f0:	f002 f97a 	bl	80047e8 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
  }

}
 80024f4:	e02e      	b.n	8002554 <HAL_TIM_Encoder_MspInit+0xd4>
  else if(htim_encoder->Instance==TIM4)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4a1a      	ldr	r2, [pc, #104]	@ (8002564 <HAL_TIM_Encoder_MspInit+0xe4>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d129      	bne.n	8002554 <HAL_TIM_Encoder_MspInit+0xd4>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002500:	4b17      	ldr	r3, [pc, #92]	@ (8002560 <HAL_TIM_Encoder_MspInit+0xe0>)
 8002502:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002504:	4a16      	ldr	r2, [pc, #88]	@ (8002560 <HAL_TIM_Encoder_MspInit+0xe0>)
 8002506:	f043 0304 	orr.w	r3, r3, #4
 800250a:	6593      	str	r3, [r2, #88]	@ 0x58
 800250c:	4b14      	ldr	r3, [pc, #80]	@ (8002560 <HAL_TIM_Encoder_MspInit+0xe0>)
 800250e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002510:	f003 0304 	and.w	r3, r3, #4
 8002514:	613b      	str	r3, [r7, #16]
 8002516:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002518:	4b11      	ldr	r3, [pc, #68]	@ (8002560 <HAL_TIM_Encoder_MspInit+0xe0>)
 800251a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800251c:	4a10      	ldr	r2, [pc, #64]	@ (8002560 <HAL_TIM_Encoder_MspInit+0xe0>)
 800251e:	f043 0301 	orr.w	r3, r3, #1
 8002522:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002524:	4b0e      	ldr	r3, [pc, #56]	@ (8002560 <HAL_TIM_Encoder_MspInit+0xe0>)
 8002526:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002528:	f003 0301 	and.w	r3, r3, #1
 800252c:	60fb      	str	r3, [r7, #12]
 800252e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Encoder_2_Pin|Encoder_2A12_Pin;
 8002530:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8002534:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002536:	2302      	movs	r3, #2
 8002538:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800253a:	2300      	movs	r3, #0
 800253c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800253e:	2300      	movs	r3, #0
 8002540:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8002542:	230a      	movs	r3, #10
 8002544:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002546:	f107 031c 	add.w	r3, r7, #28
 800254a:	4619      	mov	r1, r3
 800254c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002550:	f002 f94a 	bl	80047e8 <HAL_GPIO_Init>
}
 8002554:	bf00      	nop
 8002556:	3730      	adds	r7, #48	@ 0x30
 8002558:	46bd      	mov	sp, r7
 800255a:	bd80      	pop	{r7, pc}
 800255c:	40000400 	.word	0x40000400
 8002560:	40021000 	.word	0x40021000
 8002564:	40000800 	.word	0x40000800

08002568 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b08a      	sub	sp, #40	@ 0x28
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002570:	f107 0314 	add.w	r3, r7, #20
 8002574:	2200      	movs	r2, #0
 8002576:	601a      	str	r2, [r3, #0]
 8002578:	605a      	str	r2, [r3, #4]
 800257a:	609a      	str	r2, [r3, #8]
 800257c:	60da      	str	r2, [r3, #12]
 800257e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM8)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a31      	ldr	r2, [pc, #196]	@ (800264c <HAL_TIM_MspPostInit+0xe4>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d11d      	bne.n	80025c6 <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM8_MspPostInit 0 */

    /* USER CODE END TIM8_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800258a:	4b31      	ldr	r3, [pc, #196]	@ (8002650 <HAL_TIM_MspPostInit+0xe8>)
 800258c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800258e:	4a30      	ldr	r2, [pc, #192]	@ (8002650 <HAL_TIM_MspPostInit+0xe8>)
 8002590:	f043 0304 	orr.w	r3, r3, #4
 8002594:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002596:	4b2e      	ldr	r3, [pc, #184]	@ (8002650 <HAL_TIM_MspPostInit+0xe8>)
 8002598:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800259a:	f003 0304 	and.w	r3, r3, #4
 800259e:	613b      	str	r3, [r7, #16]
 80025a0:	693b      	ldr	r3, [r7, #16]
    /**TIM8 GPIO Configuration
    PC9     ------> TIM8_CH4
    */
    GPIO_InitStruct.Pin = PWM_Servo_Pin;
 80025a2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80025a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025a8:	2302      	movs	r3, #2
 80025aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ac:	2300      	movs	r3, #0
 80025ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025b0:	2300      	movs	r3, #0
 80025b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 80025b4:	2304      	movs	r3, #4
 80025b6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(PWM_Servo_GPIO_Port, &GPIO_InitStruct);
 80025b8:	f107 0314 	add.w	r3, r7, #20
 80025bc:	4619      	mov	r1, r3
 80025be:	4825      	ldr	r0, [pc, #148]	@ (8002654 <HAL_TIM_MspPostInit+0xec>)
 80025c0:	f002 f912 	bl	80047e8 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM20_MspPostInit 1 */

    /* USER CODE END TIM20_MspPostInit 1 */
  }

}
 80025c4:	e03d      	b.n	8002642 <HAL_TIM_MspPostInit+0xda>
  else if(htim->Instance==TIM20)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4a23      	ldr	r2, [pc, #140]	@ (8002658 <HAL_TIM_MspPostInit+0xf0>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d138      	bne.n	8002642 <HAL_TIM_MspPostInit+0xda>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025d0:	4b1f      	ldr	r3, [pc, #124]	@ (8002650 <HAL_TIM_MspPostInit+0xe8>)
 80025d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025d4:	4a1e      	ldr	r2, [pc, #120]	@ (8002650 <HAL_TIM_MspPostInit+0xe8>)
 80025d6:	f043 0302 	orr.w	r3, r3, #2
 80025da:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80025dc:	4b1c      	ldr	r3, [pc, #112]	@ (8002650 <HAL_TIM_MspPostInit+0xe8>)
 80025de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025e0:	f003 0302 	and.w	r3, r3, #2
 80025e4:	60fb      	str	r3, [r7, #12]
 80025e6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80025e8:	4b19      	ldr	r3, [pc, #100]	@ (8002650 <HAL_TIM_MspPostInit+0xe8>)
 80025ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025ec:	4a18      	ldr	r2, [pc, #96]	@ (8002650 <HAL_TIM_MspPostInit+0xe8>)
 80025ee:	f043 0304 	orr.w	r3, r3, #4
 80025f2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80025f4:	4b16      	ldr	r3, [pc, #88]	@ (8002650 <HAL_TIM_MspPostInit+0xe8>)
 80025f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025f8:	f003 0304 	and.w	r3, r3, #4
 80025fc:	60bb      	str	r3, [r7, #8]
 80025fe:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWM_MD20A_24V_Pin;
 8002600:	2304      	movs	r3, #4
 8002602:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002604:	2302      	movs	r3, #2
 8002606:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002608:	2300      	movs	r3, #0
 800260a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800260c:	2300      	movs	r3, #0
 800260e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM20;
 8002610:	2303      	movs	r3, #3
 8002612:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(PWM_MD20A_24V_GPIO_Port, &GPIO_InitStruct);
 8002614:	f107 0314 	add.w	r3, r7, #20
 8002618:	4619      	mov	r1, r3
 800261a:	4810      	ldr	r0, [pc, #64]	@ (800265c <HAL_TIM_MspPostInit+0xf4>)
 800261c:	f002 f8e4 	bl	80047e8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = PWM_MD20A_18V_Pin;
 8002620:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002624:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002626:	2302      	movs	r3, #2
 8002628:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800262a:	2300      	movs	r3, #0
 800262c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800262e:	2300      	movs	r3, #0
 8002630:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM20;
 8002632:	2306      	movs	r3, #6
 8002634:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(PWM_MD20A_18V_GPIO_Port, &GPIO_InitStruct);
 8002636:	f107 0314 	add.w	r3, r7, #20
 800263a:	4619      	mov	r1, r3
 800263c:	4805      	ldr	r0, [pc, #20]	@ (8002654 <HAL_TIM_MspPostInit+0xec>)
 800263e:	f002 f8d3 	bl	80047e8 <HAL_GPIO_Init>
}
 8002642:	bf00      	nop
 8002644:	3728      	adds	r7, #40	@ 0x28
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}
 800264a:	bf00      	nop
 800264c:	40013400 	.word	0x40013400
 8002650:	40021000 	.word	0x40021000
 8002654:	48000800 	.word	0x48000800
 8002658:	40015000 	.word	0x40015000
 800265c:	48000400 	.word	0x48000400

08002660 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b09e      	sub	sp, #120	@ 0x78
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002668:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800266c:	2200      	movs	r2, #0
 800266e:	601a      	str	r2, [r3, #0]
 8002670:	605a      	str	r2, [r3, #4]
 8002672:	609a      	str	r2, [r3, #8]
 8002674:	60da      	str	r2, [r3, #12]
 8002676:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002678:	f107 0310 	add.w	r3, r7, #16
 800267c:	2254      	movs	r2, #84	@ 0x54
 800267e:	2100      	movs	r1, #0
 8002680:	4618      	mov	r0, r3
 8002682:	f008 fd8d 	bl	800b1a0 <memset>
  if(huart->Instance==USART2)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4a37      	ldr	r2, [pc, #220]	@ (8002768 <HAL_UART_MspInit+0x108>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d167      	bne.n	8002760 <HAL_UART_MspInit+0x100>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002690:	2302      	movs	r3, #2
 8002692:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002694:	2300      	movs	r3, #0
 8002696:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002698:	f107 0310 	add.w	r3, r7, #16
 800269c:	4618      	mov	r0, r3
 800269e:	f003 f837 	bl	8005710 <HAL_RCCEx_PeriphCLKConfig>
 80026a2:	4603      	mov	r3, r0
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d001      	beq.n	80026ac <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80026a8:	f7ff fd98 	bl	80021dc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80026ac:	4b2f      	ldr	r3, [pc, #188]	@ (800276c <HAL_UART_MspInit+0x10c>)
 80026ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026b0:	4a2e      	ldr	r2, [pc, #184]	@ (800276c <HAL_UART_MspInit+0x10c>)
 80026b2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80026b6:	6593      	str	r3, [r2, #88]	@ 0x58
 80026b8:	4b2c      	ldr	r3, [pc, #176]	@ (800276c <HAL_UART_MspInit+0x10c>)
 80026ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026c0:	60fb      	str	r3, [r7, #12]
 80026c2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026c4:	4b29      	ldr	r3, [pc, #164]	@ (800276c <HAL_UART_MspInit+0x10c>)
 80026c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026c8:	4a28      	ldr	r2, [pc, #160]	@ (800276c <HAL_UART_MspInit+0x10c>)
 80026ca:	f043 0301 	orr.w	r3, r3, #1
 80026ce:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80026d0:	4b26      	ldr	r3, [pc, #152]	@ (800276c <HAL_UART_MspInit+0x10c>)
 80026d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026d4:	f003 0301 	and.w	r3, r3, #1
 80026d8:	60bb      	str	r3, [r7, #8]
 80026da:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80026dc:	230c      	movs	r3, #12
 80026de:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026e0:	2302      	movs	r3, #2
 80026e2:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026e4:	2300      	movs	r3, #0
 80026e6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026e8:	2300      	movs	r3, #0
 80026ea:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80026ec:	2307      	movs	r3, #7
 80026ee:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026f0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80026f4:	4619      	mov	r1, r3
 80026f6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80026fa:	f002 f875 	bl	80047e8 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel1;
 80026fe:	4b1c      	ldr	r3, [pc, #112]	@ (8002770 <HAL_UART_MspInit+0x110>)
 8002700:	4a1c      	ldr	r2, [pc, #112]	@ (8002774 <HAL_UART_MspInit+0x114>)
 8002702:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8002704:	4b1a      	ldr	r3, [pc, #104]	@ (8002770 <HAL_UART_MspInit+0x110>)
 8002706:	221b      	movs	r2, #27
 8002708:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800270a:	4b19      	ldr	r3, [pc, #100]	@ (8002770 <HAL_UART_MspInit+0x110>)
 800270c:	2210      	movs	r2, #16
 800270e:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002710:	4b17      	ldr	r3, [pc, #92]	@ (8002770 <HAL_UART_MspInit+0x110>)
 8002712:	2200      	movs	r2, #0
 8002714:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002716:	4b16      	ldr	r3, [pc, #88]	@ (8002770 <HAL_UART_MspInit+0x110>)
 8002718:	2280      	movs	r2, #128	@ 0x80
 800271a:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800271c:	4b14      	ldr	r3, [pc, #80]	@ (8002770 <HAL_UART_MspInit+0x110>)
 800271e:	2200      	movs	r2, #0
 8002720:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002722:	4b13      	ldr	r3, [pc, #76]	@ (8002770 <HAL_UART_MspInit+0x110>)
 8002724:	2200      	movs	r2, #0
 8002726:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002728:	4b11      	ldr	r3, [pc, #68]	@ (8002770 <HAL_UART_MspInit+0x110>)
 800272a:	2200      	movs	r2, #0
 800272c:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800272e:	4b10      	ldr	r3, [pc, #64]	@ (8002770 <HAL_UART_MspInit+0x110>)
 8002730:	2200      	movs	r2, #0
 8002732:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002734:	480e      	ldr	r0, [pc, #56]	@ (8002770 <HAL_UART_MspInit+0x110>)
 8002736:	f001 fd19 	bl	800416c <HAL_DMA_Init>
 800273a:	4603      	mov	r3, r0
 800273c:	2b00      	cmp	r3, #0
 800273e:	d001      	beq.n	8002744 <HAL_UART_MspInit+0xe4>
    {
      Error_Handler();
 8002740:	f7ff fd4c 	bl	80021dc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	4a0a      	ldr	r2, [pc, #40]	@ (8002770 <HAL_UART_MspInit+0x110>)
 8002748:	67da      	str	r2, [r3, #124]	@ 0x7c
 800274a:	4a09      	ldr	r2, [pc, #36]	@ (8002770 <HAL_UART_MspInit+0x110>)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002750:	2200      	movs	r2, #0
 8002752:	2100      	movs	r1, #0
 8002754:	2026      	movs	r0, #38	@ 0x26
 8002756:	f001 fcd4 	bl	8004102 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800275a:	2026      	movs	r0, #38	@ 0x26
 800275c:	f001 fceb 	bl	8004136 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8002760:	bf00      	nop
 8002762:	3778      	adds	r7, #120	@ 0x78
 8002764:	46bd      	mov	sp, r7
 8002766:	bd80      	pop	{r7, pc}
 8002768:	40004400 	.word	0x40004400
 800276c:	40021000 	.word	0x40021000
 8002770:	20000964 	.word	0x20000964
 8002774:	40020008 	.word	0x40020008

08002778 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002778:	b480      	push	{r7}
 800277a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800277c:	bf00      	nop
 800277e:	e7fd      	b.n	800277c <NMI_Handler+0x4>

08002780 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002780:	b480      	push	{r7}
 8002782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002784:	bf00      	nop
 8002786:	e7fd      	b.n	8002784 <HardFault_Handler+0x4>

08002788 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002788:	b480      	push	{r7}
 800278a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800278c:	bf00      	nop
 800278e:	e7fd      	b.n	800278c <MemManage_Handler+0x4>

08002790 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002790:	b480      	push	{r7}
 8002792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002794:	bf00      	nop
 8002796:	e7fd      	b.n	8002794 <BusFault_Handler+0x4>

08002798 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002798:	b480      	push	{r7}
 800279a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800279c:	bf00      	nop
 800279e:	e7fd      	b.n	800279c <UsageFault_Handler+0x4>

080027a0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80027a0:	b480      	push	{r7}
 80027a2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80027a4:	bf00      	nop
 80027a6:	46bd      	mov	sp, r7
 80027a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ac:	4770      	bx	lr

080027ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80027ae:	b480      	push	{r7}
 80027b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80027b2:	bf00      	nop
 80027b4:	46bd      	mov	sp, r7
 80027b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ba:	4770      	bx	lr

080027bc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80027bc:	b480      	push	{r7}
 80027be:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80027c0:	bf00      	nop
 80027c2:	46bd      	mov	sp, r7
 80027c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c8:	4770      	bx	lr

080027ca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80027ca:	b580      	push	{r7, lr}
 80027cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80027ce:	f000 f8e1 	bl	8002994 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80027d2:	bf00      	nop
 80027d4:	bd80      	pop	{r7, pc}
	...

080027d8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80027dc:	4802      	ldr	r0, [pc, #8]	@ (80027e8 <DMA1_Channel1_IRQHandler+0x10>)
 80027de:	f001 fea8 	bl	8004532 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80027e2:	bf00      	nop
 80027e4:	bd80      	pop	{r7, pc}
 80027e6:	bf00      	nop
 80027e8:	20000964 	.word	0x20000964

080027ec <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Limit_Switch_pen_1_Pin);
 80027f0:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80027f4:	f002 f992 	bl	8004b1c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80027f8:	bf00      	nop
 80027fa:	bd80      	pop	{r7, pc}

080027fc <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002800:	4802      	ldr	r0, [pc, #8]	@ (800280c <TIM1_BRK_TIM15_IRQHandler+0x10>)
 8002802:	f003 ff45 	bl	8006690 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8002806:	bf00      	nop
 8002808:	bd80      	pop	{r7, pc}
 800280a:	bf00      	nop
 800280c:	20000304 	.word	0x20000304

08002810 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002814:	4803      	ldr	r0, [pc, #12]	@ (8002824 <TIM1_UP_TIM16_IRQHandler+0x14>)
 8002816:	f003 ff3b 	bl	8006690 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 800281a:	4803      	ldr	r0, [pc, #12]	@ (8002828 <TIM1_UP_TIM16_IRQHandler+0x18>)
 800281c:	f003 ff38 	bl	8006690 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8002820:	bf00      	nop
 8002822:	bd80      	pop	{r7, pc}
 8002824:	20000304 	.word	0x20000304
 8002828:	20000700 	.word	0x20000700

0800282c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002830:	4802      	ldr	r0, [pc, #8]	@ (800283c <USART2_IRQHandler+0x10>)
 8002832:	f005 fe3b 	bl	80084ac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002836:	bf00      	nop
 8002838:	bd80      	pop	{r7, pc}
 800283a:	bf00      	nop
 800283c:	20000898 	.word	0x20000898

08002840 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Limit_Switch_pen_2_Pin);
 8002844:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8002848:	f002 f968 	bl	8004b1c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Emergency_Pin);
 800284c:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8002850:	f002 f964 	bl	8004b1c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Proximity_sensor_Pin);
 8002854:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8002858:	f002 f960 	bl	8004b1c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Proximity_Sensor_Pin);
 800285c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002860:	f002 f95c 	bl	8004b1c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Limit_Switch_Prismatic1_Pin);
 8002864:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8002868:	f002 f958 	bl	8004b1c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Limit_Switch_Prismatic2_Pin);
 800286c:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8002870:	f002 f954 	bl	8004b1c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002874:	bf00      	nop
 8002876:	bd80      	pop	{r7, pc}

08002878 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002878:	b480      	push	{r7}
 800287a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800287c:	4b06      	ldr	r3, [pc, #24]	@ (8002898 <SystemInit+0x20>)
 800287e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002882:	4a05      	ldr	r2, [pc, #20]	@ (8002898 <SystemInit+0x20>)
 8002884:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002888:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800288c:	bf00      	nop
 800288e:	46bd      	mov	sp, r7
 8002890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002894:	4770      	bx	lr
 8002896:	bf00      	nop
 8002898:	e000ed00 	.word	0xe000ed00

0800289c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800289c:	480d      	ldr	r0, [pc, #52]	@ (80028d4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800289e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80028a0:	f7ff ffea 	bl	8002878 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80028a4:	480c      	ldr	r0, [pc, #48]	@ (80028d8 <LoopForever+0x6>)
  ldr r1, =_edata
 80028a6:	490d      	ldr	r1, [pc, #52]	@ (80028dc <LoopForever+0xa>)
  ldr r2, =_sidata
 80028a8:	4a0d      	ldr	r2, [pc, #52]	@ (80028e0 <LoopForever+0xe>)
  movs r3, #0
 80028aa:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80028ac:	e002      	b.n	80028b4 <LoopCopyDataInit>

080028ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80028ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80028b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80028b2:	3304      	adds	r3, #4

080028b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80028b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80028b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80028b8:	d3f9      	bcc.n	80028ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80028ba:	4a0a      	ldr	r2, [pc, #40]	@ (80028e4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80028bc:	4c0a      	ldr	r4, [pc, #40]	@ (80028e8 <LoopForever+0x16>)
  movs r3, #0
 80028be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80028c0:	e001      	b.n	80028c6 <LoopFillZerobss>

080028c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80028c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80028c4:	3204      	adds	r2, #4

080028c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80028c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80028c8:	d3fb      	bcc.n	80028c2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80028ca:	f008 fc71 	bl	800b1b0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80028ce:	f7fe fca1 	bl	8001214 <main>

080028d2 <LoopForever>:

LoopForever:
    b LoopForever
 80028d2:	e7fe      	b.n	80028d2 <LoopForever>
  ldr   r0, =_estack
 80028d4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80028d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80028dc:	2000020c 	.word	0x2000020c
  ldr r2, =_sidata
 80028e0:	0800b28c 	.word	0x0800b28c
  ldr r2, =_sbss
 80028e4:	2000020c 	.word	0x2000020c
  ldr r4, =_ebss
 80028e8:	200013c0 	.word	0x200013c0

080028ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80028ec:	e7fe      	b.n	80028ec <ADC1_2_IRQHandler>

080028ee <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80028ee:	b580      	push	{r7, lr}
 80028f0:	b082      	sub	sp, #8
 80028f2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80028f4:	2300      	movs	r3, #0
 80028f6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80028f8:	2003      	movs	r0, #3
 80028fa:	f001 fbf7 	bl	80040ec <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80028fe:	2000      	movs	r0, #0
 8002900:	f000 f80e 	bl	8002920 <HAL_InitTick>
 8002904:	4603      	mov	r3, r0
 8002906:	2b00      	cmp	r3, #0
 8002908:	d002      	beq.n	8002910 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800290a:	2301      	movs	r3, #1
 800290c:	71fb      	strb	r3, [r7, #7]
 800290e:	e001      	b.n	8002914 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002910:	f7ff fc6a 	bl	80021e8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002914:	79fb      	ldrb	r3, [r7, #7]

}
 8002916:	4618      	mov	r0, r3
 8002918:	3708      	adds	r7, #8
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}
	...

08002920 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b084      	sub	sp, #16
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002928:	2300      	movs	r3, #0
 800292a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800292c:	4b16      	ldr	r3, [pc, #88]	@ (8002988 <HAL_InitTick+0x68>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d022      	beq.n	800297a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002934:	4b15      	ldr	r3, [pc, #84]	@ (800298c <HAL_InitTick+0x6c>)
 8002936:	681a      	ldr	r2, [r3, #0]
 8002938:	4b13      	ldr	r3, [pc, #76]	@ (8002988 <HAL_InitTick+0x68>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002940:	fbb1 f3f3 	udiv	r3, r1, r3
 8002944:	fbb2 f3f3 	udiv	r3, r2, r3
 8002948:	4618      	mov	r0, r3
 800294a:	f001 fc02 	bl	8004152 <HAL_SYSTICK_Config>
 800294e:	4603      	mov	r3, r0
 8002950:	2b00      	cmp	r3, #0
 8002952:	d10f      	bne.n	8002974 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2b0f      	cmp	r3, #15
 8002958:	d809      	bhi.n	800296e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800295a:	2200      	movs	r2, #0
 800295c:	6879      	ldr	r1, [r7, #4]
 800295e:	f04f 30ff 	mov.w	r0, #4294967295
 8002962:	f001 fbce 	bl	8004102 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002966:	4a0a      	ldr	r2, [pc, #40]	@ (8002990 <HAL_InitTick+0x70>)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6013      	str	r3, [r2, #0]
 800296c:	e007      	b.n	800297e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800296e:	2301      	movs	r3, #1
 8002970:	73fb      	strb	r3, [r7, #15]
 8002972:	e004      	b.n	800297e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002974:	2301      	movs	r3, #1
 8002976:	73fb      	strb	r3, [r7, #15]
 8002978:	e001      	b.n	800297e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800297a:	2301      	movs	r3, #1
 800297c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800297e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002980:	4618      	mov	r0, r3
 8002982:	3710      	adds	r7, #16
 8002984:	46bd      	mov	sp, r7
 8002986:	bd80      	pop	{r7, pc}
 8002988:	20000208 	.word	0x20000208
 800298c:	20000200 	.word	0x20000200
 8002990:	20000204 	.word	0x20000204

08002994 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002994:	b480      	push	{r7}
 8002996:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002998:	4b05      	ldr	r3, [pc, #20]	@ (80029b0 <HAL_IncTick+0x1c>)
 800299a:	681a      	ldr	r2, [r3, #0]
 800299c:	4b05      	ldr	r3, [pc, #20]	@ (80029b4 <HAL_IncTick+0x20>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4413      	add	r3, r2
 80029a2:	4a03      	ldr	r2, [pc, #12]	@ (80029b0 <HAL_IncTick+0x1c>)
 80029a4:	6013      	str	r3, [r2, #0]
}
 80029a6:	bf00      	nop
 80029a8:	46bd      	mov	sp, r7
 80029aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ae:	4770      	bx	lr
 80029b0:	200013bc 	.word	0x200013bc
 80029b4:	20000208 	.word	0x20000208

080029b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80029b8:	b480      	push	{r7}
 80029ba:	af00      	add	r7, sp, #0
  return uwTick;
 80029bc:	4b03      	ldr	r3, [pc, #12]	@ (80029cc <HAL_GetTick+0x14>)
 80029be:	681b      	ldr	r3, [r3, #0]
}
 80029c0:	4618      	mov	r0, r3
 80029c2:	46bd      	mov	sp, r7
 80029c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c8:	4770      	bx	lr
 80029ca:	bf00      	nop
 80029cc:	200013bc 	.word	0x200013bc

080029d0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80029d0:	b480      	push	{r7}
 80029d2:	b083      	sub	sp, #12
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
 80029d8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	689b      	ldr	r3, [r3, #8]
 80029de:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	431a      	orrs	r2, r3
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	609a      	str	r2, [r3, #8]
}
 80029ea:	bf00      	nop
 80029ec:	370c      	adds	r7, #12
 80029ee:	46bd      	mov	sp, r7
 80029f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f4:	4770      	bx	lr

080029f6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80029f6:	b480      	push	{r7}
 80029f8:	b083      	sub	sp, #12
 80029fa:	af00      	add	r7, sp, #0
 80029fc:	6078      	str	r0, [r7, #4]
 80029fe:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	689b      	ldr	r3, [r3, #8]
 8002a04:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	431a      	orrs	r2, r3
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	609a      	str	r2, [r3, #8]
}
 8002a10:	bf00      	nop
 8002a12:	370c      	adds	r7, #12
 8002a14:	46bd      	mov	sp, r7
 8002a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1a:	4770      	bx	lr

08002a1c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b083      	sub	sp, #12
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	370c      	adds	r7, #12
 8002a30:	46bd      	mov	sp, r7
 8002a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a36:	4770      	bx	lr

08002a38 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	b087      	sub	sp, #28
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	60f8      	str	r0, [r7, #12]
 8002a40:	60b9      	str	r1, [r7, #8]
 8002a42:	607a      	str	r2, [r7, #4]
 8002a44:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	3360      	adds	r3, #96	@ 0x60
 8002a4a:	461a      	mov	r2, r3
 8002a4c:	68bb      	ldr	r3, [r7, #8]
 8002a4e:	009b      	lsls	r3, r3, #2
 8002a50:	4413      	add	r3, r2
 8002a52:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002a54:	697b      	ldr	r3, [r7, #20]
 8002a56:	681a      	ldr	r2, [r3, #0]
 8002a58:	4b08      	ldr	r3, [pc, #32]	@ (8002a7c <LL_ADC_SetOffset+0x44>)
 8002a5a:	4013      	ands	r3, r2
 8002a5c:	687a      	ldr	r2, [r7, #4]
 8002a5e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8002a62:	683a      	ldr	r2, [r7, #0]
 8002a64:	430a      	orrs	r2, r1
 8002a66:	4313      	orrs	r3, r2
 8002a68:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002a70:	bf00      	nop
 8002a72:	371c      	adds	r7, #28
 8002a74:	46bd      	mov	sp, r7
 8002a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7a:	4770      	bx	lr
 8002a7c:	03fff000 	.word	0x03fff000

08002a80 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002a80:	b480      	push	{r7}
 8002a82:	b085      	sub	sp, #20
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
 8002a88:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	3360      	adds	r3, #96	@ 0x60
 8002a8e:	461a      	mov	r2, r3
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	009b      	lsls	r3, r3, #2
 8002a94:	4413      	add	r3, r2
 8002a96:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	3714      	adds	r7, #20
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aaa:	4770      	bx	lr

08002aac <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002aac:	b480      	push	{r7}
 8002aae:	b087      	sub	sp, #28
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	60f8      	str	r0, [r7, #12]
 8002ab4:	60b9      	str	r1, [r7, #8]
 8002ab6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	3360      	adds	r3, #96	@ 0x60
 8002abc:	461a      	mov	r2, r3
 8002abe:	68bb      	ldr	r3, [r7, #8]
 8002ac0:	009b      	lsls	r3, r3, #2
 8002ac2:	4413      	add	r3, r2
 8002ac4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002ac6:	697b      	ldr	r3, [r7, #20]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	431a      	orrs	r2, r3
 8002ad2:	697b      	ldr	r3, [r7, #20]
 8002ad4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002ad6:	bf00      	nop
 8002ad8:	371c      	adds	r7, #28
 8002ada:	46bd      	mov	sp, r7
 8002adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae0:	4770      	bx	lr

08002ae2 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002ae2:	b480      	push	{r7}
 8002ae4:	b087      	sub	sp, #28
 8002ae6:	af00      	add	r7, sp, #0
 8002ae8:	60f8      	str	r0, [r7, #12]
 8002aea:	60b9      	str	r1, [r7, #8]
 8002aec:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	3360      	adds	r3, #96	@ 0x60
 8002af2:	461a      	mov	r2, r3
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	009b      	lsls	r3, r3, #2
 8002af8:	4413      	add	r3, r2
 8002afa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	431a      	orrs	r2, r3
 8002b08:	697b      	ldr	r3, [r7, #20]
 8002b0a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002b0c:	bf00      	nop
 8002b0e:	371c      	adds	r7, #28
 8002b10:	46bd      	mov	sp, r7
 8002b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b16:	4770      	bx	lr

08002b18 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b087      	sub	sp, #28
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	60f8      	str	r0, [r7, #12]
 8002b20:	60b9      	str	r1, [r7, #8]
 8002b22:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	3360      	adds	r3, #96	@ 0x60
 8002b28:	461a      	mov	r2, r3
 8002b2a:	68bb      	ldr	r3, [r7, #8]
 8002b2c:	009b      	lsls	r3, r3, #2
 8002b2e:	4413      	add	r3, r2
 8002b30:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	431a      	orrs	r2, r3
 8002b3e:	697b      	ldr	r3, [r7, #20]
 8002b40:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8002b42:	bf00      	nop
 8002b44:	371c      	adds	r7, #28
 8002b46:	46bd      	mov	sp, r7
 8002b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4c:	4770      	bx	lr

08002b4e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002b4e:	b480      	push	{r7}
 8002b50:	b083      	sub	sp, #12
 8002b52:	af00      	add	r7, sp, #0
 8002b54:	6078      	str	r0, [r7, #4]
 8002b56:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	695b      	ldr	r3, [r3, #20]
 8002b5c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	431a      	orrs	r2, r3
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	615a      	str	r2, [r3, #20]
}
 8002b68:	bf00      	nop
 8002b6a:	370c      	adds	r7, #12
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b72:	4770      	bx	lr

08002b74 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b087      	sub	sp, #28
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	60f8      	str	r0, [r7, #12]
 8002b7c:	60b9      	str	r1, [r7, #8]
 8002b7e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	3330      	adds	r3, #48	@ 0x30
 8002b84:	461a      	mov	r2, r3
 8002b86:	68bb      	ldr	r3, [r7, #8]
 8002b88:	0a1b      	lsrs	r3, r3, #8
 8002b8a:	009b      	lsls	r3, r3, #2
 8002b8c:	f003 030c 	and.w	r3, r3, #12
 8002b90:	4413      	add	r3, r2
 8002b92:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002b94:	697b      	ldr	r3, [r7, #20]
 8002b96:	681a      	ldr	r2, [r3, #0]
 8002b98:	68bb      	ldr	r3, [r7, #8]
 8002b9a:	f003 031f 	and.w	r3, r3, #31
 8002b9e:	211f      	movs	r1, #31
 8002ba0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ba4:	43db      	mvns	r3, r3
 8002ba6:	401a      	ands	r2, r3
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	0e9b      	lsrs	r3, r3, #26
 8002bac:	f003 011f 	and.w	r1, r3, #31
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	f003 031f 	and.w	r3, r3, #31
 8002bb6:	fa01 f303 	lsl.w	r3, r1, r3
 8002bba:	431a      	orrs	r2, r3
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002bc0:	bf00      	nop
 8002bc2:	371c      	adds	r7, #28
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bca:	4770      	bx	lr

08002bcc <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b087      	sub	sp, #28
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	60f8      	str	r0, [r7, #12]
 8002bd4:	60b9      	str	r1, [r7, #8]
 8002bd6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	3314      	adds	r3, #20
 8002bdc:	461a      	mov	r2, r3
 8002bde:	68bb      	ldr	r3, [r7, #8]
 8002be0:	0e5b      	lsrs	r3, r3, #25
 8002be2:	009b      	lsls	r3, r3, #2
 8002be4:	f003 0304 	and.w	r3, r3, #4
 8002be8:	4413      	add	r3, r2
 8002bea:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002bec:	697b      	ldr	r3, [r7, #20]
 8002bee:	681a      	ldr	r2, [r3, #0]
 8002bf0:	68bb      	ldr	r3, [r7, #8]
 8002bf2:	0d1b      	lsrs	r3, r3, #20
 8002bf4:	f003 031f 	and.w	r3, r3, #31
 8002bf8:	2107      	movs	r1, #7
 8002bfa:	fa01 f303 	lsl.w	r3, r1, r3
 8002bfe:	43db      	mvns	r3, r3
 8002c00:	401a      	ands	r2, r3
 8002c02:	68bb      	ldr	r3, [r7, #8]
 8002c04:	0d1b      	lsrs	r3, r3, #20
 8002c06:	f003 031f 	and.w	r3, r3, #31
 8002c0a:	6879      	ldr	r1, [r7, #4]
 8002c0c:	fa01 f303 	lsl.w	r3, r1, r3
 8002c10:	431a      	orrs	r2, r3
 8002c12:	697b      	ldr	r3, [r7, #20]
 8002c14:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002c16:	bf00      	nop
 8002c18:	371c      	adds	r7, #28
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c20:	4770      	bx	lr
	...

08002c24 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b085      	sub	sp, #20
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	60f8      	str	r0, [r7, #12]
 8002c2c:	60b9      	str	r1, [r7, #8]
 8002c2e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002c36:	68bb      	ldr	r3, [r7, #8]
 8002c38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c3c:	43db      	mvns	r3, r3
 8002c3e:	401a      	ands	r2, r3
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	f003 0318 	and.w	r3, r3, #24
 8002c46:	4908      	ldr	r1, [pc, #32]	@ (8002c68 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002c48:	40d9      	lsrs	r1, r3
 8002c4a:	68bb      	ldr	r3, [r7, #8]
 8002c4c:	400b      	ands	r3, r1
 8002c4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c52:	431a      	orrs	r2, r3
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002c5a:	bf00      	nop
 8002c5c:	3714      	adds	r7, #20
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c64:	4770      	bx	lr
 8002c66:	bf00      	nop
 8002c68:	0007ffff 	.word	0x0007ffff

08002c6c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b083      	sub	sp, #12
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	689b      	ldr	r3, [r3, #8]
 8002c78:	f003 031f 	and.w	r3, r3, #31
}
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	370c      	adds	r7, #12
 8002c80:	46bd      	mov	sp, r7
 8002c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c86:	4770      	bx	lr

08002c88 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b083      	sub	sp, #12
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	689b      	ldr	r3, [r3, #8]
 8002c94:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002c98:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002c9c:	687a      	ldr	r2, [r7, #4]
 8002c9e:	6093      	str	r3, [r2, #8]
}
 8002ca0:	bf00      	nop
 8002ca2:	370c      	adds	r7, #12
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002caa:	4770      	bx	lr

08002cac <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002cac:	b480      	push	{r7}
 8002cae:	b083      	sub	sp, #12
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	689b      	ldr	r3, [r3, #8]
 8002cb8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002cbc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002cc0:	d101      	bne.n	8002cc6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	e000      	b.n	8002cc8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002cc6:	2300      	movs	r3, #0
}
 8002cc8:	4618      	mov	r0, r3
 8002cca:	370c      	adds	r7, #12
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd2:	4770      	bx	lr

08002cd4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b083      	sub	sp, #12
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	689b      	ldr	r3, [r3, #8]
 8002ce0:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002ce4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002ce8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002cf0:	bf00      	nop
 8002cf2:	370c      	adds	r7, #12
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfa:	4770      	bx	lr

08002cfc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	b083      	sub	sp, #12
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	689b      	ldr	r3, [r3, #8]
 8002d08:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d0c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002d10:	d101      	bne.n	8002d16 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002d12:	2301      	movs	r3, #1
 8002d14:	e000      	b.n	8002d18 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002d16:	2300      	movs	r3, #0
}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	370c      	adds	r7, #12
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d22:	4770      	bx	lr

08002d24 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b083      	sub	sp, #12
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	689b      	ldr	r3, [r3, #8]
 8002d30:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002d34:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002d38:	f043 0201 	orr.w	r2, r3, #1
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002d40:	bf00      	nop
 8002d42:	370c      	adds	r7, #12
 8002d44:	46bd      	mov	sp, r7
 8002d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4a:	4770      	bx	lr

08002d4c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b083      	sub	sp, #12
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	689b      	ldr	r3, [r3, #8]
 8002d58:	f003 0301 	and.w	r3, r3, #1
 8002d5c:	2b01      	cmp	r3, #1
 8002d5e:	d101      	bne.n	8002d64 <LL_ADC_IsEnabled+0x18>
 8002d60:	2301      	movs	r3, #1
 8002d62:	e000      	b.n	8002d66 <LL_ADC_IsEnabled+0x1a>
 8002d64:	2300      	movs	r3, #0
}
 8002d66:	4618      	mov	r0, r3
 8002d68:	370c      	adds	r7, #12
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d70:	4770      	bx	lr

08002d72 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002d72:	b480      	push	{r7}
 8002d74:	b083      	sub	sp, #12
 8002d76:	af00      	add	r7, sp, #0
 8002d78:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	689b      	ldr	r3, [r3, #8]
 8002d7e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002d82:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002d86:	f043 0204 	orr.w	r2, r3, #4
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002d8e:	bf00      	nop
 8002d90:	370c      	adds	r7, #12
 8002d92:	46bd      	mov	sp, r7
 8002d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d98:	4770      	bx	lr

08002d9a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002d9a:	b480      	push	{r7}
 8002d9c:	b083      	sub	sp, #12
 8002d9e:	af00      	add	r7, sp, #0
 8002da0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	f003 0304 	and.w	r3, r3, #4
 8002daa:	2b04      	cmp	r3, #4
 8002dac:	d101      	bne.n	8002db2 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002dae:	2301      	movs	r3, #1
 8002db0:	e000      	b.n	8002db4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002db2:	2300      	movs	r3, #0
}
 8002db4:	4618      	mov	r0, r3
 8002db6:	370c      	adds	r7, #12
 8002db8:	46bd      	mov	sp, r7
 8002dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbe:	4770      	bx	lr

08002dc0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b083      	sub	sp, #12
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	689b      	ldr	r3, [r3, #8]
 8002dcc:	f003 0308 	and.w	r3, r3, #8
 8002dd0:	2b08      	cmp	r3, #8
 8002dd2:	d101      	bne.n	8002dd8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	e000      	b.n	8002dda <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002dd8:	2300      	movs	r3, #0
}
 8002dda:	4618      	mov	r0, r3
 8002ddc:	370c      	adds	r7, #12
 8002dde:	46bd      	mov	sp, r7
 8002de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de4:	4770      	bx	lr
	...

08002de8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002de8:	b590      	push	{r4, r7, lr}
 8002dea:	b089      	sub	sp, #36	@ 0x24
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002df0:	2300      	movs	r3, #0
 8002df2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002df4:	2300      	movs	r3, #0
 8002df6:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d101      	bne.n	8002e02 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	e1a9      	b.n	8003156 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	695b      	ldr	r3, [r3, #20]
 8002e06:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d109      	bne.n	8002e24 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002e10:	6878      	ldr	r0, [r7, #4]
 8002e12:	f7ff fa0d 	bl	8002230 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f7ff ff3f 	bl	8002cac <LL_ADC_IsDeepPowerDownEnabled>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d004      	beq.n	8002e3e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4618      	mov	r0, r3
 8002e3a:	f7ff ff25 	bl	8002c88 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4618      	mov	r0, r3
 8002e44:	f7ff ff5a 	bl	8002cfc <LL_ADC_IsInternalRegulatorEnabled>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d115      	bne.n	8002e7a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4618      	mov	r0, r3
 8002e54:	f7ff ff3e 	bl	8002cd4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002e58:	4b9c      	ldr	r3, [pc, #624]	@ (80030cc <HAL_ADC_Init+0x2e4>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	099b      	lsrs	r3, r3, #6
 8002e5e:	4a9c      	ldr	r2, [pc, #624]	@ (80030d0 <HAL_ADC_Init+0x2e8>)
 8002e60:	fba2 2303 	umull	r2, r3, r2, r3
 8002e64:	099b      	lsrs	r3, r3, #6
 8002e66:	3301      	adds	r3, #1
 8002e68:	005b      	lsls	r3, r3, #1
 8002e6a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002e6c:	e002      	b.n	8002e74 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	3b01      	subs	r3, #1
 8002e72:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d1f9      	bne.n	8002e6e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f7ff ff3c 	bl	8002cfc <LL_ADC_IsInternalRegulatorEnabled>
 8002e84:	4603      	mov	r3, r0
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d10d      	bne.n	8002ea6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e8e:	f043 0210 	orr.w	r2, r3, #16
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e9a:	f043 0201 	orr.w	r2, r3, #1
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f7ff ff75 	bl	8002d9a <LL_ADC_REG_IsConversionOngoing>
 8002eb0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002eb6:	f003 0310 	and.w	r3, r3, #16
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	f040 8142 	bne.w	8003144 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	f040 813e 	bne.w	8003144 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ecc:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002ed0:	f043 0202 	orr.w	r2, r3, #2
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4618      	mov	r0, r3
 8002ede:	f7ff ff35 	bl	8002d4c <LL_ADC_IsEnabled>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d141      	bne.n	8002f6c <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002ef0:	d004      	beq.n	8002efc <HAL_ADC_Init+0x114>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a77      	ldr	r2, [pc, #476]	@ (80030d4 <HAL_ADC_Init+0x2ec>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d10f      	bne.n	8002f1c <HAL_ADC_Init+0x134>
 8002efc:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002f00:	f7ff ff24 	bl	8002d4c <LL_ADC_IsEnabled>
 8002f04:	4604      	mov	r4, r0
 8002f06:	4873      	ldr	r0, [pc, #460]	@ (80030d4 <HAL_ADC_Init+0x2ec>)
 8002f08:	f7ff ff20 	bl	8002d4c <LL_ADC_IsEnabled>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	4323      	orrs	r3, r4
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	bf0c      	ite	eq
 8002f14:	2301      	moveq	r3, #1
 8002f16:	2300      	movne	r3, #0
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	e012      	b.n	8002f42 <HAL_ADC_Init+0x15a>
 8002f1c:	486e      	ldr	r0, [pc, #440]	@ (80030d8 <HAL_ADC_Init+0x2f0>)
 8002f1e:	f7ff ff15 	bl	8002d4c <LL_ADC_IsEnabled>
 8002f22:	4604      	mov	r4, r0
 8002f24:	486d      	ldr	r0, [pc, #436]	@ (80030dc <HAL_ADC_Init+0x2f4>)
 8002f26:	f7ff ff11 	bl	8002d4c <LL_ADC_IsEnabled>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	431c      	orrs	r4, r3
 8002f2e:	486c      	ldr	r0, [pc, #432]	@ (80030e0 <HAL_ADC_Init+0x2f8>)
 8002f30:	f7ff ff0c 	bl	8002d4c <LL_ADC_IsEnabled>
 8002f34:	4603      	mov	r3, r0
 8002f36:	4323      	orrs	r3, r4
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	bf0c      	ite	eq
 8002f3c:	2301      	moveq	r3, #1
 8002f3e:	2300      	movne	r3, #0
 8002f40:	b2db      	uxtb	r3, r3
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d012      	beq.n	8002f6c <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002f4e:	d004      	beq.n	8002f5a <HAL_ADC_Init+0x172>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a5f      	ldr	r2, [pc, #380]	@ (80030d4 <HAL_ADC_Init+0x2ec>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d101      	bne.n	8002f5e <HAL_ADC_Init+0x176>
 8002f5a:	4a62      	ldr	r2, [pc, #392]	@ (80030e4 <HAL_ADC_Init+0x2fc>)
 8002f5c:	e000      	b.n	8002f60 <HAL_ADC_Init+0x178>
 8002f5e:	4a62      	ldr	r2, [pc, #392]	@ (80030e8 <HAL_ADC_Init+0x300>)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	4619      	mov	r1, r3
 8002f66:	4610      	mov	r0, r2
 8002f68:	f7ff fd32 	bl	80029d0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	7f5b      	ldrb	r3, [r3, #29]
 8002f70:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002f76:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002f7c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002f82:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002f8a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002f96:	2b01      	cmp	r3, #1
 8002f98:	d106      	bne.n	8002fa8 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f9e:	3b01      	subs	r3, #1
 8002fa0:	045b      	lsls	r3, r3, #17
 8002fa2:	69ba      	ldr	r2, [r7, #24]
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d009      	beq.n	8002fc4 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fb4:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fbc:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002fbe:	69ba      	ldr	r2, [r7, #24]
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	68da      	ldr	r2, [r3, #12]
 8002fca:	4b48      	ldr	r3, [pc, #288]	@ (80030ec <HAL_ADC_Init+0x304>)
 8002fcc:	4013      	ands	r3, r2
 8002fce:	687a      	ldr	r2, [r7, #4]
 8002fd0:	6812      	ldr	r2, [r2, #0]
 8002fd2:	69b9      	ldr	r1, [r7, #24]
 8002fd4:	430b      	orrs	r3, r1
 8002fd6:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	691b      	ldr	r3, [r3, #16]
 8002fde:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	430a      	orrs	r2, r1
 8002fec:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f7ff fee4 	bl	8002dc0 <LL_ADC_INJ_IsConversionOngoing>
 8002ff8:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002ffa:	697b      	ldr	r3, [r7, #20]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d17f      	bne.n	8003100 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003000:	693b      	ldr	r3, [r7, #16]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d17c      	bne.n	8003100 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800300a:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003012:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003014:	4313      	orrs	r3, r2
 8003016:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	68db      	ldr	r3, [r3, #12]
 800301e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003022:	f023 0302 	bic.w	r3, r3, #2
 8003026:	687a      	ldr	r2, [r7, #4]
 8003028:	6812      	ldr	r2, [r2, #0]
 800302a:	69b9      	ldr	r1, [r7, #24]
 800302c:	430b      	orrs	r3, r1
 800302e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	691b      	ldr	r3, [r3, #16]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d017      	beq.n	8003068 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	691a      	ldr	r2, [r3, #16]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8003046:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003050:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003054:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003058:	687a      	ldr	r2, [r7, #4]
 800305a:	6911      	ldr	r1, [r2, #16]
 800305c:	687a      	ldr	r2, [r7, #4]
 800305e:	6812      	ldr	r2, [r2, #0]
 8003060:	430b      	orrs	r3, r1
 8003062:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8003066:	e013      	b.n	8003090 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	691a      	ldr	r2, [r3, #16]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8003076:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003080:	687a      	ldr	r2, [r7, #4]
 8003082:	6812      	ldr	r2, [r2, #0]
 8003084:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003088:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800308c:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003096:	2b01      	cmp	r3, #1
 8003098:	d12a      	bne.n	80030f0 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	691b      	ldr	r3, [r3, #16]
 80030a0:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80030a4:	f023 0304 	bic.w	r3, r3, #4
 80030a8:	687a      	ldr	r2, [r7, #4]
 80030aa:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 80030ac:	687a      	ldr	r2, [r7, #4]
 80030ae:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80030b0:	4311      	orrs	r1, r2
 80030b2:	687a      	ldr	r2, [r7, #4]
 80030b4:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80030b6:	4311      	orrs	r1, r2
 80030b8:	687a      	ldr	r2, [r7, #4]
 80030ba:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80030bc:	430a      	orrs	r2, r1
 80030be:	431a      	orrs	r2, r3
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f042 0201 	orr.w	r2, r2, #1
 80030c8:	611a      	str	r2, [r3, #16]
 80030ca:	e019      	b.n	8003100 <HAL_ADC_Init+0x318>
 80030cc:	20000200 	.word	0x20000200
 80030d0:	053e2d63 	.word	0x053e2d63
 80030d4:	50000100 	.word	0x50000100
 80030d8:	50000400 	.word	0x50000400
 80030dc:	50000500 	.word	0x50000500
 80030e0:	50000600 	.word	0x50000600
 80030e4:	50000300 	.word	0x50000300
 80030e8:	50000700 	.word	0x50000700
 80030ec:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	691a      	ldr	r2, [r3, #16]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f022 0201 	bic.w	r2, r2, #1
 80030fe:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	695b      	ldr	r3, [r3, #20]
 8003104:	2b01      	cmp	r3, #1
 8003106:	d10c      	bne.n	8003122 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800310e:	f023 010f 	bic.w	r1, r3, #15
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6a1b      	ldr	r3, [r3, #32]
 8003116:	1e5a      	subs	r2, r3, #1
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	430a      	orrs	r2, r1
 800311e:	631a      	str	r2, [r3, #48]	@ 0x30
 8003120:	e007      	b.n	8003132 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f022 020f 	bic.w	r2, r2, #15
 8003130:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003136:	f023 0303 	bic.w	r3, r3, #3
 800313a:	f043 0201 	orr.w	r2, r3, #1
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003142:	e007      	b.n	8003154 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003148:	f043 0210 	orr.w	r2, r3, #16
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003150:	2301      	movs	r3, #1
 8003152:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003154:	7ffb      	ldrb	r3, [r7, #31]
}
 8003156:	4618      	mov	r0, r3
 8003158:	3724      	adds	r7, #36	@ 0x24
 800315a:	46bd      	mov	sp, r7
 800315c:	bd90      	pop	{r4, r7, pc}
 800315e:	bf00      	nop

08003160 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b086      	sub	sp, #24
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003170:	d004      	beq.n	800317c <HAL_ADC_Start+0x1c>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a67      	ldr	r2, [pc, #412]	@ (8003314 <HAL_ADC_Start+0x1b4>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d101      	bne.n	8003180 <HAL_ADC_Start+0x20>
 800317c:	4b66      	ldr	r3, [pc, #408]	@ (8003318 <HAL_ADC_Start+0x1b8>)
 800317e:	e000      	b.n	8003182 <HAL_ADC_Start+0x22>
 8003180:	4b66      	ldr	r3, [pc, #408]	@ (800331c <HAL_ADC_Start+0x1bc>)
 8003182:	4618      	mov	r0, r3
 8003184:	f7ff fd72 	bl	8002c6c <LL_ADC_GetMultimode>
 8003188:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4618      	mov	r0, r3
 8003190:	f7ff fe03 	bl	8002d9a <LL_ADC_REG_IsConversionOngoing>
 8003194:	4603      	mov	r3, r0
 8003196:	2b00      	cmp	r3, #0
 8003198:	f040 80b4 	bne.w	8003304 <HAL_ADC_Start+0x1a4>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80031a2:	2b01      	cmp	r3, #1
 80031a4:	d101      	bne.n	80031aa <HAL_ADC_Start+0x4a>
 80031a6:	2302      	movs	r3, #2
 80031a8:	e0af      	b.n	800330a <HAL_ADC_Start+0x1aa>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2201      	movs	r2, #1
 80031ae:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80031b2:	6878      	ldr	r0, [r7, #4]
 80031b4:	f000 fd06 	bl	8003bc4 <ADC_Enable>
 80031b8:	4603      	mov	r3, r0
 80031ba:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80031bc:	7dfb      	ldrb	r3, [r7, #23]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	f040 809b 	bne.w	80032fa <HAL_ADC_Start+0x19a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031c8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80031cc:	f023 0301 	bic.w	r3, r3, #1
 80031d0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a4d      	ldr	r2, [pc, #308]	@ (8003314 <HAL_ADC_Start+0x1b4>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d009      	beq.n	80031f6 <HAL_ADC_Start+0x96>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4a4e      	ldr	r2, [pc, #312]	@ (8003320 <HAL_ADC_Start+0x1c0>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d002      	beq.n	80031f2 <HAL_ADC_Start+0x92>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	e003      	b.n	80031fa <HAL_ADC_Start+0x9a>
 80031f2:	4b4c      	ldr	r3, [pc, #304]	@ (8003324 <HAL_ADC_Start+0x1c4>)
 80031f4:	e001      	b.n	80031fa <HAL_ADC_Start+0x9a>
 80031f6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80031fa:	687a      	ldr	r2, [r7, #4]
 80031fc:	6812      	ldr	r2, [r2, #0]
 80031fe:	4293      	cmp	r3, r2
 8003200:	d002      	beq.n	8003208 <HAL_ADC_Start+0xa8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003202:	693b      	ldr	r3, [r7, #16]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d105      	bne.n	8003214 <HAL_ADC_Start+0xb4>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800320c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003218:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800321c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003220:	d106      	bne.n	8003230 <HAL_ADC_Start+0xd0>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003226:	f023 0206 	bic.w	r2, r3, #6
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	661a      	str	r2, [r3, #96]	@ 0x60
 800322e:	e002      	b.n	8003236 <HAL_ADC_Start+0xd6>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2200      	movs	r2, #0
 8003234:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	221c      	movs	r2, #28
 800323c:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2200      	movs	r2, #0
 8003242:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a32      	ldr	r2, [pc, #200]	@ (8003314 <HAL_ADC_Start+0x1b4>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d009      	beq.n	8003264 <HAL_ADC_Start+0x104>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a32      	ldr	r2, [pc, #200]	@ (8003320 <HAL_ADC_Start+0x1c0>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d002      	beq.n	8003260 <HAL_ADC_Start+0x100>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	e003      	b.n	8003268 <HAL_ADC_Start+0x108>
 8003260:	4b30      	ldr	r3, [pc, #192]	@ (8003324 <HAL_ADC_Start+0x1c4>)
 8003262:	e001      	b.n	8003268 <HAL_ADC_Start+0x108>
 8003264:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003268:	687a      	ldr	r2, [r7, #4]
 800326a:	6812      	ldr	r2, [r2, #0]
 800326c:	4293      	cmp	r3, r2
 800326e:	d008      	beq.n	8003282 <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003270:	693b      	ldr	r3, [r7, #16]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d005      	beq.n	8003282 <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003276:	693b      	ldr	r3, [r7, #16]
 8003278:	2b05      	cmp	r3, #5
 800327a:	d002      	beq.n	8003282 <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800327c:	693b      	ldr	r3, [r7, #16]
 800327e:	2b09      	cmp	r3, #9
 8003280:	d114      	bne.n	80032ac <HAL_ADC_Start+0x14c>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	68db      	ldr	r3, [r3, #12]
 8003288:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800328c:	2b00      	cmp	r3, #0
 800328e:	d007      	beq.n	80032a0 <HAL_ADC_Start+0x140>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003294:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003298:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4618      	mov	r0, r3
 80032a6:	f7ff fd64 	bl	8002d72 <LL_ADC_REG_StartConversion>
 80032aa:	e02d      	b.n	8003308 <HAL_ADC_Start+0x1a8>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032b0:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a15      	ldr	r2, [pc, #84]	@ (8003314 <HAL_ADC_Start+0x1b4>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d009      	beq.n	80032d6 <HAL_ADC_Start+0x176>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4a16      	ldr	r2, [pc, #88]	@ (8003320 <HAL_ADC_Start+0x1c0>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d002      	beq.n	80032d2 <HAL_ADC_Start+0x172>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	e003      	b.n	80032da <HAL_ADC_Start+0x17a>
 80032d2:	4b14      	ldr	r3, [pc, #80]	@ (8003324 <HAL_ADC_Start+0x1c4>)
 80032d4:	e001      	b.n	80032da <HAL_ADC_Start+0x17a>
 80032d6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80032da:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	68db      	ldr	r3, [r3, #12]
 80032e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d00f      	beq.n	8003308 <HAL_ADC_Start+0x1a8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032ec:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80032f0:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	65da      	str	r2, [r3, #92]	@ 0x5c
 80032f8:	e006      	b.n	8003308 <HAL_ADC_Start+0x1a8>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2200      	movs	r2, #0
 80032fe:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8003302:	e001      	b.n	8003308 <HAL_ADC_Start+0x1a8>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003304:	2302      	movs	r3, #2
 8003306:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003308:	7dfb      	ldrb	r3, [r7, #23]
}
 800330a:	4618      	mov	r0, r3
 800330c:	3718      	adds	r7, #24
 800330e:	46bd      	mov	sp, r7
 8003310:	bd80      	pop	{r7, pc}
 8003312:	bf00      	nop
 8003314:	50000100 	.word	0x50000100
 8003318:	50000300 	.word	0x50000300
 800331c:	50000700 	.word	0x50000700
 8003320:	50000500 	.word	0x50000500
 8003324:	50000400 	.word	0x50000400

08003328 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8003328:	b480      	push	{r7}
 800332a:	b083      	sub	sp, #12
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8003336:	4618      	mov	r0, r3
 8003338:	370c      	adds	r7, #12
 800333a:	46bd      	mov	sp, r7
 800333c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003340:	4770      	bx	lr
	...

08003344 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b0b6      	sub	sp, #216	@ 0xd8
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
 800334c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800334e:	2300      	movs	r3, #0
 8003350:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003354:	2300      	movs	r3, #0
 8003356:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800335e:	2b01      	cmp	r3, #1
 8003360:	d102      	bne.n	8003368 <HAL_ADC_ConfigChannel+0x24>
 8003362:	2302      	movs	r3, #2
 8003364:	f000 bc13 	b.w	8003b8e <HAL_ADC_ConfigChannel+0x84a>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2201      	movs	r2, #1
 800336c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4618      	mov	r0, r3
 8003376:	f7ff fd10 	bl	8002d9a <LL_ADC_REG_IsConversionOngoing>
 800337a:	4603      	mov	r3, r0
 800337c:	2b00      	cmp	r3, #0
 800337e:	f040 83f3 	bne.w	8003b68 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6818      	ldr	r0, [r3, #0]
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	6859      	ldr	r1, [r3, #4]
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	461a      	mov	r2, r3
 8003390:	f7ff fbf0 	bl	8002b74 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4618      	mov	r0, r3
 800339a:	f7ff fcfe 	bl	8002d9a <LL_ADC_REG_IsConversionOngoing>
 800339e:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4618      	mov	r0, r3
 80033a8:	f7ff fd0a 	bl	8002dc0 <LL_ADC_INJ_IsConversionOngoing>
 80033ac:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80033b0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	f040 81d9 	bne.w	800376c <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80033ba:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80033be:	2b00      	cmp	r3, #0
 80033c0:	f040 81d4 	bne.w	800376c <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	689b      	ldr	r3, [r3, #8]
 80033c8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80033cc:	d10f      	bne.n	80033ee <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6818      	ldr	r0, [r3, #0]
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	2200      	movs	r2, #0
 80033d8:	4619      	mov	r1, r3
 80033da:	f7ff fbf7 	bl	8002bcc <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80033e6:	4618      	mov	r0, r3
 80033e8:	f7ff fbb1 	bl	8002b4e <LL_ADC_SetSamplingTimeCommonConfig>
 80033ec:	e00e      	b.n	800340c <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6818      	ldr	r0, [r3, #0]
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	6819      	ldr	r1, [r3, #0]
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	689b      	ldr	r3, [r3, #8]
 80033fa:	461a      	mov	r2, r3
 80033fc:	f7ff fbe6 	bl	8002bcc <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	2100      	movs	r1, #0
 8003406:	4618      	mov	r0, r3
 8003408:	f7ff fba1 	bl	8002b4e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	695a      	ldr	r2, [r3, #20]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	68db      	ldr	r3, [r3, #12]
 8003416:	08db      	lsrs	r3, r3, #3
 8003418:	f003 0303 	and.w	r3, r3, #3
 800341c:	005b      	lsls	r3, r3, #1
 800341e:	fa02 f303 	lsl.w	r3, r2, r3
 8003422:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	691b      	ldr	r3, [r3, #16]
 800342a:	2b04      	cmp	r3, #4
 800342c:	d022      	beq.n	8003474 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6818      	ldr	r0, [r3, #0]
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	6919      	ldr	r1, [r3, #16]
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	681a      	ldr	r2, [r3, #0]
 800343a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800343e:	f7ff fafb 	bl	8002a38 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6818      	ldr	r0, [r3, #0]
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	6919      	ldr	r1, [r3, #16]
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	699b      	ldr	r3, [r3, #24]
 800344e:	461a      	mov	r2, r3
 8003450:	f7ff fb47 	bl	8002ae2 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6818      	ldr	r0, [r3, #0]
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003460:	2b01      	cmp	r3, #1
 8003462:	d102      	bne.n	800346a <HAL_ADC_ConfigChannel+0x126>
 8003464:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003468:	e000      	b.n	800346c <HAL_ADC_ConfigChannel+0x128>
 800346a:	2300      	movs	r3, #0
 800346c:	461a      	mov	r2, r3
 800346e:	f7ff fb53 	bl	8002b18 <LL_ADC_SetOffsetSaturation>
 8003472:	e17b      	b.n	800376c <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	2100      	movs	r1, #0
 800347a:	4618      	mov	r0, r3
 800347c:	f7ff fb00 	bl	8002a80 <LL_ADC_GetOffsetChannel>
 8003480:	4603      	mov	r3, r0
 8003482:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003486:	2b00      	cmp	r3, #0
 8003488:	d10a      	bne.n	80034a0 <HAL_ADC_ConfigChannel+0x15c>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	2100      	movs	r1, #0
 8003490:	4618      	mov	r0, r3
 8003492:	f7ff faf5 	bl	8002a80 <LL_ADC_GetOffsetChannel>
 8003496:	4603      	mov	r3, r0
 8003498:	0e9b      	lsrs	r3, r3, #26
 800349a:	f003 021f 	and.w	r2, r3, #31
 800349e:	e01e      	b.n	80034de <HAL_ADC_ConfigChannel+0x19a>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	2100      	movs	r1, #0
 80034a6:	4618      	mov	r0, r3
 80034a8:	f7ff faea 	bl	8002a80 <LL_ADC_GetOffsetChannel>
 80034ac:	4603      	mov	r3, r0
 80034ae:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034b2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80034b6:	fa93 f3a3 	rbit	r3, r3
 80034ba:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80034be:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80034c2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80034c6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d101      	bne.n	80034d2 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 80034ce:	2320      	movs	r3, #32
 80034d0:	e004      	b.n	80034dc <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 80034d2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80034d6:	fab3 f383 	clz	r3, r3
 80034da:	b2db      	uxtb	r3, r3
 80034dc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d105      	bne.n	80034f6 <HAL_ADC_ConfigChannel+0x1b2>
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	0e9b      	lsrs	r3, r3, #26
 80034f0:	f003 031f 	and.w	r3, r3, #31
 80034f4:	e018      	b.n	8003528 <HAL_ADC_ConfigChannel+0x1e4>
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034fe:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003502:	fa93 f3a3 	rbit	r3, r3
 8003506:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 800350a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800350e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8003512:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003516:	2b00      	cmp	r3, #0
 8003518:	d101      	bne.n	800351e <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 800351a:	2320      	movs	r3, #32
 800351c:	e004      	b.n	8003528 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 800351e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003522:	fab3 f383 	clz	r3, r3
 8003526:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003528:	429a      	cmp	r2, r3
 800352a:	d106      	bne.n	800353a <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	2200      	movs	r2, #0
 8003532:	2100      	movs	r1, #0
 8003534:	4618      	mov	r0, r3
 8003536:	f7ff fab9 	bl	8002aac <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	2101      	movs	r1, #1
 8003540:	4618      	mov	r0, r3
 8003542:	f7ff fa9d 	bl	8002a80 <LL_ADC_GetOffsetChannel>
 8003546:	4603      	mov	r3, r0
 8003548:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800354c:	2b00      	cmp	r3, #0
 800354e:	d10a      	bne.n	8003566 <HAL_ADC_ConfigChannel+0x222>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	2101      	movs	r1, #1
 8003556:	4618      	mov	r0, r3
 8003558:	f7ff fa92 	bl	8002a80 <LL_ADC_GetOffsetChannel>
 800355c:	4603      	mov	r3, r0
 800355e:	0e9b      	lsrs	r3, r3, #26
 8003560:	f003 021f 	and.w	r2, r3, #31
 8003564:	e01e      	b.n	80035a4 <HAL_ADC_ConfigChannel+0x260>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	2101      	movs	r1, #1
 800356c:	4618      	mov	r0, r3
 800356e:	f7ff fa87 	bl	8002a80 <LL_ADC_GetOffsetChannel>
 8003572:	4603      	mov	r3, r0
 8003574:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003578:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800357c:	fa93 f3a3 	rbit	r3, r3
 8003580:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8003584:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003588:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 800358c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003590:	2b00      	cmp	r3, #0
 8003592:	d101      	bne.n	8003598 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8003594:	2320      	movs	r3, #32
 8003596:	e004      	b.n	80035a2 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8003598:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800359c:	fab3 f383 	clz	r3, r3
 80035a0:	b2db      	uxtb	r3, r3
 80035a2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d105      	bne.n	80035bc <HAL_ADC_ConfigChannel+0x278>
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	0e9b      	lsrs	r3, r3, #26
 80035b6:	f003 031f 	and.w	r3, r3, #31
 80035ba:	e018      	b.n	80035ee <HAL_ADC_ConfigChannel+0x2aa>
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80035c8:	fa93 f3a3 	rbit	r3, r3
 80035cc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 80035d0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80035d4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 80035d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d101      	bne.n	80035e4 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 80035e0:	2320      	movs	r3, #32
 80035e2:	e004      	b.n	80035ee <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 80035e4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80035e8:	fab3 f383 	clz	r3, r3
 80035ec:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80035ee:	429a      	cmp	r2, r3
 80035f0:	d106      	bne.n	8003600 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	2200      	movs	r2, #0
 80035f8:	2101      	movs	r1, #1
 80035fa:	4618      	mov	r0, r3
 80035fc:	f7ff fa56 	bl	8002aac <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	2102      	movs	r1, #2
 8003606:	4618      	mov	r0, r3
 8003608:	f7ff fa3a 	bl	8002a80 <LL_ADC_GetOffsetChannel>
 800360c:	4603      	mov	r3, r0
 800360e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003612:	2b00      	cmp	r3, #0
 8003614:	d10a      	bne.n	800362c <HAL_ADC_ConfigChannel+0x2e8>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	2102      	movs	r1, #2
 800361c:	4618      	mov	r0, r3
 800361e:	f7ff fa2f 	bl	8002a80 <LL_ADC_GetOffsetChannel>
 8003622:	4603      	mov	r3, r0
 8003624:	0e9b      	lsrs	r3, r3, #26
 8003626:	f003 021f 	and.w	r2, r3, #31
 800362a:	e01e      	b.n	800366a <HAL_ADC_ConfigChannel+0x326>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	2102      	movs	r1, #2
 8003632:	4618      	mov	r0, r3
 8003634:	f7ff fa24 	bl	8002a80 <LL_ADC_GetOffsetChannel>
 8003638:	4603      	mov	r3, r0
 800363a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800363e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003642:	fa93 f3a3 	rbit	r3, r3
 8003646:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 800364a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800364e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8003652:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003656:	2b00      	cmp	r3, #0
 8003658:	d101      	bne.n	800365e <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 800365a:	2320      	movs	r3, #32
 800365c:	e004      	b.n	8003668 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 800365e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003662:	fab3 f383 	clz	r3, r3
 8003666:	b2db      	uxtb	r3, r3
 8003668:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003672:	2b00      	cmp	r3, #0
 8003674:	d105      	bne.n	8003682 <HAL_ADC_ConfigChannel+0x33e>
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	0e9b      	lsrs	r3, r3, #26
 800367c:	f003 031f 	and.w	r3, r3, #31
 8003680:	e016      	b.n	80036b0 <HAL_ADC_ConfigChannel+0x36c>
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800368a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800368e:	fa93 f3a3 	rbit	r3, r3
 8003692:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8003694:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003696:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 800369a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d101      	bne.n	80036a6 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 80036a2:	2320      	movs	r3, #32
 80036a4:	e004      	b.n	80036b0 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 80036a6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80036aa:	fab3 f383 	clz	r3, r3
 80036ae:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80036b0:	429a      	cmp	r2, r3
 80036b2:	d106      	bne.n	80036c2 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	2200      	movs	r2, #0
 80036ba:	2102      	movs	r1, #2
 80036bc:	4618      	mov	r0, r3
 80036be:	f7ff f9f5 	bl	8002aac <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	2103      	movs	r1, #3
 80036c8:	4618      	mov	r0, r3
 80036ca:	f7ff f9d9 	bl	8002a80 <LL_ADC_GetOffsetChannel>
 80036ce:	4603      	mov	r3, r0
 80036d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d10a      	bne.n	80036ee <HAL_ADC_ConfigChannel+0x3aa>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	2103      	movs	r1, #3
 80036de:	4618      	mov	r0, r3
 80036e0:	f7ff f9ce 	bl	8002a80 <LL_ADC_GetOffsetChannel>
 80036e4:	4603      	mov	r3, r0
 80036e6:	0e9b      	lsrs	r3, r3, #26
 80036e8:	f003 021f 	and.w	r2, r3, #31
 80036ec:	e017      	b.n	800371e <HAL_ADC_ConfigChannel+0x3da>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	2103      	movs	r1, #3
 80036f4:	4618      	mov	r0, r3
 80036f6:	f7ff f9c3 	bl	8002a80 <LL_ADC_GetOffsetChannel>
 80036fa:	4603      	mov	r3, r0
 80036fc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036fe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003700:	fa93 f3a3 	rbit	r3, r3
 8003704:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8003706:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003708:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 800370a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800370c:	2b00      	cmp	r3, #0
 800370e:	d101      	bne.n	8003714 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8003710:	2320      	movs	r3, #32
 8003712:	e003      	b.n	800371c <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8003714:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003716:	fab3 f383 	clz	r3, r3
 800371a:	b2db      	uxtb	r3, r3
 800371c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003726:	2b00      	cmp	r3, #0
 8003728:	d105      	bne.n	8003736 <HAL_ADC_ConfigChannel+0x3f2>
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	0e9b      	lsrs	r3, r3, #26
 8003730:	f003 031f 	and.w	r3, r3, #31
 8003734:	e011      	b.n	800375a <HAL_ADC_ConfigChannel+0x416>
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800373c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800373e:	fa93 f3a3 	rbit	r3, r3
 8003742:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8003744:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003746:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8003748:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800374a:	2b00      	cmp	r3, #0
 800374c:	d101      	bne.n	8003752 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 800374e:	2320      	movs	r3, #32
 8003750:	e003      	b.n	800375a <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8003752:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003754:	fab3 f383 	clz	r3, r3
 8003758:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800375a:	429a      	cmp	r2, r3
 800375c:	d106      	bne.n	800376c <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	2200      	movs	r2, #0
 8003764:	2103      	movs	r1, #3
 8003766:	4618      	mov	r0, r3
 8003768:	f7ff f9a0 	bl	8002aac <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4618      	mov	r0, r3
 8003772:	f7ff faeb 	bl	8002d4c <LL_ADC_IsEnabled>
 8003776:	4603      	mov	r3, r0
 8003778:	2b00      	cmp	r3, #0
 800377a:	f040 813d 	bne.w	80039f8 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6818      	ldr	r0, [r3, #0]
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	6819      	ldr	r1, [r3, #0]
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	68db      	ldr	r3, [r3, #12]
 800378a:	461a      	mov	r2, r3
 800378c:	f7ff fa4a 	bl	8002c24 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	68db      	ldr	r3, [r3, #12]
 8003794:	4aa2      	ldr	r2, [pc, #648]	@ (8003a20 <HAL_ADC_ConfigChannel+0x6dc>)
 8003796:	4293      	cmp	r3, r2
 8003798:	f040 812e 	bne.w	80039f8 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d10b      	bne.n	80037c4 <HAL_ADC_ConfigChannel+0x480>
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	0e9b      	lsrs	r3, r3, #26
 80037b2:	3301      	adds	r3, #1
 80037b4:	f003 031f 	and.w	r3, r3, #31
 80037b8:	2b09      	cmp	r3, #9
 80037ba:	bf94      	ite	ls
 80037bc:	2301      	movls	r3, #1
 80037be:	2300      	movhi	r3, #0
 80037c0:	b2db      	uxtb	r3, r3
 80037c2:	e019      	b.n	80037f8 <HAL_ADC_ConfigChannel+0x4b4>
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037ca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80037cc:	fa93 f3a3 	rbit	r3, r3
 80037d0:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 80037d2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80037d4:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 80037d6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d101      	bne.n	80037e0 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 80037dc:	2320      	movs	r3, #32
 80037de:	e003      	b.n	80037e8 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 80037e0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80037e2:	fab3 f383 	clz	r3, r3
 80037e6:	b2db      	uxtb	r3, r3
 80037e8:	3301      	adds	r3, #1
 80037ea:	f003 031f 	and.w	r3, r3, #31
 80037ee:	2b09      	cmp	r3, #9
 80037f0:	bf94      	ite	ls
 80037f2:	2301      	movls	r3, #1
 80037f4:	2300      	movhi	r3, #0
 80037f6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d079      	beq.n	80038f0 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003804:	2b00      	cmp	r3, #0
 8003806:	d107      	bne.n	8003818 <HAL_ADC_ConfigChannel+0x4d4>
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	0e9b      	lsrs	r3, r3, #26
 800380e:	3301      	adds	r3, #1
 8003810:	069b      	lsls	r3, r3, #26
 8003812:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003816:	e015      	b.n	8003844 <HAL_ADC_ConfigChannel+0x500>
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800381e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003820:	fa93 f3a3 	rbit	r3, r3
 8003824:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003826:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003828:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 800382a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800382c:	2b00      	cmp	r3, #0
 800382e:	d101      	bne.n	8003834 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8003830:	2320      	movs	r3, #32
 8003832:	e003      	b.n	800383c <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8003834:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003836:	fab3 f383 	clz	r3, r3
 800383a:	b2db      	uxtb	r3, r3
 800383c:	3301      	adds	r3, #1
 800383e:	069b      	lsls	r3, r3, #26
 8003840:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800384c:	2b00      	cmp	r3, #0
 800384e:	d109      	bne.n	8003864 <HAL_ADC_ConfigChannel+0x520>
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	0e9b      	lsrs	r3, r3, #26
 8003856:	3301      	adds	r3, #1
 8003858:	f003 031f 	and.w	r3, r3, #31
 800385c:	2101      	movs	r1, #1
 800385e:	fa01 f303 	lsl.w	r3, r1, r3
 8003862:	e017      	b.n	8003894 <HAL_ADC_ConfigChannel+0x550>
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800386a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800386c:	fa93 f3a3 	rbit	r3, r3
 8003870:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8003872:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003874:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8003876:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003878:	2b00      	cmp	r3, #0
 800387a:	d101      	bne.n	8003880 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 800387c:	2320      	movs	r3, #32
 800387e:	e003      	b.n	8003888 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8003880:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003882:	fab3 f383 	clz	r3, r3
 8003886:	b2db      	uxtb	r3, r3
 8003888:	3301      	adds	r3, #1
 800388a:	f003 031f 	and.w	r3, r3, #31
 800388e:	2101      	movs	r1, #1
 8003890:	fa01 f303 	lsl.w	r3, r1, r3
 8003894:	ea42 0103 	orr.w	r1, r2, r3
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d10a      	bne.n	80038ba <HAL_ADC_ConfigChannel+0x576>
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	0e9b      	lsrs	r3, r3, #26
 80038aa:	3301      	adds	r3, #1
 80038ac:	f003 021f 	and.w	r2, r3, #31
 80038b0:	4613      	mov	r3, r2
 80038b2:	005b      	lsls	r3, r3, #1
 80038b4:	4413      	add	r3, r2
 80038b6:	051b      	lsls	r3, r3, #20
 80038b8:	e018      	b.n	80038ec <HAL_ADC_ConfigChannel+0x5a8>
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038c2:	fa93 f3a3 	rbit	r3, r3
 80038c6:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80038c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 80038cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d101      	bne.n	80038d6 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 80038d2:	2320      	movs	r3, #32
 80038d4:	e003      	b.n	80038de <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 80038d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80038d8:	fab3 f383 	clz	r3, r3
 80038dc:	b2db      	uxtb	r3, r3
 80038de:	3301      	adds	r3, #1
 80038e0:	f003 021f 	and.w	r2, r3, #31
 80038e4:	4613      	mov	r3, r2
 80038e6:	005b      	lsls	r3, r3, #1
 80038e8:	4413      	add	r3, r2
 80038ea:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80038ec:	430b      	orrs	r3, r1
 80038ee:	e07e      	b.n	80039ee <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d107      	bne.n	800390c <HAL_ADC_ConfigChannel+0x5c8>
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	0e9b      	lsrs	r3, r3, #26
 8003902:	3301      	adds	r3, #1
 8003904:	069b      	lsls	r3, r3, #26
 8003906:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800390a:	e015      	b.n	8003938 <HAL_ADC_ConfigChannel+0x5f4>
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003912:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003914:	fa93 f3a3 	rbit	r3, r3
 8003918:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 800391a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800391c:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 800391e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003920:	2b00      	cmp	r3, #0
 8003922:	d101      	bne.n	8003928 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8003924:	2320      	movs	r3, #32
 8003926:	e003      	b.n	8003930 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8003928:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800392a:	fab3 f383 	clz	r3, r3
 800392e:	b2db      	uxtb	r3, r3
 8003930:	3301      	adds	r3, #1
 8003932:	069b      	lsls	r3, r3, #26
 8003934:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003940:	2b00      	cmp	r3, #0
 8003942:	d109      	bne.n	8003958 <HAL_ADC_ConfigChannel+0x614>
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	0e9b      	lsrs	r3, r3, #26
 800394a:	3301      	adds	r3, #1
 800394c:	f003 031f 	and.w	r3, r3, #31
 8003950:	2101      	movs	r1, #1
 8003952:	fa01 f303 	lsl.w	r3, r1, r3
 8003956:	e017      	b.n	8003988 <HAL_ADC_ConfigChannel+0x644>
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800395e:	6a3b      	ldr	r3, [r7, #32]
 8003960:	fa93 f3a3 	rbit	r3, r3
 8003964:	61fb      	str	r3, [r7, #28]
  return result;
 8003966:	69fb      	ldr	r3, [r7, #28]
 8003968:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800396a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800396c:	2b00      	cmp	r3, #0
 800396e:	d101      	bne.n	8003974 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8003970:	2320      	movs	r3, #32
 8003972:	e003      	b.n	800397c <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8003974:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003976:	fab3 f383 	clz	r3, r3
 800397a:	b2db      	uxtb	r3, r3
 800397c:	3301      	adds	r3, #1
 800397e:	f003 031f 	and.w	r3, r3, #31
 8003982:	2101      	movs	r1, #1
 8003984:	fa01 f303 	lsl.w	r3, r1, r3
 8003988:	ea42 0103 	orr.w	r1, r2, r3
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003994:	2b00      	cmp	r3, #0
 8003996:	d10d      	bne.n	80039b4 <HAL_ADC_ConfigChannel+0x670>
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	0e9b      	lsrs	r3, r3, #26
 800399e:	3301      	adds	r3, #1
 80039a0:	f003 021f 	and.w	r2, r3, #31
 80039a4:	4613      	mov	r3, r2
 80039a6:	005b      	lsls	r3, r3, #1
 80039a8:	4413      	add	r3, r2
 80039aa:	3b1e      	subs	r3, #30
 80039ac:	051b      	lsls	r3, r3, #20
 80039ae:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80039b2:	e01b      	b.n	80039ec <HAL_ADC_ConfigChannel+0x6a8>
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039ba:	697b      	ldr	r3, [r7, #20]
 80039bc:	fa93 f3a3 	rbit	r3, r3
 80039c0:	613b      	str	r3, [r7, #16]
  return result;
 80039c2:	693b      	ldr	r3, [r7, #16]
 80039c4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80039c6:	69bb      	ldr	r3, [r7, #24]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d101      	bne.n	80039d0 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 80039cc:	2320      	movs	r3, #32
 80039ce:	e003      	b.n	80039d8 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 80039d0:	69bb      	ldr	r3, [r7, #24]
 80039d2:	fab3 f383 	clz	r3, r3
 80039d6:	b2db      	uxtb	r3, r3
 80039d8:	3301      	adds	r3, #1
 80039da:	f003 021f 	and.w	r2, r3, #31
 80039de:	4613      	mov	r3, r2
 80039e0:	005b      	lsls	r3, r3, #1
 80039e2:	4413      	add	r3, r2
 80039e4:	3b1e      	subs	r3, #30
 80039e6:	051b      	lsls	r3, r3, #20
 80039e8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80039ec:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80039ee:	683a      	ldr	r2, [r7, #0]
 80039f0:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80039f2:	4619      	mov	r1, r3
 80039f4:	f7ff f8ea 	bl	8002bcc <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	681a      	ldr	r2, [r3, #0]
 80039fc:	4b09      	ldr	r3, [pc, #36]	@ (8003a24 <HAL_ADC_ConfigChannel+0x6e0>)
 80039fe:	4013      	ands	r3, r2
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	f000 80be 	beq.w	8003b82 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003a0e:	d004      	beq.n	8003a1a <HAL_ADC_ConfigChannel+0x6d6>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a04      	ldr	r2, [pc, #16]	@ (8003a28 <HAL_ADC_ConfigChannel+0x6e4>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d10a      	bne.n	8003a30 <HAL_ADC_ConfigChannel+0x6ec>
 8003a1a:	4b04      	ldr	r3, [pc, #16]	@ (8003a2c <HAL_ADC_ConfigChannel+0x6e8>)
 8003a1c:	e009      	b.n	8003a32 <HAL_ADC_ConfigChannel+0x6ee>
 8003a1e:	bf00      	nop
 8003a20:	407f0000 	.word	0x407f0000
 8003a24:	80080000 	.word	0x80080000
 8003a28:	50000100 	.word	0x50000100
 8003a2c:	50000300 	.word	0x50000300
 8003a30:	4b59      	ldr	r3, [pc, #356]	@ (8003b98 <HAL_ADC_ConfigChannel+0x854>)
 8003a32:	4618      	mov	r0, r3
 8003a34:	f7fe fff2 	bl	8002a1c <LL_ADC_GetCommonPathInternalCh>
 8003a38:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a56      	ldr	r2, [pc, #344]	@ (8003b9c <HAL_ADC_ConfigChannel+0x858>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d004      	beq.n	8003a50 <HAL_ADC_ConfigChannel+0x70c>
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a55      	ldr	r2, [pc, #340]	@ (8003ba0 <HAL_ADC_ConfigChannel+0x85c>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d13a      	bne.n	8003ac6 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003a50:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003a54:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d134      	bne.n	8003ac6 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003a64:	d005      	beq.n	8003a72 <HAL_ADC_ConfigChannel+0x72e>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a4e      	ldr	r2, [pc, #312]	@ (8003ba4 <HAL_ADC_ConfigChannel+0x860>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	f040 8085 	bne.w	8003b7c <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003a7a:	d004      	beq.n	8003a86 <HAL_ADC_ConfigChannel+0x742>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4a49      	ldr	r2, [pc, #292]	@ (8003ba8 <HAL_ADC_ConfigChannel+0x864>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d101      	bne.n	8003a8a <HAL_ADC_ConfigChannel+0x746>
 8003a86:	4a49      	ldr	r2, [pc, #292]	@ (8003bac <HAL_ADC_ConfigChannel+0x868>)
 8003a88:	e000      	b.n	8003a8c <HAL_ADC_ConfigChannel+0x748>
 8003a8a:	4a43      	ldr	r2, [pc, #268]	@ (8003b98 <HAL_ADC_ConfigChannel+0x854>)
 8003a8c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003a90:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003a94:	4619      	mov	r1, r3
 8003a96:	4610      	mov	r0, r2
 8003a98:	f7fe ffad 	bl	80029f6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003a9c:	4b44      	ldr	r3, [pc, #272]	@ (8003bb0 <HAL_ADC_ConfigChannel+0x86c>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	099b      	lsrs	r3, r3, #6
 8003aa2:	4a44      	ldr	r2, [pc, #272]	@ (8003bb4 <HAL_ADC_ConfigChannel+0x870>)
 8003aa4:	fba2 2303 	umull	r2, r3, r2, r3
 8003aa8:	099b      	lsrs	r3, r3, #6
 8003aaa:	1c5a      	adds	r2, r3, #1
 8003aac:	4613      	mov	r3, r2
 8003aae:	005b      	lsls	r3, r3, #1
 8003ab0:	4413      	add	r3, r2
 8003ab2:	009b      	lsls	r3, r3, #2
 8003ab4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003ab6:	e002      	b.n	8003abe <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	3b01      	subs	r3, #1
 8003abc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d1f9      	bne.n	8003ab8 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003ac4:	e05a      	b.n	8003b7c <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4a3b      	ldr	r2, [pc, #236]	@ (8003bb8 <HAL_ADC_ConfigChannel+0x874>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d125      	bne.n	8003b1c <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003ad0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003ad4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d11f      	bne.n	8003b1c <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a31      	ldr	r2, [pc, #196]	@ (8003ba8 <HAL_ADC_ConfigChannel+0x864>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d104      	bne.n	8003af0 <HAL_ADC_ConfigChannel+0x7ac>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4a34      	ldr	r2, [pc, #208]	@ (8003bbc <HAL_ADC_ConfigChannel+0x878>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d047      	beq.n	8003b80 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003af8:	d004      	beq.n	8003b04 <HAL_ADC_ConfigChannel+0x7c0>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a2a      	ldr	r2, [pc, #168]	@ (8003ba8 <HAL_ADC_ConfigChannel+0x864>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d101      	bne.n	8003b08 <HAL_ADC_ConfigChannel+0x7c4>
 8003b04:	4a29      	ldr	r2, [pc, #164]	@ (8003bac <HAL_ADC_ConfigChannel+0x868>)
 8003b06:	e000      	b.n	8003b0a <HAL_ADC_ConfigChannel+0x7c6>
 8003b08:	4a23      	ldr	r2, [pc, #140]	@ (8003b98 <HAL_ADC_ConfigChannel+0x854>)
 8003b0a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003b0e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003b12:	4619      	mov	r1, r3
 8003b14:	4610      	mov	r0, r2
 8003b16:	f7fe ff6e 	bl	80029f6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003b1a:	e031      	b.n	8003b80 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a27      	ldr	r2, [pc, #156]	@ (8003bc0 <HAL_ADC_ConfigChannel+0x87c>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d12d      	bne.n	8003b82 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003b26:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003b2a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d127      	bne.n	8003b82 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a1c      	ldr	r2, [pc, #112]	@ (8003ba8 <HAL_ADC_ConfigChannel+0x864>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d022      	beq.n	8003b82 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003b44:	d004      	beq.n	8003b50 <HAL_ADC_ConfigChannel+0x80c>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a17      	ldr	r2, [pc, #92]	@ (8003ba8 <HAL_ADC_ConfigChannel+0x864>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d101      	bne.n	8003b54 <HAL_ADC_ConfigChannel+0x810>
 8003b50:	4a16      	ldr	r2, [pc, #88]	@ (8003bac <HAL_ADC_ConfigChannel+0x868>)
 8003b52:	e000      	b.n	8003b56 <HAL_ADC_ConfigChannel+0x812>
 8003b54:	4a10      	ldr	r2, [pc, #64]	@ (8003b98 <HAL_ADC_ConfigChannel+0x854>)
 8003b56:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003b5a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003b5e:	4619      	mov	r1, r3
 8003b60:	4610      	mov	r0, r2
 8003b62:	f7fe ff48 	bl	80029f6 <LL_ADC_SetCommonPathInternalCh>
 8003b66:	e00c      	b.n	8003b82 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b6c:	f043 0220 	orr.w	r2, r3, #32
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003b74:	2301      	movs	r3, #1
 8003b76:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8003b7a:	e002      	b.n	8003b82 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003b7c:	bf00      	nop
 8003b7e:	e000      	b.n	8003b82 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003b80:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2200      	movs	r2, #0
 8003b86:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003b8a:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8003b8e:	4618      	mov	r0, r3
 8003b90:	37d8      	adds	r7, #216	@ 0xd8
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bd80      	pop	{r7, pc}
 8003b96:	bf00      	nop
 8003b98:	50000700 	.word	0x50000700
 8003b9c:	c3210000 	.word	0xc3210000
 8003ba0:	90c00010 	.word	0x90c00010
 8003ba4:	50000600 	.word	0x50000600
 8003ba8:	50000100 	.word	0x50000100
 8003bac:	50000300 	.word	0x50000300
 8003bb0:	20000200 	.word	0x20000200
 8003bb4:	053e2d63 	.word	0x053e2d63
 8003bb8:	c7520000 	.word	0xc7520000
 8003bbc:	50000500 	.word	0x50000500
 8003bc0:	cb840000 	.word	0xcb840000

08003bc4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b084      	sub	sp, #16
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003bcc:	2300      	movs	r3, #0
 8003bce:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	f7ff f8b9 	bl	8002d4c <LL_ADC_IsEnabled>
 8003bda:	4603      	mov	r3, r0
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d176      	bne.n	8003cce <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	689a      	ldr	r2, [r3, #8]
 8003be6:	4b3c      	ldr	r3, [pc, #240]	@ (8003cd8 <ADC_Enable+0x114>)
 8003be8:	4013      	ands	r3, r2
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d00d      	beq.n	8003c0a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bf2:	f043 0210 	orr.w	r2, r3, #16
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003bfe:	f043 0201 	orr.w	r2, r3, #1
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8003c06:	2301      	movs	r3, #1
 8003c08:	e062      	b.n	8003cd0 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4618      	mov	r0, r3
 8003c10:	f7ff f888 	bl	8002d24 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003c1c:	d004      	beq.n	8003c28 <ADC_Enable+0x64>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a2e      	ldr	r2, [pc, #184]	@ (8003cdc <ADC_Enable+0x118>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d101      	bne.n	8003c2c <ADC_Enable+0x68>
 8003c28:	4b2d      	ldr	r3, [pc, #180]	@ (8003ce0 <ADC_Enable+0x11c>)
 8003c2a:	e000      	b.n	8003c2e <ADC_Enable+0x6a>
 8003c2c:	4b2d      	ldr	r3, [pc, #180]	@ (8003ce4 <ADC_Enable+0x120>)
 8003c2e:	4618      	mov	r0, r3
 8003c30:	f7fe fef4 	bl	8002a1c <LL_ADC_GetCommonPathInternalCh>
 8003c34:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003c36:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d013      	beq.n	8003c66 <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003c3e:	4b2a      	ldr	r3, [pc, #168]	@ (8003ce8 <ADC_Enable+0x124>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	099b      	lsrs	r3, r3, #6
 8003c44:	4a29      	ldr	r2, [pc, #164]	@ (8003cec <ADC_Enable+0x128>)
 8003c46:	fba2 2303 	umull	r2, r3, r2, r3
 8003c4a:	099b      	lsrs	r3, r3, #6
 8003c4c:	1c5a      	adds	r2, r3, #1
 8003c4e:	4613      	mov	r3, r2
 8003c50:	005b      	lsls	r3, r3, #1
 8003c52:	4413      	add	r3, r2
 8003c54:	009b      	lsls	r3, r3, #2
 8003c56:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003c58:	e002      	b.n	8003c60 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8003c5a:	68bb      	ldr	r3, [r7, #8]
 8003c5c:	3b01      	subs	r3, #1
 8003c5e:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d1f9      	bne.n	8003c5a <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003c66:	f7fe fea7 	bl	80029b8 <HAL_GetTick>
 8003c6a:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003c6c:	e028      	b.n	8003cc0 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4618      	mov	r0, r3
 8003c74:	f7ff f86a 	bl	8002d4c <LL_ADC_IsEnabled>
 8003c78:	4603      	mov	r3, r0
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d104      	bne.n	8003c88 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4618      	mov	r0, r3
 8003c84:	f7ff f84e 	bl	8002d24 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003c88:	f7fe fe96 	bl	80029b8 <HAL_GetTick>
 8003c8c:	4602      	mov	r2, r0
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	1ad3      	subs	r3, r2, r3
 8003c92:	2b02      	cmp	r3, #2
 8003c94:	d914      	bls.n	8003cc0 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f003 0301 	and.w	r3, r3, #1
 8003ca0:	2b01      	cmp	r3, #1
 8003ca2:	d00d      	beq.n	8003cc0 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ca8:	f043 0210 	orr.w	r2, r3, #16
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003cb4:	f043 0201 	orr.w	r2, r3, #1
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	e007      	b.n	8003cd0 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f003 0301 	and.w	r3, r3, #1
 8003cca:	2b01      	cmp	r3, #1
 8003ccc:	d1cf      	bne.n	8003c6e <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003cce:	2300      	movs	r3, #0
}
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	3710      	adds	r7, #16
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bd80      	pop	{r7, pc}
 8003cd8:	8000003f 	.word	0x8000003f
 8003cdc:	50000100 	.word	0x50000100
 8003ce0:	50000300 	.word	0x50000300
 8003ce4:	50000700 	.word	0x50000700
 8003ce8:	20000200 	.word	0x20000200
 8003cec:	053e2d63 	.word	0x053e2d63

08003cf0 <LL_ADC_IsEnabled>:
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	b083      	sub	sp, #12
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	689b      	ldr	r3, [r3, #8]
 8003cfc:	f003 0301 	and.w	r3, r3, #1
 8003d00:	2b01      	cmp	r3, #1
 8003d02:	d101      	bne.n	8003d08 <LL_ADC_IsEnabled+0x18>
 8003d04:	2301      	movs	r3, #1
 8003d06:	e000      	b.n	8003d0a <LL_ADC_IsEnabled+0x1a>
 8003d08:	2300      	movs	r3, #0
}
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	370c      	adds	r7, #12
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d14:	4770      	bx	lr

08003d16 <LL_ADC_REG_IsConversionOngoing>:
{
 8003d16:	b480      	push	{r7}
 8003d18:	b083      	sub	sp, #12
 8003d1a:	af00      	add	r7, sp, #0
 8003d1c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	689b      	ldr	r3, [r3, #8]
 8003d22:	f003 0304 	and.w	r3, r3, #4
 8003d26:	2b04      	cmp	r3, #4
 8003d28:	d101      	bne.n	8003d2e <LL_ADC_REG_IsConversionOngoing+0x18>
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	e000      	b.n	8003d30 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003d2e:	2300      	movs	r3, #0
}
 8003d30:	4618      	mov	r0, r3
 8003d32:	370c      	adds	r7, #12
 8003d34:	46bd      	mov	sp, r7
 8003d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3a:	4770      	bx	lr

08003d3c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8003d3c:	b590      	push	{r4, r7, lr}
 8003d3e:	b0a1      	sub	sp, #132	@ 0x84
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
 8003d44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d46:	2300      	movs	r3, #0
 8003d48:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003d52:	2b01      	cmp	r3, #1
 8003d54:	d101      	bne.n	8003d5a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003d56:	2302      	movs	r3, #2
 8003d58:	e0e7      	b.n	8003f2a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2201      	movs	r2, #1
 8003d5e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8003d62:	2300      	movs	r3, #0
 8003d64:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8003d66:	2300      	movs	r3, #0
 8003d68:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003d72:	d102      	bne.n	8003d7a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003d74:	4b6f      	ldr	r3, [pc, #444]	@ (8003f34 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003d76:	60bb      	str	r3, [r7, #8]
 8003d78:	e009      	b.n	8003d8e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a6e      	ldr	r2, [pc, #440]	@ (8003f38 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d102      	bne.n	8003d8a <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8003d84:	4b6d      	ldr	r3, [pc, #436]	@ (8003f3c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003d86:	60bb      	str	r3, [r7, #8]
 8003d88:	e001      	b.n	8003d8e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8003d8e:	68bb      	ldr	r3, [r7, #8]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d10b      	bne.n	8003dac <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d98:	f043 0220 	orr.w	r2, r3, #32
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2200      	movs	r2, #0
 8003da4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8003da8:	2301      	movs	r3, #1
 8003daa:	e0be      	b.n	8003f2a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	4618      	mov	r0, r3
 8003db0:	f7ff ffb1 	bl	8003d16 <LL_ADC_REG_IsConversionOngoing>
 8003db4:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4618      	mov	r0, r3
 8003dbc:	f7ff ffab 	bl	8003d16 <LL_ADC_REG_IsConversionOngoing>
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	f040 80a0 	bne.w	8003f08 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8003dc8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	f040 809c 	bne.w	8003f08 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003dd8:	d004      	beq.n	8003de4 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4a55      	ldr	r2, [pc, #340]	@ (8003f34 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d101      	bne.n	8003de8 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8003de4:	4b56      	ldr	r3, [pc, #344]	@ (8003f40 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8003de6:	e000      	b.n	8003dea <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8003de8:	4b56      	ldr	r3, [pc, #344]	@ (8003f44 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8003dea:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d04b      	beq.n	8003e8c <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003df4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003df6:	689b      	ldr	r3, [r3, #8]
 8003df8:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	6859      	ldr	r1, [r3, #4]
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003e06:	035b      	lsls	r3, r3, #13
 8003e08:	430b      	orrs	r3, r1
 8003e0a:	431a      	orrs	r2, r3
 8003e0c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003e0e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003e18:	d004      	beq.n	8003e24 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4a45      	ldr	r2, [pc, #276]	@ (8003f34 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d10f      	bne.n	8003e44 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8003e24:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003e28:	f7ff ff62 	bl	8003cf0 <LL_ADC_IsEnabled>
 8003e2c:	4604      	mov	r4, r0
 8003e2e:	4841      	ldr	r0, [pc, #260]	@ (8003f34 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003e30:	f7ff ff5e 	bl	8003cf0 <LL_ADC_IsEnabled>
 8003e34:	4603      	mov	r3, r0
 8003e36:	4323      	orrs	r3, r4
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	bf0c      	ite	eq
 8003e3c:	2301      	moveq	r3, #1
 8003e3e:	2300      	movne	r3, #0
 8003e40:	b2db      	uxtb	r3, r3
 8003e42:	e012      	b.n	8003e6a <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8003e44:	483c      	ldr	r0, [pc, #240]	@ (8003f38 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003e46:	f7ff ff53 	bl	8003cf0 <LL_ADC_IsEnabled>
 8003e4a:	4604      	mov	r4, r0
 8003e4c:	483b      	ldr	r0, [pc, #236]	@ (8003f3c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003e4e:	f7ff ff4f 	bl	8003cf0 <LL_ADC_IsEnabled>
 8003e52:	4603      	mov	r3, r0
 8003e54:	431c      	orrs	r4, r3
 8003e56:	483c      	ldr	r0, [pc, #240]	@ (8003f48 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003e58:	f7ff ff4a 	bl	8003cf0 <LL_ADC_IsEnabled>
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	4323      	orrs	r3, r4
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	bf0c      	ite	eq
 8003e64:	2301      	moveq	r3, #1
 8003e66:	2300      	movne	r3, #0
 8003e68:	b2db      	uxtb	r3, r3
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d056      	beq.n	8003f1c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003e6e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003e70:	689b      	ldr	r3, [r3, #8]
 8003e72:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003e76:	f023 030f 	bic.w	r3, r3, #15
 8003e7a:	683a      	ldr	r2, [r7, #0]
 8003e7c:	6811      	ldr	r1, [r2, #0]
 8003e7e:	683a      	ldr	r2, [r7, #0]
 8003e80:	6892      	ldr	r2, [r2, #8]
 8003e82:	430a      	orrs	r2, r1
 8003e84:	431a      	orrs	r2, r3
 8003e86:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003e88:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003e8a:	e047      	b.n	8003f1c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003e8c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003e8e:	689b      	ldr	r3, [r3, #8]
 8003e90:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003e94:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003e96:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003ea0:	d004      	beq.n	8003eac <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4a23      	ldr	r2, [pc, #140]	@ (8003f34 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d10f      	bne.n	8003ecc <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8003eac:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003eb0:	f7ff ff1e 	bl	8003cf0 <LL_ADC_IsEnabled>
 8003eb4:	4604      	mov	r4, r0
 8003eb6:	481f      	ldr	r0, [pc, #124]	@ (8003f34 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003eb8:	f7ff ff1a 	bl	8003cf0 <LL_ADC_IsEnabled>
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	4323      	orrs	r3, r4
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	bf0c      	ite	eq
 8003ec4:	2301      	moveq	r3, #1
 8003ec6:	2300      	movne	r3, #0
 8003ec8:	b2db      	uxtb	r3, r3
 8003eca:	e012      	b.n	8003ef2 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8003ecc:	481a      	ldr	r0, [pc, #104]	@ (8003f38 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003ece:	f7ff ff0f 	bl	8003cf0 <LL_ADC_IsEnabled>
 8003ed2:	4604      	mov	r4, r0
 8003ed4:	4819      	ldr	r0, [pc, #100]	@ (8003f3c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003ed6:	f7ff ff0b 	bl	8003cf0 <LL_ADC_IsEnabled>
 8003eda:	4603      	mov	r3, r0
 8003edc:	431c      	orrs	r4, r3
 8003ede:	481a      	ldr	r0, [pc, #104]	@ (8003f48 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003ee0:	f7ff ff06 	bl	8003cf0 <LL_ADC_IsEnabled>
 8003ee4:	4603      	mov	r3, r0
 8003ee6:	4323      	orrs	r3, r4
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	bf0c      	ite	eq
 8003eec:	2301      	moveq	r3, #1
 8003eee:	2300      	movne	r3, #0
 8003ef0:	b2db      	uxtb	r3, r3
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d012      	beq.n	8003f1c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003ef6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003ef8:	689b      	ldr	r3, [r3, #8]
 8003efa:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003efe:	f023 030f 	bic.w	r3, r3, #15
 8003f02:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8003f04:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003f06:	e009      	b.n	8003f1c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f0c:	f043 0220 	orr.w	r2, r3, #32
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003f14:	2301      	movs	r3, #1
 8003f16:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8003f1a:	e000      	b.n	8003f1e <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003f1c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2200      	movs	r2, #0
 8003f22:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003f26:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	3784      	adds	r7, #132	@ 0x84
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bd90      	pop	{r4, r7, pc}
 8003f32:	bf00      	nop
 8003f34:	50000100 	.word	0x50000100
 8003f38:	50000400 	.word	0x50000400
 8003f3c:	50000500 	.word	0x50000500
 8003f40:	50000300 	.word	0x50000300
 8003f44:	50000700 	.word	0x50000700
 8003f48:	50000600 	.word	0x50000600

08003f4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	b085      	sub	sp, #20
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	f003 0307 	and.w	r3, r3, #7
 8003f5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003f5c:	4b0c      	ldr	r3, [pc, #48]	@ (8003f90 <__NVIC_SetPriorityGrouping+0x44>)
 8003f5e:	68db      	ldr	r3, [r3, #12]
 8003f60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003f62:	68ba      	ldr	r2, [r7, #8]
 8003f64:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003f68:	4013      	ands	r3, r2
 8003f6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003f74:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003f78:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003f7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003f7e:	4a04      	ldr	r2, [pc, #16]	@ (8003f90 <__NVIC_SetPriorityGrouping+0x44>)
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	60d3      	str	r3, [r2, #12]
}
 8003f84:	bf00      	nop
 8003f86:	3714      	adds	r7, #20
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8e:	4770      	bx	lr
 8003f90:	e000ed00 	.word	0xe000ed00

08003f94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003f94:	b480      	push	{r7}
 8003f96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003f98:	4b04      	ldr	r3, [pc, #16]	@ (8003fac <__NVIC_GetPriorityGrouping+0x18>)
 8003f9a:	68db      	ldr	r3, [r3, #12]
 8003f9c:	0a1b      	lsrs	r3, r3, #8
 8003f9e:	f003 0307 	and.w	r3, r3, #7
}
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003faa:	4770      	bx	lr
 8003fac:	e000ed00 	.word	0xe000ed00

08003fb0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	b083      	sub	sp, #12
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003fba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	db0b      	blt.n	8003fda <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003fc2:	79fb      	ldrb	r3, [r7, #7]
 8003fc4:	f003 021f 	and.w	r2, r3, #31
 8003fc8:	4907      	ldr	r1, [pc, #28]	@ (8003fe8 <__NVIC_EnableIRQ+0x38>)
 8003fca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fce:	095b      	lsrs	r3, r3, #5
 8003fd0:	2001      	movs	r0, #1
 8003fd2:	fa00 f202 	lsl.w	r2, r0, r2
 8003fd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003fda:	bf00      	nop
 8003fdc:	370c      	adds	r7, #12
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe4:	4770      	bx	lr
 8003fe6:	bf00      	nop
 8003fe8:	e000e100 	.word	0xe000e100

08003fec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003fec:	b480      	push	{r7}
 8003fee:	b083      	sub	sp, #12
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	6039      	str	r1, [r7, #0]
 8003ff6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ff8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	db0a      	blt.n	8004016 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	b2da      	uxtb	r2, r3
 8004004:	490c      	ldr	r1, [pc, #48]	@ (8004038 <__NVIC_SetPriority+0x4c>)
 8004006:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800400a:	0112      	lsls	r2, r2, #4
 800400c:	b2d2      	uxtb	r2, r2
 800400e:	440b      	add	r3, r1
 8004010:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004014:	e00a      	b.n	800402c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	b2da      	uxtb	r2, r3
 800401a:	4908      	ldr	r1, [pc, #32]	@ (800403c <__NVIC_SetPriority+0x50>)
 800401c:	79fb      	ldrb	r3, [r7, #7]
 800401e:	f003 030f 	and.w	r3, r3, #15
 8004022:	3b04      	subs	r3, #4
 8004024:	0112      	lsls	r2, r2, #4
 8004026:	b2d2      	uxtb	r2, r2
 8004028:	440b      	add	r3, r1
 800402a:	761a      	strb	r2, [r3, #24]
}
 800402c:	bf00      	nop
 800402e:	370c      	adds	r7, #12
 8004030:	46bd      	mov	sp, r7
 8004032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004036:	4770      	bx	lr
 8004038:	e000e100 	.word	0xe000e100
 800403c:	e000ed00 	.word	0xe000ed00

08004040 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004040:	b480      	push	{r7}
 8004042:	b089      	sub	sp, #36	@ 0x24
 8004044:	af00      	add	r7, sp, #0
 8004046:	60f8      	str	r0, [r7, #12]
 8004048:	60b9      	str	r1, [r7, #8]
 800404a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	f003 0307 	and.w	r3, r3, #7
 8004052:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004054:	69fb      	ldr	r3, [r7, #28]
 8004056:	f1c3 0307 	rsb	r3, r3, #7
 800405a:	2b04      	cmp	r3, #4
 800405c:	bf28      	it	cs
 800405e:	2304      	movcs	r3, #4
 8004060:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004062:	69fb      	ldr	r3, [r7, #28]
 8004064:	3304      	adds	r3, #4
 8004066:	2b06      	cmp	r3, #6
 8004068:	d902      	bls.n	8004070 <NVIC_EncodePriority+0x30>
 800406a:	69fb      	ldr	r3, [r7, #28]
 800406c:	3b03      	subs	r3, #3
 800406e:	e000      	b.n	8004072 <NVIC_EncodePriority+0x32>
 8004070:	2300      	movs	r3, #0
 8004072:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004074:	f04f 32ff 	mov.w	r2, #4294967295
 8004078:	69bb      	ldr	r3, [r7, #24]
 800407a:	fa02 f303 	lsl.w	r3, r2, r3
 800407e:	43da      	mvns	r2, r3
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	401a      	ands	r2, r3
 8004084:	697b      	ldr	r3, [r7, #20]
 8004086:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004088:	f04f 31ff 	mov.w	r1, #4294967295
 800408c:	697b      	ldr	r3, [r7, #20]
 800408e:	fa01 f303 	lsl.w	r3, r1, r3
 8004092:	43d9      	mvns	r1, r3
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004098:	4313      	orrs	r3, r2
         );
}
 800409a:	4618      	mov	r0, r3
 800409c:	3724      	adds	r7, #36	@ 0x24
 800409e:	46bd      	mov	sp, r7
 80040a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a4:	4770      	bx	lr
	...

080040a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b082      	sub	sp, #8
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	3b01      	subs	r3, #1
 80040b4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80040b8:	d301      	bcc.n	80040be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80040ba:	2301      	movs	r3, #1
 80040bc:	e00f      	b.n	80040de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80040be:	4a0a      	ldr	r2, [pc, #40]	@ (80040e8 <SysTick_Config+0x40>)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	3b01      	subs	r3, #1
 80040c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80040c6:	210f      	movs	r1, #15
 80040c8:	f04f 30ff 	mov.w	r0, #4294967295
 80040cc:	f7ff ff8e 	bl	8003fec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80040d0:	4b05      	ldr	r3, [pc, #20]	@ (80040e8 <SysTick_Config+0x40>)
 80040d2:	2200      	movs	r2, #0
 80040d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80040d6:	4b04      	ldr	r3, [pc, #16]	@ (80040e8 <SysTick_Config+0x40>)
 80040d8:	2207      	movs	r2, #7
 80040da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80040dc:	2300      	movs	r3, #0
}
 80040de:	4618      	mov	r0, r3
 80040e0:	3708      	adds	r7, #8
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bd80      	pop	{r7, pc}
 80040e6:	bf00      	nop
 80040e8:	e000e010 	.word	0xe000e010

080040ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b082      	sub	sp, #8
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80040f4:	6878      	ldr	r0, [r7, #4]
 80040f6:	f7ff ff29 	bl	8003f4c <__NVIC_SetPriorityGrouping>
}
 80040fa:	bf00      	nop
 80040fc:	3708      	adds	r7, #8
 80040fe:	46bd      	mov	sp, r7
 8004100:	bd80      	pop	{r7, pc}

08004102 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004102:	b580      	push	{r7, lr}
 8004104:	b086      	sub	sp, #24
 8004106:	af00      	add	r7, sp, #0
 8004108:	4603      	mov	r3, r0
 800410a:	60b9      	str	r1, [r7, #8]
 800410c:	607a      	str	r2, [r7, #4]
 800410e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004110:	f7ff ff40 	bl	8003f94 <__NVIC_GetPriorityGrouping>
 8004114:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004116:	687a      	ldr	r2, [r7, #4]
 8004118:	68b9      	ldr	r1, [r7, #8]
 800411a:	6978      	ldr	r0, [r7, #20]
 800411c:	f7ff ff90 	bl	8004040 <NVIC_EncodePriority>
 8004120:	4602      	mov	r2, r0
 8004122:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004126:	4611      	mov	r1, r2
 8004128:	4618      	mov	r0, r3
 800412a:	f7ff ff5f 	bl	8003fec <__NVIC_SetPriority>
}
 800412e:	bf00      	nop
 8004130:	3718      	adds	r7, #24
 8004132:	46bd      	mov	sp, r7
 8004134:	bd80      	pop	{r7, pc}

08004136 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004136:	b580      	push	{r7, lr}
 8004138:	b082      	sub	sp, #8
 800413a:	af00      	add	r7, sp, #0
 800413c:	4603      	mov	r3, r0
 800413e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004140:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004144:	4618      	mov	r0, r3
 8004146:	f7ff ff33 	bl	8003fb0 <__NVIC_EnableIRQ>
}
 800414a:	bf00      	nop
 800414c:	3708      	adds	r7, #8
 800414e:	46bd      	mov	sp, r7
 8004150:	bd80      	pop	{r7, pc}

08004152 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004152:	b580      	push	{r7, lr}
 8004154:	b082      	sub	sp, #8
 8004156:	af00      	add	r7, sp, #0
 8004158:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800415a:	6878      	ldr	r0, [r7, #4]
 800415c:	f7ff ffa4 	bl	80040a8 <SysTick_Config>
 8004160:	4603      	mov	r3, r0
}
 8004162:	4618      	mov	r0, r3
 8004164:	3708      	adds	r7, #8
 8004166:	46bd      	mov	sp, r7
 8004168:	bd80      	pop	{r7, pc}
	...

0800416c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b084      	sub	sp, #16
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d101      	bne.n	800417e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800417a:	2301      	movs	r3, #1
 800417c:	e08d      	b.n	800429a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	461a      	mov	r2, r3
 8004184:	4b47      	ldr	r3, [pc, #284]	@ (80042a4 <HAL_DMA_Init+0x138>)
 8004186:	429a      	cmp	r2, r3
 8004188:	d80f      	bhi.n	80041aa <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	461a      	mov	r2, r3
 8004190:	4b45      	ldr	r3, [pc, #276]	@ (80042a8 <HAL_DMA_Init+0x13c>)
 8004192:	4413      	add	r3, r2
 8004194:	4a45      	ldr	r2, [pc, #276]	@ (80042ac <HAL_DMA_Init+0x140>)
 8004196:	fba2 2303 	umull	r2, r3, r2, r3
 800419a:	091b      	lsrs	r3, r3, #4
 800419c:	009a      	lsls	r2, r3, #2
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	4a42      	ldr	r2, [pc, #264]	@ (80042b0 <HAL_DMA_Init+0x144>)
 80041a6:	641a      	str	r2, [r3, #64]	@ 0x40
 80041a8:	e00e      	b.n	80041c8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	461a      	mov	r2, r3
 80041b0:	4b40      	ldr	r3, [pc, #256]	@ (80042b4 <HAL_DMA_Init+0x148>)
 80041b2:	4413      	add	r3, r2
 80041b4:	4a3d      	ldr	r2, [pc, #244]	@ (80042ac <HAL_DMA_Init+0x140>)
 80041b6:	fba2 2303 	umull	r2, r3, r2, r3
 80041ba:	091b      	lsrs	r3, r3, #4
 80041bc:	009a      	lsls	r2, r3, #2
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	4a3c      	ldr	r2, [pc, #240]	@ (80042b8 <HAL_DMA_Init+0x14c>)
 80041c6:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2202      	movs	r2, #2
 80041cc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80041de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80041e2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80041ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	691b      	ldr	r3, [r3, #16]
 80041f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80041f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	699b      	ldr	r3, [r3, #24]
 80041fe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004204:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6a1b      	ldr	r3, [r3, #32]
 800420a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800420c:	68fa      	ldr	r2, [r7, #12]
 800420e:	4313      	orrs	r3, r2
 8004210:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	68fa      	ldr	r2, [r7, #12]
 8004218:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800421a:	6878      	ldr	r0, [r7, #4]
 800421c:	f000 fa82 	bl	8004724 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	689b      	ldr	r3, [r3, #8]
 8004224:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004228:	d102      	bne.n	8004230 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2200      	movs	r2, #0
 800422e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	685a      	ldr	r2, [r3, #4]
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004238:	b2d2      	uxtb	r2, r2
 800423a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004240:	687a      	ldr	r2, [r7, #4]
 8004242:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004244:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d010      	beq.n	8004270 <HAL_DMA_Init+0x104>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	2b04      	cmp	r3, #4
 8004254:	d80c      	bhi.n	8004270 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004256:	6878      	ldr	r0, [r7, #4]
 8004258:	f000 faa2 	bl	80047a0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004260:	2200      	movs	r2, #0
 8004262:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004268:	687a      	ldr	r2, [r7, #4]
 800426a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800426c:	605a      	str	r2, [r3, #4]
 800426e:	e008      	b.n	8004282 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2200      	movs	r2, #0
 8004274:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2200      	movs	r2, #0
 800427a:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2200      	movs	r2, #0
 8004280:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2200      	movs	r2, #0
 8004286:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2201      	movs	r2, #1
 800428c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2200      	movs	r2, #0
 8004294:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004298:	2300      	movs	r3, #0
}
 800429a:	4618      	mov	r0, r3
 800429c:	3710      	adds	r7, #16
 800429e:	46bd      	mov	sp, r7
 80042a0:	bd80      	pop	{r7, pc}
 80042a2:	bf00      	nop
 80042a4:	40020407 	.word	0x40020407
 80042a8:	bffdfff8 	.word	0xbffdfff8
 80042ac:	cccccccd 	.word	0xcccccccd
 80042b0:	40020000 	.word	0x40020000
 80042b4:	bffdfbf8 	.word	0xbffdfbf8
 80042b8:	40020400 	.word	0x40020400

080042bc <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b086      	sub	sp, #24
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	60f8      	str	r0, [r7, #12]
 80042c4:	60b9      	str	r1, [r7, #8]
 80042c6:	607a      	str	r2, [r7, #4]
 80042c8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80042ca:	2300      	movs	r3, #0
 80042cc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80042d4:	2b01      	cmp	r3, #1
 80042d6:	d101      	bne.n	80042dc <HAL_DMA_Start_IT+0x20>
 80042d8:	2302      	movs	r3, #2
 80042da:	e066      	b.n	80043aa <HAL_DMA_Start_IT+0xee>
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	2201      	movs	r2, #1
 80042e0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80042ea:	b2db      	uxtb	r3, r3
 80042ec:	2b01      	cmp	r3, #1
 80042ee:	d155      	bne.n	800439c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	2202      	movs	r2, #2
 80042f4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	2200      	movs	r2, #0
 80042fc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	681a      	ldr	r2, [r3, #0]
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f022 0201 	bic.w	r2, r2, #1
 800430c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	687a      	ldr	r2, [r7, #4]
 8004312:	68b9      	ldr	r1, [r7, #8]
 8004314:	68f8      	ldr	r0, [r7, #12]
 8004316:	f000 f9c7 	bl	80046a8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800431e:	2b00      	cmp	r3, #0
 8004320:	d008      	beq.n	8004334 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	681a      	ldr	r2, [r3, #0]
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f042 020e 	orr.w	r2, r2, #14
 8004330:	601a      	str	r2, [r3, #0]
 8004332:	e00f      	b.n	8004354 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	681a      	ldr	r2, [r3, #0]
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f022 0204 	bic.w	r2, r2, #4
 8004342:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	681a      	ldr	r2, [r3, #0]
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f042 020a 	orr.w	r2, r2, #10
 8004352:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800435e:	2b00      	cmp	r3, #0
 8004360:	d007      	beq.n	8004372 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004366:	681a      	ldr	r2, [r3, #0]
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800436c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004370:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004376:	2b00      	cmp	r3, #0
 8004378:	d007      	beq.n	800438a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800437e:	681a      	ldr	r2, [r3, #0]
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004384:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004388:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	681a      	ldr	r2, [r3, #0]
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f042 0201 	orr.w	r2, r2, #1
 8004398:	601a      	str	r2, [r3, #0]
 800439a:	e005      	b.n	80043a8 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	2200      	movs	r2, #0
 80043a0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80043a4:	2302      	movs	r3, #2
 80043a6:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80043a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80043aa:	4618      	mov	r0, r3
 80043ac:	3718      	adds	r7, #24
 80043ae:	46bd      	mov	sp, r7
 80043b0:	bd80      	pop	{r7, pc}

080043b2 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80043b2:	b480      	push	{r7}
 80043b4:	b085      	sub	sp, #20
 80043b6:	af00      	add	r7, sp, #0
 80043b8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80043ba:	2300      	movs	r3, #0
 80043bc:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80043c4:	b2db      	uxtb	r3, r3
 80043c6:	2b02      	cmp	r3, #2
 80043c8:	d005      	beq.n	80043d6 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2204      	movs	r2, #4
 80043ce:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80043d0:	2301      	movs	r3, #1
 80043d2:	73fb      	strb	r3, [r7, #15]
 80043d4:	e037      	b.n	8004446 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	681a      	ldr	r2, [r3, #0]
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f022 020e 	bic.w	r2, r2, #14
 80043e4:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80043ea:	681a      	ldr	r2, [r3, #0]
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80043f0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80043f4:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	681a      	ldr	r2, [r3, #0]
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f022 0201 	bic.w	r2, r2, #1
 8004404:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800440a:	f003 021f 	and.w	r2, r3, #31
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004412:	2101      	movs	r1, #1
 8004414:	fa01 f202 	lsl.w	r2, r1, r2
 8004418:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800441e:	687a      	ldr	r2, [r7, #4]
 8004420:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004422:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004428:	2b00      	cmp	r3, #0
 800442a:	d00c      	beq.n	8004446 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004430:	681a      	ldr	r2, [r3, #0]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004436:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800443a:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004440:	687a      	ldr	r2, [r7, #4]
 8004442:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004444:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2201      	movs	r2, #1
 800444a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2200      	movs	r2, #0
 8004452:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8004456:	7bfb      	ldrb	r3, [r7, #15]
}
 8004458:	4618      	mov	r0, r3
 800445a:	3714      	adds	r7, #20
 800445c:	46bd      	mov	sp, r7
 800445e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004462:	4770      	bx	lr

08004464 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b084      	sub	sp, #16
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800446c:	2300      	movs	r3, #0
 800446e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004476:	b2db      	uxtb	r3, r3
 8004478:	2b02      	cmp	r3, #2
 800447a:	d00d      	beq.n	8004498 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2204      	movs	r2, #4
 8004480:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2201      	movs	r2, #1
 8004486:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2200      	movs	r2, #0
 800448e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8004492:	2301      	movs	r3, #1
 8004494:	73fb      	strb	r3, [r7, #15]
 8004496:	e047      	b.n	8004528 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	681a      	ldr	r2, [r3, #0]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f022 020e 	bic.w	r2, r2, #14
 80044a6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	681a      	ldr	r2, [r3, #0]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f022 0201 	bic.w	r2, r2, #1
 80044b6:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80044bc:	681a      	ldr	r2, [r3, #0]
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80044c2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80044c6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044cc:	f003 021f 	and.w	r2, r3, #31
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044d4:	2101      	movs	r1, #1
 80044d6:	fa01 f202 	lsl.w	r2, r1, r2
 80044da:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80044e0:	687a      	ldr	r2, [r7, #4]
 80044e2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80044e4:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d00c      	beq.n	8004508 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044f2:	681a      	ldr	r2, [r3, #0]
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044f8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80044fc:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004502:	687a      	ldr	r2, [r7, #4]
 8004504:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004506:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2201      	movs	r2, #1
 800450c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2200      	movs	r2, #0
 8004514:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800451c:	2b00      	cmp	r3, #0
 800451e:	d003      	beq.n	8004528 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004524:	6878      	ldr	r0, [r7, #4]
 8004526:	4798      	blx	r3
    }
  }
  return status;
 8004528:	7bfb      	ldrb	r3, [r7, #15]
}
 800452a:	4618      	mov	r0, r3
 800452c:	3710      	adds	r7, #16
 800452e:	46bd      	mov	sp, r7
 8004530:	bd80      	pop	{r7, pc}

08004532 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004532:	b580      	push	{r7, lr}
 8004534:	b084      	sub	sp, #16
 8004536:	af00      	add	r7, sp, #0
 8004538:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800454e:	f003 031f 	and.w	r3, r3, #31
 8004552:	2204      	movs	r2, #4
 8004554:	409a      	lsls	r2, r3
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	4013      	ands	r3, r2
 800455a:	2b00      	cmp	r3, #0
 800455c:	d026      	beq.n	80045ac <HAL_DMA_IRQHandler+0x7a>
 800455e:	68bb      	ldr	r3, [r7, #8]
 8004560:	f003 0304 	and.w	r3, r3, #4
 8004564:	2b00      	cmp	r3, #0
 8004566:	d021      	beq.n	80045ac <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f003 0320 	and.w	r3, r3, #32
 8004572:	2b00      	cmp	r3, #0
 8004574:	d107      	bne.n	8004586 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	681a      	ldr	r2, [r3, #0]
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f022 0204 	bic.w	r2, r2, #4
 8004584:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800458a:	f003 021f 	and.w	r2, r3, #31
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004592:	2104      	movs	r1, #4
 8004594:	fa01 f202 	lsl.w	r2, r1, r2
 8004598:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d071      	beq.n	8004686 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045a6:	6878      	ldr	r0, [r7, #4]
 80045a8:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80045aa:	e06c      	b.n	8004686 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045b0:	f003 031f 	and.w	r3, r3, #31
 80045b4:	2202      	movs	r2, #2
 80045b6:	409a      	lsls	r2, r3
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	4013      	ands	r3, r2
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d02e      	beq.n	800461e <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	f003 0302 	and.w	r3, r3, #2
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d029      	beq.n	800461e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f003 0320 	and.w	r3, r3, #32
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d10b      	bne.n	80045f0 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	681a      	ldr	r2, [r3, #0]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f022 020a 	bic.w	r2, r2, #10
 80045e6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2201      	movs	r2, #1
 80045ec:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045f4:	f003 021f 	and.w	r2, r3, #31
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045fc:	2102      	movs	r1, #2
 80045fe:	fa01 f202 	lsl.w	r2, r1, r2
 8004602:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2200      	movs	r2, #0
 8004608:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004610:	2b00      	cmp	r3, #0
 8004612:	d038      	beq.n	8004686 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004618:	6878      	ldr	r0, [r7, #4]
 800461a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800461c:	e033      	b.n	8004686 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004622:	f003 031f 	and.w	r3, r3, #31
 8004626:	2208      	movs	r2, #8
 8004628:	409a      	lsls	r2, r3
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	4013      	ands	r3, r2
 800462e:	2b00      	cmp	r3, #0
 8004630:	d02a      	beq.n	8004688 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8004632:	68bb      	ldr	r3, [r7, #8]
 8004634:	f003 0308 	and.w	r3, r3, #8
 8004638:	2b00      	cmp	r3, #0
 800463a:	d025      	beq.n	8004688 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	681a      	ldr	r2, [r3, #0]
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f022 020e 	bic.w	r2, r2, #14
 800464a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004650:	f003 021f 	and.w	r2, r3, #31
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004658:	2101      	movs	r1, #1
 800465a:	fa01 f202 	lsl.w	r2, r1, r2
 800465e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2201      	movs	r2, #1
 8004664:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2201      	movs	r2, #1
 800466a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2200      	movs	r2, #0
 8004672:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800467a:	2b00      	cmp	r3, #0
 800467c:	d004      	beq.n	8004688 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004682:	6878      	ldr	r0, [r7, #4]
 8004684:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004686:	bf00      	nop
 8004688:	bf00      	nop
}
 800468a:	3710      	adds	r7, #16
 800468c:	46bd      	mov	sp, r7
 800468e:	bd80      	pop	{r7, pc}

08004690 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8004690:	b480      	push	{r7}
 8004692:	b083      	sub	sp, #12
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 800469c:	4618      	mov	r0, r3
 800469e:	370c      	adds	r7, #12
 80046a0:	46bd      	mov	sp, r7
 80046a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a6:	4770      	bx	lr

080046a8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80046a8:	b480      	push	{r7}
 80046aa:	b085      	sub	sp, #20
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	60f8      	str	r0, [r7, #12]
 80046b0:	60b9      	str	r1, [r7, #8]
 80046b2:	607a      	str	r2, [r7, #4]
 80046b4:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80046ba:	68fa      	ldr	r2, [r7, #12]
 80046bc:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80046be:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d004      	beq.n	80046d2 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046cc:	68fa      	ldr	r2, [r7, #12]
 80046ce:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80046d0:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046d6:	f003 021f 	and.w	r2, r3, #31
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046de:	2101      	movs	r1, #1
 80046e0:	fa01 f202 	lsl.w	r2, r1, r2
 80046e4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	683a      	ldr	r2, [r7, #0]
 80046ec:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	689b      	ldr	r3, [r3, #8]
 80046f2:	2b10      	cmp	r3, #16
 80046f4:	d108      	bne.n	8004708 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	687a      	ldr	r2, [r7, #4]
 80046fc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	68ba      	ldr	r2, [r7, #8]
 8004704:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004706:	e007      	b.n	8004718 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	68ba      	ldr	r2, [r7, #8]
 800470e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	687a      	ldr	r2, [r7, #4]
 8004716:	60da      	str	r2, [r3, #12]
}
 8004718:	bf00      	nop
 800471a:	3714      	adds	r7, #20
 800471c:	46bd      	mov	sp, r7
 800471e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004722:	4770      	bx	lr

08004724 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004724:	b480      	push	{r7}
 8004726:	b087      	sub	sp, #28
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	461a      	mov	r2, r3
 8004732:	4b16      	ldr	r3, [pc, #88]	@ (800478c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8004734:	429a      	cmp	r2, r3
 8004736:	d802      	bhi.n	800473e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8004738:	4b15      	ldr	r3, [pc, #84]	@ (8004790 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800473a:	617b      	str	r3, [r7, #20]
 800473c:	e001      	b.n	8004742 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800473e:	4b15      	ldr	r3, [pc, #84]	@ (8004794 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004740:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8004742:	697b      	ldr	r3, [r7, #20]
 8004744:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	b2db      	uxtb	r3, r3
 800474c:	3b08      	subs	r3, #8
 800474e:	4a12      	ldr	r2, [pc, #72]	@ (8004798 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004750:	fba2 2303 	umull	r2, r3, r2, r3
 8004754:	091b      	lsrs	r3, r3, #4
 8004756:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800475c:	089b      	lsrs	r3, r3, #2
 800475e:	009a      	lsls	r2, r3, #2
 8004760:	693b      	ldr	r3, [r7, #16]
 8004762:	4413      	add	r3, r2
 8004764:	461a      	mov	r2, r3
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	4a0b      	ldr	r2, [pc, #44]	@ (800479c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800476e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	f003 031f 	and.w	r3, r3, #31
 8004776:	2201      	movs	r2, #1
 8004778:	409a      	lsls	r2, r3
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800477e:	bf00      	nop
 8004780:	371c      	adds	r7, #28
 8004782:	46bd      	mov	sp, r7
 8004784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004788:	4770      	bx	lr
 800478a:	bf00      	nop
 800478c:	40020407 	.word	0x40020407
 8004790:	40020800 	.word	0x40020800
 8004794:	40020820 	.word	0x40020820
 8004798:	cccccccd 	.word	0xcccccccd
 800479c:	40020880 	.word	0x40020880

080047a0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80047a0:	b480      	push	{r7}
 80047a2:	b085      	sub	sp, #20
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	685b      	ldr	r3, [r3, #4]
 80047ac:	b2db      	uxtb	r3, r3
 80047ae:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80047b0:	68fa      	ldr	r2, [r7, #12]
 80047b2:	4b0b      	ldr	r3, [pc, #44]	@ (80047e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80047b4:	4413      	add	r3, r2
 80047b6:	009b      	lsls	r3, r3, #2
 80047b8:	461a      	mov	r2, r3
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	4a08      	ldr	r2, [pc, #32]	@ (80047e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80047c2:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	3b01      	subs	r3, #1
 80047c8:	f003 031f 	and.w	r3, r3, #31
 80047cc:	2201      	movs	r2, #1
 80047ce:	409a      	lsls	r2, r3
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80047d4:	bf00      	nop
 80047d6:	3714      	adds	r7, #20
 80047d8:	46bd      	mov	sp, r7
 80047da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047de:	4770      	bx	lr
 80047e0:	1000823f 	.word	0x1000823f
 80047e4:	40020940 	.word	0x40020940

080047e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80047e8:	b480      	push	{r7}
 80047ea:	b087      	sub	sp, #28
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
 80047f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80047f2:	2300      	movs	r3, #0
 80047f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80047f6:	e15a      	b.n	8004aae <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	681a      	ldr	r2, [r3, #0]
 80047fc:	2101      	movs	r1, #1
 80047fe:	697b      	ldr	r3, [r7, #20]
 8004800:	fa01 f303 	lsl.w	r3, r1, r3
 8004804:	4013      	ands	r3, r2
 8004806:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	2b00      	cmp	r3, #0
 800480c:	f000 814c 	beq.w	8004aa8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	685b      	ldr	r3, [r3, #4]
 8004814:	f003 0303 	and.w	r3, r3, #3
 8004818:	2b01      	cmp	r3, #1
 800481a:	d005      	beq.n	8004828 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	685b      	ldr	r3, [r3, #4]
 8004820:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004824:	2b02      	cmp	r3, #2
 8004826:	d130      	bne.n	800488a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	689b      	ldr	r3, [r3, #8]
 800482c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800482e:	697b      	ldr	r3, [r7, #20]
 8004830:	005b      	lsls	r3, r3, #1
 8004832:	2203      	movs	r2, #3
 8004834:	fa02 f303 	lsl.w	r3, r2, r3
 8004838:	43db      	mvns	r3, r3
 800483a:	693a      	ldr	r2, [r7, #16]
 800483c:	4013      	ands	r3, r2
 800483e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	68da      	ldr	r2, [r3, #12]
 8004844:	697b      	ldr	r3, [r7, #20]
 8004846:	005b      	lsls	r3, r3, #1
 8004848:	fa02 f303 	lsl.w	r3, r2, r3
 800484c:	693a      	ldr	r2, [r7, #16]
 800484e:	4313      	orrs	r3, r2
 8004850:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	693a      	ldr	r2, [r7, #16]
 8004856:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	685b      	ldr	r3, [r3, #4]
 800485c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800485e:	2201      	movs	r2, #1
 8004860:	697b      	ldr	r3, [r7, #20]
 8004862:	fa02 f303 	lsl.w	r3, r2, r3
 8004866:	43db      	mvns	r3, r3
 8004868:	693a      	ldr	r2, [r7, #16]
 800486a:	4013      	ands	r3, r2
 800486c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	091b      	lsrs	r3, r3, #4
 8004874:	f003 0201 	and.w	r2, r3, #1
 8004878:	697b      	ldr	r3, [r7, #20]
 800487a:	fa02 f303 	lsl.w	r3, r2, r3
 800487e:	693a      	ldr	r2, [r7, #16]
 8004880:	4313      	orrs	r3, r2
 8004882:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	693a      	ldr	r2, [r7, #16]
 8004888:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	685b      	ldr	r3, [r3, #4]
 800488e:	f003 0303 	and.w	r3, r3, #3
 8004892:	2b03      	cmp	r3, #3
 8004894:	d017      	beq.n	80048c6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	68db      	ldr	r3, [r3, #12]
 800489a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800489c:	697b      	ldr	r3, [r7, #20]
 800489e:	005b      	lsls	r3, r3, #1
 80048a0:	2203      	movs	r2, #3
 80048a2:	fa02 f303 	lsl.w	r3, r2, r3
 80048a6:	43db      	mvns	r3, r3
 80048a8:	693a      	ldr	r2, [r7, #16]
 80048aa:	4013      	ands	r3, r2
 80048ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	689a      	ldr	r2, [r3, #8]
 80048b2:	697b      	ldr	r3, [r7, #20]
 80048b4:	005b      	lsls	r3, r3, #1
 80048b6:	fa02 f303 	lsl.w	r3, r2, r3
 80048ba:	693a      	ldr	r2, [r7, #16]
 80048bc:	4313      	orrs	r3, r2
 80048be:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	693a      	ldr	r2, [r7, #16]
 80048c4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	685b      	ldr	r3, [r3, #4]
 80048ca:	f003 0303 	and.w	r3, r3, #3
 80048ce:	2b02      	cmp	r3, #2
 80048d0:	d123      	bne.n	800491a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80048d2:	697b      	ldr	r3, [r7, #20]
 80048d4:	08da      	lsrs	r2, r3, #3
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	3208      	adds	r2, #8
 80048da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80048de:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80048e0:	697b      	ldr	r3, [r7, #20]
 80048e2:	f003 0307 	and.w	r3, r3, #7
 80048e6:	009b      	lsls	r3, r3, #2
 80048e8:	220f      	movs	r2, #15
 80048ea:	fa02 f303 	lsl.w	r3, r2, r3
 80048ee:	43db      	mvns	r3, r3
 80048f0:	693a      	ldr	r2, [r7, #16]
 80048f2:	4013      	ands	r3, r2
 80048f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	691a      	ldr	r2, [r3, #16]
 80048fa:	697b      	ldr	r3, [r7, #20]
 80048fc:	f003 0307 	and.w	r3, r3, #7
 8004900:	009b      	lsls	r3, r3, #2
 8004902:	fa02 f303 	lsl.w	r3, r2, r3
 8004906:	693a      	ldr	r2, [r7, #16]
 8004908:	4313      	orrs	r3, r2
 800490a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800490c:	697b      	ldr	r3, [r7, #20]
 800490e:	08da      	lsrs	r2, r3, #3
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	3208      	adds	r2, #8
 8004914:	6939      	ldr	r1, [r7, #16]
 8004916:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004920:	697b      	ldr	r3, [r7, #20]
 8004922:	005b      	lsls	r3, r3, #1
 8004924:	2203      	movs	r2, #3
 8004926:	fa02 f303 	lsl.w	r3, r2, r3
 800492a:	43db      	mvns	r3, r3
 800492c:	693a      	ldr	r2, [r7, #16]
 800492e:	4013      	ands	r3, r2
 8004930:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	f003 0203 	and.w	r2, r3, #3
 800493a:	697b      	ldr	r3, [r7, #20]
 800493c:	005b      	lsls	r3, r3, #1
 800493e:	fa02 f303 	lsl.w	r3, r2, r3
 8004942:	693a      	ldr	r2, [r7, #16]
 8004944:	4313      	orrs	r3, r2
 8004946:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	693a      	ldr	r2, [r7, #16]
 800494c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	685b      	ldr	r3, [r3, #4]
 8004952:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004956:	2b00      	cmp	r3, #0
 8004958:	f000 80a6 	beq.w	8004aa8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800495c:	4b5b      	ldr	r3, [pc, #364]	@ (8004acc <HAL_GPIO_Init+0x2e4>)
 800495e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004960:	4a5a      	ldr	r2, [pc, #360]	@ (8004acc <HAL_GPIO_Init+0x2e4>)
 8004962:	f043 0301 	orr.w	r3, r3, #1
 8004966:	6613      	str	r3, [r2, #96]	@ 0x60
 8004968:	4b58      	ldr	r3, [pc, #352]	@ (8004acc <HAL_GPIO_Init+0x2e4>)
 800496a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800496c:	f003 0301 	and.w	r3, r3, #1
 8004970:	60bb      	str	r3, [r7, #8]
 8004972:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004974:	4a56      	ldr	r2, [pc, #344]	@ (8004ad0 <HAL_GPIO_Init+0x2e8>)
 8004976:	697b      	ldr	r3, [r7, #20]
 8004978:	089b      	lsrs	r3, r3, #2
 800497a:	3302      	adds	r3, #2
 800497c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004980:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004982:	697b      	ldr	r3, [r7, #20]
 8004984:	f003 0303 	and.w	r3, r3, #3
 8004988:	009b      	lsls	r3, r3, #2
 800498a:	220f      	movs	r2, #15
 800498c:	fa02 f303 	lsl.w	r3, r2, r3
 8004990:	43db      	mvns	r3, r3
 8004992:	693a      	ldr	r2, [r7, #16]
 8004994:	4013      	ands	r3, r2
 8004996:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800499e:	d01f      	beq.n	80049e0 <HAL_GPIO_Init+0x1f8>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	4a4c      	ldr	r2, [pc, #304]	@ (8004ad4 <HAL_GPIO_Init+0x2ec>)
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d019      	beq.n	80049dc <HAL_GPIO_Init+0x1f4>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	4a4b      	ldr	r2, [pc, #300]	@ (8004ad8 <HAL_GPIO_Init+0x2f0>)
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d013      	beq.n	80049d8 <HAL_GPIO_Init+0x1f0>
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	4a4a      	ldr	r2, [pc, #296]	@ (8004adc <HAL_GPIO_Init+0x2f4>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d00d      	beq.n	80049d4 <HAL_GPIO_Init+0x1ec>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	4a49      	ldr	r2, [pc, #292]	@ (8004ae0 <HAL_GPIO_Init+0x2f8>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d007      	beq.n	80049d0 <HAL_GPIO_Init+0x1e8>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	4a48      	ldr	r2, [pc, #288]	@ (8004ae4 <HAL_GPIO_Init+0x2fc>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d101      	bne.n	80049cc <HAL_GPIO_Init+0x1e4>
 80049c8:	2305      	movs	r3, #5
 80049ca:	e00a      	b.n	80049e2 <HAL_GPIO_Init+0x1fa>
 80049cc:	2306      	movs	r3, #6
 80049ce:	e008      	b.n	80049e2 <HAL_GPIO_Init+0x1fa>
 80049d0:	2304      	movs	r3, #4
 80049d2:	e006      	b.n	80049e2 <HAL_GPIO_Init+0x1fa>
 80049d4:	2303      	movs	r3, #3
 80049d6:	e004      	b.n	80049e2 <HAL_GPIO_Init+0x1fa>
 80049d8:	2302      	movs	r3, #2
 80049da:	e002      	b.n	80049e2 <HAL_GPIO_Init+0x1fa>
 80049dc:	2301      	movs	r3, #1
 80049de:	e000      	b.n	80049e2 <HAL_GPIO_Init+0x1fa>
 80049e0:	2300      	movs	r3, #0
 80049e2:	697a      	ldr	r2, [r7, #20]
 80049e4:	f002 0203 	and.w	r2, r2, #3
 80049e8:	0092      	lsls	r2, r2, #2
 80049ea:	4093      	lsls	r3, r2
 80049ec:	693a      	ldr	r2, [r7, #16]
 80049ee:	4313      	orrs	r3, r2
 80049f0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80049f2:	4937      	ldr	r1, [pc, #220]	@ (8004ad0 <HAL_GPIO_Init+0x2e8>)
 80049f4:	697b      	ldr	r3, [r7, #20]
 80049f6:	089b      	lsrs	r3, r3, #2
 80049f8:	3302      	adds	r3, #2
 80049fa:	693a      	ldr	r2, [r7, #16]
 80049fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004a00:	4b39      	ldr	r3, [pc, #228]	@ (8004ae8 <HAL_GPIO_Init+0x300>)
 8004a02:	689b      	ldr	r3, [r3, #8]
 8004a04:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	43db      	mvns	r3, r3
 8004a0a:	693a      	ldr	r2, [r7, #16]
 8004a0c:	4013      	ands	r3, r2
 8004a0e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	685b      	ldr	r3, [r3, #4]
 8004a14:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d003      	beq.n	8004a24 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004a1c:	693a      	ldr	r2, [r7, #16]
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	4313      	orrs	r3, r2
 8004a22:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004a24:	4a30      	ldr	r2, [pc, #192]	@ (8004ae8 <HAL_GPIO_Init+0x300>)
 8004a26:	693b      	ldr	r3, [r7, #16]
 8004a28:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004a2a:	4b2f      	ldr	r3, [pc, #188]	@ (8004ae8 <HAL_GPIO_Init+0x300>)
 8004a2c:	68db      	ldr	r3, [r3, #12]
 8004a2e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	43db      	mvns	r3, r3
 8004a34:	693a      	ldr	r2, [r7, #16]
 8004a36:	4013      	ands	r3, r2
 8004a38:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	685b      	ldr	r3, [r3, #4]
 8004a3e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d003      	beq.n	8004a4e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004a46:	693a      	ldr	r2, [r7, #16]
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	4313      	orrs	r3, r2
 8004a4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004a4e:	4a26      	ldr	r2, [pc, #152]	@ (8004ae8 <HAL_GPIO_Init+0x300>)
 8004a50:	693b      	ldr	r3, [r7, #16]
 8004a52:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004a54:	4b24      	ldr	r3, [pc, #144]	@ (8004ae8 <HAL_GPIO_Init+0x300>)
 8004a56:	685b      	ldr	r3, [r3, #4]
 8004a58:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	43db      	mvns	r3, r3
 8004a5e:	693a      	ldr	r2, [r7, #16]
 8004a60:	4013      	ands	r3, r2
 8004a62:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	685b      	ldr	r3, [r3, #4]
 8004a68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d003      	beq.n	8004a78 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004a70:	693a      	ldr	r2, [r7, #16]
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	4313      	orrs	r3, r2
 8004a76:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004a78:	4a1b      	ldr	r2, [pc, #108]	@ (8004ae8 <HAL_GPIO_Init+0x300>)
 8004a7a:	693b      	ldr	r3, [r7, #16]
 8004a7c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004a7e:	4b1a      	ldr	r3, [pc, #104]	@ (8004ae8 <HAL_GPIO_Init+0x300>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	43db      	mvns	r3, r3
 8004a88:	693a      	ldr	r2, [r7, #16]
 8004a8a:	4013      	ands	r3, r2
 8004a8c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	685b      	ldr	r3, [r3, #4]
 8004a92:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d003      	beq.n	8004aa2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004a9a:	693a      	ldr	r2, [r7, #16]
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	4313      	orrs	r3, r2
 8004aa0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004aa2:	4a11      	ldr	r2, [pc, #68]	@ (8004ae8 <HAL_GPIO_Init+0x300>)
 8004aa4:	693b      	ldr	r3, [r7, #16]
 8004aa6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004aa8:	697b      	ldr	r3, [r7, #20]
 8004aaa:	3301      	adds	r3, #1
 8004aac:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	681a      	ldr	r2, [r3, #0]
 8004ab2:	697b      	ldr	r3, [r7, #20]
 8004ab4:	fa22 f303 	lsr.w	r3, r2, r3
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	f47f ae9d 	bne.w	80047f8 <HAL_GPIO_Init+0x10>
  }
}
 8004abe:	bf00      	nop
 8004ac0:	bf00      	nop
 8004ac2:	371c      	adds	r7, #28
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aca:	4770      	bx	lr
 8004acc:	40021000 	.word	0x40021000
 8004ad0:	40010000 	.word	0x40010000
 8004ad4:	48000400 	.word	0x48000400
 8004ad8:	48000800 	.word	0x48000800
 8004adc:	48000c00 	.word	0x48000c00
 8004ae0:	48001000 	.word	0x48001000
 8004ae4:	48001400 	.word	0x48001400
 8004ae8:	40010400 	.word	0x40010400

08004aec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004aec:	b480      	push	{r7}
 8004aee:	b083      	sub	sp, #12
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
 8004af4:	460b      	mov	r3, r1
 8004af6:	807b      	strh	r3, [r7, #2]
 8004af8:	4613      	mov	r3, r2
 8004afa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004afc:	787b      	ldrb	r3, [r7, #1]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d003      	beq.n	8004b0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004b02:	887a      	ldrh	r2, [r7, #2]
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004b08:	e002      	b.n	8004b10 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004b0a:	887a      	ldrh	r2, [r7, #2]
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004b10:	bf00      	nop
 8004b12:	370c      	adds	r7, #12
 8004b14:	46bd      	mov	sp, r7
 8004b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1a:	4770      	bx	lr

08004b1c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b082      	sub	sp, #8
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	4603      	mov	r3, r0
 8004b24:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004b26:	4b08      	ldr	r3, [pc, #32]	@ (8004b48 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004b28:	695a      	ldr	r2, [r3, #20]
 8004b2a:	88fb      	ldrh	r3, [r7, #6]
 8004b2c:	4013      	ands	r3, r2
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d006      	beq.n	8004b40 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004b32:	4a05      	ldr	r2, [pc, #20]	@ (8004b48 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004b34:	88fb      	ldrh	r3, [r7, #6]
 8004b36:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004b38:	88fb      	ldrh	r3, [r7, #6]
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	f7fd fb0a 	bl	8002154 <HAL_GPIO_EXTI_Callback>
  }
}
 8004b40:	bf00      	nop
 8004b42:	3708      	adds	r7, #8
 8004b44:	46bd      	mov	sp, r7
 8004b46:	bd80      	pop	{r7, pc}
 8004b48:	40010400 	.word	0x40010400

08004b4c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	b085      	sub	sp, #20
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d141      	bne.n	8004bde <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004b5a:	4b4b      	ldr	r3, [pc, #300]	@ (8004c88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004b62:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b66:	d131      	bne.n	8004bcc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004b68:	4b47      	ldr	r3, [pc, #284]	@ (8004c88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004b6e:	4a46      	ldr	r2, [pc, #280]	@ (8004c88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b70:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004b74:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004b78:	4b43      	ldr	r3, [pc, #268]	@ (8004c88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004b80:	4a41      	ldr	r2, [pc, #260]	@ (8004c88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b82:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004b86:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004b88:	4b40      	ldr	r3, [pc, #256]	@ (8004c8c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	2232      	movs	r2, #50	@ 0x32
 8004b8e:	fb02 f303 	mul.w	r3, r2, r3
 8004b92:	4a3f      	ldr	r2, [pc, #252]	@ (8004c90 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004b94:	fba2 2303 	umull	r2, r3, r2, r3
 8004b98:	0c9b      	lsrs	r3, r3, #18
 8004b9a:	3301      	adds	r3, #1
 8004b9c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004b9e:	e002      	b.n	8004ba6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	3b01      	subs	r3, #1
 8004ba4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004ba6:	4b38      	ldr	r3, [pc, #224]	@ (8004c88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ba8:	695b      	ldr	r3, [r3, #20]
 8004baa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004bae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004bb2:	d102      	bne.n	8004bba <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d1f2      	bne.n	8004ba0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004bba:	4b33      	ldr	r3, [pc, #204]	@ (8004c88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004bbc:	695b      	ldr	r3, [r3, #20]
 8004bbe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004bc2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004bc6:	d158      	bne.n	8004c7a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004bc8:	2303      	movs	r3, #3
 8004bca:	e057      	b.n	8004c7c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004bcc:	4b2e      	ldr	r3, [pc, #184]	@ (8004c88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004bce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004bd2:	4a2d      	ldr	r2, [pc, #180]	@ (8004c88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004bd4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004bd8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004bdc:	e04d      	b.n	8004c7a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004be4:	d141      	bne.n	8004c6a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004be6:	4b28      	ldr	r3, [pc, #160]	@ (8004c88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004bee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004bf2:	d131      	bne.n	8004c58 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004bf4:	4b24      	ldr	r3, [pc, #144]	@ (8004c88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004bf6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004bfa:	4a23      	ldr	r2, [pc, #140]	@ (8004c88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004bfc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c00:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004c04:	4b20      	ldr	r3, [pc, #128]	@ (8004c88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004c0c:	4a1e      	ldr	r2, [pc, #120]	@ (8004c88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c0e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004c12:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004c14:	4b1d      	ldr	r3, [pc, #116]	@ (8004c8c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	2232      	movs	r2, #50	@ 0x32
 8004c1a:	fb02 f303 	mul.w	r3, r2, r3
 8004c1e:	4a1c      	ldr	r2, [pc, #112]	@ (8004c90 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004c20:	fba2 2303 	umull	r2, r3, r2, r3
 8004c24:	0c9b      	lsrs	r3, r3, #18
 8004c26:	3301      	adds	r3, #1
 8004c28:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004c2a:	e002      	b.n	8004c32 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	3b01      	subs	r3, #1
 8004c30:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004c32:	4b15      	ldr	r3, [pc, #84]	@ (8004c88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c34:	695b      	ldr	r3, [r3, #20]
 8004c36:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c3a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c3e:	d102      	bne.n	8004c46 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d1f2      	bne.n	8004c2c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004c46:	4b10      	ldr	r3, [pc, #64]	@ (8004c88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c48:	695b      	ldr	r3, [r3, #20]
 8004c4a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c4e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c52:	d112      	bne.n	8004c7a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004c54:	2303      	movs	r3, #3
 8004c56:	e011      	b.n	8004c7c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004c58:	4b0b      	ldr	r3, [pc, #44]	@ (8004c88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004c5e:	4a0a      	ldr	r2, [pc, #40]	@ (8004c88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c60:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c64:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004c68:	e007      	b.n	8004c7a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004c6a:	4b07      	ldr	r3, [pc, #28]	@ (8004c88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004c72:	4a05      	ldr	r2, [pc, #20]	@ (8004c88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c74:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004c78:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004c7a:	2300      	movs	r3, #0
}
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	3714      	adds	r7, #20
 8004c80:	46bd      	mov	sp, r7
 8004c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c86:	4770      	bx	lr
 8004c88:	40007000 	.word	0x40007000
 8004c8c:	20000200 	.word	0x20000200
 8004c90:	431bde83 	.word	0x431bde83

08004c94 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004c94:	b480      	push	{r7}
 8004c96:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004c98:	4b05      	ldr	r3, [pc, #20]	@ (8004cb0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004c9a:	689b      	ldr	r3, [r3, #8]
 8004c9c:	4a04      	ldr	r2, [pc, #16]	@ (8004cb0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004c9e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004ca2:	6093      	str	r3, [r2, #8]
}
 8004ca4:	bf00      	nop
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cac:	4770      	bx	lr
 8004cae:	bf00      	nop
 8004cb0:	40007000 	.word	0x40007000

08004cb4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b088      	sub	sp, #32
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d101      	bne.n	8004cc6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	e2fe      	b.n	80052c4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f003 0301 	and.w	r3, r3, #1
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d075      	beq.n	8004dbe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004cd2:	4b97      	ldr	r3, [pc, #604]	@ (8004f30 <HAL_RCC_OscConfig+0x27c>)
 8004cd4:	689b      	ldr	r3, [r3, #8]
 8004cd6:	f003 030c 	and.w	r3, r3, #12
 8004cda:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004cdc:	4b94      	ldr	r3, [pc, #592]	@ (8004f30 <HAL_RCC_OscConfig+0x27c>)
 8004cde:	68db      	ldr	r3, [r3, #12]
 8004ce0:	f003 0303 	and.w	r3, r3, #3
 8004ce4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004ce6:	69bb      	ldr	r3, [r7, #24]
 8004ce8:	2b0c      	cmp	r3, #12
 8004cea:	d102      	bne.n	8004cf2 <HAL_RCC_OscConfig+0x3e>
 8004cec:	697b      	ldr	r3, [r7, #20]
 8004cee:	2b03      	cmp	r3, #3
 8004cf0:	d002      	beq.n	8004cf8 <HAL_RCC_OscConfig+0x44>
 8004cf2:	69bb      	ldr	r3, [r7, #24]
 8004cf4:	2b08      	cmp	r3, #8
 8004cf6:	d10b      	bne.n	8004d10 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004cf8:	4b8d      	ldr	r3, [pc, #564]	@ (8004f30 <HAL_RCC_OscConfig+0x27c>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d05b      	beq.n	8004dbc <HAL_RCC_OscConfig+0x108>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	685b      	ldr	r3, [r3, #4]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d157      	bne.n	8004dbc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004d0c:	2301      	movs	r3, #1
 8004d0e:	e2d9      	b.n	80052c4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	685b      	ldr	r3, [r3, #4]
 8004d14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d18:	d106      	bne.n	8004d28 <HAL_RCC_OscConfig+0x74>
 8004d1a:	4b85      	ldr	r3, [pc, #532]	@ (8004f30 <HAL_RCC_OscConfig+0x27c>)
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	4a84      	ldr	r2, [pc, #528]	@ (8004f30 <HAL_RCC_OscConfig+0x27c>)
 8004d20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d24:	6013      	str	r3, [r2, #0]
 8004d26:	e01d      	b.n	8004d64 <HAL_RCC_OscConfig+0xb0>
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	685b      	ldr	r3, [r3, #4]
 8004d2c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004d30:	d10c      	bne.n	8004d4c <HAL_RCC_OscConfig+0x98>
 8004d32:	4b7f      	ldr	r3, [pc, #508]	@ (8004f30 <HAL_RCC_OscConfig+0x27c>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	4a7e      	ldr	r2, [pc, #504]	@ (8004f30 <HAL_RCC_OscConfig+0x27c>)
 8004d38:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004d3c:	6013      	str	r3, [r2, #0]
 8004d3e:	4b7c      	ldr	r3, [pc, #496]	@ (8004f30 <HAL_RCC_OscConfig+0x27c>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	4a7b      	ldr	r2, [pc, #492]	@ (8004f30 <HAL_RCC_OscConfig+0x27c>)
 8004d44:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d48:	6013      	str	r3, [r2, #0]
 8004d4a:	e00b      	b.n	8004d64 <HAL_RCC_OscConfig+0xb0>
 8004d4c:	4b78      	ldr	r3, [pc, #480]	@ (8004f30 <HAL_RCC_OscConfig+0x27c>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4a77      	ldr	r2, [pc, #476]	@ (8004f30 <HAL_RCC_OscConfig+0x27c>)
 8004d52:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004d56:	6013      	str	r3, [r2, #0]
 8004d58:	4b75      	ldr	r3, [pc, #468]	@ (8004f30 <HAL_RCC_OscConfig+0x27c>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4a74      	ldr	r2, [pc, #464]	@ (8004f30 <HAL_RCC_OscConfig+0x27c>)
 8004d5e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004d62:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	685b      	ldr	r3, [r3, #4]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d013      	beq.n	8004d94 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d6c:	f7fd fe24 	bl	80029b8 <HAL_GetTick>
 8004d70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004d72:	e008      	b.n	8004d86 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d74:	f7fd fe20 	bl	80029b8 <HAL_GetTick>
 8004d78:	4602      	mov	r2, r0
 8004d7a:	693b      	ldr	r3, [r7, #16]
 8004d7c:	1ad3      	subs	r3, r2, r3
 8004d7e:	2b64      	cmp	r3, #100	@ 0x64
 8004d80:	d901      	bls.n	8004d86 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004d82:	2303      	movs	r3, #3
 8004d84:	e29e      	b.n	80052c4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004d86:	4b6a      	ldr	r3, [pc, #424]	@ (8004f30 <HAL_RCC_OscConfig+0x27c>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d0f0      	beq.n	8004d74 <HAL_RCC_OscConfig+0xc0>
 8004d92:	e014      	b.n	8004dbe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d94:	f7fd fe10 	bl	80029b8 <HAL_GetTick>
 8004d98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004d9a:	e008      	b.n	8004dae <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d9c:	f7fd fe0c 	bl	80029b8 <HAL_GetTick>
 8004da0:	4602      	mov	r2, r0
 8004da2:	693b      	ldr	r3, [r7, #16]
 8004da4:	1ad3      	subs	r3, r2, r3
 8004da6:	2b64      	cmp	r3, #100	@ 0x64
 8004da8:	d901      	bls.n	8004dae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004daa:	2303      	movs	r3, #3
 8004dac:	e28a      	b.n	80052c4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004dae:	4b60      	ldr	r3, [pc, #384]	@ (8004f30 <HAL_RCC_OscConfig+0x27c>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d1f0      	bne.n	8004d9c <HAL_RCC_OscConfig+0xe8>
 8004dba:	e000      	b.n	8004dbe <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004dbc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f003 0302 	and.w	r3, r3, #2
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d075      	beq.n	8004eb6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004dca:	4b59      	ldr	r3, [pc, #356]	@ (8004f30 <HAL_RCC_OscConfig+0x27c>)
 8004dcc:	689b      	ldr	r3, [r3, #8]
 8004dce:	f003 030c 	and.w	r3, r3, #12
 8004dd2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004dd4:	4b56      	ldr	r3, [pc, #344]	@ (8004f30 <HAL_RCC_OscConfig+0x27c>)
 8004dd6:	68db      	ldr	r3, [r3, #12]
 8004dd8:	f003 0303 	and.w	r3, r3, #3
 8004ddc:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004dde:	69bb      	ldr	r3, [r7, #24]
 8004de0:	2b0c      	cmp	r3, #12
 8004de2:	d102      	bne.n	8004dea <HAL_RCC_OscConfig+0x136>
 8004de4:	697b      	ldr	r3, [r7, #20]
 8004de6:	2b02      	cmp	r3, #2
 8004de8:	d002      	beq.n	8004df0 <HAL_RCC_OscConfig+0x13c>
 8004dea:	69bb      	ldr	r3, [r7, #24]
 8004dec:	2b04      	cmp	r3, #4
 8004dee:	d11f      	bne.n	8004e30 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004df0:	4b4f      	ldr	r3, [pc, #316]	@ (8004f30 <HAL_RCC_OscConfig+0x27c>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d005      	beq.n	8004e08 <HAL_RCC_OscConfig+0x154>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	68db      	ldr	r3, [r3, #12]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d101      	bne.n	8004e08 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004e04:	2301      	movs	r3, #1
 8004e06:	e25d      	b.n	80052c4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e08:	4b49      	ldr	r3, [pc, #292]	@ (8004f30 <HAL_RCC_OscConfig+0x27c>)
 8004e0a:	685b      	ldr	r3, [r3, #4]
 8004e0c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	691b      	ldr	r3, [r3, #16]
 8004e14:	061b      	lsls	r3, r3, #24
 8004e16:	4946      	ldr	r1, [pc, #280]	@ (8004f30 <HAL_RCC_OscConfig+0x27c>)
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004e1c:	4b45      	ldr	r3, [pc, #276]	@ (8004f34 <HAL_RCC_OscConfig+0x280>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	4618      	mov	r0, r3
 8004e22:	f7fd fd7d 	bl	8002920 <HAL_InitTick>
 8004e26:	4603      	mov	r3, r0
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d043      	beq.n	8004eb4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	e249      	b.n	80052c4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	68db      	ldr	r3, [r3, #12]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d023      	beq.n	8004e80 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004e38:	4b3d      	ldr	r3, [pc, #244]	@ (8004f30 <HAL_RCC_OscConfig+0x27c>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4a3c      	ldr	r2, [pc, #240]	@ (8004f30 <HAL_RCC_OscConfig+0x27c>)
 8004e3e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e42:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e44:	f7fd fdb8 	bl	80029b8 <HAL_GetTick>
 8004e48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004e4a:	e008      	b.n	8004e5e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e4c:	f7fd fdb4 	bl	80029b8 <HAL_GetTick>
 8004e50:	4602      	mov	r2, r0
 8004e52:	693b      	ldr	r3, [r7, #16]
 8004e54:	1ad3      	subs	r3, r2, r3
 8004e56:	2b02      	cmp	r3, #2
 8004e58:	d901      	bls.n	8004e5e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004e5a:	2303      	movs	r3, #3
 8004e5c:	e232      	b.n	80052c4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004e5e:	4b34      	ldr	r3, [pc, #208]	@ (8004f30 <HAL_RCC_OscConfig+0x27c>)
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d0f0      	beq.n	8004e4c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e6a:	4b31      	ldr	r3, [pc, #196]	@ (8004f30 <HAL_RCC_OscConfig+0x27c>)
 8004e6c:	685b      	ldr	r3, [r3, #4]
 8004e6e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	691b      	ldr	r3, [r3, #16]
 8004e76:	061b      	lsls	r3, r3, #24
 8004e78:	492d      	ldr	r1, [pc, #180]	@ (8004f30 <HAL_RCC_OscConfig+0x27c>)
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	604b      	str	r3, [r1, #4]
 8004e7e:	e01a      	b.n	8004eb6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e80:	4b2b      	ldr	r3, [pc, #172]	@ (8004f30 <HAL_RCC_OscConfig+0x27c>)
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	4a2a      	ldr	r2, [pc, #168]	@ (8004f30 <HAL_RCC_OscConfig+0x27c>)
 8004e86:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004e8a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e8c:	f7fd fd94 	bl	80029b8 <HAL_GetTick>
 8004e90:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004e92:	e008      	b.n	8004ea6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e94:	f7fd fd90 	bl	80029b8 <HAL_GetTick>
 8004e98:	4602      	mov	r2, r0
 8004e9a:	693b      	ldr	r3, [r7, #16]
 8004e9c:	1ad3      	subs	r3, r2, r3
 8004e9e:	2b02      	cmp	r3, #2
 8004ea0:	d901      	bls.n	8004ea6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004ea2:	2303      	movs	r3, #3
 8004ea4:	e20e      	b.n	80052c4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004ea6:	4b22      	ldr	r3, [pc, #136]	@ (8004f30 <HAL_RCC_OscConfig+0x27c>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d1f0      	bne.n	8004e94 <HAL_RCC_OscConfig+0x1e0>
 8004eb2:	e000      	b.n	8004eb6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004eb4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f003 0308 	and.w	r3, r3, #8
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d041      	beq.n	8004f46 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	695b      	ldr	r3, [r3, #20]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d01c      	beq.n	8004f04 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004eca:	4b19      	ldr	r3, [pc, #100]	@ (8004f30 <HAL_RCC_OscConfig+0x27c>)
 8004ecc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004ed0:	4a17      	ldr	r2, [pc, #92]	@ (8004f30 <HAL_RCC_OscConfig+0x27c>)
 8004ed2:	f043 0301 	orr.w	r3, r3, #1
 8004ed6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004eda:	f7fd fd6d 	bl	80029b8 <HAL_GetTick>
 8004ede:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004ee0:	e008      	b.n	8004ef4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ee2:	f7fd fd69 	bl	80029b8 <HAL_GetTick>
 8004ee6:	4602      	mov	r2, r0
 8004ee8:	693b      	ldr	r3, [r7, #16]
 8004eea:	1ad3      	subs	r3, r2, r3
 8004eec:	2b02      	cmp	r3, #2
 8004eee:	d901      	bls.n	8004ef4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004ef0:	2303      	movs	r3, #3
 8004ef2:	e1e7      	b.n	80052c4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004ef4:	4b0e      	ldr	r3, [pc, #56]	@ (8004f30 <HAL_RCC_OscConfig+0x27c>)
 8004ef6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004efa:	f003 0302 	and.w	r3, r3, #2
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d0ef      	beq.n	8004ee2 <HAL_RCC_OscConfig+0x22e>
 8004f02:	e020      	b.n	8004f46 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004f04:	4b0a      	ldr	r3, [pc, #40]	@ (8004f30 <HAL_RCC_OscConfig+0x27c>)
 8004f06:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004f0a:	4a09      	ldr	r2, [pc, #36]	@ (8004f30 <HAL_RCC_OscConfig+0x27c>)
 8004f0c:	f023 0301 	bic.w	r3, r3, #1
 8004f10:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f14:	f7fd fd50 	bl	80029b8 <HAL_GetTick>
 8004f18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004f1a:	e00d      	b.n	8004f38 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f1c:	f7fd fd4c 	bl	80029b8 <HAL_GetTick>
 8004f20:	4602      	mov	r2, r0
 8004f22:	693b      	ldr	r3, [r7, #16]
 8004f24:	1ad3      	subs	r3, r2, r3
 8004f26:	2b02      	cmp	r3, #2
 8004f28:	d906      	bls.n	8004f38 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004f2a:	2303      	movs	r3, #3
 8004f2c:	e1ca      	b.n	80052c4 <HAL_RCC_OscConfig+0x610>
 8004f2e:	bf00      	nop
 8004f30:	40021000 	.word	0x40021000
 8004f34:	20000204 	.word	0x20000204
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004f38:	4b8c      	ldr	r3, [pc, #560]	@ (800516c <HAL_RCC_OscConfig+0x4b8>)
 8004f3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004f3e:	f003 0302 	and.w	r3, r3, #2
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d1ea      	bne.n	8004f1c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f003 0304 	and.w	r3, r3, #4
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	f000 80a6 	beq.w	80050a0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f54:	2300      	movs	r3, #0
 8004f56:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004f58:	4b84      	ldr	r3, [pc, #528]	@ (800516c <HAL_RCC_OscConfig+0x4b8>)
 8004f5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f5c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d101      	bne.n	8004f68 <HAL_RCC_OscConfig+0x2b4>
 8004f64:	2301      	movs	r3, #1
 8004f66:	e000      	b.n	8004f6a <HAL_RCC_OscConfig+0x2b6>
 8004f68:	2300      	movs	r3, #0
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d00d      	beq.n	8004f8a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f6e:	4b7f      	ldr	r3, [pc, #508]	@ (800516c <HAL_RCC_OscConfig+0x4b8>)
 8004f70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f72:	4a7e      	ldr	r2, [pc, #504]	@ (800516c <HAL_RCC_OscConfig+0x4b8>)
 8004f74:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004f78:	6593      	str	r3, [r2, #88]	@ 0x58
 8004f7a:	4b7c      	ldr	r3, [pc, #496]	@ (800516c <HAL_RCC_OscConfig+0x4b8>)
 8004f7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f82:	60fb      	str	r3, [r7, #12]
 8004f84:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004f86:	2301      	movs	r3, #1
 8004f88:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004f8a:	4b79      	ldr	r3, [pc, #484]	@ (8005170 <HAL_RCC_OscConfig+0x4bc>)
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d118      	bne.n	8004fc8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004f96:	4b76      	ldr	r3, [pc, #472]	@ (8005170 <HAL_RCC_OscConfig+0x4bc>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	4a75      	ldr	r2, [pc, #468]	@ (8005170 <HAL_RCC_OscConfig+0x4bc>)
 8004f9c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004fa0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004fa2:	f7fd fd09 	bl	80029b8 <HAL_GetTick>
 8004fa6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004fa8:	e008      	b.n	8004fbc <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004faa:	f7fd fd05 	bl	80029b8 <HAL_GetTick>
 8004fae:	4602      	mov	r2, r0
 8004fb0:	693b      	ldr	r3, [r7, #16]
 8004fb2:	1ad3      	subs	r3, r2, r3
 8004fb4:	2b02      	cmp	r3, #2
 8004fb6:	d901      	bls.n	8004fbc <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004fb8:	2303      	movs	r3, #3
 8004fba:	e183      	b.n	80052c4 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004fbc:	4b6c      	ldr	r3, [pc, #432]	@ (8005170 <HAL_RCC_OscConfig+0x4bc>)
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d0f0      	beq.n	8004faa <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	689b      	ldr	r3, [r3, #8]
 8004fcc:	2b01      	cmp	r3, #1
 8004fce:	d108      	bne.n	8004fe2 <HAL_RCC_OscConfig+0x32e>
 8004fd0:	4b66      	ldr	r3, [pc, #408]	@ (800516c <HAL_RCC_OscConfig+0x4b8>)
 8004fd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004fd6:	4a65      	ldr	r2, [pc, #404]	@ (800516c <HAL_RCC_OscConfig+0x4b8>)
 8004fd8:	f043 0301 	orr.w	r3, r3, #1
 8004fdc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004fe0:	e024      	b.n	800502c <HAL_RCC_OscConfig+0x378>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	689b      	ldr	r3, [r3, #8]
 8004fe6:	2b05      	cmp	r3, #5
 8004fe8:	d110      	bne.n	800500c <HAL_RCC_OscConfig+0x358>
 8004fea:	4b60      	ldr	r3, [pc, #384]	@ (800516c <HAL_RCC_OscConfig+0x4b8>)
 8004fec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ff0:	4a5e      	ldr	r2, [pc, #376]	@ (800516c <HAL_RCC_OscConfig+0x4b8>)
 8004ff2:	f043 0304 	orr.w	r3, r3, #4
 8004ff6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004ffa:	4b5c      	ldr	r3, [pc, #368]	@ (800516c <HAL_RCC_OscConfig+0x4b8>)
 8004ffc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005000:	4a5a      	ldr	r2, [pc, #360]	@ (800516c <HAL_RCC_OscConfig+0x4b8>)
 8005002:	f043 0301 	orr.w	r3, r3, #1
 8005006:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800500a:	e00f      	b.n	800502c <HAL_RCC_OscConfig+0x378>
 800500c:	4b57      	ldr	r3, [pc, #348]	@ (800516c <HAL_RCC_OscConfig+0x4b8>)
 800500e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005012:	4a56      	ldr	r2, [pc, #344]	@ (800516c <HAL_RCC_OscConfig+0x4b8>)
 8005014:	f023 0301 	bic.w	r3, r3, #1
 8005018:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800501c:	4b53      	ldr	r3, [pc, #332]	@ (800516c <HAL_RCC_OscConfig+0x4b8>)
 800501e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005022:	4a52      	ldr	r2, [pc, #328]	@ (800516c <HAL_RCC_OscConfig+0x4b8>)
 8005024:	f023 0304 	bic.w	r3, r3, #4
 8005028:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	689b      	ldr	r3, [r3, #8]
 8005030:	2b00      	cmp	r3, #0
 8005032:	d016      	beq.n	8005062 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005034:	f7fd fcc0 	bl	80029b8 <HAL_GetTick>
 8005038:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800503a:	e00a      	b.n	8005052 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800503c:	f7fd fcbc 	bl	80029b8 <HAL_GetTick>
 8005040:	4602      	mov	r2, r0
 8005042:	693b      	ldr	r3, [r7, #16]
 8005044:	1ad3      	subs	r3, r2, r3
 8005046:	f241 3288 	movw	r2, #5000	@ 0x1388
 800504a:	4293      	cmp	r3, r2
 800504c:	d901      	bls.n	8005052 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800504e:	2303      	movs	r3, #3
 8005050:	e138      	b.n	80052c4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005052:	4b46      	ldr	r3, [pc, #280]	@ (800516c <HAL_RCC_OscConfig+0x4b8>)
 8005054:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005058:	f003 0302 	and.w	r3, r3, #2
 800505c:	2b00      	cmp	r3, #0
 800505e:	d0ed      	beq.n	800503c <HAL_RCC_OscConfig+0x388>
 8005060:	e015      	b.n	800508e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005062:	f7fd fca9 	bl	80029b8 <HAL_GetTick>
 8005066:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005068:	e00a      	b.n	8005080 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800506a:	f7fd fca5 	bl	80029b8 <HAL_GetTick>
 800506e:	4602      	mov	r2, r0
 8005070:	693b      	ldr	r3, [r7, #16]
 8005072:	1ad3      	subs	r3, r2, r3
 8005074:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005078:	4293      	cmp	r3, r2
 800507a:	d901      	bls.n	8005080 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800507c:	2303      	movs	r3, #3
 800507e:	e121      	b.n	80052c4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005080:	4b3a      	ldr	r3, [pc, #232]	@ (800516c <HAL_RCC_OscConfig+0x4b8>)
 8005082:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005086:	f003 0302 	and.w	r3, r3, #2
 800508a:	2b00      	cmp	r3, #0
 800508c:	d1ed      	bne.n	800506a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800508e:	7ffb      	ldrb	r3, [r7, #31]
 8005090:	2b01      	cmp	r3, #1
 8005092:	d105      	bne.n	80050a0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005094:	4b35      	ldr	r3, [pc, #212]	@ (800516c <HAL_RCC_OscConfig+0x4b8>)
 8005096:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005098:	4a34      	ldr	r2, [pc, #208]	@ (800516c <HAL_RCC_OscConfig+0x4b8>)
 800509a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800509e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f003 0320 	and.w	r3, r3, #32
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d03c      	beq.n	8005126 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	699b      	ldr	r3, [r3, #24]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d01c      	beq.n	80050ee <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80050b4:	4b2d      	ldr	r3, [pc, #180]	@ (800516c <HAL_RCC_OscConfig+0x4b8>)
 80050b6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80050ba:	4a2c      	ldr	r2, [pc, #176]	@ (800516c <HAL_RCC_OscConfig+0x4b8>)
 80050bc:	f043 0301 	orr.w	r3, r3, #1
 80050c0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050c4:	f7fd fc78 	bl	80029b8 <HAL_GetTick>
 80050c8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80050ca:	e008      	b.n	80050de <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80050cc:	f7fd fc74 	bl	80029b8 <HAL_GetTick>
 80050d0:	4602      	mov	r2, r0
 80050d2:	693b      	ldr	r3, [r7, #16]
 80050d4:	1ad3      	subs	r3, r2, r3
 80050d6:	2b02      	cmp	r3, #2
 80050d8:	d901      	bls.n	80050de <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80050da:	2303      	movs	r3, #3
 80050dc:	e0f2      	b.n	80052c4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80050de:	4b23      	ldr	r3, [pc, #140]	@ (800516c <HAL_RCC_OscConfig+0x4b8>)
 80050e0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80050e4:	f003 0302 	and.w	r3, r3, #2
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d0ef      	beq.n	80050cc <HAL_RCC_OscConfig+0x418>
 80050ec:	e01b      	b.n	8005126 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80050ee:	4b1f      	ldr	r3, [pc, #124]	@ (800516c <HAL_RCC_OscConfig+0x4b8>)
 80050f0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80050f4:	4a1d      	ldr	r2, [pc, #116]	@ (800516c <HAL_RCC_OscConfig+0x4b8>)
 80050f6:	f023 0301 	bic.w	r3, r3, #1
 80050fa:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050fe:	f7fd fc5b 	bl	80029b8 <HAL_GetTick>
 8005102:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005104:	e008      	b.n	8005118 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005106:	f7fd fc57 	bl	80029b8 <HAL_GetTick>
 800510a:	4602      	mov	r2, r0
 800510c:	693b      	ldr	r3, [r7, #16]
 800510e:	1ad3      	subs	r3, r2, r3
 8005110:	2b02      	cmp	r3, #2
 8005112:	d901      	bls.n	8005118 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8005114:	2303      	movs	r3, #3
 8005116:	e0d5      	b.n	80052c4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005118:	4b14      	ldr	r3, [pc, #80]	@ (800516c <HAL_RCC_OscConfig+0x4b8>)
 800511a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800511e:	f003 0302 	and.w	r3, r3, #2
 8005122:	2b00      	cmp	r3, #0
 8005124:	d1ef      	bne.n	8005106 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	69db      	ldr	r3, [r3, #28]
 800512a:	2b00      	cmp	r3, #0
 800512c:	f000 80c9 	beq.w	80052c2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005130:	4b0e      	ldr	r3, [pc, #56]	@ (800516c <HAL_RCC_OscConfig+0x4b8>)
 8005132:	689b      	ldr	r3, [r3, #8]
 8005134:	f003 030c 	and.w	r3, r3, #12
 8005138:	2b0c      	cmp	r3, #12
 800513a:	f000 8083 	beq.w	8005244 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	69db      	ldr	r3, [r3, #28]
 8005142:	2b02      	cmp	r3, #2
 8005144:	d15e      	bne.n	8005204 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005146:	4b09      	ldr	r3, [pc, #36]	@ (800516c <HAL_RCC_OscConfig+0x4b8>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4a08      	ldr	r2, [pc, #32]	@ (800516c <HAL_RCC_OscConfig+0x4b8>)
 800514c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005150:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005152:	f7fd fc31 	bl	80029b8 <HAL_GetTick>
 8005156:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005158:	e00c      	b.n	8005174 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800515a:	f7fd fc2d 	bl	80029b8 <HAL_GetTick>
 800515e:	4602      	mov	r2, r0
 8005160:	693b      	ldr	r3, [r7, #16]
 8005162:	1ad3      	subs	r3, r2, r3
 8005164:	2b02      	cmp	r3, #2
 8005166:	d905      	bls.n	8005174 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8005168:	2303      	movs	r3, #3
 800516a:	e0ab      	b.n	80052c4 <HAL_RCC_OscConfig+0x610>
 800516c:	40021000 	.word	0x40021000
 8005170:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005174:	4b55      	ldr	r3, [pc, #340]	@ (80052cc <HAL_RCC_OscConfig+0x618>)
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800517c:	2b00      	cmp	r3, #0
 800517e:	d1ec      	bne.n	800515a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005180:	4b52      	ldr	r3, [pc, #328]	@ (80052cc <HAL_RCC_OscConfig+0x618>)
 8005182:	68da      	ldr	r2, [r3, #12]
 8005184:	4b52      	ldr	r3, [pc, #328]	@ (80052d0 <HAL_RCC_OscConfig+0x61c>)
 8005186:	4013      	ands	r3, r2
 8005188:	687a      	ldr	r2, [r7, #4]
 800518a:	6a11      	ldr	r1, [r2, #32]
 800518c:	687a      	ldr	r2, [r7, #4]
 800518e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005190:	3a01      	subs	r2, #1
 8005192:	0112      	lsls	r2, r2, #4
 8005194:	4311      	orrs	r1, r2
 8005196:	687a      	ldr	r2, [r7, #4]
 8005198:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800519a:	0212      	lsls	r2, r2, #8
 800519c:	4311      	orrs	r1, r2
 800519e:	687a      	ldr	r2, [r7, #4]
 80051a0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80051a2:	0852      	lsrs	r2, r2, #1
 80051a4:	3a01      	subs	r2, #1
 80051a6:	0552      	lsls	r2, r2, #21
 80051a8:	4311      	orrs	r1, r2
 80051aa:	687a      	ldr	r2, [r7, #4]
 80051ac:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80051ae:	0852      	lsrs	r2, r2, #1
 80051b0:	3a01      	subs	r2, #1
 80051b2:	0652      	lsls	r2, r2, #25
 80051b4:	4311      	orrs	r1, r2
 80051b6:	687a      	ldr	r2, [r7, #4]
 80051b8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80051ba:	06d2      	lsls	r2, r2, #27
 80051bc:	430a      	orrs	r2, r1
 80051be:	4943      	ldr	r1, [pc, #268]	@ (80052cc <HAL_RCC_OscConfig+0x618>)
 80051c0:	4313      	orrs	r3, r2
 80051c2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80051c4:	4b41      	ldr	r3, [pc, #260]	@ (80052cc <HAL_RCC_OscConfig+0x618>)
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	4a40      	ldr	r2, [pc, #256]	@ (80052cc <HAL_RCC_OscConfig+0x618>)
 80051ca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80051ce:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80051d0:	4b3e      	ldr	r3, [pc, #248]	@ (80052cc <HAL_RCC_OscConfig+0x618>)
 80051d2:	68db      	ldr	r3, [r3, #12]
 80051d4:	4a3d      	ldr	r2, [pc, #244]	@ (80052cc <HAL_RCC_OscConfig+0x618>)
 80051d6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80051da:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051dc:	f7fd fbec 	bl	80029b8 <HAL_GetTick>
 80051e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80051e2:	e008      	b.n	80051f6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051e4:	f7fd fbe8 	bl	80029b8 <HAL_GetTick>
 80051e8:	4602      	mov	r2, r0
 80051ea:	693b      	ldr	r3, [r7, #16]
 80051ec:	1ad3      	subs	r3, r2, r3
 80051ee:	2b02      	cmp	r3, #2
 80051f0:	d901      	bls.n	80051f6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80051f2:	2303      	movs	r3, #3
 80051f4:	e066      	b.n	80052c4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80051f6:	4b35      	ldr	r3, [pc, #212]	@ (80052cc <HAL_RCC_OscConfig+0x618>)
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d0f0      	beq.n	80051e4 <HAL_RCC_OscConfig+0x530>
 8005202:	e05e      	b.n	80052c2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005204:	4b31      	ldr	r3, [pc, #196]	@ (80052cc <HAL_RCC_OscConfig+0x618>)
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	4a30      	ldr	r2, [pc, #192]	@ (80052cc <HAL_RCC_OscConfig+0x618>)
 800520a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800520e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005210:	f7fd fbd2 	bl	80029b8 <HAL_GetTick>
 8005214:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005216:	e008      	b.n	800522a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005218:	f7fd fbce 	bl	80029b8 <HAL_GetTick>
 800521c:	4602      	mov	r2, r0
 800521e:	693b      	ldr	r3, [r7, #16]
 8005220:	1ad3      	subs	r3, r2, r3
 8005222:	2b02      	cmp	r3, #2
 8005224:	d901      	bls.n	800522a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8005226:	2303      	movs	r3, #3
 8005228:	e04c      	b.n	80052c4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800522a:	4b28      	ldr	r3, [pc, #160]	@ (80052cc <HAL_RCC_OscConfig+0x618>)
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005232:	2b00      	cmp	r3, #0
 8005234:	d1f0      	bne.n	8005218 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005236:	4b25      	ldr	r3, [pc, #148]	@ (80052cc <HAL_RCC_OscConfig+0x618>)
 8005238:	68da      	ldr	r2, [r3, #12]
 800523a:	4924      	ldr	r1, [pc, #144]	@ (80052cc <HAL_RCC_OscConfig+0x618>)
 800523c:	4b25      	ldr	r3, [pc, #148]	@ (80052d4 <HAL_RCC_OscConfig+0x620>)
 800523e:	4013      	ands	r3, r2
 8005240:	60cb      	str	r3, [r1, #12]
 8005242:	e03e      	b.n	80052c2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	69db      	ldr	r3, [r3, #28]
 8005248:	2b01      	cmp	r3, #1
 800524a:	d101      	bne.n	8005250 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800524c:	2301      	movs	r3, #1
 800524e:	e039      	b.n	80052c4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005250:	4b1e      	ldr	r3, [pc, #120]	@ (80052cc <HAL_RCC_OscConfig+0x618>)
 8005252:	68db      	ldr	r3, [r3, #12]
 8005254:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005256:	697b      	ldr	r3, [r7, #20]
 8005258:	f003 0203 	and.w	r2, r3, #3
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6a1b      	ldr	r3, [r3, #32]
 8005260:	429a      	cmp	r2, r3
 8005262:	d12c      	bne.n	80052be <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005264:	697b      	ldr	r3, [r7, #20]
 8005266:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800526e:	3b01      	subs	r3, #1
 8005270:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005272:	429a      	cmp	r2, r3
 8005274:	d123      	bne.n	80052be <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005276:	697b      	ldr	r3, [r7, #20]
 8005278:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005280:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005282:	429a      	cmp	r2, r3
 8005284:	d11b      	bne.n	80052be <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005286:	697b      	ldr	r3, [r7, #20]
 8005288:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005290:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005292:	429a      	cmp	r2, r3
 8005294:	d113      	bne.n	80052be <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005296:	697b      	ldr	r3, [r7, #20]
 8005298:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052a0:	085b      	lsrs	r3, r3, #1
 80052a2:	3b01      	subs	r3, #1
 80052a4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80052a6:	429a      	cmp	r2, r3
 80052a8:	d109      	bne.n	80052be <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80052aa:	697b      	ldr	r3, [r7, #20]
 80052ac:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80052b4:	085b      	lsrs	r3, r3, #1
 80052b6:	3b01      	subs	r3, #1
 80052b8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80052ba:	429a      	cmp	r2, r3
 80052bc:	d001      	beq.n	80052c2 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80052be:	2301      	movs	r3, #1
 80052c0:	e000      	b.n	80052c4 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80052c2:	2300      	movs	r3, #0
}
 80052c4:	4618      	mov	r0, r3
 80052c6:	3720      	adds	r7, #32
 80052c8:	46bd      	mov	sp, r7
 80052ca:	bd80      	pop	{r7, pc}
 80052cc:	40021000 	.word	0x40021000
 80052d0:	019f800c 	.word	0x019f800c
 80052d4:	feeefffc 	.word	0xfeeefffc

080052d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b086      	sub	sp, #24
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
 80052e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80052e2:	2300      	movs	r3, #0
 80052e4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d101      	bne.n	80052f0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80052ec:	2301      	movs	r3, #1
 80052ee:	e11e      	b.n	800552e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80052f0:	4b91      	ldr	r3, [pc, #580]	@ (8005538 <HAL_RCC_ClockConfig+0x260>)
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f003 030f 	and.w	r3, r3, #15
 80052f8:	683a      	ldr	r2, [r7, #0]
 80052fa:	429a      	cmp	r2, r3
 80052fc:	d910      	bls.n	8005320 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052fe:	4b8e      	ldr	r3, [pc, #568]	@ (8005538 <HAL_RCC_ClockConfig+0x260>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f023 020f 	bic.w	r2, r3, #15
 8005306:	498c      	ldr	r1, [pc, #560]	@ (8005538 <HAL_RCC_ClockConfig+0x260>)
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	4313      	orrs	r3, r2
 800530c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800530e:	4b8a      	ldr	r3, [pc, #552]	@ (8005538 <HAL_RCC_ClockConfig+0x260>)
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f003 030f 	and.w	r3, r3, #15
 8005316:	683a      	ldr	r2, [r7, #0]
 8005318:	429a      	cmp	r2, r3
 800531a:	d001      	beq.n	8005320 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800531c:	2301      	movs	r3, #1
 800531e:	e106      	b.n	800552e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f003 0301 	and.w	r3, r3, #1
 8005328:	2b00      	cmp	r3, #0
 800532a:	d073      	beq.n	8005414 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	685b      	ldr	r3, [r3, #4]
 8005330:	2b03      	cmp	r3, #3
 8005332:	d129      	bne.n	8005388 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005334:	4b81      	ldr	r3, [pc, #516]	@ (800553c <HAL_RCC_ClockConfig+0x264>)
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800533c:	2b00      	cmp	r3, #0
 800533e:	d101      	bne.n	8005344 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005340:	2301      	movs	r3, #1
 8005342:	e0f4      	b.n	800552e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005344:	f000 f99e 	bl	8005684 <RCC_GetSysClockFreqFromPLLSource>
 8005348:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800534a:	693b      	ldr	r3, [r7, #16]
 800534c:	4a7c      	ldr	r2, [pc, #496]	@ (8005540 <HAL_RCC_ClockConfig+0x268>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d93f      	bls.n	80053d2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005352:	4b7a      	ldr	r3, [pc, #488]	@ (800553c <HAL_RCC_ClockConfig+0x264>)
 8005354:	689b      	ldr	r3, [r3, #8]
 8005356:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800535a:	2b00      	cmp	r3, #0
 800535c:	d009      	beq.n	8005372 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005366:	2b00      	cmp	r3, #0
 8005368:	d033      	beq.n	80053d2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800536e:	2b00      	cmp	r3, #0
 8005370:	d12f      	bne.n	80053d2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005372:	4b72      	ldr	r3, [pc, #456]	@ (800553c <HAL_RCC_ClockConfig+0x264>)
 8005374:	689b      	ldr	r3, [r3, #8]
 8005376:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800537a:	4a70      	ldr	r2, [pc, #448]	@ (800553c <HAL_RCC_ClockConfig+0x264>)
 800537c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005380:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005382:	2380      	movs	r3, #128	@ 0x80
 8005384:	617b      	str	r3, [r7, #20]
 8005386:	e024      	b.n	80053d2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	685b      	ldr	r3, [r3, #4]
 800538c:	2b02      	cmp	r3, #2
 800538e:	d107      	bne.n	80053a0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005390:	4b6a      	ldr	r3, [pc, #424]	@ (800553c <HAL_RCC_ClockConfig+0x264>)
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005398:	2b00      	cmp	r3, #0
 800539a:	d109      	bne.n	80053b0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800539c:	2301      	movs	r3, #1
 800539e:	e0c6      	b.n	800552e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80053a0:	4b66      	ldr	r3, [pc, #408]	@ (800553c <HAL_RCC_ClockConfig+0x264>)
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d101      	bne.n	80053b0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80053ac:	2301      	movs	r3, #1
 80053ae:	e0be      	b.n	800552e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80053b0:	f000 f8ce 	bl	8005550 <HAL_RCC_GetSysClockFreq>
 80053b4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80053b6:	693b      	ldr	r3, [r7, #16]
 80053b8:	4a61      	ldr	r2, [pc, #388]	@ (8005540 <HAL_RCC_ClockConfig+0x268>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d909      	bls.n	80053d2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80053be:	4b5f      	ldr	r3, [pc, #380]	@ (800553c <HAL_RCC_ClockConfig+0x264>)
 80053c0:	689b      	ldr	r3, [r3, #8]
 80053c2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80053c6:	4a5d      	ldr	r2, [pc, #372]	@ (800553c <HAL_RCC_ClockConfig+0x264>)
 80053c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80053cc:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80053ce:	2380      	movs	r3, #128	@ 0x80
 80053d0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80053d2:	4b5a      	ldr	r3, [pc, #360]	@ (800553c <HAL_RCC_ClockConfig+0x264>)
 80053d4:	689b      	ldr	r3, [r3, #8]
 80053d6:	f023 0203 	bic.w	r2, r3, #3
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	685b      	ldr	r3, [r3, #4]
 80053de:	4957      	ldr	r1, [pc, #348]	@ (800553c <HAL_RCC_ClockConfig+0x264>)
 80053e0:	4313      	orrs	r3, r2
 80053e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80053e4:	f7fd fae8 	bl	80029b8 <HAL_GetTick>
 80053e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053ea:	e00a      	b.n	8005402 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80053ec:	f7fd fae4 	bl	80029b8 <HAL_GetTick>
 80053f0:	4602      	mov	r2, r0
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	1ad3      	subs	r3, r2, r3
 80053f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d901      	bls.n	8005402 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80053fe:	2303      	movs	r3, #3
 8005400:	e095      	b.n	800552e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005402:	4b4e      	ldr	r3, [pc, #312]	@ (800553c <HAL_RCC_ClockConfig+0x264>)
 8005404:	689b      	ldr	r3, [r3, #8]
 8005406:	f003 020c 	and.w	r2, r3, #12
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	685b      	ldr	r3, [r3, #4]
 800540e:	009b      	lsls	r3, r3, #2
 8005410:	429a      	cmp	r2, r3
 8005412:	d1eb      	bne.n	80053ec <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f003 0302 	and.w	r3, r3, #2
 800541c:	2b00      	cmp	r3, #0
 800541e:	d023      	beq.n	8005468 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f003 0304 	and.w	r3, r3, #4
 8005428:	2b00      	cmp	r3, #0
 800542a:	d005      	beq.n	8005438 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800542c:	4b43      	ldr	r3, [pc, #268]	@ (800553c <HAL_RCC_ClockConfig+0x264>)
 800542e:	689b      	ldr	r3, [r3, #8]
 8005430:	4a42      	ldr	r2, [pc, #264]	@ (800553c <HAL_RCC_ClockConfig+0x264>)
 8005432:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005436:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f003 0308 	and.w	r3, r3, #8
 8005440:	2b00      	cmp	r3, #0
 8005442:	d007      	beq.n	8005454 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005444:	4b3d      	ldr	r3, [pc, #244]	@ (800553c <HAL_RCC_ClockConfig+0x264>)
 8005446:	689b      	ldr	r3, [r3, #8]
 8005448:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800544c:	4a3b      	ldr	r2, [pc, #236]	@ (800553c <HAL_RCC_ClockConfig+0x264>)
 800544e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005452:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005454:	4b39      	ldr	r3, [pc, #228]	@ (800553c <HAL_RCC_ClockConfig+0x264>)
 8005456:	689b      	ldr	r3, [r3, #8]
 8005458:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	689b      	ldr	r3, [r3, #8]
 8005460:	4936      	ldr	r1, [pc, #216]	@ (800553c <HAL_RCC_ClockConfig+0x264>)
 8005462:	4313      	orrs	r3, r2
 8005464:	608b      	str	r3, [r1, #8]
 8005466:	e008      	b.n	800547a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005468:	697b      	ldr	r3, [r7, #20]
 800546a:	2b80      	cmp	r3, #128	@ 0x80
 800546c:	d105      	bne.n	800547a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800546e:	4b33      	ldr	r3, [pc, #204]	@ (800553c <HAL_RCC_ClockConfig+0x264>)
 8005470:	689b      	ldr	r3, [r3, #8]
 8005472:	4a32      	ldr	r2, [pc, #200]	@ (800553c <HAL_RCC_ClockConfig+0x264>)
 8005474:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005478:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800547a:	4b2f      	ldr	r3, [pc, #188]	@ (8005538 <HAL_RCC_ClockConfig+0x260>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f003 030f 	and.w	r3, r3, #15
 8005482:	683a      	ldr	r2, [r7, #0]
 8005484:	429a      	cmp	r2, r3
 8005486:	d21d      	bcs.n	80054c4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005488:	4b2b      	ldr	r3, [pc, #172]	@ (8005538 <HAL_RCC_ClockConfig+0x260>)
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f023 020f 	bic.w	r2, r3, #15
 8005490:	4929      	ldr	r1, [pc, #164]	@ (8005538 <HAL_RCC_ClockConfig+0x260>)
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	4313      	orrs	r3, r2
 8005496:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005498:	f7fd fa8e 	bl	80029b8 <HAL_GetTick>
 800549c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800549e:	e00a      	b.n	80054b6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80054a0:	f7fd fa8a 	bl	80029b8 <HAL_GetTick>
 80054a4:	4602      	mov	r2, r0
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	1ad3      	subs	r3, r2, r3
 80054aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d901      	bls.n	80054b6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80054b2:	2303      	movs	r3, #3
 80054b4:	e03b      	b.n	800552e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80054b6:	4b20      	ldr	r3, [pc, #128]	@ (8005538 <HAL_RCC_ClockConfig+0x260>)
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f003 030f 	and.w	r3, r3, #15
 80054be:	683a      	ldr	r2, [r7, #0]
 80054c0:	429a      	cmp	r2, r3
 80054c2:	d1ed      	bne.n	80054a0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f003 0304 	and.w	r3, r3, #4
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d008      	beq.n	80054e2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80054d0:	4b1a      	ldr	r3, [pc, #104]	@ (800553c <HAL_RCC_ClockConfig+0x264>)
 80054d2:	689b      	ldr	r3, [r3, #8]
 80054d4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	68db      	ldr	r3, [r3, #12]
 80054dc:	4917      	ldr	r1, [pc, #92]	@ (800553c <HAL_RCC_ClockConfig+0x264>)
 80054de:	4313      	orrs	r3, r2
 80054e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f003 0308 	and.w	r3, r3, #8
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d009      	beq.n	8005502 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80054ee:	4b13      	ldr	r3, [pc, #76]	@ (800553c <HAL_RCC_ClockConfig+0x264>)
 80054f0:	689b      	ldr	r3, [r3, #8]
 80054f2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	691b      	ldr	r3, [r3, #16]
 80054fa:	00db      	lsls	r3, r3, #3
 80054fc:	490f      	ldr	r1, [pc, #60]	@ (800553c <HAL_RCC_ClockConfig+0x264>)
 80054fe:	4313      	orrs	r3, r2
 8005500:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005502:	f000 f825 	bl	8005550 <HAL_RCC_GetSysClockFreq>
 8005506:	4602      	mov	r2, r0
 8005508:	4b0c      	ldr	r3, [pc, #48]	@ (800553c <HAL_RCC_ClockConfig+0x264>)
 800550a:	689b      	ldr	r3, [r3, #8]
 800550c:	091b      	lsrs	r3, r3, #4
 800550e:	f003 030f 	and.w	r3, r3, #15
 8005512:	490c      	ldr	r1, [pc, #48]	@ (8005544 <HAL_RCC_ClockConfig+0x26c>)
 8005514:	5ccb      	ldrb	r3, [r1, r3]
 8005516:	f003 031f 	and.w	r3, r3, #31
 800551a:	fa22 f303 	lsr.w	r3, r2, r3
 800551e:	4a0a      	ldr	r2, [pc, #40]	@ (8005548 <HAL_RCC_ClockConfig+0x270>)
 8005520:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005522:	4b0a      	ldr	r3, [pc, #40]	@ (800554c <HAL_RCC_ClockConfig+0x274>)
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	4618      	mov	r0, r3
 8005528:	f7fd f9fa 	bl	8002920 <HAL_InitTick>
 800552c:	4603      	mov	r3, r0
}
 800552e:	4618      	mov	r0, r3
 8005530:	3718      	adds	r7, #24
 8005532:	46bd      	mov	sp, r7
 8005534:	bd80      	pop	{r7, pc}
 8005536:	bf00      	nop
 8005538:	40022000 	.word	0x40022000
 800553c:	40021000 	.word	0x40021000
 8005540:	04c4b400 	.word	0x04c4b400
 8005544:	0800b23c 	.word	0x0800b23c
 8005548:	20000200 	.word	0x20000200
 800554c:	20000204 	.word	0x20000204

08005550 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005550:	b480      	push	{r7}
 8005552:	b087      	sub	sp, #28
 8005554:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005556:	4b2c      	ldr	r3, [pc, #176]	@ (8005608 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005558:	689b      	ldr	r3, [r3, #8]
 800555a:	f003 030c 	and.w	r3, r3, #12
 800555e:	2b04      	cmp	r3, #4
 8005560:	d102      	bne.n	8005568 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005562:	4b2a      	ldr	r3, [pc, #168]	@ (800560c <HAL_RCC_GetSysClockFreq+0xbc>)
 8005564:	613b      	str	r3, [r7, #16]
 8005566:	e047      	b.n	80055f8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005568:	4b27      	ldr	r3, [pc, #156]	@ (8005608 <HAL_RCC_GetSysClockFreq+0xb8>)
 800556a:	689b      	ldr	r3, [r3, #8]
 800556c:	f003 030c 	and.w	r3, r3, #12
 8005570:	2b08      	cmp	r3, #8
 8005572:	d102      	bne.n	800557a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005574:	4b26      	ldr	r3, [pc, #152]	@ (8005610 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005576:	613b      	str	r3, [r7, #16]
 8005578:	e03e      	b.n	80055f8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800557a:	4b23      	ldr	r3, [pc, #140]	@ (8005608 <HAL_RCC_GetSysClockFreq+0xb8>)
 800557c:	689b      	ldr	r3, [r3, #8]
 800557e:	f003 030c 	and.w	r3, r3, #12
 8005582:	2b0c      	cmp	r3, #12
 8005584:	d136      	bne.n	80055f4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005586:	4b20      	ldr	r3, [pc, #128]	@ (8005608 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005588:	68db      	ldr	r3, [r3, #12]
 800558a:	f003 0303 	and.w	r3, r3, #3
 800558e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005590:	4b1d      	ldr	r3, [pc, #116]	@ (8005608 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005592:	68db      	ldr	r3, [r3, #12]
 8005594:	091b      	lsrs	r3, r3, #4
 8005596:	f003 030f 	and.w	r3, r3, #15
 800559a:	3301      	adds	r3, #1
 800559c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	2b03      	cmp	r3, #3
 80055a2:	d10c      	bne.n	80055be <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80055a4:	4a1a      	ldr	r2, [pc, #104]	@ (8005610 <HAL_RCC_GetSysClockFreq+0xc0>)
 80055a6:	68bb      	ldr	r3, [r7, #8]
 80055a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80055ac:	4a16      	ldr	r2, [pc, #88]	@ (8005608 <HAL_RCC_GetSysClockFreq+0xb8>)
 80055ae:	68d2      	ldr	r2, [r2, #12]
 80055b0:	0a12      	lsrs	r2, r2, #8
 80055b2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80055b6:	fb02 f303 	mul.w	r3, r2, r3
 80055ba:	617b      	str	r3, [r7, #20]
      break;
 80055bc:	e00c      	b.n	80055d8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80055be:	4a13      	ldr	r2, [pc, #76]	@ (800560c <HAL_RCC_GetSysClockFreq+0xbc>)
 80055c0:	68bb      	ldr	r3, [r7, #8]
 80055c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80055c6:	4a10      	ldr	r2, [pc, #64]	@ (8005608 <HAL_RCC_GetSysClockFreq+0xb8>)
 80055c8:	68d2      	ldr	r2, [r2, #12]
 80055ca:	0a12      	lsrs	r2, r2, #8
 80055cc:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80055d0:	fb02 f303 	mul.w	r3, r2, r3
 80055d4:	617b      	str	r3, [r7, #20]
      break;
 80055d6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80055d8:	4b0b      	ldr	r3, [pc, #44]	@ (8005608 <HAL_RCC_GetSysClockFreq+0xb8>)
 80055da:	68db      	ldr	r3, [r3, #12]
 80055dc:	0e5b      	lsrs	r3, r3, #25
 80055de:	f003 0303 	and.w	r3, r3, #3
 80055e2:	3301      	adds	r3, #1
 80055e4:	005b      	lsls	r3, r3, #1
 80055e6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80055e8:	697a      	ldr	r2, [r7, #20]
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80055f0:	613b      	str	r3, [r7, #16]
 80055f2:	e001      	b.n	80055f8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80055f4:	2300      	movs	r3, #0
 80055f6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80055f8:	693b      	ldr	r3, [r7, #16]
}
 80055fa:	4618      	mov	r0, r3
 80055fc:	371c      	adds	r7, #28
 80055fe:	46bd      	mov	sp, r7
 8005600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005604:	4770      	bx	lr
 8005606:	bf00      	nop
 8005608:	40021000 	.word	0x40021000
 800560c:	00f42400 	.word	0x00f42400
 8005610:	016e3600 	.word	0x016e3600

08005614 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005614:	b480      	push	{r7}
 8005616:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005618:	4b03      	ldr	r3, [pc, #12]	@ (8005628 <HAL_RCC_GetHCLKFreq+0x14>)
 800561a:	681b      	ldr	r3, [r3, #0]
}
 800561c:	4618      	mov	r0, r3
 800561e:	46bd      	mov	sp, r7
 8005620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005624:	4770      	bx	lr
 8005626:	bf00      	nop
 8005628:	20000200 	.word	0x20000200

0800562c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800562c:	b580      	push	{r7, lr}
 800562e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005630:	f7ff fff0 	bl	8005614 <HAL_RCC_GetHCLKFreq>
 8005634:	4602      	mov	r2, r0
 8005636:	4b06      	ldr	r3, [pc, #24]	@ (8005650 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005638:	689b      	ldr	r3, [r3, #8]
 800563a:	0a1b      	lsrs	r3, r3, #8
 800563c:	f003 0307 	and.w	r3, r3, #7
 8005640:	4904      	ldr	r1, [pc, #16]	@ (8005654 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005642:	5ccb      	ldrb	r3, [r1, r3]
 8005644:	f003 031f 	and.w	r3, r3, #31
 8005648:	fa22 f303 	lsr.w	r3, r2, r3
}
 800564c:	4618      	mov	r0, r3
 800564e:	bd80      	pop	{r7, pc}
 8005650:	40021000 	.word	0x40021000
 8005654:	0800b24c 	.word	0x0800b24c

08005658 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005658:	b580      	push	{r7, lr}
 800565a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800565c:	f7ff ffda 	bl	8005614 <HAL_RCC_GetHCLKFreq>
 8005660:	4602      	mov	r2, r0
 8005662:	4b06      	ldr	r3, [pc, #24]	@ (800567c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005664:	689b      	ldr	r3, [r3, #8]
 8005666:	0adb      	lsrs	r3, r3, #11
 8005668:	f003 0307 	and.w	r3, r3, #7
 800566c:	4904      	ldr	r1, [pc, #16]	@ (8005680 <HAL_RCC_GetPCLK2Freq+0x28>)
 800566e:	5ccb      	ldrb	r3, [r1, r3]
 8005670:	f003 031f 	and.w	r3, r3, #31
 8005674:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005678:	4618      	mov	r0, r3
 800567a:	bd80      	pop	{r7, pc}
 800567c:	40021000 	.word	0x40021000
 8005680:	0800b24c 	.word	0x0800b24c

08005684 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005684:	b480      	push	{r7}
 8005686:	b087      	sub	sp, #28
 8005688:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800568a:	4b1e      	ldr	r3, [pc, #120]	@ (8005704 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800568c:	68db      	ldr	r3, [r3, #12]
 800568e:	f003 0303 	and.w	r3, r3, #3
 8005692:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005694:	4b1b      	ldr	r3, [pc, #108]	@ (8005704 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005696:	68db      	ldr	r3, [r3, #12]
 8005698:	091b      	lsrs	r3, r3, #4
 800569a:	f003 030f 	and.w	r3, r3, #15
 800569e:	3301      	adds	r3, #1
 80056a0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80056a2:	693b      	ldr	r3, [r7, #16]
 80056a4:	2b03      	cmp	r3, #3
 80056a6:	d10c      	bne.n	80056c2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80056a8:	4a17      	ldr	r2, [pc, #92]	@ (8005708 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80056b0:	4a14      	ldr	r2, [pc, #80]	@ (8005704 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80056b2:	68d2      	ldr	r2, [r2, #12]
 80056b4:	0a12      	lsrs	r2, r2, #8
 80056b6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80056ba:	fb02 f303 	mul.w	r3, r2, r3
 80056be:	617b      	str	r3, [r7, #20]
    break;
 80056c0:	e00c      	b.n	80056dc <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80056c2:	4a12      	ldr	r2, [pc, #72]	@ (800570c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80056ca:	4a0e      	ldr	r2, [pc, #56]	@ (8005704 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80056cc:	68d2      	ldr	r2, [r2, #12]
 80056ce:	0a12      	lsrs	r2, r2, #8
 80056d0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80056d4:	fb02 f303 	mul.w	r3, r2, r3
 80056d8:	617b      	str	r3, [r7, #20]
    break;
 80056da:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80056dc:	4b09      	ldr	r3, [pc, #36]	@ (8005704 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80056de:	68db      	ldr	r3, [r3, #12]
 80056e0:	0e5b      	lsrs	r3, r3, #25
 80056e2:	f003 0303 	and.w	r3, r3, #3
 80056e6:	3301      	adds	r3, #1
 80056e8:	005b      	lsls	r3, r3, #1
 80056ea:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80056ec:	697a      	ldr	r2, [r7, #20]
 80056ee:	68bb      	ldr	r3, [r7, #8]
 80056f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80056f4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80056f6:	687b      	ldr	r3, [r7, #4]
}
 80056f8:	4618      	mov	r0, r3
 80056fa:	371c      	adds	r7, #28
 80056fc:	46bd      	mov	sp, r7
 80056fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005702:	4770      	bx	lr
 8005704:	40021000 	.word	0x40021000
 8005708:	016e3600 	.word	0x016e3600
 800570c:	00f42400 	.word	0x00f42400

08005710 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005710:	b580      	push	{r7, lr}
 8005712:	b086      	sub	sp, #24
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005718:	2300      	movs	r3, #0
 800571a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800571c:	2300      	movs	r3, #0
 800571e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005728:	2b00      	cmp	r3, #0
 800572a:	f000 8098 	beq.w	800585e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800572e:	2300      	movs	r3, #0
 8005730:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005732:	4b43      	ldr	r3, [pc, #268]	@ (8005840 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005734:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005736:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800573a:	2b00      	cmp	r3, #0
 800573c:	d10d      	bne.n	800575a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800573e:	4b40      	ldr	r3, [pc, #256]	@ (8005840 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005740:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005742:	4a3f      	ldr	r2, [pc, #252]	@ (8005840 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005744:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005748:	6593      	str	r3, [r2, #88]	@ 0x58
 800574a:	4b3d      	ldr	r3, [pc, #244]	@ (8005840 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800574c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800574e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005752:	60bb      	str	r3, [r7, #8]
 8005754:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005756:	2301      	movs	r3, #1
 8005758:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800575a:	4b3a      	ldr	r3, [pc, #232]	@ (8005844 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	4a39      	ldr	r2, [pc, #228]	@ (8005844 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005760:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005764:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005766:	f7fd f927 	bl	80029b8 <HAL_GetTick>
 800576a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800576c:	e009      	b.n	8005782 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800576e:	f7fd f923 	bl	80029b8 <HAL_GetTick>
 8005772:	4602      	mov	r2, r0
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	1ad3      	subs	r3, r2, r3
 8005778:	2b02      	cmp	r3, #2
 800577a:	d902      	bls.n	8005782 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800577c:	2303      	movs	r3, #3
 800577e:	74fb      	strb	r3, [r7, #19]
        break;
 8005780:	e005      	b.n	800578e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005782:	4b30      	ldr	r3, [pc, #192]	@ (8005844 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800578a:	2b00      	cmp	r3, #0
 800578c:	d0ef      	beq.n	800576e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800578e:	7cfb      	ldrb	r3, [r7, #19]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d159      	bne.n	8005848 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005794:	4b2a      	ldr	r3, [pc, #168]	@ (8005840 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005796:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800579a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800579e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80057a0:	697b      	ldr	r3, [r7, #20]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d01e      	beq.n	80057e4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80057aa:	697a      	ldr	r2, [r7, #20]
 80057ac:	429a      	cmp	r2, r3
 80057ae:	d019      	beq.n	80057e4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80057b0:	4b23      	ldr	r3, [pc, #140]	@ (8005840 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80057b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057b6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80057ba:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80057bc:	4b20      	ldr	r3, [pc, #128]	@ (8005840 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80057be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057c2:	4a1f      	ldr	r2, [pc, #124]	@ (8005840 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80057c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80057c8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80057cc:	4b1c      	ldr	r3, [pc, #112]	@ (8005840 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80057ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057d2:	4a1b      	ldr	r2, [pc, #108]	@ (8005840 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80057d4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80057d8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80057dc:	4a18      	ldr	r2, [pc, #96]	@ (8005840 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80057de:	697b      	ldr	r3, [r7, #20]
 80057e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80057e4:	697b      	ldr	r3, [r7, #20]
 80057e6:	f003 0301 	and.w	r3, r3, #1
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d016      	beq.n	800581c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057ee:	f7fd f8e3 	bl	80029b8 <HAL_GetTick>
 80057f2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80057f4:	e00b      	b.n	800580e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80057f6:	f7fd f8df 	bl	80029b8 <HAL_GetTick>
 80057fa:	4602      	mov	r2, r0
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	1ad3      	subs	r3, r2, r3
 8005800:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005804:	4293      	cmp	r3, r2
 8005806:	d902      	bls.n	800580e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005808:	2303      	movs	r3, #3
 800580a:	74fb      	strb	r3, [r7, #19]
            break;
 800580c:	e006      	b.n	800581c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800580e:	4b0c      	ldr	r3, [pc, #48]	@ (8005840 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005810:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005814:	f003 0302 	and.w	r3, r3, #2
 8005818:	2b00      	cmp	r3, #0
 800581a:	d0ec      	beq.n	80057f6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800581c:	7cfb      	ldrb	r3, [r7, #19]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d10b      	bne.n	800583a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005822:	4b07      	ldr	r3, [pc, #28]	@ (8005840 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005824:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005828:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005830:	4903      	ldr	r1, [pc, #12]	@ (8005840 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005832:	4313      	orrs	r3, r2
 8005834:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005838:	e008      	b.n	800584c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800583a:	7cfb      	ldrb	r3, [r7, #19]
 800583c:	74bb      	strb	r3, [r7, #18]
 800583e:	e005      	b.n	800584c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005840:	40021000 	.word	0x40021000
 8005844:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005848:	7cfb      	ldrb	r3, [r7, #19]
 800584a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800584c:	7c7b      	ldrb	r3, [r7, #17]
 800584e:	2b01      	cmp	r3, #1
 8005850:	d105      	bne.n	800585e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005852:	4ba7      	ldr	r3, [pc, #668]	@ (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005854:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005856:	4aa6      	ldr	r2, [pc, #664]	@ (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005858:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800585c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f003 0301 	and.w	r3, r3, #1
 8005866:	2b00      	cmp	r3, #0
 8005868:	d00a      	beq.n	8005880 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800586a:	4ba1      	ldr	r3, [pc, #644]	@ (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800586c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005870:	f023 0203 	bic.w	r2, r3, #3
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	685b      	ldr	r3, [r3, #4]
 8005878:	499d      	ldr	r1, [pc, #628]	@ (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800587a:	4313      	orrs	r3, r2
 800587c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f003 0302 	and.w	r3, r3, #2
 8005888:	2b00      	cmp	r3, #0
 800588a:	d00a      	beq.n	80058a2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800588c:	4b98      	ldr	r3, [pc, #608]	@ (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800588e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005892:	f023 020c 	bic.w	r2, r3, #12
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	689b      	ldr	r3, [r3, #8]
 800589a:	4995      	ldr	r1, [pc, #596]	@ (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800589c:	4313      	orrs	r3, r2
 800589e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f003 0304 	and.w	r3, r3, #4
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d00a      	beq.n	80058c4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80058ae:	4b90      	ldr	r3, [pc, #576]	@ (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80058b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058b4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	68db      	ldr	r3, [r3, #12]
 80058bc:	498c      	ldr	r1, [pc, #560]	@ (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80058be:	4313      	orrs	r3, r2
 80058c0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f003 0308 	and.w	r3, r3, #8
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d00a      	beq.n	80058e6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80058d0:	4b87      	ldr	r3, [pc, #540]	@ (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80058d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058d6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	691b      	ldr	r3, [r3, #16]
 80058de:	4984      	ldr	r1, [pc, #528]	@ (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80058e0:	4313      	orrs	r3, r2
 80058e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f003 0310 	and.w	r3, r3, #16
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d00a      	beq.n	8005908 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80058f2:	4b7f      	ldr	r3, [pc, #508]	@ (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80058f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058f8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	695b      	ldr	r3, [r3, #20]
 8005900:	497b      	ldr	r1, [pc, #492]	@ (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005902:	4313      	orrs	r3, r2
 8005904:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f003 0320 	and.w	r3, r3, #32
 8005910:	2b00      	cmp	r3, #0
 8005912:	d00a      	beq.n	800592a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005914:	4b76      	ldr	r3, [pc, #472]	@ (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005916:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800591a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	699b      	ldr	r3, [r3, #24]
 8005922:	4973      	ldr	r1, [pc, #460]	@ (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005924:	4313      	orrs	r3, r2
 8005926:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005932:	2b00      	cmp	r3, #0
 8005934:	d00a      	beq.n	800594c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005936:	4b6e      	ldr	r3, [pc, #440]	@ (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005938:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800593c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	69db      	ldr	r3, [r3, #28]
 8005944:	496a      	ldr	r1, [pc, #424]	@ (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005946:	4313      	orrs	r3, r2
 8005948:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005954:	2b00      	cmp	r3, #0
 8005956:	d00a      	beq.n	800596e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005958:	4b65      	ldr	r3, [pc, #404]	@ (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800595a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800595e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6a1b      	ldr	r3, [r3, #32]
 8005966:	4962      	ldr	r1, [pc, #392]	@ (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005968:	4313      	orrs	r3, r2
 800596a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005976:	2b00      	cmp	r3, #0
 8005978:	d00a      	beq.n	8005990 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800597a:	4b5d      	ldr	r3, [pc, #372]	@ (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800597c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005980:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005988:	4959      	ldr	r1, [pc, #356]	@ (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800598a:	4313      	orrs	r3, r2
 800598c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005998:	2b00      	cmp	r3, #0
 800599a:	d00a      	beq.n	80059b2 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800599c:	4b54      	ldr	r3, [pc, #336]	@ (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800599e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80059a2:	f023 0203 	bic.w	r2, r3, #3
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059aa:	4951      	ldr	r1, [pc, #324]	@ (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80059ac:	4313      	orrs	r3, r2
 80059ae:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d00a      	beq.n	80059d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80059be:	4b4c      	ldr	r3, [pc, #304]	@ (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80059c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059c4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059cc:	4948      	ldr	r1, [pc, #288]	@ (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80059ce:	4313      	orrs	r3, r2
 80059d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d015      	beq.n	8005a0c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80059e0:	4b43      	ldr	r3, [pc, #268]	@ (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80059e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059e6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059ee:	4940      	ldr	r1, [pc, #256]	@ (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80059f0:	4313      	orrs	r3, r2
 80059f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059fa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80059fe:	d105      	bne.n	8005a0c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005a00:	4b3b      	ldr	r3, [pc, #236]	@ (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a02:	68db      	ldr	r3, [r3, #12]
 8005a04:	4a3a      	ldr	r2, [pc, #232]	@ (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a06:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005a0a:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d015      	beq.n	8005a44 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005a18:	4b35      	ldr	r3, [pc, #212]	@ (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a1e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a26:	4932      	ldr	r1, [pc, #200]	@ (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a28:	4313      	orrs	r3, r2
 8005a2a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a32:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005a36:	d105      	bne.n	8005a44 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005a38:	4b2d      	ldr	r3, [pc, #180]	@ (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a3a:	68db      	ldr	r3, [r3, #12]
 8005a3c:	4a2c      	ldr	r2, [pc, #176]	@ (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a3e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005a42:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d015      	beq.n	8005a7c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005a50:	4b27      	ldr	r3, [pc, #156]	@ (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a56:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a5e:	4924      	ldr	r1, [pc, #144]	@ (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a60:	4313      	orrs	r3, r2
 8005a62:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a6a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005a6e:	d105      	bne.n	8005a7c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005a70:	4b1f      	ldr	r3, [pc, #124]	@ (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a72:	68db      	ldr	r3, [r3, #12]
 8005a74:	4a1e      	ldr	r2, [pc, #120]	@ (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a76:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005a7a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d015      	beq.n	8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005a88:	4b19      	ldr	r3, [pc, #100]	@ (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a8e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a96:	4916      	ldr	r1, [pc, #88]	@ (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a98:	4313      	orrs	r3, r2
 8005a9a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005aa2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005aa6:	d105      	bne.n	8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005aa8:	4b11      	ldr	r3, [pc, #68]	@ (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005aaa:	68db      	ldr	r3, [r3, #12]
 8005aac:	4a10      	ldr	r2, [pc, #64]	@ (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005aae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005ab2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d019      	beq.n	8005af4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005ac0:	4b0b      	ldr	r3, [pc, #44]	@ (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ac2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ac6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ace:	4908      	ldr	r1, [pc, #32]	@ (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ad0:	4313      	orrs	r3, r2
 8005ad2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ada:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005ade:	d109      	bne.n	8005af4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005ae0:	4b03      	ldr	r3, [pc, #12]	@ (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ae2:	68db      	ldr	r3, [r3, #12]
 8005ae4:	4a02      	ldr	r2, [pc, #8]	@ (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ae6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005aea:	60d3      	str	r3, [r2, #12]
 8005aec:	e002      	b.n	8005af4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8005aee:	bf00      	nop
 8005af0:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d015      	beq.n	8005b2c <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005b00:	4b29      	ldr	r3, [pc, #164]	@ (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005b02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b06:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b0e:	4926      	ldr	r1, [pc, #152]	@ (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005b10:	4313      	orrs	r3, r2
 8005b12:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b1a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005b1e:	d105      	bne.n	8005b2c <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005b20:	4b21      	ldr	r3, [pc, #132]	@ (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005b22:	68db      	ldr	r3, [r3, #12]
 8005b24:	4a20      	ldr	r2, [pc, #128]	@ (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005b26:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005b2a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d015      	beq.n	8005b64 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8005b38:	4b1b      	ldr	r3, [pc, #108]	@ (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005b3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b3e:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005b46:	4918      	ldr	r1, [pc, #96]	@ (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005b48:	4313      	orrs	r3, r2
 8005b4a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005b52:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b56:	d105      	bne.n	8005b64 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005b58:	4b13      	ldr	r3, [pc, #76]	@ (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005b5a:	68db      	ldr	r3, [r3, #12]
 8005b5c:	4a12      	ldr	r2, [pc, #72]	@ (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005b5e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005b62:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d015      	beq.n	8005b9c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005b70:	4b0d      	ldr	r3, [pc, #52]	@ (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005b72:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005b76:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b7e:	490a      	ldr	r1, [pc, #40]	@ (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005b80:	4313      	orrs	r3, r2
 8005b82:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b8a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005b8e:	d105      	bne.n	8005b9c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005b90:	4b05      	ldr	r3, [pc, #20]	@ (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005b92:	68db      	ldr	r3, [r3, #12]
 8005b94:	4a04      	ldr	r2, [pc, #16]	@ (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005b96:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005b9a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005b9c:	7cbb      	ldrb	r3, [r7, #18]
}
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	3718      	adds	r7, #24
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	bd80      	pop	{r7, pc}
 8005ba6:	bf00      	nop
 8005ba8:	40021000 	.word	0x40021000

08005bac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b082      	sub	sp, #8
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d101      	bne.n	8005bbe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005bba:	2301      	movs	r3, #1
 8005bbc:	e054      	b.n	8005c68 <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005bc4:	b2db      	uxtb	r3, r3
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d111      	bne.n	8005bee <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2200      	movs	r2, #0
 8005bce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8005bd2:	6878      	ldr	r0, [r7, #4]
 8005bd4:	f001 ffde 	bl	8007b94 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d102      	bne.n	8005be6 <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	4a23      	ldr	r2, [pc, #140]	@ (8005c70 <HAL_TIM_Base_Init+0xc4>)
 8005be4:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005bea:	6878      	ldr	r0, [r7, #4]
 8005bec:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2202      	movs	r2, #2
 8005bf2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681a      	ldr	r2, [r3, #0]
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	3304      	adds	r3, #4
 8005bfe:	4619      	mov	r1, r3
 8005c00:	4610      	mov	r0, r2
 8005c02:	f001 fb27 	bl	8007254 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	2201      	movs	r2, #1
 8005c0a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2201      	movs	r2, #1
 8005c12:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2201      	movs	r2, #1
 8005c1a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2201      	movs	r2, #1
 8005c22:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2201      	movs	r2, #1
 8005c2a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	2201      	movs	r2, #1
 8005c32:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2201      	movs	r2, #1
 8005c3a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	2201      	movs	r2, #1
 8005c42:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	2201      	movs	r2, #1
 8005c4a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	2201      	movs	r2, #1
 8005c52:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	2201      	movs	r2, #1
 8005c5a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2201      	movs	r2, #1
 8005c62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005c66:	2300      	movs	r3, #0
}
 8005c68:	4618      	mov	r0, r3
 8005c6a:	3708      	adds	r7, #8
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	bd80      	pop	{r7, pc}
 8005c70:	08002379 	.word	0x08002379

08005c74 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005c74:	b480      	push	{r7}
 8005c76:	b085      	sub	sp, #20
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005c82:	b2db      	uxtb	r3, r3
 8005c84:	2b01      	cmp	r3, #1
 8005c86:	d001      	beq.n	8005c8c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005c88:	2301      	movs	r3, #1
 8005c8a:	e04c      	b.n	8005d26 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2202      	movs	r2, #2
 8005c90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	4a26      	ldr	r2, [pc, #152]	@ (8005d34 <HAL_TIM_Base_Start+0xc0>)
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	d022      	beq.n	8005ce4 <HAL_TIM_Base_Start+0x70>
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ca6:	d01d      	beq.n	8005ce4 <HAL_TIM_Base_Start+0x70>
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	4a22      	ldr	r2, [pc, #136]	@ (8005d38 <HAL_TIM_Base_Start+0xc4>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d018      	beq.n	8005ce4 <HAL_TIM_Base_Start+0x70>
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	4a21      	ldr	r2, [pc, #132]	@ (8005d3c <HAL_TIM_Base_Start+0xc8>)
 8005cb8:	4293      	cmp	r3, r2
 8005cba:	d013      	beq.n	8005ce4 <HAL_TIM_Base_Start+0x70>
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	4a1f      	ldr	r2, [pc, #124]	@ (8005d40 <HAL_TIM_Base_Start+0xcc>)
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d00e      	beq.n	8005ce4 <HAL_TIM_Base_Start+0x70>
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	4a1e      	ldr	r2, [pc, #120]	@ (8005d44 <HAL_TIM_Base_Start+0xd0>)
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	d009      	beq.n	8005ce4 <HAL_TIM_Base_Start+0x70>
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	4a1c      	ldr	r2, [pc, #112]	@ (8005d48 <HAL_TIM_Base_Start+0xd4>)
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	d004      	beq.n	8005ce4 <HAL_TIM_Base_Start+0x70>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	4a1b      	ldr	r2, [pc, #108]	@ (8005d4c <HAL_TIM_Base_Start+0xd8>)
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	d115      	bne.n	8005d10 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	689a      	ldr	r2, [r3, #8]
 8005cea:	4b19      	ldr	r3, [pc, #100]	@ (8005d50 <HAL_TIM_Base_Start+0xdc>)
 8005cec:	4013      	ands	r3, r2
 8005cee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	2b06      	cmp	r3, #6
 8005cf4:	d015      	beq.n	8005d22 <HAL_TIM_Base_Start+0xae>
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005cfc:	d011      	beq.n	8005d22 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	681a      	ldr	r2, [r3, #0]
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f042 0201 	orr.w	r2, r2, #1
 8005d0c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d0e:	e008      	b.n	8005d22 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	681a      	ldr	r2, [r3, #0]
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f042 0201 	orr.w	r2, r2, #1
 8005d1e:	601a      	str	r2, [r3, #0]
 8005d20:	e000      	b.n	8005d24 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d22:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005d24:	2300      	movs	r3, #0
}
 8005d26:	4618      	mov	r0, r3
 8005d28:	3714      	adds	r7, #20
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d30:	4770      	bx	lr
 8005d32:	bf00      	nop
 8005d34:	40012c00 	.word	0x40012c00
 8005d38:	40000400 	.word	0x40000400
 8005d3c:	40000800 	.word	0x40000800
 8005d40:	40000c00 	.word	0x40000c00
 8005d44:	40013400 	.word	0x40013400
 8005d48:	40014000 	.word	0x40014000
 8005d4c:	40015000 	.word	0x40015000
 8005d50:	00010007 	.word	0x00010007

08005d54 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005d54:	b480      	push	{r7}
 8005d56:	b085      	sub	sp, #20
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005d62:	b2db      	uxtb	r3, r3
 8005d64:	2b01      	cmp	r3, #1
 8005d66:	d001      	beq.n	8005d6c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005d68:	2301      	movs	r3, #1
 8005d6a:	e054      	b.n	8005e16 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2202      	movs	r2, #2
 8005d70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	68da      	ldr	r2, [r3, #12]
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f042 0201 	orr.w	r2, r2, #1
 8005d82:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	4a26      	ldr	r2, [pc, #152]	@ (8005e24 <HAL_TIM_Base_Start_IT+0xd0>)
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d022      	beq.n	8005dd4 <HAL_TIM_Base_Start_IT+0x80>
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d96:	d01d      	beq.n	8005dd4 <HAL_TIM_Base_Start_IT+0x80>
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	4a22      	ldr	r2, [pc, #136]	@ (8005e28 <HAL_TIM_Base_Start_IT+0xd4>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d018      	beq.n	8005dd4 <HAL_TIM_Base_Start_IT+0x80>
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	4a21      	ldr	r2, [pc, #132]	@ (8005e2c <HAL_TIM_Base_Start_IT+0xd8>)
 8005da8:	4293      	cmp	r3, r2
 8005daa:	d013      	beq.n	8005dd4 <HAL_TIM_Base_Start_IT+0x80>
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	4a1f      	ldr	r2, [pc, #124]	@ (8005e30 <HAL_TIM_Base_Start_IT+0xdc>)
 8005db2:	4293      	cmp	r3, r2
 8005db4:	d00e      	beq.n	8005dd4 <HAL_TIM_Base_Start_IT+0x80>
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	4a1e      	ldr	r2, [pc, #120]	@ (8005e34 <HAL_TIM_Base_Start_IT+0xe0>)
 8005dbc:	4293      	cmp	r3, r2
 8005dbe:	d009      	beq.n	8005dd4 <HAL_TIM_Base_Start_IT+0x80>
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	4a1c      	ldr	r2, [pc, #112]	@ (8005e38 <HAL_TIM_Base_Start_IT+0xe4>)
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	d004      	beq.n	8005dd4 <HAL_TIM_Base_Start_IT+0x80>
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	4a1b      	ldr	r2, [pc, #108]	@ (8005e3c <HAL_TIM_Base_Start_IT+0xe8>)
 8005dd0:	4293      	cmp	r3, r2
 8005dd2:	d115      	bne.n	8005e00 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	689a      	ldr	r2, [r3, #8]
 8005dda:	4b19      	ldr	r3, [pc, #100]	@ (8005e40 <HAL_TIM_Base_Start_IT+0xec>)
 8005ddc:	4013      	ands	r3, r2
 8005dde:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	2b06      	cmp	r3, #6
 8005de4:	d015      	beq.n	8005e12 <HAL_TIM_Base_Start_IT+0xbe>
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005dec:	d011      	beq.n	8005e12 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	681a      	ldr	r2, [r3, #0]
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f042 0201 	orr.w	r2, r2, #1
 8005dfc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005dfe:	e008      	b.n	8005e12 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	681a      	ldr	r2, [r3, #0]
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f042 0201 	orr.w	r2, r2, #1
 8005e0e:	601a      	str	r2, [r3, #0]
 8005e10:	e000      	b.n	8005e14 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e12:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005e14:	2300      	movs	r3, #0
}
 8005e16:	4618      	mov	r0, r3
 8005e18:	3714      	adds	r7, #20
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e20:	4770      	bx	lr
 8005e22:	bf00      	nop
 8005e24:	40012c00 	.word	0x40012c00
 8005e28:	40000400 	.word	0x40000400
 8005e2c:	40000800 	.word	0x40000800
 8005e30:	40000c00 	.word	0x40000c00
 8005e34:	40013400 	.word	0x40013400
 8005e38:	40014000 	.word	0x40014000
 8005e3c:	40015000 	.word	0x40015000
 8005e40:	00010007 	.word	0x00010007

08005e44 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b082      	sub	sp, #8
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d101      	bne.n	8005e56 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8005e52:	2301      	movs	r3, #1
 8005e54:	e054      	b.n	8005f00 <HAL_TIM_OC_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005e5c:	b2db      	uxtb	r3, r3
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d111      	bne.n	8005e86 <HAL_TIM_OC_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	2200      	movs	r2, #0
 8005e66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8005e6a:	6878      	ldr	r0, [r7, #4]
 8005e6c:	f001 fe92 	bl	8007b94 <TIM_ResetCallback>

    if (htim->OC_MspInitCallback == NULL)
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d102      	bne.n	8005e7e <HAL_TIM_OC_Init+0x3a>
    {
      htim->OC_MspInitCallback = HAL_TIM_OC_MspInit;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	4a23      	ldr	r2, [pc, #140]	@ (8005f08 <HAL_TIM_OC_Init+0xc4>)
 8005e7c:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e82:	6878      	ldr	r0, [r7, #4]
 8005e84:	4798      	blx	r3
    HAL_TIM_OC_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	2202      	movs	r2, #2
 8005e8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681a      	ldr	r2, [r3, #0]
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	3304      	adds	r3, #4
 8005e96:	4619      	mov	r1, r3
 8005e98:	4610      	mov	r0, r2
 8005e9a:	f001 f9db 	bl	8007254 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	2201      	movs	r2, #1
 8005ea2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	2201      	movs	r2, #1
 8005eaa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	2201      	movs	r2, #1
 8005eb2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	2201      	movs	r2, #1
 8005eba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	2201      	movs	r2, #1
 8005ec2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	2201      	movs	r2, #1
 8005eca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2201      	movs	r2, #1
 8005ed2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2201      	movs	r2, #1
 8005eda:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	2201      	movs	r2, #1
 8005ee2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	2201      	movs	r2, #1
 8005eea:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	2201      	movs	r2, #1
 8005ef2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2201      	movs	r2, #1
 8005efa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005efe:	2300      	movs	r3, #0
}
 8005f00:	4618      	mov	r0, r3
 8005f02:	3708      	adds	r7, #8
 8005f04:	46bd      	mov	sp, r7
 8005f06:	bd80      	pop	{r7, pc}
 8005f08:	08005f0d 	.word	0x08005f0d

08005f0c <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8005f0c:	b480      	push	{r7}
 8005f0e:	b083      	sub	sp, #12
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8005f14:	bf00      	nop
 8005f16:	370c      	adds	r7, #12
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1e:	4770      	bx	lr

08005f20 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b082      	sub	sp, #8
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d101      	bne.n	8005f32 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005f2e:	2301      	movs	r3, #1
 8005f30:	e054      	b.n	8005fdc <HAL_TIM_PWM_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005f38:	b2db      	uxtb	r3, r3
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d111      	bne.n	8005f62 <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	2200      	movs	r2, #0
 8005f42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8005f46:	6878      	ldr	r0, [r7, #4]
 8005f48:	f001 fe24 	bl	8007b94 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d102      	bne.n	8005f5a <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	4a23      	ldr	r2, [pc, #140]	@ (8005fe4 <HAL_TIM_PWM_Init+0xc4>)
 8005f58:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005f5e:	6878      	ldr	r0, [r7, #4]
 8005f60:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2202      	movs	r2, #2
 8005f66:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681a      	ldr	r2, [r3, #0]
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	3304      	adds	r3, #4
 8005f72:	4619      	mov	r1, r3
 8005f74:	4610      	mov	r0, r2
 8005f76:	f001 f96d 	bl	8007254 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	2201      	movs	r2, #1
 8005f7e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	2201      	movs	r2, #1
 8005f86:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	2201      	movs	r2, #1
 8005f8e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	2201      	movs	r2, #1
 8005f96:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	2201      	movs	r2, #1
 8005f9e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2201      	movs	r2, #1
 8005fa6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	2201      	movs	r2, #1
 8005fae:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	2201      	movs	r2, #1
 8005fb6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	2201      	movs	r2, #1
 8005fbe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2201      	movs	r2, #1
 8005fc6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	2201      	movs	r2, #1
 8005fce:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	2201      	movs	r2, #1
 8005fd6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005fda:	2300      	movs	r3, #0
}
 8005fdc:	4618      	mov	r0, r3
 8005fde:	3708      	adds	r7, #8
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	bd80      	pop	{r7, pc}
 8005fe4:	08005fe9 	.word	0x08005fe9

08005fe8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005fe8:	b480      	push	{r7}
 8005fea:	b083      	sub	sp, #12
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005ff0:	bf00      	nop
 8005ff2:	370c      	adds	r7, #12
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffa:	4770      	bx	lr

08005ffc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b084      	sub	sp, #16
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
 8006004:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	2b00      	cmp	r3, #0
 800600a:	d109      	bne.n	8006020 <HAL_TIM_PWM_Start+0x24>
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006012:	b2db      	uxtb	r3, r3
 8006014:	2b01      	cmp	r3, #1
 8006016:	bf14      	ite	ne
 8006018:	2301      	movne	r3, #1
 800601a:	2300      	moveq	r3, #0
 800601c:	b2db      	uxtb	r3, r3
 800601e:	e03c      	b.n	800609a <HAL_TIM_PWM_Start+0x9e>
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	2b04      	cmp	r3, #4
 8006024:	d109      	bne.n	800603a <HAL_TIM_PWM_Start+0x3e>
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800602c:	b2db      	uxtb	r3, r3
 800602e:	2b01      	cmp	r3, #1
 8006030:	bf14      	ite	ne
 8006032:	2301      	movne	r3, #1
 8006034:	2300      	moveq	r3, #0
 8006036:	b2db      	uxtb	r3, r3
 8006038:	e02f      	b.n	800609a <HAL_TIM_PWM_Start+0x9e>
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	2b08      	cmp	r3, #8
 800603e:	d109      	bne.n	8006054 <HAL_TIM_PWM_Start+0x58>
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006046:	b2db      	uxtb	r3, r3
 8006048:	2b01      	cmp	r3, #1
 800604a:	bf14      	ite	ne
 800604c:	2301      	movne	r3, #1
 800604e:	2300      	moveq	r3, #0
 8006050:	b2db      	uxtb	r3, r3
 8006052:	e022      	b.n	800609a <HAL_TIM_PWM_Start+0x9e>
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	2b0c      	cmp	r3, #12
 8006058:	d109      	bne.n	800606e <HAL_TIM_PWM_Start+0x72>
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006060:	b2db      	uxtb	r3, r3
 8006062:	2b01      	cmp	r3, #1
 8006064:	bf14      	ite	ne
 8006066:	2301      	movne	r3, #1
 8006068:	2300      	moveq	r3, #0
 800606a:	b2db      	uxtb	r3, r3
 800606c:	e015      	b.n	800609a <HAL_TIM_PWM_Start+0x9e>
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	2b10      	cmp	r3, #16
 8006072:	d109      	bne.n	8006088 <HAL_TIM_PWM_Start+0x8c>
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800607a:	b2db      	uxtb	r3, r3
 800607c:	2b01      	cmp	r3, #1
 800607e:	bf14      	ite	ne
 8006080:	2301      	movne	r3, #1
 8006082:	2300      	moveq	r3, #0
 8006084:	b2db      	uxtb	r3, r3
 8006086:	e008      	b.n	800609a <HAL_TIM_PWM_Start+0x9e>
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800608e:	b2db      	uxtb	r3, r3
 8006090:	2b01      	cmp	r3, #1
 8006092:	bf14      	ite	ne
 8006094:	2301      	movne	r3, #1
 8006096:	2300      	moveq	r3, #0
 8006098:	b2db      	uxtb	r3, r3
 800609a:	2b00      	cmp	r3, #0
 800609c:	d001      	beq.n	80060a2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800609e:	2301      	movs	r3, #1
 80060a0:	e0a6      	b.n	80061f0 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80060a2:	683b      	ldr	r3, [r7, #0]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d104      	bne.n	80060b2 <HAL_TIM_PWM_Start+0xb6>
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2202      	movs	r2, #2
 80060ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80060b0:	e023      	b.n	80060fa <HAL_TIM_PWM_Start+0xfe>
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	2b04      	cmp	r3, #4
 80060b6:	d104      	bne.n	80060c2 <HAL_TIM_PWM_Start+0xc6>
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2202      	movs	r2, #2
 80060bc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80060c0:	e01b      	b.n	80060fa <HAL_TIM_PWM_Start+0xfe>
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	2b08      	cmp	r3, #8
 80060c6:	d104      	bne.n	80060d2 <HAL_TIM_PWM_Start+0xd6>
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2202      	movs	r2, #2
 80060cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80060d0:	e013      	b.n	80060fa <HAL_TIM_PWM_Start+0xfe>
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	2b0c      	cmp	r3, #12
 80060d6:	d104      	bne.n	80060e2 <HAL_TIM_PWM_Start+0xe6>
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2202      	movs	r2, #2
 80060dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80060e0:	e00b      	b.n	80060fa <HAL_TIM_PWM_Start+0xfe>
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	2b10      	cmp	r3, #16
 80060e6:	d104      	bne.n	80060f2 <HAL_TIM_PWM_Start+0xf6>
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2202      	movs	r2, #2
 80060ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80060f0:	e003      	b.n	80060fa <HAL_TIM_PWM_Start+0xfe>
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2202      	movs	r2, #2
 80060f6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	2201      	movs	r2, #1
 8006100:	6839      	ldr	r1, [r7, #0]
 8006102:	4618      	mov	r0, r3
 8006104:	f001 fd20 	bl	8007b48 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	4a3a      	ldr	r2, [pc, #232]	@ (80061f8 <HAL_TIM_PWM_Start+0x1fc>)
 800610e:	4293      	cmp	r3, r2
 8006110:	d018      	beq.n	8006144 <HAL_TIM_PWM_Start+0x148>
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	4a39      	ldr	r2, [pc, #228]	@ (80061fc <HAL_TIM_PWM_Start+0x200>)
 8006118:	4293      	cmp	r3, r2
 800611a:	d013      	beq.n	8006144 <HAL_TIM_PWM_Start+0x148>
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	4a37      	ldr	r2, [pc, #220]	@ (8006200 <HAL_TIM_PWM_Start+0x204>)
 8006122:	4293      	cmp	r3, r2
 8006124:	d00e      	beq.n	8006144 <HAL_TIM_PWM_Start+0x148>
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	4a36      	ldr	r2, [pc, #216]	@ (8006204 <HAL_TIM_PWM_Start+0x208>)
 800612c:	4293      	cmp	r3, r2
 800612e:	d009      	beq.n	8006144 <HAL_TIM_PWM_Start+0x148>
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	4a34      	ldr	r2, [pc, #208]	@ (8006208 <HAL_TIM_PWM_Start+0x20c>)
 8006136:	4293      	cmp	r3, r2
 8006138:	d004      	beq.n	8006144 <HAL_TIM_PWM_Start+0x148>
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	4a33      	ldr	r2, [pc, #204]	@ (800620c <HAL_TIM_PWM_Start+0x210>)
 8006140:	4293      	cmp	r3, r2
 8006142:	d101      	bne.n	8006148 <HAL_TIM_PWM_Start+0x14c>
 8006144:	2301      	movs	r3, #1
 8006146:	e000      	b.n	800614a <HAL_TIM_PWM_Start+0x14e>
 8006148:	2300      	movs	r3, #0
 800614a:	2b00      	cmp	r3, #0
 800614c:	d007      	beq.n	800615e <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800615c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	4a25      	ldr	r2, [pc, #148]	@ (80061f8 <HAL_TIM_PWM_Start+0x1fc>)
 8006164:	4293      	cmp	r3, r2
 8006166:	d022      	beq.n	80061ae <HAL_TIM_PWM_Start+0x1b2>
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006170:	d01d      	beq.n	80061ae <HAL_TIM_PWM_Start+0x1b2>
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	4a26      	ldr	r2, [pc, #152]	@ (8006210 <HAL_TIM_PWM_Start+0x214>)
 8006178:	4293      	cmp	r3, r2
 800617a:	d018      	beq.n	80061ae <HAL_TIM_PWM_Start+0x1b2>
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	4a24      	ldr	r2, [pc, #144]	@ (8006214 <HAL_TIM_PWM_Start+0x218>)
 8006182:	4293      	cmp	r3, r2
 8006184:	d013      	beq.n	80061ae <HAL_TIM_PWM_Start+0x1b2>
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	4a23      	ldr	r2, [pc, #140]	@ (8006218 <HAL_TIM_PWM_Start+0x21c>)
 800618c:	4293      	cmp	r3, r2
 800618e:	d00e      	beq.n	80061ae <HAL_TIM_PWM_Start+0x1b2>
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	4a19      	ldr	r2, [pc, #100]	@ (80061fc <HAL_TIM_PWM_Start+0x200>)
 8006196:	4293      	cmp	r3, r2
 8006198:	d009      	beq.n	80061ae <HAL_TIM_PWM_Start+0x1b2>
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	4a18      	ldr	r2, [pc, #96]	@ (8006200 <HAL_TIM_PWM_Start+0x204>)
 80061a0:	4293      	cmp	r3, r2
 80061a2:	d004      	beq.n	80061ae <HAL_TIM_PWM_Start+0x1b2>
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	4a18      	ldr	r2, [pc, #96]	@ (800620c <HAL_TIM_PWM_Start+0x210>)
 80061aa:	4293      	cmp	r3, r2
 80061ac:	d115      	bne.n	80061da <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	689a      	ldr	r2, [r3, #8]
 80061b4:	4b19      	ldr	r3, [pc, #100]	@ (800621c <HAL_TIM_PWM_Start+0x220>)
 80061b6:	4013      	ands	r3, r2
 80061b8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	2b06      	cmp	r3, #6
 80061be:	d015      	beq.n	80061ec <HAL_TIM_PWM_Start+0x1f0>
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80061c6:	d011      	beq.n	80061ec <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	681a      	ldr	r2, [r3, #0]
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	f042 0201 	orr.w	r2, r2, #1
 80061d6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061d8:	e008      	b.n	80061ec <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	681a      	ldr	r2, [r3, #0]
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f042 0201 	orr.w	r2, r2, #1
 80061e8:	601a      	str	r2, [r3, #0]
 80061ea:	e000      	b.n	80061ee <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061ec:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80061ee:	2300      	movs	r3, #0
}
 80061f0:	4618      	mov	r0, r3
 80061f2:	3710      	adds	r7, #16
 80061f4:	46bd      	mov	sp, r7
 80061f6:	bd80      	pop	{r7, pc}
 80061f8:	40012c00 	.word	0x40012c00
 80061fc:	40013400 	.word	0x40013400
 8006200:	40014000 	.word	0x40014000
 8006204:	40014400 	.word	0x40014400
 8006208:	40014800 	.word	0x40014800
 800620c:	40015000 	.word	0x40015000
 8006210:	40000400 	.word	0x40000400
 8006214:	40000800 	.word	0x40000800
 8006218:	40000c00 	.word	0x40000c00
 800621c:	00010007 	.word	0x00010007

08006220 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8006220:	b580      	push	{r7, lr}
 8006222:	b082      	sub	sp, #8
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
 8006228:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d101      	bne.n	8006234 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8006230:	2301      	movs	r3, #1
 8006232:	e04c      	b.n	80062ce <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800623a:	b2db      	uxtb	r3, r3
 800623c:	2b00      	cmp	r3, #0
 800623e:	d111      	bne.n	8006264 <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2200      	movs	r2, #0
 8006244:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8006248:	6878      	ldr	r0, [r7, #4]
 800624a:	f001 fca3 	bl	8007b94 <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006252:	2b00      	cmp	r3, #0
 8006254:	d102      	bne.n	800625c <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	4a1f      	ldr	r2, [pc, #124]	@ (80062d8 <HAL_TIM_OnePulse_Init+0xb8>)
 800625a:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006260:	6878      	ldr	r0, [r7, #4]
 8006262:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2202      	movs	r2, #2
 8006268:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681a      	ldr	r2, [r3, #0]
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	3304      	adds	r3, #4
 8006274:	4619      	mov	r1, r3
 8006276:	4610      	mov	r0, r2
 8006278:	f000 ffec 	bl	8007254 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	681a      	ldr	r2, [r3, #0]
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f022 0208 	bic.w	r2, r2, #8
 800628a:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	6819      	ldr	r1, [r3, #0]
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	683a      	ldr	r2, [r7, #0]
 8006298:	430a      	orrs	r2, r1
 800629a:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2201      	movs	r2, #1
 80062a0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2201      	movs	r2, #1
 80062a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2201      	movs	r2, #1
 80062b0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2201      	movs	r2, #1
 80062b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2201      	movs	r2, #1
 80062c0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2201      	movs	r2, #1
 80062c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80062cc:	2300      	movs	r3, #0
}
 80062ce:	4618      	mov	r0, r3
 80062d0:	3708      	adds	r7, #8
 80062d2:	46bd      	mov	sp, r7
 80062d4:	bd80      	pop	{r7, pc}
 80062d6:	bf00      	nop
 80062d8:	080062dd 	.word	0x080062dd

080062dc <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 80062dc:	b480      	push	{r7}
 80062de:	b083      	sub	sp, #12
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 80062e4:	bf00      	nop
 80062e6:	370c      	adds	r7, #12
 80062e8:	46bd      	mov	sp, r7
 80062ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ee:	4770      	bx	lr

080062f0 <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b084      	sub	sp, #16
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
 80062f8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006300:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006308:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006310:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006318:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800631a:	7bfb      	ldrb	r3, [r7, #15]
 800631c:	2b01      	cmp	r3, #1
 800631e:	d108      	bne.n	8006332 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006320:	7bbb      	ldrb	r3, [r7, #14]
 8006322:	2b01      	cmp	r3, #1
 8006324:	d105      	bne.n	8006332 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006326:	7b7b      	ldrb	r3, [r7, #13]
 8006328:	2b01      	cmp	r3, #1
 800632a:	d102      	bne.n	8006332 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800632c:	7b3b      	ldrb	r3, [r7, #12]
 800632e:	2b01      	cmp	r3, #1
 8006330:	d001      	beq.n	8006336 <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 8006332:	2301      	movs	r3, #1
 8006334:	e059      	b.n	80063ea <HAL_TIM_OnePulse_Start_IT+0xfa>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	2202      	movs	r2, #2
 800633a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	2202      	movs	r2, #2
 8006342:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2202      	movs	r2, #2
 800634a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	2202      	movs	r2, #2
 8006352:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	68da      	ldr	r2, [r3, #12]
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f042 0202 	orr.w	r2, r2, #2
 8006364:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	68da      	ldr	r2, [r3, #12]
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f042 0204 	orr.w	r2, r2, #4
 8006374:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	2201      	movs	r2, #1
 800637c:	2100      	movs	r1, #0
 800637e:	4618      	mov	r0, r3
 8006380:	f001 fbe2 	bl	8007b48 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	2201      	movs	r2, #1
 800638a:	2104      	movs	r1, #4
 800638c:	4618      	mov	r0, r3
 800638e:	f001 fbdb 	bl	8007b48 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	4a17      	ldr	r2, [pc, #92]	@ (80063f4 <HAL_TIM_OnePulse_Start_IT+0x104>)
 8006398:	4293      	cmp	r3, r2
 800639a:	d018      	beq.n	80063ce <HAL_TIM_OnePulse_Start_IT+0xde>
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	4a15      	ldr	r2, [pc, #84]	@ (80063f8 <HAL_TIM_OnePulse_Start_IT+0x108>)
 80063a2:	4293      	cmp	r3, r2
 80063a4:	d013      	beq.n	80063ce <HAL_TIM_OnePulse_Start_IT+0xde>
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	4a14      	ldr	r2, [pc, #80]	@ (80063fc <HAL_TIM_OnePulse_Start_IT+0x10c>)
 80063ac:	4293      	cmp	r3, r2
 80063ae:	d00e      	beq.n	80063ce <HAL_TIM_OnePulse_Start_IT+0xde>
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	4a12      	ldr	r2, [pc, #72]	@ (8006400 <HAL_TIM_OnePulse_Start_IT+0x110>)
 80063b6:	4293      	cmp	r3, r2
 80063b8:	d009      	beq.n	80063ce <HAL_TIM_OnePulse_Start_IT+0xde>
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	4a11      	ldr	r2, [pc, #68]	@ (8006404 <HAL_TIM_OnePulse_Start_IT+0x114>)
 80063c0:	4293      	cmp	r3, r2
 80063c2:	d004      	beq.n	80063ce <HAL_TIM_OnePulse_Start_IT+0xde>
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	4a0f      	ldr	r2, [pc, #60]	@ (8006408 <HAL_TIM_OnePulse_Start_IT+0x118>)
 80063ca:	4293      	cmp	r3, r2
 80063cc:	d101      	bne.n	80063d2 <HAL_TIM_OnePulse_Start_IT+0xe2>
 80063ce:	2301      	movs	r3, #1
 80063d0:	e000      	b.n	80063d4 <HAL_TIM_OnePulse_Start_IT+0xe4>
 80063d2:	2300      	movs	r3, #0
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d007      	beq.n	80063e8 <HAL_TIM_OnePulse_Start_IT+0xf8>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80063e6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80063e8:	2300      	movs	r3, #0
}
 80063ea:	4618      	mov	r0, r3
 80063ec:	3710      	adds	r7, #16
 80063ee:	46bd      	mov	sp, r7
 80063f0:	bd80      	pop	{r7, pc}
 80063f2:	bf00      	nop
 80063f4:	40012c00 	.word	0x40012c00
 80063f8:	40013400 	.word	0x40013400
 80063fc:	40014000 	.word	0x40014000
 8006400:	40014400 	.word	0x40014400
 8006404:	40014800 	.word	0x40014800
 8006408:	40015000 	.word	0x40015000

0800640c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800640c:	b580      	push	{r7, lr}
 800640e:	b086      	sub	sp, #24
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
 8006414:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d101      	bne.n	8006420 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800641c:	2301      	movs	r3, #1
 800641e:	e0a2      	b.n	8006566 <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006426:	b2db      	uxtb	r3, r3
 8006428:	2b00      	cmp	r3, #0
 800642a:	d111      	bne.n	8006450 <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2200      	movs	r2, #0
 8006430:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8006434:	6878      	ldr	r0, [r7, #4]
 8006436:	f001 fbad 	bl	8007b94 <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800643e:	2b00      	cmp	r3, #0
 8006440:	d102      	bne.n	8006448 <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	4a4a      	ldr	r2, [pc, #296]	@ (8006570 <HAL_TIM_Encoder_Init+0x164>)
 8006446:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800644c:	6878      	ldr	r0, [r7, #4]
 800644e:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2202      	movs	r2, #2
 8006454:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	689b      	ldr	r3, [r3, #8]
 800645e:	687a      	ldr	r2, [r7, #4]
 8006460:	6812      	ldr	r2, [r2, #0]
 8006462:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8006466:	f023 0307 	bic.w	r3, r3, #7
 800646a:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681a      	ldr	r2, [r3, #0]
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	3304      	adds	r3, #4
 8006474:	4619      	mov	r1, r3
 8006476:	4610      	mov	r0, r2
 8006478:	f000 feec 	bl	8007254 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	689b      	ldr	r3, [r3, #8]
 8006482:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	699b      	ldr	r3, [r3, #24]
 800648a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	6a1b      	ldr	r3, [r3, #32]
 8006492:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	697a      	ldr	r2, [r7, #20]
 800649a:	4313      	orrs	r3, r2
 800649c:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800649e:	693b      	ldr	r3, [r7, #16]
 80064a0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80064a4:	f023 0303 	bic.w	r3, r3, #3
 80064a8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80064aa:	683b      	ldr	r3, [r7, #0]
 80064ac:	689a      	ldr	r2, [r3, #8]
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	699b      	ldr	r3, [r3, #24]
 80064b2:	021b      	lsls	r3, r3, #8
 80064b4:	4313      	orrs	r3, r2
 80064b6:	693a      	ldr	r2, [r7, #16]
 80064b8:	4313      	orrs	r3, r2
 80064ba:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80064bc:	693b      	ldr	r3, [r7, #16]
 80064be:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80064c2:	f023 030c 	bic.w	r3, r3, #12
 80064c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80064c8:	693b      	ldr	r3, [r7, #16]
 80064ca:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80064ce:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80064d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	68da      	ldr	r2, [r3, #12]
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	69db      	ldr	r3, [r3, #28]
 80064dc:	021b      	lsls	r3, r3, #8
 80064de:	4313      	orrs	r3, r2
 80064e0:	693a      	ldr	r2, [r7, #16]
 80064e2:	4313      	orrs	r3, r2
 80064e4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	691b      	ldr	r3, [r3, #16]
 80064ea:	011a      	lsls	r2, r3, #4
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	6a1b      	ldr	r3, [r3, #32]
 80064f0:	031b      	lsls	r3, r3, #12
 80064f2:	4313      	orrs	r3, r2
 80064f4:	693a      	ldr	r2, [r7, #16]
 80064f6:	4313      	orrs	r3, r2
 80064f8:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8006500:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8006508:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	685a      	ldr	r2, [r3, #4]
 800650e:	683b      	ldr	r3, [r7, #0]
 8006510:	695b      	ldr	r3, [r3, #20]
 8006512:	011b      	lsls	r3, r3, #4
 8006514:	4313      	orrs	r3, r2
 8006516:	68fa      	ldr	r2, [r7, #12]
 8006518:	4313      	orrs	r3, r2
 800651a:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	697a      	ldr	r2, [r7, #20]
 8006522:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	693a      	ldr	r2, [r7, #16]
 800652a:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	68fa      	ldr	r2, [r7, #12]
 8006532:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2201      	movs	r2, #1
 8006538:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2201      	movs	r2, #1
 8006540:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2201      	movs	r2, #1
 8006548:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2201      	movs	r2, #1
 8006550:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2201      	movs	r2, #1
 8006558:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2201      	movs	r2, #1
 8006560:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006564:	2300      	movs	r3, #0
}
 8006566:	4618      	mov	r0, r3
 8006568:	3718      	adds	r7, #24
 800656a:	46bd      	mov	sp, r7
 800656c:	bd80      	pop	{r7, pc}
 800656e:	bf00      	nop
 8006570:	08002481 	.word	0x08002481

08006574 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006574:	b580      	push	{r7, lr}
 8006576:	b084      	sub	sp, #16
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
 800657c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006584:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800658c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006594:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800659c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800659e:	683b      	ldr	r3, [r7, #0]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d110      	bne.n	80065c6 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80065a4:	7bfb      	ldrb	r3, [r7, #15]
 80065a6:	2b01      	cmp	r3, #1
 80065a8:	d102      	bne.n	80065b0 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80065aa:	7b7b      	ldrb	r3, [r7, #13]
 80065ac:	2b01      	cmp	r3, #1
 80065ae:	d001      	beq.n	80065b4 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80065b0:	2301      	movs	r3, #1
 80065b2:	e069      	b.n	8006688 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2202      	movs	r2, #2
 80065b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2202      	movs	r2, #2
 80065c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80065c4:	e031      	b.n	800662a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	2b04      	cmp	r3, #4
 80065ca:	d110      	bne.n	80065ee <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80065cc:	7bbb      	ldrb	r3, [r7, #14]
 80065ce:	2b01      	cmp	r3, #1
 80065d0:	d102      	bne.n	80065d8 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80065d2:	7b3b      	ldrb	r3, [r7, #12]
 80065d4:	2b01      	cmp	r3, #1
 80065d6:	d001      	beq.n	80065dc <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80065d8:	2301      	movs	r3, #1
 80065da:	e055      	b.n	8006688 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2202      	movs	r2, #2
 80065e0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2202      	movs	r2, #2
 80065e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80065ec:	e01d      	b.n	800662a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80065ee:	7bfb      	ldrb	r3, [r7, #15]
 80065f0:	2b01      	cmp	r3, #1
 80065f2:	d108      	bne.n	8006606 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80065f4:	7bbb      	ldrb	r3, [r7, #14]
 80065f6:	2b01      	cmp	r3, #1
 80065f8:	d105      	bne.n	8006606 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80065fa:	7b7b      	ldrb	r3, [r7, #13]
 80065fc:	2b01      	cmp	r3, #1
 80065fe:	d102      	bne.n	8006606 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006600:	7b3b      	ldrb	r3, [r7, #12]
 8006602:	2b01      	cmp	r3, #1
 8006604:	d001      	beq.n	800660a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8006606:	2301      	movs	r3, #1
 8006608:	e03e      	b.n	8006688 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	2202      	movs	r2, #2
 800660e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	2202      	movs	r2, #2
 8006616:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	2202      	movs	r2, #2
 800661e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	2202      	movs	r2, #2
 8006626:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800662a:	683b      	ldr	r3, [r7, #0]
 800662c:	2b00      	cmp	r3, #0
 800662e:	d003      	beq.n	8006638 <HAL_TIM_Encoder_Start+0xc4>
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	2b04      	cmp	r3, #4
 8006634:	d008      	beq.n	8006648 <HAL_TIM_Encoder_Start+0xd4>
 8006636:	e00f      	b.n	8006658 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	2201      	movs	r2, #1
 800663e:	2100      	movs	r1, #0
 8006640:	4618      	mov	r0, r3
 8006642:	f001 fa81 	bl	8007b48 <TIM_CCxChannelCmd>
      break;
 8006646:	e016      	b.n	8006676 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	2201      	movs	r2, #1
 800664e:	2104      	movs	r1, #4
 8006650:	4618      	mov	r0, r3
 8006652:	f001 fa79 	bl	8007b48 <TIM_CCxChannelCmd>
      break;
 8006656:	e00e      	b.n	8006676 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	2201      	movs	r2, #1
 800665e:	2100      	movs	r1, #0
 8006660:	4618      	mov	r0, r3
 8006662:	f001 fa71 	bl	8007b48 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	2201      	movs	r2, #1
 800666c:	2104      	movs	r1, #4
 800666e:	4618      	mov	r0, r3
 8006670:	f001 fa6a 	bl	8007b48 <TIM_CCxChannelCmd>
      break;
 8006674:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	681a      	ldr	r2, [r3, #0]
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	f042 0201 	orr.w	r2, r2, #1
 8006684:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006686:	2300      	movs	r3, #0
}
 8006688:	4618      	mov	r0, r3
 800668a:	3710      	adds	r7, #16
 800668c:	46bd      	mov	sp, r7
 800668e:	bd80      	pop	{r7, pc}

08006690 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006690:	b580      	push	{r7, lr}
 8006692:	b084      	sub	sp, #16
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	68db      	ldr	r3, [r3, #12]
 800669e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	691b      	ldr	r3, [r3, #16]
 80066a6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80066a8:	68bb      	ldr	r3, [r7, #8]
 80066aa:	f003 0302 	and.w	r3, r3, #2
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d026      	beq.n	8006700 <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	f003 0302 	and.w	r3, r3, #2
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d021      	beq.n	8006700 <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f06f 0202 	mvn.w	r2, #2
 80066c4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	2201      	movs	r2, #1
 80066ca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	699b      	ldr	r3, [r3, #24]
 80066d2:	f003 0303 	and.w	r3, r3, #3
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d005      	beq.n	80066e6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80066e0:	6878      	ldr	r0, [r7, #4]
 80066e2:	4798      	blx	r3
 80066e4:	e009      	b.n	80066fa <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80066ec:	6878      	ldr	r0, [r7, #4]
 80066ee:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80066f6:	6878      	ldr	r0, [r7, #4]
 80066f8:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	2200      	movs	r2, #0
 80066fe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006700:	68bb      	ldr	r3, [r7, #8]
 8006702:	f003 0304 	and.w	r3, r3, #4
 8006706:	2b00      	cmp	r3, #0
 8006708:	d026      	beq.n	8006758 <HAL_TIM_IRQHandler+0xc8>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	f003 0304 	and.w	r3, r3, #4
 8006710:	2b00      	cmp	r3, #0
 8006712:	d021      	beq.n	8006758 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f06f 0204 	mvn.w	r2, #4
 800671c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	2202      	movs	r2, #2
 8006722:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	699b      	ldr	r3, [r3, #24]
 800672a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800672e:	2b00      	cmp	r3, #0
 8006730:	d005      	beq.n	800673e <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006738:	6878      	ldr	r0, [r7, #4]
 800673a:	4798      	blx	r3
 800673c:	e009      	b.n	8006752 <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006744:	6878      	ldr	r0, [r7, #4]
 8006746:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800674e:	6878      	ldr	r0, [r7, #4]
 8006750:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	2200      	movs	r2, #0
 8006756:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006758:	68bb      	ldr	r3, [r7, #8]
 800675a:	f003 0308 	and.w	r3, r3, #8
 800675e:	2b00      	cmp	r3, #0
 8006760:	d026      	beq.n	80067b0 <HAL_TIM_IRQHandler+0x120>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	f003 0308 	and.w	r3, r3, #8
 8006768:	2b00      	cmp	r3, #0
 800676a:	d021      	beq.n	80067b0 <HAL_TIM_IRQHandler+0x120>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f06f 0208 	mvn.w	r2, #8
 8006774:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	2204      	movs	r2, #4
 800677a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	69db      	ldr	r3, [r3, #28]
 8006782:	f003 0303 	and.w	r3, r3, #3
 8006786:	2b00      	cmp	r3, #0
 8006788:	d005      	beq.n	8006796 <HAL_TIM_IRQHandler+0x106>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006790:	6878      	ldr	r0, [r7, #4]
 8006792:	4798      	blx	r3
 8006794:	e009      	b.n	80067aa <HAL_TIM_IRQHandler+0x11a>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800679c:	6878      	ldr	r0, [r7, #4]
 800679e:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80067a6:	6878      	ldr	r0, [r7, #4]
 80067a8:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	2200      	movs	r2, #0
 80067ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80067b0:	68bb      	ldr	r3, [r7, #8]
 80067b2:	f003 0310 	and.w	r3, r3, #16
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d026      	beq.n	8006808 <HAL_TIM_IRQHandler+0x178>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	f003 0310 	and.w	r3, r3, #16
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d021      	beq.n	8006808 <HAL_TIM_IRQHandler+0x178>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f06f 0210 	mvn.w	r2, #16
 80067cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	2208      	movs	r2, #8
 80067d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	69db      	ldr	r3, [r3, #28]
 80067da:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d005      	beq.n	80067ee <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80067e8:	6878      	ldr	r0, [r7, #4]
 80067ea:	4798      	blx	r3
 80067ec:	e009      	b.n	8006802 <HAL_TIM_IRQHandler+0x172>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80067f4:	6878      	ldr	r0, [r7, #4]
 80067f6:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80067fe:	6878      	ldr	r0, [r7, #4]
 8006800:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	2200      	movs	r2, #0
 8006806:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006808:	68bb      	ldr	r3, [r7, #8]
 800680a:	f003 0301 	and.w	r3, r3, #1
 800680e:	2b00      	cmp	r3, #0
 8006810:	d00e      	beq.n	8006830 <HAL_TIM_IRQHandler+0x1a0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	f003 0301 	and.w	r3, r3, #1
 8006818:	2b00      	cmp	r3, #0
 800681a:	d009      	beq.n	8006830 <HAL_TIM_IRQHandler+0x1a0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f06f 0201 	mvn.w	r2, #1
 8006824:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800682c:	6878      	ldr	r0, [r7, #4]
 800682e:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006830:	68bb      	ldr	r3, [r7, #8]
 8006832:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006836:	2b00      	cmp	r3, #0
 8006838:	d104      	bne.n	8006844 <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800683a:	68bb      	ldr	r3, [r7, #8]
 800683c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006840:	2b00      	cmp	r3, #0
 8006842:	d00e      	beq.n	8006862 <HAL_TIM_IRQHandler+0x1d2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800684a:	2b00      	cmp	r3, #0
 800684c:	d009      	beq.n	8006862 <HAL_TIM_IRQHandler+0x1d2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8006856:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800685e:	6878      	ldr	r0, [r7, #4]
 8006860:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006862:	68bb      	ldr	r3, [r7, #8]
 8006864:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006868:	2b00      	cmp	r3, #0
 800686a:	d00e      	beq.n	800688a <HAL_TIM_IRQHandler+0x1fa>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006872:	2b00      	cmp	r3, #0
 8006874:	d009      	beq.n	800688a <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800687e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8006886:	6878      	ldr	r0, [r7, #4]
 8006888:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800688a:	68bb      	ldr	r3, [r7, #8]
 800688c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006890:	2b00      	cmp	r3, #0
 8006892:	d00e      	beq.n	80068b2 <HAL_TIM_IRQHandler+0x222>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800689a:	2b00      	cmp	r3, #0
 800689c:	d009      	beq.n	80068b2 <HAL_TIM_IRQHandler+0x222>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80068a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80068ae:	6878      	ldr	r0, [r7, #4]
 80068b0:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80068b2:	68bb      	ldr	r3, [r7, #8]
 80068b4:	f003 0320 	and.w	r3, r3, #32
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d00e      	beq.n	80068da <HAL_TIM_IRQHandler+0x24a>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	f003 0320 	and.w	r3, r3, #32
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d009      	beq.n	80068da <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f06f 0220 	mvn.w	r2, #32
 80068ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80068d6:	6878      	ldr	r0, [r7, #4]
 80068d8:	4798      	blx	r3
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80068da:	68bb      	ldr	r3, [r7, #8]
 80068dc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d00e      	beq.n	8006902 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d009      	beq.n	8006902 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 80068f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80068fe:	6878      	ldr	r0, [r7, #4]
 8006900:	4798      	blx	r3
      HAL_TIMEx_EncoderIndexCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8006902:	68bb      	ldr	r3, [r7, #8]
 8006904:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006908:	2b00      	cmp	r3, #0
 800690a:	d00e      	beq.n	800692a <HAL_TIM_IRQHandler+0x29a>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006912:	2b00      	cmp	r3, #0
 8006914:	d009      	beq.n	800692a <HAL_TIM_IRQHandler+0x29a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800691e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8006926:	6878      	ldr	r0, [r7, #4]
 8006928:	4798      	blx	r3
      HAL_TIMEx_DirectionChangeCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800692a:	68bb      	ldr	r3, [r7, #8]
 800692c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006930:	2b00      	cmp	r3, #0
 8006932:	d00e      	beq.n	8006952 <HAL_TIM_IRQHandler+0x2c2>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800693a:	2b00      	cmp	r3, #0
 800693c:	d009      	beq.n	8006952 <HAL_TIM_IRQHandler+0x2c2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8006946:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800694e:	6878      	ldr	r0, [r7, #4]
 8006950:	4798      	blx	r3
      HAL_TIMEx_IndexErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8006952:	68bb      	ldr	r3, [r7, #8]
 8006954:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006958:	2b00      	cmp	r3, #0
 800695a:	d00e      	beq.n	800697a <HAL_TIM_IRQHandler+0x2ea>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006962:	2b00      	cmp	r3, #0
 8006964:	d009      	beq.n	800697a <HAL_TIM_IRQHandler+0x2ea>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800696e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8006976:	6878      	ldr	r0, [r7, #4]
 8006978:	4798      	blx	r3
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800697a:	bf00      	nop
 800697c:	3710      	adds	r7, #16
 800697e:	46bd      	mov	sp, r7
 8006980:	bd80      	pop	{r7, pc}
	...

08006984 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8006984:	b580      	push	{r7, lr}
 8006986:	b086      	sub	sp, #24
 8006988:	af00      	add	r7, sp, #0
 800698a:	60f8      	str	r0, [r7, #12]
 800698c:	60b9      	str	r1, [r7, #8]
 800698e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006990:	2300      	movs	r3, #0
 8006992:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_CHANNEL_MODE(sConfig->OCMode, Channel));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800699a:	2b01      	cmp	r3, #1
 800699c:	d101      	bne.n	80069a2 <HAL_TIM_OC_ConfigChannel+0x1e>
 800699e:	2302      	movs	r3, #2
 80069a0:	e066      	b.n	8006a70 <HAL_TIM_OC_ConfigChannel+0xec>
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	2201      	movs	r2, #1
 80069a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	2b14      	cmp	r3, #20
 80069ae:	d857      	bhi.n	8006a60 <HAL_TIM_OC_ConfigChannel+0xdc>
 80069b0:	a201      	add	r2, pc, #4	@ (adr r2, 80069b8 <HAL_TIM_OC_ConfigChannel+0x34>)
 80069b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069b6:	bf00      	nop
 80069b8:	08006a0d 	.word	0x08006a0d
 80069bc:	08006a61 	.word	0x08006a61
 80069c0:	08006a61 	.word	0x08006a61
 80069c4:	08006a61 	.word	0x08006a61
 80069c8:	08006a1b 	.word	0x08006a1b
 80069cc:	08006a61 	.word	0x08006a61
 80069d0:	08006a61 	.word	0x08006a61
 80069d4:	08006a61 	.word	0x08006a61
 80069d8:	08006a29 	.word	0x08006a29
 80069dc:	08006a61 	.word	0x08006a61
 80069e0:	08006a61 	.word	0x08006a61
 80069e4:	08006a61 	.word	0x08006a61
 80069e8:	08006a37 	.word	0x08006a37
 80069ec:	08006a61 	.word	0x08006a61
 80069f0:	08006a61 	.word	0x08006a61
 80069f4:	08006a61 	.word	0x08006a61
 80069f8:	08006a45 	.word	0x08006a45
 80069fc:	08006a61 	.word	0x08006a61
 8006a00:	08006a61 	.word	0x08006a61
 8006a04:	08006a61 	.word	0x08006a61
 8006a08:	08006a53 	.word	0x08006a53
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	68b9      	ldr	r1, [r7, #8]
 8006a12:	4618      	mov	r0, r3
 8006a14:	f000 fcd2 	bl	80073bc <TIM_OC1_SetConfig>
      break;
 8006a18:	e025      	b.n	8006a66 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	68b9      	ldr	r1, [r7, #8]
 8006a20:	4618      	mov	r0, r3
 8006a22:	f000 fd65 	bl	80074f0 <TIM_OC2_SetConfig>
      break;
 8006a26:	e01e      	b.n	8006a66 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	68b9      	ldr	r1, [r7, #8]
 8006a2e:	4618      	mov	r0, r3
 8006a30:	f000 fdf2 	bl	8007618 <TIM_OC3_SetConfig>
      break;
 8006a34:	e017      	b.n	8006a66 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	68b9      	ldr	r1, [r7, #8]
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	f000 fe7d 	bl	800773c <TIM_OC4_SetConfig>
      break;
 8006a42:	e010      	b.n	8006a66 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	68b9      	ldr	r1, [r7, #8]
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	f000 ff0a 	bl	8007864 <TIM_OC5_SetConfig>
      break;
 8006a50:	e009      	b.n	8006a66 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	68b9      	ldr	r1, [r7, #8]
 8006a58:	4618      	mov	r0, r3
 8006a5a:	f000 ff6d 	bl	8007938 <TIM_OC6_SetConfig>
      break;
 8006a5e:	e002      	b.n	8006a66 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8006a60:	2301      	movs	r3, #1
 8006a62:	75fb      	strb	r3, [r7, #23]
      break;
 8006a64:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	2200      	movs	r2, #0
 8006a6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006a6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a70:	4618      	mov	r0, r3
 8006a72:	3718      	adds	r7, #24
 8006a74:	46bd      	mov	sp, r7
 8006a76:	bd80      	pop	{r7, pc}

08006a78 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b086      	sub	sp, #24
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	60f8      	str	r0, [r7, #12]
 8006a80:	60b9      	str	r1, [r7, #8]
 8006a82:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006a84:	2300      	movs	r3, #0
 8006a86:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006a8e:	2b01      	cmp	r3, #1
 8006a90:	d101      	bne.n	8006a96 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006a92:	2302      	movs	r3, #2
 8006a94:	e0ff      	b.n	8006c96 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	2201      	movs	r2, #1
 8006a9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	2b14      	cmp	r3, #20
 8006aa2:	f200 80f0 	bhi.w	8006c86 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006aa6:	a201      	add	r2, pc, #4	@ (adr r2, 8006aac <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006aa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006aac:	08006b01 	.word	0x08006b01
 8006ab0:	08006c87 	.word	0x08006c87
 8006ab4:	08006c87 	.word	0x08006c87
 8006ab8:	08006c87 	.word	0x08006c87
 8006abc:	08006b41 	.word	0x08006b41
 8006ac0:	08006c87 	.word	0x08006c87
 8006ac4:	08006c87 	.word	0x08006c87
 8006ac8:	08006c87 	.word	0x08006c87
 8006acc:	08006b83 	.word	0x08006b83
 8006ad0:	08006c87 	.word	0x08006c87
 8006ad4:	08006c87 	.word	0x08006c87
 8006ad8:	08006c87 	.word	0x08006c87
 8006adc:	08006bc3 	.word	0x08006bc3
 8006ae0:	08006c87 	.word	0x08006c87
 8006ae4:	08006c87 	.word	0x08006c87
 8006ae8:	08006c87 	.word	0x08006c87
 8006aec:	08006c05 	.word	0x08006c05
 8006af0:	08006c87 	.word	0x08006c87
 8006af4:	08006c87 	.word	0x08006c87
 8006af8:	08006c87 	.word	0x08006c87
 8006afc:	08006c45 	.word	0x08006c45
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	68b9      	ldr	r1, [r7, #8]
 8006b06:	4618      	mov	r0, r3
 8006b08:	f000 fc58 	bl	80073bc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	699a      	ldr	r2, [r3, #24]
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f042 0208 	orr.w	r2, r2, #8
 8006b1a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	699a      	ldr	r2, [r3, #24]
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f022 0204 	bic.w	r2, r2, #4
 8006b2a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	6999      	ldr	r1, [r3, #24]
 8006b32:	68bb      	ldr	r3, [r7, #8]
 8006b34:	691a      	ldr	r2, [r3, #16]
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	430a      	orrs	r2, r1
 8006b3c:	619a      	str	r2, [r3, #24]
      break;
 8006b3e:	e0a5      	b.n	8006c8c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	68b9      	ldr	r1, [r7, #8]
 8006b46:	4618      	mov	r0, r3
 8006b48:	f000 fcd2 	bl	80074f0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	699a      	ldr	r2, [r3, #24]
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006b5a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	699a      	ldr	r2, [r3, #24]
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006b6a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	6999      	ldr	r1, [r3, #24]
 8006b72:	68bb      	ldr	r3, [r7, #8]
 8006b74:	691b      	ldr	r3, [r3, #16]
 8006b76:	021a      	lsls	r2, r3, #8
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	430a      	orrs	r2, r1
 8006b7e:	619a      	str	r2, [r3, #24]
      break;
 8006b80:	e084      	b.n	8006c8c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	68b9      	ldr	r1, [r7, #8]
 8006b88:	4618      	mov	r0, r3
 8006b8a:	f000 fd45 	bl	8007618 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	69da      	ldr	r2, [r3, #28]
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	f042 0208 	orr.w	r2, r2, #8
 8006b9c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	69da      	ldr	r2, [r3, #28]
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	f022 0204 	bic.w	r2, r2, #4
 8006bac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	69d9      	ldr	r1, [r3, #28]
 8006bb4:	68bb      	ldr	r3, [r7, #8]
 8006bb6:	691a      	ldr	r2, [r3, #16]
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	430a      	orrs	r2, r1
 8006bbe:	61da      	str	r2, [r3, #28]
      break;
 8006bc0:	e064      	b.n	8006c8c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	68b9      	ldr	r1, [r7, #8]
 8006bc8:	4618      	mov	r0, r3
 8006bca:	f000 fdb7 	bl	800773c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	69da      	ldr	r2, [r3, #28]
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006bdc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	69da      	ldr	r2, [r3, #28]
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006bec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	69d9      	ldr	r1, [r3, #28]
 8006bf4:	68bb      	ldr	r3, [r7, #8]
 8006bf6:	691b      	ldr	r3, [r3, #16]
 8006bf8:	021a      	lsls	r2, r3, #8
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	430a      	orrs	r2, r1
 8006c00:	61da      	str	r2, [r3, #28]
      break;
 8006c02:	e043      	b.n	8006c8c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	68b9      	ldr	r1, [r7, #8]
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	f000 fe2a 	bl	8007864 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	f042 0208 	orr.w	r2, r2, #8
 8006c1e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	f022 0204 	bic.w	r2, r2, #4
 8006c2e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8006c36:	68bb      	ldr	r3, [r7, #8]
 8006c38:	691a      	ldr	r2, [r3, #16]
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	430a      	orrs	r2, r1
 8006c40:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8006c42:	e023      	b.n	8006c8c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	68b9      	ldr	r1, [r7, #8]
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	f000 fe74 	bl	8007938 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006c5e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006c6e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8006c76:	68bb      	ldr	r3, [r7, #8]
 8006c78:	691b      	ldr	r3, [r3, #16]
 8006c7a:	021a      	lsls	r2, r3, #8
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	430a      	orrs	r2, r1
 8006c82:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8006c84:	e002      	b.n	8006c8c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006c86:	2301      	movs	r3, #1
 8006c88:	75fb      	strb	r3, [r7, #23]
      break;
 8006c8a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	2200      	movs	r2, #0
 8006c90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006c94:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c96:	4618      	mov	r0, r3
 8006c98:	3718      	adds	r7, #24
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	bd80      	pop	{r7, pc}
 8006c9e:	bf00      	nop

08006ca0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	b084      	sub	sp, #16
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
 8006ca8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006caa:	2300      	movs	r3, #0
 8006cac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006cb4:	2b01      	cmp	r3, #1
 8006cb6:	d101      	bne.n	8006cbc <HAL_TIM_ConfigClockSource+0x1c>
 8006cb8:	2302      	movs	r3, #2
 8006cba:	e0f6      	b.n	8006eaa <HAL_TIM_ConfigClockSource+0x20a>
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2201      	movs	r2, #1
 8006cc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2202      	movs	r2, #2
 8006cc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	689b      	ldr	r3, [r3, #8]
 8006cd2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006cd4:	68bb      	ldr	r3, [r7, #8]
 8006cd6:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8006cda:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006cde:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006ce0:	68bb      	ldr	r3, [r7, #8]
 8006ce2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006ce6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	68ba      	ldr	r2, [r7, #8]
 8006cee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006cf0:	683b      	ldr	r3, [r7, #0]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	4a6f      	ldr	r2, [pc, #444]	@ (8006eb4 <HAL_TIM_ConfigClockSource+0x214>)
 8006cf6:	4293      	cmp	r3, r2
 8006cf8:	f000 80c1 	beq.w	8006e7e <HAL_TIM_ConfigClockSource+0x1de>
 8006cfc:	4a6d      	ldr	r2, [pc, #436]	@ (8006eb4 <HAL_TIM_ConfigClockSource+0x214>)
 8006cfe:	4293      	cmp	r3, r2
 8006d00:	f200 80c6 	bhi.w	8006e90 <HAL_TIM_ConfigClockSource+0x1f0>
 8006d04:	4a6c      	ldr	r2, [pc, #432]	@ (8006eb8 <HAL_TIM_ConfigClockSource+0x218>)
 8006d06:	4293      	cmp	r3, r2
 8006d08:	f000 80b9 	beq.w	8006e7e <HAL_TIM_ConfigClockSource+0x1de>
 8006d0c:	4a6a      	ldr	r2, [pc, #424]	@ (8006eb8 <HAL_TIM_ConfigClockSource+0x218>)
 8006d0e:	4293      	cmp	r3, r2
 8006d10:	f200 80be 	bhi.w	8006e90 <HAL_TIM_ConfigClockSource+0x1f0>
 8006d14:	4a69      	ldr	r2, [pc, #420]	@ (8006ebc <HAL_TIM_ConfigClockSource+0x21c>)
 8006d16:	4293      	cmp	r3, r2
 8006d18:	f000 80b1 	beq.w	8006e7e <HAL_TIM_ConfigClockSource+0x1de>
 8006d1c:	4a67      	ldr	r2, [pc, #412]	@ (8006ebc <HAL_TIM_ConfigClockSource+0x21c>)
 8006d1e:	4293      	cmp	r3, r2
 8006d20:	f200 80b6 	bhi.w	8006e90 <HAL_TIM_ConfigClockSource+0x1f0>
 8006d24:	4a66      	ldr	r2, [pc, #408]	@ (8006ec0 <HAL_TIM_ConfigClockSource+0x220>)
 8006d26:	4293      	cmp	r3, r2
 8006d28:	f000 80a9 	beq.w	8006e7e <HAL_TIM_ConfigClockSource+0x1de>
 8006d2c:	4a64      	ldr	r2, [pc, #400]	@ (8006ec0 <HAL_TIM_ConfigClockSource+0x220>)
 8006d2e:	4293      	cmp	r3, r2
 8006d30:	f200 80ae 	bhi.w	8006e90 <HAL_TIM_ConfigClockSource+0x1f0>
 8006d34:	4a63      	ldr	r2, [pc, #396]	@ (8006ec4 <HAL_TIM_ConfigClockSource+0x224>)
 8006d36:	4293      	cmp	r3, r2
 8006d38:	f000 80a1 	beq.w	8006e7e <HAL_TIM_ConfigClockSource+0x1de>
 8006d3c:	4a61      	ldr	r2, [pc, #388]	@ (8006ec4 <HAL_TIM_ConfigClockSource+0x224>)
 8006d3e:	4293      	cmp	r3, r2
 8006d40:	f200 80a6 	bhi.w	8006e90 <HAL_TIM_ConfigClockSource+0x1f0>
 8006d44:	4a60      	ldr	r2, [pc, #384]	@ (8006ec8 <HAL_TIM_ConfigClockSource+0x228>)
 8006d46:	4293      	cmp	r3, r2
 8006d48:	f000 8099 	beq.w	8006e7e <HAL_TIM_ConfigClockSource+0x1de>
 8006d4c:	4a5e      	ldr	r2, [pc, #376]	@ (8006ec8 <HAL_TIM_ConfigClockSource+0x228>)
 8006d4e:	4293      	cmp	r3, r2
 8006d50:	f200 809e 	bhi.w	8006e90 <HAL_TIM_ConfigClockSource+0x1f0>
 8006d54:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8006d58:	f000 8091 	beq.w	8006e7e <HAL_TIM_ConfigClockSource+0x1de>
 8006d5c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8006d60:	f200 8096 	bhi.w	8006e90 <HAL_TIM_ConfigClockSource+0x1f0>
 8006d64:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006d68:	f000 8089 	beq.w	8006e7e <HAL_TIM_ConfigClockSource+0x1de>
 8006d6c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006d70:	f200 808e 	bhi.w	8006e90 <HAL_TIM_ConfigClockSource+0x1f0>
 8006d74:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006d78:	d03e      	beq.n	8006df8 <HAL_TIM_ConfigClockSource+0x158>
 8006d7a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006d7e:	f200 8087 	bhi.w	8006e90 <HAL_TIM_ConfigClockSource+0x1f0>
 8006d82:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006d86:	f000 8086 	beq.w	8006e96 <HAL_TIM_ConfigClockSource+0x1f6>
 8006d8a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006d8e:	d87f      	bhi.n	8006e90 <HAL_TIM_ConfigClockSource+0x1f0>
 8006d90:	2b70      	cmp	r3, #112	@ 0x70
 8006d92:	d01a      	beq.n	8006dca <HAL_TIM_ConfigClockSource+0x12a>
 8006d94:	2b70      	cmp	r3, #112	@ 0x70
 8006d96:	d87b      	bhi.n	8006e90 <HAL_TIM_ConfigClockSource+0x1f0>
 8006d98:	2b60      	cmp	r3, #96	@ 0x60
 8006d9a:	d050      	beq.n	8006e3e <HAL_TIM_ConfigClockSource+0x19e>
 8006d9c:	2b60      	cmp	r3, #96	@ 0x60
 8006d9e:	d877      	bhi.n	8006e90 <HAL_TIM_ConfigClockSource+0x1f0>
 8006da0:	2b50      	cmp	r3, #80	@ 0x50
 8006da2:	d03c      	beq.n	8006e1e <HAL_TIM_ConfigClockSource+0x17e>
 8006da4:	2b50      	cmp	r3, #80	@ 0x50
 8006da6:	d873      	bhi.n	8006e90 <HAL_TIM_ConfigClockSource+0x1f0>
 8006da8:	2b40      	cmp	r3, #64	@ 0x40
 8006daa:	d058      	beq.n	8006e5e <HAL_TIM_ConfigClockSource+0x1be>
 8006dac:	2b40      	cmp	r3, #64	@ 0x40
 8006dae:	d86f      	bhi.n	8006e90 <HAL_TIM_ConfigClockSource+0x1f0>
 8006db0:	2b30      	cmp	r3, #48	@ 0x30
 8006db2:	d064      	beq.n	8006e7e <HAL_TIM_ConfigClockSource+0x1de>
 8006db4:	2b30      	cmp	r3, #48	@ 0x30
 8006db6:	d86b      	bhi.n	8006e90 <HAL_TIM_ConfigClockSource+0x1f0>
 8006db8:	2b20      	cmp	r3, #32
 8006dba:	d060      	beq.n	8006e7e <HAL_TIM_ConfigClockSource+0x1de>
 8006dbc:	2b20      	cmp	r3, #32
 8006dbe:	d867      	bhi.n	8006e90 <HAL_TIM_ConfigClockSource+0x1f0>
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d05c      	beq.n	8006e7e <HAL_TIM_ConfigClockSource+0x1de>
 8006dc4:	2b10      	cmp	r3, #16
 8006dc6:	d05a      	beq.n	8006e7e <HAL_TIM_ConfigClockSource+0x1de>
 8006dc8:	e062      	b.n	8006e90 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006dd2:	683b      	ldr	r3, [r7, #0]
 8006dd4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006dd6:	683b      	ldr	r3, [r7, #0]
 8006dd8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006dda:	f000 fe95 	bl	8007b08 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	689b      	ldr	r3, [r3, #8]
 8006de4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006de6:	68bb      	ldr	r3, [r7, #8]
 8006de8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006dec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	68ba      	ldr	r2, [r7, #8]
 8006df4:	609a      	str	r2, [r3, #8]
      break;
 8006df6:	e04f      	b.n	8006e98 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006dfc:	683b      	ldr	r3, [r7, #0]
 8006dfe:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006e00:	683b      	ldr	r3, [r7, #0]
 8006e02:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006e04:	683b      	ldr	r3, [r7, #0]
 8006e06:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006e08:	f000 fe7e 	bl	8007b08 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	689a      	ldr	r2, [r3, #8]
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006e1a:	609a      	str	r2, [r3, #8]
      break;
 8006e1c:	e03c      	b.n	8006e98 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006e22:	683b      	ldr	r3, [r7, #0]
 8006e24:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006e26:	683b      	ldr	r3, [r7, #0]
 8006e28:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e2a:	461a      	mov	r2, r3
 8006e2c:	f000 fdf0 	bl	8007a10 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	2150      	movs	r1, #80	@ 0x50
 8006e36:	4618      	mov	r0, r3
 8006e38:	f000 fe49 	bl	8007ace <TIM_ITRx_SetConfig>
      break;
 8006e3c:	e02c      	b.n	8006e98 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006e42:	683b      	ldr	r3, [r7, #0]
 8006e44:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006e46:	683b      	ldr	r3, [r7, #0]
 8006e48:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006e4a:	461a      	mov	r2, r3
 8006e4c:	f000 fe0f 	bl	8007a6e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	2160      	movs	r1, #96	@ 0x60
 8006e56:	4618      	mov	r0, r3
 8006e58:	f000 fe39 	bl	8007ace <TIM_ITRx_SetConfig>
      break;
 8006e5c:	e01c      	b.n	8006e98 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006e62:	683b      	ldr	r3, [r7, #0]
 8006e64:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006e66:	683b      	ldr	r3, [r7, #0]
 8006e68:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e6a:	461a      	mov	r2, r3
 8006e6c:	f000 fdd0 	bl	8007a10 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	2140      	movs	r1, #64	@ 0x40
 8006e76:	4618      	mov	r0, r3
 8006e78:	f000 fe29 	bl	8007ace <TIM_ITRx_SetConfig>
      break;
 8006e7c:	e00c      	b.n	8006e98 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681a      	ldr	r2, [r3, #0]
 8006e82:	683b      	ldr	r3, [r7, #0]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	4619      	mov	r1, r3
 8006e88:	4610      	mov	r0, r2
 8006e8a:	f000 fe20 	bl	8007ace <TIM_ITRx_SetConfig>
      break;
 8006e8e:	e003      	b.n	8006e98 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8006e90:	2301      	movs	r3, #1
 8006e92:	73fb      	strb	r3, [r7, #15]
      break;
 8006e94:	e000      	b.n	8006e98 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8006e96:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2201      	movs	r2, #1
 8006e9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006ea8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006eaa:	4618      	mov	r0, r3
 8006eac:	3710      	adds	r7, #16
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	bd80      	pop	{r7, pc}
 8006eb2:	bf00      	nop
 8006eb4:	00100070 	.word	0x00100070
 8006eb8:	00100060 	.word	0x00100060
 8006ebc:	00100050 	.word	0x00100050
 8006ec0:	00100040 	.word	0x00100040
 8006ec4:	00100030 	.word	0x00100030
 8006ec8:	00100020 	.word	0x00100020

08006ecc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006ecc:	b480      	push	{r7}
 8006ece:	b083      	sub	sp, #12
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006ed4:	bf00      	nop
 8006ed6:	370c      	adds	r7, #12
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ede:	4770      	bx	lr

08006ee0 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8006ee0:	b480      	push	{r7}
 8006ee2:	b083      	sub	sp, #12
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8006ee8:	bf00      	nop
 8006eea:	370c      	adds	r7, #12
 8006eec:	46bd      	mov	sp, r7
 8006eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef2:	4770      	bx	lr

08006ef4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006ef4:	b480      	push	{r7}
 8006ef6:	b083      	sub	sp, #12
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006efc:	bf00      	nop
 8006efe:	370c      	adds	r7, #12
 8006f00:	46bd      	mov	sp, r7
 8006f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f06:	4770      	bx	lr

08006f08 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006f08:	b480      	push	{r7}
 8006f0a:	b083      	sub	sp, #12
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006f10:	bf00      	nop
 8006f12:	370c      	adds	r7, #12
 8006f14:	46bd      	mov	sp, r7
 8006f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1a:	4770      	bx	lr

08006f1c <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8006f1c:	b480      	push	{r7}
 8006f1e:	b083      	sub	sp, #12
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8006f24:	bf00      	nop
 8006f26:	370c      	adds	r7, #12
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2e:	4770      	bx	lr

08006f30 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006f30:	b480      	push	{r7}
 8006f32:	b083      	sub	sp, #12
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006f38:	bf00      	nop
 8006f3a:	370c      	adds	r7, #12
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f42:	4770      	bx	lr

08006f44 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8006f44:	b480      	push	{r7}
 8006f46:	b083      	sub	sp, #12
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8006f4c:	bf00      	nop
 8006f4e:	370c      	adds	r7, #12
 8006f50:	46bd      	mov	sp, r7
 8006f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f56:	4770      	bx	lr

08006f58 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006f58:	b480      	push	{r7}
 8006f5a:	b083      	sub	sp, #12
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006f60:	bf00      	nop
 8006f62:	370c      	adds	r7, #12
 8006f64:	46bd      	mov	sp, r7
 8006f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6a:	4770      	bx	lr

08006f6c <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8006f6c:	b480      	push	{r7}
 8006f6e:	b083      	sub	sp, #12
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8006f74:	bf00      	nop
 8006f76:	370c      	adds	r7, #12
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7e:	4770      	bx	lr

08006f80 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8006f80:	b480      	push	{r7}
 8006f82:	b083      	sub	sp, #12
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8006f88:	bf00      	nop
 8006f8a:	370c      	adds	r7, #12
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f92:	4770      	bx	lr

08006f94 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 8006f94:	b480      	push	{r7}
 8006f96:	b087      	sub	sp, #28
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	60f8      	str	r0, [r7, #12]
 8006f9c:	460b      	mov	r3, r1
 8006f9e:	607a      	str	r2, [r7, #4]
 8006fa0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8006fa2:	2300      	movs	r3, #0
 8006fa4:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d101      	bne.n	8006fb0 <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8006fac:	2301      	movs	r3, #1
 8006fae:	e14a      	b.n	8007246 <HAL_TIM_RegisterCallback+0x2b2>
  }

  if (htim->State == HAL_TIM_STATE_READY)
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006fb6:	b2db      	uxtb	r3, r3
 8006fb8:	2b01      	cmp	r3, #1
 8006fba:	f040 80dd 	bne.w	8007178 <HAL_TIM_RegisterCallback+0x1e4>
  {
    switch (CallbackID)
 8006fbe:	7afb      	ldrb	r3, [r7, #11]
 8006fc0:	2b1f      	cmp	r3, #31
 8006fc2:	f200 80d6 	bhi.w	8007172 <HAL_TIM_RegisterCallback+0x1de>
 8006fc6:	a201      	add	r2, pc, #4	@ (adr r2, 8006fcc <HAL_TIM_RegisterCallback+0x38>)
 8006fc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fcc:	0800704d 	.word	0x0800704d
 8006fd0:	08007055 	.word	0x08007055
 8006fd4:	0800705d 	.word	0x0800705d
 8006fd8:	08007065 	.word	0x08007065
 8006fdc:	0800706d 	.word	0x0800706d
 8006fe0:	08007075 	.word	0x08007075
 8006fe4:	0800707d 	.word	0x0800707d
 8006fe8:	08007085 	.word	0x08007085
 8006fec:	0800708d 	.word	0x0800708d
 8006ff0:	08007095 	.word	0x08007095
 8006ff4:	0800709d 	.word	0x0800709d
 8006ff8:	080070a5 	.word	0x080070a5
 8006ffc:	080070ad 	.word	0x080070ad
 8007000:	080070b5 	.word	0x080070b5
 8007004:	080070bf 	.word	0x080070bf
 8007008:	080070c9 	.word	0x080070c9
 800700c:	080070d3 	.word	0x080070d3
 8007010:	080070dd 	.word	0x080070dd
 8007014:	080070e7 	.word	0x080070e7
 8007018:	080070f1 	.word	0x080070f1
 800701c:	080070fb 	.word	0x080070fb
 8007020:	08007105 	.word	0x08007105
 8007024:	0800710f 	.word	0x0800710f
 8007028:	08007119 	.word	0x08007119
 800702c:	08007123 	.word	0x08007123
 8007030:	0800712d 	.word	0x0800712d
 8007034:	08007137 	.word	0x08007137
 8007038:	08007141 	.word	0x08007141
 800703c:	0800714b 	.word	0x0800714b
 8007040:	08007155 	.word	0x08007155
 8007044:	0800715f 	.word	0x0800715f
 8007048:	08007169 	.word	0x08007169
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	687a      	ldr	r2, [r7, #4]
 8007050:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 8007052:	e0f7      	b.n	8007244 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	687a      	ldr	r2, [r7, #4]
 8007058:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 800705a:	e0f3      	b.n	8007244 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	687a      	ldr	r2, [r7, #4]
 8007060:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8007062:	e0ef      	b.n	8007244 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	687a      	ldr	r2, [r7, #4]
 8007068:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 800706a:	e0eb      	b.n	8007244 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	687a      	ldr	r2, [r7, #4]
 8007070:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 8007072:	e0e7      	b.n	8007244 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	687a      	ldr	r2, [r7, #4]
 8007078:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 800707a:	e0e3      	b.n	8007244 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	687a      	ldr	r2, [r7, #4]
 8007080:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 8007082:	e0df      	b.n	8007244 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	687a      	ldr	r2, [r7, #4]
 8007088:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 800708a:	e0db      	b.n	8007244 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	687a      	ldr	r2, [r7, #4]
 8007090:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 8007092:	e0d7      	b.n	8007244 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	687a      	ldr	r2, [r7, #4]
 8007098:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 800709a:	e0d3      	b.n	8007244 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	687a      	ldr	r2, [r7, #4]
 80070a0:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 80070a2:	e0cf      	b.n	8007244 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	687a      	ldr	r2, [r7, #4]
 80070a8:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 80070aa:	e0cb      	b.n	8007244 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	687a      	ldr	r2, [r7, #4]
 80070b0:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 80070b2:	e0c7      	b.n	8007244 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	687a      	ldr	r2, [r7, #4]
 80070b8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 80070bc:	e0c2      	b.n	8007244 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	687a      	ldr	r2, [r7, #4]
 80070c2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        break;
 80070c6:	e0bd      	b.n	8007244 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	687a      	ldr	r2, [r7, #4]
 80070cc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        break;
 80070d0:	e0b8      	b.n	8007244 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	687a      	ldr	r2, [r7, #4]
 80070d6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        break;
 80070da:	e0b3      	b.n	8007244 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	687a      	ldr	r2, [r7, #4]
 80070e0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        break;
 80070e4:	e0ae      	b.n	8007244 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	687a      	ldr	r2, [r7, #4]
 80070ea:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 80070ee:	e0a9      	b.n	8007244 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	687a      	ldr	r2, [r7, #4]
 80070f4:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 80070f8:	e0a4      	b.n	8007244 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	687a      	ldr	r2, [r7, #4]
 80070fe:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 8007102:	e09f      	b.n	8007244 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	687a      	ldr	r2, [r7, #4]
 8007108:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 800710c:	e09a      	b.n	8007244 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	687a      	ldr	r2, [r7, #4]
 8007112:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 8007116:	e095      	b.n	8007244 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	687a      	ldr	r2, [r7, #4]
 800711c:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 8007120:	e090      	b.n	8007244 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	687a      	ldr	r2, [r7, #4]
 8007126:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 800712a:	e08b      	b.n	8007244 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	687a      	ldr	r2, [r7, #4]
 8007130:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 8007134:	e086      	b.n	8007244 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	687a      	ldr	r2, [r7, #4]
 800713a:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 800713e:	e081      	b.n	8007244 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK2_CB_ID :
        htim->Break2Callback                       = pCallback;
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	687a      	ldr	r2, [r7, #4]
 8007144:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 8007148:	e07c      	b.n	8007244 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_INDEX_CB_ID :
        htim->EncoderIndexCallback                 = pCallback;
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	687a      	ldr	r2, [r7, #4]
 800714e:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 8007152:	e077      	b.n	8007244 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_DIRECTION_CHANGE_CB_ID :
        htim->DirectionChangeCallback              = pCallback;
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	687a      	ldr	r2, [r7, #4]
 8007158:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
        break;
 800715c:	e072      	b.n	8007244 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_INDEX_ERROR_CB_ID :
        htim->IndexErrorCallback                   = pCallback;
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	687a      	ldr	r2, [r7, #4]
 8007162:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 8007166:	e06d      	b.n	8007244 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRANSITION_ERROR_CB_ID :
        htim->TransitionErrorCallback              = pCallback;
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	687a      	ldr	r2, [r7, #4]
 800716c:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 8007170:	e068      	b.n	8007244 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8007172:	2301      	movs	r3, #1
 8007174:	75fb      	strb	r3, [r7, #23]
        break;
 8007176:	e065      	b.n	8007244 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800717e:	b2db      	uxtb	r3, r3
 8007180:	2b00      	cmp	r3, #0
 8007182:	d15d      	bne.n	8007240 <HAL_TIM_RegisterCallback+0x2ac>
  {
    switch (CallbackID)
 8007184:	7afb      	ldrb	r3, [r7, #11]
 8007186:	2b0d      	cmp	r3, #13
 8007188:	d857      	bhi.n	800723a <HAL_TIM_RegisterCallback+0x2a6>
 800718a:	a201      	add	r2, pc, #4	@ (adr r2, 8007190 <HAL_TIM_RegisterCallback+0x1fc>)
 800718c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007190:	080071c9 	.word	0x080071c9
 8007194:	080071d1 	.word	0x080071d1
 8007198:	080071d9 	.word	0x080071d9
 800719c:	080071e1 	.word	0x080071e1
 80071a0:	080071e9 	.word	0x080071e9
 80071a4:	080071f1 	.word	0x080071f1
 80071a8:	080071f9 	.word	0x080071f9
 80071ac:	08007201 	.word	0x08007201
 80071b0:	08007209 	.word	0x08007209
 80071b4:	08007211 	.word	0x08007211
 80071b8:	08007219 	.word	0x08007219
 80071bc:	08007221 	.word	0x08007221
 80071c0:	08007229 	.word	0x08007229
 80071c4:	08007231 	.word	0x08007231
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	687a      	ldr	r2, [r7, #4]
 80071cc:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 80071ce:	e039      	b.n	8007244 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	687a      	ldr	r2, [r7, #4]
 80071d4:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 80071d6:	e035      	b.n	8007244 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	687a      	ldr	r2, [r7, #4]
 80071dc:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 80071de:	e031      	b.n	8007244 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	687a      	ldr	r2, [r7, #4]
 80071e4:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 80071e6:	e02d      	b.n	8007244 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	687a      	ldr	r2, [r7, #4]
 80071ec:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 80071ee:	e029      	b.n	8007244 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	687a      	ldr	r2, [r7, #4]
 80071f4:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 80071f6:	e025      	b.n	8007244 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	687a      	ldr	r2, [r7, #4]
 80071fc:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 80071fe:	e021      	b.n	8007244 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	687a      	ldr	r2, [r7, #4]
 8007204:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 8007206:	e01d      	b.n	8007244 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	687a      	ldr	r2, [r7, #4]
 800720c:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 800720e:	e019      	b.n	8007244 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	687a      	ldr	r2, [r7, #4]
 8007214:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 8007216:	e015      	b.n	8007244 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	687a      	ldr	r2, [r7, #4]
 800721c:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 800721e:	e011      	b.n	8007244 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	687a      	ldr	r2, [r7, #4]
 8007224:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 8007226:	e00d      	b.n	8007244 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	687a      	ldr	r2, [r7, #4]
 800722c:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 800722e:	e009      	b.n	8007244 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	687a      	ldr	r2, [r7, #4]
 8007234:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 8007238:	e004      	b.n	8007244 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 800723a:	2301      	movs	r3, #1
 800723c:	75fb      	strb	r3, [r7, #23]
        break;
 800723e:	e001      	b.n	8007244 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 8007240:	2301      	movs	r3, #1
 8007242:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8007244:	7dfb      	ldrb	r3, [r7, #23]
}
 8007246:	4618      	mov	r0, r3
 8007248:	371c      	adds	r7, #28
 800724a:	46bd      	mov	sp, r7
 800724c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007250:	4770      	bx	lr
 8007252:	bf00      	nop

08007254 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007254:	b480      	push	{r7}
 8007256:	b085      	sub	sp, #20
 8007258:	af00      	add	r7, sp, #0
 800725a:	6078      	str	r0, [r7, #4]
 800725c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	4a4c      	ldr	r2, [pc, #304]	@ (8007398 <TIM_Base_SetConfig+0x144>)
 8007268:	4293      	cmp	r3, r2
 800726a:	d017      	beq.n	800729c <TIM_Base_SetConfig+0x48>
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007272:	d013      	beq.n	800729c <TIM_Base_SetConfig+0x48>
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	4a49      	ldr	r2, [pc, #292]	@ (800739c <TIM_Base_SetConfig+0x148>)
 8007278:	4293      	cmp	r3, r2
 800727a:	d00f      	beq.n	800729c <TIM_Base_SetConfig+0x48>
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	4a48      	ldr	r2, [pc, #288]	@ (80073a0 <TIM_Base_SetConfig+0x14c>)
 8007280:	4293      	cmp	r3, r2
 8007282:	d00b      	beq.n	800729c <TIM_Base_SetConfig+0x48>
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	4a47      	ldr	r2, [pc, #284]	@ (80073a4 <TIM_Base_SetConfig+0x150>)
 8007288:	4293      	cmp	r3, r2
 800728a:	d007      	beq.n	800729c <TIM_Base_SetConfig+0x48>
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	4a46      	ldr	r2, [pc, #280]	@ (80073a8 <TIM_Base_SetConfig+0x154>)
 8007290:	4293      	cmp	r3, r2
 8007292:	d003      	beq.n	800729c <TIM_Base_SetConfig+0x48>
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	4a45      	ldr	r2, [pc, #276]	@ (80073ac <TIM_Base_SetConfig+0x158>)
 8007298:	4293      	cmp	r3, r2
 800729a:	d108      	bne.n	80072ae <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80072a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80072a4:	683b      	ldr	r3, [r7, #0]
 80072a6:	685b      	ldr	r3, [r3, #4]
 80072a8:	68fa      	ldr	r2, [r7, #12]
 80072aa:	4313      	orrs	r3, r2
 80072ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	4a39      	ldr	r2, [pc, #228]	@ (8007398 <TIM_Base_SetConfig+0x144>)
 80072b2:	4293      	cmp	r3, r2
 80072b4:	d023      	beq.n	80072fe <TIM_Base_SetConfig+0xaa>
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80072bc:	d01f      	beq.n	80072fe <TIM_Base_SetConfig+0xaa>
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	4a36      	ldr	r2, [pc, #216]	@ (800739c <TIM_Base_SetConfig+0x148>)
 80072c2:	4293      	cmp	r3, r2
 80072c4:	d01b      	beq.n	80072fe <TIM_Base_SetConfig+0xaa>
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	4a35      	ldr	r2, [pc, #212]	@ (80073a0 <TIM_Base_SetConfig+0x14c>)
 80072ca:	4293      	cmp	r3, r2
 80072cc:	d017      	beq.n	80072fe <TIM_Base_SetConfig+0xaa>
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	4a34      	ldr	r2, [pc, #208]	@ (80073a4 <TIM_Base_SetConfig+0x150>)
 80072d2:	4293      	cmp	r3, r2
 80072d4:	d013      	beq.n	80072fe <TIM_Base_SetConfig+0xaa>
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	4a33      	ldr	r2, [pc, #204]	@ (80073a8 <TIM_Base_SetConfig+0x154>)
 80072da:	4293      	cmp	r3, r2
 80072dc:	d00f      	beq.n	80072fe <TIM_Base_SetConfig+0xaa>
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	4a33      	ldr	r2, [pc, #204]	@ (80073b0 <TIM_Base_SetConfig+0x15c>)
 80072e2:	4293      	cmp	r3, r2
 80072e4:	d00b      	beq.n	80072fe <TIM_Base_SetConfig+0xaa>
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	4a32      	ldr	r2, [pc, #200]	@ (80073b4 <TIM_Base_SetConfig+0x160>)
 80072ea:	4293      	cmp	r3, r2
 80072ec:	d007      	beq.n	80072fe <TIM_Base_SetConfig+0xaa>
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	4a31      	ldr	r2, [pc, #196]	@ (80073b8 <TIM_Base_SetConfig+0x164>)
 80072f2:	4293      	cmp	r3, r2
 80072f4:	d003      	beq.n	80072fe <TIM_Base_SetConfig+0xaa>
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	4a2c      	ldr	r2, [pc, #176]	@ (80073ac <TIM_Base_SetConfig+0x158>)
 80072fa:	4293      	cmp	r3, r2
 80072fc:	d108      	bne.n	8007310 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007304:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007306:	683b      	ldr	r3, [r7, #0]
 8007308:	68db      	ldr	r3, [r3, #12]
 800730a:	68fa      	ldr	r2, [r7, #12]
 800730c:	4313      	orrs	r3, r2
 800730e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007316:	683b      	ldr	r3, [r7, #0]
 8007318:	695b      	ldr	r3, [r3, #20]
 800731a:	4313      	orrs	r3, r2
 800731c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	68fa      	ldr	r2, [r7, #12]
 8007322:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007324:	683b      	ldr	r3, [r7, #0]
 8007326:	689a      	ldr	r2, [r3, #8]
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800732c:	683b      	ldr	r3, [r7, #0]
 800732e:	681a      	ldr	r2, [r3, #0]
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	4a18      	ldr	r2, [pc, #96]	@ (8007398 <TIM_Base_SetConfig+0x144>)
 8007338:	4293      	cmp	r3, r2
 800733a:	d013      	beq.n	8007364 <TIM_Base_SetConfig+0x110>
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	4a1a      	ldr	r2, [pc, #104]	@ (80073a8 <TIM_Base_SetConfig+0x154>)
 8007340:	4293      	cmp	r3, r2
 8007342:	d00f      	beq.n	8007364 <TIM_Base_SetConfig+0x110>
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	4a1a      	ldr	r2, [pc, #104]	@ (80073b0 <TIM_Base_SetConfig+0x15c>)
 8007348:	4293      	cmp	r3, r2
 800734a:	d00b      	beq.n	8007364 <TIM_Base_SetConfig+0x110>
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	4a19      	ldr	r2, [pc, #100]	@ (80073b4 <TIM_Base_SetConfig+0x160>)
 8007350:	4293      	cmp	r3, r2
 8007352:	d007      	beq.n	8007364 <TIM_Base_SetConfig+0x110>
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	4a18      	ldr	r2, [pc, #96]	@ (80073b8 <TIM_Base_SetConfig+0x164>)
 8007358:	4293      	cmp	r3, r2
 800735a:	d003      	beq.n	8007364 <TIM_Base_SetConfig+0x110>
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	4a13      	ldr	r2, [pc, #76]	@ (80073ac <TIM_Base_SetConfig+0x158>)
 8007360:	4293      	cmp	r3, r2
 8007362:	d103      	bne.n	800736c <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007364:	683b      	ldr	r3, [r7, #0]
 8007366:	691a      	ldr	r2, [r3, #16]
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2201      	movs	r2, #1
 8007370:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	691b      	ldr	r3, [r3, #16]
 8007376:	f003 0301 	and.w	r3, r3, #1
 800737a:	2b01      	cmp	r3, #1
 800737c:	d105      	bne.n	800738a <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	691b      	ldr	r3, [r3, #16]
 8007382:	f023 0201 	bic.w	r2, r3, #1
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	611a      	str	r2, [r3, #16]
  }
}
 800738a:	bf00      	nop
 800738c:	3714      	adds	r7, #20
 800738e:	46bd      	mov	sp, r7
 8007390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007394:	4770      	bx	lr
 8007396:	bf00      	nop
 8007398:	40012c00 	.word	0x40012c00
 800739c:	40000400 	.word	0x40000400
 80073a0:	40000800 	.word	0x40000800
 80073a4:	40000c00 	.word	0x40000c00
 80073a8:	40013400 	.word	0x40013400
 80073ac:	40015000 	.word	0x40015000
 80073b0:	40014000 	.word	0x40014000
 80073b4:	40014400 	.word	0x40014400
 80073b8:	40014800 	.word	0x40014800

080073bc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80073bc:	b480      	push	{r7}
 80073be:	b087      	sub	sp, #28
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]
 80073c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	6a1b      	ldr	r3, [r3, #32]
 80073ca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	6a1b      	ldr	r3, [r3, #32]
 80073d0:	f023 0201 	bic.w	r2, r3, #1
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	685b      	ldr	r3, [r3, #4]
 80073dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	699b      	ldr	r3, [r3, #24]
 80073e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80073ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80073ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	f023 0303 	bic.w	r3, r3, #3
 80073f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80073f8:	683b      	ldr	r3, [r7, #0]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	68fa      	ldr	r2, [r7, #12]
 80073fe:	4313      	orrs	r3, r2
 8007400:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007402:	697b      	ldr	r3, [r7, #20]
 8007404:	f023 0302 	bic.w	r3, r3, #2
 8007408:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800740a:	683b      	ldr	r3, [r7, #0]
 800740c:	689b      	ldr	r3, [r3, #8]
 800740e:	697a      	ldr	r2, [r7, #20]
 8007410:	4313      	orrs	r3, r2
 8007412:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	4a30      	ldr	r2, [pc, #192]	@ (80074d8 <TIM_OC1_SetConfig+0x11c>)
 8007418:	4293      	cmp	r3, r2
 800741a:	d013      	beq.n	8007444 <TIM_OC1_SetConfig+0x88>
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	4a2f      	ldr	r2, [pc, #188]	@ (80074dc <TIM_OC1_SetConfig+0x120>)
 8007420:	4293      	cmp	r3, r2
 8007422:	d00f      	beq.n	8007444 <TIM_OC1_SetConfig+0x88>
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	4a2e      	ldr	r2, [pc, #184]	@ (80074e0 <TIM_OC1_SetConfig+0x124>)
 8007428:	4293      	cmp	r3, r2
 800742a:	d00b      	beq.n	8007444 <TIM_OC1_SetConfig+0x88>
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	4a2d      	ldr	r2, [pc, #180]	@ (80074e4 <TIM_OC1_SetConfig+0x128>)
 8007430:	4293      	cmp	r3, r2
 8007432:	d007      	beq.n	8007444 <TIM_OC1_SetConfig+0x88>
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	4a2c      	ldr	r2, [pc, #176]	@ (80074e8 <TIM_OC1_SetConfig+0x12c>)
 8007438:	4293      	cmp	r3, r2
 800743a:	d003      	beq.n	8007444 <TIM_OC1_SetConfig+0x88>
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	4a2b      	ldr	r2, [pc, #172]	@ (80074ec <TIM_OC1_SetConfig+0x130>)
 8007440:	4293      	cmp	r3, r2
 8007442:	d10c      	bne.n	800745e <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007444:	697b      	ldr	r3, [r7, #20]
 8007446:	f023 0308 	bic.w	r3, r3, #8
 800744a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800744c:	683b      	ldr	r3, [r7, #0]
 800744e:	68db      	ldr	r3, [r3, #12]
 8007450:	697a      	ldr	r2, [r7, #20]
 8007452:	4313      	orrs	r3, r2
 8007454:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007456:	697b      	ldr	r3, [r7, #20]
 8007458:	f023 0304 	bic.w	r3, r3, #4
 800745c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	4a1d      	ldr	r2, [pc, #116]	@ (80074d8 <TIM_OC1_SetConfig+0x11c>)
 8007462:	4293      	cmp	r3, r2
 8007464:	d013      	beq.n	800748e <TIM_OC1_SetConfig+0xd2>
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	4a1c      	ldr	r2, [pc, #112]	@ (80074dc <TIM_OC1_SetConfig+0x120>)
 800746a:	4293      	cmp	r3, r2
 800746c:	d00f      	beq.n	800748e <TIM_OC1_SetConfig+0xd2>
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	4a1b      	ldr	r2, [pc, #108]	@ (80074e0 <TIM_OC1_SetConfig+0x124>)
 8007472:	4293      	cmp	r3, r2
 8007474:	d00b      	beq.n	800748e <TIM_OC1_SetConfig+0xd2>
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	4a1a      	ldr	r2, [pc, #104]	@ (80074e4 <TIM_OC1_SetConfig+0x128>)
 800747a:	4293      	cmp	r3, r2
 800747c:	d007      	beq.n	800748e <TIM_OC1_SetConfig+0xd2>
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	4a19      	ldr	r2, [pc, #100]	@ (80074e8 <TIM_OC1_SetConfig+0x12c>)
 8007482:	4293      	cmp	r3, r2
 8007484:	d003      	beq.n	800748e <TIM_OC1_SetConfig+0xd2>
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	4a18      	ldr	r2, [pc, #96]	@ (80074ec <TIM_OC1_SetConfig+0x130>)
 800748a:	4293      	cmp	r3, r2
 800748c:	d111      	bne.n	80074b2 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800748e:	693b      	ldr	r3, [r7, #16]
 8007490:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007494:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007496:	693b      	ldr	r3, [r7, #16]
 8007498:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800749c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800749e:	683b      	ldr	r3, [r7, #0]
 80074a0:	695b      	ldr	r3, [r3, #20]
 80074a2:	693a      	ldr	r2, [r7, #16]
 80074a4:	4313      	orrs	r3, r2
 80074a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80074a8:	683b      	ldr	r3, [r7, #0]
 80074aa:	699b      	ldr	r3, [r3, #24]
 80074ac:	693a      	ldr	r2, [r7, #16]
 80074ae:	4313      	orrs	r3, r2
 80074b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	693a      	ldr	r2, [r7, #16]
 80074b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	68fa      	ldr	r2, [r7, #12]
 80074bc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80074be:	683b      	ldr	r3, [r7, #0]
 80074c0:	685a      	ldr	r2, [r3, #4]
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	697a      	ldr	r2, [r7, #20]
 80074ca:	621a      	str	r2, [r3, #32]
}
 80074cc:	bf00      	nop
 80074ce:	371c      	adds	r7, #28
 80074d0:	46bd      	mov	sp, r7
 80074d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d6:	4770      	bx	lr
 80074d8:	40012c00 	.word	0x40012c00
 80074dc:	40013400 	.word	0x40013400
 80074e0:	40014000 	.word	0x40014000
 80074e4:	40014400 	.word	0x40014400
 80074e8:	40014800 	.word	0x40014800
 80074ec:	40015000 	.word	0x40015000

080074f0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80074f0:	b480      	push	{r7}
 80074f2:	b087      	sub	sp, #28
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	6078      	str	r0, [r7, #4]
 80074f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	6a1b      	ldr	r3, [r3, #32]
 80074fe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	6a1b      	ldr	r3, [r3, #32]
 8007504:	f023 0210 	bic.w	r2, r3, #16
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	685b      	ldr	r3, [r3, #4]
 8007510:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	699b      	ldr	r3, [r3, #24]
 8007516:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800751e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007522:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800752a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800752c:	683b      	ldr	r3, [r7, #0]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	021b      	lsls	r3, r3, #8
 8007532:	68fa      	ldr	r2, [r7, #12]
 8007534:	4313      	orrs	r3, r2
 8007536:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007538:	697b      	ldr	r3, [r7, #20]
 800753a:	f023 0320 	bic.w	r3, r3, #32
 800753e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007540:	683b      	ldr	r3, [r7, #0]
 8007542:	689b      	ldr	r3, [r3, #8]
 8007544:	011b      	lsls	r3, r3, #4
 8007546:	697a      	ldr	r2, [r7, #20]
 8007548:	4313      	orrs	r3, r2
 800754a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	4a2c      	ldr	r2, [pc, #176]	@ (8007600 <TIM_OC2_SetConfig+0x110>)
 8007550:	4293      	cmp	r3, r2
 8007552:	d007      	beq.n	8007564 <TIM_OC2_SetConfig+0x74>
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	4a2b      	ldr	r2, [pc, #172]	@ (8007604 <TIM_OC2_SetConfig+0x114>)
 8007558:	4293      	cmp	r3, r2
 800755a:	d003      	beq.n	8007564 <TIM_OC2_SetConfig+0x74>
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	4a2a      	ldr	r2, [pc, #168]	@ (8007608 <TIM_OC2_SetConfig+0x118>)
 8007560:	4293      	cmp	r3, r2
 8007562:	d10d      	bne.n	8007580 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007564:	697b      	ldr	r3, [r7, #20]
 8007566:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800756a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800756c:	683b      	ldr	r3, [r7, #0]
 800756e:	68db      	ldr	r3, [r3, #12]
 8007570:	011b      	lsls	r3, r3, #4
 8007572:	697a      	ldr	r2, [r7, #20]
 8007574:	4313      	orrs	r3, r2
 8007576:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007578:	697b      	ldr	r3, [r7, #20]
 800757a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800757e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	4a1f      	ldr	r2, [pc, #124]	@ (8007600 <TIM_OC2_SetConfig+0x110>)
 8007584:	4293      	cmp	r3, r2
 8007586:	d013      	beq.n	80075b0 <TIM_OC2_SetConfig+0xc0>
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	4a1e      	ldr	r2, [pc, #120]	@ (8007604 <TIM_OC2_SetConfig+0x114>)
 800758c:	4293      	cmp	r3, r2
 800758e:	d00f      	beq.n	80075b0 <TIM_OC2_SetConfig+0xc0>
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	4a1e      	ldr	r2, [pc, #120]	@ (800760c <TIM_OC2_SetConfig+0x11c>)
 8007594:	4293      	cmp	r3, r2
 8007596:	d00b      	beq.n	80075b0 <TIM_OC2_SetConfig+0xc0>
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	4a1d      	ldr	r2, [pc, #116]	@ (8007610 <TIM_OC2_SetConfig+0x120>)
 800759c:	4293      	cmp	r3, r2
 800759e:	d007      	beq.n	80075b0 <TIM_OC2_SetConfig+0xc0>
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	4a1c      	ldr	r2, [pc, #112]	@ (8007614 <TIM_OC2_SetConfig+0x124>)
 80075a4:	4293      	cmp	r3, r2
 80075a6:	d003      	beq.n	80075b0 <TIM_OC2_SetConfig+0xc0>
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	4a17      	ldr	r2, [pc, #92]	@ (8007608 <TIM_OC2_SetConfig+0x118>)
 80075ac:	4293      	cmp	r3, r2
 80075ae:	d113      	bne.n	80075d8 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80075b0:	693b      	ldr	r3, [r7, #16]
 80075b2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80075b6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80075b8:	693b      	ldr	r3, [r7, #16]
 80075ba:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80075be:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80075c0:	683b      	ldr	r3, [r7, #0]
 80075c2:	695b      	ldr	r3, [r3, #20]
 80075c4:	009b      	lsls	r3, r3, #2
 80075c6:	693a      	ldr	r2, [r7, #16]
 80075c8:	4313      	orrs	r3, r2
 80075ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80075cc:	683b      	ldr	r3, [r7, #0]
 80075ce:	699b      	ldr	r3, [r3, #24]
 80075d0:	009b      	lsls	r3, r3, #2
 80075d2:	693a      	ldr	r2, [r7, #16]
 80075d4:	4313      	orrs	r3, r2
 80075d6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	693a      	ldr	r2, [r7, #16]
 80075dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	68fa      	ldr	r2, [r7, #12]
 80075e2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80075e4:	683b      	ldr	r3, [r7, #0]
 80075e6:	685a      	ldr	r2, [r3, #4]
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	697a      	ldr	r2, [r7, #20]
 80075f0:	621a      	str	r2, [r3, #32]
}
 80075f2:	bf00      	nop
 80075f4:	371c      	adds	r7, #28
 80075f6:	46bd      	mov	sp, r7
 80075f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fc:	4770      	bx	lr
 80075fe:	bf00      	nop
 8007600:	40012c00 	.word	0x40012c00
 8007604:	40013400 	.word	0x40013400
 8007608:	40015000 	.word	0x40015000
 800760c:	40014000 	.word	0x40014000
 8007610:	40014400 	.word	0x40014400
 8007614:	40014800 	.word	0x40014800

08007618 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007618:	b480      	push	{r7}
 800761a:	b087      	sub	sp, #28
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]
 8007620:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	6a1b      	ldr	r3, [r3, #32]
 8007626:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	6a1b      	ldr	r3, [r3, #32]
 800762c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	685b      	ldr	r3, [r3, #4]
 8007638:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	69db      	ldr	r3, [r3, #28]
 800763e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007646:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800764a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	f023 0303 	bic.w	r3, r3, #3
 8007652:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007654:	683b      	ldr	r3, [r7, #0]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	68fa      	ldr	r2, [r7, #12]
 800765a:	4313      	orrs	r3, r2
 800765c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800765e:	697b      	ldr	r3, [r7, #20]
 8007660:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007664:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007666:	683b      	ldr	r3, [r7, #0]
 8007668:	689b      	ldr	r3, [r3, #8]
 800766a:	021b      	lsls	r3, r3, #8
 800766c:	697a      	ldr	r2, [r7, #20]
 800766e:	4313      	orrs	r3, r2
 8007670:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	4a2b      	ldr	r2, [pc, #172]	@ (8007724 <TIM_OC3_SetConfig+0x10c>)
 8007676:	4293      	cmp	r3, r2
 8007678:	d007      	beq.n	800768a <TIM_OC3_SetConfig+0x72>
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	4a2a      	ldr	r2, [pc, #168]	@ (8007728 <TIM_OC3_SetConfig+0x110>)
 800767e:	4293      	cmp	r3, r2
 8007680:	d003      	beq.n	800768a <TIM_OC3_SetConfig+0x72>
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	4a29      	ldr	r2, [pc, #164]	@ (800772c <TIM_OC3_SetConfig+0x114>)
 8007686:	4293      	cmp	r3, r2
 8007688:	d10d      	bne.n	80076a6 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800768a:	697b      	ldr	r3, [r7, #20]
 800768c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007690:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007692:	683b      	ldr	r3, [r7, #0]
 8007694:	68db      	ldr	r3, [r3, #12]
 8007696:	021b      	lsls	r3, r3, #8
 8007698:	697a      	ldr	r2, [r7, #20]
 800769a:	4313      	orrs	r3, r2
 800769c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800769e:	697b      	ldr	r3, [r7, #20]
 80076a0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80076a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	4a1e      	ldr	r2, [pc, #120]	@ (8007724 <TIM_OC3_SetConfig+0x10c>)
 80076aa:	4293      	cmp	r3, r2
 80076ac:	d013      	beq.n	80076d6 <TIM_OC3_SetConfig+0xbe>
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	4a1d      	ldr	r2, [pc, #116]	@ (8007728 <TIM_OC3_SetConfig+0x110>)
 80076b2:	4293      	cmp	r3, r2
 80076b4:	d00f      	beq.n	80076d6 <TIM_OC3_SetConfig+0xbe>
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	4a1d      	ldr	r2, [pc, #116]	@ (8007730 <TIM_OC3_SetConfig+0x118>)
 80076ba:	4293      	cmp	r3, r2
 80076bc:	d00b      	beq.n	80076d6 <TIM_OC3_SetConfig+0xbe>
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	4a1c      	ldr	r2, [pc, #112]	@ (8007734 <TIM_OC3_SetConfig+0x11c>)
 80076c2:	4293      	cmp	r3, r2
 80076c4:	d007      	beq.n	80076d6 <TIM_OC3_SetConfig+0xbe>
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	4a1b      	ldr	r2, [pc, #108]	@ (8007738 <TIM_OC3_SetConfig+0x120>)
 80076ca:	4293      	cmp	r3, r2
 80076cc:	d003      	beq.n	80076d6 <TIM_OC3_SetConfig+0xbe>
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	4a16      	ldr	r2, [pc, #88]	@ (800772c <TIM_OC3_SetConfig+0x114>)
 80076d2:	4293      	cmp	r3, r2
 80076d4:	d113      	bne.n	80076fe <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80076d6:	693b      	ldr	r3, [r7, #16]
 80076d8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80076dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80076de:	693b      	ldr	r3, [r7, #16]
 80076e0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80076e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80076e6:	683b      	ldr	r3, [r7, #0]
 80076e8:	695b      	ldr	r3, [r3, #20]
 80076ea:	011b      	lsls	r3, r3, #4
 80076ec:	693a      	ldr	r2, [r7, #16]
 80076ee:	4313      	orrs	r3, r2
 80076f0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80076f2:	683b      	ldr	r3, [r7, #0]
 80076f4:	699b      	ldr	r3, [r3, #24]
 80076f6:	011b      	lsls	r3, r3, #4
 80076f8:	693a      	ldr	r2, [r7, #16]
 80076fa:	4313      	orrs	r3, r2
 80076fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	693a      	ldr	r2, [r7, #16]
 8007702:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	68fa      	ldr	r2, [r7, #12]
 8007708:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800770a:	683b      	ldr	r3, [r7, #0]
 800770c:	685a      	ldr	r2, [r3, #4]
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	697a      	ldr	r2, [r7, #20]
 8007716:	621a      	str	r2, [r3, #32]
}
 8007718:	bf00      	nop
 800771a:	371c      	adds	r7, #28
 800771c:	46bd      	mov	sp, r7
 800771e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007722:	4770      	bx	lr
 8007724:	40012c00 	.word	0x40012c00
 8007728:	40013400 	.word	0x40013400
 800772c:	40015000 	.word	0x40015000
 8007730:	40014000 	.word	0x40014000
 8007734:	40014400 	.word	0x40014400
 8007738:	40014800 	.word	0x40014800

0800773c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800773c:	b480      	push	{r7}
 800773e:	b087      	sub	sp, #28
 8007740:	af00      	add	r7, sp, #0
 8007742:	6078      	str	r0, [r7, #4]
 8007744:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	6a1b      	ldr	r3, [r3, #32]
 800774a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	6a1b      	ldr	r3, [r3, #32]
 8007750:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	685b      	ldr	r3, [r3, #4]
 800775c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	69db      	ldr	r3, [r3, #28]
 8007762:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800776a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800776e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007776:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007778:	683b      	ldr	r3, [r7, #0]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	021b      	lsls	r3, r3, #8
 800777e:	68fa      	ldr	r2, [r7, #12]
 8007780:	4313      	orrs	r3, r2
 8007782:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007784:	697b      	ldr	r3, [r7, #20]
 8007786:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800778a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800778c:	683b      	ldr	r3, [r7, #0]
 800778e:	689b      	ldr	r3, [r3, #8]
 8007790:	031b      	lsls	r3, r3, #12
 8007792:	697a      	ldr	r2, [r7, #20]
 8007794:	4313      	orrs	r3, r2
 8007796:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	4a2c      	ldr	r2, [pc, #176]	@ (800784c <TIM_OC4_SetConfig+0x110>)
 800779c:	4293      	cmp	r3, r2
 800779e:	d007      	beq.n	80077b0 <TIM_OC4_SetConfig+0x74>
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	4a2b      	ldr	r2, [pc, #172]	@ (8007850 <TIM_OC4_SetConfig+0x114>)
 80077a4:	4293      	cmp	r3, r2
 80077a6:	d003      	beq.n	80077b0 <TIM_OC4_SetConfig+0x74>
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	4a2a      	ldr	r2, [pc, #168]	@ (8007854 <TIM_OC4_SetConfig+0x118>)
 80077ac:	4293      	cmp	r3, r2
 80077ae:	d10d      	bne.n	80077cc <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80077b0:	697b      	ldr	r3, [r7, #20]
 80077b2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80077b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80077b8:	683b      	ldr	r3, [r7, #0]
 80077ba:	68db      	ldr	r3, [r3, #12]
 80077bc:	031b      	lsls	r3, r3, #12
 80077be:	697a      	ldr	r2, [r7, #20]
 80077c0:	4313      	orrs	r3, r2
 80077c2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80077c4:	697b      	ldr	r3, [r7, #20]
 80077c6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80077ca:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	4a1f      	ldr	r2, [pc, #124]	@ (800784c <TIM_OC4_SetConfig+0x110>)
 80077d0:	4293      	cmp	r3, r2
 80077d2:	d013      	beq.n	80077fc <TIM_OC4_SetConfig+0xc0>
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	4a1e      	ldr	r2, [pc, #120]	@ (8007850 <TIM_OC4_SetConfig+0x114>)
 80077d8:	4293      	cmp	r3, r2
 80077da:	d00f      	beq.n	80077fc <TIM_OC4_SetConfig+0xc0>
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	4a1e      	ldr	r2, [pc, #120]	@ (8007858 <TIM_OC4_SetConfig+0x11c>)
 80077e0:	4293      	cmp	r3, r2
 80077e2:	d00b      	beq.n	80077fc <TIM_OC4_SetConfig+0xc0>
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	4a1d      	ldr	r2, [pc, #116]	@ (800785c <TIM_OC4_SetConfig+0x120>)
 80077e8:	4293      	cmp	r3, r2
 80077ea:	d007      	beq.n	80077fc <TIM_OC4_SetConfig+0xc0>
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	4a1c      	ldr	r2, [pc, #112]	@ (8007860 <TIM_OC4_SetConfig+0x124>)
 80077f0:	4293      	cmp	r3, r2
 80077f2:	d003      	beq.n	80077fc <TIM_OC4_SetConfig+0xc0>
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	4a17      	ldr	r2, [pc, #92]	@ (8007854 <TIM_OC4_SetConfig+0x118>)
 80077f8:	4293      	cmp	r3, r2
 80077fa:	d113      	bne.n	8007824 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80077fc:	693b      	ldr	r3, [r7, #16]
 80077fe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007802:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8007804:	693b      	ldr	r3, [r7, #16]
 8007806:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800780a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800780c:	683b      	ldr	r3, [r7, #0]
 800780e:	695b      	ldr	r3, [r3, #20]
 8007810:	019b      	lsls	r3, r3, #6
 8007812:	693a      	ldr	r2, [r7, #16]
 8007814:	4313      	orrs	r3, r2
 8007816:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8007818:	683b      	ldr	r3, [r7, #0]
 800781a:	699b      	ldr	r3, [r3, #24]
 800781c:	019b      	lsls	r3, r3, #6
 800781e:	693a      	ldr	r2, [r7, #16]
 8007820:	4313      	orrs	r3, r2
 8007822:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	693a      	ldr	r2, [r7, #16]
 8007828:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	68fa      	ldr	r2, [r7, #12]
 800782e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007830:	683b      	ldr	r3, [r7, #0]
 8007832:	685a      	ldr	r2, [r3, #4]
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	697a      	ldr	r2, [r7, #20]
 800783c:	621a      	str	r2, [r3, #32]
}
 800783e:	bf00      	nop
 8007840:	371c      	adds	r7, #28
 8007842:	46bd      	mov	sp, r7
 8007844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007848:	4770      	bx	lr
 800784a:	bf00      	nop
 800784c:	40012c00 	.word	0x40012c00
 8007850:	40013400 	.word	0x40013400
 8007854:	40015000 	.word	0x40015000
 8007858:	40014000 	.word	0x40014000
 800785c:	40014400 	.word	0x40014400
 8007860:	40014800 	.word	0x40014800

08007864 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007864:	b480      	push	{r7}
 8007866:	b087      	sub	sp, #28
 8007868:	af00      	add	r7, sp, #0
 800786a:	6078      	str	r0, [r7, #4]
 800786c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	6a1b      	ldr	r3, [r3, #32]
 8007872:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	6a1b      	ldr	r3, [r3, #32]
 8007878:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	685b      	ldr	r3, [r3, #4]
 8007884:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800788a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007892:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007896:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007898:	683b      	ldr	r3, [r7, #0]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	68fa      	ldr	r2, [r7, #12]
 800789e:	4313      	orrs	r3, r2
 80078a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80078a2:	693b      	ldr	r3, [r7, #16]
 80078a4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80078a8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80078aa:	683b      	ldr	r3, [r7, #0]
 80078ac:	689b      	ldr	r3, [r3, #8]
 80078ae:	041b      	lsls	r3, r3, #16
 80078b0:	693a      	ldr	r2, [r7, #16]
 80078b2:	4313      	orrs	r3, r2
 80078b4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	4a19      	ldr	r2, [pc, #100]	@ (8007920 <TIM_OC5_SetConfig+0xbc>)
 80078ba:	4293      	cmp	r3, r2
 80078bc:	d013      	beq.n	80078e6 <TIM_OC5_SetConfig+0x82>
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	4a18      	ldr	r2, [pc, #96]	@ (8007924 <TIM_OC5_SetConfig+0xc0>)
 80078c2:	4293      	cmp	r3, r2
 80078c4:	d00f      	beq.n	80078e6 <TIM_OC5_SetConfig+0x82>
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	4a17      	ldr	r2, [pc, #92]	@ (8007928 <TIM_OC5_SetConfig+0xc4>)
 80078ca:	4293      	cmp	r3, r2
 80078cc:	d00b      	beq.n	80078e6 <TIM_OC5_SetConfig+0x82>
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	4a16      	ldr	r2, [pc, #88]	@ (800792c <TIM_OC5_SetConfig+0xc8>)
 80078d2:	4293      	cmp	r3, r2
 80078d4:	d007      	beq.n	80078e6 <TIM_OC5_SetConfig+0x82>
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	4a15      	ldr	r2, [pc, #84]	@ (8007930 <TIM_OC5_SetConfig+0xcc>)
 80078da:	4293      	cmp	r3, r2
 80078dc:	d003      	beq.n	80078e6 <TIM_OC5_SetConfig+0x82>
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	4a14      	ldr	r2, [pc, #80]	@ (8007934 <TIM_OC5_SetConfig+0xd0>)
 80078e2:	4293      	cmp	r3, r2
 80078e4:	d109      	bne.n	80078fa <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80078e6:	697b      	ldr	r3, [r7, #20]
 80078e8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80078ec:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80078ee:	683b      	ldr	r3, [r7, #0]
 80078f0:	695b      	ldr	r3, [r3, #20]
 80078f2:	021b      	lsls	r3, r3, #8
 80078f4:	697a      	ldr	r2, [r7, #20]
 80078f6:	4313      	orrs	r3, r2
 80078f8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	697a      	ldr	r2, [r7, #20]
 80078fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	68fa      	ldr	r2, [r7, #12]
 8007904:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007906:	683b      	ldr	r3, [r7, #0]
 8007908:	685a      	ldr	r2, [r3, #4]
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	693a      	ldr	r2, [r7, #16]
 8007912:	621a      	str	r2, [r3, #32]
}
 8007914:	bf00      	nop
 8007916:	371c      	adds	r7, #28
 8007918:	46bd      	mov	sp, r7
 800791a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791e:	4770      	bx	lr
 8007920:	40012c00 	.word	0x40012c00
 8007924:	40013400 	.word	0x40013400
 8007928:	40014000 	.word	0x40014000
 800792c:	40014400 	.word	0x40014400
 8007930:	40014800 	.word	0x40014800
 8007934:	40015000 	.word	0x40015000

08007938 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007938:	b480      	push	{r7}
 800793a:	b087      	sub	sp, #28
 800793c:	af00      	add	r7, sp, #0
 800793e:	6078      	str	r0, [r7, #4]
 8007940:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	6a1b      	ldr	r3, [r3, #32]
 8007946:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	6a1b      	ldr	r3, [r3, #32]
 800794c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	685b      	ldr	r3, [r3, #4]
 8007958:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800795e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007966:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800796a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800796c:	683b      	ldr	r3, [r7, #0]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	021b      	lsls	r3, r3, #8
 8007972:	68fa      	ldr	r2, [r7, #12]
 8007974:	4313      	orrs	r3, r2
 8007976:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007978:	693b      	ldr	r3, [r7, #16]
 800797a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800797e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007980:	683b      	ldr	r3, [r7, #0]
 8007982:	689b      	ldr	r3, [r3, #8]
 8007984:	051b      	lsls	r3, r3, #20
 8007986:	693a      	ldr	r2, [r7, #16]
 8007988:	4313      	orrs	r3, r2
 800798a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	4a1a      	ldr	r2, [pc, #104]	@ (80079f8 <TIM_OC6_SetConfig+0xc0>)
 8007990:	4293      	cmp	r3, r2
 8007992:	d013      	beq.n	80079bc <TIM_OC6_SetConfig+0x84>
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	4a19      	ldr	r2, [pc, #100]	@ (80079fc <TIM_OC6_SetConfig+0xc4>)
 8007998:	4293      	cmp	r3, r2
 800799a:	d00f      	beq.n	80079bc <TIM_OC6_SetConfig+0x84>
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	4a18      	ldr	r2, [pc, #96]	@ (8007a00 <TIM_OC6_SetConfig+0xc8>)
 80079a0:	4293      	cmp	r3, r2
 80079a2:	d00b      	beq.n	80079bc <TIM_OC6_SetConfig+0x84>
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	4a17      	ldr	r2, [pc, #92]	@ (8007a04 <TIM_OC6_SetConfig+0xcc>)
 80079a8:	4293      	cmp	r3, r2
 80079aa:	d007      	beq.n	80079bc <TIM_OC6_SetConfig+0x84>
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	4a16      	ldr	r2, [pc, #88]	@ (8007a08 <TIM_OC6_SetConfig+0xd0>)
 80079b0:	4293      	cmp	r3, r2
 80079b2:	d003      	beq.n	80079bc <TIM_OC6_SetConfig+0x84>
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	4a15      	ldr	r2, [pc, #84]	@ (8007a0c <TIM_OC6_SetConfig+0xd4>)
 80079b8:	4293      	cmp	r3, r2
 80079ba:	d109      	bne.n	80079d0 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80079bc:	697b      	ldr	r3, [r7, #20]
 80079be:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80079c2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80079c4:	683b      	ldr	r3, [r7, #0]
 80079c6:	695b      	ldr	r3, [r3, #20]
 80079c8:	029b      	lsls	r3, r3, #10
 80079ca:	697a      	ldr	r2, [r7, #20]
 80079cc:	4313      	orrs	r3, r2
 80079ce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	697a      	ldr	r2, [r7, #20]
 80079d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	68fa      	ldr	r2, [r7, #12]
 80079da:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80079dc:	683b      	ldr	r3, [r7, #0]
 80079de:	685a      	ldr	r2, [r3, #4]
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	693a      	ldr	r2, [r7, #16]
 80079e8:	621a      	str	r2, [r3, #32]
}
 80079ea:	bf00      	nop
 80079ec:	371c      	adds	r7, #28
 80079ee:	46bd      	mov	sp, r7
 80079f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f4:	4770      	bx	lr
 80079f6:	bf00      	nop
 80079f8:	40012c00 	.word	0x40012c00
 80079fc:	40013400 	.word	0x40013400
 8007a00:	40014000 	.word	0x40014000
 8007a04:	40014400 	.word	0x40014400
 8007a08:	40014800 	.word	0x40014800
 8007a0c:	40015000 	.word	0x40015000

08007a10 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007a10:	b480      	push	{r7}
 8007a12:	b087      	sub	sp, #28
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	60f8      	str	r0, [r7, #12]
 8007a18:	60b9      	str	r1, [r7, #8]
 8007a1a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	6a1b      	ldr	r3, [r3, #32]
 8007a20:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	6a1b      	ldr	r3, [r3, #32]
 8007a26:	f023 0201 	bic.w	r2, r3, #1
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	699b      	ldr	r3, [r3, #24]
 8007a32:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007a34:	693b      	ldr	r3, [r7, #16]
 8007a36:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007a3a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	011b      	lsls	r3, r3, #4
 8007a40:	693a      	ldr	r2, [r7, #16]
 8007a42:	4313      	orrs	r3, r2
 8007a44:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007a46:	697b      	ldr	r3, [r7, #20]
 8007a48:	f023 030a 	bic.w	r3, r3, #10
 8007a4c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007a4e:	697a      	ldr	r2, [r7, #20]
 8007a50:	68bb      	ldr	r3, [r7, #8]
 8007a52:	4313      	orrs	r3, r2
 8007a54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	693a      	ldr	r2, [r7, #16]
 8007a5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	697a      	ldr	r2, [r7, #20]
 8007a60:	621a      	str	r2, [r3, #32]
}
 8007a62:	bf00      	nop
 8007a64:	371c      	adds	r7, #28
 8007a66:	46bd      	mov	sp, r7
 8007a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6c:	4770      	bx	lr

08007a6e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007a6e:	b480      	push	{r7}
 8007a70:	b087      	sub	sp, #28
 8007a72:	af00      	add	r7, sp, #0
 8007a74:	60f8      	str	r0, [r7, #12]
 8007a76:	60b9      	str	r1, [r7, #8]
 8007a78:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	6a1b      	ldr	r3, [r3, #32]
 8007a7e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	6a1b      	ldr	r3, [r3, #32]
 8007a84:	f023 0210 	bic.w	r2, r3, #16
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	699b      	ldr	r3, [r3, #24]
 8007a90:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007a92:	693b      	ldr	r3, [r7, #16]
 8007a94:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007a98:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	031b      	lsls	r3, r3, #12
 8007a9e:	693a      	ldr	r2, [r7, #16]
 8007aa0:	4313      	orrs	r3, r2
 8007aa2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007aa4:	697b      	ldr	r3, [r7, #20]
 8007aa6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007aaa:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007aac:	68bb      	ldr	r3, [r7, #8]
 8007aae:	011b      	lsls	r3, r3, #4
 8007ab0:	697a      	ldr	r2, [r7, #20]
 8007ab2:	4313      	orrs	r3, r2
 8007ab4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	693a      	ldr	r2, [r7, #16]
 8007aba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	697a      	ldr	r2, [r7, #20]
 8007ac0:	621a      	str	r2, [r3, #32]
}
 8007ac2:	bf00      	nop
 8007ac4:	371c      	adds	r7, #28
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007acc:	4770      	bx	lr

08007ace <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007ace:	b480      	push	{r7}
 8007ad0:	b085      	sub	sp, #20
 8007ad2:	af00      	add	r7, sp, #0
 8007ad4:	6078      	str	r0, [r7, #4]
 8007ad6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	689b      	ldr	r3, [r3, #8]
 8007adc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8007ae4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007ae8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007aea:	683a      	ldr	r2, [r7, #0]
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	4313      	orrs	r3, r2
 8007af0:	f043 0307 	orr.w	r3, r3, #7
 8007af4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	68fa      	ldr	r2, [r7, #12]
 8007afa:	609a      	str	r2, [r3, #8]
}
 8007afc:	bf00      	nop
 8007afe:	3714      	adds	r7, #20
 8007b00:	46bd      	mov	sp, r7
 8007b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b06:	4770      	bx	lr

08007b08 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007b08:	b480      	push	{r7}
 8007b0a:	b087      	sub	sp, #28
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	60f8      	str	r0, [r7, #12]
 8007b10:	60b9      	str	r1, [r7, #8]
 8007b12:	607a      	str	r2, [r7, #4]
 8007b14:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	689b      	ldr	r3, [r3, #8]
 8007b1a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007b1c:	697b      	ldr	r3, [r7, #20]
 8007b1e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007b22:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007b24:	683b      	ldr	r3, [r7, #0]
 8007b26:	021a      	lsls	r2, r3, #8
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	431a      	orrs	r2, r3
 8007b2c:	68bb      	ldr	r3, [r7, #8]
 8007b2e:	4313      	orrs	r3, r2
 8007b30:	697a      	ldr	r2, [r7, #20]
 8007b32:	4313      	orrs	r3, r2
 8007b34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	697a      	ldr	r2, [r7, #20]
 8007b3a:	609a      	str	r2, [r3, #8]
}
 8007b3c:	bf00      	nop
 8007b3e:	371c      	adds	r7, #28
 8007b40:	46bd      	mov	sp, r7
 8007b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b46:	4770      	bx	lr

08007b48 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007b48:	b480      	push	{r7}
 8007b4a:	b087      	sub	sp, #28
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	60f8      	str	r0, [r7, #12]
 8007b50:	60b9      	str	r1, [r7, #8]
 8007b52:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007b54:	68bb      	ldr	r3, [r7, #8]
 8007b56:	f003 031f 	and.w	r3, r3, #31
 8007b5a:	2201      	movs	r2, #1
 8007b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8007b60:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	6a1a      	ldr	r2, [r3, #32]
 8007b66:	697b      	ldr	r3, [r7, #20]
 8007b68:	43db      	mvns	r3, r3
 8007b6a:	401a      	ands	r2, r3
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	6a1a      	ldr	r2, [r3, #32]
 8007b74:	68bb      	ldr	r3, [r7, #8]
 8007b76:	f003 031f 	and.w	r3, r3, #31
 8007b7a:	6879      	ldr	r1, [r7, #4]
 8007b7c:	fa01 f303 	lsl.w	r3, r1, r3
 8007b80:	431a      	orrs	r2, r3
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	621a      	str	r2, [r3, #32]
}
 8007b86:	bf00      	nop
 8007b88:	371c      	adds	r7, #28
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b90:	4770      	bx	lr
	...

08007b94 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8007b94:	b480      	push	{r7}
 8007b96:	b083      	sub	sp, #12
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	4a26      	ldr	r2, [pc, #152]	@ (8007c38 <TIM_ResetCallback+0xa4>)
 8007ba0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	4a25      	ldr	r2, [pc, #148]	@ (8007c3c <TIM_ResetCallback+0xa8>)
 8007ba8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	4a24      	ldr	r2, [pc, #144]	@ (8007c40 <TIM_ResetCallback+0xac>)
 8007bb0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	4a23      	ldr	r2, [pc, #140]	@ (8007c44 <TIM_ResetCallback+0xb0>)
 8007bb8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	4a22      	ldr	r2, [pc, #136]	@ (8007c48 <TIM_ResetCallback+0xb4>)
 8007bc0:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	4a21      	ldr	r2, [pc, #132]	@ (8007c4c <TIM_ResetCallback+0xb8>)
 8007bc8:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	4a20      	ldr	r2, [pc, #128]	@ (8007c50 <TIM_ResetCallback+0xbc>)
 8007bd0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	4a1f      	ldr	r2, [pc, #124]	@ (8007c54 <TIM_ResetCallback+0xc0>)
 8007bd8:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	4a1e      	ldr	r2, [pc, #120]	@ (8007c58 <TIM_ResetCallback+0xc4>)
 8007be0:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	4a1d      	ldr	r2, [pc, #116]	@ (8007c5c <TIM_ResetCallback+0xc8>)
 8007be8:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	4a1c      	ldr	r2, [pc, #112]	@ (8007c60 <TIM_ResetCallback+0xcc>)
 8007bf0:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	4a1b      	ldr	r2, [pc, #108]	@ (8007c64 <TIM_ResetCallback+0xd0>)
 8007bf8:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	4a1a      	ldr	r2, [pc, #104]	@ (8007c68 <TIM_ResetCallback+0xd4>)
 8007c00:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	4a19      	ldr	r2, [pc, #100]	@ (8007c6c <TIM_ResetCallback+0xd8>)
 8007c08:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  htim->EncoderIndexCallback              = HAL_TIMEx_EncoderIndexCallback;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	4a18      	ldr	r2, [pc, #96]	@ (8007c70 <TIM_ResetCallback+0xdc>)
 8007c10:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  htim->DirectionChangeCallback           = HAL_TIMEx_DirectionChangeCallback;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	4a17      	ldr	r2, [pc, #92]	@ (8007c74 <TIM_ResetCallback+0xe0>)
 8007c18:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  htim->IndexErrorCallback                = HAL_TIMEx_IndexErrorCallback;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	4a16      	ldr	r2, [pc, #88]	@ (8007c78 <TIM_ResetCallback+0xe4>)
 8007c20:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  htim->TransitionErrorCallback           = HAL_TIMEx_TransitionErrorCallback;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	4a15      	ldr	r2, [pc, #84]	@ (8007c7c <TIM_ResetCallback+0xe8>)
 8007c28:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 8007c2c:	bf00      	nop
 8007c2e:	370c      	adds	r7, #12
 8007c30:	46bd      	mov	sp, r7
 8007c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c36:	4770      	bx	lr
 8007c38:	08006ecd 	.word	0x08006ecd
 8007c3c:	08006ee1 	.word	0x08006ee1
 8007c40:	08006f59 	.word	0x08006f59
 8007c44:	08006f6d 	.word	0x08006f6d
 8007c48:	08006f09 	.word	0x08006f09
 8007c4c:	08006f1d 	.word	0x08006f1d
 8007c50:	08006ef5 	.word	0x08006ef5
 8007c54:	08006f31 	.word	0x08006f31
 8007c58:	08006f45 	.word	0x08006f45
 8007c5c:	08006f81 	.word	0x08006f81
 8007c60:	08007ed5 	.word	0x08007ed5
 8007c64:	08007ee9 	.word	0x08007ee9
 8007c68:	08007efd 	.word	0x08007efd
 8007c6c:	08007f11 	.word	0x08007f11
 8007c70:	08007f25 	.word	0x08007f25
 8007c74:	08007f39 	.word	0x08007f39
 8007c78:	08007f4d 	.word	0x08007f4d
 8007c7c:	08007f61 	.word	0x08007f61

08007c80 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007c80:	b480      	push	{r7}
 8007c82:	b085      	sub	sp, #20
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	6078      	str	r0, [r7, #4]
 8007c88:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007c90:	2b01      	cmp	r3, #1
 8007c92:	d101      	bne.n	8007c98 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007c94:	2302      	movs	r3, #2
 8007c96:	e074      	b.n	8007d82 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	2201      	movs	r2, #1
 8007c9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	2202      	movs	r2, #2
 8007ca4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	685b      	ldr	r3, [r3, #4]
 8007cae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	689b      	ldr	r3, [r3, #8]
 8007cb6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	4a34      	ldr	r2, [pc, #208]	@ (8007d90 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007cbe:	4293      	cmp	r3, r2
 8007cc0:	d009      	beq.n	8007cd6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	4a33      	ldr	r2, [pc, #204]	@ (8007d94 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007cc8:	4293      	cmp	r3, r2
 8007cca:	d004      	beq.n	8007cd6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	4a31      	ldr	r2, [pc, #196]	@ (8007d98 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007cd2:	4293      	cmp	r3, r2
 8007cd4:	d108      	bne.n	8007ce8 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8007cdc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007cde:	683b      	ldr	r3, [r7, #0]
 8007ce0:	685b      	ldr	r3, [r3, #4]
 8007ce2:	68fa      	ldr	r2, [r7, #12]
 8007ce4:	4313      	orrs	r3, r2
 8007ce6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8007cee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007cf2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007cf4:	683b      	ldr	r3, [r7, #0]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	68fa      	ldr	r2, [r7, #12]
 8007cfa:	4313      	orrs	r3, r2
 8007cfc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	68fa      	ldr	r2, [r7, #12]
 8007d04:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	4a21      	ldr	r2, [pc, #132]	@ (8007d90 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007d0c:	4293      	cmp	r3, r2
 8007d0e:	d022      	beq.n	8007d56 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007d18:	d01d      	beq.n	8007d56 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	4a1f      	ldr	r2, [pc, #124]	@ (8007d9c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8007d20:	4293      	cmp	r3, r2
 8007d22:	d018      	beq.n	8007d56 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	4a1d      	ldr	r2, [pc, #116]	@ (8007da0 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8007d2a:	4293      	cmp	r3, r2
 8007d2c:	d013      	beq.n	8007d56 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	4a1c      	ldr	r2, [pc, #112]	@ (8007da4 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8007d34:	4293      	cmp	r3, r2
 8007d36:	d00e      	beq.n	8007d56 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	4a15      	ldr	r2, [pc, #84]	@ (8007d94 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007d3e:	4293      	cmp	r3, r2
 8007d40:	d009      	beq.n	8007d56 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	4a18      	ldr	r2, [pc, #96]	@ (8007da8 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8007d48:	4293      	cmp	r3, r2
 8007d4a:	d004      	beq.n	8007d56 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	4a11      	ldr	r2, [pc, #68]	@ (8007d98 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007d52:	4293      	cmp	r3, r2
 8007d54:	d10c      	bne.n	8007d70 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007d56:	68bb      	ldr	r3, [r7, #8]
 8007d58:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007d5c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007d5e:	683b      	ldr	r3, [r7, #0]
 8007d60:	689b      	ldr	r3, [r3, #8]
 8007d62:	68ba      	ldr	r2, [r7, #8]
 8007d64:	4313      	orrs	r3, r2
 8007d66:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	68ba      	ldr	r2, [r7, #8]
 8007d6e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	2201      	movs	r2, #1
 8007d74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	2200      	movs	r2, #0
 8007d7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007d80:	2300      	movs	r3, #0
}
 8007d82:	4618      	mov	r0, r3
 8007d84:	3714      	adds	r7, #20
 8007d86:	46bd      	mov	sp, r7
 8007d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8c:	4770      	bx	lr
 8007d8e:	bf00      	nop
 8007d90:	40012c00 	.word	0x40012c00
 8007d94:	40013400 	.word	0x40013400
 8007d98:	40015000 	.word	0x40015000
 8007d9c:	40000400 	.word	0x40000400
 8007da0:	40000800 	.word	0x40000800
 8007da4:	40000c00 	.word	0x40000c00
 8007da8:	40014000 	.word	0x40014000

08007dac <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007dac:	b480      	push	{r7}
 8007dae:	b085      	sub	sp, #20
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	6078      	str	r0, [r7, #4]
 8007db4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007db6:	2300      	movs	r3, #0
 8007db8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007dc0:	2b01      	cmp	r3, #1
 8007dc2:	d101      	bne.n	8007dc8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007dc4:	2302      	movs	r3, #2
 8007dc6:	e078      	b.n	8007eba <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	2201      	movs	r2, #1
 8007dcc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8007dd6:	683b      	ldr	r3, [r7, #0]
 8007dd8:	68db      	ldr	r3, [r3, #12]
 8007dda:	4313      	orrs	r3, r2
 8007ddc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007de4:	683b      	ldr	r3, [r7, #0]
 8007de6:	689b      	ldr	r3, [r3, #8]
 8007de8:	4313      	orrs	r3, r2
 8007dea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8007df2:	683b      	ldr	r3, [r7, #0]
 8007df4:	685b      	ldr	r3, [r3, #4]
 8007df6:	4313      	orrs	r3, r2
 8007df8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8007e00:	683b      	ldr	r3, [r7, #0]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	4313      	orrs	r3, r2
 8007e06:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007e0e:	683b      	ldr	r3, [r7, #0]
 8007e10:	691b      	ldr	r3, [r3, #16]
 8007e12:	4313      	orrs	r3, r2
 8007e14:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8007e1c:	683b      	ldr	r3, [r7, #0]
 8007e1e:	695b      	ldr	r3, [r3, #20]
 8007e20:	4313      	orrs	r3, r2
 8007e22:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8007e2a:	683b      	ldr	r3, [r7, #0]
 8007e2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e2e:	4313      	orrs	r3, r2
 8007e30:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8007e38:	683b      	ldr	r3, [r7, #0]
 8007e3a:	699b      	ldr	r3, [r3, #24]
 8007e3c:	041b      	lsls	r3, r3, #16
 8007e3e:	4313      	orrs	r3, r2
 8007e40:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8007e48:	683b      	ldr	r3, [r7, #0]
 8007e4a:	69db      	ldr	r3, [r3, #28]
 8007e4c:	4313      	orrs	r3, r2
 8007e4e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	4a1c      	ldr	r2, [pc, #112]	@ (8007ec8 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8007e56:	4293      	cmp	r3, r2
 8007e58:	d009      	beq.n	8007e6e <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	4a1b      	ldr	r2, [pc, #108]	@ (8007ecc <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8007e60:	4293      	cmp	r3, r2
 8007e62:	d004      	beq.n	8007e6e <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	4a19      	ldr	r2, [pc, #100]	@ (8007ed0 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8007e6a:	4293      	cmp	r3, r2
 8007e6c:	d11c      	bne.n	8007ea8 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8007e74:	683b      	ldr	r3, [r7, #0]
 8007e76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e78:	051b      	lsls	r3, r3, #20
 8007e7a:	4313      	orrs	r3, r2
 8007e7c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8007e84:	683b      	ldr	r3, [r7, #0]
 8007e86:	6a1b      	ldr	r3, [r3, #32]
 8007e88:	4313      	orrs	r3, r2
 8007e8a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8007e92:	683b      	ldr	r3, [r7, #0]
 8007e94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e96:	4313      	orrs	r3, r2
 8007e98:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8007ea0:	683b      	ldr	r3, [r7, #0]
 8007ea2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ea4:	4313      	orrs	r3, r2
 8007ea6:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	68fa      	ldr	r2, [r7, #12]
 8007eae:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007eb8:	2300      	movs	r3, #0
}
 8007eba:	4618      	mov	r0, r3
 8007ebc:	3714      	adds	r7, #20
 8007ebe:	46bd      	mov	sp, r7
 8007ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec4:	4770      	bx	lr
 8007ec6:	bf00      	nop
 8007ec8:	40012c00 	.word	0x40012c00
 8007ecc:	40013400 	.word	0x40013400
 8007ed0:	40015000 	.word	0x40015000

08007ed4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007ed4:	b480      	push	{r7}
 8007ed6:	b083      	sub	sp, #12
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007edc:	bf00      	nop
 8007ede:	370c      	adds	r7, #12
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee6:	4770      	bx	lr

08007ee8 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007ee8:	b480      	push	{r7}
 8007eea:	b083      	sub	sp, #12
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 8007ef0:	bf00      	nop
 8007ef2:	370c      	adds	r7, #12
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efa:	4770      	bx	lr

08007efc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007efc:	b480      	push	{r7}
 8007efe:	b083      	sub	sp, #12
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007f04:	bf00      	nop
 8007f06:	370c      	adds	r7, #12
 8007f08:	46bd      	mov	sp, r7
 8007f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0e:	4770      	bx	lr

08007f10 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007f10:	b480      	push	{r7}
 8007f12:	b083      	sub	sp, #12
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007f18:	bf00      	nop
 8007f1a:	370c      	adds	r7, #12
 8007f1c:	46bd      	mov	sp, r7
 8007f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f22:	4770      	bx	lr

08007f24 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8007f24:	b480      	push	{r7}
 8007f26:	b083      	sub	sp, #12
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8007f2c:	bf00      	nop
 8007f2e:	370c      	adds	r7, #12
 8007f30:	46bd      	mov	sp, r7
 8007f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f36:	4770      	bx	lr

08007f38 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8007f38:	b480      	push	{r7}
 8007f3a:	b083      	sub	sp, #12
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8007f40:	bf00      	nop
 8007f42:	370c      	adds	r7, #12
 8007f44:	46bd      	mov	sp, r7
 8007f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4a:	4770      	bx	lr

08007f4c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8007f4c:	b480      	push	{r7}
 8007f4e:	b083      	sub	sp, #12
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8007f54:	bf00      	nop
 8007f56:	370c      	adds	r7, #12
 8007f58:	46bd      	mov	sp, r7
 8007f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f5e:	4770      	bx	lr

08007f60 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8007f60:	b480      	push	{r7}
 8007f62:	b083      	sub	sp, #12
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8007f68:	bf00      	nop
 8007f6a:	370c      	adds	r7, #12
 8007f6c:	46bd      	mov	sp, r7
 8007f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f72:	4770      	bx	lr

08007f74 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007f74:	b580      	push	{r7, lr}
 8007f76:	b082      	sub	sp, #8
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d101      	bne.n	8007f86 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007f82:	2301      	movs	r3, #1
 8007f84:	e050      	b.n	8008028 <HAL_UART_Init+0xb4>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d114      	bne.n	8007fba <HAL_UART_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	2200      	movs	r2, #0
 8007f94:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 8007f98:	6878      	ldr	r0, [r7, #4]
 8007f9a:	f000 fe37 	bl	8008c0c <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d103      	bne.n	8007fb0 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	4a21      	ldr	r2, [pc, #132]	@ (8008030 <HAL_UART_Init+0xbc>)
 8007fac:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8007fb6:	6878      	ldr	r0, [r7, #4]
 8007fb8:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	2224      	movs	r2, #36	@ 0x24
 8007fbe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	681a      	ldr	r2, [r3, #0]
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	f022 0201 	bic.w	r2, r2, #1
 8007fd0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d002      	beq.n	8007fe0 <HAL_UART_Init+0x6c>
  {
    UART_AdvFeatureConfig(huart);
 8007fda:	6878      	ldr	r0, [r7, #4]
 8007fdc:	f001 f964 	bl	80092a8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007fe0:	6878      	ldr	r0, [r7, #4]
 8007fe2:	f000 fe65 	bl	8008cb0 <UART_SetConfig>
 8007fe6:	4603      	mov	r3, r0
 8007fe8:	2b01      	cmp	r3, #1
 8007fea:	d101      	bne.n	8007ff0 <HAL_UART_Init+0x7c>
  {
    return HAL_ERROR;
 8007fec:	2301      	movs	r3, #1
 8007fee:	e01b      	b.n	8008028 <HAL_UART_Init+0xb4>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	685a      	ldr	r2, [r3, #4]
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007ffe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	689a      	ldr	r2, [r3, #8]
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800800e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	681a      	ldr	r2, [r3, #0]
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	f042 0201 	orr.w	r2, r2, #1
 800801e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008020:	6878      	ldr	r0, [r7, #4]
 8008022:	f001 f9e3 	bl	80093ec <UART_CheckIdleState>
 8008026:	4603      	mov	r3, r0
}
 8008028:	4618      	mov	r0, r3
 800802a:	3708      	adds	r7, #8
 800802c:	46bd      	mov	sp, r7
 800802e:	bd80      	pop	{r7, pc}
 8008030:	08002661 	.word	0x08002661

08008034 <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 8008034:	b480      	push	{r7}
 8008036:	b087      	sub	sp, #28
 8008038:	af00      	add	r7, sp, #0
 800803a:	60f8      	str	r0, [r7, #12]
 800803c:	460b      	mov	r3, r1
 800803e:	607a      	str	r2, [r7, #4]
 8008040:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8008042:	2300      	movs	r3, #0
 8008044:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	2b00      	cmp	r3, #0
 800804a:	d109      	bne.n	8008060 <HAL_UART_RegisterCallback+0x2c>
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008052:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    return HAL_ERROR;
 800805c:	2301      	movs	r3, #1
 800805e:	e09c      	b.n	800819a <HAL_UART_RegisterCallback+0x166>
  }

  if (huart->gState == HAL_UART_STATE_READY)
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008066:	2b20      	cmp	r3, #32
 8008068:	d16c      	bne.n	8008144 <HAL_UART_RegisterCallback+0x110>
  {
    switch (CallbackID)
 800806a:	7afb      	ldrb	r3, [r7, #11]
 800806c:	2b0c      	cmp	r3, #12
 800806e:	d85e      	bhi.n	800812e <HAL_UART_RegisterCallback+0xfa>
 8008070:	a201      	add	r2, pc, #4	@ (adr r2, 8008078 <HAL_UART_RegisterCallback+0x44>)
 8008072:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008076:	bf00      	nop
 8008078:	080080ad 	.word	0x080080ad
 800807c:	080080b7 	.word	0x080080b7
 8008080:	080080c1 	.word	0x080080c1
 8008084:	080080cb 	.word	0x080080cb
 8008088:	080080d5 	.word	0x080080d5
 800808c:	080080df 	.word	0x080080df
 8008090:	080080e9 	.word	0x080080e9
 8008094:	080080f3 	.word	0x080080f3
 8008098:	080080fd 	.word	0x080080fd
 800809c:	08008107 	.word	0x08008107
 80080a0:	08008111 	.word	0x08008111
 80080a4:	0800811b 	.word	0x0800811b
 80080a8:	08008125 	.word	0x08008125
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	687a      	ldr	r2, [r7, #4]
 80080b0:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 80080b4:	e070      	b.n	8008198 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	687a      	ldr	r2, [r7, #4]
 80080ba:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 80080be:	e06b      	b.n	8008198 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	687a      	ldr	r2, [r7, #4]
 80080c4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 80080c8:	e066      	b.n	8008198 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	687a      	ldr	r2, [r7, #4]
 80080ce:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 80080d2:	e061      	b.n	8008198 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	687a      	ldr	r2, [r7, #4]
 80080d8:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 80080dc:	e05c      	b.n	8008198 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	687a      	ldr	r2, [r7, #4]
 80080e2:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 80080e6:	e057      	b.n	8008198 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	687a      	ldr	r2, [r7, #4]
 80080ec:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 80080f0:	e052      	b.n	8008198 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	687a      	ldr	r2, [r7, #4]
 80080f6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 80080fa:	e04d      	b.n	8008198 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_WAKEUP_CB_ID :
        huart->WakeupCallback = pCallback;
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	687a      	ldr	r2, [r7, #4]
 8008100:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 8008104:	e048      	b.n	8008198 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_FIFO_FULL_CB_ID :
        huart->RxFifoFullCallback = pCallback;
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	687a      	ldr	r2, [r7, #4]
 800810a:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 800810e:	e043      	b.n	8008198 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_FIFO_EMPTY_CB_ID :
        huart->TxFifoEmptyCallback = pCallback;
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	687a      	ldr	r2, [r7, #4]
 8008114:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 8008118:	e03e      	b.n	8008198 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	687a      	ldr	r2, [r7, #4]
 800811e:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 8008122:	e039      	b.n	8008198 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	687a      	ldr	r2, [r7, #4]
 8008128:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 800812c:	e034      	b.n	8008198 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008134:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 800813e:	2301      	movs	r3, #1
 8008140:	75fb      	strb	r3, [r7, #23]
        break;
 8008142:	e029      	b.n	8008198 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800814a:	2b00      	cmp	r3, #0
 800814c:	d11a      	bne.n	8008184 <HAL_UART_RegisterCallback+0x150>
  {
    switch (CallbackID)
 800814e:	7afb      	ldrb	r3, [r7, #11]
 8008150:	2b0b      	cmp	r3, #11
 8008152:	d002      	beq.n	800815a <HAL_UART_RegisterCallback+0x126>
 8008154:	2b0c      	cmp	r3, #12
 8008156:	d005      	beq.n	8008164 <HAL_UART_RegisterCallback+0x130>
 8008158:	e009      	b.n	800816e <HAL_UART_RegisterCallback+0x13a>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	687a      	ldr	r2, [r7, #4]
 800815e:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 8008162:	e019      	b.n	8008198 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	687a      	ldr	r2, [r7, #4]
 8008168:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 800816c:	e014      	b.n	8008198 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008174:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 800817e:	2301      	movs	r3, #1
 8008180:	75fb      	strb	r3, [r7, #23]
        break;
 8008182:	e009      	b.n	8008198 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800818a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    status =  HAL_ERROR;
 8008194:	2301      	movs	r3, #1
 8008196:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8008198:	7dfb      	ldrb	r3, [r7, #23]
}
 800819a:	4618      	mov	r0, r3
 800819c:	371c      	adds	r7, #28
 800819e:	46bd      	mov	sp, r7
 80081a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a4:	4770      	bx	lr
 80081a6:	bf00      	nop

080081a8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80081a8:	b580      	push	{r7, lr}
 80081aa:	b08a      	sub	sp, #40	@ 0x28
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	60f8      	str	r0, [r7, #12]
 80081b0:	60b9      	str	r1, [r7, #8]
 80081b2:	4613      	mov	r3, r2
 80081b4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80081bc:	2b20      	cmp	r3, #32
 80081be:	d137      	bne.n	8008230 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80081c0:	68bb      	ldr	r3, [r7, #8]
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d002      	beq.n	80081cc <HAL_UART_Receive_IT+0x24>
 80081c6:	88fb      	ldrh	r3, [r7, #6]
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d101      	bne.n	80081d0 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80081cc:	2301      	movs	r3, #1
 80081ce:	e030      	b.n	8008232 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	2200      	movs	r2, #0
 80081d4:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	4a18      	ldr	r2, [pc, #96]	@ (800823c <HAL_UART_Receive_IT+0x94>)
 80081dc:	4293      	cmp	r3, r2
 80081de:	d01f      	beq.n	8008220 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	685b      	ldr	r3, [r3, #4]
 80081e6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d018      	beq.n	8008220 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081f4:	697b      	ldr	r3, [r7, #20]
 80081f6:	e853 3f00 	ldrex	r3, [r3]
 80081fa:	613b      	str	r3, [r7, #16]
   return(result);
 80081fc:	693b      	ldr	r3, [r7, #16]
 80081fe:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008202:	627b      	str	r3, [r7, #36]	@ 0x24
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	461a      	mov	r2, r3
 800820a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800820c:	623b      	str	r3, [r7, #32]
 800820e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008210:	69f9      	ldr	r1, [r7, #28]
 8008212:	6a3a      	ldr	r2, [r7, #32]
 8008214:	e841 2300 	strex	r3, r2, [r1]
 8008218:	61bb      	str	r3, [r7, #24]
   return(result);
 800821a:	69bb      	ldr	r3, [r7, #24]
 800821c:	2b00      	cmp	r3, #0
 800821e:	d1e6      	bne.n	80081ee <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008220:	88fb      	ldrh	r3, [r7, #6]
 8008222:	461a      	mov	r2, r3
 8008224:	68b9      	ldr	r1, [r7, #8]
 8008226:	68f8      	ldr	r0, [r7, #12]
 8008228:	f001 f9f8 	bl	800961c <UART_Start_Receive_IT>
 800822c:	4603      	mov	r3, r0
 800822e:	e000      	b.n	8008232 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008230:	2302      	movs	r3, #2
  }
}
 8008232:	4618      	mov	r0, r3
 8008234:	3728      	adds	r7, #40	@ 0x28
 8008236:	46bd      	mov	sp, r7
 8008238:	bd80      	pop	{r7, pc}
 800823a:	bf00      	nop
 800823c:	40008000 	.word	0x40008000

08008240 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8008240:	b580      	push	{r7, lr}
 8008242:	b08a      	sub	sp, #40	@ 0x28
 8008244:	af00      	add	r7, sp, #0
 8008246:	60f8      	str	r0, [r7, #12]
 8008248:	60b9      	str	r1, [r7, #8]
 800824a:	4613      	mov	r3, r2
 800824c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008254:	2b20      	cmp	r3, #32
 8008256:	d167      	bne.n	8008328 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8008258:	68bb      	ldr	r3, [r7, #8]
 800825a:	2b00      	cmp	r3, #0
 800825c:	d002      	beq.n	8008264 <HAL_UART_Transmit_DMA+0x24>
 800825e:	88fb      	ldrh	r3, [r7, #6]
 8008260:	2b00      	cmp	r3, #0
 8008262:	d101      	bne.n	8008268 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8008264:	2301      	movs	r3, #1
 8008266:	e060      	b.n	800832a <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	68ba      	ldr	r2, [r7, #8]
 800826c:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	88fa      	ldrh	r2, [r7, #6]
 8008272:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	88fa      	ldrh	r2, [r7, #6]
 800827a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	2200      	movs	r2, #0
 8008282:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	2221      	movs	r2, #33	@ 0x21
 800828a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008292:	2b00      	cmp	r3, #0
 8008294:	d028      	beq.n	80082e8 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800829a:	4a26      	ldr	r2, [pc, #152]	@ (8008334 <HAL_UART_Transmit_DMA+0xf4>)
 800829c:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80082a2:	4a25      	ldr	r2, [pc, #148]	@ (8008338 <HAL_UART_Transmit_DMA+0xf8>)
 80082a4:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80082aa:	4a24      	ldr	r2, [pc, #144]	@ (800833c <HAL_UART_Transmit_DMA+0xfc>)
 80082ac:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80082b2:	2200      	movs	r2, #0
 80082b4:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80082be:	4619      	mov	r1, r3
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	3328      	adds	r3, #40	@ 0x28
 80082c6:	461a      	mov	r2, r3
 80082c8:	88fb      	ldrh	r3, [r7, #6]
 80082ca:	f7fb fff7 	bl	80042bc <HAL_DMA_Start_IT>
 80082ce:	4603      	mov	r3, r0
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d009      	beq.n	80082e8 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	2210      	movs	r2, #16
 80082d8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	2220      	movs	r2, #32
 80082e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 80082e4:	2301      	movs	r3, #1
 80082e6:	e020      	b.n	800832a <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	2240      	movs	r2, #64	@ 0x40
 80082ee:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	3308      	adds	r3, #8
 80082f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082f8:	697b      	ldr	r3, [r7, #20]
 80082fa:	e853 3f00 	ldrex	r3, [r3]
 80082fe:	613b      	str	r3, [r7, #16]
   return(result);
 8008300:	693b      	ldr	r3, [r7, #16]
 8008302:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008306:	627b      	str	r3, [r7, #36]	@ 0x24
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	3308      	adds	r3, #8
 800830e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008310:	623a      	str	r2, [r7, #32]
 8008312:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008314:	69f9      	ldr	r1, [r7, #28]
 8008316:	6a3a      	ldr	r2, [r7, #32]
 8008318:	e841 2300 	strex	r3, r2, [r1]
 800831c:	61bb      	str	r3, [r7, #24]
   return(result);
 800831e:	69bb      	ldr	r3, [r7, #24]
 8008320:	2b00      	cmp	r3, #0
 8008322:	d1e5      	bne.n	80082f0 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8008324:	2300      	movs	r3, #0
 8008326:	e000      	b.n	800832a <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8008328:	2302      	movs	r3, #2
  }
}
 800832a:	4618      	mov	r0, r3
 800832c:	3728      	adds	r7, #40	@ 0x28
 800832e:	46bd      	mov	sp, r7
 8008330:	bd80      	pop	{r7, pc}
 8008332:	bf00      	nop
 8008334:	080099af 	.word	0x080099af
 8008338:	08009a4d 	.word	0x08009a4d
 800833c:	08009a6d 	.word	0x08009a6d

08008340 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 8008340:	b580      	push	{r7, lr}
 8008342:	b09a      	sub	sp, #104	@ 0x68
 8008344:	af00      	add	r7, sp, #0
 8008346:	6078      	str	r0, [r7, #4]
  /* Disable PEIE, EIE, RXNEIE and RXFTIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800834e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008350:	e853 3f00 	ldrex	r3, [r3]
 8008354:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8008356:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008358:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800835c:	667b      	str	r3, [r7, #100]	@ 0x64
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	461a      	mov	r2, r3
 8008364:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008366:	657b      	str	r3, [r7, #84]	@ 0x54
 8008368:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800836a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800836c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800836e:	e841 2300 	strex	r3, r2, [r1]
 8008372:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8008374:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008376:	2b00      	cmp	r3, #0
 8008378:	d1e6      	bne.n	8008348 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE);
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	3308      	adds	r3, #8
 8008380:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008382:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008384:	e853 3f00 	ldrex	r3, [r3]
 8008388:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800838a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800838c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008390:	f023 0301 	bic.w	r3, r3, #1
 8008394:	663b      	str	r3, [r7, #96]	@ 0x60
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	3308      	adds	r3, #8
 800839c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800839e:	643a      	str	r2, [r7, #64]	@ 0x40
 80083a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083a2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80083a4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80083a6:	e841 2300 	strex	r3, r2, [r1]
 80083aa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80083ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d1e3      	bne.n	800837a <HAL_UART_AbortReceive+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80083b6:	2b01      	cmp	r3, #1
 80083b8:	d118      	bne.n	80083ec <HAL_UART_AbortReceive+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083c0:	6a3b      	ldr	r3, [r7, #32]
 80083c2:	e853 3f00 	ldrex	r3, [r3]
 80083c6:	61fb      	str	r3, [r7, #28]
   return(result);
 80083c8:	69fb      	ldr	r3, [r7, #28]
 80083ca:	f023 0310 	bic.w	r3, r3, #16
 80083ce:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	461a      	mov	r2, r3
 80083d6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80083d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80083da:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083dc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80083de:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80083e0:	e841 2300 	strex	r3, r2, [r1]
 80083e4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80083e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d1e6      	bne.n	80083ba <HAL_UART_AbortReceive+0x7a>
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	689b      	ldr	r3, [r3, #8]
 80083f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80083f6:	2b40      	cmp	r3, #64	@ 0x40
 80083f8:	d13b      	bne.n	8008472 <HAL_UART_AbortReceive+0x132>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	3308      	adds	r3, #8
 8008400:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	e853 3f00 	ldrex	r3, [r3]
 8008408:	60bb      	str	r3, [r7, #8]
   return(result);
 800840a:	68bb      	ldr	r3, [r7, #8]
 800840c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008410:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	3308      	adds	r3, #8
 8008418:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800841a:	61ba      	str	r2, [r7, #24]
 800841c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800841e:	6979      	ldr	r1, [r7, #20]
 8008420:	69ba      	ldr	r2, [r7, #24]
 8008422:	e841 2300 	strex	r3, r2, [r1]
 8008426:	613b      	str	r3, [r7, #16]
   return(result);
 8008428:	693b      	ldr	r3, [r7, #16]
 800842a:	2b00      	cmp	r3, #0
 800842c:	d1e5      	bne.n	80083fa <HAL_UART_AbortReceive+0xba>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008434:	2b00      	cmp	r3, #0
 8008436:	d01c      	beq.n	8008472 <HAL_UART_AbortReceive+0x132>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800843e:	2200      	movs	r2, #0
 8008440:	639a      	str	r2, [r3, #56]	@ 0x38

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008448:	4618      	mov	r0, r3
 800844a:	f7fb ffb2 	bl	80043b2 <HAL_DMA_Abort>
 800844e:	4603      	mov	r3, r0
 8008450:	2b00      	cmp	r3, #0
 8008452:	d00e      	beq.n	8008472 <HAL_UART_AbortReceive+0x132>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800845a:	4618      	mov	r0, r3
 800845c:	f7fc f918 	bl	8004690 <HAL_DMA_GetError>
 8008460:	4603      	mov	r3, r0
 8008462:	2b20      	cmp	r3, #32
 8008464:	d105      	bne.n	8008472 <HAL_UART_AbortReceive+0x132>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	2210      	movs	r2, #16
 800846a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 800846e:	2303      	movs	r3, #3
 8008470:	e017      	b.n	80084a2 <HAL_UART_AbortReceive+0x162>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0U;
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	2200      	movs	r2, #0
 8008476:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	220f      	movs	r2, #15
 8008480:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	699a      	ldr	r2, [r3, #24]
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	f042 0208 	orr.w	r2, r2, #8
 8008490:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	2220      	movs	r2, #32
 8008496:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	2200      	movs	r2, #0
 800849e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return HAL_OK;
 80084a0:	2300      	movs	r3, #0
}
 80084a2:	4618      	mov	r0, r3
 80084a4:	3768      	adds	r7, #104	@ 0x68
 80084a6:	46bd      	mov	sp, r7
 80084a8:	bd80      	pop	{r7, pc}
	...

080084ac <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80084ac:	b580      	push	{r7, lr}
 80084ae:	b0ba      	sub	sp, #232	@ 0xe8
 80084b0:	af00      	add	r7, sp, #0
 80084b2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	69db      	ldr	r3, [r3, #28]
 80084ba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	689b      	ldr	r3, [r3, #8]
 80084ce:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80084d2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80084d6:	f640 030f 	movw	r3, #2063	@ 0x80f
 80084da:	4013      	ands	r3, r2
 80084dc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80084e0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d11b      	bne.n	8008520 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80084e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80084ec:	f003 0320 	and.w	r3, r3, #32
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d015      	beq.n	8008520 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80084f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80084f8:	f003 0320 	and.w	r3, r3, #32
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d105      	bne.n	800850c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008500:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008504:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008508:	2b00      	cmp	r3, #0
 800850a:	d009      	beq.n	8008520 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008510:	2b00      	cmp	r3, #0
 8008512:	f000 8312 	beq.w	8008b3a <HAL_UART_IRQHandler+0x68e>
      {
        huart->RxISR(huart);
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800851a:	6878      	ldr	r0, [r7, #4]
 800851c:	4798      	blx	r3
      }
      return;
 800851e:	e30c      	b.n	8008b3a <HAL_UART_IRQHandler+0x68e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008520:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008524:	2b00      	cmp	r3, #0
 8008526:	f000 8129 	beq.w	800877c <HAL_UART_IRQHandler+0x2d0>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800852a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800852e:	4b90      	ldr	r3, [pc, #576]	@ (8008770 <HAL_UART_IRQHandler+0x2c4>)
 8008530:	4013      	ands	r3, r2
 8008532:	2b00      	cmp	r3, #0
 8008534:	d106      	bne.n	8008544 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008536:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800853a:	4b8e      	ldr	r3, [pc, #568]	@ (8008774 <HAL_UART_IRQHandler+0x2c8>)
 800853c:	4013      	ands	r3, r2
 800853e:	2b00      	cmp	r3, #0
 8008540:	f000 811c 	beq.w	800877c <HAL_UART_IRQHandler+0x2d0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008544:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008548:	f003 0301 	and.w	r3, r3, #1
 800854c:	2b00      	cmp	r3, #0
 800854e:	d011      	beq.n	8008574 <HAL_UART_IRQHandler+0xc8>
 8008550:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008554:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008558:	2b00      	cmp	r3, #0
 800855a:	d00b      	beq.n	8008574 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	2201      	movs	r2, #1
 8008562:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800856a:	f043 0201 	orr.w	r2, r3, #1
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008574:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008578:	f003 0302 	and.w	r3, r3, #2
 800857c:	2b00      	cmp	r3, #0
 800857e:	d011      	beq.n	80085a4 <HAL_UART_IRQHandler+0xf8>
 8008580:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008584:	f003 0301 	and.w	r3, r3, #1
 8008588:	2b00      	cmp	r3, #0
 800858a:	d00b      	beq.n	80085a4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	2202      	movs	r2, #2
 8008592:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800859a:	f043 0204 	orr.w	r2, r3, #4
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80085a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80085a8:	f003 0304 	and.w	r3, r3, #4
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d011      	beq.n	80085d4 <HAL_UART_IRQHandler+0x128>
 80085b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80085b4:	f003 0301 	and.w	r3, r3, #1
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d00b      	beq.n	80085d4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	2204      	movs	r2, #4
 80085c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80085ca:	f043 0202 	orr.w	r2, r3, #2
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80085d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80085d8:	f003 0308 	and.w	r3, r3, #8
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d017      	beq.n	8008610 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80085e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80085e4:	f003 0320 	and.w	r3, r3, #32
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d105      	bne.n	80085f8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80085ec:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80085f0:	4b5f      	ldr	r3, [pc, #380]	@ (8008770 <HAL_UART_IRQHandler+0x2c4>)
 80085f2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d00b      	beq.n	8008610 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	2208      	movs	r2, #8
 80085fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008606:	f043 0208 	orr.w	r2, r3, #8
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008610:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008614:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008618:	2b00      	cmp	r3, #0
 800861a:	d012      	beq.n	8008642 <HAL_UART_IRQHandler+0x196>
 800861c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008620:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008624:	2b00      	cmp	r3, #0
 8008626:	d00c      	beq.n	8008642 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008630:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008638:	f043 0220 	orr.w	r2, r3, #32
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008648:	2b00      	cmp	r3, #0
 800864a:	f000 8278 	beq.w	8008b3e <HAL_UART_IRQHandler+0x692>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800864e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008652:	f003 0320 	and.w	r3, r3, #32
 8008656:	2b00      	cmp	r3, #0
 8008658:	d013      	beq.n	8008682 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800865a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800865e:	f003 0320 	and.w	r3, r3, #32
 8008662:	2b00      	cmp	r3, #0
 8008664:	d105      	bne.n	8008672 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008666:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800866a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800866e:	2b00      	cmp	r3, #0
 8008670:	d007      	beq.n	8008682 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008676:	2b00      	cmp	r3, #0
 8008678:	d003      	beq.n	8008682 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800867e:	6878      	ldr	r0, [r7, #4]
 8008680:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008688:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	689b      	ldr	r3, [r3, #8]
 8008692:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008696:	2b40      	cmp	r3, #64	@ 0x40
 8008698:	d005      	beq.n	80086a6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800869a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800869e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d058      	beq.n	8008758 <HAL_UART_IRQHandler+0x2ac>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80086a6:	6878      	ldr	r0, [r7, #4]
 80086a8:	f001 f91b 	bl	80098e2 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	689b      	ldr	r3, [r3, #8]
 80086b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80086b6:	2b40      	cmp	r3, #64	@ 0x40
 80086b8:	d148      	bne.n	800874c <HAL_UART_IRQHandler+0x2a0>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	3308      	adds	r3, #8
 80086c0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086c4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80086c8:	e853 3f00 	ldrex	r3, [r3]
 80086cc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80086d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80086d4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80086d8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	3308      	adds	r3, #8
 80086e2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80086e6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80086ea:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086ee:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80086f2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80086f6:	e841 2300 	strex	r3, r2, [r1]
 80086fa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80086fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008702:	2b00      	cmp	r3, #0
 8008704:	d1d9      	bne.n	80086ba <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800870c:	2b00      	cmp	r3, #0
 800870e:	d017      	beq.n	8008740 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008716:	4a18      	ldr	r2, [pc, #96]	@ (8008778 <HAL_UART_IRQHandler+0x2cc>)
 8008718:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008720:	4618      	mov	r0, r3
 8008722:	f7fb fe9f 	bl	8004464 <HAL_DMA_Abort_IT>
 8008726:	4603      	mov	r3, r0
 8008728:	2b00      	cmp	r3, #0
 800872a:	d01f      	beq.n	800876c <HAL_UART_IRQHandler+0x2c0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008732:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008734:	687a      	ldr	r2, [r7, #4]
 8008736:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800873a:	4610      	mov	r0, r2
 800873c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800873e:	e015      	b.n	800876c <HAL_UART_IRQHandler+0x2c0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008746:	6878      	ldr	r0, [r7, #4]
 8008748:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800874a:	e00f      	b.n	800876c <HAL_UART_IRQHandler+0x2c0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008752:	6878      	ldr	r0, [r7, #4]
 8008754:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008756:	e009      	b.n	800876c <HAL_UART_IRQHandler+0x2c0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800875e:	6878      	ldr	r0, [r7, #4]
 8008760:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	2200      	movs	r2, #0
 8008766:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800876a:	e1e8      	b.n	8008b3e <HAL_UART_IRQHandler+0x692>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800876c:	bf00      	nop
    return;
 800876e:	e1e6      	b.n	8008b3e <HAL_UART_IRQHandler+0x692>
 8008770:	10000001 	.word	0x10000001
 8008774:	04000120 	.word	0x04000120
 8008778:	08009af1 	.word	0x08009af1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008780:	2b01      	cmp	r3, #1
 8008782:	f040 8176 	bne.w	8008a72 <HAL_UART_IRQHandler+0x5c6>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008786:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800878a:	f003 0310 	and.w	r3, r3, #16
 800878e:	2b00      	cmp	r3, #0
 8008790:	f000 816f 	beq.w	8008a72 <HAL_UART_IRQHandler+0x5c6>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008794:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008798:	f003 0310 	and.w	r3, r3, #16
 800879c:	2b00      	cmp	r3, #0
 800879e:	f000 8168 	beq.w	8008a72 <HAL_UART_IRQHandler+0x5c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	2210      	movs	r2, #16
 80087a8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	689b      	ldr	r3, [r3, #8]
 80087b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80087b4:	2b40      	cmp	r3, #64	@ 0x40
 80087b6:	f040 80dc 	bne.w	8008972 <HAL_UART_IRQHandler+0x4c6>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	685b      	ldr	r3, [r3, #4]
 80087c4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80087c8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	f000 80b1 	beq.w	8008934 <HAL_UART_IRQHandler+0x488>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80087d8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80087dc:	429a      	cmp	r2, r3
 80087de:	f080 80a9 	bcs.w	8008934 <HAL_UART_IRQHandler+0x488>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80087e8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	f003 0320 	and.w	r3, r3, #32
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	f040 8087 	bne.w	800890e <HAL_UART_IRQHandler+0x462>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008808:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800880c:	e853 3f00 	ldrex	r3, [r3]
 8008810:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008814:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008818:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800881c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	461a      	mov	r2, r3
 8008826:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800882a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800882e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008832:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8008836:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800883a:	e841 2300 	strex	r3, r2, [r1]
 800883e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8008842:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008846:	2b00      	cmp	r3, #0
 8008848:	d1da      	bne.n	8008800 <HAL_UART_IRQHandler+0x354>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	3308      	adds	r3, #8
 8008850:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008852:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008854:	e853 3f00 	ldrex	r3, [r3]
 8008858:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800885a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800885c:	f023 0301 	bic.w	r3, r3, #1
 8008860:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	3308      	adds	r3, #8
 800886a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800886e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8008872:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008874:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008876:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800887a:	e841 2300 	strex	r3, r2, [r1]
 800887e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008880:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008882:	2b00      	cmp	r3, #0
 8008884:	d1e1      	bne.n	800884a <HAL_UART_IRQHandler+0x39e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	3308      	adds	r3, #8
 800888c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800888e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008890:	e853 3f00 	ldrex	r3, [r3]
 8008894:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008896:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008898:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800889c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	3308      	adds	r3, #8
 80088a6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80088aa:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80088ac:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088ae:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80088b0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80088b2:	e841 2300 	strex	r3, r2, [r1]
 80088b6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80088b8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d1e3      	bne.n	8008886 <HAL_UART_IRQHandler+0x3da>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	2220      	movs	r2, #32
 80088c2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	2200      	movs	r2, #0
 80088ca:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80088d4:	e853 3f00 	ldrex	r3, [r3]
 80088d8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80088da:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80088dc:	f023 0310 	bic.w	r3, r3, #16
 80088e0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	461a      	mov	r2, r3
 80088ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80088ee:	65bb      	str	r3, [r7, #88]	@ 0x58
 80088f0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088f2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80088f4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80088f6:	e841 2300 	strex	r3, r2, [r1]
 80088fa:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80088fc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d1e4      	bne.n	80088cc <HAL_UART_IRQHandler+0x420>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008908:	4618      	mov	r0, r3
 800890a:	f7fb fd52 	bl	80043b2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	2202      	movs	r2, #2
 8008912:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800891a:	687a      	ldr	r2, [r7, #4]
 800891c:	f8b2 105c 	ldrh.w	r1, [r2, #92]	@ 0x5c
 8008920:	687a      	ldr	r2, [r7, #4]
 8008922:	f8b2 205e 	ldrh.w	r2, [r2, #94]	@ 0x5e
 8008926:	b292      	uxth	r2, r2
 8008928:	1a8a      	subs	r2, r1, r2
 800892a:	b292      	uxth	r2, r2
 800892c:	4611      	mov	r1, r2
 800892e:	6878      	ldr	r0, [r7, #4]
 8008930:	4798      	blx	r3
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8008932:	e106      	b.n	8008b42 <HAL_UART_IRQHandler+0x696>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800893a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800893e:	429a      	cmp	r2, r3
 8008940:	f040 80ff 	bne.w	8008b42 <HAL_UART_IRQHandler+0x696>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	f003 0320 	and.w	r3, r3, #32
 8008952:	2b20      	cmp	r3, #32
 8008954:	f040 80f5 	bne.w	8008b42 <HAL_UART_IRQHandler+0x696>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	2202      	movs	r2, #2
 800895c:	671a      	str	r2, [r3, #112]	@ 0x70
            huart->RxEventCallback(huart, huart->RxXferSize);
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8008964:	687a      	ldr	r2, [r7, #4]
 8008966:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800896a:	4611      	mov	r1, r2
 800896c:	6878      	ldr	r0, [r7, #4]
 800896e:	4798      	blx	r3
      return;
 8008970:	e0e7      	b.n	8008b42 <HAL_UART_IRQHandler+0x696>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800897e:	b29b      	uxth	r3, r3
 8008980:	1ad3      	subs	r3, r2, r3
 8008982:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800898c:	b29b      	uxth	r3, r3
 800898e:	2b00      	cmp	r3, #0
 8008990:	f000 80d9 	beq.w	8008b46 <HAL_UART_IRQHandler+0x69a>
          && (nb_rx_data > 0U))
 8008994:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008998:	2b00      	cmp	r3, #0
 800899a:	f000 80d4 	beq.w	8008b46 <HAL_UART_IRQHandler+0x69a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089a6:	e853 3f00 	ldrex	r3, [r3]
 80089aa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80089ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80089ae:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80089b2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	461a      	mov	r2, r3
 80089bc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80089c0:	647b      	str	r3, [r7, #68]	@ 0x44
 80089c2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089c4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80089c6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80089c8:	e841 2300 	strex	r3, r2, [r1]
 80089cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80089ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d1e4      	bne.n	800899e <HAL_UART_IRQHandler+0x4f2>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	3308      	adds	r3, #8
 80089da:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089de:	e853 3f00 	ldrex	r3, [r3]
 80089e2:	623b      	str	r3, [r7, #32]
   return(result);
 80089e4:	6a3b      	ldr	r3, [r7, #32]
 80089e6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80089ea:	f023 0301 	bic.w	r3, r3, #1
 80089ee:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	3308      	adds	r3, #8
 80089f8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80089fc:	633a      	str	r2, [r7, #48]	@ 0x30
 80089fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a00:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008a02:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008a04:	e841 2300 	strex	r3, r2, [r1]
 8008a08:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008a0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d1e1      	bne.n	80089d4 <HAL_UART_IRQHandler+0x528>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	2220      	movs	r2, #32
 8008a14:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	2200      	movs	r2, #0
 8008a1c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	2200      	movs	r2, #0
 8008a22:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a2a:	693b      	ldr	r3, [r7, #16]
 8008a2c:	e853 3f00 	ldrex	r3, [r3]
 8008a30:	60fb      	str	r3, [r7, #12]
   return(result);
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	f023 0310 	bic.w	r3, r3, #16
 8008a38:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	461a      	mov	r2, r3
 8008a42:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8008a46:	61fb      	str	r3, [r7, #28]
 8008a48:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a4a:	69b9      	ldr	r1, [r7, #24]
 8008a4c:	69fa      	ldr	r2, [r7, #28]
 8008a4e:	e841 2300 	strex	r3, r2, [r1]
 8008a52:	617b      	str	r3, [r7, #20]
   return(result);
 8008a54:	697b      	ldr	r3, [r7, #20]
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d1e4      	bne.n	8008a24 <HAL_UART_IRQHandler+0x578>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	2202      	movs	r2, #2
 8008a5e:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8008a66:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	@ 0xce
 8008a6a:	4611      	mov	r1, r2
 8008a6c:	6878      	ldr	r0, [r7, #4]
 8008a6e:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008a70:	e069      	b.n	8008b46 <HAL_UART_IRQHandler+0x69a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008a72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008a76:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d010      	beq.n	8008aa0 <HAL_UART_IRQHandler+0x5f4>
 8008a7e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008a82:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d00a      	beq.n	8008aa0 <HAL_UART_IRQHandler+0x5f4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8008a92:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008a9a:	6878      	ldr	r0, [r7, #4]
 8008a9c:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008a9e:	e055      	b.n	8008b4c <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008aa0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008aa4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d014      	beq.n	8008ad6 <HAL_UART_IRQHandler+0x62a>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008aac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008ab0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d105      	bne.n	8008ac4 <HAL_UART_IRQHandler+0x618>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008ab8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008abc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d008      	beq.n	8008ad6 <HAL_UART_IRQHandler+0x62a>
  {
    if (huart->TxISR != NULL)
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d03e      	beq.n	8008b4a <HAL_UART_IRQHandler+0x69e>
    {
      huart->TxISR(huart);
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008ad0:	6878      	ldr	r0, [r7, #4]
 8008ad2:	4798      	blx	r3
    }
    return;
 8008ad4:	e039      	b.n	8008b4a <HAL_UART_IRQHandler+0x69e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008ad6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008ada:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d009      	beq.n	8008af6 <HAL_UART_IRQHandler+0x64a>
 8008ae2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008ae6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d003      	beq.n	8008af6 <HAL_UART_IRQHandler+0x64a>
  {
    UART_EndTransmit_IT(huart);
 8008aee:	6878      	ldr	r0, [r7, #4]
 8008af0:	f001 f812 	bl	8009b18 <UART_EndTransmit_IT>
    return;
 8008af4:	e02a      	b.n	8008b4c <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008af6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008afa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d00b      	beq.n	8008b1a <HAL_UART_IRQHandler+0x66e>
 8008b02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008b06:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d005      	beq.n	8008b1a <HAL_UART_IRQHandler+0x66e>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8008b14:	6878      	ldr	r0, [r7, #4]
 8008b16:	4798      	blx	r3
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008b18:	e018      	b.n	8008b4c <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008b1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008b1e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d012      	beq.n	8008b4c <HAL_UART_IRQHandler+0x6a0>
 8008b26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	da0e      	bge.n	8008b4c <HAL_UART_IRQHandler+0x6a0>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8008b34:	6878      	ldr	r0, [r7, #4]
 8008b36:	4798      	blx	r3
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008b38:	e008      	b.n	8008b4c <HAL_UART_IRQHandler+0x6a0>
      return;
 8008b3a:	bf00      	nop
 8008b3c:	e006      	b.n	8008b4c <HAL_UART_IRQHandler+0x6a0>
    return;
 8008b3e:	bf00      	nop
 8008b40:	e004      	b.n	8008b4c <HAL_UART_IRQHandler+0x6a0>
      return;
 8008b42:	bf00      	nop
 8008b44:	e002      	b.n	8008b4c <HAL_UART_IRQHandler+0x6a0>
      return;
 8008b46:	bf00      	nop
 8008b48:	e000      	b.n	8008b4c <HAL_UART_IRQHandler+0x6a0>
    return;
 8008b4a:	bf00      	nop
  }
}
 8008b4c:	37e8      	adds	r7, #232	@ 0xe8
 8008b4e:	46bd      	mov	sp, r7
 8008b50:	bd80      	pop	{r7, pc}
 8008b52:	bf00      	nop

08008b54 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008b54:	b480      	push	{r7}
 8008b56:	b083      	sub	sp, #12
 8008b58:	af00      	add	r7, sp, #0
 8008b5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008b5c:	bf00      	nop
 8008b5e:	370c      	adds	r7, #12
 8008b60:	46bd      	mov	sp, r7
 8008b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b66:	4770      	bx	lr

08008b68 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008b68:	b480      	push	{r7}
 8008b6a:	b083      	sub	sp, #12
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8008b70:	bf00      	nop
 8008b72:	370c      	adds	r7, #12
 8008b74:	46bd      	mov	sp, r7
 8008b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b7a:	4770      	bx	lr

08008b7c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008b7c:	b480      	push	{r7}
 8008b7e:	b083      	sub	sp, #12
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8008b84:	bf00      	nop
 8008b86:	370c      	adds	r7, #12
 8008b88:	46bd      	mov	sp, r7
 8008b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b8e:	4770      	bx	lr

08008b90 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008b90:	b480      	push	{r7}
 8008b92:	b083      	sub	sp, #12
 8008b94:	af00      	add	r7, sp, #0
 8008b96:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8008b98:	bf00      	nop
 8008b9a:	370c      	adds	r7, #12
 8008b9c:	46bd      	mov	sp, r7
 8008b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba2:	4770      	bx	lr

08008ba4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008ba4:	b480      	push	{r7}
 8008ba6:	b083      	sub	sp, #12
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008bac:	bf00      	nop
 8008bae:	370c      	adds	r7, #12
 8008bb0:	46bd      	mov	sp, r7
 8008bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb6:	4770      	bx	lr

08008bb8 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8008bb8:	b480      	push	{r7}
 8008bba:	b083      	sub	sp, #12
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8008bc0:	bf00      	nop
 8008bc2:	370c      	adds	r7, #12
 8008bc4:	46bd      	mov	sp, r7
 8008bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bca:	4770      	bx	lr

08008bcc <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8008bcc:	b480      	push	{r7}
 8008bce:	b083      	sub	sp, #12
 8008bd0:	af00      	add	r7, sp, #0
 8008bd2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8008bd4:	bf00      	nop
 8008bd6:	370c      	adds	r7, #12
 8008bd8:	46bd      	mov	sp, r7
 8008bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bde:	4770      	bx	lr

08008be0 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8008be0:	b480      	push	{r7}
 8008be2:	b083      	sub	sp, #12
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8008be8:	bf00      	nop
 8008bea:	370c      	adds	r7, #12
 8008bec:	46bd      	mov	sp, r7
 8008bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf2:	4770      	bx	lr

08008bf4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008bf4:	b480      	push	{r7}
 8008bf6:	b083      	sub	sp, #12
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	6078      	str	r0, [r7, #4]
 8008bfc:	460b      	mov	r3, r1
 8008bfe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008c00:	bf00      	nop
 8008c02:	370c      	adds	r7, #12
 8008c04:	46bd      	mov	sp, r7
 8008c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0a:	4770      	bx	lr

08008c0c <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8008c0c:	b480      	push	{r7}
 8008c0e:	b083      	sub	sp, #12
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	4a1a      	ldr	r2, [pc, #104]	@ (8008c80 <UART_InitCallbacksToDefault+0x74>)
 8008c18:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	4a19      	ldr	r2, [pc, #100]	@ (8008c84 <UART_InitCallbacksToDefault+0x78>)
 8008c20:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	4a18      	ldr	r2, [pc, #96]	@ (8008c88 <UART_InitCallbacksToDefault+0x7c>)
 8008c28:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	4a17      	ldr	r2, [pc, #92]	@ (8008c8c <UART_InitCallbacksToDefault+0x80>)
 8008c30:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	4a16      	ldr	r2, [pc, #88]	@ (8008c90 <UART_InitCallbacksToDefault+0x84>)
 8008c38:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	4a15      	ldr	r2, [pc, #84]	@ (8008c94 <UART_InitCallbacksToDefault+0x88>)
 8008c40:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	4a14      	ldr	r2, [pc, #80]	@ (8008c98 <UART_InitCallbacksToDefault+0x8c>)
 8008c48:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	4a13      	ldr	r2, [pc, #76]	@ (8008c9c <UART_InitCallbacksToDefault+0x90>)
 8008c50:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	4a12      	ldr	r2, [pc, #72]	@ (8008ca0 <UART_InitCallbacksToDefault+0x94>)
 8008c58:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	4a11      	ldr	r2, [pc, #68]	@ (8008ca4 <UART_InitCallbacksToDefault+0x98>)
 8008c60:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	4a10      	ldr	r2, [pc, #64]	@ (8008ca8 <UART_InitCallbacksToDefault+0x9c>)
 8008c68:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	4a0f      	ldr	r2, [pc, #60]	@ (8008cac <UART_InitCallbacksToDefault+0xa0>)
 8008c70:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

}
 8008c74:	bf00      	nop
 8008c76:	370c      	adds	r7, #12
 8008c78:	46bd      	mov	sp, r7
 8008c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c7e:	4770      	bx	lr
 8008c80:	08008b69 	.word	0x08008b69
 8008c84:	08008b55 	.word	0x08008b55
 8008c88:	08008b91 	.word	0x08008b91
 8008c8c:	08008b7d 	.word	0x08008b7d
 8008c90:	08008ba5 	.word	0x08008ba5
 8008c94:	08008bb9 	.word	0x08008bb9
 8008c98:	08008bcd 	.word	0x08008bcd
 8008c9c:	08008be1 	.word	0x08008be1
 8008ca0:	0800a5dd 	.word	0x0800a5dd
 8008ca4:	0800a5f1 	.word	0x0800a5f1
 8008ca8:	0800a605 	.word	0x0800a605
 8008cac:	08008bf5 	.word	0x08008bf5

08008cb0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008cb0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008cb4:	b08c      	sub	sp, #48	@ 0x30
 8008cb6:	af00      	add	r7, sp, #0
 8008cb8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008cba:	2300      	movs	r3, #0
 8008cbc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008cc0:	697b      	ldr	r3, [r7, #20]
 8008cc2:	689a      	ldr	r2, [r3, #8]
 8008cc4:	697b      	ldr	r3, [r7, #20]
 8008cc6:	691b      	ldr	r3, [r3, #16]
 8008cc8:	431a      	orrs	r2, r3
 8008cca:	697b      	ldr	r3, [r7, #20]
 8008ccc:	695b      	ldr	r3, [r3, #20]
 8008cce:	431a      	orrs	r2, r3
 8008cd0:	697b      	ldr	r3, [r7, #20]
 8008cd2:	69db      	ldr	r3, [r3, #28]
 8008cd4:	4313      	orrs	r3, r2
 8008cd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008cd8:	697b      	ldr	r3, [r7, #20]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	681a      	ldr	r2, [r3, #0]
 8008cde:	4baa      	ldr	r3, [pc, #680]	@ (8008f88 <UART_SetConfig+0x2d8>)
 8008ce0:	4013      	ands	r3, r2
 8008ce2:	697a      	ldr	r2, [r7, #20]
 8008ce4:	6812      	ldr	r2, [r2, #0]
 8008ce6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008ce8:	430b      	orrs	r3, r1
 8008cea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008cec:	697b      	ldr	r3, [r7, #20]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	685b      	ldr	r3, [r3, #4]
 8008cf2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008cf6:	697b      	ldr	r3, [r7, #20]
 8008cf8:	68da      	ldr	r2, [r3, #12]
 8008cfa:	697b      	ldr	r3, [r7, #20]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	430a      	orrs	r2, r1
 8008d00:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008d02:	697b      	ldr	r3, [r7, #20]
 8008d04:	699b      	ldr	r3, [r3, #24]
 8008d06:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008d08:	697b      	ldr	r3, [r7, #20]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	4a9f      	ldr	r2, [pc, #636]	@ (8008f8c <UART_SetConfig+0x2dc>)
 8008d0e:	4293      	cmp	r3, r2
 8008d10:	d004      	beq.n	8008d1c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008d12:	697b      	ldr	r3, [r7, #20]
 8008d14:	6a1b      	ldr	r3, [r3, #32]
 8008d16:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008d18:	4313      	orrs	r3, r2
 8008d1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008d1c:	697b      	ldr	r3, [r7, #20]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	689b      	ldr	r3, [r3, #8]
 8008d22:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8008d26:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8008d2a:	697a      	ldr	r2, [r7, #20]
 8008d2c:	6812      	ldr	r2, [r2, #0]
 8008d2e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008d30:	430b      	orrs	r3, r1
 8008d32:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008d34:	697b      	ldr	r3, [r7, #20]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d3a:	f023 010f 	bic.w	r1, r3, #15
 8008d3e:	697b      	ldr	r3, [r7, #20]
 8008d40:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008d42:	697b      	ldr	r3, [r7, #20]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	430a      	orrs	r2, r1
 8008d48:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008d4a:	697b      	ldr	r3, [r7, #20]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	4a90      	ldr	r2, [pc, #576]	@ (8008f90 <UART_SetConfig+0x2e0>)
 8008d50:	4293      	cmp	r3, r2
 8008d52:	d125      	bne.n	8008da0 <UART_SetConfig+0xf0>
 8008d54:	4b8f      	ldr	r3, [pc, #572]	@ (8008f94 <UART_SetConfig+0x2e4>)
 8008d56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008d5a:	f003 0303 	and.w	r3, r3, #3
 8008d5e:	2b03      	cmp	r3, #3
 8008d60:	d81a      	bhi.n	8008d98 <UART_SetConfig+0xe8>
 8008d62:	a201      	add	r2, pc, #4	@ (adr r2, 8008d68 <UART_SetConfig+0xb8>)
 8008d64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d68:	08008d79 	.word	0x08008d79
 8008d6c:	08008d89 	.word	0x08008d89
 8008d70:	08008d81 	.word	0x08008d81
 8008d74:	08008d91 	.word	0x08008d91
 8008d78:	2301      	movs	r3, #1
 8008d7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008d7e:	e116      	b.n	8008fae <UART_SetConfig+0x2fe>
 8008d80:	2302      	movs	r3, #2
 8008d82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008d86:	e112      	b.n	8008fae <UART_SetConfig+0x2fe>
 8008d88:	2304      	movs	r3, #4
 8008d8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008d8e:	e10e      	b.n	8008fae <UART_SetConfig+0x2fe>
 8008d90:	2308      	movs	r3, #8
 8008d92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008d96:	e10a      	b.n	8008fae <UART_SetConfig+0x2fe>
 8008d98:	2310      	movs	r3, #16
 8008d9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008d9e:	e106      	b.n	8008fae <UART_SetConfig+0x2fe>
 8008da0:	697b      	ldr	r3, [r7, #20]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	4a7c      	ldr	r2, [pc, #496]	@ (8008f98 <UART_SetConfig+0x2e8>)
 8008da6:	4293      	cmp	r3, r2
 8008da8:	d138      	bne.n	8008e1c <UART_SetConfig+0x16c>
 8008daa:	4b7a      	ldr	r3, [pc, #488]	@ (8008f94 <UART_SetConfig+0x2e4>)
 8008dac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008db0:	f003 030c 	and.w	r3, r3, #12
 8008db4:	2b0c      	cmp	r3, #12
 8008db6:	d82d      	bhi.n	8008e14 <UART_SetConfig+0x164>
 8008db8:	a201      	add	r2, pc, #4	@ (adr r2, 8008dc0 <UART_SetConfig+0x110>)
 8008dba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dbe:	bf00      	nop
 8008dc0:	08008df5 	.word	0x08008df5
 8008dc4:	08008e15 	.word	0x08008e15
 8008dc8:	08008e15 	.word	0x08008e15
 8008dcc:	08008e15 	.word	0x08008e15
 8008dd0:	08008e05 	.word	0x08008e05
 8008dd4:	08008e15 	.word	0x08008e15
 8008dd8:	08008e15 	.word	0x08008e15
 8008ddc:	08008e15 	.word	0x08008e15
 8008de0:	08008dfd 	.word	0x08008dfd
 8008de4:	08008e15 	.word	0x08008e15
 8008de8:	08008e15 	.word	0x08008e15
 8008dec:	08008e15 	.word	0x08008e15
 8008df0:	08008e0d 	.word	0x08008e0d
 8008df4:	2300      	movs	r3, #0
 8008df6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008dfa:	e0d8      	b.n	8008fae <UART_SetConfig+0x2fe>
 8008dfc:	2302      	movs	r3, #2
 8008dfe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008e02:	e0d4      	b.n	8008fae <UART_SetConfig+0x2fe>
 8008e04:	2304      	movs	r3, #4
 8008e06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008e0a:	e0d0      	b.n	8008fae <UART_SetConfig+0x2fe>
 8008e0c:	2308      	movs	r3, #8
 8008e0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008e12:	e0cc      	b.n	8008fae <UART_SetConfig+0x2fe>
 8008e14:	2310      	movs	r3, #16
 8008e16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008e1a:	e0c8      	b.n	8008fae <UART_SetConfig+0x2fe>
 8008e1c:	697b      	ldr	r3, [r7, #20]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	4a5e      	ldr	r2, [pc, #376]	@ (8008f9c <UART_SetConfig+0x2ec>)
 8008e22:	4293      	cmp	r3, r2
 8008e24:	d125      	bne.n	8008e72 <UART_SetConfig+0x1c2>
 8008e26:	4b5b      	ldr	r3, [pc, #364]	@ (8008f94 <UART_SetConfig+0x2e4>)
 8008e28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008e2c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8008e30:	2b30      	cmp	r3, #48	@ 0x30
 8008e32:	d016      	beq.n	8008e62 <UART_SetConfig+0x1b2>
 8008e34:	2b30      	cmp	r3, #48	@ 0x30
 8008e36:	d818      	bhi.n	8008e6a <UART_SetConfig+0x1ba>
 8008e38:	2b20      	cmp	r3, #32
 8008e3a:	d00a      	beq.n	8008e52 <UART_SetConfig+0x1a2>
 8008e3c:	2b20      	cmp	r3, #32
 8008e3e:	d814      	bhi.n	8008e6a <UART_SetConfig+0x1ba>
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d002      	beq.n	8008e4a <UART_SetConfig+0x19a>
 8008e44:	2b10      	cmp	r3, #16
 8008e46:	d008      	beq.n	8008e5a <UART_SetConfig+0x1aa>
 8008e48:	e00f      	b.n	8008e6a <UART_SetConfig+0x1ba>
 8008e4a:	2300      	movs	r3, #0
 8008e4c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008e50:	e0ad      	b.n	8008fae <UART_SetConfig+0x2fe>
 8008e52:	2302      	movs	r3, #2
 8008e54:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008e58:	e0a9      	b.n	8008fae <UART_SetConfig+0x2fe>
 8008e5a:	2304      	movs	r3, #4
 8008e5c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008e60:	e0a5      	b.n	8008fae <UART_SetConfig+0x2fe>
 8008e62:	2308      	movs	r3, #8
 8008e64:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008e68:	e0a1      	b.n	8008fae <UART_SetConfig+0x2fe>
 8008e6a:	2310      	movs	r3, #16
 8008e6c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008e70:	e09d      	b.n	8008fae <UART_SetConfig+0x2fe>
 8008e72:	697b      	ldr	r3, [r7, #20]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	4a4a      	ldr	r2, [pc, #296]	@ (8008fa0 <UART_SetConfig+0x2f0>)
 8008e78:	4293      	cmp	r3, r2
 8008e7a:	d125      	bne.n	8008ec8 <UART_SetConfig+0x218>
 8008e7c:	4b45      	ldr	r3, [pc, #276]	@ (8008f94 <UART_SetConfig+0x2e4>)
 8008e7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008e82:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8008e86:	2bc0      	cmp	r3, #192	@ 0xc0
 8008e88:	d016      	beq.n	8008eb8 <UART_SetConfig+0x208>
 8008e8a:	2bc0      	cmp	r3, #192	@ 0xc0
 8008e8c:	d818      	bhi.n	8008ec0 <UART_SetConfig+0x210>
 8008e8e:	2b80      	cmp	r3, #128	@ 0x80
 8008e90:	d00a      	beq.n	8008ea8 <UART_SetConfig+0x1f8>
 8008e92:	2b80      	cmp	r3, #128	@ 0x80
 8008e94:	d814      	bhi.n	8008ec0 <UART_SetConfig+0x210>
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d002      	beq.n	8008ea0 <UART_SetConfig+0x1f0>
 8008e9a:	2b40      	cmp	r3, #64	@ 0x40
 8008e9c:	d008      	beq.n	8008eb0 <UART_SetConfig+0x200>
 8008e9e:	e00f      	b.n	8008ec0 <UART_SetConfig+0x210>
 8008ea0:	2300      	movs	r3, #0
 8008ea2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008ea6:	e082      	b.n	8008fae <UART_SetConfig+0x2fe>
 8008ea8:	2302      	movs	r3, #2
 8008eaa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008eae:	e07e      	b.n	8008fae <UART_SetConfig+0x2fe>
 8008eb0:	2304      	movs	r3, #4
 8008eb2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008eb6:	e07a      	b.n	8008fae <UART_SetConfig+0x2fe>
 8008eb8:	2308      	movs	r3, #8
 8008eba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008ebe:	e076      	b.n	8008fae <UART_SetConfig+0x2fe>
 8008ec0:	2310      	movs	r3, #16
 8008ec2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008ec6:	e072      	b.n	8008fae <UART_SetConfig+0x2fe>
 8008ec8:	697b      	ldr	r3, [r7, #20]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	4a35      	ldr	r2, [pc, #212]	@ (8008fa4 <UART_SetConfig+0x2f4>)
 8008ece:	4293      	cmp	r3, r2
 8008ed0:	d12a      	bne.n	8008f28 <UART_SetConfig+0x278>
 8008ed2:	4b30      	ldr	r3, [pc, #192]	@ (8008f94 <UART_SetConfig+0x2e4>)
 8008ed4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008ed8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008edc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008ee0:	d01a      	beq.n	8008f18 <UART_SetConfig+0x268>
 8008ee2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008ee6:	d81b      	bhi.n	8008f20 <UART_SetConfig+0x270>
 8008ee8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008eec:	d00c      	beq.n	8008f08 <UART_SetConfig+0x258>
 8008eee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008ef2:	d815      	bhi.n	8008f20 <UART_SetConfig+0x270>
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d003      	beq.n	8008f00 <UART_SetConfig+0x250>
 8008ef8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008efc:	d008      	beq.n	8008f10 <UART_SetConfig+0x260>
 8008efe:	e00f      	b.n	8008f20 <UART_SetConfig+0x270>
 8008f00:	2300      	movs	r3, #0
 8008f02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008f06:	e052      	b.n	8008fae <UART_SetConfig+0x2fe>
 8008f08:	2302      	movs	r3, #2
 8008f0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008f0e:	e04e      	b.n	8008fae <UART_SetConfig+0x2fe>
 8008f10:	2304      	movs	r3, #4
 8008f12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008f16:	e04a      	b.n	8008fae <UART_SetConfig+0x2fe>
 8008f18:	2308      	movs	r3, #8
 8008f1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008f1e:	e046      	b.n	8008fae <UART_SetConfig+0x2fe>
 8008f20:	2310      	movs	r3, #16
 8008f22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008f26:	e042      	b.n	8008fae <UART_SetConfig+0x2fe>
 8008f28:	697b      	ldr	r3, [r7, #20]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	4a17      	ldr	r2, [pc, #92]	@ (8008f8c <UART_SetConfig+0x2dc>)
 8008f2e:	4293      	cmp	r3, r2
 8008f30:	d13a      	bne.n	8008fa8 <UART_SetConfig+0x2f8>
 8008f32:	4b18      	ldr	r3, [pc, #96]	@ (8008f94 <UART_SetConfig+0x2e4>)
 8008f34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008f38:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8008f3c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008f40:	d01a      	beq.n	8008f78 <UART_SetConfig+0x2c8>
 8008f42:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008f46:	d81b      	bhi.n	8008f80 <UART_SetConfig+0x2d0>
 8008f48:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008f4c:	d00c      	beq.n	8008f68 <UART_SetConfig+0x2b8>
 8008f4e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008f52:	d815      	bhi.n	8008f80 <UART_SetConfig+0x2d0>
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d003      	beq.n	8008f60 <UART_SetConfig+0x2b0>
 8008f58:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008f5c:	d008      	beq.n	8008f70 <UART_SetConfig+0x2c0>
 8008f5e:	e00f      	b.n	8008f80 <UART_SetConfig+0x2d0>
 8008f60:	2300      	movs	r3, #0
 8008f62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008f66:	e022      	b.n	8008fae <UART_SetConfig+0x2fe>
 8008f68:	2302      	movs	r3, #2
 8008f6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008f6e:	e01e      	b.n	8008fae <UART_SetConfig+0x2fe>
 8008f70:	2304      	movs	r3, #4
 8008f72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008f76:	e01a      	b.n	8008fae <UART_SetConfig+0x2fe>
 8008f78:	2308      	movs	r3, #8
 8008f7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008f7e:	e016      	b.n	8008fae <UART_SetConfig+0x2fe>
 8008f80:	2310      	movs	r3, #16
 8008f82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008f86:	e012      	b.n	8008fae <UART_SetConfig+0x2fe>
 8008f88:	cfff69f3 	.word	0xcfff69f3
 8008f8c:	40008000 	.word	0x40008000
 8008f90:	40013800 	.word	0x40013800
 8008f94:	40021000 	.word	0x40021000
 8008f98:	40004400 	.word	0x40004400
 8008f9c:	40004800 	.word	0x40004800
 8008fa0:	40004c00 	.word	0x40004c00
 8008fa4:	40005000 	.word	0x40005000
 8008fa8:	2310      	movs	r3, #16
 8008faa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008fae:	697b      	ldr	r3, [r7, #20]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	4aae      	ldr	r2, [pc, #696]	@ (800926c <UART_SetConfig+0x5bc>)
 8008fb4:	4293      	cmp	r3, r2
 8008fb6:	f040 8097 	bne.w	80090e8 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008fba:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008fbe:	2b08      	cmp	r3, #8
 8008fc0:	d823      	bhi.n	800900a <UART_SetConfig+0x35a>
 8008fc2:	a201      	add	r2, pc, #4	@ (adr r2, 8008fc8 <UART_SetConfig+0x318>)
 8008fc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fc8:	08008fed 	.word	0x08008fed
 8008fcc:	0800900b 	.word	0x0800900b
 8008fd0:	08008ff5 	.word	0x08008ff5
 8008fd4:	0800900b 	.word	0x0800900b
 8008fd8:	08008ffb 	.word	0x08008ffb
 8008fdc:	0800900b 	.word	0x0800900b
 8008fe0:	0800900b 	.word	0x0800900b
 8008fe4:	0800900b 	.word	0x0800900b
 8008fe8:	08009003 	.word	0x08009003
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008fec:	f7fc fb1e 	bl	800562c <HAL_RCC_GetPCLK1Freq>
 8008ff0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008ff2:	e010      	b.n	8009016 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008ff4:	4b9e      	ldr	r3, [pc, #632]	@ (8009270 <UART_SetConfig+0x5c0>)
 8008ff6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008ff8:	e00d      	b.n	8009016 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008ffa:	f7fc faa9 	bl	8005550 <HAL_RCC_GetSysClockFreq>
 8008ffe:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009000:	e009      	b.n	8009016 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009002:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009006:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009008:	e005      	b.n	8009016 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800900a:	2300      	movs	r3, #0
 800900c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800900e:	2301      	movs	r3, #1
 8009010:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009014:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009018:	2b00      	cmp	r3, #0
 800901a:	f000 8130 	beq.w	800927e <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800901e:	697b      	ldr	r3, [r7, #20]
 8009020:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009022:	4a94      	ldr	r2, [pc, #592]	@ (8009274 <UART_SetConfig+0x5c4>)
 8009024:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009028:	461a      	mov	r2, r3
 800902a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800902c:	fbb3 f3f2 	udiv	r3, r3, r2
 8009030:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009032:	697b      	ldr	r3, [r7, #20]
 8009034:	685a      	ldr	r2, [r3, #4]
 8009036:	4613      	mov	r3, r2
 8009038:	005b      	lsls	r3, r3, #1
 800903a:	4413      	add	r3, r2
 800903c:	69ba      	ldr	r2, [r7, #24]
 800903e:	429a      	cmp	r2, r3
 8009040:	d305      	bcc.n	800904e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009042:	697b      	ldr	r3, [r7, #20]
 8009044:	685b      	ldr	r3, [r3, #4]
 8009046:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009048:	69ba      	ldr	r2, [r7, #24]
 800904a:	429a      	cmp	r2, r3
 800904c:	d903      	bls.n	8009056 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800904e:	2301      	movs	r3, #1
 8009050:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009054:	e113      	b.n	800927e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009056:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009058:	2200      	movs	r2, #0
 800905a:	60bb      	str	r3, [r7, #8]
 800905c:	60fa      	str	r2, [r7, #12]
 800905e:	697b      	ldr	r3, [r7, #20]
 8009060:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009062:	4a84      	ldr	r2, [pc, #528]	@ (8009274 <UART_SetConfig+0x5c4>)
 8009064:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009068:	b29b      	uxth	r3, r3
 800906a:	2200      	movs	r2, #0
 800906c:	603b      	str	r3, [r7, #0]
 800906e:	607a      	str	r2, [r7, #4]
 8009070:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009074:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009078:	f7f7 f8ce 	bl	8000218 <__aeabi_uldivmod>
 800907c:	4602      	mov	r2, r0
 800907e:	460b      	mov	r3, r1
 8009080:	4610      	mov	r0, r2
 8009082:	4619      	mov	r1, r3
 8009084:	f04f 0200 	mov.w	r2, #0
 8009088:	f04f 0300 	mov.w	r3, #0
 800908c:	020b      	lsls	r3, r1, #8
 800908e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009092:	0202      	lsls	r2, r0, #8
 8009094:	6979      	ldr	r1, [r7, #20]
 8009096:	6849      	ldr	r1, [r1, #4]
 8009098:	0849      	lsrs	r1, r1, #1
 800909a:	2000      	movs	r0, #0
 800909c:	460c      	mov	r4, r1
 800909e:	4605      	mov	r5, r0
 80090a0:	eb12 0804 	adds.w	r8, r2, r4
 80090a4:	eb43 0905 	adc.w	r9, r3, r5
 80090a8:	697b      	ldr	r3, [r7, #20]
 80090aa:	685b      	ldr	r3, [r3, #4]
 80090ac:	2200      	movs	r2, #0
 80090ae:	469a      	mov	sl, r3
 80090b0:	4693      	mov	fp, r2
 80090b2:	4652      	mov	r2, sl
 80090b4:	465b      	mov	r3, fp
 80090b6:	4640      	mov	r0, r8
 80090b8:	4649      	mov	r1, r9
 80090ba:	f7f7 f8ad 	bl	8000218 <__aeabi_uldivmod>
 80090be:	4602      	mov	r2, r0
 80090c0:	460b      	mov	r3, r1
 80090c2:	4613      	mov	r3, r2
 80090c4:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80090c6:	6a3b      	ldr	r3, [r7, #32]
 80090c8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80090cc:	d308      	bcc.n	80090e0 <UART_SetConfig+0x430>
 80090ce:	6a3b      	ldr	r3, [r7, #32]
 80090d0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80090d4:	d204      	bcs.n	80090e0 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80090d6:	697b      	ldr	r3, [r7, #20]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	6a3a      	ldr	r2, [r7, #32]
 80090dc:	60da      	str	r2, [r3, #12]
 80090de:	e0ce      	b.n	800927e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80090e0:	2301      	movs	r3, #1
 80090e2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80090e6:	e0ca      	b.n	800927e <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80090e8:	697b      	ldr	r3, [r7, #20]
 80090ea:	69db      	ldr	r3, [r3, #28]
 80090ec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80090f0:	d166      	bne.n	80091c0 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80090f2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80090f6:	2b08      	cmp	r3, #8
 80090f8:	d827      	bhi.n	800914a <UART_SetConfig+0x49a>
 80090fa:	a201      	add	r2, pc, #4	@ (adr r2, 8009100 <UART_SetConfig+0x450>)
 80090fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009100:	08009125 	.word	0x08009125
 8009104:	0800912d 	.word	0x0800912d
 8009108:	08009135 	.word	0x08009135
 800910c:	0800914b 	.word	0x0800914b
 8009110:	0800913b 	.word	0x0800913b
 8009114:	0800914b 	.word	0x0800914b
 8009118:	0800914b 	.word	0x0800914b
 800911c:	0800914b 	.word	0x0800914b
 8009120:	08009143 	.word	0x08009143
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009124:	f7fc fa82 	bl	800562c <HAL_RCC_GetPCLK1Freq>
 8009128:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800912a:	e014      	b.n	8009156 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800912c:	f7fc fa94 	bl	8005658 <HAL_RCC_GetPCLK2Freq>
 8009130:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009132:	e010      	b.n	8009156 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009134:	4b4e      	ldr	r3, [pc, #312]	@ (8009270 <UART_SetConfig+0x5c0>)
 8009136:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009138:	e00d      	b.n	8009156 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800913a:	f7fc fa09 	bl	8005550 <HAL_RCC_GetSysClockFreq>
 800913e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009140:	e009      	b.n	8009156 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009142:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009146:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009148:	e005      	b.n	8009156 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800914a:	2300      	movs	r3, #0
 800914c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800914e:	2301      	movs	r3, #1
 8009150:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009154:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009156:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009158:	2b00      	cmp	r3, #0
 800915a:	f000 8090 	beq.w	800927e <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800915e:	697b      	ldr	r3, [r7, #20]
 8009160:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009162:	4a44      	ldr	r2, [pc, #272]	@ (8009274 <UART_SetConfig+0x5c4>)
 8009164:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009168:	461a      	mov	r2, r3
 800916a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800916c:	fbb3 f3f2 	udiv	r3, r3, r2
 8009170:	005a      	lsls	r2, r3, #1
 8009172:	697b      	ldr	r3, [r7, #20]
 8009174:	685b      	ldr	r3, [r3, #4]
 8009176:	085b      	lsrs	r3, r3, #1
 8009178:	441a      	add	r2, r3
 800917a:	697b      	ldr	r3, [r7, #20]
 800917c:	685b      	ldr	r3, [r3, #4]
 800917e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009182:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009184:	6a3b      	ldr	r3, [r7, #32]
 8009186:	2b0f      	cmp	r3, #15
 8009188:	d916      	bls.n	80091b8 <UART_SetConfig+0x508>
 800918a:	6a3b      	ldr	r3, [r7, #32]
 800918c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009190:	d212      	bcs.n	80091b8 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009192:	6a3b      	ldr	r3, [r7, #32]
 8009194:	b29b      	uxth	r3, r3
 8009196:	f023 030f 	bic.w	r3, r3, #15
 800919a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800919c:	6a3b      	ldr	r3, [r7, #32]
 800919e:	085b      	lsrs	r3, r3, #1
 80091a0:	b29b      	uxth	r3, r3
 80091a2:	f003 0307 	and.w	r3, r3, #7
 80091a6:	b29a      	uxth	r2, r3
 80091a8:	8bfb      	ldrh	r3, [r7, #30]
 80091aa:	4313      	orrs	r3, r2
 80091ac:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80091ae:	697b      	ldr	r3, [r7, #20]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	8bfa      	ldrh	r2, [r7, #30]
 80091b4:	60da      	str	r2, [r3, #12]
 80091b6:	e062      	b.n	800927e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80091b8:	2301      	movs	r3, #1
 80091ba:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80091be:	e05e      	b.n	800927e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80091c0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80091c4:	2b08      	cmp	r3, #8
 80091c6:	d828      	bhi.n	800921a <UART_SetConfig+0x56a>
 80091c8:	a201      	add	r2, pc, #4	@ (adr r2, 80091d0 <UART_SetConfig+0x520>)
 80091ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091ce:	bf00      	nop
 80091d0:	080091f5 	.word	0x080091f5
 80091d4:	080091fd 	.word	0x080091fd
 80091d8:	08009205 	.word	0x08009205
 80091dc:	0800921b 	.word	0x0800921b
 80091e0:	0800920b 	.word	0x0800920b
 80091e4:	0800921b 	.word	0x0800921b
 80091e8:	0800921b 	.word	0x0800921b
 80091ec:	0800921b 	.word	0x0800921b
 80091f0:	08009213 	.word	0x08009213
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80091f4:	f7fc fa1a 	bl	800562c <HAL_RCC_GetPCLK1Freq>
 80091f8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80091fa:	e014      	b.n	8009226 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80091fc:	f7fc fa2c 	bl	8005658 <HAL_RCC_GetPCLK2Freq>
 8009200:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009202:	e010      	b.n	8009226 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009204:	4b1a      	ldr	r3, [pc, #104]	@ (8009270 <UART_SetConfig+0x5c0>)
 8009206:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009208:	e00d      	b.n	8009226 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800920a:	f7fc f9a1 	bl	8005550 <HAL_RCC_GetSysClockFreq>
 800920e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009210:	e009      	b.n	8009226 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009212:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009216:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009218:	e005      	b.n	8009226 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800921a:	2300      	movs	r3, #0
 800921c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800921e:	2301      	movs	r3, #1
 8009220:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009224:	bf00      	nop
    }

    if (pclk != 0U)
 8009226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009228:	2b00      	cmp	r3, #0
 800922a:	d028      	beq.n	800927e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800922c:	697b      	ldr	r3, [r7, #20]
 800922e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009230:	4a10      	ldr	r2, [pc, #64]	@ (8009274 <UART_SetConfig+0x5c4>)
 8009232:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009236:	461a      	mov	r2, r3
 8009238:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800923a:	fbb3 f2f2 	udiv	r2, r3, r2
 800923e:	697b      	ldr	r3, [r7, #20]
 8009240:	685b      	ldr	r3, [r3, #4]
 8009242:	085b      	lsrs	r3, r3, #1
 8009244:	441a      	add	r2, r3
 8009246:	697b      	ldr	r3, [r7, #20]
 8009248:	685b      	ldr	r3, [r3, #4]
 800924a:	fbb2 f3f3 	udiv	r3, r2, r3
 800924e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009250:	6a3b      	ldr	r3, [r7, #32]
 8009252:	2b0f      	cmp	r3, #15
 8009254:	d910      	bls.n	8009278 <UART_SetConfig+0x5c8>
 8009256:	6a3b      	ldr	r3, [r7, #32]
 8009258:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800925c:	d20c      	bcs.n	8009278 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800925e:	6a3b      	ldr	r3, [r7, #32]
 8009260:	b29a      	uxth	r2, r3
 8009262:	697b      	ldr	r3, [r7, #20]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	60da      	str	r2, [r3, #12]
 8009268:	e009      	b.n	800927e <UART_SetConfig+0x5ce>
 800926a:	bf00      	nop
 800926c:	40008000 	.word	0x40008000
 8009270:	00f42400 	.word	0x00f42400
 8009274:	0800b254 	.word	0x0800b254
      }
      else
      {
        ret = HAL_ERROR;
 8009278:	2301      	movs	r3, #1
 800927a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800927e:	697b      	ldr	r3, [r7, #20]
 8009280:	2201      	movs	r2, #1
 8009282:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8009286:	697b      	ldr	r3, [r7, #20]
 8009288:	2201      	movs	r2, #1
 800928a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800928e:	697b      	ldr	r3, [r7, #20]
 8009290:	2200      	movs	r2, #0
 8009292:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8009294:	697b      	ldr	r3, [r7, #20]
 8009296:	2200      	movs	r2, #0
 8009298:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800929a:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800929e:	4618      	mov	r0, r3
 80092a0:	3730      	adds	r7, #48	@ 0x30
 80092a2:	46bd      	mov	sp, r7
 80092a4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080092a8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80092a8:	b480      	push	{r7}
 80092aa:	b083      	sub	sp, #12
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092b4:	f003 0308 	and.w	r3, r3, #8
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d00a      	beq.n	80092d2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	685b      	ldr	r3, [r3, #4]
 80092c2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	430a      	orrs	r2, r1
 80092d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092d6:	f003 0301 	and.w	r3, r3, #1
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d00a      	beq.n	80092f4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	685b      	ldr	r3, [r3, #4]
 80092e4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	430a      	orrs	r2, r1
 80092f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092f8:	f003 0302 	and.w	r3, r3, #2
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d00a      	beq.n	8009316 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	685b      	ldr	r3, [r3, #4]
 8009306:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	430a      	orrs	r2, r1
 8009314:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800931a:	f003 0304 	and.w	r3, r3, #4
 800931e:	2b00      	cmp	r3, #0
 8009320:	d00a      	beq.n	8009338 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	685b      	ldr	r3, [r3, #4]
 8009328:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	430a      	orrs	r2, r1
 8009336:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800933c:	f003 0310 	and.w	r3, r3, #16
 8009340:	2b00      	cmp	r3, #0
 8009342:	d00a      	beq.n	800935a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	689b      	ldr	r3, [r3, #8]
 800934a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	430a      	orrs	r2, r1
 8009358:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800935e:	f003 0320 	and.w	r3, r3, #32
 8009362:	2b00      	cmp	r3, #0
 8009364:	d00a      	beq.n	800937c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	689b      	ldr	r3, [r3, #8]
 800936c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	430a      	orrs	r2, r1
 800937a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009380:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009384:	2b00      	cmp	r3, #0
 8009386:	d01a      	beq.n	80093be <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	685b      	ldr	r3, [r3, #4]
 800938e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	430a      	orrs	r2, r1
 800939c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80093a2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80093a6:	d10a      	bne.n	80093be <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	685b      	ldr	r3, [r3, #4]
 80093ae:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	430a      	orrs	r2, r1
 80093bc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80093c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d00a      	beq.n	80093e0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	685b      	ldr	r3, [r3, #4]
 80093d0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	430a      	orrs	r2, r1
 80093de:	605a      	str	r2, [r3, #4]
  }
}
 80093e0:	bf00      	nop
 80093e2:	370c      	adds	r7, #12
 80093e4:	46bd      	mov	sp, r7
 80093e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ea:	4770      	bx	lr

080093ec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80093ec:	b580      	push	{r7, lr}
 80093ee:	b098      	sub	sp, #96	@ 0x60
 80093f0:	af02      	add	r7, sp, #8
 80093f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	2200      	movs	r2, #0
 80093f8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80093fc:	f7f9 fadc 	bl	80029b8 <HAL_GetTick>
 8009400:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	f003 0308 	and.w	r3, r3, #8
 800940c:	2b08      	cmp	r3, #8
 800940e:	d12f      	bne.n	8009470 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009410:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009414:	9300      	str	r3, [sp, #0]
 8009416:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009418:	2200      	movs	r2, #0
 800941a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800941e:	6878      	ldr	r0, [r7, #4]
 8009420:	f000 f88e 	bl	8009540 <UART_WaitOnFlagUntilTimeout>
 8009424:	4603      	mov	r3, r0
 8009426:	2b00      	cmp	r3, #0
 8009428:	d022      	beq.n	8009470 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009430:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009432:	e853 3f00 	ldrex	r3, [r3]
 8009436:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009438:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800943a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800943e:	653b      	str	r3, [r7, #80]	@ 0x50
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	461a      	mov	r2, r3
 8009446:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009448:	647b      	str	r3, [r7, #68]	@ 0x44
 800944a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800944c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800944e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009450:	e841 2300 	strex	r3, r2, [r1]
 8009454:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009456:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009458:	2b00      	cmp	r3, #0
 800945a:	d1e6      	bne.n	800942a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	2220      	movs	r2, #32
 8009460:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	2200      	movs	r2, #0
 8009468:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800946c:	2303      	movs	r3, #3
 800946e:	e063      	b.n	8009538 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	f003 0304 	and.w	r3, r3, #4
 800947a:	2b04      	cmp	r3, #4
 800947c:	d149      	bne.n	8009512 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800947e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009482:	9300      	str	r3, [sp, #0]
 8009484:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009486:	2200      	movs	r2, #0
 8009488:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800948c:	6878      	ldr	r0, [r7, #4]
 800948e:	f000 f857 	bl	8009540 <UART_WaitOnFlagUntilTimeout>
 8009492:	4603      	mov	r3, r0
 8009494:	2b00      	cmp	r3, #0
 8009496:	d03c      	beq.n	8009512 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800949e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094a0:	e853 3f00 	ldrex	r3, [r3]
 80094a4:	623b      	str	r3, [r7, #32]
   return(result);
 80094a6:	6a3b      	ldr	r3, [r7, #32]
 80094a8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80094ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	461a      	mov	r2, r3
 80094b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80094b6:	633b      	str	r3, [r7, #48]	@ 0x30
 80094b8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094ba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80094bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80094be:	e841 2300 	strex	r3, r2, [r1]
 80094c2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80094c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d1e6      	bne.n	8009498 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	3308      	adds	r3, #8
 80094d0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094d2:	693b      	ldr	r3, [r7, #16]
 80094d4:	e853 3f00 	ldrex	r3, [r3]
 80094d8:	60fb      	str	r3, [r7, #12]
   return(result);
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	f023 0301 	bic.w	r3, r3, #1
 80094e0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	3308      	adds	r3, #8
 80094e8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80094ea:	61fa      	str	r2, [r7, #28]
 80094ec:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094ee:	69b9      	ldr	r1, [r7, #24]
 80094f0:	69fa      	ldr	r2, [r7, #28]
 80094f2:	e841 2300 	strex	r3, r2, [r1]
 80094f6:	617b      	str	r3, [r7, #20]
   return(result);
 80094f8:	697b      	ldr	r3, [r7, #20]
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d1e5      	bne.n	80094ca <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	2220      	movs	r2, #32
 8009502:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	2200      	movs	r2, #0
 800950a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800950e:	2303      	movs	r3, #3
 8009510:	e012      	b.n	8009538 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	2220      	movs	r2, #32
 8009516:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	2220      	movs	r2, #32
 800951e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	2200      	movs	r2, #0
 8009526:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	2200      	movs	r2, #0
 800952c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	2200      	movs	r2, #0
 8009532:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009536:	2300      	movs	r3, #0
}
 8009538:	4618      	mov	r0, r3
 800953a:	3758      	adds	r7, #88	@ 0x58
 800953c:	46bd      	mov	sp, r7
 800953e:	bd80      	pop	{r7, pc}

08009540 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009540:	b580      	push	{r7, lr}
 8009542:	b084      	sub	sp, #16
 8009544:	af00      	add	r7, sp, #0
 8009546:	60f8      	str	r0, [r7, #12]
 8009548:	60b9      	str	r1, [r7, #8]
 800954a:	603b      	str	r3, [r7, #0]
 800954c:	4613      	mov	r3, r2
 800954e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009550:	e04f      	b.n	80095f2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009552:	69bb      	ldr	r3, [r7, #24]
 8009554:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009558:	d04b      	beq.n	80095f2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800955a:	f7f9 fa2d 	bl	80029b8 <HAL_GetTick>
 800955e:	4602      	mov	r2, r0
 8009560:	683b      	ldr	r3, [r7, #0]
 8009562:	1ad3      	subs	r3, r2, r3
 8009564:	69ba      	ldr	r2, [r7, #24]
 8009566:	429a      	cmp	r2, r3
 8009568:	d302      	bcc.n	8009570 <UART_WaitOnFlagUntilTimeout+0x30>
 800956a:	69bb      	ldr	r3, [r7, #24]
 800956c:	2b00      	cmp	r3, #0
 800956e:	d101      	bne.n	8009574 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009570:	2303      	movs	r3, #3
 8009572:	e04e      	b.n	8009612 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	f003 0304 	and.w	r3, r3, #4
 800957e:	2b00      	cmp	r3, #0
 8009580:	d037      	beq.n	80095f2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009582:	68bb      	ldr	r3, [r7, #8]
 8009584:	2b80      	cmp	r3, #128	@ 0x80
 8009586:	d034      	beq.n	80095f2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009588:	68bb      	ldr	r3, [r7, #8]
 800958a:	2b40      	cmp	r3, #64	@ 0x40
 800958c:	d031      	beq.n	80095f2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	69db      	ldr	r3, [r3, #28]
 8009594:	f003 0308 	and.w	r3, r3, #8
 8009598:	2b08      	cmp	r3, #8
 800959a:	d110      	bne.n	80095be <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	2208      	movs	r2, #8
 80095a2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80095a4:	68f8      	ldr	r0, [r7, #12]
 80095a6:	f000 f99c 	bl	80098e2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	2208      	movs	r2, #8
 80095ae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	2200      	movs	r2, #0
 80095b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80095ba:	2301      	movs	r3, #1
 80095bc:	e029      	b.n	8009612 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	69db      	ldr	r3, [r3, #28]
 80095c4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80095c8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80095cc:	d111      	bne.n	80095f2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80095d6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80095d8:	68f8      	ldr	r0, [r7, #12]
 80095da:	f000 f982 	bl	80098e2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	2220      	movs	r2, #32
 80095e2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	2200      	movs	r2, #0
 80095ea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80095ee:	2303      	movs	r3, #3
 80095f0:	e00f      	b.n	8009612 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	69da      	ldr	r2, [r3, #28]
 80095f8:	68bb      	ldr	r3, [r7, #8]
 80095fa:	4013      	ands	r3, r2
 80095fc:	68ba      	ldr	r2, [r7, #8]
 80095fe:	429a      	cmp	r2, r3
 8009600:	bf0c      	ite	eq
 8009602:	2301      	moveq	r3, #1
 8009604:	2300      	movne	r3, #0
 8009606:	b2db      	uxtb	r3, r3
 8009608:	461a      	mov	r2, r3
 800960a:	79fb      	ldrb	r3, [r7, #7]
 800960c:	429a      	cmp	r2, r3
 800960e:	d0a0      	beq.n	8009552 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009610:	2300      	movs	r3, #0
}
 8009612:	4618      	mov	r0, r3
 8009614:	3710      	adds	r7, #16
 8009616:	46bd      	mov	sp, r7
 8009618:	bd80      	pop	{r7, pc}
	...

0800961c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800961c:	b480      	push	{r7}
 800961e:	b0a3      	sub	sp, #140	@ 0x8c
 8009620:	af00      	add	r7, sp, #0
 8009622:	60f8      	str	r0, [r7, #12]
 8009624:	60b9      	str	r1, [r7, #8]
 8009626:	4613      	mov	r3, r2
 8009628:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	68ba      	ldr	r2, [r7, #8]
 800962e:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	88fa      	ldrh	r2, [r7, #6]
 8009634:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	88fa      	ldrh	r2, [r7, #6]
 800963c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	2200      	movs	r2, #0
 8009644:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	689b      	ldr	r3, [r3, #8]
 800964a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800964e:	d10e      	bne.n	800966e <UART_Start_Receive_IT+0x52>
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	691b      	ldr	r3, [r3, #16]
 8009654:	2b00      	cmp	r3, #0
 8009656:	d105      	bne.n	8009664 <UART_Start_Receive_IT+0x48>
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800965e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009662:	e02d      	b.n	80096c0 <UART_Start_Receive_IT+0xa4>
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	22ff      	movs	r2, #255	@ 0xff
 8009668:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800966c:	e028      	b.n	80096c0 <UART_Start_Receive_IT+0xa4>
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	689b      	ldr	r3, [r3, #8]
 8009672:	2b00      	cmp	r3, #0
 8009674:	d10d      	bne.n	8009692 <UART_Start_Receive_IT+0x76>
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	691b      	ldr	r3, [r3, #16]
 800967a:	2b00      	cmp	r3, #0
 800967c:	d104      	bne.n	8009688 <UART_Start_Receive_IT+0x6c>
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	22ff      	movs	r2, #255	@ 0xff
 8009682:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009686:	e01b      	b.n	80096c0 <UART_Start_Receive_IT+0xa4>
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	227f      	movs	r2, #127	@ 0x7f
 800968c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009690:	e016      	b.n	80096c0 <UART_Start_Receive_IT+0xa4>
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	689b      	ldr	r3, [r3, #8]
 8009696:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800969a:	d10d      	bne.n	80096b8 <UART_Start_Receive_IT+0x9c>
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	691b      	ldr	r3, [r3, #16]
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d104      	bne.n	80096ae <UART_Start_Receive_IT+0x92>
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	227f      	movs	r2, #127	@ 0x7f
 80096a8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80096ac:	e008      	b.n	80096c0 <UART_Start_Receive_IT+0xa4>
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	223f      	movs	r2, #63	@ 0x3f
 80096b2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80096b6:	e003      	b.n	80096c0 <UART_Start_Receive_IT+0xa4>
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	2200      	movs	r2, #0
 80096bc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	2200      	movs	r2, #0
 80096c4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	2222      	movs	r2, #34	@ 0x22
 80096cc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	3308      	adds	r3, #8
 80096d6:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096d8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80096da:	e853 3f00 	ldrex	r3, [r3]
 80096de:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 80096e0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80096e2:	f043 0301 	orr.w	r3, r3, #1
 80096e6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	3308      	adds	r3, #8
 80096f0:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80096f4:	673a      	str	r2, [r7, #112]	@ 0x70
 80096f6:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096f8:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80096fa:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80096fc:	e841 2300 	strex	r3, r2, [r1]
 8009700:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 8009702:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009704:	2b00      	cmp	r3, #0
 8009706:	d1e3      	bne.n	80096d0 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800970c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009710:	d14f      	bne.n	80097b2 <UART_Start_Receive_IT+0x196>
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009718:	88fa      	ldrh	r2, [r7, #6]
 800971a:	429a      	cmp	r2, r3
 800971c:	d349      	bcc.n	80097b2 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	689b      	ldr	r3, [r3, #8]
 8009722:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009726:	d107      	bne.n	8009738 <UART_Start_Receive_IT+0x11c>
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	691b      	ldr	r3, [r3, #16]
 800972c:	2b00      	cmp	r3, #0
 800972e:	d103      	bne.n	8009738 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	4a47      	ldr	r2, [pc, #284]	@ (8009850 <UART_Start_Receive_IT+0x234>)
 8009734:	675a      	str	r2, [r3, #116]	@ 0x74
 8009736:	e002      	b.n	800973e <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	4a46      	ldr	r2, [pc, #280]	@ (8009854 <UART_Start_Receive_IT+0x238>)
 800973c:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	691b      	ldr	r3, [r3, #16]
 8009742:	2b00      	cmp	r3, #0
 8009744:	d01a      	beq.n	800977c <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800974c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800974e:	e853 3f00 	ldrex	r3, [r3]
 8009752:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8009754:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009756:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800975a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	461a      	mov	r2, r3
 8009764:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009768:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800976a:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800976c:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800976e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8009770:	e841 2300 	strex	r3, r2, [r1]
 8009774:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8009776:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009778:	2b00      	cmp	r3, #0
 800977a:	d1e4      	bne.n	8009746 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	3308      	adds	r3, #8
 8009782:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009784:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009786:	e853 3f00 	ldrex	r3, [r3]
 800978a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800978c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800978e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009792:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	3308      	adds	r3, #8
 800979a:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800979c:	64ba      	str	r2, [r7, #72]	@ 0x48
 800979e:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097a0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80097a2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80097a4:	e841 2300 	strex	r3, r2, [r1]
 80097a8:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80097aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d1e5      	bne.n	800977c <UART_Start_Receive_IT+0x160>
 80097b0:	e046      	b.n	8009840 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	689b      	ldr	r3, [r3, #8]
 80097b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80097ba:	d107      	bne.n	80097cc <UART_Start_Receive_IT+0x1b0>
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	691b      	ldr	r3, [r3, #16]
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d103      	bne.n	80097cc <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	4a24      	ldr	r2, [pc, #144]	@ (8009858 <UART_Start_Receive_IT+0x23c>)
 80097c8:	675a      	str	r2, [r3, #116]	@ 0x74
 80097ca:	e002      	b.n	80097d2 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	4a23      	ldr	r2, [pc, #140]	@ (800985c <UART_Start_Receive_IT+0x240>)
 80097d0:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	691b      	ldr	r3, [r3, #16]
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d019      	beq.n	800980e <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097e2:	e853 3f00 	ldrex	r3, [r3]
 80097e6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80097e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097ea:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 80097ee:	677b      	str	r3, [r7, #116]	@ 0x74
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	461a      	mov	r2, r3
 80097f6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80097f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80097fa:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097fc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80097fe:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009800:	e841 2300 	strex	r3, r2, [r1]
 8009804:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8009806:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009808:	2b00      	cmp	r3, #0
 800980a:	d1e6      	bne.n	80097da <UART_Start_Receive_IT+0x1be>
 800980c:	e018      	b.n	8009840 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009814:	697b      	ldr	r3, [r7, #20]
 8009816:	e853 3f00 	ldrex	r3, [r3]
 800981a:	613b      	str	r3, [r7, #16]
   return(result);
 800981c:	693b      	ldr	r3, [r7, #16]
 800981e:	f043 0320 	orr.w	r3, r3, #32
 8009822:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	461a      	mov	r2, r3
 800982a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800982c:	623b      	str	r3, [r7, #32]
 800982e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009830:	69f9      	ldr	r1, [r7, #28]
 8009832:	6a3a      	ldr	r2, [r7, #32]
 8009834:	e841 2300 	strex	r3, r2, [r1]
 8009838:	61bb      	str	r3, [r7, #24]
   return(result);
 800983a:	69bb      	ldr	r3, [r7, #24]
 800983c:	2b00      	cmp	r3, #0
 800983e:	d1e6      	bne.n	800980e <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8009840:	2300      	movs	r3, #0
}
 8009842:	4618      	mov	r0, r3
 8009844:	378c      	adds	r7, #140	@ 0x8c
 8009846:	46bd      	mov	sp, r7
 8009848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800984c:	4770      	bx	lr
 800984e:	bf00      	nop
 8009850:	0800a265 	.word	0x0800a265
 8009854:	08009ef5 	.word	0x08009ef5
 8009858:	08009d35 	.word	0x08009d35
 800985c:	08009b75 	.word	0x08009b75

08009860 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009860:	b480      	push	{r7}
 8009862:	b08f      	sub	sp, #60	@ 0x3c
 8009864:	af00      	add	r7, sp, #0
 8009866:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800986e:	6a3b      	ldr	r3, [r7, #32]
 8009870:	e853 3f00 	ldrex	r3, [r3]
 8009874:	61fb      	str	r3, [r7, #28]
   return(result);
 8009876:	69fb      	ldr	r3, [r7, #28]
 8009878:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800987c:	637b      	str	r3, [r7, #52]	@ 0x34
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	461a      	mov	r2, r3
 8009884:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009886:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009888:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800988a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800988c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800988e:	e841 2300 	strex	r3, r2, [r1]
 8009892:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009894:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009896:	2b00      	cmp	r3, #0
 8009898:	d1e6      	bne.n	8009868 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	3308      	adds	r3, #8
 80098a0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	e853 3f00 	ldrex	r3, [r3]
 80098a8:	60bb      	str	r3, [r7, #8]
   return(result);
 80098aa:	68bb      	ldr	r3, [r7, #8]
 80098ac:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80098b0:	633b      	str	r3, [r7, #48]	@ 0x30
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	3308      	adds	r3, #8
 80098b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80098ba:	61ba      	str	r2, [r7, #24]
 80098bc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098be:	6979      	ldr	r1, [r7, #20]
 80098c0:	69ba      	ldr	r2, [r7, #24]
 80098c2:	e841 2300 	strex	r3, r2, [r1]
 80098c6:	613b      	str	r3, [r7, #16]
   return(result);
 80098c8:	693b      	ldr	r3, [r7, #16]
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d1e5      	bne.n	800989a <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	2220      	movs	r2, #32
 80098d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 80098d6:	bf00      	nop
 80098d8:	373c      	adds	r7, #60	@ 0x3c
 80098da:	46bd      	mov	sp, r7
 80098dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e0:	4770      	bx	lr

080098e2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80098e2:	b480      	push	{r7}
 80098e4:	b095      	sub	sp, #84	@ 0x54
 80098e6:	af00      	add	r7, sp, #0
 80098e8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80098f2:	e853 3f00 	ldrex	r3, [r3]
 80098f6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80098f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098fa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80098fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	461a      	mov	r2, r3
 8009906:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009908:	643b      	str	r3, [r7, #64]	@ 0x40
 800990a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800990c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800990e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009910:	e841 2300 	strex	r3, r2, [r1]
 8009914:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009916:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009918:	2b00      	cmp	r3, #0
 800991a:	d1e6      	bne.n	80098ea <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	3308      	adds	r3, #8
 8009922:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009924:	6a3b      	ldr	r3, [r7, #32]
 8009926:	e853 3f00 	ldrex	r3, [r3]
 800992a:	61fb      	str	r3, [r7, #28]
   return(result);
 800992c:	69fb      	ldr	r3, [r7, #28]
 800992e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009932:	f023 0301 	bic.w	r3, r3, #1
 8009936:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	3308      	adds	r3, #8
 800993e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009940:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009942:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009944:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009946:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009948:	e841 2300 	strex	r3, r2, [r1]
 800994c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800994e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009950:	2b00      	cmp	r3, #0
 8009952:	d1e3      	bne.n	800991c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009958:	2b01      	cmp	r3, #1
 800995a:	d118      	bne.n	800998e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	e853 3f00 	ldrex	r3, [r3]
 8009968:	60bb      	str	r3, [r7, #8]
   return(result);
 800996a:	68bb      	ldr	r3, [r7, #8]
 800996c:	f023 0310 	bic.w	r3, r3, #16
 8009970:	647b      	str	r3, [r7, #68]	@ 0x44
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	461a      	mov	r2, r3
 8009978:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800997a:	61bb      	str	r3, [r7, #24]
 800997c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800997e:	6979      	ldr	r1, [r7, #20]
 8009980:	69ba      	ldr	r2, [r7, #24]
 8009982:	e841 2300 	strex	r3, r2, [r1]
 8009986:	613b      	str	r3, [r7, #16]
   return(result);
 8009988:	693b      	ldr	r3, [r7, #16]
 800998a:	2b00      	cmp	r3, #0
 800998c:	d1e6      	bne.n	800995c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	2220      	movs	r2, #32
 8009992:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	2200      	movs	r2, #0
 800999a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	2200      	movs	r2, #0
 80099a0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80099a2:	bf00      	nop
 80099a4:	3754      	adds	r7, #84	@ 0x54
 80099a6:	46bd      	mov	sp, r7
 80099a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ac:	4770      	bx	lr

080099ae <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80099ae:	b580      	push	{r7, lr}
 80099b0:	b090      	sub	sp, #64	@ 0x40
 80099b2:	af00      	add	r7, sp, #0
 80099b4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80099ba:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	f003 0320 	and.w	r3, r3, #32
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d137      	bne.n	8009a3a <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 80099ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80099cc:	2200      	movs	r2, #0
 80099ce:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80099d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	3308      	adds	r3, #8
 80099d8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099dc:	e853 3f00 	ldrex	r3, [r3]
 80099e0:	623b      	str	r3, [r7, #32]
   return(result);
 80099e2:	6a3b      	ldr	r3, [r7, #32]
 80099e4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80099e8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80099ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	3308      	adds	r3, #8
 80099f0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80099f2:	633a      	str	r2, [r7, #48]	@ 0x30
 80099f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099f6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80099f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80099fa:	e841 2300 	strex	r3, r2, [r1]
 80099fe:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009a00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d1e5      	bne.n	80099d2 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009a06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a0c:	693b      	ldr	r3, [r7, #16]
 8009a0e:	e853 3f00 	ldrex	r3, [r3]
 8009a12:	60fb      	str	r3, [r7, #12]
   return(result);
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009a1a:	637b      	str	r3, [r7, #52]	@ 0x34
 8009a1c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	461a      	mov	r2, r3
 8009a22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009a24:	61fb      	str	r3, [r7, #28]
 8009a26:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a28:	69b9      	ldr	r1, [r7, #24]
 8009a2a:	69fa      	ldr	r2, [r7, #28]
 8009a2c:	e841 2300 	strex	r3, r2, [r1]
 8009a30:	617b      	str	r3, [r7, #20]
   return(result);
 8009a32:	697b      	ldr	r3, [r7, #20]
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d1e6      	bne.n	8009a06 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009a38:	e004      	b.n	8009a44 <UART_DMATransmitCplt+0x96>
    huart->TxCpltCallback(huart);
 8009a3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009a3c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009a40:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8009a42:	4798      	blx	r3
}
 8009a44:	bf00      	nop
 8009a46:	3740      	adds	r7, #64	@ 0x40
 8009a48:	46bd      	mov	sp, r7
 8009a4a:	bd80      	pop	{r7, pc}

08009a4c <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009a4c:	b580      	push	{r7, lr}
 8009a4e:	b084      	sub	sp, #16
 8009a50:	af00      	add	r7, sp, #0
 8009a52:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a58:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009a60:	68f8      	ldr	r0, [r7, #12]
 8009a62:	4798      	blx	r3
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009a64:	bf00      	nop
 8009a66:	3710      	adds	r7, #16
 8009a68:	46bd      	mov	sp, r7
 8009a6a:	bd80      	pop	{r7, pc}

08009a6c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009a6c:	b580      	push	{r7, lr}
 8009a6e:	b086      	sub	sp, #24
 8009a70:	af00      	add	r7, sp, #0
 8009a72:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a78:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8009a7a:	697b      	ldr	r3, [r7, #20]
 8009a7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009a80:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8009a82:	697b      	ldr	r3, [r7, #20]
 8009a84:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009a88:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8009a8a:	697b      	ldr	r3, [r7, #20]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	689b      	ldr	r3, [r3, #8]
 8009a90:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009a94:	2b80      	cmp	r3, #128	@ 0x80
 8009a96:	d109      	bne.n	8009aac <UART_DMAError+0x40>
 8009a98:	693b      	ldr	r3, [r7, #16]
 8009a9a:	2b21      	cmp	r3, #33	@ 0x21
 8009a9c:	d106      	bne.n	8009aac <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8009a9e:	697b      	ldr	r3, [r7, #20]
 8009aa0:	2200      	movs	r2, #0
 8009aa2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8009aa6:	6978      	ldr	r0, [r7, #20]
 8009aa8:	f7ff feda 	bl	8009860 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8009aac:	697b      	ldr	r3, [r7, #20]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	689b      	ldr	r3, [r3, #8]
 8009ab2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009ab6:	2b40      	cmp	r3, #64	@ 0x40
 8009ab8:	d109      	bne.n	8009ace <UART_DMAError+0x62>
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	2b22      	cmp	r3, #34	@ 0x22
 8009abe:	d106      	bne.n	8009ace <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8009ac0:	697b      	ldr	r3, [r7, #20]
 8009ac2:	2200      	movs	r2, #0
 8009ac4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8009ac8:	6978      	ldr	r0, [r7, #20]
 8009aca:	f7ff ff0a 	bl	80098e2 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009ace:	697b      	ldr	r3, [r7, #20]
 8009ad0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009ad4:	f043 0210 	orr.w	r2, r3, #16
 8009ad8:	697b      	ldr	r3, [r7, #20]
 8009ada:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8009ade:	697b      	ldr	r3, [r7, #20]
 8009ae0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009ae4:	6978      	ldr	r0, [r7, #20]
 8009ae6:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009ae8:	bf00      	nop
 8009aea:	3718      	adds	r7, #24
 8009aec:	46bd      	mov	sp, r7
 8009aee:	bd80      	pop	{r7, pc}

08009af0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009af0:	b580      	push	{r7, lr}
 8009af2:	b084      	sub	sp, #16
 8009af4:	af00      	add	r7, sp, #0
 8009af6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009afc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	2200      	movs	r2, #0
 8009b02:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009b0c:	68f8      	ldr	r0, [r7, #12]
 8009b0e:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009b10:	bf00      	nop
 8009b12:	3710      	adds	r7, #16
 8009b14:	46bd      	mov	sp, r7
 8009b16:	bd80      	pop	{r7, pc}

08009b18 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009b18:	b580      	push	{r7, lr}
 8009b1a:	b088      	sub	sp, #32
 8009b1c:	af00      	add	r7, sp, #0
 8009b1e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	e853 3f00 	ldrex	r3, [r3]
 8009b2c:	60bb      	str	r3, [r7, #8]
   return(result);
 8009b2e:	68bb      	ldr	r3, [r7, #8]
 8009b30:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009b34:	61fb      	str	r3, [r7, #28]
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	461a      	mov	r2, r3
 8009b3c:	69fb      	ldr	r3, [r7, #28]
 8009b3e:	61bb      	str	r3, [r7, #24]
 8009b40:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b42:	6979      	ldr	r1, [r7, #20]
 8009b44:	69ba      	ldr	r2, [r7, #24]
 8009b46:	e841 2300 	strex	r3, r2, [r1]
 8009b4a:	613b      	str	r3, [r7, #16]
   return(result);
 8009b4c:	693b      	ldr	r3, [r7, #16]
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d1e6      	bne.n	8009b20 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	2220      	movs	r2, #32
 8009b56:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	2200      	movs	r2, #0
 8009b5e:	679a      	str	r2, [r3, #120]	@ 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009b66:	6878      	ldr	r0, [r7, #4]
 8009b68:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009b6a:	bf00      	nop
 8009b6c:	3720      	adds	r7, #32
 8009b6e:	46bd      	mov	sp, r7
 8009b70:	bd80      	pop	{r7, pc}
	...

08009b74 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8009b74:	b580      	push	{r7, lr}
 8009b76:	b09c      	sub	sp, #112	@ 0x70
 8009b78:	af00      	add	r7, sp, #0
 8009b7a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009b82:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009b8c:	2b22      	cmp	r3, #34	@ 0x22
 8009b8e:	f040 80c2 	bne.w	8009d16 <UART_RxISR_8BIT+0x1a2>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b98:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009b9c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8009ba0:	b2d9      	uxtb	r1, r3
 8009ba2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8009ba6:	b2da      	uxtb	r2, r3
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009bac:	400a      	ands	r2, r1
 8009bae:	b2d2      	uxtb	r2, r2
 8009bb0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009bb6:	1c5a      	adds	r2, r3, #1
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009bc2:	b29b      	uxth	r3, r3
 8009bc4:	3b01      	subs	r3, #1
 8009bc6:	b29a      	uxth	r2, r3
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009bd4:	b29b      	uxth	r3, r3
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	f040 80a5 	bne.w	8009d26 <UART_RxISR_8BIT+0x1b2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009be2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009be4:	e853 3f00 	ldrex	r3, [r3]
 8009be8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009bea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009bec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009bf0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	461a      	mov	r2, r3
 8009bf8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009bfa:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009bfc:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bfe:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009c00:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009c02:	e841 2300 	strex	r3, r2, [r1]
 8009c06:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009c08:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d1e6      	bne.n	8009bdc <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	3308      	adds	r3, #8
 8009c14:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c18:	e853 3f00 	ldrex	r3, [r3]
 8009c1c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009c1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c20:	f023 0301 	bic.w	r3, r3, #1
 8009c24:	667b      	str	r3, [r7, #100]	@ 0x64
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	3308      	adds	r3, #8
 8009c2c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8009c2e:	647a      	str	r2, [r7, #68]	@ 0x44
 8009c30:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c32:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009c34:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009c36:	e841 2300 	strex	r3, r2, [r1]
 8009c3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009c3c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d1e5      	bne.n	8009c0e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	2220      	movs	r2, #32
 8009c46:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	2200      	movs	r2, #0
 8009c4e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	2200      	movs	r2, #0
 8009c54:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	4a35      	ldr	r2, [pc, #212]	@ (8009d30 <UART_RxISR_8BIT+0x1bc>)
 8009c5c:	4293      	cmp	r3, r2
 8009c5e:	d01f      	beq.n	8009ca0 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	685b      	ldr	r3, [r3, #4]
 8009c66:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d018      	beq.n	8009ca0 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c76:	e853 3f00 	ldrex	r3, [r3]
 8009c7a:	623b      	str	r3, [r7, #32]
   return(result);
 8009c7c:	6a3b      	ldr	r3, [r7, #32]
 8009c7e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009c82:	663b      	str	r3, [r7, #96]	@ 0x60
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	461a      	mov	r2, r3
 8009c8a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009c8c:	633b      	str	r3, [r7, #48]	@ 0x30
 8009c8e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c90:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009c92:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009c94:	e841 2300 	strex	r3, r2, [r1]
 8009c98:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009c9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d1e6      	bne.n	8009c6e <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009ca4:	2b01      	cmp	r3, #1
 8009ca6:	d130      	bne.n	8009d0a <UART_RxISR_8BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	2200      	movs	r2, #0
 8009cac:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cb4:	693b      	ldr	r3, [r7, #16]
 8009cb6:	e853 3f00 	ldrex	r3, [r3]
 8009cba:	60fb      	str	r3, [r7, #12]
   return(result);
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	f023 0310 	bic.w	r3, r3, #16
 8009cc2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	461a      	mov	r2, r3
 8009cca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009ccc:	61fb      	str	r3, [r7, #28]
 8009cce:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cd0:	69b9      	ldr	r1, [r7, #24]
 8009cd2:	69fa      	ldr	r2, [r7, #28]
 8009cd4:	e841 2300 	strex	r3, r2, [r1]
 8009cd8:	617b      	str	r3, [r7, #20]
   return(result);
 8009cda:	697b      	ldr	r3, [r7, #20]
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d1e6      	bne.n	8009cae <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	69db      	ldr	r3, [r3, #28]
 8009ce6:	f003 0310 	and.w	r3, r3, #16
 8009cea:	2b10      	cmp	r3, #16
 8009cec:	d103      	bne.n	8009cf6 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	2210      	movs	r2, #16
 8009cf4:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8009cfc:	687a      	ldr	r2, [r7, #4]
 8009cfe:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 8009d02:	4611      	mov	r1, r2
 8009d04:	6878      	ldr	r0, [r7, #4]
 8009d06:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009d08:	e00d      	b.n	8009d26 <UART_RxISR_8BIT+0x1b2>
        huart->RxCpltCallback(huart);
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009d10:	6878      	ldr	r0, [r7, #4]
 8009d12:	4798      	blx	r3
}
 8009d14:	e007      	b.n	8009d26 <UART_RxISR_8BIT+0x1b2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	699a      	ldr	r2, [r3, #24]
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	f042 0208 	orr.w	r2, r2, #8
 8009d24:	619a      	str	r2, [r3, #24]
}
 8009d26:	bf00      	nop
 8009d28:	3770      	adds	r7, #112	@ 0x70
 8009d2a:	46bd      	mov	sp, r7
 8009d2c:	bd80      	pop	{r7, pc}
 8009d2e:	bf00      	nop
 8009d30:	40008000 	.word	0x40008000

08009d34 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009d34:	b580      	push	{r7, lr}
 8009d36:	b09c      	sub	sp, #112	@ 0x70
 8009d38:	af00      	add	r7, sp, #0
 8009d3a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009d42:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009d4c:	2b22      	cmp	r3, #34	@ 0x22
 8009d4e:	f040 80c2 	bne.w	8009ed6 <UART_RxISR_16BIT+0x1a2>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d58:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009d60:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8009d62:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8009d66:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8009d6a:	4013      	ands	r3, r2
 8009d6c:	b29a      	uxth	r2, r3
 8009d6e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009d70:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009d76:	1c9a      	adds	r2, r3, #2
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009d82:	b29b      	uxth	r3, r3
 8009d84:	3b01      	subs	r3, #1
 8009d86:	b29a      	uxth	r2, r3
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009d94:	b29b      	uxth	r3, r3
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	f040 80a5 	bne.w	8009ee6 <UART_RxISR_16BIT+0x1b2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009da2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009da4:	e853 3f00 	ldrex	r3, [r3]
 8009da8:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8009daa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009dac:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009db0:	667b      	str	r3, [r7, #100]	@ 0x64
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	461a      	mov	r2, r3
 8009db8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009dba:	657b      	str	r3, [r7, #84]	@ 0x54
 8009dbc:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dbe:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009dc0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009dc2:	e841 2300 	strex	r3, r2, [r1]
 8009dc6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8009dc8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d1e6      	bne.n	8009d9c <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	3308      	adds	r3, #8
 8009dd4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dd6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009dd8:	e853 3f00 	ldrex	r3, [r3]
 8009ddc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009dde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009de0:	f023 0301 	bic.w	r3, r3, #1
 8009de4:	663b      	str	r3, [r7, #96]	@ 0x60
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	3308      	adds	r3, #8
 8009dec:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8009dee:	643a      	str	r2, [r7, #64]	@ 0x40
 8009df0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009df2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009df4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009df6:	e841 2300 	strex	r3, r2, [r1]
 8009dfa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009dfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d1e5      	bne.n	8009dce <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	2220      	movs	r2, #32
 8009e06:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	2200      	movs	r2, #0
 8009e0e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	2200      	movs	r2, #0
 8009e14:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	4a35      	ldr	r2, [pc, #212]	@ (8009ef0 <UART_RxISR_16BIT+0x1bc>)
 8009e1c:	4293      	cmp	r3, r2
 8009e1e:	d01f      	beq.n	8009e60 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	685b      	ldr	r3, [r3, #4]
 8009e26:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d018      	beq.n	8009e60 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e34:	6a3b      	ldr	r3, [r7, #32]
 8009e36:	e853 3f00 	ldrex	r3, [r3]
 8009e3a:	61fb      	str	r3, [r7, #28]
   return(result);
 8009e3c:	69fb      	ldr	r3, [r7, #28]
 8009e3e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009e42:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	461a      	mov	r2, r3
 8009e4a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009e4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009e4e:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e50:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009e52:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009e54:	e841 2300 	strex	r3, r2, [r1]
 8009e58:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009e5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d1e6      	bne.n	8009e2e <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009e64:	2b01      	cmp	r3, #1
 8009e66:	d130      	bne.n	8009eca <UART_RxISR_16BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	2200      	movs	r2, #0
 8009e6c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	e853 3f00 	ldrex	r3, [r3]
 8009e7a:	60bb      	str	r3, [r7, #8]
   return(result);
 8009e7c:	68bb      	ldr	r3, [r7, #8]
 8009e7e:	f023 0310 	bic.w	r3, r3, #16
 8009e82:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	461a      	mov	r2, r3
 8009e8a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009e8c:	61bb      	str	r3, [r7, #24]
 8009e8e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e90:	6979      	ldr	r1, [r7, #20]
 8009e92:	69ba      	ldr	r2, [r7, #24]
 8009e94:	e841 2300 	strex	r3, r2, [r1]
 8009e98:	613b      	str	r3, [r7, #16]
   return(result);
 8009e9a:	693b      	ldr	r3, [r7, #16]
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d1e6      	bne.n	8009e6e <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	69db      	ldr	r3, [r3, #28]
 8009ea6:	f003 0310 	and.w	r3, r3, #16
 8009eaa:	2b10      	cmp	r3, #16
 8009eac:	d103      	bne.n	8009eb6 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	2210      	movs	r2, #16
 8009eb4:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8009ebc:	687a      	ldr	r2, [r7, #4]
 8009ebe:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 8009ec2:	4611      	mov	r1, r2
 8009ec4:	6878      	ldr	r0, [r7, #4]
 8009ec6:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009ec8:	e00d      	b.n	8009ee6 <UART_RxISR_16BIT+0x1b2>
        huart->RxCpltCallback(huart);
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009ed0:	6878      	ldr	r0, [r7, #4]
 8009ed2:	4798      	blx	r3
}
 8009ed4:	e007      	b.n	8009ee6 <UART_RxISR_16BIT+0x1b2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	699a      	ldr	r2, [r3, #24]
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	f042 0208 	orr.w	r2, r2, #8
 8009ee4:	619a      	str	r2, [r3, #24]
}
 8009ee6:	bf00      	nop
 8009ee8:	3770      	adds	r7, #112	@ 0x70
 8009eea:	46bd      	mov	sp, r7
 8009eec:	bd80      	pop	{r7, pc}
 8009eee:	bf00      	nop
 8009ef0:	40008000 	.word	0x40008000

08009ef4 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009ef4:	b580      	push	{r7, lr}
 8009ef6:	b0ac      	sub	sp, #176	@ 0xb0
 8009ef8:	af00      	add	r7, sp, #0
 8009efa:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009f02:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	69db      	ldr	r3, [r3, #28]
 8009f0c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	689b      	ldr	r3, [r3, #8]
 8009f20:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009f2a:	2b22      	cmp	r3, #34	@ 0x22
 8009f2c:	f040 8189 	bne.w	800a242 <UART_RxISR_8BIT_FIFOEN+0x34e>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009f36:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009f3a:	e12c      	b.n	800a196 <UART_RxISR_8BIT_FIFOEN+0x2a2>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f42:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009f46:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8009f4a:	b2d9      	uxtb	r1, r3
 8009f4c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8009f50:	b2da      	uxtb	r2, r3
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009f56:	400a      	ands	r2, r1
 8009f58:	b2d2      	uxtb	r2, r2
 8009f5a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009f60:	1c5a      	adds	r2, r3, #1
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009f6c:	b29b      	uxth	r3, r3
 8009f6e:	3b01      	subs	r3, #1
 8009f70:	b29a      	uxth	r2, r3
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	69db      	ldr	r3, [r3, #28]
 8009f7e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009f82:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009f86:	f003 0307 	and.w	r3, r3, #7
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d055      	beq.n	800a03a <UART_RxISR_8BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009f8e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009f92:	f003 0301 	and.w	r3, r3, #1
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d011      	beq.n	8009fbe <UART_RxISR_8BIT_FIFOEN+0xca>
 8009f9a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8009f9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d00b      	beq.n	8009fbe <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	2201      	movs	r2, #1
 8009fac:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009fb4:	f043 0201 	orr.w	r2, r3, #1
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009fbe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009fc2:	f003 0302 	and.w	r3, r3, #2
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d011      	beq.n	8009fee <UART_RxISR_8BIT_FIFOEN+0xfa>
 8009fca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009fce:	f003 0301 	and.w	r3, r3, #1
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d00b      	beq.n	8009fee <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	2202      	movs	r2, #2
 8009fdc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009fe4:	f043 0204 	orr.w	r2, r3, #4
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009fee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009ff2:	f003 0304 	and.w	r3, r3, #4
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d011      	beq.n	800a01e <UART_RxISR_8BIT_FIFOEN+0x12a>
 8009ffa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009ffe:	f003 0301 	and.w	r3, r3, #1
 800a002:	2b00      	cmp	r3, #0
 800a004:	d00b      	beq.n	800a01e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	2204      	movs	r2, #4
 800a00c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a014:	f043 0202 	orr.w	r2, r3, #2
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a024:	2b00      	cmp	r3, #0
 800a026:	d008      	beq.n	800a03a <UART_RxISR_8BIT_FIFOEN+0x146>
        {
          /* Non Blocking error : transfer could go on.
          Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a02e:	6878      	ldr	r0, [r7, #4]
 800a030:	4798      	blx	r3
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	2200      	movs	r2, #0
 800a036:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a040:	b29b      	uxth	r3, r3
 800a042:	2b00      	cmp	r3, #0
 800a044:	f040 80a7 	bne.w	800a196 <UART_RxISR_8BIT_FIFOEN+0x2a2>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a04e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a050:	e853 3f00 	ldrex	r3, [r3]
 800a054:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 800a056:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a058:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a05c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	461a      	mov	r2, r3
 800a066:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a06a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800a06c:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a06e:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800a070:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800a072:	e841 2300 	strex	r3, r2, [r1]
 800a076:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 800a078:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d1e4      	bne.n	800a048 <UART_RxISR_8BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	3308      	adds	r3, #8
 800a084:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a086:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a088:	e853 3f00 	ldrex	r3, [r3]
 800a08c:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800a08e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a090:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a094:	f023 0301 	bic.w	r3, r3, #1
 800a098:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	3308      	adds	r3, #8
 800a0a2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800a0a6:	66ba      	str	r2, [r7, #104]	@ 0x68
 800a0a8:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0aa:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800a0ac:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800a0ae:	e841 2300 	strex	r3, r2, [r1]
 800a0b2:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800a0b4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d1e1      	bne.n	800a07e <UART_RxISR_8BIT_FIFOEN+0x18a>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	2220      	movs	r2, #32
 800a0be:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	2200      	movs	r2, #0
 800a0c6:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	2200      	movs	r2, #0
 800a0cc:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	4a62      	ldr	r2, [pc, #392]	@ (800a25c <UART_RxISR_8BIT_FIFOEN+0x368>)
 800a0d4:	4293      	cmp	r3, r2
 800a0d6:	d021      	beq.n	800a11c <UART_RxISR_8BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	685b      	ldr	r3, [r3, #4]
 800a0de:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d01a      	beq.n	800a11c <UART_RxISR_8BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0ec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a0ee:	e853 3f00 	ldrex	r3, [r3]
 800a0f2:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800a0f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a0f6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a0fa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	461a      	mov	r2, r3
 800a104:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a108:	657b      	str	r3, [r7, #84]	@ 0x54
 800a10a:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a10c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800a10e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a110:	e841 2300 	strex	r3, r2, [r1]
 800a114:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800a116:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d1e4      	bne.n	800a0e6 <UART_RxISR_8BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a120:	2b01      	cmp	r3, #1
 800a122:	d132      	bne.n	800a18a <UART_RxISR_8BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	2200      	movs	r2, #0
 800a128:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a130:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a132:	e853 3f00 	ldrex	r3, [r3]
 800a136:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a138:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a13a:	f023 0310 	bic.w	r3, r3, #16
 800a13e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	461a      	mov	r2, r3
 800a148:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a14c:	643b      	str	r3, [r7, #64]	@ 0x40
 800a14e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a150:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a152:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a154:	e841 2300 	strex	r3, r2, [r1]
 800a158:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a15a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d1e4      	bne.n	800a12a <UART_RxISR_8BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	69db      	ldr	r3, [r3, #28]
 800a166:	f003 0310 	and.w	r3, r3, #16
 800a16a:	2b10      	cmp	r3, #16
 800a16c:	d103      	bne.n	800a176 <UART_RxISR_8BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	2210      	movs	r2, #16
 800a174:	621a      	str	r2, [r3, #32]
          }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800a17c:	687a      	ldr	r2, [r7, #4]
 800a17e:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800a182:	4611      	mov	r1, r2
 800a184:	6878      	ldr	r0, [r7, #4]
 800a186:	4798      	blx	r3
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 800a188:	e010      	b.n	800a1ac <UART_RxISR_8BIT_FIFOEN+0x2b8>
          huart->RxCpltCallback(huart);
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800a190:	6878      	ldr	r0, [r7, #4]
 800a192:	4798      	blx	r3
        break;
 800a194:	e00a      	b.n	800a1ac <UART_RxISR_8BIT_FIFOEN+0x2b8>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a196:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d006      	beq.n	800a1ac <UART_RxISR_8BIT_FIFOEN+0x2b8>
 800a19e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a1a2:	f003 0320 	and.w	r3, r3, #32
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	f47f aec8 	bne.w	8009f3c <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a1b2:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800a1b6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d049      	beq.n	800a252 <UART_RxISR_8BIT_FIFOEN+0x35e>
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800a1c4:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800a1c8:	429a      	cmp	r2, r3
 800a1ca:	d242      	bcs.n	800a252 <UART_RxISR_8BIT_FIFOEN+0x35e>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	3308      	adds	r3, #8
 800a1d2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1d4:	6a3b      	ldr	r3, [r7, #32]
 800a1d6:	e853 3f00 	ldrex	r3, [r3]
 800a1da:	61fb      	str	r3, [r7, #28]
   return(result);
 800a1dc:	69fb      	ldr	r3, [r7, #28]
 800a1de:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a1e2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	3308      	adds	r3, #8
 800a1ec:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800a1f0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a1f2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1f4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a1f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a1f8:	e841 2300 	strex	r3, r2, [r1]
 800a1fc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a1fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a200:	2b00      	cmp	r3, #0
 800a202:	d1e3      	bne.n	800a1cc <UART_RxISR_8BIT_FIFOEN+0x2d8>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	4a16      	ldr	r2, [pc, #88]	@ (800a260 <UART_RxISR_8BIT_FIFOEN+0x36c>)
 800a208:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	e853 3f00 	ldrex	r3, [r3]
 800a216:	60bb      	str	r3, [r7, #8]
   return(result);
 800a218:	68bb      	ldr	r3, [r7, #8]
 800a21a:	f043 0320 	orr.w	r3, r3, #32
 800a21e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	461a      	mov	r2, r3
 800a228:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800a22c:	61bb      	str	r3, [r7, #24]
 800a22e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a230:	6979      	ldr	r1, [r7, #20]
 800a232:	69ba      	ldr	r2, [r7, #24]
 800a234:	e841 2300 	strex	r3, r2, [r1]
 800a238:	613b      	str	r3, [r7, #16]
   return(result);
 800a23a:	693b      	ldr	r3, [r7, #16]
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d1e4      	bne.n	800a20a <UART_RxISR_8BIT_FIFOEN+0x316>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a240:	e007      	b.n	800a252 <UART_RxISR_8BIT_FIFOEN+0x35e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	699a      	ldr	r2, [r3, #24]
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	f042 0208 	orr.w	r2, r2, #8
 800a250:	619a      	str	r2, [r3, #24]
}
 800a252:	bf00      	nop
 800a254:	37b0      	adds	r7, #176	@ 0xb0
 800a256:	46bd      	mov	sp, r7
 800a258:	bd80      	pop	{r7, pc}
 800a25a:	bf00      	nop
 800a25c:	40008000 	.word	0x40008000
 800a260:	08009b75 	.word	0x08009b75

0800a264 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800a264:	b580      	push	{r7, lr}
 800a266:	b0ae      	sub	sp, #184	@ 0xb8
 800a268:	af00      	add	r7, sp, #0
 800a26a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800a272:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	69db      	ldr	r3, [r3, #28]
 800a27c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	689b      	ldr	r3, [r3, #8]
 800a290:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a29a:	2b22      	cmp	r3, #34	@ 0x22
 800a29c:	f040 818d 	bne.w	800a5ba <UART_RxISR_16BIT_FIFOEN+0x356>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800a2a6:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a2aa:	e130      	b.n	800a50e <UART_RxISR_16BIT_FIFOEN+0x2aa>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a2b2:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a2ba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800a2be:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800a2c2:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800a2c6:	4013      	ands	r3, r2
 800a2c8:	b29a      	uxth	r2, r3
 800a2ca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a2ce:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a2d4:	1c9a      	adds	r2, r3, #2
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a2e0:	b29b      	uxth	r3, r3
 800a2e2:	3b01      	subs	r3, #1
 800a2e4:	b29a      	uxth	r2, r3
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	69db      	ldr	r3, [r3, #28]
 800a2f2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800a2f6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a2fa:	f003 0307 	and.w	r3, r3, #7
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d055      	beq.n	800a3ae <UART_RxISR_16BIT_FIFOEN+0x14a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a302:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a306:	f003 0301 	and.w	r3, r3, #1
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d011      	beq.n	800a332 <UART_RxISR_16BIT_FIFOEN+0xce>
 800a30e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a312:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a316:	2b00      	cmp	r3, #0
 800a318:	d00b      	beq.n	800a332 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	2201      	movs	r2, #1
 800a320:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a328:	f043 0201 	orr.w	r2, r3, #1
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a332:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a336:	f003 0302 	and.w	r3, r3, #2
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d011      	beq.n	800a362 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800a33e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a342:	f003 0301 	and.w	r3, r3, #1
 800a346:	2b00      	cmp	r3, #0
 800a348:	d00b      	beq.n	800a362 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	2202      	movs	r2, #2
 800a350:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a358:	f043 0204 	orr.w	r2, r3, #4
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a362:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a366:	f003 0304 	and.w	r3, r3, #4
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d011      	beq.n	800a392 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800a36e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a372:	f003 0301 	and.w	r3, r3, #1
 800a376:	2b00      	cmp	r3, #0
 800a378:	d00b      	beq.n	800a392 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	2204      	movs	r2, #4
 800a380:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a388:	f043 0202 	orr.w	r2, r3, #2
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d008      	beq.n	800a3ae <UART_RxISR_16BIT_FIFOEN+0x14a>
        {
          /* Non Blocking error : transfer could go on.
          Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a3a2:	6878      	ldr	r0, [r7, #4]
 800a3a4:	4798      	blx	r3
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	2200      	movs	r2, #0
 800a3aa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a3b4:	b29b      	uxth	r3, r3
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	f040 80a9 	bne.w	800a50e <UART_RxISR_16BIT_FIFOEN+0x2aa>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3c2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a3c4:	e853 3f00 	ldrex	r3, [r3]
 800a3c8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800a3ca:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a3cc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a3d0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	461a      	mov	r2, r3
 800a3da:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a3de:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a3e2:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3e4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800a3e6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800a3ea:	e841 2300 	strex	r3, r2, [r1]
 800a3ee:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800a3f0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d1e2      	bne.n	800a3bc <UART_RxISR_16BIT_FIFOEN+0x158>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	3308      	adds	r3, #8
 800a3fc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3fe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a400:	e853 3f00 	ldrex	r3, [r3]
 800a404:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800a406:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a408:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a40c:	f023 0301 	bic.w	r3, r3, #1
 800a410:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	3308      	adds	r3, #8
 800a41a:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800a41e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800a420:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a422:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800a424:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800a426:	e841 2300 	strex	r3, r2, [r1]
 800a42a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800a42c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d1e1      	bne.n	800a3f6 <UART_RxISR_16BIT_FIFOEN+0x192>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	2220      	movs	r2, #32
 800a436:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	2200      	movs	r2, #0
 800a43e:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	2200      	movs	r2, #0
 800a444:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	4a62      	ldr	r2, [pc, #392]	@ (800a5d4 <UART_RxISR_16BIT_FIFOEN+0x370>)
 800a44c:	4293      	cmp	r3, r2
 800a44e:	d021      	beq.n	800a494 <UART_RxISR_16BIT_FIFOEN+0x230>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	685b      	ldr	r3, [r3, #4]
 800a456:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d01a      	beq.n	800a494 <UART_RxISR_16BIT_FIFOEN+0x230>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a464:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a466:	e853 3f00 	ldrex	r3, [r3]
 800a46a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a46c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a46e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a472:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	461a      	mov	r2, r3
 800a47c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800a480:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a482:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a484:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a486:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a488:	e841 2300 	strex	r3, r2, [r1]
 800a48c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a48e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a490:	2b00      	cmp	r3, #0
 800a492:	d1e4      	bne.n	800a45e <UART_RxISR_16BIT_FIFOEN+0x1fa>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a498:	2b01      	cmp	r3, #1
 800a49a:	d132      	bne.n	800a502 <UART_RxISR_16BIT_FIFOEN+0x29e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	2200      	movs	r2, #0
 800a4a0:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4aa:	e853 3f00 	ldrex	r3, [r3]
 800a4ae:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a4b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a4b2:	f023 0310 	bic.w	r3, r3, #16
 800a4b6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	461a      	mov	r2, r3
 800a4c0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a4c4:	647b      	str	r3, [r7, #68]	@ 0x44
 800a4c6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4c8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a4ca:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a4cc:	e841 2300 	strex	r3, r2, [r1]
 800a4d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a4d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d1e4      	bne.n	800a4a2 <UART_RxISR_16BIT_FIFOEN+0x23e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	69db      	ldr	r3, [r3, #28]
 800a4de:	f003 0310 	and.w	r3, r3, #16
 800a4e2:	2b10      	cmp	r3, #16
 800a4e4:	d103      	bne.n	800a4ee <UART_RxISR_16BIT_FIFOEN+0x28a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	2210      	movs	r2, #16
 800a4ec:	621a      	str	r2, [r3, #32]
          }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800a4f4:	687a      	ldr	r2, [r7, #4]
 800a4f6:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800a4fa:	4611      	mov	r1, r2
 800a4fc:	6878      	ldr	r0, [r7, #4]
 800a4fe:	4798      	blx	r3
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 800a500:	e010      	b.n	800a524 <UART_RxISR_16BIT_FIFOEN+0x2c0>
          huart->RxCpltCallback(huart);
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800a508:	6878      	ldr	r0, [r7, #4]
 800a50a:	4798      	blx	r3
        break;
 800a50c:	e00a      	b.n	800a524 <UART_RxISR_16BIT_FIFOEN+0x2c0>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a50e:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800a512:	2b00      	cmp	r3, #0
 800a514:	d006      	beq.n	800a524 <UART_RxISR_16BIT_FIFOEN+0x2c0>
 800a516:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a51a:	f003 0320 	and.w	r3, r3, #32
 800a51e:	2b00      	cmp	r3, #0
 800a520:	f47f aec4 	bne.w	800a2ac <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a52a:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800a52e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800a532:	2b00      	cmp	r3, #0
 800a534:	d049      	beq.n	800a5ca <UART_RxISR_16BIT_FIFOEN+0x366>
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800a53c:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800a540:	429a      	cmp	r2, r3
 800a542:	d242      	bcs.n	800a5ca <UART_RxISR_16BIT_FIFOEN+0x366>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	3308      	adds	r3, #8
 800a54a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a54c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a54e:	e853 3f00 	ldrex	r3, [r3]
 800a552:	623b      	str	r3, [r7, #32]
   return(result);
 800a554:	6a3b      	ldr	r3, [r7, #32]
 800a556:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a55a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	3308      	adds	r3, #8
 800a564:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800a568:	633a      	str	r2, [r7, #48]	@ 0x30
 800a56a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a56c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a56e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a570:	e841 2300 	strex	r3, r2, [r1]
 800a574:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a576:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d1e3      	bne.n	800a544 <UART_RxISR_16BIT_FIFOEN+0x2e0>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	4a16      	ldr	r2, [pc, #88]	@ (800a5d8 <UART_RxISR_16BIT_FIFOEN+0x374>)
 800a580:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a588:	693b      	ldr	r3, [r7, #16]
 800a58a:	e853 3f00 	ldrex	r3, [r3]
 800a58e:	60fb      	str	r3, [r7, #12]
   return(result);
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	f043 0320 	orr.w	r3, r3, #32
 800a596:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	461a      	mov	r2, r3
 800a5a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a5a4:	61fb      	str	r3, [r7, #28]
 800a5a6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5a8:	69b9      	ldr	r1, [r7, #24]
 800a5aa:	69fa      	ldr	r2, [r7, #28]
 800a5ac:	e841 2300 	strex	r3, r2, [r1]
 800a5b0:	617b      	str	r3, [r7, #20]
   return(result);
 800a5b2:	697b      	ldr	r3, [r7, #20]
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d1e4      	bne.n	800a582 <UART_RxISR_16BIT_FIFOEN+0x31e>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a5b8:	e007      	b.n	800a5ca <UART_RxISR_16BIT_FIFOEN+0x366>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	699a      	ldr	r2, [r3, #24]
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	f042 0208 	orr.w	r2, r2, #8
 800a5c8:	619a      	str	r2, [r3, #24]
}
 800a5ca:	bf00      	nop
 800a5cc:	37b8      	adds	r7, #184	@ 0xb8
 800a5ce:	46bd      	mov	sp, r7
 800a5d0:	bd80      	pop	{r7, pc}
 800a5d2:	bf00      	nop
 800a5d4:	40008000 	.word	0x40008000
 800a5d8:	08009d35 	.word	0x08009d35

0800a5dc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a5dc:	b480      	push	{r7}
 800a5de:	b083      	sub	sp, #12
 800a5e0:	af00      	add	r7, sp, #0
 800a5e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a5e4:	bf00      	nop
 800a5e6:	370c      	adds	r7, #12
 800a5e8:	46bd      	mov	sp, r7
 800a5ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ee:	4770      	bx	lr

0800a5f0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a5f0:	b480      	push	{r7}
 800a5f2:	b083      	sub	sp, #12
 800a5f4:	af00      	add	r7, sp, #0
 800a5f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a5f8:	bf00      	nop
 800a5fa:	370c      	adds	r7, #12
 800a5fc:	46bd      	mov	sp, r7
 800a5fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a602:	4770      	bx	lr

0800a604 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a604:	b480      	push	{r7}
 800a606:	b083      	sub	sp, #12
 800a608:	af00      	add	r7, sp, #0
 800a60a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a60c:	bf00      	nop
 800a60e:	370c      	adds	r7, #12
 800a610:	46bd      	mov	sp, r7
 800a612:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a616:	4770      	bx	lr

0800a618 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a618:	b480      	push	{r7}
 800a61a:	b085      	sub	sp, #20
 800a61c:	af00      	add	r7, sp, #0
 800a61e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a626:	2b01      	cmp	r3, #1
 800a628:	d101      	bne.n	800a62e <HAL_UARTEx_DisableFifoMode+0x16>
 800a62a:	2302      	movs	r3, #2
 800a62c:	e027      	b.n	800a67e <HAL_UARTEx_DisableFifoMode+0x66>
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	2201      	movs	r2, #1
 800a632:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	2224      	movs	r2, #36	@ 0x24
 800a63a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	681a      	ldr	r2, [r3, #0]
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	f022 0201 	bic.w	r2, r2, #1
 800a654:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800a65c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	2200      	movs	r2, #0
 800a662:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	68fa      	ldr	r2, [r7, #12]
 800a66a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	2220      	movs	r2, #32
 800a670:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	2200      	movs	r2, #0
 800a678:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a67c:	2300      	movs	r3, #0
}
 800a67e:	4618      	mov	r0, r3
 800a680:	3714      	adds	r7, #20
 800a682:	46bd      	mov	sp, r7
 800a684:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a688:	4770      	bx	lr

0800a68a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a68a:	b580      	push	{r7, lr}
 800a68c:	b084      	sub	sp, #16
 800a68e:	af00      	add	r7, sp, #0
 800a690:	6078      	str	r0, [r7, #4]
 800a692:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a69a:	2b01      	cmp	r3, #1
 800a69c:	d101      	bne.n	800a6a2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a69e:	2302      	movs	r3, #2
 800a6a0:	e02d      	b.n	800a6fe <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	2201      	movs	r2, #1
 800a6a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	2224      	movs	r2, #36	@ 0x24
 800a6ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	681a      	ldr	r2, [r3, #0]
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	f022 0201 	bic.w	r2, r2, #1
 800a6c8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	689b      	ldr	r3, [r3, #8]
 800a6d0:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	683a      	ldr	r2, [r7, #0]
 800a6da:	430a      	orrs	r2, r1
 800a6dc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a6de:	6878      	ldr	r0, [r7, #4]
 800a6e0:	f000 f850 	bl	800a784 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	68fa      	ldr	r2, [r7, #12]
 800a6ea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	2220      	movs	r2, #32
 800a6f0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	2200      	movs	r2, #0
 800a6f8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a6fc:	2300      	movs	r3, #0
}
 800a6fe:	4618      	mov	r0, r3
 800a700:	3710      	adds	r7, #16
 800a702:	46bd      	mov	sp, r7
 800a704:	bd80      	pop	{r7, pc}

0800a706 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a706:	b580      	push	{r7, lr}
 800a708:	b084      	sub	sp, #16
 800a70a:	af00      	add	r7, sp, #0
 800a70c:	6078      	str	r0, [r7, #4]
 800a70e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a716:	2b01      	cmp	r3, #1
 800a718:	d101      	bne.n	800a71e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a71a:	2302      	movs	r3, #2
 800a71c:	e02d      	b.n	800a77a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	2201      	movs	r2, #1
 800a722:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	2224      	movs	r2, #36	@ 0x24
 800a72a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	681a      	ldr	r2, [r3, #0]
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	f022 0201 	bic.w	r2, r2, #1
 800a744:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	689b      	ldr	r3, [r3, #8]
 800a74c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	683a      	ldr	r2, [r7, #0]
 800a756:	430a      	orrs	r2, r1
 800a758:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a75a:	6878      	ldr	r0, [r7, #4]
 800a75c:	f000 f812 	bl	800a784 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	68fa      	ldr	r2, [r7, #12]
 800a766:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	2220      	movs	r2, #32
 800a76c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	2200      	movs	r2, #0
 800a774:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a778:	2300      	movs	r3, #0
}
 800a77a:	4618      	mov	r0, r3
 800a77c:	3710      	adds	r7, #16
 800a77e:	46bd      	mov	sp, r7
 800a780:	bd80      	pop	{r7, pc}
	...

0800a784 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a784:	b480      	push	{r7}
 800a786:	b085      	sub	sp, #20
 800a788:	af00      	add	r7, sp, #0
 800a78a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a790:	2b00      	cmp	r3, #0
 800a792:	d108      	bne.n	800a7a6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	2201      	movs	r2, #1
 800a798:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	2201      	movs	r2, #1
 800a7a0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a7a4:	e031      	b.n	800a80a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a7a6:	2308      	movs	r3, #8
 800a7a8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a7aa:	2308      	movs	r3, #8
 800a7ac:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	689b      	ldr	r3, [r3, #8]
 800a7b4:	0e5b      	lsrs	r3, r3, #25
 800a7b6:	b2db      	uxtb	r3, r3
 800a7b8:	f003 0307 	and.w	r3, r3, #7
 800a7bc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	689b      	ldr	r3, [r3, #8]
 800a7c4:	0f5b      	lsrs	r3, r3, #29
 800a7c6:	b2db      	uxtb	r3, r3
 800a7c8:	f003 0307 	and.w	r3, r3, #7
 800a7cc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a7ce:	7bbb      	ldrb	r3, [r7, #14]
 800a7d0:	7b3a      	ldrb	r2, [r7, #12]
 800a7d2:	4911      	ldr	r1, [pc, #68]	@ (800a818 <UARTEx_SetNbDataToProcess+0x94>)
 800a7d4:	5c8a      	ldrb	r2, [r1, r2]
 800a7d6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a7da:	7b3a      	ldrb	r2, [r7, #12]
 800a7dc:	490f      	ldr	r1, [pc, #60]	@ (800a81c <UARTEx_SetNbDataToProcess+0x98>)
 800a7de:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a7e0:	fb93 f3f2 	sdiv	r3, r3, r2
 800a7e4:	b29a      	uxth	r2, r3
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a7ec:	7bfb      	ldrb	r3, [r7, #15]
 800a7ee:	7b7a      	ldrb	r2, [r7, #13]
 800a7f0:	4909      	ldr	r1, [pc, #36]	@ (800a818 <UARTEx_SetNbDataToProcess+0x94>)
 800a7f2:	5c8a      	ldrb	r2, [r1, r2]
 800a7f4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a7f8:	7b7a      	ldrb	r2, [r7, #13]
 800a7fa:	4908      	ldr	r1, [pc, #32]	@ (800a81c <UARTEx_SetNbDataToProcess+0x98>)
 800a7fc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a7fe:	fb93 f3f2 	sdiv	r3, r3, r2
 800a802:	b29a      	uxth	r2, r3
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800a80a:	bf00      	nop
 800a80c:	3714      	adds	r7, #20
 800a80e:	46bd      	mov	sp, r7
 800a810:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a814:	4770      	bx	lr
 800a816:	bf00      	nop
 800a818:	0800b26c 	.word	0x0800b26c
 800a81c:	0800b274 	.word	0x0800b274

0800a820 <arm_mat_add_f32>:
#else
arm_status arm_mat_add_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 800a820:	b480      	push	{r7}
 800a822:	b08b      	sub	sp, #44	@ 0x2c
 800a824:	af00      	add	r7, sp, #0
 800a826:	60f8      	str	r0, [r7, #12]
 800a828:	60b9      	str	r1, [r7, #8]
 800a82a:	607a      	str	r2, [r7, #4]
  float32_t *pInA = pSrcA->pData;                /* input data matrix pointer A */
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	685b      	ldr	r3, [r3, #4]
 800a830:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pInB = pSrcB->pData;                /* input data matrix pointer B */
 800a832:	68bb      	ldr	r3, [r7, #8]
 800a834:	685b      	ldr	r3, [r3, #4]
 800a836:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	685b      	ldr	r3, [r3, #4]
 800a83c:	61fb      	str	r3, [r7, #28]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrcA->numRows * pSrcA->numCols;
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	881b      	ldrh	r3, [r3, #0]
 800a842:	461a      	mov	r2, r3
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	885b      	ldrh	r3, [r3, #2]
 800a848:	fb02 f303 	mul.w	r3, r2, r3
 800a84c:	617b      	str	r3, [r7, #20]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 800a84e:	697b      	ldr	r3, [r7, #20]
 800a850:	61bb      	str	r3, [r7, #24]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 800a852:	e013      	b.n	800a87c <arm_mat_add_f32+0x5c>
    {
      /* C(m,n) = A(m,n) + B(m,n) */

      /* Add and store result in destination buffer. */
      *pOut++ = *pInA++ + *pInB++;
 800a854:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a856:	1d1a      	adds	r2, r3, #4
 800a858:	627a      	str	r2, [r7, #36]	@ 0x24
 800a85a:	ed93 7a00 	vldr	s14, [r3]
 800a85e:	6a3b      	ldr	r3, [r7, #32]
 800a860:	1d1a      	adds	r2, r3, #4
 800a862:	623a      	str	r2, [r7, #32]
 800a864:	edd3 7a00 	vldr	s15, [r3]
 800a868:	69fb      	ldr	r3, [r7, #28]
 800a86a:	1d1a      	adds	r2, r3, #4
 800a86c:	61fa      	str	r2, [r7, #28]
 800a86e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a872:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 800a876:	69bb      	ldr	r3, [r7, #24]
 800a878:	3b01      	subs	r3, #1
 800a87a:	61bb      	str	r3, [r7, #24]
    while (blkCnt > 0U)
 800a87c:	69bb      	ldr	r3, [r7, #24]
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d1e8      	bne.n	800a854 <arm_mat_add_f32+0x34>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800a882:	2300      	movs	r3, #0
 800a884:	74fb      	strb	r3, [r7, #19]
  }

  /* Return to application */
  return (status);
 800a886:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800a88a:	4618      	mov	r0, r3
 800a88c:	372c      	adds	r7, #44	@ 0x2c
 800a88e:	46bd      	mov	sp, r7
 800a890:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a894:	4770      	bx	lr

0800a896 <arm_mat_init_f32>:
void arm_mat_init_f32(
  arm_matrix_instance_f32 * S,
  uint16_t nRows,
  uint16_t nColumns,
  float32_t * pData)
{
 800a896:	b480      	push	{r7}
 800a898:	b085      	sub	sp, #20
 800a89a:	af00      	add	r7, sp, #0
 800a89c:	60f8      	str	r0, [r7, #12]
 800a89e:	607b      	str	r3, [r7, #4]
 800a8a0:	460b      	mov	r3, r1
 800a8a2:	817b      	strh	r3, [r7, #10]
 800a8a4:	4613      	mov	r3, r2
 800a8a6:	813b      	strh	r3, [r7, #8]
  /* Assign Number of Rows */
  S->numRows = nRows;
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	897a      	ldrh	r2, [r7, #10]
 800a8ac:	801a      	strh	r2, [r3, #0]

  /* Assign Number of Columns */
  S->numCols = nColumns;
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	893a      	ldrh	r2, [r7, #8]
 800a8b2:	805a      	strh	r2, [r3, #2]

  /* Assign Data pointer */
  S->pData = pData;
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	687a      	ldr	r2, [r7, #4]
 800a8b8:	605a      	str	r2, [r3, #4]
}
 800a8ba:	bf00      	nop
 800a8bc:	3714      	adds	r7, #20
 800a8be:	46bd      	mov	sp, r7
 800a8c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8c4:	4770      	bx	lr

0800a8c6 <arm_mat_inverse_f32>:
                   - \ref ARM_MATH_SINGULAR      : Input matrix is found to be singular (non-invertible)
 */
arm_status arm_mat_inverse_f32(
  const arm_matrix_instance_f32 * pSrc,
        arm_matrix_instance_f32 * pDst)
{
 800a8c6:	b480      	push	{r7}
 800a8c8:	b0bb      	sub	sp, #236	@ 0xec
 800a8ca:	af00      	add	r7, sp, #0
 800a8cc:	6078      	str	r0, [r7, #4]
 800a8ce:	6039      	str	r1, [r7, #0]
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	685b      	ldr	r3, [r3, #4]
 800a8d4:	667b      	str	r3, [r7, #100]	@ 0x64
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 800a8d6:	683b      	ldr	r3, [r7, #0]
 800a8d8:	685b      	ldr	r3, [r3, #4]
 800a8da:	663b      	str	r3, [r7, #96]	@ 0x60
  
  float32_t *pTmp;
  uint32_t numRows = pSrc->numRows;              /* Number of rows in the matrix  */
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	881b      	ldrh	r3, [r3, #0]
 800a8e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  uint32_t numCols = pSrc->numCols;              /* Number of Cols in the matrix  */
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	885b      	ldrh	r3, [r3, #2]
 800a8e6:	65bb      	str	r3, [r7, #88]	@ 0x58


  float32_t pivot = 0.0f, newPivot=0.0f;                /* Temporary input values  */
 800a8e8:	f04f 0300 	mov.w	r3, #0
 800a8ec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a8f0:	f04f 0300 	mov.w	r3, #0
 800a8f4:	657b      	str	r3, [r7, #84]	@ 0x54
  uint32_t selectedRow,pivotRow,i, rowNb, rowCnt, flag = 0U, j,column;      /* loop counters */
 800a8f6:	2300      	movs	r3, #0
 800a8f8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
     *      8. Now an identical matrix is formed to the left of the bar(input matrix, pSrc).
     *         Therefore, the matrix to the right of the bar is our solution(pDst matrix, pDst).
     *----------------------------------------------------------------------------------------------------------------*/

    /* Working pointer for destination matrix */
    pTmp = pOut;
 800a8fc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a8fe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4

    /* Loop over the number of rows */
    rowCnt = numRows;
 800a902:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a904:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0

    /* Making the destination matrix as identity matrix */
    while (rowCnt > 0U)
 800a908:	e03b      	b.n	800a982 <arm_mat_inverse_f32+0xbc>
    {
      /* Writing all zeroes in lower triangle of the destination matrix */
      j = numRows - rowCnt;
 800a90a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800a90c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800a910:	1ad3      	subs	r3, r2, r3
 800a912:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      while (j > 0U)
 800a916:	e00c      	b.n	800a932 <arm_mat_inverse_f32+0x6c>
      {
        *pTmp++ = 0.0f;
 800a918:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a91c:	1d1a      	adds	r2, r3, #4
 800a91e:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 800a922:	f04f 0200 	mov.w	r2, #0
 800a926:	601a      	str	r2, [r3, #0]
        j--;
 800a928:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a92c:	3b01      	subs	r3, #1
 800a92e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      while (j > 0U)
 800a932:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a936:	2b00      	cmp	r3, #0
 800a938:	d1ee      	bne.n	800a918 <arm_mat_inverse_f32+0x52>
      }

      /* Writing all ones in the diagonal of the destination matrix */
      *pTmp++ = 1.0f;
 800a93a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a93e:	1d1a      	adds	r2, r3, #4
 800a940:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 800a944:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800a948:	601a      	str	r2, [r3, #0]

      /* Writing all zeroes in upper triangle of the destination matrix */
      j = rowCnt - 1U;
 800a94a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800a94e:	3b01      	subs	r3, #1
 800a950:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      while (j > 0U)
 800a954:	e00c      	b.n	800a970 <arm_mat_inverse_f32+0xaa>
      {
        *pTmp++ = 0.0f;
 800a956:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a95a:	1d1a      	adds	r2, r3, #4
 800a95c:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 800a960:	f04f 0200 	mov.w	r2, #0
 800a964:	601a      	str	r2, [r3, #0]
        j--;
 800a966:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a96a:	3b01      	subs	r3, #1
 800a96c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      while (j > 0U)
 800a970:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a974:	2b00      	cmp	r3, #0
 800a976:	d1ee      	bne.n	800a956 <arm_mat_inverse_f32+0x90>
      }

      /* Decrement loop counter */
      rowCnt--;
 800a978:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800a97c:	3b01      	subs	r3, #1
 800a97e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    while (rowCnt > 0U)
 800a982:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800a986:	2b00      	cmp	r3, #0
 800a988:	d1bf      	bne.n	800a90a <arm_mat_inverse_f32+0x44>

    /* Loop over the number of columns of the input matrix.
       All the elements in each column are processed by the row operations */

    /* Index modifier to navigate through the columns */
    for(column = 0U; column < numCols; column++)
 800a98a:	2300      	movs	r3, #0
 800a98c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a990:	e2c7      	b.n	800af22 <arm_mat_inverse_f32+0x65c>
      /* Check if the pivot element is zero..
       * If it is zero then interchange the row with non zero row below.
       * If there is no non zero element to replace in the rows below,
       * then the matrix is Singular. */

      pivotRow = column;
 800a992:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800a996:	653b      	str	r3, [r7, #80]	@ 0x50

      /* Temporary variable to hold the pivot value */
      pTmp = ELEM(pSrc,column,column) ;
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	685a      	ldr	r2, [r3, #4]
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	885b      	ldrh	r3, [r3, #2]
 800a9a0:	3301      	adds	r3, #1
 800a9a2:	f8d7 10c4 	ldr.w	r1, [r7, #196]	@ 0xc4
 800a9a6:	fb01 f303 	mul.w	r3, r1, r3
 800a9aa:	009b      	lsls	r3, r3, #2
 800a9ac:	4413      	add	r3, r2
 800a9ae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
      pivot = *pTmp;
 800a9b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
      selectedRow = column;
 800a9bc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800a9c0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

      /* Find maximum pivot in column */
      
        /* Loop over the number rows present below */

      for (rowNb = column+1; rowNb < numRows; rowNb++)
 800a9c4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800a9c8:	3301      	adds	r3, #1
 800a9ca:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800a9ce:	e02c      	b.n	800aa2a <arm_mat_inverse_f32+0x164>
      {
          /* Update the input and destination pointers */
          pTmp = ELEM(pSrc,rowNb,column);
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	685a      	ldr	r2, [r3, #4]
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	885b      	ldrh	r3, [r3, #2]
 800a9d8:	4619      	mov	r1, r3
 800a9da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800a9de:	fb03 f101 	mul.w	r1, r3, r1
 800a9e2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800a9e6:	440b      	add	r3, r1
 800a9e8:	009b      	lsls	r3, r3, #2
 800a9ea:	4413      	add	r3, r2
 800a9ec:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
          newPivot = *pTmp;
 800a9f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	657b      	str	r3, [r7, #84]	@ 0x54
          if (fabsf(newPivot) > fabsf(pivot))
 800a9f8:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 800a9fc:	eeb0 7ae7 	vabs.f32	s14, s15
 800aa00:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800aa04:	eef0 7ae7 	vabs.f32	s15, s15
 800aa08:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800aa0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa10:	dd06      	ble.n	800aa20 <arm_mat_inverse_f32+0x15a>
          {
            selectedRow = rowNb; 
 800aa12:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800aa16:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
            pivot = newPivot;
 800aa1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800aa1c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
      for (rowNb = column+1; rowNb < numRows; rowNb++)
 800aa20:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800aa24:	3301      	adds	r3, #1
 800aa26:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800aa2a:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800aa2e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800aa30:	429a      	cmp	r2, r3
 800aa32:	d3cd      	bcc.n	800a9d0 <arm_mat_inverse_f32+0x10a>
          }
      }
        
      /* Check if there is a non zero pivot element to
       * replace in the rows below */
      if ((pivot != 0.0f) && (selectedRow != column))
 800aa34:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800aa38:	eef5 7a40 	vcmp.f32	s15, #0.0
 800aa3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa40:	f000 809b 	beq.w	800ab7a <arm_mat_inverse_f32+0x2b4>
 800aa44:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800aa48:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800aa4c:	429a      	cmp	r2, r3
 800aa4e:	f000 8094 	beq.w	800ab7a <arm_mat_inverse_f32+0x2b4>
      {
            
            SWAP_ROWS_F32(pSrc,column, pivotRow,selectedRow);
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	685b      	ldr	r3, [r3, #4]
 800aa56:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	685b      	ldr	r3, [r3, #4]
 800aa5e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	885b      	ldrh	r3, [r3, #2]
 800aa66:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800aa68:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800aa6a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800aa6e:	1ad3      	subs	r3, r2, r3
 800aa70:	64bb      	str	r3, [r7, #72]	@ 0x48
 800aa72:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800aa74:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800aa76:	fb03 f202 	mul.w	r2, r3, r2
 800aa7a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800aa7e:	4413      	add	r3, r2
 800aa80:	009b      	lsls	r3, r3, #2
 800aa82:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800aa86:	4413      	add	r3, r2
 800aa88:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800aa8c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800aa8e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800aa92:	fb03 f202 	mul.w	r2, r3, r2
 800aa96:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800aa9a:	4413      	add	r3, r2
 800aa9c:	009b      	lsls	r3, r3, #2
 800aa9e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800aaa2:	4413      	add	r3, r2
 800aaa4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800aaa8:	2300      	movs	r3, #0
 800aaaa:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800aaae:	e018      	b.n	800aae2 <arm_mat_inverse_f32+0x21c>
 800aab0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	63bb      	str	r3, [r7, #56]	@ 0x38
 800aab8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800aabc:	1d1a      	adds	r2, r3, #4
 800aabe:	f8c7 20b8 	str.w	r2, [r7, #184]	@ 0xb8
 800aac2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800aac6:	6812      	ldr	r2, [r2, #0]
 800aac8:	601a      	str	r2, [r3, #0]
 800aaca:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800aace:	1d1a      	adds	r2, r3, #4
 800aad0:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 800aad4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800aad6:	601a      	str	r2, [r3, #0]
 800aad8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800aadc:	3301      	adds	r3, #1
 800aade:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800aae2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 800aae6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800aae8:	429a      	cmp	r2, r3
 800aaea:	dbe1      	blt.n	800aab0 <arm_mat_inverse_f32+0x1ea>
            SWAP_ROWS_F32(pDst,0, pivotRow,selectedRow);
 800aaec:	683b      	ldr	r3, [r7, #0]
 800aaee:	685b      	ldr	r3, [r3, #4]
 800aaf0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800aaf4:	683b      	ldr	r3, [r7, #0]
 800aaf6:	685b      	ldr	r3, [r3, #4]
 800aaf8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800aafc:	683b      	ldr	r3, [r7, #0]
 800aafe:	885b      	ldrh	r3, [r3, #2]
 800ab00:	647b      	str	r3, [r7, #68]	@ 0x44
 800ab02:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ab04:	643b      	str	r3, [r7, #64]	@ 0x40
 800ab06:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ab08:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800ab0a:	fb02 f303 	mul.w	r3, r2, r3
 800ab0e:	009b      	lsls	r3, r3, #2
 800ab10:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800ab14:	4413      	add	r3, r2
 800ab16:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800ab1a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ab1c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800ab20:	fb02 f303 	mul.w	r3, r2, r3
 800ab24:	009b      	lsls	r3, r3, #2
 800ab26:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800ab2a:	4413      	add	r3, r2
 800ab2c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800ab30:	2300      	movs	r3, #0
 800ab32:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800ab36:	e018      	b.n	800ab6a <arm_mat_inverse_f32+0x2a4>
 800ab38:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ab40:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ab44:	1d1a      	adds	r2, r3, #4
 800ab46:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800ab4a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800ab4e:	6812      	ldr	r2, [r2, #0]
 800ab50:	601a      	str	r2, [r3, #0]
 800ab52:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800ab56:	1d1a      	adds	r2, r3, #4
 800ab58:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800ab5c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800ab5e:	601a      	str	r2, [r3, #0]
 800ab60:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800ab64:	3301      	adds	r3, #1
 800ab66:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800ab6a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800ab6e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ab70:	429a      	cmp	r2, r3
 800ab72:	dbe1      	blt.n	800ab38 <arm_mat_inverse_f32+0x272>

    
            /* Flag to indicate whether exchange is done or not */
            flag = 1U;
 800ab74:	2301      	movs	r3, #1
 800ab76:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc

      
      

      /* Update the status if the matrix is singular */
      if ((flag != 1U) && (pivot == 0.0f))
 800ab7a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800ab7e:	2b01      	cmp	r3, #1
 800ab80:	d009      	beq.n	800ab96 <arm_mat_inverse_f32+0x2d0>
 800ab82:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800ab86:	eef5 7a40 	vcmp.f32	s15, #0.0
 800ab8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab8e:	d102      	bne.n	800ab96 <arm_mat_inverse_f32+0x2d0>
      {
        return ARM_MATH_SINGULAR;
 800ab90:	f06f 0304 	mvn.w	r3, #4
 800ab94:	e208      	b.n	800afa8 <arm_mat_inverse_f32+0x6e2>
      }

     
      /* Pivot element of the row */
      pivot = 1.0f / pivot;
 800ab96:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ab9a:	ed97 7a38 	vldr	s14, [r7, #224]	@ 0xe0
 800ab9e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aba2:	edc7 7a38 	vstr	s15, [r7, #224]	@ 0xe0

      SCALE_ROW_F32(pSrc,column,pivot,pivotRow);
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	685b      	ldr	r3, [r3, #4]
 800abaa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	885b      	ldrh	r3, [r3, #2]
 800abb2:	637b      	str	r3, [r7, #52]	@ 0x34
 800abb4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800abb6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800abba:	1ad3      	subs	r3, r2, r3
 800abbc:	633b      	str	r3, [r7, #48]	@ 0x30
 800abbe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800abc0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800abc2:	fb03 f202 	mul.w	r2, r3, r2
 800abc6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800abca:	4413      	add	r3, r2
 800abcc:	009b      	lsls	r3, r3, #2
 800abce:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 800abd2:	4413      	add	r3, r2
 800abd4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800abd8:	2300      	movs	r3, #0
 800abda:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800abde:	e011      	b.n	800ac04 <arm_mat_inverse_f32+0x33e>
 800abe0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800abe4:	1d1a      	adds	r2, r3, #4
 800abe6:	f8c7 20a0 	str.w	r2, [r7, #160]	@ 0xa0
 800abea:	ed93 7a00 	vldr	s14, [r3]
 800abee:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800abf2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800abf6:	edc3 7a00 	vstr	s15, [r3]
 800abfa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800abfe:	3301      	adds	r3, #1
 800ac00:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800ac04:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 800ac08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac0a:	429a      	cmp	r2, r3
 800ac0c:	dbe8      	blt.n	800abe0 <arm_mat_inverse_f32+0x31a>
      SCALE_ROW_F32(pDst,0,pivot,pivotRow);
 800ac0e:	683b      	ldr	r3, [r7, #0]
 800ac10:	685b      	ldr	r3, [r3, #4]
 800ac12:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800ac16:	683b      	ldr	r3, [r7, #0]
 800ac18:	885b      	ldrh	r3, [r3, #2]
 800ac1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ac1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac1e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ac20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac22:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800ac24:	fb02 f303 	mul.w	r3, r2, r3
 800ac28:	009b      	lsls	r3, r3, #2
 800ac2a:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800ac2e:	4413      	add	r3, r2
 800ac30:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800ac34:	2300      	movs	r3, #0
 800ac36:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800ac3a:	e011      	b.n	800ac60 <arm_mat_inverse_f32+0x39a>
 800ac3c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800ac40:	1d1a      	adds	r2, r3, #4
 800ac42:	f8c7 2098 	str.w	r2, [r7, #152]	@ 0x98
 800ac46:	ed93 7a00 	vldr	s14, [r3]
 800ac4a:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800ac4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac52:	edc3 7a00 	vstr	s15, [r3]
 800ac56:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800ac5a:	3301      	adds	r3, #1
 800ac5c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800ac60:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 800ac64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac66:	429a      	cmp	r2, r3
 800ac68:	dbe8      	blt.n	800ac3c <arm_mat_inverse_f32+0x376>

      
      /* Replace the rows with the sum of that row and a multiple of row i
       * so that each new element in column i above row i is zero.*/

      rowNb = 0;
 800ac6a:	2300      	movs	r3, #0
 800ac6c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      for (;rowNb < pivotRow; rowNb++)
 800ac70:	e0ae      	b.n	800add0 <arm_mat_inverse_f32+0x50a>
      {
           pTmp = ELEM(pSrc,rowNb,column) ;
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	685a      	ldr	r2, [r3, #4]
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	885b      	ldrh	r3, [r3, #2]
 800ac7a:	4619      	mov	r1, r3
 800ac7c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800ac80:	fb03 f101 	mul.w	r1, r3, r1
 800ac84:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800ac88:	440b      	add	r3, r1
 800ac8a:	009b      	lsls	r3, r3, #2
 800ac8c:	4413      	add	r3, r2
 800ac8e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
           pivot = *pTmp;
 800ac92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0

           MAS_ROW_F32(column,pSrc,rowNb,pivot,pSrc,pivotRow);
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	685b      	ldr	r3, [r3, #4]
 800aca0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	685b      	ldr	r3, [r3, #4]
 800aca8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	885b      	ldrh	r3, [r3, #2]
 800acb0:	617b      	str	r3, [r7, #20]
 800acb2:	697a      	ldr	r2, [r7, #20]
 800acb4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800acb8:	1ad3      	subs	r3, r2, r3
 800acba:	613b      	str	r3, [r7, #16]
 800acbc:	697b      	ldr	r3, [r7, #20]
 800acbe:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800acc2:	fb03 f202 	mul.w	r2, r3, r2
 800acc6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800acca:	4413      	add	r3, r2
 800accc:	009b      	lsls	r3, r3, #2
 800acce:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 800acd2:	4413      	add	r3, r2
 800acd4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800acd8:	697b      	ldr	r3, [r7, #20]
 800acda:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800acdc:	fb03 f202 	mul.w	r2, r3, r2
 800ace0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800ace4:	4413      	add	r3, r2
 800ace6:	009b      	lsls	r3, r3, #2
 800ace8:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 800acec:	4413      	add	r3, r2
 800acee:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800acf2:	2300      	movs	r3, #0
 800acf4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800acf8:	e01a      	b.n	800ad30 <arm_mat_inverse_f32+0x46a>
 800acfa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800acfe:	1d1a      	adds	r2, r3, #4
 800ad00:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800ad04:	ed93 7a00 	vldr	s14, [r3]
 800ad08:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800ad0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad10:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800ad14:	1d1a      	adds	r2, r3, #4
 800ad16:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 800ad1a:	ed93 7a00 	vldr	s14, [r3]
 800ad1e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ad22:	edc3 7a00 	vstr	s15, [r3]
 800ad26:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800ad2a:	3301      	adds	r3, #1
 800ad2c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800ad30:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800ad34:	693b      	ldr	r3, [r7, #16]
 800ad36:	429a      	cmp	r2, r3
 800ad38:	dbdf      	blt.n	800acfa <arm_mat_inverse_f32+0x434>
           MAS_ROW_F32(0     ,pDst,rowNb,pivot,pDst,pivotRow);
 800ad3a:	683b      	ldr	r3, [r7, #0]
 800ad3c:	685b      	ldr	r3, [r3, #4]
 800ad3e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800ad42:	683b      	ldr	r3, [r7, #0]
 800ad44:	685b      	ldr	r3, [r3, #4]
 800ad46:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800ad4a:	683b      	ldr	r3, [r7, #0]
 800ad4c:	885b      	ldrh	r3, [r3, #2]
 800ad4e:	60fb      	str	r3, [r7, #12]
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	60bb      	str	r3, [r7, #8]
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800ad5a:	fb02 f303 	mul.w	r3, r2, r3
 800ad5e:	009b      	lsls	r3, r3, #2
 800ad60:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800ad64:	4413      	add	r3, r2
 800ad66:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800ad6e:	fb02 f303 	mul.w	r3, r2, r3
 800ad72:	009b      	lsls	r3, r3, #2
 800ad74:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800ad78:	4413      	add	r3, r2
 800ad7a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800ad7e:	2300      	movs	r3, #0
 800ad80:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800ad84:	e01a      	b.n	800adbc <arm_mat_inverse_f32+0x4f6>
 800ad86:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800ad8a:	1d1a      	adds	r2, r3, #4
 800ad8c:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800ad90:	ed93 7a00 	vldr	s14, [r3]
 800ad94:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800ad98:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad9c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800ada0:	1d1a      	adds	r2, r3, #4
 800ada2:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 800ada6:	ed93 7a00 	vldr	s14, [r3]
 800adaa:	ee77 7a67 	vsub.f32	s15, s14, s15
 800adae:	edc3 7a00 	vstr	s15, [r3]
 800adb2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800adb6:	3301      	adds	r3, #1
 800adb8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800adbc:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800adc0:	68bb      	ldr	r3, [r7, #8]
 800adc2:	429a      	cmp	r2, r3
 800adc4:	dbdf      	blt.n	800ad86 <arm_mat_inverse_f32+0x4c0>
      for (;rowNb < pivotRow; rowNb++)
 800adc6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800adca:	3301      	adds	r3, #1
 800adcc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800add0:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800add4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800add6:	429a      	cmp	r2, r3
 800add8:	f4ff af4b 	bcc.w	800ac72 <arm_mat_inverse_f32+0x3ac>


      }

      for (rowNb = pivotRow + 1; rowNb < numRows; rowNb++)
 800addc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800adde:	3301      	adds	r3, #1
 800ade0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800ade4:	e092      	b.n	800af0c <arm_mat_inverse_f32+0x646>
      {
           pTmp = ELEM(pSrc,rowNb,column) ;
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	685a      	ldr	r2, [r3, #4]
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	885b      	ldrh	r3, [r3, #2]
 800adee:	4619      	mov	r1, r3
 800adf0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800adf4:	fb03 f101 	mul.w	r1, r3, r1
 800adf8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800adfc:	440b      	add	r3, r1
 800adfe:	009b      	lsls	r3, r3, #2
 800ae00:	4413      	add	r3, r2
 800ae02:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
           pivot = *pTmp;
 800ae06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0

           MAS_ROW_F32(column,pSrc,rowNb,pivot,pSrc,pivotRow);
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	685b      	ldr	r3, [r3, #4]
 800ae14:	67bb      	str	r3, [r7, #120]	@ 0x78
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	685b      	ldr	r3, [r3, #4]
 800ae1a:	677b      	str	r3, [r7, #116]	@ 0x74
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	885b      	ldrh	r3, [r3, #2]
 800ae20:	627b      	str	r3, [r7, #36]	@ 0x24
 800ae22:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ae24:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800ae28:	1ad3      	subs	r3, r2, r3
 800ae2a:	623b      	str	r3, [r7, #32]
 800ae2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae2e:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800ae32:	fb03 f202 	mul.w	r2, r3, r2
 800ae36:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800ae3a:	4413      	add	r3, r2
 800ae3c:	009b      	lsls	r3, r3, #2
 800ae3e:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800ae40:	4413      	add	r3, r2
 800ae42:	67bb      	str	r3, [r7, #120]	@ 0x78
 800ae44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae46:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800ae48:	fb03 f202 	mul.w	r2, r3, r2
 800ae4c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800ae50:	4413      	add	r3, r2
 800ae52:	009b      	lsls	r3, r3, #2
 800ae54:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800ae56:	4413      	add	r3, r2
 800ae58:	677b      	str	r3, [r7, #116]	@ 0x74
 800ae5a:	2300      	movs	r3, #0
 800ae5c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800ae5e:	e014      	b.n	800ae8a <arm_mat_inverse_f32+0x5c4>
 800ae60:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ae62:	1d1a      	adds	r2, r3, #4
 800ae64:	677a      	str	r2, [r7, #116]	@ 0x74
 800ae66:	ed93 7a00 	vldr	s14, [r3]
 800ae6a:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800ae6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae72:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ae74:	1d1a      	adds	r2, r3, #4
 800ae76:	67ba      	str	r2, [r7, #120]	@ 0x78
 800ae78:	ed93 7a00 	vldr	s14, [r3]
 800ae7c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ae80:	edc3 7a00 	vstr	s15, [r3]
 800ae84:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800ae86:	3301      	adds	r3, #1
 800ae88:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800ae8a:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800ae8c:	6a3b      	ldr	r3, [r7, #32]
 800ae8e:	429a      	cmp	r2, r3
 800ae90:	dbe6      	blt.n	800ae60 <arm_mat_inverse_f32+0x59a>
           MAS_ROW_F32(0     ,pDst,rowNb,pivot,pDst,pivotRow);
 800ae92:	683b      	ldr	r3, [r7, #0]
 800ae94:	685b      	ldr	r3, [r3, #4]
 800ae96:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800ae98:	683b      	ldr	r3, [r7, #0]
 800ae9a:	685b      	ldr	r3, [r3, #4]
 800ae9c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800ae9e:	683b      	ldr	r3, [r7, #0]
 800aea0:	885b      	ldrh	r3, [r3, #2]
 800aea2:	61fb      	str	r3, [r7, #28]
 800aea4:	69fb      	ldr	r3, [r7, #28]
 800aea6:	61bb      	str	r3, [r7, #24]
 800aea8:	69fb      	ldr	r3, [r7, #28]
 800aeaa:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800aeae:	fb02 f303 	mul.w	r3, r2, r3
 800aeb2:	009b      	lsls	r3, r3, #2
 800aeb4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800aeb6:	4413      	add	r3, r2
 800aeb8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800aeba:	69fb      	ldr	r3, [r7, #28]
 800aebc:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800aebe:	fb02 f303 	mul.w	r3, r2, r3
 800aec2:	009b      	lsls	r3, r3, #2
 800aec4:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800aec6:	4413      	add	r3, r2
 800aec8:	66bb      	str	r3, [r7, #104]	@ 0x68
 800aeca:	2300      	movs	r3, #0
 800aecc:	673b      	str	r3, [r7, #112]	@ 0x70
 800aece:	e014      	b.n	800aefa <arm_mat_inverse_f32+0x634>
 800aed0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800aed2:	1d1a      	adds	r2, r3, #4
 800aed4:	66ba      	str	r2, [r7, #104]	@ 0x68
 800aed6:	ed93 7a00 	vldr	s14, [r3]
 800aeda:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800aede:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aee2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aee4:	1d1a      	adds	r2, r3, #4
 800aee6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800aee8:	ed93 7a00 	vldr	s14, [r3]
 800aeec:	ee77 7a67 	vsub.f32	s15, s14, s15
 800aef0:	edc3 7a00 	vstr	s15, [r3]
 800aef4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800aef6:	3301      	adds	r3, #1
 800aef8:	673b      	str	r3, [r7, #112]	@ 0x70
 800aefa:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800aefc:	69bb      	ldr	r3, [r7, #24]
 800aefe:	429a      	cmp	r2, r3
 800af00:	dbe6      	blt.n	800aed0 <arm_mat_inverse_f32+0x60a>
      for (rowNb = pivotRow + 1; rowNb < numRows; rowNb++)
 800af02:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800af06:	3301      	adds	r3, #1
 800af08:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800af0c:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800af10:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800af12:	429a      	cmp	r2, r3
 800af14:	f4ff af67 	bcc.w	800ade6 <arm_mat_inverse_f32+0x520>
    for(column = 0U; column < numCols; column++)
 800af18:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800af1c:	3301      	adds	r3, #1
 800af1e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800af22:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800af26:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800af28:	429a      	cmp	r2, r3
 800af2a:	f4ff ad32 	bcc.w	800a992 <arm_mat_inverse_f32+0xcc>
      }

    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800af2e:	2300      	movs	r3, #0
 800af30:	f887 30c3 	strb.w	r3, [r7, #195]	@ 0xc3

    if ((flag != 1U) && (pivot == 0.0f))
 800af34:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800af38:	2b01      	cmp	r3, #1
 800af3a:	d033      	beq.n	800afa4 <arm_mat_inverse_f32+0x6de>
 800af3c:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800af40:	eef5 7a40 	vcmp.f32	s15, #0.0
 800af44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800af48:	d12c      	bne.n	800afa4 <arm_mat_inverse_f32+0x6de>
    {
      pIn = pSrc->pData;
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	685b      	ldr	r3, [r3, #4]
 800af4e:	667b      	str	r3, [r7, #100]	@ 0x64
      for (i = 0; i < numRows * numCols; i++)
 800af50:	2300      	movs	r3, #0
 800af52:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800af56:	e010      	b.n	800af7a <arm_mat_inverse_f32+0x6b4>
      {
        if (pIn[i] != 0.0f)
 800af58:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800af5c:	009b      	lsls	r3, r3, #2
 800af5e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800af60:	4413      	add	r3, r2
 800af62:	edd3 7a00 	vldr	s15, [r3]
 800af66:	eef5 7a40 	vcmp.f32	s15, #0.0
 800af6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800af6e:	d10d      	bne.n	800af8c <arm_mat_inverse_f32+0x6c6>
      for (i = 0; i < numRows * numCols; i++)
 800af70:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800af74:	3301      	adds	r3, #1
 800af76:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800af7a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800af7c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800af7e:	fb02 f303 	mul.w	r3, r2, r3
 800af82:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 800af86:	429a      	cmp	r2, r3
 800af88:	d3e6      	bcc.n	800af58 <arm_mat_inverse_f32+0x692>
 800af8a:	e000      	b.n	800af8e <arm_mat_inverse_f32+0x6c8>
            break;
 800af8c:	bf00      	nop
      }

      if (i == numRows * numCols)
 800af8e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800af90:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800af92:	fb02 f303 	mul.w	r3, r2, r3
 800af96:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 800af9a:	429a      	cmp	r2, r3
 800af9c:	d102      	bne.n	800afa4 <arm_mat_inverse_f32+0x6de>
        status = ARM_MATH_SINGULAR;
 800af9e:	23fb      	movs	r3, #251	@ 0xfb
 800afa0:	f887 30c3 	strb.w	r3, [r7, #195]	@ 0xc3
    }
  }

  /* Return to application */
  return (status);
 800afa4:	f997 30c3 	ldrsb.w	r3, [r7, #195]	@ 0xc3
}
 800afa8:	4618      	mov	r0, r3
 800afaa:	37ec      	adds	r7, #236	@ 0xec
 800afac:	46bd      	mov	sp, r7
 800afae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afb2:	4770      	bx	lr

0800afb4 <arm_mat_mult_f32>:
 */
arm_status arm_mat_mult_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 800afb4:	b480      	push	{r7}
 800afb6:	b093      	sub	sp, #76	@ 0x4c
 800afb8:	af00      	add	r7, sp, #0
 800afba:	60f8      	str	r0, [r7, #12]
 800afbc:	60b9      	str	r1, [r7, #8]
 800afbe:	607a      	str	r2, [r7, #4]
  float32_t *pIn1 = pSrcA->pData;                /* Input data matrix pointer A */
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	685b      	ldr	r3, [r3, #4]
 800afc4:	647b      	str	r3, [r7, #68]	@ 0x44
  float32_t *pIn2 = pSrcB->pData;                /* Input data matrix pointer B */
 800afc6:	68bb      	ldr	r3, [r7, #8]
 800afc8:	685b      	ldr	r3, [r3, #4]
 800afca:	643b      	str	r3, [r7, #64]	@ 0x40
  float32_t *pInA = pSrcA->pData;                /* Input data matrix pointer A */
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	685b      	ldr	r3, [r3, #4]
 800afd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  float32_t *pInB = pSrcB->pData;                /* Input data matrix pointer B */
 800afd2:	68bb      	ldr	r3, [r7, #8]
 800afd4:	685b      	ldr	r3, [r3, #4]
 800afd6:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* Output data matrix pointer */
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	685b      	ldr	r3, [r3, #4]
 800afdc:	61fb      	str	r3, [r7, #28]
  float32_t *px;                                 /* Temporary output data matrix pointer */
  float32_t sum;                                 /* Accumulator */
  uint16_t numRowsA = pSrcA->numRows;            /* Number of rows of input matrix A */
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	881b      	ldrh	r3, [r3, #0]
 800afe2:	837b      	strh	r3, [r7, #26]
  uint16_t numColsB = pSrcB->numCols;            /* Number of columns of input matrix B */
 800afe4:	68bb      	ldr	r3, [r7, #8]
 800afe6:	885b      	ldrh	r3, [r3, #2]
 800afe8:	833b      	strh	r3, [r7, #24]
  uint16_t numColsA = pSrcA->numCols;            /* Number of columns of input matrix A */
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	885b      	ldrh	r3, [r3, #2]
 800afee:	82fb      	strh	r3, [r7, #22]
  uint32_t col, i = 0U, row = numRowsA, colCnt;  /* Loop counters */
 800aff0:	2300      	movs	r3, #0
 800aff2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800aff4:	8b7b      	ldrh	r3, [r7, #26]
 800aff6:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* The following loop performs the dot-product of each row in pSrcA with each column in pSrcB */
    /* row loop */
    do
    {
      /* Output pointer is set to starting address of row being processed */
      px = pOut + i;
 800aff8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800affa:	009b      	lsls	r3, r3, #2
 800affc:	69fa      	ldr	r2, [r7, #28]
 800affe:	4413      	add	r3, r2
 800b000:	63bb      	str	r3, [r7, #56]	@ 0x38

      /* For every row wise process, column loop counter is to be initiated */
      col = numColsB;
 800b002:	8b3b      	ldrh	r3, [r7, #24]
 800b004:	633b      	str	r3, [r7, #48]	@ 0x30

      /* For every row wise process, pIn2 pointer is set to starting address of pSrcB data */
      pIn2 = pSrcB->pData;
 800b006:	68bb      	ldr	r3, [r7, #8]
 800b008:	685b      	ldr	r3, [r3, #4]
 800b00a:	643b      	str	r3, [r7, #64]	@ 0x40

      /* column loop */
      do
      {
        /* Set the variable sum, that acts as accumulator, to zero */
        sum = 0.0f;
 800b00c:	f04f 0300 	mov.w	r3, #0
 800b010:	637b      	str	r3, [r7, #52]	@ 0x34

        /* Initialize pointer pIn1 to point to starting address of column being processed */
        pIn1 = pInA;
 800b012:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b014:	647b      	str	r3, [r7, #68]	@ 0x44
        colCnt = numColsA % 0x4U;

#else

        /* Initialize cntCnt with number of columns */
        colCnt = numColsA;
 800b016:	8afb      	ldrh	r3, [r7, #22]
 800b018:	627b      	str	r3, [r7, #36]	@ 0x24

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

        while (colCnt > 0U)
 800b01a:	e017      	b.n	800b04c <arm_mat_mult_f32+0x98>
        {
          /* c(m,p) = a(m,1) * b(1,p) + a(m,2) * b(2,p) + .... + a(m,n) * b(n,p) */

          /* Perform the multiply-accumulates */
          sum += *pIn1++ * *pIn2;
 800b01c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b01e:	1d1a      	adds	r2, r3, #4
 800b020:	647a      	str	r2, [r7, #68]	@ 0x44
 800b022:	ed93 7a00 	vldr	s14, [r3]
 800b026:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b028:	edd3 7a00 	vldr	s15, [r3]
 800b02c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b030:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 800b034:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b038:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
          pIn2 += numColsB;
 800b03c:	8b3b      	ldrh	r3, [r7, #24]
 800b03e:	009b      	lsls	r3, r3, #2
 800b040:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b042:	4413      	add	r3, r2
 800b044:	643b      	str	r3, [r7, #64]	@ 0x40

          /* Decrement loop counter */
          colCnt--;
 800b046:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b048:	3b01      	subs	r3, #1
 800b04a:	627b      	str	r3, [r7, #36]	@ 0x24
        while (colCnt > 0U)
 800b04c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d1e4      	bne.n	800b01c <arm_mat_mult_f32+0x68>
        }

        /* Store result in destination buffer */
        *px++ = sum;
 800b052:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b054:	1d1a      	adds	r2, r3, #4
 800b056:	63ba      	str	r2, [r7, #56]	@ 0x38
 800b058:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b05a:	601a      	str	r2, [r3, #0]

        /* Decrement column loop counter */
        col--;
 800b05c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b05e:	3b01      	subs	r3, #1
 800b060:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Update pointer pIn2 to point to starting address of next column */
        pIn2 = pInB + (numColsB - col);
 800b062:	8b3a      	ldrh	r2, [r7, #24]
 800b064:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b066:	1ad3      	subs	r3, r2, r3
 800b068:	009b      	lsls	r3, r3, #2
 800b06a:	6a3a      	ldr	r2, [r7, #32]
 800b06c:	4413      	add	r3, r2
 800b06e:	643b      	str	r3, [r7, #64]	@ 0x40

      } while (col > 0U);
 800b070:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b072:	2b00      	cmp	r3, #0
 800b074:	d1ca      	bne.n	800b00c <arm_mat_mult_f32+0x58>

      /* Update pointer pInA to point to starting address of next row */
      i = i + numColsB;
 800b076:	8b3b      	ldrh	r3, [r7, #24]
 800b078:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b07a:	4413      	add	r3, r2
 800b07c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pInA = pInA + numColsA;
 800b07e:	8afb      	ldrh	r3, [r7, #22]
 800b080:	009b      	lsls	r3, r3, #2
 800b082:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800b084:	4413      	add	r3, r2
 800b086:	63fb      	str	r3, [r7, #60]	@ 0x3c

      /* Decrement row loop counter */
      row--;
 800b088:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b08a:	3b01      	subs	r3, #1
 800b08c:	62bb      	str	r3, [r7, #40]	@ 0x28

    } while (row > 0U);
 800b08e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b090:	2b00      	cmp	r3, #0
 800b092:	d1b1      	bne.n	800aff8 <arm_mat_mult_f32+0x44>

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800b094:	2300      	movs	r3, #0
 800b096:	757b      	strb	r3, [r7, #21]
  }

  /* Return to application */
  return (status);
 800b098:	f997 3015 	ldrsb.w	r3, [r7, #21]
}
 800b09c:	4618      	mov	r0, r3
 800b09e:	374c      	adds	r7, #76	@ 0x4c
 800b0a0:	46bd      	mov	sp, r7
 800b0a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0a6:	4770      	bx	lr

0800b0a8 <arm_mat_sub_f32>:
#else
arm_status arm_mat_sub_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 800b0a8:	b480      	push	{r7}
 800b0aa:	b08b      	sub	sp, #44	@ 0x2c
 800b0ac:	af00      	add	r7, sp, #0
 800b0ae:	60f8      	str	r0, [r7, #12]
 800b0b0:	60b9      	str	r1, [r7, #8]
 800b0b2:	607a      	str	r2, [r7, #4]
  float32_t *pInA = pSrcA->pData;                /* input data matrix pointer A */
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	685b      	ldr	r3, [r3, #4]
 800b0b8:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pInB = pSrcB->pData;                /* input data matrix pointer B */
 800b0ba:	68bb      	ldr	r3, [r7, #8]
 800b0bc:	685b      	ldr	r3, [r3, #4]
 800b0be:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	685b      	ldr	r3, [r3, #4]
 800b0c4:	61fb      	str	r3, [r7, #28]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrcA->numRows * pSrcA->numCols;
 800b0c6:	68fb      	ldr	r3, [r7, #12]
 800b0c8:	881b      	ldrh	r3, [r3, #0]
 800b0ca:	461a      	mov	r2, r3
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	885b      	ldrh	r3, [r3, #2]
 800b0d0:	fb02 f303 	mul.w	r3, r2, r3
 800b0d4:	617b      	str	r3, [r7, #20]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 800b0d6:	697b      	ldr	r3, [r7, #20]
 800b0d8:	61bb      	str	r3, [r7, #24]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 800b0da:	e013      	b.n	800b104 <arm_mat_sub_f32+0x5c>
    {
      /* C(m,n) = A(m,n) - B(m,n) */

      /* Subtract and store result in destination buffer. */
      *pOut++ = (*pInA++) - (*pInB++);
 800b0dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0de:	1d1a      	adds	r2, r3, #4
 800b0e0:	627a      	str	r2, [r7, #36]	@ 0x24
 800b0e2:	ed93 7a00 	vldr	s14, [r3]
 800b0e6:	6a3b      	ldr	r3, [r7, #32]
 800b0e8:	1d1a      	adds	r2, r3, #4
 800b0ea:	623a      	str	r2, [r7, #32]
 800b0ec:	edd3 7a00 	vldr	s15, [r3]
 800b0f0:	69fb      	ldr	r3, [r7, #28]
 800b0f2:	1d1a      	adds	r2, r3, #4
 800b0f4:	61fa      	str	r2, [r7, #28]
 800b0f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b0fa:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 800b0fe:	69bb      	ldr	r3, [r7, #24]
 800b100:	3b01      	subs	r3, #1
 800b102:	61bb      	str	r3, [r7, #24]
    while (blkCnt > 0U)
 800b104:	69bb      	ldr	r3, [r7, #24]
 800b106:	2b00      	cmp	r3, #0
 800b108:	d1e8      	bne.n	800b0dc <arm_mat_sub_f32+0x34>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800b10a:	2300      	movs	r3, #0
 800b10c:	74fb      	strb	r3, [r7, #19]
  }

  /* Return to application */
  return (status);
 800b10e:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800b112:	4618      	mov	r0, r3
 800b114:	372c      	adds	r7, #44	@ 0x2c
 800b116:	46bd      	mov	sp, r7
 800b118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b11c:	4770      	bx	lr

0800b11e <arm_mat_trans_f32>:
}
#else
arm_status arm_mat_trans_f32(
  const arm_matrix_instance_f32 * pSrc,
        arm_matrix_instance_f32 * pDst)
{
 800b11e:	b480      	push	{r7}
 800b120:	b08b      	sub	sp, #44	@ 0x2c
 800b122:	af00      	add	r7, sp, #0
 800b124:	6078      	str	r0, [r7, #4]
 800b126:	6039      	str	r1, [r7, #0]
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	685b      	ldr	r3, [r3, #4]
 800b12c:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 800b12e:	683b      	ldr	r3, [r7, #0]
 800b130:	685b      	ldr	r3, [r3, #4]
 800b132:	613b      	str	r3, [r7, #16]
  float32_t *px;                                 /* Temporary output data matrix pointer */
  uint16_t nRows = pSrc->numRows;                /* number of rows */
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	881b      	ldrh	r3, [r3, #0]
 800b138:	81fb      	strh	r3, [r7, #14]
  uint16_t nCols = pSrc->numCols;                /* number of columns */
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	885b      	ldrh	r3, [r3, #2]
 800b13e:	81bb      	strh	r3, [r7, #12]
  uint32_t col, row = nRows, i = 0U;             /* Loop counters */
 800b140:	89fb      	ldrh	r3, [r7, #14]
 800b142:	61bb      	str	r3, [r7, #24]
 800b144:	2300      	movs	r3, #0
 800b146:	617b      	str	r3, [r7, #20]
    /* Matrix transpose by exchanging the rows with columns */
    /* row loop */
    do
    {
      /* Pointer px is set to starting address of column being processed */
      px = pOut + i;
 800b148:	697b      	ldr	r3, [r7, #20]
 800b14a:	009b      	lsls	r3, r3, #2
 800b14c:	693a      	ldr	r2, [r7, #16]
 800b14e:	4413      	add	r3, r2
 800b150:	623b      	str	r3, [r7, #32]
      col = nCols % 0x4U;

#else

      /* Initialize col with number of samples */
      col = nCols;
 800b152:	89bb      	ldrh	r3, [r7, #12]
 800b154:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

      while (col > 0U)
 800b156:	e00d      	b.n	800b174 <arm_mat_trans_f32+0x56>
      {
        /* Read and store input element in destination */
        *px = *pIn++;
 800b158:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b15a:	1d1a      	adds	r2, r3, #4
 800b15c:	627a      	str	r2, [r7, #36]	@ 0x24
 800b15e:	681a      	ldr	r2, [r3, #0]
 800b160:	6a3b      	ldr	r3, [r7, #32]
 800b162:	601a      	str	r2, [r3, #0]

        /* Update pointer px to point to next row of transposed matrix */
        px += nRows;
 800b164:	89fb      	ldrh	r3, [r7, #14]
 800b166:	009b      	lsls	r3, r3, #2
 800b168:	6a3a      	ldr	r2, [r7, #32]
 800b16a:	4413      	add	r3, r2
 800b16c:	623b      	str	r3, [r7, #32]

        /* Decrement column loop counter */
        col--;
 800b16e:	69fb      	ldr	r3, [r7, #28]
 800b170:	3b01      	subs	r3, #1
 800b172:	61fb      	str	r3, [r7, #28]
      while (col > 0U)
 800b174:	69fb      	ldr	r3, [r7, #28]
 800b176:	2b00      	cmp	r3, #0
 800b178:	d1ee      	bne.n	800b158 <arm_mat_trans_f32+0x3a>
      }

      i++;
 800b17a:	697b      	ldr	r3, [r7, #20]
 800b17c:	3301      	adds	r3, #1
 800b17e:	617b      	str	r3, [r7, #20]

      /* Decrement row loop counter */
      row--;
 800b180:	69bb      	ldr	r3, [r7, #24]
 800b182:	3b01      	subs	r3, #1
 800b184:	61bb      	str	r3, [r7, #24]

    } while (row > 0U);          /* row loop end */
 800b186:	69bb      	ldr	r3, [r7, #24]
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d1dd      	bne.n	800b148 <arm_mat_trans_f32+0x2a>

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800b18c:	2300      	movs	r3, #0
 800b18e:	72fb      	strb	r3, [r7, #11]
  }

  /* Return to application */
  return (status);
 800b190:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800b194:	4618      	mov	r0, r3
 800b196:	372c      	adds	r7, #44	@ 0x2c
 800b198:	46bd      	mov	sp, r7
 800b19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b19e:	4770      	bx	lr

0800b1a0 <memset>:
 800b1a0:	4402      	add	r2, r0
 800b1a2:	4603      	mov	r3, r0
 800b1a4:	4293      	cmp	r3, r2
 800b1a6:	d100      	bne.n	800b1aa <memset+0xa>
 800b1a8:	4770      	bx	lr
 800b1aa:	f803 1b01 	strb.w	r1, [r3], #1
 800b1ae:	e7f9      	b.n	800b1a4 <memset+0x4>

0800b1b0 <__libc_init_array>:
 800b1b0:	b570      	push	{r4, r5, r6, lr}
 800b1b2:	4d0d      	ldr	r5, [pc, #52]	@ (800b1e8 <__libc_init_array+0x38>)
 800b1b4:	4c0d      	ldr	r4, [pc, #52]	@ (800b1ec <__libc_init_array+0x3c>)
 800b1b6:	1b64      	subs	r4, r4, r5
 800b1b8:	10a4      	asrs	r4, r4, #2
 800b1ba:	2600      	movs	r6, #0
 800b1bc:	42a6      	cmp	r6, r4
 800b1be:	d109      	bne.n	800b1d4 <__libc_init_array+0x24>
 800b1c0:	4d0b      	ldr	r5, [pc, #44]	@ (800b1f0 <__libc_init_array+0x40>)
 800b1c2:	4c0c      	ldr	r4, [pc, #48]	@ (800b1f4 <__libc_init_array+0x44>)
 800b1c4:	f000 f826 	bl	800b214 <_init>
 800b1c8:	1b64      	subs	r4, r4, r5
 800b1ca:	10a4      	asrs	r4, r4, #2
 800b1cc:	2600      	movs	r6, #0
 800b1ce:	42a6      	cmp	r6, r4
 800b1d0:	d105      	bne.n	800b1de <__libc_init_array+0x2e>
 800b1d2:	bd70      	pop	{r4, r5, r6, pc}
 800b1d4:	f855 3b04 	ldr.w	r3, [r5], #4
 800b1d8:	4798      	blx	r3
 800b1da:	3601      	adds	r6, #1
 800b1dc:	e7ee      	b.n	800b1bc <__libc_init_array+0xc>
 800b1de:	f855 3b04 	ldr.w	r3, [r5], #4
 800b1e2:	4798      	blx	r3
 800b1e4:	3601      	adds	r6, #1
 800b1e6:	e7f2      	b.n	800b1ce <__libc_init_array+0x1e>
 800b1e8:	0800b284 	.word	0x0800b284
 800b1ec:	0800b284 	.word	0x0800b284
 800b1f0:	0800b284 	.word	0x0800b284
 800b1f4:	0800b288 	.word	0x0800b288

0800b1f8 <memcpy>:
 800b1f8:	440a      	add	r2, r1
 800b1fa:	4291      	cmp	r1, r2
 800b1fc:	f100 33ff 	add.w	r3, r0, #4294967295
 800b200:	d100      	bne.n	800b204 <memcpy+0xc>
 800b202:	4770      	bx	lr
 800b204:	b510      	push	{r4, lr}
 800b206:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b20a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b20e:	4291      	cmp	r1, r2
 800b210:	d1f9      	bne.n	800b206 <memcpy+0xe>
 800b212:	bd10      	pop	{r4, pc}

0800b214 <_init>:
 800b214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b216:	bf00      	nop
 800b218:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b21a:	bc08      	pop	{r3}
 800b21c:	469e      	mov	lr, r3
 800b21e:	4770      	bx	lr

0800b220 <_fini>:
 800b220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b222:	bf00      	nop
 800b224:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b226:	bc08      	pop	{r3}
 800b228:	469e      	mov	lr, r3
 800b22a:	4770      	bx	lr
