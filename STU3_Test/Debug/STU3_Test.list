
STU3_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bd3c  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800bf14  0800bf14  0000cf14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bf54  0800bf54  0000d25c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800bf54  0800bf54  0000cf54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bf5c  0800bf5c  0000d25c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bf5c  0800bf5c  0000cf5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800bf60  0800bf60  0000cf60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000025c  20000000  0800bf64  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000015dc  20000260  0800c1c0  0000d260  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000183c  0800c1c0  0000d83c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d25c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00024ffe  00000000  00000000  0000d28c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000432b  00000000  00000000  0003228a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001990  00000000  00000000  000365b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000013ea  00000000  00000000  00037f48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004778  00000000  00000000  00039332  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00023201  00000000  00000000  0003daaa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001181a9  00000000  00000000  00060cab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00178e54  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006f48  00000000  00000000  00178e98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  0017fde0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000260 	.word	0x20000260
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800befc 	.word	0x0800befc

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000264 	.word	0x20000264
 8000214:	0800befc 	.word	0x0800befc

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b988 	b.w	8000540 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	468e      	mov	lr, r1
 8000250:	4604      	mov	r4, r0
 8000252:	4688      	mov	r8, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4617      	mov	r7, r2
 800025c:	d962      	bls.n	8000324 <__udivmoddi4+0xdc>
 800025e:	fab2 f682 	clz	r6, r2
 8000262:	b14e      	cbz	r6, 8000278 <__udivmoddi4+0x30>
 8000264:	f1c6 0320 	rsb	r3, r6, #32
 8000268:	fa01 f806 	lsl.w	r8, r1, r6
 800026c:	fa20 f303 	lsr.w	r3, r0, r3
 8000270:	40b7      	lsls	r7, r6
 8000272:	ea43 0808 	orr.w	r8, r3, r8
 8000276:	40b4      	lsls	r4, r6
 8000278:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800027c:	fa1f fc87 	uxth.w	ip, r7
 8000280:	fbb8 f1fe 	udiv	r1, r8, lr
 8000284:	0c23      	lsrs	r3, r4, #16
 8000286:	fb0e 8811 	mls	r8, lr, r1, r8
 800028a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800028e:	fb01 f20c 	mul.w	r2, r1, ip
 8000292:	429a      	cmp	r2, r3
 8000294:	d909      	bls.n	80002aa <__udivmoddi4+0x62>
 8000296:	18fb      	adds	r3, r7, r3
 8000298:	f101 30ff 	add.w	r0, r1, #4294967295
 800029c:	f080 80ea 	bcs.w	8000474 <__udivmoddi4+0x22c>
 80002a0:	429a      	cmp	r2, r3
 80002a2:	f240 80e7 	bls.w	8000474 <__udivmoddi4+0x22c>
 80002a6:	3902      	subs	r1, #2
 80002a8:	443b      	add	r3, r7
 80002aa:	1a9a      	subs	r2, r3, r2
 80002ac:	b2a3      	uxth	r3, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002ba:	fb00 fc0c 	mul.w	ip, r0, ip
 80002be:	459c      	cmp	ip, r3
 80002c0:	d909      	bls.n	80002d6 <__udivmoddi4+0x8e>
 80002c2:	18fb      	adds	r3, r7, r3
 80002c4:	f100 32ff 	add.w	r2, r0, #4294967295
 80002c8:	f080 80d6 	bcs.w	8000478 <__udivmoddi4+0x230>
 80002cc:	459c      	cmp	ip, r3
 80002ce:	f240 80d3 	bls.w	8000478 <__udivmoddi4+0x230>
 80002d2:	443b      	add	r3, r7
 80002d4:	3802      	subs	r0, #2
 80002d6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002da:	eba3 030c 	sub.w	r3, r3, ip
 80002de:	2100      	movs	r1, #0
 80002e0:	b11d      	cbz	r5, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40f3      	lsrs	r3, r6
 80002e4:	2200      	movs	r2, #0
 80002e6:	e9c5 3200 	strd	r3, r2, [r5]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d905      	bls.n	80002fe <__udivmoddi4+0xb6>
 80002f2:	b10d      	cbz	r5, 80002f8 <__udivmoddi4+0xb0>
 80002f4:	e9c5 0100 	strd	r0, r1, [r5]
 80002f8:	2100      	movs	r1, #0
 80002fa:	4608      	mov	r0, r1
 80002fc:	e7f5      	b.n	80002ea <__udivmoddi4+0xa2>
 80002fe:	fab3 f183 	clz	r1, r3
 8000302:	2900      	cmp	r1, #0
 8000304:	d146      	bne.n	8000394 <__udivmoddi4+0x14c>
 8000306:	4573      	cmp	r3, lr
 8000308:	d302      	bcc.n	8000310 <__udivmoddi4+0xc8>
 800030a:	4282      	cmp	r2, r0
 800030c:	f200 8105 	bhi.w	800051a <__udivmoddi4+0x2d2>
 8000310:	1a84      	subs	r4, r0, r2
 8000312:	eb6e 0203 	sbc.w	r2, lr, r3
 8000316:	2001      	movs	r0, #1
 8000318:	4690      	mov	r8, r2
 800031a:	2d00      	cmp	r5, #0
 800031c:	d0e5      	beq.n	80002ea <__udivmoddi4+0xa2>
 800031e:	e9c5 4800 	strd	r4, r8, [r5]
 8000322:	e7e2      	b.n	80002ea <__udivmoddi4+0xa2>
 8000324:	2a00      	cmp	r2, #0
 8000326:	f000 8090 	beq.w	800044a <__udivmoddi4+0x202>
 800032a:	fab2 f682 	clz	r6, r2
 800032e:	2e00      	cmp	r6, #0
 8000330:	f040 80a4 	bne.w	800047c <__udivmoddi4+0x234>
 8000334:	1a8a      	subs	r2, r1, r2
 8000336:	0c03      	lsrs	r3, r0, #16
 8000338:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800033c:	b280      	uxth	r0, r0
 800033e:	b2bc      	uxth	r4, r7
 8000340:	2101      	movs	r1, #1
 8000342:	fbb2 fcfe 	udiv	ip, r2, lr
 8000346:	fb0e 221c 	mls	r2, lr, ip, r2
 800034a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800034e:	fb04 f20c 	mul.w	r2, r4, ip
 8000352:	429a      	cmp	r2, r3
 8000354:	d907      	bls.n	8000366 <__udivmoddi4+0x11e>
 8000356:	18fb      	adds	r3, r7, r3
 8000358:	f10c 38ff 	add.w	r8, ip, #4294967295
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x11c>
 800035e:	429a      	cmp	r2, r3
 8000360:	f200 80e0 	bhi.w	8000524 <__udivmoddi4+0x2dc>
 8000364:	46c4      	mov	ip, r8
 8000366:	1a9b      	subs	r3, r3, r2
 8000368:	fbb3 f2fe 	udiv	r2, r3, lr
 800036c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000370:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000374:	fb02 f404 	mul.w	r4, r2, r4
 8000378:	429c      	cmp	r4, r3
 800037a:	d907      	bls.n	800038c <__udivmoddi4+0x144>
 800037c:	18fb      	adds	r3, r7, r3
 800037e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x142>
 8000384:	429c      	cmp	r4, r3
 8000386:	f200 80ca 	bhi.w	800051e <__udivmoddi4+0x2d6>
 800038a:	4602      	mov	r2, r0
 800038c:	1b1b      	subs	r3, r3, r4
 800038e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000392:	e7a5      	b.n	80002e0 <__udivmoddi4+0x98>
 8000394:	f1c1 0620 	rsb	r6, r1, #32
 8000398:	408b      	lsls	r3, r1
 800039a:	fa22 f706 	lsr.w	r7, r2, r6
 800039e:	431f      	orrs	r7, r3
 80003a0:	fa0e f401 	lsl.w	r4, lr, r1
 80003a4:	fa20 f306 	lsr.w	r3, r0, r6
 80003a8:	fa2e fe06 	lsr.w	lr, lr, r6
 80003ac:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003b0:	4323      	orrs	r3, r4
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	fa1f fc87 	uxth.w	ip, r7
 80003ba:	fbbe f0f9 	udiv	r0, lr, r9
 80003be:	0c1c      	lsrs	r4, r3, #16
 80003c0:	fb09 ee10 	mls	lr, r9, r0, lr
 80003c4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003c8:	fb00 fe0c 	mul.w	lr, r0, ip
 80003cc:	45a6      	cmp	lr, r4
 80003ce:	fa02 f201 	lsl.w	r2, r2, r1
 80003d2:	d909      	bls.n	80003e8 <__udivmoddi4+0x1a0>
 80003d4:	193c      	adds	r4, r7, r4
 80003d6:	f100 3aff 	add.w	sl, r0, #4294967295
 80003da:	f080 809c 	bcs.w	8000516 <__udivmoddi4+0x2ce>
 80003de:	45a6      	cmp	lr, r4
 80003e0:	f240 8099 	bls.w	8000516 <__udivmoddi4+0x2ce>
 80003e4:	3802      	subs	r0, #2
 80003e6:	443c      	add	r4, r7
 80003e8:	eba4 040e 	sub.w	r4, r4, lr
 80003ec:	fa1f fe83 	uxth.w	lr, r3
 80003f0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003f4:	fb09 4413 	mls	r4, r9, r3, r4
 80003f8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003fc:	fb03 fc0c 	mul.w	ip, r3, ip
 8000400:	45a4      	cmp	ip, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1ce>
 8000404:	193c      	adds	r4, r7, r4
 8000406:	f103 3eff 	add.w	lr, r3, #4294967295
 800040a:	f080 8082 	bcs.w	8000512 <__udivmoddi4+0x2ca>
 800040e:	45a4      	cmp	ip, r4
 8000410:	d97f      	bls.n	8000512 <__udivmoddi4+0x2ca>
 8000412:	3b02      	subs	r3, #2
 8000414:	443c      	add	r4, r7
 8000416:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800041a:	eba4 040c 	sub.w	r4, r4, ip
 800041e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000422:	4564      	cmp	r4, ip
 8000424:	4673      	mov	r3, lr
 8000426:	46e1      	mov	r9, ip
 8000428:	d362      	bcc.n	80004f0 <__udivmoddi4+0x2a8>
 800042a:	d05f      	beq.n	80004ec <__udivmoddi4+0x2a4>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x1fe>
 800042e:	ebb8 0203 	subs.w	r2, r8, r3
 8000432:	eb64 0409 	sbc.w	r4, r4, r9
 8000436:	fa04 f606 	lsl.w	r6, r4, r6
 800043a:	fa22 f301 	lsr.w	r3, r2, r1
 800043e:	431e      	orrs	r6, r3
 8000440:	40cc      	lsrs	r4, r1
 8000442:	e9c5 6400 	strd	r6, r4, [r5]
 8000446:	2100      	movs	r1, #0
 8000448:	e74f      	b.n	80002ea <__udivmoddi4+0xa2>
 800044a:	fbb1 fcf2 	udiv	ip, r1, r2
 800044e:	0c01      	lsrs	r1, r0, #16
 8000450:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000454:	b280      	uxth	r0, r0
 8000456:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800045a:	463b      	mov	r3, r7
 800045c:	4638      	mov	r0, r7
 800045e:	463c      	mov	r4, r7
 8000460:	46b8      	mov	r8, r7
 8000462:	46be      	mov	lr, r7
 8000464:	2620      	movs	r6, #32
 8000466:	fbb1 f1f7 	udiv	r1, r1, r7
 800046a:	eba2 0208 	sub.w	r2, r2, r8
 800046e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000472:	e766      	b.n	8000342 <__udivmoddi4+0xfa>
 8000474:	4601      	mov	r1, r0
 8000476:	e718      	b.n	80002aa <__udivmoddi4+0x62>
 8000478:	4610      	mov	r0, r2
 800047a:	e72c      	b.n	80002d6 <__udivmoddi4+0x8e>
 800047c:	f1c6 0220 	rsb	r2, r6, #32
 8000480:	fa2e f302 	lsr.w	r3, lr, r2
 8000484:	40b7      	lsls	r7, r6
 8000486:	40b1      	lsls	r1, r6
 8000488:	fa20 f202 	lsr.w	r2, r0, r2
 800048c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000490:	430a      	orrs	r2, r1
 8000492:	fbb3 f8fe 	udiv	r8, r3, lr
 8000496:	b2bc      	uxth	r4, r7
 8000498:	fb0e 3318 	mls	r3, lr, r8, r3
 800049c:	0c11      	lsrs	r1, r2, #16
 800049e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a2:	fb08 f904 	mul.w	r9, r8, r4
 80004a6:	40b0      	lsls	r0, r6
 80004a8:	4589      	cmp	r9, r1
 80004aa:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004ae:	b280      	uxth	r0, r0
 80004b0:	d93e      	bls.n	8000530 <__udivmoddi4+0x2e8>
 80004b2:	1879      	adds	r1, r7, r1
 80004b4:	f108 3cff 	add.w	ip, r8, #4294967295
 80004b8:	d201      	bcs.n	80004be <__udivmoddi4+0x276>
 80004ba:	4589      	cmp	r9, r1
 80004bc:	d81f      	bhi.n	80004fe <__udivmoddi4+0x2b6>
 80004be:	eba1 0109 	sub.w	r1, r1, r9
 80004c2:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c6:	fb09 f804 	mul.w	r8, r9, r4
 80004ca:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ce:	b292      	uxth	r2, r2
 80004d0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004d4:	4542      	cmp	r2, r8
 80004d6:	d229      	bcs.n	800052c <__udivmoddi4+0x2e4>
 80004d8:	18ba      	adds	r2, r7, r2
 80004da:	f109 31ff 	add.w	r1, r9, #4294967295
 80004de:	d2c4      	bcs.n	800046a <__udivmoddi4+0x222>
 80004e0:	4542      	cmp	r2, r8
 80004e2:	d2c2      	bcs.n	800046a <__udivmoddi4+0x222>
 80004e4:	f1a9 0102 	sub.w	r1, r9, #2
 80004e8:	443a      	add	r2, r7
 80004ea:	e7be      	b.n	800046a <__udivmoddi4+0x222>
 80004ec:	45f0      	cmp	r8, lr
 80004ee:	d29d      	bcs.n	800042c <__udivmoddi4+0x1e4>
 80004f0:	ebbe 0302 	subs.w	r3, lr, r2
 80004f4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004f8:	3801      	subs	r0, #1
 80004fa:	46e1      	mov	r9, ip
 80004fc:	e796      	b.n	800042c <__udivmoddi4+0x1e4>
 80004fe:	eba7 0909 	sub.w	r9, r7, r9
 8000502:	4449      	add	r1, r9
 8000504:	f1a8 0c02 	sub.w	ip, r8, #2
 8000508:	fbb1 f9fe 	udiv	r9, r1, lr
 800050c:	fb09 f804 	mul.w	r8, r9, r4
 8000510:	e7db      	b.n	80004ca <__udivmoddi4+0x282>
 8000512:	4673      	mov	r3, lr
 8000514:	e77f      	b.n	8000416 <__udivmoddi4+0x1ce>
 8000516:	4650      	mov	r0, sl
 8000518:	e766      	b.n	80003e8 <__udivmoddi4+0x1a0>
 800051a:	4608      	mov	r0, r1
 800051c:	e6fd      	b.n	800031a <__udivmoddi4+0xd2>
 800051e:	443b      	add	r3, r7
 8000520:	3a02      	subs	r2, #2
 8000522:	e733      	b.n	800038c <__udivmoddi4+0x144>
 8000524:	f1ac 0c02 	sub.w	ip, ip, #2
 8000528:	443b      	add	r3, r7
 800052a:	e71c      	b.n	8000366 <__udivmoddi4+0x11e>
 800052c:	4649      	mov	r1, r9
 800052e:	e79c      	b.n	800046a <__udivmoddi4+0x222>
 8000530:	eba1 0109 	sub.w	r1, r1, r9
 8000534:	46c4      	mov	ip, r8
 8000536:	fbb1 f9fe 	udiv	r9, r1, lr
 800053a:	fb09 f804 	mul.w	r8, r9, r4
 800053e:	e7c4      	b.n	80004ca <__udivmoddi4+0x282>

08000540 <__aeabi_idiv0>:
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop

08000544 <Encoder_Init>:
#define Count_PER_REV 12000.0f
#define TWO_PI 6.283185f
#define PI 3.14286f
#define Lead 11.0f

void Encoder_Init(Encoder *enc, TIM_HandleTypeDef *htim) {
 8000544:	b580      	push	{r7, lr}
 8000546:	b082      	sub	sp, #8
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
 800054c:	6039      	str	r1, [r7, #0]
    enc->htim = htim;
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	683a      	ldr	r2, [r7, #0]
 8000552:	601a      	str	r2, [r3, #0]
    HAL_TIM_Encoder_Start(htim, TIM_CHANNEL_ALL);
 8000554:	213c      	movs	r1, #60	@ 0x3c
 8000556:	6838      	ldr	r0, [r7, #0]
 8000558:	f006 fe2c 	bl	80071b4 <HAL_TIM_Encoder_Start>

    enc->lastRawPosition = __HAL_TIM_GET_COUNTER(htim);
 800055c:	683b      	ldr	r3, [r7, #0]
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000562:	461a      	mov	r2, r3
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	605a      	str	r2, [r3, #4]
    enc->position = 0;
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	f04f 0200 	mov.w	r2, #0
 800056e:	609a      	str	r2, [r3, #8]
    enc->velocity = 0;
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	f04f 0200 	mov.w	r2, #0
 8000576:	60da      	str	r2, [r3, #12]
    enc->acceleration = 0;
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	f04f 0200 	mov.w	r2, #0
 800057e:	611a      	str	r2, [r3, #16]
    enc->lastPosition = 0;
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	f04f 0200 	mov.w	r2, #0
 8000586:	619a      	str	r2, [r3, #24]
    enc->lastVelocity = 0;
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	f04f 0200 	mov.w	r2, #0
 800058e:	61da      	str	r2, [r3, #28]
}
 8000590:	bf00      	nop
 8000592:	3708      	adds	r7, #8
 8000594:	46bd      	mov	sp, r7
 8000596:	bd80      	pop	{r7, pc}

08000598 <Encoder_Update>:

void Encoder_Update(Encoder *enc, float dt) {
 8000598:	b480      	push	{r7}
 800059a:	b085      	sub	sp, #20
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
 80005a0:	ed87 0a00 	vstr	s0, [r7]
    int32_t rawPosition = __HAL_TIM_GET_COUNTER(enc->htim);
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80005ac:	60bb      	str	r3, [r7, #8]
    int32_t deltaRaw = rawPosition - enc->lastRawPosition;
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	685b      	ldr	r3, [r3, #4]
 80005b2:	68ba      	ldr	r2, [r7, #8]
 80005b4:	1ad3      	subs	r3, r2, r3
 80005b6:	60fb      	str	r3, [r7, #12]

    // Handle 16-bit counter wrap-around
    if (deltaRaw > 30000) {
 80005b8:	68fb      	ldr	r3, [r7, #12]
 80005ba:	f247 5230 	movw	r2, #30000	@ 0x7530
 80005be:	4293      	cmp	r3, r2
 80005c0:	dd05      	ble.n	80005ce <Encoder_Update+0x36>
        deltaRaw -= 60000;
 80005c2:	68fb      	ldr	r3, [r7, #12]
 80005c4:	f5a3 436a 	sub.w	r3, r3, #59904	@ 0xea00
 80005c8:	3b60      	subs	r3, #96	@ 0x60
 80005ca:	60fb      	str	r3, [r7, #12]
 80005cc:	e008      	b.n	80005e0 <Encoder_Update+0x48>
    } else if (deltaRaw < -30000) {
 80005ce:	68fb      	ldr	r3, [r7, #12]
 80005d0:	4a48      	ldr	r2, [pc, #288]	@ (80006f4 <Encoder_Update+0x15c>)
 80005d2:	4293      	cmp	r3, r2
 80005d4:	da04      	bge.n	80005e0 <Encoder_Update+0x48>
        deltaRaw += 60000;
 80005d6:	68fb      	ldr	r3, [r7, #12]
 80005d8:	f503 436a 	add.w	r3, r3, #59904	@ 0xea00
 80005dc:	3360      	adds	r3, #96	@ 0x60
 80005de:	60fb      	str	r3, [r7, #12]
    }

    enc->position += ((float)deltaRaw * TWO_PI) / Count_PER_REV;
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	ed93 7a02 	vldr	s14, [r3, #8]
 80005e6:	68fb      	ldr	r3, [r7, #12]
 80005e8:	ee07 3a90 	vmov	s15, r3
 80005ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80005f0:	eddf 6a41 	vldr	s13, [pc, #260]	@ 80006f8 <Encoder_Update+0x160>
 80005f4:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80005f8:	ed9f 6a40 	vldr	s12, [pc, #256]	@ 80006fc <Encoder_Update+0x164>
 80005fc:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8000600:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	edc3 7a02 	vstr	s15, [r3, #8]
    enc->velocity = (enc->position - enc->lastPosition) / dt;
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	ed93 7a02 	vldr	s14, [r3, #8]
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	edd3 7a06 	vldr	s15, [r3, #24]
 8000616:	ee77 6a67 	vsub.f32	s13, s14, s15
 800061a:	ed97 7a00 	vldr	s14, [r7]
 800061e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	edc3 7a03 	vstr	s15, [r3, #12]
    enc->acceleration = (enc->velocity - enc->lastVelocity) / dt;
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	ed93 7a03 	vldr	s14, [r3, #12]
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	edd3 7a07 	vldr	s15, [r3, #28]
 8000634:	ee77 6a67 	vsub.f32	s13, s14, s15
 8000638:	ed97 7a00 	vldr	s14, [r7]
 800063c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	edc3 7a04 	vstr	s15, [r3, #16]
    enc->position_degree = enc->position * (180.0f / PI);
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	edd3 7a02 	vldr	s15, [r3, #8]
 800064c:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 8000700 <Encoder_Update+0x168>
 8000650:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	edc3 7a05 	vstr	s15, [r3, #20]

    enc->lastRawPosition = rawPosition;
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	68ba      	ldr	r2, [r7, #8]
 800065e:	605a      	str	r2, [r3, #4]
    enc->lastPosition = enc->position;
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	689a      	ldr	r2, [r3, #8]
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	619a      	str	r2, [r3, #24]
    enc->lastVelocity = enc->velocity;
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	68da      	ldr	r2, [r3, #12]
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	61da      	str	r2, [r3, #28]

    enc->position_mm += ((float)deltaRaw / Count_PER_REV) * Lead;
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	ed93 7a08 	vldr	s14, [r3, #32]
 8000676:	68fb      	ldr	r3, [r7, #12]
 8000678:	ee07 3a90 	vmov	s15, r3
 800067c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000680:	ed9f 6a1e 	vldr	s12, [pc, #120]	@ 80006fc <Encoder_Update+0x164>
 8000684:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8000688:	eef2 6a06 	vmov.f32	s13, #38	@ 0x41300000  11.0
 800068c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000690:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	edc3 7a08 	vstr	s15, [r3, #32]
    enc->velocity_mm = (enc->position_mm - enc->lastPosition_mm) / dt;
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	ed93 7a08 	vldr	s14, [r3, #32]
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 80006a6:	ee77 6a67 	vsub.f32	s13, s14, s15
 80006aa:	ed97 7a00 	vldr	s14, [r7]
 80006ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
    enc->acceleration_mm = (enc->velocity_mm - enc->lastVelocity_mm) / dt;
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 80006c4:	ee77 6a67 	vsub.f32	s13, s14, s15
 80006c8:	ed97 7a00 	vldr	s14, [r7]
 80006cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28

    enc->lastPosition_mm = enc->position_mm;
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	6a1a      	ldr	r2, [r3, #32]
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	62da      	str	r2, [r3, #44]	@ 0x2c
    enc->lastVelocity_mm = enc->velocity_mm;
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80006e6:	bf00      	nop
 80006e8:	3714      	adds	r7, #20
 80006ea:	46bd      	mov	sp, r7
 80006ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop
 80006f4:	ffff8ad0 	.word	0xffff8ad0
 80006f8:	40c90fda 	.word	0x40c90fda
 80006fc:	463b8000 	.word	0x463b8000
 8000700:	42651738 	.word	0x42651738

08000704 <Encoder_GetPosition>:

void Encoder_setLimit(Encoder *enc, float limit) {
		enc->position = limit;
}

float Encoder_GetPosition(Encoder *enc) {
 8000704:	b480      	push	{r7}
 8000706:	b083      	sub	sp, #12
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
    return enc->position;
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	689b      	ldr	r3, [r3, #8]
 8000710:	ee07 3a90 	vmov	s15, r3
}
 8000714:	eeb0 0a67 	vmov.f32	s0, s15
 8000718:	370c      	adds	r7, #12
 800071a:	46bd      	mov	sp, r7
 800071c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000720:	4770      	bx	lr

08000722 <Encoder_GetVelocity>:

float Encoder_GetVelocity(Encoder *enc) {
 8000722:	b480      	push	{r7}
 8000724:	b083      	sub	sp, #12
 8000726:	af00      	add	r7, sp, #0
 8000728:	6078      	str	r0, [r7, #4]
    return enc->velocity;
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	68db      	ldr	r3, [r3, #12]
 800072e:	ee07 3a90 	vmov	s15, r3
}
 8000732:	eeb0 0a67 	vmov.f32	s0, s15
 8000736:	370c      	adds	r7, #12
 8000738:	46bd      	mov	sp, r7
 800073a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073e:	4770      	bx	lr

08000740 <Encoder_GetAcceleration>:

float Encoder_GetAcceleration(Encoder *enc) {
 8000740:	b480      	push	{r7}
 8000742:	b083      	sub	sp, #12
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
    return enc->acceleration;
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	691b      	ldr	r3, [r3, #16]
 800074c:	ee07 3a90 	vmov	s15, r3
}
 8000750:	eeb0 0a67 	vmov.f32	s0, s15
 8000754:	370c      	adds	r7, #12
 8000756:	46bd      	mov	sp, r7
 8000758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075c:	4770      	bx	lr

0800075e <Encoder_GetPosition_mm>:

float Encoder_GetDegree(Encoder *enc) {
	return enc->position_degree;
}

float Encoder_GetPosition_mm(Encoder *enc) {
 800075e:	b480      	push	{r7}
 8000760:	b083      	sub	sp, #12
 8000762:	af00      	add	r7, sp, #0
 8000764:	6078      	str	r0, [r7, #4]
    return enc->position_mm;
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	6a1b      	ldr	r3, [r3, #32]
 800076a:	ee07 3a90 	vmov	s15, r3
}
 800076e:	eeb0 0a67 	vmov.f32	s0, s15
 8000772:	370c      	adds	r7, #12
 8000774:	46bd      	mov	sp, r7
 8000776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077a:	4770      	bx	lr

0800077c <Encoder_GetVelocity_mm>:

float Encoder_GetVelocity_mm(Encoder *enc) {
 800077c:	b480      	push	{r7}
 800077e:	b083      	sub	sp, #12
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
    return enc->velocity_mm;
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000788:	ee07 3a90 	vmov	s15, r3
}
 800078c:	eeb0 0a67 	vmov.f32	s0, s15
 8000790:	370c      	adds	r7, #12
 8000792:	46bd      	mov	sp, r7
 8000794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000798:	4770      	bx	lr

0800079a <Kalman_Init>:
#include "Kalman_Filter.h"

void Kalman_Init(KalmanFilter *kf) {
 800079a:	b580      	push	{r7, lr}
 800079c:	b084      	sub	sp, #16
 800079e:	af00      	add	r7, sp, #0
 80007a0:	6078      	str	r0, [r7, #4]
    arm_mat_init_f32(&kf->A, KALMAN_STATE_DIM, KALMAN_STATE_DIM, kf->A_data);
 80007a2:	6878      	ldr	r0, [r7, #4]
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	3370      	adds	r3, #112	@ 0x70
 80007a8:	2204      	movs	r2, #4
 80007aa:	2104      	movs	r1, #4
 80007ac:	f00a febf 	bl	800b52e <arm_mat_init_f32>
    arm_mat_init_f32(&kf->B, KALMAN_STATE_DIM, KALMAN_MEAS_DIM, kf->B_data);
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	f103 0008 	add.w	r0, r3, #8
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	33b0      	adds	r3, #176	@ 0xb0
 80007ba:	2204      	movs	r2, #4
 80007bc:	2104      	movs	r1, #4
 80007be:	f00a feb6 	bl	800b52e <arm_mat_init_f32>
    arm_mat_init_f32(&kf->H, KALMAN_MEAS_DIM, KALMAN_STATE_DIM, kf->H_data);
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	f103 0010 	add.w	r0, r3, #16
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	33f0      	adds	r3, #240	@ 0xf0
 80007cc:	2204      	movs	r2, #4
 80007ce:	2104      	movs	r1, #4
 80007d0:	f00a fead 	bl	800b52e <arm_mat_init_f32>
    arm_mat_init_f32(&kf->Q, KALMAN_STATE_DIM, KALMAN_STATE_DIM, kf->Q_data);
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	f103 0018 	add.w	r0, r3, #24
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 80007e0:	2204      	movs	r2, #4
 80007e2:	2104      	movs	r1, #4
 80007e4:	f00a fea3 	bl	800b52e <arm_mat_init_f32>
    arm_mat_init_f32(&kf->R, KALMAN_MEAS_DIM, KALMAN_MEAS_DIM, kf->R_data);
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	f103 0020 	add.w	r0, r3, #32
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	f503 73b8 	add.w	r3, r3, #368	@ 0x170
 80007f4:	2204      	movs	r2, #4
 80007f6:	2104      	movs	r1, #4
 80007f8:	f00a fe99 	bl	800b52e <arm_mat_init_f32>
    arm_mat_init_f32(&kf->P, KALMAN_STATE_DIM, KALMAN_STATE_DIM, kf->P_data);
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	f503 73d8 	add.w	r3, r3, #432	@ 0x1b0
 8000808:	2204      	movs	r2, #4
 800080a:	2104      	movs	r1, #4
 800080c:	f00a fe8f 	bl	800b52e <arm_mat_init_f32>
    arm_mat_init_f32(&kf->K, KALMAN_STATE_DIM, KALMAN_MEAS_DIM, kf->K_data);
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	f503 73f8 	add.w	r3, r3, #496	@ 0x1f0
 800081c:	2204      	movs	r2, #4
 800081e:	2104      	movs	r1, #4
 8000820:	f00a fe85 	bl	800b52e <arm_mat_init_f32>
    arm_mat_init_f32(&kf->Input, KALMAN_STATE_DIM, KALMAN_MEAS_DIM, kf->Input_data);
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8000830:	2204      	movs	r2, #4
 8000832:	2104      	movs	r1, #4
 8000834:	f00a fe7b 	bl	800b52e <arm_mat_init_f32>

    arm_mat_init_f32(&kf->x, KALMAN_STATE_DIM, 1, kf->x_data);
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	f103 0040 	add.w	r0, r3, #64	@ 0x40
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 8000844:	2201      	movs	r2, #1
 8000846:	2104      	movs	r1, #4
 8000848:	f00a fe71 	bl	800b52e <arm_mat_init_f32>
    arm_mat_init_f32(&kf->u, KALMAN_MEAS_DIM, 1, kf->u_data);
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	f103 0048 	add.w	r0, r3, #72	@ 0x48
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	f503 7311 	add.w	r3, r3, #580	@ 0x244
 8000858:	2201      	movs	r2, #1
 800085a:	2104      	movs	r1, #4
 800085c:	f00a fe67 	bl	800b52e <arm_mat_init_f32>
    arm_mat_init_f32(&kf->z, KALMAN_MEAS_DIM, 1, kf->z_data);
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	f103 0050 	add.w	r0, r3, #80	@ 0x50
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800086c:	2201      	movs	r2, #1
 800086e:	2104      	movs	r1, #4
 8000870:	f00a fe5d 	bl	800b52e <arm_mat_init_f32>

    arm_mat_init_f32(&kf->temp1, KALMAN_STATE_DIM, KALMAN_STATE_DIM, kf->temp1_data);
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	f103 0058 	add.w	r0, r3, #88	@ 0x58
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8000880:	2204      	movs	r2, #4
 8000882:	2104      	movs	r1, #4
 8000884:	f00a fe53 	bl	800b52e <arm_mat_init_f32>
    arm_mat_init_f32(&kf->temp2, KALMAN_STATE_DIM, KALMAN_MEAS_DIM, kf->temp2_data);
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	f103 0060 	add.w	r0, r3, #96	@ 0x60
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	f503 7329 	add.w	r3, r3, #676	@ 0x2a4
 8000894:	2204      	movs	r2, #4
 8000896:	2104      	movs	r1, #4
 8000898:	f00a fe49 	bl	800b52e <arm_mat_init_f32>
    arm_mat_init_f32(&kf->temp3, KALMAN_MEAS_DIM, KALMAN_MEAS_DIM, kf->temp3_data);
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	f103 0068 	add.w	r0, r3, #104	@ 0x68
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	f503 7339 	add.w	r3, r3, #740	@ 0x2e4
 80008a8:	2204      	movs	r2, #4
 80008aa:	2104      	movs	r1, #4
 80008ac:	f00a fe3f 	bl	800b52e <arm_mat_init_f32>

    // Clear state
    for (int i = 0; i < KALMAN_STATE_DIM; i++) {
 80008b0:	2300      	movs	r3, #0
 80008b2:	60fb      	str	r3, [r7, #12]
 80008b4:	e00b      	b.n	80008ce <Kalman_Init+0x134>
        kf->x_data[i] = 0.0f;
 80008b6:	687a      	ldr	r2, [r7, #4]
 80008b8:	68fb      	ldr	r3, [r7, #12]
 80008ba:	338c      	adds	r3, #140	@ 0x8c
 80008bc:	009b      	lsls	r3, r3, #2
 80008be:	4413      	add	r3, r2
 80008c0:	3304      	adds	r3, #4
 80008c2:	f04f 0200 	mov.w	r2, #0
 80008c6:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < KALMAN_STATE_DIM; i++) {
 80008c8:	68fb      	ldr	r3, [r7, #12]
 80008ca:	3301      	adds	r3, #1
 80008cc:	60fb      	str	r3, [r7, #12]
 80008ce:	68fb      	ldr	r3, [r7, #12]
 80008d0:	2b03      	cmp	r3, #3
 80008d2:	ddf0      	ble.n	80008b6 <Kalman_Init+0x11c>
    }
}
 80008d4:	bf00      	nop
 80008d6:	bf00      	nop
 80008d8:	3710      	adds	r7, #16
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}

080008de <Kalman_SetProcessNoise>:

void Kalman_SetProcessNoise(KalmanFilter *kf, float value) {
 80008de:	b480      	push	{r7}
 80008e0:	b085      	sub	sp, #20
 80008e2:	af00      	add	r7, sp, #0
 80008e4:	6078      	str	r0, [r7, #4]
 80008e6:	ed87 0a00 	vstr	s0, [r7]
    for (int i = 0; i < KALMAN_STATE_DIM; i++) {
 80008ea:	2300      	movs	r3, #0
 80008ec:	60fb      	str	r3, [r7, #12]
 80008ee:	e01c      	b.n	800092a <Kalman_SetProcessNoise+0x4c>
        for (int j = 0; j < KALMAN_STATE_DIM; j++) {
 80008f0:	2300      	movs	r3, #0
 80008f2:	60bb      	str	r3, [r7, #8]
 80008f4:	e013      	b.n	800091e <Kalman_SetProcessNoise+0x40>
            kf->Q_data[i * KALMAN_STATE_DIM + j] = (i == j) ? value : 0.0f;
 80008f6:	68fa      	ldr	r2, [r7, #12]
 80008f8:	68bb      	ldr	r3, [r7, #8]
 80008fa:	429a      	cmp	r2, r3
 80008fc:	d101      	bne.n	8000902 <Kalman_SetProcessNoise+0x24>
 80008fe:	683b      	ldr	r3, [r7, #0]
 8000900:	e001      	b.n	8000906 <Kalman_SetProcessNoise+0x28>
 8000902:	f04f 0300 	mov.w	r3, #0
 8000906:	68fa      	ldr	r2, [r7, #12]
 8000908:	0091      	lsls	r1, r2, #2
 800090a:	68ba      	ldr	r2, [r7, #8]
 800090c:	440a      	add	r2, r1
 800090e:	6879      	ldr	r1, [r7, #4]
 8000910:	324c      	adds	r2, #76	@ 0x4c
 8000912:	0092      	lsls	r2, r2, #2
 8000914:	440a      	add	r2, r1
 8000916:	6013      	str	r3, [r2, #0]
        for (int j = 0; j < KALMAN_STATE_DIM; j++) {
 8000918:	68bb      	ldr	r3, [r7, #8]
 800091a:	3301      	adds	r3, #1
 800091c:	60bb      	str	r3, [r7, #8]
 800091e:	68bb      	ldr	r3, [r7, #8]
 8000920:	2b03      	cmp	r3, #3
 8000922:	dde8      	ble.n	80008f6 <Kalman_SetProcessNoise+0x18>
    for (int i = 0; i < KALMAN_STATE_DIM; i++) {
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	3301      	adds	r3, #1
 8000928:	60fb      	str	r3, [r7, #12]
 800092a:	68fb      	ldr	r3, [r7, #12]
 800092c:	2b03      	cmp	r3, #3
 800092e:	dddf      	ble.n	80008f0 <Kalman_SetProcessNoise+0x12>
        }
    }
}
 8000930:	bf00      	nop
 8000932:	bf00      	nop
 8000934:	3714      	adds	r7, #20
 8000936:	46bd      	mov	sp, r7
 8000938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093c:	4770      	bx	lr

0800093e <Kalman_SetMeasurementNoise>:

void Kalman_SetMeasurementNoise(KalmanFilter *kf, float value) {
 800093e:	b480      	push	{r7}
 8000940:	b085      	sub	sp, #20
 8000942:	af00      	add	r7, sp, #0
 8000944:	6078      	str	r0, [r7, #4]
 8000946:	ed87 0a00 	vstr	s0, [r7]
    for (int i = 0; i < KALMAN_MEAS_DIM; i++) {
 800094a:	2300      	movs	r3, #0
 800094c:	60fb      	str	r3, [r7, #12]
 800094e:	e01c      	b.n	800098a <Kalman_SetMeasurementNoise+0x4c>
        for (int j = 0; j < KALMAN_MEAS_DIM; j++) {
 8000950:	2300      	movs	r3, #0
 8000952:	60bb      	str	r3, [r7, #8]
 8000954:	e013      	b.n	800097e <Kalman_SetMeasurementNoise+0x40>
            kf->R_data[i * KALMAN_MEAS_DIM + j] = (i == j) ? value : 0.0f;
 8000956:	68fa      	ldr	r2, [r7, #12]
 8000958:	68bb      	ldr	r3, [r7, #8]
 800095a:	429a      	cmp	r2, r3
 800095c:	d101      	bne.n	8000962 <Kalman_SetMeasurementNoise+0x24>
 800095e:	683b      	ldr	r3, [r7, #0]
 8000960:	e001      	b.n	8000966 <Kalman_SetMeasurementNoise+0x28>
 8000962:	f04f 0300 	mov.w	r3, #0
 8000966:	68fa      	ldr	r2, [r7, #12]
 8000968:	0091      	lsls	r1, r2, #2
 800096a:	68ba      	ldr	r2, [r7, #8]
 800096c:	440a      	add	r2, r1
 800096e:	6879      	ldr	r1, [r7, #4]
 8000970:	325c      	adds	r2, #92	@ 0x5c
 8000972:	0092      	lsls	r2, r2, #2
 8000974:	440a      	add	r2, r1
 8000976:	6013      	str	r3, [r2, #0]
        for (int j = 0; j < KALMAN_MEAS_DIM; j++) {
 8000978:	68bb      	ldr	r3, [r7, #8]
 800097a:	3301      	adds	r3, #1
 800097c:	60bb      	str	r3, [r7, #8]
 800097e:	68bb      	ldr	r3, [r7, #8]
 8000980:	2b03      	cmp	r3, #3
 8000982:	dde8      	ble.n	8000956 <Kalman_SetMeasurementNoise+0x18>
    for (int i = 0; i < KALMAN_MEAS_DIM; i++) {
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	3301      	adds	r3, #1
 8000988:	60fb      	str	r3, [r7, #12]
 800098a:	68fb      	ldr	r3, [r7, #12]
 800098c:	2b03      	cmp	r3, #3
 800098e:	dddf      	ble.n	8000950 <Kalman_SetMeasurementNoise+0x12>
        }
    }
}
 8000990:	bf00      	nop
 8000992:	bf00      	nop
 8000994:	3714      	adds	r7, #20
 8000996:	46bd      	mov	sp, r7
 8000998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099c:	4770      	bx	lr

0800099e <Kalman_SetInput>:

void Kalman_SetInput(KalmanFilter *kf, float value)
{
 800099e:	b480      	push	{r7}
 80009a0:	b083      	sub	sp, #12
 80009a2:	af00      	add	r7, sp, #0
 80009a4:	6078      	str	r0, [r7, #4]
 80009a6:	ed87 0a00 	vstr	s0, [r7]
	kf->Input_data[0] = value;
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	683a      	ldr	r2, [r7, #0]
 80009ae:	f8c3 2230 	str.w	r2, [r3, #560]	@ 0x230
	}
 80009b2:	bf00      	nop
 80009b4:	370c      	adds	r7, #12
 80009b6:	46bd      	mov	sp, r7
 80009b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009bc:	4770      	bx	lr

080009be <Kalman_Predict>:

void Kalman_Predict(KalmanFilter *kf) {
 80009be:	b580      	push	{r7, lr}
 80009c0:	b082      	sub	sp, #8
 80009c2:	af00      	add	r7, sp, #0
 80009c4:	6078      	str	r0, [r7, #4]
	// x = A * x + B * u
	arm_mat_mult_f32(&kf->A, &kf->x, &kf->temp1);   // temp1 = A * x
 80009c6:	6878      	ldr	r0, [r7, #4]
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	3358      	adds	r3, #88	@ 0x58
 80009d2:	461a      	mov	r2, r3
 80009d4:	f00b f93a 	bl	800bc4c <arm_mat_mult_f32>
	arm_mat_mult_f32(&kf->B, &kf->Input, &kf->temp2);   // temp2 = B * u
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	f103 0008 	add.w	r0, r3, #8
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	3360      	adds	r3, #96	@ 0x60
 80009e8:	461a      	mov	r2, r3
 80009ea:	f00b f92f 	bl	800bc4c <arm_mat_mult_f32>
	arm_mat_add_f32(&kf->temp1, &kf->temp2, &kf->x); // x = temp1 + temp2
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	f103 0058 	add.w	r0, r3, #88	@ 0x58
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	f103 0160 	add.w	r1, r3, #96	@ 0x60
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	3340      	adds	r3, #64	@ 0x40
 80009fe:	461a      	mov	r2, r3
 8000a00:	f00a fd5a 	bl	800b4b8 <arm_mat_add_f32>

    // P = A * P * A' + Q
    arm_mat_mult_f32(&kf->A, &kf->P, &kf->temp1);
 8000a04:	6878      	ldr	r0, [r7, #4]
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	3358      	adds	r3, #88	@ 0x58
 8000a10:	461a      	mov	r2, r3
 8000a12:	f00b f91b 	bl	800bc4c <arm_mat_mult_f32>
    arm_mat_trans_f32(&kf->A, &kf->temp2);  // reuse temp2
 8000a16:	687a      	ldr	r2, [r7, #4]
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	3360      	adds	r3, #96	@ 0x60
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	4610      	mov	r0, r2
 8000a20:	f00b f9c9 	bl	800bdb6 <arm_mat_trans_f32>
    arm_mat_mult_f32(&kf->temp1, &kf->temp2, &kf->P);
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	f103 0058 	add.w	r0, r3, #88	@ 0x58
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	f103 0160 	add.w	r1, r3, #96	@ 0x60
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	3328      	adds	r3, #40	@ 0x28
 8000a34:	461a      	mov	r2, r3
 8000a36:	f00b f909 	bl	800bc4c <arm_mat_mult_f32>
    arm_mat_add_f32(&kf->P, &kf->Q, &kf->P);
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	f103 0118 	add.w	r1, r3, #24
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	3328      	adds	r3, #40	@ 0x28
 8000a4a:	461a      	mov	r2, r3
 8000a4c:	f00a fd34 	bl	800b4b8 <arm_mat_add_f32>
}
 8000a50:	bf00      	nop
 8000a52:	3708      	adds	r7, #8
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bd80      	pop	{r7, pc}

08000a58 <Kalman_Update>:

void Kalman_Update(KalmanFilter *kf, float32_t *measurement) {
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b088      	sub	sp, #32
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
 8000a60:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < KALMAN_MEAS_DIM; i++) {
 8000a62:	2300      	movs	r3, #0
 8000a64:	61fb      	str	r3, [r7, #28]
 8000a66:	e00e      	b.n	8000a86 <Kalman_Update+0x2e>
        kf->z_data[i] = measurement[i];
 8000a68:	69fb      	ldr	r3, [r7, #28]
 8000a6a:	009b      	lsls	r3, r3, #2
 8000a6c:	683a      	ldr	r2, [r7, #0]
 8000a6e:	4413      	add	r3, r2
 8000a70:	681a      	ldr	r2, [r3, #0]
 8000a72:	6879      	ldr	r1, [r7, #4]
 8000a74:	69fb      	ldr	r3, [r7, #28]
 8000a76:	3394      	adds	r3, #148	@ 0x94
 8000a78:	009b      	lsls	r3, r3, #2
 8000a7a:	440b      	add	r3, r1
 8000a7c:	3304      	adds	r3, #4
 8000a7e:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < KALMAN_MEAS_DIM; i++) {
 8000a80:	69fb      	ldr	r3, [r7, #28]
 8000a82:	3301      	adds	r3, #1
 8000a84:	61fb      	str	r3, [r7, #28]
 8000a86:	69fb      	ldr	r3, [r7, #28]
 8000a88:	2b03      	cmp	r3, #3
 8000a8a:	dded      	ble.n	8000a68 <Kalman_Update+0x10>
    }

    // K = P * H' * (H * P * H' + R)^-1
    arm_mat_trans_f32(&kf->H, &kf->temp2);
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	f103 0210 	add.w	r2, r3, #16
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	3360      	adds	r3, #96	@ 0x60
 8000a96:	4619      	mov	r1, r3
 8000a98:	4610      	mov	r0, r2
 8000a9a:	f00b f98c 	bl	800bdb6 <arm_mat_trans_f32>
    arm_mat_mult_f32(&kf->P, &kf->temp2, &kf->temp1);
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	f103 0160 	add.w	r1, r3, #96	@ 0x60
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	3358      	adds	r3, #88	@ 0x58
 8000aae:	461a      	mov	r2, r3
 8000ab0:	f00b f8cc 	bl	800bc4c <arm_mat_mult_f32>
    arm_mat_mult_f32(&kf->H, &kf->temp1, &kf->temp3);
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	f103 0010 	add.w	r0, r3, #16
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	f103 0158 	add.w	r1, r3, #88	@ 0x58
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	3368      	adds	r3, #104	@ 0x68
 8000ac4:	461a      	mov	r2, r3
 8000ac6:	f00b f8c1 	bl	800bc4c <arm_mat_mult_f32>
    arm_mat_add_f32(&kf->temp3, &kf->R, &kf->temp3);
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	f103 0068 	add.w	r0, r3, #104	@ 0x68
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	f103 0120 	add.w	r1, r3, #32
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	3368      	adds	r3, #104	@ 0x68
 8000ada:	461a      	mov	r2, r3
 8000adc:	f00a fcec 	bl	800b4b8 <arm_mat_add_f32>
    arm_mat_inverse_f32(&kf->temp3, &kf->temp3);
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	3368      	adds	r3, #104	@ 0x68
 8000aea:	4619      	mov	r1, r3
 8000aec:	4610      	mov	r0, r2
 8000aee:	f00a fd36 	bl	800b55e <arm_mat_inverse_f32>
    arm_mat_mult_f32(&kf->temp1, &kf->temp3, &kf->K);
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	f103 0058 	add.w	r0, r3, #88	@ 0x58
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	f103 0168 	add.w	r1, r3, #104	@ 0x68
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	3330      	adds	r3, #48	@ 0x30
 8000b02:	461a      	mov	r2, r3
 8000b04:	f00b f8a2 	bl	800bc4c <arm_mat_mult_f32>

    // x = x + K * (z - H * x)
    arm_mat_mult_f32(&kf->H, &kf->x, &kf->u);         // reuse u for Hx
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	f103 0010 	add.w	r0, r3, #16
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	3348      	adds	r3, #72	@ 0x48
 8000b18:	461a      	mov	r2, r3
 8000b1a:	f00b f897 	bl	800bc4c <arm_mat_mult_f32>
    for (int i = 0; i < KALMAN_MEAS_DIM; i++) {
 8000b1e:	2300      	movs	r3, #0
 8000b20:	61bb      	str	r3, [r7, #24]
 8000b22:	e01c      	b.n	8000b5e <Kalman_Update+0x106>
        kf->u_data[i] = kf->z_data[i] - kf->u_data[i]; // z - Hx
 8000b24:	687a      	ldr	r2, [r7, #4]
 8000b26:	69bb      	ldr	r3, [r7, #24]
 8000b28:	3394      	adds	r3, #148	@ 0x94
 8000b2a:	009b      	lsls	r3, r3, #2
 8000b2c:	4413      	add	r3, r2
 8000b2e:	3304      	adds	r3, #4
 8000b30:	ed93 7a00 	vldr	s14, [r3]
 8000b34:	687a      	ldr	r2, [r7, #4]
 8000b36:	69bb      	ldr	r3, [r7, #24]
 8000b38:	3390      	adds	r3, #144	@ 0x90
 8000b3a:	009b      	lsls	r3, r3, #2
 8000b3c:	4413      	add	r3, r2
 8000b3e:	3304      	adds	r3, #4
 8000b40:	edd3 7a00 	vldr	s15, [r3]
 8000b44:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000b48:	687a      	ldr	r2, [r7, #4]
 8000b4a:	69bb      	ldr	r3, [r7, #24]
 8000b4c:	3390      	adds	r3, #144	@ 0x90
 8000b4e:	009b      	lsls	r3, r3, #2
 8000b50:	4413      	add	r3, r2
 8000b52:	3304      	adds	r3, #4
 8000b54:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < KALMAN_MEAS_DIM; i++) {
 8000b58:	69bb      	ldr	r3, [r7, #24]
 8000b5a:	3301      	adds	r3, #1
 8000b5c:	61bb      	str	r3, [r7, #24]
 8000b5e:	69bb      	ldr	r3, [r7, #24]
 8000b60:	2b03      	cmp	r3, #3
 8000b62:	dddf      	ble.n	8000b24 <Kalman_Update+0xcc>
    }
    arm_mat_mult_f32(&kf->K, &kf->u, &kf->u);         // reuse u for K*(z-Hx)
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	f103 0148 	add.w	r1, r3, #72	@ 0x48
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	3348      	adds	r3, #72	@ 0x48
 8000b74:	461a      	mov	r2, r3
 8000b76:	f00b f869 	bl	800bc4c <arm_mat_mult_f32>
    for (int i = 0; i < KALMAN_STATE_DIM; i++) {
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	617b      	str	r3, [r7, #20]
 8000b7e:	e01c      	b.n	8000bba <Kalman_Update+0x162>
        kf->x_data[i] += kf->u_data[i];
 8000b80:	687a      	ldr	r2, [r7, #4]
 8000b82:	697b      	ldr	r3, [r7, #20]
 8000b84:	338c      	adds	r3, #140	@ 0x8c
 8000b86:	009b      	lsls	r3, r3, #2
 8000b88:	4413      	add	r3, r2
 8000b8a:	3304      	adds	r3, #4
 8000b8c:	ed93 7a00 	vldr	s14, [r3]
 8000b90:	687a      	ldr	r2, [r7, #4]
 8000b92:	697b      	ldr	r3, [r7, #20]
 8000b94:	3390      	adds	r3, #144	@ 0x90
 8000b96:	009b      	lsls	r3, r3, #2
 8000b98:	4413      	add	r3, r2
 8000b9a:	3304      	adds	r3, #4
 8000b9c:	edd3 7a00 	vldr	s15, [r3]
 8000ba0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ba4:	687a      	ldr	r2, [r7, #4]
 8000ba6:	697b      	ldr	r3, [r7, #20]
 8000ba8:	338c      	adds	r3, #140	@ 0x8c
 8000baa:	009b      	lsls	r3, r3, #2
 8000bac:	4413      	add	r3, r2
 8000bae:	3304      	adds	r3, #4
 8000bb0:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < KALMAN_STATE_DIM; i++) {
 8000bb4:	697b      	ldr	r3, [r7, #20]
 8000bb6:	3301      	adds	r3, #1
 8000bb8:	617b      	str	r3, [r7, #20]
 8000bba:	697b      	ldr	r3, [r7, #20]
 8000bbc:	2b03      	cmp	r3, #3
 8000bbe:	dddf      	ble.n	8000b80 <Kalman_Update+0x128>
    }

    // P = (I - K * H) * P
    for (int i = 0; i < KALMAN_STATE_DIM * KALMAN_STATE_DIM; i++) {
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	613b      	str	r3, [r7, #16]
 8000bc4:	e00b      	b.n	8000bde <Kalman_Update+0x186>
        kf->temp1_data[i] = 0.0f;
 8000bc6:	687a      	ldr	r2, [r7, #4]
 8000bc8:	693b      	ldr	r3, [r7, #16]
 8000bca:	3398      	adds	r3, #152	@ 0x98
 8000bcc:	009b      	lsls	r3, r3, #2
 8000bce:	4413      	add	r3, r2
 8000bd0:	3304      	adds	r3, #4
 8000bd2:	f04f 0200 	mov.w	r2, #0
 8000bd6:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < KALMAN_STATE_DIM * KALMAN_STATE_DIM; i++) {
 8000bd8:	693b      	ldr	r3, [r7, #16]
 8000bda:	3301      	adds	r3, #1
 8000bdc:	613b      	str	r3, [r7, #16]
 8000bde:	693b      	ldr	r3, [r7, #16]
 8000be0:	2b0f      	cmp	r3, #15
 8000be2:	ddf0      	ble.n	8000bc6 <Kalman_Update+0x16e>
    }
    for (int i = 0; i < KALMAN_STATE_DIM; i++) {
 8000be4:	2300      	movs	r3, #0
 8000be6:	60fb      	str	r3, [r7, #12]
 8000be8:	e00e      	b.n	8000c08 <Kalman_Update+0x1b0>
        kf->temp1_data[i * KALMAN_STATE_DIM + i] = 1.0f;
 8000bea:	68fa      	ldr	r2, [r7, #12]
 8000bec:	4613      	mov	r3, r2
 8000bee:	009b      	lsls	r3, r3, #2
 8000bf0:	4413      	add	r3, r2
 8000bf2:	687a      	ldr	r2, [r7, #4]
 8000bf4:	3398      	adds	r3, #152	@ 0x98
 8000bf6:	009b      	lsls	r3, r3, #2
 8000bf8:	4413      	add	r3, r2
 8000bfa:	3304      	adds	r3, #4
 8000bfc:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8000c00:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < KALMAN_STATE_DIM; i++) {
 8000c02:	68fb      	ldr	r3, [r7, #12]
 8000c04:	3301      	adds	r3, #1
 8000c06:	60fb      	str	r3, [r7, #12]
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	2b03      	cmp	r3, #3
 8000c0c:	dded      	ble.n	8000bea <Kalman_Update+0x192>
    }
    arm_mat_mult_f32(&kf->K, &kf->H, &kf->temp2);
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	f103 0110 	add.w	r1, r3, #16
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	3360      	adds	r3, #96	@ 0x60
 8000c1e:	461a      	mov	r2, r3
 8000c20:	f00b f814 	bl	800bc4c <arm_mat_mult_f32>
    arm_mat_sub_f32(&kf->temp1, &kf->temp2, &kf->temp1);
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	f103 0058 	add.w	r0, r3, #88	@ 0x58
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	f103 0160 	add.w	r1, r3, #96	@ 0x60
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	3358      	adds	r3, #88	@ 0x58
 8000c34:	461a      	mov	r2, r3
 8000c36:	f00b f883 	bl	800bd40 <arm_mat_sub_f32>
    arm_mat_mult_f32(&kf->temp1, &kf->P, &kf->P);
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	f103 0058 	add.w	r0, r3, #88	@ 0x58
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	3328      	adds	r3, #40	@ 0x28
 8000c4a:	461a      	mov	r2, r3
 8000c4c:	f00a fffe 	bl	800bc4c <arm_mat_mult_f32>
}
 8000c50:	bf00      	nop
 8000c52:	3720      	adds	r7, #32
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}

08000c58 <modbus_1t5_Timeout>:
void Modbus_frame_response();


// function for interrupt
void modbus_1t5_Timeout(TIM_HandleTypeDef *htim)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b083      	sub	sp, #12
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 8000c60:	4b04      	ldr	r3, [pc, #16]	@ (8000c74 <modbus_1t5_Timeout+0x1c>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	2201      	movs	r2, #1
 8000c66:	751a      	strb	r2, [r3, #20]
}
 8000c68:	bf00      	nop
 8000c6a:	370c      	adds	r7, #12
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c72:	4770      	bx	lr
 8000c74:	2000027c 	.word	0x2000027c

08000c78 <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	b083      	sub	sp, #12
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 8000c80:	4b04      	ldr	r3, [pc, #16]	@ (8000c94 <modbus_3t5_Timeout+0x1c>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	2201      	movs	r2, #1
 8000c86:	755a      	strb	r2, [r3, #21]
}
 8000c88:	bf00      	nop
 8000c8a:	370c      	adds	r7, #12
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c92:	4770      	bx	lr
 8000c94:	2000027c 	.word	0x2000027c

08000c98 <modbus_UART_Recived>:
void modbus_UART_Recived(UART_HandleTypeDef *huart,uint32_t pos)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
 8000ca0:	6039      	str	r1, [r7, #0]

	//restart timer / start timer of counting time with modbus RTU
	hModbus->Flag_URev =1;
 8000ca2:	4b15      	ldr	r3, [pc, #84]	@ (8000cf8 <modbus_UART_Recived+0x60>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	2201      	movs	r2, #1
 8000ca8:	759a      	strb	r2, [r3, #22]
	if(hModbus->modbusUartStructure.RxTail++<MODBUS_MESSAGEBUFFER_SIZE)
 8000caa:	4b13      	ldr	r3, [pc, #76]	@ (8000cf8 <modbus_UART_Recived+0x60>)
 8000cac:	681a      	ldr	r2, [r3, #0]
 8000cae:	f8b2 33a2 	ldrh.w	r3, [r2, #930]	@ 0x3a2
 8000cb2:	1c59      	adds	r1, r3, #1
 8000cb4:	b289      	uxth	r1, r1
 8000cb6:	f8a2 13a2 	strh.w	r1, [r2, #930]	@ 0x3a2
 8000cba:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8000cbe:	d210      	bcs.n	8000ce2 <modbus_UART_Recived+0x4a>
	{


	    HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 8000cc0:	4b0d      	ldr	r3, [pc, #52]	@ (8000cf8 <modbus_UART_Recived+0x60>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	68d8      	ldr	r0, [r3, #12]
 8000cc6:	4b0c      	ldr	r3, [pc, #48]	@ (8000cf8 <modbus_UART_Recived+0x60>)
 8000cc8:	681a      	ldr	r2, [r3, #0]
 8000cca:	4b0b      	ldr	r3, [pc, #44]	@ (8000cf8 <modbus_UART_Recived+0x60>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8000cd2:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 8000cd6:	4413      	add	r3, r2
 8000cd8:	3302      	adds	r3, #2
 8000cda:	2201      	movs	r2, #1
 8000cdc:	4619      	mov	r1, r3
 8000cde:	f008 f879 	bl	8008dd4 <HAL_UART_Receive_IT>
	}
	__HAL_TIM_SET_COUNTER(hModbus->htim,0);
 8000ce2:	4b05      	ldr	r3, [pc, #20]	@ (8000cf8 <modbus_UART_Recived+0x60>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	691b      	ldr	r3, [r3, #16]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	2200      	movs	r2, #0
 8000cec:	625a      	str	r2, [r3, #36]	@ 0x24

}
 8000cee:	bf00      	nop
 8000cf0:	3708      	adds	r7, #8
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	2000027c 	.word	0x2000027c

08000cfc <Modbus_init>:


void Modbus_init(ModbusHandleTypedef* hmodbus,u16u8_t* RegisterStartAddress)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b082      	sub	sp, #8
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
 8000d04:	6039      	str	r1, [r7, #0]
	hModbus = hmodbus;
 8000d06:	4a24      	ldr	r2, [pc, #144]	@ (8000d98 <Modbus_init+0x9c>)
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	6013      	str	r3, [r2, #0]

	hModbus->RegisterAddress = RegisterStartAddress;
 8000d0c:	4b22      	ldr	r3, [pc, #136]	@ (8000d98 <Modbus_init+0x9c>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	683a      	ldr	r2, [r7, #0]
 8000d12:	605a      	str	r2, [r3, #4]

	//config timer interrupt
	HAL_TIM_RegisterCallback(hModbus->htim,HAL_TIM_OC_DELAY_ELAPSED_CB_ID,(void*)modbus_1t5_Timeout);
 8000d14:	4b20      	ldr	r3, [pc, #128]	@ (8000d98 <Modbus_init+0x9c>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	691b      	ldr	r3, [r3, #16]
 8000d1a:	4a20      	ldr	r2, [pc, #128]	@ (8000d9c <Modbus_init+0xa0>)
 8000d1c:	2114      	movs	r1, #20
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f006 ff4e 	bl	8007bc0 <HAL_TIM_RegisterCallback>
	HAL_TIM_RegisterCallback(hModbus->htim,HAL_TIM_PERIOD_ELAPSED_CB_ID ,(void*)modbus_3t5_Timeout);
 8000d24:	4b1c      	ldr	r3, [pc, #112]	@ (8000d98 <Modbus_init+0x9c>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	691b      	ldr	r3, [r3, #16]
 8000d2a:	4a1d      	ldr	r2, [pc, #116]	@ (8000da0 <Modbus_init+0xa4>)
 8000d2c:	210e      	movs	r1, #14
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f006 ff46 	bl	8007bc0 <HAL_TIM_RegisterCallback>

	//config UART interrupt
	HAL_UART_RegisterCallback(hModbus->huart,HAL_UART_RX_COMPLETE_CB_ID,(void*)modbus_UART_Recived);
 8000d34:	4b18      	ldr	r3, [pc, #96]	@ (8000d98 <Modbus_init+0x9c>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	68db      	ldr	r3, [r3, #12]
 8000d3a:	4a1a      	ldr	r2, [pc, #104]	@ (8000da4 <Modbus_init+0xa8>)
 8000d3c:	2103      	movs	r1, #3
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f007 ff8e 	bl	8008c60 <HAL_UART_RegisterCallback>
	//start Receive
    HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 8000d44:	4b14      	ldr	r3, [pc, #80]	@ (8000d98 <Modbus_init+0x9c>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	68d8      	ldr	r0, [r3, #12]
 8000d4a:	4b13      	ldr	r3, [pc, #76]	@ (8000d98 <Modbus_init+0x9c>)
 8000d4c:	681a      	ldr	r2, [r3, #0]
 8000d4e:	4b12      	ldr	r3, [pc, #72]	@ (8000d98 <Modbus_init+0x9c>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8000d56:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 8000d5a:	4413      	add	r3, r2
 8000d5c:	3302      	adds	r3, #2
 8000d5e:	2201      	movs	r2, #1
 8000d60:	4619      	mov	r1, r3
 8000d62:	f008 f837 	bl	8008dd4 <HAL_UART_Receive_IT>


    if(hModbus->htim->State == HAL_TIM_STATE_READY)
 8000d66:	4b0c      	ldr	r3, [pc, #48]	@ (8000d98 <Modbus_init+0x9c>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	691b      	ldr	r3, [r3, #16]
 8000d6c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8000d70:	b2db      	uxtb	r3, r3
 8000d72:	2b01      	cmp	r3, #1
 8000d74:	d10c      	bne.n	8000d90 <Modbus_init+0x94>
    	{
    		HAL_TIM_Base_Start_IT(hModbus->htim);
 8000d76:	4b08      	ldr	r3, [pc, #32]	@ (8000d98 <Modbus_init+0x9c>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	691b      	ldr	r3, [r3, #16]
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f005 fe09 	bl	8006994 <HAL_TIM_Base_Start_IT>
    		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 8000d82:	4b05      	ldr	r3, [pc, #20]	@ (8000d98 <Modbus_init+0x9c>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	691b      	ldr	r3, [r3, #16]
 8000d88:	2100      	movs	r1, #0
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f006 f8d0 	bl	8006f30 <HAL_TIM_OnePulse_Start_IT>
    	}

}
 8000d90:	bf00      	nop
 8000d92:	3708      	adds	r7, #8
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}
 8000d98:	2000027c 	.word	0x2000027c
 8000d9c:	08000c59 	.word	0x08000c59
 8000da0:	08000c79 	.word	0x08000c79
 8000da4:	08000c99 	.word	0x08000c99

08000da8 <CRC16>:
} ;

unsigned short CRC16 ( puchMsg, usDataLen ) /* The function returns the CRC as a unsigned short type */
unsigned char *puchMsg ; /* message to calculate CRC upon */
unsigned short usDataLen ; /* quantity of bytes in message */
{
 8000da8:	b480      	push	{r7}
 8000daa:	b085      	sub	sp, #20
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
 8000db0:	460b      	mov	r3, r1
 8000db2:	803b      	strh	r3, [r7, #0]
	unsigned char uchCRCHi = 0xFF ; /* high byte of CRC initialized */
 8000db4:	23ff      	movs	r3, #255	@ 0xff
 8000db6:	73fb      	strb	r3, [r7, #15]
	unsigned char uchCRCLo = 0xFF ; /* low byte of CRC initialized */
 8000db8:	23ff      	movs	r3, #255	@ 0xff
 8000dba:	73bb      	strb	r3, [r7, #14]
	unsigned uIndex ; /* will index into CRC lookup table */
	while (usDataLen--) /* pass through message buffer */
 8000dbc:	e013      	b.n	8000de6 <CRC16+0x3e>
	{
		uIndex = uchCRCLo ^ *puchMsg++ ; /* calculate the CRC */
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	1c5a      	adds	r2, r3, #1
 8000dc2:	607a      	str	r2, [r7, #4]
 8000dc4:	781a      	ldrb	r2, [r3, #0]
 8000dc6:	7bbb      	ldrb	r3, [r7, #14]
 8000dc8:	4053      	eors	r3, r2
 8000dca:	b2db      	uxtb	r3, r3
 8000dcc:	60bb      	str	r3, [r7, #8]
		uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex] ;
 8000dce:	4a10      	ldr	r2, [pc, #64]	@ (8000e10 <CRC16+0x68>)
 8000dd0:	68bb      	ldr	r3, [r7, #8]
 8000dd2:	4413      	add	r3, r2
 8000dd4:	781a      	ldrb	r2, [r3, #0]
 8000dd6:	7bfb      	ldrb	r3, [r7, #15]
 8000dd8:	4053      	eors	r3, r2
 8000dda:	73bb      	strb	r3, [r7, #14]
		uchCRCHi = auchCRCLo[uIndex] ;
 8000ddc:	4a0d      	ldr	r2, [pc, #52]	@ (8000e14 <CRC16+0x6c>)
 8000dde:	68bb      	ldr	r3, [r7, #8]
 8000de0:	4413      	add	r3, r2
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	73fb      	strb	r3, [r7, #15]
	while (usDataLen--) /* pass through message buffer */
 8000de6:	883b      	ldrh	r3, [r7, #0]
 8000de8:	1e5a      	subs	r2, r3, #1
 8000dea:	803a      	strh	r2, [r7, #0]
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d1e6      	bne.n	8000dbe <CRC16+0x16>
	}
	return (uchCRCHi << 8 | uchCRCLo) ;
 8000df0:	7bfb      	ldrb	r3, [r7, #15]
 8000df2:	b21b      	sxth	r3, r3
 8000df4:	021b      	lsls	r3, r3, #8
 8000df6:	b21a      	sxth	r2, r3
 8000df8:	7bbb      	ldrb	r3, [r7, #14]
 8000dfa:	b21b      	sxth	r3, r3
 8000dfc:	4313      	orrs	r3, r2
 8000dfe:	b21b      	sxth	r3, r3
 8000e00:	b29b      	uxth	r3, r3
}
 8000e02:	4618      	mov	r0, r3
 8000e04:	3714      	adds	r7, #20
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr
 8000e0e:	bf00      	nop
 8000e10:	20000100 	.word	0x20000100
 8000e14:	20000000 	.word	0x20000000

08000e18 <Modbus_Protocal_Worker>:



void Modbus_Protocal_Worker()
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b082      	sub	sp, #8
 8000e1c:	af00      	add	r7, sp, #0
	switch(hModbus->Mstatus)
 8000e1e:	4b80      	ldr	r3, [pc, #512]	@ (8001020 <Modbus_Protocal_Worker+0x208>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	7e1b      	ldrb	r3, [r3, #24]
 8000e24:	3b01      	subs	r3, #1
 8000e26:	2b03      	cmp	r3, #3
 8000e28:	d80a      	bhi.n	8000e40 <Modbus_Protocal_Worker+0x28>
 8000e2a:	a201      	add	r2, pc, #4	@ (adr r2, 8000e30 <Modbus_Protocal_Worker+0x18>)
 8000e2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e30:	08000e4b 	.word	0x08000e4b
 8000e34:	08000fe9 	.word	0x08000fe9
 8000e38:	08000ed5 	.word	0x08000ed5
 8000e3c:	08000efb 	.word	0x08000efb
	{
	default:
	case Modbus_state_Init:
		/*init Modbus protocal*/

		hModbus->Mstatus = Modbus_state_Idle;
 8000e40:	4b77      	ldr	r3, [pc, #476]	@ (8001020 <Modbus_Protocal_Worker+0x208>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	2201      	movs	r2, #1
 8000e46:	761a      	strb	r2, [r3, #24]
		break;
 8000e48:	e0e6      	b.n	8001018 <Modbus_Protocal_Worker+0x200>
	case Modbus_state_Idle:
		/*Idle state*/

		//check that we have response message
		if(hModbus->TxCount)
 8000e4a:	4b75      	ldr	r3, [pc, #468]	@ (8001020 <Modbus_Protocal_Worker+0x208>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	f893 3271 	ldrb.w	r3, [r3, #625]	@ 0x271
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d002      	beq.n	8000e5c <Modbus_Protocal_Worker+0x44>
		{
			Modbus_Emission();
 8000e56:	f000 f9d5 	bl	8001204 <Modbus_Emission>
 8000e5a:	e01c      	b.n	8000e96 <Modbus_Protocal_Worker+0x7e>
		}

		// Received character
		else if(hModbus->Flag_URev)
 8000e5c:	4b70      	ldr	r3, [pc, #448]	@ (8001020 <Modbus_Protocal_Worker+0x208>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	7d9b      	ldrb	r3, [r3, #22]
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d017      	beq.n	8000e96 <Modbus_Protocal_Worker+0x7e>
		{
			/*reset Timer flag*/
			hModbus->Flag_T15TimeOut = 0;
 8000e66:	4b6e      	ldr	r3, [pc, #440]	@ (8001020 <Modbus_Protocal_Worker+0x208>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	751a      	strb	r2, [r3, #20]
			hModbus->Flag_T35TimeOut = 0;
 8000e6e:	4b6c      	ldr	r3, [pc, #432]	@ (8001020 <Modbus_Protocal_Worker+0x208>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	2200      	movs	r2, #0
 8000e74:	755a      	strb	r2, [r3, #21]
			__HAL_TIM_ENABLE(hModbus->htim);
 8000e76:	4b6a      	ldr	r3, [pc, #424]	@ (8001020 <Modbus_Protocal_Worker+0x208>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	691b      	ldr	r3, [r3, #16]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	681a      	ldr	r2, [r3, #0]
 8000e80:	4b67      	ldr	r3, [pc, #412]	@ (8001020 <Modbus_Protocal_Worker+0x208>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	691b      	ldr	r3, [r3, #16]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	f042 0201 	orr.w	r2, r2, #1
 8000e8c:	601a      	str	r2, [r3, #0]
			/*set state*/
			hModbus->Mstatus= Modbus_state_Reception;
 8000e8e:	4b64      	ldr	r3, [pc, #400]	@ (8001020 <Modbus_Protocal_Worker+0x208>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	2203      	movs	r2, #3
 8000e94:	761a      	strb	r2, [r3, #24]
		}

		//check that if UART RX not start, start receiving
		if(hModbus->huart->RxState == HAL_UART_STATE_READY)
 8000e96:	4b62      	ldr	r3, [pc, #392]	@ (8001020 <Modbus_Protocal_Worker+0x208>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	68db      	ldr	r3, [r3, #12]
 8000e9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000ea0:	2b20      	cmp	r3, #32
 8000ea2:	f040 80b2 	bne.w	800100a <Modbus_Protocal_Worker+0x1f2>
		{
			hModbus->modbusUartStructure.RxTail =0;
 8000ea6:	4b5e      	ldr	r3, [pc, #376]	@ (8001020 <Modbus_Protocal_Worker+0x208>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	2200      	movs	r2, #0
 8000eac:	f8a3 23a2 	strh.w	r2, [r3, #930]	@ 0x3a2
			HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 8000eb0:	4b5b      	ldr	r3, [pc, #364]	@ (8001020 <Modbus_Protocal_Worker+0x208>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	68d8      	ldr	r0, [r3, #12]
 8000eb6:	4b5a      	ldr	r3, [pc, #360]	@ (8001020 <Modbus_Protocal_Worker+0x208>)
 8000eb8:	681a      	ldr	r2, [r3, #0]
 8000eba:	4b59      	ldr	r3, [pc, #356]	@ (8001020 <Modbus_Protocal_Worker+0x208>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8000ec2:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 8000ec6:	4413      	add	r3, r2
 8000ec8:	3302      	adds	r3, #2
 8000eca:	2201      	movs	r2, #1
 8000ecc:	4619      	mov	r1, r3
 8000ece:	f007 ff81 	bl	8008dd4 <HAL_UART_Receive_IT>
		}
		break;
 8000ed2:	e09a      	b.n	800100a <Modbus_Protocal_Worker+0x1f2>
	case Modbus_state_Reception:

		if(hModbus->Flag_T15TimeOut)
 8000ed4:	4b52      	ldr	r3, [pc, #328]	@ (8001020 <Modbus_Protocal_Worker+0x208>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	7d1b      	ldrb	r3, [r3, #20]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	f000 8097 	beq.w	800100e <Modbus_Protocal_Worker+0x1f6>
		{
			/*reset recived flag*/
			hModbus->Flag_URev =0;
 8000ee0:	4b4f      	ldr	r3, [pc, #316]	@ (8001020 <Modbus_Protocal_Worker+0x208>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	759a      	strb	r2, [r3, #22]
			hModbus->RecvStatus = Modbus_RecvFrame_Null;
 8000ee8:	4b4d      	ldr	r3, [pc, #308]	@ (8001020 <Modbus_Protocal_Worker+0x208>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	22fe      	movs	r2, #254	@ 0xfe
 8000eee:	75da      	strb	r2, [r3, #23]

			/*compute CRC and Slave address*/



			hModbus->Mstatus = Modbus_state_ControlAndWaiting;
 8000ef0:	4b4b      	ldr	r3, [pc, #300]	@ (8001020 <Modbus_Protocal_Worker+0x208>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	2204      	movs	r2, #4
 8000ef6:	761a      	strb	r2, [r3, #24]
		}
		break;
 8000ef8:	e089      	b.n	800100e <Modbus_Protocal_Worker+0x1f6>
	case Modbus_state_ControlAndWaiting:
		/*Frame error , Not generate response , Clear buffer*/
		if(hModbus->Flag_URev)
 8000efa:	4b49      	ldr	r3, [pc, #292]	@ (8001020 <Modbus_Protocal_Worker+0x208>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	7d9b      	ldrb	r3, [r3, #22]
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d009      	beq.n	8000f18 <Modbus_Protocal_Worker+0x100>
		{

			if(!hModbus->RecvStatus)
 8000f04:	4b46      	ldr	r3, [pc, #280]	@ (8001020 <Modbus_Protocal_Worker+0x208>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	f993 3017 	ldrsb.w	r3, [r3, #23]
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d103      	bne.n	8000f18 <Modbus_Protocal_Worker+0x100>
			{
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 8000f10:	4b43      	ldr	r3, [pc, #268]	@ (8001020 <Modbus_Protocal_Worker+0x208>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	22ff      	movs	r2, #255	@ 0xff
 8000f16:	75da      	strb	r2, [r3, #23]
			}
		}

		/*Frame Calculation , calculate once*/
		if(hModbus->RecvStatus == Modbus_RecvFrame_Null)
 8000f18:	4b41      	ldr	r3, [pc, #260]	@ (8001020 <Modbus_Protocal_Worker+0x208>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	f993 3017 	ldrsb.w	r3, [r3, #23]
 8000f20:	f113 0f02 	cmn.w	r3, #2
 8000f24:	d150      	bne.n	8000fc8 <Modbus_Protocal_Worker+0x1b0>
		{
			hModbus->RecvStatus = Modbus_RecvFrame_Normal;
 8000f26:	4b3e      	ldr	r3, [pc, #248]	@ (8001020 <Modbus_Protocal_Worker+0x208>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	75da      	strb	r2, [r3, #23]
			// check CRC
			u16u8_t CalculateCRC;
			CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferRx,hModbus->modbusUartStructure.RxTail - 2);
 8000f2e:	4b3c      	ldr	r3, [pc, #240]	@ (8001020 <Modbus_Protocal_Worker+0x208>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	f203 2272 	addw	r2, r3, #626	@ 0x272
 8000f36:	4b3a      	ldr	r3, [pc, #232]	@ (8001020 <Modbus_Protocal_Worker+0x208>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8000f3e:	3b02      	subs	r3, #2
 8000f40:	4619      	mov	r1, r3
 8000f42:	4610      	mov	r0, r2
 8000f44:	f7ff ff30 	bl	8000da8 <CRC16>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	80bb      	strh	r3, [r7, #4]

			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 8000f4c:	793a      	ldrb	r2, [r7, #4]
 8000f4e:	4b34      	ldr	r3, [pc, #208]	@ (8001020 <Modbus_Protocal_Worker+0x208>)
 8000f50:	6819      	ldr	r1, [r3, #0]
 8000f52:	4b33      	ldr	r3, [pc, #204]	@ (8001020 <Modbus_Protocal_Worker+0x208>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8000f5a:	3b02      	subs	r3, #2
 8000f5c:	440b      	add	r3, r1
 8000f5e:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
 8000f62:	429a      	cmp	r2, r3
 8000f64:	d10c      	bne.n	8000f80 <Modbus_Protocal_Worker+0x168>
			&& CalculateCRC.U8[1] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail -1]))
 8000f66:	797a      	ldrb	r2, [r7, #5]
 8000f68:	4b2d      	ldr	r3, [pc, #180]	@ (8001020 <Modbus_Protocal_Worker+0x208>)
 8000f6a:	6819      	ldr	r1, [r3, #0]
 8000f6c:	4b2c      	ldr	r3, [pc, #176]	@ (8001020 <Modbus_Protocal_Worker+0x208>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8000f74:	3b01      	subs	r3, #1
 8000f76:	440b      	add	r3, r1
 8000f78:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 8000f7c:	429a      	cmp	r2, r3
 8000f7e:	d004      	beq.n	8000f8a <Modbus_Protocal_Worker+0x172>
			{
				// communication unsuccessful
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 8000f80:	4b27      	ldr	r3, [pc, #156]	@ (8001020 <Modbus_Protocal_Worker+0x208>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	22ff      	movs	r2, #255	@ 0xff
 8000f86:	75da      	strb	r2, [r3, #23]
				break;
 8000f88:	e046      	b.n	8001018 <Modbus_Protocal_Worker+0x200>
			}

			//check Slave Address
			if(hModbus->modbusUartStructure.MessageBufferRx[0] != hModbus->slaveAddress)
 8000f8a:	4b25      	ldr	r3, [pc, #148]	@ (8001020 <Modbus_Protocal_Worker+0x208>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	f893 2272 	ldrb.w	r2, [r3, #626]	@ 0x272
 8000f92:	4b23      	ldr	r3, [pc, #140]	@ (8001020 <Modbus_Protocal_Worker+0x208>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	781b      	ldrb	r3, [r3, #0]
 8000f98:	429a      	cmp	r2, r3
 8000f9a:	d113      	bne.n	8000fc4 <Modbus_Protocal_Worker+0x1ac>
				break;

			//copy recivced frame
			memcpy(hModbus->Rxframe,
 8000f9c:	4b20      	ldr	r3, [pc, #128]	@ (8001020 <Modbus_Protocal_Worker+0x208>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	f103 0019 	add.w	r0, r3, #25
					hModbus->modbusUartStructure.MessageBufferRx+1,
 8000fa4:	4b1e      	ldr	r3, [pc, #120]	@ (8001020 <Modbus_Protocal_Worker+0x208>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	f203 2372 	addw	r3, r3, #626	@ 0x272
			memcpy(hModbus->Rxframe,
 8000fac:	1c59      	adds	r1, r3, #1
					hModbus->modbusUartStructure.RxTail-3);
 8000fae:	4b1c      	ldr	r3, [pc, #112]	@ (8001020 <Modbus_Protocal_Worker+0x208>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8000fb6:	3b03      	subs	r3, #3
			memcpy(hModbus->Rxframe,
 8000fb8:	461a      	mov	r2, r3
 8000fba:	f00a ff6f 	bl	800be9c <memcpy>

			//execute command
			Modbus_frame_response();
 8000fbe:	f000 f909 	bl	80011d4 <Modbus_frame_response>
 8000fc2:	e001      	b.n	8000fc8 <Modbus_Protocal_Worker+0x1b0>
				break;
 8000fc4:	bf00      	nop
					}
		break;


	}
}
 8000fc6:	e027      	b.n	8001018 <Modbus_Protocal_Worker+0x200>
		if(hModbus->Flag_T35TimeOut)
 8000fc8:	4b15      	ldr	r3, [pc, #84]	@ (8001020 <Modbus_Protocal_Worker+0x208>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	7d5b      	ldrb	r3, [r3, #21]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d01f      	beq.n	8001012 <Modbus_Protocal_Worker+0x1fa>
			hModbus->Mstatus = Modbus_state_Idle;
 8000fd2:	4b13      	ldr	r3, [pc, #76]	@ (8001020 <Modbus_Protocal_Worker+0x208>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	761a      	strb	r2, [r3, #24]
			HAL_UART_AbortReceive(hModbus->huart);
 8000fda:	4b11      	ldr	r3, [pc, #68]	@ (8001020 <Modbus_Protocal_Worker+0x208>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	68db      	ldr	r3, [r3, #12]
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f007 ffc3 	bl	8008f6c <HAL_UART_AbortReceive>
		break;
 8000fe6:	e014      	b.n	8001012 <Modbus_Protocal_Worker+0x1fa>
		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8000fe8:	4b0d      	ldr	r3, [pc, #52]	@ (8001020 <Modbus_Protocal_Worker+0x208>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	68db      	ldr	r3, [r3, #12]
 8000fee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ff2:	2b20      	cmp	r3, #32
 8000ff4:	d10f      	bne.n	8001016 <Modbus_Protocal_Worker+0x1fe>
			hModbus->TxCount=0;
 8000ff6:	4b0a      	ldr	r3, [pc, #40]	@ (8001020 <Modbus_Protocal_Worker+0x208>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	f883 2271 	strb.w	r2, [r3, #625]	@ 0x271
			hModbus->Mstatus = Modbus_state_Idle;
 8001000:	4b07      	ldr	r3, [pc, #28]	@ (8001020 <Modbus_Protocal_Worker+0x208>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	2201      	movs	r2, #1
 8001006:	761a      	strb	r2, [r3, #24]
		break;
 8001008:	e005      	b.n	8001016 <Modbus_Protocal_Worker+0x1fe>
		break;
 800100a:	bf00      	nop
 800100c:	e004      	b.n	8001018 <Modbus_Protocal_Worker+0x200>
		break;
 800100e:	bf00      	nop
 8001010:	e002      	b.n	8001018 <Modbus_Protocal_Worker+0x200>
		break;
 8001012:	bf00      	nop
 8001014:	e000      	b.n	8001018 <Modbus_Protocal_Worker+0x200>
		break;
 8001016:	bf00      	nop
}
 8001018:	bf00      	nop
 800101a:	3708      	adds	r7, #8
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}
 8001020:	2000027c 	.word	0x2000027c

08001024 <modbusWrite1Register>:
void modbusWrite1Register() //function 06
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0

	//write data to register
	uint16_t startAddress = (hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]);
 800102a:	4b1d      	ldr	r3, [pc, #116]	@ (80010a0 <modbusWrite1Register+0x7c>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	7e9b      	ldrb	r3, [r3, #26]
 8001030:	021b      	lsls	r3, r3, #8
 8001032:	b29b      	uxth	r3, r3
 8001034:	4a1a      	ldr	r2, [pc, #104]	@ (80010a0 <modbusWrite1Register+0x7c>)
 8001036:	6812      	ldr	r2, [r2, #0]
 8001038:	7ed2      	ldrb	r2, [r2, #27]
 800103a:	4413      	add	r3, r2
 800103c:	80fb      	strh	r3, [r7, #6]

	if(startAddress > hModbus->RegisterSize)
 800103e:	88fa      	ldrh	r2, [r7, #6]
 8001040:	4b17      	ldr	r3, [pc, #92]	@ (80010a0 <modbusWrite1Register+0x7c>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	689b      	ldr	r3, [r3, #8]
 8001046:	429a      	cmp	r2, r3
 8001048:	d903      	bls.n	8001052 <modbusWrite1Register+0x2e>
		{
			 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 800104a:	2002      	movs	r0, #2
 800104c:	f000 f8a0 	bl	8001190 <ModbusErrorReply>
			 return;
 8001050:	e023      	b.n	800109a <modbusWrite1Register+0x76>
		}


	hModbus->RegisterAddress[startAddress].U8[1] = hModbus->Rxframe[3];
 8001052:	4b13      	ldr	r3, [pc, #76]	@ (80010a0 <modbusWrite1Register+0x7c>)
 8001054:	681a      	ldr	r2, [r3, #0]
 8001056:	4b12      	ldr	r3, [pc, #72]	@ (80010a0 <modbusWrite1Register+0x7c>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	6859      	ldr	r1, [r3, #4]
 800105c:	88fb      	ldrh	r3, [r7, #6]
 800105e:	005b      	lsls	r3, r3, #1
 8001060:	440b      	add	r3, r1
 8001062:	7f12      	ldrb	r2, [r2, #28]
 8001064:	705a      	strb	r2, [r3, #1]
	hModbus->RegisterAddress[startAddress].U8[0] = hModbus->Rxframe[4];
 8001066:	4b0e      	ldr	r3, [pc, #56]	@ (80010a0 <modbusWrite1Register+0x7c>)
 8001068:	681a      	ldr	r2, [r3, #0]
 800106a:	4b0d      	ldr	r3, [pc, #52]	@ (80010a0 <modbusWrite1Register+0x7c>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	6859      	ldr	r1, [r3, #4]
 8001070:	88fb      	ldrh	r3, [r7, #6]
 8001072:	005b      	lsls	r3, r3, #1
 8001074:	440b      	add	r3, r1
 8001076:	7f52      	ldrb	r2, [r2, #29]
 8001078:	701a      	strb	r2, [r3, #0]



	//generate response
	memcpy(hModbus->Txframe,
 800107a:	4b09      	ldr	r3, [pc, #36]	@ (80010a0 <modbusWrite1Register+0x7c>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f203 1045 	addw	r0, r3, #325	@ 0x145
			hModbus->Rxframe,
 8001082:	4b07      	ldr	r3, [pc, #28]	@ (80010a0 <modbusWrite1Register+0x7c>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	3319      	adds	r3, #25
	memcpy(hModbus->Txframe,
 8001088:	2208      	movs	r2, #8
 800108a:	4619      	mov	r1, r3
 800108c:	f00a ff06 	bl	800be9c <memcpy>
			8);
	//set number of byte to sent
	hModbus->TxCount=5;
 8001090:	4b03      	ldr	r3, [pc, #12]	@ (80010a0 <modbusWrite1Register+0x7c>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	2205      	movs	r2, #5
 8001096:	f883 2271 	strb.w	r2, [r3, #625]	@ 0x271



}
 800109a:	3708      	adds	r7, #8
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	2000027c 	.word	0x2000027c

080010a4 <modbusRead1Register>:

void modbusRead1Register() // function 03
{
 80010a4:	b590      	push	{r4, r7, lr}
 80010a6:	b083      	sub	sp, #12
 80010a8:	af00      	add	r7, sp, #0



	uint16_t numberOfDataToRead =((hModbus->Rxframe[3]<<8)+(hModbus->Rxframe[4]));
 80010aa:	4b38      	ldr	r3, [pc, #224]	@ (800118c <modbusRead1Register+0xe8>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	7f1b      	ldrb	r3, [r3, #28]
 80010b0:	021b      	lsls	r3, r3, #8
 80010b2:	b29b      	uxth	r3, r3
 80010b4:	4a35      	ldr	r2, [pc, #212]	@ (800118c <modbusRead1Register+0xe8>)
 80010b6:	6812      	ldr	r2, [r2, #0]
 80010b8:	7f52      	ldrb	r2, [r2, #29]
 80010ba:	4413      	add	r3, r2
 80010bc:	80fb      	strh	r3, [r7, #6]
	uint16_t startAddress =((hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]));
 80010be:	4b33      	ldr	r3, [pc, #204]	@ (800118c <modbusRead1Register+0xe8>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	7e9b      	ldrb	r3, [r3, #26]
 80010c4:	021b      	lsls	r3, r3, #8
 80010c6:	b29b      	uxth	r3, r3
 80010c8:	4a30      	ldr	r2, [pc, #192]	@ (800118c <modbusRead1Register+0xe8>)
 80010ca:	6812      	ldr	r2, [r2, #0]
 80010cc:	7ed2      	ldrb	r2, [r2, #27]
 80010ce:	4413      	add	r3, r2
 80010d0:	80bb      	strh	r3, [r7, #4]

	//check quantity and address range

	if(numberOfDataToRead <1 ||numberOfDataToRead > 0x7D)
 80010d2:	88fb      	ldrh	r3, [r7, #6]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d002      	beq.n	80010de <modbusRead1Register+0x3a>
 80010d8:	88fb      	ldrh	r3, [r7, #6]
 80010da:	2b7d      	cmp	r3, #125	@ 0x7d
 80010dc:	d903      	bls.n	80010e6 <modbusRead1Register+0x42>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataValue);
 80010de:	2003      	movs	r0, #3
 80010e0:	f000 f856 	bl	8001190 <ModbusErrorReply>
		 return;
 80010e4:	e04e      	b.n	8001184 <modbusRead1Register+0xe0>
	}

	if(startAddress > hModbus->RegisterSize || (startAddress +  numberOfDataToRead) > hModbus->RegisterSize)
 80010e6:	88ba      	ldrh	r2, [r7, #4]
 80010e8:	4b28      	ldr	r3, [pc, #160]	@ (800118c <modbusRead1Register+0xe8>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	689b      	ldr	r3, [r3, #8]
 80010ee:	429a      	cmp	r2, r3
 80010f0:	d808      	bhi.n	8001104 <modbusRead1Register+0x60>
 80010f2:	88ba      	ldrh	r2, [r7, #4]
 80010f4:	88fb      	ldrh	r3, [r7, #6]
 80010f6:	4413      	add	r3, r2
 80010f8:	461a      	mov	r2, r3
 80010fa:	4b24      	ldr	r3, [pc, #144]	@ (800118c <modbusRead1Register+0xe8>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	689b      	ldr	r3, [r3, #8]
 8001100:	429a      	cmp	r2, r3
 8001102:	d903      	bls.n	800110c <modbusRead1Register+0x68>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 8001104:	2002      	movs	r0, #2
 8001106:	f000 f843 	bl	8001190 <ModbusErrorReply>
		 return;
 800110a:	e03b      	b.n	8001184 <modbusRead1Register+0xe0>
	}


	//generate response
	hModbus->Txframe[0] = Modbus_function_Read_Holding_Register;
 800110c:	4b1f      	ldr	r3, [pc, #124]	@ (800118c <modbusRead1Register+0xe8>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	2203      	movs	r2, #3
 8001112:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	hModbus->Txframe[1] = (2*numberOfDataToRead) & 0xFF;
 8001116:	88fb      	ldrh	r3, [r7, #6]
 8001118:	b2da      	uxtb	r2, r3
 800111a:	4b1c      	ldr	r3, [pc, #112]	@ (800118c <modbusRead1Register+0xe8>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	0052      	lsls	r2, r2, #1
 8001120:	b2d2      	uxtb	r2, r2
 8001122:	f883 2146 	strb.w	r2, [r3, #326]	@ 0x146
	register int i;
	for(i=0; i<numberOfDataToRead;i++)
 8001126:	2400      	movs	r4, #0
 8001128:	e020      	b.n	800116c <modbusRead1Register+0xc8>
	{
		hModbus->Txframe[2*i+2]=hModbus->RegisterAddress[startAddress+i].U8[1];
 800112a:	4b18      	ldr	r3, [pc, #96]	@ (800118c <modbusRead1Register+0xe8>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	685a      	ldr	r2, [r3, #4]
 8001130:	88bb      	ldrh	r3, [r7, #4]
 8001132:	4423      	add	r3, r4
 8001134:	005b      	lsls	r3, r3, #1
 8001136:	18d1      	adds	r1, r2, r3
 8001138:	4b14      	ldr	r3, [pc, #80]	@ (800118c <modbusRead1Register+0xe8>)
 800113a:	681a      	ldr	r2, [r3, #0]
 800113c:	1c63      	adds	r3, r4, #1
 800113e:	005b      	lsls	r3, r3, #1
 8001140:	7849      	ldrb	r1, [r1, #1]
 8001142:	4413      	add	r3, r2
 8001144:	460a      	mov	r2, r1
 8001146:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
		hModbus->Txframe[2*i+3]=hModbus->RegisterAddress[startAddress+i].U8[0];
 800114a:	4b10      	ldr	r3, [pc, #64]	@ (800118c <modbusRead1Register+0xe8>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	685a      	ldr	r2, [r3, #4]
 8001150:	88bb      	ldrh	r3, [r7, #4]
 8001152:	4423      	add	r3, r4
 8001154:	005b      	lsls	r3, r3, #1
 8001156:	18d1      	adds	r1, r2, r3
 8001158:	4b0c      	ldr	r3, [pc, #48]	@ (800118c <modbusRead1Register+0xe8>)
 800115a:	681a      	ldr	r2, [r3, #0]
 800115c:	0063      	lsls	r3, r4, #1
 800115e:	3303      	adds	r3, #3
 8001160:	7809      	ldrb	r1, [r1, #0]
 8001162:	4413      	add	r3, r2
 8001164:	460a      	mov	r2, r1
 8001166:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	for(i=0; i<numberOfDataToRead;i++)
 800116a:	3401      	adds	r4, #1
 800116c:	88fb      	ldrh	r3, [r7, #6]
 800116e:	429c      	cmp	r4, r3
 8001170:	dbdb      	blt.n	800112a <modbusRead1Register+0x86>
	}
	hModbus->TxCount = 2+2*numberOfDataToRead;
 8001172:	88fb      	ldrh	r3, [r7, #6]
 8001174:	3301      	adds	r3, #1
 8001176:	b2da      	uxtb	r2, r3
 8001178:	4b04      	ldr	r3, [pc, #16]	@ (800118c <modbusRead1Register+0xe8>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	0052      	lsls	r2, r2, #1
 800117e:	b2d2      	uxtb	r2, r2
 8001180:	f883 2271 	strb.w	r2, [r3, #625]	@ 0x271

}
 8001184:	370c      	adds	r7, #12
 8001186:	46bd      	mov	sp, r7
 8001188:	bd90      	pop	{r4, r7, pc}
 800118a:	bf00      	nop
 800118c:	2000027c 	.word	0x2000027c

08001190 <ModbusErrorReply>:

void ModbusErrorReply(uint8_t Errorcode)
{
 8001190:	b480      	push	{r7}
 8001192:	b083      	sub	sp, #12
 8001194:	af00      	add	r7, sp, #0
 8001196:	4603      	mov	r3, r0
 8001198:	71fb      	strb	r3, [r7, #7]
	hModbus->Txframe[0] = hModbus->Rxframe[0] | 0x80;
 800119a:	4b0d      	ldr	r3, [pc, #52]	@ (80011d0 <ModbusErrorReply+0x40>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	7e5a      	ldrb	r2, [r3, #25]
 80011a0:	4b0b      	ldr	r3, [pc, #44]	@ (80011d0 <ModbusErrorReply+0x40>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80011a8:	b2d2      	uxtb	r2, r2
 80011aa:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	hModbus->Txframe[1] = Errorcode;
 80011ae:	4b08      	ldr	r3, [pc, #32]	@ (80011d0 <ModbusErrorReply+0x40>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	79fa      	ldrb	r2, [r7, #7]
 80011b4:	f883 2146 	strb.w	r2, [r3, #326]	@ 0x146
	hModbus->TxCount = 2;
 80011b8:	4b05      	ldr	r3, [pc, #20]	@ (80011d0 <ModbusErrorReply+0x40>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	2202      	movs	r2, #2
 80011be:	f883 2271 	strb.w	r2, [r3, #625]	@ 0x271
}
 80011c2:	bf00      	nop
 80011c4:	370c      	adds	r7, #12
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr
 80011ce:	bf00      	nop
 80011d0:	2000027c 	.word	0x2000027c

080011d4 <Modbus_frame_response>:

void Modbus_frame_response()
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0
	switch(hModbus->Rxframe[0]) //check funcion
 80011d8:	4b09      	ldr	r3, [pc, #36]	@ (8001200 <Modbus_frame_response+0x2c>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	7e5b      	ldrb	r3, [r3, #25]
 80011de:	2b03      	cmp	r3, #3
 80011e0:	d004      	beq.n	80011ec <Modbus_frame_response+0x18>
 80011e2:	2b06      	cmp	r3, #6
 80011e4:	d105      	bne.n	80011f2 <Modbus_frame_response+0x1e>
	{
	case Modbus_function_Write_SingleRegister:
		modbusWrite1Register();
 80011e6:	f7ff ff1d 	bl	8001024 <modbusWrite1Register>
		break;
 80011ea:	e006      	b.n	80011fa <Modbus_frame_response+0x26>
	case Modbus_function_Read_Holding_Register:
		modbusRead1Register();
 80011ec:	f7ff ff5a 	bl	80010a4 <modbusRead1Register>
		break;
 80011f0:	e003      	b.n	80011fa <Modbus_frame_response+0x26>
	default:
		 ModbusErrorReply(Modbus_RecvFrame_IllegalFunction);
 80011f2:	2001      	movs	r0, #1
 80011f4:	f7ff ffcc 	bl	8001190 <ModbusErrorReply>
		break;
 80011f8:	bf00      	nop

	}
}
 80011fa:	bf00      	nop
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	2000027c 	.word	0x2000027c

08001204 <Modbus_Emission>:

void Modbus_Emission()
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0
	if(hModbus->huart->gState==HAL_UART_STATE_READY)
 800120a:	4b3c      	ldr	r3, [pc, #240]	@ (80012fc <Modbus_Emission+0xf8>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	68db      	ldr	r3, [r3, #12]
 8001210:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001214:	2b20      	cmp	r3, #32
 8001216:	d15d      	bne.n	80012d4 <Modbus_Emission+0xd0>
	{
		//generate response package
		hModbus->modbusUartStructure.MessageBufferTx[0] = hModbus->slaveAddress;
 8001218:	4b38      	ldr	r3, [pc, #224]	@ (80012fc <Modbus_Emission+0xf8>)
 800121a:	681a      	ldr	r2, [r3, #0]
 800121c:	4b37      	ldr	r3, [pc, #220]	@ (80012fc <Modbus_Emission+0xf8>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	7812      	ldrb	r2, [r2, #0]
 8001222:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		memcpy
		(
				hModbus->modbusUartStructure.MessageBufferTx+1,
 8001226:	4b35      	ldr	r3, [pc, #212]	@ (80012fc <Modbus_Emission+0xf8>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f503 7369 	add.w	r3, r3, #932	@ 0x3a4
		memcpy
 800122e:	1c58      	adds	r0, r3, #1
				hModbus->Txframe,
 8001230:	4b32      	ldr	r3, [pc, #200]	@ (80012fc <Modbus_Emission+0xf8>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f203 1145 	addw	r1, r3, #325	@ 0x145
				hModbus->TxCount
 8001238:	4b30      	ldr	r3, [pc, #192]	@ (80012fc <Modbus_Emission+0xf8>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f893 3271 	ldrb.w	r3, [r3, #625]	@ 0x271
		memcpy
 8001240:	461a      	mov	r2, r3
 8001242:	f00a fe2b 	bl	800be9c <memcpy>
		);

		hModbus->modbusUartStructure.TxTail = hModbus->TxCount+3;
 8001246:	4b2d      	ldr	r3, [pc, #180]	@ (80012fc <Modbus_Emission+0xf8>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f893 3271 	ldrb.w	r3, [r3, #625]	@ 0x271
 800124e:	461a      	mov	r2, r3
 8001250:	4b2a      	ldr	r3, [pc, #168]	@ (80012fc <Modbus_Emission+0xf8>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	3203      	adds	r2, #3
 8001256:	b292      	uxth	r2, r2
 8001258:	f8a3 24d4 	strh.w	r2, [r3, #1236]	@ 0x4d4

		u16u8_t CalculateCRC;
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 800125c:	4b27      	ldr	r3, [pc, #156]	@ (80012fc <Modbus_Emission+0xf8>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f503 7269 	add.w	r2, r3, #932	@ 0x3a4
				hModbus->modbusUartStructure.TxTail - 2);
 8001264:	4b25      	ldr	r3, [pc, #148]	@ (80012fc <Modbus_Emission+0xf8>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 800126c:	3b02      	subs	r3, #2
 800126e:	4619      	mov	r1, r3
 8001270:	4610      	mov	r0, r2
 8001272:	f7ff fd99 	bl	8000da8 <CRC16>
 8001276:	4603      	mov	r3, r0
 8001278:	80bb      	strh	r3, [r7, #4]

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-2]
 800127a:	4b20      	ldr	r3, [pc, #128]	@ (80012fc <Modbus_Emission+0xf8>)
 800127c:	681a      	ldr	r2, [r3, #0]
 800127e:	4b1f      	ldr	r3, [pc, #124]	@ (80012fc <Modbus_Emission+0xf8>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 8001286:	3b02      	subs	r3, #2
													 =CalculateCRC.U8[0];
 8001288:	7939      	ldrb	r1, [r7, #4]
 800128a:	4413      	add	r3, r2
 800128c:	460a      	mov	r2, r1
 800128e:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-1]
 8001292:	4b1a      	ldr	r3, [pc, #104]	@ (80012fc <Modbus_Emission+0xf8>)
 8001294:	681a      	ldr	r2, [r3, #0]
 8001296:	4b19      	ldr	r3, [pc, #100]	@ (80012fc <Modbus_Emission+0xf8>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 800129e:	3b01      	subs	r3, #1
													 =CalculateCRC.U8[1];
 80012a0:	7979      	ldrb	r1, [r7, #5]
 80012a2:	4413      	add	r3, r2
 80012a4:	460a      	mov	r2, r1
 80012a6:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4


		//sent modbus

		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 80012aa:	4b14      	ldr	r3, [pc, #80]	@ (80012fc <Modbus_Emission+0xf8>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	68db      	ldr	r3, [r3, #12]
 80012b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80012b4:	2b20      	cmp	r3, #32
 80012b6:	d10d      	bne.n	80012d4 <Modbus_Emission+0xd0>
		{
			HAL_UART_Transmit_DMA(hModbus->huart
 80012b8:	4b10      	ldr	r3, [pc, #64]	@ (80012fc <Modbus_Emission+0xf8>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	68d8      	ldr	r0, [r3, #12]
					,hModbus->modbusUartStructure.MessageBufferTx
 80012be:	4b0f      	ldr	r3, [pc, #60]	@ (80012fc <Modbus_Emission+0xf8>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f503 7169 	add.w	r1, r3, #932	@ 0x3a4
					,hModbus->modbusUartStructure.TxTail);
 80012c6:	4b0d      	ldr	r3, [pc, #52]	@ (80012fc <Modbus_Emission+0xf8>)
 80012c8:	681b      	ldr	r3, [r3, #0]
			HAL_UART_Transmit_DMA(hModbus->huart
 80012ca:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 80012ce:	461a      	mov	r2, r3
 80012d0:	f007 fdcc 	bl	8008e6c <HAL_UART_Transmit_DMA>



	}
	/*reset Timer flag*/
	hModbus->Flag_T15TimeOut = 0;
 80012d4:	4b09      	ldr	r3, [pc, #36]	@ (80012fc <Modbus_Emission+0xf8>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	2200      	movs	r2, #0
 80012da:	751a      	strb	r2, [r3, #20]
	hModbus->Flag_T35TimeOut = 0;
 80012dc:	4b07      	ldr	r3, [pc, #28]	@ (80012fc <Modbus_Emission+0xf8>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	2200      	movs	r2, #0
 80012e2:	755a      	strb	r2, [r3, #21]
	hModbus->Flag_URev =0;
 80012e4:	4b05      	ldr	r3, [pc, #20]	@ (80012fc <Modbus_Emission+0xf8>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	2200      	movs	r2, #0
 80012ea:	759a      	strb	r2, [r3, #22]
	/*set state*/
	hModbus->Mstatus= Modbus_state_Emission;
 80012ec:	4b03      	ldr	r3, [pc, #12]	@ (80012fc <Modbus_Emission+0xf8>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	2202      	movs	r2, #2
 80012f2:	761a      	strb	r2, [r3, #24]
}
 80012f4:	bf00      	nop
 80012f6:	3708      	adds	r7, #8
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	2000027c 	.word	0x2000027c

08001300 <create_prismatic_motor>:

float v_pris_dis[2] = {0, 0};
float v_pris_ref[3] = {0, 0, 0};

PrismaticMotor create_prismatic_motor(double J, double B, double Eff, double Ke,
		double Kt, double R, double L) {
 8001300:	b4b0      	push	{r4, r5, r7}
 8001302:	b09f      	sub	sp, #124	@ 0x7c
 8001304:	af00      	add	r7, sp, #0
 8001306:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8001308:	ed87 0b0c 	vstr	d0, [r7, #48]	@ 0x30
 800130c:	ed87 1b0a 	vstr	d1, [r7, #40]	@ 0x28
 8001310:	ed87 2b08 	vstr	d2, [r7, #32]
 8001314:	ed87 3b06 	vstr	d3, [r7, #24]
 8001318:	ed87 4b04 	vstr	d4, [r7, #16]
 800131c:	ed87 5b02 	vstr	d5, [r7, #8]
 8001320:	ed87 6b00 	vstr	d6, [r7]
	PrismaticMotor motor = { J, B, Eff, Ke, Kt, R, L };
 8001324:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001328:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
 800132c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001330:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
 8001334:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001338:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
 800133c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001340:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
 8001344:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001348:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
 800134c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001350:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
 8001354:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001358:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
	return motor;
 800135c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800135e:	461d      	mov	r5, r3
 8001360:	f107 0440 	add.w	r4, r7, #64	@ 0x40
 8001364:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001366:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001368:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800136a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800136c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800136e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001370:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001374:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8001378:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800137a:	377c      	adds	r7, #124	@ 0x7c
 800137c:	46bd      	mov	sp, r7
 800137e:	bcb0      	pop	{r4, r5, r7}
 8001380:	4770      	bx	lr

08001382 <create_motor>:
#include "revolute.h"

float v_rev_dis[2] = {0, 0};
float v_rev_ref[3] = {0, 0, 0};

RevoluteMotor create_motor(double J, double B, double Eff, double Ke, double Kt, double R, double L) {
 8001382:	b4b0      	push	{r4, r5, r7}
 8001384:	b09f      	sub	sp, #124	@ 0x7c
 8001386:	af00      	add	r7, sp, #0
 8001388:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800138a:	ed87 0b0c 	vstr	d0, [r7, #48]	@ 0x30
 800138e:	ed87 1b0a 	vstr	d1, [r7, #40]	@ 0x28
 8001392:	ed87 2b08 	vstr	d2, [r7, #32]
 8001396:	ed87 3b06 	vstr	d3, [r7, #24]
 800139a:	ed87 4b04 	vstr	d4, [r7, #16]
 800139e:	ed87 5b02 	vstr	d5, [r7, #8]
 80013a2:	ed87 6b00 	vstr	d6, [r7]
    RevoluteMotor motor = { J, B, Eff, Ke, Kt, R, L };
 80013a6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80013aa:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
 80013ae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80013b2:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
 80013b6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80013ba:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
 80013be:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80013c2:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
 80013c6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80013ca:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
 80013ce:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80013d2:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
 80013d6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80013da:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
    return motor;
 80013de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80013e0:	461d      	mov	r5, r3
 80013e2:	f107 0440 	add.w	r4, r7, #64	@ 0x40
 80013e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013f2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80013f6:	e885 0003 	stmia.w	r5, {r0, r1}
}
 80013fa:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80013fc:	377c      	adds	r7, #124	@ 0x7c
 80013fe:	46bd      	mov	sp, r7
 8001400:	bcb0      	pop	{r4, r5, r7}
 8001402:	4770      	bx	lr

08001404 <InitTrajectorySegment>:
#include "Trajectory.h"
#include <math.h>

void InitTrajectorySegment(TrajectorySegment *seg, float start, float end, float v_max, float a_max, float t_start) {
 8001404:	b580      	push	{r7, lr}
 8001406:	b08c      	sub	sp, #48	@ 0x30
 8001408:	af00      	add	r7, sp, #0
 800140a:	6178      	str	r0, [r7, #20]
 800140c:	ed87 0a04 	vstr	s0, [r7, #16]
 8001410:	edc7 0a03 	vstr	s1, [r7, #12]
 8001414:	ed87 1a02 	vstr	s2, [r7, #8]
 8001418:	edc7 1a01 	vstr	s3, [r7, #4]
 800141c:	ed87 2a00 	vstr	s4, [r7]
    float D = end - start;
 8001420:	ed97 7a03 	vldr	s14, [r7, #12]
 8001424:	edd7 7a04 	vldr	s15, [r7, #16]
 8001428:	ee77 7a67 	vsub.f32	s15, s14, s15
 800142c:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
    float dir = (D >= 0) ? 1.0f : -1.0f;
 8001430:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001434:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001438:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800143c:	db02      	blt.n	8001444 <InitTrajectorySegment+0x40>
 800143e:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001442:	e000      	b.n	8001446 <InitTrajectorySegment+0x42>
 8001444:	4b49      	ldr	r3, [pc, #292]	@ (800156c <InitTrajectorySegment+0x168>)
 8001446:	627b      	str	r3, [r7, #36]	@ 0x24
    D = fabsf(D);
 8001448:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800144c:	eef0 7ae7 	vabs.f32	s15, s15
 8001450:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28

    float t_accel = v_max / a_max;
 8001454:	edd7 6a02 	vldr	s13, [r7, #8]
 8001458:	ed97 7a01 	vldr	s14, [r7, #4]
 800145c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001460:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    float d_accel = 0.5f * a_max * t_accel * t_accel;
 8001464:	edd7 7a01 	vldr	s15, [r7, #4]
 8001468:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800146c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001470:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001474:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001478:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800147c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001480:	edc7 7a08 	vstr	s15, [r7, #32]

    if (2 * d_accel > D) {
 8001484:	edd7 7a08 	vldr	s15, [r7, #32]
 8001488:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800148c:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8001490:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001494:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001498:	d524      	bpl.n	80014e4 <InitTrajectorySegment+0xe0>
        // Triangular profile
        t_accel = sqrtf(D / a_max);
 800149a:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800149e:	edd7 7a01 	vldr	s15, [r7, #4]
 80014a2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80014a6:	eeb0 0a66 	vmov.f32	s0, s13
 80014aa:	f00a fd05 	bl	800beb8 <sqrtf>
 80014ae:	ed87 0a0b 	vstr	s0, [r7, #44]	@ 0x2c
        seg->t_const = 0;
 80014b2:	697b      	ldr	r3, [r7, #20]
 80014b4:	f04f 0200 	mov.w	r2, #0
 80014b8:	615a      	str	r2, [r3, #20]
        seg->t_total = 2 * t_accel;
 80014ba:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80014be:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80014c2:	697b      	ldr	r3, [r7, #20]
 80014c4:	edc3 7a07 	vstr	s15, [r3, #28]
        seg->v_max = a_max * t_accel * dir;
 80014c8:	ed97 7a01 	vldr	s14, [r7, #4]
 80014cc:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80014d0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014d4:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80014d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	edc3 7a02 	vstr	s15, [r3, #8]
 80014e2:	e027      	b.n	8001534 <InitTrajectorySegment+0x130>
    } else {
        // Trapezoidal profile
        float d_const = D - 2 * d_accel;
 80014e4:	edd7 7a08 	vldr	s15, [r7, #32]
 80014e8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80014ec:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 80014f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014f4:	edc7 7a07 	vstr	s15, [r7, #28]
        seg->t_const = d_const / v_max;
 80014f8:	edd7 6a07 	vldr	s13, [r7, #28]
 80014fc:	ed97 7a02 	vldr	s14, [r7, #8]
 8001500:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001504:	697b      	ldr	r3, [r7, #20]
 8001506:	edc3 7a05 	vstr	s15, [r3, #20]
        seg->t_total = 2 * t_accel + seg->t_const;
 800150a:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800150e:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001512:	697b      	ldr	r3, [r7, #20]
 8001514:	edd3 7a05 	vldr	s15, [r3, #20]
 8001518:	ee77 7a27 	vadd.f32	s15, s14, s15
 800151c:	697b      	ldr	r3, [r7, #20]
 800151e:	edc3 7a07 	vstr	s15, [r3, #28]
        seg->v_max = v_max * dir;
 8001522:	ed97 7a02 	vldr	s14, [r7, #8]
 8001526:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800152a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800152e:	697b      	ldr	r3, [r7, #20]
 8001530:	edc3 7a02 	vstr	s15, [r3, #8]
    }

    seg->start_pos = start;
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	693a      	ldr	r2, [r7, #16]
 8001538:	601a      	str	r2, [r3, #0]
    seg->end_pos = end;
 800153a:	697b      	ldr	r3, [r7, #20]
 800153c:	68fa      	ldr	r2, [r7, #12]
 800153e:	605a      	str	r2, [r3, #4]
//    seg->v_max = v_max * dir;
    seg->a_max = a_max * dir;
 8001540:	ed97 7a01 	vldr	s14, [r7, #4]
 8001544:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001548:	ee67 7a27 	vmul.f32	s15, s14, s15
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	edc3 7a03 	vstr	s15, [r3, #12]
    seg->t_accel = t_accel;
 8001552:	697b      	ldr	r3, [r7, #20]
 8001554:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001556:	611a      	str	r2, [r3, #16]
    seg->t_decel = t_accel;
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800155c:	619a      	str	r2, [r3, #24]
    seg->t_start = t_start;
 800155e:	697b      	ldr	r3, [r7, #20]
 8001560:	683a      	ldr	r2, [r7, #0]
 8001562:	621a      	str	r2, [r3, #32]
}
 8001564:	bf00      	nop
 8001566:	3730      	adds	r7, #48	@ 0x30
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}
 800156c:	bf800000 	.word	0xbf800000

08001570 <GetTrajectoryPosition>:

float GetTrajectoryPosition(const TrajectorySegment *seg, float t_global) {
 8001570:	b480      	push	{r7}
 8001572:	b08f      	sub	sp, #60	@ 0x3c
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
 8001578:	ed87 0a00 	vstr	s0, [r7]
    float t = t_global - seg->t_start;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	edd3 7a08 	vldr	s15, [r3, #32]
 8001582:	ed97 7a00 	vldr	s14, [r7]
 8001586:	ee77 7a67 	vsub.f32	s15, s14, s15
 800158a:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
    if (t < 0) return seg->start_pos;
 800158e:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001592:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001596:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800159a:	d503      	bpl.n	80015a4 <GetTrajectoryPosition+0x34>
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	edd3 7a00 	vldr	s15, [r3]
 80015a2:	e0b4      	b.n	800170e <GetTrajectoryPosition+0x19e>
    if (t >= seg->t_total) return seg->end_pos;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	edd3 7a07 	vldr	s15, [r3, #28]
 80015aa:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 80015ae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80015b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015b6:	db03      	blt.n	80015c0 <GetTrajectoryPosition+0x50>
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	edd3 7a01 	vldr	s15, [r3, #4]
 80015be:	e0a6      	b.n	800170e <GetTrajectoryPosition+0x19e>

    float a = seg->a_max;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	68db      	ldr	r3, [r3, #12]
 80015c4:	633b      	str	r3, [r7, #48]	@ 0x30
    float v = seg->v_max;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	689b      	ldr	r3, [r3, #8]
 80015ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    float p0 = seg->start_pos;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	62bb      	str	r3, [r7, #40]	@ 0x28

    if (t < seg->t_accel) {
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	edd3 7a04 	vldr	s15, [r3, #16]
 80015d8:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 80015dc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80015e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015e4:	d512      	bpl.n	800160c <GetTrajectoryPosition+0x9c>
        return p0 + 0.5f * a * t * t;
 80015e6:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80015ea:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80015ee:	ee27 7a87 	vmul.f32	s14, s15, s14
 80015f2:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80015f6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80015fa:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80015fe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001602:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001606:	ee77 7a27 	vadd.f32	s15, s14, s15
 800160a:	e080      	b.n	800170e <GetTrajectoryPosition+0x19e>
    } else if (t < seg->t_accel + seg->t_const) {
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	ed93 7a04 	vldr	s14, [r3, #16]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	edd3 7a05 	vldr	s15, [r3, #20]
 8001618:	ee77 7a27 	vadd.f32	s15, s14, s15
 800161c:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8001620:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001624:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001628:	d525      	bpl.n	8001676 <GetTrajectoryPosition+0x106>
        float t1 = seg->t_accel;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	691b      	ldr	r3, [r3, #16]
 800162e:	613b      	str	r3, [r7, #16]
        float p1 = p0 + 0.5f * a * t1 * t1;
 8001630:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001634:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001638:	ee27 7a87 	vmul.f32	s14, s15, s14
 800163c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001640:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001644:	edd7 7a04 	vldr	s15, [r7, #16]
 8001648:	ee67 7a27 	vmul.f32	s15, s14, s15
 800164c:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8001650:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001654:	edc7 7a03 	vstr	s15, [r7, #12]
        return p1 + v * (t - t1);
 8001658:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 800165c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001660:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001664:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001668:	ee27 7a27 	vmul.f32	s14, s14, s15
 800166c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001670:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001674:	e04b      	b.n	800170e <GetTrajectoryPosition+0x19e>
    } else {
        float t1 = seg->t_accel;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	691b      	ldr	r3, [r3, #16]
 800167a:	627b      	str	r3, [r7, #36]	@ 0x24
        float t2 = seg->t_const;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	695b      	ldr	r3, [r3, #20]
 8001680:	623b      	str	r3, [r7, #32]
        float p1 = p0 + 0.5f * a * t1 * t1;
 8001682:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001686:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800168a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800168e:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001692:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001696:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800169a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800169e:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 80016a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016a6:	edc7 7a07 	vstr	s15, [r7, #28]
        float p2 = p1 + v * t2;
 80016aa:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80016ae:	edd7 7a08 	vldr	s15, [r7, #32]
 80016b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016b6:	ed97 7a07 	vldr	s14, [r7, #28]
 80016ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016be:	edc7 7a06 	vstr	s15, [r7, #24]
        float td = t - t1 - t2;
 80016c2:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 80016c6:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80016ca:	ee37 7a67 	vsub.f32	s14, s14, s15
 80016ce:	edd7 7a08 	vldr	s15, [r7, #32]
 80016d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016d6:	edc7 7a05 	vstr	s15, [r7, #20]
        return p2 + v * td - 0.5f * a * td * td;
 80016da:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80016de:	edd7 7a05 	vldr	s15, [r7, #20]
 80016e2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80016e6:	edd7 7a06 	vldr	s15, [r7, #24]
 80016ea:	ee37 7a27 	vadd.f32	s14, s14, s15
 80016ee:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80016f2:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 80016f6:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80016fa:	edd7 7a05 	vldr	s15, [r7, #20]
 80016fe:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001702:	edd7 7a05 	vldr	s15, [r7, #20]
 8001706:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800170a:	ee77 7a67 	vsub.f32	s15, s14, s15
    }
}
 800170e:	eeb0 0a67 	vmov.f32	s0, s15
 8001712:	373c      	adds	r7, #60	@ 0x3c
 8001714:	46bd      	mov	sp, r7
 8001716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171a:	4770      	bx	lr

0800171c <GetTrajectoryVelocity>:

float GetTrajectoryVelocity(const TrajectorySegment *seg, float t_global) {
 800171c:	b480      	push	{r7}
 800171e:	b087      	sub	sp, #28
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
 8001724:	ed87 0a00 	vstr	s0, [r7]
    float t = t_global - seg->t_start;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	edd3 7a08 	vldr	s15, [r3, #32]
 800172e:	ed97 7a00 	vldr	s14, [r7]
 8001732:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001736:	edc7 7a05 	vstr	s15, [r7, #20]
    if (t < 0) return 0;
 800173a:	edd7 7a05 	vldr	s15, [r7, #20]
 800173e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001742:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001746:	d502      	bpl.n	800174e <GetTrajectoryVelocity+0x32>
 8001748:	eddf 7a2b 	vldr	s15, [pc, #172]	@ 80017f8 <GetTrajectoryVelocity+0xdc>
 800174c:	e04d      	b.n	80017ea <GetTrajectoryVelocity+0xce>
    if (t >= seg->t_total) return 0;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	edd3 7a07 	vldr	s15, [r3, #28]
 8001754:	ed97 7a05 	vldr	s14, [r7, #20]
 8001758:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800175c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001760:	db02      	blt.n	8001768 <GetTrajectoryVelocity+0x4c>
 8001762:	eddf 7a25 	vldr	s15, [pc, #148]	@ 80017f8 <GetTrajectoryVelocity+0xdc>
 8001766:	e040      	b.n	80017ea <GetTrajectoryVelocity+0xce>

    float a = seg->a_max;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	68db      	ldr	r3, [r3, #12]
 800176c:	613b      	str	r3, [r7, #16]
    float v = seg->v_max;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	689b      	ldr	r3, [r3, #8]
 8001772:	60fb      	str	r3, [r7, #12]

    if (t < seg->t_accel) {
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	edd3 7a04 	vldr	s15, [r3, #16]
 800177a:	ed97 7a05 	vldr	s14, [r7, #20]
 800177e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001782:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001786:	d506      	bpl.n	8001796 <GetTrajectoryVelocity+0x7a>
        return a * t;
 8001788:	ed97 7a04 	vldr	s14, [r7, #16]
 800178c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001790:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001794:	e029      	b.n	80017ea <GetTrajectoryVelocity+0xce>
    } else if (t < seg->t_accel + seg->t_const) {
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	ed93 7a04 	vldr	s14, [r3, #16]
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	edd3 7a05 	vldr	s15, [r3, #20]
 80017a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017a6:	ed97 7a05 	vldr	s14, [r7, #20]
 80017aa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80017ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017b2:	d502      	bpl.n	80017ba <GetTrajectoryVelocity+0x9e>
        return v;
 80017b4:	edd7 7a03 	vldr	s15, [r7, #12]
 80017b8:	e017      	b.n	80017ea <GetTrajectoryVelocity+0xce>
    } else {
        float td = t - seg->t_accel - seg->t_const;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	edd3 7a04 	vldr	s15, [r3, #16]
 80017c0:	ed97 7a05 	vldr	s14, [r7, #20]
 80017c4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	edd3 7a05 	vldr	s15, [r3, #20]
 80017ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017d2:	edc7 7a02 	vstr	s15, [r7, #8]
        return v - a * td;
 80017d6:	ed97 7a04 	vldr	s14, [r7, #16]
 80017da:	edd7 7a02 	vldr	s15, [r7, #8]
 80017de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017e2:	ed97 7a03 	vldr	s14, [r7, #12]
 80017e6:	ee77 7a67 	vsub.f32	s15, s14, s15
    }
}
 80017ea:	eeb0 0a67 	vmov.f32	s0, s15
 80017ee:	371c      	adds	r7, #28
 80017f0:	46bd      	mov	sp, r7
 80017f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f6:	4770      	bx	lr
 80017f8:	00000000 	.word	0x00000000

080017fc <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b08c      	sub	sp, #48	@ 0x30
 8001800:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001802:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001806:	2200      	movs	r2, #0
 8001808:	601a      	str	r2, [r3, #0]
 800180a:	605a      	str	r2, [r3, #4]
 800180c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800180e:	1d3b      	adds	r3, r7, #4
 8001810:	2220      	movs	r2, #32
 8001812:	2100      	movs	r1, #0
 8001814:	4618      	mov	r0, r3
 8001816:	f00a fb0f 	bl	800be38 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800181a:	4b32      	ldr	r3, [pc, #200]	@ (80018e4 <MX_ADC1_Init+0xe8>)
 800181c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001820:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001822:	4b30      	ldr	r3, [pc, #192]	@ (80018e4 <MX_ADC1_Init+0xe8>)
 8001824:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001828:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800182a:	4b2e      	ldr	r3, [pc, #184]	@ (80018e4 <MX_ADC1_Init+0xe8>)
 800182c:	2200      	movs	r2, #0
 800182e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001830:	4b2c      	ldr	r3, [pc, #176]	@ (80018e4 <MX_ADC1_Init+0xe8>)
 8001832:	2200      	movs	r2, #0
 8001834:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8001836:	4b2b      	ldr	r3, [pc, #172]	@ (80018e4 <MX_ADC1_Init+0xe8>)
 8001838:	2200      	movs	r2, #0
 800183a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800183c:	4b29      	ldr	r3, [pc, #164]	@ (80018e4 <MX_ADC1_Init+0xe8>)
 800183e:	2200      	movs	r2, #0
 8001840:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001842:	4b28      	ldr	r3, [pc, #160]	@ (80018e4 <MX_ADC1_Init+0xe8>)
 8001844:	2204      	movs	r2, #4
 8001846:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001848:	4b26      	ldr	r3, [pc, #152]	@ (80018e4 <MX_ADC1_Init+0xe8>)
 800184a:	2200      	movs	r2, #0
 800184c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800184e:	4b25      	ldr	r3, [pc, #148]	@ (80018e4 <MX_ADC1_Init+0xe8>)
 8001850:	2200      	movs	r2, #0
 8001852:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8001854:	4b23      	ldr	r3, [pc, #140]	@ (80018e4 <MX_ADC1_Init+0xe8>)
 8001856:	2201      	movs	r2, #1
 8001858:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800185a:	4b22      	ldr	r3, [pc, #136]	@ (80018e4 <MX_ADC1_Init+0xe8>)
 800185c:	2200      	movs	r2, #0
 800185e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001862:	4b20      	ldr	r3, [pc, #128]	@ (80018e4 <MX_ADC1_Init+0xe8>)
 8001864:	2200      	movs	r2, #0
 8001866:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001868:	4b1e      	ldr	r3, [pc, #120]	@ (80018e4 <MX_ADC1_Init+0xe8>)
 800186a:	2200      	movs	r2, #0
 800186c:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800186e:	4b1d      	ldr	r3, [pc, #116]	@ (80018e4 <MX_ADC1_Init+0xe8>)
 8001870:	2200      	movs	r2, #0
 8001872:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001876:	4b1b      	ldr	r3, [pc, #108]	@ (80018e4 <MX_ADC1_Init+0xe8>)
 8001878:	2200      	movs	r2, #0
 800187a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 800187c:	4b19      	ldr	r3, [pc, #100]	@ (80018e4 <MX_ADC1_Init+0xe8>)
 800187e:	2200      	movs	r2, #0
 8001880:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001884:	4817      	ldr	r0, [pc, #92]	@ (80018e4 <MX_ADC1_Init+0xe8>)
 8001886:	f002 f8cf 	bl	8003a28 <HAL_ADC_Init>
 800188a:	4603      	mov	r3, r0
 800188c:	2b00      	cmp	r3, #0
 800188e:	d001      	beq.n	8001894 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8001890:	f000 ffce 	bl	8002830 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001894:	2300      	movs	r3, #0
 8001896:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001898:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800189c:	4619      	mov	r1, r3
 800189e:	4811      	ldr	r0, [pc, #68]	@ (80018e4 <MX_ADC1_Init+0xe8>)
 80018a0:	f003 f86c 	bl	800497c <HAL_ADCEx_MultiModeConfigChannel>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d001      	beq.n	80018ae <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80018aa:	f000 ffc1 	bl	8002830 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80018ae:	4b0e      	ldr	r3, [pc, #56]	@ (80018e8 <MX_ADC1_Init+0xec>)
 80018b0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80018b2:	2306      	movs	r3, #6
 80018b4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80018b6:	2300      	movs	r3, #0
 80018b8:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80018ba:	237f      	movs	r3, #127	@ 0x7f
 80018bc:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80018be:	2304      	movs	r3, #4
 80018c0:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80018c2:	2300      	movs	r3, #0
 80018c4:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80018c6:	1d3b      	adds	r3, r7, #4
 80018c8:	4619      	mov	r1, r3
 80018ca:	4806      	ldr	r0, [pc, #24]	@ (80018e4 <MX_ADC1_Init+0xe8>)
 80018cc:	f002 fb5a 	bl	8003f84 <HAL_ADC_ConfigChannel>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d001      	beq.n	80018da <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80018d6:	f000 ffab 	bl	8002830 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80018da:	bf00      	nop
 80018dc:	3730      	adds	r7, #48	@ 0x30
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	20000280 	.word	0x20000280
 80018e8:	04300002 	.word	0x04300002

080018ec <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b088      	sub	sp, #32
 80018f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80018f2:	463b      	mov	r3, r7
 80018f4:	2220      	movs	r2, #32
 80018f6:	2100      	movs	r1, #0
 80018f8:	4618      	mov	r0, r3
 80018fa:	f00a fa9d 	bl	800be38 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80018fe:	4b2b      	ldr	r3, [pc, #172]	@ (80019ac <MX_ADC2_Init+0xc0>)
 8001900:	4a2b      	ldr	r2, [pc, #172]	@ (80019b0 <MX_ADC2_Init+0xc4>)
 8001902:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001904:	4b29      	ldr	r3, [pc, #164]	@ (80019ac <MX_ADC2_Init+0xc0>)
 8001906:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800190a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800190c:	4b27      	ldr	r3, [pc, #156]	@ (80019ac <MX_ADC2_Init+0xc0>)
 800190e:	2200      	movs	r2, #0
 8001910:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001912:	4b26      	ldr	r3, [pc, #152]	@ (80019ac <MX_ADC2_Init+0xc0>)
 8001914:	2200      	movs	r2, #0
 8001916:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8001918:	4b24      	ldr	r3, [pc, #144]	@ (80019ac <MX_ADC2_Init+0xc0>)
 800191a:	2200      	movs	r2, #0
 800191c:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800191e:	4b23      	ldr	r3, [pc, #140]	@ (80019ac <MX_ADC2_Init+0xc0>)
 8001920:	2200      	movs	r2, #0
 8001922:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001924:	4b21      	ldr	r3, [pc, #132]	@ (80019ac <MX_ADC2_Init+0xc0>)
 8001926:	2204      	movs	r2, #4
 8001928:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800192a:	4b20      	ldr	r3, [pc, #128]	@ (80019ac <MX_ADC2_Init+0xc0>)
 800192c:	2200      	movs	r2, #0
 800192e:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001930:	4b1e      	ldr	r3, [pc, #120]	@ (80019ac <MX_ADC2_Init+0xc0>)
 8001932:	2200      	movs	r2, #0
 8001934:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8001936:	4b1d      	ldr	r3, [pc, #116]	@ (80019ac <MX_ADC2_Init+0xc0>)
 8001938:	2201      	movs	r2, #1
 800193a:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800193c:	4b1b      	ldr	r3, [pc, #108]	@ (80019ac <MX_ADC2_Init+0xc0>)
 800193e:	2200      	movs	r2, #0
 8001940:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001944:	4b19      	ldr	r3, [pc, #100]	@ (80019ac <MX_ADC2_Init+0xc0>)
 8001946:	2200      	movs	r2, #0
 8001948:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800194a:	4b18      	ldr	r3, [pc, #96]	@ (80019ac <MX_ADC2_Init+0xc0>)
 800194c:	2200      	movs	r2, #0
 800194e:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001950:	4b16      	ldr	r3, [pc, #88]	@ (80019ac <MX_ADC2_Init+0xc0>)
 8001952:	2200      	movs	r2, #0
 8001954:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001958:	4b14      	ldr	r3, [pc, #80]	@ (80019ac <MX_ADC2_Init+0xc0>)
 800195a:	2200      	movs	r2, #0
 800195c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 800195e:	4b13      	ldr	r3, [pc, #76]	@ (80019ac <MX_ADC2_Init+0xc0>)
 8001960:	2200      	movs	r2, #0
 8001962:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001966:	4811      	ldr	r0, [pc, #68]	@ (80019ac <MX_ADC2_Init+0xc0>)
 8001968:	f002 f85e 	bl	8003a28 <HAL_ADC_Init>
 800196c:	4603      	mov	r3, r0
 800196e:	2b00      	cmp	r3, #0
 8001970:	d001      	beq.n	8001976 <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 8001972:	f000 ff5d 	bl	8002830 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001976:	4b0f      	ldr	r3, [pc, #60]	@ (80019b4 <MX_ADC2_Init+0xc8>)
 8001978:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800197a:	2306      	movs	r3, #6
 800197c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800197e:	2300      	movs	r3, #0
 8001980:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001982:	237f      	movs	r3, #127	@ 0x7f
 8001984:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001986:	2304      	movs	r3, #4
 8001988:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800198a:	2300      	movs	r3, #0
 800198c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800198e:	463b      	mov	r3, r7
 8001990:	4619      	mov	r1, r3
 8001992:	4806      	ldr	r0, [pc, #24]	@ (80019ac <MX_ADC2_Init+0xc0>)
 8001994:	f002 faf6 	bl	8003f84 <HAL_ADC_ConfigChannel>
 8001998:	4603      	mov	r3, r0
 800199a:	2b00      	cmp	r3, #0
 800199c:	d001      	beq.n	80019a2 <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 800199e:	f000 ff47 	bl	8002830 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80019a2:	bf00      	nop
 80019a4:	3720      	adds	r7, #32
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	200002ec 	.word	0x200002ec
 80019b0:	50000100 	.word	0x50000100
 80019b4:	08600004 	.word	0x08600004

080019b8 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b0a0      	sub	sp, #128	@ 0x80
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019c0:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80019c4:	2200      	movs	r2, #0
 80019c6:	601a      	str	r2, [r3, #0]
 80019c8:	605a      	str	r2, [r3, #4]
 80019ca:	609a      	str	r2, [r3, #8]
 80019cc:	60da      	str	r2, [r3, #12]
 80019ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80019d0:	f107 0318 	add.w	r3, r7, #24
 80019d4:	2254      	movs	r2, #84	@ 0x54
 80019d6:	2100      	movs	r1, #0
 80019d8:	4618      	mov	r0, r3
 80019da:	f00a fa2d 	bl	800be38 <memset>
  if(adcHandle->Instance==ADC1)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80019e6:	d13e      	bne.n	8001a66 <HAL_ADC_MspInit+0xae>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80019e8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80019ec:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80019ee:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80019f2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019f4:	f107 0318 	add.w	r3, r7, #24
 80019f8:	4618      	mov	r0, r3
 80019fa:	f004 fca9 	bl	8006350 <HAL_RCCEx_PeriphCLKConfig>
 80019fe:	4603      	mov	r3, r0
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d001      	beq.n	8001a08 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001a04:	f000 ff14 	bl	8002830 <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001a08:	4b3a      	ldr	r3, [pc, #232]	@ (8001af4 <HAL_ADC_MspInit+0x13c>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	3301      	adds	r3, #1
 8001a0e:	4a39      	ldr	r2, [pc, #228]	@ (8001af4 <HAL_ADC_MspInit+0x13c>)
 8001a10:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001a12:	4b38      	ldr	r3, [pc, #224]	@ (8001af4 <HAL_ADC_MspInit+0x13c>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	2b01      	cmp	r3, #1
 8001a18:	d10b      	bne.n	8001a32 <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001a1a:	4b37      	ldr	r3, [pc, #220]	@ (8001af8 <HAL_ADC_MspInit+0x140>)
 8001a1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a1e:	4a36      	ldr	r2, [pc, #216]	@ (8001af8 <HAL_ADC_MspInit+0x140>)
 8001a20:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001a24:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a26:	4b34      	ldr	r3, [pc, #208]	@ (8001af8 <HAL_ADC_MspInit+0x140>)
 8001a28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a2a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001a2e:	617b      	str	r3, [r7, #20]
 8001a30:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a32:	4b31      	ldr	r3, [pc, #196]	@ (8001af8 <HAL_ADC_MspInit+0x140>)
 8001a34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a36:	4a30      	ldr	r2, [pc, #192]	@ (8001af8 <HAL_ADC_MspInit+0x140>)
 8001a38:	f043 0301 	orr.w	r3, r3, #1
 8001a3c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a3e:	4b2e      	ldr	r3, [pc, #184]	@ (8001af8 <HAL_ADC_MspInit+0x140>)
 8001a40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a42:	f003 0301 	and.w	r3, r3, #1
 8001a46:	613b      	str	r3, [r7, #16]
 8001a48:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = Current_Sensor_Pin|Current_SensorA1_Pin;
 8001a4a:	2303      	movs	r3, #3
 8001a4c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a4e:	2303      	movs	r3, #3
 8001a50:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a52:	2300      	movs	r3, #0
 8001a54:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a56:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a60:	f003 fce2 	bl	8005428 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8001a64:	e042      	b.n	8001aec <HAL_ADC_MspInit+0x134>
  else if(adcHandle->Instance==ADC2)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4a24      	ldr	r2, [pc, #144]	@ (8001afc <HAL_ADC_MspInit+0x144>)
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	d13d      	bne.n	8001aec <HAL_ADC_MspInit+0x134>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001a70:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001a74:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001a76:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001a7a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a7c:	f107 0318 	add.w	r3, r7, #24
 8001a80:	4618      	mov	r0, r3
 8001a82:	f004 fc65 	bl	8006350 <HAL_RCCEx_PeriphCLKConfig>
 8001a86:	4603      	mov	r3, r0
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d001      	beq.n	8001a90 <HAL_ADC_MspInit+0xd8>
      Error_Handler();
 8001a8c:	f000 fed0 	bl	8002830 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001a90:	4b18      	ldr	r3, [pc, #96]	@ (8001af4 <HAL_ADC_MspInit+0x13c>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	3301      	adds	r3, #1
 8001a96:	4a17      	ldr	r2, [pc, #92]	@ (8001af4 <HAL_ADC_MspInit+0x13c>)
 8001a98:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001a9a:	4b16      	ldr	r3, [pc, #88]	@ (8001af4 <HAL_ADC_MspInit+0x13c>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	2b01      	cmp	r3, #1
 8001aa0:	d10b      	bne.n	8001aba <HAL_ADC_MspInit+0x102>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001aa2:	4b15      	ldr	r3, [pc, #84]	@ (8001af8 <HAL_ADC_MspInit+0x140>)
 8001aa4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001aa6:	4a14      	ldr	r2, [pc, #80]	@ (8001af8 <HAL_ADC_MspInit+0x140>)
 8001aa8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001aac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001aae:	4b12      	ldr	r3, [pc, #72]	@ (8001af8 <HAL_ADC_MspInit+0x140>)
 8001ab0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ab2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001ab6:	60fb      	str	r3, [r7, #12]
 8001ab8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aba:	4b0f      	ldr	r3, [pc, #60]	@ (8001af8 <HAL_ADC_MspInit+0x140>)
 8001abc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001abe:	4a0e      	ldr	r2, [pc, #56]	@ (8001af8 <HAL_ADC_MspInit+0x140>)
 8001ac0:	f043 0301 	orr.w	r3, r3, #1
 8001ac4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ac6:	4b0c      	ldr	r3, [pc, #48]	@ (8001af8 <HAL_ADC_MspInit+0x140>)
 8001ac8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001aca:	f003 0301 	and.w	r3, r3, #1
 8001ace:	60bb      	str	r3, [r7, #8]
 8001ad0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = Current_SensorA1_Pin;
 8001ad2:	2302      	movs	r3, #2
 8001ad4:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ad6:	2303      	movs	r3, #3
 8001ad8:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ada:	2300      	movs	r3, #0
 8001adc:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(Current_SensorA1_GPIO_Port, &GPIO_InitStruct);
 8001ade:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ae8:	f003 fc9e 	bl	8005428 <HAL_GPIO_Init>
}
 8001aec:	bf00      	nop
 8001aee:	3780      	adds	r7, #128	@ 0x80
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	20000358 	.word	0x20000358
 8001af8:	40021000 	.word	0x40021000
 8001afc:	50000100 	.word	0x50000100

08001b00 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b082      	sub	sp, #8
 8001b04:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001b06:	4b12      	ldr	r3, [pc, #72]	@ (8001b50 <MX_DMA_Init+0x50>)
 8001b08:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b0a:	4a11      	ldr	r2, [pc, #68]	@ (8001b50 <MX_DMA_Init+0x50>)
 8001b0c:	f043 0304 	orr.w	r3, r3, #4
 8001b10:	6493      	str	r3, [r2, #72]	@ 0x48
 8001b12:	4b0f      	ldr	r3, [pc, #60]	@ (8001b50 <MX_DMA_Init+0x50>)
 8001b14:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b16:	f003 0304 	and.w	r3, r3, #4
 8001b1a:	607b      	str	r3, [r7, #4]
 8001b1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001b1e:	4b0c      	ldr	r3, [pc, #48]	@ (8001b50 <MX_DMA_Init+0x50>)
 8001b20:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b22:	4a0b      	ldr	r2, [pc, #44]	@ (8001b50 <MX_DMA_Init+0x50>)
 8001b24:	f043 0301 	orr.w	r3, r3, #1
 8001b28:	6493      	str	r3, [r2, #72]	@ 0x48
 8001b2a:	4b09      	ldr	r3, [pc, #36]	@ (8001b50 <MX_DMA_Init+0x50>)
 8001b2c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b2e:	f003 0301 	and.w	r3, r3, #1
 8001b32:	603b      	str	r3, [r7, #0]
 8001b34:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001b36:	2200      	movs	r2, #0
 8001b38:	2100      	movs	r1, #0
 8001b3a:	200b      	movs	r0, #11
 8001b3c:	f003 f901 	bl	8004d42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001b40:	200b      	movs	r0, #11
 8001b42:	f003 f918 	bl	8004d76 <HAL_NVIC_EnableIRQ>

}
 8001b46:	bf00      	nop
 8001b48:	3708      	adds	r7, #8
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	40021000 	.word	0x40021000

08001b54 <MX_GPIO_Init>:
     PA5   ------> SPI1_SCK
     PB4   ------> SPI1_MISO
     PB5   ------> SPI1_MOSI
*/
void MX_GPIO_Init(void)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b08a      	sub	sp, #40	@ 0x28
 8001b58:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b5a:	f107 0314 	add.w	r3, r7, #20
 8001b5e:	2200      	movs	r2, #0
 8001b60:	601a      	str	r2, [r3, #0]
 8001b62:	605a      	str	r2, [r3, #4]
 8001b64:	609a      	str	r2, [r3, #8]
 8001b66:	60da      	str	r2, [r3, #12]
 8001b68:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b6a:	4b61      	ldr	r3, [pc, #388]	@ (8001cf0 <MX_GPIO_Init+0x19c>)
 8001b6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b6e:	4a60      	ldr	r2, [pc, #384]	@ (8001cf0 <MX_GPIO_Init+0x19c>)
 8001b70:	f043 0304 	orr.w	r3, r3, #4
 8001b74:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b76:	4b5e      	ldr	r3, [pc, #376]	@ (8001cf0 <MX_GPIO_Init+0x19c>)
 8001b78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b7a:	f003 0304 	and.w	r3, r3, #4
 8001b7e:	613b      	str	r3, [r7, #16]
 8001b80:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001b82:	4b5b      	ldr	r3, [pc, #364]	@ (8001cf0 <MX_GPIO_Init+0x19c>)
 8001b84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b86:	4a5a      	ldr	r2, [pc, #360]	@ (8001cf0 <MX_GPIO_Init+0x19c>)
 8001b88:	f043 0320 	orr.w	r3, r3, #32
 8001b8c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b8e:	4b58      	ldr	r3, [pc, #352]	@ (8001cf0 <MX_GPIO_Init+0x19c>)
 8001b90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b92:	f003 0320 	and.w	r3, r3, #32
 8001b96:	60fb      	str	r3, [r7, #12]
 8001b98:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b9a:	4b55      	ldr	r3, [pc, #340]	@ (8001cf0 <MX_GPIO_Init+0x19c>)
 8001b9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b9e:	4a54      	ldr	r2, [pc, #336]	@ (8001cf0 <MX_GPIO_Init+0x19c>)
 8001ba0:	f043 0301 	orr.w	r3, r3, #1
 8001ba4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ba6:	4b52      	ldr	r3, [pc, #328]	@ (8001cf0 <MX_GPIO_Init+0x19c>)
 8001ba8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001baa:	f003 0301 	and.w	r3, r3, #1
 8001bae:	60bb      	str	r3, [r7, #8]
 8001bb0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bb2:	4b4f      	ldr	r3, [pc, #316]	@ (8001cf0 <MX_GPIO_Init+0x19c>)
 8001bb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bb6:	4a4e      	ldr	r2, [pc, #312]	@ (8001cf0 <MX_GPIO_Init+0x19c>)
 8001bb8:	f043 0302 	orr.w	r3, r3, #2
 8001bbc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001bbe:	4b4c      	ldr	r3, [pc, #304]	@ (8001cf0 <MX_GPIO_Init+0x19c>)
 8001bc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bc2:	f003 0302 	and.w	r3, r3, #2
 8001bc6:	607b      	str	r3, [r7, #4]
 8001bc8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIR_MD20A_24V_GPIO_Port, DIR_MD20A_24V_Pin, GPIO_PIN_RESET);
 8001bca:	2200      	movs	r2, #0
 8001bcc:	2102      	movs	r1, #2
 8001bce:	4849      	ldr	r0, [pc, #292]	@ (8001cf4 <MX_GPIO_Init+0x1a0>)
 8001bd0:	f003 fdac 	bl	800572c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIR_MD20A_18V_GPIO_Port, DIR_MD20A_18V_Pin, GPIO_PIN_RESET);
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	2140      	movs	r1, #64	@ 0x40
 8001bd8:	4847      	ldr	r0, [pc, #284]	@ (8001cf8 <MX_GPIO_Init+0x1a4>)
 8001bda:	f003 fda7 	bl	800572c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001bde:	2320      	movs	r3, #32
 8001be0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001be2:	2302      	movs	r3, #2
 8001be4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be6:	2300      	movs	r3, #0
 8001be8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bea:	2300      	movs	r3, #0
 8001bec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001bee:	2305      	movs	r3, #5
 8001bf0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bf2:	f107 0314 	add.w	r3, r7, #20
 8001bf6:	4619      	mov	r1, r3
 8001bf8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001bfc:	f003 fc14 	bl	8005428 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIR_MD20A_24V_Pin */
  GPIO_InitStruct.Pin = DIR_MD20A_24V_Pin;
 8001c00:	2302      	movs	r3, #2
 8001c02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c04:	2301      	movs	r3, #1
 8001c06:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DIR_MD20A_24V_GPIO_Port, &GPIO_InitStruct);
 8001c10:	f107 0314 	add.w	r3, r7, #20
 8001c14:	4619      	mov	r1, r3
 8001c16:	4837      	ldr	r0, [pc, #220]	@ (8001cf4 <MX_GPIO_Init+0x1a0>)
 8001c18:	f003 fc06 	bl	8005428 <HAL_GPIO_Init>

  /*Configure GPIO pins : Limit_Switch_pen_2_Pin Proximity_Sensor_Pin Limit_Switch_Prismatic1_Pin Limit_Switch_Prismatic2_Pin
                           Limit_Switch_pen_1_Pin */
  GPIO_InitStruct.Pin = Limit_Switch_pen_2_Pin|Proximity_Sensor_Pin|Limit_Switch_Prismatic1_Pin|Limit_Switch_Prismatic2_Pin
 8001c1c:	f44f 4366 	mov.w	r3, #58880	@ 0xe600
 8001c20:	617b      	str	r3, [r7, #20]
                          |Limit_Switch_pen_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001c22:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001c26:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c2c:	f107 0314 	add.w	r3, r7, #20
 8001c30:	4619      	mov	r1, r3
 8001c32:	4830      	ldr	r0, [pc, #192]	@ (8001cf4 <MX_GPIO_Init+0x1a0>)
 8001c34:	f003 fbf8 	bl	8005428 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIR_MD20A_18V_Pin */
  GPIO_InitStruct.Pin = DIR_MD20A_18V_Pin;
 8001c38:	2340      	movs	r3, #64	@ 0x40
 8001c3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c40:	2300      	movs	r3, #0
 8001c42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c44:	2300      	movs	r3, #0
 8001c46:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DIR_MD20A_18V_GPIO_Port, &GPIO_InitStruct);
 8001c48:	f107 0314 	add.w	r3, r7, #20
 8001c4c:	4619      	mov	r1, r3
 8001c4e:	482a      	ldr	r0, [pc, #168]	@ (8001cf8 <MX_GPIO_Init+0x1a4>)
 8001c50:	f003 fbea 	bl	8005428 <HAL_GPIO_Init>

  /*Configure GPIO pin : PS2_Joy_stick_Attention_Pin */
  GPIO_InitStruct.Pin = PS2_Joy_stick_Attention_Pin;
 8001c54:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001c58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PS2_Joy_stick_Attention_GPIO_Port, &GPIO_InitStruct);
 8001c62:	f107 0314 	add.w	r3, r7, #20
 8001c66:	4619      	mov	r1, r3
 8001c68:	4823      	ldr	r0, [pc, #140]	@ (8001cf8 <MX_GPIO_Init+0x1a4>)
 8001c6a:	f003 fbdd 	bl	8005428 <HAL_GPIO_Init>

  /*Configure GPIO pin : Emergency_Pin */
  GPIO_InitStruct.Pin = Emergency_Pin;
 8001c6e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001c72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001c74:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001c78:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Emergency_GPIO_Port, &GPIO_InitStruct);
 8001c7e:	f107 0314 	add.w	r3, r7, #20
 8001c82:	4619      	mov	r1, r3
 8001c84:	481c      	ldr	r0, [pc, #112]	@ (8001cf8 <MX_GPIO_Init+0x1a4>)
 8001c86:	f003 fbcf 	bl	8005428 <HAL_GPIO_Init>

  /*Configure GPIO pin : Proximity_sensor_Pin */
  GPIO_InitStruct.Pin = Proximity_sensor_Pin;
 8001c8a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001c90:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001c94:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c96:	2300      	movs	r3, #0
 8001c98:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Proximity_sensor_GPIO_Port, &GPIO_InitStruct);
 8001c9a:	f107 0314 	add.w	r3, r7, #20
 8001c9e:	4619      	mov	r1, r3
 8001ca0:	4815      	ldr	r0, [pc, #84]	@ (8001cf8 <MX_GPIO_Init+0x1a4>)
 8001ca2:	f003 fbc1 	bl	8005428 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001ca6:	2330      	movs	r3, #48	@ 0x30
 8001ca8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001caa:	2302      	movs	r3, #2
 8001cac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001cb6:	2305      	movs	r3, #5
 8001cb8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cba:	f107 0314 	add.w	r3, r7, #20
 8001cbe:	4619      	mov	r1, r3
 8001cc0:	480c      	ldr	r0, [pc, #48]	@ (8001cf4 <MX_GPIO_Init+0x1a0>)
 8001cc2:	f003 fbb1 	bl	8005428 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	2100      	movs	r1, #0
 8001cca:	2017      	movs	r0, #23
 8001ccc:	f003 f839 	bl	8004d42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001cd0:	2017      	movs	r0, #23
 8001cd2:	f003 f850 	bl	8004d76 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	2100      	movs	r1, #0
 8001cda:	2028      	movs	r0, #40	@ 0x28
 8001cdc:	f003 f831 	bl	8004d42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001ce0:	2028      	movs	r0, #40	@ 0x28
 8001ce2:	f003 f848 	bl	8004d76 <HAL_NVIC_EnableIRQ>

}
 8001ce6:	bf00      	nop
 8001ce8:	3728      	adds	r7, #40	@ 0x28
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	40021000 	.word	0x40021000
 8001cf4:	48000400 	.word	0x48000400
 8001cf8:	48000800 	.word	0x48000800
 8001cfc:	00000000 	.word	0x00000000

08001d00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d00:	b5b0      	push	{r4, r5, r7, lr}
 8001d02:	b094      	sub	sp, #80	@ 0x50
 8001d04:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d06:	f001 fc12 	bl	800352e <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d0a:	f000 fb3d 	bl	8002388 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d0e:	f7ff ff21 	bl	8001b54 <MX_GPIO_Init>
  MX_DMA_Init();
 8001d12:	f7ff fef5 	bl	8001b00 <MX_DMA_Init>
  MX_TIM3_Init();
 8001d16:	f000 fef3 	bl	8002b00 <MX_TIM3_Init>
  MX_ADC1_Init();
 8001d1a:	f7ff fd6f 	bl	80017fc <MX_ADC1_Init>
  MX_TIM1_Init();
 8001d1e:	f000 fe4d 	bl	80029bc <MX_TIM1_Init>
  MX_TIM2_Init();
 8001d22:	f000 fe9f 	bl	8002a64 <MX_TIM2_Init>
  MX_TIM4_Init();
 8001d26:	f000 ff41 	bl	8002bac <MX_TIM4_Init>
  MX_TIM20_Init();
 8001d2a:	f001 f8c5 	bl	8002eb8 <MX_TIM20_Init>
  MX_TIM8_Init();
 8001d2e:	f000 ff93 	bl	8002c58 <MX_TIM8_Init>
  MX_TIM16_Init();
 8001d32:	f001 f841 	bl	8002db8 <MX_TIM16_Init>
  MX_USART2_UART_Init();
 8001d36:	f001 faf7 	bl	8003328 <MX_USART2_UART_Init>
  MX_ADC2_Init();
 8001d3a:	f7ff fdd7 	bl	80018ec <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start(&htim20);
 8001d3e:	4850      	ldr	r0, [pc, #320]	@ (8001e80 <main+0x180>)
 8001d40:	f004 fdb8 	bl	80068b4 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim8);
 8001d44:	484f      	ldr	r0, [pc, #316]	@ (8001e84 <main+0x184>)
 8001d46:	f004 fdb5 	bl	80068b4 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 8001d4a:	210c      	movs	r1, #12
 8001d4c:	484d      	ldr	r0, [pc, #308]	@ (8001e84 <main+0x184>)
 8001d4e:	f004 ff75 	bl	8006c3c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim20, TIM_CHANNEL_1);
 8001d52:	2100      	movs	r1, #0
 8001d54:	484a      	ldr	r0, [pc, #296]	@ (8001e80 <main+0x180>)
 8001d56:	f004 ff71 	bl	8006c3c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim20, TIM_CHANNEL_3);
 8001d5a:	2108      	movs	r1, #8
 8001d5c:	4848      	ldr	r0, [pc, #288]	@ (8001e80 <main+0x180>)
 8001d5e:	f004 ff6d 	bl	8006c3c <HAL_TIM_PWM_Start>
	Encoder_Init(&encoder1, &htim4);
 8001d62:	4949      	ldr	r1, [pc, #292]	@ (8001e88 <main+0x188>)
 8001d64:	4849      	ldr	r0, [pc, #292]	@ (8001e8c <main+0x18c>)
 8001d66:	f7fe fbed 	bl	8000544 <Encoder_Init>
	Encoder_Init(&encoder2, &htim3);
 8001d6a:	4949      	ldr	r1, [pc, #292]	@ (8001e90 <main+0x190>)
 8001d6c:	4849      	ldr	r0, [pc, #292]	@ (8001e94 <main+0x194>)
 8001d6e:	f7fe fbe9 	bl	8000544 <Encoder_Init>
	HAL_ADC_Start(&hadc1);
 8001d72:	4849      	ldr	r0, [pc, #292]	@ (8001e98 <main+0x198>)
 8001d74:	f002 f814 	bl	8003da0 <HAL_ADC_Start>
	HAL_TIM_Base_Start_IT(&htim2);
 8001d78:	4848      	ldr	r0, [pc, #288]	@ (8001e9c <main+0x19c>)
 8001d7a:	f004 fe0b 	bl	8006994 <HAL_TIM_Base_Start_IT>

	int lastTick = 0;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	64fb      	str	r3, [r7, #76]	@ 0x4c
	int pre_tick = 0;
 8001d82:	2300      	movs	r3, #0
 8001d84:	643b      	str	r3, [r7, #64]	@ 0x40

	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8001d86:	213c      	movs	r1, #60	@ 0x3c
 8001d88:	4841      	ldr	r0, [pc, #260]	@ (8001e90 <main+0x190>)
 8001d8a:	f005 fa13 	bl	80071b4 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8001d8e:	213c      	movs	r1, #60	@ 0x3c
 8001d90:	483d      	ldr	r0, [pc, #244]	@ (8001e88 <main+0x188>)
 8001d92:	f005 fa0f 	bl	80071b4 <HAL_TIM_Encoder_Start>

	hmodbus.huart = &huart2;
 8001d96:	4b42      	ldr	r3, [pc, #264]	@ (8001ea0 <main+0x1a0>)
 8001d98:	4a42      	ldr	r2, [pc, #264]	@ (8001ea4 <main+0x1a4>)
 8001d9a:	60da      	str	r2, [r3, #12]
	hmodbus.htim = &htim16;
 8001d9c:	4b40      	ldr	r3, [pc, #256]	@ (8001ea0 <main+0x1a0>)
 8001d9e:	4a42      	ldr	r2, [pc, #264]	@ (8001ea8 <main+0x1a8>)
 8001da0:	611a      	str	r2, [r3, #16]
	hmodbus.slaveAddress = 0x15;
 8001da2:	4b3f      	ldr	r3, [pc, #252]	@ (8001ea0 <main+0x1a0>)
 8001da4:	2215      	movs	r2, #21
 8001da6:	701a      	strb	r2, [r3, #0]
	hmodbus.RegisterSize = 200;
 8001da8:	4b3d      	ldr	r3, [pc, #244]	@ (8001ea0 <main+0x1a0>)
 8001daa:	22c8      	movs	r2, #200	@ 0xc8
 8001dac:	609a      	str	r2, [r3, #8]
	Modbus_init(&hmodbus, registerFrame);
 8001dae:	493f      	ldr	r1, [pc, #252]	@ (8001eac <main+0x1ac>)
 8001db0:	483b      	ldr	r0, [pc, #236]	@ (8001ea0 <main+0x1a0>)
 8001db2:	f7fe ffa3 	bl	8000cfc <Modbus_init>

	Kalman_Init(&kf_pris);
 8001db6:	483e      	ldr	r0, [pc, #248]	@ (8001eb0 <main+0x1b0>)
 8001db8:	f7fe fcef 	bl	800079a <Kalman_Init>

	kf_pris.A_data[0] = 1;
 8001dbc:	4b3c      	ldr	r3, [pc, #240]	@ (8001eb0 <main+0x1b0>)
 8001dbe:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001dc2:	671a      	str	r2, [r3, #112]	@ 0x70
	kf_pris.A_data[1] = 0.0009998;
 8001dc4:	4b3a      	ldr	r3, [pc, #232]	@ (8001eb0 <main+0x1b0>)
 8001dc6:	4a3b      	ldr	r2, [pc, #236]	@ (8001eb4 <main+0x1b4>)
 8001dc8:	675a      	str	r2, [r3, #116]	@ 0x74
	kf_pris.A_data[2] = -2.659e-06;
 8001dca:	4b39      	ldr	r3, [pc, #228]	@ (8001eb0 <main+0x1b0>)
 8001dcc:	4a3a      	ldr	r2, [pc, #232]	@ (8001eb8 <main+0x1b8>)
 8001dce:	679a      	str	r2, [r3, #120]	@ 0x78
	kf_pris.A_data[3] = 8.108e-08;
 8001dd0:	4b37      	ldr	r3, [pc, #220]	@ (8001eb0 <main+0x1b0>)
 8001dd2:	4a3a      	ldr	r2, [pc, #232]	@ (8001ebc <main+0x1bc>)
 8001dd4:	67da      	str	r2, [r3, #124]	@ 0x7c
	kf_pris.A_data[4] = 0;
 8001dd6:	4b36      	ldr	r3, [pc, #216]	@ (8001eb0 <main+0x1b0>)
 8001dd8:	f04f 0200 	mov.w	r2, #0
 8001ddc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
	kf_pris.A_data[5] = 0.9996;
 8001de0:	4b33      	ldr	r3, [pc, #204]	@ (8001eb0 <main+0x1b0>)
 8001de2:	4a37      	ldr	r2, [pc, #220]	@ (8001ec0 <main+0x1c0>)
 8001de4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
	kf_pris.A_data[6] = -0.005318;
 8001de8:	4b31      	ldr	r3, [pc, #196]	@ (8001eb0 <main+0x1b0>)
 8001dea:	4a36      	ldr	r2, [pc, #216]	@ (8001ec4 <main+0x1c4>)
 8001dec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
	kf_pris.A_data[7] = 0.0001622;
 8001df0:	4b2f      	ldr	r3, [pc, #188]	@ (8001eb0 <main+0x1b0>)
 8001df2:	4a35      	ldr	r2, [pc, #212]	@ (8001ec8 <main+0x1c8>)
 8001df4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
	kf_pris.A_data[8] = 0;
 8001df8:	4b2d      	ldr	r3, [pc, #180]	@ (8001eb0 <main+0x1b0>)
 8001dfa:	f04f 0200 	mov.w	r2, #0
 8001dfe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
	kf_pris.A_data[9] = 0;
 8001e02:	4b2b      	ldr	r3, [pc, #172]	@ (8001eb0 <main+0x1b0>)
 8001e04:	f04f 0200 	mov.w	r2, #0
 8001e08:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
	kf_pris.A_data[10] = 1;
 8001e0c:	4b28      	ldr	r3, [pc, #160]	@ (8001eb0 <main+0x1b0>)
 8001e0e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001e12:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
	kf_pris.A_data[11] = 0;
 8001e16:	4b26      	ldr	r3, [pc, #152]	@ (8001eb0 <main+0x1b0>)
 8001e18:	f04f 0200 	mov.w	r2, #0
 8001e1c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
	kf_pris.A_data[12] = 0;
 8001e20:	4b23      	ldr	r3, [pc, #140]	@ (8001eb0 <main+0x1b0>)
 8001e22:	f04f 0200 	mov.w	r2, #0
 8001e26:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
	kf_pris.A_data[13] = -2.746;
 8001e2a:	4b21      	ldr	r3, [pc, #132]	@ (8001eb0 <main+0x1b0>)
 8001e2c:	4a27      	ldr	r2, [pc, #156]	@ (8001ecc <main+0x1cc>)
 8001e2e:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
	kf_pris.A_data[14] = 0.007303;
 8001e32:	4b1f      	ldr	r3, [pc, #124]	@ (8001eb0 <main+0x1b0>)
 8001e34:	4a26      	ldr	r2, [pc, #152]	@ (8001ed0 <main+0x1d0>)
 8001e36:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
	kf_pris.A_data[15] = 0.1354;
 8001e3a:	4b1d      	ldr	r3, [pc, #116]	@ (8001eb0 <main+0x1b0>)
 8001e3c:	4a25      	ldr	r2, [pc, #148]	@ (8001ed4 <main+0x1d4>)
 8001e3e:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac

	kf_pris.B_data[0] = 1.203e-07;
 8001e42:	4b1b      	ldr	r3, [pc, #108]	@ (8001eb0 <main+0x1b0>)
 8001e44:	4a24      	ldr	r2, [pc, #144]	@ (8001ed8 <main+0x1d8>)
 8001e46:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
	kf_pris.B_data[1] = 0.0002406;
 8001e4a:	4b19      	ldr	r3, [pc, #100]	@ (8001eb0 <main+0x1b0>)
 8001e4c:	4a23      	ldr	r2, [pc, #140]	@ (8001edc <main+0x1dc>)
 8001e4e:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
	kf_pris.B_data[2] = 0;
 8001e52:	4b17      	ldr	r3, [pc, #92]	@ (8001eb0 <main+0x1b0>)
 8001e54:	f04f 0200 	mov.w	r2, #0
 8001e58:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
	kf_pris.B_data[3] = 1.685;
 8001e5c:	4b14      	ldr	r3, [pc, #80]	@ (8001eb0 <main+0x1b0>)
 8001e5e:	4a20      	ldr	r2, [pc, #128]	@ (8001ee0 <main+0x1e0>)
 8001e60:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc

	// Identity H
	for (int i = 0; i < KALMAN_MEAS_DIM; i++) {
 8001e64:	2300      	movs	r3, #0
 8001e66:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001e68:	e050      	b.n	8001f0c <main+0x20c>
	    for (int j = 0; j < KALMAN_STATE_DIM; j++) {
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	647b      	str	r3, [r7, #68]	@ 0x44
 8001e6e:	e047      	b.n	8001f00 <main+0x200>
	    	kf_pris.H_data[i * KALMAN_STATE_DIM + j] = (i == j) ? 1.0f : 0.0f;
 8001e70:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001e72:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001e74:	429a      	cmp	r2, r3
 8001e76:	d135      	bne.n	8001ee4 <main+0x1e4>
 8001e78:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001e7c:	e034      	b.n	8001ee8 <main+0x1e8>
 8001e7e:	bf00      	nop
 8001e80:	20001508 	.word	0x20001508
 8001e84:	20001370 	.word	0x20001370
 8001e88:	200012a4 	.word	0x200012a4
 8001e8c:	2000035c 	.word	0x2000035c
 8001e90:	200011d8 	.word	0x200011d8
 8001e94:	20000390 	.word	0x20000390
 8001e98:	20000280 	.word	0x20000280
 8001e9c:	2000110c 	.word	0x2000110c
 8001ea0:	20000560 	.word	0x20000560
 8001ea4:	200015d4 	.word	0x200015d4
 8001ea8:	2000143c 	.word	0x2000143c
 8001eac:	20000a38 	.word	0x20000a38
 8001eb0:	20000c98 	.word	0x20000c98
 8001eb4:	3a830bb9 	.word	0x3a830bb9
 8001eb8:	b6327146 	.word	0xb6327146
 8001ebc:	33ae1e34 	.word	0x33ae1e34
 8001ec0:	3f7fe5c9 	.word	0x3f7fe5c9
 8001ec4:	bbae429e 	.word	0xbbae429e
 8001ec8:	392a143b 	.word	0x392a143b
 8001ecc:	c02fbe77 	.word	0xc02fbe77
 8001ed0:	3bef4e01 	.word	0x3bef4e01
 8001ed4:	3e0aa64c 	.word	0x3e0aa64c
 8001ed8:	34012bd0 	.word	0x34012bd0
 8001edc:	397c4992 	.word	0x397c4992
 8001ee0:	3fd7ae14 	.word	0x3fd7ae14
 8001ee4:	f04f 0200 	mov.w	r2, #0
 8001ee8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001eea:	0099      	lsls	r1, r3, #2
 8001eec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001eee:	440b      	add	r3, r1
 8001ef0:	49c3      	ldr	r1, [pc, #780]	@ (8002200 <main+0x500>)
 8001ef2:	333c      	adds	r3, #60	@ 0x3c
 8001ef4:	009b      	lsls	r3, r3, #2
 8001ef6:	440b      	add	r3, r1
 8001ef8:	601a      	str	r2, [r3, #0]
	    for (int j = 0; j < KALMAN_STATE_DIM; j++) {
 8001efa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001efc:	3301      	adds	r3, #1
 8001efe:	647b      	str	r3, [r7, #68]	@ 0x44
 8001f00:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001f02:	2b03      	cmp	r3, #3
 8001f04:	ddb4      	ble.n	8001e70 <main+0x170>
	for (int i = 0; i < KALMAN_MEAS_DIM; i++) {
 8001f06:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001f08:	3301      	adds	r3, #1
 8001f0a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001f0c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001f0e:	2b03      	cmp	r3, #3
 8001f10:	ddab      	ble.n	8001e6a <main+0x16a>
	    }
	}

	// Prismatic
	kf_pris.x_data[0] = 0;
 8001f12:	4bbb      	ldr	r3, [pc, #748]	@ (8002200 <main+0x500>)
 8001f14:	f04f 0200 	mov.w	r2, #0
 8001f18:	f8c3 2234 	str.w	r2, [r3, #564]	@ 0x234
	kf_pris.x_data[1] = 0;
 8001f1c:	4bb8      	ldr	r3, [pc, #736]	@ (8002200 <main+0x500>)
 8001f1e:	f04f 0200 	mov.w	r2, #0
 8001f22:	f8c3 2238 	str.w	r2, [r3, #568]	@ 0x238
	kf_pris.x_data[2] = 0;
 8001f26:	4bb6      	ldr	r3, [pc, #728]	@ (8002200 <main+0x500>)
 8001f28:	f04f 0200 	mov.w	r2, #0
 8001f2c:	f8c3 223c 	str.w	r2, [r3, #572]	@ 0x23c
	kf_pris.x_data[3] = 0;
 8001f30:	4bb3      	ldr	r3, [pc, #716]	@ (8002200 <main+0x500>)
 8001f32:	f04f 0200 	mov.w	r2, #0
 8001f36:	f8c3 2240 	str.w	r2, [r3, #576]	@ 0x240

	Kalman_SetMeasurementNoise(&kf_pris, 0.01f);
 8001f3a:	ed9f 0ab2 	vldr	s0, [pc, #712]	@ 8002204 <main+0x504>
 8001f3e:	48b0      	ldr	r0, [pc, #704]	@ (8002200 <main+0x500>)
 8001f40:	f7fe fcfd 	bl	800093e <Kalman_SetMeasurementNoise>
	Kalman_SetProcessNoise(&kf_pris, 0.1f);
 8001f44:	ed9f 0ab0 	vldr	s0, [pc, #704]	@ 8002208 <main+0x508>
 8001f48:	48ad      	ldr	r0, [pc, #692]	@ (8002200 <main+0x500>)
 8001f4a:	f7fe fcc8 	bl	80008de <Kalman_SetProcessNoise>

	Pris_motor = create_prismatic_motor(2.29e-04, 4.82e-04, 8.75e-01, 1.77e-01, 1.77e-01, 3.8719, 0.0016);
 8001f4e:	4caf      	ldr	r4, [pc, #700]	@ (800220c <main+0x50c>)
 8001f50:	463b      	mov	r3, r7
 8001f52:	ed9f 6b91 	vldr	d6, [pc, #580]	@ 8002198 <main+0x498>
 8001f56:	ed9f 5b92 	vldr	d5, [pc, #584]	@ 80021a0 <main+0x4a0>
 8001f5a:	ed9f 4b93 	vldr	d4, [pc, #588]	@ 80021a8 <main+0x4a8>
 8001f5e:	ed9f 3b92 	vldr	d3, [pc, #584]	@ 80021a8 <main+0x4a8>
 8001f62:	ed9f 2b93 	vldr	d2, [pc, #588]	@ 80021b0 <main+0x4b0>
 8001f66:	ed9f 1b94 	vldr	d1, [pc, #592]	@ 80021b8 <main+0x4b8>
 8001f6a:	ed9f 0b95 	vldr	d0, [pc, #596]	@ 80021c0 <main+0x4c0>
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f7ff f9c6 	bl	8001300 <create_prismatic_motor>
 8001f74:	4625      	mov	r5, r4
 8001f76:	463c      	mov	r4, r7
 8001f78:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f7a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f7c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f7e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f80:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f82:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f84:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001f88:	e885 0003 	stmia.w	r5, {r0, r1}
	Rev_motor =  create_motor(1.88E-01,6.91E-03,7.36E-01,1.63E+00,1.63E+00*7.36E-01,5.13E-01,3.37E-04);
 8001f8c:	4ca0      	ldr	r4, [pc, #640]	@ (8002210 <main+0x510>)
 8001f8e:	463b      	mov	r3, r7
 8001f90:	ed9f 6b8d 	vldr	d6, [pc, #564]	@ 80021c8 <main+0x4c8>
 8001f94:	ed9f 5b8e 	vldr	d5, [pc, #568]	@ 80021d0 <main+0x4d0>
 8001f98:	ed9f 4b8f 	vldr	d4, [pc, #572]	@ 80021d8 <main+0x4d8>
 8001f9c:	ed9f 3b90 	vldr	d3, [pc, #576]	@ 80021e0 <main+0x4e0>
 8001fa0:	ed9f 2b91 	vldr	d2, [pc, #580]	@ 80021e8 <main+0x4e8>
 8001fa4:	ed9f 1b92 	vldr	d1, [pc, #584]	@ 80021f0 <main+0x4f0>
 8001fa8:	ed9f 0b93 	vldr	d0, [pc, #588]	@ 80021f8 <main+0x4f8>
 8001fac:	4618      	mov	r0, r3
 8001fae:	f7ff f9e8 	bl	8001382 <create_motor>
 8001fb2:	4625      	mov	r5, r4
 8001fb4:	463c      	mov	r4, r7
 8001fb6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fb8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fbc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fbe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fc0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fc2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001fc6:	e885 0003 	stmia.w	r5, {r0, r1}

	// Prismatic Position
	Pris_posi_PID.Kp = 1;
 8001fca:	4b92      	ldr	r3, [pc, #584]	@ (8002214 <main+0x514>)
 8001fcc:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001fd0:	619a      	str	r2, [r3, #24]
	Pris_posi_PID.Ki = 0.05;
 8001fd2:	4b90      	ldr	r3, [pc, #576]	@ (8002214 <main+0x514>)
 8001fd4:	4a90      	ldr	r2, [pc, #576]	@ (8002218 <main+0x518>)
 8001fd6:	61da      	str	r2, [r3, #28]
	Pris_posi_PID.Kd = 0.1;
 8001fd8:	4b8e      	ldr	r3, [pc, #568]	@ (8002214 <main+0x514>)
 8001fda:	4a90      	ldr	r2, [pc, #576]	@ (800221c <main+0x51c>)
 8001fdc:	621a      	str	r2, [r3, #32]
	arm_pid_init_f32(&Pris_posi_PID, 0);
 8001fde:	2100      	movs	r1, #0
 8001fe0:	488c      	ldr	r0, [pc, #560]	@ (8002214 <main+0x514>)
 8001fe2:	f009 fa33 	bl	800b44c <arm_pid_init_f32>

	// Prismatic Velocity
	Pris_velo_PID.Kp = 1;
 8001fe6:	4b8e      	ldr	r3, [pc, #568]	@ (8002220 <main+0x520>)
 8001fe8:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001fec:	619a      	str	r2, [r3, #24]
	Pris_velo_PID.Ki = 0.1;
 8001fee:	4b8c      	ldr	r3, [pc, #560]	@ (8002220 <main+0x520>)
 8001ff0:	4a8a      	ldr	r2, [pc, #552]	@ (800221c <main+0x51c>)
 8001ff2:	61da      	str	r2, [r3, #28]
	Pris_velo_PID.Kd = 0;
 8001ff4:	4b8a      	ldr	r3, [pc, #552]	@ (8002220 <main+0x520>)
 8001ff6:	f04f 0200 	mov.w	r2, #0
 8001ffa:	621a      	str	r2, [r3, #32]
	arm_pid_init_f32(&Pris_velo_PID, 0);
 8001ffc:	2100      	movs	r1, #0
 8001ffe:	4888      	ldr	r0, [pc, #544]	@ (8002220 <main+0x520>)
 8002000:	f009 fa24 	bl	800b44c <arm_pid_init_f32>

	// Revolute Position
	Rev_posi_PID.Kp = 1;
 8002004:	4b87      	ldr	r3, [pc, #540]	@ (8002224 <main+0x524>)
 8002006:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800200a:	619a      	str	r2, [r3, #24]
	Rev_posi_PID.Ki = 0.00001;
 800200c:	4b85      	ldr	r3, [pc, #532]	@ (8002224 <main+0x524>)
 800200e:	4a86      	ldr	r2, [pc, #536]	@ (8002228 <main+0x528>)
 8002010:	61da      	str	r2, [r3, #28]
	Rev_posi_PID.Kd = 0.1;
 8002012:	4b84      	ldr	r3, [pc, #528]	@ (8002224 <main+0x524>)
 8002014:	4a81      	ldr	r2, [pc, #516]	@ (800221c <main+0x51c>)
 8002016:	621a      	str	r2, [r3, #32]
	arm_pid_init_f32(&Rev_posi_PID, 0);
 8002018:	2100      	movs	r1, #0
 800201a:	4882      	ldr	r0, [pc, #520]	@ (8002224 <main+0x524>)
 800201c:	f009 fa16 	bl	800b44c <arm_pid_init_f32>

	// Revolute Velocity
	Rev_velo_PID.Kp = 1;
 8002020:	4b82      	ldr	r3, [pc, #520]	@ (800222c <main+0x52c>)
 8002022:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002026:	619a      	str	r2, [r3, #24]
	Rev_velo_PID.Ki = 0.00001;
 8002028:	4b80      	ldr	r3, [pc, #512]	@ (800222c <main+0x52c>)
 800202a:	4a7f      	ldr	r2, [pc, #508]	@ (8002228 <main+0x528>)
 800202c:	61da      	str	r2, [r3, #28]
	Rev_velo_PID.Kd = 0;
 800202e:	4b7f      	ldr	r3, [pc, #508]	@ (800222c <main+0x52c>)
 8002030:	f04f 0200 	mov.w	r2, #0
 8002034:	621a      	str	r2, [r3, #32]
	arm_pid_init_f32(&Rev_velo_PID, 0);
 8002036:	2100      	movs	r1, #0
 8002038:	487c      	ldr	r0, [pc, #496]	@ (800222c <main+0x52c>)
 800203a:	f009 fa07 	bl	800b44c <arm_pid_init_f32>

	InitTrajectorySegment(&segments[0], 0.0f, 500.0f, 500.0f, 250.0f, 0.0f);
 800203e:	ed9f 2a7c 	vldr	s4, [pc, #496]	@ 8002230 <main+0x530>
 8002042:	eddf 1a7c 	vldr	s3, [pc, #496]	@ 8002234 <main+0x534>
 8002046:	ed9f 1a7c 	vldr	s2, [pc, #496]	@ 8002238 <main+0x538>
 800204a:	eddf 0a7b 	vldr	s1, [pc, #492]	@ 8002238 <main+0x538>
 800204e:	ed9f 0a78 	vldr	s0, [pc, #480]	@ 8002230 <main+0x530>
 8002052:	487a      	ldr	r0, [pc, #488]	@ (800223c <main+0x53c>)
 8002054:	f7ff f9d6 	bl	8001404 <InitTrajectorySegment>

		//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 1);
		//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 1);
		//__HAL_TIM_SET_COMPARE(&htim20,TIM_CHANNEL_1,500);
		//__HAL_TIM_SET_COMPARE(&htim20,TIM_CHANNEL_3,status);
		HAL_ADC_Start(&hadc1);
 8002058:	4879      	ldr	r0, [pc, #484]	@ (8002240 <main+0x540>)
 800205a:	f001 fea1 	bl	8003da0 <HAL_ADC_Start>
		HAL_ADC_Start(&hadc2);
 800205e:	4879      	ldr	r0, [pc, #484]	@ (8002244 <main+0x544>)
 8002060:	f001 fe9e 	bl	8003da0 <HAL_ADC_Start>
		adc_1 = HAL_ADC_GetValue(&hadc1);
 8002064:	4876      	ldr	r0, [pc, #472]	@ (8002240 <main+0x540>)
 8002066:	f001 ff7f 	bl	8003f68 <HAL_ADC_GetValue>
 800206a:	4603      	mov	r3, r0
 800206c:	b29a      	uxth	r2, r3
 800206e:	4b76      	ldr	r3, [pc, #472]	@ (8002248 <main+0x548>)
 8002070:	801a      	strh	r2, [r3, #0]
		adc_2 = HAL_ADC_GetValue(&hadc2);
 8002072:	4874      	ldr	r0, [pc, #464]	@ (8002244 <main+0x544>)
 8002074:	f001 ff78 	bl	8003f68 <HAL_ADC_GetValue>
 8002078:	4603      	mov	r3, r0
 800207a:	b29a      	uxth	r2, r3
 800207c:	4b73      	ldr	r3, [pc, #460]	@ (800224c <main+0x54c>)
 800207e:	801a      	strh	r2, [r3, #0]
		QEIReadRaw3 = __HAL_TIM_GET_COUNTER(&htim3);
 8002080:	4b73      	ldr	r3, [pc, #460]	@ (8002250 <main+0x550>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002086:	4a73      	ldr	r2, [pc, #460]	@ (8002254 <main+0x554>)
 8002088:	6013      	str	r3, [r2, #0]
		QEIReadRaw4 = __HAL_TIM_GET_COUNTER(&htim4);
 800208a:	4b73      	ldr	r3, [pc, #460]	@ (8002258 <main+0x558>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002090:	4a72      	ldr	r2, [pc, #456]	@ (800225c <main+0x55c>)
 8002092:	6013      	str	r3, [r2, #0]
		Modbus_Protocal_Worker();
 8002094:	f7fe fec0 	bl	8000e18 <Modbus_Protocal_Worker>
//		registerFrame[0x06].U16 = 7;
//		registerFrame[0x07].U16 = 8;
//		registerFrame[0x08].U16 = 9;
		//registerFrame[0x15].U16 = 10;
		//}
		uint32_t currentTick = HAL_GetTick();
 8002098:	f001 faae 	bl	80035f8 <HAL_GetTick>
 800209c:	63f8      	str	r0, [r7, #60]	@ 0x3c
		float dt = (currentTick - lastTick) / 1000.0f;
 800209e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80020a0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80020a2:	1ad3      	subs	r3, r2, r3
 80020a4:	ee07 3a90 	vmov	s15, r3
 80020a8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80020ac:	eddf 6a6c 	vldr	s13, [pc, #432]	@ 8002260 <main+0x560>
 80020b0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80020b4:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
//		QEIReadRaw = __HAL_TIM_GET_COUNTER(&htim4);
		if (dt >= 0.01f) {
 80020b8:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 80020bc:	ed9f 7a51 	vldr	s14, [pc, #324]	@ 8002204 <main+0x504>
 80020c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80020c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020c8:	db3b      	blt.n	8002142 <main+0x442>
			Encoder_Update(&encoder1, dt);
 80020ca:	ed97 0a0e 	vldr	s0, [r7, #56]	@ 0x38
 80020ce:	4865      	ldr	r0, [pc, #404]	@ (8002264 <main+0x564>)
 80020d0:	f7fe fa62 	bl	8000598 <Encoder_Update>
			Encoder_Update(&encoder2, dt);
 80020d4:	ed97 0a0e 	vldr	s0, [r7, #56]	@ 0x38
 80020d8:	4863      	ldr	r0, [pc, #396]	@ (8002268 <main+0x568>)
 80020da:	f7fe fa5d 	bl	8000598 <Encoder_Update>
			lastTick = currentTick;
 80020de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80020e0:	64fb      	str	r3, [r7, #76]	@ 0x4c

			p1 = Encoder_GetPosition(&encoder1);
 80020e2:	4860      	ldr	r0, [pc, #384]	@ (8002264 <main+0x564>)
 80020e4:	f7fe fb0e 	bl	8000704 <Encoder_GetPosition>
 80020e8:	eef0 7a40 	vmov.f32	s15, s0
 80020ec:	4b5f      	ldr	r3, [pc, #380]	@ (800226c <main+0x56c>)
 80020ee:	edc3 7a00 	vstr	s15, [r3]
			v1 = Encoder_GetVelocity(&encoder1);
 80020f2:	485c      	ldr	r0, [pc, #368]	@ (8002264 <main+0x564>)
 80020f4:	f7fe fb15 	bl	8000722 <Encoder_GetVelocity>
 80020f8:	eef0 7a40 	vmov.f32	s15, s0
 80020fc:	4b5c      	ldr	r3, [pc, #368]	@ (8002270 <main+0x570>)
 80020fe:	edc3 7a00 	vstr	s15, [r3]
			a1 = Encoder_GetAcceleration(&encoder1);
 8002102:	4858      	ldr	r0, [pc, #352]	@ (8002264 <main+0x564>)
 8002104:	f7fe fb1c 	bl	8000740 <Encoder_GetAcceleration>
 8002108:	eef0 7a40 	vmov.f32	s15, s0
 800210c:	4b59      	ldr	r3, [pc, #356]	@ (8002274 <main+0x574>)
 800210e:	edc3 7a00 	vstr	s15, [r3]

			p2 = Encoder_GetPosition(&encoder2);
 8002112:	4855      	ldr	r0, [pc, #340]	@ (8002268 <main+0x568>)
 8002114:	f7fe faf6 	bl	8000704 <Encoder_GetPosition>
 8002118:	eef0 7a40 	vmov.f32	s15, s0
 800211c:	4b56      	ldr	r3, [pc, #344]	@ (8002278 <main+0x578>)
 800211e:	edc3 7a00 	vstr	s15, [r3]
			v2 = Encoder_GetVelocity(&encoder2);
 8002122:	4851      	ldr	r0, [pc, #324]	@ (8002268 <main+0x568>)
 8002124:	f7fe fafd 	bl	8000722 <Encoder_GetVelocity>
 8002128:	eef0 7a40 	vmov.f32	s15, s0
 800212c:	4b53      	ldr	r3, [pc, #332]	@ (800227c <main+0x57c>)
 800212e:	edc3 7a00 	vstr	s15, [r3]
			a2 = Encoder_GetAcceleration(&encoder2);
 8002132:	484d      	ldr	r0, [pc, #308]	@ (8002268 <main+0x568>)
 8002134:	f7fe fb04 	bl	8000740 <Encoder_GetAcceleration>
 8002138:	eef0 7a40 	vmov.f32	s15, s0
 800213c:	4b50      	ldr	r3, [pc, #320]	@ (8002280 <main+0x580>)
 800213e:	edc3 7a00 	vstr	s15, [r3]

// Now use p1,v1,a1 and p2,v2,a2 as needed
		}
//
		t_global = HAL_GetTick() / 1000.0f;
 8002142:	f001 fa59 	bl	80035f8 <HAL_GetTick>
 8002146:	ee07 0a90 	vmov	s15, r0
 800214a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800214e:	eddf 6a44 	vldr	s13, [pc, #272]	@ 8002260 <main+0x560>
 8002152:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002156:	4b4b      	ldr	r3, [pc, #300]	@ (8002284 <main+0x584>)
 8002158:	edc3 7a00 	vstr	s15, [r3]
		pos = GetTrajectoryPosition(&segments[0], t_global);
 800215c:	4b49      	ldr	r3, [pc, #292]	@ (8002284 <main+0x584>)
 800215e:	edd3 7a00 	vldr	s15, [r3]
 8002162:	eeb0 0a67 	vmov.f32	s0, s15
 8002166:	4835      	ldr	r0, [pc, #212]	@ (800223c <main+0x53c>)
 8002168:	f7ff fa02 	bl	8001570 <GetTrajectoryPosition>
 800216c:	eef0 7a40 	vmov.f32	s15, s0
 8002170:	4b45      	ldr	r3, [pc, #276]	@ (8002288 <main+0x588>)
 8002172:	edc3 7a00 	vstr	s15, [r3]
		vel = GetTrajectoryVelocity(&segments[0], t_global);
 8002176:	4b43      	ldr	r3, [pc, #268]	@ (8002284 <main+0x584>)
 8002178:	edd3 7a00 	vldr	s15, [r3]
 800217c:	eeb0 0a67 	vmov.f32	s0, s15
 8002180:	482e      	ldr	r0, [pc, #184]	@ (800223c <main+0x53c>)
 8002182:	f7ff facb 	bl	800171c <GetTrajectoryVelocity>
 8002186:	eef0 7a40 	vmov.f32	s15, s0
 800218a:	4b40      	ldr	r3, [pc, #256]	@ (800228c <main+0x58c>)
 800218c:	edc3 7a00 	vstr	s15, [r3]
 8002190:	e07e      	b.n	8002290 <main+0x590>
 8002192:	bf00      	nop
 8002194:	f3af 8000 	nop.w
 8002198:	eb1c432d 	.word	0xeb1c432d
 800219c:	3f5a36e2 	.word	0x3f5a36e2
 80021a0:	b50b0f28 	.word	0xb50b0f28
 80021a4:	400ef9a6 	.word	0x400ef9a6
 80021a8:	9db22d0e 	.word	0x9db22d0e
 80021ac:	3fc6a7ef 	.word	0x3fc6a7ef
 80021b0:	00000000 	.word	0x00000000
 80021b4:	3fec0000 	.word	0x3fec0000
 80021b8:	3c968944 	.word	0x3c968944
 80021bc:	3f3f969e 	.word	0x3f3f969e
 80021c0:	05857aff 	.word	0x05857aff
 80021c4:	3f2e03f7 	.word	0x3f2e03f7
 80021c8:	fa8f7db7 	.word	0xfa8f7db7
 80021cc:	3f3615eb 	.word	0x3f3615eb
 80021d0:	f9db22d1 	.word	0xf9db22d1
 80021d4:	3fe06a7e 	.word	0x3fe06a7e
 80021d8:	a7daa4fc 	.word	0xa7daa4fc
 80021dc:	3ff331e3 	.word	0x3ff331e3
 80021e0:	e147ae14 	.word	0xe147ae14
 80021e4:	3ffa147a 	.word	0x3ffa147a
 80021e8:	df3b645a 	.word	0xdf3b645a
 80021ec:	3fe78d4f 	.word	0x3fe78d4f
 80021f0:	003eea21 	.word	0x003eea21
 80021f4:	3f7c4da9 	.word	0x3f7c4da9
 80021f8:	4dd2f1aa 	.word	0x4dd2f1aa
 80021fc:	3fc81062 	.word	0x3fc81062
 8002200:	20000c98 	.word	0x20000c98
 8002204:	3c23d70a 	.word	0x3c23d70a
 8002208:	3dcccccd 	.word	0x3dcccccd
 800220c:	20000fc0 	.word	0x20000fc0
 8002210:	20000ff8 	.word	0x20000ff8
 8002214:	20000bd0 	.word	0x20000bd0
 8002218:	3d4ccccd 	.word	0x3d4ccccd
 800221c:	3dcccccd 	.word	0x3dcccccd
 8002220:	20000c10 	.word	0x20000c10
 8002224:	20000c50 	.word	0x20000c50
 8002228:	3727c5ac 	.word	0x3727c5ac
 800222c:	20000c74 	.word	0x20000c74
 8002230:	00000000 	.word	0x00000000
 8002234:	437a0000 	.word	0x437a0000
 8002238:	43fa0000 	.word	0x43fa0000
 800223c:	200003d4 	.word	0x200003d4
 8002240:	20000280 	.word	0x20000280
 8002244:	200002ec 	.word	0x200002ec
 8002248:	2000055c 	.word	0x2000055c
 800224c:	2000055e 	.word	0x2000055e
 8002250:	200011d8 	.word	0x200011d8
 8002254:	200003c4 	.word	0x200003c4
 8002258:	200012a4 	.word	0x200012a4
 800225c:	200003c8 	.word	0x200003c8
 8002260:	447a0000 	.word	0x447a0000
 8002264:	2000035c 	.word	0x2000035c
 8002268:	20000390 	.word	0x20000390
 800226c:	20000540 	.word	0x20000540
 8002270:	20000544 	.word	0x20000544
 8002274:	20000548 	.word	0x20000548
 8002278:	2000054c 	.word	0x2000054c
 800227c:	20000550 	.word	0x20000550
 8002280:	20000554 	.word	0x20000554
 8002284:	2000053c 	.word	0x2000053c
 8002288:	200003cc 	.word	0x200003cc
 800228c:	200003d0 	.word	0x200003d0


		if (V_pris_velo_PID < 0) {
 8002290:	4b34      	ldr	r3, [pc, #208]	@ (8002364 <main+0x664>)
 8002292:	edd3 7a00 	vldr	s15, [r3]
 8002296:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800229a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800229e:	d50b      	bpl.n	80022b8 <main+0x5b8>
			DIR_24V = 0;
 80022a0:	4b31      	ldr	r3, [pc, #196]	@ (8002368 <main+0x668>)
 80022a2:	2200      	movs	r2, #0
 80022a4:	601a      	str	r2, [r3, #0]
			V_absoulte_pris  = fabsf(V_pris_velo_PID);
 80022a6:	4b2f      	ldr	r3, [pc, #188]	@ (8002364 <main+0x664>)
 80022a8:	edd3 7a00 	vldr	s15, [r3]
 80022ac:	eef0 7ae7 	vabs.f32	s15, s15
 80022b0:	4b2e      	ldr	r3, [pc, #184]	@ (800236c <main+0x66c>)
 80022b2:	edc3 7a00 	vstr	s15, [r3]
 80022b6:	e00e      	b.n	80022d6 <main+0x5d6>
		} else if (V_pris_velo_PID > 0) {
 80022b8:	4b2a      	ldr	r3, [pc, #168]	@ (8002364 <main+0x664>)
 80022ba:	edd3 7a00 	vldr	s15, [r3]
 80022be:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80022c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022c6:	dd06      	ble.n	80022d6 <main+0x5d6>
			DIR_24V = 1;
 80022c8:	4b27      	ldr	r3, [pc, #156]	@ (8002368 <main+0x668>)
 80022ca:	2201      	movs	r2, #1
 80022cc:	601a      	str	r2, [r3, #0]
			V_absoulte_pris  = V_pris_velo_PID;
 80022ce:	4b25      	ldr	r3, [pc, #148]	@ (8002364 <main+0x664>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4a26      	ldr	r2, [pc, #152]	@ (800236c <main+0x66c>)
 80022d4:	6013      	str	r3, [r2, #0]
		}
		pwm_pris_velo = voltage_to_pwm(V_absoulte_pris );
 80022d6:	4b25      	ldr	r3, [pc, #148]	@ (800236c <main+0x66c>)
 80022d8:	edd3 7a00 	vldr	s15, [r3]
 80022dc:	eeb0 0a67 	vmov.f32	s0, s15
 80022e0:	f000 fa88 	bl	80027f4 <voltage_to_pwm>
 80022e4:	eef0 7a40 	vmov.f32	s15, s0
 80022e8:	4b21      	ldr	r3, [pc, #132]	@ (8002370 <main+0x670>)
 80022ea:	edc3 7a00 	vstr	s15, [r3]
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, DIR_24V);
 80022ee:	4b1e      	ldr	r3, [pc, #120]	@ (8002368 <main+0x668>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	b2db      	uxtb	r3, r3
 80022f4:	461a      	mov	r2, r3
 80022f6:	2102      	movs	r1, #2
 80022f8:	481e      	ldr	r0, [pc, #120]	@ (8002374 <main+0x674>)
 80022fa:	f003 fa17 	bl	800572c <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim20,TIM_CHANNEL_1,pwm_pris_velo);
 80022fe:	4b1c      	ldr	r3, [pc, #112]	@ (8002370 <main+0x670>)
 8002300:	edd3 7a00 	vldr	s15, [r3]
 8002304:	4b1c      	ldr	r3, [pc, #112]	@ (8002378 <main+0x678>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800230c:	ee17 2a90 	vmov	r2, s15
 8002310:	635a      	str	r2, [r3, #52]	@ 0x34

		Measurement_Pris[0] = Encoder_GetPosition_mm(&encoder1);
 8002312:	481a      	ldr	r0, [pc, #104]	@ (800237c <main+0x67c>)
 8002314:	f7fe fa23 	bl	800075e <Encoder_GetPosition_mm>
 8002318:	eef0 7a40 	vmov.f32	s15, s0
 800231c:	4b18      	ldr	r3, [pc, #96]	@ (8002380 <main+0x680>)
 800231e:	edc3 7a00 	vstr	s15, [r3]
		Measurement_Pris[1] = Encoder_GetVelocity_mm(&encoder1);
 8002322:	4816      	ldr	r0, [pc, #88]	@ (800237c <main+0x67c>)
 8002324:	f7fe fa2a 	bl	800077c <Encoder_GetVelocity_mm>
 8002328:	eef0 7a40 	vmov.f32	s15, s0
 800232c:	4b14      	ldr	r3, [pc, #80]	@ (8002380 <main+0x680>)
 800232e:	edc3 7a01 	vstr	s15, [r3, #4]
		Measurement_Pris[2] = 0;
 8002332:	4b13      	ldr	r3, [pc, #76]	@ (8002380 <main+0x680>)
 8002334:	f04f 0200 	mov.w	r2, #0
 8002338:	609a      	str	r2, [r3, #8]
		Measurement_Pris[3] = 0;
 800233a:	4b11      	ldr	r3, [pc, #68]	@ (8002380 <main+0x680>)
 800233c:	f04f 0200 	mov.w	r2, #0
 8002340:	60da      	str	r2, [r3, #12]
		Kalman_SetInput(&kf_pris,V_absoulte_pris);
 8002342:	4b0a      	ldr	r3, [pc, #40]	@ (800236c <main+0x66c>)
 8002344:	edd3 7a00 	vldr	s15, [r3]
 8002348:	eeb0 0a67 	vmov.f32	s0, s15
 800234c:	480d      	ldr	r0, [pc, #52]	@ (8002384 <main+0x684>)
 800234e:	f7fe fb26 	bl	800099e <Kalman_SetInput>
		Kalman_Predict(&kf_pris);
 8002352:	480c      	ldr	r0, [pc, #48]	@ (8002384 <main+0x684>)
 8002354:	f7fe fb33 	bl	80009be <Kalman_Predict>
		Kalman_Update(&kf_pris,Measurement_Pris);
 8002358:	4909      	ldr	r1, [pc, #36]	@ (8002380 <main+0x680>)
 800235a:	480a      	ldr	r0, [pc, #40]	@ (8002384 <main+0x684>)
 800235c:	f7fe fb7c 	bl	8000a58 <Kalman_Update>
	while (1) {
 8002360:	e67a      	b.n	8002058 <main+0x358>
 8002362:	bf00      	nop
 8002364:	20000c3c 	.word	0x20000c3c
 8002368:	20000bc8 	.word	0x20000bc8
 800236c:	20000c00 	.word	0x20000c00
 8002370:	20000c40 	.word	0x20000c40
 8002374:	48000400 	.word	0x48000400
 8002378:	20001508 	.word	0x20001508
 800237c:	2000035c 	.word	0x2000035c
 8002380:	20001030 	.word	0x20001030
 8002384:	20000c98 	.word	0x20000c98

08002388 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b094      	sub	sp, #80	@ 0x50
 800238c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800238e:	f107 0318 	add.w	r3, r7, #24
 8002392:	2238      	movs	r2, #56	@ 0x38
 8002394:	2100      	movs	r1, #0
 8002396:	4618      	mov	r0, r3
 8002398:	f009 fd4e 	bl	800be38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800239c:	1d3b      	adds	r3, r7, #4
 800239e:	2200      	movs	r2, #0
 80023a0:	601a      	str	r2, [r3, #0]
 80023a2:	605a      	str	r2, [r3, #4]
 80023a4:	609a      	str	r2, [r3, #8]
 80023a6:	60da      	str	r2, [r3, #12]
 80023a8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80023aa:	2000      	movs	r0, #0
 80023ac:	f003 f9ee 	bl	800578c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80023b0:	2302      	movs	r3, #2
 80023b2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80023b4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80023b8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80023ba:	2340      	movs	r3, #64	@ 0x40
 80023bc:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80023be:	2302      	movs	r3, #2
 80023c0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80023c2:	2302      	movs	r3, #2
 80023c4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80023c6:	2304      	movs	r3, #4
 80023c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80023ca:	2355      	movs	r3, #85	@ 0x55
 80023cc:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80023ce:	2302      	movs	r3, #2
 80023d0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80023d2:	2302      	movs	r3, #2
 80023d4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80023d6:	2302      	movs	r3, #2
 80023d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80023da:	f107 0318 	add.w	r3, r7, #24
 80023de:	4618      	mov	r0, r3
 80023e0:	f003 fa88 	bl	80058f4 <HAL_RCC_OscConfig>
 80023e4:	4603      	mov	r3, r0
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d001      	beq.n	80023ee <SystemClock_Config+0x66>
  {
    Error_Handler();
 80023ea:	f000 fa21 	bl	8002830 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80023ee:	230f      	movs	r3, #15
 80023f0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80023f2:	2303      	movs	r3, #3
 80023f4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80023f6:	2300      	movs	r3, #0
 80023f8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80023fa:	2300      	movs	r3, #0
 80023fc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80023fe:	2300      	movs	r3, #0
 8002400:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002402:	1d3b      	adds	r3, r7, #4
 8002404:	2104      	movs	r1, #4
 8002406:	4618      	mov	r0, r3
 8002408:	f003 fd86 	bl	8005f18 <HAL_RCC_ClockConfig>
 800240c:	4603      	mov	r3, r0
 800240e:	2b00      	cmp	r3, #0
 8002410:	d001      	beq.n	8002416 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8002412:	f000 fa0d 	bl	8002830 <Error_Handler>
  }
}
 8002416:	bf00      	nop
 8002418:	3750      	adds	r7, #80	@ 0x50
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}
	...

08002420 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8002420:	b480      	push	{r7}
 8002422:	b083      	sub	sp, #12
 8002424:	af00      	add	r7, sp, #0
 8002426:	4603      	mov	r3, r0
 8002428:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_9) {
 800242a:	88fb      	ldrh	r3, [r7, #6]
 800242c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002430:	d103      	bne.n	800243a <HAL_GPIO_EXTI_Callback+0x1a>
		State = 9;
 8002432:	4b1c      	ldr	r3, [pc, #112]	@ (80024a4 <HAL_GPIO_EXTI_Callback+0x84>)
 8002434:	2209      	movs	r2, #9
 8002436:	601a      	str	r2, [r3, #0]
	} else if (GPIO_Pin == GPIO_PIN_14) {
		State = 14;
	} else if (GPIO_Pin == GPIO_PIN_15) {
		State = 15;
	}
}
 8002438:	e02e      	b.n	8002498 <HAL_GPIO_EXTI_Callback+0x78>
	} else if (GPIO_Pin == GPIO_PIN_10) {
 800243a:	88fb      	ldrh	r3, [r7, #6]
 800243c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002440:	d103      	bne.n	800244a <HAL_GPIO_EXTI_Callback+0x2a>
		State = 10;
 8002442:	4b18      	ldr	r3, [pc, #96]	@ (80024a4 <HAL_GPIO_EXTI_Callback+0x84>)
 8002444:	220a      	movs	r2, #10
 8002446:	601a      	str	r2, [r3, #0]
}
 8002448:	e026      	b.n	8002498 <HAL_GPIO_EXTI_Callback+0x78>
	} else if (GPIO_Pin == GPIO_PIN_11) {
 800244a:	88fb      	ldrh	r3, [r7, #6]
 800244c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002450:	d103      	bne.n	800245a <HAL_GPIO_EXTI_Callback+0x3a>
		State = 11;
 8002452:	4b14      	ldr	r3, [pc, #80]	@ (80024a4 <HAL_GPIO_EXTI_Callback+0x84>)
 8002454:	220b      	movs	r2, #11
 8002456:	601a      	str	r2, [r3, #0]
}
 8002458:	e01e      	b.n	8002498 <HAL_GPIO_EXTI_Callback+0x78>
	} else if (GPIO_Pin == GPIO_PIN_12) {
 800245a:	88fb      	ldrh	r3, [r7, #6]
 800245c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002460:	d103      	bne.n	800246a <HAL_GPIO_EXTI_Callback+0x4a>
		State = 12;
 8002462:	4b10      	ldr	r3, [pc, #64]	@ (80024a4 <HAL_GPIO_EXTI_Callback+0x84>)
 8002464:	220c      	movs	r2, #12
 8002466:	601a      	str	r2, [r3, #0]
}
 8002468:	e016      	b.n	8002498 <HAL_GPIO_EXTI_Callback+0x78>
	} else if (GPIO_Pin == GPIO_PIN_13) {
 800246a:	88fb      	ldrh	r3, [r7, #6]
 800246c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002470:	d103      	bne.n	800247a <HAL_GPIO_EXTI_Callback+0x5a>
		State = 13;
 8002472:	4b0c      	ldr	r3, [pc, #48]	@ (80024a4 <HAL_GPIO_EXTI_Callback+0x84>)
 8002474:	220d      	movs	r2, #13
 8002476:	601a      	str	r2, [r3, #0]
}
 8002478:	e00e      	b.n	8002498 <HAL_GPIO_EXTI_Callback+0x78>
	} else if (GPIO_Pin == GPIO_PIN_14) {
 800247a:	88fb      	ldrh	r3, [r7, #6]
 800247c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002480:	d103      	bne.n	800248a <HAL_GPIO_EXTI_Callback+0x6a>
		State = 14;
 8002482:	4b08      	ldr	r3, [pc, #32]	@ (80024a4 <HAL_GPIO_EXTI_Callback+0x84>)
 8002484:	220e      	movs	r2, #14
 8002486:	601a      	str	r2, [r3, #0]
}
 8002488:	e006      	b.n	8002498 <HAL_GPIO_EXTI_Callback+0x78>
	} else if (GPIO_Pin == GPIO_PIN_15) {
 800248a:	88fb      	ldrh	r3, [r7, #6]
 800248c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002490:	d102      	bne.n	8002498 <HAL_GPIO_EXTI_Callback+0x78>
		State = 15;
 8002492:	4b04      	ldr	r3, [pc, #16]	@ (80024a4 <HAL_GPIO_EXTI_Callback+0x84>)
 8002494:	220f      	movs	r2, #15
 8002496:	601a      	str	r2, [r3, #0]
}
 8002498:	bf00      	nop
 800249a:	370c      	adds	r7, #12
 800249c:	46bd      	mov	sp, r7
 800249e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a2:	4770      	bx	lr
 80024a4:	20000558 	.word	0x20000558

080024a8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b082      	sub	sp, #8
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
	if (htim == &htim2) {
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	4a38      	ldr	r2, [pc, #224]	@ (8002594 <HAL_TIM_PeriodElapsedCallback+0xec>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d168      	bne.n	800258a <HAL_TIM_PeriodElapsedCallback+0xe2>
		count_Tim2 += 1;
 80024b8:	4b37      	ldr	r3, [pc, #220]	@ (8002598 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	3301      	adds	r3, #1
 80024be:	4a36      	ldr	r2, [pc, #216]	@ (8002598 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 80024c0:	6013      	str	r3, [r2, #0]
		// Velocity Control
		velocity_pris = Encoder_GetVelocity_mm(&encoder1);
 80024c2:	4836      	ldr	r0, [pc, #216]	@ (800259c <HAL_TIM_PeriodElapsedCallback+0xf4>)
 80024c4:	f7fe f95a 	bl	800077c <Encoder_GetVelocity_mm>
 80024c8:	eef0 7a40 	vmov.f32	s15, s0
 80024cc:	4b34      	ldr	r3, [pc, #208]	@ (80025a0 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 80024ce:	edc3 7a00 	vstr	s15, [r3]
		setvelocity_pris = GetTrajectoryVelocity(&segments[0], t_global) + V_pris_posi_PID;
 80024d2:	4b34      	ldr	r3, [pc, #208]	@ (80025a4 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 80024d4:	edd3 7a00 	vldr	s15, [r3]
 80024d8:	eeb0 0a67 	vmov.f32	s0, s15
 80024dc:	4832      	ldr	r0, [pc, #200]	@ (80025a8 <HAL_TIM_PeriodElapsedCallback+0x100>)
 80024de:	f7ff f91d 	bl	800171c <GetTrajectoryVelocity>
 80024e2:	eeb0 7a40 	vmov.f32	s14, s0
 80024e6:	4b31      	ldr	r3, [pc, #196]	@ (80025ac <HAL_TIM_PeriodElapsedCallback+0x104>)
 80024e8:	edd3 7a00 	vldr	s15, [r3]
 80024ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024f0:	4b2f      	ldr	r3, [pc, #188]	@ (80025b0 <HAL_TIM_PeriodElapsedCallback+0x108>)
 80024f2:	edc3 7a00 	vstr	s15, [r3]
		delta_velo_pris = setvelocity_pris - velocity_pris;
 80024f6:	4b2e      	ldr	r3, [pc, #184]	@ (80025b0 <HAL_TIM_PeriodElapsedCallback+0x108>)
 80024f8:	ed93 7a00 	vldr	s14, [r3]
 80024fc:	4b28      	ldr	r3, [pc, #160]	@ (80025a0 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 80024fe:	edd3 7a00 	vldr	s15, [r3]
 8002502:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002506:	4b2b      	ldr	r3, [pc, #172]	@ (80025b4 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8002508:	edc3 7a00 	vstr	s15, [r3]
		V_pris_velo_PID = Prismatic_velocity_control(delta_velo_pris);
 800250c:	4b29      	ldr	r3, [pc, #164]	@ (80025b4 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 800250e:	edd3 7a00 	vldr	s15, [r3]
 8002512:	eeb0 0a67 	vmov.f32	s0, s15
 8002516:	f000 f8cf 	bl	80026b8 <Prismatic_velocity_control>
 800251a:	eef0 7a40 	vmov.f32	s15, s0
 800251e:	4b26      	ldr	r3, [pc, #152]	@ (80025b8 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8002520:	edc3 7a00 	vstr	s15, [r3]
		if (count_Tim2 >= 10) {
 8002524:	4b1c      	ldr	r3, [pc, #112]	@ (8002598 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	2b09      	cmp	r3, #9
 800252a:	dd2e      	ble.n	800258a <HAL_TIM_PeriodElapsedCallback+0xe2>
			// Position Control
			position_pris = Encoder_GetPosition_mm(&encoder1);
 800252c:	481b      	ldr	r0, [pc, #108]	@ (800259c <HAL_TIM_PeriodElapsedCallback+0xf4>)
 800252e:	f7fe f916 	bl	800075e <Encoder_GetPosition_mm>
 8002532:	eef0 7a40 	vmov.f32	s15, s0
 8002536:	4b21      	ldr	r3, [pc, #132]	@ (80025bc <HAL_TIM_PeriodElapsedCallback+0x114>)
 8002538:	edc3 7a00 	vstr	s15, [r3]
			setposition_pris = GetTrajectoryPosition(&segments[0], t_global);
 800253c:	4b19      	ldr	r3, [pc, #100]	@ (80025a4 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 800253e:	edd3 7a00 	vldr	s15, [r3]
 8002542:	eeb0 0a67 	vmov.f32	s0, s15
 8002546:	4818      	ldr	r0, [pc, #96]	@ (80025a8 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8002548:	f7ff f812 	bl	8001570 <GetTrajectoryPosition>
 800254c:	eef0 7a40 	vmov.f32	s15, s0
 8002550:	4b1b      	ldr	r3, [pc, #108]	@ (80025c0 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8002552:	edc3 7a00 	vstr	s15, [r3]
			delta_posi_pris = setposition_pris - position_pris;
 8002556:	4b1a      	ldr	r3, [pc, #104]	@ (80025c0 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8002558:	ed93 7a00 	vldr	s14, [r3]
 800255c:	4b17      	ldr	r3, [pc, #92]	@ (80025bc <HAL_TIM_PeriodElapsedCallback+0x114>)
 800255e:	edd3 7a00 	vldr	s15, [r3]
 8002562:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002566:	4b17      	ldr	r3, [pc, #92]	@ (80025c4 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8002568:	edc3 7a00 	vstr	s15, [r3]
			V_pris_posi_PID = Prismatic_position_control(delta_posi_pris);
 800256c:	4b15      	ldr	r3, [pc, #84]	@ (80025c4 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 800256e:	edd3 7a00 	vldr	s15, [r3]
 8002572:	eeb0 0a67 	vmov.f32	s0, s15
 8002576:	f000 f827 	bl	80025c8 <Prismatic_position_control>
 800257a:	eef0 7a40 	vmov.f32	s15, s0
 800257e:	4b0b      	ldr	r3, [pc, #44]	@ (80025ac <HAL_TIM_PeriodElapsedCallback+0x104>)
 8002580:	edc3 7a00 	vstr	s15, [r3]
			count_Tim2 = 0;
 8002584:	4b04      	ldr	r3, [pc, #16]	@ (8002598 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8002586:	2200      	movs	r2, #0
 8002588:	601a      	str	r2, [r3, #0]
		}
	}
}
 800258a:	bf00      	nop
 800258c:	3708      	adds	r7, #8
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}
 8002592:	bf00      	nop
 8002594:	2000110c 	.word	0x2000110c
 8002598:	20000bcc 	.word	0x20000bcc
 800259c:	2000035c 	.word	0x2000035c
 80025a0:	20000c34 	.word	0x20000c34
 80025a4:	2000053c 	.word	0x2000053c
 80025a8:	200003d4 	.word	0x200003d4
 80025ac:	20000bfc 	.word	0x20000bfc
 80025b0:	20000c38 	.word	0x20000c38
 80025b4:	20000c4c 	.word	0x20000c4c
 80025b8:	20000c3c 	.word	0x20000c3c
 80025bc:	20000bf4 	.word	0x20000bf4
 80025c0:	20000bf8 	.word	0x20000bf8
 80025c4:	20000c0c 	.word	0x20000c0c

080025c8 <Prismatic_position_control>:

float Prismatic_position_control(float delta_posi) {
 80025c8:	b480      	push	{r7}
 80025ca:	b087      	sub	sp, #28
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	ed87 0a01 	vstr	s0, [r7, #4]
	int anti_windup;
	error_posi_pris[0] = delta_posi;
 80025d2:	4a36      	ldr	r2, [pc, #216]	@ (80026ac <Prismatic_position_control+0xe4>)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6013      	str	r3, [r2, #0]
//	Pris_posi_PID.Kp = 1;
//	Pris_posi_PID.Kd = 1;

	if (error_posi_pris[0] < 0 && error_posi_pris[1] > 0) {
 80025d8:	4b34      	ldr	r3, [pc, #208]	@ (80026ac <Prismatic_position_control+0xe4>)
 80025da:	edd3 7a00 	vldr	s15, [r3]
 80025de:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80025e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025e6:	d50a      	bpl.n	80025fe <Prismatic_position_control+0x36>
 80025e8:	4b30      	ldr	r3, [pc, #192]	@ (80026ac <Prismatic_position_control+0xe4>)
 80025ea:	edd3 7a01 	vldr	s15, [r3, #4]
 80025ee:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80025f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025f6:	dd02      	ble.n	80025fe <Prismatic_position_control+0x36>
		anti_windup = 0;
 80025f8:	2300      	movs	r3, #0
 80025fa:	617b      	str	r3, [r7, #20]
 80025fc:	e014      	b.n	8002628 <Prismatic_position_control+0x60>
	} else if (error_posi_pris[0] > 0 && error_posi_pris[1] < 0) {
 80025fe:	4b2b      	ldr	r3, [pc, #172]	@ (80026ac <Prismatic_position_control+0xe4>)
 8002600:	edd3 7a00 	vldr	s15, [r3]
 8002604:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002608:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800260c:	dd0a      	ble.n	8002624 <Prismatic_position_control+0x5c>
 800260e:	4b27      	ldr	r3, [pc, #156]	@ (80026ac <Prismatic_position_control+0xe4>)
 8002610:	edd3 7a01 	vldr	s15, [r3, #4]
 8002614:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002618:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800261c:	d502      	bpl.n	8002624 <Prismatic_position_control+0x5c>
		anti_windup = 0;
 800261e:	2300      	movs	r3, #0
 8002620:	617b      	str	r3, [r7, #20]
 8002622:	e001      	b.n	8002628 <Prismatic_position_control+0x60>
	} else {
		anti_windup = 1;
 8002624:	2301      	movs	r3, #1
 8002626:	617b      	str	r3, [r7, #20]
 8002628:	4b21      	ldr	r3, [pc, #132]	@ (80026b0 <Prismatic_position_control+0xe8>)
 800262a:	613b      	str	r3, [r7, #16]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	60fb      	str	r3, [r7, #12]
  float32_t in)
  {
    float32_t out;

    /* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2]  */
    out = (S->A0 * in) +
 8002630:	693b      	ldr	r3, [r7, #16]
 8002632:	ed93 7a00 	vldr	s14, [r3]
 8002636:	edd7 7a03 	vldr	s15, [r7, #12]
 800263a:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 800263e:	693b      	ldr	r3, [r7, #16]
 8002640:	edd3 6a01 	vldr	s13, [r3, #4]
 8002644:	693b      	ldr	r3, [r7, #16]
 8002646:	edd3 7a03 	vldr	s15, [r3, #12]
 800264a:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 800264e:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	edd3 6a02 	vldr	s13, [r3, #8]
 8002658:	693b      	ldr	r3, [r7, #16]
 800265a:	edd3 7a04 	vldr	s15, [r3, #16]
 800265e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002662:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 800266c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002670:	edc7 7a02 	vstr	s15, [r7, #8]

    /* Update state */
    S->state[1] = S->state[0];
 8002674:	693b      	ldr	r3, [r7, #16]
 8002676:	68da      	ldr	r2, [r3, #12]
 8002678:	693b      	ldr	r3, [r7, #16]
 800267a:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 800267c:	693b      	ldr	r3, [r7, #16]
 800267e:	68fa      	ldr	r2, [r7, #12]
 8002680:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8002682:	693b      	ldr	r3, [r7, #16]
 8002684:	68ba      	ldr	r2, [r7, #8]
 8002686:	615a      	str	r2, [r3, #20]

    /* return to application */
    return (out);
 8002688:	68bb      	ldr	r3, [r7, #8]
//		Pris_posi_PID.Ki = 0;
//	} else {
//		Pris_posi_PID.Ki = 1;
//	}

	V_pris_posi_PID = arm_pid_f32(&Pris_posi_PID, delta_posi);
 800268a:	4a0a      	ldr	r2, [pc, #40]	@ (80026b4 <Prismatic_position_control+0xec>)
 800268c:	6013      	str	r3, [r2, #0]

//	if (V_pris_posi_PID > 24) {
//		V_pris_posi_PID = 24;
//	}

	error_posi_pris[1] = error_posi_pris[0];
 800268e:	4b07      	ldr	r3, [pc, #28]	@ (80026ac <Prismatic_position_control+0xe4>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4a06      	ldr	r2, [pc, #24]	@ (80026ac <Prismatic_position_control+0xe4>)
 8002694:	6053      	str	r3, [r2, #4]
	return V_pris_posi_PID;
 8002696:	4b07      	ldr	r3, [pc, #28]	@ (80026b4 <Prismatic_position_control+0xec>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	ee07 3a90 	vmov	s15, r3
}
 800269e:	eeb0 0a67 	vmov.f32	s0, s15
 80026a2:	371c      	adds	r7, #28
 80026a4:	46bd      	mov	sp, r7
 80026a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026aa:	4770      	bx	lr
 80026ac:	20000c04 	.word	0x20000c04
 80026b0:	20000bd0 	.word	0x20000bd0
 80026b4:	20000bfc 	.word	0x20000bfc

080026b8 <Prismatic_velocity_control>:

float Prismatic_velocity_control(float delta_velo) {
 80026b8:	b480      	push	{r7}
 80026ba:	b087      	sub	sp, #28
 80026bc:	af00      	add	r7, sp, #0
 80026be:	ed87 0a01 	vstr	s0, [r7, #4]
	int anti_windup;
	error_velo_pris[0] =  delta_velo;
 80026c2:	4a47      	ldr	r2, [pc, #284]	@ (80027e0 <Prismatic_velocity_control+0x128>)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6013      	str	r3, [r2, #0]
//	Pris_velo_PID.Kp = 0.01;

	if (error_velo_pris[0] < 0 && error_velo_pris[1] > 0) {
 80026c8:	4b45      	ldr	r3, [pc, #276]	@ (80027e0 <Prismatic_velocity_control+0x128>)
 80026ca:	edd3 7a00 	vldr	s15, [r3]
 80026ce:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80026d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026d6:	d50a      	bpl.n	80026ee <Prismatic_velocity_control+0x36>
 80026d8:	4b41      	ldr	r3, [pc, #260]	@ (80027e0 <Prismatic_velocity_control+0x128>)
 80026da:	edd3 7a01 	vldr	s15, [r3, #4]
 80026de:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80026e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026e6:	dd02      	ble.n	80026ee <Prismatic_velocity_control+0x36>
		anti_windup = 0;
 80026e8:	2300      	movs	r3, #0
 80026ea:	617b      	str	r3, [r7, #20]
 80026ec:	e014      	b.n	8002718 <Prismatic_velocity_control+0x60>
	} else if (error_velo_pris[0] > 0 && error_velo_pris[1] < 0) {
 80026ee:	4b3c      	ldr	r3, [pc, #240]	@ (80027e0 <Prismatic_velocity_control+0x128>)
 80026f0:	edd3 7a00 	vldr	s15, [r3]
 80026f4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80026f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026fc:	dd0a      	ble.n	8002714 <Prismatic_velocity_control+0x5c>
 80026fe:	4b38      	ldr	r3, [pc, #224]	@ (80027e0 <Prismatic_velocity_control+0x128>)
 8002700:	edd3 7a01 	vldr	s15, [r3, #4]
 8002704:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002708:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800270c:	d502      	bpl.n	8002714 <Prismatic_velocity_control+0x5c>
		anti_windup = 0;
 800270e:	2300      	movs	r3, #0
 8002710:	617b      	str	r3, [r7, #20]
 8002712:	e001      	b.n	8002718 <Prismatic_velocity_control+0x60>
	} else {
		anti_windup = 1;
 8002714:	2301      	movs	r3, #1
 8002716:	617b      	str	r3, [r7, #20]
	}

	if (V_pris_velo_PID >= 24 && anti_windup == 0) {
 8002718:	4b32      	ldr	r3, [pc, #200]	@ (80027e4 <Prismatic_velocity_control+0x12c>)
 800271a:	edd3 7a00 	vldr	s15, [r3]
 800271e:	eeb3 7a08 	vmov.f32	s14, #56	@ 0x41c00000  24.0
 8002722:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002726:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800272a:	db07      	blt.n	800273c <Prismatic_velocity_control+0x84>
 800272c:	697b      	ldr	r3, [r7, #20]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d104      	bne.n	800273c <Prismatic_velocity_control+0x84>
		Pris_velo_PID.Ki = 0;
 8002732:	4b2d      	ldr	r3, [pc, #180]	@ (80027e8 <Prismatic_velocity_control+0x130>)
 8002734:	f04f 0200 	mov.w	r2, #0
 8002738:	61da      	str	r2, [r3, #28]
 800273a:	e002      	b.n	8002742 <Prismatic_velocity_control+0x8a>
	} else {
		Pris_velo_PID.Ki = 0.001;
 800273c:	4b2a      	ldr	r3, [pc, #168]	@ (80027e8 <Prismatic_velocity_control+0x130>)
 800273e:	4a2b      	ldr	r2, [pc, #172]	@ (80027ec <Prismatic_velocity_control+0x134>)
 8002740:	61da      	str	r2, [r3, #28]
 8002742:	4b29      	ldr	r3, [pc, #164]	@ (80027e8 <Prismatic_velocity_control+0x130>)
 8002744:	613b      	str	r3, [r7, #16]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	60fb      	str	r3, [r7, #12]
    out = (S->A0 * in) +
 800274a:	693b      	ldr	r3, [r7, #16]
 800274c:	ed93 7a00 	vldr	s14, [r3]
 8002750:	edd7 7a03 	vldr	s15, [r7, #12]
 8002754:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	edd3 6a01 	vldr	s13, [r3, #4]
 800275e:	693b      	ldr	r3, [r7, #16]
 8002760:	edd3 7a03 	vldr	s15, [r3, #12]
 8002764:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8002768:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 800276c:	693b      	ldr	r3, [r7, #16]
 800276e:	edd3 6a02 	vldr	s13, [r3, #8]
 8002772:	693b      	ldr	r3, [r7, #16]
 8002774:	edd3 7a04 	vldr	s15, [r3, #16]
 8002778:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800277c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002780:	693b      	ldr	r3, [r7, #16]
 8002782:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 8002786:	ee77 7a27 	vadd.f32	s15, s14, s15
 800278a:	edc7 7a02 	vstr	s15, [r7, #8]
    S->state[1] = S->state[0];
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	68da      	ldr	r2, [r3, #12]
 8002792:	693b      	ldr	r3, [r7, #16]
 8002794:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 8002796:	693b      	ldr	r3, [r7, #16]
 8002798:	68fa      	ldr	r2, [r7, #12]
 800279a:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 800279c:	693b      	ldr	r3, [r7, #16]
 800279e:	68ba      	ldr	r2, [r7, #8]
 80027a0:	615a      	str	r2, [r3, #20]
    return (out);
 80027a2:	68bb      	ldr	r3, [r7, #8]
	}

	V_pris_velo_PID = arm_pid_f32(&Pris_velo_PID, delta_velo);
 80027a4:	4a0f      	ldr	r2, [pc, #60]	@ (80027e4 <Prismatic_velocity_control+0x12c>)
 80027a6:	6013      	str	r3, [r2, #0]

	if (V_pris_velo_PID > 24) {
 80027a8:	4b0e      	ldr	r3, [pc, #56]	@ (80027e4 <Prismatic_velocity_control+0x12c>)
 80027aa:	edd3 7a00 	vldr	s15, [r3]
 80027ae:	eeb3 7a08 	vmov.f32	s14, #56	@ 0x41c00000  24.0
 80027b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80027b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027ba:	dd02      	ble.n	80027c2 <Prismatic_velocity_control+0x10a>
		V_pris_velo_PID = 24;
 80027bc:	4b09      	ldr	r3, [pc, #36]	@ (80027e4 <Prismatic_velocity_control+0x12c>)
 80027be:	4a0c      	ldr	r2, [pc, #48]	@ (80027f0 <Prismatic_velocity_control+0x138>)
 80027c0:	601a      	str	r2, [r3, #0]
	}

	error_velo_pris[1] = error_velo_pris[0];
 80027c2:	4b07      	ldr	r3, [pc, #28]	@ (80027e0 <Prismatic_velocity_control+0x128>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a06      	ldr	r2, [pc, #24]	@ (80027e0 <Prismatic_velocity_control+0x128>)
 80027c8:	6053      	str	r3, [r2, #4]
	return V_pris_velo_PID;
 80027ca:	4b06      	ldr	r3, [pc, #24]	@ (80027e4 <Prismatic_velocity_control+0x12c>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	ee07 3a90 	vmov	s15, r3
}
 80027d2:	eeb0 0a67 	vmov.f32	s0, s15
 80027d6:	371c      	adds	r7, #28
 80027d8:	46bd      	mov	sp, r7
 80027da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027de:	4770      	bx	lr
 80027e0:	20000c44 	.word	0x20000c44
 80027e4:	20000c3c 	.word	0x20000c3c
 80027e8:	20000c10 	.word	0x20000c10
 80027ec:	3a83126f 	.word	0x3a83126f
 80027f0:	41c00000 	.word	0x41c00000

080027f4 <voltage_to_pwm>:
	V_rev_velo_PID = arm_pid_f32(&Rev_velo_PID, delta_velo);
	error_velo_rev[1] = error_velo_rev[0];
	return V_rev_velo_PID;
}

float voltage_to_pwm(float voltage) {
 80027f4:	b480      	push	{r7}
 80027f6:	b085      	sub	sp, #20
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	ed87 0a01 	vstr	s0, [r7, #4]
	float pwm = (voltage * 65535) / 24;
 80027fe:	edd7 7a01 	vldr	s15, [r7, #4]
 8002802:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 800282c <voltage_to_pwm+0x38>
 8002806:	ee27 7a87 	vmul.f32	s14, s15, s14
 800280a:	eef3 6a08 	vmov.f32	s13, #56	@ 0x41c00000  24.0
 800280e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002812:	edc7 7a03 	vstr	s15, [r7, #12]
	return pwm;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	ee07 3a90 	vmov	s15, r3
}
 800281c:	eeb0 0a67 	vmov.f32	s0, s15
 8002820:	3714      	adds	r7, #20
 8002822:	46bd      	mov	sp, r7
 8002824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002828:	4770      	bx	lr
 800282a:	bf00      	nop
 800282c:	477fff00 	.word	0x477fff00

08002830 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002830:	b480      	push	{r7}
 8002832:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002834:	b672      	cpsid	i
}
 8002836:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002838:	bf00      	nop
 800283a:	e7fd      	b.n	8002838 <Error_Handler+0x8>

0800283c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b082      	sub	sp, #8
 8002840:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002842:	4b0f      	ldr	r3, [pc, #60]	@ (8002880 <HAL_MspInit+0x44>)
 8002844:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002846:	4a0e      	ldr	r2, [pc, #56]	@ (8002880 <HAL_MspInit+0x44>)
 8002848:	f043 0301 	orr.w	r3, r3, #1
 800284c:	6613      	str	r3, [r2, #96]	@ 0x60
 800284e:	4b0c      	ldr	r3, [pc, #48]	@ (8002880 <HAL_MspInit+0x44>)
 8002850:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002852:	f003 0301 	and.w	r3, r3, #1
 8002856:	607b      	str	r3, [r7, #4]
 8002858:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800285a:	4b09      	ldr	r3, [pc, #36]	@ (8002880 <HAL_MspInit+0x44>)
 800285c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800285e:	4a08      	ldr	r2, [pc, #32]	@ (8002880 <HAL_MspInit+0x44>)
 8002860:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002864:	6593      	str	r3, [r2, #88]	@ 0x58
 8002866:	4b06      	ldr	r3, [pc, #24]	@ (8002880 <HAL_MspInit+0x44>)
 8002868:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800286a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800286e:	603b      	str	r3, [r7, #0]
 8002870:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8002872:	f003 f82f 	bl	80058d4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002876:	bf00      	nop
 8002878:	3708      	adds	r7, #8
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}
 800287e:	bf00      	nop
 8002880:	40021000 	.word	0x40021000

08002884 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002884:	b480      	push	{r7}
 8002886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002888:	bf00      	nop
 800288a:	e7fd      	b.n	8002888 <NMI_Handler+0x4>

0800288c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800288c:	b480      	push	{r7}
 800288e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002890:	bf00      	nop
 8002892:	e7fd      	b.n	8002890 <HardFault_Handler+0x4>

08002894 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002894:	b480      	push	{r7}
 8002896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002898:	bf00      	nop
 800289a:	e7fd      	b.n	8002898 <MemManage_Handler+0x4>

0800289c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800289c:	b480      	push	{r7}
 800289e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80028a0:	bf00      	nop
 80028a2:	e7fd      	b.n	80028a0 <BusFault_Handler+0x4>

080028a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80028a4:	b480      	push	{r7}
 80028a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80028a8:	bf00      	nop
 80028aa:	e7fd      	b.n	80028a8 <UsageFault_Handler+0x4>

080028ac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80028ac:	b480      	push	{r7}
 80028ae:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80028b0:	bf00      	nop
 80028b2:	46bd      	mov	sp, r7
 80028b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b8:	4770      	bx	lr

080028ba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80028ba:	b480      	push	{r7}
 80028bc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80028be:	bf00      	nop
 80028c0:	46bd      	mov	sp, r7
 80028c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c6:	4770      	bx	lr

080028c8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80028c8:	b480      	push	{r7}
 80028ca:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80028cc:	bf00      	nop
 80028ce:	46bd      	mov	sp, r7
 80028d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d4:	4770      	bx	lr

080028d6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80028d6:	b580      	push	{r7, lr}
 80028d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80028da:	f000 fe7b 	bl	80035d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80028de:	bf00      	nop
 80028e0:	bd80      	pop	{r7, pc}
	...

080028e4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80028e8:	4802      	ldr	r0, [pc, #8]	@ (80028f4 <DMA1_Channel1_IRQHandler+0x10>)
 80028ea:	f002 fc42 	bl	8005172 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80028ee:	bf00      	nop
 80028f0:	bd80      	pop	{r7, pc}
 80028f2:	bf00      	nop
 80028f4:	200016a0 	.word	0x200016a0

080028f8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Limit_Switch_pen_1_Pin);
 80028fc:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8002900:	f002 ff2c 	bl	800575c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002904:	bf00      	nop
 8002906:	bd80      	pop	{r7, pc}

08002908 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800290c:	4802      	ldr	r0, [pc, #8]	@ (8002918 <TIM1_BRK_TIM15_IRQHandler+0x10>)
 800290e:	f004 fcdf 	bl	80072d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8002912:	bf00      	nop
 8002914:	bd80      	pop	{r7, pc}
 8002916:	bf00      	nop
 8002918:	20001040 	.word	0x20001040

0800291c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002920:	4803      	ldr	r0, [pc, #12]	@ (8002930 <TIM1_UP_TIM16_IRQHandler+0x14>)
 8002922:	f004 fcd5 	bl	80072d0 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 8002926:	4803      	ldr	r0, [pc, #12]	@ (8002934 <TIM1_UP_TIM16_IRQHandler+0x18>)
 8002928:	f004 fcd2 	bl	80072d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800292c:	bf00      	nop
 800292e:	bd80      	pop	{r7, pc}
 8002930:	20001040 	.word	0x20001040
 8002934:	2000143c 	.word	0x2000143c

08002938 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800293c:	4802      	ldr	r0, [pc, #8]	@ (8002948 <TIM2_IRQHandler+0x10>)
 800293e:	f004 fcc7 	bl	80072d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002942:	bf00      	nop
 8002944:	bd80      	pop	{r7, pc}
 8002946:	bf00      	nop
 8002948:	2000110c 	.word	0x2000110c

0800294c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002950:	4802      	ldr	r0, [pc, #8]	@ (800295c <USART2_IRQHandler+0x10>)
 8002952:	f006 fbc1 	bl	80090d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002956:	bf00      	nop
 8002958:	bd80      	pop	{r7, pc}
 800295a:	bf00      	nop
 800295c:	200015d4 	.word	0x200015d4

08002960 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Limit_Switch_pen_2_Pin);
 8002964:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8002968:	f002 fef8 	bl	800575c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Emergency_Pin);
 800296c:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8002970:	f002 fef4 	bl	800575c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Proximity_sensor_Pin);
 8002974:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8002978:	f002 fef0 	bl	800575c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Proximity_Sensor_Pin);
 800297c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002980:	f002 feec 	bl	800575c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Limit_Switch_Prismatic1_Pin);
 8002984:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8002988:	f002 fee8 	bl	800575c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Limit_Switch_Prismatic2_Pin);
 800298c:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8002990:	f002 fee4 	bl	800575c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002994:	bf00      	nop
 8002996:	bd80      	pop	{r7, pc}

08002998 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002998:	b480      	push	{r7}
 800299a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800299c:	4b06      	ldr	r3, [pc, #24]	@ (80029b8 <SystemInit+0x20>)
 800299e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029a2:	4a05      	ldr	r2, [pc, #20]	@ (80029b8 <SystemInit+0x20>)
 80029a4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80029a8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80029ac:	bf00      	nop
 80029ae:	46bd      	mov	sp, r7
 80029b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b4:	4770      	bx	lr
 80029b6:	bf00      	nop
 80029b8:	e000ed00 	.word	0xe000ed00

080029bc <MX_TIM1_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim20;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b088      	sub	sp, #32
 80029c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80029c2:	f107 0310 	add.w	r3, r7, #16
 80029c6:	2200      	movs	r2, #0
 80029c8:	601a      	str	r2, [r3, #0]
 80029ca:	605a      	str	r2, [r3, #4]
 80029cc:	609a      	str	r2, [r3, #8]
 80029ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80029d0:	1d3b      	adds	r3, r7, #4
 80029d2:	2200      	movs	r2, #0
 80029d4:	601a      	str	r2, [r3, #0]
 80029d6:	605a      	str	r2, [r3, #4]
 80029d8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80029da:	4b20      	ldr	r3, [pc, #128]	@ (8002a5c <MX_TIM1_Init+0xa0>)
 80029dc:	4a20      	ldr	r2, [pc, #128]	@ (8002a60 <MX_TIM1_Init+0xa4>)
 80029de:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80029e0:	4b1e      	ldr	r3, [pc, #120]	@ (8002a5c <MX_TIM1_Init+0xa0>)
 80029e2:	2200      	movs	r2, #0
 80029e4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029e6:	4b1d      	ldr	r3, [pc, #116]	@ (8002a5c <MX_TIM1_Init+0xa0>)
 80029e8:	2200      	movs	r2, #0
 80029ea:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 60000;
 80029ec:	4b1b      	ldr	r3, [pc, #108]	@ (8002a5c <MX_TIM1_Init+0xa0>)
 80029ee:	f64e 2260 	movw	r2, #60000	@ 0xea60
 80029f2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80029f4:	4b19      	ldr	r3, [pc, #100]	@ (8002a5c <MX_TIM1_Init+0xa0>)
 80029f6:	2200      	movs	r2, #0
 80029f8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80029fa:	4b18      	ldr	r3, [pc, #96]	@ (8002a5c <MX_TIM1_Init+0xa0>)
 80029fc:	2200      	movs	r2, #0
 80029fe:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a00:	4b16      	ldr	r3, [pc, #88]	@ (8002a5c <MX_TIM1_Init+0xa0>)
 8002a02:	2200      	movs	r2, #0
 8002a04:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002a06:	4815      	ldr	r0, [pc, #84]	@ (8002a5c <MX_TIM1_Init+0xa0>)
 8002a08:	f003 fef0 	bl	80067ec <HAL_TIM_Base_Init>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d001      	beq.n	8002a16 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8002a12:	f7ff ff0d 	bl	8002830 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a16:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002a1a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002a1c:	f107 0310 	add.w	r3, r7, #16
 8002a20:	4619      	mov	r1, r3
 8002a22:	480e      	ldr	r0, [pc, #56]	@ (8002a5c <MX_TIM1_Init+0xa0>)
 8002a24:	f004 ff5c 	bl	80078e0 <HAL_TIM_ConfigClockSource>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d001      	beq.n	8002a32 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8002a2e:	f7ff feff 	bl	8002830 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a32:	2300      	movs	r3, #0
 8002a34:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002a36:	2300      	movs	r3, #0
 8002a38:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002a3e:	1d3b      	adds	r3, r7, #4
 8002a40:	4619      	mov	r1, r3
 8002a42:	4806      	ldr	r0, [pc, #24]	@ (8002a5c <MX_TIM1_Init+0xa0>)
 8002a44:	f005 ff32 	bl	80088ac <HAL_TIMEx_MasterConfigSynchronization>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d001      	beq.n	8002a52 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8002a4e:	f7ff feef 	bl	8002830 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002a52:	bf00      	nop
 8002a54:	3720      	adds	r7, #32
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}
 8002a5a:	bf00      	nop
 8002a5c:	20001040 	.word	0x20001040
 8002a60:	40012c00 	.word	0x40012c00

08002a64 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b088      	sub	sp, #32
 8002a68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002a6a:	f107 0310 	add.w	r3, r7, #16
 8002a6e:	2200      	movs	r2, #0
 8002a70:	601a      	str	r2, [r3, #0]
 8002a72:	605a      	str	r2, [r3, #4]
 8002a74:	609a      	str	r2, [r3, #8]
 8002a76:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a78:	1d3b      	adds	r3, r7, #4
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	601a      	str	r2, [r3, #0]
 8002a7e:	605a      	str	r2, [r3, #4]
 8002a80:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002a82:	4b1e      	ldr	r3, [pc, #120]	@ (8002afc <MX_TIM2_Init+0x98>)
 8002a84:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002a88:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 169;
 8002a8a:	4b1c      	ldr	r3, [pc, #112]	@ (8002afc <MX_TIM2_Init+0x98>)
 8002a8c:	22a9      	movs	r2, #169	@ 0xa9
 8002a8e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a90:	4b1a      	ldr	r3, [pc, #104]	@ (8002afc <MX_TIM2_Init+0x98>)
 8002a92:	2200      	movs	r2, #0
 8002a94:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8002a96:	4b19      	ldr	r3, [pc, #100]	@ (8002afc <MX_TIM2_Init+0x98>)
 8002a98:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002a9c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a9e:	4b17      	ldr	r3, [pc, #92]	@ (8002afc <MX_TIM2_Init+0x98>)
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002aa4:	4b15      	ldr	r3, [pc, #84]	@ (8002afc <MX_TIM2_Init+0x98>)
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002aaa:	4814      	ldr	r0, [pc, #80]	@ (8002afc <MX_TIM2_Init+0x98>)
 8002aac:	f003 fe9e 	bl	80067ec <HAL_TIM_Base_Init>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d001      	beq.n	8002aba <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8002ab6:	f7ff febb 	bl	8002830 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002aba:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002abe:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002ac0:	f107 0310 	add.w	r3, r7, #16
 8002ac4:	4619      	mov	r1, r3
 8002ac6:	480d      	ldr	r0, [pc, #52]	@ (8002afc <MX_TIM2_Init+0x98>)
 8002ac8:	f004 ff0a 	bl	80078e0 <HAL_TIM_ConfigClockSource>
 8002acc:	4603      	mov	r3, r0
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d001      	beq.n	8002ad6 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8002ad2:	f7ff fead 	bl	8002830 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ada:	2300      	movs	r3, #0
 8002adc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002ade:	1d3b      	adds	r3, r7, #4
 8002ae0:	4619      	mov	r1, r3
 8002ae2:	4806      	ldr	r0, [pc, #24]	@ (8002afc <MX_TIM2_Init+0x98>)
 8002ae4:	f005 fee2 	bl	80088ac <HAL_TIMEx_MasterConfigSynchronization>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d001      	beq.n	8002af2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8002aee:	f7ff fe9f 	bl	8002830 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002af2:	bf00      	nop
 8002af4:	3720      	adds	r7, #32
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}
 8002afa:	bf00      	nop
 8002afc:	2000110c 	.word	0x2000110c

08002b00 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b08c      	sub	sp, #48	@ 0x30
 8002b04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002b06:	f107 030c 	add.w	r3, r7, #12
 8002b0a:	2224      	movs	r2, #36	@ 0x24
 8002b0c:	2100      	movs	r1, #0
 8002b0e:	4618      	mov	r0, r3
 8002b10:	f009 f992 	bl	800be38 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b14:	463b      	mov	r3, r7
 8002b16:	2200      	movs	r2, #0
 8002b18:	601a      	str	r2, [r3, #0]
 8002b1a:	605a      	str	r2, [r3, #4]
 8002b1c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002b1e:	4b21      	ldr	r3, [pc, #132]	@ (8002ba4 <MX_TIM3_Init+0xa4>)
 8002b20:	4a21      	ldr	r2, [pc, #132]	@ (8002ba8 <MX_TIM3_Init+0xa8>)
 8002b22:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002b24:	4b1f      	ldr	r3, [pc, #124]	@ (8002ba4 <MX_TIM3_Init+0xa4>)
 8002b26:	2200      	movs	r2, #0
 8002b28:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b2a:	4b1e      	ldr	r3, [pc, #120]	@ (8002ba4 <MX_TIM3_Init+0xa4>)
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 59999;
 8002b30:	4b1c      	ldr	r3, [pc, #112]	@ (8002ba4 <MX_TIM3_Init+0xa4>)
 8002b32:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 8002b36:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b38:	4b1a      	ldr	r3, [pc, #104]	@ (8002ba4 <MX_TIM3_Init+0xa4>)
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b3e:	4b19      	ldr	r3, [pc, #100]	@ (8002ba4 <MX_TIM3_Init+0xa4>)
 8002b40:	2200      	movs	r2, #0
 8002b42:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002b44:	2303      	movs	r3, #3
 8002b46:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002b50:	2300      	movs	r3, #0
 8002b52:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002b54:	2300      	movs	r3, #0
 8002b56:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002b60:	2300      	movs	r3, #0
 8002b62:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002b64:	2300      	movs	r3, #0
 8002b66:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8002b68:	f107 030c 	add.w	r3, r7, #12
 8002b6c:	4619      	mov	r1, r3
 8002b6e:	480d      	ldr	r0, [pc, #52]	@ (8002ba4 <MX_TIM3_Init+0xa4>)
 8002b70:	f004 fa6c 	bl	800704c <HAL_TIM_Encoder_Init>
 8002b74:	4603      	mov	r3, r0
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d001      	beq.n	8002b7e <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8002b7a:	f7ff fe59 	bl	8002830 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b82:	2300      	movs	r3, #0
 8002b84:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002b86:	463b      	mov	r3, r7
 8002b88:	4619      	mov	r1, r3
 8002b8a:	4806      	ldr	r0, [pc, #24]	@ (8002ba4 <MX_TIM3_Init+0xa4>)
 8002b8c:	f005 fe8e 	bl	80088ac <HAL_TIMEx_MasterConfigSynchronization>
 8002b90:	4603      	mov	r3, r0
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d001      	beq.n	8002b9a <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8002b96:	f7ff fe4b 	bl	8002830 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002b9a:	bf00      	nop
 8002b9c:	3730      	adds	r7, #48	@ 0x30
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd80      	pop	{r7, pc}
 8002ba2:	bf00      	nop
 8002ba4:	200011d8 	.word	0x200011d8
 8002ba8:	40000400 	.word	0x40000400

08002bac <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b08c      	sub	sp, #48	@ 0x30
 8002bb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002bb2:	f107 030c 	add.w	r3, r7, #12
 8002bb6:	2224      	movs	r2, #36	@ 0x24
 8002bb8:	2100      	movs	r1, #0
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f009 f93c 	bl	800be38 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002bc0:	463b      	mov	r3, r7
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	601a      	str	r2, [r3, #0]
 8002bc6:	605a      	str	r2, [r3, #4]
 8002bc8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002bca:	4b21      	ldr	r3, [pc, #132]	@ (8002c50 <MX_TIM4_Init+0xa4>)
 8002bcc:	4a21      	ldr	r2, [pc, #132]	@ (8002c54 <MX_TIM4_Init+0xa8>)
 8002bce:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002bd0:	4b1f      	ldr	r3, [pc, #124]	@ (8002c50 <MX_TIM4_Init+0xa4>)
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bd6:	4b1e      	ldr	r3, [pc, #120]	@ (8002c50 <MX_TIM4_Init+0xa4>)
 8002bd8:	2200      	movs	r2, #0
 8002bda:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 59999;
 8002bdc:	4b1c      	ldr	r3, [pc, #112]	@ (8002c50 <MX_TIM4_Init+0xa4>)
 8002bde:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 8002be2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002be4:	4b1a      	ldr	r3, [pc, #104]	@ (8002c50 <MX_TIM4_Init+0xa4>)
 8002be6:	2200      	movs	r2, #0
 8002be8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002bea:	4b19      	ldr	r3, [pc, #100]	@ (8002c50 <MX_TIM4_Init+0xa4>)
 8002bec:	2200      	movs	r2, #0
 8002bee:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002bf0:	2303      	movs	r3, #3
 8002bf2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002c00:	2300      	movs	r3, #0
 8002c02:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002c04:	2300      	movs	r3, #0
 8002c06:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002c08:	2301      	movs	r3, #1
 8002c0a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002c10:	2300      	movs	r3, #0
 8002c12:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8002c14:	f107 030c 	add.w	r3, r7, #12
 8002c18:	4619      	mov	r1, r3
 8002c1a:	480d      	ldr	r0, [pc, #52]	@ (8002c50 <MX_TIM4_Init+0xa4>)
 8002c1c:	f004 fa16 	bl	800704c <HAL_TIM_Encoder_Init>
 8002c20:	4603      	mov	r3, r0
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d001      	beq.n	8002c2a <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8002c26:	f7ff fe03 	bl	8002830 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002c32:	463b      	mov	r3, r7
 8002c34:	4619      	mov	r1, r3
 8002c36:	4806      	ldr	r0, [pc, #24]	@ (8002c50 <MX_TIM4_Init+0xa4>)
 8002c38:	f005 fe38 	bl	80088ac <HAL_TIMEx_MasterConfigSynchronization>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d001      	beq.n	8002c46 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8002c42:	f7ff fdf5 	bl	8002830 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002c46:	bf00      	nop
 8002c48:	3730      	adds	r7, #48	@ 0x30
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}
 8002c4e:	bf00      	nop
 8002c50:	200012a4 	.word	0x200012a4
 8002c54:	40000800 	.word	0x40000800

08002c58 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b09c      	sub	sp, #112	@ 0x70
 8002c5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002c5e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8002c62:	2200      	movs	r2, #0
 8002c64:	601a      	str	r2, [r3, #0]
 8002c66:	605a      	str	r2, [r3, #4]
 8002c68:	609a      	str	r2, [r3, #8]
 8002c6a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c6c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002c70:	2200      	movs	r2, #0
 8002c72:	601a      	str	r2, [r3, #0]
 8002c74:	605a      	str	r2, [r3, #4]
 8002c76:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002c78:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	601a      	str	r2, [r3, #0]
 8002c80:	605a      	str	r2, [r3, #4]
 8002c82:	609a      	str	r2, [r3, #8]
 8002c84:	60da      	str	r2, [r3, #12]
 8002c86:	611a      	str	r2, [r3, #16]
 8002c88:	615a      	str	r2, [r3, #20]
 8002c8a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002c8c:	1d3b      	adds	r3, r7, #4
 8002c8e:	2234      	movs	r2, #52	@ 0x34
 8002c90:	2100      	movs	r1, #0
 8002c92:	4618      	mov	r0, r3
 8002c94:	f009 f8d0 	bl	800be38 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002c98:	4b45      	ldr	r3, [pc, #276]	@ (8002db0 <MX_TIM8_Init+0x158>)
 8002c9a:	4a46      	ldr	r2, [pc, #280]	@ (8002db4 <MX_TIM8_Init+0x15c>)
 8002c9c:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8002c9e:	4b44      	ldr	r3, [pc, #272]	@ (8002db0 <MX_TIM8_Init+0x158>)
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ca4:	4b42      	ldr	r3, [pc, #264]	@ (8002db0 <MX_TIM8_Init+0x158>)
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8002caa:	4b41      	ldr	r3, [pc, #260]	@ (8002db0 <MX_TIM8_Init+0x158>)
 8002cac:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002cb0:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002cb2:	4b3f      	ldr	r3, [pc, #252]	@ (8002db0 <MX_TIM8_Init+0x158>)
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002cb8:	4b3d      	ldr	r3, [pc, #244]	@ (8002db0 <MX_TIM8_Init+0x158>)
 8002cba:	2200      	movs	r2, #0
 8002cbc:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002cbe:	4b3c      	ldr	r3, [pc, #240]	@ (8002db0 <MX_TIM8_Init+0x158>)
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8002cc4:	483a      	ldr	r0, [pc, #232]	@ (8002db0 <MX_TIM8_Init+0x158>)
 8002cc6:	f003 fd91 	bl	80067ec <HAL_TIM_Base_Init>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d001      	beq.n	8002cd4 <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 8002cd0:	f7ff fdae 	bl	8002830 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002cd4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002cd8:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8002cda:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8002cde:	4619      	mov	r1, r3
 8002ce0:	4833      	ldr	r0, [pc, #204]	@ (8002db0 <MX_TIM8_Init+0x158>)
 8002ce2:	f004 fdfd 	bl	80078e0 <HAL_TIM_ConfigClockSource>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d001      	beq.n	8002cf0 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 8002cec:	f7ff fda0 	bl	8002830 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8002cf0:	482f      	ldr	r0, [pc, #188]	@ (8002db0 <MX_TIM8_Init+0x158>)
 8002cf2:	f003 ff35 	bl	8006b60 <HAL_TIM_PWM_Init>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d001      	beq.n	8002d00 <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 8002cfc:	f7ff fd98 	bl	8002830 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d00:	2300      	movs	r3, #0
 8002d02:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002d04:	2300      	movs	r3, #0
 8002d06:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d08:	2300      	movs	r3, #0
 8002d0a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002d0c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002d10:	4619      	mov	r1, r3
 8002d12:	4827      	ldr	r0, [pc, #156]	@ (8002db0 <MX_TIM8_Init+0x158>)
 8002d14:	f005 fdca 	bl	80088ac <HAL_TIMEx_MasterConfigSynchronization>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d001      	beq.n	8002d22 <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 8002d1e:	f7ff fd87 	bl	8002830 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002d22:	2360      	movs	r3, #96	@ 0x60
 8002d24:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8002d26:	2300      	movs	r3, #0
 8002d28:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002d32:	2300      	movs	r3, #0
 8002d34:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002d36:	2300      	movs	r3, #0
 8002d38:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002d3e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002d42:	220c      	movs	r2, #12
 8002d44:	4619      	mov	r1, r3
 8002d46:	481a      	ldr	r0, [pc, #104]	@ (8002db0 <MX_TIM8_Init+0x158>)
 8002d48:	f004 fcb6 	bl	80076b8 <HAL_TIM_PWM_ConfigChannel>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d001      	beq.n	8002d56 <MX_TIM8_Init+0xfe>
  {
    Error_Handler();
 8002d52:	f7ff fd6d 	bl	8002830 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002d56:	2300      	movs	r3, #0
 8002d58:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002d62:	2300      	movs	r3, #0
 8002d64:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002d66:	2300      	movs	r3, #0
 8002d68:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002d6a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002d6e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002d70:	2300      	movs	r3, #0
 8002d72:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8002d74:	2300      	movs	r3, #0
 8002d76:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002d7c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002d80:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002d82:	2300      	movs	r3, #0
 8002d84:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8002d86:	2300      	movs	r3, #0
 8002d88:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8002d8e:	1d3b      	adds	r3, r7, #4
 8002d90:	4619      	mov	r1, r3
 8002d92:	4807      	ldr	r0, [pc, #28]	@ (8002db0 <MX_TIM8_Init+0x158>)
 8002d94:	f005 fe20 	bl	80089d8 <HAL_TIMEx_ConfigBreakDeadTime>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d001      	beq.n	8002da2 <MX_TIM8_Init+0x14a>
  {
    Error_Handler();
 8002d9e:	f7ff fd47 	bl	8002830 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8002da2:	4803      	ldr	r0, [pc, #12]	@ (8002db0 <MX_TIM8_Init+0x158>)
 8002da4:	f000 fa44 	bl	8003230 <HAL_TIM_MspPostInit>

}
 8002da8:	bf00      	nop
 8002daa:	3770      	adds	r7, #112	@ 0x70
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bd80      	pop	{r7, pc}
 8002db0:	20001370 	.word	0x20001370
 8002db4:	40013400 	.word	0x40013400

08002db8 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b094      	sub	sp, #80	@ 0x50
 8002dbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002dbe:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	601a      	str	r2, [r3, #0]
 8002dc6:	605a      	str	r2, [r3, #4]
 8002dc8:	609a      	str	r2, [r3, #8]
 8002dca:	60da      	str	r2, [r3, #12]
 8002dcc:	611a      	str	r2, [r3, #16]
 8002dce:	615a      	str	r2, [r3, #20]
 8002dd0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002dd2:	463b      	mov	r3, r7
 8002dd4:	2234      	movs	r2, #52	@ 0x34
 8002dd6:	2100      	movs	r1, #0
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f009 f82d 	bl	800be38 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8002dde:	4b34      	ldr	r3, [pc, #208]	@ (8002eb0 <MX_TIM16_Init+0xf8>)
 8002de0:	4a34      	ldr	r2, [pc, #208]	@ (8002eb4 <MX_TIM16_Init+0xfc>)
 8002de2:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 169;
 8002de4:	4b32      	ldr	r3, [pc, #200]	@ (8002eb0 <MX_TIM16_Init+0xf8>)
 8002de6:	22a9      	movs	r2, #169	@ 0xa9
 8002de8:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002dea:	4b31      	ldr	r3, [pc, #196]	@ (8002eb0 <MX_TIM16_Init+0xf8>)
 8002dec:	2200      	movs	r2, #0
 8002dee:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 2005;
 8002df0:	4b2f      	ldr	r3, [pc, #188]	@ (8002eb0 <MX_TIM16_Init+0xf8>)
 8002df2:	f240 72d5 	movw	r2, #2005	@ 0x7d5
 8002df6:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002df8:	4b2d      	ldr	r3, [pc, #180]	@ (8002eb0 <MX_TIM16_Init+0xf8>)
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8002dfe:	4b2c      	ldr	r3, [pc, #176]	@ (8002eb0 <MX_TIM16_Init+0xf8>)
 8002e00:	2200      	movs	r2, #0
 8002e02:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e04:	4b2a      	ldr	r3, [pc, #168]	@ (8002eb0 <MX_TIM16_Init+0xf8>)
 8002e06:	2200      	movs	r2, #0
 8002e08:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8002e0a:	4829      	ldr	r0, [pc, #164]	@ (8002eb0 <MX_TIM16_Init+0xf8>)
 8002e0c:	f003 fcee 	bl	80067ec <HAL_TIM_Base_Init>
 8002e10:	4603      	mov	r3, r0
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d001      	beq.n	8002e1a <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 8002e16:	f7ff fd0b 	bl	8002830 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim16) != HAL_OK)
 8002e1a:	4825      	ldr	r0, [pc, #148]	@ (8002eb0 <MX_TIM16_Init+0xf8>)
 8002e1c:	f003 fe32 	bl	8006a84 <HAL_TIM_OC_Init>
 8002e20:	4603      	mov	r3, r0
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d001      	beq.n	8002e2a <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 8002e26:	f7ff fd03 	bl	8002830 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim16, TIM_OPMODE_SINGLE) != HAL_OK)
 8002e2a:	2108      	movs	r1, #8
 8002e2c:	4820      	ldr	r0, [pc, #128]	@ (8002eb0 <MX_TIM16_Init+0xf8>)
 8002e2e:	f004 f817 	bl	8006e60 <HAL_TIM_OnePulse_Init>
 8002e32:	4603      	mov	r3, r0
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d001      	beq.n	8002e3c <MX_TIM16_Init+0x84>
  {
    Error_Handler();
 8002e38:	f7ff fcfa 	bl	8002830 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_ACTIVE;
 8002e3c:	2310      	movs	r3, #16
 8002e3e:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.Pulse = 1433;
 8002e40:	f240 5399 	movw	r3, #1433	@ 0x599
 8002e44:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002e46:	2300      	movs	r3, #0
 8002e48:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002e52:	2300      	movs	r3, #0
 8002e54:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002e56:	2300      	movs	r3, #0
 8002e58:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_TIM_OC_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002e5a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002e5e:	2200      	movs	r2, #0
 8002e60:	4619      	mov	r1, r3
 8002e62:	4813      	ldr	r0, [pc, #76]	@ (8002eb0 <MX_TIM16_Init+0xf8>)
 8002e64:	f004 fbae 	bl	80075c4 <HAL_TIM_OC_ConfigChannel>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d001      	beq.n	8002e72 <MX_TIM16_Init+0xba>
  {
    Error_Handler();
 8002e6e:	f7ff fcdf 	bl	8002830 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002e72:	2300      	movs	r3, #0
 8002e74:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002e76:	2300      	movs	r3, #0
 8002e78:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002e82:	2300      	movs	r3, #0
 8002e84:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002e86:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002e8a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002e90:	2300      	movs	r3, #0
 8002e92:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8002e94:	463b      	mov	r3, r7
 8002e96:	4619      	mov	r1, r3
 8002e98:	4805      	ldr	r0, [pc, #20]	@ (8002eb0 <MX_TIM16_Init+0xf8>)
 8002e9a:	f005 fd9d 	bl	80089d8 <HAL_TIMEx_ConfigBreakDeadTime>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d001      	beq.n	8002ea8 <MX_TIM16_Init+0xf0>
  {
    Error_Handler();
 8002ea4:	f7ff fcc4 	bl	8002830 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8002ea8:	bf00      	nop
 8002eaa:	3750      	adds	r7, #80	@ 0x50
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bd80      	pop	{r7, pc}
 8002eb0:	2000143c 	.word	0x2000143c
 8002eb4:	40014400 	.word	0x40014400

08002eb8 <MX_TIM20_Init>:
/* TIM20 init function */
void MX_TIM20_Init(void)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b09c      	sub	sp, #112	@ 0x70
 8002ebc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM20_Init 0 */

  /* USER CODE END TIM20_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002ebe:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	601a      	str	r2, [r3, #0]
 8002ec6:	605a      	str	r2, [r3, #4]
 8002ec8:	609a      	str	r2, [r3, #8]
 8002eca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ecc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	601a      	str	r2, [r3, #0]
 8002ed4:	605a      	str	r2, [r3, #4]
 8002ed6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002ed8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002edc:	2200      	movs	r2, #0
 8002ede:	601a      	str	r2, [r3, #0]
 8002ee0:	605a      	str	r2, [r3, #4]
 8002ee2:	609a      	str	r2, [r3, #8]
 8002ee4:	60da      	str	r2, [r3, #12]
 8002ee6:	611a      	str	r2, [r3, #16]
 8002ee8:	615a      	str	r2, [r3, #20]
 8002eea:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002eec:	1d3b      	adds	r3, r7, #4
 8002eee:	2234      	movs	r2, #52	@ 0x34
 8002ef0:	2100      	movs	r1, #0
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	f008 ffa0 	bl	800be38 <memset>

  /* USER CODE BEGIN TIM20_Init 1 */

  /* USER CODE END TIM20_Init 1 */
  htim20.Instance = TIM20;
 8002ef8:	4b4b      	ldr	r3, [pc, #300]	@ (8003028 <MX_TIM20_Init+0x170>)
 8002efa:	4a4c      	ldr	r2, [pc, #304]	@ (800302c <MX_TIM20_Init+0x174>)
 8002efc:	601a      	str	r2, [r3, #0]
  htim20.Init.Prescaler = 0;
 8002efe:	4b4a      	ldr	r3, [pc, #296]	@ (8003028 <MX_TIM20_Init+0x170>)
 8002f00:	2200      	movs	r2, #0
 8002f02:	605a      	str	r2, [r3, #4]
  htim20.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f04:	4b48      	ldr	r3, [pc, #288]	@ (8003028 <MX_TIM20_Init+0x170>)
 8002f06:	2200      	movs	r2, #0
 8002f08:	609a      	str	r2, [r3, #8]
  htim20.Init.Period = 65535;
 8002f0a:	4b47      	ldr	r3, [pc, #284]	@ (8003028 <MX_TIM20_Init+0x170>)
 8002f0c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002f10:	60da      	str	r2, [r3, #12]
  htim20.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f12:	4b45      	ldr	r3, [pc, #276]	@ (8003028 <MX_TIM20_Init+0x170>)
 8002f14:	2200      	movs	r2, #0
 8002f16:	611a      	str	r2, [r3, #16]
  htim20.Init.RepetitionCounter = 0;
 8002f18:	4b43      	ldr	r3, [pc, #268]	@ (8003028 <MX_TIM20_Init+0x170>)
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	615a      	str	r2, [r3, #20]
  htim20.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f1e:	4b42      	ldr	r3, [pc, #264]	@ (8003028 <MX_TIM20_Init+0x170>)
 8002f20:	2200      	movs	r2, #0
 8002f22:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim20) != HAL_OK)
 8002f24:	4840      	ldr	r0, [pc, #256]	@ (8003028 <MX_TIM20_Init+0x170>)
 8002f26:	f003 fc61 	bl	80067ec <HAL_TIM_Base_Init>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d001      	beq.n	8002f34 <MX_TIM20_Init+0x7c>
  {
    Error_Handler();
 8002f30:	f7ff fc7e 	bl	8002830 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002f34:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002f38:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim20, &sClockSourceConfig) != HAL_OK)
 8002f3a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8002f3e:	4619      	mov	r1, r3
 8002f40:	4839      	ldr	r0, [pc, #228]	@ (8003028 <MX_TIM20_Init+0x170>)
 8002f42:	f004 fccd 	bl	80078e0 <HAL_TIM_ConfigClockSource>
 8002f46:	4603      	mov	r3, r0
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d001      	beq.n	8002f50 <MX_TIM20_Init+0x98>
  {
    Error_Handler();
 8002f4c:	f7ff fc70 	bl	8002830 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim20) != HAL_OK)
 8002f50:	4835      	ldr	r0, [pc, #212]	@ (8003028 <MX_TIM20_Init+0x170>)
 8002f52:	f003 fe05 	bl	8006b60 <HAL_TIM_PWM_Init>
 8002f56:	4603      	mov	r3, r0
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d001      	beq.n	8002f60 <MX_TIM20_Init+0xa8>
  {
    Error_Handler();
 8002f5c:	f7ff fc68 	bl	8002830 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f60:	2300      	movs	r3, #0
 8002f62:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002f64:	2300      	movs	r3, #0
 8002f66:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f68:	2300      	movs	r3, #0
 8002f6a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim20, &sMasterConfig) != HAL_OK)
 8002f6c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002f70:	4619      	mov	r1, r3
 8002f72:	482d      	ldr	r0, [pc, #180]	@ (8003028 <MX_TIM20_Init+0x170>)
 8002f74:	f005 fc9a 	bl	80088ac <HAL_TIMEx_MasterConfigSynchronization>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d001      	beq.n	8002f82 <MX_TIM20_Init+0xca>
  {
    Error_Handler();
 8002f7e:	f7ff fc57 	bl	8002830 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002f82:	2360      	movs	r3, #96	@ 0x60
 8002f84:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8002f86:	2300      	movs	r3, #0
 8002f88:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002f92:	2300      	movs	r3, #0
 8002f94:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002f96:	2300      	movs	r3, #0
 8002f98:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim20, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002f9e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	4619      	mov	r1, r3
 8002fa6:	4820      	ldr	r0, [pc, #128]	@ (8003028 <MX_TIM20_Init+0x170>)
 8002fa8:	f004 fb86 	bl	80076b8 <HAL_TIM_PWM_ConfigChannel>
 8002fac:	4603      	mov	r3, r0
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d001      	beq.n	8002fb6 <MX_TIM20_Init+0xfe>
  {
    Error_Handler();
 8002fb2:	f7ff fc3d 	bl	8002830 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim20, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002fb6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002fba:	2208      	movs	r2, #8
 8002fbc:	4619      	mov	r1, r3
 8002fbe:	481a      	ldr	r0, [pc, #104]	@ (8003028 <MX_TIM20_Init+0x170>)
 8002fc0:	f004 fb7a 	bl	80076b8 <HAL_TIM_PWM_ConfigChannel>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d001      	beq.n	8002fce <MX_TIM20_Init+0x116>
  {
    Error_Handler();
 8002fca:	f7ff fc31 	bl	8002830 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002fe2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002fe6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002fe8:	2300      	movs	r3, #0
 8002fea:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8002fec:	2300      	movs	r3, #0
 8002fee:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002ff4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002ff8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8002ffe:	2300      	movs	r3, #0
 8003000:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003002:	2300      	movs	r3, #0
 8003004:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim20, &sBreakDeadTimeConfig) != HAL_OK)
 8003006:	1d3b      	adds	r3, r7, #4
 8003008:	4619      	mov	r1, r3
 800300a:	4807      	ldr	r0, [pc, #28]	@ (8003028 <MX_TIM20_Init+0x170>)
 800300c:	f005 fce4 	bl	80089d8 <HAL_TIMEx_ConfigBreakDeadTime>
 8003010:	4603      	mov	r3, r0
 8003012:	2b00      	cmp	r3, #0
 8003014:	d001      	beq.n	800301a <MX_TIM20_Init+0x162>
  {
    Error_Handler();
 8003016:	f7ff fc0b 	bl	8002830 <Error_Handler>
  }
  /* USER CODE BEGIN TIM20_Init 2 */

  /* USER CODE END TIM20_Init 2 */
  HAL_TIM_MspPostInit(&htim20);
 800301a:	4803      	ldr	r0, [pc, #12]	@ (8003028 <MX_TIM20_Init+0x170>)
 800301c:	f000 f908 	bl	8003230 <HAL_TIM_MspPostInit>

}
 8003020:	bf00      	nop
 8003022:	3770      	adds	r7, #112	@ 0x70
 8003024:	46bd      	mov	sp, r7
 8003026:	bd80      	pop	{r7, pc}
 8003028:	20001508 	.word	0x20001508
 800302c:	40015000 	.word	0x40015000

08003030 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b088      	sub	sp, #32
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a3d      	ldr	r2, [pc, #244]	@ (8003134 <HAL_TIM_Base_MspInit+0x104>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d11c      	bne.n	800307c <HAL_TIM_Base_MspInit+0x4c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003042:	4b3d      	ldr	r3, [pc, #244]	@ (8003138 <HAL_TIM_Base_MspInit+0x108>)
 8003044:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003046:	4a3c      	ldr	r2, [pc, #240]	@ (8003138 <HAL_TIM_Base_MspInit+0x108>)
 8003048:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800304c:	6613      	str	r3, [r2, #96]	@ 0x60
 800304e:	4b3a      	ldr	r3, [pc, #232]	@ (8003138 <HAL_TIM_Base_MspInit+0x108>)
 8003050:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003052:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003056:	61fb      	str	r3, [r7, #28]
 8003058:	69fb      	ldr	r3, [r7, #28]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 800305a:	2200      	movs	r2, #0
 800305c:	2100      	movs	r1, #0
 800305e:	2018      	movs	r0, #24
 8003060:	f001 fe6f 	bl	8004d42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8003064:	2018      	movs	r0, #24
 8003066:	f001 fe86 	bl	8004d76 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800306a:	2200      	movs	r2, #0
 800306c:	2100      	movs	r1, #0
 800306e:	2019      	movs	r0, #25
 8003070:	f001 fe67 	bl	8004d42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8003074:	2019      	movs	r0, #25
 8003076:	f001 fe7e 	bl	8004d76 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM20_CLK_ENABLE();
  /* USER CODE BEGIN TIM20_MspInit 1 */

  /* USER CODE END TIM20_MspInit 1 */
  }
}
 800307a:	e056      	b.n	800312a <HAL_TIM_Base_MspInit+0xfa>
  else if(tim_baseHandle->Instance==TIM2)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003084:	d114      	bne.n	80030b0 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003086:	4b2c      	ldr	r3, [pc, #176]	@ (8003138 <HAL_TIM_Base_MspInit+0x108>)
 8003088:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800308a:	4a2b      	ldr	r2, [pc, #172]	@ (8003138 <HAL_TIM_Base_MspInit+0x108>)
 800308c:	f043 0301 	orr.w	r3, r3, #1
 8003090:	6593      	str	r3, [r2, #88]	@ 0x58
 8003092:	4b29      	ldr	r3, [pc, #164]	@ (8003138 <HAL_TIM_Base_MspInit+0x108>)
 8003094:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003096:	f003 0301 	and.w	r3, r3, #1
 800309a:	61bb      	str	r3, [r7, #24]
 800309c:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800309e:	2200      	movs	r2, #0
 80030a0:	2100      	movs	r1, #0
 80030a2:	201c      	movs	r0, #28
 80030a4:	f001 fe4d 	bl	8004d42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80030a8:	201c      	movs	r0, #28
 80030aa:	f001 fe64 	bl	8004d76 <HAL_NVIC_EnableIRQ>
}
 80030ae:	e03c      	b.n	800312a <HAL_TIM_Base_MspInit+0xfa>
  else if(tim_baseHandle->Instance==TIM8)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a21      	ldr	r2, [pc, #132]	@ (800313c <HAL_TIM_Base_MspInit+0x10c>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d10c      	bne.n	80030d4 <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80030ba:	4b1f      	ldr	r3, [pc, #124]	@ (8003138 <HAL_TIM_Base_MspInit+0x108>)
 80030bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030be:	4a1e      	ldr	r2, [pc, #120]	@ (8003138 <HAL_TIM_Base_MspInit+0x108>)
 80030c0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80030c4:	6613      	str	r3, [r2, #96]	@ 0x60
 80030c6:	4b1c      	ldr	r3, [pc, #112]	@ (8003138 <HAL_TIM_Base_MspInit+0x108>)
 80030c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030ca:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80030ce:	617b      	str	r3, [r7, #20]
 80030d0:	697b      	ldr	r3, [r7, #20]
}
 80030d2:	e02a      	b.n	800312a <HAL_TIM_Base_MspInit+0xfa>
  else if(tim_baseHandle->Instance==TIM16)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a19      	ldr	r2, [pc, #100]	@ (8003140 <HAL_TIM_Base_MspInit+0x110>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d114      	bne.n	8003108 <HAL_TIM_Base_MspInit+0xd8>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80030de:	4b16      	ldr	r3, [pc, #88]	@ (8003138 <HAL_TIM_Base_MspInit+0x108>)
 80030e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030e2:	4a15      	ldr	r2, [pc, #84]	@ (8003138 <HAL_TIM_Base_MspInit+0x108>)
 80030e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80030e8:	6613      	str	r3, [r2, #96]	@ 0x60
 80030ea:	4b13      	ldr	r3, [pc, #76]	@ (8003138 <HAL_TIM_Base_MspInit+0x108>)
 80030ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030f2:	613b      	str	r3, [r7, #16]
 80030f4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80030f6:	2200      	movs	r2, #0
 80030f8:	2100      	movs	r1, #0
 80030fa:	2019      	movs	r0, #25
 80030fc:	f001 fe21 	bl	8004d42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8003100:	2019      	movs	r0, #25
 8003102:	f001 fe38 	bl	8004d76 <HAL_NVIC_EnableIRQ>
}
 8003106:	e010      	b.n	800312a <HAL_TIM_Base_MspInit+0xfa>
  else if(tim_baseHandle->Instance==TIM20)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a0d      	ldr	r2, [pc, #52]	@ (8003144 <HAL_TIM_Base_MspInit+0x114>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d10b      	bne.n	800312a <HAL_TIM_Base_MspInit+0xfa>
    __HAL_RCC_TIM20_CLK_ENABLE();
 8003112:	4b09      	ldr	r3, [pc, #36]	@ (8003138 <HAL_TIM_Base_MspInit+0x108>)
 8003114:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003116:	4a08      	ldr	r2, [pc, #32]	@ (8003138 <HAL_TIM_Base_MspInit+0x108>)
 8003118:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800311c:	6613      	str	r3, [r2, #96]	@ 0x60
 800311e:	4b06      	ldr	r3, [pc, #24]	@ (8003138 <HAL_TIM_Base_MspInit+0x108>)
 8003120:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003122:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003126:	60fb      	str	r3, [r7, #12]
 8003128:	68fb      	ldr	r3, [r7, #12]
}
 800312a:	bf00      	nop
 800312c:	3720      	adds	r7, #32
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}
 8003132:	bf00      	nop
 8003134:	40012c00 	.word	0x40012c00
 8003138:	40021000 	.word	0x40021000
 800313c:	40013400 	.word	0x40013400
 8003140:	40014400 	.word	0x40014400
 8003144:	40015000 	.word	0x40015000

08003148 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b08c      	sub	sp, #48	@ 0x30
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003150:	f107 031c 	add.w	r3, r7, #28
 8003154:	2200      	movs	r2, #0
 8003156:	601a      	str	r2, [r3, #0]
 8003158:	605a      	str	r2, [r3, #4]
 800315a:	609a      	str	r2, [r3, #8]
 800315c:	60da      	str	r2, [r3, #12]
 800315e:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a2f      	ldr	r2, [pc, #188]	@ (8003224 <HAL_TIM_Encoder_MspInit+0xdc>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d129      	bne.n	80031be <HAL_TIM_Encoder_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800316a:	4b2f      	ldr	r3, [pc, #188]	@ (8003228 <HAL_TIM_Encoder_MspInit+0xe0>)
 800316c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800316e:	4a2e      	ldr	r2, [pc, #184]	@ (8003228 <HAL_TIM_Encoder_MspInit+0xe0>)
 8003170:	f043 0302 	orr.w	r3, r3, #2
 8003174:	6593      	str	r3, [r2, #88]	@ 0x58
 8003176:	4b2c      	ldr	r3, [pc, #176]	@ (8003228 <HAL_TIM_Encoder_MspInit+0xe0>)
 8003178:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800317a:	f003 0302 	and.w	r3, r3, #2
 800317e:	61bb      	str	r3, [r7, #24]
 8003180:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003182:	4b29      	ldr	r3, [pc, #164]	@ (8003228 <HAL_TIM_Encoder_MspInit+0xe0>)
 8003184:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003186:	4a28      	ldr	r2, [pc, #160]	@ (8003228 <HAL_TIM_Encoder_MspInit+0xe0>)
 8003188:	f043 0301 	orr.w	r3, r3, #1
 800318c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800318e:	4b26      	ldr	r3, [pc, #152]	@ (8003228 <HAL_TIM_Encoder_MspInit+0xe0>)
 8003190:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003192:	f003 0301 	and.w	r3, r3, #1
 8003196:	617b      	str	r3, [r7, #20]
 8003198:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = Encoder_1_Pin|Encoder_1A7_Pin;
 800319a:	23c0      	movs	r3, #192	@ 0xc0
 800319c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800319e:	2302      	movs	r3, #2
 80031a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031a2:	2300      	movs	r3, #0
 80031a4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031a6:	2300      	movs	r3, #0
 80031a8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80031aa:	2302      	movs	r3, #2
 80031ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031ae:	f107 031c 	add.w	r3, r7, #28
 80031b2:	4619      	mov	r1, r3
 80031b4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80031b8:	f002 f936 	bl	8005428 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80031bc:	e02e      	b.n	800321c <HAL_TIM_Encoder_MspInit+0xd4>
  else if(tim_encoderHandle->Instance==TIM4)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4a1a      	ldr	r2, [pc, #104]	@ (800322c <HAL_TIM_Encoder_MspInit+0xe4>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d129      	bne.n	800321c <HAL_TIM_Encoder_MspInit+0xd4>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80031c8:	4b17      	ldr	r3, [pc, #92]	@ (8003228 <HAL_TIM_Encoder_MspInit+0xe0>)
 80031ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031cc:	4a16      	ldr	r2, [pc, #88]	@ (8003228 <HAL_TIM_Encoder_MspInit+0xe0>)
 80031ce:	f043 0304 	orr.w	r3, r3, #4
 80031d2:	6593      	str	r3, [r2, #88]	@ 0x58
 80031d4:	4b14      	ldr	r3, [pc, #80]	@ (8003228 <HAL_TIM_Encoder_MspInit+0xe0>)
 80031d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031d8:	f003 0304 	and.w	r3, r3, #4
 80031dc:	613b      	str	r3, [r7, #16]
 80031de:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031e0:	4b11      	ldr	r3, [pc, #68]	@ (8003228 <HAL_TIM_Encoder_MspInit+0xe0>)
 80031e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031e4:	4a10      	ldr	r2, [pc, #64]	@ (8003228 <HAL_TIM_Encoder_MspInit+0xe0>)
 80031e6:	f043 0301 	orr.w	r3, r3, #1
 80031ea:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80031ec:	4b0e      	ldr	r3, [pc, #56]	@ (8003228 <HAL_TIM_Encoder_MspInit+0xe0>)
 80031ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031f0:	f003 0301 	and.w	r3, r3, #1
 80031f4:	60fb      	str	r3, [r7, #12]
 80031f6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Encoder_2_Pin|Encoder_2A12_Pin;
 80031f8:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80031fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031fe:	2302      	movs	r3, #2
 8003200:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003202:	2300      	movs	r3, #0
 8003204:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003206:	2300      	movs	r3, #0
 8003208:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 800320a:	230a      	movs	r3, #10
 800320c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800320e:	f107 031c 	add.w	r3, r7, #28
 8003212:	4619      	mov	r1, r3
 8003214:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003218:	f002 f906 	bl	8005428 <HAL_GPIO_Init>
}
 800321c:	bf00      	nop
 800321e:	3730      	adds	r7, #48	@ 0x30
 8003220:	46bd      	mov	sp, r7
 8003222:	bd80      	pop	{r7, pc}
 8003224:	40000400 	.word	0x40000400
 8003228:	40021000 	.word	0x40021000
 800322c:	40000800 	.word	0x40000800

08003230 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b08a      	sub	sp, #40	@ 0x28
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003238:	f107 0314 	add.w	r3, r7, #20
 800323c:	2200      	movs	r2, #0
 800323e:	601a      	str	r2, [r3, #0]
 8003240:	605a      	str	r2, [r3, #4]
 8003242:	609a      	str	r2, [r3, #8]
 8003244:	60da      	str	r2, [r3, #12]
 8003246:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM8)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a31      	ldr	r2, [pc, #196]	@ (8003314 <HAL_TIM_MspPostInit+0xe4>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d11d      	bne.n	800328e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003252:	4b31      	ldr	r3, [pc, #196]	@ (8003318 <HAL_TIM_MspPostInit+0xe8>)
 8003254:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003256:	4a30      	ldr	r2, [pc, #192]	@ (8003318 <HAL_TIM_MspPostInit+0xe8>)
 8003258:	f043 0304 	orr.w	r3, r3, #4
 800325c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800325e:	4b2e      	ldr	r3, [pc, #184]	@ (8003318 <HAL_TIM_MspPostInit+0xe8>)
 8003260:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003262:	f003 0304 	and.w	r3, r3, #4
 8003266:	613b      	str	r3, [r7, #16]
 8003268:	693b      	ldr	r3, [r7, #16]
    /**TIM8 GPIO Configuration
    PC9     ------> TIM8_CH4
    */
    GPIO_InitStruct.Pin = PWM_Servo_Pin;
 800326a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800326e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003270:	2302      	movs	r3, #2
 8003272:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003274:	2300      	movs	r3, #0
 8003276:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003278:	2300      	movs	r3, #0
 800327a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 800327c:	2304      	movs	r3, #4
 800327e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(PWM_Servo_GPIO_Port, &GPIO_InitStruct);
 8003280:	f107 0314 	add.w	r3, r7, #20
 8003284:	4619      	mov	r1, r3
 8003286:	4825      	ldr	r0, [pc, #148]	@ (800331c <HAL_TIM_MspPostInit+0xec>)
 8003288:	f002 f8ce 	bl	8005428 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM20_MspPostInit 1 */

  /* USER CODE END TIM20_MspPostInit 1 */
  }

}
 800328c:	e03d      	b.n	800330a <HAL_TIM_MspPostInit+0xda>
  else if(timHandle->Instance==TIM20)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a23      	ldr	r2, [pc, #140]	@ (8003320 <HAL_TIM_MspPostInit+0xf0>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d138      	bne.n	800330a <HAL_TIM_MspPostInit+0xda>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003298:	4b1f      	ldr	r3, [pc, #124]	@ (8003318 <HAL_TIM_MspPostInit+0xe8>)
 800329a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800329c:	4a1e      	ldr	r2, [pc, #120]	@ (8003318 <HAL_TIM_MspPostInit+0xe8>)
 800329e:	f043 0302 	orr.w	r3, r3, #2
 80032a2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80032a4:	4b1c      	ldr	r3, [pc, #112]	@ (8003318 <HAL_TIM_MspPostInit+0xe8>)
 80032a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032a8:	f003 0302 	and.w	r3, r3, #2
 80032ac:	60fb      	str	r3, [r7, #12]
 80032ae:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80032b0:	4b19      	ldr	r3, [pc, #100]	@ (8003318 <HAL_TIM_MspPostInit+0xe8>)
 80032b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032b4:	4a18      	ldr	r2, [pc, #96]	@ (8003318 <HAL_TIM_MspPostInit+0xe8>)
 80032b6:	f043 0304 	orr.w	r3, r3, #4
 80032ba:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80032bc:	4b16      	ldr	r3, [pc, #88]	@ (8003318 <HAL_TIM_MspPostInit+0xe8>)
 80032be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032c0:	f003 0304 	and.w	r3, r3, #4
 80032c4:	60bb      	str	r3, [r7, #8]
 80032c6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWM_MD20A_24V_Pin;
 80032c8:	2304      	movs	r3, #4
 80032ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032cc:	2302      	movs	r3, #2
 80032ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032d0:	2300      	movs	r3, #0
 80032d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032d4:	2300      	movs	r3, #0
 80032d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM20;
 80032d8:	2303      	movs	r3, #3
 80032da:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(PWM_MD20A_24V_GPIO_Port, &GPIO_InitStruct);
 80032dc:	f107 0314 	add.w	r3, r7, #20
 80032e0:	4619      	mov	r1, r3
 80032e2:	4810      	ldr	r0, [pc, #64]	@ (8003324 <HAL_TIM_MspPostInit+0xf4>)
 80032e4:	f002 f8a0 	bl	8005428 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = PWM_MD20A_18V_Pin;
 80032e8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80032ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032ee:	2302      	movs	r3, #2
 80032f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032f2:	2300      	movs	r3, #0
 80032f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032f6:	2300      	movs	r3, #0
 80032f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM20;
 80032fa:	2306      	movs	r3, #6
 80032fc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(PWM_MD20A_18V_GPIO_Port, &GPIO_InitStruct);
 80032fe:	f107 0314 	add.w	r3, r7, #20
 8003302:	4619      	mov	r1, r3
 8003304:	4805      	ldr	r0, [pc, #20]	@ (800331c <HAL_TIM_MspPostInit+0xec>)
 8003306:	f002 f88f 	bl	8005428 <HAL_GPIO_Init>
}
 800330a:	bf00      	nop
 800330c:	3728      	adds	r7, #40	@ 0x28
 800330e:	46bd      	mov	sp, r7
 8003310:	bd80      	pop	{r7, pc}
 8003312:	bf00      	nop
 8003314:	40013400 	.word	0x40013400
 8003318:	40021000 	.word	0x40021000
 800331c:	48000800 	.word	0x48000800
 8003320:	40015000 	.word	0x40015000
 8003324:	48000400 	.word	0x48000400

08003328 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800332c:	4b23      	ldr	r3, [pc, #140]	@ (80033bc <MX_USART2_UART_Init+0x94>)
 800332e:	4a24      	ldr	r2, [pc, #144]	@ (80033c0 <MX_USART2_UART_Init+0x98>)
 8003330:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003332:	4b22      	ldr	r3, [pc, #136]	@ (80033bc <MX_USART2_UART_Init+0x94>)
 8003334:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003338:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 800333a:	4b20      	ldr	r3, [pc, #128]	@ (80033bc <MX_USART2_UART_Init+0x94>)
 800333c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003340:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003342:	4b1e      	ldr	r3, [pc, #120]	@ (80033bc <MX_USART2_UART_Init+0x94>)
 8003344:	2200      	movs	r2, #0
 8003346:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8003348:	4b1c      	ldr	r3, [pc, #112]	@ (80033bc <MX_USART2_UART_Init+0x94>)
 800334a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800334e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003350:	4b1a      	ldr	r3, [pc, #104]	@ (80033bc <MX_USART2_UART_Init+0x94>)
 8003352:	220c      	movs	r2, #12
 8003354:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003356:	4b19      	ldr	r3, [pc, #100]	@ (80033bc <MX_USART2_UART_Init+0x94>)
 8003358:	2200      	movs	r2, #0
 800335a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800335c:	4b17      	ldr	r3, [pc, #92]	@ (80033bc <MX_USART2_UART_Init+0x94>)
 800335e:	2200      	movs	r2, #0
 8003360:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003362:	4b16      	ldr	r3, [pc, #88]	@ (80033bc <MX_USART2_UART_Init+0x94>)
 8003364:	2200      	movs	r2, #0
 8003366:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003368:	4b14      	ldr	r3, [pc, #80]	@ (80033bc <MX_USART2_UART_Init+0x94>)
 800336a:	2200      	movs	r2, #0
 800336c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800336e:	4b13      	ldr	r3, [pc, #76]	@ (80033bc <MX_USART2_UART_Init+0x94>)
 8003370:	2200      	movs	r2, #0
 8003372:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003374:	4811      	ldr	r0, [pc, #68]	@ (80033bc <MX_USART2_UART_Init+0x94>)
 8003376:	f005 fc13 	bl	8008ba0 <HAL_UART_Init>
 800337a:	4603      	mov	r3, r0
 800337c:	2b00      	cmp	r3, #0
 800337e:	d001      	beq.n	8003384 <MX_USART2_UART_Init+0x5c>
  {
    Error_Handler();
 8003380:	f7ff fa56 	bl	8002830 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003384:	2100      	movs	r1, #0
 8003386:	480d      	ldr	r0, [pc, #52]	@ (80033bc <MX_USART2_UART_Init+0x94>)
 8003388:	f007 ff95 	bl	800b2b6 <HAL_UARTEx_SetTxFifoThreshold>
 800338c:	4603      	mov	r3, r0
 800338e:	2b00      	cmp	r3, #0
 8003390:	d001      	beq.n	8003396 <MX_USART2_UART_Init+0x6e>
  {
    Error_Handler();
 8003392:	f7ff fa4d 	bl	8002830 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003396:	2100      	movs	r1, #0
 8003398:	4808      	ldr	r0, [pc, #32]	@ (80033bc <MX_USART2_UART_Init+0x94>)
 800339a:	f007 ffca 	bl	800b332 <HAL_UARTEx_SetRxFifoThreshold>
 800339e:	4603      	mov	r3, r0
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d001      	beq.n	80033a8 <MX_USART2_UART_Init+0x80>
  {
    Error_Handler();
 80033a4:	f7ff fa44 	bl	8002830 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80033a8:	4804      	ldr	r0, [pc, #16]	@ (80033bc <MX_USART2_UART_Init+0x94>)
 80033aa:	f007 ff4b 	bl	800b244 <HAL_UARTEx_DisableFifoMode>
 80033ae:	4603      	mov	r3, r0
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d001      	beq.n	80033b8 <MX_USART2_UART_Init+0x90>
  {
    Error_Handler();
 80033b4:	f7ff fa3c 	bl	8002830 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80033b8:	bf00      	nop
 80033ba:	bd80      	pop	{r7, pc}
 80033bc:	200015d4 	.word	0x200015d4
 80033c0:	40004400 	.word	0x40004400

080033c4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b09e      	sub	sp, #120	@ 0x78
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033cc:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80033d0:	2200      	movs	r2, #0
 80033d2:	601a      	str	r2, [r3, #0]
 80033d4:	605a      	str	r2, [r3, #4]
 80033d6:	609a      	str	r2, [r3, #8]
 80033d8:	60da      	str	r2, [r3, #12]
 80033da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80033dc:	f107 0310 	add.w	r3, r7, #16
 80033e0:	2254      	movs	r2, #84	@ 0x54
 80033e2:	2100      	movs	r1, #0
 80033e4:	4618      	mov	r0, r3
 80033e6:	f008 fd27 	bl	800be38 <memset>
  if(uartHandle->Instance==USART2)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a37      	ldr	r2, [pc, #220]	@ (80034cc <HAL_UART_MspInit+0x108>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d167      	bne.n	80034c4 <HAL_UART_MspInit+0x100>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80033f4:	2302      	movs	r3, #2
 80033f6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80033f8:	2300      	movs	r3, #0
 80033fa:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80033fc:	f107 0310 	add.w	r3, r7, #16
 8003400:	4618      	mov	r0, r3
 8003402:	f002 ffa5 	bl	8006350 <HAL_RCCEx_PeriphCLKConfig>
 8003406:	4603      	mov	r3, r0
 8003408:	2b00      	cmp	r3, #0
 800340a:	d001      	beq.n	8003410 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800340c:	f7ff fa10 	bl	8002830 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003410:	4b2f      	ldr	r3, [pc, #188]	@ (80034d0 <HAL_UART_MspInit+0x10c>)
 8003412:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003414:	4a2e      	ldr	r2, [pc, #184]	@ (80034d0 <HAL_UART_MspInit+0x10c>)
 8003416:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800341a:	6593      	str	r3, [r2, #88]	@ 0x58
 800341c:	4b2c      	ldr	r3, [pc, #176]	@ (80034d0 <HAL_UART_MspInit+0x10c>)
 800341e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003420:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003424:	60fb      	str	r3, [r7, #12]
 8003426:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003428:	4b29      	ldr	r3, [pc, #164]	@ (80034d0 <HAL_UART_MspInit+0x10c>)
 800342a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800342c:	4a28      	ldr	r2, [pc, #160]	@ (80034d0 <HAL_UART_MspInit+0x10c>)
 800342e:	f043 0301 	orr.w	r3, r3, #1
 8003432:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003434:	4b26      	ldr	r3, [pc, #152]	@ (80034d0 <HAL_UART_MspInit+0x10c>)
 8003436:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003438:	f003 0301 	and.w	r3, r3, #1
 800343c:	60bb      	str	r3, [r7, #8]
 800343e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003440:	230c      	movs	r3, #12
 8003442:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003444:	2302      	movs	r3, #2
 8003446:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003448:	2300      	movs	r3, #0
 800344a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800344c:	2300      	movs	r3, #0
 800344e:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003450:	2307      	movs	r3, #7
 8003452:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003454:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8003458:	4619      	mov	r1, r3
 800345a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800345e:	f001 ffe3 	bl	8005428 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel1;
 8003462:	4b1c      	ldr	r3, [pc, #112]	@ (80034d4 <HAL_UART_MspInit+0x110>)
 8003464:	4a1c      	ldr	r2, [pc, #112]	@ (80034d8 <HAL_UART_MspInit+0x114>)
 8003466:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8003468:	4b1a      	ldr	r3, [pc, #104]	@ (80034d4 <HAL_UART_MspInit+0x110>)
 800346a:	221b      	movs	r2, #27
 800346c:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800346e:	4b19      	ldr	r3, [pc, #100]	@ (80034d4 <HAL_UART_MspInit+0x110>)
 8003470:	2210      	movs	r2, #16
 8003472:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003474:	4b17      	ldr	r3, [pc, #92]	@ (80034d4 <HAL_UART_MspInit+0x110>)
 8003476:	2200      	movs	r2, #0
 8003478:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800347a:	4b16      	ldr	r3, [pc, #88]	@ (80034d4 <HAL_UART_MspInit+0x110>)
 800347c:	2280      	movs	r2, #128	@ 0x80
 800347e:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003480:	4b14      	ldr	r3, [pc, #80]	@ (80034d4 <HAL_UART_MspInit+0x110>)
 8003482:	2200      	movs	r2, #0
 8003484:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003486:	4b13      	ldr	r3, [pc, #76]	@ (80034d4 <HAL_UART_MspInit+0x110>)
 8003488:	2200      	movs	r2, #0
 800348a:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800348c:	4b11      	ldr	r3, [pc, #68]	@ (80034d4 <HAL_UART_MspInit+0x110>)
 800348e:	2200      	movs	r2, #0
 8003490:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003492:	4b10      	ldr	r3, [pc, #64]	@ (80034d4 <HAL_UART_MspInit+0x110>)
 8003494:	2200      	movs	r2, #0
 8003496:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8003498:	480e      	ldr	r0, [pc, #56]	@ (80034d4 <HAL_UART_MspInit+0x110>)
 800349a:	f001 fc87 	bl	8004dac <HAL_DMA_Init>
 800349e:	4603      	mov	r3, r0
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d001      	beq.n	80034a8 <HAL_UART_MspInit+0xe4>
    {
      Error_Handler();
 80034a4:	f7ff f9c4 	bl	8002830 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	4a0a      	ldr	r2, [pc, #40]	@ (80034d4 <HAL_UART_MspInit+0x110>)
 80034ac:	67da      	str	r2, [r3, #124]	@ 0x7c
 80034ae:	4a09      	ldr	r2, [pc, #36]	@ (80034d4 <HAL_UART_MspInit+0x110>)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80034b4:	2200      	movs	r2, #0
 80034b6:	2100      	movs	r1, #0
 80034b8:	2026      	movs	r0, #38	@ 0x26
 80034ba:	f001 fc42 	bl	8004d42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80034be:	2026      	movs	r0, #38	@ 0x26
 80034c0:	f001 fc59 	bl	8004d76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80034c4:	bf00      	nop
 80034c6:	3778      	adds	r7, #120	@ 0x78
 80034c8:	46bd      	mov	sp, r7
 80034ca:	bd80      	pop	{r7, pc}
 80034cc:	40004400 	.word	0x40004400
 80034d0:	40021000 	.word	0x40021000
 80034d4:	200016a0 	.word	0x200016a0
 80034d8:	40020008 	.word	0x40020008

080034dc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80034dc:	480d      	ldr	r0, [pc, #52]	@ (8003514 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80034de:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80034e0:	f7ff fa5a 	bl	8002998 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80034e4:	480c      	ldr	r0, [pc, #48]	@ (8003518 <LoopForever+0x6>)
  ldr r1, =_edata
 80034e6:	490d      	ldr	r1, [pc, #52]	@ (800351c <LoopForever+0xa>)
  ldr r2, =_sidata
 80034e8:	4a0d      	ldr	r2, [pc, #52]	@ (8003520 <LoopForever+0xe>)
  movs r3, #0
 80034ea:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80034ec:	e002      	b.n	80034f4 <LoopCopyDataInit>

080034ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80034ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80034f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80034f2:	3304      	adds	r3, #4

080034f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80034f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80034f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80034f8:	d3f9      	bcc.n	80034ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80034fa:	4a0a      	ldr	r2, [pc, #40]	@ (8003524 <LoopForever+0x12>)
  ldr r4, =_ebss
 80034fc:	4c0a      	ldr	r4, [pc, #40]	@ (8003528 <LoopForever+0x16>)
  movs r3, #0
 80034fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003500:	e001      	b.n	8003506 <LoopFillZerobss>

08003502 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003502:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003504:	3204      	adds	r2, #4

08003506 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003506:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003508:	d3fb      	bcc.n	8003502 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800350a:	f008 fca3 	bl	800be54 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800350e:	f7fe fbf7 	bl	8001d00 <main>

08003512 <LoopForever>:

LoopForever:
    b LoopForever
 8003512:	e7fe      	b.n	8003512 <LoopForever>
  ldr   r0, =_estack
 8003514:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003518:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800351c:	2000025c 	.word	0x2000025c
  ldr r2, =_sidata
 8003520:	0800bf64 	.word	0x0800bf64
  ldr r2, =_sbss
 8003524:	20000260 	.word	0x20000260
  ldr r4, =_ebss
 8003528:	2000183c 	.word	0x2000183c

0800352c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800352c:	e7fe      	b.n	800352c <ADC1_2_IRQHandler>

0800352e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800352e:	b580      	push	{r7, lr}
 8003530:	b082      	sub	sp, #8
 8003532:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003534:	2300      	movs	r3, #0
 8003536:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003538:	2003      	movs	r0, #3
 800353a:	f001 fbf7 	bl	8004d2c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800353e:	2000      	movs	r0, #0
 8003540:	f000 f80e 	bl	8003560 <HAL_InitTick>
 8003544:	4603      	mov	r3, r0
 8003546:	2b00      	cmp	r3, #0
 8003548:	d002      	beq.n	8003550 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800354a:	2301      	movs	r3, #1
 800354c:	71fb      	strb	r3, [r7, #7]
 800354e:	e001      	b.n	8003554 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003550:	f7ff f974 	bl	800283c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003554:	79fb      	ldrb	r3, [r7, #7]

}
 8003556:	4618      	mov	r0, r3
 8003558:	3708      	adds	r7, #8
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}
	...

08003560 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b084      	sub	sp, #16
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003568:	2300      	movs	r3, #0
 800356a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800356c:	4b16      	ldr	r3, [pc, #88]	@ (80035c8 <HAL_InitTick+0x68>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d022      	beq.n	80035ba <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8003574:	4b15      	ldr	r3, [pc, #84]	@ (80035cc <HAL_InitTick+0x6c>)
 8003576:	681a      	ldr	r2, [r3, #0]
 8003578:	4b13      	ldr	r3, [pc, #76]	@ (80035c8 <HAL_InitTick+0x68>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8003580:	fbb1 f3f3 	udiv	r3, r1, r3
 8003584:	fbb2 f3f3 	udiv	r3, r2, r3
 8003588:	4618      	mov	r0, r3
 800358a:	f001 fc02 	bl	8004d92 <HAL_SYSTICK_Config>
 800358e:	4603      	mov	r3, r0
 8003590:	2b00      	cmp	r3, #0
 8003592:	d10f      	bne.n	80035b4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2b0f      	cmp	r3, #15
 8003598:	d809      	bhi.n	80035ae <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800359a:	2200      	movs	r2, #0
 800359c:	6879      	ldr	r1, [r7, #4]
 800359e:	f04f 30ff 	mov.w	r0, #4294967295
 80035a2:	f001 fbce 	bl	8004d42 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80035a6:	4a0a      	ldr	r2, [pc, #40]	@ (80035d0 <HAL_InitTick+0x70>)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6013      	str	r3, [r2, #0]
 80035ac:	e007      	b.n	80035be <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80035ae:	2301      	movs	r3, #1
 80035b0:	73fb      	strb	r3, [r7, #15]
 80035b2:	e004      	b.n	80035be <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80035b4:	2301      	movs	r3, #1
 80035b6:	73fb      	strb	r3, [r7, #15]
 80035b8:	e001      	b.n	80035be <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80035ba:	2301      	movs	r3, #1
 80035bc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80035be:	7bfb      	ldrb	r3, [r7, #15]
}
 80035c0:	4618      	mov	r0, r3
 80035c2:	3710      	adds	r7, #16
 80035c4:	46bd      	mov	sp, r7
 80035c6:	bd80      	pop	{r7, pc}
 80035c8:	20000208 	.word	0x20000208
 80035cc:	20000200 	.word	0x20000200
 80035d0:	20000204 	.word	0x20000204

080035d4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80035d4:	b480      	push	{r7}
 80035d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80035d8:	4b05      	ldr	r3, [pc, #20]	@ (80035f0 <HAL_IncTick+0x1c>)
 80035da:	681a      	ldr	r2, [r3, #0]
 80035dc:	4b05      	ldr	r3, [pc, #20]	@ (80035f4 <HAL_IncTick+0x20>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4413      	add	r3, r2
 80035e2:	4a03      	ldr	r2, [pc, #12]	@ (80035f0 <HAL_IncTick+0x1c>)
 80035e4:	6013      	str	r3, [r2, #0]
}
 80035e6:	bf00      	nop
 80035e8:	46bd      	mov	sp, r7
 80035ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ee:	4770      	bx	lr
 80035f0:	20001700 	.word	0x20001700
 80035f4:	20000208 	.word	0x20000208

080035f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80035f8:	b480      	push	{r7}
 80035fa:	af00      	add	r7, sp, #0
  return uwTick;
 80035fc:	4b03      	ldr	r3, [pc, #12]	@ (800360c <HAL_GetTick+0x14>)
 80035fe:	681b      	ldr	r3, [r3, #0]
}
 8003600:	4618      	mov	r0, r3
 8003602:	46bd      	mov	sp, r7
 8003604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003608:	4770      	bx	lr
 800360a:	bf00      	nop
 800360c:	20001700 	.word	0x20001700

08003610 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003610:	b480      	push	{r7}
 8003612:	b083      	sub	sp, #12
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
 8003618:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	689b      	ldr	r3, [r3, #8]
 800361e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	431a      	orrs	r2, r3
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	609a      	str	r2, [r3, #8]
}
 800362a:	bf00      	nop
 800362c:	370c      	adds	r7, #12
 800362e:	46bd      	mov	sp, r7
 8003630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003634:	4770      	bx	lr

08003636 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003636:	b480      	push	{r7}
 8003638:	b083      	sub	sp, #12
 800363a:	af00      	add	r7, sp, #0
 800363c:	6078      	str	r0, [r7, #4]
 800363e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	689b      	ldr	r3, [r3, #8]
 8003644:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	431a      	orrs	r2, r3
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	609a      	str	r2, [r3, #8]
}
 8003650:	bf00      	nop
 8003652:	370c      	adds	r7, #12
 8003654:	46bd      	mov	sp, r7
 8003656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365a:	4770      	bx	lr

0800365c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800365c:	b480      	push	{r7}
 800365e:	b083      	sub	sp, #12
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	689b      	ldr	r3, [r3, #8]
 8003668:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800366c:	4618      	mov	r0, r3
 800366e:	370c      	adds	r7, #12
 8003670:	46bd      	mov	sp, r7
 8003672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003676:	4770      	bx	lr

08003678 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003678:	b480      	push	{r7}
 800367a:	b087      	sub	sp, #28
 800367c:	af00      	add	r7, sp, #0
 800367e:	60f8      	str	r0, [r7, #12]
 8003680:	60b9      	str	r1, [r7, #8]
 8003682:	607a      	str	r2, [r7, #4]
 8003684:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	3360      	adds	r3, #96	@ 0x60
 800368a:	461a      	mov	r2, r3
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	009b      	lsls	r3, r3, #2
 8003690:	4413      	add	r3, r2
 8003692:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003694:	697b      	ldr	r3, [r7, #20]
 8003696:	681a      	ldr	r2, [r3, #0]
 8003698:	4b08      	ldr	r3, [pc, #32]	@ (80036bc <LL_ADC_SetOffset+0x44>)
 800369a:	4013      	ands	r3, r2
 800369c:	687a      	ldr	r2, [r7, #4]
 800369e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80036a2:	683a      	ldr	r2, [r7, #0]
 80036a4:	430a      	orrs	r2, r1
 80036a6:	4313      	orrs	r3, r2
 80036a8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80036ac:	697b      	ldr	r3, [r7, #20]
 80036ae:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80036b0:	bf00      	nop
 80036b2:	371c      	adds	r7, #28
 80036b4:	46bd      	mov	sp, r7
 80036b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ba:	4770      	bx	lr
 80036bc:	03fff000 	.word	0x03fff000

080036c0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80036c0:	b480      	push	{r7}
 80036c2:	b085      	sub	sp, #20
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
 80036c8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	3360      	adds	r3, #96	@ 0x60
 80036ce:	461a      	mov	r2, r3
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	009b      	lsls	r3, r3, #2
 80036d4:	4413      	add	r3, r2
 80036d6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80036e0:	4618      	mov	r0, r3
 80036e2:	3714      	adds	r7, #20
 80036e4:	46bd      	mov	sp, r7
 80036e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ea:	4770      	bx	lr

080036ec <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80036ec:	b480      	push	{r7}
 80036ee:	b087      	sub	sp, #28
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	60f8      	str	r0, [r7, #12]
 80036f4:	60b9      	str	r1, [r7, #8]
 80036f6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	3360      	adds	r3, #96	@ 0x60
 80036fc:	461a      	mov	r2, r3
 80036fe:	68bb      	ldr	r3, [r7, #8]
 8003700:	009b      	lsls	r3, r3, #2
 8003702:	4413      	add	r3, r2
 8003704:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003706:	697b      	ldr	r3, [r7, #20]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	431a      	orrs	r2, r3
 8003712:	697b      	ldr	r3, [r7, #20]
 8003714:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8003716:	bf00      	nop
 8003718:	371c      	adds	r7, #28
 800371a:	46bd      	mov	sp, r7
 800371c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003720:	4770      	bx	lr

08003722 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8003722:	b480      	push	{r7}
 8003724:	b087      	sub	sp, #28
 8003726:	af00      	add	r7, sp, #0
 8003728:	60f8      	str	r0, [r7, #12]
 800372a:	60b9      	str	r1, [r7, #8]
 800372c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	3360      	adds	r3, #96	@ 0x60
 8003732:	461a      	mov	r2, r3
 8003734:	68bb      	ldr	r3, [r7, #8]
 8003736:	009b      	lsls	r3, r3, #2
 8003738:	4413      	add	r3, r2
 800373a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800373c:	697b      	ldr	r3, [r7, #20]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	431a      	orrs	r2, r3
 8003748:	697b      	ldr	r3, [r7, #20]
 800374a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 800374c:	bf00      	nop
 800374e:	371c      	adds	r7, #28
 8003750:	46bd      	mov	sp, r7
 8003752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003756:	4770      	bx	lr

08003758 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8003758:	b480      	push	{r7}
 800375a:	b087      	sub	sp, #28
 800375c:	af00      	add	r7, sp, #0
 800375e:	60f8      	str	r0, [r7, #12]
 8003760:	60b9      	str	r1, [r7, #8]
 8003762:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	3360      	adds	r3, #96	@ 0x60
 8003768:	461a      	mov	r2, r3
 800376a:	68bb      	ldr	r3, [r7, #8]
 800376c:	009b      	lsls	r3, r3, #2
 800376e:	4413      	add	r3, r2
 8003770:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003772:	697b      	ldr	r3, [r7, #20]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	431a      	orrs	r2, r3
 800377e:	697b      	ldr	r3, [r7, #20]
 8003780:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8003782:	bf00      	nop
 8003784:	371c      	adds	r7, #28
 8003786:	46bd      	mov	sp, r7
 8003788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378c:	4770      	bx	lr

0800378e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800378e:	b480      	push	{r7}
 8003790:	b083      	sub	sp, #12
 8003792:	af00      	add	r7, sp, #0
 8003794:	6078      	str	r0, [r7, #4]
 8003796:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	695b      	ldr	r3, [r3, #20]
 800379c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	431a      	orrs	r2, r3
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	615a      	str	r2, [r3, #20]
}
 80037a8:	bf00      	nop
 80037aa:	370c      	adds	r7, #12
 80037ac:	46bd      	mov	sp, r7
 80037ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b2:	4770      	bx	lr

080037b4 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80037b4:	b480      	push	{r7}
 80037b6:	b087      	sub	sp, #28
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	60f8      	str	r0, [r7, #12]
 80037bc:	60b9      	str	r1, [r7, #8]
 80037be:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	3330      	adds	r3, #48	@ 0x30
 80037c4:	461a      	mov	r2, r3
 80037c6:	68bb      	ldr	r3, [r7, #8]
 80037c8:	0a1b      	lsrs	r3, r3, #8
 80037ca:	009b      	lsls	r3, r3, #2
 80037cc:	f003 030c 	and.w	r3, r3, #12
 80037d0:	4413      	add	r3, r2
 80037d2:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80037d4:	697b      	ldr	r3, [r7, #20]
 80037d6:	681a      	ldr	r2, [r3, #0]
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	f003 031f 	and.w	r3, r3, #31
 80037de:	211f      	movs	r1, #31
 80037e0:	fa01 f303 	lsl.w	r3, r1, r3
 80037e4:	43db      	mvns	r3, r3
 80037e6:	401a      	ands	r2, r3
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	0e9b      	lsrs	r3, r3, #26
 80037ec:	f003 011f 	and.w	r1, r3, #31
 80037f0:	68bb      	ldr	r3, [r7, #8]
 80037f2:	f003 031f 	and.w	r3, r3, #31
 80037f6:	fa01 f303 	lsl.w	r3, r1, r3
 80037fa:	431a      	orrs	r2, r3
 80037fc:	697b      	ldr	r3, [r7, #20]
 80037fe:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003800:	bf00      	nop
 8003802:	371c      	adds	r7, #28
 8003804:	46bd      	mov	sp, r7
 8003806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380a:	4770      	bx	lr

0800380c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800380c:	b480      	push	{r7}
 800380e:	b087      	sub	sp, #28
 8003810:	af00      	add	r7, sp, #0
 8003812:	60f8      	str	r0, [r7, #12]
 8003814:	60b9      	str	r1, [r7, #8]
 8003816:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	3314      	adds	r3, #20
 800381c:	461a      	mov	r2, r3
 800381e:	68bb      	ldr	r3, [r7, #8]
 8003820:	0e5b      	lsrs	r3, r3, #25
 8003822:	009b      	lsls	r3, r3, #2
 8003824:	f003 0304 	and.w	r3, r3, #4
 8003828:	4413      	add	r3, r2
 800382a:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800382c:	697b      	ldr	r3, [r7, #20]
 800382e:	681a      	ldr	r2, [r3, #0]
 8003830:	68bb      	ldr	r3, [r7, #8]
 8003832:	0d1b      	lsrs	r3, r3, #20
 8003834:	f003 031f 	and.w	r3, r3, #31
 8003838:	2107      	movs	r1, #7
 800383a:	fa01 f303 	lsl.w	r3, r1, r3
 800383e:	43db      	mvns	r3, r3
 8003840:	401a      	ands	r2, r3
 8003842:	68bb      	ldr	r3, [r7, #8]
 8003844:	0d1b      	lsrs	r3, r3, #20
 8003846:	f003 031f 	and.w	r3, r3, #31
 800384a:	6879      	ldr	r1, [r7, #4]
 800384c:	fa01 f303 	lsl.w	r3, r1, r3
 8003850:	431a      	orrs	r2, r3
 8003852:	697b      	ldr	r3, [r7, #20]
 8003854:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003856:	bf00      	nop
 8003858:	371c      	adds	r7, #28
 800385a:	46bd      	mov	sp, r7
 800385c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003860:	4770      	bx	lr
	...

08003864 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003864:	b480      	push	{r7}
 8003866:	b085      	sub	sp, #20
 8003868:	af00      	add	r7, sp, #0
 800386a:	60f8      	str	r0, [r7, #12]
 800386c:	60b9      	str	r1, [r7, #8]
 800386e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8003876:	68bb      	ldr	r3, [r7, #8]
 8003878:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800387c:	43db      	mvns	r3, r3
 800387e:	401a      	ands	r2, r3
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	f003 0318 	and.w	r3, r3, #24
 8003886:	4908      	ldr	r1, [pc, #32]	@ (80038a8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003888:	40d9      	lsrs	r1, r3
 800388a:	68bb      	ldr	r3, [r7, #8]
 800388c:	400b      	ands	r3, r1
 800388e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003892:	431a      	orrs	r2, r3
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800389a:	bf00      	nop
 800389c:	3714      	adds	r7, #20
 800389e:	46bd      	mov	sp, r7
 80038a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a4:	4770      	bx	lr
 80038a6:	bf00      	nop
 80038a8:	0007ffff 	.word	0x0007ffff

080038ac <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80038ac:	b480      	push	{r7}
 80038ae:	b083      	sub	sp, #12
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	689b      	ldr	r3, [r3, #8]
 80038b8:	f003 031f 	and.w	r3, r3, #31
}
 80038bc:	4618      	mov	r0, r3
 80038be:	370c      	adds	r7, #12
 80038c0:	46bd      	mov	sp, r7
 80038c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c6:	4770      	bx	lr

080038c8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80038c8:	b480      	push	{r7}
 80038ca:	b083      	sub	sp, #12
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	689b      	ldr	r3, [r3, #8]
 80038d4:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80038d8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80038dc:	687a      	ldr	r2, [r7, #4]
 80038de:	6093      	str	r3, [r2, #8]
}
 80038e0:	bf00      	nop
 80038e2:	370c      	adds	r7, #12
 80038e4:	46bd      	mov	sp, r7
 80038e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ea:	4770      	bx	lr

080038ec <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80038ec:	b480      	push	{r7}
 80038ee:	b083      	sub	sp, #12
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	689b      	ldr	r3, [r3, #8]
 80038f8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80038fc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003900:	d101      	bne.n	8003906 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003902:	2301      	movs	r3, #1
 8003904:	e000      	b.n	8003908 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003906:	2300      	movs	r3, #0
}
 8003908:	4618      	mov	r0, r3
 800390a:	370c      	adds	r7, #12
 800390c:	46bd      	mov	sp, r7
 800390e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003912:	4770      	bx	lr

08003914 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003914:	b480      	push	{r7}
 8003916:	b083      	sub	sp, #12
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	689b      	ldr	r3, [r3, #8]
 8003920:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8003924:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003928:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003930:	bf00      	nop
 8003932:	370c      	adds	r7, #12
 8003934:	46bd      	mov	sp, r7
 8003936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393a:	4770      	bx	lr

0800393c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800393c:	b480      	push	{r7}
 800393e:	b083      	sub	sp, #12
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	689b      	ldr	r3, [r3, #8]
 8003948:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800394c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003950:	d101      	bne.n	8003956 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003952:	2301      	movs	r3, #1
 8003954:	e000      	b.n	8003958 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003956:	2300      	movs	r3, #0
}
 8003958:	4618      	mov	r0, r3
 800395a:	370c      	adds	r7, #12
 800395c:	46bd      	mov	sp, r7
 800395e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003962:	4770      	bx	lr

08003964 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003964:	b480      	push	{r7}
 8003966:	b083      	sub	sp, #12
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	689b      	ldr	r3, [r3, #8]
 8003970:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003974:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003978:	f043 0201 	orr.w	r2, r3, #1
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003980:	bf00      	nop
 8003982:	370c      	adds	r7, #12
 8003984:	46bd      	mov	sp, r7
 8003986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398a:	4770      	bx	lr

0800398c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800398c:	b480      	push	{r7}
 800398e:	b083      	sub	sp, #12
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	689b      	ldr	r3, [r3, #8]
 8003998:	f003 0301 	and.w	r3, r3, #1
 800399c:	2b01      	cmp	r3, #1
 800399e:	d101      	bne.n	80039a4 <LL_ADC_IsEnabled+0x18>
 80039a0:	2301      	movs	r3, #1
 80039a2:	e000      	b.n	80039a6 <LL_ADC_IsEnabled+0x1a>
 80039a4:	2300      	movs	r3, #0
}
 80039a6:	4618      	mov	r0, r3
 80039a8:	370c      	adds	r7, #12
 80039aa:	46bd      	mov	sp, r7
 80039ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b0:	4770      	bx	lr

080039b2 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80039b2:	b480      	push	{r7}
 80039b4:	b083      	sub	sp, #12
 80039b6:	af00      	add	r7, sp, #0
 80039b8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	689b      	ldr	r3, [r3, #8]
 80039be:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80039c2:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80039c6:	f043 0204 	orr.w	r2, r3, #4
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80039ce:	bf00      	nop
 80039d0:	370c      	adds	r7, #12
 80039d2:	46bd      	mov	sp, r7
 80039d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d8:	4770      	bx	lr

080039da <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80039da:	b480      	push	{r7}
 80039dc:	b083      	sub	sp, #12
 80039de:	af00      	add	r7, sp, #0
 80039e0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	689b      	ldr	r3, [r3, #8]
 80039e6:	f003 0304 	and.w	r3, r3, #4
 80039ea:	2b04      	cmp	r3, #4
 80039ec:	d101      	bne.n	80039f2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80039ee:	2301      	movs	r3, #1
 80039f0:	e000      	b.n	80039f4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80039f2:	2300      	movs	r3, #0
}
 80039f4:	4618      	mov	r0, r3
 80039f6:	370c      	adds	r7, #12
 80039f8:	46bd      	mov	sp, r7
 80039fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fe:	4770      	bx	lr

08003a00 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003a00:	b480      	push	{r7}
 8003a02:	b083      	sub	sp, #12
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	689b      	ldr	r3, [r3, #8]
 8003a0c:	f003 0308 	and.w	r3, r3, #8
 8003a10:	2b08      	cmp	r3, #8
 8003a12:	d101      	bne.n	8003a18 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003a14:	2301      	movs	r3, #1
 8003a16:	e000      	b.n	8003a1a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003a18:	2300      	movs	r3, #0
}
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	370c      	adds	r7, #12
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a24:	4770      	bx	lr
	...

08003a28 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003a28:	b590      	push	{r4, r7, lr}
 8003a2a:	b089      	sub	sp, #36	@ 0x24
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003a30:	2300      	movs	r3, #0
 8003a32:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8003a34:	2300      	movs	r3, #0
 8003a36:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d101      	bne.n	8003a42 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	e1a9      	b.n	8003d96 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	695b      	ldr	r3, [r3, #20]
 8003a46:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d109      	bne.n	8003a64 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003a50:	6878      	ldr	r0, [r7, #4]
 8003a52:	f7fd ffb1 	bl	80019b8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4618      	mov	r0, r3
 8003a6a:	f7ff ff3f 	bl	80038ec <LL_ADC_IsDeepPowerDownEnabled>
 8003a6e:	4603      	mov	r3, r0
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d004      	beq.n	8003a7e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4618      	mov	r0, r3
 8003a7a:	f7ff ff25 	bl	80038c8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4618      	mov	r0, r3
 8003a84:	f7ff ff5a 	bl	800393c <LL_ADC_IsInternalRegulatorEnabled>
 8003a88:	4603      	mov	r3, r0
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d115      	bne.n	8003aba <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4618      	mov	r0, r3
 8003a94:	f7ff ff3e 	bl	8003914 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003a98:	4b9c      	ldr	r3, [pc, #624]	@ (8003d0c <HAL_ADC_Init+0x2e4>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	099b      	lsrs	r3, r3, #6
 8003a9e:	4a9c      	ldr	r2, [pc, #624]	@ (8003d10 <HAL_ADC_Init+0x2e8>)
 8003aa0:	fba2 2303 	umull	r2, r3, r2, r3
 8003aa4:	099b      	lsrs	r3, r3, #6
 8003aa6:	3301      	adds	r3, #1
 8003aa8:	005b      	lsls	r3, r3, #1
 8003aaa:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003aac:	e002      	b.n	8003ab4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	3b01      	subs	r3, #1
 8003ab2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d1f9      	bne.n	8003aae <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4618      	mov	r0, r3
 8003ac0:	f7ff ff3c 	bl	800393c <LL_ADC_IsInternalRegulatorEnabled>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d10d      	bne.n	8003ae6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ace:	f043 0210 	orr.w	r2, r3, #16
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ada:	f043 0201 	orr.w	r2, r3, #1
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4618      	mov	r0, r3
 8003aec:	f7ff ff75 	bl	80039da <LL_ADC_REG_IsConversionOngoing>
 8003af0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003af6:	f003 0310 	and.w	r3, r3, #16
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	f040 8142 	bne.w	8003d84 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8003b00:	697b      	ldr	r3, [r7, #20]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	f040 813e 	bne.w	8003d84 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b0c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8003b10:	f043 0202 	orr.w	r2, r3, #2
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	f7ff ff35 	bl	800398c <LL_ADC_IsEnabled>
 8003b22:	4603      	mov	r3, r0
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d141      	bne.n	8003bac <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003b30:	d004      	beq.n	8003b3c <HAL_ADC_Init+0x114>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a77      	ldr	r2, [pc, #476]	@ (8003d14 <HAL_ADC_Init+0x2ec>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d10f      	bne.n	8003b5c <HAL_ADC_Init+0x134>
 8003b3c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003b40:	f7ff ff24 	bl	800398c <LL_ADC_IsEnabled>
 8003b44:	4604      	mov	r4, r0
 8003b46:	4873      	ldr	r0, [pc, #460]	@ (8003d14 <HAL_ADC_Init+0x2ec>)
 8003b48:	f7ff ff20 	bl	800398c <LL_ADC_IsEnabled>
 8003b4c:	4603      	mov	r3, r0
 8003b4e:	4323      	orrs	r3, r4
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	bf0c      	ite	eq
 8003b54:	2301      	moveq	r3, #1
 8003b56:	2300      	movne	r3, #0
 8003b58:	b2db      	uxtb	r3, r3
 8003b5a:	e012      	b.n	8003b82 <HAL_ADC_Init+0x15a>
 8003b5c:	486e      	ldr	r0, [pc, #440]	@ (8003d18 <HAL_ADC_Init+0x2f0>)
 8003b5e:	f7ff ff15 	bl	800398c <LL_ADC_IsEnabled>
 8003b62:	4604      	mov	r4, r0
 8003b64:	486d      	ldr	r0, [pc, #436]	@ (8003d1c <HAL_ADC_Init+0x2f4>)
 8003b66:	f7ff ff11 	bl	800398c <LL_ADC_IsEnabled>
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	431c      	orrs	r4, r3
 8003b6e:	486c      	ldr	r0, [pc, #432]	@ (8003d20 <HAL_ADC_Init+0x2f8>)
 8003b70:	f7ff ff0c 	bl	800398c <LL_ADC_IsEnabled>
 8003b74:	4603      	mov	r3, r0
 8003b76:	4323      	orrs	r3, r4
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	bf0c      	ite	eq
 8003b7c:	2301      	moveq	r3, #1
 8003b7e:	2300      	movne	r3, #0
 8003b80:	b2db      	uxtb	r3, r3
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d012      	beq.n	8003bac <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003b8e:	d004      	beq.n	8003b9a <HAL_ADC_Init+0x172>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a5f      	ldr	r2, [pc, #380]	@ (8003d14 <HAL_ADC_Init+0x2ec>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d101      	bne.n	8003b9e <HAL_ADC_Init+0x176>
 8003b9a:	4a62      	ldr	r2, [pc, #392]	@ (8003d24 <HAL_ADC_Init+0x2fc>)
 8003b9c:	e000      	b.n	8003ba0 <HAL_ADC_Init+0x178>
 8003b9e:	4a62      	ldr	r2, [pc, #392]	@ (8003d28 <HAL_ADC_Init+0x300>)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	4619      	mov	r1, r3
 8003ba6:	4610      	mov	r0, r2
 8003ba8:	f7ff fd32 	bl	8003610 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	7f5b      	ldrb	r3, [r3, #29]
 8003bb0:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003bb6:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8003bbc:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8003bc2:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003bca:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003bd6:	2b01      	cmp	r3, #1
 8003bd8:	d106      	bne.n	8003be8 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bde:	3b01      	subs	r3, #1
 8003be0:	045b      	lsls	r3, r3, #17
 8003be2:	69ba      	ldr	r2, [r7, #24]
 8003be4:	4313      	orrs	r3, r2
 8003be6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d009      	beq.n	8003c04 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bf4:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bfc:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003bfe:	69ba      	ldr	r2, [r7, #24]
 8003c00:	4313      	orrs	r3, r2
 8003c02:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	68da      	ldr	r2, [r3, #12]
 8003c0a:	4b48      	ldr	r3, [pc, #288]	@ (8003d2c <HAL_ADC_Init+0x304>)
 8003c0c:	4013      	ands	r3, r2
 8003c0e:	687a      	ldr	r2, [r7, #4]
 8003c10:	6812      	ldr	r2, [r2, #0]
 8003c12:	69b9      	ldr	r1, [r7, #24]
 8003c14:	430b      	orrs	r3, r1
 8003c16:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	691b      	ldr	r3, [r3, #16]
 8003c1e:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	430a      	orrs	r2, r1
 8003c2c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4618      	mov	r0, r3
 8003c34:	f7ff fee4 	bl	8003a00 <LL_ADC_INJ_IsConversionOngoing>
 8003c38:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003c3a:	697b      	ldr	r3, [r7, #20]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d17f      	bne.n	8003d40 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003c40:	693b      	ldr	r3, [r7, #16]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d17c      	bne.n	8003d40 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003c4a:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003c52:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003c54:	4313      	orrs	r3, r2
 8003c56:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	68db      	ldr	r3, [r3, #12]
 8003c5e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003c62:	f023 0302 	bic.w	r3, r3, #2
 8003c66:	687a      	ldr	r2, [r7, #4]
 8003c68:	6812      	ldr	r2, [r2, #0]
 8003c6a:	69b9      	ldr	r1, [r7, #24]
 8003c6c:	430b      	orrs	r3, r1
 8003c6e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	691b      	ldr	r3, [r3, #16]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d017      	beq.n	8003ca8 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	691a      	ldr	r2, [r3, #16]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8003c86:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003c90:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003c94:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003c98:	687a      	ldr	r2, [r7, #4]
 8003c9a:	6911      	ldr	r1, [r2, #16]
 8003c9c:	687a      	ldr	r2, [r7, #4]
 8003c9e:	6812      	ldr	r2, [r2, #0]
 8003ca0:	430b      	orrs	r3, r1
 8003ca2:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8003ca6:	e013      	b.n	8003cd0 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	691a      	ldr	r2, [r3, #16]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8003cb6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003cc0:	687a      	ldr	r2, [r7, #4]
 8003cc2:	6812      	ldr	r2, [r2, #0]
 8003cc4:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003cc8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003ccc:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003cd6:	2b01      	cmp	r3, #1
 8003cd8:	d12a      	bne.n	8003d30 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	691b      	ldr	r3, [r3, #16]
 8003ce0:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8003ce4:	f023 0304 	bic.w	r3, r3, #4
 8003ce8:	687a      	ldr	r2, [r7, #4]
 8003cea:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8003cec:	687a      	ldr	r2, [r7, #4]
 8003cee:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003cf0:	4311      	orrs	r1, r2
 8003cf2:	687a      	ldr	r2, [r7, #4]
 8003cf4:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003cf6:	4311      	orrs	r1, r2
 8003cf8:	687a      	ldr	r2, [r7, #4]
 8003cfa:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003cfc:	430a      	orrs	r2, r1
 8003cfe:	431a      	orrs	r2, r3
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f042 0201 	orr.w	r2, r2, #1
 8003d08:	611a      	str	r2, [r3, #16]
 8003d0a:	e019      	b.n	8003d40 <HAL_ADC_Init+0x318>
 8003d0c:	20000200 	.word	0x20000200
 8003d10:	053e2d63 	.word	0x053e2d63
 8003d14:	50000100 	.word	0x50000100
 8003d18:	50000400 	.word	0x50000400
 8003d1c:	50000500 	.word	0x50000500
 8003d20:	50000600 	.word	0x50000600
 8003d24:	50000300 	.word	0x50000300
 8003d28:	50000700 	.word	0x50000700
 8003d2c:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	691a      	ldr	r2, [r3, #16]
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f022 0201 	bic.w	r2, r2, #1
 8003d3e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	695b      	ldr	r3, [r3, #20]
 8003d44:	2b01      	cmp	r3, #1
 8003d46:	d10c      	bne.n	8003d62 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d4e:	f023 010f 	bic.w	r1, r3, #15
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6a1b      	ldr	r3, [r3, #32]
 8003d56:	1e5a      	subs	r2, r3, #1
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	430a      	orrs	r2, r1
 8003d5e:	631a      	str	r2, [r3, #48]	@ 0x30
 8003d60:	e007      	b.n	8003d72 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f022 020f 	bic.w	r2, r2, #15
 8003d70:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d76:	f023 0303 	bic.w	r3, r3, #3
 8003d7a:	f043 0201 	orr.w	r2, r3, #1
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003d82:	e007      	b.n	8003d94 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d88:	f043 0210 	orr.w	r2, r3, #16
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003d90:	2301      	movs	r3, #1
 8003d92:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003d94:	7ffb      	ldrb	r3, [r7, #31]
}
 8003d96:	4618      	mov	r0, r3
 8003d98:	3724      	adds	r7, #36	@ 0x24
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	bd90      	pop	{r4, r7, pc}
 8003d9e:	bf00      	nop

08003da0 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b086      	sub	sp, #24
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003db0:	d004      	beq.n	8003dbc <HAL_ADC_Start+0x1c>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4a67      	ldr	r2, [pc, #412]	@ (8003f54 <HAL_ADC_Start+0x1b4>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d101      	bne.n	8003dc0 <HAL_ADC_Start+0x20>
 8003dbc:	4b66      	ldr	r3, [pc, #408]	@ (8003f58 <HAL_ADC_Start+0x1b8>)
 8003dbe:	e000      	b.n	8003dc2 <HAL_ADC_Start+0x22>
 8003dc0:	4b66      	ldr	r3, [pc, #408]	@ (8003f5c <HAL_ADC_Start+0x1bc>)
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	f7ff fd72 	bl	80038ac <LL_ADC_GetMultimode>
 8003dc8:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4618      	mov	r0, r3
 8003dd0:	f7ff fe03 	bl	80039da <LL_ADC_REG_IsConversionOngoing>
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	f040 80b4 	bne.w	8003f44 <HAL_ADC_Start+0x1a4>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003de2:	2b01      	cmp	r3, #1
 8003de4:	d101      	bne.n	8003dea <HAL_ADC_Start+0x4a>
 8003de6:	2302      	movs	r3, #2
 8003de8:	e0af      	b.n	8003f4a <HAL_ADC_Start+0x1aa>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2201      	movs	r2, #1
 8003dee:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003df2:	6878      	ldr	r0, [r7, #4]
 8003df4:	f000 fd06 	bl	8004804 <ADC_Enable>
 8003df8:	4603      	mov	r3, r0
 8003dfa:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003dfc:	7dfb      	ldrb	r3, [r7, #23]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	f040 809b 	bne.w	8003f3a <HAL_ADC_Start+0x19a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e08:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003e0c:	f023 0301 	bic.w	r3, r3, #1
 8003e10:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a4d      	ldr	r2, [pc, #308]	@ (8003f54 <HAL_ADC_Start+0x1b4>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d009      	beq.n	8003e36 <HAL_ADC_Start+0x96>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4a4e      	ldr	r2, [pc, #312]	@ (8003f60 <HAL_ADC_Start+0x1c0>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d002      	beq.n	8003e32 <HAL_ADC_Start+0x92>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	e003      	b.n	8003e3a <HAL_ADC_Start+0x9a>
 8003e32:	4b4c      	ldr	r3, [pc, #304]	@ (8003f64 <HAL_ADC_Start+0x1c4>)
 8003e34:	e001      	b.n	8003e3a <HAL_ADC_Start+0x9a>
 8003e36:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003e3a:	687a      	ldr	r2, [r7, #4]
 8003e3c:	6812      	ldr	r2, [r2, #0]
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d002      	beq.n	8003e48 <HAL_ADC_Start+0xa8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003e42:	693b      	ldr	r3, [r7, #16]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d105      	bne.n	8003e54 <HAL_ADC_Start+0xb4>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e4c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e58:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003e5c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e60:	d106      	bne.n	8003e70 <HAL_ADC_Start+0xd0>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e66:	f023 0206 	bic.w	r2, r3, #6
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	661a      	str	r2, [r3, #96]	@ 0x60
 8003e6e:	e002      	b.n	8003e76 <HAL_ADC_Start+0xd6>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2200      	movs	r2, #0
 8003e74:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	221c      	movs	r2, #28
 8003e7c:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2200      	movs	r2, #0
 8003e82:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4a32      	ldr	r2, [pc, #200]	@ (8003f54 <HAL_ADC_Start+0x1b4>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d009      	beq.n	8003ea4 <HAL_ADC_Start+0x104>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4a32      	ldr	r2, [pc, #200]	@ (8003f60 <HAL_ADC_Start+0x1c0>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d002      	beq.n	8003ea0 <HAL_ADC_Start+0x100>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	e003      	b.n	8003ea8 <HAL_ADC_Start+0x108>
 8003ea0:	4b30      	ldr	r3, [pc, #192]	@ (8003f64 <HAL_ADC_Start+0x1c4>)
 8003ea2:	e001      	b.n	8003ea8 <HAL_ADC_Start+0x108>
 8003ea4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003ea8:	687a      	ldr	r2, [r7, #4]
 8003eaa:	6812      	ldr	r2, [r2, #0]
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d008      	beq.n	8003ec2 <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003eb0:	693b      	ldr	r3, [r7, #16]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d005      	beq.n	8003ec2 <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003eb6:	693b      	ldr	r3, [r7, #16]
 8003eb8:	2b05      	cmp	r3, #5
 8003eba:	d002      	beq.n	8003ec2 <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003ebc:	693b      	ldr	r3, [r7, #16]
 8003ebe:	2b09      	cmp	r3, #9
 8003ec0:	d114      	bne.n	8003eec <HAL_ADC_Start+0x14c>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	68db      	ldr	r3, [r3, #12]
 8003ec8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d007      	beq.n	8003ee0 <HAL_ADC_Start+0x140>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ed4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003ed8:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	f7ff fd64 	bl	80039b2 <LL_ADC_REG_StartConversion>
 8003eea:	e02d      	b.n	8003f48 <HAL_ADC_Start+0x1a8>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ef0:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4a15      	ldr	r2, [pc, #84]	@ (8003f54 <HAL_ADC_Start+0x1b4>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d009      	beq.n	8003f16 <HAL_ADC_Start+0x176>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4a16      	ldr	r2, [pc, #88]	@ (8003f60 <HAL_ADC_Start+0x1c0>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d002      	beq.n	8003f12 <HAL_ADC_Start+0x172>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	e003      	b.n	8003f1a <HAL_ADC_Start+0x17a>
 8003f12:	4b14      	ldr	r3, [pc, #80]	@ (8003f64 <HAL_ADC_Start+0x1c4>)
 8003f14:	e001      	b.n	8003f1a <HAL_ADC_Start+0x17a>
 8003f16:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003f1a:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	68db      	ldr	r3, [r3, #12]
 8003f20:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d00f      	beq.n	8003f48 <HAL_ADC_Start+0x1a8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f2c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003f30:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003f38:	e006      	b.n	8003f48 <HAL_ADC_Start+0x1a8>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8003f42:	e001      	b.n	8003f48 <HAL_ADC_Start+0x1a8>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003f44:	2302      	movs	r3, #2
 8003f46:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003f48:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	3718      	adds	r7, #24
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bd80      	pop	{r7, pc}
 8003f52:	bf00      	nop
 8003f54:	50000100 	.word	0x50000100
 8003f58:	50000300 	.word	0x50000300
 8003f5c:	50000700 	.word	0x50000700
 8003f60:	50000500 	.word	0x50000500
 8003f64:	50000400 	.word	0x50000400

08003f68 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b083      	sub	sp, #12
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8003f76:	4618      	mov	r0, r3
 8003f78:	370c      	adds	r7, #12
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f80:	4770      	bx	lr
	...

08003f84 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b0b6      	sub	sp, #216	@ 0xd8
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
 8003f8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003f8e:	2300      	movs	r3, #0
 8003f90:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003f94:	2300      	movs	r3, #0
 8003f96:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003f9e:	2b01      	cmp	r3, #1
 8003fa0:	d102      	bne.n	8003fa8 <HAL_ADC_ConfigChannel+0x24>
 8003fa2:	2302      	movs	r3, #2
 8003fa4:	f000 bc13 	b.w	80047ce <HAL_ADC_ConfigChannel+0x84a>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2201      	movs	r2, #1
 8003fac:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	f7ff fd10 	bl	80039da <LL_ADC_REG_IsConversionOngoing>
 8003fba:	4603      	mov	r3, r0
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	f040 83f3 	bne.w	80047a8 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6818      	ldr	r0, [r3, #0]
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	6859      	ldr	r1, [r3, #4]
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	461a      	mov	r2, r3
 8003fd0:	f7ff fbf0 	bl	80037b4 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4618      	mov	r0, r3
 8003fda:	f7ff fcfe 	bl	80039da <LL_ADC_REG_IsConversionOngoing>
 8003fde:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	f7ff fd0a 	bl	8003a00 <LL_ADC_INJ_IsConversionOngoing>
 8003fec:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003ff0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	f040 81d9 	bne.w	80043ac <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003ffa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	f040 81d4 	bne.w	80043ac <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	689b      	ldr	r3, [r3, #8]
 8004008:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800400c:	d10f      	bne.n	800402e <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6818      	ldr	r0, [r3, #0]
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	2200      	movs	r2, #0
 8004018:	4619      	mov	r1, r3
 800401a:	f7ff fbf7 	bl	800380c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8004026:	4618      	mov	r0, r3
 8004028:	f7ff fbb1 	bl	800378e <LL_ADC_SetSamplingTimeCommonConfig>
 800402c:	e00e      	b.n	800404c <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6818      	ldr	r0, [r3, #0]
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	6819      	ldr	r1, [r3, #0]
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	689b      	ldr	r3, [r3, #8]
 800403a:	461a      	mov	r2, r3
 800403c:	f7ff fbe6 	bl	800380c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	2100      	movs	r1, #0
 8004046:	4618      	mov	r0, r3
 8004048:	f7ff fba1 	bl	800378e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	695a      	ldr	r2, [r3, #20]
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	68db      	ldr	r3, [r3, #12]
 8004056:	08db      	lsrs	r3, r3, #3
 8004058:	f003 0303 	and.w	r3, r3, #3
 800405c:	005b      	lsls	r3, r3, #1
 800405e:	fa02 f303 	lsl.w	r3, r2, r3
 8004062:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	691b      	ldr	r3, [r3, #16]
 800406a:	2b04      	cmp	r3, #4
 800406c:	d022      	beq.n	80040b4 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6818      	ldr	r0, [r3, #0]
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	6919      	ldr	r1, [r3, #16]
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	681a      	ldr	r2, [r3, #0]
 800407a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800407e:	f7ff fafb 	bl	8003678 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6818      	ldr	r0, [r3, #0]
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	6919      	ldr	r1, [r3, #16]
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	699b      	ldr	r3, [r3, #24]
 800408e:	461a      	mov	r2, r3
 8004090:	f7ff fb47 	bl	8003722 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6818      	ldr	r0, [r3, #0]
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80040a0:	2b01      	cmp	r3, #1
 80040a2:	d102      	bne.n	80040aa <HAL_ADC_ConfigChannel+0x126>
 80040a4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80040a8:	e000      	b.n	80040ac <HAL_ADC_ConfigChannel+0x128>
 80040aa:	2300      	movs	r3, #0
 80040ac:	461a      	mov	r2, r3
 80040ae:	f7ff fb53 	bl	8003758 <LL_ADC_SetOffsetSaturation>
 80040b2:	e17b      	b.n	80043ac <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	2100      	movs	r1, #0
 80040ba:	4618      	mov	r0, r3
 80040bc:	f7ff fb00 	bl	80036c0 <LL_ADC_GetOffsetChannel>
 80040c0:	4603      	mov	r3, r0
 80040c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d10a      	bne.n	80040e0 <HAL_ADC_ConfigChannel+0x15c>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	2100      	movs	r1, #0
 80040d0:	4618      	mov	r0, r3
 80040d2:	f7ff faf5 	bl	80036c0 <LL_ADC_GetOffsetChannel>
 80040d6:	4603      	mov	r3, r0
 80040d8:	0e9b      	lsrs	r3, r3, #26
 80040da:	f003 021f 	and.w	r2, r3, #31
 80040de:	e01e      	b.n	800411e <HAL_ADC_ConfigChannel+0x19a>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	2100      	movs	r1, #0
 80040e6:	4618      	mov	r0, r3
 80040e8:	f7ff faea 	bl	80036c0 <LL_ADC_GetOffsetChannel>
 80040ec:	4603      	mov	r3, r0
 80040ee:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040f2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80040f6:	fa93 f3a3 	rbit	r3, r3
 80040fa:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80040fe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004102:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004106:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800410a:	2b00      	cmp	r3, #0
 800410c:	d101      	bne.n	8004112 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 800410e:	2320      	movs	r3, #32
 8004110:	e004      	b.n	800411c <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8004112:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004116:	fab3 f383 	clz	r3, r3
 800411a:	b2db      	uxtb	r3, r3
 800411c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004126:	2b00      	cmp	r3, #0
 8004128:	d105      	bne.n	8004136 <HAL_ADC_ConfigChannel+0x1b2>
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	0e9b      	lsrs	r3, r3, #26
 8004130:	f003 031f 	and.w	r3, r3, #31
 8004134:	e018      	b.n	8004168 <HAL_ADC_ConfigChannel+0x1e4>
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800413e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004142:	fa93 f3a3 	rbit	r3, r3
 8004146:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 800414a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800414e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8004152:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004156:	2b00      	cmp	r3, #0
 8004158:	d101      	bne.n	800415e <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 800415a:	2320      	movs	r3, #32
 800415c:	e004      	b.n	8004168 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 800415e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004162:	fab3 f383 	clz	r3, r3
 8004166:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004168:	429a      	cmp	r2, r3
 800416a:	d106      	bne.n	800417a <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	2200      	movs	r2, #0
 8004172:	2100      	movs	r1, #0
 8004174:	4618      	mov	r0, r3
 8004176:	f7ff fab9 	bl	80036ec <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	2101      	movs	r1, #1
 8004180:	4618      	mov	r0, r3
 8004182:	f7ff fa9d 	bl	80036c0 <LL_ADC_GetOffsetChannel>
 8004186:	4603      	mov	r3, r0
 8004188:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800418c:	2b00      	cmp	r3, #0
 800418e:	d10a      	bne.n	80041a6 <HAL_ADC_ConfigChannel+0x222>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	2101      	movs	r1, #1
 8004196:	4618      	mov	r0, r3
 8004198:	f7ff fa92 	bl	80036c0 <LL_ADC_GetOffsetChannel>
 800419c:	4603      	mov	r3, r0
 800419e:	0e9b      	lsrs	r3, r3, #26
 80041a0:	f003 021f 	and.w	r2, r3, #31
 80041a4:	e01e      	b.n	80041e4 <HAL_ADC_ConfigChannel+0x260>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	2101      	movs	r1, #1
 80041ac:	4618      	mov	r0, r3
 80041ae:	f7ff fa87 	bl	80036c0 <LL_ADC_GetOffsetChannel>
 80041b2:	4603      	mov	r3, r0
 80041b4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041b8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80041bc:	fa93 f3a3 	rbit	r3, r3
 80041c0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 80041c4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80041c8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 80041cc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d101      	bne.n	80041d8 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 80041d4:	2320      	movs	r3, #32
 80041d6:	e004      	b.n	80041e2 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 80041d8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80041dc:	fab3 f383 	clz	r3, r3
 80041e0:	b2db      	uxtb	r3, r3
 80041e2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d105      	bne.n	80041fc <HAL_ADC_ConfigChannel+0x278>
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	0e9b      	lsrs	r3, r3, #26
 80041f6:	f003 031f 	and.w	r3, r3, #31
 80041fa:	e018      	b.n	800422e <HAL_ADC_ConfigChannel+0x2aa>
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004204:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004208:	fa93 f3a3 	rbit	r3, r3
 800420c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8004210:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004214:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8004218:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800421c:	2b00      	cmp	r3, #0
 800421e:	d101      	bne.n	8004224 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8004220:	2320      	movs	r3, #32
 8004222:	e004      	b.n	800422e <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8004224:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004228:	fab3 f383 	clz	r3, r3
 800422c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800422e:	429a      	cmp	r2, r3
 8004230:	d106      	bne.n	8004240 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	2200      	movs	r2, #0
 8004238:	2101      	movs	r1, #1
 800423a:	4618      	mov	r0, r3
 800423c:	f7ff fa56 	bl	80036ec <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	2102      	movs	r1, #2
 8004246:	4618      	mov	r0, r3
 8004248:	f7ff fa3a 	bl	80036c0 <LL_ADC_GetOffsetChannel>
 800424c:	4603      	mov	r3, r0
 800424e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004252:	2b00      	cmp	r3, #0
 8004254:	d10a      	bne.n	800426c <HAL_ADC_ConfigChannel+0x2e8>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	2102      	movs	r1, #2
 800425c:	4618      	mov	r0, r3
 800425e:	f7ff fa2f 	bl	80036c0 <LL_ADC_GetOffsetChannel>
 8004262:	4603      	mov	r3, r0
 8004264:	0e9b      	lsrs	r3, r3, #26
 8004266:	f003 021f 	and.w	r2, r3, #31
 800426a:	e01e      	b.n	80042aa <HAL_ADC_ConfigChannel+0x326>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	2102      	movs	r1, #2
 8004272:	4618      	mov	r0, r3
 8004274:	f7ff fa24 	bl	80036c0 <LL_ADC_GetOffsetChannel>
 8004278:	4603      	mov	r3, r0
 800427a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800427e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004282:	fa93 f3a3 	rbit	r3, r3
 8004286:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 800428a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800428e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8004292:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004296:	2b00      	cmp	r3, #0
 8004298:	d101      	bne.n	800429e <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 800429a:	2320      	movs	r3, #32
 800429c:	e004      	b.n	80042a8 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 800429e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80042a2:	fab3 f383 	clz	r3, r3
 80042a6:	b2db      	uxtb	r3, r3
 80042a8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d105      	bne.n	80042c2 <HAL_ADC_ConfigChannel+0x33e>
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	0e9b      	lsrs	r3, r3, #26
 80042bc:	f003 031f 	and.w	r3, r3, #31
 80042c0:	e016      	b.n	80042f0 <HAL_ADC_ConfigChannel+0x36c>
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042ca:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80042ce:	fa93 f3a3 	rbit	r3, r3
 80042d2:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 80042d4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80042d6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 80042da:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d101      	bne.n	80042e6 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 80042e2:	2320      	movs	r3, #32
 80042e4:	e004      	b.n	80042f0 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 80042e6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80042ea:	fab3 f383 	clz	r3, r3
 80042ee:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80042f0:	429a      	cmp	r2, r3
 80042f2:	d106      	bne.n	8004302 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	2200      	movs	r2, #0
 80042fa:	2102      	movs	r1, #2
 80042fc:	4618      	mov	r0, r3
 80042fe:	f7ff f9f5 	bl	80036ec <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	2103      	movs	r1, #3
 8004308:	4618      	mov	r0, r3
 800430a:	f7ff f9d9 	bl	80036c0 <LL_ADC_GetOffsetChannel>
 800430e:	4603      	mov	r3, r0
 8004310:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004314:	2b00      	cmp	r3, #0
 8004316:	d10a      	bne.n	800432e <HAL_ADC_ConfigChannel+0x3aa>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	2103      	movs	r1, #3
 800431e:	4618      	mov	r0, r3
 8004320:	f7ff f9ce 	bl	80036c0 <LL_ADC_GetOffsetChannel>
 8004324:	4603      	mov	r3, r0
 8004326:	0e9b      	lsrs	r3, r3, #26
 8004328:	f003 021f 	and.w	r2, r3, #31
 800432c:	e017      	b.n	800435e <HAL_ADC_ConfigChannel+0x3da>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	2103      	movs	r1, #3
 8004334:	4618      	mov	r0, r3
 8004336:	f7ff f9c3 	bl	80036c0 <LL_ADC_GetOffsetChannel>
 800433a:	4603      	mov	r3, r0
 800433c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800433e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004340:	fa93 f3a3 	rbit	r3, r3
 8004344:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8004346:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004348:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 800434a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800434c:	2b00      	cmp	r3, #0
 800434e:	d101      	bne.n	8004354 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8004350:	2320      	movs	r3, #32
 8004352:	e003      	b.n	800435c <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8004354:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004356:	fab3 f383 	clz	r3, r3
 800435a:	b2db      	uxtb	r3, r3
 800435c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004366:	2b00      	cmp	r3, #0
 8004368:	d105      	bne.n	8004376 <HAL_ADC_ConfigChannel+0x3f2>
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	0e9b      	lsrs	r3, r3, #26
 8004370:	f003 031f 	and.w	r3, r3, #31
 8004374:	e011      	b.n	800439a <HAL_ADC_ConfigChannel+0x416>
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800437c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800437e:	fa93 f3a3 	rbit	r3, r3
 8004382:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8004384:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004386:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8004388:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800438a:	2b00      	cmp	r3, #0
 800438c:	d101      	bne.n	8004392 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 800438e:	2320      	movs	r3, #32
 8004390:	e003      	b.n	800439a <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8004392:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004394:	fab3 f383 	clz	r3, r3
 8004398:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800439a:	429a      	cmp	r2, r3
 800439c:	d106      	bne.n	80043ac <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	2200      	movs	r2, #0
 80043a4:	2103      	movs	r1, #3
 80043a6:	4618      	mov	r0, r3
 80043a8:	f7ff f9a0 	bl	80036ec <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4618      	mov	r0, r3
 80043b2:	f7ff faeb 	bl	800398c <LL_ADC_IsEnabled>
 80043b6:	4603      	mov	r3, r0
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	f040 813d 	bne.w	8004638 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6818      	ldr	r0, [r3, #0]
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	6819      	ldr	r1, [r3, #0]
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	68db      	ldr	r3, [r3, #12]
 80043ca:	461a      	mov	r2, r3
 80043cc:	f7ff fa4a 	bl	8003864 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	68db      	ldr	r3, [r3, #12]
 80043d4:	4aa2      	ldr	r2, [pc, #648]	@ (8004660 <HAL_ADC_ConfigChannel+0x6dc>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	f040 812e 	bne.w	8004638 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d10b      	bne.n	8004404 <HAL_ADC_ConfigChannel+0x480>
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	0e9b      	lsrs	r3, r3, #26
 80043f2:	3301      	adds	r3, #1
 80043f4:	f003 031f 	and.w	r3, r3, #31
 80043f8:	2b09      	cmp	r3, #9
 80043fa:	bf94      	ite	ls
 80043fc:	2301      	movls	r3, #1
 80043fe:	2300      	movhi	r3, #0
 8004400:	b2db      	uxtb	r3, r3
 8004402:	e019      	b.n	8004438 <HAL_ADC_ConfigChannel+0x4b4>
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800440a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800440c:	fa93 f3a3 	rbit	r3, r3
 8004410:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8004412:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004414:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8004416:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004418:	2b00      	cmp	r3, #0
 800441a:	d101      	bne.n	8004420 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 800441c:	2320      	movs	r3, #32
 800441e:	e003      	b.n	8004428 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8004420:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004422:	fab3 f383 	clz	r3, r3
 8004426:	b2db      	uxtb	r3, r3
 8004428:	3301      	adds	r3, #1
 800442a:	f003 031f 	and.w	r3, r3, #31
 800442e:	2b09      	cmp	r3, #9
 8004430:	bf94      	ite	ls
 8004432:	2301      	movls	r3, #1
 8004434:	2300      	movhi	r3, #0
 8004436:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004438:	2b00      	cmp	r3, #0
 800443a:	d079      	beq.n	8004530 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004444:	2b00      	cmp	r3, #0
 8004446:	d107      	bne.n	8004458 <HAL_ADC_ConfigChannel+0x4d4>
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	0e9b      	lsrs	r3, r3, #26
 800444e:	3301      	adds	r3, #1
 8004450:	069b      	lsls	r3, r3, #26
 8004452:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004456:	e015      	b.n	8004484 <HAL_ADC_ConfigChannel+0x500>
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800445e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004460:	fa93 f3a3 	rbit	r3, r3
 8004464:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8004466:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004468:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 800446a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800446c:	2b00      	cmp	r3, #0
 800446e:	d101      	bne.n	8004474 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8004470:	2320      	movs	r3, #32
 8004472:	e003      	b.n	800447c <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8004474:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004476:	fab3 f383 	clz	r3, r3
 800447a:	b2db      	uxtb	r3, r3
 800447c:	3301      	adds	r3, #1
 800447e:	069b      	lsls	r3, r3, #26
 8004480:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800448c:	2b00      	cmp	r3, #0
 800448e:	d109      	bne.n	80044a4 <HAL_ADC_ConfigChannel+0x520>
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	0e9b      	lsrs	r3, r3, #26
 8004496:	3301      	adds	r3, #1
 8004498:	f003 031f 	and.w	r3, r3, #31
 800449c:	2101      	movs	r1, #1
 800449e:	fa01 f303 	lsl.w	r3, r1, r3
 80044a2:	e017      	b.n	80044d4 <HAL_ADC_ConfigChannel+0x550>
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80044ac:	fa93 f3a3 	rbit	r3, r3
 80044b0:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 80044b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80044b4:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 80044b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d101      	bne.n	80044c0 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 80044bc:	2320      	movs	r3, #32
 80044be:	e003      	b.n	80044c8 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 80044c0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80044c2:	fab3 f383 	clz	r3, r3
 80044c6:	b2db      	uxtb	r3, r3
 80044c8:	3301      	adds	r3, #1
 80044ca:	f003 031f 	and.w	r3, r3, #31
 80044ce:	2101      	movs	r1, #1
 80044d0:	fa01 f303 	lsl.w	r3, r1, r3
 80044d4:	ea42 0103 	orr.w	r1, r2, r3
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d10a      	bne.n	80044fa <HAL_ADC_ConfigChannel+0x576>
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	0e9b      	lsrs	r3, r3, #26
 80044ea:	3301      	adds	r3, #1
 80044ec:	f003 021f 	and.w	r2, r3, #31
 80044f0:	4613      	mov	r3, r2
 80044f2:	005b      	lsls	r3, r3, #1
 80044f4:	4413      	add	r3, r2
 80044f6:	051b      	lsls	r3, r3, #20
 80044f8:	e018      	b.n	800452c <HAL_ADC_ConfigChannel+0x5a8>
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004500:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004502:	fa93 f3a3 	rbit	r3, r3
 8004506:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8004508:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800450a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 800450c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800450e:	2b00      	cmp	r3, #0
 8004510:	d101      	bne.n	8004516 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8004512:	2320      	movs	r3, #32
 8004514:	e003      	b.n	800451e <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8004516:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004518:	fab3 f383 	clz	r3, r3
 800451c:	b2db      	uxtb	r3, r3
 800451e:	3301      	adds	r3, #1
 8004520:	f003 021f 	and.w	r2, r3, #31
 8004524:	4613      	mov	r3, r2
 8004526:	005b      	lsls	r3, r3, #1
 8004528:	4413      	add	r3, r2
 800452a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800452c:	430b      	orrs	r3, r1
 800452e:	e07e      	b.n	800462e <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004538:	2b00      	cmp	r3, #0
 800453a:	d107      	bne.n	800454c <HAL_ADC_ConfigChannel+0x5c8>
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	0e9b      	lsrs	r3, r3, #26
 8004542:	3301      	adds	r3, #1
 8004544:	069b      	lsls	r3, r3, #26
 8004546:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800454a:	e015      	b.n	8004578 <HAL_ADC_ConfigChannel+0x5f4>
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004552:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004554:	fa93 f3a3 	rbit	r3, r3
 8004558:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 800455a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800455c:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 800455e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004560:	2b00      	cmp	r3, #0
 8004562:	d101      	bne.n	8004568 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8004564:	2320      	movs	r3, #32
 8004566:	e003      	b.n	8004570 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8004568:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800456a:	fab3 f383 	clz	r3, r3
 800456e:	b2db      	uxtb	r3, r3
 8004570:	3301      	adds	r3, #1
 8004572:	069b      	lsls	r3, r3, #26
 8004574:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004580:	2b00      	cmp	r3, #0
 8004582:	d109      	bne.n	8004598 <HAL_ADC_ConfigChannel+0x614>
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	0e9b      	lsrs	r3, r3, #26
 800458a:	3301      	adds	r3, #1
 800458c:	f003 031f 	and.w	r3, r3, #31
 8004590:	2101      	movs	r1, #1
 8004592:	fa01 f303 	lsl.w	r3, r1, r3
 8004596:	e017      	b.n	80045c8 <HAL_ADC_ConfigChannel+0x644>
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800459e:	6a3b      	ldr	r3, [r7, #32]
 80045a0:	fa93 f3a3 	rbit	r3, r3
 80045a4:	61fb      	str	r3, [r7, #28]
  return result;
 80045a6:	69fb      	ldr	r3, [r7, #28]
 80045a8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80045aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d101      	bne.n	80045b4 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 80045b0:	2320      	movs	r3, #32
 80045b2:	e003      	b.n	80045bc <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 80045b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045b6:	fab3 f383 	clz	r3, r3
 80045ba:	b2db      	uxtb	r3, r3
 80045bc:	3301      	adds	r3, #1
 80045be:	f003 031f 	and.w	r3, r3, #31
 80045c2:	2101      	movs	r1, #1
 80045c4:	fa01 f303 	lsl.w	r3, r1, r3
 80045c8:	ea42 0103 	orr.w	r1, r2, r3
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d10d      	bne.n	80045f4 <HAL_ADC_ConfigChannel+0x670>
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	0e9b      	lsrs	r3, r3, #26
 80045de:	3301      	adds	r3, #1
 80045e0:	f003 021f 	and.w	r2, r3, #31
 80045e4:	4613      	mov	r3, r2
 80045e6:	005b      	lsls	r3, r3, #1
 80045e8:	4413      	add	r3, r2
 80045ea:	3b1e      	subs	r3, #30
 80045ec:	051b      	lsls	r3, r3, #20
 80045ee:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80045f2:	e01b      	b.n	800462c <HAL_ADC_ConfigChannel+0x6a8>
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045fa:	697b      	ldr	r3, [r7, #20]
 80045fc:	fa93 f3a3 	rbit	r3, r3
 8004600:	613b      	str	r3, [r7, #16]
  return result;
 8004602:	693b      	ldr	r3, [r7, #16]
 8004604:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004606:	69bb      	ldr	r3, [r7, #24]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d101      	bne.n	8004610 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 800460c:	2320      	movs	r3, #32
 800460e:	e003      	b.n	8004618 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8004610:	69bb      	ldr	r3, [r7, #24]
 8004612:	fab3 f383 	clz	r3, r3
 8004616:	b2db      	uxtb	r3, r3
 8004618:	3301      	adds	r3, #1
 800461a:	f003 021f 	and.w	r2, r3, #31
 800461e:	4613      	mov	r3, r2
 8004620:	005b      	lsls	r3, r3, #1
 8004622:	4413      	add	r3, r2
 8004624:	3b1e      	subs	r3, #30
 8004626:	051b      	lsls	r3, r3, #20
 8004628:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800462c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800462e:	683a      	ldr	r2, [r7, #0]
 8004630:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004632:	4619      	mov	r1, r3
 8004634:	f7ff f8ea 	bl	800380c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	681a      	ldr	r2, [r3, #0]
 800463c:	4b09      	ldr	r3, [pc, #36]	@ (8004664 <HAL_ADC_ConfigChannel+0x6e0>)
 800463e:	4013      	ands	r3, r2
 8004640:	2b00      	cmp	r3, #0
 8004642:	f000 80be 	beq.w	80047c2 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800464e:	d004      	beq.n	800465a <HAL_ADC_ConfigChannel+0x6d6>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4a04      	ldr	r2, [pc, #16]	@ (8004668 <HAL_ADC_ConfigChannel+0x6e4>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d10a      	bne.n	8004670 <HAL_ADC_ConfigChannel+0x6ec>
 800465a:	4b04      	ldr	r3, [pc, #16]	@ (800466c <HAL_ADC_ConfigChannel+0x6e8>)
 800465c:	e009      	b.n	8004672 <HAL_ADC_ConfigChannel+0x6ee>
 800465e:	bf00      	nop
 8004660:	407f0000 	.word	0x407f0000
 8004664:	80080000 	.word	0x80080000
 8004668:	50000100 	.word	0x50000100
 800466c:	50000300 	.word	0x50000300
 8004670:	4b59      	ldr	r3, [pc, #356]	@ (80047d8 <HAL_ADC_ConfigChannel+0x854>)
 8004672:	4618      	mov	r0, r3
 8004674:	f7fe fff2 	bl	800365c <LL_ADC_GetCommonPathInternalCh>
 8004678:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4a56      	ldr	r2, [pc, #344]	@ (80047dc <HAL_ADC_ConfigChannel+0x858>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d004      	beq.n	8004690 <HAL_ADC_ConfigChannel+0x70c>
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	4a55      	ldr	r2, [pc, #340]	@ (80047e0 <HAL_ADC_ConfigChannel+0x85c>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d13a      	bne.n	8004706 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004690:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004694:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004698:	2b00      	cmp	r3, #0
 800469a:	d134      	bne.n	8004706 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80046a4:	d005      	beq.n	80046b2 <HAL_ADC_ConfigChannel+0x72e>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4a4e      	ldr	r2, [pc, #312]	@ (80047e4 <HAL_ADC_ConfigChannel+0x860>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	f040 8085 	bne.w	80047bc <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80046ba:	d004      	beq.n	80046c6 <HAL_ADC_ConfigChannel+0x742>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a49      	ldr	r2, [pc, #292]	@ (80047e8 <HAL_ADC_ConfigChannel+0x864>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d101      	bne.n	80046ca <HAL_ADC_ConfigChannel+0x746>
 80046c6:	4a49      	ldr	r2, [pc, #292]	@ (80047ec <HAL_ADC_ConfigChannel+0x868>)
 80046c8:	e000      	b.n	80046cc <HAL_ADC_ConfigChannel+0x748>
 80046ca:	4a43      	ldr	r2, [pc, #268]	@ (80047d8 <HAL_ADC_ConfigChannel+0x854>)
 80046cc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80046d0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80046d4:	4619      	mov	r1, r3
 80046d6:	4610      	mov	r0, r2
 80046d8:	f7fe ffad 	bl	8003636 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80046dc:	4b44      	ldr	r3, [pc, #272]	@ (80047f0 <HAL_ADC_ConfigChannel+0x86c>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	099b      	lsrs	r3, r3, #6
 80046e2:	4a44      	ldr	r2, [pc, #272]	@ (80047f4 <HAL_ADC_ConfigChannel+0x870>)
 80046e4:	fba2 2303 	umull	r2, r3, r2, r3
 80046e8:	099b      	lsrs	r3, r3, #6
 80046ea:	1c5a      	adds	r2, r3, #1
 80046ec:	4613      	mov	r3, r2
 80046ee:	005b      	lsls	r3, r3, #1
 80046f0:	4413      	add	r3, r2
 80046f2:	009b      	lsls	r3, r3, #2
 80046f4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80046f6:	e002      	b.n	80046fe <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	3b01      	subs	r3, #1
 80046fc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d1f9      	bne.n	80046f8 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004704:	e05a      	b.n	80047bc <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4a3b      	ldr	r2, [pc, #236]	@ (80047f8 <HAL_ADC_ConfigChannel+0x874>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d125      	bne.n	800475c <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004710:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004714:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004718:	2b00      	cmp	r3, #0
 800471a:	d11f      	bne.n	800475c <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a31      	ldr	r2, [pc, #196]	@ (80047e8 <HAL_ADC_ConfigChannel+0x864>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d104      	bne.n	8004730 <HAL_ADC_ConfigChannel+0x7ac>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4a34      	ldr	r2, [pc, #208]	@ (80047fc <HAL_ADC_ConfigChannel+0x878>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d047      	beq.n	80047c0 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004738:	d004      	beq.n	8004744 <HAL_ADC_ConfigChannel+0x7c0>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4a2a      	ldr	r2, [pc, #168]	@ (80047e8 <HAL_ADC_ConfigChannel+0x864>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d101      	bne.n	8004748 <HAL_ADC_ConfigChannel+0x7c4>
 8004744:	4a29      	ldr	r2, [pc, #164]	@ (80047ec <HAL_ADC_ConfigChannel+0x868>)
 8004746:	e000      	b.n	800474a <HAL_ADC_ConfigChannel+0x7c6>
 8004748:	4a23      	ldr	r2, [pc, #140]	@ (80047d8 <HAL_ADC_ConfigChannel+0x854>)
 800474a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800474e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004752:	4619      	mov	r1, r3
 8004754:	4610      	mov	r0, r2
 8004756:	f7fe ff6e 	bl	8003636 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800475a:	e031      	b.n	80047c0 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4a27      	ldr	r2, [pc, #156]	@ (8004800 <HAL_ADC_ConfigChannel+0x87c>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d12d      	bne.n	80047c2 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004766:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800476a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800476e:	2b00      	cmp	r3, #0
 8004770:	d127      	bne.n	80047c2 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4a1c      	ldr	r2, [pc, #112]	@ (80047e8 <HAL_ADC_ConfigChannel+0x864>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d022      	beq.n	80047c2 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004784:	d004      	beq.n	8004790 <HAL_ADC_ConfigChannel+0x80c>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4a17      	ldr	r2, [pc, #92]	@ (80047e8 <HAL_ADC_ConfigChannel+0x864>)
 800478c:	4293      	cmp	r3, r2
 800478e:	d101      	bne.n	8004794 <HAL_ADC_ConfigChannel+0x810>
 8004790:	4a16      	ldr	r2, [pc, #88]	@ (80047ec <HAL_ADC_ConfigChannel+0x868>)
 8004792:	e000      	b.n	8004796 <HAL_ADC_ConfigChannel+0x812>
 8004794:	4a10      	ldr	r2, [pc, #64]	@ (80047d8 <HAL_ADC_ConfigChannel+0x854>)
 8004796:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800479a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800479e:	4619      	mov	r1, r3
 80047a0:	4610      	mov	r0, r2
 80047a2:	f7fe ff48 	bl	8003636 <LL_ADC_SetCommonPathInternalCh>
 80047a6:	e00c      	b.n	80047c2 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047ac:	f043 0220 	orr.w	r2, r3, #32
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80047b4:	2301      	movs	r3, #1
 80047b6:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 80047ba:	e002      	b.n	80047c2 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80047bc:	bf00      	nop
 80047be:	e000      	b.n	80047c2 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80047c0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2200      	movs	r2, #0
 80047c6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80047ca:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80047ce:	4618      	mov	r0, r3
 80047d0:	37d8      	adds	r7, #216	@ 0xd8
 80047d2:	46bd      	mov	sp, r7
 80047d4:	bd80      	pop	{r7, pc}
 80047d6:	bf00      	nop
 80047d8:	50000700 	.word	0x50000700
 80047dc:	c3210000 	.word	0xc3210000
 80047e0:	90c00010 	.word	0x90c00010
 80047e4:	50000600 	.word	0x50000600
 80047e8:	50000100 	.word	0x50000100
 80047ec:	50000300 	.word	0x50000300
 80047f0:	20000200 	.word	0x20000200
 80047f4:	053e2d63 	.word	0x053e2d63
 80047f8:	c7520000 	.word	0xc7520000
 80047fc:	50000500 	.word	0x50000500
 8004800:	cb840000 	.word	0xcb840000

08004804 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b084      	sub	sp, #16
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800480c:	2300      	movs	r3, #0
 800480e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4618      	mov	r0, r3
 8004816:	f7ff f8b9 	bl	800398c <LL_ADC_IsEnabled>
 800481a:	4603      	mov	r3, r0
 800481c:	2b00      	cmp	r3, #0
 800481e:	d176      	bne.n	800490e <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	689a      	ldr	r2, [r3, #8]
 8004826:	4b3c      	ldr	r3, [pc, #240]	@ (8004918 <ADC_Enable+0x114>)
 8004828:	4013      	ands	r3, r2
 800482a:	2b00      	cmp	r3, #0
 800482c:	d00d      	beq.n	800484a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004832:	f043 0210 	orr.w	r2, r3, #16
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800483e:	f043 0201 	orr.w	r2, r3, #1
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8004846:	2301      	movs	r3, #1
 8004848:	e062      	b.n	8004910 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	4618      	mov	r0, r3
 8004850:	f7ff f888 	bl	8003964 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800485c:	d004      	beq.n	8004868 <ADC_Enable+0x64>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	4a2e      	ldr	r2, [pc, #184]	@ (800491c <ADC_Enable+0x118>)
 8004864:	4293      	cmp	r3, r2
 8004866:	d101      	bne.n	800486c <ADC_Enable+0x68>
 8004868:	4b2d      	ldr	r3, [pc, #180]	@ (8004920 <ADC_Enable+0x11c>)
 800486a:	e000      	b.n	800486e <ADC_Enable+0x6a>
 800486c:	4b2d      	ldr	r3, [pc, #180]	@ (8004924 <ADC_Enable+0x120>)
 800486e:	4618      	mov	r0, r3
 8004870:	f7fe fef4 	bl	800365c <LL_ADC_GetCommonPathInternalCh>
 8004874:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8004876:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800487a:	2b00      	cmp	r3, #0
 800487c:	d013      	beq.n	80048a6 <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800487e:	4b2a      	ldr	r3, [pc, #168]	@ (8004928 <ADC_Enable+0x124>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	099b      	lsrs	r3, r3, #6
 8004884:	4a29      	ldr	r2, [pc, #164]	@ (800492c <ADC_Enable+0x128>)
 8004886:	fba2 2303 	umull	r2, r3, r2, r3
 800488a:	099b      	lsrs	r3, r3, #6
 800488c:	1c5a      	adds	r2, r3, #1
 800488e:	4613      	mov	r3, r2
 8004890:	005b      	lsls	r3, r3, #1
 8004892:	4413      	add	r3, r2
 8004894:	009b      	lsls	r3, r3, #2
 8004896:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004898:	e002      	b.n	80048a0 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 800489a:	68bb      	ldr	r3, [r7, #8]
 800489c:	3b01      	subs	r3, #1
 800489e:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80048a0:	68bb      	ldr	r3, [r7, #8]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d1f9      	bne.n	800489a <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80048a6:	f7fe fea7 	bl	80035f8 <HAL_GetTick>
 80048aa:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80048ac:	e028      	b.n	8004900 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	4618      	mov	r0, r3
 80048b4:	f7ff f86a 	bl	800398c <LL_ADC_IsEnabled>
 80048b8:	4603      	mov	r3, r0
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d104      	bne.n	80048c8 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4618      	mov	r0, r3
 80048c4:	f7ff f84e 	bl	8003964 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80048c8:	f7fe fe96 	bl	80035f8 <HAL_GetTick>
 80048cc:	4602      	mov	r2, r0
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	1ad3      	subs	r3, r2, r3
 80048d2:	2b02      	cmp	r3, #2
 80048d4:	d914      	bls.n	8004900 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f003 0301 	and.w	r3, r3, #1
 80048e0:	2b01      	cmp	r3, #1
 80048e2:	d00d      	beq.n	8004900 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048e8:	f043 0210 	orr.w	r2, r3, #16
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80048f4:	f043 0201 	orr.w	r2, r3, #1
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 80048fc:	2301      	movs	r3, #1
 80048fe:	e007      	b.n	8004910 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f003 0301 	and.w	r3, r3, #1
 800490a:	2b01      	cmp	r3, #1
 800490c:	d1cf      	bne.n	80048ae <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800490e:	2300      	movs	r3, #0
}
 8004910:	4618      	mov	r0, r3
 8004912:	3710      	adds	r7, #16
 8004914:	46bd      	mov	sp, r7
 8004916:	bd80      	pop	{r7, pc}
 8004918:	8000003f 	.word	0x8000003f
 800491c:	50000100 	.word	0x50000100
 8004920:	50000300 	.word	0x50000300
 8004924:	50000700 	.word	0x50000700
 8004928:	20000200 	.word	0x20000200
 800492c:	053e2d63 	.word	0x053e2d63

08004930 <LL_ADC_IsEnabled>:
{
 8004930:	b480      	push	{r7}
 8004932:	b083      	sub	sp, #12
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	689b      	ldr	r3, [r3, #8]
 800493c:	f003 0301 	and.w	r3, r3, #1
 8004940:	2b01      	cmp	r3, #1
 8004942:	d101      	bne.n	8004948 <LL_ADC_IsEnabled+0x18>
 8004944:	2301      	movs	r3, #1
 8004946:	e000      	b.n	800494a <LL_ADC_IsEnabled+0x1a>
 8004948:	2300      	movs	r3, #0
}
 800494a:	4618      	mov	r0, r3
 800494c:	370c      	adds	r7, #12
 800494e:	46bd      	mov	sp, r7
 8004950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004954:	4770      	bx	lr

08004956 <LL_ADC_REG_IsConversionOngoing>:
{
 8004956:	b480      	push	{r7}
 8004958:	b083      	sub	sp, #12
 800495a:	af00      	add	r7, sp, #0
 800495c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	689b      	ldr	r3, [r3, #8]
 8004962:	f003 0304 	and.w	r3, r3, #4
 8004966:	2b04      	cmp	r3, #4
 8004968:	d101      	bne.n	800496e <LL_ADC_REG_IsConversionOngoing+0x18>
 800496a:	2301      	movs	r3, #1
 800496c:	e000      	b.n	8004970 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800496e:	2300      	movs	r3, #0
}
 8004970:	4618      	mov	r0, r3
 8004972:	370c      	adds	r7, #12
 8004974:	46bd      	mov	sp, r7
 8004976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497a:	4770      	bx	lr

0800497c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 800497c:	b590      	push	{r4, r7, lr}
 800497e:	b0a1      	sub	sp, #132	@ 0x84
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
 8004984:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004986:	2300      	movs	r3, #0
 8004988:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004992:	2b01      	cmp	r3, #1
 8004994:	d101      	bne.n	800499a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004996:	2302      	movs	r3, #2
 8004998:	e0e7      	b.n	8004b6a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2201      	movs	r2, #1
 800499e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80049a2:	2300      	movs	r3, #0
 80049a4:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80049a6:	2300      	movs	r3, #0
 80049a8:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80049b2:	d102      	bne.n	80049ba <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80049b4:	4b6f      	ldr	r3, [pc, #444]	@ (8004b74 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80049b6:	60bb      	str	r3, [r7, #8]
 80049b8:	e009      	b.n	80049ce <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4a6e      	ldr	r2, [pc, #440]	@ (8004b78 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d102      	bne.n	80049ca <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 80049c4:	4b6d      	ldr	r3, [pc, #436]	@ (8004b7c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80049c6:	60bb      	str	r3, [r7, #8]
 80049c8:	e001      	b.n	80049ce <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80049ca:	2300      	movs	r3, #0
 80049cc:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80049ce:	68bb      	ldr	r3, [r7, #8]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d10b      	bne.n	80049ec <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049d8:	f043 0220 	orr.w	r2, r3, #32
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2200      	movs	r2, #0
 80049e4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 80049e8:	2301      	movs	r3, #1
 80049ea:	e0be      	b.n	8004b6a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	4618      	mov	r0, r3
 80049f0:	f7ff ffb1 	bl	8004956 <LL_ADC_REG_IsConversionOngoing>
 80049f4:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4618      	mov	r0, r3
 80049fc:	f7ff ffab 	bl	8004956 <LL_ADC_REG_IsConversionOngoing>
 8004a00:	4603      	mov	r3, r0
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	f040 80a0 	bne.w	8004b48 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8004a08:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	f040 809c 	bne.w	8004b48 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004a18:	d004      	beq.n	8004a24 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	4a55      	ldr	r2, [pc, #340]	@ (8004b74 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d101      	bne.n	8004a28 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8004a24:	4b56      	ldr	r3, [pc, #344]	@ (8004b80 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8004a26:	e000      	b.n	8004a2a <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8004a28:	4b56      	ldr	r3, [pc, #344]	@ (8004b84 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8004a2a:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d04b      	beq.n	8004acc <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004a34:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004a36:	689b      	ldr	r3, [r3, #8]
 8004a38:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	6859      	ldr	r1, [r3, #4]
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004a46:	035b      	lsls	r3, r3, #13
 8004a48:	430b      	orrs	r3, r1
 8004a4a:	431a      	orrs	r2, r3
 8004a4c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004a4e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004a58:	d004      	beq.n	8004a64 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4a45      	ldr	r2, [pc, #276]	@ (8004b74 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d10f      	bne.n	8004a84 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8004a64:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004a68:	f7ff ff62 	bl	8004930 <LL_ADC_IsEnabled>
 8004a6c:	4604      	mov	r4, r0
 8004a6e:	4841      	ldr	r0, [pc, #260]	@ (8004b74 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004a70:	f7ff ff5e 	bl	8004930 <LL_ADC_IsEnabled>
 8004a74:	4603      	mov	r3, r0
 8004a76:	4323      	orrs	r3, r4
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	bf0c      	ite	eq
 8004a7c:	2301      	moveq	r3, #1
 8004a7e:	2300      	movne	r3, #0
 8004a80:	b2db      	uxtb	r3, r3
 8004a82:	e012      	b.n	8004aaa <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8004a84:	483c      	ldr	r0, [pc, #240]	@ (8004b78 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004a86:	f7ff ff53 	bl	8004930 <LL_ADC_IsEnabled>
 8004a8a:	4604      	mov	r4, r0
 8004a8c:	483b      	ldr	r0, [pc, #236]	@ (8004b7c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004a8e:	f7ff ff4f 	bl	8004930 <LL_ADC_IsEnabled>
 8004a92:	4603      	mov	r3, r0
 8004a94:	431c      	orrs	r4, r3
 8004a96:	483c      	ldr	r0, [pc, #240]	@ (8004b88 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8004a98:	f7ff ff4a 	bl	8004930 <LL_ADC_IsEnabled>
 8004a9c:	4603      	mov	r3, r0
 8004a9e:	4323      	orrs	r3, r4
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	bf0c      	ite	eq
 8004aa4:	2301      	moveq	r3, #1
 8004aa6:	2300      	movne	r3, #0
 8004aa8:	b2db      	uxtb	r3, r3
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d056      	beq.n	8004b5c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004aae:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004ab0:	689b      	ldr	r3, [r3, #8]
 8004ab2:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8004ab6:	f023 030f 	bic.w	r3, r3, #15
 8004aba:	683a      	ldr	r2, [r7, #0]
 8004abc:	6811      	ldr	r1, [r2, #0]
 8004abe:	683a      	ldr	r2, [r7, #0]
 8004ac0:	6892      	ldr	r2, [r2, #8]
 8004ac2:	430a      	orrs	r2, r1
 8004ac4:	431a      	orrs	r2, r3
 8004ac6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004ac8:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004aca:	e047      	b.n	8004b5c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004acc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004ace:	689b      	ldr	r3, [r3, #8]
 8004ad0:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004ad4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004ad6:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004ae0:	d004      	beq.n	8004aec <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4a23      	ldr	r2, [pc, #140]	@ (8004b74 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d10f      	bne.n	8004b0c <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8004aec:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004af0:	f7ff ff1e 	bl	8004930 <LL_ADC_IsEnabled>
 8004af4:	4604      	mov	r4, r0
 8004af6:	481f      	ldr	r0, [pc, #124]	@ (8004b74 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004af8:	f7ff ff1a 	bl	8004930 <LL_ADC_IsEnabled>
 8004afc:	4603      	mov	r3, r0
 8004afe:	4323      	orrs	r3, r4
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	bf0c      	ite	eq
 8004b04:	2301      	moveq	r3, #1
 8004b06:	2300      	movne	r3, #0
 8004b08:	b2db      	uxtb	r3, r3
 8004b0a:	e012      	b.n	8004b32 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8004b0c:	481a      	ldr	r0, [pc, #104]	@ (8004b78 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004b0e:	f7ff ff0f 	bl	8004930 <LL_ADC_IsEnabled>
 8004b12:	4604      	mov	r4, r0
 8004b14:	4819      	ldr	r0, [pc, #100]	@ (8004b7c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004b16:	f7ff ff0b 	bl	8004930 <LL_ADC_IsEnabled>
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	431c      	orrs	r4, r3
 8004b1e:	481a      	ldr	r0, [pc, #104]	@ (8004b88 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8004b20:	f7ff ff06 	bl	8004930 <LL_ADC_IsEnabled>
 8004b24:	4603      	mov	r3, r0
 8004b26:	4323      	orrs	r3, r4
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	bf0c      	ite	eq
 8004b2c:	2301      	moveq	r3, #1
 8004b2e:	2300      	movne	r3, #0
 8004b30:	b2db      	uxtb	r3, r3
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d012      	beq.n	8004b5c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004b36:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004b38:	689b      	ldr	r3, [r3, #8]
 8004b3a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8004b3e:	f023 030f 	bic.w	r3, r3, #15
 8004b42:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8004b44:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004b46:	e009      	b.n	8004b5c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b4c:	f043 0220 	orr.w	r2, r3, #32
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004b54:	2301      	movs	r3, #1
 8004b56:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8004b5a:	e000      	b.n	8004b5e <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004b5c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2200      	movs	r2, #0
 8004b62:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8004b66:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	3784      	adds	r7, #132	@ 0x84
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	bd90      	pop	{r4, r7, pc}
 8004b72:	bf00      	nop
 8004b74:	50000100 	.word	0x50000100
 8004b78:	50000400 	.word	0x50000400
 8004b7c:	50000500 	.word	0x50000500
 8004b80:	50000300 	.word	0x50000300
 8004b84:	50000700 	.word	0x50000700
 8004b88:	50000600 	.word	0x50000600

08004b8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	b085      	sub	sp, #20
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	f003 0307 	and.w	r3, r3, #7
 8004b9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004b9c:	4b0c      	ldr	r3, [pc, #48]	@ (8004bd0 <__NVIC_SetPriorityGrouping+0x44>)
 8004b9e:	68db      	ldr	r3, [r3, #12]
 8004ba0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004ba2:	68ba      	ldr	r2, [r7, #8]
 8004ba4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004ba8:	4013      	ands	r3, r2
 8004baa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004bb0:	68bb      	ldr	r3, [r7, #8]
 8004bb2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004bb4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004bb8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004bbc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004bbe:	4a04      	ldr	r2, [pc, #16]	@ (8004bd0 <__NVIC_SetPriorityGrouping+0x44>)
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	60d3      	str	r3, [r2, #12]
}
 8004bc4:	bf00      	nop
 8004bc6:	3714      	adds	r7, #20
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bce:	4770      	bx	lr
 8004bd0:	e000ed00 	.word	0xe000ed00

08004bd4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004bd4:	b480      	push	{r7}
 8004bd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004bd8:	4b04      	ldr	r3, [pc, #16]	@ (8004bec <__NVIC_GetPriorityGrouping+0x18>)
 8004bda:	68db      	ldr	r3, [r3, #12]
 8004bdc:	0a1b      	lsrs	r3, r3, #8
 8004bde:	f003 0307 	and.w	r3, r3, #7
}
 8004be2:	4618      	mov	r0, r3
 8004be4:	46bd      	mov	sp, r7
 8004be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bea:	4770      	bx	lr
 8004bec:	e000ed00 	.word	0xe000ed00

08004bf0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004bf0:	b480      	push	{r7}
 8004bf2:	b083      	sub	sp, #12
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	4603      	mov	r3, r0
 8004bf8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004bfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	db0b      	blt.n	8004c1a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004c02:	79fb      	ldrb	r3, [r7, #7]
 8004c04:	f003 021f 	and.w	r2, r3, #31
 8004c08:	4907      	ldr	r1, [pc, #28]	@ (8004c28 <__NVIC_EnableIRQ+0x38>)
 8004c0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c0e:	095b      	lsrs	r3, r3, #5
 8004c10:	2001      	movs	r0, #1
 8004c12:	fa00 f202 	lsl.w	r2, r0, r2
 8004c16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004c1a:	bf00      	nop
 8004c1c:	370c      	adds	r7, #12
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c24:	4770      	bx	lr
 8004c26:	bf00      	nop
 8004c28:	e000e100 	.word	0xe000e100

08004c2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004c2c:	b480      	push	{r7}
 8004c2e:	b083      	sub	sp, #12
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	4603      	mov	r3, r0
 8004c34:	6039      	str	r1, [r7, #0]
 8004c36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004c38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	db0a      	blt.n	8004c56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	b2da      	uxtb	r2, r3
 8004c44:	490c      	ldr	r1, [pc, #48]	@ (8004c78 <__NVIC_SetPriority+0x4c>)
 8004c46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c4a:	0112      	lsls	r2, r2, #4
 8004c4c:	b2d2      	uxtb	r2, r2
 8004c4e:	440b      	add	r3, r1
 8004c50:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004c54:	e00a      	b.n	8004c6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	b2da      	uxtb	r2, r3
 8004c5a:	4908      	ldr	r1, [pc, #32]	@ (8004c7c <__NVIC_SetPriority+0x50>)
 8004c5c:	79fb      	ldrb	r3, [r7, #7]
 8004c5e:	f003 030f 	and.w	r3, r3, #15
 8004c62:	3b04      	subs	r3, #4
 8004c64:	0112      	lsls	r2, r2, #4
 8004c66:	b2d2      	uxtb	r2, r2
 8004c68:	440b      	add	r3, r1
 8004c6a:	761a      	strb	r2, [r3, #24]
}
 8004c6c:	bf00      	nop
 8004c6e:	370c      	adds	r7, #12
 8004c70:	46bd      	mov	sp, r7
 8004c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c76:	4770      	bx	lr
 8004c78:	e000e100 	.word	0xe000e100
 8004c7c:	e000ed00 	.word	0xe000ed00

08004c80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004c80:	b480      	push	{r7}
 8004c82:	b089      	sub	sp, #36	@ 0x24
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	60f8      	str	r0, [r7, #12]
 8004c88:	60b9      	str	r1, [r7, #8]
 8004c8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	f003 0307 	and.w	r3, r3, #7
 8004c92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004c94:	69fb      	ldr	r3, [r7, #28]
 8004c96:	f1c3 0307 	rsb	r3, r3, #7
 8004c9a:	2b04      	cmp	r3, #4
 8004c9c:	bf28      	it	cs
 8004c9e:	2304      	movcs	r3, #4
 8004ca0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004ca2:	69fb      	ldr	r3, [r7, #28]
 8004ca4:	3304      	adds	r3, #4
 8004ca6:	2b06      	cmp	r3, #6
 8004ca8:	d902      	bls.n	8004cb0 <NVIC_EncodePriority+0x30>
 8004caa:	69fb      	ldr	r3, [r7, #28]
 8004cac:	3b03      	subs	r3, #3
 8004cae:	e000      	b.n	8004cb2 <NVIC_EncodePriority+0x32>
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004cb4:	f04f 32ff 	mov.w	r2, #4294967295
 8004cb8:	69bb      	ldr	r3, [r7, #24]
 8004cba:	fa02 f303 	lsl.w	r3, r2, r3
 8004cbe:	43da      	mvns	r2, r3
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	401a      	ands	r2, r3
 8004cc4:	697b      	ldr	r3, [r7, #20]
 8004cc6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004cc8:	f04f 31ff 	mov.w	r1, #4294967295
 8004ccc:	697b      	ldr	r3, [r7, #20]
 8004cce:	fa01 f303 	lsl.w	r3, r1, r3
 8004cd2:	43d9      	mvns	r1, r3
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004cd8:	4313      	orrs	r3, r2
         );
}
 8004cda:	4618      	mov	r0, r3
 8004cdc:	3724      	adds	r7, #36	@ 0x24
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce4:	4770      	bx	lr
	...

08004ce8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b082      	sub	sp, #8
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	3b01      	subs	r3, #1
 8004cf4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004cf8:	d301      	bcc.n	8004cfe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	e00f      	b.n	8004d1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004cfe:	4a0a      	ldr	r2, [pc, #40]	@ (8004d28 <SysTick_Config+0x40>)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	3b01      	subs	r3, #1
 8004d04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004d06:	210f      	movs	r1, #15
 8004d08:	f04f 30ff 	mov.w	r0, #4294967295
 8004d0c:	f7ff ff8e 	bl	8004c2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004d10:	4b05      	ldr	r3, [pc, #20]	@ (8004d28 <SysTick_Config+0x40>)
 8004d12:	2200      	movs	r2, #0
 8004d14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004d16:	4b04      	ldr	r3, [pc, #16]	@ (8004d28 <SysTick_Config+0x40>)
 8004d18:	2207      	movs	r2, #7
 8004d1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004d1c:	2300      	movs	r3, #0
}
 8004d1e:	4618      	mov	r0, r3
 8004d20:	3708      	adds	r7, #8
 8004d22:	46bd      	mov	sp, r7
 8004d24:	bd80      	pop	{r7, pc}
 8004d26:	bf00      	nop
 8004d28:	e000e010 	.word	0xe000e010

08004d2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b082      	sub	sp, #8
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004d34:	6878      	ldr	r0, [r7, #4]
 8004d36:	f7ff ff29 	bl	8004b8c <__NVIC_SetPriorityGrouping>
}
 8004d3a:	bf00      	nop
 8004d3c:	3708      	adds	r7, #8
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	bd80      	pop	{r7, pc}

08004d42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004d42:	b580      	push	{r7, lr}
 8004d44:	b086      	sub	sp, #24
 8004d46:	af00      	add	r7, sp, #0
 8004d48:	4603      	mov	r3, r0
 8004d4a:	60b9      	str	r1, [r7, #8]
 8004d4c:	607a      	str	r2, [r7, #4]
 8004d4e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004d50:	f7ff ff40 	bl	8004bd4 <__NVIC_GetPriorityGrouping>
 8004d54:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004d56:	687a      	ldr	r2, [r7, #4]
 8004d58:	68b9      	ldr	r1, [r7, #8]
 8004d5a:	6978      	ldr	r0, [r7, #20]
 8004d5c:	f7ff ff90 	bl	8004c80 <NVIC_EncodePriority>
 8004d60:	4602      	mov	r2, r0
 8004d62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d66:	4611      	mov	r1, r2
 8004d68:	4618      	mov	r0, r3
 8004d6a:	f7ff ff5f 	bl	8004c2c <__NVIC_SetPriority>
}
 8004d6e:	bf00      	nop
 8004d70:	3718      	adds	r7, #24
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bd80      	pop	{r7, pc}

08004d76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d76:	b580      	push	{r7, lr}
 8004d78:	b082      	sub	sp, #8
 8004d7a:	af00      	add	r7, sp, #0
 8004d7c:	4603      	mov	r3, r0
 8004d7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004d80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d84:	4618      	mov	r0, r3
 8004d86:	f7ff ff33 	bl	8004bf0 <__NVIC_EnableIRQ>
}
 8004d8a:	bf00      	nop
 8004d8c:	3708      	adds	r7, #8
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	bd80      	pop	{r7, pc}

08004d92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004d92:	b580      	push	{r7, lr}
 8004d94:	b082      	sub	sp, #8
 8004d96:	af00      	add	r7, sp, #0
 8004d98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004d9a:	6878      	ldr	r0, [r7, #4]
 8004d9c:	f7ff ffa4 	bl	8004ce8 <SysTick_Config>
 8004da0:	4603      	mov	r3, r0
}
 8004da2:	4618      	mov	r0, r3
 8004da4:	3708      	adds	r7, #8
 8004da6:	46bd      	mov	sp, r7
 8004da8:	bd80      	pop	{r7, pc}
	...

08004dac <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b084      	sub	sp, #16
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d101      	bne.n	8004dbe <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004dba:	2301      	movs	r3, #1
 8004dbc:	e08d      	b.n	8004eda <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	461a      	mov	r2, r3
 8004dc4:	4b47      	ldr	r3, [pc, #284]	@ (8004ee4 <HAL_DMA_Init+0x138>)
 8004dc6:	429a      	cmp	r2, r3
 8004dc8:	d80f      	bhi.n	8004dea <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	461a      	mov	r2, r3
 8004dd0:	4b45      	ldr	r3, [pc, #276]	@ (8004ee8 <HAL_DMA_Init+0x13c>)
 8004dd2:	4413      	add	r3, r2
 8004dd4:	4a45      	ldr	r2, [pc, #276]	@ (8004eec <HAL_DMA_Init+0x140>)
 8004dd6:	fba2 2303 	umull	r2, r3, r2, r3
 8004dda:	091b      	lsrs	r3, r3, #4
 8004ddc:	009a      	lsls	r2, r3, #2
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	4a42      	ldr	r2, [pc, #264]	@ (8004ef0 <HAL_DMA_Init+0x144>)
 8004de6:	641a      	str	r2, [r3, #64]	@ 0x40
 8004de8:	e00e      	b.n	8004e08 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	461a      	mov	r2, r3
 8004df0:	4b40      	ldr	r3, [pc, #256]	@ (8004ef4 <HAL_DMA_Init+0x148>)
 8004df2:	4413      	add	r3, r2
 8004df4:	4a3d      	ldr	r2, [pc, #244]	@ (8004eec <HAL_DMA_Init+0x140>)
 8004df6:	fba2 2303 	umull	r2, r3, r2, r3
 8004dfa:	091b      	lsrs	r3, r3, #4
 8004dfc:	009a      	lsls	r2, r3, #2
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	4a3c      	ldr	r2, [pc, #240]	@ (8004ef8 <HAL_DMA_Init+0x14c>)
 8004e06:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2202      	movs	r2, #2
 8004e0c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8004e1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e22:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004e2c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	691b      	ldr	r3, [r3, #16]
 8004e32:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004e38:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	699b      	ldr	r3, [r3, #24]
 8004e3e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004e44:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6a1b      	ldr	r3, [r3, #32]
 8004e4a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004e4c:	68fa      	ldr	r2, [r7, #12]
 8004e4e:	4313      	orrs	r3, r2
 8004e50:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	68fa      	ldr	r2, [r7, #12]
 8004e58:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004e5a:	6878      	ldr	r0, [r7, #4]
 8004e5c:	f000 fa82 	bl	8005364 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	689b      	ldr	r3, [r3, #8]
 8004e64:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004e68:	d102      	bne.n	8004e70 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	685a      	ldr	r2, [r3, #4]
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e78:	b2d2      	uxtb	r2, r2
 8004e7a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004e80:	687a      	ldr	r2, [r7, #4]
 8004e82:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004e84:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	685b      	ldr	r3, [r3, #4]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d010      	beq.n	8004eb0 <HAL_DMA_Init+0x104>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	685b      	ldr	r3, [r3, #4]
 8004e92:	2b04      	cmp	r3, #4
 8004e94:	d80c      	bhi.n	8004eb0 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004e96:	6878      	ldr	r0, [r7, #4]
 8004e98:	f000 faa2 	bl	80053e0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ea8:	687a      	ldr	r2, [r7, #4]
 8004eaa:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004eac:	605a      	str	r2, [r3, #4]
 8004eae:	e008      	b.n	8004ec2 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2200      	movs	r2, #0
 8004eba:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2201      	movs	r2, #1
 8004ecc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004ed8:	2300      	movs	r3, #0
}
 8004eda:	4618      	mov	r0, r3
 8004edc:	3710      	adds	r7, #16
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bd80      	pop	{r7, pc}
 8004ee2:	bf00      	nop
 8004ee4:	40020407 	.word	0x40020407
 8004ee8:	bffdfff8 	.word	0xbffdfff8
 8004eec:	cccccccd 	.word	0xcccccccd
 8004ef0:	40020000 	.word	0x40020000
 8004ef4:	bffdfbf8 	.word	0xbffdfbf8
 8004ef8:	40020400 	.word	0x40020400

08004efc <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b086      	sub	sp, #24
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	60f8      	str	r0, [r7, #12]
 8004f04:	60b9      	str	r1, [r7, #8]
 8004f06:	607a      	str	r2, [r7, #4]
 8004f08:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004f14:	2b01      	cmp	r3, #1
 8004f16:	d101      	bne.n	8004f1c <HAL_DMA_Start_IT+0x20>
 8004f18:	2302      	movs	r3, #2
 8004f1a:	e066      	b.n	8004fea <HAL_DMA_Start_IT+0xee>
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	2201      	movs	r2, #1
 8004f20:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004f2a:	b2db      	uxtb	r3, r3
 8004f2c:	2b01      	cmp	r3, #1
 8004f2e:	d155      	bne.n	8004fdc <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	2202      	movs	r2, #2
 8004f34:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	681a      	ldr	r2, [r3, #0]
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f022 0201 	bic.w	r2, r2, #1
 8004f4c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	687a      	ldr	r2, [r7, #4]
 8004f52:	68b9      	ldr	r1, [r7, #8]
 8004f54:	68f8      	ldr	r0, [r7, #12]
 8004f56:	f000 f9c7 	bl	80052e8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d008      	beq.n	8004f74 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	681a      	ldr	r2, [r3, #0]
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f042 020e 	orr.w	r2, r2, #14
 8004f70:	601a      	str	r2, [r3, #0]
 8004f72:	e00f      	b.n	8004f94 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	681a      	ldr	r2, [r3, #0]
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f022 0204 	bic.w	r2, r2, #4
 8004f82:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	681a      	ldr	r2, [r3, #0]
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f042 020a 	orr.w	r2, r2, #10
 8004f92:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d007      	beq.n	8004fb2 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004fa6:	681a      	ldr	r2, [r3, #0]
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004fac:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004fb0:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d007      	beq.n	8004fca <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fbe:	681a      	ldr	r2, [r3, #0]
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fc4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004fc8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	681a      	ldr	r2, [r3, #0]
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f042 0201 	orr.w	r2, r2, #1
 8004fd8:	601a      	str	r2, [r3, #0]
 8004fda:	e005      	b.n	8004fe8 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	2200      	movs	r2, #0
 8004fe0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004fe4:	2302      	movs	r3, #2
 8004fe6:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004fe8:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fea:	4618      	mov	r0, r3
 8004fec:	3718      	adds	r7, #24
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	bd80      	pop	{r7, pc}

08004ff2 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004ff2:	b480      	push	{r7}
 8004ff4:	b085      	sub	sp, #20
 8004ff6:	af00      	add	r7, sp, #0
 8004ff8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005004:	b2db      	uxtb	r3, r3
 8005006:	2b02      	cmp	r3, #2
 8005008:	d005      	beq.n	8005016 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2204      	movs	r2, #4
 800500e:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8005010:	2301      	movs	r3, #1
 8005012:	73fb      	strb	r3, [r7, #15]
 8005014:	e037      	b.n	8005086 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	681a      	ldr	r2, [r3, #0]
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f022 020e 	bic.w	r2, r2, #14
 8005024:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800502a:	681a      	ldr	r2, [r3, #0]
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005030:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005034:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	681a      	ldr	r2, [r3, #0]
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f022 0201 	bic.w	r2, r2, #1
 8005044:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800504a:	f003 021f 	and.w	r2, r3, #31
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005052:	2101      	movs	r1, #1
 8005054:	fa01 f202 	lsl.w	r2, r1, r2
 8005058:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800505e:	687a      	ldr	r2, [r7, #4]
 8005060:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005062:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005068:	2b00      	cmp	r3, #0
 800506a:	d00c      	beq.n	8005086 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005070:	681a      	ldr	r2, [r3, #0]
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005076:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800507a:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005080:	687a      	ldr	r2, [r7, #4]
 8005082:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005084:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2201      	movs	r2, #1
 800508a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2200      	movs	r2, #0
 8005092:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8005096:	7bfb      	ldrb	r3, [r7, #15]
}
 8005098:	4618      	mov	r0, r3
 800509a:	3714      	adds	r7, #20
 800509c:	46bd      	mov	sp, r7
 800509e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a2:	4770      	bx	lr

080050a4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b084      	sub	sp, #16
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80050ac:	2300      	movs	r3, #0
 80050ae:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80050b6:	b2db      	uxtb	r3, r3
 80050b8:	2b02      	cmp	r3, #2
 80050ba:	d00d      	beq.n	80050d8 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2204      	movs	r2, #4
 80050c0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2201      	movs	r2, #1
 80050c6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2200      	movs	r2, #0
 80050ce:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 80050d2:	2301      	movs	r3, #1
 80050d4:	73fb      	strb	r3, [r7, #15]
 80050d6:	e047      	b.n	8005168 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	681a      	ldr	r2, [r3, #0]
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f022 020e 	bic.w	r2, r2, #14
 80050e6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	681a      	ldr	r2, [r3, #0]
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f022 0201 	bic.w	r2, r2, #1
 80050f6:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80050fc:	681a      	ldr	r2, [r3, #0]
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005102:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005106:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800510c:	f003 021f 	and.w	r2, r3, #31
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005114:	2101      	movs	r1, #1
 8005116:	fa01 f202 	lsl.w	r2, r1, r2
 800511a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005120:	687a      	ldr	r2, [r7, #4]
 8005122:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005124:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800512a:	2b00      	cmp	r3, #0
 800512c:	d00c      	beq.n	8005148 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005132:	681a      	ldr	r2, [r3, #0]
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005138:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800513c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005142:	687a      	ldr	r2, [r7, #4]
 8005144:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005146:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2201      	movs	r2, #1
 800514c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2200      	movs	r2, #0
 8005154:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800515c:	2b00      	cmp	r3, #0
 800515e:	d003      	beq.n	8005168 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005164:	6878      	ldr	r0, [r7, #4]
 8005166:	4798      	blx	r3
    }
  }
  return status;
 8005168:	7bfb      	ldrb	r3, [r7, #15]
}
 800516a:	4618      	mov	r0, r3
 800516c:	3710      	adds	r7, #16
 800516e:	46bd      	mov	sp, r7
 8005170:	bd80      	pop	{r7, pc}

08005172 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005172:	b580      	push	{r7, lr}
 8005174:	b084      	sub	sp, #16
 8005176:	af00      	add	r7, sp, #0
 8005178:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800518e:	f003 031f 	and.w	r3, r3, #31
 8005192:	2204      	movs	r2, #4
 8005194:	409a      	lsls	r2, r3
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	4013      	ands	r3, r2
 800519a:	2b00      	cmp	r3, #0
 800519c:	d026      	beq.n	80051ec <HAL_DMA_IRQHandler+0x7a>
 800519e:	68bb      	ldr	r3, [r7, #8]
 80051a0:	f003 0304 	and.w	r3, r3, #4
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d021      	beq.n	80051ec <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f003 0320 	and.w	r3, r3, #32
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d107      	bne.n	80051c6 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	681a      	ldr	r2, [r3, #0]
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f022 0204 	bic.w	r2, r2, #4
 80051c4:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051ca:	f003 021f 	and.w	r2, r3, #31
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051d2:	2104      	movs	r1, #4
 80051d4:	fa01 f202 	lsl.w	r2, r1, r2
 80051d8:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d071      	beq.n	80052c6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051e6:	6878      	ldr	r0, [r7, #4]
 80051e8:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80051ea:	e06c      	b.n	80052c6 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051f0:	f003 031f 	and.w	r3, r3, #31
 80051f4:	2202      	movs	r2, #2
 80051f6:	409a      	lsls	r2, r3
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	4013      	ands	r3, r2
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d02e      	beq.n	800525e <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8005200:	68bb      	ldr	r3, [r7, #8]
 8005202:	f003 0302 	and.w	r3, r3, #2
 8005206:	2b00      	cmp	r3, #0
 8005208:	d029      	beq.n	800525e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f003 0320 	and.w	r3, r3, #32
 8005214:	2b00      	cmp	r3, #0
 8005216:	d10b      	bne.n	8005230 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	681a      	ldr	r2, [r3, #0]
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f022 020a 	bic.w	r2, r2, #10
 8005226:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2201      	movs	r2, #1
 800522c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005234:	f003 021f 	and.w	r2, r3, #31
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800523c:	2102      	movs	r1, #2
 800523e:	fa01 f202 	lsl.w	r2, r1, r2
 8005242:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2200      	movs	r2, #0
 8005248:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005250:	2b00      	cmp	r3, #0
 8005252:	d038      	beq.n	80052c6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005258:	6878      	ldr	r0, [r7, #4]
 800525a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800525c:	e033      	b.n	80052c6 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005262:	f003 031f 	and.w	r3, r3, #31
 8005266:	2208      	movs	r2, #8
 8005268:	409a      	lsls	r2, r3
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	4013      	ands	r3, r2
 800526e:	2b00      	cmp	r3, #0
 8005270:	d02a      	beq.n	80052c8 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8005272:	68bb      	ldr	r3, [r7, #8]
 8005274:	f003 0308 	and.w	r3, r3, #8
 8005278:	2b00      	cmp	r3, #0
 800527a:	d025      	beq.n	80052c8 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	681a      	ldr	r2, [r3, #0]
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f022 020e 	bic.w	r2, r2, #14
 800528a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005290:	f003 021f 	and.w	r2, r3, #31
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005298:	2101      	movs	r1, #1
 800529a:	fa01 f202 	lsl.w	r2, r1, r2
 800529e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2201      	movs	r2, #1
 80052a4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2201      	movs	r2, #1
 80052aa:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2200      	movs	r2, #0
 80052b2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d004      	beq.n	80052c8 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80052c2:	6878      	ldr	r0, [r7, #4]
 80052c4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80052c6:	bf00      	nop
 80052c8:	bf00      	nop
}
 80052ca:	3710      	adds	r7, #16
 80052cc:	46bd      	mov	sp, r7
 80052ce:	bd80      	pop	{r7, pc}

080052d0 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80052d0:	b480      	push	{r7}
 80052d2:	b083      	sub	sp, #12
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 80052dc:	4618      	mov	r0, r3
 80052de:	370c      	adds	r7, #12
 80052e0:	46bd      	mov	sp, r7
 80052e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e6:	4770      	bx	lr

080052e8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80052e8:	b480      	push	{r7}
 80052ea:	b085      	sub	sp, #20
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	60f8      	str	r0, [r7, #12]
 80052f0:	60b9      	str	r1, [r7, #8]
 80052f2:	607a      	str	r2, [r7, #4]
 80052f4:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80052fa:	68fa      	ldr	r2, [r7, #12]
 80052fc:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80052fe:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005304:	2b00      	cmp	r3, #0
 8005306:	d004      	beq.n	8005312 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800530c:	68fa      	ldr	r2, [r7, #12]
 800530e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005310:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005316:	f003 021f 	and.w	r2, r3, #31
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800531e:	2101      	movs	r1, #1
 8005320:	fa01 f202 	lsl.w	r2, r1, r2
 8005324:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	683a      	ldr	r2, [r7, #0]
 800532c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	689b      	ldr	r3, [r3, #8]
 8005332:	2b10      	cmp	r3, #16
 8005334:	d108      	bne.n	8005348 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	687a      	ldr	r2, [r7, #4]
 800533c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	68ba      	ldr	r2, [r7, #8]
 8005344:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005346:	e007      	b.n	8005358 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	68ba      	ldr	r2, [r7, #8]
 800534e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	687a      	ldr	r2, [r7, #4]
 8005356:	60da      	str	r2, [r3, #12]
}
 8005358:	bf00      	nop
 800535a:	3714      	adds	r7, #20
 800535c:	46bd      	mov	sp, r7
 800535e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005362:	4770      	bx	lr

08005364 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005364:	b480      	push	{r7}
 8005366:	b087      	sub	sp, #28
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	461a      	mov	r2, r3
 8005372:	4b16      	ldr	r3, [pc, #88]	@ (80053cc <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8005374:	429a      	cmp	r2, r3
 8005376:	d802      	bhi.n	800537e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8005378:	4b15      	ldr	r3, [pc, #84]	@ (80053d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800537a:	617b      	str	r3, [r7, #20]
 800537c:	e001      	b.n	8005382 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800537e:	4b15      	ldr	r3, [pc, #84]	@ (80053d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8005380:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8005382:	697b      	ldr	r3, [r7, #20]
 8005384:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	b2db      	uxtb	r3, r3
 800538c:	3b08      	subs	r3, #8
 800538e:	4a12      	ldr	r2, [pc, #72]	@ (80053d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8005390:	fba2 2303 	umull	r2, r3, r2, r3
 8005394:	091b      	lsrs	r3, r3, #4
 8005396:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800539c:	089b      	lsrs	r3, r3, #2
 800539e:	009a      	lsls	r2, r3, #2
 80053a0:	693b      	ldr	r3, [r7, #16]
 80053a2:	4413      	add	r3, r2
 80053a4:	461a      	mov	r2, r3
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	4a0b      	ldr	r2, [pc, #44]	@ (80053dc <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80053ae:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	f003 031f 	and.w	r3, r3, #31
 80053b6:	2201      	movs	r2, #1
 80053b8:	409a      	lsls	r2, r3
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80053be:	bf00      	nop
 80053c0:	371c      	adds	r7, #28
 80053c2:	46bd      	mov	sp, r7
 80053c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c8:	4770      	bx	lr
 80053ca:	bf00      	nop
 80053cc:	40020407 	.word	0x40020407
 80053d0:	40020800 	.word	0x40020800
 80053d4:	40020820 	.word	0x40020820
 80053d8:	cccccccd 	.word	0xcccccccd
 80053dc:	40020880 	.word	0x40020880

080053e0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80053e0:	b480      	push	{r7}
 80053e2:	b085      	sub	sp, #20
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	685b      	ldr	r3, [r3, #4]
 80053ec:	b2db      	uxtb	r3, r3
 80053ee:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80053f0:	68fa      	ldr	r2, [r7, #12]
 80053f2:	4b0b      	ldr	r3, [pc, #44]	@ (8005420 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80053f4:	4413      	add	r3, r2
 80053f6:	009b      	lsls	r3, r3, #2
 80053f8:	461a      	mov	r2, r3
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	4a08      	ldr	r2, [pc, #32]	@ (8005424 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8005402:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	3b01      	subs	r3, #1
 8005408:	f003 031f 	and.w	r3, r3, #31
 800540c:	2201      	movs	r2, #1
 800540e:	409a      	lsls	r2, r3
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8005414:	bf00      	nop
 8005416:	3714      	adds	r7, #20
 8005418:	46bd      	mov	sp, r7
 800541a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541e:	4770      	bx	lr
 8005420:	1000823f 	.word	0x1000823f
 8005424:	40020940 	.word	0x40020940

08005428 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005428:	b480      	push	{r7}
 800542a:	b087      	sub	sp, #28
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
 8005430:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005432:	2300      	movs	r3, #0
 8005434:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005436:	e15a      	b.n	80056ee <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	681a      	ldr	r2, [r3, #0]
 800543c:	2101      	movs	r1, #1
 800543e:	697b      	ldr	r3, [r7, #20]
 8005440:	fa01 f303 	lsl.w	r3, r1, r3
 8005444:	4013      	ands	r3, r2
 8005446:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	2b00      	cmp	r3, #0
 800544c:	f000 814c 	beq.w	80056e8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	685b      	ldr	r3, [r3, #4]
 8005454:	f003 0303 	and.w	r3, r3, #3
 8005458:	2b01      	cmp	r3, #1
 800545a:	d005      	beq.n	8005468 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	685b      	ldr	r3, [r3, #4]
 8005460:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005464:	2b02      	cmp	r3, #2
 8005466:	d130      	bne.n	80054ca <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	689b      	ldr	r3, [r3, #8]
 800546c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800546e:	697b      	ldr	r3, [r7, #20]
 8005470:	005b      	lsls	r3, r3, #1
 8005472:	2203      	movs	r2, #3
 8005474:	fa02 f303 	lsl.w	r3, r2, r3
 8005478:	43db      	mvns	r3, r3
 800547a:	693a      	ldr	r2, [r7, #16]
 800547c:	4013      	ands	r3, r2
 800547e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	68da      	ldr	r2, [r3, #12]
 8005484:	697b      	ldr	r3, [r7, #20]
 8005486:	005b      	lsls	r3, r3, #1
 8005488:	fa02 f303 	lsl.w	r3, r2, r3
 800548c:	693a      	ldr	r2, [r7, #16]
 800548e:	4313      	orrs	r3, r2
 8005490:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	693a      	ldr	r2, [r7, #16]
 8005496:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	685b      	ldr	r3, [r3, #4]
 800549c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800549e:	2201      	movs	r2, #1
 80054a0:	697b      	ldr	r3, [r7, #20]
 80054a2:	fa02 f303 	lsl.w	r3, r2, r3
 80054a6:	43db      	mvns	r3, r3
 80054a8:	693a      	ldr	r2, [r7, #16]
 80054aa:	4013      	ands	r3, r2
 80054ac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	685b      	ldr	r3, [r3, #4]
 80054b2:	091b      	lsrs	r3, r3, #4
 80054b4:	f003 0201 	and.w	r2, r3, #1
 80054b8:	697b      	ldr	r3, [r7, #20]
 80054ba:	fa02 f303 	lsl.w	r3, r2, r3
 80054be:	693a      	ldr	r2, [r7, #16]
 80054c0:	4313      	orrs	r3, r2
 80054c2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	693a      	ldr	r2, [r7, #16]
 80054c8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	685b      	ldr	r3, [r3, #4]
 80054ce:	f003 0303 	and.w	r3, r3, #3
 80054d2:	2b03      	cmp	r3, #3
 80054d4:	d017      	beq.n	8005506 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	68db      	ldr	r3, [r3, #12]
 80054da:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80054dc:	697b      	ldr	r3, [r7, #20]
 80054de:	005b      	lsls	r3, r3, #1
 80054e0:	2203      	movs	r2, #3
 80054e2:	fa02 f303 	lsl.w	r3, r2, r3
 80054e6:	43db      	mvns	r3, r3
 80054e8:	693a      	ldr	r2, [r7, #16]
 80054ea:	4013      	ands	r3, r2
 80054ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	689a      	ldr	r2, [r3, #8]
 80054f2:	697b      	ldr	r3, [r7, #20]
 80054f4:	005b      	lsls	r3, r3, #1
 80054f6:	fa02 f303 	lsl.w	r3, r2, r3
 80054fa:	693a      	ldr	r2, [r7, #16]
 80054fc:	4313      	orrs	r3, r2
 80054fe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	693a      	ldr	r2, [r7, #16]
 8005504:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	685b      	ldr	r3, [r3, #4]
 800550a:	f003 0303 	and.w	r3, r3, #3
 800550e:	2b02      	cmp	r3, #2
 8005510:	d123      	bne.n	800555a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005512:	697b      	ldr	r3, [r7, #20]
 8005514:	08da      	lsrs	r2, r3, #3
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	3208      	adds	r2, #8
 800551a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800551e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005520:	697b      	ldr	r3, [r7, #20]
 8005522:	f003 0307 	and.w	r3, r3, #7
 8005526:	009b      	lsls	r3, r3, #2
 8005528:	220f      	movs	r2, #15
 800552a:	fa02 f303 	lsl.w	r3, r2, r3
 800552e:	43db      	mvns	r3, r3
 8005530:	693a      	ldr	r2, [r7, #16]
 8005532:	4013      	ands	r3, r2
 8005534:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	691a      	ldr	r2, [r3, #16]
 800553a:	697b      	ldr	r3, [r7, #20]
 800553c:	f003 0307 	and.w	r3, r3, #7
 8005540:	009b      	lsls	r3, r3, #2
 8005542:	fa02 f303 	lsl.w	r3, r2, r3
 8005546:	693a      	ldr	r2, [r7, #16]
 8005548:	4313      	orrs	r3, r2
 800554a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800554c:	697b      	ldr	r3, [r7, #20]
 800554e:	08da      	lsrs	r2, r3, #3
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	3208      	adds	r2, #8
 8005554:	6939      	ldr	r1, [r7, #16]
 8005556:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005560:	697b      	ldr	r3, [r7, #20]
 8005562:	005b      	lsls	r3, r3, #1
 8005564:	2203      	movs	r2, #3
 8005566:	fa02 f303 	lsl.w	r3, r2, r3
 800556a:	43db      	mvns	r3, r3
 800556c:	693a      	ldr	r2, [r7, #16]
 800556e:	4013      	ands	r3, r2
 8005570:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	685b      	ldr	r3, [r3, #4]
 8005576:	f003 0203 	and.w	r2, r3, #3
 800557a:	697b      	ldr	r3, [r7, #20]
 800557c:	005b      	lsls	r3, r3, #1
 800557e:	fa02 f303 	lsl.w	r3, r2, r3
 8005582:	693a      	ldr	r2, [r7, #16]
 8005584:	4313      	orrs	r3, r2
 8005586:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	693a      	ldr	r2, [r7, #16]
 800558c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	685b      	ldr	r3, [r3, #4]
 8005592:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005596:	2b00      	cmp	r3, #0
 8005598:	f000 80a6 	beq.w	80056e8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800559c:	4b5b      	ldr	r3, [pc, #364]	@ (800570c <HAL_GPIO_Init+0x2e4>)
 800559e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80055a0:	4a5a      	ldr	r2, [pc, #360]	@ (800570c <HAL_GPIO_Init+0x2e4>)
 80055a2:	f043 0301 	orr.w	r3, r3, #1
 80055a6:	6613      	str	r3, [r2, #96]	@ 0x60
 80055a8:	4b58      	ldr	r3, [pc, #352]	@ (800570c <HAL_GPIO_Init+0x2e4>)
 80055aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80055ac:	f003 0301 	and.w	r3, r3, #1
 80055b0:	60bb      	str	r3, [r7, #8]
 80055b2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80055b4:	4a56      	ldr	r2, [pc, #344]	@ (8005710 <HAL_GPIO_Init+0x2e8>)
 80055b6:	697b      	ldr	r3, [r7, #20]
 80055b8:	089b      	lsrs	r3, r3, #2
 80055ba:	3302      	adds	r3, #2
 80055bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80055c0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80055c2:	697b      	ldr	r3, [r7, #20]
 80055c4:	f003 0303 	and.w	r3, r3, #3
 80055c8:	009b      	lsls	r3, r3, #2
 80055ca:	220f      	movs	r2, #15
 80055cc:	fa02 f303 	lsl.w	r3, r2, r3
 80055d0:	43db      	mvns	r3, r3
 80055d2:	693a      	ldr	r2, [r7, #16]
 80055d4:	4013      	ands	r3, r2
 80055d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80055de:	d01f      	beq.n	8005620 <HAL_GPIO_Init+0x1f8>
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	4a4c      	ldr	r2, [pc, #304]	@ (8005714 <HAL_GPIO_Init+0x2ec>)
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d019      	beq.n	800561c <HAL_GPIO_Init+0x1f4>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	4a4b      	ldr	r2, [pc, #300]	@ (8005718 <HAL_GPIO_Init+0x2f0>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d013      	beq.n	8005618 <HAL_GPIO_Init+0x1f0>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	4a4a      	ldr	r2, [pc, #296]	@ (800571c <HAL_GPIO_Init+0x2f4>)
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d00d      	beq.n	8005614 <HAL_GPIO_Init+0x1ec>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	4a49      	ldr	r2, [pc, #292]	@ (8005720 <HAL_GPIO_Init+0x2f8>)
 80055fc:	4293      	cmp	r3, r2
 80055fe:	d007      	beq.n	8005610 <HAL_GPIO_Init+0x1e8>
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	4a48      	ldr	r2, [pc, #288]	@ (8005724 <HAL_GPIO_Init+0x2fc>)
 8005604:	4293      	cmp	r3, r2
 8005606:	d101      	bne.n	800560c <HAL_GPIO_Init+0x1e4>
 8005608:	2305      	movs	r3, #5
 800560a:	e00a      	b.n	8005622 <HAL_GPIO_Init+0x1fa>
 800560c:	2306      	movs	r3, #6
 800560e:	e008      	b.n	8005622 <HAL_GPIO_Init+0x1fa>
 8005610:	2304      	movs	r3, #4
 8005612:	e006      	b.n	8005622 <HAL_GPIO_Init+0x1fa>
 8005614:	2303      	movs	r3, #3
 8005616:	e004      	b.n	8005622 <HAL_GPIO_Init+0x1fa>
 8005618:	2302      	movs	r3, #2
 800561a:	e002      	b.n	8005622 <HAL_GPIO_Init+0x1fa>
 800561c:	2301      	movs	r3, #1
 800561e:	e000      	b.n	8005622 <HAL_GPIO_Init+0x1fa>
 8005620:	2300      	movs	r3, #0
 8005622:	697a      	ldr	r2, [r7, #20]
 8005624:	f002 0203 	and.w	r2, r2, #3
 8005628:	0092      	lsls	r2, r2, #2
 800562a:	4093      	lsls	r3, r2
 800562c:	693a      	ldr	r2, [r7, #16]
 800562e:	4313      	orrs	r3, r2
 8005630:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005632:	4937      	ldr	r1, [pc, #220]	@ (8005710 <HAL_GPIO_Init+0x2e8>)
 8005634:	697b      	ldr	r3, [r7, #20]
 8005636:	089b      	lsrs	r3, r3, #2
 8005638:	3302      	adds	r3, #2
 800563a:	693a      	ldr	r2, [r7, #16]
 800563c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005640:	4b39      	ldr	r3, [pc, #228]	@ (8005728 <HAL_GPIO_Init+0x300>)
 8005642:	689b      	ldr	r3, [r3, #8]
 8005644:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	43db      	mvns	r3, r3
 800564a:	693a      	ldr	r2, [r7, #16]
 800564c:	4013      	ands	r3, r2
 800564e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	685b      	ldr	r3, [r3, #4]
 8005654:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005658:	2b00      	cmp	r3, #0
 800565a:	d003      	beq.n	8005664 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800565c:	693a      	ldr	r2, [r7, #16]
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	4313      	orrs	r3, r2
 8005662:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005664:	4a30      	ldr	r2, [pc, #192]	@ (8005728 <HAL_GPIO_Init+0x300>)
 8005666:	693b      	ldr	r3, [r7, #16]
 8005668:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800566a:	4b2f      	ldr	r3, [pc, #188]	@ (8005728 <HAL_GPIO_Init+0x300>)
 800566c:	68db      	ldr	r3, [r3, #12]
 800566e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	43db      	mvns	r3, r3
 8005674:	693a      	ldr	r2, [r7, #16]
 8005676:	4013      	ands	r3, r2
 8005678:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	685b      	ldr	r3, [r3, #4]
 800567e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005682:	2b00      	cmp	r3, #0
 8005684:	d003      	beq.n	800568e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8005686:	693a      	ldr	r2, [r7, #16]
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	4313      	orrs	r3, r2
 800568c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800568e:	4a26      	ldr	r2, [pc, #152]	@ (8005728 <HAL_GPIO_Init+0x300>)
 8005690:	693b      	ldr	r3, [r7, #16]
 8005692:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8005694:	4b24      	ldr	r3, [pc, #144]	@ (8005728 <HAL_GPIO_Init+0x300>)
 8005696:	685b      	ldr	r3, [r3, #4]
 8005698:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	43db      	mvns	r3, r3
 800569e:	693a      	ldr	r2, [r7, #16]
 80056a0:	4013      	ands	r3, r2
 80056a2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	685b      	ldr	r3, [r3, #4]
 80056a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d003      	beq.n	80056b8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80056b0:	693a      	ldr	r2, [r7, #16]
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	4313      	orrs	r3, r2
 80056b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80056b8:	4a1b      	ldr	r2, [pc, #108]	@ (8005728 <HAL_GPIO_Init+0x300>)
 80056ba:	693b      	ldr	r3, [r7, #16]
 80056bc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80056be:	4b1a      	ldr	r3, [pc, #104]	@ (8005728 <HAL_GPIO_Init+0x300>)
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	43db      	mvns	r3, r3
 80056c8:	693a      	ldr	r2, [r7, #16]
 80056ca:	4013      	ands	r3, r2
 80056cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	685b      	ldr	r3, [r3, #4]
 80056d2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d003      	beq.n	80056e2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80056da:	693a      	ldr	r2, [r7, #16]
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	4313      	orrs	r3, r2
 80056e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80056e2:	4a11      	ldr	r2, [pc, #68]	@ (8005728 <HAL_GPIO_Init+0x300>)
 80056e4:	693b      	ldr	r3, [r7, #16]
 80056e6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80056e8:	697b      	ldr	r3, [r7, #20]
 80056ea:	3301      	adds	r3, #1
 80056ec:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	681a      	ldr	r2, [r3, #0]
 80056f2:	697b      	ldr	r3, [r7, #20]
 80056f4:	fa22 f303 	lsr.w	r3, r2, r3
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	f47f ae9d 	bne.w	8005438 <HAL_GPIO_Init+0x10>
  }
}
 80056fe:	bf00      	nop
 8005700:	bf00      	nop
 8005702:	371c      	adds	r7, #28
 8005704:	46bd      	mov	sp, r7
 8005706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570a:	4770      	bx	lr
 800570c:	40021000 	.word	0x40021000
 8005710:	40010000 	.word	0x40010000
 8005714:	48000400 	.word	0x48000400
 8005718:	48000800 	.word	0x48000800
 800571c:	48000c00 	.word	0x48000c00
 8005720:	48001000 	.word	0x48001000
 8005724:	48001400 	.word	0x48001400
 8005728:	40010400 	.word	0x40010400

0800572c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800572c:	b480      	push	{r7}
 800572e:	b083      	sub	sp, #12
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
 8005734:	460b      	mov	r3, r1
 8005736:	807b      	strh	r3, [r7, #2]
 8005738:	4613      	mov	r3, r2
 800573a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800573c:	787b      	ldrb	r3, [r7, #1]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d003      	beq.n	800574a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005742:	887a      	ldrh	r2, [r7, #2]
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005748:	e002      	b.n	8005750 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800574a:	887a      	ldrh	r2, [r7, #2]
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005750:	bf00      	nop
 8005752:	370c      	adds	r7, #12
 8005754:	46bd      	mov	sp, r7
 8005756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575a:	4770      	bx	lr

0800575c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800575c:	b580      	push	{r7, lr}
 800575e:	b082      	sub	sp, #8
 8005760:	af00      	add	r7, sp, #0
 8005762:	4603      	mov	r3, r0
 8005764:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005766:	4b08      	ldr	r3, [pc, #32]	@ (8005788 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005768:	695a      	ldr	r2, [r3, #20]
 800576a:	88fb      	ldrh	r3, [r7, #6]
 800576c:	4013      	ands	r3, r2
 800576e:	2b00      	cmp	r3, #0
 8005770:	d006      	beq.n	8005780 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005772:	4a05      	ldr	r2, [pc, #20]	@ (8005788 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005774:	88fb      	ldrh	r3, [r7, #6]
 8005776:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005778:	88fb      	ldrh	r3, [r7, #6]
 800577a:	4618      	mov	r0, r3
 800577c:	f7fc fe50 	bl	8002420 <HAL_GPIO_EXTI_Callback>
  }
}
 8005780:	bf00      	nop
 8005782:	3708      	adds	r7, #8
 8005784:	46bd      	mov	sp, r7
 8005786:	bd80      	pop	{r7, pc}
 8005788:	40010400 	.word	0x40010400

0800578c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800578c:	b480      	push	{r7}
 800578e:	b085      	sub	sp, #20
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d141      	bne.n	800581e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800579a:	4b4b      	ldr	r3, [pc, #300]	@ (80058c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80057a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80057a6:	d131      	bne.n	800580c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80057a8:	4b47      	ldr	r3, [pc, #284]	@ (80058c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80057aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80057ae:	4a46      	ldr	r2, [pc, #280]	@ (80058c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80057b0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80057b4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80057b8:	4b43      	ldr	r3, [pc, #268]	@ (80058c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80057c0:	4a41      	ldr	r2, [pc, #260]	@ (80058c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80057c2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80057c6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80057c8:	4b40      	ldr	r3, [pc, #256]	@ (80058cc <HAL_PWREx_ControlVoltageScaling+0x140>)
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	2232      	movs	r2, #50	@ 0x32
 80057ce:	fb02 f303 	mul.w	r3, r2, r3
 80057d2:	4a3f      	ldr	r2, [pc, #252]	@ (80058d0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80057d4:	fba2 2303 	umull	r2, r3, r2, r3
 80057d8:	0c9b      	lsrs	r3, r3, #18
 80057da:	3301      	adds	r3, #1
 80057dc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80057de:	e002      	b.n	80057e6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	3b01      	subs	r3, #1
 80057e4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80057e6:	4b38      	ldr	r3, [pc, #224]	@ (80058c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80057e8:	695b      	ldr	r3, [r3, #20]
 80057ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80057ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80057f2:	d102      	bne.n	80057fa <HAL_PWREx_ControlVoltageScaling+0x6e>
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d1f2      	bne.n	80057e0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80057fa:	4b33      	ldr	r3, [pc, #204]	@ (80058c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80057fc:	695b      	ldr	r3, [r3, #20]
 80057fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005802:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005806:	d158      	bne.n	80058ba <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005808:	2303      	movs	r3, #3
 800580a:	e057      	b.n	80058bc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800580c:	4b2e      	ldr	r3, [pc, #184]	@ (80058c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800580e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005812:	4a2d      	ldr	r2, [pc, #180]	@ (80058c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005814:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005818:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800581c:	e04d      	b.n	80058ba <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005824:	d141      	bne.n	80058aa <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005826:	4b28      	ldr	r3, [pc, #160]	@ (80058c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800582e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005832:	d131      	bne.n	8005898 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005834:	4b24      	ldr	r3, [pc, #144]	@ (80058c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005836:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800583a:	4a23      	ldr	r2, [pc, #140]	@ (80058c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800583c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005840:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005844:	4b20      	ldr	r3, [pc, #128]	@ (80058c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800584c:	4a1e      	ldr	r2, [pc, #120]	@ (80058c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800584e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005852:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005854:	4b1d      	ldr	r3, [pc, #116]	@ (80058cc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	2232      	movs	r2, #50	@ 0x32
 800585a:	fb02 f303 	mul.w	r3, r2, r3
 800585e:	4a1c      	ldr	r2, [pc, #112]	@ (80058d0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005860:	fba2 2303 	umull	r2, r3, r2, r3
 8005864:	0c9b      	lsrs	r3, r3, #18
 8005866:	3301      	adds	r3, #1
 8005868:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800586a:	e002      	b.n	8005872 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	3b01      	subs	r3, #1
 8005870:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005872:	4b15      	ldr	r3, [pc, #84]	@ (80058c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005874:	695b      	ldr	r3, [r3, #20]
 8005876:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800587a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800587e:	d102      	bne.n	8005886 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d1f2      	bne.n	800586c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005886:	4b10      	ldr	r3, [pc, #64]	@ (80058c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005888:	695b      	ldr	r3, [r3, #20]
 800588a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800588e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005892:	d112      	bne.n	80058ba <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005894:	2303      	movs	r3, #3
 8005896:	e011      	b.n	80058bc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005898:	4b0b      	ldr	r3, [pc, #44]	@ (80058c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800589a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800589e:	4a0a      	ldr	r2, [pc, #40]	@ (80058c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80058a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80058a4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80058a8:	e007      	b.n	80058ba <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80058aa:	4b07      	ldr	r3, [pc, #28]	@ (80058c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80058b2:	4a05      	ldr	r2, [pc, #20]	@ (80058c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80058b4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80058b8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80058ba:	2300      	movs	r3, #0
}
 80058bc:	4618      	mov	r0, r3
 80058be:	3714      	adds	r7, #20
 80058c0:	46bd      	mov	sp, r7
 80058c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c6:	4770      	bx	lr
 80058c8:	40007000 	.word	0x40007000
 80058cc:	20000200 	.word	0x20000200
 80058d0:	431bde83 	.word	0x431bde83

080058d4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80058d4:	b480      	push	{r7}
 80058d6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80058d8:	4b05      	ldr	r3, [pc, #20]	@ (80058f0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80058da:	689b      	ldr	r3, [r3, #8]
 80058dc:	4a04      	ldr	r2, [pc, #16]	@ (80058f0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80058de:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80058e2:	6093      	str	r3, [r2, #8]
}
 80058e4:	bf00      	nop
 80058e6:	46bd      	mov	sp, r7
 80058e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ec:	4770      	bx	lr
 80058ee:	bf00      	nop
 80058f0:	40007000 	.word	0x40007000

080058f4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b088      	sub	sp, #32
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d101      	bne.n	8005906 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005902:	2301      	movs	r3, #1
 8005904:	e2fe      	b.n	8005f04 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f003 0301 	and.w	r3, r3, #1
 800590e:	2b00      	cmp	r3, #0
 8005910:	d075      	beq.n	80059fe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005912:	4b97      	ldr	r3, [pc, #604]	@ (8005b70 <HAL_RCC_OscConfig+0x27c>)
 8005914:	689b      	ldr	r3, [r3, #8]
 8005916:	f003 030c 	and.w	r3, r3, #12
 800591a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800591c:	4b94      	ldr	r3, [pc, #592]	@ (8005b70 <HAL_RCC_OscConfig+0x27c>)
 800591e:	68db      	ldr	r3, [r3, #12]
 8005920:	f003 0303 	and.w	r3, r3, #3
 8005924:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8005926:	69bb      	ldr	r3, [r7, #24]
 8005928:	2b0c      	cmp	r3, #12
 800592a:	d102      	bne.n	8005932 <HAL_RCC_OscConfig+0x3e>
 800592c:	697b      	ldr	r3, [r7, #20]
 800592e:	2b03      	cmp	r3, #3
 8005930:	d002      	beq.n	8005938 <HAL_RCC_OscConfig+0x44>
 8005932:	69bb      	ldr	r3, [r7, #24]
 8005934:	2b08      	cmp	r3, #8
 8005936:	d10b      	bne.n	8005950 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005938:	4b8d      	ldr	r3, [pc, #564]	@ (8005b70 <HAL_RCC_OscConfig+0x27c>)
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005940:	2b00      	cmp	r3, #0
 8005942:	d05b      	beq.n	80059fc <HAL_RCC_OscConfig+0x108>
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	685b      	ldr	r3, [r3, #4]
 8005948:	2b00      	cmp	r3, #0
 800594a:	d157      	bne.n	80059fc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800594c:	2301      	movs	r3, #1
 800594e:	e2d9      	b.n	8005f04 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	685b      	ldr	r3, [r3, #4]
 8005954:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005958:	d106      	bne.n	8005968 <HAL_RCC_OscConfig+0x74>
 800595a:	4b85      	ldr	r3, [pc, #532]	@ (8005b70 <HAL_RCC_OscConfig+0x27c>)
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	4a84      	ldr	r2, [pc, #528]	@ (8005b70 <HAL_RCC_OscConfig+0x27c>)
 8005960:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005964:	6013      	str	r3, [r2, #0]
 8005966:	e01d      	b.n	80059a4 <HAL_RCC_OscConfig+0xb0>
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	685b      	ldr	r3, [r3, #4]
 800596c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005970:	d10c      	bne.n	800598c <HAL_RCC_OscConfig+0x98>
 8005972:	4b7f      	ldr	r3, [pc, #508]	@ (8005b70 <HAL_RCC_OscConfig+0x27c>)
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	4a7e      	ldr	r2, [pc, #504]	@ (8005b70 <HAL_RCC_OscConfig+0x27c>)
 8005978:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800597c:	6013      	str	r3, [r2, #0]
 800597e:	4b7c      	ldr	r3, [pc, #496]	@ (8005b70 <HAL_RCC_OscConfig+0x27c>)
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	4a7b      	ldr	r2, [pc, #492]	@ (8005b70 <HAL_RCC_OscConfig+0x27c>)
 8005984:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005988:	6013      	str	r3, [r2, #0]
 800598a:	e00b      	b.n	80059a4 <HAL_RCC_OscConfig+0xb0>
 800598c:	4b78      	ldr	r3, [pc, #480]	@ (8005b70 <HAL_RCC_OscConfig+0x27c>)
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	4a77      	ldr	r2, [pc, #476]	@ (8005b70 <HAL_RCC_OscConfig+0x27c>)
 8005992:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005996:	6013      	str	r3, [r2, #0]
 8005998:	4b75      	ldr	r3, [pc, #468]	@ (8005b70 <HAL_RCC_OscConfig+0x27c>)
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	4a74      	ldr	r2, [pc, #464]	@ (8005b70 <HAL_RCC_OscConfig+0x27c>)
 800599e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80059a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	685b      	ldr	r3, [r3, #4]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d013      	beq.n	80059d4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059ac:	f7fd fe24 	bl	80035f8 <HAL_GetTick>
 80059b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80059b2:	e008      	b.n	80059c6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80059b4:	f7fd fe20 	bl	80035f8 <HAL_GetTick>
 80059b8:	4602      	mov	r2, r0
 80059ba:	693b      	ldr	r3, [r7, #16]
 80059bc:	1ad3      	subs	r3, r2, r3
 80059be:	2b64      	cmp	r3, #100	@ 0x64
 80059c0:	d901      	bls.n	80059c6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80059c2:	2303      	movs	r3, #3
 80059c4:	e29e      	b.n	8005f04 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80059c6:	4b6a      	ldr	r3, [pc, #424]	@ (8005b70 <HAL_RCC_OscConfig+0x27c>)
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d0f0      	beq.n	80059b4 <HAL_RCC_OscConfig+0xc0>
 80059d2:	e014      	b.n	80059fe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059d4:	f7fd fe10 	bl	80035f8 <HAL_GetTick>
 80059d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80059da:	e008      	b.n	80059ee <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80059dc:	f7fd fe0c 	bl	80035f8 <HAL_GetTick>
 80059e0:	4602      	mov	r2, r0
 80059e2:	693b      	ldr	r3, [r7, #16]
 80059e4:	1ad3      	subs	r3, r2, r3
 80059e6:	2b64      	cmp	r3, #100	@ 0x64
 80059e8:	d901      	bls.n	80059ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80059ea:	2303      	movs	r3, #3
 80059ec:	e28a      	b.n	8005f04 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80059ee:	4b60      	ldr	r3, [pc, #384]	@ (8005b70 <HAL_RCC_OscConfig+0x27c>)
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d1f0      	bne.n	80059dc <HAL_RCC_OscConfig+0xe8>
 80059fa:	e000      	b.n	80059fe <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80059fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f003 0302 	and.w	r3, r3, #2
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d075      	beq.n	8005af6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005a0a:	4b59      	ldr	r3, [pc, #356]	@ (8005b70 <HAL_RCC_OscConfig+0x27c>)
 8005a0c:	689b      	ldr	r3, [r3, #8]
 8005a0e:	f003 030c 	and.w	r3, r3, #12
 8005a12:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005a14:	4b56      	ldr	r3, [pc, #344]	@ (8005b70 <HAL_RCC_OscConfig+0x27c>)
 8005a16:	68db      	ldr	r3, [r3, #12]
 8005a18:	f003 0303 	and.w	r3, r3, #3
 8005a1c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8005a1e:	69bb      	ldr	r3, [r7, #24]
 8005a20:	2b0c      	cmp	r3, #12
 8005a22:	d102      	bne.n	8005a2a <HAL_RCC_OscConfig+0x136>
 8005a24:	697b      	ldr	r3, [r7, #20]
 8005a26:	2b02      	cmp	r3, #2
 8005a28:	d002      	beq.n	8005a30 <HAL_RCC_OscConfig+0x13c>
 8005a2a:	69bb      	ldr	r3, [r7, #24]
 8005a2c:	2b04      	cmp	r3, #4
 8005a2e:	d11f      	bne.n	8005a70 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005a30:	4b4f      	ldr	r3, [pc, #316]	@ (8005b70 <HAL_RCC_OscConfig+0x27c>)
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d005      	beq.n	8005a48 <HAL_RCC_OscConfig+0x154>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	68db      	ldr	r3, [r3, #12]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d101      	bne.n	8005a48 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8005a44:	2301      	movs	r3, #1
 8005a46:	e25d      	b.n	8005f04 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a48:	4b49      	ldr	r3, [pc, #292]	@ (8005b70 <HAL_RCC_OscConfig+0x27c>)
 8005a4a:	685b      	ldr	r3, [r3, #4]
 8005a4c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	691b      	ldr	r3, [r3, #16]
 8005a54:	061b      	lsls	r3, r3, #24
 8005a56:	4946      	ldr	r1, [pc, #280]	@ (8005b70 <HAL_RCC_OscConfig+0x27c>)
 8005a58:	4313      	orrs	r3, r2
 8005a5a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005a5c:	4b45      	ldr	r3, [pc, #276]	@ (8005b74 <HAL_RCC_OscConfig+0x280>)
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	4618      	mov	r0, r3
 8005a62:	f7fd fd7d 	bl	8003560 <HAL_InitTick>
 8005a66:	4603      	mov	r3, r0
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d043      	beq.n	8005af4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8005a6c:	2301      	movs	r3, #1
 8005a6e:	e249      	b.n	8005f04 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	68db      	ldr	r3, [r3, #12]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d023      	beq.n	8005ac0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005a78:	4b3d      	ldr	r3, [pc, #244]	@ (8005b70 <HAL_RCC_OscConfig+0x27c>)
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4a3c      	ldr	r2, [pc, #240]	@ (8005b70 <HAL_RCC_OscConfig+0x27c>)
 8005a7e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005a82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a84:	f7fd fdb8 	bl	80035f8 <HAL_GetTick>
 8005a88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005a8a:	e008      	b.n	8005a9e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005a8c:	f7fd fdb4 	bl	80035f8 <HAL_GetTick>
 8005a90:	4602      	mov	r2, r0
 8005a92:	693b      	ldr	r3, [r7, #16]
 8005a94:	1ad3      	subs	r3, r2, r3
 8005a96:	2b02      	cmp	r3, #2
 8005a98:	d901      	bls.n	8005a9e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005a9a:	2303      	movs	r3, #3
 8005a9c:	e232      	b.n	8005f04 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005a9e:	4b34      	ldr	r3, [pc, #208]	@ (8005b70 <HAL_RCC_OscConfig+0x27c>)
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d0f0      	beq.n	8005a8c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005aaa:	4b31      	ldr	r3, [pc, #196]	@ (8005b70 <HAL_RCC_OscConfig+0x27c>)
 8005aac:	685b      	ldr	r3, [r3, #4]
 8005aae:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	691b      	ldr	r3, [r3, #16]
 8005ab6:	061b      	lsls	r3, r3, #24
 8005ab8:	492d      	ldr	r1, [pc, #180]	@ (8005b70 <HAL_RCC_OscConfig+0x27c>)
 8005aba:	4313      	orrs	r3, r2
 8005abc:	604b      	str	r3, [r1, #4]
 8005abe:	e01a      	b.n	8005af6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005ac0:	4b2b      	ldr	r3, [pc, #172]	@ (8005b70 <HAL_RCC_OscConfig+0x27c>)
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	4a2a      	ldr	r2, [pc, #168]	@ (8005b70 <HAL_RCC_OscConfig+0x27c>)
 8005ac6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005aca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005acc:	f7fd fd94 	bl	80035f8 <HAL_GetTick>
 8005ad0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005ad2:	e008      	b.n	8005ae6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005ad4:	f7fd fd90 	bl	80035f8 <HAL_GetTick>
 8005ad8:	4602      	mov	r2, r0
 8005ada:	693b      	ldr	r3, [r7, #16]
 8005adc:	1ad3      	subs	r3, r2, r3
 8005ade:	2b02      	cmp	r3, #2
 8005ae0:	d901      	bls.n	8005ae6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8005ae2:	2303      	movs	r3, #3
 8005ae4:	e20e      	b.n	8005f04 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005ae6:	4b22      	ldr	r3, [pc, #136]	@ (8005b70 <HAL_RCC_OscConfig+0x27c>)
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d1f0      	bne.n	8005ad4 <HAL_RCC_OscConfig+0x1e0>
 8005af2:	e000      	b.n	8005af6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005af4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f003 0308 	and.w	r3, r3, #8
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d041      	beq.n	8005b86 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	695b      	ldr	r3, [r3, #20]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d01c      	beq.n	8005b44 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005b0a:	4b19      	ldr	r3, [pc, #100]	@ (8005b70 <HAL_RCC_OscConfig+0x27c>)
 8005b0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005b10:	4a17      	ldr	r2, [pc, #92]	@ (8005b70 <HAL_RCC_OscConfig+0x27c>)
 8005b12:	f043 0301 	orr.w	r3, r3, #1
 8005b16:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b1a:	f7fd fd6d 	bl	80035f8 <HAL_GetTick>
 8005b1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005b20:	e008      	b.n	8005b34 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005b22:	f7fd fd69 	bl	80035f8 <HAL_GetTick>
 8005b26:	4602      	mov	r2, r0
 8005b28:	693b      	ldr	r3, [r7, #16]
 8005b2a:	1ad3      	subs	r3, r2, r3
 8005b2c:	2b02      	cmp	r3, #2
 8005b2e:	d901      	bls.n	8005b34 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005b30:	2303      	movs	r3, #3
 8005b32:	e1e7      	b.n	8005f04 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005b34:	4b0e      	ldr	r3, [pc, #56]	@ (8005b70 <HAL_RCC_OscConfig+0x27c>)
 8005b36:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005b3a:	f003 0302 	and.w	r3, r3, #2
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d0ef      	beq.n	8005b22 <HAL_RCC_OscConfig+0x22e>
 8005b42:	e020      	b.n	8005b86 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005b44:	4b0a      	ldr	r3, [pc, #40]	@ (8005b70 <HAL_RCC_OscConfig+0x27c>)
 8005b46:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005b4a:	4a09      	ldr	r2, [pc, #36]	@ (8005b70 <HAL_RCC_OscConfig+0x27c>)
 8005b4c:	f023 0301 	bic.w	r3, r3, #1
 8005b50:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b54:	f7fd fd50 	bl	80035f8 <HAL_GetTick>
 8005b58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005b5a:	e00d      	b.n	8005b78 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005b5c:	f7fd fd4c 	bl	80035f8 <HAL_GetTick>
 8005b60:	4602      	mov	r2, r0
 8005b62:	693b      	ldr	r3, [r7, #16]
 8005b64:	1ad3      	subs	r3, r2, r3
 8005b66:	2b02      	cmp	r3, #2
 8005b68:	d906      	bls.n	8005b78 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005b6a:	2303      	movs	r3, #3
 8005b6c:	e1ca      	b.n	8005f04 <HAL_RCC_OscConfig+0x610>
 8005b6e:	bf00      	nop
 8005b70:	40021000 	.word	0x40021000
 8005b74:	20000204 	.word	0x20000204
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005b78:	4b8c      	ldr	r3, [pc, #560]	@ (8005dac <HAL_RCC_OscConfig+0x4b8>)
 8005b7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005b7e:	f003 0302 	and.w	r3, r3, #2
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d1ea      	bne.n	8005b5c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f003 0304 	and.w	r3, r3, #4
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	f000 80a6 	beq.w	8005ce0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005b94:	2300      	movs	r3, #0
 8005b96:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005b98:	4b84      	ldr	r3, [pc, #528]	@ (8005dac <HAL_RCC_OscConfig+0x4b8>)
 8005b9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b9c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d101      	bne.n	8005ba8 <HAL_RCC_OscConfig+0x2b4>
 8005ba4:	2301      	movs	r3, #1
 8005ba6:	e000      	b.n	8005baa <HAL_RCC_OscConfig+0x2b6>
 8005ba8:	2300      	movs	r3, #0
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d00d      	beq.n	8005bca <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005bae:	4b7f      	ldr	r3, [pc, #508]	@ (8005dac <HAL_RCC_OscConfig+0x4b8>)
 8005bb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005bb2:	4a7e      	ldr	r2, [pc, #504]	@ (8005dac <HAL_RCC_OscConfig+0x4b8>)
 8005bb4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005bb8:	6593      	str	r3, [r2, #88]	@ 0x58
 8005bba:	4b7c      	ldr	r3, [pc, #496]	@ (8005dac <HAL_RCC_OscConfig+0x4b8>)
 8005bbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005bbe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005bc2:	60fb      	str	r3, [r7, #12]
 8005bc4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005bc6:	2301      	movs	r3, #1
 8005bc8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005bca:	4b79      	ldr	r3, [pc, #484]	@ (8005db0 <HAL_RCC_OscConfig+0x4bc>)
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d118      	bne.n	8005c08 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005bd6:	4b76      	ldr	r3, [pc, #472]	@ (8005db0 <HAL_RCC_OscConfig+0x4bc>)
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	4a75      	ldr	r2, [pc, #468]	@ (8005db0 <HAL_RCC_OscConfig+0x4bc>)
 8005bdc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005be0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005be2:	f7fd fd09 	bl	80035f8 <HAL_GetTick>
 8005be6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005be8:	e008      	b.n	8005bfc <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005bea:	f7fd fd05 	bl	80035f8 <HAL_GetTick>
 8005bee:	4602      	mov	r2, r0
 8005bf0:	693b      	ldr	r3, [r7, #16]
 8005bf2:	1ad3      	subs	r3, r2, r3
 8005bf4:	2b02      	cmp	r3, #2
 8005bf6:	d901      	bls.n	8005bfc <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8005bf8:	2303      	movs	r3, #3
 8005bfa:	e183      	b.n	8005f04 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005bfc:	4b6c      	ldr	r3, [pc, #432]	@ (8005db0 <HAL_RCC_OscConfig+0x4bc>)
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d0f0      	beq.n	8005bea <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	689b      	ldr	r3, [r3, #8]
 8005c0c:	2b01      	cmp	r3, #1
 8005c0e:	d108      	bne.n	8005c22 <HAL_RCC_OscConfig+0x32e>
 8005c10:	4b66      	ldr	r3, [pc, #408]	@ (8005dac <HAL_RCC_OscConfig+0x4b8>)
 8005c12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c16:	4a65      	ldr	r2, [pc, #404]	@ (8005dac <HAL_RCC_OscConfig+0x4b8>)
 8005c18:	f043 0301 	orr.w	r3, r3, #1
 8005c1c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005c20:	e024      	b.n	8005c6c <HAL_RCC_OscConfig+0x378>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	689b      	ldr	r3, [r3, #8]
 8005c26:	2b05      	cmp	r3, #5
 8005c28:	d110      	bne.n	8005c4c <HAL_RCC_OscConfig+0x358>
 8005c2a:	4b60      	ldr	r3, [pc, #384]	@ (8005dac <HAL_RCC_OscConfig+0x4b8>)
 8005c2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c30:	4a5e      	ldr	r2, [pc, #376]	@ (8005dac <HAL_RCC_OscConfig+0x4b8>)
 8005c32:	f043 0304 	orr.w	r3, r3, #4
 8005c36:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005c3a:	4b5c      	ldr	r3, [pc, #368]	@ (8005dac <HAL_RCC_OscConfig+0x4b8>)
 8005c3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c40:	4a5a      	ldr	r2, [pc, #360]	@ (8005dac <HAL_RCC_OscConfig+0x4b8>)
 8005c42:	f043 0301 	orr.w	r3, r3, #1
 8005c46:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005c4a:	e00f      	b.n	8005c6c <HAL_RCC_OscConfig+0x378>
 8005c4c:	4b57      	ldr	r3, [pc, #348]	@ (8005dac <HAL_RCC_OscConfig+0x4b8>)
 8005c4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c52:	4a56      	ldr	r2, [pc, #344]	@ (8005dac <HAL_RCC_OscConfig+0x4b8>)
 8005c54:	f023 0301 	bic.w	r3, r3, #1
 8005c58:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005c5c:	4b53      	ldr	r3, [pc, #332]	@ (8005dac <HAL_RCC_OscConfig+0x4b8>)
 8005c5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c62:	4a52      	ldr	r2, [pc, #328]	@ (8005dac <HAL_RCC_OscConfig+0x4b8>)
 8005c64:	f023 0304 	bic.w	r3, r3, #4
 8005c68:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	689b      	ldr	r3, [r3, #8]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d016      	beq.n	8005ca2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c74:	f7fd fcc0 	bl	80035f8 <HAL_GetTick>
 8005c78:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005c7a:	e00a      	b.n	8005c92 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c7c:	f7fd fcbc 	bl	80035f8 <HAL_GetTick>
 8005c80:	4602      	mov	r2, r0
 8005c82:	693b      	ldr	r3, [r7, #16]
 8005c84:	1ad3      	subs	r3, r2, r3
 8005c86:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c8a:	4293      	cmp	r3, r2
 8005c8c:	d901      	bls.n	8005c92 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8005c8e:	2303      	movs	r3, #3
 8005c90:	e138      	b.n	8005f04 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005c92:	4b46      	ldr	r3, [pc, #280]	@ (8005dac <HAL_RCC_OscConfig+0x4b8>)
 8005c94:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c98:	f003 0302 	and.w	r3, r3, #2
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d0ed      	beq.n	8005c7c <HAL_RCC_OscConfig+0x388>
 8005ca0:	e015      	b.n	8005cce <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ca2:	f7fd fca9 	bl	80035f8 <HAL_GetTick>
 8005ca6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005ca8:	e00a      	b.n	8005cc0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005caa:	f7fd fca5 	bl	80035f8 <HAL_GetTick>
 8005cae:	4602      	mov	r2, r0
 8005cb0:	693b      	ldr	r3, [r7, #16]
 8005cb2:	1ad3      	subs	r3, r2, r3
 8005cb4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005cb8:	4293      	cmp	r3, r2
 8005cba:	d901      	bls.n	8005cc0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005cbc:	2303      	movs	r3, #3
 8005cbe:	e121      	b.n	8005f04 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005cc0:	4b3a      	ldr	r3, [pc, #232]	@ (8005dac <HAL_RCC_OscConfig+0x4b8>)
 8005cc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005cc6:	f003 0302 	and.w	r3, r3, #2
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d1ed      	bne.n	8005caa <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005cce:	7ffb      	ldrb	r3, [r7, #31]
 8005cd0:	2b01      	cmp	r3, #1
 8005cd2:	d105      	bne.n	8005ce0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005cd4:	4b35      	ldr	r3, [pc, #212]	@ (8005dac <HAL_RCC_OscConfig+0x4b8>)
 8005cd6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005cd8:	4a34      	ldr	r2, [pc, #208]	@ (8005dac <HAL_RCC_OscConfig+0x4b8>)
 8005cda:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005cde:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f003 0320 	and.w	r3, r3, #32
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d03c      	beq.n	8005d66 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	699b      	ldr	r3, [r3, #24]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d01c      	beq.n	8005d2e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005cf4:	4b2d      	ldr	r3, [pc, #180]	@ (8005dac <HAL_RCC_OscConfig+0x4b8>)
 8005cf6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005cfa:	4a2c      	ldr	r2, [pc, #176]	@ (8005dac <HAL_RCC_OscConfig+0x4b8>)
 8005cfc:	f043 0301 	orr.w	r3, r3, #1
 8005d00:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d04:	f7fd fc78 	bl	80035f8 <HAL_GetTick>
 8005d08:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005d0a:	e008      	b.n	8005d1e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005d0c:	f7fd fc74 	bl	80035f8 <HAL_GetTick>
 8005d10:	4602      	mov	r2, r0
 8005d12:	693b      	ldr	r3, [r7, #16]
 8005d14:	1ad3      	subs	r3, r2, r3
 8005d16:	2b02      	cmp	r3, #2
 8005d18:	d901      	bls.n	8005d1e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8005d1a:	2303      	movs	r3, #3
 8005d1c:	e0f2      	b.n	8005f04 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005d1e:	4b23      	ldr	r3, [pc, #140]	@ (8005dac <HAL_RCC_OscConfig+0x4b8>)
 8005d20:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005d24:	f003 0302 	and.w	r3, r3, #2
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d0ef      	beq.n	8005d0c <HAL_RCC_OscConfig+0x418>
 8005d2c:	e01b      	b.n	8005d66 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005d2e:	4b1f      	ldr	r3, [pc, #124]	@ (8005dac <HAL_RCC_OscConfig+0x4b8>)
 8005d30:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005d34:	4a1d      	ldr	r2, [pc, #116]	@ (8005dac <HAL_RCC_OscConfig+0x4b8>)
 8005d36:	f023 0301 	bic.w	r3, r3, #1
 8005d3a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d3e:	f7fd fc5b 	bl	80035f8 <HAL_GetTick>
 8005d42:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005d44:	e008      	b.n	8005d58 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005d46:	f7fd fc57 	bl	80035f8 <HAL_GetTick>
 8005d4a:	4602      	mov	r2, r0
 8005d4c:	693b      	ldr	r3, [r7, #16]
 8005d4e:	1ad3      	subs	r3, r2, r3
 8005d50:	2b02      	cmp	r3, #2
 8005d52:	d901      	bls.n	8005d58 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8005d54:	2303      	movs	r3, #3
 8005d56:	e0d5      	b.n	8005f04 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005d58:	4b14      	ldr	r3, [pc, #80]	@ (8005dac <HAL_RCC_OscConfig+0x4b8>)
 8005d5a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005d5e:	f003 0302 	and.w	r3, r3, #2
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d1ef      	bne.n	8005d46 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	69db      	ldr	r3, [r3, #28]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	f000 80c9 	beq.w	8005f02 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005d70:	4b0e      	ldr	r3, [pc, #56]	@ (8005dac <HAL_RCC_OscConfig+0x4b8>)
 8005d72:	689b      	ldr	r3, [r3, #8]
 8005d74:	f003 030c 	and.w	r3, r3, #12
 8005d78:	2b0c      	cmp	r3, #12
 8005d7a:	f000 8083 	beq.w	8005e84 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	69db      	ldr	r3, [r3, #28]
 8005d82:	2b02      	cmp	r3, #2
 8005d84:	d15e      	bne.n	8005e44 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d86:	4b09      	ldr	r3, [pc, #36]	@ (8005dac <HAL_RCC_OscConfig+0x4b8>)
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	4a08      	ldr	r2, [pc, #32]	@ (8005dac <HAL_RCC_OscConfig+0x4b8>)
 8005d8c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005d90:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d92:	f7fd fc31 	bl	80035f8 <HAL_GetTick>
 8005d96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005d98:	e00c      	b.n	8005db4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d9a:	f7fd fc2d 	bl	80035f8 <HAL_GetTick>
 8005d9e:	4602      	mov	r2, r0
 8005da0:	693b      	ldr	r3, [r7, #16]
 8005da2:	1ad3      	subs	r3, r2, r3
 8005da4:	2b02      	cmp	r3, #2
 8005da6:	d905      	bls.n	8005db4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8005da8:	2303      	movs	r3, #3
 8005daa:	e0ab      	b.n	8005f04 <HAL_RCC_OscConfig+0x610>
 8005dac:	40021000 	.word	0x40021000
 8005db0:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005db4:	4b55      	ldr	r3, [pc, #340]	@ (8005f0c <HAL_RCC_OscConfig+0x618>)
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d1ec      	bne.n	8005d9a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005dc0:	4b52      	ldr	r3, [pc, #328]	@ (8005f0c <HAL_RCC_OscConfig+0x618>)
 8005dc2:	68da      	ldr	r2, [r3, #12]
 8005dc4:	4b52      	ldr	r3, [pc, #328]	@ (8005f10 <HAL_RCC_OscConfig+0x61c>)
 8005dc6:	4013      	ands	r3, r2
 8005dc8:	687a      	ldr	r2, [r7, #4]
 8005dca:	6a11      	ldr	r1, [r2, #32]
 8005dcc:	687a      	ldr	r2, [r7, #4]
 8005dce:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005dd0:	3a01      	subs	r2, #1
 8005dd2:	0112      	lsls	r2, r2, #4
 8005dd4:	4311      	orrs	r1, r2
 8005dd6:	687a      	ldr	r2, [r7, #4]
 8005dd8:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8005dda:	0212      	lsls	r2, r2, #8
 8005ddc:	4311      	orrs	r1, r2
 8005dde:	687a      	ldr	r2, [r7, #4]
 8005de0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005de2:	0852      	lsrs	r2, r2, #1
 8005de4:	3a01      	subs	r2, #1
 8005de6:	0552      	lsls	r2, r2, #21
 8005de8:	4311      	orrs	r1, r2
 8005dea:	687a      	ldr	r2, [r7, #4]
 8005dec:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005dee:	0852      	lsrs	r2, r2, #1
 8005df0:	3a01      	subs	r2, #1
 8005df2:	0652      	lsls	r2, r2, #25
 8005df4:	4311      	orrs	r1, r2
 8005df6:	687a      	ldr	r2, [r7, #4]
 8005df8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005dfa:	06d2      	lsls	r2, r2, #27
 8005dfc:	430a      	orrs	r2, r1
 8005dfe:	4943      	ldr	r1, [pc, #268]	@ (8005f0c <HAL_RCC_OscConfig+0x618>)
 8005e00:	4313      	orrs	r3, r2
 8005e02:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005e04:	4b41      	ldr	r3, [pc, #260]	@ (8005f0c <HAL_RCC_OscConfig+0x618>)
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	4a40      	ldr	r2, [pc, #256]	@ (8005f0c <HAL_RCC_OscConfig+0x618>)
 8005e0a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005e0e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005e10:	4b3e      	ldr	r3, [pc, #248]	@ (8005f0c <HAL_RCC_OscConfig+0x618>)
 8005e12:	68db      	ldr	r3, [r3, #12]
 8005e14:	4a3d      	ldr	r2, [pc, #244]	@ (8005f0c <HAL_RCC_OscConfig+0x618>)
 8005e16:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005e1a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e1c:	f7fd fbec 	bl	80035f8 <HAL_GetTick>
 8005e20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005e22:	e008      	b.n	8005e36 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e24:	f7fd fbe8 	bl	80035f8 <HAL_GetTick>
 8005e28:	4602      	mov	r2, r0
 8005e2a:	693b      	ldr	r3, [r7, #16]
 8005e2c:	1ad3      	subs	r3, r2, r3
 8005e2e:	2b02      	cmp	r3, #2
 8005e30:	d901      	bls.n	8005e36 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8005e32:	2303      	movs	r3, #3
 8005e34:	e066      	b.n	8005f04 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005e36:	4b35      	ldr	r3, [pc, #212]	@ (8005f0c <HAL_RCC_OscConfig+0x618>)
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d0f0      	beq.n	8005e24 <HAL_RCC_OscConfig+0x530>
 8005e42:	e05e      	b.n	8005f02 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e44:	4b31      	ldr	r3, [pc, #196]	@ (8005f0c <HAL_RCC_OscConfig+0x618>)
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	4a30      	ldr	r2, [pc, #192]	@ (8005f0c <HAL_RCC_OscConfig+0x618>)
 8005e4a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005e4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e50:	f7fd fbd2 	bl	80035f8 <HAL_GetTick>
 8005e54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005e56:	e008      	b.n	8005e6a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e58:	f7fd fbce 	bl	80035f8 <HAL_GetTick>
 8005e5c:	4602      	mov	r2, r0
 8005e5e:	693b      	ldr	r3, [r7, #16]
 8005e60:	1ad3      	subs	r3, r2, r3
 8005e62:	2b02      	cmp	r3, #2
 8005e64:	d901      	bls.n	8005e6a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8005e66:	2303      	movs	r3, #3
 8005e68:	e04c      	b.n	8005f04 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005e6a:	4b28      	ldr	r3, [pc, #160]	@ (8005f0c <HAL_RCC_OscConfig+0x618>)
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d1f0      	bne.n	8005e58 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005e76:	4b25      	ldr	r3, [pc, #148]	@ (8005f0c <HAL_RCC_OscConfig+0x618>)
 8005e78:	68da      	ldr	r2, [r3, #12]
 8005e7a:	4924      	ldr	r1, [pc, #144]	@ (8005f0c <HAL_RCC_OscConfig+0x618>)
 8005e7c:	4b25      	ldr	r3, [pc, #148]	@ (8005f14 <HAL_RCC_OscConfig+0x620>)
 8005e7e:	4013      	ands	r3, r2
 8005e80:	60cb      	str	r3, [r1, #12]
 8005e82:	e03e      	b.n	8005f02 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	69db      	ldr	r3, [r3, #28]
 8005e88:	2b01      	cmp	r3, #1
 8005e8a:	d101      	bne.n	8005e90 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8005e8c:	2301      	movs	r3, #1
 8005e8e:	e039      	b.n	8005f04 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005e90:	4b1e      	ldr	r3, [pc, #120]	@ (8005f0c <HAL_RCC_OscConfig+0x618>)
 8005e92:	68db      	ldr	r3, [r3, #12]
 8005e94:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e96:	697b      	ldr	r3, [r7, #20]
 8005e98:	f003 0203 	and.w	r2, r3, #3
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	6a1b      	ldr	r3, [r3, #32]
 8005ea0:	429a      	cmp	r2, r3
 8005ea2:	d12c      	bne.n	8005efe <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005ea4:	697b      	ldr	r3, [r7, #20]
 8005ea6:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005eae:	3b01      	subs	r3, #1
 8005eb0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005eb2:	429a      	cmp	r2, r3
 8005eb4:	d123      	bne.n	8005efe <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005eb6:	697b      	ldr	r3, [r7, #20]
 8005eb8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ec0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005ec2:	429a      	cmp	r2, r3
 8005ec4:	d11b      	bne.n	8005efe <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005ec6:	697b      	ldr	r3, [r7, #20]
 8005ec8:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ed0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005ed2:	429a      	cmp	r2, r3
 8005ed4:	d113      	bne.n	8005efe <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005ed6:	697b      	ldr	r3, [r7, #20]
 8005ed8:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ee0:	085b      	lsrs	r3, r3, #1
 8005ee2:	3b01      	subs	r3, #1
 8005ee4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005ee6:	429a      	cmp	r2, r3
 8005ee8:	d109      	bne.n	8005efe <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005eea:	697b      	ldr	r3, [r7, #20]
 8005eec:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ef4:	085b      	lsrs	r3, r3, #1
 8005ef6:	3b01      	subs	r3, #1
 8005ef8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005efa:	429a      	cmp	r2, r3
 8005efc:	d001      	beq.n	8005f02 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8005efe:	2301      	movs	r3, #1
 8005f00:	e000      	b.n	8005f04 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8005f02:	2300      	movs	r3, #0
}
 8005f04:	4618      	mov	r0, r3
 8005f06:	3720      	adds	r7, #32
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	bd80      	pop	{r7, pc}
 8005f0c:	40021000 	.word	0x40021000
 8005f10:	019f800c 	.word	0x019f800c
 8005f14:	feeefffc 	.word	0xfeeefffc

08005f18 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b086      	sub	sp, #24
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
 8005f20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005f22:	2300      	movs	r3, #0
 8005f24:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d101      	bne.n	8005f30 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005f2c:	2301      	movs	r3, #1
 8005f2e:	e11e      	b.n	800616e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005f30:	4b91      	ldr	r3, [pc, #580]	@ (8006178 <HAL_RCC_ClockConfig+0x260>)
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f003 030f 	and.w	r3, r3, #15
 8005f38:	683a      	ldr	r2, [r7, #0]
 8005f3a:	429a      	cmp	r2, r3
 8005f3c:	d910      	bls.n	8005f60 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f3e:	4b8e      	ldr	r3, [pc, #568]	@ (8006178 <HAL_RCC_ClockConfig+0x260>)
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f023 020f 	bic.w	r2, r3, #15
 8005f46:	498c      	ldr	r1, [pc, #560]	@ (8006178 <HAL_RCC_ClockConfig+0x260>)
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	4313      	orrs	r3, r2
 8005f4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f4e:	4b8a      	ldr	r3, [pc, #552]	@ (8006178 <HAL_RCC_ClockConfig+0x260>)
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f003 030f 	and.w	r3, r3, #15
 8005f56:	683a      	ldr	r2, [r7, #0]
 8005f58:	429a      	cmp	r2, r3
 8005f5a:	d001      	beq.n	8005f60 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005f5c:	2301      	movs	r3, #1
 8005f5e:	e106      	b.n	800616e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f003 0301 	and.w	r3, r3, #1
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d073      	beq.n	8006054 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	685b      	ldr	r3, [r3, #4]
 8005f70:	2b03      	cmp	r3, #3
 8005f72:	d129      	bne.n	8005fc8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005f74:	4b81      	ldr	r3, [pc, #516]	@ (800617c <HAL_RCC_ClockConfig+0x264>)
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d101      	bne.n	8005f84 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005f80:	2301      	movs	r3, #1
 8005f82:	e0f4      	b.n	800616e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005f84:	f000 f99e 	bl	80062c4 <RCC_GetSysClockFreqFromPLLSource>
 8005f88:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8005f8a:	693b      	ldr	r3, [r7, #16]
 8005f8c:	4a7c      	ldr	r2, [pc, #496]	@ (8006180 <HAL_RCC_ClockConfig+0x268>)
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d93f      	bls.n	8006012 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005f92:	4b7a      	ldr	r3, [pc, #488]	@ (800617c <HAL_RCC_ClockConfig+0x264>)
 8005f94:	689b      	ldr	r3, [r3, #8]
 8005f96:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d009      	beq.n	8005fb2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d033      	beq.n	8006012 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d12f      	bne.n	8006012 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005fb2:	4b72      	ldr	r3, [pc, #456]	@ (800617c <HAL_RCC_ClockConfig+0x264>)
 8005fb4:	689b      	ldr	r3, [r3, #8]
 8005fb6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005fba:	4a70      	ldr	r2, [pc, #448]	@ (800617c <HAL_RCC_ClockConfig+0x264>)
 8005fbc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005fc0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005fc2:	2380      	movs	r3, #128	@ 0x80
 8005fc4:	617b      	str	r3, [r7, #20]
 8005fc6:	e024      	b.n	8006012 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	685b      	ldr	r3, [r3, #4]
 8005fcc:	2b02      	cmp	r3, #2
 8005fce:	d107      	bne.n	8005fe0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005fd0:	4b6a      	ldr	r3, [pc, #424]	@ (800617c <HAL_RCC_ClockConfig+0x264>)
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d109      	bne.n	8005ff0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005fdc:	2301      	movs	r3, #1
 8005fde:	e0c6      	b.n	800616e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005fe0:	4b66      	ldr	r3, [pc, #408]	@ (800617c <HAL_RCC_ClockConfig+0x264>)
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d101      	bne.n	8005ff0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005fec:	2301      	movs	r3, #1
 8005fee:	e0be      	b.n	800616e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005ff0:	f000 f8ce 	bl	8006190 <HAL_RCC_GetSysClockFreq>
 8005ff4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8005ff6:	693b      	ldr	r3, [r7, #16]
 8005ff8:	4a61      	ldr	r2, [pc, #388]	@ (8006180 <HAL_RCC_ClockConfig+0x268>)
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	d909      	bls.n	8006012 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005ffe:	4b5f      	ldr	r3, [pc, #380]	@ (800617c <HAL_RCC_ClockConfig+0x264>)
 8006000:	689b      	ldr	r3, [r3, #8]
 8006002:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006006:	4a5d      	ldr	r2, [pc, #372]	@ (800617c <HAL_RCC_ClockConfig+0x264>)
 8006008:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800600c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800600e:	2380      	movs	r3, #128	@ 0x80
 8006010:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006012:	4b5a      	ldr	r3, [pc, #360]	@ (800617c <HAL_RCC_ClockConfig+0x264>)
 8006014:	689b      	ldr	r3, [r3, #8]
 8006016:	f023 0203 	bic.w	r2, r3, #3
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	685b      	ldr	r3, [r3, #4]
 800601e:	4957      	ldr	r1, [pc, #348]	@ (800617c <HAL_RCC_ClockConfig+0x264>)
 8006020:	4313      	orrs	r3, r2
 8006022:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006024:	f7fd fae8 	bl	80035f8 <HAL_GetTick>
 8006028:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800602a:	e00a      	b.n	8006042 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800602c:	f7fd fae4 	bl	80035f8 <HAL_GetTick>
 8006030:	4602      	mov	r2, r0
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	1ad3      	subs	r3, r2, r3
 8006036:	f241 3288 	movw	r2, #5000	@ 0x1388
 800603a:	4293      	cmp	r3, r2
 800603c:	d901      	bls.n	8006042 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800603e:	2303      	movs	r3, #3
 8006040:	e095      	b.n	800616e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006042:	4b4e      	ldr	r3, [pc, #312]	@ (800617c <HAL_RCC_ClockConfig+0x264>)
 8006044:	689b      	ldr	r3, [r3, #8]
 8006046:	f003 020c 	and.w	r2, r3, #12
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	685b      	ldr	r3, [r3, #4]
 800604e:	009b      	lsls	r3, r3, #2
 8006050:	429a      	cmp	r2, r3
 8006052:	d1eb      	bne.n	800602c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f003 0302 	and.w	r3, r3, #2
 800605c:	2b00      	cmp	r3, #0
 800605e:	d023      	beq.n	80060a8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f003 0304 	and.w	r3, r3, #4
 8006068:	2b00      	cmp	r3, #0
 800606a:	d005      	beq.n	8006078 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800606c:	4b43      	ldr	r3, [pc, #268]	@ (800617c <HAL_RCC_ClockConfig+0x264>)
 800606e:	689b      	ldr	r3, [r3, #8]
 8006070:	4a42      	ldr	r2, [pc, #264]	@ (800617c <HAL_RCC_ClockConfig+0x264>)
 8006072:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006076:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f003 0308 	and.w	r3, r3, #8
 8006080:	2b00      	cmp	r3, #0
 8006082:	d007      	beq.n	8006094 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8006084:	4b3d      	ldr	r3, [pc, #244]	@ (800617c <HAL_RCC_ClockConfig+0x264>)
 8006086:	689b      	ldr	r3, [r3, #8]
 8006088:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800608c:	4a3b      	ldr	r2, [pc, #236]	@ (800617c <HAL_RCC_ClockConfig+0x264>)
 800608e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006092:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006094:	4b39      	ldr	r3, [pc, #228]	@ (800617c <HAL_RCC_ClockConfig+0x264>)
 8006096:	689b      	ldr	r3, [r3, #8]
 8006098:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	689b      	ldr	r3, [r3, #8]
 80060a0:	4936      	ldr	r1, [pc, #216]	@ (800617c <HAL_RCC_ClockConfig+0x264>)
 80060a2:	4313      	orrs	r3, r2
 80060a4:	608b      	str	r3, [r1, #8]
 80060a6:	e008      	b.n	80060ba <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80060a8:	697b      	ldr	r3, [r7, #20]
 80060aa:	2b80      	cmp	r3, #128	@ 0x80
 80060ac:	d105      	bne.n	80060ba <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80060ae:	4b33      	ldr	r3, [pc, #204]	@ (800617c <HAL_RCC_ClockConfig+0x264>)
 80060b0:	689b      	ldr	r3, [r3, #8]
 80060b2:	4a32      	ldr	r2, [pc, #200]	@ (800617c <HAL_RCC_ClockConfig+0x264>)
 80060b4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80060b8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80060ba:	4b2f      	ldr	r3, [pc, #188]	@ (8006178 <HAL_RCC_ClockConfig+0x260>)
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f003 030f 	and.w	r3, r3, #15
 80060c2:	683a      	ldr	r2, [r7, #0]
 80060c4:	429a      	cmp	r2, r3
 80060c6:	d21d      	bcs.n	8006104 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80060c8:	4b2b      	ldr	r3, [pc, #172]	@ (8006178 <HAL_RCC_ClockConfig+0x260>)
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f023 020f 	bic.w	r2, r3, #15
 80060d0:	4929      	ldr	r1, [pc, #164]	@ (8006178 <HAL_RCC_ClockConfig+0x260>)
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	4313      	orrs	r3, r2
 80060d6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80060d8:	f7fd fa8e 	bl	80035f8 <HAL_GetTick>
 80060dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80060de:	e00a      	b.n	80060f6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80060e0:	f7fd fa8a 	bl	80035f8 <HAL_GetTick>
 80060e4:	4602      	mov	r2, r0
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	1ad3      	subs	r3, r2, r3
 80060ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80060ee:	4293      	cmp	r3, r2
 80060f0:	d901      	bls.n	80060f6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80060f2:	2303      	movs	r3, #3
 80060f4:	e03b      	b.n	800616e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80060f6:	4b20      	ldr	r3, [pc, #128]	@ (8006178 <HAL_RCC_ClockConfig+0x260>)
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f003 030f 	and.w	r3, r3, #15
 80060fe:	683a      	ldr	r2, [r7, #0]
 8006100:	429a      	cmp	r2, r3
 8006102:	d1ed      	bne.n	80060e0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f003 0304 	and.w	r3, r3, #4
 800610c:	2b00      	cmp	r3, #0
 800610e:	d008      	beq.n	8006122 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006110:	4b1a      	ldr	r3, [pc, #104]	@ (800617c <HAL_RCC_ClockConfig+0x264>)
 8006112:	689b      	ldr	r3, [r3, #8]
 8006114:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	68db      	ldr	r3, [r3, #12]
 800611c:	4917      	ldr	r1, [pc, #92]	@ (800617c <HAL_RCC_ClockConfig+0x264>)
 800611e:	4313      	orrs	r3, r2
 8006120:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f003 0308 	and.w	r3, r3, #8
 800612a:	2b00      	cmp	r3, #0
 800612c:	d009      	beq.n	8006142 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800612e:	4b13      	ldr	r3, [pc, #76]	@ (800617c <HAL_RCC_ClockConfig+0x264>)
 8006130:	689b      	ldr	r3, [r3, #8]
 8006132:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	691b      	ldr	r3, [r3, #16]
 800613a:	00db      	lsls	r3, r3, #3
 800613c:	490f      	ldr	r1, [pc, #60]	@ (800617c <HAL_RCC_ClockConfig+0x264>)
 800613e:	4313      	orrs	r3, r2
 8006140:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006142:	f000 f825 	bl	8006190 <HAL_RCC_GetSysClockFreq>
 8006146:	4602      	mov	r2, r0
 8006148:	4b0c      	ldr	r3, [pc, #48]	@ (800617c <HAL_RCC_ClockConfig+0x264>)
 800614a:	689b      	ldr	r3, [r3, #8]
 800614c:	091b      	lsrs	r3, r3, #4
 800614e:	f003 030f 	and.w	r3, r3, #15
 8006152:	490c      	ldr	r1, [pc, #48]	@ (8006184 <HAL_RCC_ClockConfig+0x26c>)
 8006154:	5ccb      	ldrb	r3, [r1, r3]
 8006156:	f003 031f 	and.w	r3, r3, #31
 800615a:	fa22 f303 	lsr.w	r3, r2, r3
 800615e:	4a0a      	ldr	r2, [pc, #40]	@ (8006188 <HAL_RCC_ClockConfig+0x270>)
 8006160:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8006162:	4b0a      	ldr	r3, [pc, #40]	@ (800618c <HAL_RCC_ClockConfig+0x274>)
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	4618      	mov	r0, r3
 8006168:	f7fd f9fa 	bl	8003560 <HAL_InitTick>
 800616c:	4603      	mov	r3, r0
}
 800616e:	4618      	mov	r0, r3
 8006170:	3718      	adds	r7, #24
 8006172:	46bd      	mov	sp, r7
 8006174:	bd80      	pop	{r7, pc}
 8006176:	bf00      	nop
 8006178:	40022000 	.word	0x40022000
 800617c:	40021000 	.word	0x40021000
 8006180:	04c4b400 	.word	0x04c4b400
 8006184:	0800bf14 	.word	0x0800bf14
 8006188:	20000200 	.word	0x20000200
 800618c:	20000204 	.word	0x20000204

08006190 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006190:	b480      	push	{r7}
 8006192:	b087      	sub	sp, #28
 8006194:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8006196:	4b2c      	ldr	r3, [pc, #176]	@ (8006248 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006198:	689b      	ldr	r3, [r3, #8]
 800619a:	f003 030c 	and.w	r3, r3, #12
 800619e:	2b04      	cmp	r3, #4
 80061a0:	d102      	bne.n	80061a8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80061a2:	4b2a      	ldr	r3, [pc, #168]	@ (800624c <HAL_RCC_GetSysClockFreq+0xbc>)
 80061a4:	613b      	str	r3, [r7, #16]
 80061a6:	e047      	b.n	8006238 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80061a8:	4b27      	ldr	r3, [pc, #156]	@ (8006248 <HAL_RCC_GetSysClockFreq+0xb8>)
 80061aa:	689b      	ldr	r3, [r3, #8]
 80061ac:	f003 030c 	and.w	r3, r3, #12
 80061b0:	2b08      	cmp	r3, #8
 80061b2:	d102      	bne.n	80061ba <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80061b4:	4b26      	ldr	r3, [pc, #152]	@ (8006250 <HAL_RCC_GetSysClockFreq+0xc0>)
 80061b6:	613b      	str	r3, [r7, #16]
 80061b8:	e03e      	b.n	8006238 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80061ba:	4b23      	ldr	r3, [pc, #140]	@ (8006248 <HAL_RCC_GetSysClockFreq+0xb8>)
 80061bc:	689b      	ldr	r3, [r3, #8]
 80061be:	f003 030c 	and.w	r3, r3, #12
 80061c2:	2b0c      	cmp	r3, #12
 80061c4:	d136      	bne.n	8006234 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80061c6:	4b20      	ldr	r3, [pc, #128]	@ (8006248 <HAL_RCC_GetSysClockFreq+0xb8>)
 80061c8:	68db      	ldr	r3, [r3, #12]
 80061ca:	f003 0303 	and.w	r3, r3, #3
 80061ce:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80061d0:	4b1d      	ldr	r3, [pc, #116]	@ (8006248 <HAL_RCC_GetSysClockFreq+0xb8>)
 80061d2:	68db      	ldr	r3, [r3, #12]
 80061d4:	091b      	lsrs	r3, r3, #4
 80061d6:	f003 030f 	and.w	r3, r3, #15
 80061da:	3301      	adds	r3, #1
 80061dc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	2b03      	cmp	r3, #3
 80061e2:	d10c      	bne.n	80061fe <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80061e4:	4a1a      	ldr	r2, [pc, #104]	@ (8006250 <HAL_RCC_GetSysClockFreq+0xc0>)
 80061e6:	68bb      	ldr	r3, [r7, #8]
 80061e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80061ec:	4a16      	ldr	r2, [pc, #88]	@ (8006248 <HAL_RCC_GetSysClockFreq+0xb8>)
 80061ee:	68d2      	ldr	r2, [r2, #12]
 80061f0:	0a12      	lsrs	r2, r2, #8
 80061f2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80061f6:	fb02 f303 	mul.w	r3, r2, r3
 80061fa:	617b      	str	r3, [r7, #20]
      break;
 80061fc:	e00c      	b.n	8006218 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80061fe:	4a13      	ldr	r2, [pc, #76]	@ (800624c <HAL_RCC_GetSysClockFreq+0xbc>)
 8006200:	68bb      	ldr	r3, [r7, #8]
 8006202:	fbb2 f3f3 	udiv	r3, r2, r3
 8006206:	4a10      	ldr	r2, [pc, #64]	@ (8006248 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006208:	68d2      	ldr	r2, [r2, #12]
 800620a:	0a12      	lsrs	r2, r2, #8
 800620c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006210:	fb02 f303 	mul.w	r3, r2, r3
 8006214:	617b      	str	r3, [r7, #20]
      break;
 8006216:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006218:	4b0b      	ldr	r3, [pc, #44]	@ (8006248 <HAL_RCC_GetSysClockFreq+0xb8>)
 800621a:	68db      	ldr	r3, [r3, #12]
 800621c:	0e5b      	lsrs	r3, r3, #25
 800621e:	f003 0303 	and.w	r3, r3, #3
 8006222:	3301      	adds	r3, #1
 8006224:	005b      	lsls	r3, r3, #1
 8006226:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8006228:	697a      	ldr	r2, [r7, #20]
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006230:	613b      	str	r3, [r7, #16]
 8006232:	e001      	b.n	8006238 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8006234:	2300      	movs	r3, #0
 8006236:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8006238:	693b      	ldr	r3, [r7, #16]
}
 800623a:	4618      	mov	r0, r3
 800623c:	371c      	adds	r7, #28
 800623e:	46bd      	mov	sp, r7
 8006240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006244:	4770      	bx	lr
 8006246:	bf00      	nop
 8006248:	40021000 	.word	0x40021000
 800624c:	00f42400 	.word	0x00f42400
 8006250:	016e3600 	.word	0x016e3600

08006254 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006254:	b480      	push	{r7}
 8006256:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006258:	4b03      	ldr	r3, [pc, #12]	@ (8006268 <HAL_RCC_GetHCLKFreq+0x14>)
 800625a:	681b      	ldr	r3, [r3, #0]
}
 800625c:	4618      	mov	r0, r3
 800625e:	46bd      	mov	sp, r7
 8006260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006264:	4770      	bx	lr
 8006266:	bf00      	nop
 8006268:	20000200 	.word	0x20000200

0800626c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800626c:	b580      	push	{r7, lr}
 800626e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006270:	f7ff fff0 	bl	8006254 <HAL_RCC_GetHCLKFreq>
 8006274:	4602      	mov	r2, r0
 8006276:	4b06      	ldr	r3, [pc, #24]	@ (8006290 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006278:	689b      	ldr	r3, [r3, #8]
 800627a:	0a1b      	lsrs	r3, r3, #8
 800627c:	f003 0307 	and.w	r3, r3, #7
 8006280:	4904      	ldr	r1, [pc, #16]	@ (8006294 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006282:	5ccb      	ldrb	r3, [r1, r3]
 8006284:	f003 031f 	and.w	r3, r3, #31
 8006288:	fa22 f303 	lsr.w	r3, r2, r3
}
 800628c:	4618      	mov	r0, r3
 800628e:	bd80      	pop	{r7, pc}
 8006290:	40021000 	.word	0x40021000
 8006294:	0800bf24 	.word	0x0800bf24

08006298 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006298:	b580      	push	{r7, lr}
 800629a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800629c:	f7ff ffda 	bl	8006254 <HAL_RCC_GetHCLKFreq>
 80062a0:	4602      	mov	r2, r0
 80062a2:	4b06      	ldr	r3, [pc, #24]	@ (80062bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80062a4:	689b      	ldr	r3, [r3, #8]
 80062a6:	0adb      	lsrs	r3, r3, #11
 80062a8:	f003 0307 	and.w	r3, r3, #7
 80062ac:	4904      	ldr	r1, [pc, #16]	@ (80062c0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80062ae:	5ccb      	ldrb	r3, [r1, r3]
 80062b0:	f003 031f 	and.w	r3, r3, #31
 80062b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80062b8:	4618      	mov	r0, r3
 80062ba:	bd80      	pop	{r7, pc}
 80062bc:	40021000 	.word	0x40021000
 80062c0:	0800bf24 	.word	0x0800bf24

080062c4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80062c4:	b480      	push	{r7}
 80062c6:	b087      	sub	sp, #28
 80062c8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80062ca:	4b1e      	ldr	r3, [pc, #120]	@ (8006344 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80062cc:	68db      	ldr	r3, [r3, #12]
 80062ce:	f003 0303 	and.w	r3, r3, #3
 80062d2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80062d4:	4b1b      	ldr	r3, [pc, #108]	@ (8006344 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80062d6:	68db      	ldr	r3, [r3, #12]
 80062d8:	091b      	lsrs	r3, r3, #4
 80062da:	f003 030f 	and.w	r3, r3, #15
 80062de:	3301      	adds	r3, #1
 80062e0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80062e2:	693b      	ldr	r3, [r7, #16]
 80062e4:	2b03      	cmp	r3, #3
 80062e6:	d10c      	bne.n	8006302 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80062e8:	4a17      	ldr	r2, [pc, #92]	@ (8006348 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80062f0:	4a14      	ldr	r2, [pc, #80]	@ (8006344 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80062f2:	68d2      	ldr	r2, [r2, #12]
 80062f4:	0a12      	lsrs	r2, r2, #8
 80062f6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80062fa:	fb02 f303 	mul.w	r3, r2, r3
 80062fe:	617b      	str	r3, [r7, #20]
    break;
 8006300:	e00c      	b.n	800631c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006302:	4a12      	ldr	r2, [pc, #72]	@ (800634c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	fbb2 f3f3 	udiv	r3, r2, r3
 800630a:	4a0e      	ldr	r2, [pc, #56]	@ (8006344 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800630c:	68d2      	ldr	r2, [r2, #12]
 800630e:	0a12      	lsrs	r2, r2, #8
 8006310:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006314:	fb02 f303 	mul.w	r3, r2, r3
 8006318:	617b      	str	r3, [r7, #20]
    break;
 800631a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800631c:	4b09      	ldr	r3, [pc, #36]	@ (8006344 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800631e:	68db      	ldr	r3, [r3, #12]
 8006320:	0e5b      	lsrs	r3, r3, #25
 8006322:	f003 0303 	and.w	r3, r3, #3
 8006326:	3301      	adds	r3, #1
 8006328:	005b      	lsls	r3, r3, #1
 800632a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800632c:	697a      	ldr	r2, [r7, #20]
 800632e:	68bb      	ldr	r3, [r7, #8]
 8006330:	fbb2 f3f3 	udiv	r3, r2, r3
 8006334:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8006336:	687b      	ldr	r3, [r7, #4]
}
 8006338:	4618      	mov	r0, r3
 800633a:	371c      	adds	r7, #28
 800633c:	46bd      	mov	sp, r7
 800633e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006342:	4770      	bx	lr
 8006344:	40021000 	.word	0x40021000
 8006348:	016e3600 	.word	0x016e3600
 800634c:	00f42400 	.word	0x00f42400

08006350 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006350:	b580      	push	{r7, lr}
 8006352:	b086      	sub	sp, #24
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006358:	2300      	movs	r3, #0
 800635a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800635c:	2300      	movs	r3, #0
 800635e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006368:	2b00      	cmp	r3, #0
 800636a:	f000 8098 	beq.w	800649e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800636e:	2300      	movs	r3, #0
 8006370:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006372:	4b43      	ldr	r3, [pc, #268]	@ (8006480 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006374:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006376:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800637a:	2b00      	cmp	r3, #0
 800637c:	d10d      	bne.n	800639a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800637e:	4b40      	ldr	r3, [pc, #256]	@ (8006480 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006380:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006382:	4a3f      	ldr	r2, [pc, #252]	@ (8006480 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006384:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006388:	6593      	str	r3, [r2, #88]	@ 0x58
 800638a:	4b3d      	ldr	r3, [pc, #244]	@ (8006480 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800638c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800638e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006392:	60bb      	str	r3, [r7, #8]
 8006394:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006396:	2301      	movs	r3, #1
 8006398:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800639a:	4b3a      	ldr	r3, [pc, #232]	@ (8006484 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	4a39      	ldr	r2, [pc, #228]	@ (8006484 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80063a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80063a4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80063a6:	f7fd f927 	bl	80035f8 <HAL_GetTick>
 80063aa:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80063ac:	e009      	b.n	80063c2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80063ae:	f7fd f923 	bl	80035f8 <HAL_GetTick>
 80063b2:	4602      	mov	r2, r0
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	1ad3      	subs	r3, r2, r3
 80063b8:	2b02      	cmp	r3, #2
 80063ba:	d902      	bls.n	80063c2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80063bc:	2303      	movs	r3, #3
 80063be:	74fb      	strb	r3, [r7, #19]
        break;
 80063c0:	e005      	b.n	80063ce <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80063c2:	4b30      	ldr	r3, [pc, #192]	@ (8006484 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d0ef      	beq.n	80063ae <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80063ce:	7cfb      	ldrb	r3, [r7, #19]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d159      	bne.n	8006488 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80063d4:	4b2a      	ldr	r3, [pc, #168]	@ (8006480 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80063d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80063da:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80063de:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80063e0:	697b      	ldr	r3, [r7, #20]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d01e      	beq.n	8006424 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80063ea:	697a      	ldr	r2, [r7, #20]
 80063ec:	429a      	cmp	r2, r3
 80063ee:	d019      	beq.n	8006424 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80063f0:	4b23      	ldr	r3, [pc, #140]	@ (8006480 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80063f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80063f6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80063fa:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80063fc:	4b20      	ldr	r3, [pc, #128]	@ (8006480 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80063fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006402:	4a1f      	ldr	r2, [pc, #124]	@ (8006480 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006404:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006408:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800640c:	4b1c      	ldr	r3, [pc, #112]	@ (8006480 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800640e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006412:	4a1b      	ldr	r2, [pc, #108]	@ (8006480 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006414:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006418:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800641c:	4a18      	ldr	r2, [pc, #96]	@ (8006480 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800641e:	697b      	ldr	r3, [r7, #20]
 8006420:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006424:	697b      	ldr	r3, [r7, #20]
 8006426:	f003 0301 	and.w	r3, r3, #1
 800642a:	2b00      	cmp	r3, #0
 800642c:	d016      	beq.n	800645c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800642e:	f7fd f8e3 	bl	80035f8 <HAL_GetTick>
 8006432:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006434:	e00b      	b.n	800644e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006436:	f7fd f8df 	bl	80035f8 <HAL_GetTick>
 800643a:	4602      	mov	r2, r0
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	1ad3      	subs	r3, r2, r3
 8006440:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006444:	4293      	cmp	r3, r2
 8006446:	d902      	bls.n	800644e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8006448:	2303      	movs	r3, #3
 800644a:	74fb      	strb	r3, [r7, #19]
            break;
 800644c:	e006      	b.n	800645c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800644e:	4b0c      	ldr	r3, [pc, #48]	@ (8006480 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006450:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006454:	f003 0302 	and.w	r3, r3, #2
 8006458:	2b00      	cmp	r3, #0
 800645a:	d0ec      	beq.n	8006436 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800645c:	7cfb      	ldrb	r3, [r7, #19]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d10b      	bne.n	800647a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006462:	4b07      	ldr	r3, [pc, #28]	@ (8006480 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006464:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006468:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006470:	4903      	ldr	r1, [pc, #12]	@ (8006480 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006472:	4313      	orrs	r3, r2
 8006474:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8006478:	e008      	b.n	800648c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800647a:	7cfb      	ldrb	r3, [r7, #19]
 800647c:	74bb      	strb	r3, [r7, #18]
 800647e:	e005      	b.n	800648c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006480:	40021000 	.word	0x40021000
 8006484:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006488:	7cfb      	ldrb	r3, [r7, #19]
 800648a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800648c:	7c7b      	ldrb	r3, [r7, #17]
 800648e:	2b01      	cmp	r3, #1
 8006490:	d105      	bne.n	800649e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006492:	4ba7      	ldr	r3, [pc, #668]	@ (8006730 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006494:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006496:	4aa6      	ldr	r2, [pc, #664]	@ (8006730 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006498:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800649c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f003 0301 	and.w	r3, r3, #1
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d00a      	beq.n	80064c0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80064aa:	4ba1      	ldr	r3, [pc, #644]	@ (8006730 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064b0:	f023 0203 	bic.w	r2, r3, #3
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	685b      	ldr	r3, [r3, #4]
 80064b8:	499d      	ldr	r1, [pc, #628]	@ (8006730 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064ba:	4313      	orrs	r3, r2
 80064bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f003 0302 	and.w	r3, r3, #2
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d00a      	beq.n	80064e2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80064cc:	4b98      	ldr	r3, [pc, #608]	@ (8006730 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064d2:	f023 020c 	bic.w	r2, r3, #12
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	689b      	ldr	r3, [r3, #8]
 80064da:	4995      	ldr	r1, [pc, #596]	@ (8006730 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064dc:	4313      	orrs	r3, r2
 80064de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f003 0304 	and.w	r3, r3, #4
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d00a      	beq.n	8006504 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80064ee:	4b90      	ldr	r3, [pc, #576]	@ (8006730 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064f4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	68db      	ldr	r3, [r3, #12]
 80064fc:	498c      	ldr	r1, [pc, #560]	@ (8006730 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064fe:	4313      	orrs	r3, r2
 8006500:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f003 0308 	and.w	r3, r3, #8
 800650c:	2b00      	cmp	r3, #0
 800650e:	d00a      	beq.n	8006526 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006510:	4b87      	ldr	r3, [pc, #540]	@ (8006730 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006512:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006516:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	691b      	ldr	r3, [r3, #16]
 800651e:	4984      	ldr	r1, [pc, #528]	@ (8006730 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006520:	4313      	orrs	r3, r2
 8006522:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f003 0310 	and.w	r3, r3, #16
 800652e:	2b00      	cmp	r3, #0
 8006530:	d00a      	beq.n	8006548 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006532:	4b7f      	ldr	r3, [pc, #508]	@ (8006730 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006534:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006538:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	695b      	ldr	r3, [r3, #20]
 8006540:	497b      	ldr	r1, [pc, #492]	@ (8006730 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006542:	4313      	orrs	r3, r2
 8006544:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f003 0320 	and.w	r3, r3, #32
 8006550:	2b00      	cmp	r3, #0
 8006552:	d00a      	beq.n	800656a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006554:	4b76      	ldr	r3, [pc, #472]	@ (8006730 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006556:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800655a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	699b      	ldr	r3, [r3, #24]
 8006562:	4973      	ldr	r1, [pc, #460]	@ (8006730 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006564:	4313      	orrs	r3, r2
 8006566:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006572:	2b00      	cmp	r3, #0
 8006574:	d00a      	beq.n	800658c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006576:	4b6e      	ldr	r3, [pc, #440]	@ (8006730 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006578:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800657c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	69db      	ldr	r3, [r3, #28]
 8006584:	496a      	ldr	r1, [pc, #424]	@ (8006730 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006586:	4313      	orrs	r3, r2
 8006588:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006594:	2b00      	cmp	r3, #0
 8006596:	d00a      	beq.n	80065ae <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006598:	4b65      	ldr	r3, [pc, #404]	@ (8006730 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800659a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800659e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6a1b      	ldr	r3, [r3, #32]
 80065a6:	4962      	ldr	r1, [pc, #392]	@ (8006730 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80065a8:	4313      	orrs	r3, r2
 80065aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d00a      	beq.n	80065d0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80065ba:	4b5d      	ldr	r3, [pc, #372]	@ (8006730 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80065bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065c0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065c8:	4959      	ldr	r1, [pc, #356]	@ (8006730 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80065ca:	4313      	orrs	r3, r2
 80065cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d00a      	beq.n	80065f2 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80065dc:	4b54      	ldr	r3, [pc, #336]	@ (8006730 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80065de:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80065e2:	f023 0203 	bic.w	r2, r3, #3
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065ea:	4951      	ldr	r1, [pc, #324]	@ (8006730 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80065ec:	4313      	orrs	r3, r2
 80065ee:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d00a      	beq.n	8006614 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80065fe:	4b4c      	ldr	r3, [pc, #304]	@ (8006730 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006600:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006604:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800660c:	4948      	ldr	r1, [pc, #288]	@ (8006730 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800660e:	4313      	orrs	r3, r2
 8006610:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800661c:	2b00      	cmp	r3, #0
 800661e:	d015      	beq.n	800664c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006620:	4b43      	ldr	r3, [pc, #268]	@ (8006730 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006622:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006626:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800662e:	4940      	ldr	r1, [pc, #256]	@ (8006730 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006630:	4313      	orrs	r3, r2
 8006632:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800663a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800663e:	d105      	bne.n	800664c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006640:	4b3b      	ldr	r3, [pc, #236]	@ (8006730 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006642:	68db      	ldr	r3, [r3, #12]
 8006644:	4a3a      	ldr	r2, [pc, #232]	@ (8006730 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006646:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800664a:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006654:	2b00      	cmp	r3, #0
 8006656:	d015      	beq.n	8006684 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006658:	4b35      	ldr	r3, [pc, #212]	@ (8006730 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800665a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800665e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006666:	4932      	ldr	r1, [pc, #200]	@ (8006730 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006668:	4313      	orrs	r3, r2
 800666a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006672:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006676:	d105      	bne.n	8006684 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006678:	4b2d      	ldr	r3, [pc, #180]	@ (8006730 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800667a:	68db      	ldr	r3, [r3, #12]
 800667c:	4a2c      	ldr	r2, [pc, #176]	@ (8006730 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800667e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006682:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800668c:	2b00      	cmp	r3, #0
 800668e:	d015      	beq.n	80066bc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006690:	4b27      	ldr	r3, [pc, #156]	@ (8006730 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006692:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006696:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800669e:	4924      	ldr	r1, [pc, #144]	@ (8006730 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80066a0:	4313      	orrs	r3, r2
 80066a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066aa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80066ae:	d105      	bne.n	80066bc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80066b0:	4b1f      	ldr	r3, [pc, #124]	@ (8006730 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80066b2:	68db      	ldr	r3, [r3, #12]
 80066b4:	4a1e      	ldr	r2, [pc, #120]	@ (8006730 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80066b6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80066ba:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d015      	beq.n	80066f4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80066c8:	4b19      	ldr	r3, [pc, #100]	@ (8006730 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80066ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80066ce:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066d6:	4916      	ldr	r1, [pc, #88]	@ (8006730 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80066d8:	4313      	orrs	r3, r2
 80066da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066e2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80066e6:	d105      	bne.n	80066f4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80066e8:	4b11      	ldr	r3, [pc, #68]	@ (8006730 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80066ea:	68db      	ldr	r3, [r3, #12]
 80066ec:	4a10      	ldr	r2, [pc, #64]	@ (8006730 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80066ee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80066f2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d019      	beq.n	8006734 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006700:	4b0b      	ldr	r3, [pc, #44]	@ (8006730 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006702:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006706:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800670e:	4908      	ldr	r1, [pc, #32]	@ (8006730 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006710:	4313      	orrs	r3, r2
 8006712:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800671a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800671e:	d109      	bne.n	8006734 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006720:	4b03      	ldr	r3, [pc, #12]	@ (8006730 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006722:	68db      	ldr	r3, [r3, #12]
 8006724:	4a02      	ldr	r2, [pc, #8]	@ (8006730 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006726:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800672a:	60d3      	str	r3, [r2, #12]
 800672c:	e002      	b.n	8006734 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800672e:	bf00      	nop
 8006730:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800673c:	2b00      	cmp	r3, #0
 800673e:	d015      	beq.n	800676c <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006740:	4b29      	ldr	r3, [pc, #164]	@ (80067e8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006742:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006746:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800674e:	4926      	ldr	r1, [pc, #152]	@ (80067e8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006750:	4313      	orrs	r3, r2
 8006752:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800675a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800675e:	d105      	bne.n	800676c <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006760:	4b21      	ldr	r3, [pc, #132]	@ (80067e8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006762:	68db      	ldr	r3, [r3, #12]
 8006764:	4a20      	ldr	r2, [pc, #128]	@ (80067e8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006766:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800676a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006774:	2b00      	cmp	r3, #0
 8006776:	d015      	beq.n	80067a4 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8006778:	4b1b      	ldr	r3, [pc, #108]	@ (80067e8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800677a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800677e:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006786:	4918      	ldr	r1, [pc, #96]	@ (80067e8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006788:	4313      	orrs	r3, r2
 800678a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006792:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006796:	d105      	bne.n	80067a4 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006798:	4b13      	ldr	r3, [pc, #76]	@ (80067e8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800679a:	68db      	ldr	r3, [r3, #12]
 800679c:	4a12      	ldr	r2, [pc, #72]	@ (80067e8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800679e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80067a2:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d015      	beq.n	80067dc <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80067b0:	4b0d      	ldr	r3, [pc, #52]	@ (80067e8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80067b2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80067b6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80067be:	490a      	ldr	r1, [pc, #40]	@ (80067e8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80067c0:	4313      	orrs	r3, r2
 80067c2:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80067ca:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80067ce:	d105      	bne.n	80067dc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80067d0:	4b05      	ldr	r3, [pc, #20]	@ (80067e8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80067d2:	68db      	ldr	r3, [r3, #12]
 80067d4:	4a04      	ldr	r2, [pc, #16]	@ (80067e8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80067d6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80067da:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80067dc:	7cbb      	ldrb	r3, [r7, #18]
}
 80067de:	4618      	mov	r0, r3
 80067e0:	3718      	adds	r7, #24
 80067e2:	46bd      	mov	sp, r7
 80067e4:	bd80      	pop	{r7, pc}
 80067e6:	bf00      	nop
 80067e8:	40021000 	.word	0x40021000

080067ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80067ec:	b580      	push	{r7, lr}
 80067ee:	b082      	sub	sp, #8
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d101      	bne.n	80067fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80067fa:	2301      	movs	r3, #1
 80067fc:	e054      	b.n	80068a8 <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006804:	b2db      	uxtb	r3, r3
 8006806:	2b00      	cmp	r3, #0
 8006808:	d111      	bne.n	800682e <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	2200      	movs	r2, #0
 800680e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8006812:	6878      	ldr	r0, [r7, #4]
 8006814:	f001 ffd4 	bl	80087c0 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800681c:	2b00      	cmp	r3, #0
 800681e:	d102      	bne.n	8006826 <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	4a23      	ldr	r2, [pc, #140]	@ (80068b0 <HAL_TIM_Base_Init+0xc4>)
 8006824:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800682a:	6878      	ldr	r0, [r7, #4]
 800682c:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	2202      	movs	r2, #2
 8006832:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681a      	ldr	r2, [r3, #0]
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	3304      	adds	r3, #4
 800683e:	4619      	mov	r1, r3
 8006840:	4610      	mov	r0, r2
 8006842:	f001 fb1d 	bl	8007e80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	2201      	movs	r2, #1
 800684a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	2201      	movs	r2, #1
 8006852:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	2201      	movs	r2, #1
 800685a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	2201      	movs	r2, #1
 8006862:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	2201      	movs	r2, #1
 800686a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	2201      	movs	r2, #1
 8006872:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	2201      	movs	r2, #1
 800687a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	2201      	movs	r2, #1
 8006882:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	2201      	movs	r2, #1
 800688a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	2201      	movs	r2, #1
 8006892:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	2201      	movs	r2, #1
 800689a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	2201      	movs	r2, #1
 80068a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80068a6:	2300      	movs	r3, #0
}
 80068a8:	4618      	mov	r0, r3
 80068aa:	3708      	adds	r7, #8
 80068ac:	46bd      	mov	sp, r7
 80068ae:	bd80      	pop	{r7, pc}
 80068b0:	08003031 	.word	0x08003031

080068b4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80068b4:	b480      	push	{r7}
 80068b6:	b085      	sub	sp, #20
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80068c2:	b2db      	uxtb	r3, r3
 80068c4:	2b01      	cmp	r3, #1
 80068c6:	d001      	beq.n	80068cc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80068c8:	2301      	movs	r3, #1
 80068ca:	e04c      	b.n	8006966 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2202      	movs	r2, #2
 80068d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	4a26      	ldr	r2, [pc, #152]	@ (8006974 <HAL_TIM_Base_Start+0xc0>)
 80068da:	4293      	cmp	r3, r2
 80068dc:	d022      	beq.n	8006924 <HAL_TIM_Base_Start+0x70>
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80068e6:	d01d      	beq.n	8006924 <HAL_TIM_Base_Start+0x70>
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	4a22      	ldr	r2, [pc, #136]	@ (8006978 <HAL_TIM_Base_Start+0xc4>)
 80068ee:	4293      	cmp	r3, r2
 80068f0:	d018      	beq.n	8006924 <HAL_TIM_Base_Start+0x70>
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	4a21      	ldr	r2, [pc, #132]	@ (800697c <HAL_TIM_Base_Start+0xc8>)
 80068f8:	4293      	cmp	r3, r2
 80068fa:	d013      	beq.n	8006924 <HAL_TIM_Base_Start+0x70>
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	4a1f      	ldr	r2, [pc, #124]	@ (8006980 <HAL_TIM_Base_Start+0xcc>)
 8006902:	4293      	cmp	r3, r2
 8006904:	d00e      	beq.n	8006924 <HAL_TIM_Base_Start+0x70>
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	4a1e      	ldr	r2, [pc, #120]	@ (8006984 <HAL_TIM_Base_Start+0xd0>)
 800690c:	4293      	cmp	r3, r2
 800690e:	d009      	beq.n	8006924 <HAL_TIM_Base_Start+0x70>
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	4a1c      	ldr	r2, [pc, #112]	@ (8006988 <HAL_TIM_Base_Start+0xd4>)
 8006916:	4293      	cmp	r3, r2
 8006918:	d004      	beq.n	8006924 <HAL_TIM_Base_Start+0x70>
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	4a1b      	ldr	r2, [pc, #108]	@ (800698c <HAL_TIM_Base_Start+0xd8>)
 8006920:	4293      	cmp	r3, r2
 8006922:	d115      	bne.n	8006950 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	689a      	ldr	r2, [r3, #8]
 800692a:	4b19      	ldr	r3, [pc, #100]	@ (8006990 <HAL_TIM_Base_Start+0xdc>)
 800692c:	4013      	ands	r3, r2
 800692e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	2b06      	cmp	r3, #6
 8006934:	d015      	beq.n	8006962 <HAL_TIM_Base_Start+0xae>
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800693c:	d011      	beq.n	8006962 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	681a      	ldr	r2, [r3, #0]
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	f042 0201 	orr.w	r2, r2, #1
 800694c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800694e:	e008      	b.n	8006962 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	681a      	ldr	r2, [r3, #0]
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f042 0201 	orr.w	r2, r2, #1
 800695e:	601a      	str	r2, [r3, #0]
 8006960:	e000      	b.n	8006964 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006962:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006964:	2300      	movs	r3, #0
}
 8006966:	4618      	mov	r0, r3
 8006968:	3714      	adds	r7, #20
 800696a:	46bd      	mov	sp, r7
 800696c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006970:	4770      	bx	lr
 8006972:	bf00      	nop
 8006974:	40012c00 	.word	0x40012c00
 8006978:	40000400 	.word	0x40000400
 800697c:	40000800 	.word	0x40000800
 8006980:	40000c00 	.word	0x40000c00
 8006984:	40013400 	.word	0x40013400
 8006988:	40014000 	.word	0x40014000
 800698c:	40015000 	.word	0x40015000
 8006990:	00010007 	.word	0x00010007

08006994 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006994:	b480      	push	{r7}
 8006996:	b085      	sub	sp, #20
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80069a2:	b2db      	uxtb	r3, r3
 80069a4:	2b01      	cmp	r3, #1
 80069a6:	d001      	beq.n	80069ac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80069a8:	2301      	movs	r3, #1
 80069aa:	e054      	b.n	8006a56 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2202      	movs	r2, #2
 80069b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	68da      	ldr	r2, [r3, #12]
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f042 0201 	orr.w	r2, r2, #1
 80069c2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	4a26      	ldr	r2, [pc, #152]	@ (8006a64 <HAL_TIM_Base_Start_IT+0xd0>)
 80069ca:	4293      	cmp	r3, r2
 80069cc:	d022      	beq.n	8006a14 <HAL_TIM_Base_Start_IT+0x80>
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80069d6:	d01d      	beq.n	8006a14 <HAL_TIM_Base_Start_IT+0x80>
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	4a22      	ldr	r2, [pc, #136]	@ (8006a68 <HAL_TIM_Base_Start_IT+0xd4>)
 80069de:	4293      	cmp	r3, r2
 80069e0:	d018      	beq.n	8006a14 <HAL_TIM_Base_Start_IT+0x80>
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	4a21      	ldr	r2, [pc, #132]	@ (8006a6c <HAL_TIM_Base_Start_IT+0xd8>)
 80069e8:	4293      	cmp	r3, r2
 80069ea:	d013      	beq.n	8006a14 <HAL_TIM_Base_Start_IT+0x80>
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	4a1f      	ldr	r2, [pc, #124]	@ (8006a70 <HAL_TIM_Base_Start_IT+0xdc>)
 80069f2:	4293      	cmp	r3, r2
 80069f4:	d00e      	beq.n	8006a14 <HAL_TIM_Base_Start_IT+0x80>
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	4a1e      	ldr	r2, [pc, #120]	@ (8006a74 <HAL_TIM_Base_Start_IT+0xe0>)
 80069fc:	4293      	cmp	r3, r2
 80069fe:	d009      	beq.n	8006a14 <HAL_TIM_Base_Start_IT+0x80>
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	4a1c      	ldr	r2, [pc, #112]	@ (8006a78 <HAL_TIM_Base_Start_IT+0xe4>)
 8006a06:	4293      	cmp	r3, r2
 8006a08:	d004      	beq.n	8006a14 <HAL_TIM_Base_Start_IT+0x80>
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	4a1b      	ldr	r2, [pc, #108]	@ (8006a7c <HAL_TIM_Base_Start_IT+0xe8>)
 8006a10:	4293      	cmp	r3, r2
 8006a12:	d115      	bne.n	8006a40 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	689a      	ldr	r2, [r3, #8]
 8006a1a:	4b19      	ldr	r3, [pc, #100]	@ (8006a80 <HAL_TIM_Base_Start_IT+0xec>)
 8006a1c:	4013      	ands	r3, r2
 8006a1e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	2b06      	cmp	r3, #6
 8006a24:	d015      	beq.n	8006a52 <HAL_TIM_Base_Start_IT+0xbe>
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006a2c:	d011      	beq.n	8006a52 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	681a      	ldr	r2, [r3, #0]
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	f042 0201 	orr.w	r2, r2, #1
 8006a3c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a3e:	e008      	b.n	8006a52 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	681a      	ldr	r2, [r3, #0]
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	f042 0201 	orr.w	r2, r2, #1
 8006a4e:	601a      	str	r2, [r3, #0]
 8006a50:	e000      	b.n	8006a54 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a52:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006a54:	2300      	movs	r3, #0
}
 8006a56:	4618      	mov	r0, r3
 8006a58:	3714      	adds	r7, #20
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a60:	4770      	bx	lr
 8006a62:	bf00      	nop
 8006a64:	40012c00 	.word	0x40012c00
 8006a68:	40000400 	.word	0x40000400
 8006a6c:	40000800 	.word	0x40000800
 8006a70:	40000c00 	.word	0x40000c00
 8006a74:	40013400 	.word	0x40013400
 8006a78:	40014000 	.word	0x40014000
 8006a7c:	40015000 	.word	0x40015000
 8006a80:	00010007 	.word	0x00010007

08006a84 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8006a84:	b580      	push	{r7, lr}
 8006a86:	b082      	sub	sp, #8
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d101      	bne.n	8006a96 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8006a92:	2301      	movs	r3, #1
 8006a94:	e054      	b.n	8006b40 <HAL_TIM_OC_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006a9c:	b2db      	uxtb	r3, r3
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d111      	bne.n	8006ac6 <HAL_TIM_OC_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8006aaa:	6878      	ldr	r0, [r7, #4]
 8006aac:	f001 fe88 	bl	80087c0 <TIM_ResetCallback>

    if (htim->OC_MspInitCallback == NULL)
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d102      	bne.n	8006abe <HAL_TIM_OC_Init+0x3a>
    {
      htim->OC_MspInitCallback = HAL_TIM_OC_MspInit;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	4a23      	ldr	r2, [pc, #140]	@ (8006b48 <HAL_TIM_OC_Init+0xc4>)
 8006abc:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006ac2:	6878      	ldr	r0, [r7, #4]
 8006ac4:	4798      	blx	r3
    HAL_TIM_OC_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	2202      	movs	r2, #2
 8006aca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681a      	ldr	r2, [r3, #0]
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	3304      	adds	r3, #4
 8006ad6:	4619      	mov	r1, r3
 8006ad8:	4610      	mov	r0, r2
 8006ada:	f001 f9d1 	bl	8007e80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	2201      	movs	r2, #1
 8006ae2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	2201      	movs	r2, #1
 8006aea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	2201      	movs	r2, #1
 8006af2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	2201      	movs	r2, #1
 8006afa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	2201      	movs	r2, #1
 8006b02:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	2201      	movs	r2, #1
 8006b0a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	2201      	movs	r2, #1
 8006b12:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2201      	movs	r2, #1
 8006b1a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	2201      	movs	r2, #1
 8006b22:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	2201      	movs	r2, #1
 8006b2a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	2201      	movs	r2, #1
 8006b32:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	2201      	movs	r2, #1
 8006b3a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006b3e:	2300      	movs	r3, #0
}
 8006b40:	4618      	mov	r0, r3
 8006b42:	3708      	adds	r7, #8
 8006b44:	46bd      	mov	sp, r7
 8006b46:	bd80      	pop	{r7, pc}
 8006b48:	08006b4d 	.word	0x08006b4d

08006b4c <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8006b4c:	b480      	push	{r7}
 8006b4e:	b083      	sub	sp, #12
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8006b54:	bf00      	nop
 8006b56:	370c      	adds	r7, #12
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5e:	4770      	bx	lr

08006b60 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b082      	sub	sp, #8
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d101      	bne.n	8006b72 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006b6e:	2301      	movs	r3, #1
 8006b70:	e054      	b.n	8006c1c <HAL_TIM_PWM_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006b78:	b2db      	uxtb	r3, r3
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d111      	bne.n	8006ba2 <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	2200      	movs	r2, #0
 8006b82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8006b86:	6878      	ldr	r0, [r7, #4]
 8006b88:	f001 fe1a 	bl	80087c0 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d102      	bne.n	8006b9a <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	4a23      	ldr	r2, [pc, #140]	@ (8006c24 <HAL_TIM_PWM_Init+0xc4>)
 8006b98:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006b9e:	6878      	ldr	r0, [r7, #4]
 8006ba0:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	2202      	movs	r2, #2
 8006ba6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681a      	ldr	r2, [r3, #0]
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	3304      	adds	r3, #4
 8006bb2:	4619      	mov	r1, r3
 8006bb4:	4610      	mov	r0, r2
 8006bb6:	f001 f963 	bl	8007e80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	2201      	movs	r2, #1
 8006bbe:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	2201      	movs	r2, #1
 8006bc6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	2201      	movs	r2, #1
 8006bce:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	2201      	movs	r2, #1
 8006bd6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	2201      	movs	r2, #1
 8006bde:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	2201      	movs	r2, #1
 8006be6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	2201      	movs	r2, #1
 8006bee:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	2201      	movs	r2, #1
 8006bf6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	2201      	movs	r2, #1
 8006bfe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	2201      	movs	r2, #1
 8006c06:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	2201      	movs	r2, #1
 8006c0e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	2201      	movs	r2, #1
 8006c16:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006c1a:	2300      	movs	r3, #0
}
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	3708      	adds	r7, #8
 8006c20:	46bd      	mov	sp, r7
 8006c22:	bd80      	pop	{r7, pc}
 8006c24:	08006c29 	.word	0x08006c29

08006c28 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006c28:	b480      	push	{r7}
 8006c2a:	b083      	sub	sp, #12
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006c30:	bf00      	nop
 8006c32:	370c      	adds	r7, #12
 8006c34:	46bd      	mov	sp, r7
 8006c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3a:	4770      	bx	lr

08006c3c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006c3c:	b580      	push	{r7, lr}
 8006c3e:	b084      	sub	sp, #16
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	6078      	str	r0, [r7, #4]
 8006c44:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006c46:	683b      	ldr	r3, [r7, #0]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d109      	bne.n	8006c60 <HAL_TIM_PWM_Start+0x24>
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006c52:	b2db      	uxtb	r3, r3
 8006c54:	2b01      	cmp	r3, #1
 8006c56:	bf14      	ite	ne
 8006c58:	2301      	movne	r3, #1
 8006c5a:	2300      	moveq	r3, #0
 8006c5c:	b2db      	uxtb	r3, r3
 8006c5e:	e03c      	b.n	8006cda <HAL_TIM_PWM_Start+0x9e>
 8006c60:	683b      	ldr	r3, [r7, #0]
 8006c62:	2b04      	cmp	r3, #4
 8006c64:	d109      	bne.n	8006c7a <HAL_TIM_PWM_Start+0x3e>
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006c6c:	b2db      	uxtb	r3, r3
 8006c6e:	2b01      	cmp	r3, #1
 8006c70:	bf14      	ite	ne
 8006c72:	2301      	movne	r3, #1
 8006c74:	2300      	moveq	r3, #0
 8006c76:	b2db      	uxtb	r3, r3
 8006c78:	e02f      	b.n	8006cda <HAL_TIM_PWM_Start+0x9e>
 8006c7a:	683b      	ldr	r3, [r7, #0]
 8006c7c:	2b08      	cmp	r3, #8
 8006c7e:	d109      	bne.n	8006c94 <HAL_TIM_PWM_Start+0x58>
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006c86:	b2db      	uxtb	r3, r3
 8006c88:	2b01      	cmp	r3, #1
 8006c8a:	bf14      	ite	ne
 8006c8c:	2301      	movne	r3, #1
 8006c8e:	2300      	moveq	r3, #0
 8006c90:	b2db      	uxtb	r3, r3
 8006c92:	e022      	b.n	8006cda <HAL_TIM_PWM_Start+0x9e>
 8006c94:	683b      	ldr	r3, [r7, #0]
 8006c96:	2b0c      	cmp	r3, #12
 8006c98:	d109      	bne.n	8006cae <HAL_TIM_PWM_Start+0x72>
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006ca0:	b2db      	uxtb	r3, r3
 8006ca2:	2b01      	cmp	r3, #1
 8006ca4:	bf14      	ite	ne
 8006ca6:	2301      	movne	r3, #1
 8006ca8:	2300      	moveq	r3, #0
 8006caa:	b2db      	uxtb	r3, r3
 8006cac:	e015      	b.n	8006cda <HAL_TIM_PWM_Start+0x9e>
 8006cae:	683b      	ldr	r3, [r7, #0]
 8006cb0:	2b10      	cmp	r3, #16
 8006cb2:	d109      	bne.n	8006cc8 <HAL_TIM_PWM_Start+0x8c>
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006cba:	b2db      	uxtb	r3, r3
 8006cbc:	2b01      	cmp	r3, #1
 8006cbe:	bf14      	ite	ne
 8006cc0:	2301      	movne	r3, #1
 8006cc2:	2300      	moveq	r3, #0
 8006cc4:	b2db      	uxtb	r3, r3
 8006cc6:	e008      	b.n	8006cda <HAL_TIM_PWM_Start+0x9e>
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8006cce:	b2db      	uxtb	r3, r3
 8006cd0:	2b01      	cmp	r3, #1
 8006cd2:	bf14      	ite	ne
 8006cd4:	2301      	movne	r3, #1
 8006cd6:	2300      	moveq	r3, #0
 8006cd8:	b2db      	uxtb	r3, r3
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d001      	beq.n	8006ce2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8006cde:	2301      	movs	r3, #1
 8006ce0:	e0a6      	b.n	8006e30 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006ce2:	683b      	ldr	r3, [r7, #0]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d104      	bne.n	8006cf2 <HAL_TIM_PWM_Start+0xb6>
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2202      	movs	r2, #2
 8006cec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006cf0:	e023      	b.n	8006d3a <HAL_TIM_PWM_Start+0xfe>
 8006cf2:	683b      	ldr	r3, [r7, #0]
 8006cf4:	2b04      	cmp	r3, #4
 8006cf6:	d104      	bne.n	8006d02 <HAL_TIM_PWM_Start+0xc6>
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2202      	movs	r2, #2
 8006cfc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006d00:	e01b      	b.n	8006d3a <HAL_TIM_PWM_Start+0xfe>
 8006d02:	683b      	ldr	r3, [r7, #0]
 8006d04:	2b08      	cmp	r3, #8
 8006d06:	d104      	bne.n	8006d12 <HAL_TIM_PWM_Start+0xd6>
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2202      	movs	r2, #2
 8006d0c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006d10:	e013      	b.n	8006d3a <HAL_TIM_PWM_Start+0xfe>
 8006d12:	683b      	ldr	r3, [r7, #0]
 8006d14:	2b0c      	cmp	r3, #12
 8006d16:	d104      	bne.n	8006d22 <HAL_TIM_PWM_Start+0xe6>
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	2202      	movs	r2, #2
 8006d1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006d20:	e00b      	b.n	8006d3a <HAL_TIM_PWM_Start+0xfe>
 8006d22:	683b      	ldr	r3, [r7, #0]
 8006d24:	2b10      	cmp	r3, #16
 8006d26:	d104      	bne.n	8006d32 <HAL_TIM_PWM_Start+0xf6>
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2202      	movs	r2, #2
 8006d2c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006d30:	e003      	b.n	8006d3a <HAL_TIM_PWM_Start+0xfe>
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	2202      	movs	r2, #2
 8006d36:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	2201      	movs	r2, #1
 8006d40:	6839      	ldr	r1, [r7, #0]
 8006d42:	4618      	mov	r0, r3
 8006d44:	f001 fd16 	bl	8008774 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	4a3a      	ldr	r2, [pc, #232]	@ (8006e38 <HAL_TIM_PWM_Start+0x1fc>)
 8006d4e:	4293      	cmp	r3, r2
 8006d50:	d018      	beq.n	8006d84 <HAL_TIM_PWM_Start+0x148>
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	4a39      	ldr	r2, [pc, #228]	@ (8006e3c <HAL_TIM_PWM_Start+0x200>)
 8006d58:	4293      	cmp	r3, r2
 8006d5a:	d013      	beq.n	8006d84 <HAL_TIM_PWM_Start+0x148>
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	4a37      	ldr	r2, [pc, #220]	@ (8006e40 <HAL_TIM_PWM_Start+0x204>)
 8006d62:	4293      	cmp	r3, r2
 8006d64:	d00e      	beq.n	8006d84 <HAL_TIM_PWM_Start+0x148>
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	4a36      	ldr	r2, [pc, #216]	@ (8006e44 <HAL_TIM_PWM_Start+0x208>)
 8006d6c:	4293      	cmp	r3, r2
 8006d6e:	d009      	beq.n	8006d84 <HAL_TIM_PWM_Start+0x148>
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	4a34      	ldr	r2, [pc, #208]	@ (8006e48 <HAL_TIM_PWM_Start+0x20c>)
 8006d76:	4293      	cmp	r3, r2
 8006d78:	d004      	beq.n	8006d84 <HAL_TIM_PWM_Start+0x148>
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	4a33      	ldr	r2, [pc, #204]	@ (8006e4c <HAL_TIM_PWM_Start+0x210>)
 8006d80:	4293      	cmp	r3, r2
 8006d82:	d101      	bne.n	8006d88 <HAL_TIM_PWM_Start+0x14c>
 8006d84:	2301      	movs	r3, #1
 8006d86:	e000      	b.n	8006d8a <HAL_TIM_PWM_Start+0x14e>
 8006d88:	2300      	movs	r3, #0
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d007      	beq.n	8006d9e <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006d9c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	4a25      	ldr	r2, [pc, #148]	@ (8006e38 <HAL_TIM_PWM_Start+0x1fc>)
 8006da4:	4293      	cmp	r3, r2
 8006da6:	d022      	beq.n	8006dee <HAL_TIM_PWM_Start+0x1b2>
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006db0:	d01d      	beq.n	8006dee <HAL_TIM_PWM_Start+0x1b2>
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	4a26      	ldr	r2, [pc, #152]	@ (8006e50 <HAL_TIM_PWM_Start+0x214>)
 8006db8:	4293      	cmp	r3, r2
 8006dba:	d018      	beq.n	8006dee <HAL_TIM_PWM_Start+0x1b2>
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	4a24      	ldr	r2, [pc, #144]	@ (8006e54 <HAL_TIM_PWM_Start+0x218>)
 8006dc2:	4293      	cmp	r3, r2
 8006dc4:	d013      	beq.n	8006dee <HAL_TIM_PWM_Start+0x1b2>
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	4a23      	ldr	r2, [pc, #140]	@ (8006e58 <HAL_TIM_PWM_Start+0x21c>)
 8006dcc:	4293      	cmp	r3, r2
 8006dce:	d00e      	beq.n	8006dee <HAL_TIM_PWM_Start+0x1b2>
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	4a19      	ldr	r2, [pc, #100]	@ (8006e3c <HAL_TIM_PWM_Start+0x200>)
 8006dd6:	4293      	cmp	r3, r2
 8006dd8:	d009      	beq.n	8006dee <HAL_TIM_PWM_Start+0x1b2>
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	4a18      	ldr	r2, [pc, #96]	@ (8006e40 <HAL_TIM_PWM_Start+0x204>)
 8006de0:	4293      	cmp	r3, r2
 8006de2:	d004      	beq.n	8006dee <HAL_TIM_PWM_Start+0x1b2>
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	4a18      	ldr	r2, [pc, #96]	@ (8006e4c <HAL_TIM_PWM_Start+0x210>)
 8006dea:	4293      	cmp	r3, r2
 8006dec:	d115      	bne.n	8006e1a <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	689a      	ldr	r2, [r3, #8]
 8006df4:	4b19      	ldr	r3, [pc, #100]	@ (8006e5c <HAL_TIM_PWM_Start+0x220>)
 8006df6:	4013      	ands	r3, r2
 8006df8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	2b06      	cmp	r3, #6
 8006dfe:	d015      	beq.n	8006e2c <HAL_TIM_PWM_Start+0x1f0>
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006e06:	d011      	beq.n	8006e2c <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	681a      	ldr	r2, [r3, #0]
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	f042 0201 	orr.w	r2, r2, #1
 8006e16:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e18:	e008      	b.n	8006e2c <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	681a      	ldr	r2, [r3, #0]
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	f042 0201 	orr.w	r2, r2, #1
 8006e28:	601a      	str	r2, [r3, #0]
 8006e2a:	e000      	b.n	8006e2e <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e2c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006e2e:	2300      	movs	r3, #0
}
 8006e30:	4618      	mov	r0, r3
 8006e32:	3710      	adds	r7, #16
 8006e34:	46bd      	mov	sp, r7
 8006e36:	bd80      	pop	{r7, pc}
 8006e38:	40012c00 	.word	0x40012c00
 8006e3c:	40013400 	.word	0x40013400
 8006e40:	40014000 	.word	0x40014000
 8006e44:	40014400 	.word	0x40014400
 8006e48:	40014800 	.word	0x40014800
 8006e4c:	40015000 	.word	0x40015000
 8006e50:	40000400 	.word	0x40000400
 8006e54:	40000800 	.word	0x40000800
 8006e58:	40000c00 	.word	0x40000c00
 8006e5c:	00010007 	.word	0x00010007

08006e60 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8006e60:	b580      	push	{r7, lr}
 8006e62:	b082      	sub	sp, #8
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]
 8006e68:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d101      	bne.n	8006e74 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8006e70:	2301      	movs	r3, #1
 8006e72:	e04c      	b.n	8006f0e <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006e7a:	b2db      	uxtb	r3, r3
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d111      	bne.n	8006ea4 <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	2200      	movs	r2, #0
 8006e84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8006e88:	6878      	ldr	r0, [r7, #4]
 8006e8a:	f001 fc99 	bl	80087c0 <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d102      	bne.n	8006e9c <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	4a1f      	ldr	r2, [pc, #124]	@ (8006f18 <HAL_TIM_OnePulse_Init+0xb8>)
 8006e9a:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006ea0:	6878      	ldr	r0, [r7, #4]
 8006ea2:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	2202      	movs	r2, #2
 8006ea8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681a      	ldr	r2, [r3, #0]
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	3304      	adds	r3, #4
 8006eb4:	4619      	mov	r1, r3
 8006eb6:	4610      	mov	r0, r2
 8006eb8:	f000 ffe2 	bl	8007e80 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	681a      	ldr	r2, [r3, #0]
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	f022 0208 	bic.w	r2, r2, #8
 8006eca:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	6819      	ldr	r1, [r3, #0]
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	683a      	ldr	r2, [r7, #0]
 8006ed8:	430a      	orrs	r2, r1
 8006eda:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2201      	movs	r2, #1
 8006ee0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2201      	movs	r2, #1
 8006ee8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2201      	movs	r2, #1
 8006ef0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2201      	movs	r2, #1
 8006ef8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2201      	movs	r2, #1
 8006f00:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	2201      	movs	r2, #1
 8006f08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006f0c:	2300      	movs	r3, #0
}
 8006f0e:	4618      	mov	r0, r3
 8006f10:	3708      	adds	r7, #8
 8006f12:	46bd      	mov	sp, r7
 8006f14:	bd80      	pop	{r7, pc}
 8006f16:	bf00      	nop
 8006f18:	08006f1d 	.word	0x08006f1d

08006f1c <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8006f1c:	b480      	push	{r7}
 8006f1e:	b083      	sub	sp, #12
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8006f24:	bf00      	nop
 8006f26:	370c      	adds	r7, #12
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2e:	4770      	bx	lr

08006f30 <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 8006f30:	b580      	push	{r7, lr}
 8006f32:	b084      	sub	sp, #16
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
 8006f38:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006f40:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006f48:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006f50:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006f58:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006f5a:	7bfb      	ldrb	r3, [r7, #15]
 8006f5c:	2b01      	cmp	r3, #1
 8006f5e:	d108      	bne.n	8006f72 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006f60:	7bbb      	ldrb	r3, [r7, #14]
 8006f62:	2b01      	cmp	r3, #1
 8006f64:	d105      	bne.n	8006f72 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006f66:	7b7b      	ldrb	r3, [r7, #13]
 8006f68:	2b01      	cmp	r3, #1
 8006f6a:	d102      	bne.n	8006f72 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006f6c:	7b3b      	ldrb	r3, [r7, #12]
 8006f6e:	2b01      	cmp	r3, #1
 8006f70:	d001      	beq.n	8006f76 <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 8006f72:	2301      	movs	r3, #1
 8006f74:	e059      	b.n	800702a <HAL_TIM_OnePulse_Start_IT+0xfa>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	2202      	movs	r2, #2
 8006f7a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	2202      	movs	r2, #2
 8006f82:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	2202      	movs	r2, #2
 8006f8a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	2202      	movs	r2, #2
 8006f92:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	68da      	ldr	r2, [r3, #12]
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	f042 0202 	orr.w	r2, r2, #2
 8006fa4:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	68da      	ldr	r2, [r3, #12]
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	f042 0204 	orr.w	r2, r2, #4
 8006fb4:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	2201      	movs	r2, #1
 8006fbc:	2100      	movs	r1, #0
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	f001 fbd8 	bl	8008774 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	2201      	movs	r2, #1
 8006fca:	2104      	movs	r1, #4
 8006fcc:	4618      	mov	r0, r3
 8006fce:	f001 fbd1 	bl	8008774 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	4a17      	ldr	r2, [pc, #92]	@ (8007034 <HAL_TIM_OnePulse_Start_IT+0x104>)
 8006fd8:	4293      	cmp	r3, r2
 8006fda:	d018      	beq.n	800700e <HAL_TIM_OnePulse_Start_IT+0xde>
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	4a15      	ldr	r2, [pc, #84]	@ (8007038 <HAL_TIM_OnePulse_Start_IT+0x108>)
 8006fe2:	4293      	cmp	r3, r2
 8006fe4:	d013      	beq.n	800700e <HAL_TIM_OnePulse_Start_IT+0xde>
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	4a14      	ldr	r2, [pc, #80]	@ (800703c <HAL_TIM_OnePulse_Start_IT+0x10c>)
 8006fec:	4293      	cmp	r3, r2
 8006fee:	d00e      	beq.n	800700e <HAL_TIM_OnePulse_Start_IT+0xde>
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	4a12      	ldr	r2, [pc, #72]	@ (8007040 <HAL_TIM_OnePulse_Start_IT+0x110>)
 8006ff6:	4293      	cmp	r3, r2
 8006ff8:	d009      	beq.n	800700e <HAL_TIM_OnePulse_Start_IT+0xde>
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	4a11      	ldr	r2, [pc, #68]	@ (8007044 <HAL_TIM_OnePulse_Start_IT+0x114>)
 8007000:	4293      	cmp	r3, r2
 8007002:	d004      	beq.n	800700e <HAL_TIM_OnePulse_Start_IT+0xde>
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	4a0f      	ldr	r2, [pc, #60]	@ (8007048 <HAL_TIM_OnePulse_Start_IT+0x118>)
 800700a:	4293      	cmp	r3, r2
 800700c:	d101      	bne.n	8007012 <HAL_TIM_OnePulse_Start_IT+0xe2>
 800700e:	2301      	movs	r3, #1
 8007010:	e000      	b.n	8007014 <HAL_TIM_OnePulse_Start_IT+0xe4>
 8007012:	2300      	movs	r3, #0
 8007014:	2b00      	cmp	r3, #0
 8007016:	d007      	beq.n	8007028 <HAL_TIM_OnePulse_Start_IT+0xf8>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007026:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8007028:	2300      	movs	r3, #0
}
 800702a:	4618      	mov	r0, r3
 800702c:	3710      	adds	r7, #16
 800702e:	46bd      	mov	sp, r7
 8007030:	bd80      	pop	{r7, pc}
 8007032:	bf00      	nop
 8007034:	40012c00 	.word	0x40012c00
 8007038:	40013400 	.word	0x40013400
 800703c:	40014000 	.word	0x40014000
 8007040:	40014400 	.word	0x40014400
 8007044:	40014800 	.word	0x40014800
 8007048:	40015000 	.word	0x40015000

0800704c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800704c:	b580      	push	{r7, lr}
 800704e:	b086      	sub	sp, #24
 8007050:	af00      	add	r7, sp, #0
 8007052:	6078      	str	r0, [r7, #4]
 8007054:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	2b00      	cmp	r3, #0
 800705a:	d101      	bne.n	8007060 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800705c:	2301      	movs	r3, #1
 800705e:	e0a2      	b.n	80071a6 <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007066:	b2db      	uxtb	r3, r3
 8007068:	2b00      	cmp	r3, #0
 800706a:	d111      	bne.n	8007090 <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2200      	movs	r2, #0
 8007070:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8007074:	6878      	ldr	r0, [r7, #4]
 8007076:	f001 fba3 	bl	80087c0 <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800707e:	2b00      	cmp	r3, #0
 8007080:	d102      	bne.n	8007088 <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	4a4a      	ldr	r2, [pc, #296]	@ (80071b0 <HAL_TIM_Encoder_Init+0x164>)
 8007086:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800708c:	6878      	ldr	r0, [r7, #4]
 800708e:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2202      	movs	r2, #2
 8007094:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	689b      	ldr	r3, [r3, #8]
 800709e:	687a      	ldr	r2, [r7, #4]
 80070a0:	6812      	ldr	r2, [r2, #0]
 80070a2:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 80070a6:	f023 0307 	bic.w	r3, r3, #7
 80070aa:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681a      	ldr	r2, [r3, #0]
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	3304      	adds	r3, #4
 80070b4:	4619      	mov	r1, r3
 80070b6:	4610      	mov	r0, r2
 80070b8:	f000 fee2 	bl	8007e80 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	689b      	ldr	r3, [r3, #8]
 80070c2:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	699b      	ldr	r3, [r3, #24]
 80070ca:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	6a1b      	ldr	r3, [r3, #32]
 80070d2:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80070d4:	683b      	ldr	r3, [r7, #0]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	697a      	ldr	r2, [r7, #20]
 80070da:	4313      	orrs	r3, r2
 80070dc:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80070de:	693b      	ldr	r3, [r7, #16]
 80070e0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80070e4:	f023 0303 	bic.w	r3, r3, #3
 80070e8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80070ea:	683b      	ldr	r3, [r7, #0]
 80070ec:	689a      	ldr	r2, [r3, #8]
 80070ee:	683b      	ldr	r3, [r7, #0]
 80070f0:	699b      	ldr	r3, [r3, #24]
 80070f2:	021b      	lsls	r3, r3, #8
 80070f4:	4313      	orrs	r3, r2
 80070f6:	693a      	ldr	r2, [r7, #16]
 80070f8:	4313      	orrs	r3, r2
 80070fa:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80070fc:	693b      	ldr	r3, [r7, #16]
 80070fe:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8007102:	f023 030c 	bic.w	r3, r3, #12
 8007106:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8007108:	693b      	ldr	r3, [r7, #16]
 800710a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800710e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007112:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007114:	683b      	ldr	r3, [r7, #0]
 8007116:	68da      	ldr	r2, [r3, #12]
 8007118:	683b      	ldr	r3, [r7, #0]
 800711a:	69db      	ldr	r3, [r3, #28]
 800711c:	021b      	lsls	r3, r3, #8
 800711e:	4313      	orrs	r3, r2
 8007120:	693a      	ldr	r2, [r7, #16]
 8007122:	4313      	orrs	r3, r2
 8007124:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007126:	683b      	ldr	r3, [r7, #0]
 8007128:	691b      	ldr	r3, [r3, #16]
 800712a:	011a      	lsls	r2, r3, #4
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	6a1b      	ldr	r3, [r3, #32]
 8007130:	031b      	lsls	r3, r3, #12
 8007132:	4313      	orrs	r3, r2
 8007134:	693a      	ldr	r2, [r7, #16]
 8007136:	4313      	orrs	r3, r2
 8007138:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8007140:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8007148:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800714a:	683b      	ldr	r3, [r7, #0]
 800714c:	685a      	ldr	r2, [r3, #4]
 800714e:	683b      	ldr	r3, [r7, #0]
 8007150:	695b      	ldr	r3, [r3, #20]
 8007152:	011b      	lsls	r3, r3, #4
 8007154:	4313      	orrs	r3, r2
 8007156:	68fa      	ldr	r2, [r7, #12]
 8007158:	4313      	orrs	r3, r2
 800715a:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	697a      	ldr	r2, [r7, #20]
 8007162:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	693a      	ldr	r2, [r7, #16]
 800716a:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	68fa      	ldr	r2, [r7, #12]
 8007172:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2201      	movs	r2, #1
 8007178:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2201      	movs	r2, #1
 8007180:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2201      	movs	r2, #1
 8007188:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	2201      	movs	r2, #1
 8007190:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	2201      	movs	r2, #1
 8007198:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2201      	movs	r2, #1
 80071a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80071a4:	2300      	movs	r3, #0
}
 80071a6:	4618      	mov	r0, r3
 80071a8:	3718      	adds	r7, #24
 80071aa:	46bd      	mov	sp, r7
 80071ac:	bd80      	pop	{r7, pc}
 80071ae:	bf00      	nop
 80071b0:	08003149 	.word	0x08003149

080071b4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80071b4:	b580      	push	{r7, lr}
 80071b6:	b084      	sub	sp, #16
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	6078      	str	r0, [r7, #4]
 80071bc:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80071c4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80071cc:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80071d4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80071dc:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80071de:	683b      	ldr	r3, [r7, #0]
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d110      	bne.n	8007206 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80071e4:	7bfb      	ldrb	r3, [r7, #15]
 80071e6:	2b01      	cmp	r3, #1
 80071e8:	d102      	bne.n	80071f0 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80071ea:	7b7b      	ldrb	r3, [r7, #13]
 80071ec:	2b01      	cmp	r3, #1
 80071ee:	d001      	beq.n	80071f4 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80071f0:	2301      	movs	r3, #1
 80071f2:	e069      	b.n	80072c8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2202      	movs	r2, #2
 80071f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2202      	movs	r2, #2
 8007200:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007204:	e031      	b.n	800726a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8007206:	683b      	ldr	r3, [r7, #0]
 8007208:	2b04      	cmp	r3, #4
 800720a:	d110      	bne.n	800722e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800720c:	7bbb      	ldrb	r3, [r7, #14]
 800720e:	2b01      	cmp	r3, #1
 8007210:	d102      	bne.n	8007218 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007212:	7b3b      	ldrb	r3, [r7, #12]
 8007214:	2b01      	cmp	r3, #1
 8007216:	d001      	beq.n	800721c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8007218:	2301      	movs	r3, #1
 800721a:	e055      	b.n	80072c8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2202      	movs	r2, #2
 8007220:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2202      	movs	r2, #2
 8007228:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800722c:	e01d      	b.n	800726a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800722e:	7bfb      	ldrb	r3, [r7, #15]
 8007230:	2b01      	cmp	r3, #1
 8007232:	d108      	bne.n	8007246 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007234:	7bbb      	ldrb	r3, [r7, #14]
 8007236:	2b01      	cmp	r3, #1
 8007238:	d105      	bne.n	8007246 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800723a:	7b7b      	ldrb	r3, [r7, #13]
 800723c:	2b01      	cmp	r3, #1
 800723e:	d102      	bne.n	8007246 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007240:	7b3b      	ldrb	r3, [r7, #12]
 8007242:	2b01      	cmp	r3, #1
 8007244:	d001      	beq.n	800724a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8007246:	2301      	movs	r3, #1
 8007248:	e03e      	b.n	80072c8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	2202      	movs	r2, #2
 800724e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	2202      	movs	r2, #2
 8007256:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	2202      	movs	r2, #2
 800725e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	2202      	movs	r2, #2
 8007266:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800726a:	683b      	ldr	r3, [r7, #0]
 800726c:	2b00      	cmp	r3, #0
 800726e:	d003      	beq.n	8007278 <HAL_TIM_Encoder_Start+0xc4>
 8007270:	683b      	ldr	r3, [r7, #0]
 8007272:	2b04      	cmp	r3, #4
 8007274:	d008      	beq.n	8007288 <HAL_TIM_Encoder_Start+0xd4>
 8007276:	e00f      	b.n	8007298 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	2201      	movs	r2, #1
 800727e:	2100      	movs	r1, #0
 8007280:	4618      	mov	r0, r3
 8007282:	f001 fa77 	bl	8008774 <TIM_CCxChannelCmd>
      break;
 8007286:	e016      	b.n	80072b6 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	2201      	movs	r2, #1
 800728e:	2104      	movs	r1, #4
 8007290:	4618      	mov	r0, r3
 8007292:	f001 fa6f 	bl	8008774 <TIM_CCxChannelCmd>
      break;
 8007296:	e00e      	b.n	80072b6 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	2201      	movs	r2, #1
 800729e:	2100      	movs	r1, #0
 80072a0:	4618      	mov	r0, r3
 80072a2:	f001 fa67 	bl	8008774 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	2201      	movs	r2, #1
 80072ac:	2104      	movs	r1, #4
 80072ae:	4618      	mov	r0, r3
 80072b0:	f001 fa60 	bl	8008774 <TIM_CCxChannelCmd>
      break;
 80072b4:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	681a      	ldr	r2, [r3, #0]
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	f042 0201 	orr.w	r2, r2, #1
 80072c4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80072c6:	2300      	movs	r3, #0
}
 80072c8:	4618      	mov	r0, r3
 80072ca:	3710      	adds	r7, #16
 80072cc:	46bd      	mov	sp, r7
 80072ce:	bd80      	pop	{r7, pc}

080072d0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80072d0:	b580      	push	{r7, lr}
 80072d2:	b084      	sub	sp, #16
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	68db      	ldr	r3, [r3, #12]
 80072de:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	691b      	ldr	r3, [r3, #16]
 80072e6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80072e8:	68bb      	ldr	r3, [r7, #8]
 80072ea:	f003 0302 	and.w	r3, r3, #2
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d026      	beq.n	8007340 <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	f003 0302 	and.w	r3, r3, #2
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d021      	beq.n	8007340 <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	f06f 0202 	mvn.w	r2, #2
 8007304:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	2201      	movs	r2, #1
 800730a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	699b      	ldr	r3, [r3, #24]
 8007312:	f003 0303 	and.w	r3, r3, #3
 8007316:	2b00      	cmp	r3, #0
 8007318:	d005      	beq.n	8007326 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007320:	6878      	ldr	r0, [r7, #4]
 8007322:	4798      	blx	r3
 8007324:	e009      	b.n	800733a <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800732c:	6878      	ldr	r0, [r7, #4]
 800732e:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007336:	6878      	ldr	r0, [r7, #4]
 8007338:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	2200      	movs	r2, #0
 800733e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007340:	68bb      	ldr	r3, [r7, #8]
 8007342:	f003 0304 	and.w	r3, r3, #4
 8007346:	2b00      	cmp	r3, #0
 8007348:	d026      	beq.n	8007398 <HAL_TIM_IRQHandler+0xc8>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	f003 0304 	and.w	r3, r3, #4
 8007350:	2b00      	cmp	r3, #0
 8007352:	d021      	beq.n	8007398 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f06f 0204 	mvn.w	r2, #4
 800735c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	2202      	movs	r2, #2
 8007362:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	699b      	ldr	r3, [r3, #24]
 800736a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800736e:	2b00      	cmp	r3, #0
 8007370:	d005      	beq.n	800737e <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007378:	6878      	ldr	r0, [r7, #4]
 800737a:	4798      	blx	r3
 800737c:	e009      	b.n	8007392 <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007384:	6878      	ldr	r0, [r7, #4]
 8007386:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800738e:	6878      	ldr	r0, [r7, #4]
 8007390:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	2200      	movs	r2, #0
 8007396:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007398:	68bb      	ldr	r3, [r7, #8]
 800739a:	f003 0308 	and.w	r3, r3, #8
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d026      	beq.n	80073f0 <HAL_TIM_IRQHandler+0x120>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	f003 0308 	and.w	r3, r3, #8
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d021      	beq.n	80073f0 <HAL_TIM_IRQHandler+0x120>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	f06f 0208 	mvn.w	r2, #8
 80073b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	2204      	movs	r2, #4
 80073ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	69db      	ldr	r3, [r3, #28]
 80073c2:	f003 0303 	and.w	r3, r3, #3
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d005      	beq.n	80073d6 <HAL_TIM_IRQHandler+0x106>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80073d0:	6878      	ldr	r0, [r7, #4]
 80073d2:	4798      	blx	r3
 80073d4:	e009      	b.n	80073ea <HAL_TIM_IRQHandler+0x11a>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80073dc:	6878      	ldr	r0, [r7, #4]
 80073de:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80073e6:	6878      	ldr	r0, [r7, #4]
 80073e8:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	2200      	movs	r2, #0
 80073ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80073f0:	68bb      	ldr	r3, [r7, #8]
 80073f2:	f003 0310 	and.w	r3, r3, #16
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d026      	beq.n	8007448 <HAL_TIM_IRQHandler+0x178>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	f003 0310 	and.w	r3, r3, #16
 8007400:	2b00      	cmp	r3, #0
 8007402:	d021      	beq.n	8007448 <HAL_TIM_IRQHandler+0x178>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	f06f 0210 	mvn.w	r2, #16
 800740c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	2208      	movs	r2, #8
 8007412:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	69db      	ldr	r3, [r3, #28]
 800741a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800741e:	2b00      	cmp	r3, #0
 8007420:	d005      	beq.n	800742e <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007428:	6878      	ldr	r0, [r7, #4]
 800742a:	4798      	blx	r3
 800742c:	e009      	b.n	8007442 <HAL_TIM_IRQHandler+0x172>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007434:	6878      	ldr	r0, [r7, #4]
 8007436:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800743e:	6878      	ldr	r0, [r7, #4]
 8007440:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	2200      	movs	r2, #0
 8007446:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007448:	68bb      	ldr	r3, [r7, #8]
 800744a:	f003 0301 	and.w	r3, r3, #1
 800744e:	2b00      	cmp	r3, #0
 8007450:	d00e      	beq.n	8007470 <HAL_TIM_IRQHandler+0x1a0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	f003 0301 	and.w	r3, r3, #1
 8007458:	2b00      	cmp	r3, #0
 800745a:	d009      	beq.n	8007470 <HAL_TIM_IRQHandler+0x1a0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	f06f 0201 	mvn.w	r2, #1
 8007464:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800746c:	6878      	ldr	r0, [r7, #4]
 800746e:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007470:	68bb      	ldr	r3, [r7, #8]
 8007472:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007476:	2b00      	cmp	r3, #0
 8007478:	d104      	bne.n	8007484 <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800747a:	68bb      	ldr	r3, [r7, #8]
 800747c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007480:	2b00      	cmp	r3, #0
 8007482:	d00e      	beq.n	80074a2 <HAL_TIM_IRQHandler+0x1d2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800748a:	2b00      	cmp	r3, #0
 800748c:	d009      	beq.n	80074a2 <HAL_TIM_IRQHandler+0x1d2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8007496:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800749e:	6878      	ldr	r0, [r7, #4]
 80074a0:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80074a2:	68bb      	ldr	r3, [r7, #8]
 80074a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d00e      	beq.n	80074ca <HAL_TIM_IRQHandler+0x1fa>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d009      	beq.n	80074ca <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80074be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80074c6:	6878      	ldr	r0, [r7, #4]
 80074c8:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80074ca:	68bb      	ldr	r3, [r7, #8]
 80074cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d00e      	beq.n	80074f2 <HAL_TIM_IRQHandler+0x222>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d009      	beq.n	80074f2 <HAL_TIM_IRQHandler+0x222>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80074e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80074ee:	6878      	ldr	r0, [r7, #4]
 80074f0:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80074f2:	68bb      	ldr	r3, [r7, #8]
 80074f4:	f003 0320 	and.w	r3, r3, #32
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d00e      	beq.n	800751a <HAL_TIM_IRQHandler+0x24a>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	f003 0320 	and.w	r3, r3, #32
 8007502:	2b00      	cmp	r3, #0
 8007504:	d009      	beq.n	800751a <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	f06f 0220 	mvn.w	r2, #32
 800750e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007516:	6878      	ldr	r0, [r7, #4]
 8007518:	4798      	blx	r3
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800751a:	68bb      	ldr	r3, [r7, #8]
 800751c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007520:	2b00      	cmp	r3, #0
 8007522:	d00e      	beq.n	8007542 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800752a:	2b00      	cmp	r3, #0
 800752c:	d009      	beq.n	8007542 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8007536:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800753e:	6878      	ldr	r0, [r7, #4]
 8007540:	4798      	blx	r3
      HAL_TIMEx_EncoderIndexCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8007542:	68bb      	ldr	r3, [r7, #8]
 8007544:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007548:	2b00      	cmp	r3, #0
 800754a:	d00e      	beq.n	800756a <HAL_TIM_IRQHandler+0x29a>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007552:	2b00      	cmp	r3, #0
 8007554:	d009      	beq.n	800756a <HAL_TIM_IRQHandler+0x29a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800755e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8007566:	6878      	ldr	r0, [r7, #4]
 8007568:	4798      	blx	r3
      HAL_TIMEx_DirectionChangeCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800756a:	68bb      	ldr	r3, [r7, #8]
 800756c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007570:	2b00      	cmp	r3, #0
 8007572:	d00e      	beq.n	8007592 <HAL_TIM_IRQHandler+0x2c2>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800757a:	2b00      	cmp	r3, #0
 800757c:	d009      	beq.n	8007592 <HAL_TIM_IRQHandler+0x2c2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8007586:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800758e:	6878      	ldr	r0, [r7, #4]
 8007590:	4798      	blx	r3
      HAL_TIMEx_IndexErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8007592:	68bb      	ldr	r3, [r7, #8]
 8007594:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007598:	2b00      	cmp	r3, #0
 800759a:	d00e      	beq.n	80075ba <HAL_TIM_IRQHandler+0x2ea>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d009      	beq.n	80075ba <HAL_TIM_IRQHandler+0x2ea>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 80075ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80075b6:	6878      	ldr	r0, [r7, #4]
 80075b8:	4798      	blx	r3
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80075ba:	bf00      	nop
 80075bc:	3710      	adds	r7, #16
 80075be:	46bd      	mov	sp, r7
 80075c0:	bd80      	pop	{r7, pc}
	...

080075c4 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80075c4:	b580      	push	{r7, lr}
 80075c6:	b086      	sub	sp, #24
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	60f8      	str	r0, [r7, #12]
 80075cc:	60b9      	str	r1, [r7, #8]
 80075ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80075d0:	2300      	movs	r3, #0
 80075d2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_CHANNEL_MODE(sConfig->OCMode, Channel));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80075da:	2b01      	cmp	r3, #1
 80075dc:	d101      	bne.n	80075e2 <HAL_TIM_OC_ConfigChannel+0x1e>
 80075de:	2302      	movs	r3, #2
 80075e0:	e066      	b.n	80076b0 <HAL_TIM_OC_ConfigChannel+0xec>
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	2201      	movs	r2, #1
 80075e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	2b14      	cmp	r3, #20
 80075ee:	d857      	bhi.n	80076a0 <HAL_TIM_OC_ConfigChannel+0xdc>
 80075f0:	a201      	add	r2, pc, #4	@ (adr r2, 80075f8 <HAL_TIM_OC_ConfigChannel+0x34>)
 80075f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075f6:	bf00      	nop
 80075f8:	0800764d 	.word	0x0800764d
 80075fc:	080076a1 	.word	0x080076a1
 8007600:	080076a1 	.word	0x080076a1
 8007604:	080076a1 	.word	0x080076a1
 8007608:	0800765b 	.word	0x0800765b
 800760c:	080076a1 	.word	0x080076a1
 8007610:	080076a1 	.word	0x080076a1
 8007614:	080076a1 	.word	0x080076a1
 8007618:	08007669 	.word	0x08007669
 800761c:	080076a1 	.word	0x080076a1
 8007620:	080076a1 	.word	0x080076a1
 8007624:	080076a1 	.word	0x080076a1
 8007628:	08007677 	.word	0x08007677
 800762c:	080076a1 	.word	0x080076a1
 8007630:	080076a1 	.word	0x080076a1
 8007634:	080076a1 	.word	0x080076a1
 8007638:	08007685 	.word	0x08007685
 800763c:	080076a1 	.word	0x080076a1
 8007640:	080076a1 	.word	0x080076a1
 8007644:	080076a1 	.word	0x080076a1
 8007648:	08007693 	.word	0x08007693
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	68b9      	ldr	r1, [r7, #8]
 8007652:	4618      	mov	r0, r3
 8007654:	f000 fcc8 	bl	8007fe8 <TIM_OC1_SetConfig>
      break;
 8007658:	e025      	b.n	80076a6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	68b9      	ldr	r1, [r7, #8]
 8007660:	4618      	mov	r0, r3
 8007662:	f000 fd5b 	bl	800811c <TIM_OC2_SetConfig>
      break;
 8007666:	e01e      	b.n	80076a6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	68b9      	ldr	r1, [r7, #8]
 800766e:	4618      	mov	r0, r3
 8007670:	f000 fde8 	bl	8008244 <TIM_OC3_SetConfig>
      break;
 8007674:	e017      	b.n	80076a6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	68b9      	ldr	r1, [r7, #8]
 800767c:	4618      	mov	r0, r3
 800767e:	f000 fe73 	bl	8008368 <TIM_OC4_SetConfig>
      break;
 8007682:	e010      	b.n	80076a6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	68b9      	ldr	r1, [r7, #8]
 800768a:	4618      	mov	r0, r3
 800768c:	f000 ff00 	bl	8008490 <TIM_OC5_SetConfig>
      break;
 8007690:	e009      	b.n	80076a6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	68b9      	ldr	r1, [r7, #8]
 8007698:	4618      	mov	r0, r3
 800769a:	f000 ff63 	bl	8008564 <TIM_OC6_SetConfig>
      break;
 800769e:	e002      	b.n	80076a6 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 80076a0:	2301      	movs	r3, #1
 80076a2:	75fb      	strb	r3, [r7, #23]
      break;
 80076a4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	2200      	movs	r2, #0
 80076aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80076ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80076b0:	4618      	mov	r0, r3
 80076b2:	3718      	adds	r7, #24
 80076b4:	46bd      	mov	sp, r7
 80076b6:	bd80      	pop	{r7, pc}

080076b8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80076b8:	b580      	push	{r7, lr}
 80076ba:	b086      	sub	sp, #24
 80076bc:	af00      	add	r7, sp, #0
 80076be:	60f8      	str	r0, [r7, #12]
 80076c0:	60b9      	str	r1, [r7, #8]
 80076c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80076c4:	2300      	movs	r3, #0
 80076c6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80076ce:	2b01      	cmp	r3, #1
 80076d0:	d101      	bne.n	80076d6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80076d2:	2302      	movs	r3, #2
 80076d4:	e0ff      	b.n	80078d6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	2201      	movs	r2, #1
 80076da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	2b14      	cmp	r3, #20
 80076e2:	f200 80f0 	bhi.w	80078c6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80076e6:	a201      	add	r2, pc, #4	@ (adr r2, 80076ec <HAL_TIM_PWM_ConfigChannel+0x34>)
 80076e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076ec:	08007741 	.word	0x08007741
 80076f0:	080078c7 	.word	0x080078c7
 80076f4:	080078c7 	.word	0x080078c7
 80076f8:	080078c7 	.word	0x080078c7
 80076fc:	08007781 	.word	0x08007781
 8007700:	080078c7 	.word	0x080078c7
 8007704:	080078c7 	.word	0x080078c7
 8007708:	080078c7 	.word	0x080078c7
 800770c:	080077c3 	.word	0x080077c3
 8007710:	080078c7 	.word	0x080078c7
 8007714:	080078c7 	.word	0x080078c7
 8007718:	080078c7 	.word	0x080078c7
 800771c:	08007803 	.word	0x08007803
 8007720:	080078c7 	.word	0x080078c7
 8007724:	080078c7 	.word	0x080078c7
 8007728:	080078c7 	.word	0x080078c7
 800772c:	08007845 	.word	0x08007845
 8007730:	080078c7 	.word	0x080078c7
 8007734:	080078c7 	.word	0x080078c7
 8007738:	080078c7 	.word	0x080078c7
 800773c:	08007885 	.word	0x08007885
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	68b9      	ldr	r1, [r7, #8]
 8007746:	4618      	mov	r0, r3
 8007748:	f000 fc4e 	bl	8007fe8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	699a      	ldr	r2, [r3, #24]
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	f042 0208 	orr.w	r2, r2, #8
 800775a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	699a      	ldr	r2, [r3, #24]
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	f022 0204 	bic.w	r2, r2, #4
 800776a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	6999      	ldr	r1, [r3, #24]
 8007772:	68bb      	ldr	r3, [r7, #8]
 8007774:	691a      	ldr	r2, [r3, #16]
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	430a      	orrs	r2, r1
 800777c:	619a      	str	r2, [r3, #24]
      break;
 800777e:	e0a5      	b.n	80078cc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	68b9      	ldr	r1, [r7, #8]
 8007786:	4618      	mov	r0, r3
 8007788:	f000 fcc8 	bl	800811c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	699a      	ldr	r2, [r3, #24]
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800779a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	699a      	ldr	r2, [r3, #24]
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80077aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	6999      	ldr	r1, [r3, #24]
 80077b2:	68bb      	ldr	r3, [r7, #8]
 80077b4:	691b      	ldr	r3, [r3, #16]
 80077b6:	021a      	lsls	r2, r3, #8
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	430a      	orrs	r2, r1
 80077be:	619a      	str	r2, [r3, #24]
      break;
 80077c0:	e084      	b.n	80078cc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	68b9      	ldr	r1, [r7, #8]
 80077c8:	4618      	mov	r0, r3
 80077ca:	f000 fd3b 	bl	8008244 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	69da      	ldr	r2, [r3, #28]
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	f042 0208 	orr.w	r2, r2, #8
 80077dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	69da      	ldr	r2, [r3, #28]
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	f022 0204 	bic.w	r2, r2, #4
 80077ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	69d9      	ldr	r1, [r3, #28]
 80077f4:	68bb      	ldr	r3, [r7, #8]
 80077f6:	691a      	ldr	r2, [r3, #16]
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	430a      	orrs	r2, r1
 80077fe:	61da      	str	r2, [r3, #28]
      break;
 8007800:	e064      	b.n	80078cc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	68b9      	ldr	r1, [r7, #8]
 8007808:	4618      	mov	r0, r3
 800780a:	f000 fdad 	bl	8008368 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	69da      	ldr	r2, [r3, #28]
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800781c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	69da      	ldr	r2, [r3, #28]
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800782c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	69d9      	ldr	r1, [r3, #28]
 8007834:	68bb      	ldr	r3, [r7, #8]
 8007836:	691b      	ldr	r3, [r3, #16]
 8007838:	021a      	lsls	r2, r3, #8
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	430a      	orrs	r2, r1
 8007840:	61da      	str	r2, [r3, #28]
      break;
 8007842:	e043      	b.n	80078cc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	68b9      	ldr	r1, [r7, #8]
 800784a:	4618      	mov	r0, r3
 800784c:	f000 fe20 	bl	8008490 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	f042 0208 	orr.w	r2, r2, #8
 800785e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	f022 0204 	bic.w	r2, r2, #4
 800786e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8007876:	68bb      	ldr	r3, [r7, #8]
 8007878:	691a      	ldr	r2, [r3, #16]
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	430a      	orrs	r2, r1
 8007880:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8007882:	e023      	b.n	80078cc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	68b9      	ldr	r1, [r7, #8]
 800788a:	4618      	mov	r0, r3
 800788c:	f000 fe6a 	bl	8008564 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800789e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80078ae:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80078b6:	68bb      	ldr	r3, [r7, #8]
 80078b8:	691b      	ldr	r3, [r3, #16]
 80078ba:	021a      	lsls	r2, r3, #8
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	430a      	orrs	r2, r1
 80078c2:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80078c4:	e002      	b.n	80078cc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80078c6:	2301      	movs	r3, #1
 80078c8:	75fb      	strb	r3, [r7, #23]
      break;
 80078ca:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	2200      	movs	r2, #0
 80078d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80078d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80078d6:	4618      	mov	r0, r3
 80078d8:	3718      	adds	r7, #24
 80078da:	46bd      	mov	sp, r7
 80078dc:	bd80      	pop	{r7, pc}
 80078de:	bf00      	nop

080078e0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80078e0:	b580      	push	{r7, lr}
 80078e2:	b084      	sub	sp, #16
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	6078      	str	r0, [r7, #4]
 80078e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80078ea:	2300      	movs	r3, #0
 80078ec:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80078f4:	2b01      	cmp	r3, #1
 80078f6:	d101      	bne.n	80078fc <HAL_TIM_ConfigClockSource+0x1c>
 80078f8:	2302      	movs	r3, #2
 80078fa:	e0f6      	b.n	8007aea <HAL_TIM_ConfigClockSource+0x20a>
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	2201      	movs	r2, #1
 8007900:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	2202      	movs	r2, #2
 8007908:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	689b      	ldr	r3, [r3, #8]
 8007912:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007914:	68bb      	ldr	r3, [r7, #8]
 8007916:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800791a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800791e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007920:	68bb      	ldr	r3, [r7, #8]
 8007922:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007926:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	68ba      	ldr	r2, [r7, #8]
 800792e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007930:	683b      	ldr	r3, [r7, #0]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	4a6f      	ldr	r2, [pc, #444]	@ (8007af4 <HAL_TIM_ConfigClockSource+0x214>)
 8007936:	4293      	cmp	r3, r2
 8007938:	f000 80c1 	beq.w	8007abe <HAL_TIM_ConfigClockSource+0x1de>
 800793c:	4a6d      	ldr	r2, [pc, #436]	@ (8007af4 <HAL_TIM_ConfigClockSource+0x214>)
 800793e:	4293      	cmp	r3, r2
 8007940:	f200 80c6 	bhi.w	8007ad0 <HAL_TIM_ConfigClockSource+0x1f0>
 8007944:	4a6c      	ldr	r2, [pc, #432]	@ (8007af8 <HAL_TIM_ConfigClockSource+0x218>)
 8007946:	4293      	cmp	r3, r2
 8007948:	f000 80b9 	beq.w	8007abe <HAL_TIM_ConfigClockSource+0x1de>
 800794c:	4a6a      	ldr	r2, [pc, #424]	@ (8007af8 <HAL_TIM_ConfigClockSource+0x218>)
 800794e:	4293      	cmp	r3, r2
 8007950:	f200 80be 	bhi.w	8007ad0 <HAL_TIM_ConfigClockSource+0x1f0>
 8007954:	4a69      	ldr	r2, [pc, #420]	@ (8007afc <HAL_TIM_ConfigClockSource+0x21c>)
 8007956:	4293      	cmp	r3, r2
 8007958:	f000 80b1 	beq.w	8007abe <HAL_TIM_ConfigClockSource+0x1de>
 800795c:	4a67      	ldr	r2, [pc, #412]	@ (8007afc <HAL_TIM_ConfigClockSource+0x21c>)
 800795e:	4293      	cmp	r3, r2
 8007960:	f200 80b6 	bhi.w	8007ad0 <HAL_TIM_ConfigClockSource+0x1f0>
 8007964:	4a66      	ldr	r2, [pc, #408]	@ (8007b00 <HAL_TIM_ConfigClockSource+0x220>)
 8007966:	4293      	cmp	r3, r2
 8007968:	f000 80a9 	beq.w	8007abe <HAL_TIM_ConfigClockSource+0x1de>
 800796c:	4a64      	ldr	r2, [pc, #400]	@ (8007b00 <HAL_TIM_ConfigClockSource+0x220>)
 800796e:	4293      	cmp	r3, r2
 8007970:	f200 80ae 	bhi.w	8007ad0 <HAL_TIM_ConfigClockSource+0x1f0>
 8007974:	4a63      	ldr	r2, [pc, #396]	@ (8007b04 <HAL_TIM_ConfigClockSource+0x224>)
 8007976:	4293      	cmp	r3, r2
 8007978:	f000 80a1 	beq.w	8007abe <HAL_TIM_ConfigClockSource+0x1de>
 800797c:	4a61      	ldr	r2, [pc, #388]	@ (8007b04 <HAL_TIM_ConfigClockSource+0x224>)
 800797e:	4293      	cmp	r3, r2
 8007980:	f200 80a6 	bhi.w	8007ad0 <HAL_TIM_ConfigClockSource+0x1f0>
 8007984:	4a60      	ldr	r2, [pc, #384]	@ (8007b08 <HAL_TIM_ConfigClockSource+0x228>)
 8007986:	4293      	cmp	r3, r2
 8007988:	f000 8099 	beq.w	8007abe <HAL_TIM_ConfigClockSource+0x1de>
 800798c:	4a5e      	ldr	r2, [pc, #376]	@ (8007b08 <HAL_TIM_ConfigClockSource+0x228>)
 800798e:	4293      	cmp	r3, r2
 8007990:	f200 809e 	bhi.w	8007ad0 <HAL_TIM_ConfigClockSource+0x1f0>
 8007994:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8007998:	f000 8091 	beq.w	8007abe <HAL_TIM_ConfigClockSource+0x1de>
 800799c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80079a0:	f200 8096 	bhi.w	8007ad0 <HAL_TIM_ConfigClockSource+0x1f0>
 80079a4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80079a8:	f000 8089 	beq.w	8007abe <HAL_TIM_ConfigClockSource+0x1de>
 80079ac:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80079b0:	f200 808e 	bhi.w	8007ad0 <HAL_TIM_ConfigClockSource+0x1f0>
 80079b4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80079b8:	d03e      	beq.n	8007a38 <HAL_TIM_ConfigClockSource+0x158>
 80079ba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80079be:	f200 8087 	bhi.w	8007ad0 <HAL_TIM_ConfigClockSource+0x1f0>
 80079c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80079c6:	f000 8086 	beq.w	8007ad6 <HAL_TIM_ConfigClockSource+0x1f6>
 80079ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80079ce:	d87f      	bhi.n	8007ad0 <HAL_TIM_ConfigClockSource+0x1f0>
 80079d0:	2b70      	cmp	r3, #112	@ 0x70
 80079d2:	d01a      	beq.n	8007a0a <HAL_TIM_ConfigClockSource+0x12a>
 80079d4:	2b70      	cmp	r3, #112	@ 0x70
 80079d6:	d87b      	bhi.n	8007ad0 <HAL_TIM_ConfigClockSource+0x1f0>
 80079d8:	2b60      	cmp	r3, #96	@ 0x60
 80079da:	d050      	beq.n	8007a7e <HAL_TIM_ConfigClockSource+0x19e>
 80079dc:	2b60      	cmp	r3, #96	@ 0x60
 80079de:	d877      	bhi.n	8007ad0 <HAL_TIM_ConfigClockSource+0x1f0>
 80079e0:	2b50      	cmp	r3, #80	@ 0x50
 80079e2:	d03c      	beq.n	8007a5e <HAL_TIM_ConfigClockSource+0x17e>
 80079e4:	2b50      	cmp	r3, #80	@ 0x50
 80079e6:	d873      	bhi.n	8007ad0 <HAL_TIM_ConfigClockSource+0x1f0>
 80079e8:	2b40      	cmp	r3, #64	@ 0x40
 80079ea:	d058      	beq.n	8007a9e <HAL_TIM_ConfigClockSource+0x1be>
 80079ec:	2b40      	cmp	r3, #64	@ 0x40
 80079ee:	d86f      	bhi.n	8007ad0 <HAL_TIM_ConfigClockSource+0x1f0>
 80079f0:	2b30      	cmp	r3, #48	@ 0x30
 80079f2:	d064      	beq.n	8007abe <HAL_TIM_ConfigClockSource+0x1de>
 80079f4:	2b30      	cmp	r3, #48	@ 0x30
 80079f6:	d86b      	bhi.n	8007ad0 <HAL_TIM_ConfigClockSource+0x1f0>
 80079f8:	2b20      	cmp	r3, #32
 80079fa:	d060      	beq.n	8007abe <HAL_TIM_ConfigClockSource+0x1de>
 80079fc:	2b20      	cmp	r3, #32
 80079fe:	d867      	bhi.n	8007ad0 <HAL_TIM_ConfigClockSource+0x1f0>
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d05c      	beq.n	8007abe <HAL_TIM_ConfigClockSource+0x1de>
 8007a04:	2b10      	cmp	r3, #16
 8007a06:	d05a      	beq.n	8007abe <HAL_TIM_ConfigClockSource+0x1de>
 8007a08:	e062      	b.n	8007ad0 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007a0e:	683b      	ldr	r3, [r7, #0]
 8007a10:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007a12:	683b      	ldr	r3, [r7, #0]
 8007a14:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007a16:	683b      	ldr	r3, [r7, #0]
 8007a18:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007a1a:	f000 fe8b 	bl	8008734 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	689b      	ldr	r3, [r3, #8]
 8007a24:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007a26:	68bb      	ldr	r3, [r7, #8]
 8007a28:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007a2c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	68ba      	ldr	r2, [r7, #8]
 8007a34:	609a      	str	r2, [r3, #8]
      break;
 8007a36:	e04f      	b.n	8007ad8 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007a3c:	683b      	ldr	r3, [r7, #0]
 8007a3e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007a40:	683b      	ldr	r3, [r7, #0]
 8007a42:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007a44:	683b      	ldr	r3, [r7, #0]
 8007a46:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007a48:	f000 fe74 	bl	8008734 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	689a      	ldr	r2, [r3, #8]
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007a5a:	609a      	str	r2, [r3, #8]
      break;
 8007a5c:	e03c      	b.n	8007ad8 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007a62:	683b      	ldr	r3, [r7, #0]
 8007a64:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007a66:	683b      	ldr	r3, [r7, #0]
 8007a68:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007a6a:	461a      	mov	r2, r3
 8007a6c:	f000 fde6 	bl	800863c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	2150      	movs	r1, #80	@ 0x50
 8007a76:	4618      	mov	r0, r3
 8007a78:	f000 fe3f 	bl	80086fa <TIM_ITRx_SetConfig>
      break;
 8007a7c:	e02c      	b.n	8007ad8 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007a82:	683b      	ldr	r3, [r7, #0]
 8007a84:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007a86:	683b      	ldr	r3, [r7, #0]
 8007a88:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007a8a:	461a      	mov	r2, r3
 8007a8c:	f000 fe05 	bl	800869a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	2160      	movs	r1, #96	@ 0x60
 8007a96:	4618      	mov	r0, r3
 8007a98:	f000 fe2f 	bl	80086fa <TIM_ITRx_SetConfig>
      break;
 8007a9c:	e01c      	b.n	8007ad8 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007aa2:	683b      	ldr	r3, [r7, #0]
 8007aa4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007aa6:	683b      	ldr	r3, [r7, #0]
 8007aa8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007aaa:	461a      	mov	r2, r3
 8007aac:	f000 fdc6 	bl	800863c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	2140      	movs	r1, #64	@ 0x40
 8007ab6:	4618      	mov	r0, r3
 8007ab8:	f000 fe1f 	bl	80086fa <TIM_ITRx_SetConfig>
      break;
 8007abc:	e00c      	b.n	8007ad8 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681a      	ldr	r2, [r3, #0]
 8007ac2:	683b      	ldr	r3, [r7, #0]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	4619      	mov	r1, r3
 8007ac8:	4610      	mov	r0, r2
 8007aca:	f000 fe16 	bl	80086fa <TIM_ITRx_SetConfig>
      break;
 8007ace:	e003      	b.n	8007ad8 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8007ad0:	2301      	movs	r3, #1
 8007ad2:	73fb      	strb	r3, [r7, #15]
      break;
 8007ad4:	e000      	b.n	8007ad8 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8007ad6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	2201      	movs	r2, #1
 8007adc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	2200      	movs	r2, #0
 8007ae4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007ae8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007aea:	4618      	mov	r0, r3
 8007aec:	3710      	adds	r7, #16
 8007aee:	46bd      	mov	sp, r7
 8007af0:	bd80      	pop	{r7, pc}
 8007af2:	bf00      	nop
 8007af4:	00100070 	.word	0x00100070
 8007af8:	00100060 	.word	0x00100060
 8007afc:	00100050 	.word	0x00100050
 8007b00:	00100040 	.word	0x00100040
 8007b04:	00100030 	.word	0x00100030
 8007b08:	00100020 	.word	0x00100020

08007b0c <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007b0c:	b480      	push	{r7}
 8007b0e:	b083      	sub	sp, #12
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8007b14:	bf00      	nop
 8007b16:	370c      	adds	r7, #12
 8007b18:	46bd      	mov	sp, r7
 8007b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1e:	4770      	bx	lr

08007b20 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007b20:	b480      	push	{r7}
 8007b22:	b083      	sub	sp, #12
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007b28:	bf00      	nop
 8007b2a:	370c      	adds	r7, #12
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b32:	4770      	bx	lr

08007b34 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007b34:	b480      	push	{r7}
 8007b36:	b083      	sub	sp, #12
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007b3c:	bf00      	nop
 8007b3e:	370c      	adds	r7, #12
 8007b40:	46bd      	mov	sp, r7
 8007b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b46:	4770      	bx	lr

08007b48 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007b48:	b480      	push	{r7}
 8007b4a:	b083      	sub	sp, #12
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8007b50:	bf00      	nop
 8007b52:	370c      	adds	r7, #12
 8007b54:	46bd      	mov	sp, r7
 8007b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5a:	4770      	bx	lr

08007b5c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007b5c:	b480      	push	{r7}
 8007b5e:	b083      	sub	sp, #12
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007b64:	bf00      	nop
 8007b66:	370c      	adds	r7, #12
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6e:	4770      	bx	lr

08007b70 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007b70:	b480      	push	{r7}
 8007b72:	b083      	sub	sp, #12
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8007b78:	bf00      	nop
 8007b7a:	370c      	adds	r7, #12
 8007b7c:	46bd      	mov	sp, r7
 8007b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b82:	4770      	bx	lr

08007b84 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007b84:	b480      	push	{r7}
 8007b86:	b083      	sub	sp, #12
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007b8c:	bf00      	nop
 8007b8e:	370c      	adds	r7, #12
 8007b90:	46bd      	mov	sp, r7
 8007b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b96:	4770      	bx	lr

08007b98 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007b98:	b480      	push	{r7}
 8007b9a:	b083      	sub	sp, #12
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8007ba0:	bf00      	nop
 8007ba2:	370c      	adds	r7, #12
 8007ba4:	46bd      	mov	sp, r7
 8007ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007baa:	4770      	bx	lr

08007bac <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8007bac:	b480      	push	{r7}
 8007bae:	b083      	sub	sp, #12
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8007bb4:	bf00      	nop
 8007bb6:	370c      	adds	r7, #12
 8007bb8:	46bd      	mov	sp, r7
 8007bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bbe:	4770      	bx	lr

08007bc0 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 8007bc0:	b480      	push	{r7}
 8007bc2:	b087      	sub	sp, #28
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	60f8      	str	r0, [r7, #12]
 8007bc8:	460b      	mov	r3, r1
 8007bca:	607a      	str	r2, [r7, #4]
 8007bcc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8007bce:	2300      	movs	r3, #0
 8007bd0:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d101      	bne.n	8007bdc <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8007bd8:	2301      	movs	r3, #1
 8007bda:	e14a      	b.n	8007e72 <HAL_TIM_RegisterCallback+0x2b2>
  }

  if (htim->State == HAL_TIM_STATE_READY)
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007be2:	b2db      	uxtb	r3, r3
 8007be4:	2b01      	cmp	r3, #1
 8007be6:	f040 80dd 	bne.w	8007da4 <HAL_TIM_RegisterCallback+0x1e4>
  {
    switch (CallbackID)
 8007bea:	7afb      	ldrb	r3, [r7, #11]
 8007bec:	2b1f      	cmp	r3, #31
 8007bee:	f200 80d6 	bhi.w	8007d9e <HAL_TIM_RegisterCallback+0x1de>
 8007bf2:	a201      	add	r2, pc, #4	@ (adr r2, 8007bf8 <HAL_TIM_RegisterCallback+0x38>)
 8007bf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bf8:	08007c79 	.word	0x08007c79
 8007bfc:	08007c81 	.word	0x08007c81
 8007c00:	08007c89 	.word	0x08007c89
 8007c04:	08007c91 	.word	0x08007c91
 8007c08:	08007c99 	.word	0x08007c99
 8007c0c:	08007ca1 	.word	0x08007ca1
 8007c10:	08007ca9 	.word	0x08007ca9
 8007c14:	08007cb1 	.word	0x08007cb1
 8007c18:	08007cb9 	.word	0x08007cb9
 8007c1c:	08007cc1 	.word	0x08007cc1
 8007c20:	08007cc9 	.word	0x08007cc9
 8007c24:	08007cd1 	.word	0x08007cd1
 8007c28:	08007cd9 	.word	0x08007cd9
 8007c2c:	08007ce1 	.word	0x08007ce1
 8007c30:	08007ceb 	.word	0x08007ceb
 8007c34:	08007cf5 	.word	0x08007cf5
 8007c38:	08007cff 	.word	0x08007cff
 8007c3c:	08007d09 	.word	0x08007d09
 8007c40:	08007d13 	.word	0x08007d13
 8007c44:	08007d1d 	.word	0x08007d1d
 8007c48:	08007d27 	.word	0x08007d27
 8007c4c:	08007d31 	.word	0x08007d31
 8007c50:	08007d3b 	.word	0x08007d3b
 8007c54:	08007d45 	.word	0x08007d45
 8007c58:	08007d4f 	.word	0x08007d4f
 8007c5c:	08007d59 	.word	0x08007d59
 8007c60:	08007d63 	.word	0x08007d63
 8007c64:	08007d6d 	.word	0x08007d6d
 8007c68:	08007d77 	.word	0x08007d77
 8007c6c:	08007d81 	.word	0x08007d81
 8007c70:	08007d8b 	.word	0x08007d8b
 8007c74:	08007d95 	.word	0x08007d95
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	687a      	ldr	r2, [r7, #4]
 8007c7c:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 8007c7e:	e0f7      	b.n	8007e70 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	687a      	ldr	r2, [r7, #4]
 8007c84:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 8007c86:	e0f3      	b.n	8007e70 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	687a      	ldr	r2, [r7, #4]
 8007c8c:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8007c8e:	e0ef      	b.n	8007e70 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	687a      	ldr	r2, [r7, #4]
 8007c94:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 8007c96:	e0eb      	b.n	8007e70 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	687a      	ldr	r2, [r7, #4]
 8007c9c:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 8007c9e:	e0e7      	b.n	8007e70 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	687a      	ldr	r2, [r7, #4]
 8007ca4:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 8007ca6:	e0e3      	b.n	8007e70 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	687a      	ldr	r2, [r7, #4]
 8007cac:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 8007cae:	e0df      	b.n	8007e70 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	687a      	ldr	r2, [r7, #4]
 8007cb4:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 8007cb6:	e0db      	b.n	8007e70 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	687a      	ldr	r2, [r7, #4]
 8007cbc:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 8007cbe:	e0d7      	b.n	8007e70 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	687a      	ldr	r2, [r7, #4]
 8007cc4:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 8007cc6:	e0d3      	b.n	8007e70 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	687a      	ldr	r2, [r7, #4]
 8007ccc:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 8007cce:	e0cf      	b.n	8007e70 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	687a      	ldr	r2, [r7, #4]
 8007cd4:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 8007cd6:	e0cb      	b.n	8007e70 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	687a      	ldr	r2, [r7, #4]
 8007cdc:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 8007cde:	e0c7      	b.n	8007e70 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	687a      	ldr	r2, [r7, #4]
 8007ce4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 8007ce8:	e0c2      	b.n	8007e70 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	687a      	ldr	r2, [r7, #4]
 8007cee:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        break;
 8007cf2:	e0bd      	b.n	8007e70 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	687a      	ldr	r2, [r7, #4]
 8007cf8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        break;
 8007cfc:	e0b8      	b.n	8007e70 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	687a      	ldr	r2, [r7, #4]
 8007d02:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        break;
 8007d06:	e0b3      	b.n	8007e70 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	687a      	ldr	r2, [r7, #4]
 8007d0c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        break;
 8007d10:	e0ae      	b.n	8007e70 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	687a      	ldr	r2, [r7, #4]
 8007d16:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 8007d1a:	e0a9      	b.n	8007e70 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	687a      	ldr	r2, [r7, #4]
 8007d20:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 8007d24:	e0a4      	b.n	8007e70 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	687a      	ldr	r2, [r7, #4]
 8007d2a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 8007d2e:	e09f      	b.n	8007e70 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	687a      	ldr	r2, [r7, #4]
 8007d34:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 8007d38:	e09a      	b.n	8007e70 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	687a      	ldr	r2, [r7, #4]
 8007d3e:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 8007d42:	e095      	b.n	8007e70 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	687a      	ldr	r2, [r7, #4]
 8007d48:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 8007d4c:	e090      	b.n	8007e70 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	687a      	ldr	r2, [r7, #4]
 8007d52:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 8007d56:	e08b      	b.n	8007e70 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	687a      	ldr	r2, [r7, #4]
 8007d5c:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 8007d60:	e086      	b.n	8007e70 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	687a      	ldr	r2, [r7, #4]
 8007d66:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 8007d6a:	e081      	b.n	8007e70 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK2_CB_ID :
        htim->Break2Callback                       = pCallback;
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	687a      	ldr	r2, [r7, #4]
 8007d70:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 8007d74:	e07c      	b.n	8007e70 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_INDEX_CB_ID :
        htim->EncoderIndexCallback                 = pCallback;
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	687a      	ldr	r2, [r7, #4]
 8007d7a:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 8007d7e:	e077      	b.n	8007e70 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_DIRECTION_CHANGE_CB_ID :
        htim->DirectionChangeCallback              = pCallback;
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	687a      	ldr	r2, [r7, #4]
 8007d84:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
        break;
 8007d88:	e072      	b.n	8007e70 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_INDEX_ERROR_CB_ID :
        htim->IndexErrorCallback                   = pCallback;
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	687a      	ldr	r2, [r7, #4]
 8007d8e:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 8007d92:	e06d      	b.n	8007e70 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRANSITION_ERROR_CB_ID :
        htim->TransitionErrorCallback              = pCallback;
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	687a      	ldr	r2, [r7, #4]
 8007d98:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 8007d9c:	e068      	b.n	8007e70 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8007d9e:	2301      	movs	r3, #1
 8007da0:	75fb      	strb	r3, [r7, #23]
        break;
 8007da2:	e065      	b.n	8007e70 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007daa:	b2db      	uxtb	r3, r3
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d15d      	bne.n	8007e6c <HAL_TIM_RegisterCallback+0x2ac>
  {
    switch (CallbackID)
 8007db0:	7afb      	ldrb	r3, [r7, #11]
 8007db2:	2b0d      	cmp	r3, #13
 8007db4:	d857      	bhi.n	8007e66 <HAL_TIM_RegisterCallback+0x2a6>
 8007db6:	a201      	add	r2, pc, #4	@ (adr r2, 8007dbc <HAL_TIM_RegisterCallback+0x1fc>)
 8007db8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dbc:	08007df5 	.word	0x08007df5
 8007dc0:	08007dfd 	.word	0x08007dfd
 8007dc4:	08007e05 	.word	0x08007e05
 8007dc8:	08007e0d 	.word	0x08007e0d
 8007dcc:	08007e15 	.word	0x08007e15
 8007dd0:	08007e1d 	.word	0x08007e1d
 8007dd4:	08007e25 	.word	0x08007e25
 8007dd8:	08007e2d 	.word	0x08007e2d
 8007ddc:	08007e35 	.word	0x08007e35
 8007de0:	08007e3d 	.word	0x08007e3d
 8007de4:	08007e45 	.word	0x08007e45
 8007de8:	08007e4d 	.word	0x08007e4d
 8007dec:	08007e55 	.word	0x08007e55
 8007df0:	08007e5d 	.word	0x08007e5d
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	687a      	ldr	r2, [r7, #4]
 8007df8:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 8007dfa:	e039      	b.n	8007e70 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	687a      	ldr	r2, [r7, #4]
 8007e00:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 8007e02:	e035      	b.n	8007e70 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	687a      	ldr	r2, [r7, #4]
 8007e08:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8007e0a:	e031      	b.n	8007e70 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	687a      	ldr	r2, [r7, #4]
 8007e10:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 8007e12:	e02d      	b.n	8007e70 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	687a      	ldr	r2, [r7, #4]
 8007e18:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 8007e1a:	e029      	b.n	8007e70 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	687a      	ldr	r2, [r7, #4]
 8007e20:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 8007e22:	e025      	b.n	8007e70 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	687a      	ldr	r2, [r7, #4]
 8007e28:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 8007e2a:	e021      	b.n	8007e70 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	687a      	ldr	r2, [r7, #4]
 8007e30:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 8007e32:	e01d      	b.n	8007e70 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	687a      	ldr	r2, [r7, #4]
 8007e38:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 8007e3a:	e019      	b.n	8007e70 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	687a      	ldr	r2, [r7, #4]
 8007e40:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 8007e42:	e015      	b.n	8007e70 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	687a      	ldr	r2, [r7, #4]
 8007e48:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 8007e4a:	e011      	b.n	8007e70 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	687a      	ldr	r2, [r7, #4]
 8007e50:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 8007e52:	e00d      	b.n	8007e70 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	687a      	ldr	r2, [r7, #4]
 8007e58:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 8007e5a:	e009      	b.n	8007e70 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	687a      	ldr	r2, [r7, #4]
 8007e60:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 8007e64:	e004      	b.n	8007e70 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8007e66:	2301      	movs	r3, #1
 8007e68:	75fb      	strb	r3, [r7, #23]
        break;
 8007e6a:	e001      	b.n	8007e70 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 8007e6c:	2301      	movs	r3, #1
 8007e6e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8007e70:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e72:	4618      	mov	r0, r3
 8007e74:	371c      	adds	r7, #28
 8007e76:	46bd      	mov	sp, r7
 8007e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7c:	4770      	bx	lr
 8007e7e:	bf00      	nop

08007e80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007e80:	b480      	push	{r7}
 8007e82:	b085      	sub	sp, #20
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	6078      	str	r0, [r7, #4]
 8007e88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	4a4c      	ldr	r2, [pc, #304]	@ (8007fc4 <TIM_Base_SetConfig+0x144>)
 8007e94:	4293      	cmp	r3, r2
 8007e96:	d017      	beq.n	8007ec8 <TIM_Base_SetConfig+0x48>
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007e9e:	d013      	beq.n	8007ec8 <TIM_Base_SetConfig+0x48>
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	4a49      	ldr	r2, [pc, #292]	@ (8007fc8 <TIM_Base_SetConfig+0x148>)
 8007ea4:	4293      	cmp	r3, r2
 8007ea6:	d00f      	beq.n	8007ec8 <TIM_Base_SetConfig+0x48>
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	4a48      	ldr	r2, [pc, #288]	@ (8007fcc <TIM_Base_SetConfig+0x14c>)
 8007eac:	4293      	cmp	r3, r2
 8007eae:	d00b      	beq.n	8007ec8 <TIM_Base_SetConfig+0x48>
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	4a47      	ldr	r2, [pc, #284]	@ (8007fd0 <TIM_Base_SetConfig+0x150>)
 8007eb4:	4293      	cmp	r3, r2
 8007eb6:	d007      	beq.n	8007ec8 <TIM_Base_SetConfig+0x48>
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	4a46      	ldr	r2, [pc, #280]	@ (8007fd4 <TIM_Base_SetConfig+0x154>)
 8007ebc:	4293      	cmp	r3, r2
 8007ebe:	d003      	beq.n	8007ec8 <TIM_Base_SetConfig+0x48>
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	4a45      	ldr	r2, [pc, #276]	@ (8007fd8 <TIM_Base_SetConfig+0x158>)
 8007ec4:	4293      	cmp	r3, r2
 8007ec6:	d108      	bne.n	8007eda <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007ece:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007ed0:	683b      	ldr	r3, [r7, #0]
 8007ed2:	685b      	ldr	r3, [r3, #4]
 8007ed4:	68fa      	ldr	r2, [r7, #12]
 8007ed6:	4313      	orrs	r3, r2
 8007ed8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	4a39      	ldr	r2, [pc, #228]	@ (8007fc4 <TIM_Base_SetConfig+0x144>)
 8007ede:	4293      	cmp	r3, r2
 8007ee0:	d023      	beq.n	8007f2a <TIM_Base_SetConfig+0xaa>
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007ee8:	d01f      	beq.n	8007f2a <TIM_Base_SetConfig+0xaa>
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	4a36      	ldr	r2, [pc, #216]	@ (8007fc8 <TIM_Base_SetConfig+0x148>)
 8007eee:	4293      	cmp	r3, r2
 8007ef0:	d01b      	beq.n	8007f2a <TIM_Base_SetConfig+0xaa>
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	4a35      	ldr	r2, [pc, #212]	@ (8007fcc <TIM_Base_SetConfig+0x14c>)
 8007ef6:	4293      	cmp	r3, r2
 8007ef8:	d017      	beq.n	8007f2a <TIM_Base_SetConfig+0xaa>
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	4a34      	ldr	r2, [pc, #208]	@ (8007fd0 <TIM_Base_SetConfig+0x150>)
 8007efe:	4293      	cmp	r3, r2
 8007f00:	d013      	beq.n	8007f2a <TIM_Base_SetConfig+0xaa>
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	4a33      	ldr	r2, [pc, #204]	@ (8007fd4 <TIM_Base_SetConfig+0x154>)
 8007f06:	4293      	cmp	r3, r2
 8007f08:	d00f      	beq.n	8007f2a <TIM_Base_SetConfig+0xaa>
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	4a33      	ldr	r2, [pc, #204]	@ (8007fdc <TIM_Base_SetConfig+0x15c>)
 8007f0e:	4293      	cmp	r3, r2
 8007f10:	d00b      	beq.n	8007f2a <TIM_Base_SetConfig+0xaa>
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	4a32      	ldr	r2, [pc, #200]	@ (8007fe0 <TIM_Base_SetConfig+0x160>)
 8007f16:	4293      	cmp	r3, r2
 8007f18:	d007      	beq.n	8007f2a <TIM_Base_SetConfig+0xaa>
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	4a31      	ldr	r2, [pc, #196]	@ (8007fe4 <TIM_Base_SetConfig+0x164>)
 8007f1e:	4293      	cmp	r3, r2
 8007f20:	d003      	beq.n	8007f2a <TIM_Base_SetConfig+0xaa>
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	4a2c      	ldr	r2, [pc, #176]	@ (8007fd8 <TIM_Base_SetConfig+0x158>)
 8007f26:	4293      	cmp	r3, r2
 8007f28:	d108      	bne.n	8007f3c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007f30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007f32:	683b      	ldr	r3, [r7, #0]
 8007f34:	68db      	ldr	r3, [r3, #12]
 8007f36:	68fa      	ldr	r2, [r7, #12]
 8007f38:	4313      	orrs	r3, r2
 8007f3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007f42:	683b      	ldr	r3, [r7, #0]
 8007f44:	695b      	ldr	r3, [r3, #20]
 8007f46:	4313      	orrs	r3, r2
 8007f48:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	68fa      	ldr	r2, [r7, #12]
 8007f4e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007f50:	683b      	ldr	r3, [r7, #0]
 8007f52:	689a      	ldr	r2, [r3, #8]
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007f58:	683b      	ldr	r3, [r7, #0]
 8007f5a:	681a      	ldr	r2, [r3, #0]
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	4a18      	ldr	r2, [pc, #96]	@ (8007fc4 <TIM_Base_SetConfig+0x144>)
 8007f64:	4293      	cmp	r3, r2
 8007f66:	d013      	beq.n	8007f90 <TIM_Base_SetConfig+0x110>
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	4a1a      	ldr	r2, [pc, #104]	@ (8007fd4 <TIM_Base_SetConfig+0x154>)
 8007f6c:	4293      	cmp	r3, r2
 8007f6e:	d00f      	beq.n	8007f90 <TIM_Base_SetConfig+0x110>
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	4a1a      	ldr	r2, [pc, #104]	@ (8007fdc <TIM_Base_SetConfig+0x15c>)
 8007f74:	4293      	cmp	r3, r2
 8007f76:	d00b      	beq.n	8007f90 <TIM_Base_SetConfig+0x110>
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	4a19      	ldr	r2, [pc, #100]	@ (8007fe0 <TIM_Base_SetConfig+0x160>)
 8007f7c:	4293      	cmp	r3, r2
 8007f7e:	d007      	beq.n	8007f90 <TIM_Base_SetConfig+0x110>
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	4a18      	ldr	r2, [pc, #96]	@ (8007fe4 <TIM_Base_SetConfig+0x164>)
 8007f84:	4293      	cmp	r3, r2
 8007f86:	d003      	beq.n	8007f90 <TIM_Base_SetConfig+0x110>
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	4a13      	ldr	r2, [pc, #76]	@ (8007fd8 <TIM_Base_SetConfig+0x158>)
 8007f8c:	4293      	cmp	r3, r2
 8007f8e:	d103      	bne.n	8007f98 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007f90:	683b      	ldr	r3, [r7, #0]
 8007f92:	691a      	ldr	r2, [r3, #16]
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	2201      	movs	r2, #1
 8007f9c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	691b      	ldr	r3, [r3, #16]
 8007fa2:	f003 0301 	and.w	r3, r3, #1
 8007fa6:	2b01      	cmp	r3, #1
 8007fa8:	d105      	bne.n	8007fb6 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	691b      	ldr	r3, [r3, #16]
 8007fae:	f023 0201 	bic.w	r2, r3, #1
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	611a      	str	r2, [r3, #16]
  }
}
 8007fb6:	bf00      	nop
 8007fb8:	3714      	adds	r7, #20
 8007fba:	46bd      	mov	sp, r7
 8007fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc0:	4770      	bx	lr
 8007fc2:	bf00      	nop
 8007fc4:	40012c00 	.word	0x40012c00
 8007fc8:	40000400 	.word	0x40000400
 8007fcc:	40000800 	.word	0x40000800
 8007fd0:	40000c00 	.word	0x40000c00
 8007fd4:	40013400 	.word	0x40013400
 8007fd8:	40015000 	.word	0x40015000
 8007fdc:	40014000 	.word	0x40014000
 8007fe0:	40014400 	.word	0x40014400
 8007fe4:	40014800 	.word	0x40014800

08007fe8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007fe8:	b480      	push	{r7}
 8007fea:	b087      	sub	sp, #28
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	6078      	str	r0, [r7, #4]
 8007ff0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	6a1b      	ldr	r3, [r3, #32]
 8007ff6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	6a1b      	ldr	r3, [r3, #32]
 8007ffc:	f023 0201 	bic.w	r2, r3, #1
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	685b      	ldr	r3, [r3, #4]
 8008008:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	699b      	ldr	r3, [r3, #24]
 800800e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008016:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800801a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	f023 0303 	bic.w	r3, r3, #3
 8008022:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008024:	683b      	ldr	r3, [r7, #0]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	68fa      	ldr	r2, [r7, #12]
 800802a:	4313      	orrs	r3, r2
 800802c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800802e:	697b      	ldr	r3, [r7, #20]
 8008030:	f023 0302 	bic.w	r3, r3, #2
 8008034:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008036:	683b      	ldr	r3, [r7, #0]
 8008038:	689b      	ldr	r3, [r3, #8]
 800803a:	697a      	ldr	r2, [r7, #20]
 800803c:	4313      	orrs	r3, r2
 800803e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	4a30      	ldr	r2, [pc, #192]	@ (8008104 <TIM_OC1_SetConfig+0x11c>)
 8008044:	4293      	cmp	r3, r2
 8008046:	d013      	beq.n	8008070 <TIM_OC1_SetConfig+0x88>
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	4a2f      	ldr	r2, [pc, #188]	@ (8008108 <TIM_OC1_SetConfig+0x120>)
 800804c:	4293      	cmp	r3, r2
 800804e:	d00f      	beq.n	8008070 <TIM_OC1_SetConfig+0x88>
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	4a2e      	ldr	r2, [pc, #184]	@ (800810c <TIM_OC1_SetConfig+0x124>)
 8008054:	4293      	cmp	r3, r2
 8008056:	d00b      	beq.n	8008070 <TIM_OC1_SetConfig+0x88>
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	4a2d      	ldr	r2, [pc, #180]	@ (8008110 <TIM_OC1_SetConfig+0x128>)
 800805c:	4293      	cmp	r3, r2
 800805e:	d007      	beq.n	8008070 <TIM_OC1_SetConfig+0x88>
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	4a2c      	ldr	r2, [pc, #176]	@ (8008114 <TIM_OC1_SetConfig+0x12c>)
 8008064:	4293      	cmp	r3, r2
 8008066:	d003      	beq.n	8008070 <TIM_OC1_SetConfig+0x88>
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	4a2b      	ldr	r2, [pc, #172]	@ (8008118 <TIM_OC1_SetConfig+0x130>)
 800806c:	4293      	cmp	r3, r2
 800806e:	d10c      	bne.n	800808a <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008070:	697b      	ldr	r3, [r7, #20]
 8008072:	f023 0308 	bic.w	r3, r3, #8
 8008076:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008078:	683b      	ldr	r3, [r7, #0]
 800807a:	68db      	ldr	r3, [r3, #12]
 800807c:	697a      	ldr	r2, [r7, #20]
 800807e:	4313      	orrs	r3, r2
 8008080:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008082:	697b      	ldr	r3, [r7, #20]
 8008084:	f023 0304 	bic.w	r3, r3, #4
 8008088:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	4a1d      	ldr	r2, [pc, #116]	@ (8008104 <TIM_OC1_SetConfig+0x11c>)
 800808e:	4293      	cmp	r3, r2
 8008090:	d013      	beq.n	80080ba <TIM_OC1_SetConfig+0xd2>
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	4a1c      	ldr	r2, [pc, #112]	@ (8008108 <TIM_OC1_SetConfig+0x120>)
 8008096:	4293      	cmp	r3, r2
 8008098:	d00f      	beq.n	80080ba <TIM_OC1_SetConfig+0xd2>
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	4a1b      	ldr	r2, [pc, #108]	@ (800810c <TIM_OC1_SetConfig+0x124>)
 800809e:	4293      	cmp	r3, r2
 80080a0:	d00b      	beq.n	80080ba <TIM_OC1_SetConfig+0xd2>
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	4a1a      	ldr	r2, [pc, #104]	@ (8008110 <TIM_OC1_SetConfig+0x128>)
 80080a6:	4293      	cmp	r3, r2
 80080a8:	d007      	beq.n	80080ba <TIM_OC1_SetConfig+0xd2>
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	4a19      	ldr	r2, [pc, #100]	@ (8008114 <TIM_OC1_SetConfig+0x12c>)
 80080ae:	4293      	cmp	r3, r2
 80080b0:	d003      	beq.n	80080ba <TIM_OC1_SetConfig+0xd2>
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	4a18      	ldr	r2, [pc, #96]	@ (8008118 <TIM_OC1_SetConfig+0x130>)
 80080b6:	4293      	cmp	r3, r2
 80080b8:	d111      	bne.n	80080de <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80080ba:	693b      	ldr	r3, [r7, #16]
 80080bc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80080c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80080c2:	693b      	ldr	r3, [r7, #16]
 80080c4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80080c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80080ca:	683b      	ldr	r3, [r7, #0]
 80080cc:	695b      	ldr	r3, [r3, #20]
 80080ce:	693a      	ldr	r2, [r7, #16]
 80080d0:	4313      	orrs	r3, r2
 80080d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80080d4:	683b      	ldr	r3, [r7, #0]
 80080d6:	699b      	ldr	r3, [r3, #24]
 80080d8:	693a      	ldr	r2, [r7, #16]
 80080da:	4313      	orrs	r3, r2
 80080dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	693a      	ldr	r2, [r7, #16]
 80080e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	68fa      	ldr	r2, [r7, #12]
 80080e8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80080ea:	683b      	ldr	r3, [r7, #0]
 80080ec:	685a      	ldr	r2, [r3, #4]
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	697a      	ldr	r2, [r7, #20]
 80080f6:	621a      	str	r2, [r3, #32]
}
 80080f8:	bf00      	nop
 80080fa:	371c      	adds	r7, #28
 80080fc:	46bd      	mov	sp, r7
 80080fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008102:	4770      	bx	lr
 8008104:	40012c00 	.word	0x40012c00
 8008108:	40013400 	.word	0x40013400
 800810c:	40014000 	.word	0x40014000
 8008110:	40014400 	.word	0x40014400
 8008114:	40014800 	.word	0x40014800
 8008118:	40015000 	.word	0x40015000

0800811c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800811c:	b480      	push	{r7}
 800811e:	b087      	sub	sp, #28
 8008120:	af00      	add	r7, sp, #0
 8008122:	6078      	str	r0, [r7, #4]
 8008124:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	6a1b      	ldr	r3, [r3, #32]
 800812a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	6a1b      	ldr	r3, [r3, #32]
 8008130:	f023 0210 	bic.w	r2, r3, #16
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	685b      	ldr	r3, [r3, #4]
 800813c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	699b      	ldr	r3, [r3, #24]
 8008142:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800814a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800814e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008156:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008158:	683b      	ldr	r3, [r7, #0]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	021b      	lsls	r3, r3, #8
 800815e:	68fa      	ldr	r2, [r7, #12]
 8008160:	4313      	orrs	r3, r2
 8008162:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008164:	697b      	ldr	r3, [r7, #20]
 8008166:	f023 0320 	bic.w	r3, r3, #32
 800816a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800816c:	683b      	ldr	r3, [r7, #0]
 800816e:	689b      	ldr	r3, [r3, #8]
 8008170:	011b      	lsls	r3, r3, #4
 8008172:	697a      	ldr	r2, [r7, #20]
 8008174:	4313      	orrs	r3, r2
 8008176:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	4a2c      	ldr	r2, [pc, #176]	@ (800822c <TIM_OC2_SetConfig+0x110>)
 800817c:	4293      	cmp	r3, r2
 800817e:	d007      	beq.n	8008190 <TIM_OC2_SetConfig+0x74>
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	4a2b      	ldr	r2, [pc, #172]	@ (8008230 <TIM_OC2_SetConfig+0x114>)
 8008184:	4293      	cmp	r3, r2
 8008186:	d003      	beq.n	8008190 <TIM_OC2_SetConfig+0x74>
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	4a2a      	ldr	r2, [pc, #168]	@ (8008234 <TIM_OC2_SetConfig+0x118>)
 800818c:	4293      	cmp	r3, r2
 800818e:	d10d      	bne.n	80081ac <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008190:	697b      	ldr	r3, [r7, #20]
 8008192:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008196:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008198:	683b      	ldr	r3, [r7, #0]
 800819a:	68db      	ldr	r3, [r3, #12]
 800819c:	011b      	lsls	r3, r3, #4
 800819e:	697a      	ldr	r2, [r7, #20]
 80081a0:	4313      	orrs	r3, r2
 80081a2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80081a4:	697b      	ldr	r3, [r7, #20]
 80081a6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80081aa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	4a1f      	ldr	r2, [pc, #124]	@ (800822c <TIM_OC2_SetConfig+0x110>)
 80081b0:	4293      	cmp	r3, r2
 80081b2:	d013      	beq.n	80081dc <TIM_OC2_SetConfig+0xc0>
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	4a1e      	ldr	r2, [pc, #120]	@ (8008230 <TIM_OC2_SetConfig+0x114>)
 80081b8:	4293      	cmp	r3, r2
 80081ba:	d00f      	beq.n	80081dc <TIM_OC2_SetConfig+0xc0>
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	4a1e      	ldr	r2, [pc, #120]	@ (8008238 <TIM_OC2_SetConfig+0x11c>)
 80081c0:	4293      	cmp	r3, r2
 80081c2:	d00b      	beq.n	80081dc <TIM_OC2_SetConfig+0xc0>
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	4a1d      	ldr	r2, [pc, #116]	@ (800823c <TIM_OC2_SetConfig+0x120>)
 80081c8:	4293      	cmp	r3, r2
 80081ca:	d007      	beq.n	80081dc <TIM_OC2_SetConfig+0xc0>
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	4a1c      	ldr	r2, [pc, #112]	@ (8008240 <TIM_OC2_SetConfig+0x124>)
 80081d0:	4293      	cmp	r3, r2
 80081d2:	d003      	beq.n	80081dc <TIM_OC2_SetConfig+0xc0>
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	4a17      	ldr	r2, [pc, #92]	@ (8008234 <TIM_OC2_SetConfig+0x118>)
 80081d8:	4293      	cmp	r3, r2
 80081da:	d113      	bne.n	8008204 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80081dc:	693b      	ldr	r3, [r7, #16]
 80081de:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80081e2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80081e4:	693b      	ldr	r3, [r7, #16]
 80081e6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80081ea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80081ec:	683b      	ldr	r3, [r7, #0]
 80081ee:	695b      	ldr	r3, [r3, #20]
 80081f0:	009b      	lsls	r3, r3, #2
 80081f2:	693a      	ldr	r2, [r7, #16]
 80081f4:	4313      	orrs	r3, r2
 80081f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80081f8:	683b      	ldr	r3, [r7, #0]
 80081fa:	699b      	ldr	r3, [r3, #24]
 80081fc:	009b      	lsls	r3, r3, #2
 80081fe:	693a      	ldr	r2, [r7, #16]
 8008200:	4313      	orrs	r3, r2
 8008202:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	693a      	ldr	r2, [r7, #16]
 8008208:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	68fa      	ldr	r2, [r7, #12]
 800820e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008210:	683b      	ldr	r3, [r7, #0]
 8008212:	685a      	ldr	r2, [r3, #4]
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	697a      	ldr	r2, [r7, #20]
 800821c:	621a      	str	r2, [r3, #32]
}
 800821e:	bf00      	nop
 8008220:	371c      	adds	r7, #28
 8008222:	46bd      	mov	sp, r7
 8008224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008228:	4770      	bx	lr
 800822a:	bf00      	nop
 800822c:	40012c00 	.word	0x40012c00
 8008230:	40013400 	.word	0x40013400
 8008234:	40015000 	.word	0x40015000
 8008238:	40014000 	.word	0x40014000
 800823c:	40014400 	.word	0x40014400
 8008240:	40014800 	.word	0x40014800

08008244 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008244:	b480      	push	{r7}
 8008246:	b087      	sub	sp, #28
 8008248:	af00      	add	r7, sp, #0
 800824a:	6078      	str	r0, [r7, #4]
 800824c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	6a1b      	ldr	r3, [r3, #32]
 8008252:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	6a1b      	ldr	r3, [r3, #32]
 8008258:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	685b      	ldr	r3, [r3, #4]
 8008264:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	69db      	ldr	r3, [r3, #28]
 800826a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008272:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008276:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	f023 0303 	bic.w	r3, r3, #3
 800827e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008280:	683b      	ldr	r3, [r7, #0]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	68fa      	ldr	r2, [r7, #12]
 8008286:	4313      	orrs	r3, r2
 8008288:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800828a:	697b      	ldr	r3, [r7, #20]
 800828c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008290:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008292:	683b      	ldr	r3, [r7, #0]
 8008294:	689b      	ldr	r3, [r3, #8]
 8008296:	021b      	lsls	r3, r3, #8
 8008298:	697a      	ldr	r2, [r7, #20]
 800829a:	4313      	orrs	r3, r2
 800829c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	4a2b      	ldr	r2, [pc, #172]	@ (8008350 <TIM_OC3_SetConfig+0x10c>)
 80082a2:	4293      	cmp	r3, r2
 80082a4:	d007      	beq.n	80082b6 <TIM_OC3_SetConfig+0x72>
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	4a2a      	ldr	r2, [pc, #168]	@ (8008354 <TIM_OC3_SetConfig+0x110>)
 80082aa:	4293      	cmp	r3, r2
 80082ac:	d003      	beq.n	80082b6 <TIM_OC3_SetConfig+0x72>
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	4a29      	ldr	r2, [pc, #164]	@ (8008358 <TIM_OC3_SetConfig+0x114>)
 80082b2:	4293      	cmp	r3, r2
 80082b4:	d10d      	bne.n	80082d2 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80082b6:	697b      	ldr	r3, [r7, #20]
 80082b8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80082bc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80082be:	683b      	ldr	r3, [r7, #0]
 80082c0:	68db      	ldr	r3, [r3, #12]
 80082c2:	021b      	lsls	r3, r3, #8
 80082c4:	697a      	ldr	r2, [r7, #20]
 80082c6:	4313      	orrs	r3, r2
 80082c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80082ca:	697b      	ldr	r3, [r7, #20]
 80082cc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80082d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	4a1e      	ldr	r2, [pc, #120]	@ (8008350 <TIM_OC3_SetConfig+0x10c>)
 80082d6:	4293      	cmp	r3, r2
 80082d8:	d013      	beq.n	8008302 <TIM_OC3_SetConfig+0xbe>
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	4a1d      	ldr	r2, [pc, #116]	@ (8008354 <TIM_OC3_SetConfig+0x110>)
 80082de:	4293      	cmp	r3, r2
 80082e0:	d00f      	beq.n	8008302 <TIM_OC3_SetConfig+0xbe>
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	4a1d      	ldr	r2, [pc, #116]	@ (800835c <TIM_OC3_SetConfig+0x118>)
 80082e6:	4293      	cmp	r3, r2
 80082e8:	d00b      	beq.n	8008302 <TIM_OC3_SetConfig+0xbe>
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	4a1c      	ldr	r2, [pc, #112]	@ (8008360 <TIM_OC3_SetConfig+0x11c>)
 80082ee:	4293      	cmp	r3, r2
 80082f0:	d007      	beq.n	8008302 <TIM_OC3_SetConfig+0xbe>
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	4a1b      	ldr	r2, [pc, #108]	@ (8008364 <TIM_OC3_SetConfig+0x120>)
 80082f6:	4293      	cmp	r3, r2
 80082f8:	d003      	beq.n	8008302 <TIM_OC3_SetConfig+0xbe>
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	4a16      	ldr	r2, [pc, #88]	@ (8008358 <TIM_OC3_SetConfig+0x114>)
 80082fe:	4293      	cmp	r3, r2
 8008300:	d113      	bne.n	800832a <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008302:	693b      	ldr	r3, [r7, #16]
 8008304:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008308:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800830a:	693b      	ldr	r3, [r7, #16]
 800830c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008310:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008312:	683b      	ldr	r3, [r7, #0]
 8008314:	695b      	ldr	r3, [r3, #20]
 8008316:	011b      	lsls	r3, r3, #4
 8008318:	693a      	ldr	r2, [r7, #16]
 800831a:	4313      	orrs	r3, r2
 800831c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800831e:	683b      	ldr	r3, [r7, #0]
 8008320:	699b      	ldr	r3, [r3, #24]
 8008322:	011b      	lsls	r3, r3, #4
 8008324:	693a      	ldr	r2, [r7, #16]
 8008326:	4313      	orrs	r3, r2
 8008328:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	693a      	ldr	r2, [r7, #16]
 800832e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	68fa      	ldr	r2, [r7, #12]
 8008334:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008336:	683b      	ldr	r3, [r7, #0]
 8008338:	685a      	ldr	r2, [r3, #4]
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	697a      	ldr	r2, [r7, #20]
 8008342:	621a      	str	r2, [r3, #32]
}
 8008344:	bf00      	nop
 8008346:	371c      	adds	r7, #28
 8008348:	46bd      	mov	sp, r7
 800834a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834e:	4770      	bx	lr
 8008350:	40012c00 	.word	0x40012c00
 8008354:	40013400 	.word	0x40013400
 8008358:	40015000 	.word	0x40015000
 800835c:	40014000 	.word	0x40014000
 8008360:	40014400 	.word	0x40014400
 8008364:	40014800 	.word	0x40014800

08008368 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008368:	b480      	push	{r7}
 800836a:	b087      	sub	sp, #28
 800836c:	af00      	add	r7, sp, #0
 800836e:	6078      	str	r0, [r7, #4]
 8008370:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	6a1b      	ldr	r3, [r3, #32]
 8008376:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	6a1b      	ldr	r3, [r3, #32]
 800837c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	685b      	ldr	r3, [r3, #4]
 8008388:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	69db      	ldr	r3, [r3, #28]
 800838e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008396:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800839a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80083a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80083a4:	683b      	ldr	r3, [r7, #0]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	021b      	lsls	r3, r3, #8
 80083aa:	68fa      	ldr	r2, [r7, #12]
 80083ac:	4313      	orrs	r3, r2
 80083ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80083b0:	697b      	ldr	r3, [r7, #20]
 80083b2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80083b6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80083b8:	683b      	ldr	r3, [r7, #0]
 80083ba:	689b      	ldr	r3, [r3, #8]
 80083bc:	031b      	lsls	r3, r3, #12
 80083be:	697a      	ldr	r2, [r7, #20]
 80083c0:	4313      	orrs	r3, r2
 80083c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	4a2c      	ldr	r2, [pc, #176]	@ (8008478 <TIM_OC4_SetConfig+0x110>)
 80083c8:	4293      	cmp	r3, r2
 80083ca:	d007      	beq.n	80083dc <TIM_OC4_SetConfig+0x74>
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	4a2b      	ldr	r2, [pc, #172]	@ (800847c <TIM_OC4_SetConfig+0x114>)
 80083d0:	4293      	cmp	r3, r2
 80083d2:	d003      	beq.n	80083dc <TIM_OC4_SetConfig+0x74>
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	4a2a      	ldr	r2, [pc, #168]	@ (8008480 <TIM_OC4_SetConfig+0x118>)
 80083d8:	4293      	cmp	r3, r2
 80083da:	d10d      	bne.n	80083f8 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80083dc:	697b      	ldr	r3, [r7, #20]
 80083de:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80083e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80083e4:	683b      	ldr	r3, [r7, #0]
 80083e6:	68db      	ldr	r3, [r3, #12]
 80083e8:	031b      	lsls	r3, r3, #12
 80083ea:	697a      	ldr	r2, [r7, #20]
 80083ec:	4313      	orrs	r3, r2
 80083ee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80083f0:	697b      	ldr	r3, [r7, #20]
 80083f2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80083f6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	4a1f      	ldr	r2, [pc, #124]	@ (8008478 <TIM_OC4_SetConfig+0x110>)
 80083fc:	4293      	cmp	r3, r2
 80083fe:	d013      	beq.n	8008428 <TIM_OC4_SetConfig+0xc0>
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	4a1e      	ldr	r2, [pc, #120]	@ (800847c <TIM_OC4_SetConfig+0x114>)
 8008404:	4293      	cmp	r3, r2
 8008406:	d00f      	beq.n	8008428 <TIM_OC4_SetConfig+0xc0>
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	4a1e      	ldr	r2, [pc, #120]	@ (8008484 <TIM_OC4_SetConfig+0x11c>)
 800840c:	4293      	cmp	r3, r2
 800840e:	d00b      	beq.n	8008428 <TIM_OC4_SetConfig+0xc0>
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	4a1d      	ldr	r2, [pc, #116]	@ (8008488 <TIM_OC4_SetConfig+0x120>)
 8008414:	4293      	cmp	r3, r2
 8008416:	d007      	beq.n	8008428 <TIM_OC4_SetConfig+0xc0>
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	4a1c      	ldr	r2, [pc, #112]	@ (800848c <TIM_OC4_SetConfig+0x124>)
 800841c:	4293      	cmp	r3, r2
 800841e:	d003      	beq.n	8008428 <TIM_OC4_SetConfig+0xc0>
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	4a17      	ldr	r2, [pc, #92]	@ (8008480 <TIM_OC4_SetConfig+0x118>)
 8008424:	4293      	cmp	r3, r2
 8008426:	d113      	bne.n	8008450 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008428:	693b      	ldr	r3, [r7, #16]
 800842a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800842e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8008430:	693b      	ldr	r3, [r7, #16]
 8008432:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008436:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008438:	683b      	ldr	r3, [r7, #0]
 800843a:	695b      	ldr	r3, [r3, #20]
 800843c:	019b      	lsls	r3, r3, #6
 800843e:	693a      	ldr	r2, [r7, #16]
 8008440:	4313      	orrs	r3, r2
 8008442:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8008444:	683b      	ldr	r3, [r7, #0]
 8008446:	699b      	ldr	r3, [r3, #24]
 8008448:	019b      	lsls	r3, r3, #6
 800844a:	693a      	ldr	r2, [r7, #16]
 800844c:	4313      	orrs	r3, r2
 800844e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	693a      	ldr	r2, [r7, #16]
 8008454:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	68fa      	ldr	r2, [r7, #12]
 800845a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800845c:	683b      	ldr	r3, [r7, #0]
 800845e:	685a      	ldr	r2, [r3, #4]
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	697a      	ldr	r2, [r7, #20]
 8008468:	621a      	str	r2, [r3, #32]
}
 800846a:	bf00      	nop
 800846c:	371c      	adds	r7, #28
 800846e:	46bd      	mov	sp, r7
 8008470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008474:	4770      	bx	lr
 8008476:	bf00      	nop
 8008478:	40012c00 	.word	0x40012c00
 800847c:	40013400 	.word	0x40013400
 8008480:	40015000 	.word	0x40015000
 8008484:	40014000 	.word	0x40014000
 8008488:	40014400 	.word	0x40014400
 800848c:	40014800 	.word	0x40014800

08008490 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008490:	b480      	push	{r7}
 8008492:	b087      	sub	sp, #28
 8008494:	af00      	add	r7, sp, #0
 8008496:	6078      	str	r0, [r7, #4]
 8008498:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	6a1b      	ldr	r3, [r3, #32]
 800849e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	6a1b      	ldr	r3, [r3, #32]
 80084a4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	685b      	ldr	r3, [r3, #4]
 80084b0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80084b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80084be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80084c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80084c4:	683b      	ldr	r3, [r7, #0]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	68fa      	ldr	r2, [r7, #12]
 80084ca:	4313      	orrs	r3, r2
 80084cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80084ce:	693b      	ldr	r3, [r7, #16]
 80084d0:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80084d4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80084d6:	683b      	ldr	r3, [r7, #0]
 80084d8:	689b      	ldr	r3, [r3, #8]
 80084da:	041b      	lsls	r3, r3, #16
 80084dc:	693a      	ldr	r2, [r7, #16]
 80084de:	4313      	orrs	r3, r2
 80084e0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	4a19      	ldr	r2, [pc, #100]	@ (800854c <TIM_OC5_SetConfig+0xbc>)
 80084e6:	4293      	cmp	r3, r2
 80084e8:	d013      	beq.n	8008512 <TIM_OC5_SetConfig+0x82>
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	4a18      	ldr	r2, [pc, #96]	@ (8008550 <TIM_OC5_SetConfig+0xc0>)
 80084ee:	4293      	cmp	r3, r2
 80084f0:	d00f      	beq.n	8008512 <TIM_OC5_SetConfig+0x82>
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	4a17      	ldr	r2, [pc, #92]	@ (8008554 <TIM_OC5_SetConfig+0xc4>)
 80084f6:	4293      	cmp	r3, r2
 80084f8:	d00b      	beq.n	8008512 <TIM_OC5_SetConfig+0x82>
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	4a16      	ldr	r2, [pc, #88]	@ (8008558 <TIM_OC5_SetConfig+0xc8>)
 80084fe:	4293      	cmp	r3, r2
 8008500:	d007      	beq.n	8008512 <TIM_OC5_SetConfig+0x82>
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	4a15      	ldr	r2, [pc, #84]	@ (800855c <TIM_OC5_SetConfig+0xcc>)
 8008506:	4293      	cmp	r3, r2
 8008508:	d003      	beq.n	8008512 <TIM_OC5_SetConfig+0x82>
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	4a14      	ldr	r2, [pc, #80]	@ (8008560 <TIM_OC5_SetConfig+0xd0>)
 800850e:	4293      	cmp	r3, r2
 8008510:	d109      	bne.n	8008526 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008512:	697b      	ldr	r3, [r7, #20]
 8008514:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008518:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800851a:	683b      	ldr	r3, [r7, #0]
 800851c:	695b      	ldr	r3, [r3, #20]
 800851e:	021b      	lsls	r3, r3, #8
 8008520:	697a      	ldr	r2, [r7, #20]
 8008522:	4313      	orrs	r3, r2
 8008524:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	697a      	ldr	r2, [r7, #20]
 800852a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	68fa      	ldr	r2, [r7, #12]
 8008530:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008532:	683b      	ldr	r3, [r7, #0]
 8008534:	685a      	ldr	r2, [r3, #4]
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	693a      	ldr	r2, [r7, #16]
 800853e:	621a      	str	r2, [r3, #32]
}
 8008540:	bf00      	nop
 8008542:	371c      	adds	r7, #28
 8008544:	46bd      	mov	sp, r7
 8008546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800854a:	4770      	bx	lr
 800854c:	40012c00 	.word	0x40012c00
 8008550:	40013400 	.word	0x40013400
 8008554:	40014000 	.word	0x40014000
 8008558:	40014400 	.word	0x40014400
 800855c:	40014800 	.word	0x40014800
 8008560:	40015000 	.word	0x40015000

08008564 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008564:	b480      	push	{r7}
 8008566:	b087      	sub	sp, #28
 8008568:	af00      	add	r7, sp, #0
 800856a:	6078      	str	r0, [r7, #4]
 800856c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	6a1b      	ldr	r3, [r3, #32]
 8008572:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	6a1b      	ldr	r3, [r3, #32]
 8008578:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	685b      	ldr	r3, [r3, #4]
 8008584:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800858a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008592:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008596:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008598:	683b      	ldr	r3, [r7, #0]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	021b      	lsls	r3, r3, #8
 800859e:	68fa      	ldr	r2, [r7, #12]
 80085a0:	4313      	orrs	r3, r2
 80085a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80085a4:	693b      	ldr	r3, [r7, #16]
 80085a6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80085aa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80085ac:	683b      	ldr	r3, [r7, #0]
 80085ae:	689b      	ldr	r3, [r3, #8]
 80085b0:	051b      	lsls	r3, r3, #20
 80085b2:	693a      	ldr	r2, [r7, #16]
 80085b4:	4313      	orrs	r3, r2
 80085b6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	4a1a      	ldr	r2, [pc, #104]	@ (8008624 <TIM_OC6_SetConfig+0xc0>)
 80085bc:	4293      	cmp	r3, r2
 80085be:	d013      	beq.n	80085e8 <TIM_OC6_SetConfig+0x84>
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	4a19      	ldr	r2, [pc, #100]	@ (8008628 <TIM_OC6_SetConfig+0xc4>)
 80085c4:	4293      	cmp	r3, r2
 80085c6:	d00f      	beq.n	80085e8 <TIM_OC6_SetConfig+0x84>
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	4a18      	ldr	r2, [pc, #96]	@ (800862c <TIM_OC6_SetConfig+0xc8>)
 80085cc:	4293      	cmp	r3, r2
 80085ce:	d00b      	beq.n	80085e8 <TIM_OC6_SetConfig+0x84>
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	4a17      	ldr	r2, [pc, #92]	@ (8008630 <TIM_OC6_SetConfig+0xcc>)
 80085d4:	4293      	cmp	r3, r2
 80085d6:	d007      	beq.n	80085e8 <TIM_OC6_SetConfig+0x84>
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	4a16      	ldr	r2, [pc, #88]	@ (8008634 <TIM_OC6_SetConfig+0xd0>)
 80085dc:	4293      	cmp	r3, r2
 80085de:	d003      	beq.n	80085e8 <TIM_OC6_SetConfig+0x84>
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	4a15      	ldr	r2, [pc, #84]	@ (8008638 <TIM_OC6_SetConfig+0xd4>)
 80085e4:	4293      	cmp	r3, r2
 80085e6:	d109      	bne.n	80085fc <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80085e8:	697b      	ldr	r3, [r7, #20]
 80085ea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80085ee:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80085f0:	683b      	ldr	r3, [r7, #0]
 80085f2:	695b      	ldr	r3, [r3, #20]
 80085f4:	029b      	lsls	r3, r3, #10
 80085f6:	697a      	ldr	r2, [r7, #20]
 80085f8:	4313      	orrs	r3, r2
 80085fa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	697a      	ldr	r2, [r7, #20]
 8008600:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	68fa      	ldr	r2, [r7, #12]
 8008606:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008608:	683b      	ldr	r3, [r7, #0]
 800860a:	685a      	ldr	r2, [r3, #4]
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	693a      	ldr	r2, [r7, #16]
 8008614:	621a      	str	r2, [r3, #32]
}
 8008616:	bf00      	nop
 8008618:	371c      	adds	r7, #28
 800861a:	46bd      	mov	sp, r7
 800861c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008620:	4770      	bx	lr
 8008622:	bf00      	nop
 8008624:	40012c00 	.word	0x40012c00
 8008628:	40013400 	.word	0x40013400
 800862c:	40014000 	.word	0x40014000
 8008630:	40014400 	.word	0x40014400
 8008634:	40014800 	.word	0x40014800
 8008638:	40015000 	.word	0x40015000

0800863c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800863c:	b480      	push	{r7}
 800863e:	b087      	sub	sp, #28
 8008640:	af00      	add	r7, sp, #0
 8008642:	60f8      	str	r0, [r7, #12]
 8008644:	60b9      	str	r1, [r7, #8]
 8008646:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	6a1b      	ldr	r3, [r3, #32]
 800864c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	6a1b      	ldr	r3, [r3, #32]
 8008652:	f023 0201 	bic.w	r2, r3, #1
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	699b      	ldr	r3, [r3, #24]
 800865e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008660:	693b      	ldr	r3, [r7, #16]
 8008662:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008666:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	011b      	lsls	r3, r3, #4
 800866c:	693a      	ldr	r2, [r7, #16]
 800866e:	4313      	orrs	r3, r2
 8008670:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008672:	697b      	ldr	r3, [r7, #20]
 8008674:	f023 030a 	bic.w	r3, r3, #10
 8008678:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800867a:	697a      	ldr	r2, [r7, #20]
 800867c:	68bb      	ldr	r3, [r7, #8]
 800867e:	4313      	orrs	r3, r2
 8008680:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	693a      	ldr	r2, [r7, #16]
 8008686:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	697a      	ldr	r2, [r7, #20]
 800868c:	621a      	str	r2, [r3, #32]
}
 800868e:	bf00      	nop
 8008690:	371c      	adds	r7, #28
 8008692:	46bd      	mov	sp, r7
 8008694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008698:	4770      	bx	lr

0800869a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800869a:	b480      	push	{r7}
 800869c:	b087      	sub	sp, #28
 800869e:	af00      	add	r7, sp, #0
 80086a0:	60f8      	str	r0, [r7, #12]
 80086a2:	60b9      	str	r1, [r7, #8]
 80086a4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	6a1b      	ldr	r3, [r3, #32]
 80086aa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	6a1b      	ldr	r3, [r3, #32]
 80086b0:	f023 0210 	bic.w	r2, r3, #16
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	699b      	ldr	r3, [r3, #24]
 80086bc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80086be:	693b      	ldr	r3, [r7, #16]
 80086c0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80086c4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	031b      	lsls	r3, r3, #12
 80086ca:	693a      	ldr	r2, [r7, #16]
 80086cc:	4313      	orrs	r3, r2
 80086ce:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80086d0:	697b      	ldr	r3, [r7, #20]
 80086d2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80086d6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80086d8:	68bb      	ldr	r3, [r7, #8]
 80086da:	011b      	lsls	r3, r3, #4
 80086dc:	697a      	ldr	r2, [r7, #20]
 80086de:	4313      	orrs	r3, r2
 80086e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	693a      	ldr	r2, [r7, #16]
 80086e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	697a      	ldr	r2, [r7, #20]
 80086ec:	621a      	str	r2, [r3, #32]
}
 80086ee:	bf00      	nop
 80086f0:	371c      	adds	r7, #28
 80086f2:	46bd      	mov	sp, r7
 80086f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f8:	4770      	bx	lr

080086fa <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80086fa:	b480      	push	{r7}
 80086fc:	b085      	sub	sp, #20
 80086fe:	af00      	add	r7, sp, #0
 8008700:	6078      	str	r0, [r7, #4]
 8008702:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	689b      	ldr	r3, [r3, #8]
 8008708:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8008710:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008714:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008716:	683a      	ldr	r2, [r7, #0]
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	4313      	orrs	r3, r2
 800871c:	f043 0307 	orr.w	r3, r3, #7
 8008720:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	68fa      	ldr	r2, [r7, #12]
 8008726:	609a      	str	r2, [r3, #8]
}
 8008728:	bf00      	nop
 800872a:	3714      	adds	r7, #20
 800872c:	46bd      	mov	sp, r7
 800872e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008732:	4770      	bx	lr

08008734 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008734:	b480      	push	{r7}
 8008736:	b087      	sub	sp, #28
 8008738:	af00      	add	r7, sp, #0
 800873a:	60f8      	str	r0, [r7, #12]
 800873c:	60b9      	str	r1, [r7, #8]
 800873e:	607a      	str	r2, [r7, #4]
 8008740:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	689b      	ldr	r3, [r3, #8]
 8008746:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008748:	697b      	ldr	r3, [r7, #20]
 800874a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800874e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008750:	683b      	ldr	r3, [r7, #0]
 8008752:	021a      	lsls	r2, r3, #8
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	431a      	orrs	r2, r3
 8008758:	68bb      	ldr	r3, [r7, #8]
 800875a:	4313      	orrs	r3, r2
 800875c:	697a      	ldr	r2, [r7, #20]
 800875e:	4313      	orrs	r3, r2
 8008760:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	697a      	ldr	r2, [r7, #20]
 8008766:	609a      	str	r2, [r3, #8]
}
 8008768:	bf00      	nop
 800876a:	371c      	adds	r7, #28
 800876c:	46bd      	mov	sp, r7
 800876e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008772:	4770      	bx	lr

08008774 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008774:	b480      	push	{r7}
 8008776:	b087      	sub	sp, #28
 8008778:	af00      	add	r7, sp, #0
 800877a:	60f8      	str	r0, [r7, #12]
 800877c:	60b9      	str	r1, [r7, #8]
 800877e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008780:	68bb      	ldr	r3, [r7, #8]
 8008782:	f003 031f 	and.w	r3, r3, #31
 8008786:	2201      	movs	r2, #1
 8008788:	fa02 f303 	lsl.w	r3, r2, r3
 800878c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	6a1a      	ldr	r2, [r3, #32]
 8008792:	697b      	ldr	r3, [r7, #20]
 8008794:	43db      	mvns	r3, r3
 8008796:	401a      	ands	r2, r3
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	6a1a      	ldr	r2, [r3, #32]
 80087a0:	68bb      	ldr	r3, [r7, #8]
 80087a2:	f003 031f 	and.w	r3, r3, #31
 80087a6:	6879      	ldr	r1, [r7, #4]
 80087a8:	fa01 f303 	lsl.w	r3, r1, r3
 80087ac:	431a      	orrs	r2, r3
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	621a      	str	r2, [r3, #32]
}
 80087b2:	bf00      	nop
 80087b4:	371c      	adds	r7, #28
 80087b6:	46bd      	mov	sp, r7
 80087b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087bc:	4770      	bx	lr
	...

080087c0 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 80087c0:	b480      	push	{r7}
 80087c2:	b083      	sub	sp, #12
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	4a26      	ldr	r2, [pc, #152]	@ (8008864 <TIM_ResetCallback+0xa4>)
 80087cc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	4a25      	ldr	r2, [pc, #148]	@ (8008868 <TIM_ResetCallback+0xa8>)
 80087d4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	4a24      	ldr	r2, [pc, #144]	@ (800886c <TIM_ResetCallback+0xac>)
 80087dc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	4a23      	ldr	r2, [pc, #140]	@ (8008870 <TIM_ResetCallback+0xb0>)
 80087e4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	4a22      	ldr	r2, [pc, #136]	@ (8008874 <TIM_ResetCallback+0xb4>)
 80087ec:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	4a21      	ldr	r2, [pc, #132]	@ (8008878 <TIM_ResetCallback+0xb8>)
 80087f4:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	4a20      	ldr	r2, [pc, #128]	@ (800887c <TIM_ResetCallback+0xbc>)
 80087fc:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	4a1f      	ldr	r2, [pc, #124]	@ (8008880 <TIM_ResetCallback+0xc0>)
 8008804:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	4a1e      	ldr	r2, [pc, #120]	@ (8008884 <TIM_ResetCallback+0xc4>)
 800880c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	4a1d      	ldr	r2, [pc, #116]	@ (8008888 <TIM_ResetCallback+0xc8>)
 8008814:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	4a1c      	ldr	r2, [pc, #112]	@ (800888c <TIM_ResetCallback+0xcc>)
 800881c:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	4a1b      	ldr	r2, [pc, #108]	@ (8008890 <TIM_ResetCallback+0xd0>)
 8008824:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	4a1a      	ldr	r2, [pc, #104]	@ (8008894 <TIM_ResetCallback+0xd4>)
 800882c:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	4a19      	ldr	r2, [pc, #100]	@ (8008898 <TIM_ResetCallback+0xd8>)
 8008834:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  htim->EncoderIndexCallback              = HAL_TIMEx_EncoderIndexCallback;
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	4a18      	ldr	r2, [pc, #96]	@ (800889c <TIM_ResetCallback+0xdc>)
 800883c:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  htim->DirectionChangeCallback           = HAL_TIMEx_DirectionChangeCallback;
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	4a17      	ldr	r2, [pc, #92]	@ (80088a0 <TIM_ResetCallback+0xe0>)
 8008844:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  htim->IndexErrorCallback                = HAL_TIMEx_IndexErrorCallback;
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	4a16      	ldr	r2, [pc, #88]	@ (80088a4 <TIM_ResetCallback+0xe4>)
 800884c:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  htim->TransitionErrorCallback           = HAL_TIMEx_TransitionErrorCallback;
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	4a15      	ldr	r2, [pc, #84]	@ (80088a8 <TIM_ResetCallback+0xe8>)
 8008854:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 8008858:	bf00      	nop
 800885a:	370c      	adds	r7, #12
 800885c:	46bd      	mov	sp, r7
 800885e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008862:	4770      	bx	lr
 8008864:	080024a9 	.word	0x080024a9
 8008868:	08007b0d 	.word	0x08007b0d
 800886c:	08007b85 	.word	0x08007b85
 8008870:	08007b99 	.word	0x08007b99
 8008874:	08007b35 	.word	0x08007b35
 8008878:	08007b49 	.word	0x08007b49
 800887c:	08007b21 	.word	0x08007b21
 8008880:	08007b5d 	.word	0x08007b5d
 8008884:	08007b71 	.word	0x08007b71
 8008888:	08007bad 	.word	0x08007bad
 800888c:	08008b01 	.word	0x08008b01
 8008890:	08008b15 	.word	0x08008b15
 8008894:	08008b29 	.word	0x08008b29
 8008898:	08008b3d 	.word	0x08008b3d
 800889c:	08008b51 	.word	0x08008b51
 80088a0:	08008b65 	.word	0x08008b65
 80088a4:	08008b79 	.word	0x08008b79
 80088a8:	08008b8d 	.word	0x08008b8d

080088ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80088ac:	b480      	push	{r7}
 80088ae:	b085      	sub	sp, #20
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	6078      	str	r0, [r7, #4]
 80088b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80088bc:	2b01      	cmp	r3, #1
 80088be:	d101      	bne.n	80088c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80088c0:	2302      	movs	r3, #2
 80088c2:	e074      	b.n	80089ae <HAL_TIMEx_MasterConfigSynchronization+0x102>
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	2201      	movs	r2, #1
 80088c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	2202      	movs	r2, #2
 80088d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	685b      	ldr	r3, [r3, #4]
 80088da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	689b      	ldr	r3, [r3, #8]
 80088e2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	4a34      	ldr	r2, [pc, #208]	@ (80089bc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80088ea:	4293      	cmp	r3, r2
 80088ec:	d009      	beq.n	8008902 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	4a33      	ldr	r2, [pc, #204]	@ (80089c0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80088f4:	4293      	cmp	r3, r2
 80088f6:	d004      	beq.n	8008902 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	4a31      	ldr	r2, [pc, #196]	@ (80089c4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80088fe:	4293      	cmp	r3, r2
 8008900:	d108      	bne.n	8008914 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8008908:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800890a:	683b      	ldr	r3, [r7, #0]
 800890c:	685b      	ldr	r3, [r3, #4]
 800890e:	68fa      	ldr	r2, [r7, #12]
 8008910:	4313      	orrs	r3, r2
 8008912:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800891a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800891e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008920:	683b      	ldr	r3, [r7, #0]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	68fa      	ldr	r2, [r7, #12]
 8008926:	4313      	orrs	r3, r2
 8008928:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	68fa      	ldr	r2, [r7, #12]
 8008930:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	4a21      	ldr	r2, [pc, #132]	@ (80089bc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008938:	4293      	cmp	r3, r2
 800893a:	d022      	beq.n	8008982 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008944:	d01d      	beq.n	8008982 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	4a1f      	ldr	r2, [pc, #124]	@ (80089c8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800894c:	4293      	cmp	r3, r2
 800894e:	d018      	beq.n	8008982 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	4a1d      	ldr	r2, [pc, #116]	@ (80089cc <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8008956:	4293      	cmp	r3, r2
 8008958:	d013      	beq.n	8008982 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	4a1c      	ldr	r2, [pc, #112]	@ (80089d0 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8008960:	4293      	cmp	r3, r2
 8008962:	d00e      	beq.n	8008982 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	4a15      	ldr	r2, [pc, #84]	@ (80089c0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800896a:	4293      	cmp	r3, r2
 800896c:	d009      	beq.n	8008982 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	4a18      	ldr	r2, [pc, #96]	@ (80089d4 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8008974:	4293      	cmp	r3, r2
 8008976:	d004      	beq.n	8008982 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	4a11      	ldr	r2, [pc, #68]	@ (80089c4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800897e:	4293      	cmp	r3, r2
 8008980:	d10c      	bne.n	800899c <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008982:	68bb      	ldr	r3, [r7, #8]
 8008984:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008988:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800898a:	683b      	ldr	r3, [r7, #0]
 800898c:	689b      	ldr	r3, [r3, #8]
 800898e:	68ba      	ldr	r2, [r7, #8]
 8008990:	4313      	orrs	r3, r2
 8008992:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	68ba      	ldr	r2, [r7, #8]
 800899a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	2201      	movs	r2, #1
 80089a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	2200      	movs	r2, #0
 80089a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80089ac:	2300      	movs	r3, #0
}
 80089ae:	4618      	mov	r0, r3
 80089b0:	3714      	adds	r7, #20
 80089b2:	46bd      	mov	sp, r7
 80089b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b8:	4770      	bx	lr
 80089ba:	bf00      	nop
 80089bc:	40012c00 	.word	0x40012c00
 80089c0:	40013400 	.word	0x40013400
 80089c4:	40015000 	.word	0x40015000
 80089c8:	40000400 	.word	0x40000400
 80089cc:	40000800 	.word	0x40000800
 80089d0:	40000c00 	.word	0x40000c00
 80089d4:	40014000 	.word	0x40014000

080089d8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80089d8:	b480      	push	{r7}
 80089da:	b085      	sub	sp, #20
 80089dc:	af00      	add	r7, sp, #0
 80089de:	6078      	str	r0, [r7, #4]
 80089e0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80089e2:	2300      	movs	r3, #0
 80089e4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80089ec:	2b01      	cmp	r3, #1
 80089ee:	d101      	bne.n	80089f4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80089f0:	2302      	movs	r3, #2
 80089f2:	e078      	b.n	8008ae6 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	2201      	movs	r2, #1
 80089f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8008a02:	683b      	ldr	r3, [r7, #0]
 8008a04:	68db      	ldr	r3, [r3, #12]
 8008a06:	4313      	orrs	r3, r2
 8008a08:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008a10:	683b      	ldr	r3, [r7, #0]
 8008a12:	689b      	ldr	r3, [r3, #8]
 8008a14:	4313      	orrs	r3, r2
 8008a16:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8008a1e:	683b      	ldr	r3, [r7, #0]
 8008a20:	685b      	ldr	r3, [r3, #4]
 8008a22:	4313      	orrs	r3, r2
 8008a24:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8008a2c:	683b      	ldr	r3, [r7, #0]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	4313      	orrs	r3, r2
 8008a32:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008a3a:	683b      	ldr	r3, [r7, #0]
 8008a3c:	691b      	ldr	r3, [r3, #16]
 8008a3e:	4313      	orrs	r3, r2
 8008a40:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8008a48:	683b      	ldr	r3, [r7, #0]
 8008a4a:	695b      	ldr	r3, [r3, #20]
 8008a4c:	4313      	orrs	r3, r2
 8008a4e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8008a56:	683b      	ldr	r3, [r7, #0]
 8008a58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a5a:	4313      	orrs	r3, r2
 8008a5c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8008a64:	683b      	ldr	r3, [r7, #0]
 8008a66:	699b      	ldr	r3, [r3, #24]
 8008a68:	041b      	lsls	r3, r3, #16
 8008a6a:	4313      	orrs	r3, r2
 8008a6c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8008a74:	683b      	ldr	r3, [r7, #0]
 8008a76:	69db      	ldr	r3, [r3, #28]
 8008a78:	4313      	orrs	r3, r2
 8008a7a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	4a1c      	ldr	r2, [pc, #112]	@ (8008af4 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8008a82:	4293      	cmp	r3, r2
 8008a84:	d009      	beq.n	8008a9a <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	4a1b      	ldr	r2, [pc, #108]	@ (8008af8 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8008a8c:	4293      	cmp	r3, r2
 8008a8e:	d004      	beq.n	8008a9a <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	4a19      	ldr	r2, [pc, #100]	@ (8008afc <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8008a96:	4293      	cmp	r3, r2
 8008a98:	d11c      	bne.n	8008ad4 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8008aa0:	683b      	ldr	r3, [r7, #0]
 8008aa2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008aa4:	051b      	lsls	r3, r3, #20
 8008aa6:	4313      	orrs	r3, r2
 8008aa8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8008ab0:	683b      	ldr	r3, [r7, #0]
 8008ab2:	6a1b      	ldr	r3, [r3, #32]
 8008ab4:	4313      	orrs	r3, r2
 8008ab6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8008abe:	683b      	ldr	r3, [r7, #0]
 8008ac0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ac2:	4313      	orrs	r3, r2
 8008ac4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8008acc:	683b      	ldr	r3, [r7, #0]
 8008ace:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ad0:	4313      	orrs	r3, r2
 8008ad2:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	68fa      	ldr	r2, [r7, #12]
 8008ada:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	2200      	movs	r2, #0
 8008ae0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008ae4:	2300      	movs	r3, #0
}
 8008ae6:	4618      	mov	r0, r3
 8008ae8:	3714      	adds	r7, #20
 8008aea:	46bd      	mov	sp, r7
 8008aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af0:	4770      	bx	lr
 8008af2:	bf00      	nop
 8008af4:	40012c00 	.word	0x40012c00
 8008af8:	40013400 	.word	0x40013400
 8008afc:	40015000 	.word	0x40015000

08008b00 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008b00:	b480      	push	{r7}
 8008b02:	b083      	sub	sp, #12
 8008b04:	af00      	add	r7, sp, #0
 8008b06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008b08:	bf00      	nop
 8008b0a:	370c      	adds	r7, #12
 8008b0c:	46bd      	mov	sp, r7
 8008b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b12:	4770      	bx	lr

08008b14 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008b14:	b480      	push	{r7}
 8008b16:	b083      	sub	sp, #12
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 8008b1c:	bf00      	nop
 8008b1e:	370c      	adds	r7, #12
 8008b20:	46bd      	mov	sp, r7
 8008b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b26:	4770      	bx	lr

08008b28 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008b28:	b480      	push	{r7}
 8008b2a:	b083      	sub	sp, #12
 8008b2c:	af00      	add	r7, sp, #0
 8008b2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008b30:	bf00      	nop
 8008b32:	370c      	adds	r7, #12
 8008b34:	46bd      	mov	sp, r7
 8008b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b3a:	4770      	bx	lr

08008b3c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008b3c:	b480      	push	{r7}
 8008b3e:	b083      	sub	sp, #12
 8008b40:	af00      	add	r7, sp, #0
 8008b42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008b44:	bf00      	nop
 8008b46:	370c      	adds	r7, #12
 8008b48:	46bd      	mov	sp, r7
 8008b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b4e:	4770      	bx	lr

08008b50 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8008b50:	b480      	push	{r7}
 8008b52:	b083      	sub	sp, #12
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8008b58:	bf00      	nop
 8008b5a:	370c      	adds	r7, #12
 8008b5c:	46bd      	mov	sp, r7
 8008b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b62:	4770      	bx	lr

08008b64 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8008b64:	b480      	push	{r7}
 8008b66:	b083      	sub	sp, #12
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8008b6c:	bf00      	nop
 8008b6e:	370c      	adds	r7, #12
 8008b70:	46bd      	mov	sp, r7
 8008b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b76:	4770      	bx	lr

08008b78 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8008b78:	b480      	push	{r7}
 8008b7a:	b083      	sub	sp, #12
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8008b80:	bf00      	nop
 8008b82:	370c      	adds	r7, #12
 8008b84:	46bd      	mov	sp, r7
 8008b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b8a:	4770      	bx	lr

08008b8c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8008b8c:	b480      	push	{r7}
 8008b8e:	b083      	sub	sp, #12
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8008b94:	bf00      	nop
 8008b96:	370c      	adds	r7, #12
 8008b98:	46bd      	mov	sp, r7
 8008b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b9e:	4770      	bx	lr

08008ba0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008ba0:	b580      	push	{r7, lr}
 8008ba2:	b082      	sub	sp, #8
 8008ba4:	af00      	add	r7, sp, #0
 8008ba6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d101      	bne.n	8008bb2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008bae:	2301      	movs	r3, #1
 8008bb0:	e050      	b.n	8008c54 <HAL_UART_Init+0xb4>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d114      	bne.n	8008be6 <HAL_UART_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	2200      	movs	r2, #0
 8008bc0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 8008bc4:	6878      	ldr	r0, [r7, #4]
 8008bc6:	f000 fe37 	bl	8009838 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d103      	bne.n	8008bdc <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	4a21      	ldr	r2, [pc, #132]	@ (8008c5c <HAL_UART_Init+0xbc>)
 8008bd8:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8008be2:	6878      	ldr	r0, [r7, #4]
 8008be4:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	2224      	movs	r2, #36	@ 0x24
 8008bea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	681a      	ldr	r2, [r3, #0]
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	f022 0201 	bic.w	r2, r2, #1
 8008bfc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d002      	beq.n	8008c0c <HAL_UART_Init+0x6c>
  {
    UART_AdvFeatureConfig(huart);
 8008c06:	6878      	ldr	r0, [r7, #4]
 8008c08:	f001 f964 	bl	8009ed4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008c0c:	6878      	ldr	r0, [r7, #4]
 8008c0e:	f000 fe65 	bl	80098dc <UART_SetConfig>
 8008c12:	4603      	mov	r3, r0
 8008c14:	2b01      	cmp	r3, #1
 8008c16:	d101      	bne.n	8008c1c <HAL_UART_Init+0x7c>
  {
    return HAL_ERROR;
 8008c18:	2301      	movs	r3, #1
 8008c1a:	e01b      	b.n	8008c54 <HAL_UART_Init+0xb4>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	685a      	ldr	r2, [r3, #4]
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008c2a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	689a      	ldr	r2, [r3, #8]
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008c3a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	681a      	ldr	r2, [r3, #0]
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	f042 0201 	orr.w	r2, r2, #1
 8008c4a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008c4c:	6878      	ldr	r0, [r7, #4]
 8008c4e:	f001 f9e3 	bl	800a018 <UART_CheckIdleState>
 8008c52:	4603      	mov	r3, r0
}
 8008c54:	4618      	mov	r0, r3
 8008c56:	3708      	adds	r7, #8
 8008c58:	46bd      	mov	sp, r7
 8008c5a:	bd80      	pop	{r7, pc}
 8008c5c:	080033c5 	.word	0x080033c5

08008c60 <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 8008c60:	b480      	push	{r7}
 8008c62:	b087      	sub	sp, #28
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	60f8      	str	r0, [r7, #12]
 8008c68:	460b      	mov	r3, r1
 8008c6a:	607a      	str	r2, [r7, #4]
 8008c6c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8008c6e:	2300      	movs	r3, #0
 8008c70:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d109      	bne.n	8008c8c <HAL_UART_RegisterCallback+0x2c>
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008c7e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    return HAL_ERROR;
 8008c88:	2301      	movs	r3, #1
 8008c8a:	e09c      	b.n	8008dc6 <HAL_UART_RegisterCallback+0x166>
  }

  if (huart->gState == HAL_UART_STATE_READY)
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008c92:	2b20      	cmp	r3, #32
 8008c94:	d16c      	bne.n	8008d70 <HAL_UART_RegisterCallback+0x110>
  {
    switch (CallbackID)
 8008c96:	7afb      	ldrb	r3, [r7, #11]
 8008c98:	2b0c      	cmp	r3, #12
 8008c9a:	d85e      	bhi.n	8008d5a <HAL_UART_RegisterCallback+0xfa>
 8008c9c:	a201      	add	r2, pc, #4	@ (adr r2, 8008ca4 <HAL_UART_RegisterCallback+0x44>)
 8008c9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ca2:	bf00      	nop
 8008ca4:	08008cd9 	.word	0x08008cd9
 8008ca8:	08008ce3 	.word	0x08008ce3
 8008cac:	08008ced 	.word	0x08008ced
 8008cb0:	08008cf7 	.word	0x08008cf7
 8008cb4:	08008d01 	.word	0x08008d01
 8008cb8:	08008d0b 	.word	0x08008d0b
 8008cbc:	08008d15 	.word	0x08008d15
 8008cc0:	08008d1f 	.word	0x08008d1f
 8008cc4:	08008d29 	.word	0x08008d29
 8008cc8:	08008d33 	.word	0x08008d33
 8008ccc:	08008d3d 	.word	0x08008d3d
 8008cd0:	08008d47 	.word	0x08008d47
 8008cd4:	08008d51 	.word	0x08008d51
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	687a      	ldr	r2, [r7, #4]
 8008cdc:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 8008ce0:	e070      	b.n	8008dc4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	687a      	ldr	r2, [r7, #4]
 8008ce6:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 8008cea:	e06b      	b.n	8008dc4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	687a      	ldr	r2, [r7, #4]
 8008cf0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 8008cf4:	e066      	b.n	8008dc4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	687a      	ldr	r2, [r7, #4]
 8008cfa:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 8008cfe:	e061      	b.n	8008dc4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	687a      	ldr	r2, [r7, #4]
 8008d04:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 8008d08:	e05c      	b.n	8008dc4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	687a      	ldr	r2, [r7, #4]
 8008d0e:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 8008d12:	e057      	b.n	8008dc4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	687a      	ldr	r2, [r7, #4]
 8008d18:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 8008d1c:	e052      	b.n	8008dc4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	687a      	ldr	r2, [r7, #4]
 8008d22:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 8008d26:	e04d      	b.n	8008dc4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_WAKEUP_CB_ID :
        huart->WakeupCallback = pCallback;
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	687a      	ldr	r2, [r7, #4]
 8008d2c:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 8008d30:	e048      	b.n	8008dc4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_FIFO_FULL_CB_ID :
        huart->RxFifoFullCallback = pCallback;
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	687a      	ldr	r2, [r7, #4]
 8008d36:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 8008d3a:	e043      	b.n	8008dc4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_FIFO_EMPTY_CB_ID :
        huart->TxFifoEmptyCallback = pCallback;
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	687a      	ldr	r2, [r7, #4]
 8008d40:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 8008d44:	e03e      	b.n	8008dc4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	687a      	ldr	r2, [r7, #4]
 8008d4a:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 8008d4e:	e039      	b.n	8008dc4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	687a      	ldr	r2, [r7, #4]
 8008d54:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 8008d58:	e034      	b.n	8008dc4 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008d60:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 8008d6a:	2301      	movs	r3, #1
 8008d6c:	75fb      	strb	r3, [r7, #23]
        break;
 8008d6e:	e029      	b.n	8008dc4 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d11a      	bne.n	8008db0 <HAL_UART_RegisterCallback+0x150>
  {
    switch (CallbackID)
 8008d7a:	7afb      	ldrb	r3, [r7, #11]
 8008d7c:	2b0b      	cmp	r3, #11
 8008d7e:	d002      	beq.n	8008d86 <HAL_UART_RegisterCallback+0x126>
 8008d80:	2b0c      	cmp	r3, #12
 8008d82:	d005      	beq.n	8008d90 <HAL_UART_RegisterCallback+0x130>
 8008d84:	e009      	b.n	8008d9a <HAL_UART_RegisterCallback+0x13a>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	687a      	ldr	r2, [r7, #4]
 8008d8a:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 8008d8e:	e019      	b.n	8008dc4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	687a      	ldr	r2, [r7, #4]
 8008d94:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 8008d98:	e014      	b.n	8008dc4 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008da0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 8008daa:	2301      	movs	r3, #1
 8008dac:	75fb      	strb	r3, [r7, #23]
        break;
 8008dae:	e009      	b.n	8008dc4 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008db6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    status =  HAL_ERROR;
 8008dc0:	2301      	movs	r3, #1
 8008dc2:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8008dc4:	7dfb      	ldrb	r3, [r7, #23]
}
 8008dc6:	4618      	mov	r0, r3
 8008dc8:	371c      	adds	r7, #28
 8008dca:	46bd      	mov	sp, r7
 8008dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd0:	4770      	bx	lr
 8008dd2:	bf00      	nop

08008dd4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008dd4:	b580      	push	{r7, lr}
 8008dd6:	b08a      	sub	sp, #40	@ 0x28
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	60f8      	str	r0, [r7, #12]
 8008ddc:	60b9      	str	r1, [r7, #8]
 8008dde:	4613      	mov	r3, r2
 8008de0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008de8:	2b20      	cmp	r3, #32
 8008dea:	d137      	bne.n	8008e5c <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8008dec:	68bb      	ldr	r3, [r7, #8]
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d002      	beq.n	8008df8 <HAL_UART_Receive_IT+0x24>
 8008df2:	88fb      	ldrh	r3, [r7, #6]
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d101      	bne.n	8008dfc <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8008df8:	2301      	movs	r3, #1
 8008dfa:	e030      	b.n	8008e5e <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	2200      	movs	r2, #0
 8008e00:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	4a18      	ldr	r2, [pc, #96]	@ (8008e68 <HAL_UART_Receive_IT+0x94>)
 8008e08:	4293      	cmp	r3, r2
 8008e0a:	d01f      	beq.n	8008e4c <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	685b      	ldr	r3, [r3, #4]
 8008e12:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d018      	beq.n	8008e4c <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e20:	697b      	ldr	r3, [r7, #20]
 8008e22:	e853 3f00 	ldrex	r3, [r3]
 8008e26:	613b      	str	r3, [r7, #16]
   return(result);
 8008e28:	693b      	ldr	r3, [r7, #16]
 8008e2a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008e2e:	627b      	str	r3, [r7, #36]	@ 0x24
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	461a      	mov	r2, r3
 8008e36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e38:	623b      	str	r3, [r7, #32]
 8008e3a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e3c:	69f9      	ldr	r1, [r7, #28]
 8008e3e:	6a3a      	ldr	r2, [r7, #32]
 8008e40:	e841 2300 	strex	r3, r2, [r1]
 8008e44:	61bb      	str	r3, [r7, #24]
   return(result);
 8008e46:	69bb      	ldr	r3, [r7, #24]
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d1e6      	bne.n	8008e1a <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008e4c:	88fb      	ldrh	r3, [r7, #6]
 8008e4e:	461a      	mov	r2, r3
 8008e50:	68b9      	ldr	r1, [r7, #8]
 8008e52:	68f8      	ldr	r0, [r7, #12]
 8008e54:	f001 f9f8 	bl	800a248 <UART_Start_Receive_IT>
 8008e58:	4603      	mov	r3, r0
 8008e5a:	e000      	b.n	8008e5e <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008e5c:	2302      	movs	r3, #2
  }
}
 8008e5e:	4618      	mov	r0, r3
 8008e60:	3728      	adds	r7, #40	@ 0x28
 8008e62:	46bd      	mov	sp, r7
 8008e64:	bd80      	pop	{r7, pc}
 8008e66:	bf00      	nop
 8008e68:	40008000 	.word	0x40008000

08008e6c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8008e6c:	b580      	push	{r7, lr}
 8008e6e:	b08a      	sub	sp, #40	@ 0x28
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	60f8      	str	r0, [r7, #12]
 8008e74:	60b9      	str	r1, [r7, #8]
 8008e76:	4613      	mov	r3, r2
 8008e78:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008e80:	2b20      	cmp	r3, #32
 8008e82:	d167      	bne.n	8008f54 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8008e84:	68bb      	ldr	r3, [r7, #8]
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d002      	beq.n	8008e90 <HAL_UART_Transmit_DMA+0x24>
 8008e8a:	88fb      	ldrh	r3, [r7, #6]
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d101      	bne.n	8008e94 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8008e90:	2301      	movs	r3, #1
 8008e92:	e060      	b.n	8008f56 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	68ba      	ldr	r2, [r7, #8]
 8008e98:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	88fa      	ldrh	r2, [r7, #6]
 8008e9e:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	88fa      	ldrh	r2, [r7, #6]
 8008ea6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	2200      	movs	r2, #0
 8008eae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	2221      	movs	r2, #33	@ 0x21
 8008eb6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d028      	beq.n	8008f14 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008ec6:	4a26      	ldr	r2, [pc, #152]	@ (8008f60 <HAL_UART_Transmit_DMA+0xf4>)
 8008ec8:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008ece:	4a25      	ldr	r2, [pc, #148]	@ (8008f64 <HAL_UART_Transmit_DMA+0xf8>)
 8008ed0:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008ed6:	4a24      	ldr	r2, [pc, #144]	@ (8008f68 <HAL_UART_Transmit_DMA+0xfc>)
 8008ed8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008ede:	2200      	movs	r2, #0
 8008ee0:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008eea:	4619      	mov	r1, r3
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	3328      	adds	r3, #40	@ 0x28
 8008ef2:	461a      	mov	r2, r3
 8008ef4:	88fb      	ldrh	r3, [r7, #6]
 8008ef6:	f7fc f801 	bl	8004efc <HAL_DMA_Start_IT>
 8008efa:	4603      	mov	r3, r0
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d009      	beq.n	8008f14 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	2210      	movs	r2, #16
 8008f04:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	2220      	movs	r2, #32
 8008f0c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 8008f10:	2301      	movs	r3, #1
 8008f12:	e020      	b.n	8008f56 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	2240      	movs	r2, #64	@ 0x40
 8008f1a:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	3308      	adds	r3, #8
 8008f22:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f24:	697b      	ldr	r3, [r7, #20]
 8008f26:	e853 3f00 	ldrex	r3, [r3]
 8008f2a:	613b      	str	r3, [r7, #16]
   return(result);
 8008f2c:	693b      	ldr	r3, [r7, #16]
 8008f2e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008f32:	627b      	str	r3, [r7, #36]	@ 0x24
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	3308      	adds	r3, #8
 8008f3a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008f3c:	623a      	str	r2, [r7, #32]
 8008f3e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f40:	69f9      	ldr	r1, [r7, #28]
 8008f42:	6a3a      	ldr	r2, [r7, #32]
 8008f44:	e841 2300 	strex	r3, r2, [r1]
 8008f48:	61bb      	str	r3, [r7, #24]
   return(result);
 8008f4a:	69bb      	ldr	r3, [r7, #24]
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d1e5      	bne.n	8008f1c <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8008f50:	2300      	movs	r3, #0
 8008f52:	e000      	b.n	8008f56 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8008f54:	2302      	movs	r3, #2
  }
}
 8008f56:	4618      	mov	r0, r3
 8008f58:	3728      	adds	r7, #40	@ 0x28
 8008f5a:	46bd      	mov	sp, r7
 8008f5c:	bd80      	pop	{r7, pc}
 8008f5e:	bf00      	nop
 8008f60:	0800a5db 	.word	0x0800a5db
 8008f64:	0800a679 	.word	0x0800a679
 8008f68:	0800a699 	.word	0x0800a699

08008f6c <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 8008f6c:	b580      	push	{r7, lr}
 8008f6e:	b09a      	sub	sp, #104	@ 0x68
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	6078      	str	r0, [r7, #4]
  /* Disable PEIE, EIE, RXNEIE and RXFTIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f7a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008f7c:	e853 3f00 	ldrex	r3, [r3]
 8008f80:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8008f82:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008f84:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008f88:	667b      	str	r3, [r7, #100]	@ 0x64
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	461a      	mov	r2, r3
 8008f90:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008f92:	657b      	str	r3, [r7, #84]	@ 0x54
 8008f94:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f96:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008f98:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008f9a:	e841 2300 	strex	r3, r2, [r1]
 8008f9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8008fa0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d1e6      	bne.n	8008f74 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE);
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	3308      	adds	r3, #8
 8008fac:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008fb0:	e853 3f00 	ldrex	r3, [r3]
 8008fb4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008fb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fb8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008fbc:	f023 0301 	bic.w	r3, r3, #1
 8008fc0:	663b      	str	r3, [r7, #96]	@ 0x60
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	3308      	adds	r3, #8
 8008fc8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8008fca:	643a      	str	r2, [r7, #64]	@ 0x40
 8008fcc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fce:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008fd0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008fd2:	e841 2300 	strex	r3, r2, [r1]
 8008fd6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008fd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d1e3      	bne.n	8008fa6 <HAL_UART_AbortReceive+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008fe2:	2b01      	cmp	r3, #1
 8008fe4:	d118      	bne.n	8009018 <HAL_UART_AbortReceive+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fec:	6a3b      	ldr	r3, [r7, #32]
 8008fee:	e853 3f00 	ldrex	r3, [r3]
 8008ff2:	61fb      	str	r3, [r7, #28]
   return(result);
 8008ff4:	69fb      	ldr	r3, [r7, #28]
 8008ff6:	f023 0310 	bic.w	r3, r3, #16
 8008ffa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	461a      	mov	r2, r3
 8009002:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009004:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009006:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009008:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800900a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800900c:	e841 2300 	strex	r3, r2, [r1]
 8009010:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009012:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009014:	2b00      	cmp	r3, #0
 8009016:	d1e6      	bne.n	8008fe6 <HAL_UART_AbortReceive+0x7a>
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	689b      	ldr	r3, [r3, #8]
 800901e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009022:	2b40      	cmp	r3, #64	@ 0x40
 8009024:	d13b      	bne.n	800909e <HAL_UART_AbortReceive+0x132>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	3308      	adds	r3, #8
 800902c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	e853 3f00 	ldrex	r3, [r3]
 8009034:	60bb      	str	r3, [r7, #8]
   return(result);
 8009036:	68bb      	ldr	r3, [r7, #8]
 8009038:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800903c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	3308      	adds	r3, #8
 8009044:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009046:	61ba      	str	r2, [r7, #24]
 8009048:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800904a:	6979      	ldr	r1, [r7, #20]
 800904c:	69ba      	ldr	r2, [r7, #24]
 800904e:	e841 2300 	strex	r3, r2, [r1]
 8009052:	613b      	str	r3, [r7, #16]
   return(result);
 8009054:	693b      	ldr	r3, [r7, #16]
 8009056:	2b00      	cmp	r3, #0
 8009058:	d1e5      	bne.n	8009026 <HAL_UART_AbortReceive+0xba>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009060:	2b00      	cmp	r3, #0
 8009062:	d01c      	beq.n	800909e <HAL_UART_AbortReceive+0x132>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800906a:	2200      	movs	r2, #0
 800906c:	639a      	str	r2, [r3, #56]	@ 0x38

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009074:	4618      	mov	r0, r3
 8009076:	f7fb ffbc 	bl	8004ff2 <HAL_DMA_Abort>
 800907a:	4603      	mov	r3, r0
 800907c:	2b00      	cmp	r3, #0
 800907e:	d00e      	beq.n	800909e <HAL_UART_AbortReceive+0x132>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009086:	4618      	mov	r0, r3
 8009088:	f7fc f922 	bl	80052d0 <HAL_DMA_GetError>
 800908c:	4603      	mov	r3, r0
 800908e:	2b20      	cmp	r3, #32
 8009090:	d105      	bne.n	800909e <HAL_UART_AbortReceive+0x132>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	2210      	movs	r2, #16
 8009096:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 800909a:	2303      	movs	r3, #3
 800909c:	e017      	b.n	80090ce <HAL_UART_AbortReceive+0x162>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0U;
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	2200      	movs	r2, #0
 80090a2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	220f      	movs	r2, #15
 80090ac:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	699a      	ldr	r2, [r3, #24]
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	f042 0208 	orr.w	r2, r2, #8
 80090bc:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	2220      	movs	r2, #32
 80090c2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	2200      	movs	r2, #0
 80090ca:	66da      	str	r2, [r3, #108]	@ 0x6c

  return HAL_OK;
 80090cc:	2300      	movs	r3, #0
}
 80090ce:	4618      	mov	r0, r3
 80090d0:	3768      	adds	r7, #104	@ 0x68
 80090d2:	46bd      	mov	sp, r7
 80090d4:	bd80      	pop	{r7, pc}
	...

080090d8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80090d8:	b580      	push	{r7, lr}
 80090da:	b0ba      	sub	sp, #232	@ 0xe8
 80090dc:	af00      	add	r7, sp, #0
 80090de:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	69db      	ldr	r3, [r3, #28]
 80090e6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	689b      	ldr	r3, [r3, #8]
 80090fa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80090fe:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8009102:	f640 030f 	movw	r3, #2063	@ 0x80f
 8009106:	4013      	ands	r3, r2
 8009108:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800910c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009110:	2b00      	cmp	r3, #0
 8009112:	d11b      	bne.n	800914c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009114:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009118:	f003 0320 	and.w	r3, r3, #32
 800911c:	2b00      	cmp	r3, #0
 800911e:	d015      	beq.n	800914c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009120:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009124:	f003 0320 	and.w	r3, r3, #32
 8009128:	2b00      	cmp	r3, #0
 800912a:	d105      	bne.n	8009138 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800912c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009130:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009134:	2b00      	cmp	r3, #0
 8009136:	d009      	beq.n	800914c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800913c:	2b00      	cmp	r3, #0
 800913e:	f000 8312 	beq.w	8009766 <HAL_UART_IRQHandler+0x68e>
      {
        huart->RxISR(huart);
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009146:	6878      	ldr	r0, [r7, #4]
 8009148:	4798      	blx	r3
      }
      return;
 800914a:	e30c      	b.n	8009766 <HAL_UART_IRQHandler+0x68e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800914c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009150:	2b00      	cmp	r3, #0
 8009152:	f000 8129 	beq.w	80093a8 <HAL_UART_IRQHandler+0x2d0>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8009156:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800915a:	4b90      	ldr	r3, [pc, #576]	@ (800939c <HAL_UART_IRQHandler+0x2c4>)
 800915c:	4013      	ands	r3, r2
 800915e:	2b00      	cmp	r3, #0
 8009160:	d106      	bne.n	8009170 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8009162:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8009166:	4b8e      	ldr	r3, [pc, #568]	@ (80093a0 <HAL_UART_IRQHandler+0x2c8>)
 8009168:	4013      	ands	r3, r2
 800916a:	2b00      	cmp	r3, #0
 800916c:	f000 811c 	beq.w	80093a8 <HAL_UART_IRQHandler+0x2d0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009170:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009174:	f003 0301 	and.w	r3, r3, #1
 8009178:	2b00      	cmp	r3, #0
 800917a:	d011      	beq.n	80091a0 <HAL_UART_IRQHandler+0xc8>
 800917c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009180:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009184:	2b00      	cmp	r3, #0
 8009186:	d00b      	beq.n	80091a0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	2201      	movs	r2, #1
 800918e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009196:	f043 0201 	orr.w	r2, r3, #1
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80091a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80091a4:	f003 0302 	and.w	r3, r3, #2
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d011      	beq.n	80091d0 <HAL_UART_IRQHandler+0xf8>
 80091ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80091b0:	f003 0301 	and.w	r3, r3, #1
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d00b      	beq.n	80091d0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	2202      	movs	r2, #2
 80091be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80091c6:	f043 0204 	orr.w	r2, r3, #4
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80091d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80091d4:	f003 0304 	and.w	r3, r3, #4
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d011      	beq.n	8009200 <HAL_UART_IRQHandler+0x128>
 80091dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80091e0:	f003 0301 	and.w	r3, r3, #1
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d00b      	beq.n	8009200 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	2204      	movs	r2, #4
 80091ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80091f6:	f043 0202 	orr.w	r2, r3, #2
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009200:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009204:	f003 0308 	and.w	r3, r3, #8
 8009208:	2b00      	cmp	r3, #0
 800920a:	d017      	beq.n	800923c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800920c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009210:	f003 0320 	and.w	r3, r3, #32
 8009214:	2b00      	cmp	r3, #0
 8009216:	d105      	bne.n	8009224 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8009218:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800921c:	4b5f      	ldr	r3, [pc, #380]	@ (800939c <HAL_UART_IRQHandler+0x2c4>)
 800921e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009220:	2b00      	cmp	r3, #0
 8009222:	d00b      	beq.n	800923c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	2208      	movs	r2, #8
 800922a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009232:	f043 0208 	orr.w	r2, r3, #8
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800923c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009240:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009244:	2b00      	cmp	r3, #0
 8009246:	d012      	beq.n	800926e <HAL_UART_IRQHandler+0x196>
 8009248:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800924c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8009250:	2b00      	cmp	r3, #0
 8009252:	d00c      	beq.n	800926e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800925c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009264:	f043 0220 	orr.w	r2, r3, #32
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009274:	2b00      	cmp	r3, #0
 8009276:	f000 8278 	beq.w	800976a <HAL_UART_IRQHandler+0x692>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800927a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800927e:	f003 0320 	and.w	r3, r3, #32
 8009282:	2b00      	cmp	r3, #0
 8009284:	d013      	beq.n	80092ae <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009286:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800928a:	f003 0320 	and.w	r3, r3, #32
 800928e:	2b00      	cmp	r3, #0
 8009290:	d105      	bne.n	800929e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009292:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009296:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800929a:	2b00      	cmp	r3, #0
 800929c:	d007      	beq.n	80092ae <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d003      	beq.n	80092ae <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80092aa:	6878      	ldr	r0, [r7, #4]
 80092ac:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80092b4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	689b      	ldr	r3, [r3, #8]
 80092be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80092c2:	2b40      	cmp	r3, #64	@ 0x40
 80092c4:	d005      	beq.n	80092d2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80092c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80092ca:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d058      	beq.n	8009384 <HAL_UART_IRQHandler+0x2ac>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80092d2:	6878      	ldr	r0, [r7, #4]
 80092d4:	f001 f91b 	bl	800a50e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	689b      	ldr	r3, [r3, #8]
 80092de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80092e2:	2b40      	cmp	r3, #64	@ 0x40
 80092e4:	d148      	bne.n	8009378 <HAL_UART_IRQHandler+0x2a0>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	3308      	adds	r3, #8
 80092ec:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092f0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80092f4:	e853 3f00 	ldrex	r3, [r3]
 80092f8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80092fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009300:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009304:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	3308      	adds	r3, #8
 800930e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8009312:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8009316:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800931a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800931e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8009322:	e841 2300 	strex	r3, r2, [r1]
 8009326:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800932a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800932e:	2b00      	cmp	r3, #0
 8009330:	d1d9      	bne.n	80092e6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009338:	2b00      	cmp	r3, #0
 800933a:	d017      	beq.n	800936c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009342:	4a18      	ldr	r2, [pc, #96]	@ (80093a4 <HAL_UART_IRQHandler+0x2cc>)
 8009344:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800934c:	4618      	mov	r0, r3
 800934e:	f7fb fea9 	bl	80050a4 <HAL_DMA_Abort_IT>
 8009352:	4603      	mov	r3, r0
 8009354:	2b00      	cmp	r3, #0
 8009356:	d01f      	beq.n	8009398 <HAL_UART_IRQHandler+0x2c0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800935e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009360:	687a      	ldr	r2, [r7, #4]
 8009362:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8009366:	4610      	mov	r0, r2
 8009368:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800936a:	e015      	b.n	8009398 <HAL_UART_IRQHandler+0x2c0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009372:	6878      	ldr	r0, [r7, #4]
 8009374:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009376:	e00f      	b.n	8009398 <HAL_UART_IRQHandler+0x2c0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800937e:	6878      	ldr	r0, [r7, #4]
 8009380:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009382:	e009      	b.n	8009398 <HAL_UART_IRQHandler+0x2c0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800938a:	6878      	ldr	r0, [r7, #4]
 800938c:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	2200      	movs	r2, #0
 8009392:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8009396:	e1e8      	b.n	800976a <HAL_UART_IRQHandler+0x692>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009398:	bf00      	nop
    return;
 800939a:	e1e6      	b.n	800976a <HAL_UART_IRQHandler+0x692>
 800939c:	10000001 	.word	0x10000001
 80093a0:	04000120 	.word	0x04000120
 80093a4:	0800a71d 	.word	0x0800a71d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80093ac:	2b01      	cmp	r3, #1
 80093ae:	f040 8176 	bne.w	800969e <HAL_UART_IRQHandler+0x5c6>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80093b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80093b6:	f003 0310 	and.w	r3, r3, #16
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	f000 816f 	beq.w	800969e <HAL_UART_IRQHandler+0x5c6>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80093c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80093c4:	f003 0310 	and.w	r3, r3, #16
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	f000 8168 	beq.w	800969e <HAL_UART_IRQHandler+0x5c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	2210      	movs	r2, #16
 80093d4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	689b      	ldr	r3, [r3, #8]
 80093dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80093e0:	2b40      	cmp	r3, #64	@ 0x40
 80093e2:	f040 80dc 	bne.w	800959e <HAL_UART_IRQHandler+0x4c6>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	685b      	ldr	r3, [r3, #4]
 80093f0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80093f4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	f000 80b1 	beq.w	8009560 <HAL_UART_IRQHandler+0x488>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009404:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009408:	429a      	cmp	r2, r3
 800940a:	f080 80a9 	bcs.w	8009560 <HAL_UART_IRQHandler+0x488>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009414:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	f003 0320 	and.w	r3, r3, #32
 8009426:	2b00      	cmp	r3, #0
 8009428:	f040 8087 	bne.w	800953a <HAL_UART_IRQHandler+0x462>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009434:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009438:	e853 3f00 	ldrex	r3, [r3]
 800943c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8009440:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009444:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009448:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	461a      	mov	r2, r3
 8009452:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009456:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800945a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800945e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8009462:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009466:	e841 2300 	strex	r3, r2, [r1]
 800946a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800946e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009472:	2b00      	cmp	r3, #0
 8009474:	d1da      	bne.n	800942c <HAL_UART_IRQHandler+0x354>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	3308      	adds	r3, #8
 800947c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800947e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009480:	e853 3f00 	ldrex	r3, [r3]
 8009484:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009486:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009488:	f023 0301 	bic.w	r3, r3, #1
 800948c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	3308      	adds	r3, #8
 8009496:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800949a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800949e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094a0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80094a2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80094a6:	e841 2300 	strex	r3, r2, [r1]
 80094aa:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80094ac:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d1e1      	bne.n	8009476 <HAL_UART_IRQHandler+0x39e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	3308      	adds	r3, #8
 80094b8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094ba:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80094bc:	e853 3f00 	ldrex	r3, [r3]
 80094c0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80094c2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80094c4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80094c8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	3308      	adds	r3, #8
 80094d2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80094d6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80094d8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094da:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80094dc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80094de:	e841 2300 	strex	r3, r2, [r1]
 80094e2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80094e4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d1e3      	bne.n	80094b2 <HAL_UART_IRQHandler+0x3da>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	2220      	movs	r2, #32
 80094ee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	2200      	movs	r2, #0
 80094f6:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009500:	e853 3f00 	ldrex	r3, [r3]
 8009504:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009506:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009508:	f023 0310 	bic.w	r3, r3, #16
 800950c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	461a      	mov	r2, r3
 8009516:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800951a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800951c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800951e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009520:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009522:	e841 2300 	strex	r3, r2, [r1]
 8009526:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009528:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800952a:	2b00      	cmp	r3, #0
 800952c:	d1e4      	bne.n	80094f8 <HAL_UART_IRQHandler+0x420>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009534:	4618      	mov	r0, r3
 8009536:	f7fb fd5c 	bl	8004ff2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	2202      	movs	r2, #2
 800953e:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8009546:	687a      	ldr	r2, [r7, #4]
 8009548:	f8b2 105c 	ldrh.w	r1, [r2, #92]	@ 0x5c
 800954c:	687a      	ldr	r2, [r7, #4]
 800954e:	f8b2 205e 	ldrh.w	r2, [r2, #94]	@ 0x5e
 8009552:	b292      	uxth	r2, r2
 8009554:	1a8a      	subs	r2, r1, r2
 8009556:	b292      	uxth	r2, r2
 8009558:	4611      	mov	r1, r2
 800955a:	6878      	ldr	r0, [r7, #4]
 800955c:	4798      	blx	r3
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800955e:	e106      	b.n	800976e <HAL_UART_IRQHandler+0x696>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009566:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800956a:	429a      	cmp	r2, r3
 800956c:	f040 80ff 	bne.w	800976e <HAL_UART_IRQHandler+0x696>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	f003 0320 	and.w	r3, r3, #32
 800957e:	2b20      	cmp	r3, #32
 8009580:	f040 80f5 	bne.w	800976e <HAL_UART_IRQHandler+0x696>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	2202      	movs	r2, #2
 8009588:	671a      	str	r2, [r3, #112]	@ 0x70
            huart->RxEventCallback(huart, huart->RxXferSize);
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8009590:	687a      	ldr	r2, [r7, #4]
 8009592:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 8009596:	4611      	mov	r1, r2
 8009598:	6878      	ldr	r0, [r7, #4]
 800959a:	4798      	blx	r3
      return;
 800959c:	e0e7      	b.n	800976e <HAL_UART_IRQHandler+0x696>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80095aa:	b29b      	uxth	r3, r3
 80095ac:	1ad3      	subs	r3, r2, r3
 80095ae:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80095b8:	b29b      	uxth	r3, r3
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	f000 80d9 	beq.w	8009772 <HAL_UART_IRQHandler+0x69a>
          && (nb_rx_data > 0U))
 80095c0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	f000 80d4 	beq.w	8009772 <HAL_UART_IRQHandler+0x69a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095d2:	e853 3f00 	ldrex	r3, [r3]
 80095d6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80095d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80095da:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80095de:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	461a      	mov	r2, r3
 80095e8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80095ec:	647b      	str	r3, [r7, #68]	@ 0x44
 80095ee:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095f0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80095f2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80095f4:	e841 2300 	strex	r3, r2, [r1]
 80095f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80095fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d1e4      	bne.n	80095ca <HAL_UART_IRQHandler+0x4f2>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	3308      	adds	r3, #8
 8009606:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009608:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800960a:	e853 3f00 	ldrex	r3, [r3]
 800960e:	623b      	str	r3, [r7, #32]
   return(result);
 8009610:	6a3b      	ldr	r3, [r7, #32]
 8009612:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009616:	f023 0301 	bic.w	r3, r3, #1
 800961a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	3308      	adds	r3, #8
 8009624:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8009628:	633a      	str	r2, [r7, #48]	@ 0x30
 800962a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800962c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800962e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009630:	e841 2300 	strex	r3, r2, [r1]
 8009634:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009636:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009638:	2b00      	cmp	r3, #0
 800963a:	d1e1      	bne.n	8009600 <HAL_UART_IRQHandler+0x528>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	2220      	movs	r2, #32
 8009640:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	2200      	movs	r2, #0
 8009648:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	2200      	movs	r2, #0
 800964e:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009656:	693b      	ldr	r3, [r7, #16]
 8009658:	e853 3f00 	ldrex	r3, [r3]
 800965c:	60fb      	str	r3, [r7, #12]
   return(result);
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	f023 0310 	bic.w	r3, r3, #16
 8009664:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	461a      	mov	r2, r3
 800966e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8009672:	61fb      	str	r3, [r7, #28]
 8009674:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009676:	69b9      	ldr	r1, [r7, #24]
 8009678:	69fa      	ldr	r2, [r7, #28]
 800967a:	e841 2300 	strex	r3, r2, [r1]
 800967e:	617b      	str	r3, [r7, #20]
   return(result);
 8009680:	697b      	ldr	r3, [r7, #20]
 8009682:	2b00      	cmp	r3, #0
 8009684:	d1e4      	bne.n	8009650 <HAL_UART_IRQHandler+0x578>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	2202      	movs	r2, #2
 800968a:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8009692:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	@ 0xce
 8009696:	4611      	mov	r1, r2
 8009698:	6878      	ldr	r0, [r7, #4]
 800969a:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800969c:	e069      	b.n	8009772 <HAL_UART_IRQHandler+0x69a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800969e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80096a2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d010      	beq.n	80096cc <HAL_UART_IRQHandler+0x5f4>
 80096aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80096ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d00a      	beq.n	80096cc <HAL_UART_IRQHandler+0x5f4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80096be:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80096c6:	6878      	ldr	r0, [r7, #4]
 80096c8:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80096ca:	e055      	b.n	8009778 <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80096cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80096d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d014      	beq.n	8009702 <HAL_UART_IRQHandler+0x62a>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80096d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80096dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d105      	bne.n	80096f0 <HAL_UART_IRQHandler+0x618>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80096e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80096e8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d008      	beq.n	8009702 <HAL_UART_IRQHandler+0x62a>
  {
    if (huart->TxISR != NULL)
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d03e      	beq.n	8009776 <HAL_UART_IRQHandler+0x69e>
    {
      huart->TxISR(huart);
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80096fc:	6878      	ldr	r0, [r7, #4]
 80096fe:	4798      	blx	r3
    }
    return;
 8009700:	e039      	b.n	8009776 <HAL_UART_IRQHandler+0x69e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009702:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009706:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800970a:	2b00      	cmp	r3, #0
 800970c:	d009      	beq.n	8009722 <HAL_UART_IRQHandler+0x64a>
 800970e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009712:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009716:	2b00      	cmp	r3, #0
 8009718:	d003      	beq.n	8009722 <HAL_UART_IRQHandler+0x64a>
  {
    UART_EndTransmit_IT(huart);
 800971a:	6878      	ldr	r0, [r7, #4]
 800971c:	f001 f812 	bl	800a744 <UART_EndTransmit_IT>
    return;
 8009720:	e02a      	b.n	8009778 <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009722:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009726:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800972a:	2b00      	cmp	r3, #0
 800972c:	d00b      	beq.n	8009746 <HAL_UART_IRQHandler+0x66e>
 800972e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009732:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8009736:	2b00      	cmp	r3, #0
 8009738:	d005      	beq.n	8009746 <HAL_UART_IRQHandler+0x66e>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8009740:	6878      	ldr	r0, [r7, #4]
 8009742:	4798      	blx	r3
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009744:	e018      	b.n	8009778 <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009746:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800974a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800974e:	2b00      	cmp	r3, #0
 8009750:	d012      	beq.n	8009778 <HAL_UART_IRQHandler+0x6a0>
 8009752:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009756:	2b00      	cmp	r3, #0
 8009758:	da0e      	bge.n	8009778 <HAL_UART_IRQHandler+0x6a0>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8009760:	6878      	ldr	r0, [r7, #4]
 8009762:	4798      	blx	r3
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009764:	e008      	b.n	8009778 <HAL_UART_IRQHandler+0x6a0>
      return;
 8009766:	bf00      	nop
 8009768:	e006      	b.n	8009778 <HAL_UART_IRQHandler+0x6a0>
    return;
 800976a:	bf00      	nop
 800976c:	e004      	b.n	8009778 <HAL_UART_IRQHandler+0x6a0>
      return;
 800976e:	bf00      	nop
 8009770:	e002      	b.n	8009778 <HAL_UART_IRQHandler+0x6a0>
      return;
 8009772:	bf00      	nop
 8009774:	e000      	b.n	8009778 <HAL_UART_IRQHandler+0x6a0>
    return;
 8009776:	bf00      	nop
  }
}
 8009778:	37e8      	adds	r7, #232	@ 0xe8
 800977a:	46bd      	mov	sp, r7
 800977c:	bd80      	pop	{r7, pc}
 800977e:	bf00      	nop

08009780 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009780:	b480      	push	{r7}
 8009782:	b083      	sub	sp, #12
 8009784:	af00      	add	r7, sp, #0
 8009786:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009788:	bf00      	nop
 800978a:	370c      	adds	r7, #12
 800978c:	46bd      	mov	sp, r7
 800978e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009792:	4770      	bx	lr

08009794 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009794:	b480      	push	{r7}
 8009796:	b083      	sub	sp, #12
 8009798:	af00      	add	r7, sp, #0
 800979a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800979c:	bf00      	nop
 800979e:	370c      	adds	r7, #12
 80097a0:	46bd      	mov	sp, r7
 80097a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a6:	4770      	bx	lr

080097a8 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80097a8:	b480      	push	{r7}
 80097aa:	b083      	sub	sp, #12
 80097ac:	af00      	add	r7, sp, #0
 80097ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80097b0:	bf00      	nop
 80097b2:	370c      	adds	r7, #12
 80097b4:	46bd      	mov	sp, r7
 80097b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ba:	4770      	bx	lr

080097bc <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80097bc:	b480      	push	{r7}
 80097be:	b083      	sub	sp, #12
 80097c0:	af00      	add	r7, sp, #0
 80097c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80097c4:	bf00      	nop
 80097c6:	370c      	adds	r7, #12
 80097c8:	46bd      	mov	sp, r7
 80097ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ce:	4770      	bx	lr

080097d0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80097d0:	b480      	push	{r7}
 80097d2:	b083      	sub	sp, #12
 80097d4:	af00      	add	r7, sp, #0
 80097d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80097d8:	bf00      	nop
 80097da:	370c      	adds	r7, #12
 80097dc:	46bd      	mov	sp, r7
 80097de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e2:	4770      	bx	lr

080097e4 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 80097e4:	b480      	push	{r7}
 80097e6:	b083      	sub	sp, #12
 80097e8:	af00      	add	r7, sp, #0
 80097ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 80097ec:	bf00      	nop
 80097ee:	370c      	adds	r7, #12
 80097f0:	46bd      	mov	sp, r7
 80097f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f6:	4770      	bx	lr

080097f8 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 80097f8:	b480      	push	{r7}
 80097fa:	b083      	sub	sp, #12
 80097fc:	af00      	add	r7, sp, #0
 80097fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8009800:	bf00      	nop
 8009802:	370c      	adds	r7, #12
 8009804:	46bd      	mov	sp, r7
 8009806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800980a:	4770      	bx	lr

0800980c <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800980c:	b480      	push	{r7}
 800980e:	b083      	sub	sp, #12
 8009810:	af00      	add	r7, sp, #0
 8009812:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8009814:	bf00      	nop
 8009816:	370c      	adds	r7, #12
 8009818:	46bd      	mov	sp, r7
 800981a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800981e:	4770      	bx	lr

08009820 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009820:	b480      	push	{r7}
 8009822:	b083      	sub	sp, #12
 8009824:	af00      	add	r7, sp, #0
 8009826:	6078      	str	r0, [r7, #4]
 8009828:	460b      	mov	r3, r1
 800982a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800982c:	bf00      	nop
 800982e:	370c      	adds	r7, #12
 8009830:	46bd      	mov	sp, r7
 8009832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009836:	4770      	bx	lr

08009838 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8009838:	b480      	push	{r7}
 800983a:	b083      	sub	sp, #12
 800983c:	af00      	add	r7, sp, #0
 800983e:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	4a1a      	ldr	r2, [pc, #104]	@ (80098ac <UART_InitCallbacksToDefault+0x74>)
 8009844:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	4a19      	ldr	r2, [pc, #100]	@ (80098b0 <UART_InitCallbacksToDefault+0x78>)
 800984c:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	4a18      	ldr	r2, [pc, #96]	@ (80098b4 <UART_InitCallbacksToDefault+0x7c>)
 8009854:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	4a17      	ldr	r2, [pc, #92]	@ (80098b8 <UART_InitCallbacksToDefault+0x80>)
 800985c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	4a16      	ldr	r2, [pc, #88]	@ (80098bc <UART_InitCallbacksToDefault+0x84>)
 8009864:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	4a15      	ldr	r2, [pc, #84]	@ (80098c0 <UART_InitCallbacksToDefault+0x88>)
 800986c:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	4a14      	ldr	r2, [pc, #80]	@ (80098c4 <UART_InitCallbacksToDefault+0x8c>)
 8009874:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	4a13      	ldr	r2, [pc, #76]	@ (80098c8 <UART_InitCallbacksToDefault+0x90>)
 800987c:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	4a12      	ldr	r2, [pc, #72]	@ (80098cc <UART_InitCallbacksToDefault+0x94>)
 8009884:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	4a11      	ldr	r2, [pc, #68]	@ (80098d0 <UART_InitCallbacksToDefault+0x98>)
 800988c:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	4a10      	ldr	r2, [pc, #64]	@ (80098d4 <UART_InitCallbacksToDefault+0x9c>)
 8009894:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	4a0f      	ldr	r2, [pc, #60]	@ (80098d8 <UART_InitCallbacksToDefault+0xa0>)
 800989c:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

}
 80098a0:	bf00      	nop
 80098a2:	370c      	adds	r7, #12
 80098a4:	46bd      	mov	sp, r7
 80098a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098aa:	4770      	bx	lr
 80098ac:	08009795 	.word	0x08009795
 80098b0:	08009781 	.word	0x08009781
 80098b4:	080097bd 	.word	0x080097bd
 80098b8:	080097a9 	.word	0x080097a9
 80098bc:	080097d1 	.word	0x080097d1
 80098c0:	080097e5 	.word	0x080097e5
 80098c4:	080097f9 	.word	0x080097f9
 80098c8:	0800980d 	.word	0x0800980d
 80098cc:	0800b209 	.word	0x0800b209
 80098d0:	0800b21d 	.word	0x0800b21d
 80098d4:	0800b231 	.word	0x0800b231
 80098d8:	08009821 	.word	0x08009821

080098dc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80098dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80098e0:	b08c      	sub	sp, #48	@ 0x30
 80098e2:	af00      	add	r7, sp, #0
 80098e4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80098e6:	2300      	movs	r3, #0
 80098e8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80098ec:	697b      	ldr	r3, [r7, #20]
 80098ee:	689a      	ldr	r2, [r3, #8]
 80098f0:	697b      	ldr	r3, [r7, #20]
 80098f2:	691b      	ldr	r3, [r3, #16]
 80098f4:	431a      	orrs	r2, r3
 80098f6:	697b      	ldr	r3, [r7, #20]
 80098f8:	695b      	ldr	r3, [r3, #20]
 80098fa:	431a      	orrs	r2, r3
 80098fc:	697b      	ldr	r3, [r7, #20]
 80098fe:	69db      	ldr	r3, [r3, #28]
 8009900:	4313      	orrs	r3, r2
 8009902:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009904:	697b      	ldr	r3, [r7, #20]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	681a      	ldr	r2, [r3, #0]
 800990a:	4baa      	ldr	r3, [pc, #680]	@ (8009bb4 <UART_SetConfig+0x2d8>)
 800990c:	4013      	ands	r3, r2
 800990e:	697a      	ldr	r2, [r7, #20]
 8009910:	6812      	ldr	r2, [r2, #0]
 8009912:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009914:	430b      	orrs	r3, r1
 8009916:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009918:	697b      	ldr	r3, [r7, #20]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	685b      	ldr	r3, [r3, #4]
 800991e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009922:	697b      	ldr	r3, [r7, #20]
 8009924:	68da      	ldr	r2, [r3, #12]
 8009926:	697b      	ldr	r3, [r7, #20]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	430a      	orrs	r2, r1
 800992c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800992e:	697b      	ldr	r3, [r7, #20]
 8009930:	699b      	ldr	r3, [r3, #24]
 8009932:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009934:	697b      	ldr	r3, [r7, #20]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	4a9f      	ldr	r2, [pc, #636]	@ (8009bb8 <UART_SetConfig+0x2dc>)
 800993a:	4293      	cmp	r3, r2
 800993c:	d004      	beq.n	8009948 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800993e:	697b      	ldr	r3, [r7, #20]
 8009940:	6a1b      	ldr	r3, [r3, #32]
 8009942:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009944:	4313      	orrs	r3, r2
 8009946:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009948:	697b      	ldr	r3, [r7, #20]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	689b      	ldr	r3, [r3, #8]
 800994e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8009952:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8009956:	697a      	ldr	r2, [r7, #20]
 8009958:	6812      	ldr	r2, [r2, #0]
 800995a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800995c:	430b      	orrs	r3, r1
 800995e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009960:	697b      	ldr	r3, [r7, #20]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009966:	f023 010f 	bic.w	r1, r3, #15
 800996a:	697b      	ldr	r3, [r7, #20]
 800996c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800996e:	697b      	ldr	r3, [r7, #20]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	430a      	orrs	r2, r1
 8009974:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009976:	697b      	ldr	r3, [r7, #20]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	4a90      	ldr	r2, [pc, #576]	@ (8009bbc <UART_SetConfig+0x2e0>)
 800997c:	4293      	cmp	r3, r2
 800997e:	d125      	bne.n	80099cc <UART_SetConfig+0xf0>
 8009980:	4b8f      	ldr	r3, [pc, #572]	@ (8009bc0 <UART_SetConfig+0x2e4>)
 8009982:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009986:	f003 0303 	and.w	r3, r3, #3
 800998a:	2b03      	cmp	r3, #3
 800998c:	d81a      	bhi.n	80099c4 <UART_SetConfig+0xe8>
 800998e:	a201      	add	r2, pc, #4	@ (adr r2, 8009994 <UART_SetConfig+0xb8>)
 8009990:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009994:	080099a5 	.word	0x080099a5
 8009998:	080099b5 	.word	0x080099b5
 800999c:	080099ad 	.word	0x080099ad
 80099a0:	080099bd 	.word	0x080099bd
 80099a4:	2301      	movs	r3, #1
 80099a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80099aa:	e116      	b.n	8009bda <UART_SetConfig+0x2fe>
 80099ac:	2302      	movs	r3, #2
 80099ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80099b2:	e112      	b.n	8009bda <UART_SetConfig+0x2fe>
 80099b4:	2304      	movs	r3, #4
 80099b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80099ba:	e10e      	b.n	8009bda <UART_SetConfig+0x2fe>
 80099bc:	2308      	movs	r3, #8
 80099be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80099c2:	e10a      	b.n	8009bda <UART_SetConfig+0x2fe>
 80099c4:	2310      	movs	r3, #16
 80099c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80099ca:	e106      	b.n	8009bda <UART_SetConfig+0x2fe>
 80099cc:	697b      	ldr	r3, [r7, #20]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	4a7c      	ldr	r2, [pc, #496]	@ (8009bc4 <UART_SetConfig+0x2e8>)
 80099d2:	4293      	cmp	r3, r2
 80099d4:	d138      	bne.n	8009a48 <UART_SetConfig+0x16c>
 80099d6:	4b7a      	ldr	r3, [pc, #488]	@ (8009bc0 <UART_SetConfig+0x2e4>)
 80099d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80099dc:	f003 030c 	and.w	r3, r3, #12
 80099e0:	2b0c      	cmp	r3, #12
 80099e2:	d82d      	bhi.n	8009a40 <UART_SetConfig+0x164>
 80099e4:	a201      	add	r2, pc, #4	@ (adr r2, 80099ec <UART_SetConfig+0x110>)
 80099e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099ea:	bf00      	nop
 80099ec:	08009a21 	.word	0x08009a21
 80099f0:	08009a41 	.word	0x08009a41
 80099f4:	08009a41 	.word	0x08009a41
 80099f8:	08009a41 	.word	0x08009a41
 80099fc:	08009a31 	.word	0x08009a31
 8009a00:	08009a41 	.word	0x08009a41
 8009a04:	08009a41 	.word	0x08009a41
 8009a08:	08009a41 	.word	0x08009a41
 8009a0c:	08009a29 	.word	0x08009a29
 8009a10:	08009a41 	.word	0x08009a41
 8009a14:	08009a41 	.word	0x08009a41
 8009a18:	08009a41 	.word	0x08009a41
 8009a1c:	08009a39 	.word	0x08009a39
 8009a20:	2300      	movs	r3, #0
 8009a22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009a26:	e0d8      	b.n	8009bda <UART_SetConfig+0x2fe>
 8009a28:	2302      	movs	r3, #2
 8009a2a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009a2e:	e0d4      	b.n	8009bda <UART_SetConfig+0x2fe>
 8009a30:	2304      	movs	r3, #4
 8009a32:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009a36:	e0d0      	b.n	8009bda <UART_SetConfig+0x2fe>
 8009a38:	2308      	movs	r3, #8
 8009a3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009a3e:	e0cc      	b.n	8009bda <UART_SetConfig+0x2fe>
 8009a40:	2310      	movs	r3, #16
 8009a42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009a46:	e0c8      	b.n	8009bda <UART_SetConfig+0x2fe>
 8009a48:	697b      	ldr	r3, [r7, #20]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	4a5e      	ldr	r2, [pc, #376]	@ (8009bc8 <UART_SetConfig+0x2ec>)
 8009a4e:	4293      	cmp	r3, r2
 8009a50:	d125      	bne.n	8009a9e <UART_SetConfig+0x1c2>
 8009a52:	4b5b      	ldr	r3, [pc, #364]	@ (8009bc0 <UART_SetConfig+0x2e4>)
 8009a54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009a58:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8009a5c:	2b30      	cmp	r3, #48	@ 0x30
 8009a5e:	d016      	beq.n	8009a8e <UART_SetConfig+0x1b2>
 8009a60:	2b30      	cmp	r3, #48	@ 0x30
 8009a62:	d818      	bhi.n	8009a96 <UART_SetConfig+0x1ba>
 8009a64:	2b20      	cmp	r3, #32
 8009a66:	d00a      	beq.n	8009a7e <UART_SetConfig+0x1a2>
 8009a68:	2b20      	cmp	r3, #32
 8009a6a:	d814      	bhi.n	8009a96 <UART_SetConfig+0x1ba>
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d002      	beq.n	8009a76 <UART_SetConfig+0x19a>
 8009a70:	2b10      	cmp	r3, #16
 8009a72:	d008      	beq.n	8009a86 <UART_SetConfig+0x1aa>
 8009a74:	e00f      	b.n	8009a96 <UART_SetConfig+0x1ba>
 8009a76:	2300      	movs	r3, #0
 8009a78:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009a7c:	e0ad      	b.n	8009bda <UART_SetConfig+0x2fe>
 8009a7e:	2302      	movs	r3, #2
 8009a80:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009a84:	e0a9      	b.n	8009bda <UART_SetConfig+0x2fe>
 8009a86:	2304      	movs	r3, #4
 8009a88:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009a8c:	e0a5      	b.n	8009bda <UART_SetConfig+0x2fe>
 8009a8e:	2308      	movs	r3, #8
 8009a90:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009a94:	e0a1      	b.n	8009bda <UART_SetConfig+0x2fe>
 8009a96:	2310      	movs	r3, #16
 8009a98:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009a9c:	e09d      	b.n	8009bda <UART_SetConfig+0x2fe>
 8009a9e:	697b      	ldr	r3, [r7, #20]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	4a4a      	ldr	r2, [pc, #296]	@ (8009bcc <UART_SetConfig+0x2f0>)
 8009aa4:	4293      	cmp	r3, r2
 8009aa6:	d125      	bne.n	8009af4 <UART_SetConfig+0x218>
 8009aa8:	4b45      	ldr	r3, [pc, #276]	@ (8009bc0 <UART_SetConfig+0x2e4>)
 8009aaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009aae:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8009ab2:	2bc0      	cmp	r3, #192	@ 0xc0
 8009ab4:	d016      	beq.n	8009ae4 <UART_SetConfig+0x208>
 8009ab6:	2bc0      	cmp	r3, #192	@ 0xc0
 8009ab8:	d818      	bhi.n	8009aec <UART_SetConfig+0x210>
 8009aba:	2b80      	cmp	r3, #128	@ 0x80
 8009abc:	d00a      	beq.n	8009ad4 <UART_SetConfig+0x1f8>
 8009abe:	2b80      	cmp	r3, #128	@ 0x80
 8009ac0:	d814      	bhi.n	8009aec <UART_SetConfig+0x210>
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d002      	beq.n	8009acc <UART_SetConfig+0x1f0>
 8009ac6:	2b40      	cmp	r3, #64	@ 0x40
 8009ac8:	d008      	beq.n	8009adc <UART_SetConfig+0x200>
 8009aca:	e00f      	b.n	8009aec <UART_SetConfig+0x210>
 8009acc:	2300      	movs	r3, #0
 8009ace:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009ad2:	e082      	b.n	8009bda <UART_SetConfig+0x2fe>
 8009ad4:	2302      	movs	r3, #2
 8009ad6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009ada:	e07e      	b.n	8009bda <UART_SetConfig+0x2fe>
 8009adc:	2304      	movs	r3, #4
 8009ade:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009ae2:	e07a      	b.n	8009bda <UART_SetConfig+0x2fe>
 8009ae4:	2308      	movs	r3, #8
 8009ae6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009aea:	e076      	b.n	8009bda <UART_SetConfig+0x2fe>
 8009aec:	2310      	movs	r3, #16
 8009aee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009af2:	e072      	b.n	8009bda <UART_SetConfig+0x2fe>
 8009af4:	697b      	ldr	r3, [r7, #20]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	4a35      	ldr	r2, [pc, #212]	@ (8009bd0 <UART_SetConfig+0x2f4>)
 8009afa:	4293      	cmp	r3, r2
 8009afc:	d12a      	bne.n	8009b54 <UART_SetConfig+0x278>
 8009afe:	4b30      	ldr	r3, [pc, #192]	@ (8009bc0 <UART_SetConfig+0x2e4>)
 8009b00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009b04:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009b08:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009b0c:	d01a      	beq.n	8009b44 <UART_SetConfig+0x268>
 8009b0e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009b12:	d81b      	bhi.n	8009b4c <UART_SetConfig+0x270>
 8009b14:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009b18:	d00c      	beq.n	8009b34 <UART_SetConfig+0x258>
 8009b1a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009b1e:	d815      	bhi.n	8009b4c <UART_SetConfig+0x270>
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d003      	beq.n	8009b2c <UART_SetConfig+0x250>
 8009b24:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009b28:	d008      	beq.n	8009b3c <UART_SetConfig+0x260>
 8009b2a:	e00f      	b.n	8009b4c <UART_SetConfig+0x270>
 8009b2c:	2300      	movs	r3, #0
 8009b2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009b32:	e052      	b.n	8009bda <UART_SetConfig+0x2fe>
 8009b34:	2302      	movs	r3, #2
 8009b36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009b3a:	e04e      	b.n	8009bda <UART_SetConfig+0x2fe>
 8009b3c:	2304      	movs	r3, #4
 8009b3e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009b42:	e04a      	b.n	8009bda <UART_SetConfig+0x2fe>
 8009b44:	2308      	movs	r3, #8
 8009b46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009b4a:	e046      	b.n	8009bda <UART_SetConfig+0x2fe>
 8009b4c:	2310      	movs	r3, #16
 8009b4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009b52:	e042      	b.n	8009bda <UART_SetConfig+0x2fe>
 8009b54:	697b      	ldr	r3, [r7, #20]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	4a17      	ldr	r2, [pc, #92]	@ (8009bb8 <UART_SetConfig+0x2dc>)
 8009b5a:	4293      	cmp	r3, r2
 8009b5c:	d13a      	bne.n	8009bd4 <UART_SetConfig+0x2f8>
 8009b5e:	4b18      	ldr	r3, [pc, #96]	@ (8009bc0 <UART_SetConfig+0x2e4>)
 8009b60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009b64:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8009b68:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009b6c:	d01a      	beq.n	8009ba4 <UART_SetConfig+0x2c8>
 8009b6e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009b72:	d81b      	bhi.n	8009bac <UART_SetConfig+0x2d0>
 8009b74:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009b78:	d00c      	beq.n	8009b94 <UART_SetConfig+0x2b8>
 8009b7a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009b7e:	d815      	bhi.n	8009bac <UART_SetConfig+0x2d0>
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d003      	beq.n	8009b8c <UART_SetConfig+0x2b0>
 8009b84:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009b88:	d008      	beq.n	8009b9c <UART_SetConfig+0x2c0>
 8009b8a:	e00f      	b.n	8009bac <UART_SetConfig+0x2d0>
 8009b8c:	2300      	movs	r3, #0
 8009b8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009b92:	e022      	b.n	8009bda <UART_SetConfig+0x2fe>
 8009b94:	2302      	movs	r3, #2
 8009b96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009b9a:	e01e      	b.n	8009bda <UART_SetConfig+0x2fe>
 8009b9c:	2304      	movs	r3, #4
 8009b9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009ba2:	e01a      	b.n	8009bda <UART_SetConfig+0x2fe>
 8009ba4:	2308      	movs	r3, #8
 8009ba6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009baa:	e016      	b.n	8009bda <UART_SetConfig+0x2fe>
 8009bac:	2310      	movs	r3, #16
 8009bae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009bb2:	e012      	b.n	8009bda <UART_SetConfig+0x2fe>
 8009bb4:	cfff69f3 	.word	0xcfff69f3
 8009bb8:	40008000 	.word	0x40008000
 8009bbc:	40013800 	.word	0x40013800
 8009bc0:	40021000 	.word	0x40021000
 8009bc4:	40004400 	.word	0x40004400
 8009bc8:	40004800 	.word	0x40004800
 8009bcc:	40004c00 	.word	0x40004c00
 8009bd0:	40005000 	.word	0x40005000
 8009bd4:	2310      	movs	r3, #16
 8009bd6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009bda:	697b      	ldr	r3, [r7, #20]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	4aae      	ldr	r2, [pc, #696]	@ (8009e98 <UART_SetConfig+0x5bc>)
 8009be0:	4293      	cmp	r3, r2
 8009be2:	f040 8097 	bne.w	8009d14 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009be6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009bea:	2b08      	cmp	r3, #8
 8009bec:	d823      	bhi.n	8009c36 <UART_SetConfig+0x35a>
 8009bee:	a201      	add	r2, pc, #4	@ (adr r2, 8009bf4 <UART_SetConfig+0x318>)
 8009bf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bf4:	08009c19 	.word	0x08009c19
 8009bf8:	08009c37 	.word	0x08009c37
 8009bfc:	08009c21 	.word	0x08009c21
 8009c00:	08009c37 	.word	0x08009c37
 8009c04:	08009c27 	.word	0x08009c27
 8009c08:	08009c37 	.word	0x08009c37
 8009c0c:	08009c37 	.word	0x08009c37
 8009c10:	08009c37 	.word	0x08009c37
 8009c14:	08009c2f 	.word	0x08009c2f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009c18:	f7fc fb28 	bl	800626c <HAL_RCC_GetPCLK1Freq>
 8009c1c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009c1e:	e010      	b.n	8009c42 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009c20:	4b9e      	ldr	r3, [pc, #632]	@ (8009e9c <UART_SetConfig+0x5c0>)
 8009c22:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009c24:	e00d      	b.n	8009c42 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009c26:	f7fc fab3 	bl	8006190 <HAL_RCC_GetSysClockFreq>
 8009c2a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009c2c:	e009      	b.n	8009c42 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009c2e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009c32:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009c34:	e005      	b.n	8009c42 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8009c36:	2300      	movs	r3, #0
 8009c38:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8009c3a:	2301      	movs	r3, #1
 8009c3c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009c40:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009c42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	f000 8130 	beq.w	8009eaa <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009c4a:	697b      	ldr	r3, [r7, #20]
 8009c4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c4e:	4a94      	ldr	r2, [pc, #592]	@ (8009ea0 <UART_SetConfig+0x5c4>)
 8009c50:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009c54:	461a      	mov	r2, r3
 8009c56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c58:	fbb3 f3f2 	udiv	r3, r3, r2
 8009c5c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009c5e:	697b      	ldr	r3, [r7, #20]
 8009c60:	685a      	ldr	r2, [r3, #4]
 8009c62:	4613      	mov	r3, r2
 8009c64:	005b      	lsls	r3, r3, #1
 8009c66:	4413      	add	r3, r2
 8009c68:	69ba      	ldr	r2, [r7, #24]
 8009c6a:	429a      	cmp	r2, r3
 8009c6c:	d305      	bcc.n	8009c7a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009c6e:	697b      	ldr	r3, [r7, #20]
 8009c70:	685b      	ldr	r3, [r3, #4]
 8009c72:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009c74:	69ba      	ldr	r2, [r7, #24]
 8009c76:	429a      	cmp	r2, r3
 8009c78:	d903      	bls.n	8009c82 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8009c7a:	2301      	movs	r3, #1
 8009c7c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009c80:	e113      	b.n	8009eaa <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009c82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c84:	2200      	movs	r2, #0
 8009c86:	60bb      	str	r3, [r7, #8]
 8009c88:	60fa      	str	r2, [r7, #12]
 8009c8a:	697b      	ldr	r3, [r7, #20]
 8009c8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c8e:	4a84      	ldr	r2, [pc, #528]	@ (8009ea0 <UART_SetConfig+0x5c4>)
 8009c90:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009c94:	b29b      	uxth	r3, r3
 8009c96:	2200      	movs	r2, #0
 8009c98:	603b      	str	r3, [r7, #0]
 8009c9a:	607a      	str	r2, [r7, #4]
 8009c9c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009ca0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009ca4:	f7f6 fab8 	bl	8000218 <__aeabi_uldivmod>
 8009ca8:	4602      	mov	r2, r0
 8009caa:	460b      	mov	r3, r1
 8009cac:	4610      	mov	r0, r2
 8009cae:	4619      	mov	r1, r3
 8009cb0:	f04f 0200 	mov.w	r2, #0
 8009cb4:	f04f 0300 	mov.w	r3, #0
 8009cb8:	020b      	lsls	r3, r1, #8
 8009cba:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009cbe:	0202      	lsls	r2, r0, #8
 8009cc0:	6979      	ldr	r1, [r7, #20]
 8009cc2:	6849      	ldr	r1, [r1, #4]
 8009cc4:	0849      	lsrs	r1, r1, #1
 8009cc6:	2000      	movs	r0, #0
 8009cc8:	460c      	mov	r4, r1
 8009cca:	4605      	mov	r5, r0
 8009ccc:	eb12 0804 	adds.w	r8, r2, r4
 8009cd0:	eb43 0905 	adc.w	r9, r3, r5
 8009cd4:	697b      	ldr	r3, [r7, #20]
 8009cd6:	685b      	ldr	r3, [r3, #4]
 8009cd8:	2200      	movs	r2, #0
 8009cda:	469a      	mov	sl, r3
 8009cdc:	4693      	mov	fp, r2
 8009cde:	4652      	mov	r2, sl
 8009ce0:	465b      	mov	r3, fp
 8009ce2:	4640      	mov	r0, r8
 8009ce4:	4649      	mov	r1, r9
 8009ce6:	f7f6 fa97 	bl	8000218 <__aeabi_uldivmod>
 8009cea:	4602      	mov	r2, r0
 8009cec:	460b      	mov	r3, r1
 8009cee:	4613      	mov	r3, r2
 8009cf0:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009cf2:	6a3b      	ldr	r3, [r7, #32]
 8009cf4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009cf8:	d308      	bcc.n	8009d0c <UART_SetConfig+0x430>
 8009cfa:	6a3b      	ldr	r3, [r7, #32]
 8009cfc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009d00:	d204      	bcs.n	8009d0c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8009d02:	697b      	ldr	r3, [r7, #20]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	6a3a      	ldr	r2, [r7, #32]
 8009d08:	60da      	str	r2, [r3, #12]
 8009d0a:	e0ce      	b.n	8009eaa <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8009d0c:	2301      	movs	r3, #1
 8009d0e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009d12:	e0ca      	b.n	8009eaa <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009d14:	697b      	ldr	r3, [r7, #20]
 8009d16:	69db      	ldr	r3, [r3, #28]
 8009d18:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009d1c:	d166      	bne.n	8009dec <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8009d1e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009d22:	2b08      	cmp	r3, #8
 8009d24:	d827      	bhi.n	8009d76 <UART_SetConfig+0x49a>
 8009d26:	a201      	add	r2, pc, #4	@ (adr r2, 8009d2c <UART_SetConfig+0x450>)
 8009d28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d2c:	08009d51 	.word	0x08009d51
 8009d30:	08009d59 	.word	0x08009d59
 8009d34:	08009d61 	.word	0x08009d61
 8009d38:	08009d77 	.word	0x08009d77
 8009d3c:	08009d67 	.word	0x08009d67
 8009d40:	08009d77 	.word	0x08009d77
 8009d44:	08009d77 	.word	0x08009d77
 8009d48:	08009d77 	.word	0x08009d77
 8009d4c:	08009d6f 	.word	0x08009d6f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009d50:	f7fc fa8c 	bl	800626c <HAL_RCC_GetPCLK1Freq>
 8009d54:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009d56:	e014      	b.n	8009d82 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009d58:	f7fc fa9e 	bl	8006298 <HAL_RCC_GetPCLK2Freq>
 8009d5c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009d5e:	e010      	b.n	8009d82 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009d60:	4b4e      	ldr	r3, [pc, #312]	@ (8009e9c <UART_SetConfig+0x5c0>)
 8009d62:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009d64:	e00d      	b.n	8009d82 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009d66:	f7fc fa13 	bl	8006190 <HAL_RCC_GetSysClockFreq>
 8009d6a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009d6c:	e009      	b.n	8009d82 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009d6e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009d72:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009d74:	e005      	b.n	8009d82 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8009d76:	2300      	movs	r3, #0
 8009d78:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8009d7a:	2301      	movs	r3, #1
 8009d7c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009d80:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009d82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	f000 8090 	beq.w	8009eaa <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009d8a:	697b      	ldr	r3, [r7, #20]
 8009d8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d8e:	4a44      	ldr	r2, [pc, #272]	@ (8009ea0 <UART_SetConfig+0x5c4>)
 8009d90:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009d94:	461a      	mov	r2, r3
 8009d96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d98:	fbb3 f3f2 	udiv	r3, r3, r2
 8009d9c:	005a      	lsls	r2, r3, #1
 8009d9e:	697b      	ldr	r3, [r7, #20]
 8009da0:	685b      	ldr	r3, [r3, #4]
 8009da2:	085b      	lsrs	r3, r3, #1
 8009da4:	441a      	add	r2, r3
 8009da6:	697b      	ldr	r3, [r7, #20]
 8009da8:	685b      	ldr	r3, [r3, #4]
 8009daa:	fbb2 f3f3 	udiv	r3, r2, r3
 8009dae:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009db0:	6a3b      	ldr	r3, [r7, #32]
 8009db2:	2b0f      	cmp	r3, #15
 8009db4:	d916      	bls.n	8009de4 <UART_SetConfig+0x508>
 8009db6:	6a3b      	ldr	r3, [r7, #32]
 8009db8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009dbc:	d212      	bcs.n	8009de4 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009dbe:	6a3b      	ldr	r3, [r7, #32]
 8009dc0:	b29b      	uxth	r3, r3
 8009dc2:	f023 030f 	bic.w	r3, r3, #15
 8009dc6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009dc8:	6a3b      	ldr	r3, [r7, #32]
 8009dca:	085b      	lsrs	r3, r3, #1
 8009dcc:	b29b      	uxth	r3, r3
 8009dce:	f003 0307 	and.w	r3, r3, #7
 8009dd2:	b29a      	uxth	r2, r3
 8009dd4:	8bfb      	ldrh	r3, [r7, #30]
 8009dd6:	4313      	orrs	r3, r2
 8009dd8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8009dda:	697b      	ldr	r3, [r7, #20]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	8bfa      	ldrh	r2, [r7, #30]
 8009de0:	60da      	str	r2, [r3, #12]
 8009de2:	e062      	b.n	8009eaa <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8009de4:	2301      	movs	r3, #1
 8009de6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009dea:	e05e      	b.n	8009eaa <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009dec:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009df0:	2b08      	cmp	r3, #8
 8009df2:	d828      	bhi.n	8009e46 <UART_SetConfig+0x56a>
 8009df4:	a201      	add	r2, pc, #4	@ (adr r2, 8009dfc <UART_SetConfig+0x520>)
 8009df6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dfa:	bf00      	nop
 8009dfc:	08009e21 	.word	0x08009e21
 8009e00:	08009e29 	.word	0x08009e29
 8009e04:	08009e31 	.word	0x08009e31
 8009e08:	08009e47 	.word	0x08009e47
 8009e0c:	08009e37 	.word	0x08009e37
 8009e10:	08009e47 	.word	0x08009e47
 8009e14:	08009e47 	.word	0x08009e47
 8009e18:	08009e47 	.word	0x08009e47
 8009e1c:	08009e3f 	.word	0x08009e3f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009e20:	f7fc fa24 	bl	800626c <HAL_RCC_GetPCLK1Freq>
 8009e24:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009e26:	e014      	b.n	8009e52 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009e28:	f7fc fa36 	bl	8006298 <HAL_RCC_GetPCLK2Freq>
 8009e2c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009e2e:	e010      	b.n	8009e52 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009e30:	4b1a      	ldr	r3, [pc, #104]	@ (8009e9c <UART_SetConfig+0x5c0>)
 8009e32:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009e34:	e00d      	b.n	8009e52 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009e36:	f7fc f9ab 	bl	8006190 <HAL_RCC_GetSysClockFreq>
 8009e3a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009e3c:	e009      	b.n	8009e52 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009e3e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009e42:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009e44:	e005      	b.n	8009e52 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8009e46:	2300      	movs	r3, #0
 8009e48:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8009e4a:	2301      	movs	r3, #1
 8009e4c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009e50:	bf00      	nop
    }

    if (pclk != 0U)
 8009e52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d028      	beq.n	8009eaa <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009e58:	697b      	ldr	r3, [r7, #20]
 8009e5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e5c:	4a10      	ldr	r2, [pc, #64]	@ (8009ea0 <UART_SetConfig+0x5c4>)
 8009e5e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009e62:	461a      	mov	r2, r3
 8009e64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e66:	fbb3 f2f2 	udiv	r2, r3, r2
 8009e6a:	697b      	ldr	r3, [r7, #20]
 8009e6c:	685b      	ldr	r3, [r3, #4]
 8009e6e:	085b      	lsrs	r3, r3, #1
 8009e70:	441a      	add	r2, r3
 8009e72:	697b      	ldr	r3, [r7, #20]
 8009e74:	685b      	ldr	r3, [r3, #4]
 8009e76:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e7a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009e7c:	6a3b      	ldr	r3, [r7, #32]
 8009e7e:	2b0f      	cmp	r3, #15
 8009e80:	d910      	bls.n	8009ea4 <UART_SetConfig+0x5c8>
 8009e82:	6a3b      	ldr	r3, [r7, #32]
 8009e84:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009e88:	d20c      	bcs.n	8009ea4 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009e8a:	6a3b      	ldr	r3, [r7, #32]
 8009e8c:	b29a      	uxth	r2, r3
 8009e8e:	697b      	ldr	r3, [r7, #20]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	60da      	str	r2, [r3, #12]
 8009e94:	e009      	b.n	8009eaa <UART_SetConfig+0x5ce>
 8009e96:	bf00      	nop
 8009e98:	40008000 	.word	0x40008000
 8009e9c:	00f42400 	.word	0x00f42400
 8009ea0:	0800bf2c 	.word	0x0800bf2c
      }
      else
      {
        ret = HAL_ERROR;
 8009ea4:	2301      	movs	r3, #1
 8009ea6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009eaa:	697b      	ldr	r3, [r7, #20]
 8009eac:	2201      	movs	r2, #1
 8009eae:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8009eb2:	697b      	ldr	r3, [r7, #20]
 8009eb4:	2201      	movs	r2, #1
 8009eb6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009eba:	697b      	ldr	r3, [r7, #20]
 8009ebc:	2200      	movs	r2, #0
 8009ebe:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8009ec0:	697b      	ldr	r3, [r7, #20]
 8009ec2:	2200      	movs	r2, #0
 8009ec4:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8009ec6:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8009eca:	4618      	mov	r0, r3
 8009ecc:	3730      	adds	r7, #48	@ 0x30
 8009ece:	46bd      	mov	sp, r7
 8009ed0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08009ed4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009ed4:	b480      	push	{r7}
 8009ed6:	b083      	sub	sp, #12
 8009ed8:	af00      	add	r7, sp, #0
 8009eda:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ee0:	f003 0308 	and.w	r3, r3, #8
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d00a      	beq.n	8009efe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	685b      	ldr	r3, [r3, #4]
 8009eee:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	430a      	orrs	r2, r1
 8009efc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f02:	f003 0301 	and.w	r3, r3, #1
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d00a      	beq.n	8009f20 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	685b      	ldr	r3, [r3, #4]
 8009f10:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	430a      	orrs	r2, r1
 8009f1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f24:	f003 0302 	and.w	r3, r3, #2
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d00a      	beq.n	8009f42 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	685b      	ldr	r3, [r3, #4]
 8009f32:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	430a      	orrs	r2, r1
 8009f40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f46:	f003 0304 	and.w	r3, r3, #4
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d00a      	beq.n	8009f64 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	685b      	ldr	r3, [r3, #4]
 8009f54:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	430a      	orrs	r2, r1
 8009f62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f68:	f003 0310 	and.w	r3, r3, #16
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d00a      	beq.n	8009f86 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	689b      	ldr	r3, [r3, #8]
 8009f76:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	430a      	orrs	r2, r1
 8009f84:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f8a:	f003 0320 	and.w	r3, r3, #32
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d00a      	beq.n	8009fa8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	689b      	ldr	r3, [r3, #8]
 8009f98:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	430a      	orrs	r2, r1
 8009fa6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009fac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d01a      	beq.n	8009fea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	685b      	ldr	r3, [r3, #4]
 8009fba:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	430a      	orrs	r2, r1
 8009fc8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009fce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009fd2:	d10a      	bne.n	8009fea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	685b      	ldr	r3, [r3, #4]
 8009fda:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	430a      	orrs	r2, r1
 8009fe8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009fee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d00a      	beq.n	800a00c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	685b      	ldr	r3, [r3, #4]
 8009ffc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	430a      	orrs	r2, r1
 800a00a:	605a      	str	r2, [r3, #4]
  }
}
 800a00c:	bf00      	nop
 800a00e:	370c      	adds	r7, #12
 800a010:	46bd      	mov	sp, r7
 800a012:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a016:	4770      	bx	lr

0800a018 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a018:	b580      	push	{r7, lr}
 800a01a:	b098      	sub	sp, #96	@ 0x60
 800a01c:	af02      	add	r7, sp, #8
 800a01e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	2200      	movs	r2, #0
 800a024:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a028:	f7f9 fae6 	bl	80035f8 <HAL_GetTick>
 800a02c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	f003 0308 	and.w	r3, r3, #8
 800a038:	2b08      	cmp	r3, #8
 800a03a:	d12f      	bne.n	800a09c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a03c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a040:	9300      	str	r3, [sp, #0]
 800a042:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a044:	2200      	movs	r2, #0
 800a046:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800a04a:	6878      	ldr	r0, [r7, #4]
 800a04c:	f000 f88e 	bl	800a16c <UART_WaitOnFlagUntilTimeout>
 800a050:	4603      	mov	r3, r0
 800a052:	2b00      	cmp	r3, #0
 800a054:	d022      	beq.n	800a09c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a05c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a05e:	e853 3f00 	ldrex	r3, [r3]
 800a062:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a064:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a066:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a06a:	653b      	str	r3, [r7, #80]	@ 0x50
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	461a      	mov	r2, r3
 800a072:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a074:	647b      	str	r3, [r7, #68]	@ 0x44
 800a076:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a078:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a07a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a07c:	e841 2300 	strex	r3, r2, [r1]
 800a080:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a082:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a084:	2b00      	cmp	r3, #0
 800a086:	d1e6      	bne.n	800a056 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	2220      	movs	r2, #32
 800a08c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	2200      	movs	r2, #0
 800a094:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a098:	2303      	movs	r3, #3
 800a09a:	e063      	b.n	800a164 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	f003 0304 	and.w	r3, r3, #4
 800a0a6:	2b04      	cmp	r3, #4
 800a0a8:	d149      	bne.n	800a13e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a0aa:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a0ae:	9300      	str	r3, [sp, #0]
 800a0b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a0b2:	2200      	movs	r2, #0
 800a0b4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800a0b8:	6878      	ldr	r0, [r7, #4]
 800a0ba:	f000 f857 	bl	800a16c <UART_WaitOnFlagUntilTimeout>
 800a0be:	4603      	mov	r3, r0
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d03c      	beq.n	800a13e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0cc:	e853 3f00 	ldrex	r3, [r3]
 800a0d0:	623b      	str	r3, [r7, #32]
   return(result);
 800a0d2:	6a3b      	ldr	r3, [r7, #32]
 800a0d4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a0d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	461a      	mov	r2, r3
 800a0e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a0e2:	633b      	str	r3, [r7, #48]	@ 0x30
 800a0e4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0e6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a0e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a0ea:	e841 2300 	strex	r3, r2, [r1]
 800a0ee:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a0f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d1e6      	bne.n	800a0c4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	3308      	adds	r3, #8
 800a0fc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0fe:	693b      	ldr	r3, [r7, #16]
 800a100:	e853 3f00 	ldrex	r3, [r3]
 800a104:	60fb      	str	r3, [r7, #12]
   return(result);
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	f023 0301 	bic.w	r3, r3, #1
 800a10c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	3308      	adds	r3, #8
 800a114:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a116:	61fa      	str	r2, [r7, #28]
 800a118:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a11a:	69b9      	ldr	r1, [r7, #24]
 800a11c:	69fa      	ldr	r2, [r7, #28]
 800a11e:	e841 2300 	strex	r3, r2, [r1]
 800a122:	617b      	str	r3, [r7, #20]
   return(result);
 800a124:	697b      	ldr	r3, [r7, #20]
 800a126:	2b00      	cmp	r3, #0
 800a128:	d1e5      	bne.n	800a0f6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	2220      	movs	r2, #32
 800a12e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	2200      	movs	r2, #0
 800a136:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a13a:	2303      	movs	r3, #3
 800a13c:	e012      	b.n	800a164 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	2220      	movs	r2, #32
 800a142:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	2220      	movs	r2, #32
 800a14a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	2200      	movs	r2, #0
 800a152:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	2200      	movs	r2, #0
 800a158:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	2200      	movs	r2, #0
 800a15e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a162:	2300      	movs	r3, #0
}
 800a164:	4618      	mov	r0, r3
 800a166:	3758      	adds	r7, #88	@ 0x58
 800a168:	46bd      	mov	sp, r7
 800a16a:	bd80      	pop	{r7, pc}

0800a16c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a16c:	b580      	push	{r7, lr}
 800a16e:	b084      	sub	sp, #16
 800a170:	af00      	add	r7, sp, #0
 800a172:	60f8      	str	r0, [r7, #12]
 800a174:	60b9      	str	r1, [r7, #8]
 800a176:	603b      	str	r3, [r7, #0]
 800a178:	4613      	mov	r3, r2
 800a17a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a17c:	e04f      	b.n	800a21e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a17e:	69bb      	ldr	r3, [r7, #24]
 800a180:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a184:	d04b      	beq.n	800a21e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a186:	f7f9 fa37 	bl	80035f8 <HAL_GetTick>
 800a18a:	4602      	mov	r2, r0
 800a18c:	683b      	ldr	r3, [r7, #0]
 800a18e:	1ad3      	subs	r3, r2, r3
 800a190:	69ba      	ldr	r2, [r7, #24]
 800a192:	429a      	cmp	r2, r3
 800a194:	d302      	bcc.n	800a19c <UART_WaitOnFlagUntilTimeout+0x30>
 800a196:	69bb      	ldr	r3, [r7, #24]
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d101      	bne.n	800a1a0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a19c:	2303      	movs	r3, #3
 800a19e:	e04e      	b.n	800a23e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	f003 0304 	and.w	r3, r3, #4
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d037      	beq.n	800a21e <UART_WaitOnFlagUntilTimeout+0xb2>
 800a1ae:	68bb      	ldr	r3, [r7, #8]
 800a1b0:	2b80      	cmp	r3, #128	@ 0x80
 800a1b2:	d034      	beq.n	800a21e <UART_WaitOnFlagUntilTimeout+0xb2>
 800a1b4:	68bb      	ldr	r3, [r7, #8]
 800a1b6:	2b40      	cmp	r3, #64	@ 0x40
 800a1b8:	d031      	beq.n	800a21e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	69db      	ldr	r3, [r3, #28]
 800a1c0:	f003 0308 	and.w	r3, r3, #8
 800a1c4:	2b08      	cmp	r3, #8
 800a1c6:	d110      	bne.n	800a1ea <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	2208      	movs	r2, #8
 800a1ce:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a1d0:	68f8      	ldr	r0, [r7, #12]
 800a1d2:	f000 f99c 	bl	800a50e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	2208      	movs	r2, #8
 800a1da:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	2200      	movs	r2, #0
 800a1e2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800a1e6:	2301      	movs	r3, #1
 800a1e8:	e029      	b.n	800a23e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	69db      	ldr	r3, [r3, #28]
 800a1f0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a1f4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a1f8:	d111      	bne.n	800a21e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a202:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a204:	68f8      	ldr	r0, [r7, #12]
 800a206:	f000 f982 	bl	800a50e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	2220      	movs	r2, #32
 800a20e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	2200      	movs	r2, #0
 800a216:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800a21a:	2303      	movs	r3, #3
 800a21c:	e00f      	b.n	800a23e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	69da      	ldr	r2, [r3, #28]
 800a224:	68bb      	ldr	r3, [r7, #8]
 800a226:	4013      	ands	r3, r2
 800a228:	68ba      	ldr	r2, [r7, #8]
 800a22a:	429a      	cmp	r2, r3
 800a22c:	bf0c      	ite	eq
 800a22e:	2301      	moveq	r3, #1
 800a230:	2300      	movne	r3, #0
 800a232:	b2db      	uxtb	r3, r3
 800a234:	461a      	mov	r2, r3
 800a236:	79fb      	ldrb	r3, [r7, #7]
 800a238:	429a      	cmp	r2, r3
 800a23a:	d0a0      	beq.n	800a17e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a23c:	2300      	movs	r3, #0
}
 800a23e:	4618      	mov	r0, r3
 800a240:	3710      	adds	r7, #16
 800a242:	46bd      	mov	sp, r7
 800a244:	bd80      	pop	{r7, pc}
	...

0800a248 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a248:	b480      	push	{r7}
 800a24a:	b0a3      	sub	sp, #140	@ 0x8c
 800a24c:	af00      	add	r7, sp, #0
 800a24e:	60f8      	str	r0, [r7, #12]
 800a250:	60b9      	str	r1, [r7, #8]
 800a252:	4613      	mov	r3, r2
 800a254:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	68ba      	ldr	r2, [r7, #8]
 800a25a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	88fa      	ldrh	r2, [r7, #6]
 800a260:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	88fa      	ldrh	r2, [r7, #6]
 800a268:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	2200      	movs	r2, #0
 800a270:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	689b      	ldr	r3, [r3, #8]
 800a276:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a27a:	d10e      	bne.n	800a29a <UART_Start_Receive_IT+0x52>
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	691b      	ldr	r3, [r3, #16]
 800a280:	2b00      	cmp	r3, #0
 800a282:	d105      	bne.n	800a290 <UART_Start_Receive_IT+0x48>
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800a28a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a28e:	e02d      	b.n	800a2ec <UART_Start_Receive_IT+0xa4>
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	22ff      	movs	r2, #255	@ 0xff
 800a294:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a298:	e028      	b.n	800a2ec <UART_Start_Receive_IT+0xa4>
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	689b      	ldr	r3, [r3, #8]
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d10d      	bne.n	800a2be <UART_Start_Receive_IT+0x76>
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	691b      	ldr	r3, [r3, #16]
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d104      	bne.n	800a2b4 <UART_Start_Receive_IT+0x6c>
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	22ff      	movs	r2, #255	@ 0xff
 800a2ae:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a2b2:	e01b      	b.n	800a2ec <UART_Start_Receive_IT+0xa4>
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	227f      	movs	r2, #127	@ 0x7f
 800a2b8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a2bc:	e016      	b.n	800a2ec <UART_Start_Receive_IT+0xa4>
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	689b      	ldr	r3, [r3, #8]
 800a2c2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a2c6:	d10d      	bne.n	800a2e4 <UART_Start_Receive_IT+0x9c>
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	691b      	ldr	r3, [r3, #16]
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d104      	bne.n	800a2da <UART_Start_Receive_IT+0x92>
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	227f      	movs	r2, #127	@ 0x7f
 800a2d4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a2d8:	e008      	b.n	800a2ec <UART_Start_Receive_IT+0xa4>
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	223f      	movs	r2, #63	@ 0x3f
 800a2de:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a2e2:	e003      	b.n	800a2ec <UART_Start_Receive_IT+0xa4>
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	2200      	movs	r2, #0
 800a2e8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	2200      	movs	r2, #0
 800a2f0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	2222      	movs	r2, #34	@ 0x22
 800a2f8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	3308      	adds	r3, #8
 800a302:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a304:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a306:	e853 3f00 	ldrex	r3, [r3]
 800a30a:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800a30c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a30e:	f043 0301 	orr.w	r3, r3, #1
 800a312:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	3308      	adds	r3, #8
 800a31c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800a320:	673a      	str	r2, [r7, #112]	@ 0x70
 800a322:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a324:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800a326:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800a328:	e841 2300 	strex	r3, r2, [r1]
 800a32c:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 800a32e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a330:	2b00      	cmp	r3, #0
 800a332:	d1e3      	bne.n	800a2fc <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a338:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a33c:	d14f      	bne.n	800a3de <UART_Start_Receive_IT+0x196>
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800a344:	88fa      	ldrh	r2, [r7, #6]
 800a346:	429a      	cmp	r2, r3
 800a348:	d349      	bcc.n	800a3de <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	689b      	ldr	r3, [r3, #8]
 800a34e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a352:	d107      	bne.n	800a364 <UART_Start_Receive_IT+0x11c>
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	691b      	ldr	r3, [r3, #16]
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d103      	bne.n	800a364 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	4a47      	ldr	r2, [pc, #284]	@ (800a47c <UART_Start_Receive_IT+0x234>)
 800a360:	675a      	str	r2, [r3, #116]	@ 0x74
 800a362:	e002      	b.n	800a36a <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	4a46      	ldr	r2, [pc, #280]	@ (800a480 <UART_Start_Receive_IT+0x238>)
 800a368:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	691b      	ldr	r3, [r3, #16]
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d01a      	beq.n	800a3a8 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a378:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a37a:	e853 3f00 	ldrex	r3, [r3]
 800a37e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800a380:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a382:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a386:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	461a      	mov	r2, r3
 800a390:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800a394:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a396:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a398:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800a39a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800a39c:	e841 2300 	strex	r3, r2, [r1]
 800a3a0:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800a3a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d1e4      	bne.n	800a372 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	3308      	adds	r3, #8
 800a3ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a3b2:	e853 3f00 	ldrex	r3, [r3]
 800a3b6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a3b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3ba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a3be:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	3308      	adds	r3, #8
 800a3c6:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800a3c8:	64ba      	str	r2, [r7, #72]	@ 0x48
 800a3ca:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3cc:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a3ce:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a3d0:	e841 2300 	strex	r3, r2, [r1]
 800a3d4:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800a3d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d1e5      	bne.n	800a3a8 <UART_Start_Receive_IT+0x160>
 800a3dc:	e046      	b.n	800a46c <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	689b      	ldr	r3, [r3, #8]
 800a3e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a3e6:	d107      	bne.n	800a3f8 <UART_Start_Receive_IT+0x1b0>
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	691b      	ldr	r3, [r3, #16]
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d103      	bne.n	800a3f8 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	4a24      	ldr	r2, [pc, #144]	@ (800a484 <UART_Start_Receive_IT+0x23c>)
 800a3f4:	675a      	str	r2, [r3, #116]	@ 0x74
 800a3f6:	e002      	b.n	800a3fe <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	4a23      	ldr	r2, [pc, #140]	@ (800a488 <UART_Start_Receive_IT+0x240>)
 800a3fc:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	691b      	ldr	r3, [r3, #16]
 800a402:	2b00      	cmp	r3, #0
 800a404:	d019      	beq.n	800a43a <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a40c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a40e:	e853 3f00 	ldrex	r3, [r3]
 800a412:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a414:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a416:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800a41a:	677b      	str	r3, [r7, #116]	@ 0x74
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	461a      	mov	r2, r3
 800a422:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a424:	637b      	str	r3, [r7, #52]	@ 0x34
 800a426:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a428:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a42a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a42c:	e841 2300 	strex	r3, r2, [r1]
 800a430:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800a432:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a434:	2b00      	cmp	r3, #0
 800a436:	d1e6      	bne.n	800a406 <UART_Start_Receive_IT+0x1be>
 800a438:	e018      	b.n	800a46c <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a440:	697b      	ldr	r3, [r7, #20]
 800a442:	e853 3f00 	ldrex	r3, [r3]
 800a446:	613b      	str	r3, [r7, #16]
   return(result);
 800a448:	693b      	ldr	r3, [r7, #16]
 800a44a:	f043 0320 	orr.w	r3, r3, #32
 800a44e:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	461a      	mov	r2, r3
 800a456:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a458:	623b      	str	r3, [r7, #32]
 800a45a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a45c:	69f9      	ldr	r1, [r7, #28]
 800a45e:	6a3a      	ldr	r2, [r7, #32]
 800a460:	e841 2300 	strex	r3, r2, [r1]
 800a464:	61bb      	str	r3, [r7, #24]
   return(result);
 800a466:	69bb      	ldr	r3, [r7, #24]
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d1e6      	bne.n	800a43a <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800a46c:	2300      	movs	r3, #0
}
 800a46e:	4618      	mov	r0, r3
 800a470:	378c      	adds	r7, #140	@ 0x8c
 800a472:	46bd      	mov	sp, r7
 800a474:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a478:	4770      	bx	lr
 800a47a:	bf00      	nop
 800a47c:	0800ae91 	.word	0x0800ae91
 800a480:	0800ab21 	.word	0x0800ab21
 800a484:	0800a961 	.word	0x0800a961
 800a488:	0800a7a1 	.word	0x0800a7a1

0800a48c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a48c:	b480      	push	{r7}
 800a48e:	b08f      	sub	sp, #60	@ 0x3c
 800a490:	af00      	add	r7, sp, #0
 800a492:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a49a:	6a3b      	ldr	r3, [r7, #32]
 800a49c:	e853 3f00 	ldrex	r3, [r3]
 800a4a0:	61fb      	str	r3, [r7, #28]
   return(result);
 800a4a2:	69fb      	ldr	r3, [r7, #28]
 800a4a4:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800a4a8:	637b      	str	r3, [r7, #52]	@ 0x34
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	461a      	mov	r2, r3
 800a4b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a4b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a4b4:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4b6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a4b8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a4ba:	e841 2300 	strex	r3, r2, [r1]
 800a4be:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a4c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d1e6      	bne.n	800a494 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	3308      	adds	r3, #8
 800a4cc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	e853 3f00 	ldrex	r3, [r3]
 800a4d4:	60bb      	str	r3, [r7, #8]
   return(result);
 800a4d6:	68bb      	ldr	r3, [r7, #8]
 800a4d8:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800a4dc:	633b      	str	r3, [r7, #48]	@ 0x30
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	3308      	adds	r3, #8
 800a4e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a4e6:	61ba      	str	r2, [r7, #24]
 800a4e8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4ea:	6979      	ldr	r1, [r7, #20]
 800a4ec:	69ba      	ldr	r2, [r7, #24]
 800a4ee:	e841 2300 	strex	r3, r2, [r1]
 800a4f2:	613b      	str	r3, [r7, #16]
   return(result);
 800a4f4:	693b      	ldr	r3, [r7, #16]
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d1e5      	bne.n	800a4c6 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	2220      	movs	r2, #32
 800a4fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800a502:	bf00      	nop
 800a504:	373c      	adds	r7, #60	@ 0x3c
 800a506:	46bd      	mov	sp, r7
 800a508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a50c:	4770      	bx	lr

0800a50e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a50e:	b480      	push	{r7}
 800a510:	b095      	sub	sp, #84	@ 0x54
 800a512:	af00      	add	r7, sp, #0
 800a514:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a51c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a51e:	e853 3f00 	ldrex	r3, [r3]
 800a522:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a524:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a526:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a52a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	461a      	mov	r2, r3
 800a532:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a534:	643b      	str	r3, [r7, #64]	@ 0x40
 800a536:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a538:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a53a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a53c:	e841 2300 	strex	r3, r2, [r1]
 800a540:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a542:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a544:	2b00      	cmp	r3, #0
 800a546:	d1e6      	bne.n	800a516 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	3308      	adds	r3, #8
 800a54e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a550:	6a3b      	ldr	r3, [r7, #32]
 800a552:	e853 3f00 	ldrex	r3, [r3]
 800a556:	61fb      	str	r3, [r7, #28]
   return(result);
 800a558:	69fb      	ldr	r3, [r7, #28]
 800a55a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a55e:	f023 0301 	bic.w	r3, r3, #1
 800a562:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	3308      	adds	r3, #8
 800a56a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a56c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a56e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a570:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a572:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a574:	e841 2300 	strex	r3, r2, [r1]
 800a578:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a57a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d1e3      	bne.n	800a548 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a584:	2b01      	cmp	r3, #1
 800a586:	d118      	bne.n	800a5ba <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	e853 3f00 	ldrex	r3, [r3]
 800a594:	60bb      	str	r3, [r7, #8]
   return(result);
 800a596:	68bb      	ldr	r3, [r7, #8]
 800a598:	f023 0310 	bic.w	r3, r3, #16
 800a59c:	647b      	str	r3, [r7, #68]	@ 0x44
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	461a      	mov	r2, r3
 800a5a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a5a6:	61bb      	str	r3, [r7, #24]
 800a5a8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5aa:	6979      	ldr	r1, [r7, #20]
 800a5ac:	69ba      	ldr	r2, [r7, #24]
 800a5ae:	e841 2300 	strex	r3, r2, [r1]
 800a5b2:	613b      	str	r3, [r7, #16]
   return(result);
 800a5b4:	693b      	ldr	r3, [r7, #16]
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d1e6      	bne.n	800a588 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	2220      	movs	r2, #32
 800a5be:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	2200      	movs	r2, #0
 800a5c6:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	2200      	movs	r2, #0
 800a5cc:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800a5ce:	bf00      	nop
 800a5d0:	3754      	adds	r7, #84	@ 0x54
 800a5d2:	46bd      	mov	sp, r7
 800a5d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5d8:	4770      	bx	lr

0800a5da <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a5da:	b580      	push	{r7, lr}
 800a5dc:	b090      	sub	sp, #64	@ 0x40
 800a5de:	af00      	add	r7, sp, #0
 800a5e0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a5e6:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	f003 0320 	and.w	r3, r3, #32
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d137      	bne.n	800a666 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800a5f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a5f8:	2200      	movs	r2, #0
 800a5fa:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a5fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	3308      	adds	r3, #8
 800a604:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a608:	e853 3f00 	ldrex	r3, [r3]
 800a60c:	623b      	str	r3, [r7, #32]
   return(result);
 800a60e:	6a3b      	ldr	r3, [r7, #32]
 800a610:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a614:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a616:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	3308      	adds	r3, #8
 800a61c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a61e:	633a      	str	r2, [r7, #48]	@ 0x30
 800a620:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a622:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a624:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a626:	e841 2300 	strex	r3, r2, [r1]
 800a62a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a62c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d1e5      	bne.n	800a5fe <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a632:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a638:	693b      	ldr	r3, [r7, #16]
 800a63a:	e853 3f00 	ldrex	r3, [r3]
 800a63e:	60fb      	str	r3, [r7, #12]
   return(result);
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a646:	637b      	str	r3, [r7, #52]	@ 0x34
 800a648:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	461a      	mov	r2, r3
 800a64e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a650:	61fb      	str	r3, [r7, #28]
 800a652:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a654:	69b9      	ldr	r1, [r7, #24]
 800a656:	69fa      	ldr	r2, [r7, #28]
 800a658:	e841 2300 	strex	r3, r2, [r1]
 800a65c:	617b      	str	r3, [r7, #20]
   return(result);
 800a65e:	697b      	ldr	r3, [r7, #20]
 800a660:	2b00      	cmp	r3, #0
 800a662:	d1e6      	bne.n	800a632 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a664:	e004      	b.n	800a670 <UART_DMATransmitCplt+0x96>
    huart->TxCpltCallback(huart);
 800a666:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a668:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a66c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800a66e:	4798      	blx	r3
}
 800a670:	bf00      	nop
 800a672:	3740      	adds	r7, #64	@ 0x40
 800a674:	46bd      	mov	sp, r7
 800a676:	bd80      	pop	{r7, pc}

0800a678 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a678:	b580      	push	{r7, lr}
 800a67a:	b084      	sub	sp, #16
 800a67c:	af00      	add	r7, sp, #0
 800a67e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a684:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a68c:	68f8      	ldr	r0, [r7, #12]
 800a68e:	4798      	blx	r3
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a690:	bf00      	nop
 800a692:	3710      	adds	r7, #16
 800a694:	46bd      	mov	sp, r7
 800a696:	bd80      	pop	{r7, pc}

0800a698 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a698:	b580      	push	{r7, lr}
 800a69a:	b086      	sub	sp, #24
 800a69c:	af00      	add	r7, sp, #0
 800a69e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a6a4:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800a6a6:	697b      	ldr	r3, [r7, #20]
 800a6a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a6ac:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800a6ae:	697b      	ldr	r3, [r7, #20]
 800a6b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a6b4:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800a6b6:	697b      	ldr	r3, [r7, #20]
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	689b      	ldr	r3, [r3, #8]
 800a6bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a6c0:	2b80      	cmp	r3, #128	@ 0x80
 800a6c2:	d109      	bne.n	800a6d8 <UART_DMAError+0x40>
 800a6c4:	693b      	ldr	r3, [r7, #16]
 800a6c6:	2b21      	cmp	r3, #33	@ 0x21
 800a6c8:	d106      	bne.n	800a6d8 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800a6ca:	697b      	ldr	r3, [r7, #20]
 800a6cc:	2200      	movs	r2, #0
 800a6ce:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800a6d2:	6978      	ldr	r0, [r7, #20]
 800a6d4:	f7ff feda 	bl	800a48c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800a6d8:	697b      	ldr	r3, [r7, #20]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	689b      	ldr	r3, [r3, #8]
 800a6de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a6e2:	2b40      	cmp	r3, #64	@ 0x40
 800a6e4:	d109      	bne.n	800a6fa <UART_DMAError+0x62>
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	2b22      	cmp	r3, #34	@ 0x22
 800a6ea:	d106      	bne.n	800a6fa <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800a6ec:	697b      	ldr	r3, [r7, #20]
 800a6ee:	2200      	movs	r2, #0
 800a6f0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800a6f4:	6978      	ldr	r0, [r7, #20]
 800a6f6:	f7ff ff0a 	bl	800a50e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a6fa:	697b      	ldr	r3, [r7, #20]
 800a6fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a700:	f043 0210 	orr.w	r2, r3, #16
 800a704:	697b      	ldr	r3, [r7, #20]
 800a706:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800a70a:	697b      	ldr	r3, [r7, #20]
 800a70c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a710:	6978      	ldr	r0, [r7, #20]
 800a712:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a714:	bf00      	nop
 800a716:	3718      	adds	r7, #24
 800a718:	46bd      	mov	sp, r7
 800a71a:	bd80      	pop	{r7, pc}

0800a71c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a71c:	b580      	push	{r7, lr}
 800a71e:	b084      	sub	sp, #16
 800a720:	af00      	add	r7, sp, #0
 800a722:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a728:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	2200      	movs	r2, #0
 800a72e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a738:	68f8      	ldr	r0, [r7, #12]
 800a73a:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a73c:	bf00      	nop
 800a73e:	3710      	adds	r7, #16
 800a740:	46bd      	mov	sp, r7
 800a742:	bd80      	pop	{r7, pc}

0800a744 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a744:	b580      	push	{r7, lr}
 800a746:	b088      	sub	sp, #32
 800a748:	af00      	add	r7, sp, #0
 800a74a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	e853 3f00 	ldrex	r3, [r3]
 800a758:	60bb      	str	r3, [r7, #8]
   return(result);
 800a75a:	68bb      	ldr	r3, [r7, #8]
 800a75c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a760:	61fb      	str	r3, [r7, #28]
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	461a      	mov	r2, r3
 800a768:	69fb      	ldr	r3, [r7, #28]
 800a76a:	61bb      	str	r3, [r7, #24]
 800a76c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a76e:	6979      	ldr	r1, [r7, #20]
 800a770:	69ba      	ldr	r2, [r7, #24]
 800a772:	e841 2300 	strex	r3, r2, [r1]
 800a776:	613b      	str	r3, [r7, #16]
   return(result);
 800a778:	693b      	ldr	r3, [r7, #16]
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d1e6      	bne.n	800a74c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	2220      	movs	r2, #32
 800a782:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	2200      	movs	r2, #0
 800a78a:	679a      	str	r2, [r3, #120]	@ 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a792:	6878      	ldr	r0, [r7, #4]
 800a794:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a796:	bf00      	nop
 800a798:	3720      	adds	r7, #32
 800a79a:	46bd      	mov	sp, r7
 800a79c:	bd80      	pop	{r7, pc}
	...

0800a7a0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800a7a0:	b580      	push	{r7, lr}
 800a7a2:	b09c      	sub	sp, #112	@ 0x70
 800a7a4:	af00      	add	r7, sp, #0
 800a7a6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800a7ae:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a7b8:	2b22      	cmp	r3, #34	@ 0x22
 800a7ba:	f040 80c2 	bne.w	800a942 <UART_RxISR_8BIT+0x1a2>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a7c4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800a7c8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800a7cc:	b2d9      	uxtb	r1, r3
 800a7ce:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800a7d2:	b2da      	uxtb	r2, r3
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a7d8:	400a      	ands	r2, r1
 800a7da:	b2d2      	uxtb	r2, r2
 800a7dc:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a7e2:	1c5a      	adds	r2, r3, #1
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a7ee:	b29b      	uxth	r3, r3
 800a7f0:	3b01      	subs	r3, #1
 800a7f2:	b29a      	uxth	r2, r3
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a800:	b29b      	uxth	r3, r3
 800a802:	2b00      	cmp	r3, #0
 800a804:	f040 80a5 	bne.w	800a952 <UART_RxISR_8BIT+0x1b2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a80e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a810:	e853 3f00 	ldrex	r3, [r3]
 800a814:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a816:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a818:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a81c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	461a      	mov	r2, r3
 800a824:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a826:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a828:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a82a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a82c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a82e:	e841 2300 	strex	r3, r2, [r1]
 800a832:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a834:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a836:	2b00      	cmp	r3, #0
 800a838:	d1e6      	bne.n	800a808 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	3308      	adds	r3, #8
 800a840:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a842:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a844:	e853 3f00 	ldrex	r3, [r3]
 800a848:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a84a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a84c:	f023 0301 	bic.w	r3, r3, #1
 800a850:	667b      	str	r3, [r7, #100]	@ 0x64
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	3308      	adds	r3, #8
 800a858:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800a85a:	647a      	str	r2, [r7, #68]	@ 0x44
 800a85c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a85e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a860:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a862:	e841 2300 	strex	r3, r2, [r1]
 800a866:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a868:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d1e5      	bne.n	800a83a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	2220      	movs	r2, #32
 800a872:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	2200      	movs	r2, #0
 800a87a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	2200      	movs	r2, #0
 800a880:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	4a35      	ldr	r2, [pc, #212]	@ (800a95c <UART_RxISR_8BIT+0x1bc>)
 800a888:	4293      	cmp	r3, r2
 800a88a:	d01f      	beq.n	800a8cc <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	685b      	ldr	r3, [r3, #4]
 800a892:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a896:	2b00      	cmp	r3, #0
 800a898:	d018      	beq.n	800a8cc <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8a2:	e853 3f00 	ldrex	r3, [r3]
 800a8a6:	623b      	str	r3, [r7, #32]
   return(result);
 800a8a8:	6a3b      	ldr	r3, [r7, #32]
 800a8aa:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a8ae:	663b      	str	r3, [r7, #96]	@ 0x60
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	461a      	mov	r2, r3
 800a8b6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a8b8:	633b      	str	r3, [r7, #48]	@ 0x30
 800a8ba:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8bc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a8be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a8c0:	e841 2300 	strex	r3, r2, [r1]
 800a8c4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a8c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d1e6      	bne.n	800a89a <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a8d0:	2b01      	cmp	r3, #1
 800a8d2:	d130      	bne.n	800a936 <UART_RxISR_8BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	2200      	movs	r2, #0
 800a8d8:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8e0:	693b      	ldr	r3, [r7, #16]
 800a8e2:	e853 3f00 	ldrex	r3, [r3]
 800a8e6:	60fb      	str	r3, [r7, #12]
   return(result);
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	f023 0310 	bic.w	r3, r3, #16
 800a8ee:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	461a      	mov	r2, r3
 800a8f6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a8f8:	61fb      	str	r3, [r7, #28]
 800a8fa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8fc:	69b9      	ldr	r1, [r7, #24]
 800a8fe:	69fa      	ldr	r2, [r7, #28]
 800a900:	e841 2300 	strex	r3, r2, [r1]
 800a904:	617b      	str	r3, [r7, #20]
   return(result);
 800a906:	697b      	ldr	r3, [r7, #20]
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d1e6      	bne.n	800a8da <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	69db      	ldr	r3, [r3, #28]
 800a912:	f003 0310 	and.w	r3, r3, #16
 800a916:	2b10      	cmp	r3, #16
 800a918:	d103      	bne.n	800a922 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	2210      	movs	r2, #16
 800a920:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800a928:	687a      	ldr	r2, [r7, #4]
 800a92a:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800a92e:	4611      	mov	r1, r2
 800a930:	6878      	ldr	r0, [r7, #4]
 800a932:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a934:	e00d      	b.n	800a952 <UART_RxISR_8BIT+0x1b2>
        huart->RxCpltCallback(huart);
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800a93c:	6878      	ldr	r0, [r7, #4]
 800a93e:	4798      	blx	r3
}
 800a940:	e007      	b.n	800a952 <UART_RxISR_8BIT+0x1b2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	699a      	ldr	r2, [r3, #24]
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	f042 0208 	orr.w	r2, r2, #8
 800a950:	619a      	str	r2, [r3, #24]
}
 800a952:	bf00      	nop
 800a954:	3770      	adds	r7, #112	@ 0x70
 800a956:	46bd      	mov	sp, r7
 800a958:	bd80      	pop	{r7, pc}
 800a95a:	bf00      	nop
 800a95c:	40008000 	.word	0x40008000

0800a960 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800a960:	b580      	push	{r7, lr}
 800a962:	b09c      	sub	sp, #112	@ 0x70
 800a964:	af00      	add	r7, sp, #0
 800a966:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800a96e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a978:	2b22      	cmp	r3, #34	@ 0x22
 800a97a:	f040 80c2 	bne.w	800ab02 <UART_RxISR_16BIT+0x1a2>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a984:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a98c:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800a98e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800a992:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800a996:	4013      	ands	r3, r2
 800a998:	b29a      	uxth	r2, r3
 800a99a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a99c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a9a2:	1c9a      	adds	r2, r3, #2
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a9ae:	b29b      	uxth	r3, r3
 800a9b0:	3b01      	subs	r3, #1
 800a9b2:	b29a      	uxth	r2, r3
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a9c0:	b29b      	uxth	r3, r3
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	f040 80a5 	bne.w	800ab12 <UART_RxISR_16BIT+0x1b2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a9d0:	e853 3f00 	ldrex	r3, [r3]
 800a9d4:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800a9d6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a9d8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a9dc:	667b      	str	r3, [r7, #100]	@ 0x64
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	461a      	mov	r2, r3
 800a9e4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a9e6:	657b      	str	r3, [r7, #84]	@ 0x54
 800a9e8:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9ea:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800a9ec:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a9ee:	e841 2300 	strex	r3, r2, [r1]
 800a9f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800a9f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d1e6      	bne.n	800a9c8 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	3308      	adds	r3, #8
 800aa00:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa04:	e853 3f00 	ldrex	r3, [r3]
 800aa08:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800aa0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa0c:	f023 0301 	bic.w	r3, r3, #1
 800aa10:	663b      	str	r3, [r7, #96]	@ 0x60
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	3308      	adds	r3, #8
 800aa18:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800aa1a:	643a      	str	r2, [r7, #64]	@ 0x40
 800aa1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa1e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800aa20:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800aa22:	e841 2300 	strex	r3, r2, [r1]
 800aa26:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800aa28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d1e5      	bne.n	800a9fa <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	2220      	movs	r2, #32
 800aa32:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	2200      	movs	r2, #0
 800aa3a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	2200      	movs	r2, #0
 800aa40:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	4a35      	ldr	r2, [pc, #212]	@ (800ab1c <UART_RxISR_16BIT+0x1bc>)
 800aa48:	4293      	cmp	r3, r2
 800aa4a:	d01f      	beq.n	800aa8c <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	685b      	ldr	r3, [r3, #4]
 800aa52:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d018      	beq.n	800aa8c <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa60:	6a3b      	ldr	r3, [r7, #32]
 800aa62:	e853 3f00 	ldrex	r3, [r3]
 800aa66:	61fb      	str	r3, [r7, #28]
   return(result);
 800aa68:	69fb      	ldr	r3, [r7, #28]
 800aa6a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800aa6e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	461a      	mov	r2, r3
 800aa76:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800aa78:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800aa7a:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa7c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800aa7e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800aa80:	e841 2300 	strex	r3, r2, [r1]
 800aa84:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800aa86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d1e6      	bne.n	800aa5a <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aa90:	2b01      	cmp	r3, #1
 800aa92:	d130      	bne.n	800aaf6 <UART_RxISR_16BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	2200      	movs	r2, #0
 800aa98:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	e853 3f00 	ldrex	r3, [r3]
 800aaa6:	60bb      	str	r3, [r7, #8]
   return(result);
 800aaa8:	68bb      	ldr	r3, [r7, #8]
 800aaaa:	f023 0310 	bic.w	r3, r3, #16
 800aaae:	65bb      	str	r3, [r7, #88]	@ 0x58
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	461a      	mov	r2, r3
 800aab6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800aab8:	61bb      	str	r3, [r7, #24]
 800aaba:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aabc:	6979      	ldr	r1, [r7, #20]
 800aabe:	69ba      	ldr	r2, [r7, #24]
 800aac0:	e841 2300 	strex	r3, r2, [r1]
 800aac4:	613b      	str	r3, [r7, #16]
   return(result);
 800aac6:	693b      	ldr	r3, [r7, #16]
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d1e6      	bne.n	800aa9a <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	69db      	ldr	r3, [r3, #28]
 800aad2:	f003 0310 	and.w	r3, r3, #16
 800aad6:	2b10      	cmp	r3, #16
 800aad8:	d103      	bne.n	800aae2 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	2210      	movs	r2, #16
 800aae0:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800aae8:	687a      	ldr	r2, [r7, #4]
 800aaea:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800aaee:	4611      	mov	r1, r2
 800aaf0:	6878      	ldr	r0, [r7, #4]
 800aaf2:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800aaf4:	e00d      	b.n	800ab12 <UART_RxISR_16BIT+0x1b2>
        huart->RxCpltCallback(huart);
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800aafc:	6878      	ldr	r0, [r7, #4]
 800aafe:	4798      	blx	r3
}
 800ab00:	e007      	b.n	800ab12 <UART_RxISR_16BIT+0x1b2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	699a      	ldr	r2, [r3, #24]
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	f042 0208 	orr.w	r2, r2, #8
 800ab10:	619a      	str	r2, [r3, #24]
}
 800ab12:	bf00      	nop
 800ab14:	3770      	adds	r7, #112	@ 0x70
 800ab16:	46bd      	mov	sp, r7
 800ab18:	bd80      	pop	{r7, pc}
 800ab1a:	bf00      	nop
 800ab1c:	40008000 	.word	0x40008000

0800ab20 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800ab20:	b580      	push	{r7, lr}
 800ab22:	b0ac      	sub	sp, #176	@ 0xb0
 800ab24:	af00      	add	r7, sp, #0
 800ab26:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800ab2e:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	69db      	ldr	r3, [r3, #28]
 800ab38:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	689b      	ldr	r3, [r3, #8]
 800ab4c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ab56:	2b22      	cmp	r3, #34	@ 0x22
 800ab58:	f040 8189 	bne.w	800ae6e <UART_RxISR_8BIT_FIFOEN+0x34e>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800ab62:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800ab66:	e12c      	b.n	800adc2 <UART_RxISR_8BIT_FIFOEN+0x2a2>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab6e:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800ab72:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800ab76:	b2d9      	uxtb	r1, r3
 800ab78:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 800ab7c:	b2da      	uxtb	r2, r3
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ab82:	400a      	ands	r2, r1
 800ab84:	b2d2      	uxtb	r2, r2
 800ab86:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ab8c:	1c5a      	adds	r2, r3, #1
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ab98:	b29b      	uxth	r3, r3
 800ab9a:	3b01      	subs	r3, #1
 800ab9c:	b29a      	uxth	r2, r3
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	69db      	ldr	r3, [r3, #28]
 800abaa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800abae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800abb2:	f003 0307 	and.w	r3, r3, #7
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d055      	beq.n	800ac66 <UART_RxISR_8BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800abba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800abbe:	f003 0301 	and.w	r3, r3, #1
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d011      	beq.n	800abea <UART_RxISR_8BIT_FIFOEN+0xca>
 800abc6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800abca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d00b      	beq.n	800abea <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	2201      	movs	r2, #1
 800abd8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800abe0:	f043 0201 	orr.w	r2, r3, #1
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800abea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800abee:	f003 0302 	and.w	r3, r3, #2
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d011      	beq.n	800ac1a <UART_RxISR_8BIT_FIFOEN+0xfa>
 800abf6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800abfa:	f003 0301 	and.w	r3, r3, #1
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d00b      	beq.n	800ac1a <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	2202      	movs	r2, #2
 800ac08:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ac10:	f043 0204 	orr.w	r2, r3, #4
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ac1a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ac1e:	f003 0304 	and.w	r3, r3, #4
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d011      	beq.n	800ac4a <UART_RxISR_8BIT_FIFOEN+0x12a>
 800ac26:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800ac2a:	f003 0301 	and.w	r3, r3, #1
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d00b      	beq.n	800ac4a <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	2204      	movs	r2, #4
 800ac38:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ac40:	f043 0202 	orr.w	r2, r3, #2
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d008      	beq.n	800ac66 <UART_RxISR_8BIT_FIFOEN+0x146>
        {
          /* Non Blocking error : transfer could go on.
          Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800ac5a:	6878      	ldr	r0, [r7, #4]
 800ac5c:	4798      	blx	r3
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	2200      	movs	r2, #0
 800ac62:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ac6c:	b29b      	uxth	r3, r3
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	f040 80a7 	bne.w	800adc2 <UART_RxISR_8BIT_FIFOEN+0x2a2>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac7a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ac7c:	e853 3f00 	ldrex	r3, [r3]
 800ac80:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 800ac82:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ac84:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ac88:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	461a      	mov	r2, r3
 800ac92:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800ac96:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800ac98:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac9a:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800ac9c:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800ac9e:	e841 2300 	strex	r3, r2, [r1]
 800aca2:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 800aca4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d1e4      	bne.n	800ac74 <UART_RxISR_8BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	3308      	adds	r3, #8
 800acb0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acb2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800acb4:	e853 3f00 	ldrex	r3, [r3]
 800acb8:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800acba:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800acbc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800acc0:	f023 0301 	bic.w	r3, r3, #1
 800acc4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	3308      	adds	r3, #8
 800acce:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800acd2:	66ba      	str	r2, [r7, #104]	@ 0x68
 800acd4:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acd6:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800acd8:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800acda:	e841 2300 	strex	r3, r2, [r1]
 800acde:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800ace0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d1e1      	bne.n	800acaa <UART_RxISR_8BIT_FIFOEN+0x18a>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	2220      	movs	r2, #32
 800acea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	2200      	movs	r2, #0
 800acf2:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	2200      	movs	r2, #0
 800acf8:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	4a62      	ldr	r2, [pc, #392]	@ (800ae88 <UART_RxISR_8BIT_FIFOEN+0x368>)
 800ad00:	4293      	cmp	r3, r2
 800ad02:	d021      	beq.n	800ad48 <UART_RxISR_8BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	685b      	ldr	r3, [r3, #4]
 800ad0a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d01a      	beq.n	800ad48 <UART_RxISR_8BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad18:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ad1a:	e853 3f00 	ldrex	r3, [r3]
 800ad1e:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800ad20:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ad22:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800ad26:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	461a      	mov	r2, r3
 800ad30:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800ad34:	657b      	str	r3, [r7, #84]	@ 0x54
 800ad36:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad38:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800ad3a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800ad3c:	e841 2300 	strex	r3, r2, [r1]
 800ad40:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800ad42:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d1e4      	bne.n	800ad12 <UART_RxISR_8BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ad4c:	2b01      	cmp	r3, #1
 800ad4e:	d132      	bne.n	800adb6 <UART_RxISR_8BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	2200      	movs	r2, #0
 800ad54:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ad5e:	e853 3f00 	ldrex	r3, [r3]
 800ad62:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800ad64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad66:	f023 0310 	bic.w	r3, r3, #16
 800ad6a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	461a      	mov	r2, r3
 800ad74:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800ad78:	643b      	str	r3, [r7, #64]	@ 0x40
 800ad7a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad7c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ad7e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ad80:	e841 2300 	strex	r3, r2, [r1]
 800ad84:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ad86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d1e4      	bne.n	800ad56 <UART_RxISR_8BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	69db      	ldr	r3, [r3, #28]
 800ad92:	f003 0310 	and.w	r3, r3, #16
 800ad96:	2b10      	cmp	r3, #16
 800ad98:	d103      	bne.n	800ada2 <UART_RxISR_8BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	2210      	movs	r2, #16
 800ada0:	621a      	str	r2, [r3, #32]
          }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800ada8:	687a      	ldr	r2, [r7, #4]
 800adaa:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800adae:	4611      	mov	r1, r2
 800adb0:	6878      	ldr	r0, [r7, #4]
 800adb2:	4798      	blx	r3
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 800adb4:	e010      	b.n	800add8 <UART_RxISR_8BIT_FIFOEN+0x2b8>
          huart->RxCpltCallback(huart);
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800adbc:	6878      	ldr	r0, [r7, #4]
 800adbe:	4798      	blx	r3
        break;
 800adc0:	e00a      	b.n	800add8 <UART_RxISR_8BIT_FIFOEN+0x2b8>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800adc2:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d006      	beq.n	800add8 <UART_RxISR_8BIT_FIFOEN+0x2b8>
 800adca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800adce:	f003 0320 	and.w	r3, r3, #32
 800add2:	2b00      	cmp	r3, #0
 800add4:	f47f aec8 	bne.w	800ab68 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800adde:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800ade2:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d049      	beq.n	800ae7e <UART_RxISR_8BIT_FIFOEN+0x35e>
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800adf0:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800adf4:	429a      	cmp	r2, r3
 800adf6:	d242      	bcs.n	800ae7e <UART_RxISR_8BIT_FIFOEN+0x35e>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	3308      	adds	r3, #8
 800adfe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae00:	6a3b      	ldr	r3, [r7, #32]
 800ae02:	e853 3f00 	ldrex	r3, [r3]
 800ae06:	61fb      	str	r3, [r7, #28]
   return(result);
 800ae08:	69fb      	ldr	r3, [r7, #28]
 800ae0a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ae0e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	3308      	adds	r3, #8
 800ae18:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800ae1c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ae1e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae20:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ae22:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ae24:	e841 2300 	strex	r3, r2, [r1]
 800ae28:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ae2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d1e3      	bne.n	800adf8 <UART_RxISR_8BIT_FIFOEN+0x2d8>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	4a16      	ldr	r2, [pc, #88]	@ (800ae8c <UART_RxISR_8BIT_FIFOEN+0x36c>)
 800ae34:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	e853 3f00 	ldrex	r3, [r3]
 800ae42:	60bb      	str	r3, [r7, #8]
   return(result);
 800ae44:	68bb      	ldr	r3, [r7, #8]
 800ae46:	f043 0320 	orr.w	r3, r3, #32
 800ae4a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	461a      	mov	r2, r3
 800ae54:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800ae58:	61bb      	str	r3, [r7, #24]
 800ae5a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae5c:	6979      	ldr	r1, [r7, #20]
 800ae5e:	69ba      	ldr	r2, [r7, #24]
 800ae60:	e841 2300 	strex	r3, r2, [r1]
 800ae64:	613b      	str	r3, [r7, #16]
   return(result);
 800ae66:	693b      	ldr	r3, [r7, #16]
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d1e4      	bne.n	800ae36 <UART_RxISR_8BIT_FIFOEN+0x316>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ae6c:	e007      	b.n	800ae7e <UART_RxISR_8BIT_FIFOEN+0x35e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	699a      	ldr	r2, [r3, #24]
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	f042 0208 	orr.w	r2, r2, #8
 800ae7c:	619a      	str	r2, [r3, #24]
}
 800ae7e:	bf00      	nop
 800ae80:	37b0      	adds	r7, #176	@ 0xb0
 800ae82:	46bd      	mov	sp, r7
 800ae84:	bd80      	pop	{r7, pc}
 800ae86:	bf00      	nop
 800ae88:	40008000 	.word	0x40008000
 800ae8c:	0800a7a1 	.word	0x0800a7a1

0800ae90 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800ae90:	b580      	push	{r7, lr}
 800ae92:	b0ae      	sub	sp, #184	@ 0xb8
 800ae94:	af00      	add	r7, sp, #0
 800ae96:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800ae9e:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	69db      	ldr	r3, [r3, #28]
 800aea8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	689b      	ldr	r3, [r3, #8]
 800aebc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800aec6:	2b22      	cmp	r3, #34	@ 0x22
 800aec8:	f040 818d 	bne.w	800b1e6 <UART_RxISR_16BIT_FIFOEN+0x356>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800aed2:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800aed6:	e130      	b.n	800b13a <UART_RxISR_16BIT_FIFOEN+0x2aa>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aede:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aee6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800aeea:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800aeee:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800aef2:	4013      	ands	r3, r2
 800aef4:	b29a      	uxth	r2, r3
 800aef6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800aefa:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800af00:	1c9a      	adds	r2, r3, #2
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800af0c:	b29b      	uxth	r3, r3
 800af0e:	3b01      	subs	r3, #1
 800af10:	b29a      	uxth	r2, r3
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	69db      	ldr	r3, [r3, #28]
 800af1e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800af22:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800af26:	f003 0307 	and.w	r3, r3, #7
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d055      	beq.n	800afda <UART_RxISR_16BIT_FIFOEN+0x14a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800af2e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800af32:	f003 0301 	and.w	r3, r3, #1
 800af36:	2b00      	cmp	r3, #0
 800af38:	d011      	beq.n	800af5e <UART_RxISR_16BIT_FIFOEN+0xce>
 800af3a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800af3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800af42:	2b00      	cmp	r3, #0
 800af44:	d00b      	beq.n	800af5e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	2201      	movs	r2, #1
 800af4c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800af54:	f043 0201 	orr.w	r2, r3, #1
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800af5e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800af62:	f003 0302 	and.w	r3, r3, #2
 800af66:	2b00      	cmp	r3, #0
 800af68:	d011      	beq.n	800af8e <UART_RxISR_16BIT_FIFOEN+0xfe>
 800af6a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800af6e:	f003 0301 	and.w	r3, r3, #1
 800af72:	2b00      	cmp	r3, #0
 800af74:	d00b      	beq.n	800af8e <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	2202      	movs	r2, #2
 800af7c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800af84:	f043 0204 	orr.w	r2, r3, #4
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800af8e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800af92:	f003 0304 	and.w	r3, r3, #4
 800af96:	2b00      	cmp	r3, #0
 800af98:	d011      	beq.n	800afbe <UART_RxISR_16BIT_FIFOEN+0x12e>
 800af9a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800af9e:	f003 0301 	and.w	r3, r3, #1
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d00b      	beq.n	800afbe <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	2204      	movs	r2, #4
 800afac:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800afb4:	f043 0202 	orr.w	r2, r3, #2
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d008      	beq.n	800afda <UART_RxISR_16BIT_FIFOEN+0x14a>
        {
          /* Non Blocking error : transfer could go on.
          Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800afce:	6878      	ldr	r0, [r7, #4]
 800afd0:	4798      	blx	r3
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	2200      	movs	r2, #0
 800afd6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800afe0:	b29b      	uxth	r3, r3
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	f040 80a9 	bne.w	800b13a <UART_RxISR_16BIT_FIFOEN+0x2aa>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afee:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800aff0:	e853 3f00 	ldrex	r3, [r3]
 800aff4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800aff6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800aff8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800affc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	461a      	mov	r2, r3
 800b006:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800b00a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800b00e:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b010:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800b012:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800b016:	e841 2300 	strex	r3, r2, [r1]
 800b01a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800b01c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d1e2      	bne.n	800afe8 <UART_RxISR_16BIT_FIFOEN+0x158>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	3308      	adds	r3, #8
 800b028:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b02a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b02c:	e853 3f00 	ldrex	r3, [r3]
 800b030:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800b032:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b034:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b038:	f023 0301 	bic.w	r3, r3, #1
 800b03c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	3308      	adds	r3, #8
 800b046:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800b04a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800b04c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b04e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800b050:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800b052:	e841 2300 	strex	r3, r2, [r1]
 800b056:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800b058:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d1e1      	bne.n	800b022 <UART_RxISR_16BIT_FIFOEN+0x192>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	2220      	movs	r2, #32
 800b062:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	2200      	movs	r2, #0
 800b06a:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	2200      	movs	r2, #0
 800b070:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	4a62      	ldr	r2, [pc, #392]	@ (800b200 <UART_RxISR_16BIT_FIFOEN+0x370>)
 800b078:	4293      	cmp	r3, r2
 800b07a:	d021      	beq.n	800b0c0 <UART_RxISR_16BIT_FIFOEN+0x230>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	685b      	ldr	r3, [r3, #4]
 800b082:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b086:	2b00      	cmp	r3, #0
 800b088:	d01a      	beq.n	800b0c0 <UART_RxISR_16BIT_FIFOEN+0x230>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b090:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b092:	e853 3f00 	ldrex	r3, [r3]
 800b096:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b098:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b09a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800b09e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	461a      	mov	r2, r3
 800b0a8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800b0ac:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b0ae:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0b0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b0b2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b0b4:	e841 2300 	strex	r3, r2, [r1]
 800b0b8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b0ba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d1e4      	bne.n	800b08a <UART_RxISR_16BIT_FIFOEN+0x1fa>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b0c4:	2b01      	cmp	r3, #1
 800b0c6:	d132      	bne.n	800b12e <UART_RxISR_16BIT_FIFOEN+0x29e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	2200      	movs	r2, #0
 800b0cc:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0d6:	e853 3f00 	ldrex	r3, [r3]
 800b0da:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b0dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b0de:	f023 0310 	bic.w	r3, r3, #16
 800b0e2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	461a      	mov	r2, r3
 800b0ec:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800b0f0:	647b      	str	r3, [r7, #68]	@ 0x44
 800b0f2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0f4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b0f6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b0f8:	e841 2300 	strex	r3, r2, [r1]
 800b0fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b0fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b100:	2b00      	cmp	r3, #0
 800b102:	d1e4      	bne.n	800b0ce <UART_RxISR_16BIT_FIFOEN+0x23e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	69db      	ldr	r3, [r3, #28]
 800b10a:	f003 0310 	and.w	r3, r3, #16
 800b10e:	2b10      	cmp	r3, #16
 800b110:	d103      	bne.n	800b11a <UART_RxISR_16BIT_FIFOEN+0x28a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	2210      	movs	r2, #16
 800b118:	621a      	str	r2, [r3, #32]
          }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800b120:	687a      	ldr	r2, [r7, #4]
 800b122:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800b126:	4611      	mov	r1, r2
 800b128:	6878      	ldr	r0, [r7, #4]
 800b12a:	4798      	blx	r3
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 800b12c:	e010      	b.n	800b150 <UART_RxISR_16BIT_FIFOEN+0x2c0>
          huart->RxCpltCallback(huart);
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800b134:	6878      	ldr	r0, [r7, #4]
 800b136:	4798      	blx	r3
        break;
 800b138:	e00a      	b.n	800b150 <UART_RxISR_16BIT_FIFOEN+0x2c0>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800b13a:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d006      	beq.n	800b150 <UART_RxISR_16BIT_FIFOEN+0x2c0>
 800b142:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b146:	f003 0320 	and.w	r3, r3, #32
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	f47f aec4 	bne.w	800aed8 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b156:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800b15a:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d049      	beq.n	800b1f6 <UART_RxISR_16BIT_FIFOEN+0x366>
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800b168:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800b16c:	429a      	cmp	r2, r3
 800b16e:	d242      	bcs.n	800b1f6 <UART_RxISR_16BIT_FIFOEN+0x366>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	3308      	adds	r3, #8
 800b176:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b178:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b17a:	e853 3f00 	ldrex	r3, [r3]
 800b17e:	623b      	str	r3, [r7, #32]
   return(result);
 800b180:	6a3b      	ldr	r3, [r7, #32]
 800b182:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b186:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	3308      	adds	r3, #8
 800b190:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800b194:	633a      	str	r2, [r7, #48]	@ 0x30
 800b196:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b198:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b19a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b19c:	e841 2300 	strex	r3, r2, [r1]
 800b1a0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b1a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d1e3      	bne.n	800b170 <UART_RxISR_16BIT_FIFOEN+0x2e0>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	4a16      	ldr	r2, [pc, #88]	@ (800b204 <UART_RxISR_16BIT_FIFOEN+0x374>)
 800b1ac:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1b4:	693b      	ldr	r3, [r7, #16]
 800b1b6:	e853 3f00 	ldrex	r3, [r3]
 800b1ba:	60fb      	str	r3, [r7, #12]
   return(result);
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	f043 0320 	orr.w	r3, r3, #32
 800b1c2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	461a      	mov	r2, r3
 800b1cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b1d0:	61fb      	str	r3, [r7, #28]
 800b1d2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1d4:	69b9      	ldr	r1, [r7, #24]
 800b1d6:	69fa      	ldr	r2, [r7, #28]
 800b1d8:	e841 2300 	strex	r3, r2, [r1]
 800b1dc:	617b      	str	r3, [r7, #20]
   return(result);
 800b1de:	697b      	ldr	r3, [r7, #20]
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d1e4      	bne.n	800b1ae <UART_RxISR_16BIT_FIFOEN+0x31e>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b1e4:	e007      	b.n	800b1f6 <UART_RxISR_16BIT_FIFOEN+0x366>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	699a      	ldr	r2, [r3, #24]
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	f042 0208 	orr.w	r2, r2, #8
 800b1f4:	619a      	str	r2, [r3, #24]
}
 800b1f6:	bf00      	nop
 800b1f8:	37b8      	adds	r7, #184	@ 0xb8
 800b1fa:	46bd      	mov	sp, r7
 800b1fc:	bd80      	pop	{r7, pc}
 800b1fe:	bf00      	nop
 800b200:	40008000 	.word	0x40008000
 800b204:	0800a961 	.word	0x0800a961

0800b208 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800b208:	b480      	push	{r7}
 800b20a:	b083      	sub	sp, #12
 800b20c:	af00      	add	r7, sp, #0
 800b20e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800b210:	bf00      	nop
 800b212:	370c      	adds	r7, #12
 800b214:	46bd      	mov	sp, r7
 800b216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b21a:	4770      	bx	lr

0800b21c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800b21c:	b480      	push	{r7}
 800b21e:	b083      	sub	sp, #12
 800b220:	af00      	add	r7, sp, #0
 800b222:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800b224:	bf00      	nop
 800b226:	370c      	adds	r7, #12
 800b228:	46bd      	mov	sp, r7
 800b22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b22e:	4770      	bx	lr

0800b230 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800b230:	b480      	push	{r7}
 800b232:	b083      	sub	sp, #12
 800b234:	af00      	add	r7, sp, #0
 800b236:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800b238:	bf00      	nop
 800b23a:	370c      	adds	r7, #12
 800b23c:	46bd      	mov	sp, r7
 800b23e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b242:	4770      	bx	lr

0800b244 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b244:	b480      	push	{r7}
 800b246:	b085      	sub	sp, #20
 800b248:	af00      	add	r7, sp, #0
 800b24a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b252:	2b01      	cmp	r3, #1
 800b254:	d101      	bne.n	800b25a <HAL_UARTEx_DisableFifoMode+0x16>
 800b256:	2302      	movs	r3, #2
 800b258:	e027      	b.n	800b2aa <HAL_UARTEx_DisableFifoMode+0x66>
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	2201      	movs	r2, #1
 800b25e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	2224      	movs	r2, #36	@ 0x24
 800b266:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	681a      	ldr	r2, [r3, #0]
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	f022 0201 	bic.w	r2, r2, #1
 800b280:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800b288:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	2200      	movs	r2, #0
 800b28e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	68fa      	ldr	r2, [r7, #12]
 800b296:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	2220      	movs	r2, #32
 800b29c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	2200      	movs	r2, #0
 800b2a4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b2a8:	2300      	movs	r3, #0
}
 800b2aa:	4618      	mov	r0, r3
 800b2ac:	3714      	adds	r7, #20
 800b2ae:	46bd      	mov	sp, r7
 800b2b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2b4:	4770      	bx	lr

0800b2b6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b2b6:	b580      	push	{r7, lr}
 800b2b8:	b084      	sub	sp, #16
 800b2ba:	af00      	add	r7, sp, #0
 800b2bc:	6078      	str	r0, [r7, #4]
 800b2be:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b2c6:	2b01      	cmp	r3, #1
 800b2c8:	d101      	bne.n	800b2ce <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b2ca:	2302      	movs	r3, #2
 800b2cc:	e02d      	b.n	800b32a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	2201      	movs	r2, #1
 800b2d2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	2224      	movs	r2, #36	@ 0x24
 800b2da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	681a      	ldr	r2, [r3, #0]
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	f022 0201 	bic.w	r2, r2, #1
 800b2f4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	689b      	ldr	r3, [r3, #8]
 800b2fc:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	683a      	ldr	r2, [r7, #0]
 800b306:	430a      	orrs	r2, r1
 800b308:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b30a:	6878      	ldr	r0, [r7, #4]
 800b30c:	f000 f850 	bl	800b3b0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	68fa      	ldr	r2, [r7, #12]
 800b316:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	2220      	movs	r2, #32
 800b31c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	2200      	movs	r2, #0
 800b324:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b328:	2300      	movs	r3, #0
}
 800b32a:	4618      	mov	r0, r3
 800b32c:	3710      	adds	r7, #16
 800b32e:	46bd      	mov	sp, r7
 800b330:	bd80      	pop	{r7, pc}

0800b332 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b332:	b580      	push	{r7, lr}
 800b334:	b084      	sub	sp, #16
 800b336:	af00      	add	r7, sp, #0
 800b338:	6078      	str	r0, [r7, #4]
 800b33a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b342:	2b01      	cmp	r3, #1
 800b344:	d101      	bne.n	800b34a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b346:	2302      	movs	r3, #2
 800b348:	e02d      	b.n	800b3a6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	2201      	movs	r2, #1
 800b34e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	2224      	movs	r2, #36	@ 0x24
 800b356:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	681a      	ldr	r2, [r3, #0]
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	f022 0201 	bic.w	r2, r2, #1
 800b370:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	689b      	ldr	r3, [r3, #8]
 800b378:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	683a      	ldr	r2, [r7, #0]
 800b382:	430a      	orrs	r2, r1
 800b384:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b386:	6878      	ldr	r0, [r7, #4]
 800b388:	f000 f812 	bl	800b3b0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	68fa      	ldr	r2, [r7, #12]
 800b392:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	2220      	movs	r2, #32
 800b398:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	2200      	movs	r2, #0
 800b3a0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b3a4:	2300      	movs	r3, #0
}
 800b3a6:	4618      	mov	r0, r3
 800b3a8:	3710      	adds	r7, #16
 800b3aa:	46bd      	mov	sp, r7
 800b3ac:	bd80      	pop	{r7, pc}
	...

0800b3b0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b3b0:	b480      	push	{r7}
 800b3b2:	b085      	sub	sp, #20
 800b3b4:	af00      	add	r7, sp, #0
 800b3b6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d108      	bne.n	800b3d2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	2201      	movs	r2, #1
 800b3c4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	2201      	movs	r2, #1
 800b3cc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b3d0:	e031      	b.n	800b436 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b3d2:	2308      	movs	r3, #8
 800b3d4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b3d6:	2308      	movs	r3, #8
 800b3d8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	689b      	ldr	r3, [r3, #8]
 800b3e0:	0e5b      	lsrs	r3, r3, #25
 800b3e2:	b2db      	uxtb	r3, r3
 800b3e4:	f003 0307 	and.w	r3, r3, #7
 800b3e8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	689b      	ldr	r3, [r3, #8]
 800b3f0:	0f5b      	lsrs	r3, r3, #29
 800b3f2:	b2db      	uxtb	r3, r3
 800b3f4:	f003 0307 	and.w	r3, r3, #7
 800b3f8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b3fa:	7bbb      	ldrb	r3, [r7, #14]
 800b3fc:	7b3a      	ldrb	r2, [r7, #12]
 800b3fe:	4911      	ldr	r1, [pc, #68]	@ (800b444 <UARTEx_SetNbDataToProcess+0x94>)
 800b400:	5c8a      	ldrb	r2, [r1, r2]
 800b402:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b406:	7b3a      	ldrb	r2, [r7, #12]
 800b408:	490f      	ldr	r1, [pc, #60]	@ (800b448 <UARTEx_SetNbDataToProcess+0x98>)
 800b40a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b40c:	fb93 f3f2 	sdiv	r3, r3, r2
 800b410:	b29a      	uxth	r2, r3
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b418:	7bfb      	ldrb	r3, [r7, #15]
 800b41a:	7b7a      	ldrb	r2, [r7, #13]
 800b41c:	4909      	ldr	r1, [pc, #36]	@ (800b444 <UARTEx_SetNbDataToProcess+0x94>)
 800b41e:	5c8a      	ldrb	r2, [r1, r2]
 800b420:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b424:	7b7a      	ldrb	r2, [r7, #13]
 800b426:	4908      	ldr	r1, [pc, #32]	@ (800b448 <UARTEx_SetNbDataToProcess+0x98>)
 800b428:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b42a:	fb93 f3f2 	sdiv	r3, r3, r2
 800b42e:	b29a      	uxth	r2, r3
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800b436:	bf00      	nop
 800b438:	3714      	adds	r7, #20
 800b43a:	46bd      	mov	sp, r7
 800b43c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b440:	4770      	bx	lr
 800b442:	bf00      	nop
 800b444:	0800bf44 	.word	0x0800bf44
 800b448:	0800bf4c 	.word	0x0800bf4c

0800b44c <arm_pid_init_f32>:
 */

void arm_pid_init_f32(
  arm_pid_instance_f32 * S,
  int32_t resetStateFlag)
{
 800b44c:	b580      	push	{r7, lr}
 800b44e:	b082      	sub	sp, #8
 800b450:	af00      	add	r7, sp, #0
 800b452:	6078      	str	r0, [r7, #4]
 800b454:	6039      	str	r1, [r7, #0]
  /* Derived coefficient A0 */
  S->A0 = S->Kp + S->Ki + S->Kd;
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	ed93 7a06 	vldr	s14, [r3, #24]
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	edd3 7a07 	vldr	s15, [r3, #28]
 800b462:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	edd3 7a08 	vldr	s15, [r3, #32]
 800b46c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	edc3 7a00 	vstr	s15, [r3]

  /* Derived coefficient A1 */
  S->A1 = (-S->Kp) - ((float32_t) 2.0f * S->Kd);
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	edd3 7a06 	vldr	s15, [r3, #24]
 800b47c:	eeb1 7a67 	vneg.f32	s14, s15
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	edd3 7a08 	vldr	s15, [r3, #32]
 800b486:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800b48a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	edc3 7a01 	vstr	s15, [r3, #4]

  /* Derived coefficient A2 */
  S->A2 = S->Kd;
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	6a1a      	ldr	r2, [r3, #32]
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	609a      	str	r2, [r3, #8]

  /* Check whether state needs reset or not */
  if (resetStateFlag)
 800b49c:	683b      	ldr	r3, [r7, #0]
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d006      	beq.n	800b4b0 <arm_pid_init_f32+0x64>
  {
    /* Reset state to zero, The size will be always 3 samples */
    memset(S->state, 0, 3U * sizeof(float32_t));
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	330c      	adds	r3, #12
 800b4a6:	220c      	movs	r2, #12
 800b4a8:	2100      	movs	r1, #0
 800b4aa:	4618      	mov	r0, r3
 800b4ac:	f000 fcc4 	bl	800be38 <memset>
  }

}
 800b4b0:	bf00      	nop
 800b4b2:	3708      	adds	r7, #8
 800b4b4:	46bd      	mov	sp, r7
 800b4b6:	bd80      	pop	{r7, pc}

0800b4b8 <arm_mat_add_f32>:
#else
arm_status arm_mat_add_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 800b4b8:	b480      	push	{r7}
 800b4ba:	b08b      	sub	sp, #44	@ 0x2c
 800b4bc:	af00      	add	r7, sp, #0
 800b4be:	60f8      	str	r0, [r7, #12]
 800b4c0:	60b9      	str	r1, [r7, #8]
 800b4c2:	607a      	str	r2, [r7, #4]
  float32_t *pInA = pSrcA->pData;                /* input data matrix pointer A */
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	685b      	ldr	r3, [r3, #4]
 800b4c8:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pInB = pSrcB->pData;                /* input data matrix pointer B */
 800b4ca:	68bb      	ldr	r3, [r7, #8]
 800b4cc:	685b      	ldr	r3, [r3, #4]
 800b4ce:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	685b      	ldr	r3, [r3, #4]
 800b4d4:	61fb      	str	r3, [r7, #28]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrcA->numRows * pSrcA->numCols;
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	881b      	ldrh	r3, [r3, #0]
 800b4da:	461a      	mov	r2, r3
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	885b      	ldrh	r3, [r3, #2]
 800b4e0:	fb02 f303 	mul.w	r3, r2, r3
 800b4e4:	617b      	str	r3, [r7, #20]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 800b4e6:	697b      	ldr	r3, [r7, #20]
 800b4e8:	61bb      	str	r3, [r7, #24]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 800b4ea:	e013      	b.n	800b514 <arm_mat_add_f32+0x5c>
    {
      /* C(m,n) = A(m,n) + B(m,n) */

      /* Add and store result in destination buffer. */
      *pOut++ = *pInA++ + *pInB++;
 800b4ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4ee:	1d1a      	adds	r2, r3, #4
 800b4f0:	627a      	str	r2, [r7, #36]	@ 0x24
 800b4f2:	ed93 7a00 	vldr	s14, [r3]
 800b4f6:	6a3b      	ldr	r3, [r7, #32]
 800b4f8:	1d1a      	adds	r2, r3, #4
 800b4fa:	623a      	str	r2, [r7, #32]
 800b4fc:	edd3 7a00 	vldr	s15, [r3]
 800b500:	69fb      	ldr	r3, [r7, #28]
 800b502:	1d1a      	adds	r2, r3, #4
 800b504:	61fa      	str	r2, [r7, #28]
 800b506:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b50a:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 800b50e:	69bb      	ldr	r3, [r7, #24]
 800b510:	3b01      	subs	r3, #1
 800b512:	61bb      	str	r3, [r7, #24]
    while (blkCnt > 0U)
 800b514:	69bb      	ldr	r3, [r7, #24]
 800b516:	2b00      	cmp	r3, #0
 800b518:	d1e8      	bne.n	800b4ec <arm_mat_add_f32+0x34>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800b51a:	2300      	movs	r3, #0
 800b51c:	74fb      	strb	r3, [r7, #19]
  }

  /* Return to application */
  return (status);
 800b51e:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800b522:	4618      	mov	r0, r3
 800b524:	372c      	adds	r7, #44	@ 0x2c
 800b526:	46bd      	mov	sp, r7
 800b528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b52c:	4770      	bx	lr

0800b52e <arm_mat_init_f32>:
void arm_mat_init_f32(
  arm_matrix_instance_f32 * S,
  uint16_t nRows,
  uint16_t nColumns,
  float32_t * pData)
{
 800b52e:	b480      	push	{r7}
 800b530:	b085      	sub	sp, #20
 800b532:	af00      	add	r7, sp, #0
 800b534:	60f8      	str	r0, [r7, #12]
 800b536:	607b      	str	r3, [r7, #4]
 800b538:	460b      	mov	r3, r1
 800b53a:	817b      	strh	r3, [r7, #10]
 800b53c:	4613      	mov	r3, r2
 800b53e:	813b      	strh	r3, [r7, #8]
  /* Assign Number of Rows */
  S->numRows = nRows;
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	897a      	ldrh	r2, [r7, #10]
 800b544:	801a      	strh	r2, [r3, #0]

  /* Assign Number of Columns */
  S->numCols = nColumns;
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	893a      	ldrh	r2, [r7, #8]
 800b54a:	805a      	strh	r2, [r3, #2]

  /* Assign Data pointer */
  S->pData = pData;
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	687a      	ldr	r2, [r7, #4]
 800b550:	605a      	str	r2, [r3, #4]
}
 800b552:	bf00      	nop
 800b554:	3714      	adds	r7, #20
 800b556:	46bd      	mov	sp, r7
 800b558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b55c:	4770      	bx	lr

0800b55e <arm_mat_inverse_f32>:
                   - \ref ARM_MATH_SINGULAR      : Input matrix is found to be singular (non-invertible)
 */
arm_status arm_mat_inverse_f32(
  const arm_matrix_instance_f32 * pSrc,
        arm_matrix_instance_f32 * pDst)
{
 800b55e:	b480      	push	{r7}
 800b560:	b0bb      	sub	sp, #236	@ 0xec
 800b562:	af00      	add	r7, sp, #0
 800b564:	6078      	str	r0, [r7, #4]
 800b566:	6039      	str	r1, [r7, #0]
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	685b      	ldr	r3, [r3, #4]
 800b56c:	667b      	str	r3, [r7, #100]	@ 0x64
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 800b56e:	683b      	ldr	r3, [r7, #0]
 800b570:	685b      	ldr	r3, [r3, #4]
 800b572:	663b      	str	r3, [r7, #96]	@ 0x60
  
  float32_t *pTmp;
  uint32_t numRows = pSrc->numRows;              /* Number of rows in the matrix  */
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	881b      	ldrh	r3, [r3, #0]
 800b578:	65fb      	str	r3, [r7, #92]	@ 0x5c
  uint32_t numCols = pSrc->numCols;              /* Number of Cols in the matrix  */
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	885b      	ldrh	r3, [r3, #2]
 800b57e:	65bb      	str	r3, [r7, #88]	@ 0x58


  float32_t pivot = 0.0f, newPivot=0.0f;                /* Temporary input values  */
 800b580:	f04f 0300 	mov.w	r3, #0
 800b584:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800b588:	f04f 0300 	mov.w	r3, #0
 800b58c:	657b      	str	r3, [r7, #84]	@ 0x54
  uint32_t selectedRow,pivotRow,i, rowNb, rowCnt, flag = 0U, j,column;      /* loop counters */
 800b58e:	2300      	movs	r3, #0
 800b590:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
     *      8. Now an identical matrix is formed to the left of the bar(input matrix, pSrc).
     *         Therefore, the matrix to the right of the bar is our solution(pDst matrix, pDst).
     *----------------------------------------------------------------------------------------------------------------*/

    /* Working pointer for destination matrix */
    pTmp = pOut;
 800b594:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b596:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4

    /* Loop over the number of rows */
    rowCnt = numRows;
 800b59a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b59c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0

    /* Making the destination matrix as identity matrix */
    while (rowCnt > 0U)
 800b5a0:	e03b      	b.n	800b61a <arm_mat_inverse_f32+0xbc>
    {
      /* Writing all zeroes in lower triangle of the destination matrix */
      j = numRows - rowCnt;
 800b5a2:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800b5a4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800b5a8:	1ad3      	subs	r3, r2, r3
 800b5aa:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      while (j > 0U)
 800b5ae:	e00c      	b.n	800b5ca <arm_mat_inverse_f32+0x6c>
      {
        *pTmp++ = 0.0f;
 800b5b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b5b4:	1d1a      	adds	r2, r3, #4
 800b5b6:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 800b5ba:	f04f 0200 	mov.w	r2, #0
 800b5be:	601a      	str	r2, [r3, #0]
        j--;
 800b5c0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800b5c4:	3b01      	subs	r3, #1
 800b5c6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      while (j > 0U)
 800b5ca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d1ee      	bne.n	800b5b0 <arm_mat_inverse_f32+0x52>
      }

      /* Writing all ones in the diagonal of the destination matrix */
      *pTmp++ = 1.0f;
 800b5d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b5d6:	1d1a      	adds	r2, r3, #4
 800b5d8:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 800b5dc:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800b5e0:	601a      	str	r2, [r3, #0]

      /* Writing all zeroes in upper triangle of the destination matrix */
      j = rowCnt - 1U;
 800b5e2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800b5e6:	3b01      	subs	r3, #1
 800b5e8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      while (j > 0U)
 800b5ec:	e00c      	b.n	800b608 <arm_mat_inverse_f32+0xaa>
      {
        *pTmp++ = 0.0f;
 800b5ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b5f2:	1d1a      	adds	r2, r3, #4
 800b5f4:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 800b5f8:	f04f 0200 	mov.w	r2, #0
 800b5fc:	601a      	str	r2, [r3, #0]
        j--;
 800b5fe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800b602:	3b01      	subs	r3, #1
 800b604:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      while (j > 0U)
 800b608:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d1ee      	bne.n	800b5ee <arm_mat_inverse_f32+0x90>
      }

      /* Decrement loop counter */
      rowCnt--;
 800b610:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800b614:	3b01      	subs	r3, #1
 800b616:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    while (rowCnt > 0U)
 800b61a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d1bf      	bne.n	800b5a2 <arm_mat_inverse_f32+0x44>

    /* Loop over the number of columns of the input matrix.
       All the elements in each column are processed by the row operations */

    /* Index modifier to navigate through the columns */
    for(column = 0U; column < numCols; column++)
 800b622:	2300      	movs	r3, #0
 800b624:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800b628:	e2c7      	b.n	800bbba <arm_mat_inverse_f32+0x65c>
      /* Check if the pivot element is zero..
       * If it is zero then interchange the row with non zero row below.
       * If there is no non zero element to replace in the rows below,
       * then the matrix is Singular. */

      pivotRow = column;
 800b62a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800b62e:	653b      	str	r3, [r7, #80]	@ 0x50

      /* Temporary variable to hold the pivot value */
      pTmp = ELEM(pSrc,column,column) ;
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	685a      	ldr	r2, [r3, #4]
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	885b      	ldrh	r3, [r3, #2]
 800b638:	3301      	adds	r3, #1
 800b63a:	f8d7 10c4 	ldr.w	r1, [r7, #196]	@ 0xc4
 800b63e:	fb01 f303 	mul.w	r3, r1, r3
 800b642:	009b      	lsls	r3, r3, #2
 800b644:	4413      	add	r3, r2
 800b646:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
      pivot = *pTmp;
 800b64a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
      selectedRow = column;
 800b654:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800b658:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

      /* Find maximum pivot in column */
      
        /* Loop over the number rows present below */

      for (rowNb = column+1; rowNb < numRows; rowNb++)
 800b65c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800b660:	3301      	adds	r3, #1
 800b662:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800b666:	e02c      	b.n	800b6c2 <arm_mat_inverse_f32+0x164>
      {
          /* Update the input and destination pointers */
          pTmp = ELEM(pSrc,rowNb,column);
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	685a      	ldr	r2, [r3, #4]
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	885b      	ldrh	r3, [r3, #2]
 800b670:	4619      	mov	r1, r3
 800b672:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800b676:	fb03 f101 	mul.w	r1, r3, r1
 800b67a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800b67e:	440b      	add	r3, r1
 800b680:	009b      	lsls	r3, r3, #2
 800b682:	4413      	add	r3, r2
 800b684:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
          newPivot = *pTmp;
 800b688:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	657b      	str	r3, [r7, #84]	@ 0x54
          if (fabsf(newPivot) > fabsf(pivot))
 800b690:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 800b694:	eeb0 7ae7 	vabs.f32	s14, s15
 800b698:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800b69c:	eef0 7ae7 	vabs.f32	s15, s15
 800b6a0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b6a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b6a8:	dd06      	ble.n	800b6b8 <arm_mat_inverse_f32+0x15a>
          {
            selectedRow = rowNb; 
 800b6aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800b6ae:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
            pivot = newPivot;
 800b6b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b6b4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
      for (rowNb = column+1; rowNb < numRows; rowNb++)
 800b6b8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800b6bc:	3301      	adds	r3, #1
 800b6be:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800b6c2:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800b6c6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b6c8:	429a      	cmp	r2, r3
 800b6ca:	d3cd      	bcc.n	800b668 <arm_mat_inverse_f32+0x10a>
          }
      }
        
      /* Check if there is a non zero pivot element to
       * replace in the rows below */
      if ((pivot != 0.0f) && (selectedRow != column))
 800b6cc:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800b6d0:	eef5 7a40 	vcmp.f32	s15, #0.0
 800b6d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b6d8:	f000 809b 	beq.w	800b812 <arm_mat_inverse_f32+0x2b4>
 800b6dc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800b6e0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800b6e4:	429a      	cmp	r2, r3
 800b6e6:	f000 8094 	beq.w	800b812 <arm_mat_inverse_f32+0x2b4>
      {
            
            SWAP_ROWS_F32(pSrc,column, pivotRow,selectedRow);
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	685b      	ldr	r3, [r3, #4]
 800b6ee:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	685b      	ldr	r3, [r3, #4]
 800b6f6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	885b      	ldrh	r3, [r3, #2]
 800b6fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b700:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b702:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800b706:	1ad3      	subs	r3, r2, r3
 800b708:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b70a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b70c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b70e:	fb03 f202 	mul.w	r2, r3, r2
 800b712:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800b716:	4413      	add	r3, r2
 800b718:	009b      	lsls	r3, r3, #2
 800b71a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800b71e:	4413      	add	r3, r2
 800b720:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800b724:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b726:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800b72a:	fb03 f202 	mul.w	r2, r3, r2
 800b72e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800b732:	4413      	add	r3, r2
 800b734:	009b      	lsls	r3, r3, #2
 800b736:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800b73a:	4413      	add	r3, r2
 800b73c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800b740:	2300      	movs	r3, #0
 800b742:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800b746:	e018      	b.n	800b77a <arm_mat_inverse_f32+0x21c>
 800b748:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b750:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800b754:	1d1a      	adds	r2, r3, #4
 800b756:	f8c7 20b8 	str.w	r2, [r7, #184]	@ 0xb8
 800b75a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800b75e:	6812      	ldr	r2, [r2, #0]
 800b760:	601a      	str	r2, [r3, #0]
 800b762:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b766:	1d1a      	adds	r2, r3, #4
 800b768:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 800b76c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b76e:	601a      	str	r2, [r3, #0]
 800b770:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800b774:	3301      	adds	r3, #1
 800b776:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800b77a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 800b77e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b780:	429a      	cmp	r2, r3
 800b782:	dbe1      	blt.n	800b748 <arm_mat_inverse_f32+0x1ea>
            SWAP_ROWS_F32(pDst,0, pivotRow,selectedRow);
 800b784:	683b      	ldr	r3, [r7, #0]
 800b786:	685b      	ldr	r3, [r3, #4]
 800b788:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800b78c:	683b      	ldr	r3, [r7, #0]
 800b78e:	685b      	ldr	r3, [r3, #4]
 800b790:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800b794:	683b      	ldr	r3, [r7, #0]
 800b796:	885b      	ldrh	r3, [r3, #2]
 800b798:	647b      	str	r3, [r7, #68]	@ 0x44
 800b79a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b79c:	643b      	str	r3, [r7, #64]	@ 0x40
 800b79e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b7a0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b7a2:	fb02 f303 	mul.w	r3, r2, r3
 800b7a6:	009b      	lsls	r3, r3, #2
 800b7a8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800b7ac:	4413      	add	r3, r2
 800b7ae:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800b7b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b7b4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800b7b8:	fb02 f303 	mul.w	r3, r2, r3
 800b7bc:	009b      	lsls	r3, r3, #2
 800b7be:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800b7c2:	4413      	add	r3, r2
 800b7c4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800b7c8:	2300      	movs	r3, #0
 800b7ca:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800b7ce:	e018      	b.n	800b802 <arm_mat_inverse_f32+0x2a4>
 800b7d0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b7d8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b7dc:	1d1a      	adds	r2, r3, #4
 800b7de:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800b7e2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800b7e6:	6812      	ldr	r2, [r2, #0]
 800b7e8:	601a      	str	r2, [r3, #0]
 800b7ea:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800b7ee:	1d1a      	adds	r2, r3, #4
 800b7f0:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800b7f4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800b7f6:	601a      	str	r2, [r3, #0]
 800b7f8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800b7fc:	3301      	adds	r3, #1
 800b7fe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800b802:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800b806:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b808:	429a      	cmp	r2, r3
 800b80a:	dbe1      	blt.n	800b7d0 <arm_mat_inverse_f32+0x272>

    
            /* Flag to indicate whether exchange is done or not */
            flag = 1U;
 800b80c:	2301      	movs	r3, #1
 800b80e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc

      
      

      /* Update the status if the matrix is singular */
      if ((flag != 1U) && (pivot == 0.0f))
 800b812:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800b816:	2b01      	cmp	r3, #1
 800b818:	d009      	beq.n	800b82e <arm_mat_inverse_f32+0x2d0>
 800b81a:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800b81e:	eef5 7a40 	vcmp.f32	s15, #0.0
 800b822:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b826:	d102      	bne.n	800b82e <arm_mat_inverse_f32+0x2d0>
      {
        return ARM_MATH_SINGULAR;
 800b828:	f06f 0304 	mvn.w	r3, #4
 800b82c:	e208      	b.n	800bc40 <arm_mat_inverse_f32+0x6e2>
      }

     
      /* Pivot element of the row */
      pivot = 1.0f / pivot;
 800b82e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b832:	ed97 7a38 	vldr	s14, [r7, #224]	@ 0xe0
 800b836:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b83a:	edc7 7a38 	vstr	s15, [r7, #224]	@ 0xe0

      SCALE_ROW_F32(pSrc,column,pivot,pivotRow);
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	685b      	ldr	r3, [r3, #4]
 800b842:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	885b      	ldrh	r3, [r3, #2]
 800b84a:	637b      	str	r3, [r7, #52]	@ 0x34
 800b84c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b84e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800b852:	1ad3      	subs	r3, r2, r3
 800b854:	633b      	str	r3, [r7, #48]	@ 0x30
 800b856:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b858:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b85a:	fb03 f202 	mul.w	r2, r3, r2
 800b85e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800b862:	4413      	add	r3, r2
 800b864:	009b      	lsls	r3, r3, #2
 800b866:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 800b86a:	4413      	add	r3, r2
 800b86c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800b870:	2300      	movs	r3, #0
 800b872:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800b876:	e011      	b.n	800b89c <arm_mat_inverse_f32+0x33e>
 800b878:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b87c:	1d1a      	adds	r2, r3, #4
 800b87e:	f8c7 20a0 	str.w	r2, [r7, #160]	@ 0xa0
 800b882:	ed93 7a00 	vldr	s14, [r3]
 800b886:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800b88a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b88e:	edc3 7a00 	vstr	s15, [r3]
 800b892:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800b896:	3301      	adds	r3, #1
 800b898:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800b89c:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 800b8a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8a2:	429a      	cmp	r2, r3
 800b8a4:	dbe8      	blt.n	800b878 <arm_mat_inverse_f32+0x31a>
      SCALE_ROW_F32(pDst,0,pivot,pivotRow);
 800b8a6:	683b      	ldr	r3, [r7, #0]
 800b8a8:	685b      	ldr	r3, [r3, #4]
 800b8aa:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800b8ae:	683b      	ldr	r3, [r7, #0]
 800b8b0:	885b      	ldrh	r3, [r3, #2]
 800b8b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b8b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b8b6:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b8b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b8ba:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b8bc:	fb02 f303 	mul.w	r3, r2, r3
 800b8c0:	009b      	lsls	r3, r3, #2
 800b8c2:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800b8c6:	4413      	add	r3, r2
 800b8c8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800b8cc:	2300      	movs	r3, #0
 800b8ce:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800b8d2:	e011      	b.n	800b8f8 <arm_mat_inverse_f32+0x39a>
 800b8d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b8d8:	1d1a      	adds	r2, r3, #4
 800b8da:	f8c7 2098 	str.w	r2, [r7, #152]	@ 0x98
 800b8de:	ed93 7a00 	vldr	s14, [r3]
 800b8e2:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800b8e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b8ea:	edc3 7a00 	vstr	s15, [r3]
 800b8ee:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800b8f2:	3301      	adds	r3, #1
 800b8f4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800b8f8:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 800b8fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b8fe:	429a      	cmp	r2, r3
 800b900:	dbe8      	blt.n	800b8d4 <arm_mat_inverse_f32+0x376>

      
      /* Replace the rows with the sum of that row and a multiple of row i
       * so that each new element in column i above row i is zero.*/

      rowNb = 0;
 800b902:	2300      	movs	r3, #0
 800b904:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      for (;rowNb < pivotRow; rowNb++)
 800b908:	e0ae      	b.n	800ba68 <arm_mat_inverse_f32+0x50a>
      {
           pTmp = ELEM(pSrc,rowNb,column) ;
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	685a      	ldr	r2, [r3, #4]
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	885b      	ldrh	r3, [r3, #2]
 800b912:	4619      	mov	r1, r3
 800b914:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800b918:	fb03 f101 	mul.w	r1, r3, r1
 800b91c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800b920:	440b      	add	r3, r1
 800b922:	009b      	lsls	r3, r3, #2
 800b924:	4413      	add	r3, r2
 800b926:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
           pivot = *pTmp;
 800b92a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0

           MAS_ROW_F32(column,pSrc,rowNb,pivot,pSrc,pivotRow);
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	685b      	ldr	r3, [r3, #4]
 800b938:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	685b      	ldr	r3, [r3, #4]
 800b940:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	885b      	ldrh	r3, [r3, #2]
 800b948:	617b      	str	r3, [r7, #20]
 800b94a:	697a      	ldr	r2, [r7, #20]
 800b94c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800b950:	1ad3      	subs	r3, r2, r3
 800b952:	613b      	str	r3, [r7, #16]
 800b954:	697b      	ldr	r3, [r7, #20]
 800b956:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800b95a:	fb03 f202 	mul.w	r2, r3, r2
 800b95e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800b962:	4413      	add	r3, r2
 800b964:	009b      	lsls	r3, r3, #2
 800b966:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 800b96a:	4413      	add	r3, r2
 800b96c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800b970:	697b      	ldr	r3, [r7, #20]
 800b972:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b974:	fb03 f202 	mul.w	r2, r3, r2
 800b978:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800b97c:	4413      	add	r3, r2
 800b97e:	009b      	lsls	r3, r3, #2
 800b980:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 800b984:	4413      	add	r3, r2
 800b986:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800b98a:	2300      	movs	r3, #0
 800b98c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800b990:	e01a      	b.n	800b9c8 <arm_mat_inverse_f32+0x46a>
 800b992:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b996:	1d1a      	adds	r2, r3, #4
 800b998:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800b99c:	ed93 7a00 	vldr	s14, [r3]
 800b9a0:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800b9a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b9a8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800b9ac:	1d1a      	adds	r2, r3, #4
 800b9ae:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 800b9b2:	ed93 7a00 	vldr	s14, [r3]
 800b9b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b9ba:	edc3 7a00 	vstr	s15, [r3]
 800b9be:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800b9c2:	3301      	adds	r3, #1
 800b9c4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800b9c8:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800b9cc:	693b      	ldr	r3, [r7, #16]
 800b9ce:	429a      	cmp	r2, r3
 800b9d0:	dbdf      	blt.n	800b992 <arm_mat_inverse_f32+0x434>
           MAS_ROW_F32(0     ,pDst,rowNb,pivot,pDst,pivotRow);
 800b9d2:	683b      	ldr	r3, [r7, #0]
 800b9d4:	685b      	ldr	r3, [r3, #4]
 800b9d6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800b9da:	683b      	ldr	r3, [r7, #0]
 800b9dc:	685b      	ldr	r3, [r3, #4]
 800b9de:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800b9e2:	683b      	ldr	r3, [r7, #0]
 800b9e4:	885b      	ldrh	r3, [r3, #2]
 800b9e6:	60fb      	str	r3, [r7, #12]
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	60bb      	str	r3, [r7, #8]
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800b9f2:	fb02 f303 	mul.w	r3, r2, r3
 800b9f6:	009b      	lsls	r3, r3, #2
 800b9f8:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800b9fc:	4413      	add	r3, r2
 800b9fe:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800ba02:	68fb      	ldr	r3, [r7, #12]
 800ba04:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800ba06:	fb02 f303 	mul.w	r3, r2, r3
 800ba0a:	009b      	lsls	r3, r3, #2
 800ba0c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800ba10:	4413      	add	r3, r2
 800ba12:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800ba16:	2300      	movs	r3, #0
 800ba18:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800ba1c:	e01a      	b.n	800ba54 <arm_mat_inverse_f32+0x4f6>
 800ba1e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800ba22:	1d1a      	adds	r2, r3, #4
 800ba24:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800ba28:	ed93 7a00 	vldr	s14, [r3]
 800ba2c:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800ba30:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ba34:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800ba38:	1d1a      	adds	r2, r3, #4
 800ba3a:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 800ba3e:	ed93 7a00 	vldr	s14, [r3]
 800ba42:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ba46:	edc3 7a00 	vstr	s15, [r3]
 800ba4a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800ba4e:	3301      	adds	r3, #1
 800ba50:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800ba54:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800ba58:	68bb      	ldr	r3, [r7, #8]
 800ba5a:	429a      	cmp	r2, r3
 800ba5c:	dbdf      	blt.n	800ba1e <arm_mat_inverse_f32+0x4c0>
      for (;rowNb < pivotRow; rowNb++)
 800ba5e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800ba62:	3301      	adds	r3, #1
 800ba64:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800ba68:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800ba6c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ba6e:	429a      	cmp	r2, r3
 800ba70:	f4ff af4b 	bcc.w	800b90a <arm_mat_inverse_f32+0x3ac>


      }

      for (rowNb = pivotRow + 1; rowNb < numRows; rowNb++)
 800ba74:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ba76:	3301      	adds	r3, #1
 800ba78:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800ba7c:	e092      	b.n	800bba4 <arm_mat_inverse_f32+0x646>
      {
           pTmp = ELEM(pSrc,rowNb,column) ;
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	685a      	ldr	r2, [r3, #4]
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	885b      	ldrh	r3, [r3, #2]
 800ba86:	4619      	mov	r1, r3
 800ba88:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800ba8c:	fb03 f101 	mul.w	r1, r3, r1
 800ba90:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800ba94:	440b      	add	r3, r1
 800ba96:	009b      	lsls	r3, r3, #2
 800ba98:	4413      	add	r3, r2
 800ba9a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
           pivot = *pTmp;
 800ba9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0

           MAS_ROW_F32(column,pSrc,rowNb,pivot,pSrc,pivotRow);
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	685b      	ldr	r3, [r3, #4]
 800baac:	67bb      	str	r3, [r7, #120]	@ 0x78
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	685b      	ldr	r3, [r3, #4]
 800bab2:	677b      	str	r3, [r7, #116]	@ 0x74
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	885b      	ldrh	r3, [r3, #2]
 800bab8:	627b      	str	r3, [r7, #36]	@ 0x24
 800baba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800babc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800bac0:	1ad3      	subs	r3, r2, r3
 800bac2:	623b      	str	r3, [r7, #32]
 800bac4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bac6:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800baca:	fb03 f202 	mul.w	r2, r3, r2
 800bace:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800bad2:	4413      	add	r3, r2
 800bad4:	009b      	lsls	r3, r3, #2
 800bad6:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800bad8:	4413      	add	r3, r2
 800bada:	67bb      	str	r3, [r7, #120]	@ 0x78
 800badc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bade:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800bae0:	fb03 f202 	mul.w	r2, r3, r2
 800bae4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800bae8:	4413      	add	r3, r2
 800baea:	009b      	lsls	r3, r3, #2
 800baec:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800baee:	4413      	add	r3, r2
 800baf0:	677b      	str	r3, [r7, #116]	@ 0x74
 800baf2:	2300      	movs	r3, #0
 800baf4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800baf6:	e014      	b.n	800bb22 <arm_mat_inverse_f32+0x5c4>
 800baf8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800bafa:	1d1a      	adds	r2, r3, #4
 800bafc:	677a      	str	r2, [r7, #116]	@ 0x74
 800bafe:	ed93 7a00 	vldr	s14, [r3]
 800bb02:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800bb06:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bb0a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800bb0c:	1d1a      	adds	r2, r3, #4
 800bb0e:	67ba      	str	r2, [r7, #120]	@ 0x78
 800bb10:	ed93 7a00 	vldr	s14, [r3]
 800bb14:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bb18:	edc3 7a00 	vstr	s15, [r3]
 800bb1c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800bb1e:	3301      	adds	r3, #1
 800bb20:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800bb22:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800bb24:	6a3b      	ldr	r3, [r7, #32]
 800bb26:	429a      	cmp	r2, r3
 800bb28:	dbe6      	blt.n	800baf8 <arm_mat_inverse_f32+0x59a>
           MAS_ROW_F32(0     ,pDst,rowNb,pivot,pDst,pivotRow);
 800bb2a:	683b      	ldr	r3, [r7, #0]
 800bb2c:	685b      	ldr	r3, [r3, #4]
 800bb2e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800bb30:	683b      	ldr	r3, [r7, #0]
 800bb32:	685b      	ldr	r3, [r3, #4]
 800bb34:	66bb      	str	r3, [r7, #104]	@ 0x68
 800bb36:	683b      	ldr	r3, [r7, #0]
 800bb38:	885b      	ldrh	r3, [r3, #2]
 800bb3a:	61fb      	str	r3, [r7, #28]
 800bb3c:	69fb      	ldr	r3, [r7, #28]
 800bb3e:	61bb      	str	r3, [r7, #24]
 800bb40:	69fb      	ldr	r3, [r7, #28]
 800bb42:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800bb46:	fb02 f303 	mul.w	r3, r2, r3
 800bb4a:	009b      	lsls	r3, r3, #2
 800bb4c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800bb4e:	4413      	add	r3, r2
 800bb50:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800bb52:	69fb      	ldr	r3, [r7, #28]
 800bb54:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800bb56:	fb02 f303 	mul.w	r3, r2, r3
 800bb5a:	009b      	lsls	r3, r3, #2
 800bb5c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800bb5e:	4413      	add	r3, r2
 800bb60:	66bb      	str	r3, [r7, #104]	@ 0x68
 800bb62:	2300      	movs	r3, #0
 800bb64:	673b      	str	r3, [r7, #112]	@ 0x70
 800bb66:	e014      	b.n	800bb92 <arm_mat_inverse_f32+0x634>
 800bb68:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800bb6a:	1d1a      	adds	r2, r3, #4
 800bb6c:	66ba      	str	r2, [r7, #104]	@ 0x68
 800bb6e:	ed93 7a00 	vldr	s14, [r3]
 800bb72:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800bb76:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bb7a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bb7c:	1d1a      	adds	r2, r3, #4
 800bb7e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800bb80:	ed93 7a00 	vldr	s14, [r3]
 800bb84:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bb88:	edc3 7a00 	vstr	s15, [r3]
 800bb8c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800bb8e:	3301      	adds	r3, #1
 800bb90:	673b      	str	r3, [r7, #112]	@ 0x70
 800bb92:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800bb94:	69bb      	ldr	r3, [r7, #24]
 800bb96:	429a      	cmp	r2, r3
 800bb98:	dbe6      	blt.n	800bb68 <arm_mat_inverse_f32+0x60a>
      for (rowNb = pivotRow + 1; rowNb < numRows; rowNb++)
 800bb9a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800bb9e:	3301      	adds	r3, #1
 800bba0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800bba4:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800bba8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bbaa:	429a      	cmp	r2, r3
 800bbac:	f4ff af67 	bcc.w	800ba7e <arm_mat_inverse_f32+0x520>
    for(column = 0U; column < numCols; column++)
 800bbb0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800bbb4:	3301      	adds	r3, #1
 800bbb6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800bbba:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800bbbe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bbc0:	429a      	cmp	r2, r3
 800bbc2:	f4ff ad32 	bcc.w	800b62a <arm_mat_inverse_f32+0xcc>
      }

    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800bbc6:	2300      	movs	r3, #0
 800bbc8:	f887 30c3 	strb.w	r3, [r7, #195]	@ 0xc3

    if ((flag != 1U) && (pivot == 0.0f))
 800bbcc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800bbd0:	2b01      	cmp	r3, #1
 800bbd2:	d033      	beq.n	800bc3c <arm_mat_inverse_f32+0x6de>
 800bbd4:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800bbd8:	eef5 7a40 	vcmp.f32	s15, #0.0
 800bbdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bbe0:	d12c      	bne.n	800bc3c <arm_mat_inverse_f32+0x6de>
    {
      pIn = pSrc->pData;
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	685b      	ldr	r3, [r3, #4]
 800bbe6:	667b      	str	r3, [r7, #100]	@ 0x64
      for (i = 0; i < numRows * numCols; i++)
 800bbe8:	2300      	movs	r3, #0
 800bbea:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800bbee:	e010      	b.n	800bc12 <arm_mat_inverse_f32+0x6b4>
      {
        if (pIn[i] != 0.0f)
 800bbf0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800bbf4:	009b      	lsls	r3, r3, #2
 800bbf6:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800bbf8:	4413      	add	r3, r2
 800bbfa:	edd3 7a00 	vldr	s15, [r3]
 800bbfe:	eef5 7a40 	vcmp.f32	s15, #0.0
 800bc02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc06:	d10d      	bne.n	800bc24 <arm_mat_inverse_f32+0x6c6>
      for (i = 0; i < numRows * numCols; i++)
 800bc08:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800bc0c:	3301      	adds	r3, #1
 800bc0e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800bc12:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bc14:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800bc16:	fb02 f303 	mul.w	r3, r2, r3
 800bc1a:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 800bc1e:	429a      	cmp	r2, r3
 800bc20:	d3e6      	bcc.n	800bbf0 <arm_mat_inverse_f32+0x692>
 800bc22:	e000      	b.n	800bc26 <arm_mat_inverse_f32+0x6c8>
            break;
 800bc24:	bf00      	nop
      }

      if (i == numRows * numCols)
 800bc26:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bc28:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800bc2a:	fb02 f303 	mul.w	r3, r2, r3
 800bc2e:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 800bc32:	429a      	cmp	r2, r3
 800bc34:	d102      	bne.n	800bc3c <arm_mat_inverse_f32+0x6de>
        status = ARM_MATH_SINGULAR;
 800bc36:	23fb      	movs	r3, #251	@ 0xfb
 800bc38:	f887 30c3 	strb.w	r3, [r7, #195]	@ 0xc3
    }
  }

  /* Return to application */
  return (status);
 800bc3c:	f997 30c3 	ldrsb.w	r3, [r7, #195]	@ 0xc3
}
 800bc40:	4618      	mov	r0, r3
 800bc42:	37ec      	adds	r7, #236	@ 0xec
 800bc44:	46bd      	mov	sp, r7
 800bc46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc4a:	4770      	bx	lr

0800bc4c <arm_mat_mult_f32>:
 */
arm_status arm_mat_mult_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 800bc4c:	b480      	push	{r7}
 800bc4e:	b093      	sub	sp, #76	@ 0x4c
 800bc50:	af00      	add	r7, sp, #0
 800bc52:	60f8      	str	r0, [r7, #12]
 800bc54:	60b9      	str	r1, [r7, #8]
 800bc56:	607a      	str	r2, [r7, #4]
  float32_t *pIn1 = pSrcA->pData;                /* Input data matrix pointer A */
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	685b      	ldr	r3, [r3, #4]
 800bc5c:	647b      	str	r3, [r7, #68]	@ 0x44
  float32_t *pIn2 = pSrcB->pData;                /* Input data matrix pointer B */
 800bc5e:	68bb      	ldr	r3, [r7, #8]
 800bc60:	685b      	ldr	r3, [r3, #4]
 800bc62:	643b      	str	r3, [r7, #64]	@ 0x40
  float32_t *pInA = pSrcA->pData;                /* Input data matrix pointer A */
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	685b      	ldr	r3, [r3, #4]
 800bc68:	63fb      	str	r3, [r7, #60]	@ 0x3c
  float32_t *pInB = pSrcB->pData;                /* Input data matrix pointer B */
 800bc6a:	68bb      	ldr	r3, [r7, #8]
 800bc6c:	685b      	ldr	r3, [r3, #4]
 800bc6e:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* Output data matrix pointer */
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	685b      	ldr	r3, [r3, #4]
 800bc74:	61fb      	str	r3, [r7, #28]
  float32_t *px;                                 /* Temporary output data matrix pointer */
  float32_t sum;                                 /* Accumulator */
  uint16_t numRowsA = pSrcA->numRows;            /* Number of rows of input matrix A */
 800bc76:	68fb      	ldr	r3, [r7, #12]
 800bc78:	881b      	ldrh	r3, [r3, #0]
 800bc7a:	837b      	strh	r3, [r7, #26]
  uint16_t numColsB = pSrcB->numCols;            /* Number of columns of input matrix B */
 800bc7c:	68bb      	ldr	r3, [r7, #8]
 800bc7e:	885b      	ldrh	r3, [r3, #2]
 800bc80:	833b      	strh	r3, [r7, #24]
  uint16_t numColsA = pSrcA->numCols;            /* Number of columns of input matrix A */
 800bc82:	68fb      	ldr	r3, [r7, #12]
 800bc84:	885b      	ldrh	r3, [r3, #2]
 800bc86:	82fb      	strh	r3, [r7, #22]
  uint32_t col, i = 0U, row = numRowsA, colCnt;  /* Loop counters */
 800bc88:	2300      	movs	r3, #0
 800bc8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800bc8c:	8b7b      	ldrh	r3, [r7, #26]
 800bc8e:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* The following loop performs the dot-product of each row in pSrcA with each column in pSrcB */
    /* row loop */
    do
    {
      /* Output pointer is set to starting address of row being processed */
      px = pOut + i;
 800bc90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc92:	009b      	lsls	r3, r3, #2
 800bc94:	69fa      	ldr	r2, [r7, #28]
 800bc96:	4413      	add	r3, r2
 800bc98:	63bb      	str	r3, [r7, #56]	@ 0x38

      /* For every row wise process, column loop counter is to be initiated */
      col = numColsB;
 800bc9a:	8b3b      	ldrh	r3, [r7, #24]
 800bc9c:	633b      	str	r3, [r7, #48]	@ 0x30

      /* For every row wise process, pIn2 pointer is set to starting address of pSrcB data */
      pIn2 = pSrcB->pData;
 800bc9e:	68bb      	ldr	r3, [r7, #8]
 800bca0:	685b      	ldr	r3, [r3, #4]
 800bca2:	643b      	str	r3, [r7, #64]	@ 0x40

      /* column loop */
      do
      {
        /* Set the variable sum, that acts as accumulator, to zero */
        sum = 0.0f;
 800bca4:	f04f 0300 	mov.w	r3, #0
 800bca8:	637b      	str	r3, [r7, #52]	@ 0x34

        /* Initialize pointer pIn1 to point to starting address of column being processed */
        pIn1 = pInA;
 800bcaa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bcac:	647b      	str	r3, [r7, #68]	@ 0x44
        colCnt = numColsA % 0x4U;

#else

        /* Initialize cntCnt with number of columns */
        colCnt = numColsA;
 800bcae:	8afb      	ldrh	r3, [r7, #22]
 800bcb0:	627b      	str	r3, [r7, #36]	@ 0x24

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

        while (colCnt > 0U)
 800bcb2:	e017      	b.n	800bce4 <arm_mat_mult_f32+0x98>
        {
          /* c(m,p) = a(m,1) * b(1,p) + a(m,2) * b(2,p) + .... + a(m,n) * b(n,p) */

          /* Perform the multiply-accumulates */
          sum += *pIn1++ * *pIn2;
 800bcb4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bcb6:	1d1a      	adds	r2, r3, #4
 800bcb8:	647a      	str	r2, [r7, #68]	@ 0x44
 800bcba:	ed93 7a00 	vldr	s14, [r3]
 800bcbe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bcc0:	edd3 7a00 	vldr	s15, [r3]
 800bcc4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bcc8:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 800bccc:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bcd0:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
          pIn2 += numColsB;
 800bcd4:	8b3b      	ldrh	r3, [r7, #24]
 800bcd6:	009b      	lsls	r3, r3, #2
 800bcd8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800bcda:	4413      	add	r3, r2
 800bcdc:	643b      	str	r3, [r7, #64]	@ 0x40

          /* Decrement loop counter */
          colCnt--;
 800bcde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bce0:	3b01      	subs	r3, #1
 800bce2:	627b      	str	r3, [r7, #36]	@ 0x24
        while (colCnt > 0U)
 800bce4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d1e4      	bne.n	800bcb4 <arm_mat_mult_f32+0x68>
        }

        /* Store result in destination buffer */
        *px++ = sum;
 800bcea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bcec:	1d1a      	adds	r2, r3, #4
 800bcee:	63ba      	str	r2, [r7, #56]	@ 0x38
 800bcf0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800bcf2:	601a      	str	r2, [r3, #0]

        /* Decrement column loop counter */
        col--;
 800bcf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bcf6:	3b01      	subs	r3, #1
 800bcf8:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Update pointer pIn2 to point to starting address of next column */
        pIn2 = pInB + (numColsB - col);
 800bcfa:	8b3a      	ldrh	r2, [r7, #24]
 800bcfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bcfe:	1ad3      	subs	r3, r2, r3
 800bd00:	009b      	lsls	r3, r3, #2
 800bd02:	6a3a      	ldr	r2, [r7, #32]
 800bd04:	4413      	add	r3, r2
 800bd06:	643b      	str	r3, [r7, #64]	@ 0x40

      } while (col > 0U);
 800bd08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d1ca      	bne.n	800bca4 <arm_mat_mult_f32+0x58>

      /* Update pointer pInA to point to starting address of next row */
      i = i + numColsB;
 800bd0e:	8b3b      	ldrh	r3, [r7, #24]
 800bd10:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bd12:	4413      	add	r3, r2
 800bd14:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pInA = pInA + numColsA;
 800bd16:	8afb      	ldrh	r3, [r7, #22]
 800bd18:	009b      	lsls	r3, r3, #2
 800bd1a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800bd1c:	4413      	add	r3, r2
 800bd1e:	63fb      	str	r3, [r7, #60]	@ 0x3c

      /* Decrement row loop counter */
      row--;
 800bd20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd22:	3b01      	subs	r3, #1
 800bd24:	62bb      	str	r3, [r7, #40]	@ 0x28

    } while (row > 0U);
 800bd26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d1b1      	bne.n	800bc90 <arm_mat_mult_f32+0x44>

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800bd2c:	2300      	movs	r3, #0
 800bd2e:	757b      	strb	r3, [r7, #21]
  }

  /* Return to application */
  return (status);
 800bd30:	f997 3015 	ldrsb.w	r3, [r7, #21]
}
 800bd34:	4618      	mov	r0, r3
 800bd36:	374c      	adds	r7, #76	@ 0x4c
 800bd38:	46bd      	mov	sp, r7
 800bd3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd3e:	4770      	bx	lr

0800bd40 <arm_mat_sub_f32>:
#else
arm_status arm_mat_sub_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 800bd40:	b480      	push	{r7}
 800bd42:	b08b      	sub	sp, #44	@ 0x2c
 800bd44:	af00      	add	r7, sp, #0
 800bd46:	60f8      	str	r0, [r7, #12]
 800bd48:	60b9      	str	r1, [r7, #8]
 800bd4a:	607a      	str	r2, [r7, #4]
  float32_t *pInA = pSrcA->pData;                /* input data matrix pointer A */
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	685b      	ldr	r3, [r3, #4]
 800bd50:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pInB = pSrcB->pData;                /* input data matrix pointer B */
 800bd52:	68bb      	ldr	r3, [r7, #8]
 800bd54:	685b      	ldr	r3, [r3, #4]
 800bd56:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	685b      	ldr	r3, [r3, #4]
 800bd5c:	61fb      	str	r3, [r7, #28]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrcA->numRows * pSrcA->numCols;
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	881b      	ldrh	r3, [r3, #0]
 800bd62:	461a      	mov	r2, r3
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	885b      	ldrh	r3, [r3, #2]
 800bd68:	fb02 f303 	mul.w	r3, r2, r3
 800bd6c:	617b      	str	r3, [r7, #20]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 800bd6e:	697b      	ldr	r3, [r7, #20]
 800bd70:	61bb      	str	r3, [r7, #24]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 800bd72:	e013      	b.n	800bd9c <arm_mat_sub_f32+0x5c>
    {
      /* C(m,n) = A(m,n) - B(m,n) */

      /* Subtract and store result in destination buffer. */
      *pOut++ = (*pInA++) - (*pInB++);
 800bd74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd76:	1d1a      	adds	r2, r3, #4
 800bd78:	627a      	str	r2, [r7, #36]	@ 0x24
 800bd7a:	ed93 7a00 	vldr	s14, [r3]
 800bd7e:	6a3b      	ldr	r3, [r7, #32]
 800bd80:	1d1a      	adds	r2, r3, #4
 800bd82:	623a      	str	r2, [r7, #32]
 800bd84:	edd3 7a00 	vldr	s15, [r3]
 800bd88:	69fb      	ldr	r3, [r7, #28]
 800bd8a:	1d1a      	adds	r2, r3, #4
 800bd8c:	61fa      	str	r2, [r7, #28]
 800bd8e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bd92:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 800bd96:	69bb      	ldr	r3, [r7, #24]
 800bd98:	3b01      	subs	r3, #1
 800bd9a:	61bb      	str	r3, [r7, #24]
    while (blkCnt > 0U)
 800bd9c:	69bb      	ldr	r3, [r7, #24]
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d1e8      	bne.n	800bd74 <arm_mat_sub_f32+0x34>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800bda2:	2300      	movs	r3, #0
 800bda4:	74fb      	strb	r3, [r7, #19]
  }

  /* Return to application */
  return (status);
 800bda6:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800bdaa:	4618      	mov	r0, r3
 800bdac:	372c      	adds	r7, #44	@ 0x2c
 800bdae:	46bd      	mov	sp, r7
 800bdb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdb4:	4770      	bx	lr

0800bdb6 <arm_mat_trans_f32>:
}
#else
arm_status arm_mat_trans_f32(
  const arm_matrix_instance_f32 * pSrc,
        arm_matrix_instance_f32 * pDst)
{
 800bdb6:	b480      	push	{r7}
 800bdb8:	b08b      	sub	sp, #44	@ 0x2c
 800bdba:	af00      	add	r7, sp, #0
 800bdbc:	6078      	str	r0, [r7, #4]
 800bdbe:	6039      	str	r1, [r7, #0]
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	685b      	ldr	r3, [r3, #4]
 800bdc4:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 800bdc6:	683b      	ldr	r3, [r7, #0]
 800bdc8:	685b      	ldr	r3, [r3, #4]
 800bdca:	613b      	str	r3, [r7, #16]
  float32_t *px;                                 /* Temporary output data matrix pointer */
  uint16_t nRows = pSrc->numRows;                /* number of rows */
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	881b      	ldrh	r3, [r3, #0]
 800bdd0:	81fb      	strh	r3, [r7, #14]
  uint16_t nCols = pSrc->numCols;                /* number of columns */
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	885b      	ldrh	r3, [r3, #2]
 800bdd6:	81bb      	strh	r3, [r7, #12]
  uint32_t col, row = nRows, i = 0U;             /* Loop counters */
 800bdd8:	89fb      	ldrh	r3, [r7, #14]
 800bdda:	61bb      	str	r3, [r7, #24]
 800bddc:	2300      	movs	r3, #0
 800bdde:	617b      	str	r3, [r7, #20]
    /* Matrix transpose by exchanging the rows with columns */
    /* row loop */
    do
    {
      /* Pointer px is set to starting address of column being processed */
      px = pOut + i;
 800bde0:	697b      	ldr	r3, [r7, #20]
 800bde2:	009b      	lsls	r3, r3, #2
 800bde4:	693a      	ldr	r2, [r7, #16]
 800bde6:	4413      	add	r3, r2
 800bde8:	623b      	str	r3, [r7, #32]
      col = nCols % 0x4U;

#else

      /* Initialize col with number of samples */
      col = nCols;
 800bdea:	89bb      	ldrh	r3, [r7, #12]
 800bdec:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

      while (col > 0U)
 800bdee:	e00d      	b.n	800be0c <arm_mat_trans_f32+0x56>
      {
        /* Read and store input element in destination */
        *px = *pIn++;
 800bdf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bdf2:	1d1a      	adds	r2, r3, #4
 800bdf4:	627a      	str	r2, [r7, #36]	@ 0x24
 800bdf6:	681a      	ldr	r2, [r3, #0]
 800bdf8:	6a3b      	ldr	r3, [r7, #32]
 800bdfa:	601a      	str	r2, [r3, #0]

        /* Update pointer px to point to next row of transposed matrix */
        px += nRows;
 800bdfc:	89fb      	ldrh	r3, [r7, #14]
 800bdfe:	009b      	lsls	r3, r3, #2
 800be00:	6a3a      	ldr	r2, [r7, #32]
 800be02:	4413      	add	r3, r2
 800be04:	623b      	str	r3, [r7, #32]

        /* Decrement column loop counter */
        col--;
 800be06:	69fb      	ldr	r3, [r7, #28]
 800be08:	3b01      	subs	r3, #1
 800be0a:	61fb      	str	r3, [r7, #28]
      while (col > 0U)
 800be0c:	69fb      	ldr	r3, [r7, #28]
 800be0e:	2b00      	cmp	r3, #0
 800be10:	d1ee      	bne.n	800bdf0 <arm_mat_trans_f32+0x3a>
      }

      i++;
 800be12:	697b      	ldr	r3, [r7, #20]
 800be14:	3301      	adds	r3, #1
 800be16:	617b      	str	r3, [r7, #20]

      /* Decrement row loop counter */
      row--;
 800be18:	69bb      	ldr	r3, [r7, #24]
 800be1a:	3b01      	subs	r3, #1
 800be1c:	61bb      	str	r3, [r7, #24]

    } while (row > 0U);          /* row loop end */
 800be1e:	69bb      	ldr	r3, [r7, #24]
 800be20:	2b00      	cmp	r3, #0
 800be22:	d1dd      	bne.n	800bde0 <arm_mat_trans_f32+0x2a>

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800be24:	2300      	movs	r3, #0
 800be26:	72fb      	strb	r3, [r7, #11]
  }

  /* Return to application */
  return (status);
 800be28:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800be2c:	4618      	mov	r0, r3
 800be2e:	372c      	adds	r7, #44	@ 0x2c
 800be30:	46bd      	mov	sp, r7
 800be32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be36:	4770      	bx	lr

0800be38 <memset>:
 800be38:	4402      	add	r2, r0
 800be3a:	4603      	mov	r3, r0
 800be3c:	4293      	cmp	r3, r2
 800be3e:	d100      	bne.n	800be42 <memset+0xa>
 800be40:	4770      	bx	lr
 800be42:	f803 1b01 	strb.w	r1, [r3], #1
 800be46:	e7f9      	b.n	800be3c <memset+0x4>

0800be48 <__errno>:
 800be48:	4b01      	ldr	r3, [pc, #4]	@ (800be50 <__errno+0x8>)
 800be4a:	6818      	ldr	r0, [r3, #0]
 800be4c:	4770      	bx	lr
 800be4e:	bf00      	nop
 800be50:	2000020c 	.word	0x2000020c

0800be54 <__libc_init_array>:
 800be54:	b570      	push	{r4, r5, r6, lr}
 800be56:	4d0d      	ldr	r5, [pc, #52]	@ (800be8c <__libc_init_array+0x38>)
 800be58:	4c0d      	ldr	r4, [pc, #52]	@ (800be90 <__libc_init_array+0x3c>)
 800be5a:	1b64      	subs	r4, r4, r5
 800be5c:	10a4      	asrs	r4, r4, #2
 800be5e:	2600      	movs	r6, #0
 800be60:	42a6      	cmp	r6, r4
 800be62:	d109      	bne.n	800be78 <__libc_init_array+0x24>
 800be64:	4d0b      	ldr	r5, [pc, #44]	@ (800be94 <__libc_init_array+0x40>)
 800be66:	4c0c      	ldr	r4, [pc, #48]	@ (800be98 <__libc_init_array+0x44>)
 800be68:	f000 f848 	bl	800befc <_init>
 800be6c:	1b64      	subs	r4, r4, r5
 800be6e:	10a4      	asrs	r4, r4, #2
 800be70:	2600      	movs	r6, #0
 800be72:	42a6      	cmp	r6, r4
 800be74:	d105      	bne.n	800be82 <__libc_init_array+0x2e>
 800be76:	bd70      	pop	{r4, r5, r6, pc}
 800be78:	f855 3b04 	ldr.w	r3, [r5], #4
 800be7c:	4798      	blx	r3
 800be7e:	3601      	adds	r6, #1
 800be80:	e7ee      	b.n	800be60 <__libc_init_array+0xc>
 800be82:	f855 3b04 	ldr.w	r3, [r5], #4
 800be86:	4798      	blx	r3
 800be88:	3601      	adds	r6, #1
 800be8a:	e7f2      	b.n	800be72 <__libc_init_array+0x1e>
 800be8c:	0800bf5c 	.word	0x0800bf5c
 800be90:	0800bf5c 	.word	0x0800bf5c
 800be94:	0800bf5c 	.word	0x0800bf5c
 800be98:	0800bf60 	.word	0x0800bf60

0800be9c <memcpy>:
 800be9c:	440a      	add	r2, r1
 800be9e:	4291      	cmp	r1, r2
 800bea0:	f100 33ff 	add.w	r3, r0, #4294967295
 800bea4:	d100      	bne.n	800bea8 <memcpy+0xc>
 800bea6:	4770      	bx	lr
 800bea8:	b510      	push	{r4, lr}
 800beaa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800beae:	f803 4f01 	strb.w	r4, [r3, #1]!
 800beb2:	4291      	cmp	r1, r2
 800beb4:	d1f9      	bne.n	800beaa <memcpy+0xe>
 800beb6:	bd10      	pop	{r4, pc}

0800beb8 <sqrtf>:
 800beb8:	b508      	push	{r3, lr}
 800beba:	ed2d 8b02 	vpush	{d8}
 800bebe:	eeb0 8a40 	vmov.f32	s16, s0
 800bec2:	f000 f817 	bl	800bef4 <__ieee754_sqrtf>
 800bec6:	eeb4 8a48 	vcmp.f32	s16, s16
 800beca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bece:	d60c      	bvs.n	800beea <sqrtf+0x32>
 800bed0:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800bef0 <sqrtf+0x38>
 800bed4:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800bed8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bedc:	d505      	bpl.n	800beea <sqrtf+0x32>
 800bede:	f7ff ffb3 	bl	800be48 <__errno>
 800bee2:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800bee6:	2321      	movs	r3, #33	@ 0x21
 800bee8:	6003      	str	r3, [r0, #0]
 800beea:	ecbd 8b02 	vpop	{d8}
 800beee:	bd08      	pop	{r3, pc}
 800bef0:	00000000 	.word	0x00000000

0800bef4 <__ieee754_sqrtf>:
 800bef4:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800bef8:	4770      	bx	lr
	...

0800befc <_init>:
 800befc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800befe:	bf00      	nop
 800bf00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bf02:	bc08      	pop	{r3}
 800bf04:	469e      	mov	lr, r3
 800bf06:	4770      	bx	lr

0800bf08 <_fini>:
 800bf08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf0a:	bf00      	nop
 800bf0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bf0e:	bc08      	pop	{r3}
 800bf10:	469e      	mov	lr, r3
 800bf12:	4770      	bx	lr
