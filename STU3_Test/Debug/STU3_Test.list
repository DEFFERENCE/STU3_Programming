
STU3_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a9b8  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800ab90  0800ab90  0000bb90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800abd0  0800abd0  0000c26c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800abd0  0800abd0  0000bbd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800abd8  0800abd8  0000c26c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800abd8  0800abd8  0000bbd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800abdc  0800abdc  0000bbdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000026c  20000000  0800abe0  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001130  2000026c  0800ae4c  0000c26c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000139c  0800ae4c  0000c39c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c26c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f09b  00000000  00000000  0000c29c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000386c  00000000  00000000  0002b337  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018d0  00000000  00000000  0002eba8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001359  00000000  00000000  00030478  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028f01  00000000  00000000  000317d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d40d  00000000  00000000  0005a6d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001165e4  00000000  00000000  00077adf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0018e0c3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006cf8  00000000  00000000  0018e108  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  00194e00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000026c 	.word	0x2000026c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800ab78 	.word	0x0800ab78

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000270 	.word	0x20000270
 8000214:	0800ab78 	.word	0x0800ab78

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b988 	b.w	8000540 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	468e      	mov	lr, r1
 8000250:	4604      	mov	r4, r0
 8000252:	4688      	mov	r8, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4617      	mov	r7, r2
 800025c:	d962      	bls.n	8000324 <__udivmoddi4+0xdc>
 800025e:	fab2 f682 	clz	r6, r2
 8000262:	b14e      	cbz	r6, 8000278 <__udivmoddi4+0x30>
 8000264:	f1c6 0320 	rsb	r3, r6, #32
 8000268:	fa01 f806 	lsl.w	r8, r1, r6
 800026c:	fa20 f303 	lsr.w	r3, r0, r3
 8000270:	40b7      	lsls	r7, r6
 8000272:	ea43 0808 	orr.w	r8, r3, r8
 8000276:	40b4      	lsls	r4, r6
 8000278:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800027c:	fa1f fc87 	uxth.w	ip, r7
 8000280:	fbb8 f1fe 	udiv	r1, r8, lr
 8000284:	0c23      	lsrs	r3, r4, #16
 8000286:	fb0e 8811 	mls	r8, lr, r1, r8
 800028a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800028e:	fb01 f20c 	mul.w	r2, r1, ip
 8000292:	429a      	cmp	r2, r3
 8000294:	d909      	bls.n	80002aa <__udivmoddi4+0x62>
 8000296:	18fb      	adds	r3, r7, r3
 8000298:	f101 30ff 	add.w	r0, r1, #4294967295
 800029c:	f080 80ea 	bcs.w	8000474 <__udivmoddi4+0x22c>
 80002a0:	429a      	cmp	r2, r3
 80002a2:	f240 80e7 	bls.w	8000474 <__udivmoddi4+0x22c>
 80002a6:	3902      	subs	r1, #2
 80002a8:	443b      	add	r3, r7
 80002aa:	1a9a      	subs	r2, r3, r2
 80002ac:	b2a3      	uxth	r3, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002ba:	fb00 fc0c 	mul.w	ip, r0, ip
 80002be:	459c      	cmp	ip, r3
 80002c0:	d909      	bls.n	80002d6 <__udivmoddi4+0x8e>
 80002c2:	18fb      	adds	r3, r7, r3
 80002c4:	f100 32ff 	add.w	r2, r0, #4294967295
 80002c8:	f080 80d6 	bcs.w	8000478 <__udivmoddi4+0x230>
 80002cc:	459c      	cmp	ip, r3
 80002ce:	f240 80d3 	bls.w	8000478 <__udivmoddi4+0x230>
 80002d2:	443b      	add	r3, r7
 80002d4:	3802      	subs	r0, #2
 80002d6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002da:	eba3 030c 	sub.w	r3, r3, ip
 80002de:	2100      	movs	r1, #0
 80002e0:	b11d      	cbz	r5, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40f3      	lsrs	r3, r6
 80002e4:	2200      	movs	r2, #0
 80002e6:	e9c5 3200 	strd	r3, r2, [r5]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d905      	bls.n	80002fe <__udivmoddi4+0xb6>
 80002f2:	b10d      	cbz	r5, 80002f8 <__udivmoddi4+0xb0>
 80002f4:	e9c5 0100 	strd	r0, r1, [r5]
 80002f8:	2100      	movs	r1, #0
 80002fa:	4608      	mov	r0, r1
 80002fc:	e7f5      	b.n	80002ea <__udivmoddi4+0xa2>
 80002fe:	fab3 f183 	clz	r1, r3
 8000302:	2900      	cmp	r1, #0
 8000304:	d146      	bne.n	8000394 <__udivmoddi4+0x14c>
 8000306:	4573      	cmp	r3, lr
 8000308:	d302      	bcc.n	8000310 <__udivmoddi4+0xc8>
 800030a:	4282      	cmp	r2, r0
 800030c:	f200 8105 	bhi.w	800051a <__udivmoddi4+0x2d2>
 8000310:	1a84      	subs	r4, r0, r2
 8000312:	eb6e 0203 	sbc.w	r2, lr, r3
 8000316:	2001      	movs	r0, #1
 8000318:	4690      	mov	r8, r2
 800031a:	2d00      	cmp	r5, #0
 800031c:	d0e5      	beq.n	80002ea <__udivmoddi4+0xa2>
 800031e:	e9c5 4800 	strd	r4, r8, [r5]
 8000322:	e7e2      	b.n	80002ea <__udivmoddi4+0xa2>
 8000324:	2a00      	cmp	r2, #0
 8000326:	f000 8090 	beq.w	800044a <__udivmoddi4+0x202>
 800032a:	fab2 f682 	clz	r6, r2
 800032e:	2e00      	cmp	r6, #0
 8000330:	f040 80a4 	bne.w	800047c <__udivmoddi4+0x234>
 8000334:	1a8a      	subs	r2, r1, r2
 8000336:	0c03      	lsrs	r3, r0, #16
 8000338:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800033c:	b280      	uxth	r0, r0
 800033e:	b2bc      	uxth	r4, r7
 8000340:	2101      	movs	r1, #1
 8000342:	fbb2 fcfe 	udiv	ip, r2, lr
 8000346:	fb0e 221c 	mls	r2, lr, ip, r2
 800034a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800034e:	fb04 f20c 	mul.w	r2, r4, ip
 8000352:	429a      	cmp	r2, r3
 8000354:	d907      	bls.n	8000366 <__udivmoddi4+0x11e>
 8000356:	18fb      	adds	r3, r7, r3
 8000358:	f10c 38ff 	add.w	r8, ip, #4294967295
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x11c>
 800035e:	429a      	cmp	r2, r3
 8000360:	f200 80e0 	bhi.w	8000524 <__udivmoddi4+0x2dc>
 8000364:	46c4      	mov	ip, r8
 8000366:	1a9b      	subs	r3, r3, r2
 8000368:	fbb3 f2fe 	udiv	r2, r3, lr
 800036c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000370:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000374:	fb02 f404 	mul.w	r4, r2, r4
 8000378:	429c      	cmp	r4, r3
 800037a:	d907      	bls.n	800038c <__udivmoddi4+0x144>
 800037c:	18fb      	adds	r3, r7, r3
 800037e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x142>
 8000384:	429c      	cmp	r4, r3
 8000386:	f200 80ca 	bhi.w	800051e <__udivmoddi4+0x2d6>
 800038a:	4602      	mov	r2, r0
 800038c:	1b1b      	subs	r3, r3, r4
 800038e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000392:	e7a5      	b.n	80002e0 <__udivmoddi4+0x98>
 8000394:	f1c1 0620 	rsb	r6, r1, #32
 8000398:	408b      	lsls	r3, r1
 800039a:	fa22 f706 	lsr.w	r7, r2, r6
 800039e:	431f      	orrs	r7, r3
 80003a0:	fa0e f401 	lsl.w	r4, lr, r1
 80003a4:	fa20 f306 	lsr.w	r3, r0, r6
 80003a8:	fa2e fe06 	lsr.w	lr, lr, r6
 80003ac:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003b0:	4323      	orrs	r3, r4
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	fa1f fc87 	uxth.w	ip, r7
 80003ba:	fbbe f0f9 	udiv	r0, lr, r9
 80003be:	0c1c      	lsrs	r4, r3, #16
 80003c0:	fb09 ee10 	mls	lr, r9, r0, lr
 80003c4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003c8:	fb00 fe0c 	mul.w	lr, r0, ip
 80003cc:	45a6      	cmp	lr, r4
 80003ce:	fa02 f201 	lsl.w	r2, r2, r1
 80003d2:	d909      	bls.n	80003e8 <__udivmoddi4+0x1a0>
 80003d4:	193c      	adds	r4, r7, r4
 80003d6:	f100 3aff 	add.w	sl, r0, #4294967295
 80003da:	f080 809c 	bcs.w	8000516 <__udivmoddi4+0x2ce>
 80003de:	45a6      	cmp	lr, r4
 80003e0:	f240 8099 	bls.w	8000516 <__udivmoddi4+0x2ce>
 80003e4:	3802      	subs	r0, #2
 80003e6:	443c      	add	r4, r7
 80003e8:	eba4 040e 	sub.w	r4, r4, lr
 80003ec:	fa1f fe83 	uxth.w	lr, r3
 80003f0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003f4:	fb09 4413 	mls	r4, r9, r3, r4
 80003f8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003fc:	fb03 fc0c 	mul.w	ip, r3, ip
 8000400:	45a4      	cmp	ip, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1ce>
 8000404:	193c      	adds	r4, r7, r4
 8000406:	f103 3eff 	add.w	lr, r3, #4294967295
 800040a:	f080 8082 	bcs.w	8000512 <__udivmoddi4+0x2ca>
 800040e:	45a4      	cmp	ip, r4
 8000410:	d97f      	bls.n	8000512 <__udivmoddi4+0x2ca>
 8000412:	3b02      	subs	r3, #2
 8000414:	443c      	add	r4, r7
 8000416:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800041a:	eba4 040c 	sub.w	r4, r4, ip
 800041e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000422:	4564      	cmp	r4, ip
 8000424:	4673      	mov	r3, lr
 8000426:	46e1      	mov	r9, ip
 8000428:	d362      	bcc.n	80004f0 <__udivmoddi4+0x2a8>
 800042a:	d05f      	beq.n	80004ec <__udivmoddi4+0x2a4>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x1fe>
 800042e:	ebb8 0203 	subs.w	r2, r8, r3
 8000432:	eb64 0409 	sbc.w	r4, r4, r9
 8000436:	fa04 f606 	lsl.w	r6, r4, r6
 800043a:	fa22 f301 	lsr.w	r3, r2, r1
 800043e:	431e      	orrs	r6, r3
 8000440:	40cc      	lsrs	r4, r1
 8000442:	e9c5 6400 	strd	r6, r4, [r5]
 8000446:	2100      	movs	r1, #0
 8000448:	e74f      	b.n	80002ea <__udivmoddi4+0xa2>
 800044a:	fbb1 fcf2 	udiv	ip, r1, r2
 800044e:	0c01      	lsrs	r1, r0, #16
 8000450:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000454:	b280      	uxth	r0, r0
 8000456:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800045a:	463b      	mov	r3, r7
 800045c:	4638      	mov	r0, r7
 800045e:	463c      	mov	r4, r7
 8000460:	46b8      	mov	r8, r7
 8000462:	46be      	mov	lr, r7
 8000464:	2620      	movs	r6, #32
 8000466:	fbb1 f1f7 	udiv	r1, r1, r7
 800046a:	eba2 0208 	sub.w	r2, r2, r8
 800046e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000472:	e766      	b.n	8000342 <__udivmoddi4+0xfa>
 8000474:	4601      	mov	r1, r0
 8000476:	e718      	b.n	80002aa <__udivmoddi4+0x62>
 8000478:	4610      	mov	r0, r2
 800047a:	e72c      	b.n	80002d6 <__udivmoddi4+0x8e>
 800047c:	f1c6 0220 	rsb	r2, r6, #32
 8000480:	fa2e f302 	lsr.w	r3, lr, r2
 8000484:	40b7      	lsls	r7, r6
 8000486:	40b1      	lsls	r1, r6
 8000488:	fa20 f202 	lsr.w	r2, r0, r2
 800048c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000490:	430a      	orrs	r2, r1
 8000492:	fbb3 f8fe 	udiv	r8, r3, lr
 8000496:	b2bc      	uxth	r4, r7
 8000498:	fb0e 3318 	mls	r3, lr, r8, r3
 800049c:	0c11      	lsrs	r1, r2, #16
 800049e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a2:	fb08 f904 	mul.w	r9, r8, r4
 80004a6:	40b0      	lsls	r0, r6
 80004a8:	4589      	cmp	r9, r1
 80004aa:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004ae:	b280      	uxth	r0, r0
 80004b0:	d93e      	bls.n	8000530 <__udivmoddi4+0x2e8>
 80004b2:	1879      	adds	r1, r7, r1
 80004b4:	f108 3cff 	add.w	ip, r8, #4294967295
 80004b8:	d201      	bcs.n	80004be <__udivmoddi4+0x276>
 80004ba:	4589      	cmp	r9, r1
 80004bc:	d81f      	bhi.n	80004fe <__udivmoddi4+0x2b6>
 80004be:	eba1 0109 	sub.w	r1, r1, r9
 80004c2:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c6:	fb09 f804 	mul.w	r8, r9, r4
 80004ca:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ce:	b292      	uxth	r2, r2
 80004d0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004d4:	4542      	cmp	r2, r8
 80004d6:	d229      	bcs.n	800052c <__udivmoddi4+0x2e4>
 80004d8:	18ba      	adds	r2, r7, r2
 80004da:	f109 31ff 	add.w	r1, r9, #4294967295
 80004de:	d2c4      	bcs.n	800046a <__udivmoddi4+0x222>
 80004e0:	4542      	cmp	r2, r8
 80004e2:	d2c2      	bcs.n	800046a <__udivmoddi4+0x222>
 80004e4:	f1a9 0102 	sub.w	r1, r9, #2
 80004e8:	443a      	add	r2, r7
 80004ea:	e7be      	b.n	800046a <__udivmoddi4+0x222>
 80004ec:	45f0      	cmp	r8, lr
 80004ee:	d29d      	bcs.n	800042c <__udivmoddi4+0x1e4>
 80004f0:	ebbe 0302 	subs.w	r3, lr, r2
 80004f4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004f8:	3801      	subs	r0, #1
 80004fa:	46e1      	mov	r9, ip
 80004fc:	e796      	b.n	800042c <__udivmoddi4+0x1e4>
 80004fe:	eba7 0909 	sub.w	r9, r7, r9
 8000502:	4449      	add	r1, r9
 8000504:	f1a8 0c02 	sub.w	ip, r8, #2
 8000508:	fbb1 f9fe 	udiv	r9, r1, lr
 800050c:	fb09 f804 	mul.w	r8, r9, r4
 8000510:	e7db      	b.n	80004ca <__udivmoddi4+0x282>
 8000512:	4673      	mov	r3, lr
 8000514:	e77f      	b.n	8000416 <__udivmoddi4+0x1ce>
 8000516:	4650      	mov	r0, sl
 8000518:	e766      	b.n	80003e8 <__udivmoddi4+0x1a0>
 800051a:	4608      	mov	r0, r1
 800051c:	e6fd      	b.n	800031a <__udivmoddi4+0xd2>
 800051e:	443b      	add	r3, r7
 8000520:	3a02      	subs	r2, #2
 8000522:	e733      	b.n	800038c <__udivmoddi4+0x144>
 8000524:	f1ac 0c02 	sub.w	ip, ip, #2
 8000528:	443b      	add	r3, r7
 800052a:	e71c      	b.n	8000366 <__udivmoddi4+0x11e>
 800052c:	4649      	mov	r1, r9
 800052e:	e79c      	b.n	800046a <__udivmoddi4+0x222>
 8000530:	eba1 0109 	sub.w	r1, r1, r9
 8000534:	46c4      	mov	ip, r8
 8000536:	fbb1 f9fe 	udiv	r9, r1, lr
 800053a:	fb09 f804 	mul.w	r8, r9, r4
 800053e:	e7c4      	b.n	80004ca <__udivmoddi4+0x282>

08000540 <__aeabi_idiv0>:
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop

08000544 <modbus_heartbeat_init>:
 *      Author: User
 */

#include "Based_System_Communication.h"

void modbus_heartbeat_init(ModbusHandleTypedef* hmodbus) {
 8000544:	b480      	push	{r7}
 8000546:	b083      	sub	sp, #12
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
	hmodbus->RegisterAddress[0x00].U16 = 22881;
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	685b      	ldr	r3, [r3, #4]
 8000550:	f645 1261 	movw	r2, #22881	@ 0x5961
 8000554:	801a      	strh	r2, [r3, #0]
}
 8000556:	bf00      	nop
 8000558:	370c      	adds	r7, #12
 800055a:	46bd      	mov	sp, r7
 800055c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000560:	4770      	bx	lr

08000562 <modbus_heartbeat>:

void modbus_heartbeat(ModbusHandleTypedef *hmodbus) {
 8000562:	b480      	push	{r7}
 8000564:	b083      	sub	sp, #12
 8000566:	af00      	add	r7, sp, #0
 8000568:	6078      	str	r0, [r7, #4]
	if (hmodbus->RegisterAddress[0x00].U16 == 18537) {
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	685b      	ldr	r3, [r3, #4]
 800056e:	881b      	ldrh	r3, [r3, #0]
 8000570:	f644 0269 	movw	r2, #18537	@ 0x4869
 8000574:	4293      	cmp	r3, r2
 8000576:	d104      	bne.n	8000582 <modbus_heartbeat+0x20>
		hmodbus->RegisterAddress[0x00].U16 = 22881;
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	685b      	ldr	r3, [r3, #4]
 800057c:	f645 1261 	movw	r2, #22881	@ 0x5961
 8000580:	801a      	strh	r2, [r3, #0]
	}
}
 8000582:	bf00      	nop
 8000584:	370c      	adds	r7, #12
 8000586:	46bd      	mov	sp, r7
 8000588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058c:	4770      	bx	lr

0800058e <modbus_Update_All>:
void modbus_theta_acceleration(ModbusHandleTypedef *hmodbus, float theta_accel) {
	hmodbus->RegisterAddress[0x16].U16 = theta_accel;
}
void modbus_Update_All(ModbusHandleTypedef *hmodbus, float r_pos,
		float theta_pos, float r_Velo, float theta_Velo, float r_accel,
		float theta_accel) {
 800058e:	b480      	push	{r7}
 8000590:	b089      	sub	sp, #36	@ 0x24
 8000592:	af00      	add	r7, sp, #0
 8000594:	61f8      	str	r0, [r7, #28]
 8000596:	ed87 0a06 	vstr	s0, [r7, #24]
 800059a:	edc7 0a05 	vstr	s1, [r7, #20]
 800059e:	ed87 1a04 	vstr	s2, [r7, #16]
 80005a2:	edc7 1a03 	vstr	s3, [r7, #12]
 80005a6:	ed87 2a02 	vstr	s4, [r7, #8]
 80005aa:	edc7 2a01 	vstr	s5, [r7, #4]
	hmodbus->RegisterAddress[0x11].U16 = r_pos;
 80005ae:	69fb      	ldr	r3, [r7, #28]
 80005b0:	685b      	ldr	r3, [r3, #4]
 80005b2:	3322      	adds	r3, #34	@ 0x22
 80005b4:	edd7 7a06 	vldr	s15, [r7, #24]
 80005b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80005bc:	ee17 2a90 	vmov	r2, s15
 80005c0:	b292      	uxth	r2, r2
 80005c2:	801a      	strh	r2, [r3, #0]
	hmodbus->RegisterAddress[0x12].U16 = theta_pos;
 80005c4:	69fb      	ldr	r3, [r7, #28]
 80005c6:	685b      	ldr	r3, [r3, #4]
 80005c8:	3324      	adds	r3, #36	@ 0x24
 80005ca:	edd7 7a05 	vldr	s15, [r7, #20]
 80005ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80005d2:	ee17 2a90 	vmov	r2, s15
 80005d6:	b292      	uxth	r2, r2
 80005d8:	801a      	strh	r2, [r3, #0]
	hmodbus->RegisterAddress[0x13].U16 = r_Velo;
 80005da:	69fb      	ldr	r3, [r7, #28]
 80005dc:	685b      	ldr	r3, [r3, #4]
 80005de:	3326      	adds	r3, #38	@ 0x26
 80005e0:	edd7 7a04 	vldr	s15, [r7, #16]
 80005e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80005e8:	ee17 2a90 	vmov	r2, s15
 80005ec:	b292      	uxth	r2, r2
 80005ee:	801a      	strh	r2, [r3, #0]
	hmodbus->RegisterAddress[0x14].U16 = theta_Velo;
 80005f0:	69fb      	ldr	r3, [r7, #28]
 80005f2:	685b      	ldr	r3, [r3, #4]
 80005f4:	3328      	adds	r3, #40	@ 0x28
 80005f6:	edd7 7a03 	vldr	s15, [r7, #12]
 80005fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80005fe:	ee17 2a90 	vmov	r2, s15
 8000602:	b292      	uxth	r2, r2
 8000604:	801a      	strh	r2, [r3, #0]
	hmodbus->RegisterAddress[0x15].U16 = r_accel;
 8000606:	69fb      	ldr	r3, [r7, #28]
 8000608:	685b      	ldr	r3, [r3, #4]
 800060a:	332a      	adds	r3, #42	@ 0x2a
 800060c:	edd7 7a02 	vldr	s15, [r7, #8]
 8000610:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000614:	ee17 2a90 	vmov	r2, s15
 8000618:	b292      	uxth	r2, r2
 800061a:	801a      	strh	r2, [r3, #0]
	hmodbus->RegisterAddress[0x16].U16 = theta_accel;
 800061c:	69fb      	ldr	r3, [r7, #28]
 800061e:	685b      	ldr	r3, [r3, #4]
 8000620:	332c      	adds	r3, #44	@ 0x2c
 8000622:	edd7 7a01 	vldr	s15, [r7, #4]
 8000626:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800062a:	ee17 2a90 	vmov	r2, s15
 800062e:	b292      	uxth	r2, r2
 8000630:	801a      	strh	r2, [r3, #0]
}
 8000632:	bf00      	nop
 8000634:	3724      	adds	r7, #36	@ 0x24
 8000636:	46bd      	mov	sp, r7
 8000638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063c:	4770      	bx	lr

0800063e <set_Target_Position_ten_points>:

void set_Target_Position_ten_points(ModbusHandleTypedef *hmodbus, float point,
		uint8_t index) {
 800063e:	b480      	push	{r7}
 8000640:	b085      	sub	sp, #20
 8000642:	af00      	add	r7, sp, #0
 8000644:	60f8      	str	r0, [r7, #12]
 8000646:	ed87 0a02 	vstr	s0, [r7, #8]
 800064a:	460b      	mov	r3, r1
 800064c:	71fb      	strb	r3, [r7, #7]
	hmodbus->RegisterAddress[0x20 + index].U16 = point;
 800064e:	68fb      	ldr	r3, [r7, #12]
 8000650:	685a      	ldr	r2, [r3, #4]
 8000652:	79fb      	ldrb	r3, [r7, #7]
 8000654:	3320      	adds	r3, #32
 8000656:	005b      	lsls	r3, r3, #1
 8000658:	4413      	add	r3, r2
 800065a:	edd7 7a02 	vldr	s15, [r7, #8]
 800065e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000662:	ee17 2a90 	vmov	r2, s15
 8000666:	b292      	uxth	r2, r2
 8000668:	801a      	strh	r2, [r3, #0]
}
 800066a:	bf00      	nop
 800066c:	3714      	adds	r7, #20
 800066e:	46bd      	mov	sp, r7
 8000670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000674:	4770      	bx	lr

08000676 <modbus_set_goal_r_position>:
uint16_t modbus_set_goal_r_position(ModbusHandleTypedef *hmodbus) {
 8000676:	b480      	push	{r7}
 8000678:	b085      	sub	sp, #20
 800067a:	af00      	add	r7, sp, #0
 800067c:	6078      	str	r0, [r7, #4]
	uint16_t goal_r_position = hmodbus->RegisterAddress[0x40].U16;
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	685b      	ldr	r3, [r3, #4]
 8000682:	3380      	adds	r3, #128	@ 0x80
 8000684:	881b      	ldrh	r3, [r3, #0]
 8000686:	81fb      	strh	r3, [r7, #14]
	return goal_r_position;
 8000688:	89fb      	ldrh	r3, [r7, #14]
}
 800068a:	4618      	mov	r0, r3
 800068c:	3714      	adds	r7, #20
 800068e:	46bd      	mov	sp, r7
 8000690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000694:	4770      	bx	lr

08000696 <modbus_set_goal_theta_position>:
uint16_t modbus_set_goal_theta_position(ModbusHandleTypedef *hmodbus) {
 8000696:	b480      	push	{r7}
 8000698:	b085      	sub	sp, #20
 800069a:	af00      	add	r7, sp, #0
 800069c:	6078      	str	r0, [r7, #4]
	uint16_t goal_theta_position = hmodbus->RegisterAddress[0x41].U16;
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	685b      	ldr	r3, [r3, #4]
 80006a2:	3382      	adds	r3, #130	@ 0x82
 80006a4:	881b      	ldrh	r3, [r3, #0]
 80006a6:	81fb      	strh	r3, [r7, #14]
	return goal_theta_position;
 80006a8:	89fb      	ldrh	r3, [r7, #14]
}
 80006aa:	4618      	mov	r0, r3
 80006ac:	3714      	adds	r7, #20
 80006ae:	46bd      	mov	sp, r7
 80006b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b4:	4770      	bx	lr

080006b6 <Encoder_Init>:
#include "Encoder.h"

#define Count_PER_REV 12000.0f
#define TWO_PI 6.283185f

void Encoder_Init(Encoder *enc, TIM_HandleTypeDef *htim) {
 80006b6:	b580      	push	{r7, lr}
 80006b8:	b082      	sub	sp, #8
 80006ba:	af00      	add	r7, sp, #0
 80006bc:	6078      	str	r0, [r7, #4]
 80006be:	6039      	str	r1, [r7, #0]
    enc->htim = htim;
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	683a      	ldr	r2, [r7, #0]
 80006c4:	601a      	str	r2, [r3, #0]
    HAL_TIM_Encoder_Start(htim, TIM_CHANNEL_ALL);
 80006c6:	213c      	movs	r1, #60	@ 0x3c
 80006c8:	6838      	ldr	r0, [r7, #0]
 80006ca:	f006 f89d 	bl	8006808 <HAL_TIM_Encoder_Start>

    enc->lastRawPosition = __HAL_TIM_GET_COUNTER(htim);
 80006ce:	683b      	ldr	r3, [r7, #0]
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80006d4:	461a      	mov	r2, r3
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	605a      	str	r2, [r3, #4]
    enc->position = 0;
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	f04f 0200 	mov.w	r2, #0
 80006e0:	609a      	str	r2, [r3, #8]
    enc->velocity = 0;
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	f04f 0200 	mov.w	r2, #0
 80006e8:	60da      	str	r2, [r3, #12]
    enc->acceleration = 0;
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	f04f 0200 	mov.w	r2, #0
 80006f0:	611a      	str	r2, [r3, #16]
    enc->lastPosition = 0;
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	f04f 0200 	mov.w	r2, #0
 80006f8:	615a      	str	r2, [r3, #20]
    enc->lastVelocity = 0;
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	f04f 0200 	mov.w	r2, #0
 8000700:	619a      	str	r2, [r3, #24]
}
 8000702:	bf00      	nop
 8000704:	3708      	adds	r7, #8
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}

0800070a <Encoder_setLimit>:
    enc->lastPosition = enc->position;
    enc->lastVelocity = enc->velocity;
}

void Encoder_setLimit(Encoder *enc, float limit)
{
 800070a:	b480      	push	{r7}
 800070c:	b083      	sub	sp, #12
 800070e:	af00      	add	r7, sp, #0
 8000710:	6078      	str	r0, [r7, #4]
 8000712:	ed87 0a00 	vstr	s0, [r7]
		enc->position = limit;
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	683a      	ldr	r2, [r7, #0]
 800071a:	609a      	str	r2, [r3, #8]
}
 800071c:	bf00      	nop
 800071e:	370c      	adds	r7, #12
 8000720:	46bd      	mov	sp, r7
 8000722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000726:	4770      	bx	lr

08000728 <PS2_ReadData>:
uint8_t Position_Revolute[10];

#define PS2_CS_PORT GPIOC
#define PS2_CS_PIN  GPIO_PIN_10

void PS2_ReadData() {
 8000728:	b580      	push	{r7, lr}
 800072a:	b084      	sub	sp, #16
 800072c:	af02      	add	r7, sp, #8
	HAL_Delay(1);
 800072e:	2001      	movs	r0, #1
 8000730:	f002 f988 	bl	8002a44 <HAL_Delay>
	HAL_GPIO_WritePin(PS2_CS_PORT, PS2_CS_PIN, GPIO_PIN_RESET);
 8000734:	2200      	movs	r2, #0
 8000736:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800073a:	4814      	ldr	r0, [pc, #80]	@ (800078c <PS2_ReadData+0x64>)
 800073c:	f004 f874 	bl	8004828 <HAL_GPIO_WritePin>

	for (int i = 0; i < PS2_DATA_LENGTH; i++) {
 8000740:	2300      	movs	r3, #0
 8000742:	607b      	str	r3, [r7, #4]
 8000744:	e012      	b.n	800076c <PS2_ReadData+0x44>
		HAL_SPI_TransmitReceive(&hspi1, &SPITx[i], &SPIRx[i], 1, HAL_MAX_DELAY);
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	4a11      	ldr	r2, [pc, #68]	@ (8000790 <PS2_ReadData+0x68>)
 800074a:	1899      	adds	r1, r3, r2
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	4a11      	ldr	r2, [pc, #68]	@ (8000794 <PS2_ReadData+0x6c>)
 8000750:	441a      	add	r2, r3
 8000752:	f04f 33ff 	mov.w	r3, #4294967295
 8000756:	9300      	str	r3, [sp, #0]
 8000758:	2301      	movs	r3, #1
 800075a:	480f      	ldr	r0, [pc, #60]	@ (8000798 <PS2_ReadData+0x70>)
 800075c:	f005 f96f 	bl	8005a3e <HAL_SPI_TransmitReceive>
		HAL_Delay(1);
 8000760:	2001      	movs	r0, #1
 8000762:	f002 f96f 	bl	8002a44 <HAL_Delay>
	for (int i = 0; i < PS2_DATA_LENGTH; i++) {
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	3301      	adds	r3, #1
 800076a:	607b      	str	r3, [r7, #4]
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	2b07      	cmp	r3, #7
 8000770:	dde9      	ble.n	8000746 <PS2_ReadData+0x1e>
	}

	HAL_GPIO_WritePin(PS2_CS_PORT, PS2_CS_PIN, GPIO_PIN_SET);
 8000772:	2201      	movs	r2, #1
 8000774:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000778:	4804      	ldr	r0, [pc, #16]	@ (800078c <PS2_ReadData+0x64>)
 800077a:	f004 f855 	bl	8004828 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800077e:	2001      	movs	r0, #1
 8000780:	f002 f960 	bl	8002a44 <HAL_Delay>
}
 8000784:	bf00      	nop
 8000786:	3708      	adds	r7, #8
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}
 800078c:	48000800 	.word	0x48000800
 8000790:	20000000 	.word	0x20000000
 8000794:	20000288 	.word	0x20000288
 8000798:	20000300 	.word	0x20000300

0800079c <PS2_ButtonCircle>:

uint8_t PS2_ButtonCircle() {
 800079c:	b480      	push	{r7}
 800079e:	af00      	add	r7, sp, #0
	return !(SPIRx[4] & 0x20);
 80007a0:	4b06      	ldr	r3, [pc, #24]	@ (80007bc <PS2_ButtonCircle+0x20>)
 80007a2:	791b      	ldrb	r3, [r3, #4]
 80007a4:	f003 0320 	and.w	r3, r3, #32
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	bf0c      	ite	eq
 80007ac:	2301      	moveq	r3, #1
 80007ae:	2300      	movne	r3, #0
 80007b0:	b2db      	uxtb	r3, r3
}
 80007b2:	4618      	mov	r0, r3
 80007b4:	46bd      	mov	sp, r7
 80007b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ba:	4770      	bx	lr
 80007bc:	20000288 	.word	0x20000288

080007c0 <PS2_ButtonSquare>:

uint8_t PS2_ButtonSquare() {
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0
	return !(SPIRx[4] & 0x80);
 80007c4:	4b05      	ldr	r3, [pc, #20]	@ (80007dc <PS2_ButtonSquare+0x1c>)
 80007c6:	791b      	ldrb	r3, [r3, #4]
 80007c8:	b25b      	sxtb	r3, r3
 80007ca:	43db      	mvns	r3, r3
 80007cc:	b2db      	uxtb	r3, r3
 80007ce:	09db      	lsrs	r3, r3, #7
 80007d0:	b2db      	uxtb	r3, r3
}
 80007d2:	4618      	mov	r0, r3
 80007d4:	46bd      	mov	sp, r7
 80007d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007da:	4770      	bx	lr
 80007dc:	20000288 	.word	0x20000288

080007e0 <PS2_ButtonTriangle>:

uint8_t PS2_ButtonTriangle() {
 80007e0:	b480      	push	{r7}
 80007e2:	af00      	add	r7, sp, #0
	return !(SPIRx[4] & 0x10);
 80007e4:	4b06      	ldr	r3, [pc, #24]	@ (8000800 <PS2_ButtonTriangle+0x20>)
 80007e6:	791b      	ldrb	r3, [r3, #4]
 80007e8:	f003 0310 	and.w	r3, r3, #16
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	bf0c      	ite	eq
 80007f0:	2301      	moveq	r3, #1
 80007f2:	2300      	movne	r3, #0
 80007f4:	b2db      	uxtb	r3, r3
}
 80007f6:	4618      	mov	r0, r3
 80007f8:	46bd      	mov	sp, r7
 80007fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fe:	4770      	bx	lr
 8000800:	20000288 	.word	0x20000288

08000804 <PS2_ButtonCross>:

uint8_t PS2_ButtonCross() {
 8000804:	b480      	push	{r7}
 8000806:	af00      	add	r7, sp, #0
	return !(SPIRx[4] & 0x40);
 8000808:	4b06      	ldr	r3, [pc, #24]	@ (8000824 <PS2_ButtonCross+0x20>)
 800080a:	791b      	ldrb	r3, [r3, #4]
 800080c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000810:	2b00      	cmp	r3, #0
 8000812:	bf0c      	ite	eq
 8000814:	2301      	moveq	r3, #1
 8000816:	2300      	movne	r3, #0
 8000818:	b2db      	uxtb	r3, r3
}
 800081a:	4618      	mov	r0, r3
 800081c:	46bd      	mov	sp, r7
 800081e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000822:	4770      	bx	lr
 8000824:	20000288 	.word	0x20000288

08000828 <PS2_ButtonR1>:

uint8_t PS2_ButtonR1() {
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0
	return !(SPIRx[4] & 0x08);
 800082c:	4b06      	ldr	r3, [pc, #24]	@ (8000848 <PS2_ButtonR1+0x20>)
 800082e:	791b      	ldrb	r3, [r3, #4]
 8000830:	f003 0308 	and.w	r3, r3, #8
 8000834:	2b00      	cmp	r3, #0
 8000836:	bf0c      	ite	eq
 8000838:	2301      	moveq	r3, #1
 800083a:	2300      	movne	r3, #0
 800083c:	b2db      	uxtb	r3, r3
}
 800083e:	4618      	mov	r0, r3
 8000840:	46bd      	mov	sp, r7
 8000842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000846:	4770      	bx	lr
 8000848:	20000288 	.word	0x20000288

0800084c <PS2_ButtonR2>:

uint8_t PS2_ButtonR2() {
 800084c:	b480      	push	{r7}
 800084e:	af00      	add	r7, sp, #0
	return !(SPIRx[4] & 0x02);
 8000850:	4b06      	ldr	r3, [pc, #24]	@ (800086c <PS2_ButtonR2+0x20>)
 8000852:	791b      	ldrb	r3, [r3, #4]
 8000854:	f003 0302 	and.w	r3, r3, #2
 8000858:	2b00      	cmp	r3, #0
 800085a:	bf0c      	ite	eq
 800085c:	2301      	moveq	r3, #1
 800085e:	2300      	movne	r3, #0
 8000860:	b2db      	uxtb	r3, r3
}
 8000862:	4618      	mov	r0, r3
 8000864:	46bd      	mov	sp, r7
 8000866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086a:	4770      	bx	lr
 800086c:	20000288 	.word	0x20000288

08000870 <PS2_ButtonSelect>:

uint8_t PS2_ButtonSelect() {
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0
	return !(SPIRx[3] & 0x01);
 8000874:	4b06      	ldr	r3, [pc, #24]	@ (8000890 <PS2_ButtonSelect+0x20>)
 8000876:	78db      	ldrb	r3, [r3, #3]
 8000878:	f003 0301 	and.w	r3, r3, #1
 800087c:	2b00      	cmp	r3, #0
 800087e:	bf0c      	ite	eq
 8000880:	2301      	moveq	r3, #1
 8000882:	2300      	movne	r3, #0
 8000884:	b2db      	uxtb	r3, r3
}
 8000886:	4618      	mov	r0, r3
 8000888:	46bd      	mov	sp, r7
 800088a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088e:	4770      	bx	lr
 8000890:	20000288 	.word	0x20000288

08000894 <PS2_ButtonStart>:

uint8_t PS2_ButtonStart() {
 8000894:	b480      	push	{r7}
 8000896:	af00      	add	r7, sp, #0
	return !(SPIRx[3] & 0x08);
 8000898:	4b06      	ldr	r3, [pc, #24]	@ (80008b4 <PS2_ButtonStart+0x20>)
 800089a:	78db      	ldrb	r3, [r3, #3]
 800089c:	f003 0308 	and.w	r3, r3, #8
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	bf0c      	ite	eq
 80008a4:	2301      	moveq	r3, #1
 80008a6:	2300      	movne	r3, #0
 80008a8:	b2db      	uxtb	r3, r3
}
 80008aa:	4618      	mov	r0, r3
 80008ac:	46bd      	mov	sp, r7
 80008ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b2:	4770      	bx	lr
 80008b4:	20000288 	.word	0x20000288

080008b8 <modbus_1t5_Timeout>:
void Modbus_frame_response();


// function for interrupt
void modbus_1t5_Timeout(TIM_HandleTypeDef *htim)
{
 80008b8:	b480      	push	{r7}
 80008ba:	b083      	sub	sp, #12
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 80008c0:	4b04      	ldr	r3, [pc, #16]	@ (80008d4 <modbus_1t5_Timeout+0x1c>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	2201      	movs	r2, #1
 80008c6:	751a      	strb	r2, [r3, #20]
}
 80008c8:	bf00      	nop
 80008ca:	370c      	adds	r7, #12
 80008cc:	46bd      	mov	sp, r7
 80008ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d2:	4770      	bx	lr
 80008d4:	20000290 	.word	0x20000290

080008d8 <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim)
{
 80008d8:	b480      	push	{r7}
 80008da:	b083      	sub	sp, #12
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 80008e0:	4b04      	ldr	r3, [pc, #16]	@ (80008f4 <modbus_3t5_Timeout+0x1c>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	2201      	movs	r2, #1
 80008e6:	755a      	strb	r2, [r3, #21]
}
 80008e8:	bf00      	nop
 80008ea:	370c      	adds	r7, #12
 80008ec:	46bd      	mov	sp, r7
 80008ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f2:	4770      	bx	lr
 80008f4:	20000290 	.word	0x20000290

080008f8 <modbus_UART_Recived>:
void modbus_UART_Recived(UART_HandleTypeDef *huart,uint32_t pos)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b082      	sub	sp, #8
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
 8000900:	6039      	str	r1, [r7, #0]

	//restart timer / start timer of counting time with modbus RTU
	hModbus->Flag_URev =1;
 8000902:	4b15      	ldr	r3, [pc, #84]	@ (8000958 <modbus_UART_Recived+0x60>)
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	2201      	movs	r2, #1
 8000908:	759a      	strb	r2, [r3, #22]
	if(hModbus->modbusUartStructure.RxTail++<MODBUS_MESSAGEBUFFER_SIZE)
 800090a:	4b13      	ldr	r3, [pc, #76]	@ (8000958 <modbus_UART_Recived+0x60>)
 800090c:	681a      	ldr	r2, [r3, #0]
 800090e:	f8b2 33a2 	ldrh.w	r3, [r2, #930]	@ 0x3a2
 8000912:	1c59      	adds	r1, r3, #1
 8000914:	b289      	uxth	r1, r1
 8000916:	f8a2 13a2 	strh.w	r1, [r2, #930]	@ 0x3a2
 800091a:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 800091e:	d210      	bcs.n	8000942 <modbus_UART_Recived+0x4a>
	{


	    HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 8000920:	4b0d      	ldr	r3, [pc, #52]	@ (8000958 <modbus_UART_Recived+0x60>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	68d8      	ldr	r0, [r3, #12]
 8000926:	4b0c      	ldr	r3, [pc, #48]	@ (8000958 <modbus_UART_Recived+0x60>)
 8000928:	681a      	ldr	r2, [r3, #0]
 800092a:	4b0b      	ldr	r3, [pc, #44]	@ (8000958 <modbus_UART_Recived+0x60>)
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8000932:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 8000936:	4413      	add	r3, r2
 8000938:	3302      	adds	r3, #2
 800093a:	2201      	movs	r2, #1
 800093c:	4619      	mov	r1, r3
 800093e:	f007 fd7d 	bl	800843c <HAL_UART_Receive_IT>
	}
	__HAL_TIM_SET_COUNTER(hModbus->htim,0);
 8000942:	4b05      	ldr	r3, [pc, #20]	@ (8000958 <modbus_UART_Recived+0x60>)
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	691b      	ldr	r3, [r3, #16]
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	2200      	movs	r2, #0
 800094c:	625a      	str	r2, [r3, #36]	@ 0x24

}
 800094e:	bf00      	nop
 8000950:	3708      	adds	r7, #8
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	20000290 	.word	0x20000290

0800095c <Modbus_init>:


void Modbus_init(ModbusHandleTypedef* hmodbus,u16u8_t* RegisterStartAddress)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b082      	sub	sp, #8
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
 8000964:	6039      	str	r1, [r7, #0]
	hModbus = hmodbus;
 8000966:	4a24      	ldr	r2, [pc, #144]	@ (80009f8 <Modbus_init+0x9c>)
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	6013      	str	r3, [r2, #0]

	hModbus->RegisterAddress = RegisterStartAddress;
 800096c:	4b22      	ldr	r3, [pc, #136]	@ (80009f8 <Modbus_init+0x9c>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	683a      	ldr	r2, [r7, #0]
 8000972:	605a      	str	r2, [r3, #4]

	//config timer interrupt
	HAL_TIM_RegisterCallback(hModbus->htim,HAL_TIM_OC_DELAY_ELAPSED_CB_ID,(void*)modbus_1t5_Timeout);
 8000974:	4b20      	ldr	r3, [pc, #128]	@ (80009f8 <Modbus_init+0x9c>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	691b      	ldr	r3, [r3, #16]
 800097a:	4a20      	ldr	r2, [pc, #128]	@ (80009fc <Modbus_init+0xa0>)
 800097c:	2114      	movs	r1, #20
 800097e:	4618      	mov	r0, r3
 8000980:	f006 fc52 	bl	8007228 <HAL_TIM_RegisterCallback>
	HAL_TIM_RegisterCallback(hModbus->htim,HAL_TIM_PERIOD_ELAPSED_CB_ID ,(void*)modbus_3t5_Timeout);
 8000984:	4b1c      	ldr	r3, [pc, #112]	@ (80009f8 <Modbus_init+0x9c>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	691b      	ldr	r3, [r3, #16]
 800098a:	4a1d      	ldr	r2, [pc, #116]	@ (8000a00 <Modbus_init+0xa4>)
 800098c:	210e      	movs	r1, #14
 800098e:	4618      	mov	r0, r3
 8000990:	f006 fc4a 	bl	8007228 <HAL_TIM_RegisterCallback>

	//config UART interrupt
	HAL_UART_RegisterCallback(hModbus->huart,HAL_UART_RX_COMPLETE_CB_ID,(void*)modbus_UART_Recived);
 8000994:	4b18      	ldr	r3, [pc, #96]	@ (80009f8 <Modbus_init+0x9c>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	68db      	ldr	r3, [r3, #12]
 800099a:	4a1a      	ldr	r2, [pc, #104]	@ (8000a04 <Modbus_init+0xa8>)
 800099c:	2103      	movs	r1, #3
 800099e:	4618      	mov	r0, r3
 80009a0:	f007 fc92 	bl	80082c8 <HAL_UART_RegisterCallback>
	//start Receive
    HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 80009a4:	4b14      	ldr	r3, [pc, #80]	@ (80009f8 <Modbus_init+0x9c>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	68d8      	ldr	r0, [r3, #12]
 80009aa:	4b13      	ldr	r3, [pc, #76]	@ (80009f8 <Modbus_init+0x9c>)
 80009ac:	681a      	ldr	r2, [r3, #0]
 80009ae:	4b12      	ldr	r3, [pc, #72]	@ (80009f8 <Modbus_init+0x9c>)
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 80009b6:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 80009ba:	4413      	add	r3, r2
 80009bc:	3302      	adds	r3, #2
 80009be:	2201      	movs	r2, #1
 80009c0:	4619      	mov	r1, r3
 80009c2:	f007 fd3b 	bl	800843c <HAL_UART_Receive_IT>


    if(hModbus->htim->State == HAL_TIM_STATE_READY)
 80009c6:	4b0c      	ldr	r3, [pc, #48]	@ (80009f8 <Modbus_init+0x9c>)
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	691b      	ldr	r3, [r3, #16]
 80009cc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80009d0:	b2db      	uxtb	r3, r3
 80009d2:	2b01      	cmp	r3, #1
 80009d4:	d10c      	bne.n	80009f0 <Modbus_init+0x94>
    	{
    		HAL_TIM_Base_Start_IT(hModbus->htim);
 80009d6:	4b08      	ldr	r3, [pc, #32]	@ (80009f8 <Modbus_init+0x9c>)
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	691b      	ldr	r3, [r3, #16]
 80009dc:	4618      	mov	r0, r3
 80009de:	f005 fc15 	bl	800620c <HAL_TIM_Base_Start_IT>
    		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 80009e2:	4b05      	ldr	r3, [pc, #20]	@ (80009f8 <Modbus_init+0x9c>)
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	691b      	ldr	r3, [r3, #16]
 80009e8:	2100      	movs	r1, #0
 80009ea:	4618      	mov	r0, r3
 80009ec:	f005 fdca 	bl	8006584 <HAL_TIM_OnePulse_Start_IT>
    	}

}
 80009f0:	bf00      	nop
 80009f2:	3708      	adds	r7, #8
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	20000290 	.word	0x20000290
 80009fc:	080008b9 	.word	0x080008b9
 8000a00:	080008d9 	.word	0x080008d9
 8000a04:	080008f9 	.word	0x080008f9

08000a08 <CRC16>:
} ;

unsigned short CRC16 ( puchMsg, usDataLen ) /* The function returns the CRC as a unsigned short type */
unsigned char *puchMsg ; /* message to calculate CRC upon */
unsigned short usDataLen ; /* quantity of bytes in message */
{
 8000a08:	b480      	push	{r7}
 8000a0a:	b085      	sub	sp, #20
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
 8000a10:	460b      	mov	r3, r1
 8000a12:	803b      	strh	r3, [r7, #0]
	unsigned char uchCRCHi = 0xFF ; /* high byte of CRC initialized */
 8000a14:	23ff      	movs	r3, #255	@ 0xff
 8000a16:	73fb      	strb	r3, [r7, #15]
	unsigned char uchCRCLo = 0xFF ; /* low byte of CRC initialized */
 8000a18:	23ff      	movs	r3, #255	@ 0xff
 8000a1a:	73bb      	strb	r3, [r7, #14]
	unsigned uIndex ; /* will index into CRC lookup table */
	while (usDataLen--) /* pass through message buffer */
 8000a1c:	e013      	b.n	8000a46 <CRC16+0x3e>
	{
		uIndex = uchCRCLo ^ *puchMsg++ ; /* calculate the CRC */
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	1c5a      	adds	r2, r3, #1
 8000a22:	607a      	str	r2, [r7, #4]
 8000a24:	781a      	ldrb	r2, [r3, #0]
 8000a26:	7bbb      	ldrb	r3, [r7, #14]
 8000a28:	4053      	eors	r3, r2
 8000a2a:	b2db      	uxtb	r3, r3
 8000a2c:	60bb      	str	r3, [r7, #8]
		uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex] ;
 8000a2e:	4a10      	ldr	r2, [pc, #64]	@ (8000a70 <CRC16+0x68>)
 8000a30:	68bb      	ldr	r3, [r7, #8]
 8000a32:	4413      	add	r3, r2
 8000a34:	781a      	ldrb	r2, [r3, #0]
 8000a36:	7bfb      	ldrb	r3, [r7, #15]
 8000a38:	4053      	eors	r3, r2
 8000a3a:	73bb      	strb	r3, [r7, #14]
		uchCRCHi = auchCRCLo[uIndex] ;
 8000a3c:	4a0d      	ldr	r2, [pc, #52]	@ (8000a74 <CRC16+0x6c>)
 8000a3e:	68bb      	ldr	r3, [r7, #8]
 8000a40:	4413      	add	r3, r2
 8000a42:	781b      	ldrb	r3, [r3, #0]
 8000a44:	73fb      	strb	r3, [r7, #15]
	while (usDataLen--) /* pass through message buffer */
 8000a46:	883b      	ldrh	r3, [r7, #0]
 8000a48:	1e5a      	subs	r2, r3, #1
 8000a4a:	803a      	strh	r2, [r7, #0]
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d1e6      	bne.n	8000a1e <CRC16+0x16>
	}
	return (uchCRCHi << 8 | uchCRCLo) ;
 8000a50:	7bfb      	ldrb	r3, [r7, #15]
 8000a52:	b21b      	sxth	r3, r3
 8000a54:	021b      	lsls	r3, r3, #8
 8000a56:	b21a      	sxth	r2, r3
 8000a58:	7bbb      	ldrb	r3, [r7, #14]
 8000a5a:	b21b      	sxth	r3, r3
 8000a5c:	4313      	orrs	r3, r2
 8000a5e:	b21b      	sxth	r3, r3
 8000a60:	b29b      	uxth	r3, r3
}
 8000a62:	4618      	mov	r0, r3
 8000a64:	3714      	adds	r7, #20
 8000a66:	46bd      	mov	sp, r7
 8000a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6c:	4770      	bx	lr
 8000a6e:	bf00      	nop
 8000a70:	20000108 	.word	0x20000108
 8000a74:	20000008 	.word	0x20000008

08000a78 <Modbus_Protocal_Worker>:



void Modbus_Protocal_Worker()
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b082      	sub	sp, #8
 8000a7c:	af00      	add	r7, sp, #0
	switch(hModbus->Mstatus)
 8000a7e:	4b80      	ldr	r3, [pc, #512]	@ (8000c80 <Modbus_Protocal_Worker+0x208>)
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	7e1b      	ldrb	r3, [r3, #24]
 8000a84:	3b01      	subs	r3, #1
 8000a86:	2b03      	cmp	r3, #3
 8000a88:	d80a      	bhi.n	8000aa0 <Modbus_Protocal_Worker+0x28>
 8000a8a:	a201      	add	r2, pc, #4	@ (adr r2, 8000a90 <Modbus_Protocal_Worker+0x18>)
 8000a8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a90:	08000aab 	.word	0x08000aab
 8000a94:	08000c49 	.word	0x08000c49
 8000a98:	08000b35 	.word	0x08000b35
 8000a9c:	08000b5b 	.word	0x08000b5b
	{
	default:
	case Modbus_state_Init:
		/*init Modbus protocal*/

		hModbus->Mstatus = Modbus_state_Idle;
 8000aa0:	4b77      	ldr	r3, [pc, #476]	@ (8000c80 <Modbus_Protocal_Worker+0x208>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	2201      	movs	r2, #1
 8000aa6:	761a      	strb	r2, [r3, #24]
		break;
 8000aa8:	e0e6      	b.n	8000c78 <Modbus_Protocal_Worker+0x200>
	case Modbus_state_Idle:
		/*Idle state*/

		//check that we have response message
		if(hModbus->TxCount)
 8000aaa:	4b75      	ldr	r3, [pc, #468]	@ (8000c80 <Modbus_Protocal_Worker+0x208>)
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	f893 3271 	ldrb.w	r3, [r3, #625]	@ 0x271
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d002      	beq.n	8000abc <Modbus_Protocal_Worker+0x44>
		{
			Modbus_Emission();
 8000ab6:	f000 f9d5 	bl	8000e64 <Modbus_Emission>
 8000aba:	e01c      	b.n	8000af6 <Modbus_Protocal_Worker+0x7e>
		}

		// Received character
		else if(hModbus->Flag_URev)
 8000abc:	4b70      	ldr	r3, [pc, #448]	@ (8000c80 <Modbus_Protocal_Worker+0x208>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	7d9b      	ldrb	r3, [r3, #22]
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d017      	beq.n	8000af6 <Modbus_Protocal_Worker+0x7e>
		{
			/*reset Timer flag*/
			hModbus->Flag_T15TimeOut = 0;
 8000ac6:	4b6e      	ldr	r3, [pc, #440]	@ (8000c80 <Modbus_Protocal_Worker+0x208>)
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	2200      	movs	r2, #0
 8000acc:	751a      	strb	r2, [r3, #20]
			hModbus->Flag_T35TimeOut = 0;
 8000ace:	4b6c      	ldr	r3, [pc, #432]	@ (8000c80 <Modbus_Protocal_Worker+0x208>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	755a      	strb	r2, [r3, #21]
			__HAL_TIM_ENABLE(hModbus->htim);
 8000ad6:	4b6a      	ldr	r3, [pc, #424]	@ (8000c80 <Modbus_Protocal_Worker+0x208>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	691b      	ldr	r3, [r3, #16]
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	681a      	ldr	r2, [r3, #0]
 8000ae0:	4b67      	ldr	r3, [pc, #412]	@ (8000c80 <Modbus_Protocal_Worker+0x208>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	691b      	ldr	r3, [r3, #16]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	f042 0201 	orr.w	r2, r2, #1
 8000aec:	601a      	str	r2, [r3, #0]
			/*set state*/
			hModbus->Mstatus= Modbus_state_Reception;
 8000aee:	4b64      	ldr	r3, [pc, #400]	@ (8000c80 <Modbus_Protocal_Worker+0x208>)
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	2203      	movs	r2, #3
 8000af4:	761a      	strb	r2, [r3, #24]
		}

		//check that if UART RX not start, start receiving
		if(hModbus->huart->RxState == HAL_UART_STATE_READY)
 8000af6:	4b62      	ldr	r3, [pc, #392]	@ (8000c80 <Modbus_Protocal_Worker+0x208>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	68db      	ldr	r3, [r3, #12]
 8000afc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000b00:	2b20      	cmp	r3, #32
 8000b02:	f040 80b2 	bne.w	8000c6a <Modbus_Protocal_Worker+0x1f2>
		{
			hModbus->modbusUartStructure.RxTail =0;
 8000b06:	4b5e      	ldr	r3, [pc, #376]	@ (8000c80 <Modbus_Protocal_Worker+0x208>)
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	f8a3 23a2 	strh.w	r2, [r3, #930]	@ 0x3a2
			HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 8000b10:	4b5b      	ldr	r3, [pc, #364]	@ (8000c80 <Modbus_Protocal_Worker+0x208>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	68d8      	ldr	r0, [r3, #12]
 8000b16:	4b5a      	ldr	r3, [pc, #360]	@ (8000c80 <Modbus_Protocal_Worker+0x208>)
 8000b18:	681a      	ldr	r2, [r3, #0]
 8000b1a:	4b59      	ldr	r3, [pc, #356]	@ (8000c80 <Modbus_Protocal_Worker+0x208>)
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8000b22:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 8000b26:	4413      	add	r3, r2
 8000b28:	3302      	adds	r3, #2
 8000b2a:	2201      	movs	r2, #1
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	f007 fc85 	bl	800843c <HAL_UART_Receive_IT>
		}
		break;
 8000b32:	e09a      	b.n	8000c6a <Modbus_Protocal_Worker+0x1f2>
	case Modbus_state_Reception:

		if(hModbus->Flag_T15TimeOut)
 8000b34:	4b52      	ldr	r3, [pc, #328]	@ (8000c80 <Modbus_Protocal_Worker+0x208>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	7d1b      	ldrb	r3, [r3, #20]
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	f000 8097 	beq.w	8000c6e <Modbus_Protocal_Worker+0x1f6>
		{
			/*reset recived flag*/
			hModbus->Flag_URev =0;
 8000b40:	4b4f      	ldr	r3, [pc, #316]	@ (8000c80 <Modbus_Protocal_Worker+0x208>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	2200      	movs	r2, #0
 8000b46:	759a      	strb	r2, [r3, #22]
			hModbus->RecvStatus = Modbus_RecvFrame_Null;
 8000b48:	4b4d      	ldr	r3, [pc, #308]	@ (8000c80 <Modbus_Protocal_Worker+0x208>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	22fe      	movs	r2, #254	@ 0xfe
 8000b4e:	75da      	strb	r2, [r3, #23]

			/*compute CRC and Slave address*/



			hModbus->Mstatus = Modbus_state_ControlAndWaiting;
 8000b50:	4b4b      	ldr	r3, [pc, #300]	@ (8000c80 <Modbus_Protocal_Worker+0x208>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	2204      	movs	r2, #4
 8000b56:	761a      	strb	r2, [r3, #24]
		}
		break;
 8000b58:	e089      	b.n	8000c6e <Modbus_Protocal_Worker+0x1f6>
	case Modbus_state_ControlAndWaiting:
		/*Frame error , Not generate response , Clear buffer*/
		if(hModbus->Flag_URev)
 8000b5a:	4b49      	ldr	r3, [pc, #292]	@ (8000c80 <Modbus_Protocal_Worker+0x208>)
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	7d9b      	ldrb	r3, [r3, #22]
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d009      	beq.n	8000b78 <Modbus_Protocal_Worker+0x100>
		{

			if(!hModbus->RecvStatus)
 8000b64:	4b46      	ldr	r3, [pc, #280]	@ (8000c80 <Modbus_Protocal_Worker+0x208>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	f993 3017 	ldrsb.w	r3, [r3, #23]
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d103      	bne.n	8000b78 <Modbus_Protocal_Worker+0x100>
			{
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 8000b70:	4b43      	ldr	r3, [pc, #268]	@ (8000c80 <Modbus_Protocal_Worker+0x208>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	22ff      	movs	r2, #255	@ 0xff
 8000b76:	75da      	strb	r2, [r3, #23]
			}
		}

		/*Frame Calculation , calculate once*/
		if(hModbus->RecvStatus == Modbus_RecvFrame_Null)
 8000b78:	4b41      	ldr	r3, [pc, #260]	@ (8000c80 <Modbus_Protocal_Worker+0x208>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	f993 3017 	ldrsb.w	r3, [r3, #23]
 8000b80:	f113 0f02 	cmn.w	r3, #2
 8000b84:	d150      	bne.n	8000c28 <Modbus_Protocal_Worker+0x1b0>
		{
			hModbus->RecvStatus = Modbus_RecvFrame_Normal;
 8000b86:	4b3e      	ldr	r3, [pc, #248]	@ (8000c80 <Modbus_Protocal_Worker+0x208>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	75da      	strb	r2, [r3, #23]
			// check CRC
			u16u8_t CalculateCRC;
			CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferRx,hModbus->modbusUartStructure.RxTail - 2);
 8000b8e:	4b3c      	ldr	r3, [pc, #240]	@ (8000c80 <Modbus_Protocal_Worker+0x208>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	f203 2272 	addw	r2, r3, #626	@ 0x272
 8000b96:	4b3a      	ldr	r3, [pc, #232]	@ (8000c80 <Modbus_Protocal_Worker+0x208>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8000b9e:	3b02      	subs	r3, #2
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	4610      	mov	r0, r2
 8000ba4:	f7ff ff30 	bl	8000a08 <CRC16>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	80bb      	strh	r3, [r7, #4]

			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 8000bac:	793a      	ldrb	r2, [r7, #4]
 8000bae:	4b34      	ldr	r3, [pc, #208]	@ (8000c80 <Modbus_Protocal_Worker+0x208>)
 8000bb0:	6819      	ldr	r1, [r3, #0]
 8000bb2:	4b33      	ldr	r3, [pc, #204]	@ (8000c80 <Modbus_Protocal_Worker+0x208>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8000bba:	3b02      	subs	r3, #2
 8000bbc:	440b      	add	r3, r1
 8000bbe:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
 8000bc2:	429a      	cmp	r2, r3
 8000bc4:	d10c      	bne.n	8000be0 <Modbus_Protocal_Worker+0x168>
			&& CalculateCRC.U8[1] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail -1]))
 8000bc6:	797a      	ldrb	r2, [r7, #5]
 8000bc8:	4b2d      	ldr	r3, [pc, #180]	@ (8000c80 <Modbus_Protocal_Worker+0x208>)
 8000bca:	6819      	ldr	r1, [r3, #0]
 8000bcc:	4b2c      	ldr	r3, [pc, #176]	@ (8000c80 <Modbus_Protocal_Worker+0x208>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8000bd4:	3b01      	subs	r3, #1
 8000bd6:	440b      	add	r3, r1
 8000bd8:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 8000bdc:	429a      	cmp	r2, r3
 8000bde:	d004      	beq.n	8000bea <Modbus_Protocal_Worker+0x172>
			{
				// communication unsuccessful
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 8000be0:	4b27      	ldr	r3, [pc, #156]	@ (8000c80 <Modbus_Protocal_Worker+0x208>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	22ff      	movs	r2, #255	@ 0xff
 8000be6:	75da      	strb	r2, [r3, #23]
				break;
 8000be8:	e046      	b.n	8000c78 <Modbus_Protocal_Worker+0x200>
			}

			//check Slave Address
			if(hModbus->modbusUartStructure.MessageBufferRx[0] != hModbus->slaveAddress)
 8000bea:	4b25      	ldr	r3, [pc, #148]	@ (8000c80 <Modbus_Protocal_Worker+0x208>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	f893 2272 	ldrb.w	r2, [r3, #626]	@ 0x272
 8000bf2:	4b23      	ldr	r3, [pc, #140]	@ (8000c80 <Modbus_Protocal_Worker+0x208>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	781b      	ldrb	r3, [r3, #0]
 8000bf8:	429a      	cmp	r2, r3
 8000bfa:	d113      	bne.n	8000c24 <Modbus_Protocal_Worker+0x1ac>
				break;

			//copy recivced frame
			memcpy(hModbus->Rxframe,
 8000bfc:	4b20      	ldr	r3, [pc, #128]	@ (8000c80 <Modbus_Protocal_Worker+0x208>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	f103 0019 	add.w	r0, r3, #25
					hModbus->modbusUartStructure.MessageBufferRx+1,
 8000c04:	4b1e      	ldr	r3, [pc, #120]	@ (8000c80 <Modbus_Protocal_Worker+0x208>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	f203 2372 	addw	r3, r3, #626	@ 0x272
			memcpy(hModbus->Rxframe,
 8000c0c:	1c59      	adds	r1, r3, #1
					hModbus->modbusUartStructure.RxTail-3);
 8000c0e:	4b1c      	ldr	r3, [pc, #112]	@ (8000c80 <Modbus_Protocal_Worker+0x208>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8000c16:	3b03      	subs	r3, #3
			memcpy(hModbus->Rxframe,
 8000c18:	461a      	mov	r2, r3
 8000c1a:	f009 ff7d 	bl	800ab18 <memcpy>

			//execute command
			Modbus_frame_response();
 8000c1e:	f000 f909 	bl	8000e34 <Modbus_frame_response>
 8000c22:	e001      	b.n	8000c28 <Modbus_Protocal_Worker+0x1b0>
				break;
 8000c24:	bf00      	nop
					}
		break;


	}
}
 8000c26:	e027      	b.n	8000c78 <Modbus_Protocal_Worker+0x200>
		if(hModbus->Flag_T35TimeOut)
 8000c28:	4b15      	ldr	r3, [pc, #84]	@ (8000c80 <Modbus_Protocal_Worker+0x208>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	7d5b      	ldrb	r3, [r3, #21]
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d01f      	beq.n	8000c72 <Modbus_Protocal_Worker+0x1fa>
			hModbus->Mstatus = Modbus_state_Idle;
 8000c32:	4b13      	ldr	r3, [pc, #76]	@ (8000c80 <Modbus_Protocal_Worker+0x208>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	2201      	movs	r2, #1
 8000c38:	761a      	strb	r2, [r3, #24]
			HAL_UART_AbortReceive(hModbus->huart);
 8000c3a:	4b11      	ldr	r3, [pc, #68]	@ (8000c80 <Modbus_Protocal_Worker+0x208>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	68db      	ldr	r3, [r3, #12]
 8000c40:	4618      	mov	r0, r3
 8000c42:	f007 fcc7 	bl	80085d4 <HAL_UART_AbortReceive>
		break;
 8000c46:	e014      	b.n	8000c72 <Modbus_Protocal_Worker+0x1fa>
		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8000c48:	4b0d      	ldr	r3, [pc, #52]	@ (8000c80 <Modbus_Protocal_Worker+0x208>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	68db      	ldr	r3, [r3, #12]
 8000c4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c52:	2b20      	cmp	r3, #32
 8000c54:	d10f      	bne.n	8000c76 <Modbus_Protocal_Worker+0x1fe>
			hModbus->TxCount=0;
 8000c56:	4b0a      	ldr	r3, [pc, #40]	@ (8000c80 <Modbus_Protocal_Worker+0x208>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	f883 2271 	strb.w	r2, [r3, #625]	@ 0x271
			hModbus->Mstatus = Modbus_state_Idle;
 8000c60:	4b07      	ldr	r3, [pc, #28]	@ (8000c80 <Modbus_Protocal_Worker+0x208>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	2201      	movs	r2, #1
 8000c66:	761a      	strb	r2, [r3, #24]
		break;
 8000c68:	e005      	b.n	8000c76 <Modbus_Protocal_Worker+0x1fe>
		break;
 8000c6a:	bf00      	nop
 8000c6c:	e004      	b.n	8000c78 <Modbus_Protocal_Worker+0x200>
		break;
 8000c6e:	bf00      	nop
 8000c70:	e002      	b.n	8000c78 <Modbus_Protocal_Worker+0x200>
		break;
 8000c72:	bf00      	nop
 8000c74:	e000      	b.n	8000c78 <Modbus_Protocal_Worker+0x200>
		break;
 8000c76:	bf00      	nop
}
 8000c78:	bf00      	nop
 8000c7a:	3708      	adds	r7, #8
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	20000290 	.word	0x20000290

08000c84 <modbusWrite1Register>:
void modbusWrite1Register() //function 06
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b082      	sub	sp, #8
 8000c88:	af00      	add	r7, sp, #0

	//write data to register
	uint16_t startAddress = (hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]);
 8000c8a:	4b1d      	ldr	r3, [pc, #116]	@ (8000d00 <modbusWrite1Register+0x7c>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	7e9b      	ldrb	r3, [r3, #26]
 8000c90:	021b      	lsls	r3, r3, #8
 8000c92:	b29b      	uxth	r3, r3
 8000c94:	4a1a      	ldr	r2, [pc, #104]	@ (8000d00 <modbusWrite1Register+0x7c>)
 8000c96:	6812      	ldr	r2, [r2, #0]
 8000c98:	7ed2      	ldrb	r2, [r2, #27]
 8000c9a:	4413      	add	r3, r2
 8000c9c:	80fb      	strh	r3, [r7, #6]

	if(startAddress > hModbus->RegisterSize)
 8000c9e:	88fa      	ldrh	r2, [r7, #6]
 8000ca0:	4b17      	ldr	r3, [pc, #92]	@ (8000d00 <modbusWrite1Register+0x7c>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	689b      	ldr	r3, [r3, #8]
 8000ca6:	429a      	cmp	r2, r3
 8000ca8:	d903      	bls.n	8000cb2 <modbusWrite1Register+0x2e>
		{
			 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 8000caa:	2002      	movs	r0, #2
 8000cac:	f000 f8a0 	bl	8000df0 <ModbusErrorReply>
			 return;
 8000cb0:	e023      	b.n	8000cfa <modbusWrite1Register+0x76>
		}


	hModbus->RegisterAddress[startAddress].U8[1] = hModbus->Rxframe[3];
 8000cb2:	4b13      	ldr	r3, [pc, #76]	@ (8000d00 <modbusWrite1Register+0x7c>)
 8000cb4:	681a      	ldr	r2, [r3, #0]
 8000cb6:	4b12      	ldr	r3, [pc, #72]	@ (8000d00 <modbusWrite1Register+0x7c>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	6859      	ldr	r1, [r3, #4]
 8000cbc:	88fb      	ldrh	r3, [r7, #6]
 8000cbe:	005b      	lsls	r3, r3, #1
 8000cc0:	440b      	add	r3, r1
 8000cc2:	7f12      	ldrb	r2, [r2, #28]
 8000cc4:	705a      	strb	r2, [r3, #1]
	hModbus->RegisterAddress[startAddress].U8[0] = hModbus->Rxframe[4];
 8000cc6:	4b0e      	ldr	r3, [pc, #56]	@ (8000d00 <modbusWrite1Register+0x7c>)
 8000cc8:	681a      	ldr	r2, [r3, #0]
 8000cca:	4b0d      	ldr	r3, [pc, #52]	@ (8000d00 <modbusWrite1Register+0x7c>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	6859      	ldr	r1, [r3, #4]
 8000cd0:	88fb      	ldrh	r3, [r7, #6]
 8000cd2:	005b      	lsls	r3, r3, #1
 8000cd4:	440b      	add	r3, r1
 8000cd6:	7f52      	ldrb	r2, [r2, #29]
 8000cd8:	701a      	strb	r2, [r3, #0]



	//generate response
	memcpy(hModbus->Txframe,
 8000cda:	4b09      	ldr	r3, [pc, #36]	@ (8000d00 <modbusWrite1Register+0x7c>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	f203 1045 	addw	r0, r3, #325	@ 0x145
			hModbus->Rxframe,
 8000ce2:	4b07      	ldr	r3, [pc, #28]	@ (8000d00 <modbusWrite1Register+0x7c>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	3319      	adds	r3, #25
	memcpy(hModbus->Txframe,
 8000ce8:	2208      	movs	r2, #8
 8000cea:	4619      	mov	r1, r3
 8000cec:	f009 ff14 	bl	800ab18 <memcpy>
			8);
	//set number of byte to sent
	hModbus->TxCount=5;
 8000cf0:	4b03      	ldr	r3, [pc, #12]	@ (8000d00 <modbusWrite1Register+0x7c>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	2205      	movs	r2, #5
 8000cf6:	f883 2271 	strb.w	r2, [r3, #625]	@ 0x271



}
 8000cfa:	3708      	adds	r7, #8
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	20000290 	.word	0x20000290

08000d04 <modbusRead1Register>:

void modbusRead1Register() // function 03
{
 8000d04:	b590      	push	{r4, r7, lr}
 8000d06:	b083      	sub	sp, #12
 8000d08:	af00      	add	r7, sp, #0



	uint16_t numberOfDataToRead =((hModbus->Rxframe[3]<<8)+(hModbus->Rxframe[4]));
 8000d0a:	4b38      	ldr	r3, [pc, #224]	@ (8000dec <modbusRead1Register+0xe8>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	7f1b      	ldrb	r3, [r3, #28]
 8000d10:	021b      	lsls	r3, r3, #8
 8000d12:	b29b      	uxth	r3, r3
 8000d14:	4a35      	ldr	r2, [pc, #212]	@ (8000dec <modbusRead1Register+0xe8>)
 8000d16:	6812      	ldr	r2, [r2, #0]
 8000d18:	7f52      	ldrb	r2, [r2, #29]
 8000d1a:	4413      	add	r3, r2
 8000d1c:	80fb      	strh	r3, [r7, #6]
	uint16_t startAddress =((hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]));
 8000d1e:	4b33      	ldr	r3, [pc, #204]	@ (8000dec <modbusRead1Register+0xe8>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	7e9b      	ldrb	r3, [r3, #26]
 8000d24:	021b      	lsls	r3, r3, #8
 8000d26:	b29b      	uxth	r3, r3
 8000d28:	4a30      	ldr	r2, [pc, #192]	@ (8000dec <modbusRead1Register+0xe8>)
 8000d2a:	6812      	ldr	r2, [r2, #0]
 8000d2c:	7ed2      	ldrb	r2, [r2, #27]
 8000d2e:	4413      	add	r3, r2
 8000d30:	80bb      	strh	r3, [r7, #4]

	//check quantity and address range

	if(numberOfDataToRead <1 ||numberOfDataToRead > 0x7D)
 8000d32:	88fb      	ldrh	r3, [r7, #6]
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d002      	beq.n	8000d3e <modbusRead1Register+0x3a>
 8000d38:	88fb      	ldrh	r3, [r7, #6]
 8000d3a:	2b7d      	cmp	r3, #125	@ 0x7d
 8000d3c:	d903      	bls.n	8000d46 <modbusRead1Register+0x42>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataValue);
 8000d3e:	2003      	movs	r0, #3
 8000d40:	f000 f856 	bl	8000df0 <ModbusErrorReply>
		 return;
 8000d44:	e04e      	b.n	8000de4 <modbusRead1Register+0xe0>
	}

	if(startAddress > hModbus->RegisterSize || (startAddress +  numberOfDataToRead) > hModbus->RegisterSize)
 8000d46:	88ba      	ldrh	r2, [r7, #4]
 8000d48:	4b28      	ldr	r3, [pc, #160]	@ (8000dec <modbusRead1Register+0xe8>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	689b      	ldr	r3, [r3, #8]
 8000d4e:	429a      	cmp	r2, r3
 8000d50:	d808      	bhi.n	8000d64 <modbusRead1Register+0x60>
 8000d52:	88ba      	ldrh	r2, [r7, #4]
 8000d54:	88fb      	ldrh	r3, [r7, #6]
 8000d56:	4413      	add	r3, r2
 8000d58:	461a      	mov	r2, r3
 8000d5a:	4b24      	ldr	r3, [pc, #144]	@ (8000dec <modbusRead1Register+0xe8>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	689b      	ldr	r3, [r3, #8]
 8000d60:	429a      	cmp	r2, r3
 8000d62:	d903      	bls.n	8000d6c <modbusRead1Register+0x68>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 8000d64:	2002      	movs	r0, #2
 8000d66:	f000 f843 	bl	8000df0 <ModbusErrorReply>
		 return;
 8000d6a:	e03b      	b.n	8000de4 <modbusRead1Register+0xe0>
	}


	//generate response
	hModbus->Txframe[0] = Modbus_function_Read_Holding_Register;
 8000d6c:	4b1f      	ldr	r3, [pc, #124]	@ (8000dec <modbusRead1Register+0xe8>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	2203      	movs	r2, #3
 8000d72:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	hModbus->Txframe[1] = (2*numberOfDataToRead) & 0xFF;
 8000d76:	88fb      	ldrh	r3, [r7, #6]
 8000d78:	b2da      	uxtb	r2, r3
 8000d7a:	4b1c      	ldr	r3, [pc, #112]	@ (8000dec <modbusRead1Register+0xe8>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	0052      	lsls	r2, r2, #1
 8000d80:	b2d2      	uxtb	r2, r2
 8000d82:	f883 2146 	strb.w	r2, [r3, #326]	@ 0x146
	register int i;
	for(i=0; i<numberOfDataToRead;i++)
 8000d86:	2400      	movs	r4, #0
 8000d88:	e020      	b.n	8000dcc <modbusRead1Register+0xc8>
	{
		hModbus->Txframe[2*i+2]=hModbus->RegisterAddress[startAddress+i].U8[1];
 8000d8a:	4b18      	ldr	r3, [pc, #96]	@ (8000dec <modbusRead1Register+0xe8>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	685a      	ldr	r2, [r3, #4]
 8000d90:	88bb      	ldrh	r3, [r7, #4]
 8000d92:	4423      	add	r3, r4
 8000d94:	005b      	lsls	r3, r3, #1
 8000d96:	18d1      	adds	r1, r2, r3
 8000d98:	4b14      	ldr	r3, [pc, #80]	@ (8000dec <modbusRead1Register+0xe8>)
 8000d9a:	681a      	ldr	r2, [r3, #0]
 8000d9c:	1c63      	adds	r3, r4, #1
 8000d9e:	005b      	lsls	r3, r3, #1
 8000da0:	7849      	ldrb	r1, [r1, #1]
 8000da2:	4413      	add	r3, r2
 8000da4:	460a      	mov	r2, r1
 8000da6:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
		hModbus->Txframe[2*i+3]=hModbus->RegisterAddress[startAddress+i].U8[0];
 8000daa:	4b10      	ldr	r3, [pc, #64]	@ (8000dec <modbusRead1Register+0xe8>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	685a      	ldr	r2, [r3, #4]
 8000db0:	88bb      	ldrh	r3, [r7, #4]
 8000db2:	4423      	add	r3, r4
 8000db4:	005b      	lsls	r3, r3, #1
 8000db6:	18d1      	adds	r1, r2, r3
 8000db8:	4b0c      	ldr	r3, [pc, #48]	@ (8000dec <modbusRead1Register+0xe8>)
 8000dba:	681a      	ldr	r2, [r3, #0]
 8000dbc:	0063      	lsls	r3, r4, #1
 8000dbe:	3303      	adds	r3, #3
 8000dc0:	7809      	ldrb	r1, [r1, #0]
 8000dc2:	4413      	add	r3, r2
 8000dc4:	460a      	mov	r2, r1
 8000dc6:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	for(i=0; i<numberOfDataToRead;i++)
 8000dca:	3401      	adds	r4, #1
 8000dcc:	88fb      	ldrh	r3, [r7, #6]
 8000dce:	429c      	cmp	r4, r3
 8000dd0:	dbdb      	blt.n	8000d8a <modbusRead1Register+0x86>
	}
	hModbus->TxCount = 2+2*numberOfDataToRead;
 8000dd2:	88fb      	ldrh	r3, [r7, #6]
 8000dd4:	3301      	adds	r3, #1
 8000dd6:	b2da      	uxtb	r2, r3
 8000dd8:	4b04      	ldr	r3, [pc, #16]	@ (8000dec <modbusRead1Register+0xe8>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	0052      	lsls	r2, r2, #1
 8000dde:	b2d2      	uxtb	r2, r2
 8000de0:	f883 2271 	strb.w	r2, [r3, #625]	@ 0x271

}
 8000de4:	370c      	adds	r7, #12
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd90      	pop	{r4, r7, pc}
 8000dea:	bf00      	nop
 8000dec:	20000290 	.word	0x20000290

08000df0 <ModbusErrorReply>:

void ModbusErrorReply(uint8_t Errorcode)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b083      	sub	sp, #12
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	4603      	mov	r3, r0
 8000df8:	71fb      	strb	r3, [r7, #7]
	hModbus->Txframe[0] = hModbus->Rxframe[0] | 0x80;
 8000dfa:	4b0d      	ldr	r3, [pc, #52]	@ (8000e30 <ModbusErrorReply+0x40>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	7e5a      	ldrb	r2, [r3, #25]
 8000e00:	4b0b      	ldr	r3, [pc, #44]	@ (8000e30 <ModbusErrorReply+0x40>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8000e08:	b2d2      	uxtb	r2, r2
 8000e0a:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	hModbus->Txframe[1] = Errorcode;
 8000e0e:	4b08      	ldr	r3, [pc, #32]	@ (8000e30 <ModbusErrorReply+0x40>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	79fa      	ldrb	r2, [r7, #7]
 8000e14:	f883 2146 	strb.w	r2, [r3, #326]	@ 0x146
	hModbus->TxCount = 2;
 8000e18:	4b05      	ldr	r3, [pc, #20]	@ (8000e30 <ModbusErrorReply+0x40>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	2202      	movs	r2, #2
 8000e1e:	f883 2271 	strb.w	r2, [r3, #625]	@ 0x271
}
 8000e22:	bf00      	nop
 8000e24:	370c      	adds	r7, #12
 8000e26:	46bd      	mov	sp, r7
 8000e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2c:	4770      	bx	lr
 8000e2e:	bf00      	nop
 8000e30:	20000290 	.word	0x20000290

08000e34 <Modbus_frame_response>:

void Modbus_frame_response()
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	af00      	add	r7, sp, #0
	switch(hModbus->Rxframe[0]) //check funcion
 8000e38:	4b09      	ldr	r3, [pc, #36]	@ (8000e60 <Modbus_frame_response+0x2c>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	7e5b      	ldrb	r3, [r3, #25]
 8000e3e:	2b03      	cmp	r3, #3
 8000e40:	d004      	beq.n	8000e4c <Modbus_frame_response+0x18>
 8000e42:	2b06      	cmp	r3, #6
 8000e44:	d105      	bne.n	8000e52 <Modbus_frame_response+0x1e>
	{
	case Modbus_function_Write_SingleRegister:
		modbusWrite1Register();
 8000e46:	f7ff ff1d 	bl	8000c84 <modbusWrite1Register>
		break;
 8000e4a:	e006      	b.n	8000e5a <Modbus_frame_response+0x26>
	case Modbus_function_Read_Holding_Register:
		modbusRead1Register();
 8000e4c:	f7ff ff5a 	bl	8000d04 <modbusRead1Register>
		break;
 8000e50:	e003      	b.n	8000e5a <Modbus_frame_response+0x26>
	default:
		 ModbusErrorReply(Modbus_RecvFrame_IllegalFunction);
 8000e52:	2001      	movs	r0, #1
 8000e54:	f7ff ffcc 	bl	8000df0 <ModbusErrorReply>
		break;
 8000e58:	bf00      	nop

	}
}
 8000e5a:	bf00      	nop
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	20000290 	.word	0x20000290

08000e64 <Modbus_Emission>:

void Modbus_Emission()
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b082      	sub	sp, #8
 8000e68:	af00      	add	r7, sp, #0
	if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8000e6a:	4b3c      	ldr	r3, [pc, #240]	@ (8000f5c <Modbus_Emission+0xf8>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	68db      	ldr	r3, [r3, #12]
 8000e70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e74:	2b20      	cmp	r3, #32
 8000e76:	d15d      	bne.n	8000f34 <Modbus_Emission+0xd0>
	{
		//generate response package
		hModbus->modbusUartStructure.MessageBufferTx[0] = hModbus->slaveAddress;
 8000e78:	4b38      	ldr	r3, [pc, #224]	@ (8000f5c <Modbus_Emission+0xf8>)
 8000e7a:	681a      	ldr	r2, [r3, #0]
 8000e7c:	4b37      	ldr	r3, [pc, #220]	@ (8000f5c <Modbus_Emission+0xf8>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	7812      	ldrb	r2, [r2, #0]
 8000e82:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		memcpy
		(
				hModbus->modbusUartStructure.MessageBufferTx+1,
 8000e86:	4b35      	ldr	r3, [pc, #212]	@ (8000f5c <Modbus_Emission+0xf8>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	f503 7369 	add.w	r3, r3, #932	@ 0x3a4
		memcpy
 8000e8e:	1c58      	adds	r0, r3, #1
				hModbus->Txframe,
 8000e90:	4b32      	ldr	r3, [pc, #200]	@ (8000f5c <Modbus_Emission+0xf8>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	f203 1145 	addw	r1, r3, #325	@ 0x145
				hModbus->TxCount
 8000e98:	4b30      	ldr	r3, [pc, #192]	@ (8000f5c <Modbus_Emission+0xf8>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	f893 3271 	ldrb.w	r3, [r3, #625]	@ 0x271
		memcpy
 8000ea0:	461a      	mov	r2, r3
 8000ea2:	f009 fe39 	bl	800ab18 <memcpy>
		);

		hModbus->modbusUartStructure.TxTail = hModbus->TxCount+3;
 8000ea6:	4b2d      	ldr	r3, [pc, #180]	@ (8000f5c <Modbus_Emission+0xf8>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	f893 3271 	ldrb.w	r3, [r3, #625]	@ 0x271
 8000eae:	461a      	mov	r2, r3
 8000eb0:	4b2a      	ldr	r3, [pc, #168]	@ (8000f5c <Modbus_Emission+0xf8>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	3203      	adds	r2, #3
 8000eb6:	b292      	uxth	r2, r2
 8000eb8:	f8a3 24d4 	strh.w	r2, [r3, #1236]	@ 0x4d4

		u16u8_t CalculateCRC;
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 8000ebc:	4b27      	ldr	r3, [pc, #156]	@ (8000f5c <Modbus_Emission+0xf8>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	f503 7269 	add.w	r2, r3, #932	@ 0x3a4
				hModbus->modbusUartStructure.TxTail - 2);
 8000ec4:	4b25      	ldr	r3, [pc, #148]	@ (8000f5c <Modbus_Emission+0xf8>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 8000ecc:	3b02      	subs	r3, #2
 8000ece:	4619      	mov	r1, r3
 8000ed0:	4610      	mov	r0, r2
 8000ed2:	f7ff fd99 	bl	8000a08 <CRC16>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	80bb      	strh	r3, [r7, #4]

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-2]
 8000eda:	4b20      	ldr	r3, [pc, #128]	@ (8000f5c <Modbus_Emission+0xf8>)
 8000edc:	681a      	ldr	r2, [r3, #0]
 8000ede:	4b1f      	ldr	r3, [pc, #124]	@ (8000f5c <Modbus_Emission+0xf8>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 8000ee6:	3b02      	subs	r3, #2
													 =CalculateCRC.U8[0];
 8000ee8:	7939      	ldrb	r1, [r7, #4]
 8000eea:	4413      	add	r3, r2
 8000eec:	460a      	mov	r2, r1
 8000eee:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-1]
 8000ef2:	4b1a      	ldr	r3, [pc, #104]	@ (8000f5c <Modbus_Emission+0xf8>)
 8000ef4:	681a      	ldr	r2, [r3, #0]
 8000ef6:	4b19      	ldr	r3, [pc, #100]	@ (8000f5c <Modbus_Emission+0xf8>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 8000efe:	3b01      	subs	r3, #1
													 =CalculateCRC.U8[1];
 8000f00:	7979      	ldrb	r1, [r7, #5]
 8000f02:	4413      	add	r3, r2
 8000f04:	460a      	mov	r2, r1
 8000f06:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4


		//sent modbus

		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8000f0a:	4b14      	ldr	r3, [pc, #80]	@ (8000f5c <Modbus_Emission+0xf8>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	68db      	ldr	r3, [r3, #12]
 8000f10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f14:	2b20      	cmp	r3, #32
 8000f16:	d10d      	bne.n	8000f34 <Modbus_Emission+0xd0>
		{
			HAL_UART_Transmit_DMA(hModbus->huart
 8000f18:	4b10      	ldr	r3, [pc, #64]	@ (8000f5c <Modbus_Emission+0xf8>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	68d8      	ldr	r0, [r3, #12]
					,hModbus->modbusUartStructure.MessageBufferTx
 8000f1e:	4b0f      	ldr	r3, [pc, #60]	@ (8000f5c <Modbus_Emission+0xf8>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	f503 7169 	add.w	r1, r3, #932	@ 0x3a4
					,hModbus->modbusUartStructure.TxTail);
 8000f26:	4b0d      	ldr	r3, [pc, #52]	@ (8000f5c <Modbus_Emission+0xf8>)
 8000f28:	681b      	ldr	r3, [r3, #0]
			HAL_UART_Transmit_DMA(hModbus->huart
 8000f2a:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 8000f2e:	461a      	mov	r2, r3
 8000f30:	f007 fad0 	bl	80084d4 <HAL_UART_Transmit_DMA>



	}
	/*reset Timer flag*/
	hModbus->Flag_T15TimeOut = 0;
 8000f34:	4b09      	ldr	r3, [pc, #36]	@ (8000f5c <Modbus_Emission+0xf8>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	2200      	movs	r2, #0
 8000f3a:	751a      	strb	r2, [r3, #20]
	hModbus->Flag_T35TimeOut = 0;
 8000f3c:	4b07      	ldr	r3, [pc, #28]	@ (8000f5c <Modbus_Emission+0xf8>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	2200      	movs	r2, #0
 8000f42:	755a      	strb	r2, [r3, #21]
	hModbus->Flag_URev =0;
 8000f44:	4b05      	ldr	r3, [pc, #20]	@ (8000f5c <Modbus_Emission+0xf8>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	2200      	movs	r2, #0
 8000f4a:	759a      	strb	r2, [r3, #22]
	/*set state*/
	hModbus->Mstatus= Modbus_state_Emission;
 8000f4c:	4b03      	ldr	r3, [pc, #12]	@ (8000f5c <Modbus_Emission+0xf8>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	2202      	movs	r2, #2
 8000f52:	761a      	strb	r2, [r3, #24]
}
 8000f54:	bf00      	nop
 8000f56:	3708      	adds	r7, #8
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	20000290 	.word	0x20000290

08000f60 <InitTrajectorySegment>:
#include "Trajectory.h"
#include <math.h>

void InitTrajectorySegment(TrajectorySegment *seg, float start, float end, float v_max, float a_max, float t_start) {
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b08c      	sub	sp, #48	@ 0x30
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6178      	str	r0, [r7, #20]
 8000f68:	ed87 0a04 	vstr	s0, [r7, #16]
 8000f6c:	edc7 0a03 	vstr	s1, [r7, #12]
 8000f70:	ed87 1a02 	vstr	s2, [r7, #8]
 8000f74:	edc7 1a01 	vstr	s3, [r7, #4]
 8000f78:	ed87 2a00 	vstr	s4, [r7]
    float D = end - start;
 8000f7c:	ed97 7a03 	vldr	s14, [r7, #12]
 8000f80:	edd7 7a04 	vldr	s15, [r7, #16]
 8000f84:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f88:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
    float dir = (D >= 0) ? 1.0f : -1.0f;
 8000f8c:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8000f90:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000f94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f98:	db02      	blt.n	8000fa0 <InitTrajectorySegment+0x40>
 8000f9a:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8000f9e:	e000      	b.n	8000fa2 <InitTrajectorySegment+0x42>
 8000fa0:	4b43      	ldr	r3, [pc, #268]	@ (80010b0 <InitTrajectorySegment+0x150>)
 8000fa2:	627b      	str	r3, [r7, #36]	@ 0x24
    D = fabsf(D);
 8000fa4:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8000fa8:	eef0 7ae7 	vabs.f32	s15, s15
 8000fac:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28

    float t_accel = v_max / a_max;
 8000fb0:	edd7 6a02 	vldr	s13, [r7, #8]
 8000fb4:	ed97 7a01 	vldr	s14, [r7, #4]
 8000fb8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000fbc:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    float d_accel = 0.5f * a_max * t_accel * t_accel;
 8000fc0:	edd7 7a01 	vldr	s15, [r7, #4]
 8000fc4:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8000fc8:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000fcc:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8000fd0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fd4:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8000fd8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fdc:	edc7 7a08 	vstr	s15, [r7, #32]

    if (2 * d_accel > D) {
 8000fe0:	edd7 7a08 	vldr	s15, [r7, #32]
 8000fe4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000fe8:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8000fec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000ff0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ff4:	d517      	bpl.n	8001026 <InitTrajectorySegment+0xc6>
        // Triangular profile
        t_accel = sqrtf(D / a_max);
 8000ff6:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8000ffa:	edd7 7a01 	vldr	s15, [r7, #4]
 8000ffe:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001002:	eeb0 0a66 	vmov.f32	s0, s13
 8001006:	f009 fd95 	bl	800ab34 <sqrtf>
 800100a:	ed87 0a0b 	vstr	s0, [r7, #44]	@ 0x2c
        seg->t_const = 0;
 800100e:	697b      	ldr	r3, [r7, #20]
 8001010:	f04f 0200 	mov.w	r2, #0
 8001014:	615a      	str	r2, [r3, #20]
        seg->t_total = 2 * t_accel;
 8001016:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800101a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800101e:	697b      	ldr	r3, [r7, #20]
 8001020:	edc3 7a07 	vstr	s15, [r3, #28]
 8001024:	e01e      	b.n	8001064 <InitTrajectorySegment+0x104>
    } else {
        // Trapezoidal profile
        float d_const = D - 2 * d_accel;
 8001026:	edd7 7a08 	vldr	s15, [r7, #32]
 800102a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800102e:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8001032:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001036:	edc7 7a07 	vstr	s15, [r7, #28]
        seg->t_const = d_const / v_max;
 800103a:	edd7 6a07 	vldr	s13, [r7, #28]
 800103e:	ed97 7a02 	vldr	s14, [r7, #8]
 8001042:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001046:	697b      	ldr	r3, [r7, #20]
 8001048:	edc3 7a05 	vstr	s15, [r3, #20]
        seg->t_total = 2 * t_accel + seg->t_const;
 800104c:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001050:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001054:	697b      	ldr	r3, [r7, #20]
 8001056:	edd3 7a05 	vldr	s15, [r3, #20]
 800105a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800105e:	697b      	ldr	r3, [r7, #20]
 8001060:	edc3 7a07 	vstr	s15, [r3, #28]
    }

    seg->start_pos = start;
 8001064:	697b      	ldr	r3, [r7, #20]
 8001066:	693a      	ldr	r2, [r7, #16]
 8001068:	601a      	str	r2, [r3, #0]
    seg->end_pos = end;
 800106a:	697b      	ldr	r3, [r7, #20]
 800106c:	68fa      	ldr	r2, [r7, #12]
 800106e:	605a      	str	r2, [r3, #4]
    seg->v_max = v_max * dir;
 8001070:	ed97 7a02 	vldr	s14, [r7, #8]
 8001074:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001078:	ee67 7a27 	vmul.f32	s15, s14, s15
 800107c:	697b      	ldr	r3, [r7, #20]
 800107e:	edc3 7a02 	vstr	s15, [r3, #8]
    seg->a_max = a_max * dir;
 8001082:	ed97 7a01 	vldr	s14, [r7, #4]
 8001086:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800108a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800108e:	697b      	ldr	r3, [r7, #20]
 8001090:	edc3 7a03 	vstr	s15, [r3, #12]
    seg->t_accel = t_accel;
 8001094:	697b      	ldr	r3, [r7, #20]
 8001096:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001098:	611a      	str	r2, [r3, #16]
    seg->t_decel = t_accel;
 800109a:	697b      	ldr	r3, [r7, #20]
 800109c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800109e:	619a      	str	r2, [r3, #24]
    seg->t_start = t_start;
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	683a      	ldr	r2, [r7, #0]
 80010a4:	621a      	str	r2, [r3, #32]
}
 80010a6:	bf00      	nop
 80010a8:	3730      	adds	r7, #48	@ 0x30
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	bf800000 	.word	0xbf800000

080010b4 <GetTrajectoryPosition>:

float GetTrajectoryPosition(const TrajectorySegment *seg, float t_global) {
 80010b4:	b480      	push	{r7}
 80010b6:	b08f      	sub	sp, #60	@ 0x3c
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
 80010bc:	ed87 0a00 	vstr	s0, [r7]
    float t = t_global - seg->t_start;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	edd3 7a08 	vldr	s15, [r3, #32]
 80010c6:	ed97 7a00 	vldr	s14, [r7]
 80010ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010ce:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
    if (t < 0) return seg->start_pos;
 80010d2:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80010d6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80010da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010de:	d503      	bpl.n	80010e8 <GetTrajectoryPosition+0x34>
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	edd3 7a00 	vldr	s15, [r3]
 80010e6:	e0b4      	b.n	8001252 <GetTrajectoryPosition+0x19e>
    if (t >= seg->t_total) return seg->end_pos;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	edd3 7a07 	vldr	s15, [r3, #28]
 80010ee:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 80010f2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80010f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010fa:	db03      	blt.n	8001104 <GetTrajectoryPosition+0x50>
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	edd3 7a01 	vldr	s15, [r3, #4]
 8001102:	e0a6      	b.n	8001252 <GetTrajectoryPosition+0x19e>

    float a = seg->a_max;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	68db      	ldr	r3, [r3, #12]
 8001108:	633b      	str	r3, [r7, #48]	@ 0x30
    float v = seg->v_max;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	689b      	ldr	r3, [r3, #8]
 800110e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    float p0 = seg->start_pos;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	62bb      	str	r3, [r7, #40]	@ 0x28

    if (t < seg->t_accel) {
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	edd3 7a04 	vldr	s15, [r3, #16]
 800111c:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8001120:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001124:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001128:	d512      	bpl.n	8001150 <GetTrajectoryPosition+0x9c>
        return p0 + 0.5f * a * t * t;
 800112a:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800112e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001132:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001136:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800113a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800113e:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001142:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001146:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800114a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800114e:	e080      	b.n	8001252 <GetTrajectoryPosition+0x19e>
    } else if (t < seg->t_accel + seg->t_const) {
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	ed93 7a04 	vldr	s14, [r3, #16]
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	edd3 7a05 	vldr	s15, [r3, #20]
 800115c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001160:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8001164:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001168:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800116c:	d525      	bpl.n	80011ba <GetTrajectoryPosition+0x106>
        float t1 = seg->t_accel;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	691b      	ldr	r3, [r3, #16]
 8001172:	613b      	str	r3, [r7, #16]
        float p1 = p0 + 0.5f * a * t1 * t1;
 8001174:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001178:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800117c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001180:	edd7 7a04 	vldr	s15, [r7, #16]
 8001184:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001188:	edd7 7a04 	vldr	s15, [r7, #16]
 800118c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001190:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8001194:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001198:	edc7 7a03 	vstr	s15, [r7, #12]
        return p1 + v * (t - t1);
 800119c:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 80011a0:	edd7 7a04 	vldr	s15, [r7, #16]
 80011a4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80011a8:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80011ac:	ee27 7a27 	vmul.f32	s14, s14, s15
 80011b0:	edd7 7a03 	vldr	s15, [r7, #12]
 80011b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011b8:	e04b      	b.n	8001252 <GetTrajectoryPosition+0x19e>
    } else {
        float t1 = seg->t_accel;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	691b      	ldr	r3, [r3, #16]
 80011be:	627b      	str	r3, [r7, #36]	@ 0x24
        float t2 = seg->t_const;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	695b      	ldr	r3, [r3, #20]
 80011c4:	623b      	str	r3, [r7, #32]
        float p1 = p0 + 0.5f * a * t1 * t1;
 80011c6:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80011ca:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80011ce:	ee27 7a87 	vmul.f32	s14, s15, s14
 80011d2:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80011d6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80011da:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80011de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011e2:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 80011e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011ea:	edc7 7a07 	vstr	s15, [r7, #28]
        float p2 = p1 + v * t2;
 80011ee:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80011f2:	edd7 7a08 	vldr	s15, [r7, #32]
 80011f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011fa:	ed97 7a07 	vldr	s14, [r7, #28]
 80011fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001202:	edc7 7a06 	vstr	s15, [r7, #24]
        float td = t - t1 - t2;
 8001206:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 800120a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800120e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001212:	edd7 7a08 	vldr	s15, [r7, #32]
 8001216:	ee77 7a67 	vsub.f32	s15, s14, s15
 800121a:	edc7 7a05 	vstr	s15, [r7, #20]
        return p2 + v * td - 0.5f * a * td * td;
 800121e:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8001222:	edd7 7a05 	vldr	s15, [r7, #20]
 8001226:	ee27 7a27 	vmul.f32	s14, s14, s15
 800122a:	edd7 7a06 	vldr	s15, [r7, #24]
 800122e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001232:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001236:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 800123a:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800123e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001242:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001246:	edd7 7a05 	vldr	s15, [r7, #20]
 800124a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800124e:	ee77 7a67 	vsub.f32	s15, s14, s15
    }
}
 8001252:	eeb0 0a67 	vmov.f32	s0, s15
 8001256:	373c      	adds	r7, #60	@ 0x3c
 8001258:	46bd      	mov	sp, r7
 800125a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125e:	4770      	bx	lr

08001260 <GetTrajectoryVelocity>:

float GetTrajectoryVelocity(const TrajectorySegment *seg, float t_global) {
 8001260:	b480      	push	{r7}
 8001262:	b087      	sub	sp, #28
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
 8001268:	ed87 0a00 	vstr	s0, [r7]
    float t = t_global - seg->t_start;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	edd3 7a08 	vldr	s15, [r3, #32]
 8001272:	ed97 7a00 	vldr	s14, [r7]
 8001276:	ee77 7a67 	vsub.f32	s15, s14, s15
 800127a:	edc7 7a05 	vstr	s15, [r7, #20]
    if (t < 0) return 0;
 800127e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001282:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001286:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800128a:	d502      	bpl.n	8001292 <GetTrajectoryVelocity+0x32>
 800128c:	eddf 7a2b 	vldr	s15, [pc, #172]	@ 800133c <GetTrajectoryVelocity+0xdc>
 8001290:	e04d      	b.n	800132e <GetTrajectoryVelocity+0xce>
    if (t >= seg->t_total) return 0;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	edd3 7a07 	vldr	s15, [r3, #28]
 8001298:	ed97 7a05 	vldr	s14, [r7, #20]
 800129c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80012a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012a4:	db02      	blt.n	80012ac <GetTrajectoryVelocity+0x4c>
 80012a6:	eddf 7a25 	vldr	s15, [pc, #148]	@ 800133c <GetTrajectoryVelocity+0xdc>
 80012aa:	e040      	b.n	800132e <GetTrajectoryVelocity+0xce>

    float a = seg->a_max;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	68db      	ldr	r3, [r3, #12]
 80012b0:	613b      	str	r3, [r7, #16]
    float v = seg->v_max;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	689b      	ldr	r3, [r3, #8]
 80012b6:	60fb      	str	r3, [r7, #12]

    if (t < seg->t_accel) {
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	edd3 7a04 	vldr	s15, [r3, #16]
 80012be:	ed97 7a05 	vldr	s14, [r7, #20]
 80012c2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80012c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012ca:	d506      	bpl.n	80012da <GetTrajectoryVelocity+0x7a>
        return a * t;
 80012cc:	ed97 7a04 	vldr	s14, [r7, #16]
 80012d0:	edd7 7a05 	vldr	s15, [r7, #20]
 80012d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012d8:	e029      	b.n	800132e <GetTrajectoryVelocity+0xce>
    } else if (t < seg->t_accel + seg->t_const) {
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	ed93 7a04 	vldr	s14, [r3, #16]
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	edd3 7a05 	vldr	s15, [r3, #20]
 80012e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012ea:	ed97 7a05 	vldr	s14, [r7, #20]
 80012ee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80012f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012f6:	d502      	bpl.n	80012fe <GetTrajectoryVelocity+0x9e>
        return v;
 80012f8:	edd7 7a03 	vldr	s15, [r7, #12]
 80012fc:	e017      	b.n	800132e <GetTrajectoryVelocity+0xce>
    } else {
        float td = t - seg->t_accel - seg->t_const;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	edd3 7a04 	vldr	s15, [r3, #16]
 8001304:	ed97 7a05 	vldr	s14, [r7, #20]
 8001308:	ee37 7a67 	vsub.f32	s14, s14, s15
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	edd3 7a05 	vldr	s15, [r3, #20]
 8001312:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001316:	edc7 7a02 	vstr	s15, [r7, #8]
        return v - a * td;
 800131a:	ed97 7a04 	vldr	s14, [r7, #16]
 800131e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001322:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001326:	ed97 7a03 	vldr	s14, [r7, #12]
 800132a:	ee77 7a67 	vsub.f32	s15, s14, s15
    }
}
 800132e:	eeb0 0a67 	vmov.f32	s0, s15
 8001332:	371c      	adds	r7, #28
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr
 800133c:	00000000 	.word	0x00000000

08001340 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b088      	sub	sp, #32
 8001344:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001346:	f001 fb0c 	bl	8002962 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800134a:	f000 f9a3 	bl	8001694 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800134e:	f000 fe57 	bl	8002000 <MX_GPIO_Init>
  MX_DMA_Init();
 8001352:	f000 fe2b 	bl	8001fac <MX_DMA_Init>
  MX_TIM3_Init();
 8001356:	f000 fb43 	bl	80019e0 <MX_TIM3_Init>
  MX_ADC1_Init();
 800135a:	f000 f9e7 	bl	800172c <MX_ADC1_Init>
  MX_TIM1_Init();
 800135e:	f000 fa9d 	bl	800189c <MX_TIM1_Init>
  MX_TIM2_Init();
 8001362:	f000 faef 	bl	8001944 <MX_TIM2_Init>
  MX_TIM4_Init();
 8001366:	f000 fb91 	bl	8001a8c <MX_TIM4_Init>
  MX_TIM20_Init();
 800136a:	f000 fd15 	bl	8001d98 <MX_TIM20_Init>
  MX_TIM8_Init();
 800136e:	f000 fbe3 	bl	8001b38 <MX_TIM8_Init>
  MX_TIM16_Init();
 8001372:	f000 fc91 	bl	8001c98 <MX_TIM16_Init>
  MX_USART2_UART_Init();
 8001376:	f000 fdcb 	bl	8001f10 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 800137a:	f000 fa51 	bl	8001820 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
	Encoder_Init(&encoder1, &htim4);
 800137e:	499e      	ldr	r1, [pc, #632]	@ (80015f8 <main+0x2b8>)
 8001380:	489e      	ldr	r0, [pc, #632]	@ (80015fc <main+0x2bc>)
 8001382:	f7ff f998 	bl	80006b6 <Encoder_Init>
	Encoder_Init(&encoder2, &htim3);
 8001386:	499e      	ldr	r1, [pc, #632]	@ (8001600 <main+0x2c0>)
 8001388:	489e      	ldr	r0, [pc, #632]	@ (8001604 <main+0x2c4>)
 800138a:	f7ff f994 	bl	80006b6 <Encoder_Init>

	InitTrajectorySegment(&segments[0], 0.0f, 100.0f, 50.0f, 100.0f, 0.0f);
 800138e:	ed9f 2a9e 	vldr	s4, [pc, #632]	@ 8001608 <main+0x2c8>
 8001392:	eddf 1a9e 	vldr	s3, [pc, #632]	@ 800160c <main+0x2cc>
 8001396:	ed9f 1a9e 	vldr	s2, [pc, #632]	@ 8001610 <main+0x2d0>
 800139a:	eddf 0a9c 	vldr	s1, [pc, #624]	@ 800160c <main+0x2cc>
 800139e:	ed9f 0a9a 	vldr	s0, [pc, #616]	@ 8001608 <main+0x2c8>
 80013a2:	489c      	ldr	r0, [pc, #624]	@ (8001614 <main+0x2d4>)
 80013a4:	f7ff fddc 	bl	8000f60 <InitTrajectorySegment>
	InitTrajectorySegment(&segments[1], 100.0f, 50.0f, 40.0f, 80.0f, segments[0].t_start + segments[0].t_total);
 80013a8:	4b9a      	ldr	r3, [pc, #616]	@ (8001614 <main+0x2d4>)
 80013aa:	ed93 7a08 	vldr	s14, [r3, #32]
 80013ae:	4b99      	ldr	r3, [pc, #612]	@ (8001614 <main+0x2d4>)
 80013b0:	edd3 7a07 	vldr	s15, [r3, #28]
 80013b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013b8:	eeb0 2a67 	vmov.f32	s4, s15
 80013bc:	eddf 1a96 	vldr	s3, [pc, #600]	@ 8001618 <main+0x2d8>
 80013c0:	ed9f 1a96 	vldr	s2, [pc, #600]	@ 800161c <main+0x2dc>
 80013c4:	eddf 0a92 	vldr	s1, [pc, #584]	@ 8001610 <main+0x2d0>
 80013c8:	ed9f 0a90 	vldr	s0, [pc, #576]	@ 800160c <main+0x2cc>
 80013cc:	4894      	ldr	r0, [pc, #592]	@ (8001620 <main+0x2e0>)
 80013ce:	f7ff fdc7 	bl	8000f60 <InitTrajectorySegment>
	InitTrajectorySegment(&segments[2], 50.0f, 200.0f, 60.0f, 120.0f, segments[1].t_start + segments[1].t_total);
 80013d2:	4b90      	ldr	r3, [pc, #576]	@ (8001614 <main+0x2d4>)
 80013d4:	ed93 7a11 	vldr	s14, [r3, #68]	@ 0x44
 80013d8:	4b8e      	ldr	r3, [pc, #568]	@ (8001614 <main+0x2d4>)
 80013da:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 80013de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013e2:	eeb0 2a67 	vmov.f32	s4, s15
 80013e6:	eddf 1a8f 	vldr	s3, [pc, #572]	@ 8001624 <main+0x2e4>
 80013ea:	ed9f 1a8f 	vldr	s2, [pc, #572]	@ 8001628 <main+0x2e8>
 80013ee:	eddf 0a8f 	vldr	s1, [pc, #572]	@ 800162c <main+0x2ec>
 80013f2:	ed9f 0a87 	vldr	s0, [pc, #540]	@ 8001610 <main+0x2d0>
 80013f6:	488e      	ldr	r0, [pc, #568]	@ (8001630 <main+0x2f0>)
 80013f8:	f7ff fdb2 	bl	8000f60 <InitTrajectorySegment>

	int lastTick = 0;
 80013fc:	2300      	movs	r3, #0
 80013fe:	61bb      	str	r3, [r7, #24]
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8001400:	213c      	movs	r1, #60	@ 0x3c
 8001402:	487f      	ldr	r0, [pc, #508]	@ (8001600 <main+0x2c0>)
 8001404:	f005 fa00 	bl	8006808 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8001408:	213c      	movs	r1, #60	@ 0x3c
 800140a:	487b      	ldr	r0, [pc, #492]	@ (80015f8 <main+0x2b8>)
 800140c:	f005 f9fc 	bl	8006808 <HAL_TIM_Encoder_Start>

	hmodbus.huart = &huart2;
 8001410:	4b88      	ldr	r3, [pc, #544]	@ (8001634 <main+0x2f4>)
 8001412:	4a89      	ldr	r2, [pc, #548]	@ (8001638 <main+0x2f8>)
 8001414:	60da      	str	r2, [r3, #12]
	hmodbus.htim = &htim16;
 8001416:	4b87      	ldr	r3, [pc, #540]	@ (8001634 <main+0x2f4>)
 8001418:	4a88      	ldr	r2, [pc, #544]	@ (800163c <main+0x2fc>)
 800141a:	611a      	str	r2, [r3, #16]
	hmodbus.slaveAddress = 0x15;
 800141c:	4b85      	ldr	r3, [pc, #532]	@ (8001634 <main+0x2f4>)
 800141e:	2215      	movs	r2, #21
 8001420:	701a      	strb	r2, [r3, #0]
	hmodbus.RegisterSize = 200;
 8001422:	4b84      	ldr	r3, [pc, #528]	@ (8001634 <main+0x2f4>)
 8001424:	22c8      	movs	r2, #200	@ 0xc8
 8001426:	609a      	str	r2, [r3, #8]
	Modbus_init(&hmodbus, registerFrame);
 8001428:	4985      	ldr	r1, [pc, #532]	@ (8001640 <main+0x300>)
 800142a:	4882      	ldr	r0, [pc, #520]	@ (8001634 <main+0x2f4>)
 800142c:	f7ff fa96 	bl	800095c <Modbus_init>

	modbus_heartbeat_init(&hmodbus);
 8001430:	4880      	ldr	r0, [pc, #512]	@ (8001634 <main+0x2f4>)
 8001432:	f7ff f887 	bl	8000544 <modbus_heartbeat_init>
  /* USER CODE BEGIN WHILE */
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		float r_pos = 5;
 8001436:	4b83      	ldr	r3, [pc, #524]	@ (8001644 <main+0x304>)
 8001438:	617b      	str	r3, [r7, #20]
		float theta_pos = 6;
 800143a:	4b83      	ldr	r3, [pc, #524]	@ (8001648 <main+0x308>)
 800143c:	613b      	str	r3, [r7, #16]
		float r_Velo = 7;
 800143e:	4b83      	ldr	r3, [pc, #524]	@ (800164c <main+0x30c>)
 8001440:	60fb      	str	r3, [r7, #12]
		float theta_Velo = 8;
 8001442:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 8001446:	60bb      	str	r3, [r7, #8]
		float r_accel = 9;
 8001448:	4b81      	ldr	r3, [pc, #516]	@ (8001650 <main+0x310>)
 800144a:	607b      	str	r3, [r7, #4]
		float theta_accel = 10;
 800144c:	4b81      	ldr	r3, [pc, #516]	@ (8001654 <main+0x314>)
 800144e:	603b      	str	r3, [r7, #0]
		Modbus_Protocal_Worker();
 8001450:	f7ff fb12 	bl	8000a78 <Modbus_Protocal_Worker>
		modbus_heartbeat(&hmodbus);
 8001454:	4877      	ldr	r0, [pc, #476]	@ (8001634 <main+0x2f4>)
 8001456:	f7ff f884 	bl	8000562 <modbus_heartbeat>
//		modbus_theta_position(&hmodbus,5);
//		modbus_r_velocity(&hmodbus,5);
//		modbus_theta_velocity(&hmodbus,5);
//		modbus_r_acceleration(&hmodbus,5);
//		modbus_theta_acceleration(&hmodbus,5);
		modbus_Update_All(&hmodbus, r_pos, theta_pos, r_Velo, theta_Velo,
 800145a:	edd7 2a00 	vldr	s5, [r7]
 800145e:	ed97 2a01 	vldr	s4, [r7, #4]
 8001462:	edd7 1a02 	vldr	s3, [r7, #8]
 8001466:	ed97 1a03 	vldr	s2, [r7, #12]
 800146a:	edd7 0a04 	vldr	s1, [r7, #16]
 800146e:	ed97 0a05 	vldr	s0, [r7, #20]
 8001472:	4870      	ldr	r0, [pc, #448]	@ (8001634 <main+0x2f4>)
 8001474:	f7ff f88b 	bl	800058e <modbus_Update_All>
				r_accel, theta_accel);
		for (int i = 0; i < 20; i++) {
 8001478:	2300      	movs	r3, #0
 800147a:	61fb      	str	r3, [r7, #28]
 800147c:	e00f      	b.n	800149e <main+0x15e>
			set_Target_Position_ten_points(&hmodbus, i, i);
 800147e:	69fb      	ldr	r3, [r7, #28]
 8001480:	ee07 3a90 	vmov	s15, r3
 8001484:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001488:	69fb      	ldr	r3, [r7, #28]
 800148a:	b2db      	uxtb	r3, r3
 800148c:	4619      	mov	r1, r3
 800148e:	eeb0 0a67 	vmov.f32	s0, s15
 8001492:	4868      	ldr	r0, [pc, #416]	@ (8001634 <main+0x2f4>)
 8001494:	f7ff f8d3 	bl	800063e <set_Target_Position_ten_points>
		for (int i = 0; i < 20; i++) {
 8001498:	69fb      	ldr	r3, [r7, #28]
 800149a:	3301      	adds	r3, #1
 800149c:	61fb      	str	r3, [r7, #28]
 800149e:	69fb      	ldr	r3, [r7, #28]
 80014a0:	2b13      	cmp	r3, #19
 80014a2:	ddec      	ble.n	800147e <main+0x13e>
		}
		Goal_r_position = modbus_set_goal_r_position(&hmodbus);
 80014a4:	4863      	ldr	r0, [pc, #396]	@ (8001634 <main+0x2f4>)
 80014a6:	f7ff f8e6 	bl	8000676 <modbus_set_goal_r_position>
 80014aa:	4603      	mov	r3, r0
 80014ac:	ee07 3a90 	vmov	s15, r3
 80014b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80014b4:	4b68      	ldr	r3, [pc, #416]	@ (8001658 <main+0x318>)
 80014b6:	edc3 7a00 	vstr	s15, [r3]
		Goal_theta_position = modbus_set_goal_theta_position(&hmodbus);
 80014ba:	485e      	ldr	r0, [pc, #376]	@ (8001634 <main+0x2f4>)
 80014bc:	f7ff f8eb 	bl	8000696 <modbus_set_goal_theta_position>
 80014c0:	4603      	mov	r3, r0
 80014c2:	ee07 3a90 	vmov	s15, r3
 80014c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80014ca:	4b64      	ldr	r3, [pc, #400]	@ (800165c <main+0x31c>)
 80014cc:	edc3 7a00 	vstr	s15, [r3]
//			a2 = Encoder_GetAcceleration(&encoder2);

// Now use p1,v1,a1 and p2,v2,a2 as needed
		//}

		t_global = HAL_GetTick() / 1000.0f;
 80014d0:	f001 faac 	bl	8002a2c <HAL_GetTick>
 80014d4:	ee07 0a90 	vmov	s15, r0
 80014d8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80014dc:	eddf 6a60 	vldr	s13, [pc, #384]	@ 8001660 <main+0x320>
 80014e0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014e4:	4b5f      	ldr	r3, [pc, #380]	@ (8001664 <main+0x324>)
 80014e6:	edc3 7a00 	vstr	s15, [r3]
		pos = GetTrajectoryPosition(&segments[current_segment], t_global);
 80014ea:	4b5f      	ldr	r3, [pc, #380]	@ (8001668 <main+0x328>)
 80014ec:	681a      	ldr	r2, [r3, #0]
 80014ee:	4613      	mov	r3, r2
 80014f0:	00db      	lsls	r3, r3, #3
 80014f2:	4413      	add	r3, r2
 80014f4:	009b      	lsls	r3, r3, #2
 80014f6:	4a47      	ldr	r2, [pc, #284]	@ (8001614 <main+0x2d4>)
 80014f8:	4413      	add	r3, r2
 80014fa:	4a5a      	ldr	r2, [pc, #360]	@ (8001664 <main+0x324>)
 80014fc:	edd2 7a00 	vldr	s15, [r2]
 8001500:	eeb0 0a67 	vmov.f32	s0, s15
 8001504:	4618      	mov	r0, r3
 8001506:	f7ff fdd5 	bl	80010b4 <GetTrajectoryPosition>
 800150a:	eef0 7a40 	vmov.f32	s15, s0
 800150e:	4b57      	ldr	r3, [pc, #348]	@ (800166c <main+0x32c>)
 8001510:	edc3 7a00 	vstr	s15, [r3]
		vel = GetTrajectoryVelocity(&segments[current_segment], t_global);
 8001514:	4b54      	ldr	r3, [pc, #336]	@ (8001668 <main+0x328>)
 8001516:	681a      	ldr	r2, [r3, #0]
 8001518:	4613      	mov	r3, r2
 800151a:	00db      	lsls	r3, r3, #3
 800151c:	4413      	add	r3, r2
 800151e:	009b      	lsls	r3, r3, #2
 8001520:	4a3c      	ldr	r2, [pc, #240]	@ (8001614 <main+0x2d4>)
 8001522:	4413      	add	r3, r2
 8001524:	4a4f      	ldr	r2, [pc, #316]	@ (8001664 <main+0x324>)
 8001526:	edd2 7a00 	vldr	s15, [r2]
 800152a:	eeb0 0a67 	vmov.f32	s0, s15
 800152e:	4618      	mov	r0, r3
 8001530:	f7ff fe96 	bl	8001260 <GetTrajectoryVelocity>
 8001534:	eef0 7a40 	vmov.f32	s15, s0
 8001538:	4b4d      	ldr	r3, [pc, #308]	@ (8001670 <main+0x330>)
 800153a:	edc3 7a00 	vstr	s15, [r3]
		// ถ้าจบ segment ปัจจุบันให้ข้ามไปอันถัดไป
		if (t_global > segments[current_segment].t_start + segments[current_segment].t_total) {
 800153e:	4b4a      	ldr	r3, [pc, #296]	@ (8001668 <main+0x328>)
 8001540:	681a      	ldr	r2, [r3, #0]
 8001542:	4934      	ldr	r1, [pc, #208]	@ (8001614 <main+0x2d4>)
 8001544:	4613      	mov	r3, r2
 8001546:	00db      	lsls	r3, r3, #3
 8001548:	4413      	add	r3, r2
 800154a:	009b      	lsls	r3, r3, #2
 800154c:	440b      	add	r3, r1
 800154e:	3320      	adds	r3, #32
 8001550:	ed93 7a00 	vldr	s14, [r3]
 8001554:	4b44      	ldr	r3, [pc, #272]	@ (8001668 <main+0x328>)
 8001556:	681a      	ldr	r2, [r3, #0]
 8001558:	492e      	ldr	r1, [pc, #184]	@ (8001614 <main+0x2d4>)
 800155a:	4613      	mov	r3, r2
 800155c:	00db      	lsls	r3, r3, #3
 800155e:	4413      	add	r3, r2
 8001560:	009b      	lsls	r3, r3, #2
 8001562:	440b      	add	r3, r1
 8001564:	331c      	adds	r3, #28
 8001566:	edd3 7a00 	vldr	s15, [r3]
 800156a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800156e:	4b3d      	ldr	r3, [pc, #244]	@ (8001664 <main+0x324>)
 8001570:	edd3 7a00 	vldr	s15, [r3]
 8001574:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001578:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800157c:	d508      	bpl.n	8001590 <main+0x250>
			if (current_segment < MAX_SEGMENTS - 1) {
 800157e:	4b3a      	ldr	r3, [pc, #232]	@ (8001668 <main+0x328>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	2b08      	cmp	r3, #8
 8001584:	dc04      	bgt.n	8001590 <main+0x250>
				current_segment++;
 8001586:	4b38      	ldr	r3, [pc, #224]	@ (8001668 <main+0x328>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	3301      	adds	r3, #1
 800158c:	4a36      	ldr	r2, [pc, #216]	@ (8001668 <main+0x328>)
 800158e:	6013      	str	r3, [r2, #0]
			}
		}

		PS2_ReadData();
 8001590:	f7ff f8ca 	bl	8000728 <PS2_ReadData>
		Circle = PS2_ButtonCircle();
 8001594:	f7ff f902 	bl	800079c <PS2_ButtonCircle>
 8001598:	4603      	mov	r3, r0
 800159a:	461a      	mov	r2, r3
 800159c:	4b35      	ldr	r3, [pc, #212]	@ (8001674 <main+0x334>)
 800159e:	601a      	str	r2, [r3, #0]
		Square = PS2_ButtonSquare();
 80015a0:	f7ff f90e 	bl	80007c0 <PS2_ButtonSquare>
 80015a4:	4603      	mov	r3, r0
 80015a6:	461a      	mov	r2, r3
 80015a8:	4b33      	ldr	r3, [pc, #204]	@ (8001678 <main+0x338>)
 80015aa:	601a      	str	r2, [r3, #0]
		Triangle = PS2_ButtonTriangle();
 80015ac:	f7ff f918 	bl	80007e0 <PS2_ButtonTriangle>
 80015b0:	4603      	mov	r3, r0
 80015b2:	461a      	mov	r2, r3
 80015b4:	4b31      	ldr	r3, [pc, #196]	@ (800167c <main+0x33c>)
 80015b6:	601a      	str	r2, [r3, #0]
		Cross = PS2_ButtonCross();
 80015b8:	f7ff f924 	bl	8000804 <PS2_ButtonCross>
 80015bc:	4603      	mov	r3, r0
 80015be:	461a      	mov	r2, r3
 80015c0:	4b2f      	ldr	r3, [pc, #188]	@ (8001680 <main+0x340>)
 80015c2:	601a      	str	r2, [r3, #0]
		R1 = PS2_ButtonR1();
 80015c4:	f7ff f930 	bl	8000828 <PS2_ButtonR1>
 80015c8:	4603      	mov	r3, r0
 80015ca:	461a      	mov	r2, r3
 80015cc:	4b2d      	ldr	r3, [pc, #180]	@ (8001684 <main+0x344>)
 80015ce:	601a      	str	r2, [r3, #0]
		R2 = PS2_ButtonR2();
 80015d0:	f7ff f93c 	bl	800084c <PS2_ButtonR2>
 80015d4:	4603      	mov	r3, r0
 80015d6:	461a      	mov	r2, r3
 80015d8:	4b2b      	ldr	r3, [pc, #172]	@ (8001688 <main+0x348>)
 80015da:	601a      	str	r2, [r3, #0]
		Select = PS2_ButtonSelect();
 80015dc:	f7ff f948 	bl	8000870 <PS2_ButtonSelect>
 80015e0:	4603      	mov	r3, r0
 80015e2:	461a      	mov	r2, r3
 80015e4:	4b29      	ldr	r3, [pc, #164]	@ (800168c <main+0x34c>)
 80015e6:	601a      	str	r2, [r3, #0]
		Start = PS2_ButtonStart();
 80015e8:	f7ff f954 	bl	8000894 <PS2_ButtonStart>
 80015ec:	4603      	mov	r3, r0
 80015ee:	461a      	mov	r2, r3
 80015f0:	4b27      	ldr	r3, [pc, #156]	@ (8001690 <main+0x350>)
 80015f2:	601a      	str	r2, [r3, #0]
	while (1) {
 80015f4:	e71f      	b.n	8001436 <main+0xf6>
 80015f6:	bf00      	nop
 80015f8:	200005c8 	.word	0x200005c8
 80015fc:	20000a24 	.word	0x20000a24
 8001600:	200004fc 	.word	0x200004fc
 8001604:	20000a40 	.word	0x20000a40
 8001608:	00000000 	.word	0x00000000
 800160c:	42c80000 	.word	0x42c80000
 8001610:	42480000 	.word	0x42480000
 8001614:	20000a64 	.word	0x20000a64
 8001618:	42a00000 	.word	0x42a00000
 800161c:	42200000 	.word	0x42200000
 8001620:	20000a88 	.word	0x20000a88
 8001624:	42f00000 	.word	0x42f00000
 8001628:	42700000 	.word	0x42700000
 800162c:	43480000 	.word	0x43480000
 8001630:	20000aac 	.word	0x20000aac
 8001634:	20000bd8 	.word	0x20000bd8
 8001638:	200008f8 	.word	0x200008f8
 800163c:	20000760 	.word	0x20000760
 8001640:	200010b0 	.word	0x200010b0
 8001644:	40a00000 	.word	0x40a00000
 8001648:	40c00000 	.word	0x40c00000
 800164c:	40e00000 	.word	0x40e00000
 8001650:	41100000 	.word	0x41100000
 8001654:	41200000 	.word	0x41200000
 8001658:	20000208 	.word	0x20000208
 800165c:	2000020c 	.word	0x2000020c
 8001660:	447a0000 	.word	0x447a0000
 8001664:	20000bd0 	.word	0x20000bd0
 8001668:	20000bcc 	.word	0x20000bcc
 800166c:	20000a5c 	.word	0x20000a5c
 8001670:	20000a60 	.word	0x20000a60
 8001674:	20001240 	.word	0x20001240
 8001678:	20001244 	.word	0x20001244
 800167c:	20001248 	.word	0x20001248
 8001680:	2000124c 	.word	0x2000124c
 8001684:	20001250 	.word	0x20001250
 8001688:	20001254 	.word	0x20001254
 800168c:	20001258 	.word	0x20001258
 8001690:	2000125c 	.word	0x2000125c

08001694 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b094      	sub	sp, #80	@ 0x50
 8001698:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800169a:	f107 0318 	add.w	r3, r7, #24
 800169e:	2238      	movs	r2, #56	@ 0x38
 80016a0:	2100      	movs	r1, #0
 80016a2:	4618      	mov	r0, r3
 80016a4:	f009 fa06 	bl	800aab4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016a8:	1d3b      	adds	r3, r7, #4
 80016aa:	2200      	movs	r2, #0
 80016ac:	601a      	str	r2, [r3, #0]
 80016ae:	605a      	str	r2, [r3, #4]
 80016b0:	609a      	str	r2, [r3, #8]
 80016b2:	60da      	str	r2, [r3, #12]
 80016b4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80016b6:	2000      	movs	r0, #0
 80016b8:	f003 f8e6 	bl	8004888 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80016bc:	2302      	movs	r3, #2
 80016be:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016c0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80016c4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80016c6:	2340      	movs	r3, #64	@ 0x40
 80016c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016ca:	2302      	movs	r3, #2
 80016cc:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80016ce:	2302      	movs	r3, #2
 80016d0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80016d2:	2304      	movs	r3, #4
 80016d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80016d6:	2355      	movs	r3, #85	@ 0x55
 80016d8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80016da:	2302      	movs	r3, #2
 80016dc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80016de:	2302      	movs	r3, #2
 80016e0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80016e2:	2302      	movs	r3, #2
 80016e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016e6:	f107 0318 	add.w	r3, r7, #24
 80016ea:	4618      	mov	r0, r3
 80016ec:	f003 f980 	bl	80049f0 <HAL_RCC_OscConfig>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d001      	beq.n	80016fa <SystemClock_Config+0x66>
  {
    Error_Handler();
 80016f6:	f000 fd5f 	bl	80021b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016fa:	230f      	movs	r3, #15
 80016fc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016fe:	2303      	movs	r3, #3
 8001700:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001702:	2300      	movs	r3, #0
 8001704:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001706:	2300      	movs	r3, #0
 8001708:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800170a:	2300      	movs	r3, #0
 800170c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800170e:	1d3b      	adds	r3, r7, #4
 8001710:	2104      	movs	r1, #4
 8001712:	4618      	mov	r0, r3
 8001714:	f003 fc7e 	bl	8005014 <HAL_RCC_ClockConfig>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d001      	beq.n	8001722 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800171e:	f000 fd4b 	bl	80021b8 <Error_Handler>
  }
}
 8001722:	bf00      	nop
 8001724:	3750      	adds	r7, #80	@ 0x50
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
	...

0800172c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b08c      	sub	sp, #48	@ 0x30
 8001730:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001732:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001736:	2200      	movs	r2, #0
 8001738:	601a      	str	r2, [r3, #0]
 800173a:	605a      	str	r2, [r3, #4]
 800173c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800173e:	1d3b      	adds	r3, r7, #4
 8001740:	2220      	movs	r2, #32
 8001742:	2100      	movs	r1, #0
 8001744:	4618      	mov	r0, r3
 8001746:	f009 f9b5 	bl	800aab4 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800174a:	4b32      	ldr	r3, [pc, #200]	@ (8001814 <MX_ADC1_Init+0xe8>)
 800174c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001750:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001752:	4b30      	ldr	r3, [pc, #192]	@ (8001814 <MX_ADC1_Init+0xe8>)
 8001754:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001758:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800175a:	4b2e      	ldr	r3, [pc, #184]	@ (8001814 <MX_ADC1_Init+0xe8>)
 800175c:	2200      	movs	r2, #0
 800175e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001760:	4b2c      	ldr	r3, [pc, #176]	@ (8001814 <MX_ADC1_Init+0xe8>)
 8001762:	2200      	movs	r2, #0
 8001764:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8001766:	4b2b      	ldr	r3, [pc, #172]	@ (8001814 <MX_ADC1_Init+0xe8>)
 8001768:	2200      	movs	r2, #0
 800176a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800176c:	4b29      	ldr	r3, [pc, #164]	@ (8001814 <MX_ADC1_Init+0xe8>)
 800176e:	2200      	movs	r2, #0
 8001770:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001772:	4b28      	ldr	r3, [pc, #160]	@ (8001814 <MX_ADC1_Init+0xe8>)
 8001774:	2204      	movs	r2, #4
 8001776:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001778:	4b26      	ldr	r3, [pc, #152]	@ (8001814 <MX_ADC1_Init+0xe8>)
 800177a:	2200      	movs	r2, #0
 800177c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800177e:	4b25      	ldr	r3, [pc, #148]	@ (8001814 <MX_ADC1_Init+0xe8>)
 8001780:	2200      	movs	r2, #0
 8001782:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8001784:	4b23      	ldr	r3, [pc, #140]	@ (8001814 <MX_ADC1_Init+0xe8>)
 8001786:	2201      	movs	r2, #1
 8001788:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800178a:	4b22      	ldr	r3, [pc, #136]	@ (8001814 <MX_ADC1_Init+0xe8>)
 800178c:	2200      	movs	r2, #0
 800178e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001792:	4b20      	ldr	r3, [pc, #128]	@ (8001814 <MX_ADC1_Init+0xe8>)
 8001794:	2200      	movs	r2, #0
 8001796:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001798:	4b1e      	ldr	r3, [pc, #120]	@ (8001814 <MX_ADC1_Init+0xe8>)
 800179a:	2200      	movs	r2, #0
 800179c:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800179e:	4b1d      	ldr	r3, [pc, #116]	@ (8001814 <MX_ADC1_Init+0xe8>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80017a6:	4b1b      	ldr	r3, [pc, #108]	@ (8001814 <MX_ADC1_Init+0xe8>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80017ac:	4b19      	ldr	r3, [pc, #100]	@ (8001814 <MX_ADC1_Init+0xe8>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80017b4:	4817      	ldr	r0, [pc, #92]	@ (8001814 <MX_ADC1_Init+0xe8>)
 80017b6:	f001 fb3d 	bl	8002e34 <HAL_ADC_Init>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d001      	beq.n	80017c4 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80017c0:	f000 fcfa 	bl	80021b8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80017c4:	2300      	movs	r3, #0
 80017c6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80017c8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017cc:	4619      	mov	r1, r3
 80017ce:	4811      	ldr	r0, [pc, #68]	@ (8001814 <MX_ADC1_Init+0xe8>)
 80017d0:	f002 f952 	bl	8003a78 <HAL_ADCEx_MultiModeConfigChannel>
 80017d4:	4603      	mov	r3, r0
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d001      	beq.n	80017de <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80017da:	f000 fced 	bl	80021b8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80017de:	4b0e      	ldr	r3, [pc, #56]	@ (8001818 <MX_ADC1_Init+0xec>)
 80017e0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80017e2:	2306      	movs	r3, #6
 80017e4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80017e6:	2300      	movs	r3, #0
 80017e8:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 80017ea:	4b0c      	ldr	r3, [pc, #48]	@ (800181c <MX_ADC1_Init+0xf0>)
 80017ec:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80017ee:	2304      	movs	r3, #4
 80017f0:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80017f2:	2300      	movs	r3, #0
 80017f4:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80017f6:	1d3b      	adds	r3, r7, #4
 80017f8:	4619      	mov	r1, r3
 80017fa:	4806      	ldr	r0, [pc, #24]	@ (8001814 <MX_ADC1_Init+0xe8>)
 80017fc:	f001 fcd6 	bl	80031ac <HAL_ADC_ConfigChannel>
 8001800:	4603      	mov	r3, r0
 8001802:	2b00      	cmp	r3, #0
 8001804:	d001      	beq.n	800180a <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8001806:	f000 fcd7 	bl	80021b8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800180a:	bf00      	nop
 800180c:	3730      	adds	r7, #48	@ 0x30
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	20000294 	.word	0x20000294
 8001818:	04300002 	.word	0x04300002
 800181c:	407f0000 	.word	0x407f0000

08001820 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001824:	4b1b      	ldr	r3, [pc, #108]	@ (8001894 <MX_SPI1_Init+0x74>)
 8001826:	4a1c      	ldr	r2, [pc, #112]	@ (8001898 <MX_SPI1_Init+0x78>)
 8001828:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800182a:	4b1a      	ldr	r3, [pc, #104]	@ (8001894 <MX_SPI1_Init+0x74>)
 800182c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001830:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001832:	4b18      	ldr	r3, [pc, #96]	@ (8001894 <MX_SPI1_Init+0x74>)
 8001834:	2200      	movs	r2, #0
 8001836:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001838:	4b16      	ldr	r3, [pc, #88]	@ (8001894 <MX_SPI1_Init+0x74>)
 800183a:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800183e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001840:	4b14      	ldr	r3, [pc, #80]	@ (8001894 <MX_SPI1_Init+0x74>)
 8001842:	2202      	movs	r2, #2
 8001844:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001846:	4b13      	ldr	r3, [pc, #76]	@ (8001894 <MX_SPI1_Init+0x74>)
 8001848:	2201      	movs	r2, #1
 800184a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800184c:	4b11      	ldr	r3, [pc, #68]	@ (8001894 <MX_SPI1_Init+0x74>)
 800184e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001852:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001854:	4b0f      	ldr	r3, [pc, #60]	@ (8001894 <MX_SPI1_Init+0x74>)
 8001856:	2238      	movs	r2, #56	@ 0x38
 8001858:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_LSB;
 800185a:	4b0e      	ldr	r3, [pc, #56]	@ (8001894 <MX_SPI1_Init+0x74>)
 800185c:	2280      	movs	r2, #128	@ 0x80
 800185e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001860:	4b0c      	ldr	r3, [pc, #48]	@ (8001894 <MX_SPI1_Init+0x74>)
 8001862:	2200      	movs	r2, #0
 8001864:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001866:	4b0b      	ldr	r3, [pc, #44]	@ (8001894 <MX_SPI1_Init+0x74>)
 8001868:	2200      	movs	r2, #0
 800186a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 800186c:	4b09      	ldr	r3, [pc, #36]	@ (8001894 <MX_SPI1_Init+0x74>)
 800186e:	2207      	movs	r2, #7
 8001870:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001872:	4b08      	ldr	r3, [pc, #32]	@ (8001894 <MX_SPI1_Init+0x74>)
 8001874:	2200      	movs	r2, #0
 8001876:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001878:	4b06      	ldr	r3, [pc, #24]	@ (8001894 <MX_SPI1_Init+0x74>)
 800187a:	2200      	movs	r2, #0
 800187c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800187e:	4805      	ldr	r0, [pc, #20]	@ (8001894 <MX_SPI1_Init+0x74>)
 8001880:	f004 f832 	bl	80058e8 <HAL_SPI_Init>
 8001884:	4603      	mov	r3, r0
 8001886:	2b00      	cmp	r3, #0
 8001888:	d001      	beq.n	800188e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800188a:	f000 fc95 	bl	80021b8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800188e:	bf00      	nop
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	20000300 	.word	0x20000300
 8001898:	40013000 	.word	0x40013000

0800189c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b088      	sub	sp, #32
 80018a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018a2:	f107 0310 	add.w	r3, r7, #16
 80018a6:	2200      	movs	r2, #0
 80018a8:	601a      	str	r2, [r3, #0]
 80018aa:	605a      	str	r2, [r3, #4]
 80018ac:	609a      	str	r2, [r3, #8]
 80018ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018b0:	1d3b      	adds	r3, r7, #4
 80018b2:	2200      	movs	r2, #0
 80018b4:	601a      	str	r2, [r3, #0]
 80018b6:	605a      	str	r2, [r3, #4]
 80018b8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80018ba:	4b20      	ldr	r3, [pc, #128]	@ (800193c <MX_TIM1_Init+0xa0>)
 80018bc:	4a20      	ldr	r2, [pc, #128]	@ (8001940 <MX_TIM1_Init+0xa4>)
 80018be:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80018c0:	4b1e      	ldr	r3, [pc, #120]	@ (800193c <MX_TIM1_Init+0xa0>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018c6:	4b1d      	ldr	r3, [pc, #116]	@ (800193c <MX_TIM1_Init+0xa0>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 60000;
 80018cc:	4b1b      	ldr	r3, [pc, #108]	@ (800193c <MX_TIM1_Init+0xa0>)
 80018ce:	f64e 2260 	movw	r2, #60000	@ 0xea60
 80018d2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018d4:	4b19      	ldr	r3, [pc, #100]	@ (800193c <MX_TIM1_Init+0xa0>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80018da:	4b18      	ldr	r3, [pc, #96]	@ (800193c <MX_TIM1_Init+0xa0>)
 80018dc:	2200      	movs	r2, #0
 80018de:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018e0:	4b16      	ldr	r3, [pc, #88]	@ (800193c <MX_TIM1_Init+0xa0>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80018e6:	4815      	ldr	r0, [pc, #84]	@ (800193c <MX_TIM1_Init+0xa0>)
 80018e8:	f004 fc2c 	bl	8006144 <HAL_TIM_Base_Init>
 80018ec:	4603      	mov	r3, r0
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d001      	beq.n	80018f6 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80018f2:	f000 fc61 	bl	80021b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018f6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80018fa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80018fc:	f107 0310 	add.w	r3, r7, #16
 8001900:	4619      	mov	r1, r3
 8001902:	480e      	ldr	r0, [pc, #56]	@ (800193c <MX_TIM1_Init+0xa0>)
 8001904:	f005 fb16 	bl	8006f34 <HAL_TIM_ConfigClockSource>
 8001908:	4603      	mov	r3, r0
 800190a:	2b00      	cmp	r3, #0
 800190c:	d001      	beq.n	8001912 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800190e:	f000 fc53 	bl	80021b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001912:	2300      	movs	r3, #0
 8001914:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001916:	2300      	movs	r3, #0
 8001918:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800191a:	2300      	movs	r3, #0
 800191c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800191e:	1d3b      	adds	r3, r7, #4
 8001920:	4619      	mov	r1, r3
 8001922:	4806      	ldr	r0, [pc, #24]	@ (800193c <MX_TIM1_Init+0xa0>)
 8001924:	f006 faf6 	bl	8007f14 <HAL_TIMEx_MasterConfigSynchronization>
 8001928:	4603      	mov	r3, r0
 800192a:	2b00      	cmp	r3, #0
 800192c:	d001      	beq.n	8001932 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800192e:	f000 fc43 	bl	80021b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001932:	bf00      	nop
 8001934:	3720      	adds	r7, #32
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	20000364 	.word	0x20000364
 8001940:	40012c00 	.word	0x40012c00

08001944 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b088      	sub	sp, #32
 8001948:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800194a:	f107 0310 	add.w	r3, r7, #16
 800194e:	2200      	movs	r2, #0
 8001950:	601a      	str	r2, [r3, #0]
 8001952:	605a      	str	r2, [r3, #4]
 8001954:	609a      	str	r2, [r3, #8]
 8001956:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001958:	1d3b      	adds	r3, r7, #4
 800195a:	2200      	movs	r2, #0
 800195c:	601a      	str	r2, [r3, #0]
 800195e:	605a      	str	r2, [r3, #4]
 8001960:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001962:	4b1e      	ldr	r3, [pc, #120]	@ (80019dc <MX_TIM2_Init+0x98>)
 8001964:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001968:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800196a:	4b1c      	ldr	r3, [pc, #112]	@ (80019dc <MX_TIM2_Init+0x98>)
 800196c:	2200      	movs	r2, #0
 800196e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001970:	4b1a      	ldr	r3, [pc, #104]	@ (80019dc <MX_TIM2_Init+0x98>)
 8001972:	2200      	movs	r2, #0
 8001974:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001976:	4b19      	ldr	r3, [pc, #100]	@ (80019dc <MX_TIM2_Init+0x98>)
 8001978:	f04f 32ff 	mov.w	r2, #4294967295
 800197c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800197e:	4b17      	ldr	r3, [pc, #92]	@ (80019dc <MX_TIM2_Init+0x98>)
 8001980:	2200      	movs	r2, #0
 8001982:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001984:	4b15      	ldr	r3, [pc, #84]	@ (80019dc <MX_TIM2_Init+0x98>)
 8001986:	2200      	movs	r2, #0
 8001988:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800198a:	4814      	ldr	r0, [pc, #80]	@ (80019dc <MX_TIM2_Init+0x98>)
 800198c:	f004 fbda 	bl	8006144 <HAL_TIM_Base_Init>
 8001990:	4603      	mov	r3, r0
 8001992:	2b00      	cmp	r3, #0
 8001994:	d001      	beq.n	800199a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001996:	f000 fc0f 	bl	80021b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800199a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800199e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80019a0:	f107 0310 	add.w	r3, r7, #16
 80019a4:	4619      	mov	r1, r3
 80019a6:	480d      	ldr	r0, [pc, #52]	@ (80019dc <MX_TIM2_Init+0x98>)
 80019a8:	f005 fac4 	bl	8006f34 <HAL_TIM_ConfigClockSource>
 80019ac:	4603      	mov	r3, r0
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d001      	beq.n	80019b6 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80019b2:	f000 fc01 	bl	80021b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019b6:	2300      	movs	r3, #0
 80019b8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019ba:	2300      	movs	r3, #0
 80019bc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80019be:	1d3b      	adds	r3, r7, #4
 80019c0:	4619      	mov	r1, r3
 80019c2:	4806      	ldr	r0, [pc, #24]	@ (80019dc <MX_TIM2_Init+0x98>)
 80019c4:	f006 faa6 	bl	8007f14 <HAL_TIMEx_MasterConfigSynchronization>
 80019c8:	4603      	mov	r3, r0
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d001      	beq.n	80019d2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80019ce:	f000 fbf3 	bl	80021b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80019d2:	bf00      	nop
 80019d4:	3720      	adds	r7, #32
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	20000430 	.word	0x20000430

080019e0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b08c      	sub	sp, #48	@ 0x30
 80019e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80019e6:	f107 030c 	add.w	r3, r7, #12
 80019ea:	2224      	movs	r2, #36	@ 0x24
 80019ec:	2100      	movs	r1, #0
 80019ee:	4618      	mov	r0, r3
 80019f0:	f009 f860 	bl	800aab4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019f4:	463b      	mov	r3, r7
 80019f6:	2200      	movs	r2, #0
 80019f8:	601a      	str	r2, [r3, #0]
 80019fa:	605a      	str	r2, [r3, #4]
 80019fc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80019fe:	4b21      	ldr	r3, [pc, #132]	@ (8001a84 <MX_TIM3_Init+0xa4>)
 8001a00:	4a21      	ldr	r2, [pc, #132]	@ (8001a88 <MX_TIM3_Init+0xa8>)
 8001a02:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001a04:	4b1f      	ldr	r3, [pc, #124]	@ (8001a84 <MX_TIM3_Init+0xa4>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a0a:	4b1e      	ldr	r3, [pc, #120]	@ (8001a84 <MX_TIM3_Init+0xa4>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 59999;
 8001a10:	4b1c      	ldr	r3, [pc, #112]	@ (8001a84 <MX_TIM3_Init+0xa4>)
 8001a12:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 8001a16:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a18:	4b1a      	ldr	r3, [pc, #104]	@ (8001a84 <MX_TIM3_Init+0xa4>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a1e:	4b19      	ldr	r3, [pc, #100]	@ (8001a84 <MX_TIM3_Init+0xa4>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001a24:	2303      	movs	r3, #3
 8001a26:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001a30:	2300      	movs	r3, #0
 8001a32:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001a34:	2300      	movs	r3, #0
 8001a36:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001a40:	2300      	movs	r3, #0
 8001a42:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001a44:	2300      	movs	r3, #0
 8001a46:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001a48:	f107 030c 	add.w	r3, r7, #12
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	480d      	ldr	r0, [pc, #52]	@ (8001a84 <MX_TIM3_Init+0xa4>)
 8001a50:	f004 fe26 	bl	80066a0 <HAL_TIM_Encoder_Init>
 8001a54:	4603      	mov	r3, r0
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d001      	beq.n	8001a5e <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8001a5a:	f000 fbad 	bl	80021b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a62:	2300      	movs	r3, #0
 8001a64:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001a66:	463b      	mov	r3, r7
 8001a68:	4619      	mov	r1, r3
 8001a6a:	4806      	ldr	r0, [pc, #24]	@ (8001a84 <MX_TIM3_Init+0xa4>)
 8001a6c:	f006 fa52 	bl	8007f14 <HAL_TIMEx_MasterConfigSynchronization>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d001      	beq.n	8001a7a <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8001a76:	f000 fb9f 	bl	80021b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001a7a:	bf00      	nop
 8001a7c:	3730      	adds	r7, #48	@ 0x30
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	200004fc 	.word	0x200004fc
 8001a88:	40000400 	.word	0x40000400

08001a8c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b08c      	sub	sp, #48	@ 0x30
 8001a90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001a92:	f107 030c 	add.w	r3, r7, #12
 8001a96:	2224      	movs	r2, #36	@ 0x24
 8001a98:	2100      	movs	r1, #0
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f009 f80a 	bl	800aab4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001aa0:	463b      	mov	r3, r7
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	601a      	str	r2, [r3, #0]
 8001aa6:	605a      	str	r2, [r3, #4]
 8001aa8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001aaa:	4b21      	ldr	r3, [pc, #132]	@ (8001b30 <MX_TIM4_Init+0xa4>)
 8001aac:	4a21      	ldr	r2, [pc, #132]	@ (8001b34 <MX_TIM4_Init+0xa8>)
 8001aae:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001ab0:	4b1f      	ldr	r3, [pc, #124]	@ (8001b30 <MX_TIM4_Init+0xa4>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ab6:	4b1e      	ldr	r3, [pc, #120]	@ (8001b30 <MX_TIM4_Init+0xa4>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 59999;
 8001abc:	4b1c      	ldr	r3, [pc, #112]	@ (8001b30 <MX_TIM4_Init+0xa4>)
 8001abe:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 8001ac2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ac4:	4b1a      	ldr	r3, [pc, #104]	@ (8001b30 <MX_TIM4_Init+0xa4>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001aca:	4b19      	ldr	r3, [pc, #100]	@ (8001b30 <MX_TIM4_Init+0xa4>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001ad0:	2303      	movs	r3, #3
 8001ad2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001adc:	2300      	movs	r3, #0
 8001ade:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001ae8:	2301      	movs	r3, #1
 8001aea:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001aec:	2300      	movs	r3, #0
 8001aee:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001af0:	2300      	movs	r3, #0
 8001af2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001af4:	f107 030c 	add.w	r3, r7, #12
 8001af8:	4619      	mov	r1, r3
 8001afa:	480d      	ldr	r0, [pc, #52]	@ (8001b30 <MX_TIM4_Init+0xa4>)
 8001afc:	f004 fdd0 	bl	80066a0 <HAL_TIM_Encoder_Init>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d001      	beq.n	8001b0a <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8001b06:	f000 fb57 	bl	80021b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001b12:	463b      	mov	r3, r7
 8001b14:	4619      	mov	r1, r3
 8001b16:	4806      	ldr	r0, [pc, #24]	@ (8001b30 <MX_TIM4_Init+0xa4>)
 8001b18:	f006 f9fc 	bl	8007f14 <HAL_TIMEx_MasterConfigSynchronization>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d001      	beq.n	8001b26 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8001b22:	f000 fb49 	bl	80021b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001b26:	bf00      	nop
 8001b28:	3730      	adds	r7, #48	@ 0x30
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	200005c8 	.word	0x200005c8
 8001b34:	40000800 	.word	0x40000800

08001b38 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b09c      	sub	sp, #112	@ 0x70
 8001b3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b3e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001b42:	2200      	movs	r2, #0
 8001b44:	601a      	str	r2, [r3, #0]
 8001b46:	605a      	str	r2, [r3, #4]
 8001b48:	609a      	str	r2, [r3, #8]
 8001b4a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b4c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001b50:	2200      	movs	r2, #0
 8001b52:	601a      	str	r2, [r3, #0]
 8001b54:	605a      	str	r2, [r3, #4]
 8001b56:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b58:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	601a      	str	r2, [r3, #0]
 8001b60:	605a      	str	r2, [r3, #4]
 8001b62:	609a      	str	r2, [r3, #8]
 8001b64:	60da      	str	r2, [r3, #12]
 8001b66:	611a      	str	r2, [r3, #16]
 8001b68:	615a      	str	r2, [r3, #20]
 8001b6a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001b6c:	1d3b      	adds	r3, r7, #4
 8001b6e:	2234      	movs	r2, #52	@ 0x34
 8001b70:	2100      	movs	r1, #0
 8001b72:	4618      	mov	r0, r3
 8001b74:	f008 ff9e 	bl	800aab4 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001b78:	4b45      	ldr	r3, [pc, #276]	@ (8001c90 <MX_TIM8_Init+0x158>)
 8001b7a:	4a46      	ldr	r2, [pc, #280]	@ (8001c94 <MX_TIM8_Init+0x15c>)
 8001b7c:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001b7e:	4b44      	ldr	r3, [pc, #272]	@ (8001c90 <MX_TIM8_Init+0x158>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b84:	4b42      	ldr	r3, [pc, #264]	@ (8001c90 <MX_TIM8_Init+0x158>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001b8a:	4b41      	ldr	r3, [pc, #260]	@ (8001c90 <MX_TIM8_Init+0x158>)
 8001b8c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001b90:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b92:	4b3f      	ldr	r3, [pc, #252]	@ (8001c90 <MX_TIM8_Init+0x158>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001b98:	4b3d      	ldr	r3, [pc, #244]	@ (8001c90 <MX_TIM8_Init+0x158>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b9e:	4b3c      	ldr	r3, [pc, #240]	@ (8001c90 <MX_TIM8_Init+0x158>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001ba4:	483a      	ldr	r0, [pc, #232]	@ (8001c90 <MX_TIM8_Init+0x158>)
 8001ba6:	f004 facd 	bl	8006144 <HAL_TIM_Base_Init>
 8001baa:	4603      	mov	r3, r0
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d001      	beq.n	8001bb4 <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 8001bb0:	f000 fb02 	bl	80021b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bb4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001bb8:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001bba:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001bbe:	4619      	mov	r1, r3
 8001bc0:	4833      	ldr	r0, [pc, #204]	@ (8001c90 <MX_TIM8_Init+0x158>)
 8001bc2:	f005 f9b7 	bl	8006f34 <HAL_TIM_ConfigClockSource>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d001      	beq.n	8001bd0 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 8001bcc:	f000 faf4 	bl	80021b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001bd0:	482f      	ldr	r0, [pc, #188]	@ (8001c90 <MX_TIM8_Init+0x158>)
 8001bd2:	f004 fc01 	bl	80063d8 <HAL_TIM_PWM_Init>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d001      	beq.n	8001be0 <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 8001bdc:	f000 faec 	bl	80021b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001be0:	2300      	movs	r3, #0
 8001be2:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001be4:	2300      	movs	r3, #0
 8001be6:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001be8:	2300      	movs	r3, #0
 8001bea:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001bec:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001bf0:	4619      	mov	r1, r3
 8001bf2:	4827      	ldr	r0, [pc, #156]	@ (8001c90 <MX_TIM8_Init+0x158>)
 8001bf4:	f006 f98e 	bl	8007f14 <HAL_TIMEx_MasterConfigSynchronization>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d001      	beq.n	8001c02 <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 8001bfe:	f000 fadb 	bl	80021b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c02:	2360      	movs	r3, #96	@ 0x60
 8001c04:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8001c06:	2300      	movs	r3, #0
 8001c08:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c12:	2300      	movs	r3, #0
 8001c14:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001c16:	2300      	movs	r3, #0
 8001c18:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001c1e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001c22:	220c      	movs	r2, #12
 8001c24:	4619      	mov	r1, r3
 8001c26:	481a      	ldr	r0, [pc, #104]	@ (8001c90 <MX_TIM8_Init+0x158>)
 8001c28:	f005 f870 	bl	8006d0c <HAL_TIM_PWM_ConfigChannel>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d001      	beq.n	8001c36 <MX_TIM8_Init+0xfe>
  {
    Error_Handler();
 8001c32:	f000 fac1 	bl	80021b8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001c36:	2300      	movs	r3, #0
 8001c38:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001c42:	2300      	movs	r3, #0
 8001c44:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001c46:	2300      	movs	r3, #0
 8001c48:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001c4a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001c4e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001c50:	2300      	movs	r3, #0
 8001c52:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001c54:	2300      	movs	r3, #0
 8001c56:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001c5c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001c60:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001c62:	2300      	movs	r3, #0
 8001c64:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001c66:	2300      	movs	r3, #0
 8001c68:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001c6e:	1d3b      	adds	r3, r7, #4
 8001c70:	4619      	mov	r1, r3
 8001c72:	4807      	ldr	r0, [pc, #28]	@ (8001c90 <MX_TIM8_Init+0x158>)
 8001c74:	f006 f9e4 	bl	8008040 <HAL_TIMEx_ConfigBreakDeadTime>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d001      	beq.n	8001c82 <MX_TIM8_Init+0x14a>
  {
    Error_Handler();
 8001c7e:	f000 fa9b 	bl	80021b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001c82:	4803      	ldr	r0, [pc, #12]	@ (8001c90 <MX_TIM8_Init+0x158>)
 8001c84:	f000 fcaa 	bl	80025dc <HAL_TIM_MspPostInit>

}
 8001c88:	bf00      	nop
 8001c8a:	3770      	adds	r7, #112	@ 0x70
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}
 8001c90:	20000694 	.word	0x20000694
 8001c94:	40013400 	.word	0x40013400

08001c98 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b094      	sub	sp, #80	@ 0x50
 8001c9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c9e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	601a      	str	r2, [r3, #0]
 8001ca6:	605a      	str	r2, [r3, #4]
 8001ca8:	609a      	str	r2, [r3, #8]
 8001caa:	60da      	str	r2, [r3, #12]
 8001cac:	611a      	str	r2, [r3, #16]
 8001cae:	615a      	str	r2, [r3, #20]
 8001cb0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001cb2:	463b      	mov	r3, r7
 8001cb4:	2234      	movs	r2, #52	@ 0x34
 8001cb6:	2100      	movs	r1, #0
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f008 fefb 	bl	800aab4 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001cbe:	4b34      	ldr	r3, [pc, #208]	@ (8001d90 <MX_TIM16_Init+0xf8>)
 8001cc0:	4a34      	ldr	r2, [pc, #208]	@ (8001d94 <MX_TIM16_Init+0xfc>)
 8001cc2:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 169;
 8001cc4:	4b32      	ldr	r3, [pc, #200]	@ (8001d90 <MX_TIM16_Init+0xf8>)
 8001cc6:	22a9      	movs	r2, #169	@ 0xa9
 8001cc8:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cca:	4b31      	ldr	r3, [pc, #196]	@ (8001d90 <MX_TIM16_Init+0xf8>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 2005;
 8001cd0:	4b2f      	ldr	r3, [pc, #188]	@ (8001d90 <MX_TIM16_Init+0xf8>)
 8001cd2:	f240 72d5 	movw	r2, #2005	@ 0x7d5
 8001cd6:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cd8:	4b2d      	ldr	r3, [pc, #180]	@ (8001d90 <MX_TIM16_Init+0xf8>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001cde:	4b2c      	ldr	r3, [pc, #176]	@ (8001d90 <MX_TIM16_Init+0xf8>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ce4:	4b2a      	ldr	r3, [pc, #168]	@ (8001d90 <MX_TIM16_Init+0xf8>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001cea:	4829      	ldr	r0, [pc, #164]	@ (8001d90 <MX_TIM16_Init+0xf8>)
 8001cec:	f004 fa2a 	bl	8006144 <HAL_TIM_Base_Init>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d001      	beq.n	8001cfa <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 8001cf6:	f000 fa5f 	bl	80021b8 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim16) != HAL_OK)
 8001cfa:	4825      	ldr	r0, [pc, #148]	@ (8001d90 <MX_TIM16_Init+0xf8>)
 8001cfc:	f004 fafe 	bl	80062fc <HAL_TIM_OC_Init>
 8001d00:	4603      	mov	r3, r0
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d001      	beq.n	8001d0a <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 8001d06:	f000 fa57 	bl	80021b8 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim16, TIM_OPMODE_SINGLE) != HAL_OK)
 8001d0a:	2108      	movs	r1, #8
 8001d0c:	4820      	ldr	r0, [pc, #128]	@ (8001d90 <MX_TIM16_Init+0xf8>)
 8001d0e:	f004 fbd1 	bl	80064b4 <HAL_TIM_OnePulse_Init>
 8001d12:	4603      	mov	r3, r0
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d001      	beq.n	8001d1c <MX_TIM16_Init+0x84>
  {
    Error_Handler();
 8001d18:	f000 fa4e 	bl	80021b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_ACTIVE;
 8001d1c:	2310      	movs	r3, #16
 8001d1e:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.Pulse = 1433;
 8001d20:	f240 5399 	movw	r3, #1433	@ 0x599
 8001d24:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d26:	2300      	movs	r3, #0
 8001d28:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001d32:	2300      	movs	r3, #0
 8001d34:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001d36:	2300      	movs	r3, #0
 8001d38:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_TIM_OC_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d3a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001d3e:	2200      	movs	r2, #0
 8001d40:	4619      	mov	r1, r3
 8001d42:	4813      	ldr	r0, [pc, #76]	@ (8001d90 <MX_TIM16_Init+0xf8>)
 8001d44:	f004 ff68 	bl	8006c18 <HAL_TIM_OC_ConfigChannel>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d001      	beq.n	8001d52 <MX_TIM16_Init+0xba>
  {
    Error_Handler();
 8001d4e:	f000 fa33 	bl	80021b8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001d52:	2300      	movs	r3, #0
 8001d54:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001d56:	2300      	movs	r3, #0
 8001d58:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001d62:	2300      	movs	r3, #0
 8001d64:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001d66:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001d6a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001d70:	2300      	movs	r3, #0
 8001d72:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8001d74:	463b      	mov	r3, r7
 8001d76:	4619      	mov	r1, r3
 8001d78:	4805      	ldr	r0, [pc, #20]	@ (8001d90 <MX_TIM16_Init+0xf8>)
 8001d7a:	f006 f961 	bl	8008040 <HAL_TIMEx_ConfigBreakDeadTime>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d001      	beq.n	8001d88 <MX_TIM16_Init+0xf0>
  {
    Error_Handler();
 8001d84:	f000 fa18 	bl	80021b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8001d88:	bf00      	nop
 8001d8a:	3750      	adds	r7, #80	@ 0x50
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	20000760 	.word	0x20000760
 8001d94:	40014400 	.word	0x40014400

08001d98 <MX_TIM20_Init>:
  * @brief TIM20 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM20_Init(void)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b09c      	sub	sp, #112	@ 0x70
 8001d9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM20_Init 0 */

  /* USER CODE END TIM20_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d9e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001da2:	2200      	movs	r2, #0
 8001da4:	601a      	str	r2, [r3, #0]
 8001da6:	605a      	str	r2, [r3, #4]
 8001da8:	609a      	str	r2, [r3, #8]
 8001daa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001dac:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001db0:	2200      	movs	r2, #0
 8001db2:	601a      	str	r2, [r3, #0]
 8001db4:	605a      	str	r2, [r3, #4]
 8001db6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001db8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	601a      	str	r2, [r3, #0]
 8001dc0:	605a      	str	r2, [r3, #4]
 8001dc2:	609a      	str	r2, [r3, #8]
 8001dc4:	60da      	str	r2, [r3, #12]
 8001dc6:	611a      	str	r2, [r3, #16]
 8001dc8:	615a      	str	r2, [r3, #20]
 8001dca:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001dcc:	1d3b      	adds	r3, r7, #4
 8001dce:	2234      	movs	r2, #52	@ 0x34
 8001dd0:	2100      	movs	r1, #0
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f008 fe6e 	bl	800aab4 <memset>

  /* USER CODE BEGIN TIM20_Init 1 */

  /* USER CODE END TIM20_Init 1 */
  htim20.Instance = TIM20;
 8001dd8:	4b4b      	ldr	r3, [pc, #300]	@ (8001f08 <MX_TIM20_Init+0x170>)
 8001dda:	4a4c      	ldr	r2, [pc, #304]	@ (8001f0c <MX_TIM20_Init+0x174>)
 8001ddc:	601a      	str	r2, [r3, #0]
  htim20.Init.Prescaler = 0;
 8001dde:	4b4a      	ldr	r3, [pc, #296]	@ (8001f08 <MX_TIM20_Init+0x170>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	605a      	str	r2, [r3, #4]
  htim20.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001de4:	4b48      	ldr	r3, [pc, #288]	@ (8001f08 <MX_TIM20_Init+0x170>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	609a      	str	r2, [r3, #8]
  htim20.Init.Period = 65535;
 8001dea:	4b47      	ldr	r3, [pc, #284]	@ (8001f08 <MX_TIM20_Init+0x170>)
 8001dec:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001df0:	60da      	str	r2, [r3, #12]
  htim20.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001df2:	4b45      	ldr	r3, [pc, #276]	@ (8001f08 <MX_TIM20_Init+0x170>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	611a      	str	r2, [r3, #16]
  htim20.Init.RepetitionCounter = 0;
 8001df8:	4b43      	ldr	r3, [pc, #268]	@ (8001f08 <MX_TIM20_Init+0x170>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	615a      	str	r2, [r3, #20]
  htim20.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dfe:	4b42      	ldr	r3, [pc, #264]	@ (8001f08 <MX_TIM20_Init+0x170>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim20) != HAL_OK)
 8001e04:	4840      	ldr	r0, [pc, #256]	@ (8001f08 <MX_TIM20_Init+0x170>)
 8001e06:	f004 f99d 	bl	8006144 <HAL_TIM_Base_Init>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d001      	beq.n	8001e14 <MX_TIM20_Init+0x7c>
  {
    Error_Handler();
 8001e10:	f000 f9d2 	bl	80021b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e14:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001e18:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim20, &sClockSourceConfig) != HAL_OK)
 8001e1a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001e1e:	4619      	mov	r1, r3
 8001e20:	4839      	ldr	r0, [pc, #228]	@ (8001f08 <MX_TIM20_Init+0x170>)
 8001e22:	f005 f887 	bl	8006f34 <HAL_TIM_ConfigClockSource>
 8001e26:	4603      	mov	r3, r0
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d001      	beq.n	8001e30 <MX_TIM20_Init+0x98>
  {
    Error_Handler();
 8001e2c:	f000 f9c4 	bl	80021b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim20) != HAL_OK)
 8001e30:	4835      	ldr	r0, [pc, #212]	@ (8001f08 <MX_TIM20_Init+0x170>)
 8001e32:	f004 fad1 	bl	80063d8 <HAL_TIM_PWM_Init>
 8001e36:	4603      	mov	r3, r0
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d001      	beq.n	8001e40 <MX_TIM20_Init+0xa8>
  {
    Error_Handler();
 8001e3c:	f000 f9bc 	bl	80021b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e40:	2300      	movs	r3, #0
 8001e42:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001e44:	2300      	movs	r3, #0
 8001e46:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim20, &sMasterConfig) != HAL_OK)
 8001e4c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001e50:	4619      	mov	r1, r3
 8001e52:	482d      	ldr	r0, [pc, #180]	@ (8001f08 <MX_TIM20_Init+0x170>)
 8001e54:	f006 f85e 	bl	8007f14 <HAL_TIMEx_MasterConfigSynchronization>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d001      	beq.n	8001e62 <MX_TIM20_Init+0xca>
  {
    Error_Handler();
 8001e5e:	f000 f9ab 	bl	80021b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e62:	2360      	movs	r3, #96	@ 0x60
 8001e64:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8001e66:	2300      	movs	r3, #0
 8001e68:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e72:	2300      	movs	r3, #0
 8001e74:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001e76:	2300      	movs	r3, #0
 8001e78:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim20, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e7e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001e82:	2200      	movs	r2, #0
 8001e84:	4619      	mov	r1, r3
 8001e86:	4820      	ldr	r0, [pc, #128]	@ (8001f08 <MX_TIM20_Init+0x170>)
 8001e88:	f004 ff40 	bl	8006d0c <HAL_TIM_PWM_ConfigChannel>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d001      	beq.n	8001e96 <MX_TIM20_Init+0xfe>
  {
    Error_Handler();
 8001e92:	f000 f991 	bl	80021b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim20, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001e96:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001e9a:	2208      	movs	r2, #8
 8001e9c:	4619      	mov	r1, r3
 8001e9e:	481a      	ldr	r0, [pc, #104]	@ (8001f08 <MX_TIM20_Init+0x170>)
 8001ea0:	f004 ff34 	bl	8006d0c <HAL_TIM_PWM_ConfigChannel>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d001      	beq.n	8001eae <MX_TIM20_Init+0x116>
  {
    Error_Handler();
 8001eaa:	f000 f985 	bl	80021b8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001ec2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001ec6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001ed4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001ed8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001eda:	2300      	movs	r3, #0
 8001edc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim20, &sBreakDeadTimeConfig) != HAL_OK)
 8001ee6:	1d3b      	adds	r3, r7, #4
 8001ee8:	4619      	mov	r1, r3
 8001eea:	4807      	ldr	r0, [pc, #28]	@ (8001f08 <MX_TIM20_Init+0x170>)
 8001eec:	f006 f8a8 	bl	8008040 <HAL_TIMEx_ConfigBreakDeadTime>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d001      	beq.n	8001efa <MX_TIM20_Init+0x162>
  {
    Error_Handler();
 8001ef6:	f000 f95f 	bl	80021b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM20_Init 2 */

  /* USER CODE END TIM20_Init 2 */
  HAL_TIM_MspPostInit(&htim20);
 8001efa:	4803      	ldr	r0, [pc, #12]	@ (8001f08 <MX_TIM20_Init+0x170>)
 8001efc:	f000 fb6e 	bl	80025dc <HAL_TIM_MspPostInit>

}
 8001f00:	bf00      	nop
 8001f02:	3770      	adds	r7, #112	@ 0x70
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}
 8001f08:	2000082c 	.word	0x2000082c
 8001f0c:	40015000 	.word	0x40015000

08001f10 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001f14:	4b23      	ldr	r3, [pc, #140]	@ (8001fa4 <MX_USART2_UART_Init+0x94>)
 8001f16:	4a24      	ldr	r2, [pc, #144]	@ (8001fa8 <MX_USART2_UART_Init+0x98>)
 8001f18:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 8001f1a:	4b22      	ldr	r3, [pc, #136]	@ (8001fa4 <MX_USART2_UART_Init+0x94>)
 8001f1c:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 8001f20:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8001f22:	4b20      	ldr	r3, [pc, #128]	@ (8001fa4 <MX_USART2_UART_Init+0x94>)
 8001f24:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001f28:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001f2a:	4b1e      	ldr	r3, [pc, #120]	@ (8001fa4 <MX_USART2_UART_Init+0x94>)
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8001f30:	4b1c      	ldr	r3, [pc, #112]	@ (8001fa4 <MX_USART2_UART_Init+0x94>)
 8001f32:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001f36:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001f38:	4b1a      	ldr	r3, [pc, #104]	@ (8001fa4 <MX_USART2_UART_Init+0x94>)
 8001f3a:	220c      	movs	r2, #12
 8001f3c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f3e:	4b19      	ldr	r3, [pc, #100]	@ (8001fa4 <MX_USART2_UART_Init+0x94>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f44:	4b17      	ldr	r3, [pc, #92]	@ (8001fa4 <MX_USART2_UART_Init+0x94>)
 8001f46:	2200      	movs	r2, #0
 8001f48:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001f4a:	4b16      	ldr	r3, [pc, #88]	@ (8001fa4 <MX_USART2_UART_Init+0x94>)
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001f50:	4b14      	ldr	r3, [pc, #80]	@ (8001fa4 <MX_USART2_UART_Init+0x94>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f56:	4b13      	ldr	r3, [pc, #76]	@ (8001fa4 <MX_USART2_UART_Init+0x94>)
 8001f58:	2200      	movs	r2, #0
 8001f5a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001f5c:	4811      	ldr	r0, [pc, #68]	@ (8001fa4 <MX_USART2_UART_Init+0x94>)
 8001f5e:	f006 f953 	bl	8008208 <HAL_UART_Init>
 8001f62:	4603      	mov	r3, r0
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d001      	beq.n	8001f6c <MX_USART2_UART_Init+0x5c>
  {
    Error_Handler();
 8001f68:	f000 f926 	bl	80021b8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f6c:	2100      	movs	r1, #0
 8001f6e:	480d      	ldr	r0, [pc, #52]	@ (8001fa4 <MX_USART2_UART_Init+0x94>)
 8001f70:	f008 fcd5 	bl	800a91e <HAL_UARTEx_SetTxFifoThreshold>
 8001f74:	4603      	mov	r3, r0
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d001      	beq.n	8001f7e <MX_USART2_UART_Init+0x6e>
  {
    Error_Handler();
 8001f7a:	f000 f91d 	bl	80021b8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f7e:	2100      	movs	r1, #0
 8001f80:	4808      	ldr	r0, [pc, #32]	@ (8001fa4 <MX_USART2_UART_Init+0x94>)
 8001f82:	f008 fd0a 	bl	800a99a <HAL_UARTEx_SetRxFifoThreshold>
 8001f86:	4603      	mov	r3, r0
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d001      	beq.n	8001f90 <MX_USART2_UART_Init+0x80>
  {
    Error_Handler();
 8001f8c:	f000 f914 	bl	80021b8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001f90:	4804      	ldr	r0, [pc, #16]	@ (8001fa4 <MX_USART2_UART_Init+0x94>)
 8001f92:	f008 fc8b 	bl	800a8ac <HAL_UARTEx_DisableFifoMode>
 8001f96:	4603      	mov	r3, r0
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d001      	beq.n	8001fa0 <MX_USART2_UART_Init+0x90>
  {
    Error_Handler();
 8001f9c:	f000 f90c 	bl	80021b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001fa0:	bf00      	nop
 8001fa2:	bd80      	pop	{r7, pc}
 8001fa4:	200008f8 	.word	0x200008f8
 8001fa8:	40004400 	.word	0x40004400

08001fac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b082      	sub	sp, #8
 8001fb0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001fb2:	4b12      	ldr	r3, [pc, #72]	@ (8001ffc <MX_DMA_Init+0x50>)
 8001fb4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001fb6:	4a11      	ldr	r2, [pc, #68]	@ (8001ffc <MX_DMA_Init+0x50>)
 8001fb8:	f043 0304 	orr.w	r3, r3, #4
 8001fbc:	6493      	str	r3, [r2, #72]	@ 0x48
 8001fbe:	4b0f      	ldr	r3, [pc, #60]	@ (8001ffc <MX_DMA_Init+0x50>)
 8001fc0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001fc2:	f003 0304 	and.w	r3, r3, #4
 8001fc6:	607b      	str	r3, [r7, #4]
 8001fc8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001fca:	4b0c      	ldr	r3, [pc, #48]	@ (8001ffc <MX_DMA_Init+0x50>)
 8001fcc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001fce:	4a0b      	ldr	r2, [pc, #44]	@ (8001ffc <MX_DMA_Init+0x50>)
 8001fd0:	f043 0301 	orr.w	r3, r3, #1
 8001fd4:	6493      	str	r3, [r2, #72]	@ 0x48
 8001fd6:	4b09      	ldr	r3, [pc, #36]	@ (8001ffc <MX_DMA_Init+0x50>)
 8001fd8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001fda:	f003 0301 	and.w	r3, r3, #1
 8001fde:	603b      	str	r3, [r7, #0]
 8001fe0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	2100      	movs	r1, #0
 8001fe6:	200b      	movs	r0, #11
 8001fe8:	f001 ff29 	bl	8003e3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001fec:	200b      	movs	r0, #11
 8001fee:	f001 ff40 	bl	8003e72 <HAL_NVIC_EnableIRQ>

}
 8001ff2:	bf00      	nop
 8001ff4:	3708      	adds	r7, #8
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	40021000 	.word	0x40021000

08002000 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b08a      	sub	sp, #40	@ 0x28
 8002004:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002006:	f107 0314 	add.w	r3, r7, #20
 800200a:	2200      	movs	r2, #0
 800200c:	601a      	str	r2, [r3, #0]
 800200e:	605a      	str	r2, [r3, #4]
 8002010:	609a      	str	r2, [r3, #8]
 8002012:	60da      	str	r2, [r3, #12]
 8002014:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002016:	4b53      	ldr	r3, [pc, #332]	@ (8002164 <MX_GPIO_Init+0x164>)
 8002018:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800201a:	4a52      	ldr	r2, [pc, #328]	@ (8002164 <MX_GPIO_Init+0x164>)
 800201c:	f043 0304 	orr.w	r3, r3, #4
 8002020:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002022:	4b50      	ldr	r3, [pc, #320]	@ (8002164 <MX_GPIO_Init+0x164>)
 8002024:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002026:	f003 0304 	and.w	r3, r3, #4
 800202a:	613b      	str	r3, [r7, #16]
 800202c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800202e:	4b4d      	ldr	r3, [pc, #308]	@ (8002164 <MX_GPIO_Init+0x164>)
 8002030:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002032:	4a4c      	ldr	r2, [pc, #304]	@ (8002164 <MX_GPIO_Init+0x164>)
 8002034:	f043 0320 	orr.w	r3, r3, #32
 8002038:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800203a:	4b4a      	ldr	r3, [pc, #296]	@ (8002164 <MX_GPIO_Init+0x164>)
 800203c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800203e:	f003 0320 	and.w	r3, r3, #32
 8002042:	60fb      	str	r3, [r7, #12]
 8002044:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002046:	4b47      	ldr	r3, [pc, #284]	@ (8002164 <MX_GPIO_Init+0x164>)
 8002048:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800204a:	4a46      	ldr	r2, [pc, #280]	@ (8002164 <MX_GPIO_Init+0x164>)
 800204c:	f043 0301 	orr.w	r3, r3, #1
 8002050:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002052:	4b44      	ldr	r3, [pc, #272]	@ (8002164 <MX_GPIO_Init+0x164>)
 8002054:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002056:	f003 0301 	and.w	r3, r3, #1
 800205a:	60bb      	str	r3, [r7, #8]
 800205c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800205e:	4b41      	ldr	r3, [pc, #260]	@ (8002164 <MX_GPIO_Init+0x164>)
 8002060:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002062:	4a40      	ldr	r2, [pc, #256]	@ (8002164 <MX_GPIO_Init+0x164>)
 8002064:	f043 0302 	orr.w	r3, r3, #2
 8002068:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800206a:	4b3e      	ldr	r3, [pc, #248]	@ (8002164 <MX_GPIO_Init+0x164>)
 800206c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800206e:	f003 0302 	and.w	r3, r3, #2
 8002072:	607b      	str	r3, [r7, #4]
 8002074:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DIR_MD20A_24V_Pin|DIR_MD20A_18V_Pin, GPIO_PIN_RESET);
 8002076:	2200      	movs	r2, #0
 8002078:	f241 0102 	movw	r1, #4098	@ 0x1002
 800207c:	483a      	ldr	r0, [pc, #232]	@ (8002168 <MX_GPIO_Init+0x168>)
 800207e:	f002 fbd3 	bl	8004828 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PS2_Attention_GPIO_Port, PS2_Attention_Pin, GPIO_PIN_SET);
 8002082:	2201      	movs	r2, #1
 8002084:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002088:	4838      	ldr	r0, [pc, #224]	@ (800216c <MX_GPIO_Init+0x16c>)
 800208a:	f002 fbcd 	bl	8004828 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DIR_MD20A_24V_Pin DIR_MD20A_18V_Pin */
  GPIO_InitStruct.Pin = DIR_MD20A_24V_Pin|DIR_MD20A_18V_Pin;
 800208e:	f241 0302 	movw	r3, #4098	@ 0x1002
 8002092:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002094:	2301      	movs	r3, #1
 8002096:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002098:	2300      	movs	r3, #0
 800209a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800209c:	2300      	movs	r3, #0
 800209e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020a0:	f107 0314 	add.w	r3, r7, #20
 80020a4:	4619      	mov	r1, r3
 80020a6:	4830      	ldr	r0, [pc, #192]	@ (8002168 <MX_GPIO_Init+0x168>)
 80020a8:	f002 fa3c 	bl	8004524 <HAL_GPIO_Init>

  /*Configure GPIO pins : Limit_Switch_pen_2_Pin Proximity_Sensor_Pin Limit_Switch_Prismatic1_Pin Limit_Switch_pen_1_Pin */
  GPIO_InitStruct.Pin = Limit_Switch_pen_2_Pin|Proximity_Sensor_Pin|Limit_Switch_Prismatic1_Pin|Limit_Switch_pen_1_Pin;
 80020ac:	f44f 43cc 	mov.w	r3, #26112	@ 0x6600
 80020b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80020b2:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80020b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b8:	2300      	movs	r3, #0
 80020ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020bc:	f107 0314 	add.w	r3, r7, #20
 80020c0:	4619      	mov	r1, r3
 80020c2:	4829      	ldr	r0, [pc, #164]	@ (8002168 <MX_GPIO_Init+0x168>)
 80020c4:	f002 fa2e 	bl	8004524 <HAL_GPIO_Init>

  /*Configure GPIO pin : Limit_Switch_Prismatic2_Pin */
  GPIO_InitStruct.Pin = Limit_Switch_Prismatic2_Pin;
 80020c8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80020cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80020ce:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80020d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d4:	2300      	movs	r3, #0
 80020d6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Limit_Switch_Prismatic2_GPIO_Port, &GPIO_InitStruct);
 80020d8:	f107 0314 	add.w	r3, r7, #20
 80020dc:	4619      	mov	r1, r3
 80020de:	4822      	ldr	r0, [pc, #136]	@ (8002168 <MX_GPIO_Init+0x168>)
 80020e0:	f002 fa20 	bl	8004524 <HAL_GPIO_Init>

  /*Configure GPIO pin : Proximity_sensor_Pin */
  GPIO_InitStruct.Pin = Proximity_sensor_Pin;
 80020e4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80020e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80020ea:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80020ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f0:	2300      	movs	r3, #0
 80020f2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Proximity_sensor_GPIO_Port, &GPIO_InitStruct);
 80020f4:	f107 0314 	add.w	r3, r7, #20
 80020f8:	4619      	mov	r1, r3
 80020fa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80020fe:	f002 fa11 	bl	8004524 <HAL_GPIO_Init>

  /*Configure GPIO pin : PS2_Attention_Pin */
  GPIO_InitStruct.Pin = PS2_Attention_Pin;
 8002102:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002106:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002108:	2301      	movs	r3, #1
 800210a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800210c:	2300      	movs	r3, #0
 800210e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002110:	2300      	movs	r3, #0
 8002112:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PS2_Attention_GPIO_Port, &GPIO_InitStruct);
 8002114:	f107 0314 	add.w	r3, r7, #20
 8002118:	4619      	mov	r1, r3
 800211a:	4814      	ldr	r0, [pc, #80]	@ (800216c <MX_GPIO_Init+0x16c>)
 800211c:	f002 fa02 	bl	8004524 <HAL_GPIO_Init>

  /*Configure GPIO pin : Emergency_Pin */
  GPIO_InitStruct.Pin = Emergency_Pin;
 8002120:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002124:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002126:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800212a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800212c:	2300      	movs	r3, #0
 800212e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Emergency_GPIO_Port, &GPIO_InitStruct);
 8002130:	f107 0314 	add.w	r3, r7, #20
 8002134:	4619      	mov	r1, r3
 8002136:	480d      	ldr	r0, [pc, #52]	@ (800216c <MX_GPIO_Init+0x16c>)
 8002138:	f002 f9f4 	bl	8004524 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800213c:	2200      	movs	r2, #0
 800213e:	2100      	movs	r1, #0
 8002140:	2017      	movs	r0, #23
 8002142:	f001 fe7c 	bl	8003e3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002146:	2017      	movs	r0, #23
 8002148:	f001 fe93 	bl	8003e72 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800214c:	2200      	movs	r2, #0
 800214e:	2100      	movs	r1, #0
 8002150:	2028      	movs	r0, #40	@ 0x28
 8002152:	f001 fe74 	bl	8003e3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002156:	2028      	movs	r0, #40	@ 0x28
 8002158:	f001 fe8b 	bl	8003e72 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 800215c:	bf00      	nop
 800215e:	3728      	adds	r7, #40	@ 0x28
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}
 8002164:	40021000 	.word	0x40021000
 8002168:	48000400 	.word	0x48000400
 800216c:	48000800 	.word	0x48000800

08002170 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8002170:	b580      	push	{r7, lr}
 8002172:	b082      	sub	sp, #8
 8002174:	af00      	add	r7, sp, #0
 8002176:	4603      	mov	r3, r0
 8002178:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_10) {
 800217a:	88fb      	ldrh	r3, [r7, #6]
 800217c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002180:	d10e      	bne.n	80021a0 <HAL_GPIO_EXTI_Callback+0x30>
		Encoder_setLimit(&encoder1, 180);
 8002182:	ed9f 0a09 	vldr	s0, [pc, #36]	@ 80021a8 <HAL_GPIO_EXTI_Callback+0x38>
 8002186:	4809      	ldr	r0, [pc, #36]	@ (80021ac <HAL_GPIO_EXTI_Callback+0x3c>)
 8002188:	f7fe fabf 	bl	800070a <Encoder_setLimit>
		Encoder_setLimit(&encoder2, 180);
 800218c:	ed9f 0a06 	vldr	s0, [pc, #24]	@ 80021a8 <HAL_GPIO_EXTI_Callback+0x38>
 8002190:	4807      	ldr	r0, [pc, #28]	@ (80021b0 <HAL_GPIO_EXTI_Callback+0x40>)
 8002192:	f7fe faba 	bl	800070a <Encoder_setLimit>
		check += 1;
 8002196:	4b07      	ldr	r3, [pc, #28]	@ (80021b4 <HAL_GPIO_EXTI_Callback+0x44>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	3301      	adds	r3, #1
 800219c:	4a05      	ldr	r2, [pc, #20]	@ (80021b4 <HAL_GPIO_EXTI_Callback+0x44>)
 800219e:	6013      	str	r3, [r2, #0]
	}
}
 80021a0:	bf00      	nop
 80021a2:	3708      	adds	r7, #8
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}
 80021a8:	43340000 	.word	0x43340000
 80021ac:	20000a24 	.word	0x20000a24
 80021b0:	20000a40 	.word	0x20000a40
 80021b4:	20000bd4 	.word	0x20000bd4

080021b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80021b8:	b480      	push	{r7}
 80021ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80021bc:	b672      	cpsid	i
}
 80021be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80021c0:	bf00      	nop
 80021c2:	e7fd      	b.n	80021c0 <Error_Handler+0x8>

080021c4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b082      	sub	sp, #8
 80021c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021ca:	4b0f      	ldr	r3, [pc, #60]	@ (8002208 <HAL_MspInit+0x44>)
 80021cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021ce:	4a0e      	ldr	r2, [pc, #56]	@ (8002208 <HAL_MspInit+0x44>)
 80021d0:	f043 0301 	orr.w	r3, r3, #1
 80021d4:	6613      	str	r3, [r2, #96]	@ 0x60
 80021d6:	4b0c      	ldr	r3, [pc, #48]	@ (8002208 <HAL_MspInit+0x44>)
 80021d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021da:	f003 0301 	and.w	r3, r3, #1
 80021de:	607b      	str	r3, [r7, #4]
 80021e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80021e2:	4b09      	ldr	r3, [pc, #36]	@ (8002208 <HAL_MspInit+0x44>)
 80021e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021e6:	4a08      	ldr	r2, [pc, #32]	@ (8002208 <HAL_MspInit+0x44>)
 80021e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80021ec:	6593      	str	r3, [r2, #88]	@ 0x58
 80021ee:	4b06      	ldr	r3, [pc, #24]	@ (8002208 <HAL_MspInit+0x44>)
 80021f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021f6:	603b      	str	r3, [r7, #0]
 80021f8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80021fa:	f002 fbe9 	bl	80049d0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021fe:	bf00      	nop
 8002200:	3708      	adds	r7, #8
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	40021000 	.word	0x40021000

0800220c <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b09e      	sub	sp, #120	@ 0x78
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002214:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002218:	2200      	movs	r2, #0
 800221a:	601a      	str	r2, [r3, #0]
 800221c:	605a      	str	r2, [r3, #4]
 800221e:	609a      	str	r2, [r3, #8]
 8002220:	60da      	str	r2, [r3, #12]
 8002222:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002224:	f107 0310 	add.w	r3, r7, #16
 8002228:	2254      	movs	r2, #84	@ 0x54
 800222a:	2100      	movs	r1, #0
 800222c:	4618      	mov	r0, r3
 800222e:	f008 fc41 	bl	800aab4 <memset>
  if(hadc->Instance==ADC1)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800223a:	d134      	bne.n	80022a6 <HAL_ADC_MspInit+0x9a>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800223c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002240:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8002242:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8002246:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002248:	f107 0310 	add.w	r3, r7, #16
 800224c:	4618      	mov	r0, r3
 800224e:	f003 f8fd 	bl	800544c <HAL_RCCEx_PeriphCLKConfig>
 8002252:	4603      	mov	r3, r0
 8002254:	2b00      	cmp	r3, #0
 8002256:	d001      	beq.n	800225c <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8002258:	f7ff ffae 	bl	80021b8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800225c:	4b14      	ldr	r3, [pc, #80]	@ (80022b0 <HAL_ADC_MspInit+0xa4>)
 800225e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002260:	4a13      	ldr	r2, [pc, #76]	@ (80022b0 <HAL_ADC_MspInit+0xa4>)
 8002262:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002266:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002268:	4b11      	ldr	r3, [pc, #68]	@ (80022b0 <HAL_ADC_MspInit+0xa4>)
 800226a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800226c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002270:	60fb      	str	r3, [r7, #12]
 8002272:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002274:	4b0e      	ldr	r3, [pc, #56]	@ (80022b0 <HAL_ADC_MspInit+0xa4>)
 8002276:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002278:	4a0d      	ldr	r2, [pc, #52]	@ (80022b0 <HAL_ADC_MspInit+0xa4>)
 800227a:	f043 0301 	orr.w	r3, r3, #1
 800227e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002280:	4b0b      	ldr	r3, [pc, #44]	@ (80022b0 <HAL_ADC_MspInit+0xa4>)
 8002282:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002284:	f003 0301 	and.w	r3, r3, #1
 8002288:	60bb      	str	r3, [r7, #8]
 800228a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = Current_Sensor_Pin|Current_SensorA1_Pin;
 800228c:	2303      	movs	r3, #3
 800228e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002290:	2303      	movs	r3, #3
 8002292:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002294:	2300      	movs	r3, #0
 8002296:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002298:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800229c:	4619      	mov	r1, r3
 800229e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80022a2:	f002 f93f 	bl	8004524 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 80022a6:	bf00      	nop
 80022a8:	3778      	adds	r7, #120	@ 0x78
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}
 80022ae:	bf00      	nop
 80022b0:	40021000 	.word	0x40021000

080022b4 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b08a      	sub	sp, #40	@ 0x28
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022bc:	f107 0314 	add.w	r3, r7, #20
 80022c0:	2200      	movs	r2, #0
 80022c2:	601a      	str	r2, [r3, #0]
 80022c4:	605a      	str	r2, [r3, #4]
 80022c6:	609a      	str	r2, [r3, #8]
 80022c8:	60da      	str	r2, [r3, #12]
 80022ca:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a25      	ldr	r2, [pc, #148]	@ (8002368 <HAL_SPI_MspInit+0xb4>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d144      	bne.n	8002360 <HAL_SPI_MspInit+0xac>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80022d6:	4b25      	ldr	r3, [pc, #148]	@ (800236c <HAL_SPI_MspInit+0xb8>)
 80022d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022da:	4a24      	ldr	r2, [pc, #144]	@ (800236c <HAL_SPI_MspInit+0xb8>)
 80022dc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80022e0:	6613      	str	r3, [r2, #96]	@ 0x60
 80022e2:	4b22      	ldr	r3, [pc, #136]	@ (800236c <HAL_SPI_MspInit+0xb8>)
 80022e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022e6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80022ea:	613b      	str	r3, [r7, #16]
 80022ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022ee:	4b1f      	ldr	r3, [pc, #124]	@ (800236c <HAL_SPI_MspInit+0xb8>)
 80022f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022f2:	4a1e      	ldr	r2, [pc, #120]	@ (800236c <HAL_SPI_MspInit+0xb8>)
 80022f4:	f043 0301 	orr.w	r3, r3, #1
 80022f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80022fa:	4b1c      	ldr	r3, [pc, #112]	@ (800236c <HAL_SPI_MspInit+0xb8>)
 80022fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022fe:	f003 0301 	and.w	r3, r3, #1
 8002302:	60fb      	str	r3, [r7, #12]
 8002304:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002306:	4b19      	ldr	r3, [pc, #100]	@ (800236c <HAL_SPI_MspInit+0xb8>)
 8002308:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800230a:	4a18      	ldr	r2, [pc, #96]	@ (800236c <HAL_SPI_MspInit+0xb8>)
 800230c:	f043 0302 	orr.w	r3, r3, #2
 8002310:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002312:	4b16      	ldr	r3, [pc, #88]	@ (800236c <HAL_SPI_MspInit+0xb8>)
 8002314:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002316:	f003 0302 	and.w	r3, r3, #2
 800231a:	60bb      	str	r3, [r7, #8]
 800231c:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800231e:	2320      	movs	r3, #32
 8002320:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002322:	2302      	movs	r3, #2
 8002324:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002326:	2300      	movs	r3, #0
 8002328:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800232a:	2300      	movs	r3, #0
 800232c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800232e:	2305      	movs	r3, #5
 8002330:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002332:	f107 0314 	add.w	r3, r7, #20
 8002336:	4619      	mov	r1, r3
 8002338:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800233c:	f002 f8f2 	bl	8004524 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002340:	2330      	movs	r3, #48	@ 0x30
 8002342:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002344:	2302      	movs	r3, #2
 8002346:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002348:	2300      	movs	r3, #0
 800234a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800234c:	2300      	movs	r3, #0
 800234e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002350:	2305      	movs	r3, #5
 8002352:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002354:	f107 0314 	add.w	r3, r7, #20
 8002358:	4619      	mov	r1, r3
 800235a:	4805      	ldr	r0, [pc, #20]	@ (8002370 <HAL_SPI_MspInit+0xbc>)
 800235c:	f002 f8e2 	bl	8004524 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8002360:	bf00      	nop
 8002362:	3728      	adds	r7, #40	@ 0x28
 8002364:	46bd      	mov	sp, r7
 8002366:	bd80      	pop	{r7, pc}
 8002368:	40013000 	.word	0x40013000
 800236c:	40021000 	.word	0x40021000
 8002370:	48000400 	.word	0x48000400

08002374 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b088      	sub	sp, #32
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a39      	ldr	r2, [pc, #228]	@ (8002468 <HAL_TIM_Base_MspInit+0xf4>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d11c      	bne.n	80023c0 <HAL_TIM_Base_MspInit+0x4c>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002386:	4b39      	ldr	r3, [pc, #228]	@ (800246c <HAL_TIM_Base_MspInit+0xf8>)
 8002388:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800238a:	4a38      	ldr	r2, [pc, #224]	@ (800246c <HAL_TIM_Base_MspInit+0xf8>)
 800238c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002390:	6613      	str	r3, [r2, #96]	@ 0x60
 8002392:	4b36      	ldr	r3, [pc, #216]	@ (800246c <HAL_TIM_Base_MspInit+0xf8>)
 8002394:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002396:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800239a:	61fb      	str	r3, [r7, #28]
 800239c:	69fb      	ldr	r3, [r7, #28]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 800239e:	2200      	movs	r2, #0
 80023a0:	2100      	movs	r1, #0
 80023a2:	2018      	movs	r0, #24
 80023a4:	f001 fd4b 	bl	8003e3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 80023a8:	2018      	movs	r0, #24
 80023aa:	f001 fd62 	bl	8003e72 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80023ae:	2200      	movs	r2, #0
 80023b0:	2100      	movs	r1, #0
 80023b2:	2019      	movs	r0, #25
 80023b4:	f001 fd43 	bl	8003e3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80023b8:	2019      	movs	r0, #25
 80023ba:	f001 fd5a 	bl	8003e72 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM20_MspInit 1 */

    /* USER CODE END TIM20_MspInit 1 */
  }

}
 80023be:	e04e      	b.n	800245e <HAL_TIM_Base_MspInit+0xea>
  else if(htim_base->Instance==TIM2)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80023c8:	d10c      	bne.n	80023e4 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80023ca:	4b28      	ldr	r3, [pc, #160]	@ (800246c <HAL_TIM_Base_MspInit+0xf8>)
 80023cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023ce:	4a27      	ldr	r2, [pc, #156]	@ (800246c <HAL_TIM_Base_MspInit+0xf8>)
 80023d0:	f043 0301 	orr.w	r3, r3, #1
 80023d4:	6593      	str	r3, [r2, #88]	@ 0x58
 80023d6:	4b25      	ldr	r3, [pc, #148]	@ (800246c <HAL_TIM_Base_MspInit+0xf8>)
 80023d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023da:	f003 0301 	and.w	r3, r3, #1
 80023de:	61bb      	str	r3, [r7, #24]
 80023e0:	69bb      	ldr	r3, [r7, #24]
}
 80023e2:	e03c      	b.n	800245e <HAL_TIM_Base_MspInit+0xea>
  else if(htim_base->Instance==TIM8)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a21      	ldr	r2, [pc, #132]	@ (8002470 <HAL_TIM_Base_MspInit+0xfc>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d10c      	bne.n	8002408 <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80023ee:	4b1f      	ldr	r3, [pc, #124]	@ (800246c <HAL_TIM_Base_MspInit+0xf8>)
 80023f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023f2:	4a1e      	ldr	r2, [pc, #120]	@ (800246c <HAL_TIM_Base_MspInit+0xf8>)
 80023f4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80023f8:	6613      	str	r3, [r2, #96]	@ 0x60
 80023fa:	4b1c      	ldr	r3, [pc, #112]	@ (800246c <HAL_TIM_Base_MspInit+0xf8>)
 80023fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023fe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002402:	617b      	str	r3, [r7, #20]
 8002404:	697b      	ldr	r3, [r7, #20]
}
 8002406:	e02a      	b.n	800245e <HAL_TIM_Base_MspInit+0xea>
  else if(htim_base->Instance==TIM16)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a19      	ldr	r2, [pc, #100]	@ (8002474 <HAL_TIM_Base_MspInit+0x100>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d114      	bne.n	800243c <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8002412:	4b16      	ldr	r3, [pc, #88]	@ (800246c <HAL_TIM_Base_MspInit+0xf8>)
 8002414:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002416:	4a15      	ldr	r2, [pc, #84]	@ (800246c <HAL_TIM_Base_MspInit+0xf8>)
 8002418:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800241c:	6613      	str	r3, [r2, #96]	@ 0x60
 800241e:	4b13      	ldr	r3, [pc, #76]	@ (800246c <HAL_TIM_Base_MspInit+0xf8>)
 8002420:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002422:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002426:	613b      	str	r3, [r7, #16]
 8002428:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800242a:	2200      	movs	r2, #0
 800242c:	2100      	movs	r1, #0
 800242e:	2019      	movs	r0, #25
 8002430:	f001 fd05 	bl	8003e3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8002434:	2019      	movs	r0, #25
 8002436:	f001 fd1c 	bl	8003e72 <HAL_NVIC_EnableIRQ>
}
 800243a:	e010      	b.n	800245e <HAL_TIM_Base_MspInit+0xea>
  else if(htim_base->Instance==TIM20)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a0d      	ldr	r2, [pc, #52]	@ (8002478 <HAL_TIM_Base_MspInit+0x104>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d10b      	bne.n	800245e <HAL_TIM_Base_MspInit+0xea>
    __HAL_RCC_TIM20_CLK_ENABLE();
 8002446:	4b09      	ldr	r3, [pc, #36]	@ (800246c <HAL_TIM_Base_MspInit+0xf8>)
 8002448:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800244a:	4a08      	ldr	r2, [pc, #32]	@ (800246c <HAL_TIM_Base_MspInit+0xf8>)
 800244c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002450:	6613      	str	r3, [r2, #96]	@ 0x60
 8002452:	4b06      	ldr	r3, [pc, #24]	@ (800246c <HAL_TIM_Base_MspInit+0xf8>)
 8002454:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002456:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800245a:	60fb      	str	r3, [r7, #12]
 800245c:	68fb      	ldr	r3, [r7, #12]
}
 800245e:	bf00      	nop
 8002460:	3720      	adds	r7, #32
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}
 8002466:	bf00      	nop
 8002468:	40012c00 	.word	0x40012c00
 800246c:	40021000 	.word	0x40021000
 8002470:	40013400 	.word	0x40013400
 8002474:	40014400 	.word	0x40014400
 8002478:	40015000 	.word	0x40015000

0800247c <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b08e      	sub	sp, #56	@ 0x38
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002484:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002488:	2200      	movs	r2, #0
 800248a:	601a      	str	r2, [r3, #0]
 800248c:	605a      	str	r2, [r3, #4]
 800248e:	609a      	str	r2, [r3, #8]
 8002490:	60da      	str	r2, [r3, #12]
 8002492:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a4b      	ldr	r2, [pc, #300]	@ (80025c8 <HAL_TIM_Encoder_MspInit+0x14c>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d145      	bne.n	800252a <HAL_TIM_Encoder_MspInit+0xae>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800249e:	4b4b      	ldr	r3, [pc, #300]	@ (80025cc <HAL_TIM_Encoder_MspInit+0x150>)
 80024a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024a2:	4a4a      	ldr	r2, [pc, #296]	@ (80025cc <HAL_TIM_Encoder_MspInit+0x150>)
 80024a4:	f043 0302 	orr.w	r3, r3, #2
 80024a8:	6593      	str	r3, [r2, #88]	@ 0x58
 80024aa:	4b48      	ldr	r3, [pc, #288]	@ (80025cc <HAL_TIM_Encoder_MspInit+0x150>)
 80024ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024ae:	f003 0302 	and.w	r3, r3, #2
 80024b2:	623b      	str	r3, [r7, #32]
 80024b4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024b6:	4b45      	ldr	r3, [pc, #276]	@ (80025cc <HAL_TIM_Encoder_MspInit+0x150>)
 80024b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024ba:	4a44      	ldr	r2, [pc, #272]	@ (80025cc <HAL_TIM_Encoder_MspInit+0x150>)
 80024bc:	f043 0301 	orr.w	r3, r3, #1
 80024c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80024c2:	4b42      	ldr	r3, [pc, #264]	@ (80025cc <HAL_TIM_Encoder_MspInit+0x150>)
 80024c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024c6:	f003 0301 	and.w	r3, r3, #1
 80024ca:	61fb      	str	r3, [r7, #28]
 80024cc:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80024ce:	4b3f      	ldr	r3, [pc, #252]	@ (80025cc <HAL_TIM_Encoder_MspInit+0x150>)
 80024d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024d2:	4a3e      	ldr	r2, [pc, #248]	@ (80025cc <HAL_TIM_Encoder_MspInit+0x150>)
 80024d4:	f043 0304 	orr.w	r3, r3, #4
 80024d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80024da:	4b3c      	ldr	r3, [pc, #240]	@ (80025cc <HAL_TIM_Encoder_MspInit+0x150>)
 80024dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024de:	f003 0304 	and.w	r3, r3, #4
 80024e2:	61bb      	str	r3, [r7, #24]
 80024e4:	69bb      	ldr	r3, [r7, #24]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = Encoder_1_Pin;
 80024e6:	2340      	movs	r3, #64	@ 0x40
 80024e8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024ea:	2302      	movs	r3, #2
 80024ec:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ee:	2300      	movs	r3, #0
 80024f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024f2:	2300      	movs	r3, #0
 80024f4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80024f6:	2302      	movs	r3, #2
 80024f8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(Encoder_1_GPIO_Port, &GPIO_InitStruct);
 80024fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80024fe:	4619      	mov	r1, r3
 8002500:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002504:	f002 f80e 	bl	8004524 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Encoder_1C7_Pin;
 8002508:	2380      	movs	r3, #128	@ 0x80
 800250a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800250c:	2302      	movs	r3, #2
 800250e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002510:	2300      	movs	r3, #0
 8002512:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002514:	2300      	movs	r3, #0
 8002516:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002518:	2302      	movs	r3, #2
 800251a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(Encoder_1C7_GPIO_Port, &GPIO_InitStruct);
 800251c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002520:	4619      	mov	r1, r3
 8002522:	482b      	ldr	r0, [pc, #172]	@ (80025d0 <HAL_TIM_Encoder_MspInit+0x154>)
 8002524:	f001 fffe 	bl	8004524 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002528:	e04a      	b.n	80025c0 <HAL_TIM_Encoder_MspInit+0x144>
  else if(htim_encoder->Instance==TIM4)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4a29      	ldr	r2, [pc, #164]	@ (80025d4 <HAL_TIM_Encoder_MspInit+0x158>)
 8002530:	4293      	cmp	r3, r2
 8002532:	d145      	bne.n	80025c0 <HAL_TIM_Encoder_MspInit+0x144>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002534:	4b25      	ldr	r3, [pc, #148]	@ (80025cc <HAL_TIM_Encoder_MspInit+0x150>)
 8002536:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002538:	4a24      	ldr	r2, [pc, #144]	@ (80025cc <HAL_TIM_Encoder_MspInit+0x150>)
 800253a:	f043 0304 	orr.w	r3, r3, #4
 800253e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002540:	4b22      	ldr	r3, [pc, #136]	@ (80025cc <HAL_TIM_Encoder_MspInit+0x150>)
 8002542:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002544:	f003 0304 	and.w	r3, r3, #4
 8002548:	617b      	str	r3, [r7, #20]
 800254a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800254c:	4b1f      	ldr	r3, [pc, #124]	@ (80025cc <HAL_TIM_Encoder_MspInit+0x150>)
 800254e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002550:	4a1e      	ldr	r2, [pc, #120]	@ (80025cc <HAL_TIM_Encoder_MspInit+0x150>)
 8002552:	f043 0301 	orr.w	r3, r3, #1
 8002556:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002558:	4b1c      	ldr	r3, [pc, #112]	@ (80025cc <HAL_TIM_Encoder_MspInit+0x150>)
 800255a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800255c:	f003 0301 	and.w	r3, r3, #1
 8002560:	613b      	str	r3, [r7, #16]
 8002562:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002564:	4b19      	ldr	r3, [pc, #100]	@ (80025cc <HAL_TIM_Encoder_MspInit+0x150>)
 8002566:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002568:	4a18      	ldr	r2, [pc, #96]	@ (80025cc <HAL_TIM_Encoder_MspInit+0x150>)
 800256a:	f043 0302 	orr.w	r3, r3, #2
 800256e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002570:	4b16      	ldr	r3, [pc, #88]	@ (80025cc <HAL_TIM_Encoder_MspInit+0x150>)
 8002572:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002574:	f003 0302 	and.w	r3, r3, #2
 8002578:	60fb      	str	r3, [r7, #12]
 800257a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Encoder_2_Pin;
 800257c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002580:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002582:	2302      	movs	r3, #2
 8002584:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002586:	2300      	movs	r3, #0
 8002588:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800258a:	2300      	movs	r3, #0
 800258c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 800258e:	230a      	movs	r3, #10
 8002590:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(Encoder_2_GPIO_Port, &GPIO_InitStruct);
 8002592:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002596:	4619      	mov	r1, r3
 8002598:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800259c:	f001 ffc2 	bl	8004524 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = Encoder_2B7_Pin;
 80025a0:	2380      	movs	r3, #128	@ 0x80
 80025a2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025a4:	2302      	movs	r3, #2
 80025a6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025a8:	2300      	movs	r3, #0
 80025aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025ac:	2300      	movs	r3, #0
 80025ae:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80025b0:	2302      	movs	r3, #2
 80025b2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(Encoder_2B7_GPIO_Port, &GPIO_InitStruct);
 80025b4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80025b8:	4619      	mov	r1, r3
 80025ba:	4807      	ldr	r0, [pc, #28]	@ (80025d8 <HAL_TIM_Encoder_MspInit+0x15c>)
 80025bc:	f001 ffb2 	bl	8004524 <HAL_GPIO_Init>
}
 80025c0:	bf00      	nop
 80025c2:	3738      	adds	r7, #56	@ 0x38
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}
 80025c8:	40000400 	.word	0x40000400
 80025cc:	40021000 	.word	0x40021000
 80025d0:	48000800 	.word	0x48000800
 80025d4:	40000800 	.word	0x40000800
 80025d8:	48000400 	.word	0x48000400

080025dc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b08a      	sub	sp, #40	@ 0x28
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025e4:	f107 0314 	add.w	r3, r7, #20
 80025e8:	2200      	movs	r2, #0
 80025ea:	601a      	str	r2, [r3, #0]
 80025ec:	605a      	str	r2, [r3, #4]
 80025ee:	609a      	str	r2, [r3, #8]
 80025f0:	60da      	str	r2, [r3, #12]
 80025f2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM8)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a31      	ldr	r2, [pc, #196]	@ (80026c0 <HAL_TIM_MspPostInit+0xe4>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d11d      	bne.n	800263a <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM8_MspPostInit 0 */

    /* USER CODE END TIM8_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80025fe:	4b31      	ldr	r3, [pc, #196]	@ (80026c4 <HAL_TIM_MspPostInit+0xe8>)
 8002600:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002602:	4a30      	ldr	r2, [pc, #192]	@ (80026c4 <HAL_TIM_MspPostInit+0xe8>)
 8002604:	f043 0304 	orr.w	r3, r3, #4
 8002608:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800260a:	4b2e      	ldr	r3, [pc, #184]	@ (80026c4 <HAL_TIM_MspPostInit+0xe8>)
 800260c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800260e:	f003 0304 	and.w	r3, r3, #4
 8002612:	613b      	str	r3, [r7, #16]
 8002614:	693b      	ldr	r3, [r7, #16]
    /**TIM8 GPIO Configuration
    PC9     ------> TIM8_CH4
    */
    GPIO_InitStruct.Pin = PWM_Servo_Pin;
 8002616:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800261a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800261c:	2302      	movs	r3, #2
 800261e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002620:	2300      	movs	r3, #0
 8002622:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002624:	2300      	movs	r3, #0
 8002626:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8002628:	2304      	movs	r3, #4
 800262a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(PWM_Servo_GPIO_Port, &GPIO_InitStruct);
 800262c:	f107 0314 	add.w	r3, r7, #20
 8002630:	4619      	mov	r1, r3
 8002632:	4825      	ldr	r0, [pc, #148]	@ (80026c8 <HAL_TIM_MspPostInit+0xec>)
 8002634:	f001 ff76 	bl	8004524 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM20_MspPostInit 1 */

    /* USER CODE END TIM20_MspPostInit 1 */
  }

}
 8002638:	e03d      	b.n	80026b6 <HAL_TIM_MspPostInit+0xda>
  else if(htim->Instance==TIM20)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4a23      	ldr	r2, [pc, #140]	@ (80026cc <HAL_TIM_MspPostInit+0xf0>)
 8002640:	4293      	cmp	r3, r2
 8002642:	d138      	bne.n	80026b6 <HAL_TIM_MspPostInit+0xda>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002644:	4b1f      	ldr	r3, [pc, #124]	@ (80026c4 <HAL_TIM_MspPostInit+0xe8>)
 8002646:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002648:	4a1e      	ldr	r2, [pc, #120]	@ (80026c4 <HAL_TIM_MspPostInit+0xe8>)
 800264a:	f043 0302 	orr.w	r3, r3, #2
 800264e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002650:	4b1c      	ldr	r3, [pc, #112]	@ (80026c4 <HAL_TIM_MspPostInit+0xe8>)
 8002652:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002654:	f003 0302 	and.w	r3, r3, #2
 8002658:	60fb      	str	r3, [r7, #12]
 800265a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800265c:	4b19      	ldr	r3, [pc, #100]	@ (80026c4 <HAL_TIM_MspPostInit+0xe8>)
 800265e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002660:	4a18      	ldr	r2, [pc, #96]	@ (80026c4 <HAL_TIM_MspPostInit+0xe8>)
 8002662:	f043 0304 	orr.w	r3, r3, #4
 8002666:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002668:	4b16      	ldr	r3, [pc, #88]	@ (80026c4 <HAL_TIM_MspPostInit+0xe8>)
 800266a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800266c:	f003 0304 	and.w	r3, r3, #4
 8002670:	60bb      	str	r3, [r7, #8]
 8002672:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWM_MD20A_24V_Pin;
 8002674:	2304      	movs	r3, #4
 8002676:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002678:	2302      	movs	r3, #2
 800267a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800267c:	2300      	movs	r3, #0
 800267e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002680:	2300      	movs	r3, #0
 8002682:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM20;
 8002684:	2303      	movs	r3, #3
 8002686:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(PWM_MD20A_24V_GPIO_Port, &GPIO_InitStruct);
 8002688:	f107 0314 	add.w	r3, r7, #20
 800268c:	4619      	mov	r1, r3
 800268e:	4810      	ldr	r0, [pc, #64]	@ (80026d0 <HAL_TIM_MspPostInit+0xf4>)
 8002690:	f001 ff48 	bl	8004524 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = PWM_MD20A_18V_Pin;
 8002694:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002698:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800269a:	2302      	movs	r3, #2
 800269c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800269e:	2300      	movs	r3, #0
 80026a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026a2:	2300      	movs	r3, #0
 80026a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM20;
 80026a6:	2306      	movs	r3, #6
 80026a8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(PWM_MD20A_18V_GPIO_Port, &GPIO_InitStruct);
 80026aa:	f107 0314 	add.w	r3, r7, #20
 80026ae:	4619      	mov	r1, r3
 80026b0:	4805      	ldr	r0, [pc, #20]	@ (80026c8 <HAL_TIM_MspPostInit+0xec>)
 80026b2:	f001 ff37 	bl	8004524 <HAL_GPIO_Init>
}
 80026b6:	bf00      	nop
 80026b8:	3728      	adds	r7, #40	@ 0x28
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}
 80026be:	bf00      	nop
 80026c0:	40013400 	.word	0x40013400
 80026c4:	40021000 	.word	0x40021000
 80026c8:	48000800 	.word	0x48000800
 80026cc:	40015000 	.word	0x40015000
 80026d0:	48000400 	.word	0x48000400

080026d4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b09e      	sub	sp, #120	@ 0x78
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026dc:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80026e0:	2200      	movs	r2, #0
 80026e2:	601a      	str	r2, [r3, #0]
 80026e4:	605a      	str	r2, [r3, #4]
 80026e6:	609a      	str	r2, [r3, #8]
 80026e8:	60da      	str	r2, [r3, #12]
 80026ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80026ec:	f107 0310 	add.w	r3, r7, #16
 80026f0:	2254      	movs	r2, #84	@ 0x54
 80026f2:	2100      	movs	r1, #0
 80026f4:	4618      	mov	r0, r3
 80026f6:	f008 f9dd 	bl	800aab4 <memset>
  if(huart->Instance==USART2)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a37      	ldr	r2, [pc, #220]	@ (80027dc <HAL_UART_MspInit+0x108>)
 8002700:	4293      	cmp	r3, r2
 8002702:	d167      	bne.n	80027d4 <HAL_UART_MspInit+0x100>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002704:	2302      	movs	r3, #2
 8002706:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002708:	2300      	movs	r3, #0
 800270a:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800270c:	f107 0310 	add.w	r3, r7, #16
 8002710:	4618      	mov	r0, r3
 8002712:	f002 fe9b 	bl	800544c <HAL_RCCEx_PeriphCLKConfig>
 8002716:	4603      	mov	r3, r0
 8002718:	2b00      	cmp	r3, #0
 800271a:	d001      	beq.n	8002720 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800271c:	f7ff fd4c 	bl	80021b8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002720:	4b2f      	ldr	r3, [pc, #188]	@ (80027e0 <HAL_UART_MspInit+0x10c>)
 8002722:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002724:	4a2e      	ldr	r2, [pc, #184]	@ (80027e0 <HAL_UART_MspInit+0x10c>)
 8002726:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800272a:	6593      	str	r3, [r2, #88]	@ 0x58
 800272c:	4b2c      	ldr	r3, [pc, #176]	@ (80027e0 <HAL_UART_MspInit+0x10c>)
 800272e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002730:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002734:	60fb      	str	r3, [r7, #12]
 8002736:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002738:	4b29      	ldr	r3, [pc, #164]	@ (80027e0 <HAL_UART_MspInit+0x10c>)
 800273a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800273c:	4a28      	ldr	r2, [pc, #160]	@ (80027e0 <HAL_UART_MspInit+0x10c>)
 800273e:	f043 0301 	orr.w	r3, r3, #1
 8002742:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002744:	4b26      	ldr	r3, [pc, #152]	@ (80027e0 <HAL_UART_MspInit+0x10c>)
 8002746:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002748:	f003 0301 	and.w	r3, r3, #1
 800274c:	60bb      	str	r3, [r7, #8]
 800274e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002750:	230c      	movs	r3, #12
 8002752:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002754:	2302      	movs	r3, #2
 8002756:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002758:	2300      	movs	r3, #0
 800275a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800275c:	2300      	movs	r3, #0
 800275e:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002760:	2307      	movs	r3, #7
 8002762:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002764:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002768:	4619      	mov	r1, r3
 800276a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800276e:	f001 fed9 	bl	8004524 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel1;
 8002772:	4b1c      	ldr	r3, [pc, #112]	@ (80027e4 <HAL_UART_MspInit+0x110>)
 8002774:	4a1c      	ldr	r2, [pc, #112]	@ (80027e8 <HAL_UART_MspInit+0x114>)
 8002776:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8002778:	4b1a      	ldr	r3, [pc, #104]	@ (80027e4 <HAL_UART_MspInit+0x110>)
 800277a:	221b      	movs	r2, #27
 800277c:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800277e:	4b19      	ldr	r3, [pc, #100]	@ (80027e4 <HAL_UART_MspInit+0x110>)
 8002780:	2210      	movs	r2, #16
 8002782:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002784:	4b17      	ldr	r3, [pc, #92]	@ (80027e4 <HAL_UART_MspInit+0x110>)
 8002786:	2200      	movs	r2, #0
 8002788:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800278a:	4b16      	ldr	r3, [pc, #88]	@ (80027e4 <HAL_UART_MspInit+0x110>)
 800278c:	2280      	movs	r2, #128	@ 0x80
 800278e:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002790:	4b14      	ldr	r3, [pc, #80]	@ (80027e4 <HAL_UART_MspInit+0x110>)
 8002792:	2200      	movs	r2, #0
 8002794:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002796:	4b13      	ldr	r3, [pc, #76]	@ (80027e4 <HAL_UART_MspInit+0x110>)
 8002798:	2200      	movs	r2, #0
 800279a:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800279c:	4b11      	ldr	r3, [pc, #68]	@ (80027e4 <HAL_UART_MspInit+0x110>)
 800279e:	2200      	movs	r2, #0
 80027a0:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80027a2:	4b10      	ldr	r3, [pc, #64]	@ (80027e4 <HAL_UART_MspInit+0x110>)
 80027a4:	2200      	movs	r2, #0
 80027a6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80027a8:	480e      	ldr	r0, [pc, #56]	@ (80027e4 <HAL_UART_MspInit+0x110>)
 80027aa:	f001 fb7d 	bl	8003ea8 <HAL_DMA_Init>
 80027ae:	4603      	mov	r3, r0
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d001      	beq.n	80027b8 <HAL_UART_MspInit+0xe4>
    {
      Error_Handler();
 80027b4:	f7ff fd00 	bl	80021b8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	4a0a      	ldr	r2, [pc, #40]	@ (80027e4 <HAL_UART_MspInit+0x110>)
 80027bc:	67da      	str	r2, [r3, #124]	@ 0x7c
 80027be:	4a09      	ldr	r2, [pc, #36]	@ (80027e4 <HAL_UART_MspInit+0x110>)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80027c4:	2200      	movs	r2, #0
 80027c6:	2100      	movs	r1, #0
 80027c8:	2026      	movs	r0, #38	@ 0x26
 80027ca:	f001 fb38 	bl	8003e3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80027ce:	2026      	movs	r0, #38	@ 0x26
 80027d0:	f001 fb4f 	bl	8003e72 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 80027d4:	bf00      	nop
 80027d6:	3778      	adds	r7, #120	@ 0x78
 80027d8:	46bd      	mov	sp, r7
 80027da:	bd80      	pop	{r7, pc}
 80027dc:	40004400 	.word	0x40004400
 80027e0:	40021000 	.word	0x40021000
 80027e4:	200009c4 	.word	0x200009c4
 80027e8:	40020008 	.word	0x40020008

080027ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80027ec:	b480      	push	{r7}
 80027ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80027f0:	bf00      	nop
 80027f2:	e7fd      	b.n	80027f0 <NMI_Handler+0x4>

080027f4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80027f4:	b480      	push	{r7}
 80027f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80027f8:	bf00      	nop
 80027fa:	e7fd      	b.n	80027f8 <HardFault_Handler+0x4>

080027fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80027fc:	b480      	push	{r7}
 80027fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002800:	bf00      	nop
 8002802:	e7fd      	b.n	8002800 <MemManage_Handler+0x4>

08002804 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002804:	b480      	push	{r7}
 8002806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002808:	bf00      	nop
 800280a:	e7fd      	b.n	8002808 <BusFault_Handler+0x4>

0800280c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800280c:	b480      	push	{r7}
 800280e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002810:	bf00      	nop
 8002812:	e7fd      	b.n	8002810 <UsageFault_Handler+0x4>

08002814 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002814:	b480      	push	{r7}
 8002816:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002818:	bf00      	nop
 800281a:	46bd      	mov	sp, r7
 800281c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002820:	4770      	bx	lr

08002822 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002822:	b480      	push	{r7}
 8002824:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002826:	bf00      	nop
 8002828:	46bd      	mov	sp, r7
 800282a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282e:	4770      	bx	lr

08002830 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002830:	b480      	push	{r7}
 8002832:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002834:	bf00      	nop
 8002836:	46bd      	mov	sp, r7
 8002838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283c:	4770      	bx	lr

0800283e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800283e:	b580      	push	{r7, lr}
 8002840:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002842:	f000 f8e1 	bl	8002a08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002846:	bf00      	nop
 8002848:	bd80      	pop	{r7, pc}
	...

0800284c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002850:	4802      	ldr	r0, [pc, #8]	@ (800285c <DMA1_Channel1_IRQHandler+0x10>)
 8002852:	f001 fd0c 	bl	800426e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002856:	bf00      	nop
 8002858:	bd80      	pop	{r7, pc}
 800285a:	bf00      	nop
 800285c:	200009c4 	.word	0x200009c4

08002860 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Limit_Switch_pen_1_Pin);
 8002864:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8002868:	f001 fff6 	bl	8004858 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800286c:	bf00      	nop
 800286e:	bd80      	pop	{r7, pc}

08002870 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002874:	4802      	ldr	r0, [pc, #8]	@ (8002880 <TIM1_BRK_TIM15_IRQHandler+0x10>)
 8002876:	f004 f855 	bl	8006924 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 800287a:	bf00      	nop
 800287c:	bd80      	pop	{r7, pc}
 800287e:	bf00      	nop
 8002880:	20000364 	.word	0x20000364

08002884 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002888:	4803      	ldr	r0, [pc, #12]	@ (8002898 <TIM1_UP_TIM16_IRQHandler+0x14>)
 800288a:	f004 f84b 	bl	8006924 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 800288e:	4803      	ldr	r0, [pc, #12]	@ (800289c <TIM1_UP_TIM16_IRQHandler+0x18>)
 8002890:	f004 f848 	bl	8006924 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8002894:	bf00      	nop
 8002896:	bd80      	pop	{r7, pc}
 8002898:	20000364 	.word	0x20000364
 800289c:	20000760 	.word	0x20000760

080028a0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80028a4:	4802      	ldr	r0, [pc, #8]	@ (80028b0 <USART2_IRQHandler+0x10>)
 80028a6:	f005 ff4b 	bl	8008740 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80028aa:	bf00      	nop
 80028ac:	bd80      	pop	{r7, pc}
 80028ae:	bf00      	nop
 80028b0:	200008f8 	.word	0x200008f8

080028b4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Limit_Switch_pen_2_Pin);
 80028b8:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80028bc:	f001 ffcc 	bl	8004858 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Emergency_Pin);
 80028c0:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80028c4:	f001 ffc8 	bl	8004858 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Proximity_sensor_Pin);
 80028c8:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80028cc:	f001 ffc4 	bl	8004858 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Proximity_Sensor_Pin);
 80028d0:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80028d4:	f001 ffc0 	bl	8004858 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Limit_Switch_Prismatic1_Pin);
 80028d8:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80028dc:	f001 ffbc 	bl	8004858 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Limit_Switch_Prismatic2_Pin);
 80028e0:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80028e4:	f001 ffb8 	bl	8004858 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80028e8:	bf00      	nop
 80028ea:	bd80      	pop	{r7, pc}

080028ec <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80028ec:	b480      	push	{r7}
 80028ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80028f0:	4b06      	ldr	r3, [pc, #24]	@ (800290c <SystemInit+0x20>)
 80028f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028f6:	4a05      	ldr	r2, [pc, #20]	@ (800290c <SystemInit+0x20>)
 80028f8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80028fc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002900:	bf00      	nop
 8002902:	46bd      	mov	sp, r7
 8002904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002908:	4770      	bx	lr
 800290a:	bf00      	nop
 800290c:	e000ed00 	.word	0xe000ed00

08002910 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002910:	480d      	ldr	r0, [pc, #52]	@ (8002948 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002912:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002914:	f7ff ffea 	bl	80028ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002918:	480c      	ldr	r0, [pc, #48]	@ (800294c <LoopForever+0x6>)
  ldr r1, =_edata
 800291a:	490d      	ldr	r1, [pc, #52]	@ (8002950 <LoopForever+0xa>)
  ldr r2, =_sidata
 800291c:	4a0d      	ldr	r2, [pc, #52]	@ (8002954 <LoopForever+0xe>)
  movs r3, #0
 800291e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002920:	e002      	b.n	8002928 <LoopCopyDataInit>

08002922 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002922:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002924:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002926:	3304      	adds	r3, #4

08002928 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002928:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800292a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800292c:	d3f9      	bcc.n	8002922 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800292e:	4a0a      	ldr	r2, [pc, #40]	@ (8002958 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002930:	4c0a      	ldr	r4, [pc, #40]	@ (800295c <LoopForever+0x16>)
  movs r3, #0
 8002932:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002934:	e001      	b.n	800293a <LoopFillZerobss>

08002936 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002936:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002938:	3204      	adds	r2, #4

0800293a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800293a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800293c:	d3fb      	bcc.n	8002936 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800293e:	f008 f8c7 	bl	800aad0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002942:	f7fe fcfd 	bl	8001340 <main>

08002946 <LoopForever>:

LoopForever:
    b LoopForever
 8002946:	e7fe      	b.n	8002946 <LoopForever>
  ldr   r0, =_estack
 8002948:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800294c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002950:	2000026c 	.word	0x2000026c
  ldr r2, =_sidata
 8002954:	0800abe0 	.word	0x0800abe0
  ldr r2, =_sbss
 8002958:	2000026c 	.word	0x2000026c
  ldr r4, =_ebss
 800295c:	2000139c 	.word	0x2000139c

08002960 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002960:	e7fe      	b.n	8002960 <ADC1_2_IRQHandler>

08002962 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002962:	b580      	push	{r7, lr}
 8002964:	b082      	sub	sp, #8
 8002966:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002968:	2300      	movs	r3, #0
 800296a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800296c:	2003      	movs	r0, #3
 800296e:	f001 fa5b 	bl	8003e28 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002972:	2000      	movs	r0, #0
 8002974:	f000 f80e 	bl	8002994 <HAL_InitTick>
 8002978:	4603      	mov	r3, r0
 800297a:	2b00      	cmp	r3, #0
 800297c:	d002      	beq.n	8002984 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800297e:	2301      	movs	r3, #1
 8002980:	71fb      	strb	r3, [r7, #7]
 8002982:	e001      	b.n	8002988 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002984:	f7ff fc1e 	bl	80021c4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002988:	79fb      	ldrb	r3, [r7, #7]

}
 800298a:	4618      	mov	r0, r3
 800298c:	3708      	adds	r7, #8
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}
	...

08002994 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b084      	sub	sp, #16
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800299c:	2300      	movs	r3, #0
 800299e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80029a0:	4b16      	ldr	r3, [pc, #88]	@ (80029fc <HAL_InitTick+0x68>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d022      	beq.n	80029ee <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80029a8:	4b15      	ldr	r3, [pc, #84]	@ (8002a00 <HAL_InitTick+0x6c>)
 80029aa:	681a      	ldr	r2, [r3, #0]
 80029ac:	4b13      	ldr	r3, [pc, #76]	@ (80029fc <HAL_InitTick+0x68>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80029b4:	fbb1 f3f3 	udiv	r3, r1, r3
 80029b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80029bc:	4618      	mov	r0, r3
 80029be:	f001 fa66 	bl	8003e8e <HAL_SYSTICK_Config>
 80029c2:	4603      	mov	r3, r0
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d10f      	bne.n	80029e8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2b0f      	cmp	r3, #15
 80029cc:	d809      	bhi.n	80029e2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80029ce:	2200      	movs	r2, #0
 80029d0:	6879      	ldr	r1, [r7, #4]
 80029d2:	f04f 30ff 	mov.w	r0, #4294967295
 80029d6:	f001 fa32 	bl	8003e3e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80029da:	4a0a      	ldr	r2, [pc, #40]	@ (8002a04 <HAL_InitTick+0x70>)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6013      	str	r3, [r2, #0]
 80029e0:	e007      	b.n	80029f2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80029e2:	2301      	movs	r3, #1
 80029e4:	73fb      	strb	r3, [r7, #15]
 80029e6:	e004      	b.n	80029f2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80029e8:	2301      	movs	r3, #1
 80029ea:	73fb      	strb	r3, [r7, #15]
 80029ec:	e001      	b.n	80029f2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80029f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	3710      	adds	r7, #16
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}
 80029fc:	20000218 	.word	0x20000218
 8002a00:	20000210 	.word	0x20000210
 8002a04:	20000214 	.word	0x20000214

08002a08 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a0c:	4b05      	ldr	r3, [pc, #20]	@ (8002a24 <HAL_IncTick+0x1c>)
 8002a0e:	681a      	ldr	r2, [r3, #0]
 8002a10:	4b05      	ldr	r3, [pc, #20]	@ (8002a28 <HAL_IncTick+0x20>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4413      	add	r3, r2
 8002a16:	4a03      	ldr	r2, [pc, #12]	@ (8002a24 <HAL_IncTick+0x1c>)
 8002a18:	6013      	str	r3, [r2, #0]
}
 8002a1a:	bf00      	nop
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a22:	4770      	bx	lr
 8002a24:	20001260 	.word	0x20001260
 8002a28:	20000218 	.word	0x20000218

08002a2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	af00      	add	r7, sp, #0
  return uwTick;
 8002a30:	4b03      	ldr	r3, [pc, #12]	@ (8002a40 <HAL_GetTick+0x14>)
 8002a32:	681b      	ldr	r3, [r3, #0]
}
 8002a34:	4618      	mov	r0, r3
 8002a36:	46bd      	mov	sp, r7
 8002a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3c:	4770      	bx	lr
 8002a3e:	bf00      	nop
 8002a40:	20001260 	.word	0x20001260

08002a44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b084      	sub	sp, #16
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a4c:	f7ff ffee 	bl	8002a2c <HAL_GetTick>
 8002a50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a5c:	d004      	beq.n	8002a68 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a5e:	4b09      	ldr	r3, [pc, #36]	@ (8002a84 <HAL_Delay+0x40>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	68fa      	ldr	r2, [r7, #12]
 8002a64:	4413      	add	r3, r2
 8002a66:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002a68:	bf00      	nop
 8002a6a:	f7ff ffdf 	bl	8002a2c <HAL_GetTick>
 8002a6e:	4602      	mov	r2, r0
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	1ad3      	subs	r3, r2, r3
 8002a74:	68fa      	ldr	r2, [r7, #12]
 8002a76:	429a      	cmp	r2, r3
 8002a78:	d8f7      	bhi.n	8002a6a <HAL_Delay+0x26>
  {
  }
}
 8002a7a:	bf00      	nop
 8002a7c:	bf00      	nop
 8002a7e:	3710      	adds	r7, #16
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bd80      	pop	{r7, pc}
 8002a84:	20000218 	.word	0x20000218

08002a88 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b083      	sub	sp, #12
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
 8002a90:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	689b      	ldr	r3, [r3, #8]
 8002a96:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	431a      	orrs	r2, r3
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	609a      	str	r2, [r3, #8]
}
 8002aa2:	bf00      	nop
 8002aa4:	370c      	adds	r7, #12
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aac:	4770      	bx	lr

08002aae <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002aae:	b480      	push	{r7}
 8002ab0:	b083      	sub	sp, #12
 8002ab2:	af00      	add	r7, sp, #0
 8002ab4:	6078      	str	r0, [r7, #4]
 8002ab6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	431a      	orrs	r2, r3
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	609a      	str	r2, [r3, #8]
}
 8002ac8:	bf00      	nop
 8002aca:	370c      	adds	r7, #12
 8002acc:	46bd      	mov	sp, r7
 8002ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad2:	4770      	bx	lr

08002ad4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b083      	sub	sp, #12
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	689b      	ldr	r3, [r3, #8]
 8002ae0:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	370c      	adds	r7, #12
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aee:	4770      	bx	lr

08002af0 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002af0:	b480      	push	{r7}
 8002af2:	b087      	sub	sp, #28
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	60f8      	str	r0, [r7, #12]
 8002af8:	60b9      	str	r1, [r7, #8]
 8002afa:	607a      	str	r2, [r7, #4]
 8002afc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	3360      	adds	r3, #96	@ 0x60
 8002b02:	461a      	mov	r2, r3
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	009b      	lsls	r3, r3, #2
 8002b08:	4413      	add	r3, r2
 8002b0a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002b0c:	697b      	ldr	r3, [r7, #20]
 8002b0e:	681a      	ldr	r2, [r3, #0]
 8002b10:	4b08      	ldr	r3, [pc, #32]	@ (8002b34 <LL_ADC_SetOffset+0x44>)
 8002b12:	4013      	ands	r3, r2
 8002b14:	687a      	ldr	r2, [r7, #4]
 8002b16:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8002b1a:	683a      	ldr	r2, [r7, #0]
 8002b1c:	430a      	orrs	r2, r1
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002b24:	697b      	ldr	r3, [r7, #20]
 8002b26:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002b28:	bf00      	nop
 8002b2a:	371c      	adds	r7, #28
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b32:	4770      	bx	lr
 8002b34:	03fff000 	.word	0x03fff000

08002b38 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	b085      	sub	sp, #20
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
 8002b40:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	3360      	adds	r3, #96	@ 0x60
 8002b46:	461a      	mov	r2, r3
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	009b      	lsls	r3, r3, #2
 8002b4c:	4413      	add	r3, r2
 8002b4e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002b58:	4618      	mov	r0, r3
 8002b5a:	3714      	adds	r7, #20
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b62:	4770      	bx	lr

08002b64 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002b64:	b480      	push	{r7}
 8002b66:	b087      	sub	sp, #28
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	60f8      	str	r0, [r7, #12]
 8002b6c:	60b9      	str	r1, [r7, #8]
 8002b6e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	3360      	adds	r3, #96	@ 0x60
 8002b74:	461a      	mov	r2, r3
 8002b76:	68bb      	ldr	r3, [r7, #8]
 8002b78:	009b      	lsls	r3, r3, #2
 8002b7a:	4413      	add	r3, r2
 8002b7c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	431a      	orrs	r2, r3
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002b8e:	bf00      	nop
 8002b90:	371c      	adds	r7, #28
 8002b92:	46bd      	mov	sp, r7
 8002b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b98:	4770      	bx	lr

08002b9a <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002b9a:	b480      	push	{r7}
 8002b9c:	b087      	sub	sp, #28
 8002b9e:	af00      	add	r7, sp, #0
 8002ba0:	60f8      	str	r0, [r7, #12]
 8002ba2:	60b9      	str	r1, [r7, #8]
 8002ba4:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	3360      	adds	r3, #96	@ 0x60
 8002baa:	461a      	mov	r2, r3
 8002bac:	68bb      	ldr	r3, [r7, #8]
 8002bae:	009b      	lsls	r3, r3, #2
 8002bb0:	4413      	add	r3, r2
 8002bb2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002bb4:	697b      	ldr	r3, [r7, #20]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	431a      	orrs	r2, r3
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002bc4:	bf00      	nop
 8002bc6:	371c      	adds	r7, #28
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bce:	4770      	bx	lr

08002bd0 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b087      	sub	sp, #28
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	60f8      	str	r0, [r7, #12]
 8002bd8:	60b9      	str	r1, [r7, #8]
 8002bda:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	3360      	adds	r3, #96	@ 0x60
 8002be0:	461a      	mov	r2, r3
 8002be2:	68bb      	ldr	r3, [r7, #8]
 8002be4:	009b      	lsls	r3, r3, #2
 8002be6:	4413      	add	r3, r2
 8002be8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	431a      	orrs	r2, r3
 8002bf6:	697b      	ldr	r3, [r7, #20]
 8002bf8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8002bfa:	bf00      	nop
 8002bfc:	371c      	adds	r7, #28
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c04:	4770      	bx	lr

08002c06 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002c06:	b480      	push	{r7}
 8002c08:	b083      	sub	sp, #12
 8002c0a:	af00      	add	r7, sp, #0
 8002c0c:	6078      	str	r0, [r7, #4]
 8002c0e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	695b      	ldr	r3, [r3, #20]
 8002c14:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	431a      	orrs	r2, r3
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	615a      	str	r2, [r3, #20]
}
 8002c20:	bf00      	nop
 8002c22:	370c      	adds	r7, #12
 8002c24:	46bd      	mov	sp, r7
 8002c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2a:	4770      	bx	lr

08002c2c <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b087      	sub	sp, #28
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	60f8      	str	r0, [r7, #12]
 8002c34:	60b9      	str	r1, [r7, #8]
 8002c36:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	3330      	adds	r3, #48	@ 0x30
 8002c3c:	461a      	mov	r2, r3
 8002c3e:	68bb      	ldr	r3, [r7, #8]
 8002c40:	0a1b      	lsrs	r3, r3, #8
 8002c42:	009b      	lsls	r3, r3, #2
 8002c44:	f003 030c 	and.w	r3, r3, #12
 8002c48:	4413      	add	r3, r2
 8002c4a:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002c4c:	697b      	ldr	r3, [r7, #20]
 8002c4e:	681a      	ldr	r2, [r3, #0]
 8002c50:	68bb      	ldr	r3, [r7, #8]
 8002c52:	f003 031f 	and.w	r3, r3, #31
 8002c56:	211f      	movs	r1, #31
 8002c58:	fa01 f303 	lsl.w	r3, r1, r3
 8002c5c:	43db      	mvns	r3, r3
 8002c5e:	401a      	ands	r2, r3
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	0e9b      	lsrs	r3, r3, #26
 8002c64:	f003 011f 	and.w	r1, r3, #31
 8002c68:	68bb      	ldr	r3, [r7, #8]
 8002c6a:	f003 031f 	and.w	r3, r3, #31
 8002c6e:	fa01 f303 	lsl.w	r3, r1, r3
 8002c72:	431a      	orrs	r2, r3
 8002c74:	697b      	ldr	r3, [r7, #20]
 8002c76:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002c78:	bf00      	nop
 8002c7a:	371c      	adds	r7, #28
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c82:	4770      	bx	lr

08002c84 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002c84:	b480      	push	{r7}
 8002c86:	b087      	sub	sp, #28
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	60f8      	str	r0, [r7, #12]
 8002c8c:	60b9      	str	r1, [r7, #8]
 8002c8e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	3314      	adds	r3, #20
 8002c94:	461a      	mov	r2, r3
 8002c96:	68bb      	ldr	r3, [r7, #8]
 8002c98:	0e5b      	lsrs	r3, r3, #25
 8002c9a:	009b      	lsls	r3, r3, #2
 8002c9c:	f003 0304 	and.w	r3, r3, #4
 8002ca0:	4413      	add	r3, r2
 8002ca2:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	681a      	ldr	r2, [r3, #0]
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	0d1b      	lsrs	r3, r3, #20
 8002cac:	f003 031f 	and.w	r3, r3, #31
 8002cb0:	2107      	movs	r1, #7
 8002cb2:	fa01 f303 	lsl.w	r3, r1, r3
 8002cb6:	43db      	mvns	r3, r3
 8002cb8:	401a      	ands	r2, r3
 8002cba:	68bb      	ldr	r3, [r7, #8]
 8002cbc:	0d1b      	lsrs	r3, r3, #20
 8002cbe:	f003 031f 	and.w	r3, r3, #31
 8002cc2:	6879      	ldr	r1, [r7, #4]
 8002cc4:	fa01 f303 	lsl.w	r3, r1, r3
 8002cc8:	431a      	orrs	r2, r3
 8002cca:	697b      	ldr	r3, [r7, #20]
 8002ccc:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002cce:	bf00      	nop
 8002cd0:	371c      	adds	r7, #28
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd8:	4770      	bx	lr
	...

08002cdc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b085      	sub	sp, #20
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	60f8      	str	r0, [r7, #12]
 8002ce4:	60b9      	str	r1, [r7, #8]
 8002ce6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002cee:	68bb      	ldr	r3, [r7, #8]
 8002cf0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cf4:	43db      	mvns	r3, r3
 8002cf6:	401a      	ands	r2, r3
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	f003 0318 	and.w	r3, r3, #24
 8002cfe:	4908      	ldr	r1, [pc, #32]	@ (8002d20 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002d00:	40d9      	lsrs	r1, r3
 8002d02:	68bb      	ldr	r3, [r7, #8]
 8002d04:	400b      	ands	r3, r1
 8002d06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d0a:	431a      	orrs	r2, r3
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002d12:	bf00      	nop
 8002d14:	3714      	adds	r7, #20
 8002d16:	46bd      	mov	sp, r7
 8002d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1c:	4770      	bx	lr
 8002d1e:	bf00      	nop
 8002d20:	0007ffff 	.word	0x0007ffff

08002d24 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b083      	sub	sp, #12
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	689b      	ldr	r3, [r3, #8]
 8002d30:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002d34:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002d38:	687a      	ldr	r2, [r7, #4]
 8002d3a:	6093      	str	r3, [r2, #8]
}
 8002d3c:	bf00      	nop
 8002d3e:	370c      	adds	r7, #12
 8002d40:	46bd      	mov	sp, r7
 8002d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d46:	4770      	bx	lr

08002d48 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b083      	sub	sp, #12
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	689b      	ldr	r3, [r3, #8]
 8002d54:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002d58:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002d5c:	d101      	bne.n	8002d62 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002d5e:	2301      	movs	r3, #1
 8002d60:	e000      	b.n	8002d64 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002d62:	2300      	movs	r3, #0
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	370c      	adds	r7, #12
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6e:	4770      	bx	lr

08002d70 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002d70:	b480      	push	{r7}
 8002d72:	b083      	sub	sp, #12
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	689b      	ldr	r3, [r3, #8]
 8002d7c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002d80:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002d84:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002d8c:	bf00      	nop
 8002d8e:	370c      	adds	r7, #12
 8002d90:	46bd      	mov	sp, r7
 8002d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d96:	4770      	bx	lr

08002d98 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b083      	sub	sp, #12
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	689b      	ldr	r3, [r3, #8]
 8002da4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002da8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002dac:	d101      	bne.n	8002db2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002dae:	2301      	movs	r3, #1
 8002db0:	e000      	b.n	8002db4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002db2:	2300      	movs	r3, #0
}
 8002db4:	4618      	mov	r0, r3
 8002db6:	370c      	adds	r7, #12
 8002db8:	46bd      	mov	sp, r7
 8002dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbe:	4770      	bx	lr

08002dc0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b083      	sub	sp, #12
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	689b      	ldr	r3, [r3, #8]
 8002dcc:	f003 0301 	and.w	r3, r3, #1
 8002dd0:	2b01      	cmp	r3, #1
 8002dd2:	d101      	bne.n	8002dd8 <LL_ADC_IsEnabled+0x18>
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	e000      	b.n	8002dda <LL_ADC_IsEnabled+0x1a>
 8002dd8:	2300      	movs	r3, #0
}
 8002dda:	4618      	mov	r0, r3
 8002ddc:	370c      	adds	r7, #12
 8002dde:	46bd      	mov	sp, r7
 8002de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de4:	4770      	bx	lr

08002de6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002de6:	b480      	push	{r7}
 8002de8:	b083      	sub	sp, #12
 8002dea:	af00      	add	r7, sp, #0
 8002dec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	689b      	ldr	r3, [r3, #8]
 8002df2:	f003 0304 	and.w	r3, r3, #4
 8002df6:	2b04      	cmp	r3, #4
 8002df8:	d101      	bne.n	8002dfe <LL_ADC_REG_IsConversionOngoing+0x18>
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	e000      	b.n	8002e00 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002dfe:	2300      	movs	r3, #0
}
 8002e00:	4618      	mov	r0, r3
 8002e02:	370c      	adds	r7, #12
 8002e04:	46bd      	mov	sp, r7
 8002e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0a:	4770      	bx	lr

08002e0c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b083      	sub	sp, #12
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	f003 0308 	and.w	r3, r3, #8
 8002e1c:	2b08      	cmp	r3, #8
 8002e1e:	d101      	bne.n	8002e24 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002e20:	2301      	movs	r3, #1
 8002e22:	e000      	b.n	8002e26 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002e24:	2300      	movs	r3, #0
}
 8002e26:	4618      	mov	r0, r3
 8002e28:	370c      	adds	r7, #12
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e30:	4770      	bx	lr
	...

08002e34 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002e34:	b590      	push	{r4, r7, lr}
 8002e36:	b089      	sub	sp, #36	@ 0x24
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002e40:	2300      	movs	r3, #0
 8002e42:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d101      	bne.n	8002e4e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e1a9      	b.n	80031a2 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	695b      	ldr	r3, [r3, #20]
 8002e52:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d109      	bne.n	8002e70 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002e5c:	6878      	ldr	r0, [r7, #4]
 8002e5e:	f7ff f9d5 	bl	800220c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2200      	movs	r2, #0
 8002e66:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4618      	mov	r0, r3
 8002e76:	f7ff ff67 	bl	8002d48 <LL_ADC_IsDeepPowerDownEnabled>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d004      	beq.n	8002e8a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4618      	mov	r0, r3
 8002e86:	f7ff ff4d 	bl	8002d24 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4618      	mov	r0, r3
 8002e90:	f7ff ff82 	bl	8002d98 <LL_ADC_IsInternalRegulatorEnabled>
 8002e94:	4603      	mov	r3, r0
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d115      	bne.n	8002ec6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f7ff ff66 	bl	8002d70 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002ea4:	4b9c      	ldr	r3, [pc, #624]	@ (8003118 <HAL_ADC_Init+0x2e4>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	099b      	lsrs	r3, r3, #6
 8002eaa:	4a9c      	ldr	r2, [pc, #624]	@ (800311c <HAL_ADC_Init+0x2e8>)
 8002eac:	fba2 2303 	umull	r2, r3, r2, r3
 8002eb0:	099b      	lsrs	r3, r3, #6
 8002eb2:	3301      	adds	r3, #1
 8002eb4:	005b      	lsls	r3, r3, #1
 8002eb6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002eb8:	e002      	b.n	8002ec0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	3b01      	subs	r3, #1
 8002ebe:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d1f9      	bne.n	8002eba <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4618      	mov	r0, r3
 8002ecc:	f7ff ff64 	bl	8002d98 <LL_ADC_IsInternalRegulatorEnabled>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d10d      	bne.n	8002ef2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002eda:	f043 0210 	orr.w	r2, r3, #16
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ee6:	f043 0201 	orr.w	r2, r3, #1
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f7ff ff75 	bl	8002de6 <LL_ADC_REG_IsConversionOngoing>
 8002efc:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f02:	f003 0310 	and.w	r3, r3, #16
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	f040 8142 	bne.w	8003190 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002f0c:	697b      	ldr	r3, [r7, #20]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	f040 813e 	bne.w	8003190 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f18:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002f1c:	f043 0202 	orr.w	r2, r3, #2
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f7ff ff49 	bl	8002dc0 <LL_ADC_IsEnabled>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d141      	bne.n	8002fb8 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002f3c:	d004      	beq.n	8002f48 <HAL_ADC_Init+0x114>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a77      	ldr	r2, [pc, #476]	@ (8003120 <HAL_ADC_Init+0x2ec>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d10f      	bne.n	8002f68 <HAL_ADC_Init+0x134>
 8002f48:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002f4c:	f7ff ff38 	bl	8002dc0 <LL_ADC_IsEnabled>
 8002f50:	4604      	mov	r4, r0
 8002f52:	4873      	ldr	r0, [pc, #460]	@ (8003120 <HAL_ADC_Init+0x2ec>)
 8002f54:	f7ff ff34 	bl	8002dc0 <LL_ADC_IsEnabled>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	4323      	orrs	r3, r4
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	bf0c      	ite	eq
 8002f60:	2301      	moveq	r3, #1
 8002f62:	2300      	movne	r3, #0
 8002f64:	b2db      	uxtb	r3, r3
 8002f66:	e012      	b.n	8002f8e <HAL_ADC_Init+0x15a>
 8002f68:	486e      	ldr	r0, [pc, #440]	@ (8003124 <HAL_ADC_Init+0x2f0>)
 8002f6a:	f7ff ff29 	bl	8002dc0 <LL_ADC_IsEnabled>
 8002f6e:	4604      	mov	r4, r0
 8002f70:	486d      	ldr	r0, [pc, #436]	@ (8003128 <HAL_ADC_Init+0x2f4>)
 8002f72:	f7ff ff25 	bl	8002dc0 <LL_ADC_IsEnabled>
 8002f76:	4603      	mov	r3, r0
 8002f78:	431c      	orrs	r4, r3
 8002f7a:	486c      	ldr	r0, [pc, #432]	@ (800312c <HAL_ADC_Init+0x2f8>)
 8002f7c:	f7ff ff20 	bl	8002dc0 <LL_ADC_IsEnabled>
 8002f80:	4603      	mov	r3, r0
 8002f82:	4323      	orrs	r3, r4
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	bf0c      	ite	eq
 8002f88:	2301      	moveq	r3, #1
 8002f8a:	2300      	movne	r3, #0
 8002f8c:	b2db      	uxtb	r3, r3
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d012      	beq.n	8002fb8 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002f9a:	d004      	beq.n	8002fa6 <HAL_ADC_Init+0x172>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a5f      	ldr	r2, [pc, #380]	@ (8003120 <HAL_ADC_Init+0x2ec>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d101      	bne.n	8002faa <HAL_ADC_Init+0x176>
 8002fa6:	4a62      	ldr	r2, [pc, #392]	@ (8003130 <HAL_ADC_Init+0x2fc>)
 8002fa8:	e000      	b.n	8002fac <HAL_ADC_Init+0x178>
 8002faa:	4a62      	ldr	r2, [pc, #392]	@ (8003134 <HAL_ADC_Init+0x300>)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	4619      	mov	r1, r3
 8002fb2:	4610      	mov	r0, r2
 8002fb4:	f7ff fd68 	bl	8002a88 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	7f5b      	ldrb	r3, [r3, #29]
 8002fbc:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002fc2:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002fc8:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002fce:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002fd6:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002fe2:	2b01      	cmp	r3, #1
 8002fe4:	d106      	bne.n	8002ff4 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fea:	3b01      	subs	r3, #1
 8002fec:	045b      	lsls	r3, r3, #17
 8002fee:	69ba      	ldr	r2, [r7, #24]
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d009      	beq.n	8003010 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003000:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003008:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800300a:	69ba      	ldr	r2, [r7, #24]
 800300c:	4313      	orrs	r3, r2
 800300e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	68da      	ldr	r2, [r3, #12]
 8003016:	4b48      	ldr	r3, [pc, #288]	@ (8003138 <HAL_ADC_Init+0x304>)
 8003018:	4013      	ands	r3, r2
 800301a:	687a      	ldr	r2, [r7, #4]
 800301c:	6812      	ldr	r2, [r2, #0]
 800301e:	69b9      	ldr	r1, [r7, #24]
 8003020:	430b      	orrs	r3, r1
 8003022:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	691b      	ldr	r3, [r3, #16]
 800302a:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	430a      	orrs	r2, r1
 8003038:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4618      	mov	r0, r3
 8003040:	f7ff fee4 	bl	8002e0c <LL_ADC_INJ_IsConversionOngoing>
 8003044:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003046:	697b      	ldr	r3, [r7, #20]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d17f      	bne.n	800314c <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800304c:	693b      	ldr	r3, [r7, #16]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d17c      	bne.n	800314c <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003056:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800305e:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003060:	4313      	orrs	r3, r2
 8003062:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	68db      	ldr	r3, [r3, #12]
 800306a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800306e:	f023 0302 	bic.w	r3, r3, #2
 8003072:	687a      	ldr	r2, [r7, #4]
 8003074:	6812      	ldr	r2, [r2, #0]
 8003076:	69b9      	ldr	r1, [r7, #24]
 8003078:	430b      	orrs	r3, r1
 800307a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	691b      	ldr	r3, [r3, #16]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d017      	beq.n	80030b4 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	691a      	ldr	r2, [r3, #16]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8003092:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800309c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80030a0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80030a4:	687a      	ldr	r2, [r7, #4]
 80030a6:	6911      	ldr	r1, [r2, #16]
 80030a8:	687a      	ldr	r2, [r7, #4]
 80030aa:	6812      	ldr	r2, [r2, #0]
 80030ac:	430b      	orrs	r3, r1
 80030ae:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 80030b2:	e013      	b.n	80030dc <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	691a      	ldr	r2, [r3, #16]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80030c2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80030cc:	687a      	ldr	r2, [r7, #4]
 80030ce:	6812      	ldr	r2, [r2, #0]
 80030d0:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80030d4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80030d8:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80030e2:	2b01      	cmp	r3, #1
 80030e4:	d12a      	bne.n	800313c <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	691b      	ldr	r3, [r3, #16]
 80030ec:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80030f0:	f023 0304 	bic.w	r3, r3, #4
 80030f4:	687a      	ldr	r2, [r7, #4]
 80030f6:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 80030f8:	687a      	ldr	r2, [r7, #4]
 80030fa:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80030fc:	4311      	orrs	r1, r2
 80030fe:	687a      	ldr	r2, [r7, #4]
 8003100:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003102:	4311      	orrs	r1, r2
 8003104:	687a      	ldr	r2, [r7, #4]
 8003106:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003108:	430a      	orrs	r2, r1
 800310a:	431a      	orrs	r2, r3
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f042 0201 	orr.w	r2, r2, #1
 8003114:	611a      	str	r2, [r3, #16]
 8003116:	e019      	b.n	800314c <HAL_ADC_Init+0x318>
 8003118:	20000210 	.word	0x20000210
 800311c:	053e2d63 	.word	0x053e2d63
 8003120:	50000100 	.word	0x50000100
 8003124:	50000400 	.word	0x50000400
 8003128:	50000500 	.word	0x50000500
 800312c:	50000600 	.word	0x50000600
 8003130:	50000300 	.word	0x50000300
 8003134:	50000700 	.word	0x50000700
 8003138:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	691a      	ldr	r2, [r3, #16]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f022 0201 	bic.w	r2, r2, #1
 800314a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	695b      	ldr	r3, [r3, #20]
 8003150:	2b01      	cmp	r3, #1
 8003152:	d10c      	bne.n	800316e <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800315a:	f023 010f 	bic.w	r1, r3, #15
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6a1b      	ldr	r3, [r3, #32]
 8003162:	1e5a      	subs	r2, r3, #1
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	430a      	orrs	r2, r1
 800316a:	631a      	str	r2, [r3, #48]	@ 0x30
 800316c:	e007      	b.n	800317e <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f022 020f 	bic.w	r2, r2, #15
 800317c:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003182:	f023 0303 	bic.w	r3, r3, #3
 8003186:	f043 0201 	orr.w	r2, r3, #1
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800318e:	e007      	b.n	80031a0 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003194:	f043 0210 	orr.w	r2, r3, #16
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800319c:	2301      	movs	r3, #1
 800319e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80031a0:	7ffb      	ldrb	r3, [r7, #31]
}
 80031a2:	4618      	mov	r0, r3
 80031a4:	3724      	adds	r7, #36	@ 0x24
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd90      	pop	{r4, r7, pc}
 80031aa:	bf00      	nop

080031ac <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b0b6      	sub	sp, #216	@ 0xd8
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
 80031b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80031b6:	2300      	movs	r3, #0
 80031b8:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80031bc:	2300      	movs	r3, #0
 80031be:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80031c6:	2b01      	cmp	r3, #1
 80031c8:	d102      	bne.n	80031d0 <HAL_ADC_ConfigChannel+0x24>
 80031ca:	2302      	movs	r3, #2
 80031cc:	f000 bc13 	b.w	80039f6 <HAL_ADC_ConfigChannel+0x84a>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2201      	movs	r2, #1
 80031d4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4618      	mov	r0, r3
 80031de:	f7ff fe02 	bl	8002de6 <LL_ADC_REG_IsConversionOngoing>
 80031e2:	4603      	mov	r3, r0
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	f040 83f3 	bne.w	80039d0 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6818      	ldr	r0, [r3, #0]
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	6859      	ldr	r1, [r3, #4]
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	461a      	mov	r2, r3
 80031f8:	f7ff fd18 	bl	8002c2c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4618      	mov	r0, r3
 8003202:	f7ff fdf0 	bl	8002de6 <LL_ADC_REG_IsConversionOngoing>
 8003206:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4618      	mov	r0, r3
 8003210:	f7ff fdfc 	bl	8002e0c <LL_ADC_INJ_IsConversionOngoing>
 8003214:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003218:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800321c:	2b00      	cmp	r3, #0
 800321e:	f040 81d9 	bne.w	80035d4 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003222:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003226:	2b00      	cmp	r3, #0
 8003228:	f040 81d4 	bne.w	80035d4 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	689b      	ldr	r3, [r3, #8]
 8003230:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003234:	d10f      	bne.n	8003256 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6818      	ldr	r0, [r3, #0]
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	2200      	movs	r2, #0
 8003240:	4619      	mov	r1, r3
 8003242:	f7ff fd1f 	bl	8002c84 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 800324e:	4618      	mov	r0, r3
 8003250:	f7ff fcd9 	bl	8002c06 <LL_ADC_SetSamplingTimeCommonConfig>
 8003254:	e00e      	b.n	8003274 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6818      	ldr	r0, [r3, #0]
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	6819      	ldr	r1, [r3, #0]
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	689b      	ldr	r3, [r3, #8]
 8003262:	461a      	mov	r2, r3
 8003264:	f7ff fd0e 	bl	8002c84 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	2100      	movs	r1, #0
 800326e:	4618      	mov	r0, r3
 8003270:	f7ff fcc9 	bl	8002c06 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	695a      	ldr	r2, [r3, #20]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	68db      	ldr	r3, [r3, #12]
 800327e:	08db      	lsrs	r3, r3, #3
 8003280:	f003 0303 	and.w	r3, r3, #3
 8003284:	005b      	lsls	r3, r3, #1
 8003286:	fa02 f303 	lsl.w	r3, r2, r3
 800328a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	691b      	ldr	r3, [r3, #16]
 8003292:	2b04      	cmp	r3, #4
 8003294:	d022      	beq.n	80032dc <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6818      	ldr	r0, [r3, #0]
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	6919      	ldr	r1, [r3, #16]
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	681a      	ldr	r2, [r3, #0]
 80032a2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80032a6:	f7ff fc23 	bl	8002af0 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6818      	ldr	r0, [r3, #0]
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	6919      	ldr	r1, [r3, #16]
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	699b      	ldr	r3, [r3, #24]
 80032b6:	461a      	mov	r2, r3
 80032b8:	f7ff fc6f 	bl	8002b9a <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6818      	ldr	r0, [r3, #0]
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80032c8:	2b01      	cmp	r3, #1
 80032ca:	d102      	bne.n	80032d2 <HAL_ADC_ConfigChannel+0x126>
 80032cc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80032d0:	e000      	b.n	80032d4 <HAL_ADC_ConfigChannel+0x128>
 80032d2:	2300      	movs	r3, #0
 80032d4:	461a      	mov	r2, r3
 80032d6:	f7ff fc7b 	bl	8002bd0 <LL_ADC_SetOffsetSaturation>
 80032da:	e17b      	b.n	80035d4 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	2100      	movs	r1, #0
 80032e2:	4618      	mov	r0, r3
 80032e4:	f7ff fc28 	bl	8002b38 <LL_ADC_GetOffsetChannel>
 80032e8:	4603      	mov	r3, r0
 80032ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d10a      	bne.n	8003308 <HAL_ADC_ConfigChannel+0x15c>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	2100      	movs	r1, #0
 80032f8:	4618      	mov	r0, r3
 80032fa:	f7ff fc1d 	bl	8002b38 <LL_ADC_GetOffsetChannel>
 80032fe:	4603      	mov	r3, r0
 8003300:	0e9b      	lsrs	r3, r3, #26
 8003302:	f003 021f 	and.w	r2, r3, #31
 8003306:	e01e      	b.n	8003346 <HAL_ADC_ConfigChannel+0x19a>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	2100      	movs	r1, #0
 800330e:	4618      	mov	r0, r3
 8003310:	f7ff fc12 	bl	8002b38 <LL_ADC_GetOffsetChannel>
 8003314:	4603      	mov	r3, r0
 8003316:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800331a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800331e:	fa93 f3a3 	rbit	r3, r3
 8003322:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003326:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800332a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800332e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003332:	2b00      	cmp	r3, #0
 8003334:	d101      	bne.n	800333a <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8003336:	2320      	movs	r3, #32
 8003338:	e004      	b.n	8003344 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 800333a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800333e:	fab3 f383 	clz	r3, r3
 8003342:	b2db      	uxtb	r3, r3
 8003344:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800334e:	2b00      	cmp	r3, #0
 8003350:	d105      	bne.n	800335e <HAL_ADC_ConfigChannel+0x1b2>
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	0e9b      	lsrs	r3, r3, #26
 8003358:	f003 031f 	and.w	r3, r3, #31
 800335c:	e018      	b.n	8003390 <HAL_ADC_ConfigChannel+0x1e4>
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003366:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800336a:	fa93 f3a3 	rbit	r3, r3
 800336e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8003372:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003376:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 800337a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800337e:	2b00      	cmp	r3, #0
 8003380:	d101      	bne.n	8003386 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8003382:	2320      	movs	r3, #32
 8003384:	e004      	b.n	8003390 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8003386:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800338a:	fab3 f383 	clz	r3, r3
 800338e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003390:	429a      	cmp	r2, r3
 8003392:	d106      	bne.n	80033a2 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	2200      	movs	r2, #0
 800339a:	2100      	movs	r1, #0
 800339c:	4618      	mov	r0, r3
 800339e:	f7ff fbe1 	bl	8002b64 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	2101      	movs	r1, #1
 80033a8:	4618      	mov	r0, r3
 80033aa:	f7ff fbc5 	bl	8002b38 <LL_ADC_GetOffsetChannel>
 80033ae:	4603      	mov	r3, r0
 80033b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d10a      	bne.n	80033ce <HAL_ADC_ConfigChannel+0x222>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	2101      	movs	r1, #1
 80033be:	4618      	mov	r0, r3
 80033c0:	f7ff fbba 	bl	8002b38 <LL_ADC_GetOffsetChannel>
 80033c4:	4603      	mov	r3, r0
 80033c6:	0e9b      	lsrs	r3, r3, #26
 80033c8:	f003 021f 	and.w	r2, r3, #31
 80033cc:	e01e      	b.n	800340c <HAL_ADC_ConfigChannel+0x260>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	2101      	movs	r1, #1
 80033d4:	4618      	mov	r0, r3
 80033d6:	f7ff fbaf 	bl	8002b38 <LL_ADC_GetOffsetChannel>
 80033da:	4603      	mov	r3, r0
 80033dc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033e0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80033e4:	fa93 f3a3 	rbit	r3, r3
 80033e8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 80033ec:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80033f0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 80033f4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d101      	bne.n	8003400 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 80033fc:	2320      	movs	r3, #32
 80033fe:	e004      	b.n	800340a <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8003400:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003404:	fab3 f383 	clz	r3, r3
 8003408:	b2db      	uxtb	r3, r3
 800340a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003414:	2b00      	cmp	r3, #0
 8003416:	d105      	bne.n	8003424 <HAL_ADC_ConfigChannel+0x278>
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	0e9b      	lsrs	r3, r3, #26
 800341e:	f003 031f 	and.w	r3, r3, #31
 8003422:	e018      	b.n	8003456 <HAL_ADC_ConfigChannel+0x2aa>
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800342c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003430:	fa93 f3a3 	rbit	r3, r3
 8003434:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8003438:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800343c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8003440:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003444:	2b00      	cmp	r3, #0
 8003446:	d101      	bne.n	800344c <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8003448:	2320      	movs	r3, #32
 800344a:	e004      	b.n	8003456 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 800344c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003450:	fab3 f383 	clz	r3, r3
 8003454:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003456:	429a      	cmp	r2, r3
 8003458:	d106      	bne.n	8003468 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	2200      	movs	r2, #0
 8003460:	2101      	movs	r1, #1
 8003462:	4618      	mov	r0, r3
 8003464:	f7ff fb7e 	bl	8002b64 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	2102      	movs	r1, #2
 800346e:	4618      	mov	r0, r3
 8003470:	f7ff fb62 	bl	8002b38 <LL_ADC_GetOffsetChannel>
 8003474:	4603      	mov	r3, r0
 8003476:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800347a:	2b00      	cmp	r3, #0
 800347c:	d10a      	bne.n	8003494 <HAL_ADC_ConfigChannel+0x2e8>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	2102      	movs	r1, #2
 8003484:	4618      	mov	r0, r3
 8003486:	f7ff fb57 	bl	8002b38 <LL_ADC_GetOffsetChannel>
 800348a:	4603      	mov	r3, r0
 800348c:	0e9b      	lsrs	r3, r3, #26
 800348e:	f003 021f 	and.w	r2, r3, #31
 8003492:	e01e      	b.n	80034d2 <HAL_ADC_ConfigChannel+0x326>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	2102      	movs	r1, #2
 800349a:	4618      	mov	r0, r3
 800349c:	f7ff fb4c 	bl	8002b38 <LL_ADC_GetOffsetChannel>
 80034a0:	4603      	mov	r3, r0
 80034a2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80034aa:	fa93 f3a3 	rbit	r3, r3
 80034ae:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 80034b2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80034b6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 80034ba:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d101      	bne.n	80034c6 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 80034c2:	2320      	movs	r3, #32
 80034c4:	e004      	b.n	80034d0 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 80034c6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80034ca:	fab3 f383 	clz	r3, r3
 80034ce:	b2db      	uxtb	r3, r3
 80034d0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d105      	bne.n	80034ea <HAL_ADC_ConfigChannel+0x33e>
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	0e9b      	lsrs	r3, r3, #26
 80034e4:	f003 031f 	and.w	r3, r3, #31
 80034e8:	e016      	b.n	8003518 <HAL_ADC_ConfigChannel+0x36c>
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034f2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80034f6:	fa93 f3a3 	rbit	r3, r3
 80034fa:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 80034fc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80034fe:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8003502:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003506:	2b00      	cmp	r3, #0
 8003508:	d101      	bne.n	800350e <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 800350a:	2320      	movs	r3, #32
 800350c:	e004      	b.n	8003518 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 800350e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003512:	fab3 f383 	clz	r3, r3
 8003516:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003518:	429a      	cmp	r2, r3
 800351a:	d106      	bne.n	800352a <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	2200      	movs	r2, #0
 8003522:	2102      	movs	r1, #2
 8003524:	4618      	mov	r0, r3
 8003526:	f7ff fb1d 	bl	8002b64 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	2103      	movs	r1, #3
 8003530:	4618      	mov	r0, r3
 8003532:	f7ff fb01 	bl	8002b38 <LL_ADC_GetOffsetChannel>
 8003536:	4603      	mov	r3, r0
 8003538:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800353c:	2b00      	cmp	r3, #0
 800353e:	d10a      	bne.n	8003556 <HAL_ADC_ConfigChannel+0x3aa>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	2103      	movs	r1, #3
 8003546:	4618      	mov	r0, r3
 8003548:	f7ff faf6 	bl	8002b38 <LL_ADC_GetOffsetChannel>
 800354c:	4603      	mov	r3, r0
 800354e:	0e9b      	lsrs	r3, r3, #26
 8003550:	f003 021f 	and.w	r2, r3, #31
 8003554:	e017      	b.n	8003586 <HAL_ADC_ConfigChannel+0x3da>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	2103      	movs	r1, #3
 800355c:	4618      	mov	r0, r3
 800355e:	f7ff faeb 	bl	8002b38 <LL_ADC_GetOffsetChannel>
 8003562:	4603      	mov	r3, r0
 8003564:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003566:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003568:	fa93 f3a3 	rbit	r3, r3
 800356c:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 800356e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003570:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8003572:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003574:	2b00      	cmp	r3, #0
 8003576:	d101      	bne.n	800357c <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8003578:	2320      	movs	r3, #32
 800357a:	e003      	b.n	8003584 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 800357c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800357e:	fab3 f383 	clz	r3, r3
 8003582:	b2db      	uxtb	r3, r3
 8003584:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800358e:	2b00      	cmp	r3, #0
 8003590:	d105      	bne.n	800359e <HAL_ADC_ConfigChannel+0x3f2>
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	0e9b      	lsrs	r3, r3, #26
 8003598:	f003 031f 	and.w	r3, r3, #31
 800359c:	e011      	b.n	80035c2 <HAL_ADC_ConfigChannel+0x416>
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035a4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80035a6:	fa93 f3a3 	rbit	r3, r3
 80035aa:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 80035ac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80035ae:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 80035b0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d101      	bne.n	80035ba <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 80035b6:	2320      	movs	r3, #32
 80035b8:	e003      	b.n	80035c2 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 80035ba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80035bc:	fab3 f383 	clz	r3, r3
 80035c0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80035c2:	429a      	cmp	r2, r3
 80035c4:	d106      	bne.n	80035d4 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	2200      	movs	r2, #0
 80035cc:	2103      	movs	r1, #3
 80035ce:	4618      	mov	r0, r3
 80035d0:	f7ff fac8 	bl	8002b64 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4618      	mov	r0, r3
 80035da:	f7ff fbf1 	bl	8002dc0 <LL_ADC_IsEnabled>
 80035de:	4603      	mov	r3, r0
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	f040 813d 	bne.w	8003860 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6818      	ldr	r0, [r3, #0]
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	6819      	ldr	r1, [r3, #0]
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	68db      	ldr	r3, [r3, #12]
 80035f2:	461a      	mov	r2, r3
 80035f4:	f7ff fb72 	bl	8002cdc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	68db      	ldr	r3, [r3, #12]
 80035fc:	4aa2      	ldr	r2, [pc, #648]	@ (8003888 <HAL_ADC_ConfigChannel+0x6dc>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	f040 812e 	bne.w	8003860 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003610:	2b00      	cmp	r3, #0
 8003612:	d10b      	bne.n	800362c <HAL_ADC_ConfigChannel+0x480>
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	0e9b      	lsrs	r3, r3, #26
 800361a:	3301      	adds	r3, #1
 800361c:	f003 031f 	and.w	r3, r3, #31
 8003620:	2b09      	cmp	r3, #9
 8003622:	bf94      	ite	ls
 8003624:	2301      	movls	r3, #1
 8003626:	2300      	movhi	r3, #0
 8003628:	b2db      	uxtb	r3, r3
 800362a:	e019      	b.n	8003660 <HAL_ADC_ConfigChannel+0x4b4>
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003632:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003634:	fa93 f3a3 	rbit	r3, r3
 8003638:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 800363a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800363c:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 800363e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003640:	2b00      	cmp	r3, #0
 8003642:	d101      	bne.n	8003648 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8003644:	2320      	movs	r3, #32
 8003646:	e003      	b.n	8003650 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8003648:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800364a:	fab3 f383 	clz	r3, r3
 800364e:	b2db      	uxtb	r3, r3
 8003650:	3301      	adds	r3, #1
 8003652:	f003 031f 	and.w	r3, r3, #31
 8003656:	2b09      	cmp	r3, #9
 8003658:	bf94      	ite	ls
 800365a:	2301      	movls	r3, #1
 800365c:	2300      	movhi	r3, #0
 800365e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003660:	2b00      	cmp	r3, #0
 8003662:	d079      	beq.n	8003758 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800366c:	2b00      	cmp	r3, #0
 800366e:	d107      	bne.n	8003680 <HAL_ADC_ConfigChannel+0x4d4>
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	0e9b      	lsrs	r3, r3, #26
 8003676:	3301      	adds	r3, #1
 8003678:	069b      	lsls	r3, r3, #26
 800367a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800367e:	e015      	b.n	80036ac <HAL_ADC_ConfigChannel+0x500>
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003686:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003688:	fa93 f3a3 	rbit	r3, r3
 800368c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800368e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003690:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8003692:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003694:	2b00      	cmp	r3, #0
 8003696:	d101      	bne.n	800369c <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8003698:	2320      	movs	r3, #32
 800369a:	e003      	b.n	80036a4 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 800369c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800369e:	fab3 f383 	clz	r3, r3
 80036a2:	b2db      	uxtb	r3, r3
 80036a4:	3301      	adds	r3, #1
 80036a6:	069b      	lsls	r3, r3, #26
 80036a8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d109      	bne.n	80036cc <HAL_ADC_ConfigChannel+0x520>
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	0e9b      	lsrs	r3, r3, #26
 80036be:	3301      	adds	r3, #1
 80036c0:	f003 031f 	and.w	r3, r3, #31
 80036c4:	2101      	movs	r1, #1
 80036c6:	fa01 f303 	lsl.w	r3, r1, r3
 80036ca:	e017      	b.n	80036fc <HAL_ADC_ConfigChannel+0x550>
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80036d4:	fa93 f3a3 	rbit	r3, r3
 80036d8:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 80036da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80036dc:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 80036de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d101      	bne.n	80036e8 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 80036e4:	2320      	movs	r3, #32
 80036e6:	e003      	b.n	80036f0 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 80036e8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80036ea:	fab3 f383 	clz	r3, r3
 80036ee:	b2db      	uxtb	r3, r3
 80036f0:	3301      	adds	r3, #1
 80036f2:	f003 031f 	and.w	r3, r3, #31
 80036f6:	2101      	movs	r1, #1
 80036f8:	fa01 f303 	lsl.w	r3, r1, r3
 80036fc:	ea42 0103 	orr.w	r1, r2, r3
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003708:	2b00      	cmp	r3, #0
 800370a:	d10a      	bne.n	8003722 <HAL_ADC_ConfigChannel+0x576>
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	0e9b      	lsrs	r3, r3, #26
 8003712:	3301      	adds	r3, #1
 8003714:	f003 021f 	and.w	r2, r3, #31
 8003718:	4613      	mov	r3, r2
 800371a:	005b      	lsls	r3, r3, #1
 800371c:	4413      	add	r3, r2
 800371e:	051b      	lsls	r3, r3, #20
 8003720:	e018      	b.n	8003754 <HAL_ADC_ConfigChannel+0x5a8>
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003728:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800372a:	fa93 f3a3 	rbit	r3, r3
 800372e:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003730:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003732:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8003734:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003736:	2b00      	cmp	r3, #0
 8003738:	d101      	bne.n	800373e <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 800373a:	2320      	movs	r3, #32
 800373c:	e003      	b.n	8003746 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 800373e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003740:	fab3 f383 	clz	r3, r3
 8003744:	b2db      	uxtb	r3, r3
 8003746:	3301      	adds	r3, #1
 8003748:	f003 021f 	and.w	r2, r3, #31
 800374c:	4613      	mov	r3, r2
 800374e:	005b      	lsls	r3, r3, #1
 8003750:	4413      	add	r3, r2
 8003752:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003754:	430b      	orrs	r3, r1
 8003756:	e07e      	b.n	8003856 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003760:	2b00      	cmp	r3, #0
 8003762:	d107      	bne.n	8003774 <HAL_ADC_ConfigChannel+0x5c8>
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	0e9b      	lsrs	r3, r3, #26
 800376a:	3301      	adds	r3, #1
 800376c:	069b      	lsls	r3, r3, #26
 800376e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003772:	e015      	b.n	80037a0 <HAL_ADC_ConfigChannel+0x5f4>
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800377a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800377c:	fa93 f3a3 	rbit	r3, r3
 8003780:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8003782:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003784:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8003786:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003788:	2b00      	cmp	r3, #0
 800378a:	d101      	bne.n	8003790 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 800378c:	2320      	movs	r3, #32
 800378e:	e003      	b.n	8003798 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8003790:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003792:	fab3 f383 	clz	r3, r3
 8003796:	b2db      	uxtb	r3, r3
 8003798:	3301      	adds	r3, #1
 800379a:	069b      	lsls	r3, r3, #26
 800379c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d109      	bne.n	80037c0 <HAL_ADC_ConfigChannel+0x614>
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	0e9b      	lsrs	r3, r3, #26
 80037b2:	3301      	adds	r3, #1
 80037b4:	f003 031f 	and.w	r3, r3, #31
 80037b8:	2101      	movs	r1, #1
 80037ba:	fa01 f303 	lsl.w	r3, r1, r3
 80037be:	e017      	b.n	80037f0 <HAL_ADC_ConfigChannel+0x644>
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037c6:	6a3b      	ldr	r3, [r7, #32]
 80037c8:	fa93 f3a3 	rbit	r3, r3
 80037cc:	61fb      	str	r3, [r7, #28]
  return result;
 80037ce:	69fb      	ldr	r3, [r7, #28]
 80037d0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80037d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d101      	bne.n	80037dc <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 80037d8:	2320      	movs	r3, #32
 80037da:	e003      	b.n	80037e4 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 80037dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037de:	fab3 f383 	clz	r3, r3
 80037e2:	b2db      	uxtb	r3, r3
 80037e4:	3301      	adds	r3, #1
 80037e6:	f003 031f 	and.w	r3, r3, #31
 80037ea:	2101      	movs	r1, #1
 80037ec:	fa01 f303 	lsl.w	r3, r1, r3
 80037f0:	ea42 0103 	orr.w	r1, r2, r3
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d10d      	bne.n	800381c <HAL_ADC_ConfigChannel+0x670>
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	0e9b      	lsrs	r3, r3, #26
 8003806:	3301      	adds	r3, #1
 8003808:	f003 021f 	and.w	r2, r3, #31
 800380c:	4613      	mov	r3, r2
 800380e:	005b      	lsls	r3, r3, #1
 8003810:	4413      	add	r3, r2
 8003812:	3b1e      	subs	r3, #30
 8003814:	051b      	lsls	r3, r3, #20
 8003816:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800381a:	e01b      	b.n	8003854 <HAL_ADC_ConfigChannel+0x6a8>
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003822:	697b      	ldr	r3, [r7, #20]
 8003824:	fa93 f3a3 	rbit	r3, r3
 8003828:	613b      	str	r3, [r7, #16]
  return result;
 800382a:	693b      	ldr	r3, [r7, #16]
 800382c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800382e:	69bb      	ldr	r3, [r7, #24]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d101      	bne.n	8003838 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8003834:	2320      	movs	r3, #32
 8003836:	e003      	b.n	8003840 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8003838:	69bb      	ldr	r3, [r7, #24]
 800383a:	fab3 f383 	clz	r3, r3
 800383e:	b2db      	uxtb	r3, r3
 8003840:	3301      	adds	r3, #1
 8003842:	f003 021f 	and.w	r2, r3, #31
 8003846:	4613      	mov	r3, r2
 8003848:	005b      	lsls	r3, r3, #1
 800384a:	4413      	add	r3, r2
 800384c:	3b1e      	subs	r3, #30
 800384e:	051b      	lsls	r3, r3, #20
 8003850:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003854:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8003856:	683a      	ldr	r2, [r7, #0]
 8003858:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800385a:	4619      	mov	r1, r3
 800385c:	f7ff fa12 	bl	8002c84 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	681a      	ldr	r2, [r3, #0]
 8003864:	4b09      	ldr	r3, [pc, #36]	@ (800388c <HAL_ADC_ConfigChannel+0x6e0>)
 8003866:	4013      	ands	r3, r2
 8003868:	2b00      	cmp	r3, #0
 800386a:	f000 80be 	beq.w	80039ea <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003876:	d004      	beq.n	8003882 <HAL_ADC_ConfigChannel+0x6d6>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a04      	ldr	r2, [pc, #16]	@ (8003890 <HAL_ADC_ConfigChannel+0x6e4>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d10a      	bne.n	8003898 <HAL_ADC_ConfigChannel+0x6ec>
 8003882:	4b04      	ldr	r3, [pc, #16]	@ (8003894 <HAL_ADC_ConfigChannel+0x6e8>)
 8003884:	e009      	b.n	800389a <HAL_ADC_ConfigChannel+0x6ee>
 8003886:	bf00      	nop
 8003888:	407f0000 	.word	0x407f0000
 800388c:	80080000 	.word	0x80080000
 8003890:	50000100 	.word	0x50000100
 8003894:	50000300 	.word	0x50000300
 8003898:	4b59      	ldr	r3, [pc, #356]	@ (8003a00 <HAL_ADC_ConfigChannel+0x854>)
 800389a:	4618      	mov	r0, r3
 800389c:	f7ff f91a 	bl	8002ad4 <LL_ADC_GetCommonPathInternalCh>
 80038a0:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a56      	ldr	r2, [pc, #344]	@ (8003a04 <HAL_ADC_ConfigChannel+0x858>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d004      	beq.n	80038b8 <HAL_ADC_ConfigChannel+0x70c>
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a55      	ldr	r2, [pc, #340]	@ (8003a08 <HAL_ADC_ConfigChannel+0x85c>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d13a      	bne.n	800392e <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80038b8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80038bc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d134      	bne.n	800392e <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80038cc:	d005      	beq.n	80038da <HAL_ADC_ConfigChannel+0x72e>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a4e      	ldr	r2, [pc, #312]	@ (8003a0c <HAL_ADC_ConfigChannel+0x860>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	f040 8085 	bne.w	80039e4 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80038e2:	d004      	beq.n	80038ee <HAL_ADC_ConfigChannel+0x742>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4a49      	ldr	r2, [pc, #292]	@ (8003a10 <HAL_ADC_ConfigChannel+0x864>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d101      	bne.n	80038f2 <HAL_ADC_ConfigChannel+0x746>
 80038ee:	4a49      	ldr	r2, [pc, #292]	@ (8003a14 <HAL_ADC_ConfigChannel+0x868>)
 80038f0:	e000      	b.n	80038f4 <HAL_ADC_ConfigChannel+0x748>
 80038f2:	4a43      	ldr	r2, [pc, #268]	@ (8003a00 <HAL_ADC_ConfigChannel+0x854>)
 80038f4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80038f8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80038fc:	4619      	mov	r1, r3
 80038fe:	4610      	mov	r0, r2
 8003900:	f7ff f8d5 	bl	8002aae <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003904:	4b44      	ldr	r3, [pc, #272]	@ (8003a18 <HAL_ADC_ConfigChannel+0x86c>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	099b      	lsrs	r3, r3, #6
 800390a:	4a44      	ldr	r2, [pc, #272]	@ (8003a1c <HAL_ADC_ConfigChannel+0x870>)
 800390c:	fba2 2303 	umull	r2, r3, r2, r3
 8003910:	099b      	lsrs	r3, r3, #6
 8003912:	1c5a      	adds	r2, r3, #1
 8003914:	4613      	mov	r3, r2
 8003916:	005b      	lsls	r3, r3, #1
 8003918:	4413      	add	r3, r2
 800391a:	009b      	lsls	r3, r3, #2
 800391c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800391e:	e002      	b.n	8003926 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	3b01      	subs	r3, #1
 8003924:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d1f9      	bne.n	8003920 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800392c:	e05a      	b.n	80039e4 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a3b      	ldr	r2, [pc, #236]	@ (8003a20 <HAL_ADC_ConfigChannel+0x874>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d125      	bne.n	8003984 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003938:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800393c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003940:	2b00      	cmp	r3, #0
 8003942:	d11f      	bne.n	8003984 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4a31      	ldr	r2, [pc, #196]	@ (8003a10 <HAL_ADC_ConfigChannel+0x864>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d104      	bne.n	8003958 <HAL_ADC_ConfigChannel+0x7ac>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4a34      	ldr	r2, [pc, #208]	@ (8003a24 <HAL_ADC_ConfigChannel+0x878>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d047      	beq.n	80039e8 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003960:	d004      	beq.n	800396c <HAL_ADC_ConfigChannel+0x7c0>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4a2a      	ldr	r2, [pc, #168]	@ (8003a10 <HAL_ADC_ConfigChannel+0x864>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d101      	bne.n	8003970 <HAL_ADC_ConfigChannel+0x7c4>
 800396c:	4a29      	ldr	r2, [pc, #164]	@ (8003a14 <HAL_ADC_ConfigChannel+0x868>)
 800396e:	e000      	b.n	8003972 <HAL_ADC_ConfigChannel+0x7c6>
 8003970:	4a23      	ldr	r2, [pc, #140]	@ (8003a00 <HAL_ADC_ConfigChannel+0x854>)
 8003972:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003976:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800397a:	4619      	mov	r1, r3
 800397c:	4610      	mov	r0, r2
 800397e:	f7ff f896 	bl	8002aae <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003982:	e031      	b.n	80039e8 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4a27      	ldr	r2, [pc, #156]	@ (8003a28 <HAL_ADC_ConfigChannel+0x87c>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d12d      	bne.n	80039ea <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800398e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003992:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003996:	2b00      	cmp	r3, #0
 8003998:	d127      	bne.n	80039ea <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4a1c      	ldr	r2, [pc, #112]	@ (8003a10 <HAL_ADC_ConfigChannel+0x864>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d022      	beq.n	80039ea <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80039ac:	d004      	beq.n	80039b8 <HAL_ADC_ConfigChannel+0x80c>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a17      	ldr	r2, [pc, #92]	@ (8003a10 <HAL_ADC_ConfigChannel+0x864>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d101      	bne.n	80039bc <HAL_ADC_ConfigChannel+0x810>
 80039b8:	4a16      	ldr	r2, [pc, #88]	@ (8003a14 <HAL_ADC_ConfigChannel+0x868>)
 80039ba:	e000      	b.n	80039be <HAL_ADC_ConfigChannel+0x812>
 80039bc:	4a10      	ldr	r2, [pc, #64]	@ (8003a00 <HAL_ADC_ConfigChannel+0x854>)
 80039be:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80039c2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80039c6:	4619      	mov	r1, r3
 80039c8:	4610      	mov	r0, r2
 80039ca:	f7ff f870 	bl	8002aae <LL_ADC_SetCommonPathInternalCh>
 80039ce:	e00c      	b.n	80039ea <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039d4:	f043 0220 	orr.w	r2, r3, #32
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80039dc:	2301      	movs	r3, #1
 80039de:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 80039e2:	e002      	b.n	80039ea <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80039e4:	bf00      	nop
 80039e6:	e000      	b.n	80039ea <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80039e8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2200      	movs	r2, #0
 80039ee:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80039f2:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80039f6:	4618      	mov	r0, r3
 80039f8:	37d8      	adds	r7, #216	@ 0xd8
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bd80      	pop	{r7, pc}
 80039fe:	bf00      	nop
 8003a00:	50000700 	.word	0x50000700
 8003a04:	c3210000 	.word	0xc3210000
 8003a08:	90c00010 	.word	0x90c00010
 8003a0c:	50000600 	.word	0x50000600
 8003a10:	50000100 	.word	0x50000100
 8003a14:	50000300 	.word	0x50000300
 8003a18:	20000210 	.word	0x20000210
 8003a1c:	053e2d63 	.word	0x053e2d63
 8003a20:	c7520000 	.word	0xc7520000
 8003a24:	50000500 	.word	0x50000500
 8003a28:	cb840000 	.word	0xcb840000

08003a2c <LL_ADC_IsEnabled>:
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	b083      	sub	sp, #12
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	689b      	ldr	r3, [r3, #8]
 8003a38:	f003 0301 	and.w	r3, r3, #1
 8003a3c:	2b01      	cmp	r3, #1
 8003a3e:	d101      	bne.n	8003a44 <LL_ADC_IsEnabled+0x18>
 8003a40:	2301      	movs	r3, #1
 8003a42:	e000      	b.n	8003a46 <LL_ADC_IsEnabled+0x1a>
 8003a44:	2300      	movs	r3, #0
}
 8003a46:	4618      	mov	r0, r3
 8003a48:	370c      	adds	r7, #12
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a50:	4770      	bx	lr

08003a52 <LL_ADC_REG_IsConversionOngoing>:
{
 8003a52:	b480      	push	{r7}
 8003a54:	b083      	sub	sp, #12
 8003a56:	af00      	add	r7, sp, #0
 8003a58:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	689b      	ldr	r3, [r3, #8]
 8003a5e:	f003 0304 	and.w	r3, r3, #4
 8003a62:	2b04      	cmp	r3, #4
 8003a64:	d101      	bne.n	8003a6a <LL_ADC_REG_IsConversionOngoing+0x18>
 8003a66:	2301      	movs	r3, #1
 8003a68:	e000      	b.n	8003a6c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003a6a:	2300      	movs	r3, #0
}
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	370c      	adds	r7, #12
 8003a70:	46bd      	mov	sp, r7
 8003a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a76:	4770      	bx	lr

08003a78 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8003a78:	b590      	push	{r4, r7, lr}
 8003a7a:	b0a1      	sub	sp, #132	@ 0x84
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
 8003a80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003a82:	2300      	movs	r3, #0
 8003a84:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003a8e:	2b01      	cmp	r3, #1
 8003a90:	d101      	bne.n	8003a96 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003a92:	2302      	movs	r3, #2
 8003a94:	e0e7      	b.n	8003c66 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2201      	movs	r2, #1
 8003a9a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003aae:	d102      	bne.n	8003ab6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003ab0:	4b6f      	ldr	r3, [pc, #444]	@ (8003c70 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003ab2:	60bb      	str	r3, [r7, #8]
 8003ab4:	e009      	b.n	8003aca <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4a6e      	ldr	r2, [pc, #440]	@ (8003c74 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d102      	bne.n	8003ac6 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8003ac0:	4b6d      	ldr	r3, [pc, #436]	@ (8003c78 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003ac2:	60bb      	str	r3, [r7, #8]
 8003ac4:	e001      	b.n	8003aca <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8003aca:	68bb      	ldr	r3, [r7, #8]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d10b      	bne.n	8003ae8 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ad4:	f043 0220 	orr.w	r2, r3, #32
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	e0be      	b.n	8003c66 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	4618      	mov	r0, r3
 8003aec:	f7ff ffb1 	bl	8003a52 <LL_ADC_REG_IsConversionOngoing>
 8003af0:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4618      	mov	r0, r3
 8003af8:	f7ff ffab 	bl	8003a52 <LL_ADC_REG_IsConversionOngoing>
 8003afc:	4603      	mov	r3, r0
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	f040 80a0 	bne.w	8003c44 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8003b04:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	f040 809c 	bne.w	8003c44 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003b14:	d004      	beq.n	8003b20 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a55      	ldr	r2, [pc, #340]	@ (8003c70 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d101      	bne.n	8003b24 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8003b20:	4b56      	ldr	r3, [pc, #344]	@ (8003c7c <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8003b22:	e000      	b.n	8003b26 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8003b24:	4b56      	ldr	r3, [pc, #344]	@ (8003c80 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8003b26:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d04b      	beq.n	8003bc8 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003b30:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003b32:	689b      	ldr	r3, [r3, #8]
 8003b34:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	6859      	ldr	r1, [r3, #4]
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003b42:	035b      	lsls	r3, r3, #13
 8003b44:	430b      	orrs	r3, r1
 8003b46:	431a      	orrs	r2, r3
 8003b48:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003b4a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003b54:	d004      	beq.n	8003b60 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4a45      	ldr	r2, [pc, #276]	@ (8003c70 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d10f      	bne.n	8003b80 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8003b60:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003b64:	f7ff ff62 	bl	8003a2c <LL_ADC_IsEnabled>
 8003b68:	4604      	mov	r4, r0
 8003b6a:	4841      	ldr	r0, [pc, #260]	@ (8003c70 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003b6c:	f7ff ff5e 	bl	8003a2c <LL_ADC_IsEnabled>
 8003b70:	4603      	mov	r3, r0
 8003b72:	4323      	orrs	r3, r4
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	bf0c      	ite	eq
 8003b78:	2301      	moveq	r3, #1
 8003b7a:	2300      	movne	r3, #0
 8003b7c:	b2db      	uxtb	r3, r3
 8003b7e:	e012      	b.n	8003ba6 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8003b80:	483c      	ldr	r0, [pc, #240]	@ (8003c74 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003b82:	f7ff ff53 	bl	8003a2c <LL_ADC_IsEnabled>
 8003b86:	4604      	mov	r4, r0
 8003b88:	483b      	ldr	r0, [pc, #236]	@ (8003c78 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003b8a:	f7ff ff4f 	bl	8003a2c <LL_ADC_IsEnabled>
 8003b8e:	4603      	mov	r3, r0
 8003b90:	431c      	orrs	r4, r3
 8003b92:	483c      	ldr	r0, [pc, #240]	@ (8003c84 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003b94:	f7ff ff4a 	bl	8003a2c <LL_ADC_IsEnabled>
 8003b98:	4603      	mov	r3, r0
 8003b9a:	4323      	orrs	r3, r4
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	bf0c      	ite	eq
 8003ba0:	2301      	moveq	r3, #1
 8003ba2:	2300      	movne	r3, #0
 8003ba4:	b2db      	uxtb	r3, r3
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d056      	beq.n	8003c58 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003baa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003bac:	689b      	ldr	r3, [r3, #8]
 8003bae:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003bb2:	f023 030f 	bic.w	r3, r3, #15
 8003bb6:	683a      	ldr	r2, [r7, #0]
 8003bb8:	6811      	ldr	r1, [r2, #0]
 8003bba:	683a      	ldr	r2, [r7, #0]
 8003bbc:	6892      	ldr	r2, [r2, #8]
 8003bbe:	430a      	orrs	r2, r1
 8003bc0:	431a      	orrs	r2, r3
 8003bc2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003bc4:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003bc6:	e047      	b.n	8003c58 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003bc8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003bca:	689b      	ldr	r3, [r3, #8]
 8003bcc:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003bd0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003bd2:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003bdc:	d004      	beq.n	8003be8 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a23      	ldr	r2, [pc, #140]	@ (8003c70 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d10f      	bne.n	8003c08 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8003be8:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003bec:	f7ff ff1e 	bl	8003a2c <LL_ADC_IsEnabled>
 8003bf0:	4604      	mov	r4, r0
 8003bf2:	481f      	ldr	r0, [pc, #124]	@ (8003c70 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003bf4:	f7ff ff1a 	bl	8003a2c <LL_ADC_IsEnabled>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	4323      	orrs	r3, r4
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	bf0c      	ite	eq
 8003c00:	2301      	moveq	r3, #1
 8003c02:	2300      	movne	r3, #0
 8003c04:	b2db      	uxtb	r3, r3
 8003c06:	e012      	b.n	8003c2e <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8003c08:	481a      	ldr	r0, [pc, #104]	@ (8003c74 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003c0a:	f7ff ff0f 	bl	8003a2c <LL_ADC_IsEnabled>
 8003c0e:	4604      	mov	r4, r0
 8003c10:	4819      	ldr	r0, [pc, #100]	@ (8003c78 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003c12:	f7ff ff0b 	bl	8003a2c <LL_ADC_IsEnabled>
 8003c16:	4603      	mov	r3, r0
 8003c18:	431c      	orrs	r4, r3
 8003c1a:	481a      	ldr	r0, [pc, #104]	@ (8003c84 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003c1c:	f7ff ff06 	bl	8003a2c <LL_ADC_IsEnabled>
 8003c20:	4603      	mov	r3, r0
 8003c22:	4323      	orrs	r3, r4
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	bf0c      	ite	eq
 8003c28:	2301      	moveq	r3, #1
 8003c2a:	2300      	movne	r3, #0
 8003c2c:	b2db      	uxtb	r3, r3
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d012      	beq.n	8003c58 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003c32:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003c34:	689b      	ldr	r3, [r3, #8]
 8003c36:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003c3a:	f023 030f 	bic.w	r3, r3, #15
 8003c3e:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8003c40:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003c42:	e009      	b.n	8003c58 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c48:	f043 0220 	orr.w	r2, r3, #32
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003c50:	2301      	movs	r3, #1
 8003c52:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8003c56:	e000      	b.n	8003c5a <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003c58:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003c62:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8003c66:	4618      	mov	r0, r3
 8003c68:	3784      	adds	r7, #132	@ 0x84
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	bd90      	pop	{r4, r7, pc}
 8003c6e:	bf00      	nop
 8003c70:	50000100 	.word	0x50000100
 8003c74:	50000400 	.word	0x50000400
 8003c78:	50000500 	.word	0x50000500
 8003c7c:	50000300 	.word	0x50000300
 8003c80:	50000700 	.word	0x50000700
 8003c84:	50000600 	.word	0x50000600

08003c88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b085      	sub	sp, #20
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	f003 0307 	and.w	r3, r3, #7
 8003c96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003c98:	4b0c      	ldr	r3, [pc, #48]	@ (8003ccc <__NVIC_SetPriorityGrouping+0x44>)
 8003c9a:	68db      	ldr	r3, [r3, #12]
 8003c9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003c9e:	68ba      	ldr	r2, [r7, #8]
 8003ca0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003ca4:	4013      	ands	r3, r2
 8003ca6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003cac:	68bb      	ldr	r3, [r7, #8]
 8003cae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003cb0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003cb4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003cb8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003cba:	4a04      	ldr	r2, [pc, #16]	@ (8003ccc <__NVIC_SetPriorityGrouping+0x44>)
 8003cbc:	68bb      	ldr	r3, [r7, #8]
 8003cbe:	60d3      	str	r3, [r2, #12]
}
 8003cc0:	bf00      	nop
 8003cc2:	3714      	adds	r7, #20
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cca:	4770      	bx	lr
 8003ccc:	e000ed00 	.word	0xe000ed00

08003cd0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003cd4:	4b04      	ldr	r3, [pc, #16]	@ (8003ce8 <__NVIC_GetPriorityGrouping+0x18>)
 8003cd6:	68db      	ldr	r3, [r3, #12]
 8003cd8:	0a1b      	lsrs	r3, r3, #8
 8003cda:	f003 0307 	and.w	r3, r3, #7
}
 8003cde:	4618      	mov	r0, r3
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce6:	4770      	bx	lr
 8003ce8:	e000ed00 	.word	0xe000ed00

08003cec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003cec:	b480      	push	{r7}
 8003cee:	b083      	sub	sp, #12
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003cf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	db0b      	blt.n	8003d16 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003cfe:	79fb      	ldrb	r3, [r7, #7]
 8003d00:	f003 021f 	and.w	r2, r3, #31
 8003d04:	4907      	ldr	r1, [pc, #28]	@ (8003d24 <__NVIC_EnableIRQ+0x38>)
 8003d06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d0a:	095b      	lsrs	r3, r3, #5
 8003d0c:	2001      	movs	r0, #1
 8003d0e:	fa00 f202 	lsl.w	r2, r0, r2
 8003d12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003d16:	bf00      	nop
 8003d18:	370c      	adds	r7, #12
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d20:	4770      	bx	lr
 8003d22:	bf00      	nop
 8003d24:	e000e100 	.word	0xe000e100

08003d28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b083      	sub	sp, #12
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	4603      	mov	r3, r0
 8003d30:	6039      	str	r1, [r7, #0]
 8003d32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	db0a      	blt.n	8003d52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	b2da      	uxtb	r2, r3
 8003d40:	490c      	ldr	r1, [pc, #48]	@ (8003d74 <__NVIC_SetPriority+0x4c>)
 8003d42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d46:	0112      	lsls	r2, r2, #4
 8003d48:	b2d2      	uxtb	r2, r2
 8003d4a:	440b      	add	r3, r1
 8003d4c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003d50:	e00a      	b.n	8003d68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	b2da      	uxtb	r2, r3
 8003d56:	4908      	ldr	r1, [pc, #32]	@ (8003d78 <__NVIC_SetPriority+0x50>)
 8003d58:	79fb      	ldrb	r3, [r7, #7]
 8003d5a:	f003 030f 	and.w	r3, r3, #15
 8003d5e:	3b04      	subs	r3, #4
 8003d60:	0112      	lsls	r2, r2, #4
 8003d62:	b2d2      	uxtb	r2, r2
 8003d64:	440b      	add	r3, r1
 8003d66:	761a      	strb	r2, [r3, #24]
}
 8003d68:	bf00      	nop
 8003d6a:	370c      	adds	r7, #12
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d72:	4770      	bx	lr
 8003d74:	e000e100 	.word	0xe000e100
 8003d78:	e000ed00 	.word	0xe000ed00

08003d7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	b089      	sub	sp, #36	@ 0x24
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	60f8      	str	r0, [r7, #12]
 8003d84:	60b9      	str	r1, [r7, #8]
 8003d86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	f003 0307 	and.w	r3, r3, #7
 8003d8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003d90:	69fb      	ldr	r3, [r7, #28]
 8003d92:	f1c3 0307 	rsb	r3, r3, #7
 8003d96:	2b04      	cmp	r3, #4
 8003d98:	bf28      	it	cs
 8003d9a:	2304      	movcs	r3, #4
 8003d9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d9e:	69fb      	ldr	r3, [r7, #28]
 8003da0:	3304      	adds	r3, #4
 8003da2:	2b06      	cmp	r3, #6
 8003da4:	d902      	bls.n	8003dac <NVIC_EncodePriority+0x30>
 8003da6:	69fb      	ldr	r3, [r7, #28]
 8003da8:	3b03      	subs	r3, #3
 8003daa:	e000      	b.n	8003dae <NVIC_EncodePriority+0x32>
 8003dac:	2300      	movs	r3, #0
 8003dae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003db0:	f04f 32ff 	mov.w	r2, #4294967295
 8003db4:	69bb      	ldr	r3, [r7, #24]
 8003db6:	fa02 f303 	lsl.w	r3, r2, r3
 8003dba:	43da      	mvns	r2, r3
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	401a      	ands	r2, r3
 8003dc0:	697b      	ldr	r3, [r7, #20]
 8003dc2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003dc4:	f04f 31ff 	mov.w	r1, #4294967295
 8003dc8:	697b      	ldr	r3, [r7, #20]
 8003dca:	fa01 f303 	lsl.w	r3, r1, r3
 8003dce:	43d9      	mvns	r1, r3
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003dd4:	4313      	orrs	r3, r2
         );
}
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	3724      	adds	r7, #36	@ 0x24
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de0:	4770      	bx	lr
	...

08003de4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b082      	sub	sp, #8
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	3b01      	subs	r3, #1
 8003df0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003df4:	d301      	bcc.n	8003dfa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003df6:	2301      	movs	r3, #1
 8003df8:	e00f      	b.n	8003e1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003dfa:	4a0a      	ldr	r2, [pc, #40]	@ (8003e24 <SysTick_Config+0x40>)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	3b01      	subs	r3, #1
 8003e00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003e02:	210f      	movs	r1, #15
 8003e04:	f04f 30ff 	mov.w	r0, #4294967295
 8003e08:	f7ff ff8e 	bl	8003d28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003e0c:	4b05      	ldr	r3, [pc, #20]	@ (8003e24 <SysTick_Config+0x40>)
 8003e0e:	2200      	movs	r2, #0
 8003e10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003e12:	4b04      	ldr	r3, [pc, #16]	@ (8003e24 <SysTick_Config+0x40>)
 8003e14:	2207      	movs	r2, #7
 8003e16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003e18:	2300      	movs	r3, #0
}
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	3708      	adds	r7, #8
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bd80      	pop	{r7, pc}
 8003e22:	bf00      	nop
 8003e24:	e000e010 	.word	0xe000e010

08003e28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b082      	sub	sp, #8
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003e30:	6878      	ldr	r0, [r7, #4]
 8003e32:	f7ff ff29 	bl	8003c88 <__NVIC_SetPriorityGrouping>
}
 8003e36:	bf00      	nop
 8003e38:	3708      	adds	r7, #8
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bd80      	pop	{r7, pc}

08003e3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e3e:	b580      	push	{r7, lr}
 8003e40:	b086      	sub	sp, #24
 8003e42:	af00      	add	r7, sp, #0
 8003e44:	4603      	mov	r3, r0
 8003e46:	60b9      	str	r1, [r7, #8]
 8003e48:	607a      	str	r2, [r7, #4]
 8003e4a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003e4c:	f7ff ff40 	bl	8003cd0 <__NVIC_GetPriorityGrouping>
 8003e50:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003e52:	687a      	ldr	r2, [r7, #4]
 8003e54:	68b9      	ldr	r1, [r7, #8]
 8003e56:	6978      	ldr	r0, [r7, #20]
 8003e58:	f7ff ff90 	bl	8003d7c <NVIC_EncodePriority>
 8003e5c:	4602      	mov	r2, r0
 8003e5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e62:	4611      	mov	r1, r2
 8003e64:	4618      	mov	r0, r3
 8003e66:	f7ff ff5f 	bl	8003d28 <__NVIC_SetPriority>
}
 8003e6a:	bf00      	nop
 8003e6c:	3718      	adds	r7, #24
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	bd80      	pop	{r7, pc}

08003e72 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e72:	b580      	push	{r7, lr}
 8003e74:	b082      	sub	sp, #8
 8003e76:	af00      	add	r7, sp, #0
 8003e78:	4603      	mov	r3, r0
 8003e7a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003e7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e80:	4618      	mov	r0, r3
 8003e82:	f7ff ff33 	bl	8003cec <__NVIC_EnableIRQ>
}
 8003e86:	bf00      	nop
 8003e88:	3708      	adds	r7, #8
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bd80      	pop	{r7, pc}

08003e8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003e8e:	b580      	push	{r7, lr}
 8003e90:	b082      	sub	sp, #8
 8003e92:	af00      	add	r7, sp, #0
 8003e94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003e96:	6878      	ldr	r0, [r7, #4]
 8003e98:	f7ff ffa4 	bl	8003de4 <SysTick_Config>
 8003e9c:	4603      	mov	r3, r0
}
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	3708      	adds	r7, #8
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bd80      	pop	{r7, pc}
	...

08003ea8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b084      	sub	sp, #16
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d101      	bne.n	8003eba <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	e08d      	b.n	8003fd6 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	461a      	mov	r2, r3
 8003ec0:	4b47      	ldr	r3, [pc, #284]	@ (8003fe0 <HAL_DMA_Init+0x138>)
 8003ec2:	429a      	cmp	r2, r3
 8003ec4:	d80f      	bhi.n	8003ee6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	461a      	mov	r2, r3
 8003ecc:	4b45      	ldr	r3, [pc, #276]	@ (8003fe4 <HAL_DMA_Init+0x13c>)
 8003ece:	4413      	add	r3, r2
 8003ed0:	4a45      	ldr	r2, [pc, #276]	@ (8003fe8 <HAL_DMA_Init+0x140>)
 8003ed2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ed6:	091b      	lsrs	r3, r3, #4
 8003ed8:	009a      	lsls	r2, r3, #2
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	4a42      	ldr	r2, [pc, #264]	@ (8003fec <HAL_DMA_Init+0x144>)
 8003ee2:	641a      	str	r2, [r3, #64]	@ 0x40
 8003ee4:	e00e      	b.n	8003f04 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	461a      	mov	r2, r3
 8003eec:	4b40      	ldr	r3, [pc, #256]	@ (8003ff0 <HAL_DMA_Init+0x148>)
 8003eee:	4413      	add	r3, r2
 8003ef0:	4a3d      	ldr	r2, [pc, #244]	@ (8003fe8 <HAL_DMA_Init+0x140>)
 8003ef2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ef6:	091b      	lsrs	r3, r3, #4
 8003ef8:	009a      	lsls	r2, r3, #2
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	4a3c      	ldr	r2, [pc, #240]	@ (8003ff4 <HAL_DMA_Init+0x14c>)
 8003f02:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2202      	movs	r2, #2
 8003f08:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8003f1a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f1e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003f28:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	691b      	ldr	r3, [r3, #16]
 8003f2e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f34:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	699b      	ldr	r3, [r3, #24]
 8003f3a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f40:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6a1b      	ldr	r3, [r3, #32]
 8003f46:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003f48:	68fa      	ldr	r2, [r7, #12]
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	68fa      	ldr	r2, [r7, #12]
 8003f54:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003f56:	6878      	ldr	r0, [r7, #4]
 8003f58:	f000 fa82 	bl	8004460 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	689b      	ldr	r3, [r3, #8]
 8003f60:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003f64:	d102      	bne.n	8003f6c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2200      	movs	r2, #0
 8003f6a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	685a      	ldr	r2, [r3, #4]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f74:	b2d2      	uxtb	r2, r2
 8003f76:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f7c:	687a      	ldr	r2, [r7, #4]
 8003f7e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003f80:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d010      	beq.n	8003fac <HAL_DMA_Init+0x104>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	2b04      	cmp	r3, #4
 8003f90:	d80c      	bhi.n	8003fac <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003f92:	6878      	ldr	r0, [r7, #4]
 8003f94:	f000 faa2 	bl	80044dc <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fa4:	687a      	ldr	r2, [r7, #4]
 8003fa6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003fa8:	605a      	str	r2, [r3, #4]
 8003faa:	e008      	b.n	8003fbe <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2201      	movs	r2, #1
 8003fc8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2200      	movs	r2, #0
 8003fd0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003fd4:	2300      	movs	r3, #0
}
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	3710      	adds	r7, #16
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bd80      	pop	{r7, pc}
 8003fde:	bf00      	nop
 8003fe0:	40020407 	.word	0x40020407
 8003fe4:	bffdfff8 	.word	0xbffdfff8
 8003fe8:	cccccccd 	.word	0xcccccccd
 8003fec:	40020000 	.word	0x40020000
 8003ff0:	bffdfbf8 	.word	0xbffdfbf8
 8003ff4:	40020400 	.word	0x40020400

08003ff8 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b086      	sub	sp, #24
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	60f8      	str	r0, [r7, #12]
 8004000:	60b9      	str	r1, [r7, #8]
 8004002:	607a      	str	r2, [r7, #4]
 8004004:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004006:	2300      	movs	r3, #0
 8004008:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004010:	2b01      	cmp	r3, #1
 8004012:	d101      	bne.n	8004018 <HAL_DMA_Start_IT+0x20>
 8004014:	2302      	movs	r3, #2
 8004016:	e066      	b.n	80040e6 <HAL_DMA_Start_IT+0xee>
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	2201      	movs	r2, #1
 800401c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004026:	b2db      	uxtb	r3, r3
 8004028:	2b01      	cmp	r3, #1
 800402a:	d155      	bne.n	80040d8 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	2202      	movs	r2, #2
 8004030:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	2200      	movs	r2, #0
 8004038:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	681a      	ldr	r2, [r3, #0]
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f022 0201 	bic.w	r2, r2, #1
 8004048:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	687a      	ldr	r2, [r7, #4]
 800404e:	68b9      	ldr	r1, [r7, #8]
 8004050:	68f8      	ldr	r0, [r7, #12]
 8004052:	f000 f9c7 	bl	80043e4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800405a:	2b00      	cmp	r3, #0
 800405c:	d008      	beq.n	8004070 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	681a      	ldr	r2, [r3, #0]
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f042 020e 	orr.w	r2, r2, #14
 800406c:	601a      	str	r2, [r3, #0]
 800406e:	e00f      	b.n	8004090 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	681a      	ldr	r2, [r3, #0]
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f022 0204 	bic.w	r2, r2, #4
 800407e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	681a      	ldr	r2, [r3, #0]
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f042 020a 	orr.w	r2, r2, #10
 800408e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800409a:	2b00      	cmp	r3, #0
 800409c:	d007      	beq.n	80040ae <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80040a2:	681a      	ldr	r2, [r3, #0]
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80040a8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80040ac:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d007      	beq.n	80040c6 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040ba:	681a      	ldr	r2, [r3, #0]
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040c0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80040c4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	681a      	ldr	r2, [r3, #0]
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f042 0201 	orr.w	r2, r2, #1
 80040d4:	601a      	str	r2, [r3, #0]
 80040d6:	e005      	b.n	80040e4 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	2200      	movs	r2, #0
 80040dc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80040e0:	2302      	movs	r3, #2
 80040e2:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80040e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80040e6:	4618      	mov	r0, r3
 80040e8:	3718      	adds	r7, #24
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bd80      	pop	{r7, pc}

080040ee <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80040ee:	b480      	push	{r7}
 80040f0:	b085      	sub	sp, #20
 80040f2:	af00      	add	r7, sp, #0
 80040f4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80040f6:	2300      	movs	r3, #0
 80040f8:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004100:	b2db      	uxtb	r3, r3
 8004102:	2b02      	cmp	r3, #2
 8004104:	d005      	beq.n	8004112 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2204      	movs	r2, #4
 800410a:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800410c:	2301      	movs	r3, #1
 800410e:	73fb      	strb	r3, [r7, #15]
 8004110:	e037      	b.n	8004182 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	681a      	ldr	r2, [r3, #0]
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f022 020e 	bic.w	r2, r2, #14
 8004120:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004126:	681a      	ldr	r2, [r3, #0]
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800412c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004130:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	681a      	ldr	r2, [r3, #0]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f022 0201 	bic.w	r2, r2, #1
 8004140:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004146:	f003 021f 	and.w	r2, r3, #31
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800414e:	2101      	movs	r1, #1
 8004150:	fa01 f202 	lsl.w	r2, r1, r2
 8004154:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800415a:	687a      	ldr	r2, [r7, #4]
 800415c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800415e:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004164:	2b00      	cmp	r3, #0
 8004166:	d00c      	beq.n	8004182 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800416c:	681a      	ldr	r2, [r3, #0]
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004172:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004176:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800417c:	687a      	ldr	r2, [r7, #4]
 800417e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004180:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2201      	movs	r2, #1
 8004186:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2200      	movs	r2, #0
 800418e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8004192:	7bfb      	ldrb	r3, [r7, #15]
}
 8004194:	4618      	mov	r0, r3
 8004196:	3714      	adds	r7, #20
 8004198:	46bd      	mov	sp, r7
 800419a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419e:	4770      	bx	lr

080041a0 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b084      	sub	sp, #16
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80041a8:	2300      	movs	r3, #0
 80041aa:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80041b2:	b2db      	uxtb	r3, r3
 80041b4:	2b02      	cmp	r3, #2
 80041b6:	d00d      	beq.n	80041d4 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2204      	movs	r2, #4
 80041bc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2201      	movs	r2, #1
 80041c2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2200      	movs	r2, #0
 80041ca:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 80041ce:	2301      	movs	r3, #1
 80041d0:	73fb      	strb	r3, [r7, #15]
 80041d2:	e047      	b.n	8004264 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	681a      	ldr	r2, [r3, #0]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f022 020e 	bic.w	r2, r2, #14
 80041e2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	681a      	ldr	r2, [r3, #0]
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f022 0201 	bic.w	r2, r2, #1
 80041f2:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80041f8:	681a      	ldr	r2, [r3, #0]
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80041fe:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004202:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004208:	f003 021f 	and.w	r2, r3, #31
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004210:	2101      	movs	r1, #1
 8004212:	fa01 f202 	lsl.w	r2, r1, r2
 8004216:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800421c:	687a      	ldr	r2, [r7, #4]
 800421e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004220:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004226:	2b00      	cmp	r3, #0
 8004228:	d00c      	beq.n	8004244 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800422e:	681a      	ldr	r2, [r3, #0]
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004234:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004238:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800423e:	687a      	ldr	r2, [r7, #4]
 8004240:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004242:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2201      	movs	r2, #1
 8004248:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2200      	movs	r2, #0
 8004250:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004258:	2b00      	cmp	r3, #0
 800425a:	d003      	beq.n	8004264 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004260:	6878      	ldr	r0, [r7, #4]
 8004262:	4798      	blx	r3
    }
  }
  return status;
 8004264:	7bfb      	ldrb	r3, [r7, #15]
}
 8004266:	4618      	mov	r0, r3
 8004268:	3710      	adds	r7, #16
 800426a:	46bd      	mov	sp, r7
 800426c:	bd80      	pop	{r7, pc}

0800426e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800426e:	b580      	push	{r7, lr}
 8004270:	b084      	sub	sp, #16
 8004272:	af00      	add	r7, sp, #0
 8004274:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800428a:	f003 031f 	and.w	r3, r3, #31
 800428e:	2204      	movs	r2, #4
 8004290:	409a      	lsls	r2, r3
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	4013      	ands	r3, r2
 8004296:	2b00      	cmp	r3, #0
 8004298:	d026      	beq.n	80042e8 <HAL_DMA_IRQHandler+0x7a>
 800429a:	68bb      	ldr	r3, [r7, #8]
 800429c:	f003 0304 	and.w	r3, r3, #4
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d021      	beq.n	80042e8 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f003 0320 	and.w	r3, r3, #32
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d107      	bne.n	80042c2 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	681a      	ldr	r2, [r3, #0]
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f022 0204 	bic.w	r2, r2, #4
 80042c0:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042c6:	f003 021f 	and.w	r2, r3, #31
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042ce:	2104      	movs	r1, #4
 80042d0:	fa01 f202 	lsl.w	r2, r1, r2
 80042d4:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d071      	beq.n	80043c2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042e2:	6878      	ldr	r0, [r7, #4]
 80042e4:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80042e6:	e06c      	b.n	80043c2 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042ec:	f003 031f 	and.w	r3, r3, #31
 80042f0:	2202      	movs	r2, #2
 80042f2:	409a      	lsls	r2, r3
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	4013      	ands	r3, r2
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d02e      	beq.n	800435a <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80042fc:	68bb      	ldr	r3, [r7, #8]
 80042fe:	f003 0302 	and.w	r3, r3, #2
 8004302:	2b00      	cmp	r3, #0
 8004304:	d029      	beq.n	800435a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f003 0320 	and.w	r3, r3, #32
 8004310:	2b00      	cmp	r3, #0
 8004312:	d10b      	bne.n	800432c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	681a      	ldr	r2, [r3, #0]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f022 020a 	bic.w	r2, r2, #10
 8004322:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2201      	movs	r2, #1
 8004328:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004330:	f003 021f 	and.w	r2, r3, #31
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004338:	2102      	movs	r1, #2
 800433a:	fa01 f202 	lsl.w	r2, r1, r2
 800433e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2200      	movs	r2, #0
 8004344:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800434c:	2b00      	cmp	r3, #0
 800434e:	d038      	beq.n	80043c2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004354:	6878      	ldr	r0, [r7, #4]
 8004356:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004358:	e033      	b.n	80043c2 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800435e:	f003 031f 	and.w	r3, r3, #31
 8004362:	2208      	movs	r2, #8
 8004364:	409a      	lsls	r2, r3
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	4013      	ands	r3, r2
 800436a:	2b00      	cmp	r3, #0
 800436c:	d02a      	beq.n	80043c4 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800436e:	68bb      	ldr	r3, [r7, #8]
 8004370:	f003 0308 	and.w	r3, r3, #8
 8004374:	2b00      	cmp	r3, #0
 8004376:	d025      	beq.n	80043c4 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	681a      	ldr	r2, [r3, #0]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f022 020e 	bic.w	r2, r2, #14
 8004386:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800438c:	f003 021f 	and.w	r2, r3, #31
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004394:	2101      	movs	r1, #1
 8004396:	fa01 f202 	lsl.w	r2, r1, r2
 800439a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2201      	movs	r2, #1
 80043a0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2201      	movs	r2, #1
 80043a6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2200      	movs	r2, #0
 80043ae:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d004      	beq.n	80043c4 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80043be:	6878      	ldr	r0, [r7, #4]
 80043c0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80043c2:	bf00      	nop
 80043c4:	bf00      	nop
}
 80043c6:	3710      	adds	r7, #16
 80043c8:	46bd      	mov	sp, r7
 80043ca:	bd80      	pop	{r7, pc}

080043cc <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80043cc:	b480      	push	{r7}
 80043ce:	b083      	sub	sp, #12
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 80043d8:	4618      	mov	r0, r3
 80043da:	370c      	adds	r7, #12
 80043dc:	46bd      	mov	sp, r7
 80043de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e2:	4770      	bx	lr

080043e4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80043e4:	b480      	push	{r7}
 80043e6:	b085      	sub	sp, #20
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	60f8      	str	r0, [r7, #12]
 80043ec:	60b9      	str	r1, [r7, #8]
 80043ee:	607a      	str	r2, [r7, #4]
 80043f0:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80043f6:	68fa      	ldr	r2, [r7, #12]
 80043f8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80043fa:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004400:	2b00      	cmp	r3, #0
 8004402:	d004      	beq.n	800440e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004408:	68fa      	ldr	r2, [r7, #12]
 800440a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800440c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004412:	f003 021f 	and.w	r2, r3, #31
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800441a:	2101      	movs	r1, #1
 800441c:	fa01 f202 	lsl.w	r2, r1, r2
 8004420:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	683a      	ldr	r2, [r7, #0]
 8004428:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	689b      	ldr	r3, [r3, #8]
 800442e:	2b10      	cmp	r3, #16
 8004430:	d108      	bne.n	8004444 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	687a      	ldr	r2, [r7, #4]
 8004438:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	68ba      	ldr	r2, [r7, #8]
 8004440:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004442:	e007      	b.n	8004454 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	68ba      	ldr	r2, [r7, #8]
 800444a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	687a      	ldr	r2, [r7, #4]
 8004452:	60da      	str	r2, [r3, #12]
}
 8004454:	bf00      	nop
 8004456:	3714      	adds	r7, #20
 8004458:	46bd      	mov	sp, r7
 800445a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445e:	4770      	bx	lr

08004460 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004460:	b480      	push	{r7}
 8004462:	b087      	sub	sp, #28
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	461a      	mov	r2, r3
 800446e:	4b16      	ldr	r3, [pc, #88]	@ (80044c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8004470:	429a      	cmp	r2, r3
 8004472:	d802      	bhi.n	800447a <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8004474:	4b15      	ldr	r3, [pc, #84]	@ (80044cc <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8004476:	617b      	str	r3, [r7, #20]
 8004478:	e001      	b.n	800447e <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800447a:	4b15      	ldr	r3, [pc, #84]	@ (80044d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800447c:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800447e:	697b      	ldr	r3, [r7, #20]
 8004480:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	b2db      	uxtb	r3, r3
 8004488:	3b08      	subs	r3, #8
 800448a:	4a12      	ldr	r2, [pc, #72]	@ (80044d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800448c:	fba2 2303 	umull	r2, r3, r2, r3
 8004490:	091b      	lsrs	r3, r3, #4
 8004492:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004498:	089b      	lsrs	r3, r3, #2
 800449a:	009a      	lsls	r2, r3, #2
 800449c:	693b      	ldr	r3, [r7, #16]
 800449e:	4413      	add	r3, r2
 80044a0:	461a      	mov	r2, r3
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	4a0b      	ldr	r2, [pc, #44]	@ (80044d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80044aa:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	f003 031f 	and.w	r3, r3, #31
 80044b2:	2201      	movs	r2, #1
 80044b4:	409a      	lsls	r2, r3
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80044ba:	bf00      	nop
 80044bc:	371c      	adds	r7, #28
 80044be:	46bd      	mov	sp, r7
 80044c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c4:	4770      	bx	lr
 80044c6:	bf00      	nop
 80044c8:	40020407 	.word	0x40020407
 80044cc:	40020800 	.word	0x40020800
 80044d0:	40020820 	.word	0x40020820
 80044d4:	cccccccd 	.word	0xcccccccd
 80044d8:	40020880 	.word	0x40020880

080044dc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80044dc:	b480      	push	{r7}
 80044de:	b085      	sub	sp, #20
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	b2db      	uxtb	r3, r3
 80044ea:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80044ec:	68fa      	ldr	r2, [r7, #12]
 80044ee:	4b0b      	ldr	r3, [pc, #44]	@ (800451c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80044f0:	4413      	add	r3, r2
 80044f2:	009b      	lsls	r3, r3, #2
 80044f4:	461a      	mov	r2, r3
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	4a08      	ldr	r2, [pc, #32]	@ (8004520 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80044fe:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	3b01      	subs	r3, #1
 8004504:	f003 031f 	and.w	r3, r3, #31
 8004508:	2201      	movs	r2, #1
 800450a:	409a      	lsls	r2, r3
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8004510:	bf00      	nop
 8004512:	3714      	adds	r7, #20
 8004514:	46bd      	mov	sp, r7
 8004516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451a:	4770      	bx	lr
 800451c:	1000823f 	.word	0x1000823f
 8004520:	40020940 	.word	0x40020940

08004524 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004524:	b480      	push	{r7}
 8004526:	b087      	sub	sp, #28
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
 800452c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800452e:	2300      	movs	r3, #0
 8004530:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004532:	e15a      	b.n	80047ea <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	681a      	ldr	r2, [r3, #0]
 8004538:	2101      	movs	r1, #1
 800453a:	697b      	ldr	r3, [r7, #20]
 800453c:	fa01 f303 	lsl.w	r3, r1, r3
 8004540:	4013      	ands	r3, r2
 8004542:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	2b00      	cmp	r3, #0
 8004548:	f000 814c 	beq.w	80047e4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	f003 0303 	and.w	r3, r3, #3
 8004554:	2b01      	cmp	r3, #1
 8004556:	d005      	beq.n	8004564 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004560:	2b02      	cmp	r3, #2
 8004562:	d130      	bne.n	80045c6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	689b      	ldr	r3, [r3, #8]
 8004568:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800456a:	697b      	ldr	r3, [r7, #20]
 800456c:	005b      	lsls	r3, r3, #1
 800456e:	2203      	movs	r2, #3
 8004570:	fa02 f303 	lsl.w	r3, r2, r3
 8004574:	43db      	mvns	r3, r3
 8004576:	693a      	ldr	r2, [r7, #16]
 8004578:	4013      	ands	r3, r2
 800457a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	68da      	ldr	r2, [r3, #12]
 8004580:	697b      	ldr	r3, [r7, #20]
 8004582:	005b      	lsls	r3, r3, #1
 8004584:	fa02 f303 	lsl.w	r3, r2, r3
 8004588:	693a      	ldr	r2, [r7, #16]
 800458a:	4313      	orrs	r3, r2
 800458c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	693a      	ldr	r2, [r7, #16]
 8004592:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800459a:	2201      	movs	r2, #1
 800459c:	697b      	ldr	r3, [r7, #20]
 800459e:	fa02 f303 	lsl.w	r3, r2, r3
 80045a2:	43db      	mvns	r3, r3
 80045a4:	693a      	ldr	r2, [r7, #16]
 80045a6:	4013      	ands	r3, r2
 80045a8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	685b      	ldr	r3, [r3, #4]
 80045ae:	091b      	lsrs	r3, r3, #4
 80045b0:	f003 0201 	and.w	r2, r3, #1
 80045b4:	697b      	ldr	r3, [r7, #20]
 80045b6:	fa02 f303 	lsl.w	r3, r2, r3
 80045ba:	693a      	ldr	r2, [r7, #16]
 80045bc:	4313      	orrs	r3, r2
 80045be:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	693a      	ldr	r2, [r7, #16]
 80045c4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	685b      	ldr	r3, [r3, #4]
 80045ca:	f003 0303 	and.w	r3, r3, #3
 80045ce:	2b03      	cmp	r3, #3
 80045d0:	d017      	beq.n	8004602 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	68db      	ldr	r3, [r3, #12]
 80045d6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80045d8:	697b      	ldr	r3, [r7, #20]
 80045da:	005b      	lsls	r3, r3, #1
 80045dc:	2203      	movs	r2, #3
 80045de:	fa02 f303 	lsl.w	r3, r2, r3
 80045e2:	43db      	mvns	r3, r3
 80045e4:	693a      	ldr	r2, [r7, #16]
 80045e6:	4013      	ands	r3, r2
 80045e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	689a      	ldr	r2, [r3, #8]
 80045ee:	697b      	ldr	r3, [r7, #20]
 80045f0:	005b      	lsls	r3, r3, #1
 80045f2:	fa02 f303 	lsl.w	r3, r2, r3
 80045f6:	693a      	ldr	r2, [r7, #16]
 80045f8:	4313      	orrs	r3, r2
 80045fa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	693a      	ldr	r2, [r7, #16]
 8004600:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	685b      	ldr	r3, [r3, #4]
 8004606:	f003 0303 	and.w	r3, r3, #3
 800460a:	2b02      	cmp	r3, #2
 800460c:	d123      	bne.n	8004656 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800460e:	697b      	ldr	r3, [r7, #20]
 8004610:	08da      	lsrs	r2, r3, #3
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	3208      	adds	r2, #8
 8004616:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800461a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800461c:	697b      	ldr	r3, [r7, #20]
 800461e:	f003 0307 	and.w	r3, r3, #7
 8004622:	009b      	lsls	r3, r3, #2
 8004624:	220f      	movs	r2, #15
 8004626:	fa02 f303 	lsl.w	r3, r2, r3
 800462a:	43db      	mvns	r3, r3
 800462c:	693a      	ldr	r2, [r7, #16]
 800462e:	4013      	ands	r3, r2
 8004630:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	691a      	ldr	r2, [r3, #16]
 8004636:	697b      	ldr	r3, [r7, #20]
 8004638:	f003 0307 	and.w	r3, r3, #7
 800463c:	009b      	lsls	r3, r3, #2
 800463e:	fa02 f303 	lsl.w	r3, r2, r3
 8004642:	693a      	ldr	r2, [r7, #16]
 8004644:	4313      	orrs	r3, r2
 8004646:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004648:	697b      	ldr	r3, [r7, #20]
 800464a:	08da      	lsrs	r2, r3, #3
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	3208      	adds	r2, #8
 8004650:	6939      	ldr	r1, [r7, #16]
 8004652:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800465c:	697b      	ldr	r3, [r7, #20]
 800465e:	005b      	lsls	r3, r3, #1
 8004660:	2203      	movs	r2, #3
 8004662:	fa02 f303 	lsl.w	r3, r2, r3
 8004666:	43db      	mvns	r3, r3
 8004668:	693a      	ldr	r2, [r7, #16]
 800466a:	4013      	ands	r3, r2
 800466c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	685b      	ldr	r3, [r3, #4]
 8004672:	f003 0203 	and.w	r2, r3, #3
 8004676:	697b      	ldr	r3, [r7, #20]
 8004678:	005b      	lsls	r3, r3, #1
 800467a:	fa02 f303 	lsl.w	r3, r2, r3
 800467e:	693a      	ldr	r2, [r7, #16]
 8004680:	4313      	orrs	r3, r2
 8004682:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	693a      	ldr	r2, [r7, #16]
 8004688:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	685b      	ldr	r3, [r3, #4]
 800468e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004692:	2b00      	cmp	r3, #0
 8004694:	f000 80a6 	beq.w	80047e4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004698:	4b5b      	ldr	r3, [pc, #364]	@ (8004808 <HAL_GPIO_Init+0x2e4>)
 800469a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800469c:	4a5a      	ldr	r2, [pc, #360]	@ (8004808 <HAL_GPIO_Init+0x2e4>)
 800469e:	f043 0301 	orr.w	r3, r3, #1
 80046a2:	6613      	str	r3, [r2, #96]	@ 0x60
 80046a4:	4b58      	ldr	r3, [pc, #352]	@ (8004808 <HAL_GPIO_Init+0x2e4>)
 80046a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80046a8:	f003 0301 	and.w	r3, r3, #1
 80046ac:	60bb      	str	r3, [r7, #8]
 80046ae:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80046b0:	4a56      	ldr	r2, [pc, #344]	@ (800480c <HAL_GPIO_Init+0x2e8>)
 80046b2:	697b      	ldr	r3, [r7, #20]
 80046b4:	089b      	lsrs	r3, r3, #2
 80046b6:	3302      	adds	r3, #2
 80046b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046bc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80046be:	697b      	ldr	r3, [r7, #20]
 80046c0:	f003 0303 	and.w	r3, r3, #3
 80046c4:	009b      	lsls	r3, r3, #2
 80046c6:	220f      	movs	r2, #15
 80046c8:	fa02 f303 	lsl.w	r3, r2, r3
 80046cc:	43db      	mvns	r3, r3
 80046ce:	693a      	ldr	r2, [r7, #16]
 80046d0:	4013      	ands	r3, r2
 80046d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80046da:	d01f      	beq.n	800471c <HAL_GPIO_Init+0x1f8>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	4a4c      	ldr	r2, [pc, #304]	@ (8004810 <HAL_GPIO_Init+0x2ec>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d019      	beq.n	8004718 <HAL_GPIO_Init+0x1f4>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	4a4b      	ldr	r2, [pc, #300]	@ (8004814 <HAL_GPIO_Init+0x2f0>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d013      	beq.n	8004714 <HAL_GPIO_Init+0x1f0>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	4a4a      	ldr	r2, [pc, #296]	@ (8004818 <HAL_GPIO_Init+0x2f4>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d00d      	beq.n	8004710 <HAL_GPIO_Init+0x1ec>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	4a49      	ldr	r2, [pc, #292]	@ (800481c <HAL_GPIO_Init+0x2f8>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d007      	beq.n	800470c <HAL_GPIO_Init+0x1e8>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	4a48      	ldr	r2, [pc, #288]	@ (8004820 <HAL_GPIO_Init+0x2fc>)
 8004700:	4293      	cmp	r3, r2
 8004702:	d101      	bne.n	8004708 <HAL_GPIO_Init+0x1e4>
 8004704:	2305      	movs	r3, #5
 8004706:	e00a      	b.n	800471e <HAL_GPIO_Init+0x1fa>
 8004708:	2306      	movs	r3, #6
 800470a:	e008      	b.n	800471e <HAL_GPIO_Init+0x1fa>
 800470c:	2304      	movs	r3, #4
 800470e:	e006      	b.n	800471e <HAL_GPIO_Init+0x1fa>
 8004710:	2303      	movs	r3, #3
 8004712:	e004      	b.n	800471e <HAL_GPIO_Init+0x1fa>
 8004714:	2302      	movs	r3, #2
 8004716:	e002      	b.n	800471e <HAL_GPIO_Init+0x1fa>
 8004718:	2301      	movs	r3, #1
 800471a:	e000      	b.n	800471e <HAL_GPIO_Init+0x1fa>
 800471c:	2300      	movs	r3, #0
 800471e:	697a      	ldr	r2, [r7, #20]
 8004720:	f002 0203 	and.w	r2, r2, #3
 8004724:	0092      	lsls	r2, r2, #2
 8004726:	4093      	lsls	r3, r2
 8004728:	693a      	ldr	r2, [r7, #16]
 800472a:	4313      	orrs	r3, r2
 800472c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800472e:	4937      	ldr	r1, [pc, #220]	@ (800480c <HAL_GPIO_Init+0x2e8>)
 8004730:	697b      	ldr	r3, [r7, #20]
 8004732:	089b      	lsrs	r3, r3, #2
 8004734:	3302      	adds	r3, #2
 8004736:	693a      	ldr	r2, [r7, #16]
 8004738:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800473c:	4b39      	ldr	r3, [pc, #228]	@ (8004824 <HAL_GPIO_Init+0x300>)
 800473e:	689b      	ldr	r3, [r3, #8]
 8004740:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	43db      	mvns	r3, r3
 8004746:	693a      	ldr	r2, [r7, #16]
 8004748:	4013      	ands	r3, r2
 800474a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004754:	2b00      	cmp	r3, #0
 8004756:	d003      	beq.n	8004760 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004758:	693a      	ldr	r2, [r7, #16]
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	4313      	orrs	r3, r2
 800475e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004760:	4a30      	ldr	r2, [pc, #192]	@ (8004824 <HAL_GPIO_Init+0x300>)
 8004762:	693b      	ldr	r3, [r7, #16]
 8004764:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004766:	4b2f      	ldr	r3, [pc, #188]	@ (8004824 <HAL_GPIO_Init+0x300>)
 8004768:	68db      	ldr	r3, [r3, #12]
 800476a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	43db      	mvns	r3, r3
 8004770:	693a      	ldr	r2, [r7, #16]
 8004772:	4013      	ands	r3, r2
 8004774:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800477e:	2b00      	cmp	r3, #0
 8004780:	d003      	beq.n	800478a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004782:	693a      	ldr	r2, [r7, #16]
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	4313      	orrs	r3, r2
 8004788:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800478a:	4a26      	ldr	r2, [pc, #152]	@ (8004824 <HAL_GPIO_Init+0x300>)
 800478c:	693b      	ldr	r3, [r7, #16]
 800478e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004790:	4b24      	ldr	r3, [pc, #144]	@ (8004824 <HAL_GPIO_Init+0x300>)
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	43db      	mvns	r3, r3
 800479a:	693a      	ldr	r2, [r7, #16]
 800479c:	4013      	ands	r3, r2
 800479e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	685b      	ldr	r3, [r3, #4]
 80047a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d003      	beq.n	80047b4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80047ac:	693a      	ldr	r2, [r7, #16]
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	4313      	orrs	r3, r2
 80047b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80047b4:	4a1b      	ldr	r2, [pc, #108]	@ (8004824 <HAL_GPIO_Init+0x300>)
 80047b6:	693b      	ldr	r3, [r7, #16]
 80047b8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80047ba:	4b1a      	ldr	r3, [pc, #104]	@ (8004824 <HAL_GPIO_Init+0x300>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	43db      	mvns	r3, r3
 80047c4:	693a      	ldr	r2, [r7, #16]
 80047c6:	4013      	ands	r3, r2
 80047c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d003      	beq.n	80047de <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80047d6:	693a      	ldr	r2, [r7, #16]
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	4313      	orrs	r3, r2
 80047dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80047de:	4a11      	ldr	r2, [pc, #68]	@ (8004824 <HAL_GPIO_Init+0x300>)
 80047e0:	693b      	ldr	r3, [r7, #16]
 80047e2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80047e4:	697b      	ldr	r3, [r7, #20]
 80047e6:	3301      	adds	r3, #1
 80047e8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	681a      	ldr	r2, [r3, #0]
 80047ee:	697b      	ldr	r3, [r7, #20]
 80047f0:	fa22 f303 	lsr.w	r3, r2, r3
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	f47f ae9d 	bne.w	8004534 <HAL_GPIO_Init+0x10>
  }
}
 80047fa:	bf00      	nop
 80047fc:	bf00      	nop
 80047fe:	371c      	adds	r7, #28
 8004800:	46bd      	mov	sp, r7
 8004802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004806:	4770      	bx	lr
 8004808:	40021000 	.word	0x40021000
 800480c:	40010000 	.word	0x40010000
 8004810:	48000400 	.word	0x48000400
 8004814:	48000800 	.word	0x48000800
 8004818:	48000c00 	.word	0x48000c00
 800481c:	48001000 	.word	0x48001000
 8004820:	48001400 	.word	0x48001400
 8004824:	40010400 	.word	0x40010400

08004828 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004828:	b480      	push	{r7}
 800482a:	b083      	sub	sp, #12
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
 8004830:	460b      	mov	r3, r1
 8004832:	807b      	strh	r3, [r7, #2]
 8004834:	4613      	mov	r3, r2
 8004836:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004838:	787b      	ldrb	r3, [r7, #1]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d003      	beq.n	8004846 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800483e:	887a      	ldrh	r2, [r7, #2]
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004844:	e002      	b.n	800484c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004846:	887a      	ldrh	r2, [r7, #2]
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800484c:	bf00      	nop
 800484e:	370c      	adds	r7, #12
 8004850:	46bd      	mov	sp, r7
 8004852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004856:	4770      	bx	lr

08004858 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b082      	sub	sp, #8
 800485c:	af00      	add	r7, sp, #0
 800485e:	4603      	mov	r3, r0
 8004860:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004862:	4b08      	ldr	r3, [pc, #32]	@ (8004884 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004864:	695a      	ldr	r2, [r3, #20]
 8004866:	88fb      	ldrh	r3, [r7, #6]
 8004868:	4013      	ands	r3, r2
 800486a:	2b00      	cmp	r3, #0
 800486c:	d006      	beq.n	800487c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800486e:	4a05      	ldr	r2, [pc, #20]	@ (8004884 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004870:	88fb      	ldrh	r3, [r7, #6]
 8004872:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004874:	88fb      	ldrh	r3, [r7, #6]
 8004876:	4618      	mov	r0, r3
 8004878:	f7fd fc7a 	bl	8002170 <HAL_GPIO_EXTI_Callback>
  }
}
 800487c:	bf00      	nop
 800487e:	3708      	adds	r7, #8
 8004880:	46bd      	mov	sp, r7
 8004882:	bd80      	pop	{r7, pc}
 8004884:	40010400 	.word	0x40010400

08004888 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004888:	b480      	push	{r7}
 800488a:	b085      	sub	sp, #20
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d141      	bne.n	800491a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004896:	4b4b      	ldr	r3, [pc, #300]	@ (80049c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800489e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80048a2:	d131      	bne.n	8004908 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80048a4:	4b47      	ldr	r3, [pc, #284]	@ (80049c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80048aa:	4a46      	ldr	r2, [pc, #280]	@ (80049c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048ac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80048b0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80048b4:	4b43      	ldr	r3, [pc, #268]	@ (80049c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80048bc:	4a41      	ldr	r2, [pc, #260]	@ (80049c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048be:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80048c2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80048c4:	4b40      	ldr	r3, [pc, #256]	@ (80049c8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	2232      	movs	r2, #50	@ 0x32
 80048ca:	fb02 f303 	mul.w	r3, r2, r3
 80048ce:	4a3f      	ldr	r2, [pc, #252]	@ (80049cc <HAL_PWREx_ControlVoltageScaling+0x144>)
 80048d0:	fba2 2303 	umull	r2, r3, r2, r3
 80048d4:	0c9b      	lsrs	r3, r3, #18
 80048d6:	3301      	adds	r3, #1
 80048d8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80048da:	e002      	b.n	80048e2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	3b01      	subs	r3, #1
 80048e0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80048e2:	4b38      	ldr	r3, [pc, #224]	@ (80049c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048e4:	695b      	ldr	r3, [r3, #20]
 80048e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80048ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80048ee:	d102      	bne.n	80048f6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d1f2      	bne.n	80048dc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80048f6:	4b33      	ldr	r3, [pc, #204]	@ (80049c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048f8:	695b      	ldr	r3, [r3, #20]
 80048fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80048fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004902:	d158      	bne.n	80049b6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004904:	2303      	movs	r3, #3
 8004906:	e057      	b.n	80049b8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004908:	4b2e      	ldr	r3, [pc, #184]	@ (80049c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800490a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800490e:	4a2d      	ldr	r2, [pc, #180]	@ (80049c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004910:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004914:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004918:	e04d      	b.n	80049b6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004920:	d141      	bne.n	80049a6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004922:	4b28      	ldr	r3, [pc, #160]	@ (80049c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800492a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800492e:	d131      	bne.n	8004994 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004930:	4b24      	ldr	r3, [pc, #144]	@ (80049c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004932:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004936:	4a23      	ldr	r2, [pc, #140]	@ (80049c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004938:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800493c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004940:	4b20      	ldr	r3, [pc, #128]	@ (80049c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004948:	4a1e      	ldr	r2, [pc, #120]	@ (80049c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800494a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800494e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004950:	4b1d      	ldr	r3, [pc, #116]	@ (80049c8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	2232      	movs	r2, #50	@ 0x32
 8004956:	fb02 f303 	mul.w	r3, r2, r3
 800495a:	4a1c      	ldr	r2, [pc, #112]	@ (80049cc <HAL_PWREx_ControlVoltageScaling+0x144>)
 800495c:	fba2 2303 	umull	r2, r3, r2, r3
 8004960:	0c9b      	lsrs	r3, r3, #18
 8004962:	3301      	adds	r3, #1
 8004964:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004966:	e002      	b.n	800496e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	3b01      	subs	r3, #1
 800496c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800496e:	4b15      	ldr	r3, [pc, #84]	@ (80049c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004970:	695b      	ldr	r3, [r3, #20]
 8004972:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004976:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800497a:	d102      	bne.n	8004982 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d1f2      	bne.n	8004968 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004982:	4b10      	ldr	r3, [pc, #64]	@ (80049c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004984:	695b      	ldr	r3, [r3, #20]
 8004986:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800498a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800498e:	d112      	bne.n	80049b6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004990:	2303      	movs	r3, #3
 8004992:	e011      	b.n	80049b8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004994:	4b0b      	ldr	r3, [pc, #44]	@ (80049c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004996:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800499a:	4a0a      	ldr	r2, [pc, #40]	@ (80049c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800499c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80049a0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80049a4:	e007      	b.n	80049b6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80049a6:	4b07      	ldr	r3, [pc, #28]	@ (80049c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80049ae:	4a05      	ldr	r2, [pc, #20]	@ (80049c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80049b0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80049b4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80049b6:	2300      	movs	r3, #0
}
 80049b8:	4618      	mov	r0, r3
 80049ba:	3714      	adds	r7, #20
 80049bc:	46bd      	mov	sp, r7
 80049be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c2:	4770      	bx	lr
 80049c4:	40007000 	.word	0x40007000
 80049c8:	20000210 	.word	0x20000210
 80049cc:	431bde83 	.word	0x431bde83

080049d0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80049d0:	b480      	push	{r7}
 80049d2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80049d4:	4b05      	ldr	r3, [pc, #20]	@ (80049ec <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80049d6:	689b      	ldr	r3, [r3, #8]
 80049d8:	4a04      	ldr	r2, [pc, #16]	@ (80049ec <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80049da:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80049de:	6093      	str	r3, [r2, #8]
}
 80049e0:	bf00      	nop
 80049e2:	46bd      	mov	sp, r7
 80049e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e8:	4770      	bx	lr
 80049ea:	bf00      	nop
 80049ec:	40007000 	.word	0x40007000

080049f0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b088      	sub	sp, #32
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d101      	bne.n	8004a02 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80049fe:	2301      	movs	r3, #1
 8004a00:	e2fe      	b.n	8005000 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f003 0301 	and.w	r3, r3, #1
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d075      	beq.n	8004afa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a0e:	4b97      	ldr	r3, [pc, #604]	@ (8004c6c <HAL_RCC_OscConfig+0x27c>)
 8004a10:	689b      	ldr	r3, [r3, #8]
 8004a12:	f003 030c 	and.w	r3, r3, #12
 8004a16:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004a18:	4b94      	ldr	r3, [pc, #592]	@ (8004c6c <HAL_RCC_OscConfig+0x27c>)
 8004a1a:	68db      	ldr	r3, [r3, #12]
 8004a1c:	f003 0303 	and.w	r3, r3, #3
 8004a20:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004a22:	69bb      	ldr	r3, [r7, #24]
 8004a24:	2b0c      	cmp	r3, #12
 8004a26:	d102      	bne.n	8004a2e <HAL_RCC_OscConfig+0x3e>
 8004a28:	697b      	ldr	r3, [r7, #20]
 8004a2a:	2b03      	cmp	r3, #3
 8004a2c:	d002      	beq.n	8004a34 <HAL_RCC_OscConfig+0x44>
 8004a2e:	69bb      	ldr	r3, [r7, #24]
 8004a30:	2b08      	cmp	r3, #8
 8004a32:	d10b      	bne.n	8004a4c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a34:	4b8d      	ldr	r3, [pc, #564]	@ (8004c6c <HAL_RCC_OscConfig+0x27c>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d05b      	beq.n	8004af8 <HAL_RCC_OscConfig+0x108>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	685b      	ldr	r3, [r3, #4]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d157      	bne.n	8004af8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004a48:	2301      	movs	r3, #1
 8004a4a:	e2d9      	b.n	8005000 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	685b      	ldr	r3, [r3, #4]
 8004a50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a54:	d106      	bne.n	8004a64 <HAL_RCC_OscConfig+0x74>
 8004a56:	4b85      	ldr	r3, [pc, #532]	@ (8004c6c <HAL_RCC_OscConfig+0x27c>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	4a84      	ldr	r2, [pc, #528]	@ (8004c6c <HAL_RCC_OscConfig+0x27c>)
 8004a5c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a60:	6013      	str	r3, [r2, #0]
 8004a62:	e01d      	b.n	8004aa0 <HAL_RCC_OscConfig+0xb0>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	685b      	ldr	r3, [r3, #4]
 8004a68:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004a6c:	d10c      	bne.n	8004a88 <HAL_RCC_OscConfig+0x98>
 8004a6e:	4b7f      	ldr	r3, [pc, #508]	@ (8004c6c <HAL_RCC_OscConfig+0x27c>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4a7e      	ldr	r2, [pc, #504]	@ (8004c6c <HAL_RCC_OscConfig+0x27c>)
 8004a74:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004a78:	6013      	str	r3, [r2, #0]
 8004a7a:	4b7c      	ldr	r3, [pc, #496]	@ (8004c6c <HAL_RCC_OscConfig+0x27c>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	4a7b      	ldr	r2, [pc, #492]	@ (8004c6c <HAL_RCC_OscConfig+0x27c>)
 8004a80:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a84:	6013      	str	r3, [r2, #0]
 8004a86:	e00b      	b.n	8004aa0 <HAL_RCC_OscConfig+0xb0>
 8004a88:	4b78      	ldr	r3, [pc, #480]	@ (8004c6c <HAL_RCC_OscConfig+0x27c>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4a77      	ldr	r2, [pc, #476]	@ (8004c6c <HAL_RCC_OscConfig+0x27c>)
 8004a8e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004a92:	6013      	str	r3, [r2, #0]
 8004a94:	4b75      	ldr	r3, [pc, #468]	@ (8004c6c <HAL_RCC_OscConfig+0x27c>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	4a74      	ldr	r2, [pc, #464]	@ (8004c6c <HAL_RCC_OscConfig+0x27c>)
 8004a9a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004a9e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	685b      	ldr	r3, [r3, #4]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d013      	beq.n	8004ad0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004aa8:	f7fd ffc0 	bl	8002a2c <HAL_GetTick>
 8004aac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004aae:	e008      	b.n	8004ac2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ab0:	f7fd ffbc 	bl	8002a2c <HAL_GetTick>
 8004ab4:	4602      	mov	r2, r0
 8004ab6:	693b      	ldr	r3, [r7, #16]
 8004ab8:	1ad3      	subs	r3, r2, r3
 8004aba:	2b64      	cmp	r3, #100	@ 0x64
 8004abc:	d901      	bls.n	8004ac2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004abe:	2303      	movs	r3, #3
 8004ac0:	e29e      	b.n	8005000 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004ac2:	4b6a      	ldr	r3, [pc, #424]	@ (8004c6c <HAL_RCC_OscConfig+0x27c>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d0f0      	beq.n	8004ab0 <HAL_RCC_OscConfig+0xc0>
 8004ace:	e014      	b.n	8004afa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ad0:	f7fd ffac 	bl	8002a2c <HAL_GetTick>
 8004ad4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004ad6:	e008      	b.n	8004aea <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ad8:	f7fd ffa8 	bl	8002a2c <HAL_GetTick>
 8004adc:	4602      	mov	r2, r0
 8004ade:	693b      	ldr	r3, [r7, #16]
 8004ae0:	1ad3      	subs	r3, r2, r3
 8004ae2:	2b64      	cmp	r3, #100	@ 0x64
 8004ae4:	d901      	bls.n	8004aea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004ae6:	2303      	movs	r3, #3
 8004ae8:	e28a      	b.n	8005000 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004aea:	4b60      	ldr	r3, [pc, #384]	@ (8004c6c <HAL_RCC_OscConfig+0x27c>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d1f0      	bne.n	8004ad8 <HAL_RCC_OscConfig+0xe8>
 8004af6:	e000      	b.n	8004afa <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004af8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f003 0302 	and.w	r3, r3, #2
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d075      	beq.n	8004bf2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004b06:	4b59      	ldr	r3, [pc, #356]	@ (8004c6c <HAL_RCC_OscConfig+0x27c>)
 8004b08:	689b      	ldr	r3, [r3, #8]
 8004b0a:	f003 030c 	and.w	r3, r3, #12
 8004b0e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004b10:	4b56      	ldr	r3, [pc, #344]	@ (8004c6c <HAL_RCC_OscConfig+0x27c>)
 8004b12:	68db      	ldr	r3, [r3, #12]
 8004b14:	f003 0303 	and.w	r3, r3, #3
 8004b18:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004b1a:	69bb      	ldr	r3, [r7, #24]
 8004b1c:	2b0c      	cmp	r3, #12
 8004b1e:	d102      	bne.n	8004b26 <HAL_RCC_OscConfig+0x136>
 8004b20:	697b      	ldr	r3, [r7, #20]
 8004b22:	2b02      	cmp	r3, #2
 8004b24:	d002      	beq.n	8004b2c <HAL_RCC_OscConfig+0x13c>
 8004b26:	69bb      	ldr	r3, [r7, #24]
 8004b28:	2b04      	cmp	r3, #4
 8004b2a:	d11f      	bne.n	8004b6c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004b2c:	4b4f      	ldr	r3, [pc, #316]	@ (8004c6c <HAL_RCC_OscConfig+0x27c>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d005      	beq.n	8004b44 <HAL_RCC_OscConfig+0x154>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	68db      	ldr	r3, [r3, #12]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d101      	bne.n	8004b44 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004b40:	2301      	movs	r3, #1
 8004b42:	e25d      	b.n	8005000 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b44:	4b49      	ldr	r3, [pc, #292]	@ (8004c6c <HAL_RCC_OscConfig+0x27c>)
 8004b46:	685b      	ldr	r3, [r3, #4]
 8004b48:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	691b      	ldr	r3, [r3, #16]
 8004b50:	061b      	lsls	r3, r3, #24
 8004b52:	4946      	ldr	r1, [pc, #280]	@ (8004c6c <HAL_RCC_OscConfig+0x27c>)
 8004b54:	4313      	orrs	r3, r2
 8004b56:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004b58:	4b45      	ldr	r3, [pc, #276]	@ (8004c70 <HAL_RCC_OscConfig+0x280>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	f7fd ff19 	bl	8002994 <HAL_InitTick>
 8004b62:	4603      	mov	r3, r0
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d043      	beq.n	8004bf0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004b68:	2301      	movs	r3, #1
 8004b6a:	e249      	b.n	8005000 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	68db      	ldr	r3, [r3, #12]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d023      	beq.n	8004bbc <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b74:	4b3d      	ldr	r3, [pc, #244]	@ (8004c6c <HAL_RCC_OscConfig+0x27c>)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	4a3c      	ldr	r2, [pc, #240]	@ (8004c6c <HAL_RCC_OscConfig+0x27c>)
 8004b7a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b7e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b80:	f7fd ff54 	bl	8002a2c <HAL_GetTick>
 8004b84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004b86:	e008      	b.n	8004b9a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b88:	f7fd ff50 	bl	8002a2c <HAL_GetTick>
 8004b8c:	4602      	mov	r2, r0
 8004b8e:	693b      	ldr	r3, [r7, #16]
 8004b90:	1ad3      	subs	r3, r2, r3
 8004b92:	2b02      	cmp	r3, #2
 8004b94:	d901      	bls.n	8004b9a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004b96:	2303      	movs	r3, #3
 8004b98:	e232      	b.n	8005000 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004b9a:	4b34      	ldr	r3, [pc, #208]	@ (8004c6c <HAL_RCC_OscConfig+0x27c>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d0f0      	beq.n	8004b88 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ba6:	4b31      	ldr	r3, [pc, #196]	@ (8004c6c <HAL_RCC_OscConfig+0x27c>)
 8004ba8:	685b      	ldr	r3, [r3, #4]
 8004baa:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	691b      	ldr	r3, [r3, #16]
 8004bb2:	061b      	lsls	r3, r3, #24
 8004bb4:	492d      	ldr	r1, [pc, #180]	@ (8004c6c <HAL_RCC_OscConfig+0x27c>)
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	604b      	str	r3, [r1, #4]
 8004bba:	e01a      	b.n	8004bf2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004bbc:	4b2b      	ldr	r3, [pc, #172]	@ (8004c6c <HAL_RCC_OscConfig+0x27c>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4a2a      	ldr	r2, [pc, #168]	@ (8004c6c <HAL_RCC_OscConfig+0x27c>)
 8004bc2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004bc6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bc8:	f7fd ff30 	bl	8002a2c <HAL_GetTick>
 8004bcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004bce:	e008      	b.n	8004be2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004bd0:	f7fd ff2c 	bl	8002a2c <HAL_GetTick>
 8004bd4:	4602      	mov	r2, r0
 8004bd6:	693b      	ldr	r3, [r7, #16]
 8004bd8:	1ad3      	subs	r3, r2, r3
 8004bda:	2b02      	cmp	r3, #2
 8004bdc:	d901      	bls.n	8004be2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004bde:	2303      	movs	r3, #3
 8004be0:	e20e      	b.n	8005000 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004be2:	4b22      	ldr	r3, [pc, #136]	@ (8004c6c <HAL_RCC_OscConfig+0x27c>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d1f0      	bne.n	8004bd0 <HAL_RCC_OscConfig+0x1e0>
 8004bee:	e000      	b.n	8004bf2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004bf0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f003 0308 	and.w	r3, r3, #8
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d041      	beq.n	8004c82 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	695b      	ldr	r3, [r3, #20]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d01c      	beq.n	8004c40 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c06:	4b19      	ldr	r3, [pc, #100]	@ (8004c6c <HAL_RCC_OscConfig+0x27c>)
 8004c08:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004c0c:	4a17      	ldr	r2, [pc, #92]	@ (8004c6c <HAL_RCC_OscConfig+0x27c>)
 8004c0e:	f043 0301 	orr.w	r3, r3, #1
 8004c12:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c16:	f7fd ff09 	bl	8002a2c <HAL_GetTick>
 8004c1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004c1c:	e008      	b.n	8004c30 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c1e:	f7fd ff05 	bl	8002a2c <HAL_GetTick>
 8004c22:	4602      	mov	r2, r0
 8004c24:	693b      	ldr	r3, [r7, #16]
 8004c26:	1ad3      	subs	r3, r2, r3
 8004c28:	2b02      	cmp	r3, #2
 8004c2a:	d901      	bls.n	8004c30 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004c2c:	2303      	movs	r3, #3
 8004c2e:	e1e7      	b.n	8005000 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004c30:	4b0e      	ldr	r3, [pc, #56]	@ (8004c6c <HAL_RCC_OscConfig+0x27c>)
 8004c32:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004c36:	f003 0302 	and.w	r3, r3, #2
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d0ef      	beq.n	8004c1e <HAL_RCC_OscConfig+0x22e>
 8004c3e:	e020      	b.n	8004c82 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c40:	4b0a      	ldr	r3, [pc, #40]	@ (8004c6c <HAL_RCC_OscConfig+0x27c>)
 8004c42:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004c46:	4a09      	ldr	r2, [pc, #36]	@ (8004c6c <HAL_RCC_OscConfig+0x27c>)
 8004c48:	f023 0301 	bic.w	r3, r3, #1
 8004c4c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c50:	f7fd feec 	bl	8002a2c <HAL_GetTick>
 8004c54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004c56:	e00d      	b.n	8004c74 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c58:	f7fd fee8 	bl	8002a2c <HAL_GetTick>
 8004c5c:	4602      	mov	r2, r0
 8004c5e:	693b      	ldr	r3, [r7, #16]
 8004c60:	1ad3      	subs	r3, r2, r3
 8004c62:	2b02      	cmp	r3, #2
 8004c64:	d906      	bls.n	8004c74 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004c66:	2303      	movs	r3, #3
 8004c68:	e1ca      	b.n	8005000 <HAL_RCC_OscConfig+0x610>
 8004c6a:	bf00      	nop
 8004c6c:	40021000 	.word	0x40021000
 8004c70:	20000214 	.word	0x20000214
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004c74:	4b8c      	ldr	r3, [pc, #560]	@ (8004ea8 <HAL_RCC_OscConfig+0x4b8>)
 8004c76:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004c7a:	f003 0302 	and.w	r3, r3, #2
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d1ea      	bne.n	8004c58 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f003 0304 	and.w	r3, r3, #4
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	f000 80a6 	beq.w	8004ddc <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c90:	2300      	movs	r3, #0
 8004c92:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004c94:	4b84      	ldr	r3, [pc, #528]	@ (8004ea8 <HAL_RCC_OscConfig+0x4b8>)
 8004c96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c98:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d101      	bne.n	8004ca4 <HAL_RCC_OscConfig+0x2b4>
 8004ca0:	2301      	movs	r3, #1
 8004ca2:	e000      	b.n	8004ca6 <HAL_RCC_OscConfig+0x2b6>
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d00d      	beq.n	8004cc6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004caa:	4b7f      	ldr	r3, [pc, #508]	@ (8004ea8 <HAL_RCC_OscConfig+0x4b8>)
 8004cac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004cae:	4a7e      	ldr	r2, [pc, #504]	@ (8004ea8 <HAL_RCC_OscConfig+0x4b8>)
 8004cb0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004cb4:	6593      	str	r3, [r2, #88]	@ 0x58
 8004cb6:	4b7c      	ldr	r3, [pc, #496]	@ (8004ea8 <HAL_RCC_OscConfig+0x4b8>)
 8004cb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004cba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004cbe:	60fb      	str	r3, [r7, #12]
 8004cc0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004cc6:	4b79      	ldr	r3, [pc, #484]	@ (8004eac <HAL_RCC_OscConfig+0x4bc>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d118      	bne.n	8004d04 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004cd2:	4b76      	ldr	r3, [pc, #472]	@ (8004eac <HAL_RCC_OscConfig+0x4bc>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4a75      	ldr	r2, [pc, #468]	@ (8004eac <HAL_RCC_OscConfig+0x4bc>)
 8004cd8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004cdc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004cde:	f7fd fea5 	bl	8002a2c <HAL_GetTick>
 8004ce2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004ce4:	e008      	b.n	8004cf8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ce6:	f7fd fea1 	bl	8002a2c <HAL_GetTick>
 8004cea:	4602      	mov	r2, r0
 8004cec:	693b      	ldr	r3, [r7, #16]
 8004cee:	1ad3      	subs	r3, r2, r3
 8004cf0:	2b02      	cmp	r3, #2
 8004cf2:	d901      	bls.n	8004cf8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004cf4:	2303      	movs	r3, #3
 8004cf6:	e183      	b.n	8005000 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004cf8:	4b6c      	ldr	r3, [pc, #432]	@ (8004eac <HAL_RCC_OscConfig+0x4bc>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d0f0      	beq.n	8004ce6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	689b      	ldr	r3, [r3, #8]
 8004d08:	2b01      	cmp	r3, #1
 8004d0a:	d108      	bne.n	8004d1e <HAL_RCC_OscConfig+0x32e>
 8004d0c:	4b66      	ldr	r3, [pc, #408]	@ (8004ea8 <HAL_RCC_OscConfig+0x4b8>)
 8004d0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d12:	4a65      	ldr	r2, [pc, #404]	@ (8004ea8 <HAL_RCC_OscConfig+0x4b8>)
 8004d14:	f043 0301 	orr.w	r3, r3, #1
 8004d18:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004d1c:	e024      	b.n	8004d68 <HAL_RCC_OscConfig+0x378>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	689b      	ldr	r3, [r3, #8]
 8004d22:	2b05      	cmp	r3, #5
 8004d24:	d110      	bne.n	8004d48 <HAL_RCC_OscConfig+0x358>
 8004d26:	4b60      	ldr	r3, [pc, #384]	@ (8004ea8 <HAL_RCC_OscConfig+0x4b8>)
 8004d28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d2c:	4a5e      	ldr	r2, [pc, #376]	@ (8004ea8 <HAL_RCC_OscConfig+0x4b8>)
 8004d2e:	f043 0304 	orr.w	r3, r3, #4
 8004d32:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004d36:	4b5c      	ldr	r3, [pc, #368]	@ (8004ea8 <HAL_RCC_OscConfig+0x4b8>)
 8004d38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d3c:	4a5a      	ldr	r2, [pc, #360]	@ (8004ea8 <HAL_RCC_OscConfig+0x4b8>)
 8004d3e:	f043 0301 	orr.w	r3, r3, #1
 8004d42:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004d46:	e00f      	b.n	8004d68 <HAL_RCC_OscConfig+0x378>
 8004d48:	4b57      	ldr	r3, [pc, #348]	@ (8004ea8 <HAL_RCC_OscConfig+0x4b8>)
 8004d4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d4e:	4a56      	ldr	r2, [pc, #344]	@ (8004ea8 <HAL_RCC_OscConfig+0x4b8>)
 8004d50:	f023 0301 	bic.w	r3, r3, #1
 8004d54:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004d58:	4b53      	ldr	r3, [pc, #332]	@ (8004ea8 <HAL_RCC_OscConfig+0x4b8>)
 8004d5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d5e:	4a52      	ldr	r2, [pc, #328]	@ (8004ea8 <HAL_RCC_OscConfig+0x4b8>)
 8004d60:	f023 0304 	bic.w	r3, r3, #4
 8004d64:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	689b      	ldr	r3, [r3, #8]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d016      	beq.n	8004d9e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d70:	f7fd fe5c 	bl	8002a2c <HAL_GetTick>
 8004d74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d76:	e00a      	b.n	8004d8e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d78:	f7fd fe58 	bl	8002a2c <HAL_GetTick>
 8004d7c:	4602      	mov	r2, r0
 8004d7e:	693b      	ldr	r3, [r7, #16]
 8004d80:	1ad3      	subs	r3, r2, r3
 8004d82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d901      	bls.n	8004d8e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004d8a:	2303      	movs	r3, #3
 8004d8c:	e138      	b.n	8005000 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d8e:	4b46      	ldr	r3, [pc, #280]	@ (8004ea8 <HAL_RCC_OscConfig+0x4b8>)
 8004d90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d94:	f003 0302 	and.w	r3, r3, #2
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d0ed      	beq.n	8004d78 <HAL_RCC_OscConfig+0x388>
 8004d9c:	e015      	b.n	8004dca <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d9e:	f7fd fe45 	bl	8002a2c <HAL_GetTick>
 8004da2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004da4:	e00a      	b.n	8004dbc <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004da6:	f7fd fe41 	bl	8002a2c <HAL_GetTick>
 8004daa:	4602      	mov	r2, r0
 8004dac:	693b      	ldr	r3, [r7, #16]
 8004dae:	1ad3      	subs	r3, r2, r3
 8004db0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d901      	bls.n	8004dbc <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004db8:	2303      	movs	r3, #3
 8004dba:	e121      	b.n	8005000 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004dbc:	4b3a      	ldr	r3, [pc, #232]	@ (8004ea8 <HAL_RCC_OscConfig+0x4b8>)
 8004dbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004dc2:	f003 0302 	and.w	r3, r3, #2
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d1ed      	bne.n	8004da6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004dca:	7ffb      	ldrb	r3, [r7, #31]
 8004dcc:	2b01      	cmp	r3, #1
 8004dce:	d105      	bne.n	8004ddc <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004dd0:	4b35      	ldr	r3, [pc, #212]	@ (8004ea8 <HAL_RCC_OscConfig+0x4b8>)
 8004dd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004dd4:	4a34      	ldr	r2, [pc, #208]	@ (8004ea8 <HAL_RCC_OscConfig+0x4b8>)
 8004dd6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004dda:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f003 0320 	and.w	r3, r3, #32
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d03c      	beq.n	8004e62 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	699b      	ldr	r3, [r3, #24]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d01c      	beq.n	8004e2a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004df0:	4b2d      	ldr	r3, [pc, #180]	@ (8004ea8 <HAL_RCC_OscConfig+0x4b8>)
 8004df2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004df6:	4a2c      	ldr	r2, [pc, #176]	@ (8004ea8 <HAL_RCC_OscConfig+0x4b8>)
 8004df8:	f043 0301 	orr.w	r3, r3, #1
 8004dfc:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e00:	f7fd fe14 	bl	8002a2c <HAL_GetTick>
 8004e04:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004e06:	e008      	b.n	8004e1a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004e08:	f7fd fe10 	bl	8002a2c <HAL_GetTick>
 8004e0c:	4602      	mov	r2, r0
 8004e0e:	693b      	ldr	r3, [r7, #16]
 8004e10:	1ad3      	subs	r3, r2, r3
 8004e12:	2b02      	cmp	r3, #2
 8004e14:	d901      	bls.n	8004e1a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004e16:	2303      	movs	r3, #3
 8004e18:	e0f2      	b.n	8005000 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004e1a:	4b23      	ldr	r3, [pc, #140]	@ (8004ea8 <HAL_RCC_OscConfig+0x4b8>)
 8004e1c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004e20:	f003 0302 	and.w	r3, r3, #2
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d0ef      	beq.n	8004e08 <HAL_RCC_OscConfig+0x418>
 8004e28:	e01b      	b.n	8004e62 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004e2a:	4b1f      	ldr	r3, [pc, #124]	@ (8004ea8 <HAL_RCC_OscConfig+0x4b8>)
 8004e2c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004e30:	4a1d      	ldr	r2, [pc, #116]	@ (8004ea8 <HAL_RCC_OscConfig+0x4b8>)
 8004e32:	f023 0301 	bic.w	r3, r3, #1
 8004e36:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e3a:	f7fd fdf7 	bl	8002a2c <HAL_GetTick>
 8004e3e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004e40:	e008      	b.n	8004e54 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004e42:	f7fd fdf3 	bl	8002a2c <HAL_GetTick>
 8004e46:	4602      	mov	r2, r0
 8004e48:	693b      	ldr	r3, [r7, #16]
 8004e4a:	1ad3      	subs	r3, r2, r3
 8004e4c:	2b02      	cmp	r3, #2
 8004e4e:	d901      	bls.n	8004e54 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004e50:	2303      	movs	r3, #3
 8004e52:	e0d5      	b.n	8005000 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004e54:	4b14      	ldr	r3, [pc, #80]	@ (8004ea8 <HAL_RCC_OscConfig+0x4b8>)
 8004e56:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004e5a:	f003 0302 	and.w	r3, r3, #2
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d1ef      	bne.n	8004e42 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	69db      	ldr	r3, [r3, #28]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	f000 80c9 	beq.w	8004ffe <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004e6c:	4b0e      	ldr	r3, [pc, #56]	@ (8004ea8 <HAL_RCC_OscConfig+0x4b8>)
 8004e6e:	689b      	ldr	r3, [r3, #8]
 8004e70:	f003 030c 	and.w	r3, r3, #12
 8004e74:	2b0c      	cmp	r3, #12
 8004e76:	f000 8083 	beq.w	8004f80 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	69db      	ldr	r3, [r3, #28]
 8004e7e:	2b02      	cmp	r3, #2
 8004e80:	d15e      	bne.n	8004f40 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e82:	4b09      	ldr	r3, [pc, #36]	@ (8004ea8 <HAL_RCC_OscConfig+0x4b8>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4a08      	ldr	r2, [pc, #32]	@ (8004ea8 <HAL_RCC_OscConfig+0x4b8>)
 8004e88:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004e8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e8e:	f7fd fdcd 	bl	8002a2c <HAL_GetTick>
 8004e92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e94:	e00c      	b.n	8004eb0 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e96:	f7fd fdc9 	bl	8002a2c <HAL_GetTick>
 8004e9a:	4602      	mov	r2, r0
 8004e9c:	693b      	ldr	r3, [r7, #16]
 8004e9e:	1ad3      	subs	r3, r2, r3
 8004ea0:	2b02      	cmp	r3, #2
 8004ea2:	d905      	bls.n	8004eb0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004ea4:	2303      	movs	r3, #3
 8004ea6:	e0ab      	b.n	8005000 <HAL_RCC_OscConfig+0x610>
 8004ea8:	40021000 	.word	0x40021000
 8004eac:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004eb0:	4b55      	ldr	r3, [pc, #340]	@ (8005008 <HAL_RCC_OscConfig+0x618>)
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d1ec      	bne.n	8004e96 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004ebc:	4b52      	ldr	r3, [pc, #328]	@ (8005008 <HAL_RCC_OscConfig+0x618>)
 8004ebe:	68da      	ldr	r2, [r3, #12]
 8004ec0:	4b52      	ldr	r3, [pc, #328]	@ (800500c <HAL_RCC_OscConfig+0x61c>)
 8004ec2:	4013      	ands	r3, r2
 8004ec4:	687a      	ldr	r2, [r7, #4]
 8004ec6:	6a11      	ldr	r1, [r2, #32]
 8004ec8:	687a      	ldr	r2, [r7, #4]
 8004eca:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004ecc:	3a01      	subs	r2, #1
 8004ece:	0112      	lsls	r2, r2, #4
 8004ed0:	4311      	orrs	r1, r2
 8004ed2:	687a      	ldr	r2, [r7, #4]
 8004ed4:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8004ed6:	0212      	lsls	r2, r2, #8
 8004ed8:	4311      	orrs	r1, r2
 8004eda:	687a      	ldr	r2, [r7, #4]
 8004edc:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004ede:	0852      	lsrs	r2, r2, #1
 8004ee0:	3a01      	subs	r2, #1
 8004ee2:	0552      	lsls	r2, r2, #21
 8004ee4:	4311      	orrs	r1, r2
 8004ee6:	687a      	ldr	r2, [r7, #4]
 8004ee8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004eea:	0852      	lsrs	r2, r2, #1
 8004eec:	3a01      	subs	r2, #1
 8004eee:	0652      	lsls	r2, r2, #25
 8004ef0:	4311      	orrs	r1, r2
 8004ef2:	687a      	ldr	r2, [r7, #4]
 8004ef4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004ef6:	06d2      	lsls	r2, r2, #27
 8004ef8:	430a      	orrs	r2, r1
 8004efa:	4943      	ldr	r1, [pc, #268]	@ (8005008 <HAL_RCC_OscConfig+0x618>)
 8004efc:	4313      	orrs	r3, r2
 8004efe:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004f00:	4b41      	ldr	r3, [pc, #260]	@ (8005008 <HAL_RCC_OscConfig+0x618>)
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	4a40      	ldr	r2, [pc, #256]	@ (8005008 <HAL_RCC_OscConfig+0x618>)
 8004f06:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004f0a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004f0c:	4b3e      	ldr	r3, [pc, #248]	@ (8005008 <HAL_RCC_OscConfig+0x618>)
 8004f0e:	68db      	ldr	r3, [r3, #12]
 8004f10:	4a3d      	ldr	r2, [pc, #244]	@ (8005008 <HAL_RCC_OscConfig+0x618>)
 8004f12:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004f16:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f18:	f7fd fd88 	bl	8002a2c <HAL_GetTick>
 8004f1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f1e:	e008      	b.n	8004f32 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f20:	f7fd fd84 	bl	8002a2c <HAL_GetTick>
 8004f24:	4602      	mov	r2, r0
 8004f26:	693b      	ldr	r3, [r7, #16]
 8004f28:	1ad3      	subs	r3, r2, r3
 8004f2a:	2b02      	cmp	r3, #2
 8004f2c:	d901      	bls.n	8004f32 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8004f2e:	2303      	movs	r3, #3
 8004f30:	e066      	b.n	8005000 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f32:	4b35      	ldr	r3, [pc, #212]	@ (8005008 <HAL_RCC_OscConfig+0x618>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d0f0      	beq.n	8004f20 <HAL_RCC_OscConfig+0x530>
 8004f3e:	e05e      	b.n	8004ffe <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f40:	4b31      	ldr	r3, [pc, #196]	@ (8005008 <HAL_RCC_OscConfig+0x618>)
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	4a30      	ldr	r2, [pc, #192]	@ (8005008 <HAL_RCC_OscConfig+0x618>)
 8004f46:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004f4a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f4c:	f7fd fd6e 	bl	8002a2c <HAL_GetTick>
 8004f50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f52:	e008      	b.n	8004f66 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f54:	f7fd fd6a 	bl	8002a2c <HAL_GetTick>
 8004f58:	4602      	mov	r2, r0
 8004f5a:	693b      	ldr	r3, [r7, #16]
 8004f5c:	1ad3      	subs	r3, r2, r3
 8004f5e:	2b02      	cmp	r3, #2
 8004f60:	d901      	bls.n	8004f66 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8004f62:	2303      	movs	r3, #3
 8004f64:	e04c      	b.n	8005000 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f66:	4b28      	ldr	r3, [pc, #160]	@ (8005008 <HAL_RCC_OscConfig+0x618>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d1f0      	bne.n	8004f54 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004f72:	4b25      	ldr	r3, [pc, #148]	@ (8005008 <HAL_RCC_OscConfig+0x618>)
 8004f74:	68da      	ldr	r2, [r3, #12]
 8004f76:	4924      	ldr	r1, [pc, #144]	@ (8005008 <HAL_RCC_OscConfig+0x618>)
 8004f78:	4b25      	ldr	r3, [pc, #148]	@ (8005010 <HAL_RCC_OscConfig+0x620>)
 8004f7a:	4013      	ands	r3, r2
 8004f7c:	60cb      	str	r3, [r1, #12]
 8004f7e:	e03e      	b.n	8004ffe <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	69db      	ldr	r3, [r3, #28]
 8004f84:	2b01      	cmp	r3, #1
 8004f86:	d101      	bne.n	8004f8c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8004f88:	2301      	movs	r3, #1
 8004f8a:	e039      	b.n	8005000 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004f8c:	4b1e      	ldr	r3, [pc, #120]	@ (8005008 <HAL_RCC_OscConfig+0x618>)
 8004f8e:	68db      	ldr	r3, [r3, #12]
 8004f90:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f92:	697b      	ldr	r3, [r7, #20]
 8004f94:	f003 0203 	and.w	r2, r3, #3
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6a1b      	ldr	r3, [r3, #32]
 8004f9c:	429a      	cmp	r2, r3
 8004f9e:	d12c      	bne.n	8004ffa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004fa0:	697b      	ldr	r3, [r7, #20]
 8004fa2:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004faa:	3b01      	subs	r3, #1
 8004fac:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004fae:	429a      	cmp	r2, r3
 8004fb0:	d123      	bne.n	8004ffa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004fb2:	697b      	ldr	r3, [r7, #20]
 8004fb4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fbc:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004fbe:	429a      	cmp	r2, r3
 8004fc0:	d11b      	bne.n	8004ffa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004fc2:	697b      	ldr	r3, [r7, #20]
 8004fc4:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fcc:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004fce:	429a      	cmp	r2, r3
 8004fd0:	d113      	bne.n	8004ffa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004fd2:	697b      	ldr	r3, [r7, #20]
 8004fd4:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fdc:	085b      	lsrs	r3, r3, #1
 8004fde:	3b01      	subs	r3, #1
 8004fe0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004fe2:	429a      	cmp	r2, r3
 8004fe4:	d109      	bne.n	8004ffa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004fe6:	697b      	ldr	r3, [r7, #20]
 8004fe8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ff0:	085b      	lsrs	r3, r3, #1
 8004ff2:	3b01      	subs	r3, #1
 8004ff4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004ff6:	429a      	cmp	r2, r3
 8004ff8:	d001      	beq.n	8004ffe <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	e000      	b.n	8005000 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8004ffe:	2300      	movs	r3, #0
}
 8005000:	4618      	mov	r0, r3
 8005002:	3720      	adds	r7, #32
 8005004:	46bd      	mov	sp, r7
 8005006:	bd80      	pop	{r7, pc}
 8005008:	40021000 	.word	0x40021000
 800500c:	019f800c 	.word	0x019f800c
 8005010:	feeefffc 	.word	0xfeeefffc

08005014 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b086      	sub	sp, #24
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
 800501c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800501e:	2300      	movs	r3, #0
 8005020:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d101      	bne.n	800502c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005028:	2301      	movs	r3, #1
 800502a:	e11e      	b.n	800526a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800502c:	4b91      	ldr	r3, [pc, #580]	@ (8005274 <HAL_RCC_ClockConfig+0x260>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f003 030f 	and.w	r3, r3, #15
 8005034:	683a      	ldr	r2, [r7, #0]
 8005036:	429a      	cmp	r2, r3
 8005038:	d910      	bls.n	800505c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800503a:	4b8e      	ldr	r3, [pc, #568]	@ (8005274 <HAL_RCC_ClockConfig+0x260>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f023 020f 	bic.w	r2, r3, #15
 8005042:	498c      	ldr	r1, [pc, #560]	@ (8005274 <HAL_RCC_ClockConfig+0x260>)
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	4313      	orrs	r3, r2
 8005048:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800504a:	4b8a      	ldr	r3, [pc, #552]	@ (8005274 <HAL_RCC_ClockConfig+0x260>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f003 030f 	and.w	r3, r3, #15
 8005052:	683a      	ldr	r2, [r7, #0]
 8005054:	429a      	cmp	r2, r3
 8005056:	d001      	beq.n	800505c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005058:	2301      	movs	r3, #1
 800505a:	e106      	b.n	800526a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f003 0301 	and.w	r3, r3, #1
 8005064:	2b00      	cmp	r3, #0
 8005066:	d073      	beq.n	8005150 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	685b      	ldr	r3, [r3, #4]
 800506c:	2b03      	cmp	r3, #3
 800506e:	d129      	bne.n	80050c4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005070:	4b81      	ldr	r3, [pc, #516]	@ (8005278 <HAL_RCC_ClockConfig+0x264>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005078:	2b00      	cmp	r3, #0
 800507a:	d101      	bne.n	8005080 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800507c:	2301      	movs	r3, #1
 800507e:	e0f4      	b.n	800526a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005080:	f000 f99e 	bl	80053c0 <RCC_GetSysClockFreqFromPLLSource>
 8005084:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8005086:	693b      	ldr	r3, [r7, #16]
 8005088:	4a7c      	ldr	r2, [pc, #496]	@ (800527c <HAL_RCC_ClockConfig+0x268>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d93f      	bls.n	800510e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800508e:	4b7a      	ldr	r3, [pc, #488]	@ (8005278 <HAL_RCC_ClockConfig+0x264>)
 8005090:	689b      	ldr	r3, [r3, #8]
 8005092:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005096:	2b00      	cmp	r3, #0
 8005098:	d009      	beq.n	80050ae <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d033      	beq.n	800510e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d12f      	bne.n	800510e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80050ae:	4b72      	ldr	r3, [pc, #456]	@ (8005278 <HAL_RCC_ClockConfig+0x264>)
 80050b0:	689b      	ldr	r3, [r3, #8]
 80050b2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80050b6:	4a70      	ldr	r2, [pc, #448]	@ (8005278 <HAL_RCC_ClockConfig+0x264>)
 80050b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80050bc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80050be:	2380      	movs	r3, #128	@ 0x80
 80050c0:	617b      	str	r3, [r7, #20]
 80050c2:	e024      	b.n	800510e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	685b      	ldr	r3, [r3, #4]
 80050c8:	2b02      	cmp	r3, #2
 80050ca:	d107      	bne.n	80050dc <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80050cc:	4b6a      	ldr	r3, [pc, #424]	@ (8005278 <HAL_RCC_ClockConfig+0x264>)
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d109      	bne.n	80050ec <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80050d8:	2301      	movs	r3, #1
 80050da:	e0c6      	b.n	800526a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80050dc:	4b66      	ldr	r3, [pc, #408]	@ (8005278 <HAL_RCC_ClockConfig+0x264>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d101      	bne.n	80050ec <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80050e8:	2301      	movs	r3, #1
 80050ea:	e0be      	b.n	800526a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80050ec:	f000 f8ce 	bl	800528c <HAL_RCC_GetSysClockFreq>
 80050f0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80050f2:	693b      	ldr	r3, [r7, #16]
 80050f4:	4a61      	ldr	r2, [pc, #388]	@ (800527c <HAL_RCC_ClockConfig+0x268>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d909      	bls.n	800510e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80050fa:	4b5f      	ldr	r3, [pc, #380]	@ (8005278 <HAL_RCC_ClockConfig+0x264>)
 80050fc:	689b      	ldr	r3, [r3, #8]
 80050fe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005102:	4a5d      	ldr	r2, [pc, #372]	@ (8005278 <HAL_RCC_ClockConfig+0x264>)
 8005104:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005108:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800510a:	2380      	movs	r3, #128	@ 0x80
 800510c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800510e:	4b5a      	ldr	r3, [pc, #360]	@ (8005278 <HAL_RCC_ClockConfig+0x264>)
 8005110:	689b      	ldr	r3, [r3, #8]
 8005112:	f023 0203 	bic.w	r2, r3, #3
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	685b      	ldr	r3, [r3, #4]
 800511a:	4957      	ldr	r1, [pc, #348]	@ (8005278 <HAL_RCC_ClockConfig+0x264>)
 800511c:	4313      	orrs	r3, r2
 800511e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005120:	f7fd fc84 	bl	8002a2c <HAL_GetTick>
 8005124:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005126:	e00a      	b.n	800513e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005128:	f7fd fc80 	bl	8002a2c <HAL_GetTick>
 800512c:	4602      	mov	r2, r0
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	1ad3      	subs	r3, r2, r3
 8005132:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005136:	4293      	cmp	r3, r2
 8005138:	d901      	bls.n	800513e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800513a:	2303      	movs	r3, #3
 800513c:	e095      	b.n	800526a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800513e:	4b4e      	ldr	r3, [pc, #312]	@ (8005278 <HAL_RCC_ClockConfig+0x264>)
 8005140:	689b      	ldr	r3, [r3, #8]
 8005142:	f003 020c 	and.w	r2, r3, #12
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	685b      	ldr	r3, [r3, #4]
 800514a:	009b      	lsls	r3, r3, #2
 800514c:	429a      	cmp	r2, r3
 800514e:	d1eb      	bne.n	8005128 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f003 0302 	and.w	r3, r3, #2
 8005158:	2b00      	cmp	r3, #0
 800515a:	d023      	beq.n	80051a4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f003 0304 	and.w	r3, r3, #4
 8005164:	2b00      	cmp	r3, #0
 8005166:	d005      	beq.n	8005174 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005168:	4b43      	ldr	r3, [pc, #268]	@ (8005278 <HAL_RCC_ClockConfig+0x264>)
 800516a:	689b      	ldr	r3, [r3, #8]
 800516c:	4a42      	ldr	r2, [pc, #264]	@ (8005278 <HAL_RCC_ClockConfig+0x264>)
 800516e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005172:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f003 0308 	and.w	r3, r3, #8
 800517c:	2b00      	cmp	r3, #0
 800517e:	d007      	beq.n	8005190 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005180:	4b3d      	ldr	r3, [pc, #244]	@ (8005278 <HAL_RCC_ClockConfig+0x264>)
 8005182:	689b      	ldr	r3, [r3, #8]
 8005184:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005188:	4a3b      	ldr	r2, [pc, #236]	@ (8005278 <HAL_RCC_ClockConfig+0x264>)
 800518a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800518e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005190:	4b39      	ldr	r3, [pc, #228]	@ (8005278 <HAL_RCC_ClockConfig+0x264>)
 8005192:	689b      	ldr	r3, [r3, #8]
 8005194:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	689b      	ldr	r3, [r3, #8]
 800519c:	4936      	ldr	r1, [pc, #216]	@ (8005278 <HAL_RCC_ClockConfig+0x264>)
 800519e:	4313      	orrs	r3, r2
 80051a0:	608b      	str	r3, [r1, #8]
 80051a2:	e008      	b.n	80051b6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80051a4:	697b      	ldr	r3, [r7, #20]
 80051a6:	2b80      	cmp	r3, #128	@ 0x80
 80051a8:	d105      	bne.n	80051b6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80051aa:	4b33      	ldr	r3, [pc, #204]	@ (8005278 <HAL_RCC_ClockConfig+0x264>)
 80051ac:	689b      	ldr	r3, [r3, #8]
 80051ae:	4a32      	ldr	r2, [pc, #200]	@ (8005278 <HAL_RCC_ClockConfig+0x264>)
 80051b0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80051b4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80051b6:	4b2f      	ldr	r3, [pc, #188]	@ (8005274 <HAL_RCC_ClockConfig+0x260>)
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f003 030f 	and.w	r3, r3, #15
 80051be:	683a      	ldr	r2, [r7, #0]
 80051c0:	429a      	cmp	r2, r3
 80051c2:	d21d      	bcs.n	8005200 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051c4:	4b2b      	ldr	r3, [pc, #172]	@ (8005274 <HAL_RCC_ClockConfig+0x260>)
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f023 020f 	bic.w	r2, r3, #15
 80051cc:	4929      	ldr	r1, [pc, #164]	@ (8005274 <HAL_RCC_ClockConfig+0x260>)
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	4313      	orrs	r3, r2
 80051d2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80051d4:	f7fd fc2a 	bl	8002a2c <HAL_GetTick>
 80051d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80051da:	e00a      	b.n	80051f2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80051dc:	f7fd fc26 	bl	8002a2c <HAL_GetTick>
 80051e0:	4602      	mov	r2, r0
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	1ad3      	subs	r3, r2, r3
 80051e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d901      	bls.n	80051f2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80051ee:	2303      	movs	r3, #3
 80051f0:	e03b      	b.n	800526a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80051f2:	4b20      	ldr	r3, [pc, #128]	@ (8005274 <HAL_RCC_ClockConfig+0x260>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f003 030f 	and.w	r3, r3, #15
 80051fa:	683a      	ldr	r2, [r7, #0]
 80051fc:	429a      	cmp	r2, r3
 80051fe:	d1ed      	bne.n	80051dc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f003 0304 	and.w	r3, r3, #4
 8005208:	2b00      	cmp	r3, #0
 800520a:	d008      	beq.n	800521e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800520c:	4b1a      	ldr	r3, [pc, #104]	@ (8005278 <HAL_RCC_ClockConfig+0x264>)
 800520e:	689b      	ldr	r3, [r3, #8]
 8005210:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	68db      	ldr	r3, [r3, #12]
 8005218:	4917      	ldr	r1, [pc, #92]	@ (8005278 <HAL_RCC_ClockConfig+0x264>)
 800521a:	4313      	orrs	r3, r2
 800521c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f003 0308 	and.w	r3, r3, #8
 8005226:	2b00      	cmp	r3, #0
 8005228:	d009      	beq.n	800523e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800522a:	4b13      	ldr	r3, [pc, #76]	@ (8005278 <HAL_RCC_ClockConfig+0x264>)
 800522c:	689b      	ldr	r3, [r3, #8]
 800522e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	691b      	ldr	r3, [r3, #16]
 8005236:	00db      	lsls	r3, r3, #3
 8005238:	490f      	ldr	r1, [pc, #60]	@ (8005278 <HAL_RCC_ClockConfig+0x264>)
 800523a:	4313      	orrs	r3, r2
 800523c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800523e:	f000 f825 	bl	800528c <HAL_RCC_GetSysClockFreq>
 8005242:	4602      	mov	r2, r0
 8005244:	4b0c      	ldr	r3, [pc, #48]	@ (8005278 <HAL_RCC_ClockConfig+0x264>)
 8005246:	689b      	ldr	r3, [r3, #8]
 8005248:	091b      	lsrs	r3, r3, #4
 800524a:	f003 030f 	and.w	r3, r3, #15
 800524e:	490c      	ldr	r1, [pc, #48]	@ (8005280 <HAL_RCC_ClockConfig+0x26c>)
 8005250:	5ccb      	ldrb	r3, [r1, r3]
 8005252:	f003 031f 	and.w	r3, r3, #31
 8005256:	fa22 f303 	lsr.w	r3, r2, r3
 800525a:	4a0a      	ldr	r2, [pc, #40]	@ (8005284 <HAL_RCC_ClockConfig+0x270>)
 800525c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800525e:	4b0a      	ldr	r3, [pc, #40]	@ (8005288 <HAL_RCC_ClockConfig+0x274>)
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	4618      	mov	r0, r3
 8005264:	f7fd fb96 	bl	8002994 <HAL_InitTick>
 8005268:	4603      	mov	r3, r0
}
 800526a:	4618      	mov	r0, r3
 800526c:	3718      	adds	r7, #24
 800526e:	46bd      	mov	sp, r7
 8005270:	bd80      	pop	{r7, pc}
 8005272:	bf00      	nop
 8005274:	40022000 	.word	0x40022000
 8005278:	40021000 	.word	0x40021000
 800527c:	04c4b400 	.word	0x04c4b400
 8005280:	0800ab90 	.word	0x0800ab90
 8005284:	20000210 	.word	0x20000210
 8005288:	20000214 	.word	0x20000214

0800528c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800528c:	b480      	push	{r7}
 800528e:	b087      	sub	sp, #28
 8005290:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005292:	4b2c      	ldr	r3, [pc, #176]	@ (8005344 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005294:	689b      	ldr	r3, [r3, #8]
 8005296:	f003 030c 	and.w	r3, r3, #12
 800529a:	2b04      	cmp	r3, #4
 800529c:	d102      	bne.n	80052a4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800529e:	4b2a      	ldr	r3, [pc, #168]	@ (8005348 <HAL_RCC_GetSysClockFreq+0xbc>)
 80052a0:	613b      	str	r3, [r7, #16]
 80052a2:	e047      	b.n	8005334 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80052a4:	4b27      	ldr	r3, [pc, #156]	@ (8005344 <HAL_RCC_GetSysClockFreq+0xb8>)
 80052a6:	689b      	ldr	r3, [r3, #8]
 80052a8:	f003 030c 	and.w	r3, r3, #12
 80052ac:	2b08      	cmp	r3, #8
 80052ae:	d102      	bne.n	80052b6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80052b0:	4b26      	ldr	r3, [pc, #152]	@ (800534c <HAL_RCC_GetSysClockFreq+0xc0>)
 80052b2:	613b      	str	r3, [r7, #16]
 80052b4:	e03e      	b.n	8005334 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80052b6:	4b23      	ldr	r3, [pc, #140]	@ (8005344 <HAL_RCC_GetSysClockFreq+0xb8>)
 80052b8:	689b      	ldr	r3, [r3, #8]
 80052ba:	f003 030c 	and.w	r3, r3, #12
 80052be:	2b0c      	cmp	r3, #12
 80052c0:	d136      	bne.n	8005330 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80052c2:	4b20      	ldr	r3, [pc, #128]	@ (8005344 <HAL_RCC_GetSysClockFreq+0xb8>)
 80052c4:	68db      	ldr	r3, [r3, #12]
 80052c6:	f003 0303 	and.w	r3, r3, #3
 80052ca:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80052cc:	4b1d      	ldr	r3, [pc, #116]	@ (8005344 <HAL_RCC_GetSysClockFreq+0xb8>)
 80052ce:	68db      	ldr	r3, [r3, #12]
 80052d0:	091b      	lsrs	r3, r3, #4
 80052d2:	f003 030f 	and.w	r3, r3, #15
 80052d6:	3301      	adds	r3, #1
 80052d8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	2b03      	cmp	r3, #3
 80052de:	d10c      	bne.n	80052fa <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80052e0:	4a1a      	ldr	r2, [pc, #104]	@ (800534c <HAL_RCC_GetSysClockFreq+0xc0>)
 80052e2:	68bb      	ldr	r3, [r7, #8]
 80052e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80052e8:	4a16      	ldr	r2, [pc, #88]	@ (8005344 <HAL_RCC_GetSysClockFreq+0xb8>)
 80052ea:	68d2      	ldr	r2, [r2, #12]
 80052ec:	0a12      	lsrs	r2, r2, #8
 80052ee:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80052f2:	fb02 f303 	mul.w	r3, r2, r3
 80052f6:	617b      	str	r3, [r7, #20]
      break;
 80052f8:	e00c      	b.n	8005314 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80052fa:	4a13      	ldr	r2, [pc, #76]	@ (8005348 <HAL_RCC_GetSysClockFreq+0xbc>)
 80052fc:	68bb      	ldr	r3, [r7, #8]
 80052fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8005302:	4a10      	ldr	r2, [pc, #64]	@ (8005344 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005304:	68d2      	ldr	r2, [r2, #12]
 8005306:	0a12      	lsrs	r2, r2, #8
 8005308:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800530c:	fb02 f303 	mul.w	r3, r2, r3
 8005310:	617b      	str	r3, [r7, #20]
      break;
 8005312:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005314:	4b0b      	ldr	r3, [pc, #44]	@ (8005344 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005316:	68db      	ldr	r3, [r3, #12]
 8005318:	0e5b      	lsrs	r3, r3, #25
 800531a:	f003 0303 	and.w	r3, r3, #3
 800531e:	3301      	adds	r3, #1
 8005320:	005b      	lsls	r3, r3, #1
 8005322:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005324:	697a      	ldr	r2, [r7, #20]
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	fbb2 f3f3 	udiv	r3, r2, r3
 800532c:	613b      	str	r3, [r7, #16]
 800532e:	e001      	b.n	8005334 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005330:	2300      	movs	r3, #0
 8005332:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005334:	693b      	ldr	r3, [r7, #16]
}
 8005336:	4618      	mov	r0, r3
 8005338:	371c      	adds	r7, #28
 800533a:	46bd      	mov	sp, r7
 800533c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005340:	4770      	bx	lr
 8005342:	bf00      	nop
 8005344:	40021000 	.word	0x40021000
 8005348:	00f42400 	.word	0x00f42400
 800534c:	016e3600 	.word	0x016e3600

08005350 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005350:	b480      	push	{r7}
 8005352:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005354:	4b03      	ldr	r3, [pc, #12]	@ (8005364 <HAL_RCC_GetHCLKFreq+0x14>)
 8005356:	681b      	ldr	r3, [r3, #0]
}
 8005358:	4618      	mov	r0, r3
 800535a:	46bd      	mov	sp, r7
 800535c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005360:	4770      	bx	lr
 8005362:	bf00      	nop
 8005364:	20000210 	.word	0x20000210

08005368 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800536c:	f7ff fff0 	bl	8005350 <HAL_RCC_GetHCLKFreq>
 8005370:	4602      	mov	r2, r0
 8005372:	4b06      	ldr	r3, [pc, #24]	@ (800538c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005374:	689b      	ldr	r3, [r3, #8]
 8005376:	0a1b      	lsrs	r3, r3, #8
 8005378:	f003 0307 	and.w	r3, r3, #7
 800537c:	4904      	ldr	r1, [pc, #16]	@ (8005390 <HAL_RCC_GetPCLK1Freq+0x28>)
 800537e:	5ccb      	ldrb	r3, [r1, r3]
 8005380:	f003 031f 	and.w	r3, r3, #31
 8005384:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005388:	4618      	mov	r0, r3
 800538a:	bd80      	pop	{r7, pc}
 800538c:	40021000 	.word	0x40021000
 8005390:	0800aba0 	.word	0x0800aba0

08005394 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005398:	f7ff ffda 	bl	8005350 <HAL_RCC_GetHCLKFreq>
 800539c:	4602      	mov	r2, r0
 800539e:	4b06      	ldr	r3, [pc, #24]	@ (80053b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80053a0:	689b      	ldr	r3, [r3, #8]
 80053a2:	0adb      	lsrs	r3, r3, #11
 80053a4:	f003 0307 	and.w	r3, r3, #7
 80053a8:	4904      	ldr	r1, [pc, #16]	@ (80053bc <HAL_RCC_GetPCLK2Freq+0x28>)
 80053aa:	5ccb      	ldrb	r3, [r1, r3]
 80053ac:	f003 031f 	and.w	r3, r3, #31
 80053b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80053b4:	4618      	mov	r0, r3
 80053b6:	bd80      	pop	{r7, pc}
 80053b8:	40021000 	.word	0x40021000
 80053bc:	0800aba0 	.word	0x0800aba0

080053c0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80053c0:	b480      	push	{r7}
 80053c2:	b087      	sub	sp, #28
 80053c4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80053c6:	4b1e      	ldr	r3, [pc, #120]	@ (8005440 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80053c8:	68db      	ldr	r3, [r3, #12]
 80053ca:	f003 0303 	and.w	r3, r3, #3
 80053ce:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80053d0:	4b1b      	ldr	r3, [pc, #108]	@ (8005440 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80053d2:	68db      	ldr	r3, [r3, #12]
 80053d4:	091b      	lsrs	r3, r3, #4
 80053d6:	f003 030f 	and.w	r3, r3, #15
 80053da:	3301      	adds	r3, #1
 80053dc:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80053de:	693b      	ldr	r3, [r7, #16]
 80053e0:	2b03      	cmp	r3, #3
 80053e2:	d10c      	bne.n	80053fe <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80053e4:	4a17      	ldr	r2, [pc, #92]	@ (8005444 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80053ec:	4a14      	ldr	r2, [pc, #80]	@ (8005440 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80053ee:	68d2      	ldr	r2, [r2, #12]
 80053f0:	0a12      	lsrs	r2, r2, #8
 80053f2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80053f6:	fb02 f303 	mul.w	r3, r2, r3
 80053fa:	617b      	str	r3, [r7, #20]
    break;
 80053fc:	e00c      	b.n	8005418 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80053fe:	4a12      	ldr	r2, [pc, #72]	@ (8005448 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	fbb2 f3f3 	udiv	r3, r2, r3
 8005406:	4a0e      	ldr	r2, [pc, #56]	@ (8005440 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005408:	68d2      	ldr	r2, [r2, #12]
 800540a:	0a12      	lsrs	r2, r2, #8
 800540c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005410:	fb02 f303 	mul.w	r3, r2, r3
 8005414:	617b      	str	r3, [r7, #20]
    break;
 8005416:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005418:	4b09      	ldr	r3, [pc, #36]	@ (8005440 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800541a:	68db      	ldr	r3, [r3, #12]
 800541c:	0e5b      	lsrs	r3, r3, #25
 800541e:	f003 0303 	and.w	r3, r3, #3
 8005422:	3301      	adds	r3, #1
 8005424:	005b      	lsls	r3, r3, #1
 8005426:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005428:	697a      	ldr	r2, [r7, #20]
 800542a:	68bb      	ldr	r3, [r7, #8]
 800542c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005430:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005432:	687b      	ldr	r3, [r7, #4]
}
 8005434:	4618      	mov	r0, r3
 8005436:	371c      	adds	r7, #28
 8005438:	46bd      	mov	sp, r7
 800543a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543e:	4770      	bx	lr
 8005440:	40021000 	.word	0x40021000
 8005444:	016e3600 	.word	0x016e3600
 8005448:	00f42400 	.word	0x00f42400

0800544c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800544c:	b580      	push	{r7, lr}
 800544e:	b086      	sub	sp, #24
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005454:	2300      	movs	r3, #0
 8005456:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005458:	2300      	movs	r3, #0
 800545a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005464:	2b00      	cmp	r3, #0
 8005466:	f000 8098 	beq.w	800559a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800546a:	2300      	movs	r3, #0
 800546c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800546e:	4b43      	ldr	r3, [pc, #268]	@ (800557c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005470:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005472:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005476:	2b00      	cmp	r3, #0
 8005478:	d10d      	bne.n	8005496 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800547a:	4b40      	ldr	r3, [pc, #256]	@ (800557c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800547c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800547e:	4a3f      	ldr	r2, [pc, #252]	@ (800557c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005480:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005484:	6593      	str	r3, [r2, #88]	@ 0x58
 8005486:	4b3d      	ldr	r3, [pc, #244]	@ (800557c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005488:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800548a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800548e:	60bb      	str	r3, [r7, #8]
 8005490:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005492:	2301      	movs	r3, #1
 8005494:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005496:	4b3a      	ldr	r3, [pc, #232]	@ (8005580 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	4a39      	ldr	r2, [pc, #228]	@ (8005580 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800549c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80054a0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80054a2:	f7fd fac3 	bl	8002a2c <HAL_GetTick>
 80054a6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80054a8:	e009      	b.n	80054be <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80054aa:	f7fd fabf 	bl	8002a2c <HAL_GetTick>
 80054ae:	4602      	mov	r2, r0
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	1ad3      	subs	r3, r2, r3
 80054b4:	2b02      	cmp	r3, #2
 80054b6:	d902      	bls.n	80054be <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80054b8:	2303      	movs	r3, #3
 80054ba:	74fb      	strb	r3, [r7, #19]
        break;
 80054bc:	e005      	b.n	80054ca <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80054be:	4b30      	ldr	r3, [pc, #192]	@ (8005580 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d0ef      	beq.n	80054aa <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80054ca:	7cfb      	ldrb	r3, [r7, #19]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d159      	bne.n	8005584 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80054d0:	4b2a      	ldr	r3, [pc, #168]	@ (800557c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80054d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80054da:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80054dc:	697b      	ldr	r3, [r7, #20]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d01e      	beq.n	8005520 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80054e6:	697a      	ldr	r2, [r7, #20]
 80054e8:	429a      	cmp	r2, r3
 80054ea:	d019      	beq.n	8005520 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80054ec:	4b23      	ldr	r3, [pc, #140]	@ (800557c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80054ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054f2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80054f6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80054f8:	4b20      	ldr	r3, [pc, #128]	@ (800557c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80054fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054fe:	4a1f      	ldr	r2, [pc, #124]	@ (800557c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005500:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005504:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005508:	4b1c      	ldr	r3, [pc, #112]	@ (800557c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800550a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800550e:	4a1b      	ldr	r2, [pc, #108]	@ (800557c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005510:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005514:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005518:	4a18      	ldr	r2, [pc, #96]	@ (800557c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800551a:	697b      	ldr	r3, [r7, #20]
 800551c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005520:	697b      	ldr	r3, [r7, #20]
 8005522:	f003 0301 	and.w	r3, r3, #1
 8005526:	2b00      	cmp	r3, #0
 8005528:	d016      	beq.n	8005558 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800552a:	f7fd fa7f 	bl	8002a2c <HAL_GetTick>
 800552e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005530:	e00b      	b.n	800554a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005532:	f7fd fa7b 	bl	8002a2c <HAL_GetTick>
 8005536:	4602      	mov	r2, r0
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	1ad3      	subs	r3, r2, r3
 800553c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005540:	4293      	cmp	r3, r2
 8005542:	d902      	bls.n	800554a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005544:	2303      	movs	r3, #3
 8005546:	74fb      	strb	r3, [r7, #19]
            break;
 8005548:	e006      	b.n	8005558 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800554a:	4b0c      	ldr	r3, [pc, #48]	@ (800557c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800554c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005550:	f003 0302 	and.w	r3, r3, #2
 8005554:	2b00      	cmp	r3, #0
 8005556:	d0ec      	beq.n	8005532 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005558:	7cfb      	ldrb	r3, [r7, #19]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d10b      	bne.n	8005576 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800555e:	4b07      	ldr	r3, [pc, #28]	@ (800557c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005560:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005564:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800556c:	4903      	ldr	r1, [pc, #12]	@ (800557c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800556e:	4313      	orrs	r3, r2
 8005570:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005574:	e008      	b.n	8005588 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005576:	7cfb      	ldrb	r3, [r7, #19]
 8005578:	74bb      	strb	r3, [r7, #18]
 800557a:	e005      	b.n	8005588 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800557c:	40021000 	.word	0x40021000
 8005580:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005584:	7cfb      	ldrb	r3, [r7, #19]
 8005586:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005588:	7c7b      	ldrb	r3, [r7, #17]
 800558a:	2b01      	cmp	r3, #1
 800558c:	d105      	bne.n	800559a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800558e:	4ba7      	ldr	r3, [pc, #668]	@ (800582c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005590:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005592:	4aa6      	ldr	r2, [pc, #664]	@ (800582c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005594:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005598:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f003 0301 	and.w	r3, r3, #1
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d00a      	beq.n	80055bc <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80055a6:	4ba1      	ldr	r3, [pc, #644]	@ (800582c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055ac:	f023 0203 	bic.w	r2, r3, #3
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	685b      	ldr	r3, [r3, #4]
 80055b4:	499d      	ldr	r1, [pc, #628]	@ (800582c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055b6:	4313      	orrs	r3, r2
 80055b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f003 0302 	and.w	r3, r3, #2
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d00a      	beq.n	80055de <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80055c8:	4b98      	ldr	r3, [pc, #608]	@ (800582c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055ce:	f023 020c 	bic.w	r2, r3, #12
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	689b      	ldr	r3, [r3, #8]
 80055d6:	4995      	ldr	r1, [pc, #596]	@ (800582c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055d8:	4313      	orrs	r3, r2
 80055da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f003 0304 	and.w	r3, r3, #4
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d00a      	beq.n	8005600 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80055ea:	4b90      	ldr	r3, [pc, #576]	@ (800582c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055f0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	68db      	ldr	r3, [r3, #12]
 80055f8:	498c      	ldr	r1, [pc, #560]	@ (800582c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055fa:	4313      	orrs	r3, r2
 80055fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f003 0308 	and.w	r3, r3, #8
 8005608:	2b00      	cmp	r3, #0
 800560a:	d00a      	beq.n	8005622 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800560c:	4b87      	ldr	r3, [pc, #540]	@ (800582c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800560e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005612:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	691b      	ldr	r3, [r3, #16]
 800561a:	4984      	ldr	r1, [pc, #528]	@ (800582c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800561c:	4313      	orrs	r3, r2
 800561e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f003 0310 	and.w	r3, r3, #16
 800562a:	2b00      	cmp	r3, #0
 800562c:	d00a      	beq.n	8005644 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800562e:	4b7f      	ldr	r3, [pc, #508]	@ (800582c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005630:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005634:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	695b      	ldr	r3, [r3, #20]
 800563c:	497b      	ldr	r1, [pc, #492]	@ (800582c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800563e:	4313      	orrs	r3, r2
 8005640:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f003 0320 	and.w	r3, r3, #32
 800564c:	2b00      	cmp	r3, #0
 800564e:	d00a      	beq.n	8005666 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005650:	4b76      	ldr	r3, [pc, #472]	@ (800582c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005652:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005656:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	699b      	ldr	r3, [r3, #24]
 800565e:	4973      	ldr	r1, [pc, #460]	@ (800582c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005660:	4313      	orrs	r3, r2
 8005662:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800566e:	2b00      	cmp	r3, #0
 8005670:	d00a      	beq.n	8005688 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005672:	4b6e      	ldr	r3, [pc, #440]	@ (800582c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005674:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005678:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	69db      	ldr	r3, [r3, #28]
 8005680:	496a      	ldr	r1, [pc, #424]	@ (800582c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005682:	4313      	orrs	r3, r2
 8005684:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005690:	2b00      	cmp	r3, #0
 8005692:	d00a      	beq.n	80056aa <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005694:	4b65      	ldr	r3, [pc, #404]	@ (800582c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005696:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800569a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6a1b      	ldr	r3, [r3, #32]
 80056a2:	4962      	ldr	r1, [pc, #392]	@ (800582c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056a4:	4313      	orrs	r3, r2
 80056a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d00a      	beq.n	80056cc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80056b6:	4b5d      	ldr	r3, [pc, #372]	@ (800582c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056bc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056c4:	4959      	ldr	r1, [pc, #356]	@ (800582c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056c6:	4313      	orrs	r3, r2
 80056c8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d00a      	beq.n	80056ee <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80056d8:	4b54      	ldr	r3, [pc, #336]	@ (800582c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056da:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80056de:	f023 0203 	bic.w	r2, r3, #3
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056e6:	4951      	ldr	r1, [pc, #324]	@ (800582c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056e8:	4313      	orrs	r3, r2
 80056ea:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d00a      	beq.n	8005710 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80056fa:	4b4c      	ldr	r3, [pc, #304]	@ (800582c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005700:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005708:	4948      	ldr	r1, [pc, #288]	@ (800582c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800570a:	4313      	orrs	r3, r2
 800570c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005718:	2b00      	cmp	r3, #0
 800571a:	d015      	beq.n	8005748 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800571c:	4b43      	ldr	r3, [pc, #268]	@ (800582c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800571e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005722:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800572a:	4940      	ldr	r1, [pc, #256]	@ (800582c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800572c:	4313      	orrs	r3, r2
 800572e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005736:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800573a:	d105      	bne.n	8005748 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800573c:	4b3b      	ldr	r3, [pc, #236]	@ (800582c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800573e:	68db      	ldr	r3, [r3, #12]
 8005740:	4a3a      	ldr	r2, [pc, #232]	@ (800582c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005742:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005746:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005750:	2b00      	cmp	r3, #0
 8005752:	d015      	beq.n	8005780 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005754:	4b35      	ldr	r3, [pc, #212]	@ (800582c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005756:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800575a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005762:	4932      	ldr	r1, [pc, #200]	@ (800582c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005764:	4313      	orrs	r3, r2
 8005766:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800576e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005772:	d105      	bne.n	8005780 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005774:	4b2d      	ldr	r3, [pc, #180]	@ (800582c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005776:	68db      	ldr	r3, [r3, #12]
 8005778:	4a2c      	ldr	r2, [pc, #176]	@ (800582c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800577a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800577e:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005788:	2b00      	cmp	r3, #0
 800578a:	d015      	beq.n	80057b8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800578c:	4b27      	ldr	r3, [pc, #156]	@ (800582c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800578e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005792:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800579a:	4924      	ldr	r1, [pc, #144]	@ (800582c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800579c:	4313      	orrs	r3, r2
 800579e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057a6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80057aa:	d105      	bne.n	80057b8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80057ac:	4b1f      	ldr	r3, [pc, #124]	@ (800582c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80057ae:	68db      	ldr	r3, [r3, #12]
 80057b0:	4a1e      	ldr	r2, [pc, #120]	@ (800582c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80057b2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80057b6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d015      	beq.n	80057f0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80057c4:	4b19      	ldr	r3, [pc, #100]	@ (800582c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80057c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057ca:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057d2:	4916      	ldr	r1, [pc, #88]	@ (800582c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80057d4:	4313      	orrs	r3, r2
 80057d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057de:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80057e2:	d105      	bne.n	80057f0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80057e4:	4b11      	ldr	r3, [pc, #68]	@ (800582c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80057e6:	68db      	ldr	r3, [r3, #12]
 80057e8:	4a10      	ldr	r2, [pc, #64]	@ (800582c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80057ea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80057ee:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d019      	beq.n	8005830 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80057fc:	4b0b      	ldr	r3, [pc, #44]	@ (800582c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80057fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005802:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800580a:	4908      	ldr	r1, [pc, #32]	@ (800582c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800580c:	4313      	orrs	r3, r2
 800580e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005816:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800581a:	d109      	bne.n	8005830 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800581c:	4b03      	ldr	r3, [pc, #12]	@ (800582c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800581e:	68db      	ldr	r3, [r3, #12]
 8005820:	4a02      	ldr	r2, [pc, #8]	@ (800582c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005822:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005826:	60d3      	str	r3, [r2, #12]
 8005828:	e002      	b.n	8005830 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800582a:	bf00      	nop
 800582c:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005838:	2b00      	cmp	r3, #0
 800583a:	d015      	beq.n	8005868 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800583c:	4b29      	ldr	r3, [pc, #164]	@ (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800583e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005842:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800584a:	4926      	ldr	r1, [pc, #152]	@ (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800584c:	4313      	orrs	r3, r2
 800584e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005856:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800585a:	d105      	bne.n	8005868 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800585c:	4b21      	ldr	r3, [pc, #132]	@ (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800585e:	68db      	ldr	r3, [r3, #12]
 8005860:	4a20      	ldr	r2, [pc, #128]	@ (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005862:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005866:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005870:	2b00      	cmp	r3, #0
 8005872:	d015      	beq.n	80058a0 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8005874:	4b1b      	ldr	r3, [pc, #108]	@ (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005876:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800587a:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005882:	4918      	ldr	r1, [pc, #96]	@ (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005884:	4313      	orrs	r3, r2
 8005886:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800588e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005892:	d105      	bne.n	80058a0 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005894:	4b13      	ldr	r3, [pc, #76]	@ (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005896:	68db      	ldr	r3, [r3, #12]
 8005898:	4a12      	ldr	r2, [pc, #72]	@ (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800589a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800589e:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d015      	beq.n	80058d8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80058ac:	4b0d      	ldr	r3, [pc, #52]	@ (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80058ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80058b2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80058ba:	490a      	ldr	r1, [pc, #40]	@ (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80058bc:	4313      	orrs	r3, r2
 80058be:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80058c6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80058ca:	d105      	bne.n	80058d8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80058cc:	4b05      	ldr	r3, [pc, #20]	@ (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80058ce:	68db      	ldr	r3, [r3, #12]
 80058d0:	4a04      	ldr	r2, [pc, #16]	@ (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80058d2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80058d6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80058d8:	7cbb      	ldrb	r3, [r7, #18]
}
 80058da:	4618      	mov	r0, r3
 80058dc:	3718      	adds	r7, #24
 80058de:	46bd      	mov	sp, r7
 80058e0:	bd80      	pop	{r7, pc}
 80058e2:	bf00      	nop
 80058e4:	40021000 	.word	0x40021000

080058e8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b084      	sub	sp, #16
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d101      	bne.n	80058fa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80058f6:	2301      	movs	r3, #1
 80058f8:	e09d      	b.n	8005a36 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d108      	bne.n	8005914 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	685b      	ldr	r3, [r3, #4]
 8005906:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800590a:	d009      	beq.n	8005920 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2200      	movs	r2, #0
 8005910:	61da      	str	r2, [r3, #28]
 8005912:	e005      	b.n	8005920 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2200      	movs	r2, #0
 8005918:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2200      	movs	r2, #0
 800591e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2200      	movs	r2, #0
 8005924:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800592c:	b2db      	uxtb	r3, r3
 800592e:	2b00      	cmp	r3, #0
 8005930:	d106      	bne.n	8005940 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	2200      	movs	r2, #0
 8005936:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800593a:	6878      	ldr	r0, [r7, #4]
 800593c:	f7fc fcba 	bl	80022b4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2202      	movs	r2, #2
 8005944:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	681a      	ldr	r2, [r3, #0]
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005956:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	68db      	ldr	r3, [r3, #12]
 800595c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005960:	d902      	bls.n	8005968 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005962:	2300      	movs	r3, #0
 8005964:	60fb      	str	r3, [r7, #12]
 8005966:	e002      	b.n	800596e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005968:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800596c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	68db      	ldr	r3, [r3, #12]
 8005972:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8005976:	d007      	beq.n	8005988 <HAL_SPI_Init+0xa0>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	68db      	ldr	r3, [r3, #12]
 800597c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005980:	d002      	beq.n	8005988 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2200      	movs	r2, #0
 8005986:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	685b      	ldr	r3, [r3, #4]
 800598c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	689b      	ldr	r3, [r3, #8]
 8005994:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005998:	431a      	orrs	r2, r3
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	691b      	ldr	r3, [r3, #16]
 800599e:	f003 0302 	and.w	r3, r3, #2
 80059a2:	431a      	orrs	r2, r3
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	695b      	ldr	r3, [r3, #20]
 80059a8:	f003 0301 	and.w	r3, r3, #1
 80059ac:	431a      	orrs	r2, r3
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	699b      	ldr	r3, [r3, #24]
 80059b2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80059b6:	431a      	orrs	r2, r3
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	69db      	ldr	r3, [r3, #28]
 80059bc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80059c0:	431a      	orrs	r2, r3
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6a1b      	ldr	r3, [r3, #32]
 80059c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80059ca:	ea42 0103 	orr.w	r1, r2, r3
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059d2:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	430a      	orrs	r2, r1
 80059dc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	699b      	ldr	r3, [r3, #24]
 80059e2:	0c1b      	lsrs	r3, r3, #16
 80059e4:	f003 0204 	and.w	r2, r3, #4
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059ec:	f003 0310 	and.w	r3, r3, #16
 80059f0:	431a      	orrs	r2, r3
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80059f6:	f003 0308 	and.w	r3, r3, #8
 80059fa:	431a      	orrs	r2, r3
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	68db      	ldr	r3, [r3, #12]
 8005a00:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8005a04:	ea42 0103 	orr.w	r1, r2, r3
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	430a      	orrs	r2, r1
 8005a14:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	69da      	ldr	r2, [r3, #28]
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005a24:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2200      	movs	r2, #0
 8005a2a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2201      	movs	r2, #1
 8005a30:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8005a34:	2300      	movs	r3, #0
}
 8005a36:	4618      	mov	r0, r3
 8005a38:	3710      	adds	r7, #16
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	bd80      	pop	{r7, pc}

08005a3e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005a3e:	b580      	push	{r7, lr}
 8005a40:	b08a      	sub	sp, #40	@ 0x28
 8005a42:	af00      	add	r7, sp, #0
 8005a44:	60f8      	str	r0, [r7, #12]
 8005a46:	60b9      	str	r1, [r7, #8]
 8005a48:	607a      	str	r2, [r7, #4]
 8005a4a:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005a4c:	2301      	movs	r3, #1
 8005a4e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005a50:	f7fc ffec 	bl	8002a2c <HAL_GetTick>
 8005a54:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005a5c:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	685b      	ldr	r3, [r3, #4]
 8005a62:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8005a64:	887b      	ldrh	r3, [r7, #2]
 8005a66:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 8005a68:	887b      	ldrh	r3, [r7, #2]
 8005a6a:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005a6c:	7ffb      	ldrb	r3, [r7, #31]
 8005a6e:	2b01      	cmp	r3, #1
 8005a70:	d00c      	beq.n	8005a8c <HAL_SPI_TransmitReceive+0x4e>
 8005a72:	69bb      	ldr	r3, [r7, #24]
 8005a74:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005a78:	d106      	bne.n	8005a88 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	689b      	ldr	r3, [r3, #8]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d102      	bne.n	8005a88 <HAL_SPI_TransmitReceive+0x4a>
 8005a82:	7ffb      	ldrb	r3, [r7, #31]
 8005a84:	2b04      	cmp	r3, #4
 8005a86:	d001      	beq.n	8005a8c <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8005a88:	2302      	movs	r3, #2
 8005a8a:	e1f3      	b.n	8005e74 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005a8c:	68bb      	ldr	r3, [r7, #8]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d005      	beq.n	8005a9e <HAL_SPI_TransmitReceive+0x60>
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d002      	beq.n	8005a9e <HAL_SPI_TransmitReceive+0x60>
 8005a98:	887b      	ldrh	r3, [r7, #2]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d101      	bne.n	8005aa2 <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	e1e8      	b.n	8005e74 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005aa8:	2b01      	cmp	r3, #1
 8005aaa:	d101      	bne.n	8005ab0 <HAL_SPI_TransmitReceive+0x72>
 8005aac:	2302      	movs	r3, #2
 8005aae:	e1e1      	b.n	8005e74 <HAL_SPI_TransmitReceive+0x436>
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	2201      	movs	r2, #1
 8005ab4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005abe:	b2db      	uxtb	r3, r3
 8005ac0:	2b04      	cmp	r3, #4
 8005ac2:	d003      	beq.n	8005acc <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	2205      	movs	r2, #5
 8005ac8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	2200      	movs	r2, #0
 8005ad0:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	687a      	ldr	r2, [r7, #4]
 8005ad6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	887a      	ldrh	r2, [r7, #2]
 8005adc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	887a      	ldrh	r2, [r7, #2]
 8005ae4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	68ba      	ldr	r2, [r7, #8]
 8005aec:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	887a      	ldrh	r2, [r7, #2]
 8005af2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	887a      	ldrh	r2, [r7, #2]
 8005af8:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	2200      	movs	r2, #0
 8005afe:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	2200      	movs	r2, #0
 8005b04:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	68db      	ldr	r3, [r3, #12]
 8005b0a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005b0e:	d802      	bhi.n	8005b16 <HAL_SPI_TransmitReceive+0xd8>
 8005b10:	8abb      	ldrh	r3, [r7, #20]
 8005b12:	2b01      	cmp	r3, #1
 8005b14:	d908      	bls.n	8005b28 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	685a      	ldr	r2, [r3, #4]
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005b24:	605a      	str	r2, [r3, #4]
 8005b26:	e007      	b.n	8005b38 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	685a      	ldr	r2, [r3, #4]
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005b36:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b42:	2b40      	cmp	r3, #64	@ 0x40
 8005b44:	d007      	beq.n	8005b56 <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	681a      	ldr	r2, [r3, #0]
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005b54:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	68db      	ldr	r3, [r3, #12]
 8005b5a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005b5e:	f240 8083 	bls.w	8005c68 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	685b      	ldr	r3, [r3, #4]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d002      	beq.n	8005b70 <HAL_SPI_TransmitReceive+0x132>
 8005b6a:	8afb      	ldrh	r3, [r7, #22]
 8005b6c:	2b01      	cmp	r3, #1
 8005b6e:	d16f      	bne.n	8005c50 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b74:	881a      	ldrh	r2, [r3, #0]
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b80:	1c9a      	adds	r2, r3, #2
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005b8a:	b29b      	uxth	r3, r3
 8005b8c:	3b01      	subs	r3, #1
 8005b8e:	b29a      	uxth	r2, r3
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005b94:	e05c      	b.n	8005c50 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	689b      	ldr	r3, [r3, #8]
 8005b9c:	f003 0302 	and.w	r3, r3, #2
 8005ba0:	2b02      	cmp	r3, #2
 8005ba2:	d11b      	bne.n	8005bdc <HAL_SPI_TransmitReceive+0x19e>
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005ba8:	b29b      	uxth	r3, r3
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d016      	beq.n	8005bdc <HAL_SPI_TransmitReceive+0x19e>
 8005bae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bb0:	2b01      	cmp	r3, #1
 8005bb2:	d113      	bne.n	8005bdc <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bb8:	881a      	ldrh	r2, [r3, #0]
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bc4:	1c9a      	adds	r2, r3, #2
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005bce:	b29b      	uxth	r3, r3
 8005bd0:	3b01      	subs	r3, #1
 8005bd2:	b29a      	uxth	r2, r3
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005bd8:	2300      	movs	r3, #0
 8005bda:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	689b      	ldr	r3, [r3, #8]
 8005be2:	f003 0301 	and.w	r3, r3, #1
 8005be6:	2b01      	cmp	r3, #1
 8005be8:	d11c      	bne.n	8005c24 <HAL_SPI_TransmitReceive+0x1e6>
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005bf0:	b29b      	uxth	r3, r3
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d016      	beq.n	8005c24 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	68da      	ldr	r2, [r3, #12]
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c00:	b292      	uxth	r2, r2
 8005c02:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c08:	1c9a      	adds	r2, r3, #2
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005c14:	b29b      	uxth	r3, r3
 8005c16:	3b01      	subs	r3, #1
 8005c18:	b29a      	uxth	r2, r3
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005c20:	2301      	movs	r3, #1
 8005c22:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005c24:	f7fc ff02 	bl	8002a2c <HAL_GetTick>
 8005c28:	4602      	mov	r2, r0
 8005c2a:	6a3b      	ldr	r3, [r7, #32]
 8005c2c:	1ad3      	subs	r3, r2, r3
 8005c2e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005c30:	429a      	cmp	r2, r3
 8005c32:	d80d      	bhi.n	8005c50 <HAL_SPI_TransmitReceive+0x212>
 8005c34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c3a:	d009      	beq.n	8005c50 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	2201      	movs	r2, #1
 8005c40:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	2200      	movs	r2, #0
 8005c48:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8005c4c:	2303      	movs	r3, #3
 8005c4e:	e111      	b.n	8005e74 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005c54:	b29b      	uxth	r3, r3
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d19d      	bne.n	8005b96 <HAL_SPI_TransmitReceive+0x158>
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005c60:	b29b      	uxth	r3, r3
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d197      	bne.n	8005b96 <HAL_SPI_TransmitReceive+0x158>
 8005c66:	e0e5      	b.n	8005e34 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	685b      	ldr	r3, [r3, #4]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d003      	beq.n	8005c78 <HAL_SPI_TransmitReceive+0x23a>
 8005c70:	8afb      	ldrh	r3, [r7, #22]
 8005c72:	2b01      	cmp	r3, #1
 8005c74:	f040 80d1 	bne.w	8005e1a <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005c7c:	b29b      	uxth	r3, r3
 8005c7e:	2b01      	cmp	r3, #1
 8005c80:	d912      	bls.n	8005ca8 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c86:	881a      	ldrh	r2, [r3, #0]
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c92:	1c9a      	adds	r2, r3, #2
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005c9c:	b29b      	uxth	r3, r3
 8005c9e:	3b02      	subs	r3, #2
 8005ca0:	b29a      	uxth	r2, r3
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005ca6:	e0b8      	b.n	8005e1a <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	330c      	adds	r3, #12
 8005cb2:	7812      	ldrb	r2, [r2, #0]
 8005cb4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cba:	1c5a      	adds	r2, r3, #1
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005cc4:	b29b      	uxth	r3, r3
 8005cc6:	3b01      	subs	r3, #1
 8005cc8:	b29a      	uxth	r2, r3
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005cce:	e0a4      	b.n	8005e1a <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	689b      	ldr	r3, [r3, #8]
 8005cd6:	f003 0302 	and.w	r3, r3, #2
 8005cda:	2b02      	cmp	r3, #2
 8005cdc:	d134      	bne.n	8005d48 <HAL_SPI_TransmitReceive+0x30a>
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005ce2:	b29b      	uxth	r3, r3
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d02f      	beq.n	8005d48 <HAL_SPI_TransmitReceive+0x30a>
 8005ce8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cea:	2b01      	cmp	r3, #1
 8005cec:	d12c      	bne.n	8005d48 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005cf2:	b29b      	uxth	r3, r3
 8005cf4:	2b01      	cmp	r3, #1
 8005cf6:	d912      	bls.n	8005d1e <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cfc:	881a      	ldrh	r2, [r3, #0]
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d08:	1c9a      	adds	r2, r3, #2
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005d12:	b29b      	uxth	r3, r3
 8005d14:	3b02      	subs	r3, #2
 8005d16:	b29a      	uxth	r2, r3
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005d1c:	e012      	b.n	8005d44 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	330c      	adds	r3, #12
 8005d28:	7812      	ldrb	r2, [r2, #0]
 8005d2a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d30:	1c5a      	adds	r2, r3, #1
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005d3a:	b29b      	uxth	r3, r3
 8005d3c:	3b01      	subs	r3, #1
 8005d3e:	b29a      	uxth	r2, r3
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005d44:	2300      	movs	r3, #0
 8005d46:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	689b      	ldr	r3, [r3, #8]
 8005d4e:	f003 0301 	and.w	r3, r3, #1
 8005d52:	2b01      	cmp	r3, #1
 8005d54:	d148      	bne.n	8005de8 <HAL_SPI_TransmitReceive+0x3aa>
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005d5c:	b29b      	uxth	r3, r3
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d042      	beq.n	8005de8 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005d68:	b29b      	uxth	r3, r3
 8005d6a:	2b01      	cmp	r3, #1
 8005d6c:	d923      	bls.n	8005db6 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	68da      	ldr	r2, [r3, #12]
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d78:	b292      	uxth	r2, r2
 8005d7a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d80:	1c9a      	adds	r2, r3, #2
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005d8c:	b29b      	uxth	r3, r3
 8005d8e:	3b02      	subs	r3, #2
 8005d90:	b29a      	uxth	r2, r3
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005d9e:	b29b      	uxth	r3, r3
 8005da0:	2b01      	cmp	r3, #1
 8005da2:	d81f      	bhi.n	8005de4 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	685a      	ldr	r2, [r3, #4]
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005db2:	605a      	str	r2, [r3, #4]
 8005db4:	e016      	b.n	8005de4 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f103 020c 	add.w	r2, r3, #12
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dc2:	7812      	ldrb	r2, [r2, #0]
 8005dc4:	b2d2      	uxtb	r2, r2
 8005dc6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dcc:	1c5a      	adds	r2, r3, #1
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005dd8:	b29b      	uxth	r3, r3
 8005dda:	3b01      	subs	r3, #1
 8005ddc:	b29a      	uxth	r2, r3
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005de4:	2301      	movs	r3, #1
 8005de6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005de8:	f7fc fe20 	bl	8002a2c <HAL_GetTick>
 8005dec:	4602      	mov	r2, r0
 8005dee:	6a3b      	ldr	r3, [r7, #32]
 8005df0:	1ad3      	subs	r3, r2, r3
 8005df2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005df4:	429a      	cmp	r2, r3
 8005df6:	d803      	bhi.n	8005e00 <HAL_SPI_TransmitReceive+0x3c2>
 8005df8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dfe:	d102      	bne.n	8005e06 <HAL_SPI_TransmitReceive+0x3c8>
 8005e00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d109      	bne.n	8005e1a <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	2201      	movs	r2, #1
 8005e0a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	2200      	movs	r2, #0
 8005e12:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8005e16:	2303      	movs	r3, #3
 8005e18:	e02c      	b.n	8005e74 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005e1e:	b29b      	uxth	r3, r3
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	f47f af55 	bne.w	8005cd0 <HAL_SPI_TransmitReceive+0x292>
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005e2c:	b29b      	uxth	r3, r3
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	f47f af4e 	bne.w	8005cd0 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005e34:	6a3a      	ldr	r2, [r7, #32]
 8005e36:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005e38:	68f8      	ldr	r0, [r7, #12]
 8005e3a:	f000 f93d 	bl	80060b8 <SPI_EndRxTxTransaction>
 8005e3e:	4603      	mov	r3, r0
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d008      	beq.n	8005e56 <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	2220      	movs	r2, #32
 8005e48:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8005e52:	2301      	movs	r3, #1
 8005e54:	e00e      	b.n	8005e74 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	2201      	movs	r2, #1
 8005e5a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	2200      	movs	r2, #0
 8005e62:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d001      	beq.n	8005e72 <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 8005e6e:	2301      	movs	r3, #1
 8005e70:	e000      	b.n	8005e74 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 8005e72:	2300      	movs	r3, #0
  }
}
 8005e74:	4618      	mov	r0, r3
 8005e76:	3728      	adds	r7, #40	@ 0x28
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	bd80      	pop	{r7, pc}

08005e7c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b088      	sub	sp, #32
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	60f8      	str	r0, [r7, #12]
 8005e84:	60b9      	str	r1, [r7, #8]
 8005e86:	603b      	str	r3, [r7, #0]
 8005e88:	4613      	mov	r3, r2
 8005e8a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005e8c:	f7fc fdce 	bl	8002a2c <HAL_GetTick>
 8005e90:	4602      	mov	r2, r0
 8005e92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e94:	1a9b      	subs	r3, r3, r2
 8005e96:	683a      	ldr	r2, [r7, #0]
 8005e98:	4413      	add	r3, r2
 8005e9a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005e9c:	f7fc fdc6 	bl	8002a2c <HAL_GetTick>
 8005ea0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005ea2:	4b39      	ldr	r3, [pc, #228]	@ (8005f88 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	015b      	lsls	r3, r3, #5
 8005ea8:	0d1b      	lsrs	r3, r3, #20
 8005eaa:	69fa      	ldr	r2, [r7, #28]
 8005eac:	fb02 f303 	mul.w	r3, r2, r3
 8005eb0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005eb2:	e054      	b.n	8005f5e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005eba:	d050      	beq.n	8005f5e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005ebc:	f7fc fdb6 	bl	8002a2c <HAL_GetTick>
 8005ec0:	4602      	mov	r2, r0
 8005ec2:	69bb      	ldr	r3, [r7, #24]
 8005ec4:	1ad3      	subs	r3, r2, r3
 8005ec6:	69fa      	ldr	r2, [r7, #28]
 8005ec8:	429a      	cmp	r2, r3
 8005eca:	d902      	bls.n	8005ed2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005ecc:	69fb      	ldr	r3, [r7, #28]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d13d      	bne.n	8005f4e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	685a      	ldr	r2, [r3, #4]
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005ee0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	685b      	ldr	r3, [r3, #4]
 8005ee6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005eea:	d111      	bne.n	8005f10 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	689b      	ldr	r3, [r3, #8]
 8005ef0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005ef4:	d004      	beq.n	8005f00 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	689b      	ldr	r3, [r3, #8]
 8005efa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005efe:	d107      	bne.n	8005f10 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	681a      	ldr	r2, [r3, #0]
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005f0e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f14:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005f18:	d10f      	bne.n	8005f3a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	681a      	ldr	r2, [r3, #0]
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005f28:	601a      	str	r2, [r3, #0]
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	681a      	ldr	r2, [r3, #0]
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005f38:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	2201      	movs	r2, #1
 8005f3e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	2200      	movs	r2, #0
 8005f46:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8005f4a:	2303      	movs	r3, #3
 8005f4c:	e017      	b.n	8005f7e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005f4e:	697b      	ldr	r3, [r7, #20]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d101      	bne.n	8005f58 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005f54:	2300      	movs	r3, #0
 8005f56:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005f58:	697b      	ldr	r3, [r7, #20]
 8005f5a:	3b01      	subs	r3, #1
 8005f5c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	689a      	ldr	r2, [r3, #8]
 8005f64:	68bb      	ldr	r3, [r7, #8]
 8005f66:	4013      	ands	r3, r2
 8005f68:	68ba      	ldr	r2, [r7, #8]
 8005f6a:	429a      	cmp	r2, r3
 8005f6c:	bf0c      	ite	eq
 8005f6e:	2301      	moveq	r3, #1
 8005f70:	2300      	movne	r3, #0
 8005f72:	b2db      	uxtb	r3, r3
 8005f74:	461a      	mov	r2, r3
 8005f76:	79fb      	ldrb	r3, [r7, #7]
 8005f78:	429a      	cmp	r2, r3
 8005f7a:	d19b      	bne.n	8005eb4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005f7c:	2300      	movs	r3, #0
}
 8005f7e:	4618      	mov	r0, r3
 8005f80:	3720      	adds	r7, #32
 8005f82:	46bd      	mov	sp, r7
 8005f84:	bd80      	pop	{r7, pc}
 8005f86:	bf00      	nop
 8005f88:	20000210 	.word	0x20000210

08005f8c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b08a      	sub	sp, #40	@ 0x28
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	60f8      	str	r0, [r7, #12]
 8005f94:	60b9      	str	r1, [r7, #8]
 8005f96:	607a      	str	r2, [r7, #4]
 8005f98:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005f9e:	f7fc fd45 	bl	8002a2c <HAL_GetTick>
 8005fa2:	4602      	mov	r2, r0
 8005fa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fa6:	1a9b      	subs	r3, r3, r2
 8005fa8:	683a      	ldr	r2, [r7, #0]
 8005faa:	4413      	add	r3, r2
 8005fac:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8005fae:	f7fc fd3d 	bl	8002a2c <HAL_GetTick>
 8005fb2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	330c      	adds	r3, #12
 8005fba:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005fbc:	4b3d      	ldr	r3, [pc, #244]	@ (80060b4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005fbe:	681a      	ldr	r2, [r3, #0]
 8005fc0:	4613      	mov	r3, r2
 8005fc2:	009b      	lsls	r3, r3, #2
 8005fc4:	4413      	add	r3, r2
 8005fc6:	00da      	lsls	r2, r3, #3
 8005fc8:	1ad3      	subs	r3, r2, r3
 8005fca:	0d1b      	lsrs	r3, r3, #20
 8005fcc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005fce:	fb02 f303 	mul.w	r3, r2, r3
 8005fd2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005fd4:	e060      	b.n	8006098 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005fd6:	68bb      	ldr	r3, [r7, #8]
 8005fd8:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005fdc:	d107      	bne.n	8005fee <SPI_WaitFifoStateUntilTimeout+0x62>
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d104      	bne.n	8005fee <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005fe4:	69fb      	ldr	r3, [r7, #28]
 8005fe6:	781b      	ldrb	r3, [r3, #0]
 8005fe8:	b2db      	uxtb	r3, r3
 8005fea:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005fec:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ff4:	d050      	beq.n	8006098 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005ff6:	f7fc fd19 	bl	8002a2c <HAL_GetTick>
 8005ffa:	4602      	mov	r2, r0
 8005ffc:	6a3b      	ldr	r3, [r7, #32]
 8005ffe:	1ad3      	subs	r3, r2, r3
 8006000:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006002:	429a      	cmp	r2, r3
 8006004:	d902      	bls.n	800600c <SPI_WaitFifoStateUntilTimeout+0x80>
 8006006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006008:	2b00      	cmp	r3, #0
 800600a:	d13d      	bne.n	8006088 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	685a      	ldr	r2, [r3, #4]
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800601a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	685b      	ldr	r3, [r3, #4]
 8006020:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006024:	d111      	bne.n	800604a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	689b      	ldr	r3, [r3, #8]
 800602a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800602e:	d004      	beq.n	800603a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	689b      	ldr	r3, [r3, #8]
 8006034:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006038:	d107      	bne.n	800604a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	681a      	ldr	r2, [r3, #0]
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006048:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800604e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006052:	d10f      	bne.n	8006074 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	681a      	ldr	r2, [r3, #0]
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006062:	601a      	str	r2, [r3, #0]
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	681a      	ldr	r2, [r3, #0]
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006072:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	2201      	movs	r2, #1
 8006078:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	2200      	movs	r2, #0
 8006080:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8006084:	2303      	movs	r3, #3
 8006086:	e010      	b.n	80060aa <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006088:	69bb      	ldr	r3, [r7, #24]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d101      	bne.n	8006092 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800608e:	2300      	movs	r3, #0
 8006090:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8006092:	69bb      	ldr	r3, [r7, #24]
 8006094:	3b01      	subs	r3, #1
 8006096:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	689a      	ldr	r2, [r3, #8]
 800609e:	68bb      	ldr	r3, [r7, #8]
 80060a0:	4013      	ands	r3, r2
 80060a2:	687a      	ldr	r2, [r7, #4]
 80060a4:	429a      	cmp	r2, r3
 80060a6:	d196      	bne.n	8005fd6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80060a8:	2300      	movs	r3, #0
}
 80060aa:	4618      	mov	r0, r3
 80060ac:	3728      	adds	r7, #40	@ 0x28
 80060ae:	46bd      	mov	sp, r7
 80060b0:	bd80      	pop	{r7, pc}
 80060b2:	bf00      	nop
 80060b4:	20000210 	.word	0x20000210

080060b8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b086      	sub	sp, #24
 80060bc:	af02      	add	r7, sp, #8
 80060be:	60f8      	str	r0, [r7, #12]
 80060c0:	60b9      	str	r1, [r7, #8]
 80060c2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	9300      	str	r3, [sp, #0]
 80060c8:	68bb      	ldr	r3, [r7, #8]
 80060ca:	2200      	movs	r2, #0
 80060cc:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80060d0:	68f8      	ldr	r0, [r7, #12]
 80060d2:	f7ff ff5b 	bl	8005f8c <SPI_WaitFifoStateUntilTimeout>
 80060d6:	4603      	mov	r3, r0
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d007      	beq.n	80060ec <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80060e0:	f043 0220 	orr.w	r2, r3, #32
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80060e8:	2303      	movs	r3, #3
 80060ea:	e027      	b.n	800613c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	9300      	str	r3, [sp, #0]
 80060f0:	68bb      	ldr	r3, [r7, #8]
 80060f2:	2200      	movs	r2, #0
 80060f4:	2180      	movs	r1, #128	@ 0x80
 80060f6:	68f8      	ldr	r0, [r7, #12]
 80060f8:	f7ff fec0 	bl	8005e7c <SPI_WaitFlagStateUntilTimeout>
 80060fc:	4603      	mov	r3, r0
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d007      	beq.n	8006112 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006106:	f043 0220 	orr.w	r2, r3, #32
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800610e:	2303      	movs	r3, #3
 8006110:	e014      	b.n	800613c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	9300      	str	r3, [sp, #0]
 8006116:	68bb      	ldr	r3, [r7, #8]
 8006118:	2200      	movs	r2, #0
 800611a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800611e:	68f8      	ldr	r0, [r7, #12]
 8006120:	f7ff ff34 	bl	8005f8c <SPI_WaitFifoStateUntilTimeout>
 8006124:	4603      	mov	r3, r0
 8006126:	2b00      	cmp	r3, #0
 8006128:	d007      	beq.n	800613a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800612e:	f043 0220 	orr.w	r2, r3, #32
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006136:	2303      	movs	r3, #3
 8006138:	e000      	b.n	800613c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800613a:	2300      	movs	r3, #0
}
 800613c:	4618      	mov	r0, r3
 800613e:	3710      	adds	r7, #16
 8006140:	46bd      	mov	sp, r7
 8006142:	bd80      	pop	{r7, pc}

08006144 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b082      	sub	sp, #8
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2b00      	cmp	r3, #0
 8006150:	d101      	bne.n	8006156 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006152:	2301      	movs	r3, #1
 8006154:	e054      	b.n	8006200 <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800615c:	b2db      	uxtb	r3, r3
 800615e:	2b00      	cmp	r3, #0
 8006160:	d111      	bne.n	8006186 <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2200      	movs	r2, #0
 8006166:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800616a:	6878      	ldr	r0, [r7, #4]
 800616c:	f001 fe5c 	bl	8007e28 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006174:	2b00      	cmp	r3, #0
 8006176:	d102      	bne.n	800617e <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	4a23      	ldr	r2, [pc, #140]	@ (8006208 <HAL_TIM_Base_Init+0xc4>)
 800617c:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006182:	6878      	ldr	r0, [r7, #4]
 8006184:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	2202      	movs	r2, #2
 800618a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681a      	ldr	r2, [r3, #0]
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	3304      	adds	r3, #4
 8006196:	4619      	mov	r1, r3
 8006198:	4610      	mov	r0, r2
 800619a:	f001 f9a5 	bl	80074e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2201      	movs	r2, #1
 80061a2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	2201      	movs	r2, #1
 80061aa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	2201      	movs	r2, #1
 80061b2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	2201      	movs	r2, #1
 80061ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	2201      	movs	r2, #1
 80061c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	2201      	movs	r2, #1
 80061ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	2201      	movs	r2, #1
 80061d2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	2201      	movs	r2, #1
 80061da:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	2201      	movs	r2, #1
 80061e2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	2201      	movs	r2, #1
 80061ea:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	2201      	movs	r2, #1
 80061f2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	2201      	movs	r2, #1
 80061fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80061fe:	2300      	movs	r3, #0
}
 8006200:	4618      	mov	r0, r3
 8006202:	3708      	adds	r7, #8
 8006204:	46bd      	mov	sp, r7
 8006206:	bd80      	pop	{r7, pc}
 8006208:	08002375 	.word	0x08002375

0800620c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800620c:	b480      	push	{r7}
 800620e:	b085      	sub	sp, #20
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800621a:	b2db      	uxtb	r3, r3
 800621c:	2b01      	cmp	r3, #1
 800621e:	d001      	beq.n	8006224 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006220:	2301      	movs	r3, #1
 8006222:	e054      	b.n	80062ce <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2202      	movs	r2, #2
 8006228:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	68da      	ldr	r2, [r3, #12]
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f042 0201 	orr.w	r2, r2, #1
 800623a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	4a26      	ldr	r2, [pc, #152]	@ (80062dc <HAL_TIM_Base_Start_IT+0xd0>)
 8006242:	4293      	cmp	r3, r2
 8006244:	d022      	beq.n	800628c <HAL_TIM_Base_Start_IT+0x80>
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800624e:	d01d      	beq.n	800628c <HAL_TIM_Base_Start_IT+0x80>
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	4a22      	ldr	r2, [pc, #136]	@ (80062e0 <HAL_TIM_Base_Start_IT+0xd4>)
 8006256:	4293      	cmp	r3, r2
 8006258:	d018      	beq.n	800628c <HAL_TIM_Base_Start_IT+0x80>
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	4a21      	ldr	r2, [pc, #132]	@ (80062e4 <HAL_TIM_Base_Start_IT+0xd8>)
 8006260:	4293      	cmp	r3, r2
 8006262:	d013      	beq.n	800628c <HAL_TIM_Base_Start_IT+0x80>
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	4a1f      	ldr	r2, [pc, #124]	@ (80062e8 <HAL_TIM_Base_Start_IT+0xdc>)
 800626a:	4293      	cmp	r3, r2
 800626c:	d00e      	beq.n	800628c <HAL_TIM_Base_Start_IT+0x80>
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	4a1e      	ldr	r2, [pc, #120]	@ (80062ec <HAL_TIM_Base_Start_IT+0xe0>)
 8006274:	4293      	cmp	r3, r2
 8006276:	d009      	beq.n	800628c <HAL_TIM_Base_Start_IT+0x80>
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	4a1c      	ldr	r2, [pc, #112]	@ (80062f0 <HAL_TIM_Base_Start_IT+0xe4>)
 800627e:	4293      	cmp	r3, r2
 8006280:	d004      	beq.n	800628c <HAL_TIM_Base_Start_IT+0x80>
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	4a1b      	ldr	r2, [pc, #108]	@ (80062f4 <HAL_TIM_Base_Start_IT+0xe8>)
 8006288:	4293      	cmp	r3, r2
 800628a:	d115      	bne.n	80062b8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	689a      	ldr	r2, [r3, #8]
 8006292:	4b19      	ldr	r3, [pc, #100]	@ (80062f8 <HAL_TIM_Base_Start_IT+0xec>)
 8006294:	4013      	ands	r3, r2
 8006296:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	2b06      	cmp	r3, #6
 800629c:	d015      	beq.n	80062ca <HAL_TIM_Base_Start_IT+0xbe>
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80062a4:	d011      	beq.n	80062ca <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	681a      	ldr	r2, [r3, #0]
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f042 0201 	orr.w	r2, r2, #1
 80062b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062b6:	e008      	b.n	80062ca <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	681a      	ldr	r2, [r3, #0]
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f042 0201 	orr.w	r2, r2, #1
 80062c6:	601a      	str	r2, [r3, #0]
 80062c8:	e000      	b.n	80062cc <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062ca:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80062cc:	2300      	movs	r3, #0
}
 80062ce:	4618      	mov	r0, r3
 80062d0:	3714      	adds	r7, #20
 80062d2:	46bd      	mov	sp, r7
 80062d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d8:	4770      	bx	lr
 80062da:	bf00      	nop
 80062dc:	40012c00 	.word	0x40012c00
 80062e0:	40000400 	.word	0x40000400
 80062e4:	40000800 	.word	0x40000800
 80062e8:	40000c00 	.word	0x40000c00
 80062ec:	40013400 	.word	0x40013400
 80062f0:	40014000 	.word	0x40014000
 80062f4:	40015000 	.word	0x40015000
 80062f8:	00010007 	.word	0x00010007

080062fc <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80062fc:	b580      	push	{r7, lr}
 80062fe:	b082      	sub	sp, #8
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d101      	bne.n	800630e <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800630a:	2301      	movs	r3, #1
 800630c:	e054      	b.n	80063b8 <HAL_TIM_OC_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006314:	b2db      	uxtb	r3, r3
 8006316:	2b00      	cmp	r3, #0
 8006318:	d111      	bne.n	800633e <HAL_TIM_OC_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	2200      	movs	r2, #0
 800631e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8006322:	6878      	ldr	r0, [r7, #4]
 8006324:	f001 fd80 	bl	8007e28 <TIM_ResetCallback>

    if (htim->OC_MspInitCallback == NULL)
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800632c:	2b00      	cmp	r3, #0
 800632e:	d102      	bne.n	8006336 <HAL_TIM_OC_Init+0x3a>
    {
      htim->OC_MspInitCallback = HAL_TIM_OC_MspInit;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	4a23      	ldr	r2, [pc, #140]	@ (80063c0 <HAL_TIM_OC_Init+0xc4>)
 8006334:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800633a:	6878      	ldr	r0, [r7, #4]
 800633c:	4798      	blx	r3
    HAL_TIM_OC_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	2202      	movs	r2, #2
 8006342:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681a      	ldr	r2, [r3, #0]
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	3304      	adds	r3, #4
 800634e:	4619      	mov	r1, r3
 8006350:	4610      	mov	r0, r2
 8006352:	f001 f8c9 	bl	80074e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	2201      	movs	r2, #1
 800635a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	2201      	movs	r2, #1
 8006362:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	2201      	movs	r2, #1
 800636a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	2201      	movs	r2, #1
 8006372:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2201      	movs	r2, #1
 800637a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2201      	movs	r2, #1
 8006382:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	2201      	movs	r2, #1
 800638a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	2201      	movs	r2, #1
 8006392:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	2201      	movs	r2, #1
 800639a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	2201      	movs	r2, #1
 80063a2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	2201      	movs	r2, #1
 80063aa:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	2201      	movs	r2, #1
 80063b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80063b6:	2300      	movs	r3, #0
}
 80063b8:	4618      	mov	r0, r3
 80063ba:	3708      	adds	r7, #8
 80063bc:	46bd      	mov	sp, r7
 80063be:	bd80      	pop	{r7, pc}
 80063c0:	080063c5 	.word	0x080063c5

080063c4 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80063c4:	b480      	push	{r7}
 80063c6:	b083      	sub	sp, #12
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80063cc:	bf00      	nop
 80063ce:	370c      	adds	r7, #12
 80063d0:	46bd      	mov	sp, r7
 80063d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d6:	4770      	bx	lr

080063d8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	b082      	sub	sp, #8
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d101      	bne.n	80063ea <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80063e6:	2301      	movs	r3, #1
 80063e8:	e054      	b.n	8006494 <HAL_TIM_PWM_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80063f0:	b2db      	uxtb	r3, r3
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d111      	bne.n	800641a <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	2200      	movs	r2, #0
 80063fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80063fe:	6878      	ldr	r0, [r7, #4]
 8006400:	f001 fd12 	bl	8007e28 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006408:	2b00      	cmp	r3, #0
 800640a:	d102      	bne.n	8006412 <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	4a23      	ldr	r2, [pc, #140]	@ (800649c <HAL_TIM_PWM_Init+0xc4>)
 8006410:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006416:	6878      	ldr	r0, [r7, #4]
 8006418:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	2202      	movs	r2, #2
 800641e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681a      	ldr	r2, [r3, #0]
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	3304      	adds	r3, #4
 800642a:	4619      	mov	r1, r3
 800642c:	4610      	mov	r0, r2
 800642e:	f001 f85b 	bl	80074e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	2201      	movs	r2, #1
 8006436:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	2201      	movs	r2, #1
 800643e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	2201      	movs	r2, #1
 8006446:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	2201      	movs	r2, #1
 800644e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	2201      	movs	r2, #1
 8006456:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	2201      	movs	r2, #1
 800645e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	2201      	movs	r2, #1
 8006466:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	2201      	movs	r2, #1
 800646e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	2201      	movs	r2, #1
 8006476:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	2201      	movs	r2, #1
 800647e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	2201      	movs	r2, #1
 8006486:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	2201      	movs	r2, #1
 800648e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006492:	2300      	movs	r3, #0
}
 8006494:	4618      	mov	r0, r3
 8006496:	3708      	adds	r7, #8
 8006498:	46bd      	mov	sp, r7
 800649a:	bd80      	pop	{r7, pc}
 800649c:	080064a1 	.word	0x080064a1

080064a0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80064a0:	b480      	push	{r7}
 80064a2:	b083      	sub	sp, #12
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80064a8:	bf00      	nop
 80064aa:	370c      	adds	r7, #12
 80064ac:	46bd      	mov	sp, r7
 80064ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b2:	4770      	bx	lr

080064b4 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b082      	sub	sp, #8
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
 80064bc:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d101      	bne.n	80064c8 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 80064c4:	2301      	movs	r3, #1
 80064c6:	e04c      	b.n	8006562 <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80064ce:	b2db      	uxtb	r3, r3
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d111      	bne.n	80064f8 <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2200      	movs	r2, #0
 80064d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80064dc:	6878      	ldr	r0, [r7, #4]
 80064de:	f001 fca3 	bl	8007e28 <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d102      	bne.n	80064f0 <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	4a1f      	ldr	r2, [pc, #124]	@ (800656c <HAL_TIM_OnePulse_Init+0xb8>)
 80064ee:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80064f4:	6878      	ldr	r0, [r7, #4]
 80064f6:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2202      	movs	r2, #2
 80064fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681a      	ldr	r2, [r3, #0]
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	3304      	adds	r3, #4
 8006508:	4619      	mov	r1, r3
 800650a:	4610      	mov	r0, r2
 800650c:	f000 ffec 	bl	80074e8 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	681a      	ldr	r2, [r3, #0]
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f022 0208 	bic.w	r2, r2, #8
 800651e:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	6819      	ldr	r1, [r3, #0]
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	683a      	ldr	r2, [r7, #0]
 800652c:	430a      	orrs	r2, r1
 800652e:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2201      	movs	r2, #1
 8006534:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2201      	movs	r2, #1
 800653c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2201      	movs	r2, #1
 8006544:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2201      	movs	r2, #1
 800654c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2201      	movs	r2, #1
 8006554:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2201      	movs	r2, #1
 800655c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006560:	2300      	movs	r3, #0
}
 8006562:	4618      	mov	r0, r3
 8006564:	3708      	adds	r7, #8
 8006566:	46bd      	mov	sp, r7
 8006568:	bd80      	pop	{r7, pc}
 800656a:	bf00      	nop
 800656c:	08006571 	.word	0x08006571

08006570 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8006570:	b480      	push	{r7}
 8006572:	b083      	sub	sp, #12
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8006578:	bf00      	nop
 800657a:	370c      	adds	r7, #12
 800657c:	46bd      	mov	sp, r7
 800657e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006582:	4770      	bx	lr

08006584 <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 8006584:	b580      	push	{r7, lr}
 8006586:	b084      	sub	sp, #16
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
 800658c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006594:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800659c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80065a4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80065ac:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80065ae:	7bfb      	ldrb	r3, [r7, #15]
 80065b0:	2b01      	cmp	r3, #1
 80065b2:	d108      	bne.n	80065c6 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80065b4:	7bbb      	ldrb	r3, [r7, #14]
 80065b6:	2b01      	cmp	r3, #1
 80065b8:	d105      	bne.n	80065c6 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80065ba:	7b7b      	ldrb	r3, [r7, #13]
 80065bc:	2b01      	cmp	r3, #1
 80065be:	d102      	bne.n	80065c6 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80065c0:	7b3b      	ldrb	r3, [r7, #12]
 80065c2:	2b01      	cmp	r3, #1
 80065c4:	d001      	beq.n	80065ca <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 80065c6:	2301      	movs	r3, #1
 80065c8:	e059      	b.n	800667e <HAL_TIM_OnePulse_Start_IT+0xfa>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	2202      	movs	r2, #2
 80065ce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	2202      	movs	r2, #2
 80065d6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	2202      	movs	r2, #2
 80065de:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	2202      	movs	r2, #2
 80065e6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	68da      	ldr	r2, [r3, #12]
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f042 0202 	orr.w	r2, r2, #2
 80065f8:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	68da      	ldr	r2, [r3, #12]
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f042 0204 	orr.w	r2, r2, #4
 8006608:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	2201      	movs	r2, #1
 8006610:	2100      	movs	r1, #0
 8006612:	4618      	mov	r0, r3
 8006614:	f001 fbe2 	bl	8007ddc <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	2201      	movs	r2, #1
 800661e:	2104      	movs	r1, #4
 8006620:	4618      	mov	r0, r3
 8006622:	f001 fbdb 	bl	8007ddc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	4a17      	ldr	r2, [pc, #92]	@ (8006688 <HAL_TIM_OnePulse_Start_IT+0x104>)
 800662c:	4293      	cmp	r3, r2
 800662e:	d018      	beq.n	8006662 <HAL_TIM_OnePulse_Start_IT+0xde>
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	4a15      	ldr	r2, [pc, #84]	@ (800668c <HAL_TIM_OnePulse_Start_IT+0x108>)
 8006636:	4293      	cmp	r3, r2
 8006638:	d013      	beq.n	8006662 <HAL_TIM_OnePulse_Start_IT+0xde>
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	4a14      	ldr	r2, [pc, #80]	@ (8006690 <HAL_TIM_OnePulse_Start_IT+0x10c>)
 8006640:	4293      	cmp	r3, r2
 8006642:	d00e      	beq.n	8006662 <HAL_TIM_OnePulse_Start_IT+0xde>
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	4a12      	ldr	r2, [pc, #72]	@ (8006694 <HAL_TIM_OnePulse_Start_IT+0x110>)
 800664a:	4293      	cmp	r3, r2
 800664c:	d009      	beq.n	8006662 <HAL_TIM_OnePulse_Start_IT+0xde>
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	4a11      	ldr	r2, [pc, #68]	@ (8006698 <HAL_TIM_OnePulse_Start_IT+0x114>)
 8006654:	4293      	cmp	r3, r2
 8006656:	d004      	beq.n	8006662 <HAL_TIM_OnePulse_Start_IT+0xde>
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	4a0f      	ldr	r2, [pc, #60]	@ (800669c <HAL_TIM_OnePulse_Start_IT+0x118>)
 800665e:	4293      	cmp	r3, r2
 8006660:	d101      	bne.n	8006666 <HAL_TIM_OnePulse_Start_IT+0xe2>
 8006662:	2301      	movs	r3, #1
 8006664:	e000      	b.n	8006668 <HAL_TIM_OnePulse_Start_IT+0xe4>
 8006666:	2300      	movs	r3, #0
 8006668:	2b00      	cmp	r3, #0
 800666a:	d007      	beq.n	800667c <HAL_TIM_OnePulse_Start_IT+0xf8>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800667a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 800667c:	2300      	movs	r3, #0
}
 800667e:	4618      	mov	r0, r3
 8006680:	3710      	adds	r7, #16
 8006682:	46bd      	mov	sp, r7
 8006684:	bd80      	pop	{r7, pc}
 8006686:	bf00      	nop
 8006688:	40012c00 	.word	0x40012c00
 800668c:	40013400 	.word	0x40013400
 8006690:	40014000 	.word	0x40014000
 8006694:	40014400 	.word	0x40014400
 8006698:	40014800 	.word	0x40014800
 800669c:	40015000 	.word	0x40015000

080066a0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80066a0:	b580      	push	{r7, lr}
 80066a2:	b086      	sub	sp, #24
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
 80066a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d101      	bne.n	80066b4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80066b0:	2301      	movs	r3, #1
 80066b2:	e0a2      	b.n	80067fa <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80066ba:	b2db      	uxtb	r3, r3
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d111      	bne.n	80066e4 <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2200      	movs	r2, #0
 80066c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80066c8:	6878      	ldr	r0, [r7, #4]
 80066ca:	f001 fbad 	bl	8007e28 <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d102      	bne.n	80066dc <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	4a4a      	ldr	r2, [pc, #296]	@ (8006804 <HAL_TIM_Encoder_Init+0x164>)
 80066da:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80066e0:	6878      	ldr	r0, [r7, #4]
 80066e2:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2202      	movs	r2, #2
 80066e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	689b      	ldr	r3, [r3, #8]
 80066f2:	687a      	ldr	r2, [r7, #4]
 80066f4:	6812      	ldr	r2, [r2, #0]
 80066f6:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 80066fa:	f023 0307 	bic.w	r3, r3, #7
 80066fe:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681a      	ldr	r2, [r3, #0]
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	3304      	adds	r3, #4
 8006708:	4619      	mov	r1, r3
 800670a:	4610      	mov	r0, r2
 800670c:	f000 feec 	bl	80074e8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	689b      	ldr	r3, [r3, #8]
 8006716:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	699b      	ldr	r3, [r3, #24]
 800671e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	6a1b      	ldr	r3, [r3, #32]
 8006726:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	697a      	ldr	r2, [r7, #20]
 800672e:	4313      	orrs	r3, r2
 8006730:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006732:	693b      	ldr	r3, [r7, #16]
 8006734:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006738:	f023 0303 	bic.w	r3, r3, #3
 800673c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	689a      	ldr	r2, [r3, #8]
 8006742:	683b      	ldr	r3, [r7, #0]
 8006744:	699b      	ldr	r3, [r3, #24]
 8006746:	021b      	lsls	r3, r3, #8
 8006748:	4313      	orrs	r3, r2
 800674a:	693a      	ldr	r2, [r7, #16]
 800674c:	4313      	orrs	r3, r2
 800674e:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006750:	693b      	ldr	r3, [r7, #16]
 8006752:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8006756:	f023 030c 	bic.w	r3, r3, #12
 800675a:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800675c:	693b      	ldr	r3, [r7, #16]
 800675e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006762:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006766:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006768:	683b      	ldr	r3, [r7, #0]
 800676a:	68da      	ldr	r2, [r3, #12]
 800676c:	683b      	ldr	r3, [r7, #0]
 800676e:	69db      	ldr	r3, [r3, #28]
 8006770:	021b      	lsls	r3, r3, #8
 8006772:	4313      	orrs	r3, r2
 8006774:	693a      	ldr	r2, [r7, #16]
 8006776:	4313      	orrs	r3, r2
 8006778:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	691b      	ldr	r3, [r3, #16]
 800677e:	011a      	lsls	r2, r3, #4
 8006780:	683b      	ldr	r3, [r7, #0]
 8006782:	6a1b      	ldr	r3, [r3, #32]
 8006784:	031b      	lsls	r3, r3, #12
 8006786:	4313      	orrs	r3, r2
 8006788:	693a      	ldr	r2, [r7, #16]
 800678a:	4313      	orrs	r3, r2
 800678c:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8006794:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800679c:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	685a      	ldr	r2, [r3, #4]
 80067a2:	683b      	ldr	r3, [r7, #0]
 80067a4:	695b      	ldr	r3, [r3, #20]
 80067a6:	011b      	lsls	r3, r3, #4
 80067a8:	4313      	orrs	r3, r2
 80067aa:	68fa      	ldr	r2, [r7, #12]
 80067ac:	4313      	orrs	r3, r2
 80067ae:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	697a      	ldr	r2, [r7, #20]
 80067b6:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	693a      	ldr	r2, [r7, #16]
 80067be:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	68fa      	ldr	r2, [r7, #12]
 80067c6:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2201      	movs	r2, #1
 80067cc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2201      	movs	r2, #1
 80067d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2201      	movs	r2, #1
 80067dc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2201      	movs	r2, #1
 80067e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2201      	movs	r2, #1
 80067ec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2201      	movs	r2, #1
 80067f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80067f8:	2300      	movs	r3, #0
}
 80067fa:	4618      	mov	r0, r3
 80067fc:	3718      	adds	r7, #24
 80067fe:	46bd      	mov	sp, r7
 8006800:	bd80      	pop	{r7, pc}
 8006802:	bf00      	nop
 8006804:	0800247d 	.word	0x0800247d

08006808 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006808:	b580      	push	{r7, lr}
 800680a:	b084      	sub	sp, #16
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
 8006810:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006818:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006820:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006828:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006830:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006832:	683b      	ldr	r3, [r7, #0]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d110      	bne.n	800685a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006838:	7bfb      	ldrb	r3, [r7, #15]
 800683a:	2b01      	cmp	r3, #1
 800683c:	d102      	bne.n	8006844 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800683e:	7b7b      	ldrb	r3, [r7, #13]
 8006840:	2b01      	cmp	r3, #1
 8006842:	d001      	beq.n	8006848 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8006844:	2301      	movs	r3, #1
 8006846:	e069      	b.n	800691c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2202      	movs	r2, #2
 800684c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2202      	movs	r2, #2
 8006854:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006858:	e031      	b.n	80068be <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800685a:	683b      	ldr	r3, [r7, #0]
 800685c:	2b04      	cmp	r3, #4
 800685e:	d110      	bne.n	8006882 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006860:	7bbb      	ldrb	r3, [r7, #14]
 8006862:	2b01      	cmp	r3, #1
 8006864:	d102      	bne.n	800686c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006866:	7b3b      	ldrb	r3, [r7, #12]
 8006868:	2b01      	cmp	r3, #1
 800686a:	d001      	beq.n	8006870 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800686c:	2301      	movs	r3, #1
 800686e:	e055      	b.n	800691c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2202      	movs	r2, #2
 8006874:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2202      	movs	r2, #2
 800687c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006880:	e01d      	b.n	80068be <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006882:	7bfb      	ldrb	r3, [r7, #15]
 8006884:	2b01      	cmp	r3, #1
 8006886:	d108      	bne.n	800689a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006888:	7bbb      	ldrb	r3, [r7, #14]
 800688a:	2b01      	cmp	r3, #1
 800688c:	d105      	bne.n	800689a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800688e:	7b7b      	ldrb	r3, [r7, #13]
 8006890:	2b01      	cmp	r3, #1
 8006892:	d102      	bne.n	800689a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006894:	7b3b      	ldrb	r3, [r7, #12]
 8006896:	2b01      	cmp	r3, #1
 8006898:	d001      	beq.n	800689e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800689a:	2301      	movs	r3, #1
 800689c:	e03e      	b.n	800691c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	2202      	movs	r2, #2
 80068a2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	2202      	movs	r2, #2
 80068aa:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	2202      	movs	r2, #2
 80068b2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	2202      	movs	r2, #2
 80068ba:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d003      	beq.n	80068cc <HAL_TIM_Encoder_Start+0xc4>
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	2b04      	cmp	r3, #4
 80068c8:	d008      	beq.n	80068dc <HAL_TIM_Encoder_Start+0xd4>
 80068ca:	e00f      	b.n	80068ec <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	2201      	movs	r2, #1
 80068d2:	2100      	movs	r1, #0
 80068d4:	4618      	mov	r0, r3
 80068d6:	f001 fa81 	bl	8007ddc <TIM_CCxChannelCmd>
      break;
 80068da:	e016      	b.n	800690a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	2201      	movs	r2, #1
 80068e2:	2104      	movs	r1, #4
 80068e4:	4618      	mov	r0, r3
 80068e6:	f001 fa79 	bl	8007ddc <TIM_CCxChannelCmd>
      break;
 80068ea:	e00e      	b.n	800690a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	2201      	movs	r2, #1
 80068f2:	2100      	movs	r1, #0
 80068f4:	4618      	mov	r0, r3
 80068f6:	f001 fa71 	bl	8007ddc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	2201      	movs	r2, #1
 8006900:	2104      	movs	r1, #4
 8006902:	4618      	mov	r0, r3
 8006904:	f001 fa6a 	bl	8007ddc <TIM_CCxChannelCmd>
      break;
 8006908:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	681a      	ldr	r2, [r3, #0]
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	f042 0201 	orr.w	r2, r2, #1
 8006918:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800691a:	2300      	movs	r3, #0
}
 800691c:	4618      	mov	r0, r3
 800691e:	3710      	adds	r7, #16
 8006920:	46bd      	mov	sp, r7
 8006922:	bd80      	pop	{r7, pc}

08006924 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006924:	b580      	push	{r7, lr}
 8006926:	b084      	sub	sp, #16
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	68db      	ldr	r3, [r3, #12]
 8006932:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	691b      	ldr	r3, [r3, #16]
 800693a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800693c:	68bb      	ldr	r3, [r7, #8]
 800693e:	f003 0302 	and.w	r3, r3, #2
 8006942:	2b00      	cmp	r3, #0
 8006944:	d026      	beq.n	8006994 <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	f003 0302 	and.w	r3, r3, #2
 800694c:	2b00      	cmp	r3, #0
 800694e:	d021      	beq.n	8006994 <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	f06f 0202 	mvn.w	r2, #2
 8006958:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	2201      	movs	r2, #1
 800695e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	699b      	ldr	r3, [r3, #24]
 8006966:	f003 0303 	and.w	r3, r3, #3
 800696a:	2b00      	cmp	r3, #0
 800696c:	d005      	beq.n	800697a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006974:	6878      	ldr	r0, [r7, #4]
 8006976:	4798      	blx	r3
 8006978:	e009      	b.n	800698e <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006980:	6878      	ldr	r0, [r7, #4]
 8006982:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800698a:	6878      	ldr	r0, [r7, #4]
 800698c:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	2200      	movs	r2, #0
 8006992:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006994:	68bb      	ldr	r3, [r7, #8]
 8006996:	f003 0304 	and.w	r3, r3, #4
 800699a:	2b00      	cmp	r3, #0
 800699c:	d026      	beq.n	80069ec <HAL_TIM_IRQHandler+0xc8>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	f003 0304 	and.w	r3, r3, #4
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d021      	beq.n	80069ec <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f06f 0204 	mvn.w	r2, #4
 80069b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	2202      	movs	r2, #2
 80069b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	699b      	ldr	r3, [r3, #24]
 80069be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d005      	beq.n	80069d2 <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80069cc:	6878      	ldr	r0, [r7, #4]
 80069ce:	4798      	blx	r3
 80069d0:	e009      	b.n	80069e6 <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80069d8:	6878      	ldr	r0, [r7, #4]
 80069da:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80069e2:	6878      	ldr	r0, [r7, #4]
 80069e4:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	2200      	movs	r2, #0
 80069ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80069ec:	68bb      	ldr	r3, [r7, #8]
 80069ee:	f003 0308 	and.w	r3, r3, #8
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d026      	beq.n	8006a44 <HAL_TIM_IRQHandler+0x120>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	f003 0308 	and.w	r3, r3, #8
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d021      	beq.n	8006a44 <HAL_TIM_IRQHandler+0x120>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	f06f 0208 	mvn.w	r2, #8
 8006a08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	2204      	movs	r2, #4
 8006a0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	69db      	ldr	r3, [r3, #28]
 8006a16:	f003 0303 	and.w	r3, r3, #3
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d005      	beq.n	8006a2a <HAL_TIM_IRQHandler+0x106>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006a24:	6878      	ldr	r0, [r7, #4]
 8006a26:	4798      	blx	r3
 8006a28:	e009      	b.n	8006a3e <HAL_TIM_IRQHandler+0x11a>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006a30:	6878      	ldr	r0, [r7, #4]
 8006a32:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006a3a:	6878      	ldr	r0, [r7, #4]
 8006a3c:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	2200      	movs	r2, #0
 8006a42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006a44:	68bb      	ldr	r3, [r7, #8]
 8006a46:	f003 0310 	and.w	r3, r3, #16
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d026      	beq.n	8006a9c <HAL_TIM_IRQHandler+0x178>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	f003 0310 	and.w	r3, r3, #16
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d021      	beq.n	8006a9c <HAL_TIM_IRQHandler+0x178>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	f06f 0210 	mvn.w	r2, #16
 8006a60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	2208      	movs	r2, #8
 8006a66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	69db      	ldr	r3, [r3, #28]
 8006a6e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d005      	beq.n	8006a82 <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006a7c:	6878      	ldr	r0, [r7, #4]
 8006a7e:	4798      	blx	r3
 8006a80:	e009      	b.n	8006a96 <HAL_TIM_IRQHandler+0x172>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006a88:	6878      	ldr	r0, [r7, #4]
 8006a8a:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006a92:	6878      	ldr	r0, [r7, #4]
 8006a94:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	2200      	movs	r2, #0
 8006a9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006a9c:	68bb      	ldr	r3, [r7, #8]
 8006a9e:	f003 0301 	and.w	r3, r3, #1
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d00e      	beq.n	8006ac4 <HAL_TIM_IRQHandler+0x1a0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	f003 0301 	and.w	r3, r3, #1
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d009      	beq.n	8006ac4 <HAL_TIM_IRQHandler+0x1a0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f06f 0201 	mvn.w	r2, #1
 8006ab8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006ac0:	6878      	ldr	r0, [r7, #4]
 8006ac2:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006ac4:	68bb      	ldr	r3, [r7, #8]
 8006ac6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d104      	bne.n	8006ad8 <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8006ace:	68bb      	ldr	r3, [r7, #8]
 8006ad0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d00e      	beq.n	8006af6 <HAL_TIM_IRQHandler+0x1d2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d009      	beq.n	8006af6 <HAL_TIM_IRQHandler+0x1d2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8006aea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006af2:	6878      	ldr	r0, [r7, #4]
 8006af4:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006af6:	68bb      	ldr	r3, [r7, #8]
 8006af8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d00e      	beq.n	8006b1e <HAL_TIM_IRQHandler+0x1fa>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d009      	beq.n	8006b1e <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8006b12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8006b1a:	6878      	ldr	r0, [r7, #4]
 8006b1c:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006b1e:	68bb      	ldr	r3, [r7, #8]
 8006b20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d00e      	beq.n	8006b46 <HAL_TIM_IRQHandler+0x222>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d009      	beq.n	8006b46 <HAL_TIM_IRQHandler+0x222>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006b3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006b42:	6878      	ldr	r0, [r7, #4]
 8006b44:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006b46:	68bb      	ldr	r3, [r7, #8]
 8006b48:	f003 0320 	and.w	r3, r3, #32
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d00e      	beq.n	8006b6e <HAL_TIM_IRQHandler+0x24a>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	f003 0320 	and.w	r3, r3, #32
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d009      	beq.n	8006b6e <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f06f 0220 	mvn.w	r2, #32
 8006b62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006b6a:	6878      	ldr	r0, [r7, #4]
 8006b6c:	4798      	blx	r3
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8006b6e:	68bb      	ldr	r3, [r7, #8]
 8006b70:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d00e      	beq.n	8006b96 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d009      	beq.n	8006b96 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8006b8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8006b92:	6878      	ldr	r0, [r7, #4]
 8006b94:	4798      	blx	r3
      HAL_TIMEx_EncoderIndexCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8006b96:	68bb      	ldr	r3, [r7, #8]
 8006b98:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d00e      	beq.n	8006bbe <HAL_TIM_IRQHandler+0x29a>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d009      	beq.n	8006bbe <HAL_TIM_IRQHandler+0x29a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8006bb2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8006bba:	6878      	ldr	r0, [r7, #4]
 8006bbc:	4798      	blx	r3
      HAL_TIMEx_DirectionChangeCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8006bbe:	68bb      	ldr	r3, [r7, #8]
 8006bc0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d00e      	beq.n	8006be6 <HAL_TIM_IRQHandler+0x2c2>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d009      	beq.n	8006be6 <HAL_TIM_IRQHandler+0x2c2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8006bda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8006be2:	6878      	ldr	r0, [r7, #4]
 8006be4:	4798      	blx	r3
      HAL_TIMEx_IndexErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8006be6:	68bb      	ldr	r3, [r7, #8]
 8006be8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d00e      	beq.n	8006c0e <HAL_TIM_IRQHandler+0x2ea>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d009      	beq.n	8006c0e <HAL_TIM_IRQHandler+0x2ea>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8006c02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8006c0a:	6878      	ldr	r0, [r7, #4]
 8006c0c:	4798      	blx	r3
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006c0e:	bf00      	nop
 8006c10:	3710      	adds	r7, #16
 8006c12:	46bd      	mov	sp, r7
 8006c14:	bd80      	pop	{r7, pc}
	...

08006c18 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8006c18:	b580      	push	{r7, lr}
 8006c1a:	b086      	sub	sp, #24
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	60f8      	str	r0, [r7, #12]
 8006c20:	60b9      	str	r1, [r7, #8]
 8006c22:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006c24:	2300      	movs	r3, #0
 8006c26:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_CHANNEL_MODE(sConfig->OCMode, Channel));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006c2e:	2b01      	cmp	r3, #1
 8006c30:	d101      	bne.n	8006c36 <HAL_TIM_OC_ConfigChannel+0x1e>
 8006c32:	2302      	movs	r3, #2
 8006c34:	e066      	b.n	8006d04 <HAL_TIM_OC_ConfigChannel+0xec>
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	2201      	movs	r2, #1
 8006c3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	2b14      	cmp	r3, #20
 8006c42:	d857      	bhi.n	8006cf4 <HAL_TIM_OC_ConfigChannel+0xdc>
 8006c44:	a201      	add	r2, pc, #4	@ (adr r2, 8006c4c <HAL_TIM_OC_ConfigChannel+0x34>)
 8006c46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c4a:	bf00      	nop
 8006c4c:	08006ca1 	.word	0x08006ca1
 8006c50:	08006cf5 	.word	0x08006cf5
 8006c54:	08006cf5 	.word	0x08006cf5
 8006c58:	08006cf5 	.word	0x08006cf5
 8006c5c:	08006caf 	.word	0x08006caf
 8006c60:	08006cf5 	.word	0x08006cf5
 8006c64:	08006cf5 	.word	0x08006cf5
 8006c68:	08006cf5 	.word	0x08006cf5
 8006c6c:	08006cbd 	.word	0x08006cbd
 8006c70:	08006cf5 	.word	0x08006cf5
 8006c74:	08006cf5 	.word	0x08006cf5
 8006c78:	08006cf5 	.word	0x08006cf5
 8006c7c:	08006ccb 	.word	0x08006ccb
 8006c80:	08006cf5 	.word	0x08006cf5
 8006c84:	08006cf5 	.word	0x08006cf5
 8006c88:	08006cf5 	.word	0x08006cf5
 8006c8c:	08006cd9 	.word	0x08006cd9
 8006c90:	08006cf5 	.word	0x08006cf5
 8006c94:	08006cf5 	.word	0x08006cf5
 8006c98:	08006cf5 	.word	0x08006cf5
 8006c9c:	08006ce7 	.word	0x08006ce7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	68b9      	ldr	r1, [r7, #8]
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	f000 fcd2 	bl	8007650 <TIM_OC1_SetConfig>
      break;
 8006cac:	e025      	b.n	8006cfa <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	68b9      	ldr	r1, [r7, #8]
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	f000 fd65 	bl	8007784 <TIM_OC2_SetConfig>
      break;
 8006cba:	e01e      	b.n	8006cfa <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	68b9      	ldr	r1, [r7, #8]
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	f000 fdf2 	bl	80078ac <TIM_OC3_SetConfig>
      break;
 8006cc8:	e017      	b.n	8006cfa <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	68b9      	ldr	r1, [r7, #8]
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	f000 fe7d 	bl	80079d0 <TIM_OC4_SetConfig>
      break;
 8006cd6:	e010      	b.n	8006cfa <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	68b9      	ldr	r1, [r7, #8]
 8006cde:	4618      	mov	r0, r3
 8006ce0:	f000 ff0a 	bl	8007af8 <TIM_OC5_SetConfig>
      break;
 8006ce4:	e009      	b.n	8006cfa <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	68b9      	ldr	r1, [r7, #8]
 8006cec:	4618      	mov	r0, r3
 8006cee:	f000 ff6d 	bl	8007bcc <TIM_OC6_SetConfig>
      break;
 8006cf2:	e002      	b.n	8006cfa <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8006cf4:	2301      	movs	r3, #1
 8006cf6:	75fb      	strb	r3, [r7, #23]
      break;
 8006cf8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006d02:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d04:	4618      	mov	r0, r3
 8006d06:	3718      	adds	r7, #24
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	bd80      	pop	{r7, pc}

08006d0c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b086      	sub	sp, #24
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	60f8      	str	r0, [r7, #12]
 8006d14:	60b9      	str	r1, [r7, #8]
 8006d16:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006d18:	2300      	movs	r3, #0
 8006d1a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006d22:	2b01      	cmp	r3, #1
 8006d24:	d101      	bne.n	8006d2a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006d26:	2302      	movs	r3, #2
 8006d28:	e0ff      	b.n	8006f2a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	2201      	movs	r2, #1
 8006d2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	2b14      	cmp	r3, #20
 8006d36:	f200 80f0 	bhi.w	8006f1a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006d3a:	a201      	add	r2, pc, #4	@ (adr r2, 8006d40 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006d3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d40:	08006d95 	.word	0x08006d95
 8006d44:	08006f1b 	.word	0x08006f1b
 8006d48:	08006f1b 	.word	0x08006f1b
 8006d4c:	08006f1b 	.word	0x08006f1b
 8006d50:	08006dd5 	.word	0x08006dd5
 8006d54:	08006f1b 	.word	0x08006f1b
 8006d58:	08006f1b 	.word	0x08006f1b
 8006d5c:	08006f1b 	.word	0x08006f1b
 8006d60:	08006e17 	.word	0x08006e17
 8006d64:	08006f1b 	.word	0x08006f1b
 8006d68:	08006f1b 	.word	0x08006f1b
 8006d6c:	08006f1b 	.word	0x08006f1b
 8006d70:	08006e57 	.word	0x08006e57
 8006d74:	08006f1b 	.word	0x08006f1b
 8006d78:	08006f1b 	.word	0x08006f1b
 8006d7c:	08006f1b 	.word	0x08006f1b
 8006d80:	08006e99 	.word	0x08006e99
 8006d84:	08006f1b 	.word	0x08006f1b
 8006d88:	08006f1b 	.word	0x08006f1b
 8006d8c:	08006f1b 	.word	0x08006f1b
 8006d90:	08006ed9 	.word	0x08006ed9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	68b9      	ldr	r1, [r7, #8]
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	f000 fc58 	bl	8007650 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	699a      	ldr	r2, [r3, #24]
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	f042 0208 	orr.w	r2, r2, #8
 8006dae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	699a      	ldr	r2, [r3, #24]
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	f022 0204 	bic.w	r2, r2, #4
 8006dbe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	6999      	ldr	r1, [r3, #24]
 8006dc6:	68bb      	ldr	r3, [r7, #8]
 8006dc8:	691a      	ldr	r2, [r3, #16]
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	430a      	orrs	r2, r1
 8006dd0:	619a      	str	r2, [r3, #24]
      break;
 8006dd2:	e0a5      	b.n	8006f20 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	68b9      	ldr	r1, [r7, #8]
 8006dda:	4618      	mov	r0, r3
 8006ddc:	f000 fcd2 	bl	8007784 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	699a      	ldr	r2, [r3, #24]
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006dee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	699a      	ldr	r2, [r3, #24]
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006dfe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	6999      	ldr	r1, [r3, #24]
 8006e06:	68bb      	ldr	r3, [r7, #8]
 8006e08:	691b      	ldr	r3, [r3, #16]
 8006e0a:	021a      	lsls	r2, r3, #8
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	430a      	orrs	r2, r1
 8006e12:	619a      	str	r2, [r3, #24]
      break;
 8006e14:	e084      	b.n	8006f20 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	68b9      	ldr	r1, [r7, #8]
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	f000 fd45 	bl	80078ac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	69da      	ldr	r2, [r3, #28]
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	f042 0208 	orr.w	r2, r2, #8
 8006e30:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	69da      	ldr	r2, [r3, #28]
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	f022 0204 	bic.w	r2, r2, #4
 8006e40:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	69d9      	ldr	r1, [r3, #28]
 8006e48:	68bb      	ldr	r3, [r7, #8]
 8006e4a:	691a      	ldr	r2, [r3, #16]
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	430a      	orrs	r2, r1
 8006e52:	61da      	str	r2, [r3, #28]
      break;
 8006e54:	e064      	b.n	8006f20 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	68b9      	ldr	r1, [r7, #8]
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	f000 fdb7 	bl	80079d0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	69da      	ldr	r2, [r3, #28]
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006e70:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	69da      	ldr	r2, [r3, #28]
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006e80:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	69d9      	ldr	r1, [r3, #28]
 8006e88:	68bb      	ldr	r3, [r7, #8]
 8006e8a:	691b      	ldr	r3, [r3, #16]
 8006e8c:	021a      	lsls	r2, r3, #8
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	430a      	orrs	r2, r1
 8006e94:	61da      	str	r2, [r3, #28]
      break;
 8006e96:	e043      	b.n	8006f20 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	68b9      	ldr	r1, [r7, #8]
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	f000 fe2a 	bl	8007af8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	f042 0208 	orr.w	r2, r2, #8
 8006eb2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	f022 0204 	bic.w	r2, r2, #4
 8006ec2:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8006eca:	68bb      	ldr	r3, [r7, #8]
 8006ecc:	691a      	ldr	r2, [r3, #16]
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	430a      	orrs	r2, r1
 8006ed4:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8006ed6:	e023      	b.n	8006f20 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	68b9      	ldr	r1, [r7, #8]
 8006ede:	4618      	mov	r0, r3
 8006ee0:	f000 fe74 	bl	8007bcc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006ef2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006f02:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8006f0a:	68bb      	ldr	r3, [r7, #8]
 8006f0c:	691b      	ldr	r3, [r3, #16]
 8006f0e:	021a      	lsls	r2, r3, #8
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	430a      	orrs	r2, r1
 8006f16:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8006f18:	e002      	b.n	8006f20 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006f1a:	2301      	movs	r3, #1
 8006f1c:	75fb      	strb	r3, [r7, #23]
      break;
 8006f1e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	2200      	movs	r2, #0
 8006f24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006f28:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f2a:	4618      	mov	r0, r3
 8006f2c:	3718      	adds	r7, #24
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	bd80      	pop	{r7, pc}
 8006f32:	bf00      	nop

08006f34 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006f34:	b580      	push	{r7, lr}
 8006f36:	b084      	sub	sp, #16
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
 8006f3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006f3e:	2300      	movs	r3, #0
 8006f40:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006f48:	2b01      	cmp	r3, #1
 8006f4a:	d101      	bne.n	8006f50 <HAL_TIM_ConfigClockSource+0x1c>
 8006f4c:	2302      	movs	r3, #2
 8006f4e:	e0f6      	b.n	800713e <HAL_TIM_ConfigClockSource+0x20a>
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2201      	movs	r2, #1
 8006f54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2202      	movs	r2, #2
 8006f5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	689b      	ldr	r3, [r3, #8]
 8006f66:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006f68:	68bb      	ldr	r3, [r7, #8]
 8006f6a:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8006f6e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006f72:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006f74:	68bb      	ldr	r3, [r7, #8]
 8006f76:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006f7a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	68ba      	ldr	r2, [r7, #8]
 8006f82:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	4a6f      	ldr	r2, [pc, #444]	@ (8007148 <HAL_TIM_ConfigClockSource+0x214>)
 8006f8a:	4293      	cmp	r3, r2
 8006f8c:	f000 80c1 	beq.w	8007112 <HAL_TIM_ConfigClockSource+0x1de>
 8006f90:	4a6d      	ldr	r2, [pc, #436]	@ (8007148 <HAL_TIM_ConfigClockSource+0x214>)
 8006f92:	4293      	cmp	r3, r2
 8006f94:	f200 80c6 	bhi.w	8007124 <HAL_TIM_ConfigClockSource+0x1f0>
 8006f98:	4a6c      	ldr	r2, [pc, #432]	@ (800714c <HAL_TIM_ConfigClockSource+0x218>)
 8006f9a:	4293      	cmp	r3, r2
 8006f9c:	f000 80b9 	beq.w	8007112 <HAL_TIM_ConfigClockSource+0x1de>
 8006fa0:	4a6a      	ldr	r2, [pc, #424]	@ (800714c <HAL_TIM_ConfigClockSource+0x218>)
 8006fa2:	4293      	cmp	r3, r2
 8006fa4:	f200 80be 	bhi.w	8007124 <HAL_TIM_ConfigClockSource+0x1f0>
 8006fa8:	4a69      	ldr	r2, [pc, #420]	@ (8007150 <HAL_TIM_ConfigClockSource+0x21c>)
 8006faa:	4293      	cmp	r3, r2
 8006fac:	f000 80b1 	beq.w	8007112 <HAL_TIM_ConfigClockSource+0x1de>
 8006fb0:	4a67      	ldr	r2, [pc, #412]	@ (8007150 <HAL_TIM_ConfigClockSource+0x21c>)
 8006fb2:	4293      	cmp	r3, r2
 8006fb4:	f200 80b6 	bhi.w	8007124 <HAL_TIM_ConfigClockSource+0x1f0>
 8006fb8:	4a66      	ldr	r2, [pc, #408]	@ (8007154 <HAL_TIM_ConfigClockSource+0x220>)
 8006fba:	4293      	cmp	r3, r2
 8006fbc:	f000 80a9 	beq.w	8007112 <HAL_TIM_ConfigClockSource+0x1de>
 8006fc0:	4a64      	ldr	r2, [pc, #400]	@ (8007154 <HAL_TIM_ConfigClockSource+0x220>)
 8006fc2:	4293      	cmp	r3, r2
 8006fc4:	f200 80ae 	bhi.w	8007124 <HAL_TIM_ConfigClockSource+0x1f0>
 8006fc8:	4a63      	ldr	r2, [pc, #396]	@ (8007158 <HAL_TIM_ConfigClockSource+0x224>)
 8006fca:	4293      	cmp	r3, r2
 8006fcc:	f000 80a1 	beq.w	8007112 <HAL_TIM_ConfigClockSource+0x1de>
 8006fd0:	4a61      	ldr	r2, [pc, #388]	@ (8007158 <HAL_TIM_ConfigClockSource+0x224>)
 8006fd2:	4293      	cmp	r3, r2
 8006fd4:	f200 80a6 	bhi.w	8007124 <HAL_TIM_ConfigClockSource+0x1f0>
 8006fd8:	4a60      	ldr	r2, [pc, #384]	@ (800715c <HAL_TIM_ConfigClockSource+0x228>)
 8006fda:	4293      	cmp	r3, r2
 8006fdc:	f000 8099 	beq.w	8007112 <HAL_TIM_ConfigClockSource+0x1de>
 8006fe0:	4a5e      	ldr	r2, [pc, #376]	@ (800715c <HAL_TIM_ConfigClockSource+0x228>)
 8006fe2:	4293      	cmp	r3, r2
 8006fe4:	f200 809e 	bhi.w	8007124 <HAL_TIM_ConfigClockSource+0x1f0>
 8006fe8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8006fec:	f000 8091 	beq.w	8007112 <HAL_TIM_ConfigClockSource+0x1de>
 8006ff0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8006ff4:	f200 8096 	bhi.w	8007124 <HAL_TIM_ConfigClockSource+0x1f0>
 8006ff8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006ffc:	f000 8089 	beq.w	8007112 <HAL_TIM_ConfigClockSource+0x1de>
 8007000:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007004:	f200 808e 	bhi.w	8007124 <HAL_TIM_ConfigClockSource+0x1f0>
 8007008:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800700c:	d03e      	beq.n	800708c <HAL_TIM_ConfigClockSource+0x158>
 800700e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007012:	f200 8087 	bhi.w	8007124 <HAL_TIM_ConfigClockSource+0x1f0>
 8007016:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800701a:	f000 8086 	beq.w	800712a <HAL_TIM_ConfigClockSource+0x1f6>
 800701e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007022:	d87f      	bhi.n	8007124 <HAL_TIM_ConfigClockSource+0x1f0>
 8007024:	2b70      	cmp	r3, #112	@ 0x70
 8007026:	d01a      	beq.n	800705e <HAL_TIM_ConfigClockSource+0x12a>
 8007028:	2b70      	cmp	r3, #112	@ 0x70
 800702a:	d87b      	bhi.n	8007124 <HAL_TIM_ConfigClockSource+0x1f0>
 800702c:	2b60      	cmp	r3, #96	@ 0x60
 800702e:	d050      	beq.n	80070d2 <HAL_TIM_ConfigClockSource+0x19e>
 8007030:	2b60      	cmp	r3, #96	@ 0x60
 8007032:	d877      	bhi.n	8007124 <HAL_TIM_ConfigClockSource+0x1f0>
 8007034:	2b50      	cmp	r3, #80	@ 0x50
 8007036:	d03c      	beq.n	80070b2 <HAL_TIM_ConfigClockSource+0x17e>
 8007038:	2b50      	cmp	r3, #80	@ 0x50
 800703a:	d873      	bhi.n	8007124 <HAL_TIM_ConfigClockSource+0x1f0>
 800703c:	2b40      	cmp	r3, #64	@ 0x40
 800703e:	d058      	beq.n	80070f2 <HAL_TIM_ConfigClockSource+0x1be>
 8007040:	2b40      	cmp	r3, #64	@ 0x40
 8007042:	d86f      	bhi.n	8007124 <HAL_TIM_ConfigClockSource+0x1f0>
 8007044:	2b30      	cmp	r3, #48	@ 0x30
 8007046:	d064      	beq.n	8007112 <HAL_TIM_ConfigClockSource+0x1de>
 8007048:	2b30      	cmp	r3, #48	@ 0x30
 800704a:	d86b      	bhi.n	8007124 <HAL_TIM_ConfigClockSource+0x1f0>
 800704c:	2b20      	cmp	r3, #32
 800704e:	d060      	beq.n	8007112 <HAL_TIM_ConfigClockSource+0x1de>
 8007050:	2b20      	cmp	r3, #32
 8007052:	d867      	bhi.n	8007124 <HAL_TIM_ConfigClockSource+0x1f0>
 8007054:	2b00      	cmp	r3, #0
 8007056:	d05c      	beq.n	8007112 <HAL_TIM_ConfigClockSource+0x1de>
 8007058:	2b10      	cmp	r3, #16
 800705a:	d05a      	beq.n	8007112 <HAL_TIM_ConfigClockSource+0x1de>
 800705c:	e062      	b.n	8007124 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007066:	683b      	ldr	r3, [r7, #0]
 8007068:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800706a:	683b      	ldr	r3, [r7, #0]
 800706c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800706e:	f000 fe95 	bl	8007d9c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	689b      	ldr	r3, [r3, #8]
 8007078:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800707a:	68bb      	ldr	r3, [r7, #8]
 800707c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007080:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	68ba      	ldr	r2, [r7, #8]
 8007088:	609a      	str	r2, [r3, #8]
      break;
 800708a:	e04f      	b.n	800712c <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007090:	683b      	ldr	r3, [r7, #0]
 8007092:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007094:	683b      	ldr	r3, [r7, #0]
 8007096:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007098:	683b      	ldr	r3, [r7, #0]
 800709a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800709c:	f000 fe7e 	bl	8007d9c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	689a      	ldr	r2, [r3, #8]
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80070ae:	609a      	str	r2, [r3, #8]
      break;
 80070b0:	e03c      	b.n	800712c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80070b6:	683b      	ldr	r3, [r7, #0]
 80070b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80070ba:	683b      	ldr	r3, [r7, #0]
 80070bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80070be:	461a      	mov	r2, r3
 80070c0:	f000 fdf0 	bl	8007ca4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	2150      	movs	r1, #80	@ 0x50
 80070ca:	4618      	mov	r0, r3
 80070cc:	f000 fe49 	bl	8007d62 <TIM_ITRx_SetConfig>
      break;
 80070d0:	e02c      	b.n	800712c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80070de:	461a      	mov	r2, r3
 80070e0:	f000 fe0f 	bl	8007d02 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	2160      	movs	r1, #96	@ 0x60
 80070ea:	4618      	mov	r0, r3
 80070ec:	f000 fe39 	bl	8007d62 <TIM_ITRx_SetConfig>
      break;
 80070f0:	e01c      	b.n	800712c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80070f6:	683b      	ldr	r3, [r7, #0]
 80070f8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80070fa:	683b      	ldr	r3, [r7, #0]
 80070fc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80070fe:	461a      	mov	r2, r3
 8007100:	f000 fdd0 	bl	8007ca4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	2140      	movs	r1, #64	@ 0x40
 800710a:	4618      	mov	r0, r3
 800710c:	f000 fe29 	bl	8007d62 <TIM_ITRx_SetConfig>
      break;
 8007110:	e00c      	b.n	800712c <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681a      	ldr	r2, [r3, #0]
 8007116:	683b      	ldr	r3, [r7, #0]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	4619      	mov	r1, r3
 800711c:	4610      	mov	r0, r2
 800711e:	f000 fe20 	bl	8007d62 <TIM_ITRx_SetConfig>
      break;
 8007122:	e003      	b.n	800712c <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8007124:	2301      	movs	r3, #1
 8007126:	73fb      	strb	r3, [r7, #15]
      break;
 8007128:	e000      	b.n	800712c <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800712a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2201      	movs	r2, #1
 8007130:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	2200      	movs	r2, #0
 8007138:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800713c:	7bfb      	ldrb	r3, [r7, #15]
}
 800713e:	4618      	mov	r0, r3
 8007140:	3710      	adds	r7, #16
 8007142:	46bd      	mov	sp, r7
 8007144:	bd80      	pop	{r7, pc}
 8007146:	bf00      	nop
 8007148:	00100070 	.word	0x00100070
 800714c:	00100060 	.word	0x00100060
 8007150:	00100050 	.word	0x00100050
 8007154:	00100040 	.word	0x00100040
 8007158:	00100030 	.word	0x00100030
 800715c:	00100020 	.word	0x00100020

08007160 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007160:	b480      	push	{r7}
 8007162:	b083      	sub	sp, #12
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007168:	bf00      	nop
 800716a:	370c      	adds	r7, #12
 800716c:	46bd      	mov	sp, r7
 800716e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007172:	4770      	bx	lr

08007174 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007174:	b480      	push	{r7}
 8007176:	b083      	sub	sp, #12
 8007178:	af00      	add	r7, sp, #0
 800717a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 800717c:	bf00      	nop
 800717e:	370c      	adds	r7, #12
 8007180:	46bd      	mov	sp, r7
 8007182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007186:	4770      	bx	lr

08007188 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007188:	b480      	push	{r7}
 800718a:	b083      	sub	sp, #12
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007190:	bf00      	nop
 8007192:	370c      	adds	r7, #12
 8007194:	46bd      	mov	sp, r7
 8007196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719a:	4770      	bx	lr

0800719c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800719c:	b480      	push	{r7}
 800719e:	b083      	sub	sp, #12
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80071a4:	bf00      	nop
 80071a6:	370c      	adds	r7, #12
 80071a8:	46bd      	mov	sp, r7
 80071aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ae:	4770      	bx	lr

080071b0 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80071b0:	b480      	push	{r7}
 80071b2:	b083      	sub	sp, #12
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 80071b8:	bf00      	nop
 80071ba:	370c      	adds	r7, #12
 80071bc:	46bd      	mov	sp, r7
 80071be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c2:	4770      	bx	lr

080071c4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80071c4:	b480      	push	{r7}
 80071c6:	b083      	sub	sp, #12
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80071cc:	bf00      	nop
 80071ce:	370c      	adds	r7, #12
 80071d0:	46bd      	mov	sp, r7
 80071d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d6:	4770      	bx	lr

080071d8 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80071d8:	b480      	push	{r7}
 80071da:	b083      	sub	sp, #12
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80071e0:	bf00      	nop
 80071e2:	370c      	adds	r7, #12
 80071e4:	46bd      	mov	sp, r7
 80071e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ea:	4770      	bx	lr

080071ec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80071ec:	b480      	push	{r7}
 80071ee:	b083      	sub	sp, #12
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80071f4:	bf00      	nop
 80071f6:	370c      	adds	r7, #12
 80071f8:	46bd      	mov	sp, r7
 80071fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fe:	4770      	bx	lr

08007200 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007200:	b480      	push	{r7}
 8007202:	b083      	sub	sp, #12
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8007208:	bf00      	nop
 800720a:	370c      	adds	r7, #12
 800720c:	46bd      	mov	sp, r7
 800720e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007212:	4770      	bx	lr

08007214 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8007214:	b480      	push	{r7}
 8007216:	b083      	sub	sp, #12
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800721c:	bf00      	nop
 800721e:	370c      	adds	r7, #12
 8007220:	46bd      	mov	sp, r7
 8007222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007226:	4770      	bx	lr

08007228 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 8007228:	b480      	push	{r7}
 800722a:	b087      	sub	sp, #28
 800722c:	af00      	add	r7, sp, #0
 800722e:	60f8      	str	r0, [r7, #12]
 8007230:	460b      	mov	r3, r1
 8007232:	607a      	str	r2, [r7, #4]
 8007234:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8007236:	2300      	movs	r3, #0
 8007238:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	2b00      	cmp	r3, #0
 800723e:	d101      	bne.n	8007244 <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8007240:	2301      	movs	r3, #1
 8007242:	e14a      	b.n	80074da <HAL_TIM_RegisterCallback+0x2b2>
  }

  if (htim->State == HAL_TIM_STATE_READY)
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800724a:	b2db      	uxtb	r3, r3
 800724c:	2b01      	cmp	r3, #1
 800724e:	f040 80dd 	bne.w	800740c <HAL_TIM_RegisterCallback+0x1e4>
  {
    switch (CallbackID)
 8007252:	7afb      	ldrb	r3, [r7, #11]
 8007254:	2b1f      	cmp	r3, #31
 8007256:	f200 80d6 	bhi.w	8007406 <HAL_TIM_RegisterCallback+0x1de>
 800725a:	a201      	add	r2, pc, #4	@ (adr r2, 8007260 <HAL_TIM_RegisterCallback+0x38>)
 800725c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007260:	080072e1 	.word	0x080072e1
 8007264:	080072e9 	.word	0x080072e9
 8007268:	080072f1 	.word	0x080072f1
 800726c:	080072f9 	.word	0x080072f9
 8007270:	08007301 	.word	0x08007301
 8007274:	08007309 	.word	0x08007309
 8007278:	08007311 	.word	0x08007311
 800727c:	08007319 	.word	0x08007319
 8007280:	08007321 	.word	0x08007321
 8007284:	08007329 	.word	0x08007329
 8007288:	08007331 	.word	0x08007331
 800728c:	08007339 	.word	0x08007339
 8007290:	08007341 	.word	0x08007341
 8007294:	08007349 	.word	0x08007349
 8007298:	08007353 	.word	0x08007353
 800729c:	0800735d 	.word	0x0800735d
 80072a0:	08007367 	.word	0x08007367
 80072a4:	08007371 	.word	0x08007371
 80072a8:	0800737b 	.word	0x0800737b
 80072ac:	08007385 	.word	0x08007385
 80072b0:	0800738f 	.word	0x0800738f
 80072b4:	08007399 	.word	0x08007399
 80072b8:	080073a3 	.word	0x080073a3
 80072bc:	080073ad 	.word	0x080073ad
 80072c0:	080073b7 	.word	0x080073b7
 80072c4:	080073c1 	.word	0x080073c1
 80072c8:	080073cb 	.word	0x080073cb
 80072cc:	080073d5 	.word	0x080073d5
 80072d0:	080073df 	.word	0x080073df
 80072d4:	080073e9 	.word	0x080073e9
 80072d8:	080073f3 	.word	0x080073f3
 80072dc:	080073fd 	.word	0x080073fd
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	687a      	ldr	r2, [r7, #4]
 80072e4:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 80072e6:	e0f7      	b.n	80074d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	687a      	ldr	r2, [r7, #4]
 80072ec:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 80072ee:	e0f3      	b.n	80074d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	687a      	ldr	r2, [r7, #4]
 80072f4:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 80072f6:	e0ef      	b.n	80074d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	687a      	ldr	r2, [r7, #4]
 80072fc:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 80072fe:	e0eb      	b.n	80074d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	687a      	ldr	r2, [r7, #4]
 8007304:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 8007306:	e0e7      	b.n	80074d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	687a      	ldr	r2, [r7, #4]
 800730c:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 800730e:	e0e3      	b.n	80074d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	687a      	ldr	r2, [r7, #4]
 8007314:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 8007316:	e0df      	b.n	80074d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	687a      	ldr	r2, [r7, #4]
 800731c:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 800731e:	e0db      	b.n	80074d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	687a      	ldr	r2, [r7, #4]
 8007324:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 8007326:	e0d7      	b.n	80074d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	687a      	ldr	r2, [r7, #4]
 800732c:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 800732e:	e0d3      	b.n	80074d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	687a      	ldr	r2, [r7, #4]
 8007334:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 8007336:	e0cf      	b.n	80074d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	687a      	ldr	r2, [r7, #4]
 800733c:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 800733e:	e0cb      	b.n	80074d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	687a      	ldr	r2, [r7, #4]
 8007344:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 8007346:	e0c7      	b.n	80074d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	687a      	ldr	r2, [r7, #4]
 800734c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 8007350:	e0c2      	b.n	80074d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	687a      	ldr	r2, [r7, #4]
 8007356:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        break;
 800735a:	e0bd      	b.n	80074d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	687a      	ldr	r2, [r7, #4]
 8007360:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        break;
 8007364:	e0b8      	b.n	80074d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	687a      	ldr	r2, [r7, #4]
 800736a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        break;
 800736e:	e0b3      	b.n	80074d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	687a      	ldr	r2, [r7, #4]
 8007374:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        break;
 8007378:	e0ae      	b.n	80074d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	687a      	ldr	r2, [r7, #4]
 800737e:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 8007382:	e0a9      	b.n	80074d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	687a      	ldr	r2, [r7, #4]
 8007388:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 800738c:	e0a4      	b.n	80074d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	687a      	ldr	r2, [r7, #4]
 8007392:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 8007396:	e09f      	b.n	80074d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	687a      	ldr	r2, [r7, #4]
 800739c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 80073a0:	e09a      	b.n	80074d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	687a      	ldr	r2, [r7, #4]
 80073a6:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 80073aa:	e095      	b.n	80074d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	687a      	ldr	r2, [r7, #4]
 80073b0:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 80073b4:	e090      	b.n	80074d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	687a      	ldr	r2, [r7, #4]
 80073ba:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 80073be:	e08b      	b.n	80074d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	687a      	ldr	r2, [r7, #4]
 80073c4:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 80073c8:	e086      	b.n	80074d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	687a      	ldr	r2, [r7, #4]
 80073ce:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 80073d2:	e081      	b.n	80074d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK2_CB_ID :
        htim->Break2Callback                       = pCallback;
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	687a      	ldr	r2, [r7, #4]
 80073d8:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 80073dc:	e07c      	b.n	80074d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_INDEX_CB_ID :
        htim->EncoderIndexCallback                 = pCallback;
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	687a      	ldr	r2, [r7, #4]
 80073e2:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 80073e6:	e077      	b.n	80074d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_DIRECTION_CHANGE_CB_ID :
        htim->DirectionChangeCallback              = pCallback;
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	687a      	ldr	r2, [r7, #4]
 80073ec:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
        break;
 80073f0:	e072      	b.n	80074d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_INDEX_ERROR_CB_ID :
        htim->IndexErrorCallback                   = pCallback;
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	687a      	ldr	r2, [r7, #4]
 80073f6:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 80073fa:	e06d      	b.n	80074d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRANSITION_ERROR_CB_ID :
        htim->TransitionErrorCallback              = pCallback;
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	687a      	ldr	r2, [r7, #4]
 8007400:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 8007404:	e068      	b.n	80074d8 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8007406:	2301      	movs	r3, #1
 8007408:	75fb      	strb	r3, [r7, #23]
        break;
 800740a:	e065      	b.n	80074d8 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007412:	b2db      	uxtb	r3, r3
 8007414:	2b00      	cmp	r3, #0
 8007416:	d15d      	bne.n	80074d4 <HAL_TIM_RegisterCallback+0x2ac>
  {
    switch (CallbackID)
 8007418:	7afb      	ldrb	r3, [r7, #11]
 800741a:	2b0d      	cmp	r3, #13
 800741c:	d857      	bhi.n	80074ce <HAL_TIM_RegisterCallback+0x2a6>
 800741e:	a201      	add	r2, pc, #4	@ (adr r2, 8007424 <HAL_TIM_RegisterCallback+0x1fc>)
 8007420:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007424:	0800745d 	.word	0x0800745d
 8007428:	08007465 	.word	0x08007465
 800742c:	0800746d 	.word	0x0800746d
 8007430:	08007475 	.word	0x08007475
 8007434:	0800747d 	.word	0x0800747d
 8007438:	08007485 	.word	0x08007485
 800743c:	0800748d 	.word	0x0800748d
 8007440:	08007495 	.word	0x08007495
 8007444:	0800749d 	.word	0x0800749d
 8007448:	080074a5 	.word	0x080074a5
 800744c:	080074ad 	.word	0x080074ad
 8007450:	080074b5 	.word	0x080074b5
 8007454:	080074bd 	.word	0x080074bd
 8007458:	080074c5 	.word	0x080074c5
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	687a      	ldr	r2, [r7, #4]
 8007460:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 8007462:	e039      	b.n	80074d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	687a      	ldr	r2, [r7, #4]
 8007468:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 800746a:	e035      	b.n	80074d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	687a      	ldr	r2, [r7, #4]
 8007470:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8007472:	e031      	b.n	80074d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	687a      	ldr	r2, [r7, #4]
 8007478:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 800747a:	e02d      	b.n	80074d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	687a      	ldr	r2, [r7, #4]
 8007480:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 8007482:	e029      	b.n	80074d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	687a      	ldr	r2, [r7, #4]
 8007488:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 800748a:	e025      	b.n	80074d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	687a      	ldr	r2, [r7, #4]
 8007490:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 8007492:	e021      	b.n	80074d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	687a      	ldr	r2, [r7, #4]
 8007498:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 800749a:	e01d      	b.n	80074d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	687a      	ldr	r2, [r7, #4]
 80074a0:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 80074a2:	e019      	b.n	80074d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	687a      	ldr	r2, [r7, #4]
 80074a8:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 80074aa:	e015      	b.n	80074d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	687a      	ldr	r2, [r7, #4]
 80074b0:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 80074b2:	e011      	b.n	80074d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	687a      	ldr	r2, [r7, #4]
 80074b8:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 80074ba:	e00d      	b.n	80074d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	687a      	ldr	r2, [r7, #4]
 80074c0:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 80074c2:	e009      	b.n	80074d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	687a      	ldr	r2, [r7, #4]
 80074c8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 80074cc:	e004      	b.n	80074d8 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 80074ce:	2301      	movs	r3, #1
 80074d0:	75fb      	strb	r3, [r7, #23]
        break;
 80074d2:	e001      	b.n	80074d8 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 80074d4:	2301      	movs	r3, #1
 80074d6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80074d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80074da:	4618      	mov	r0, r3
 80074dc:	371c      	adds	r7, #28
 80074de:	46bd      	mov	sp, r7
 80074e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e4:	4770      	bx	lr
 80074e6:	bf00      	nop

080074e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80074e8:	b480      	push	{r7}
 80074ea:	b085      	sub	sp, #20
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
 80074f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	4a4c      	ldr	r2, [pc, #304]	@ (800762c <TIM_Base_SetConfig+0x144>)
 80074fc:	4293      	cmp	r3, r2
 80074fe:	d017      	beq.n	8007530 <TIM_Base_SetConfig+0x48>
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007506:	d013      	beq.n	8007530 <TIM_Base_SetConfig+0x48>
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	4a49      	ldr	r2, [pc, #292]	@ (8007630 <TIM_Base_SetConfig+0x148>)
 800750c:	4293      	cmp	r3, r2
 800750e:	d00f      	beq.n	8007530 <TIM_Base_SetConfig+0x48>
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	4a48      	ldr	r2, [pc, #288]	@ (8007634 <TIM_Base_SetConfig+0x14c>)
 8007514:	4293      	cmp	r3, r2
 8007516:	d00b      	beq.n	8007530 <TIM_Base_SetConfig+0x48>
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	4a47      	ldr	r2, [pc, #284]	@ (8007638 <TIM_Base_SetConfig+0x150>)
 800751c:	4293      	cmp	r3, r2
 800751e:	d007      	beq.n	8007530 <TIM_Base_SetConfig+0x48>
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	4a46      	ldr	r2, [pc, #280]	@ (800763c <TIM_Base_SetConfig+0x154>)
 8007524:	4293      	cmp	r3, r2
 8007526:	d003      	beq.n	8007530 <TIM_Base_SetConfig+0x48>
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	4a45      	ldr	r2, [pc, #276]	@ (8007640 <TIM_Base_SetConfig+0x158>)
 800752c:	4293      	cmp	r3, r2
 800752e:	d108      	bne.n	8007542 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007536:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007538:	683b      	ldr	r3, [r7, #0]
 800753a:	685b      	ldr	r3, [r3, #4]
 800753c:	68fa      	ldr	r2, [r7, #12]
 800753e:	4313      	orrs	r3, r2
 8007540:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	4a39      	ldr	r2, [pc, #228]	@ (800762c <TIM_Base_SetConfig+0x144>)
 8007546:	4293      	cmp	r3, r2
 8007548:	d023      	beq.n	8007592 <TIM_Base_SetConfig+0xaa>
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007550:	d01f      	beq.n	8007592 <TIM_Base_SetConfig+0xaa>
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	4a36      	ldr	r2, [pc, #216]	@ (8007630 <TIM_Base_SetConfig+0x148>)
 8007556:	4293      	cmp	r3, r2
 8007558:	d01b      	beq.n	8007592 <TIM_Base_SetConfig+0xaa>
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	4a35      	ldr	r2, [pc, #212]	@ (8007634 <TIM_Base_SetConfig+0x14c>)
 800755e:	4293      	cmp	r3, r2
 8007560:	d017      	beq.n	8007592 <TIM_Base_SetConfig+0xaa>
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	4a34      	ldr	r2, [pc, #208]	@ (8007638 <TIM_Base_SetConfig+0x150>)
 8007566:	4293      	cmp	r3, r2
 8007568:	d013      	beq.n	8007592 <TIM_Base_SetConfig+0xaa>
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	4a33      	ldr	r2, [pc, #204]	@ (800763c <TIM_Base_SetConfig+0x154>)
 800756e:	4293      	cmp	r3, r2
 8007570:	d00f      	beq.n	8007592 <TIM_Base_SetConfig+0xaa>
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	4a33      	ldr	r2, [pc, #204]	@ (8007644 <TIM_Base_SetConfig+0x15c>)
 8007576:	4293      	cmp	r3, r2
 8007578:	d00b      	beq.n	8007592 <TIM_Base_SetConfig+0xaa>
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	4a32      	ldr	r2, [pc, #200]	@ (8007648 <TIM_Base_SetConfig+0x160>)
 800757e:	4293      	cmp	r3, r2
 8007580:	d007      	beq.n	8007592 <TIM_Base_SetConfig+0xaa>
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	4a31      	ldr	r2, [pc, #196]	@ (800764c <TIM_Base_SetConfig+0x164>)
 8007586:	4293      	cmp	r3, r2
 8007588:	d003      	beq.n	8007592 <TIM_Base_SetConfig+0xaa>
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	4a2c      	ldr	r2, [pc, #176]	@ (8007640 <TIM_Base_SetConfig+0x158>)
 800758e:	4293      	cmp	r3, r2
 8007590:	d108      	bne.n	80075a4 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007598:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800759a:	683b      	ldr	r3, [r7, #0]
 800759c:	68db      	ldr	r3, [r3, #12]
 800759e:	68fa      	ldr	r2, [r7, #12]
 80075a0:	4313      	orrs	r3, r2
 80075a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80075aa:	683b      	ldr	r3, [r7, #0]
 80075ac:	695b      	ldr	r3, [r3, #20]
 80075ae:	4313      	orrs	r3, r2
 80075b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	68fa      	ldr	r2, [r7, #12]
 80075b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80075b8:	683b      	ldr	r3, [r7, #0]
 80075ba:	689a      	ldr	r2, [r3, #8]
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80075c0:	683b      	ldr	r3, [r7, #0]
 80075c2:	681a      	ldr	r2, [r3, #0]
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	4a18      	ldr	r2, [pc, #96]	@ (800762c <TIM_Base_SetConfig+0x144>)
 80075cc:	4293      	cmp	r3, r2
 80075ce:	d013      	beq.n	80075f8 <TIM_Base_SetConfig+0x110>
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	4a1a      	ldr	r2, [pc, #104]	@ (800763c <TIM_Base_SetConfig+0x154>)
 80075d4:	4293      	cmp	r3, r2
 80075d6:	d00f      	beq.n	80075f8 <TIM_Base_SetConfig+0x110>
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	4a1a      	ldr	r2, [pc, #104]	@ (8007644 <TIM_Base_SetConfig+0x15c>)
 80075dc:	4293      	cmp	r3, r2
 80075de:	d00b      	beq.n	80075f8 <TIM_Base_SetConfig+0x110>
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	4a19      	ldr	r2, [pc, #100]	@ (8007648 <TIM_Base_SetConfig+0x160>)
 80075e4:	4293      	cmp	r3, r2
 80075e6:	d007      	beq.n	80075f8 <TIM_Base_SetConfig+0x110>
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	4a18      	ldr	r2, [pc, #96]	@ (800764c <TIM_Base_SetConfig+0x164>)
 80075ec:	4293      	cmp	r3, r2
 80075ee:	d003      	beq.n	80075f8 <TIM_Base_SetConfig+0x110>
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	4a13      	ldr	r2, [pc, #76]	@ (8007640 <TIM_Base_SetConfig+0x158>)
 80075f4:	4293      	cmp	r3, r2
 80075f6:	d103      	bne.n	8007600 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80075f8:	683b      	ldr	r3, [r7, #0]
 80075fa:	691a      	ldr	r2, [r3, #16]
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	2201      	movs	r2, #1
 8007604:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	691b      	ldr	r3, [r3, #16]
 800760a:	f003 0301 	and.w	r3, r3, #1
 800760e:	2b01      	cmp	r3, #1
 8007610:	d105      	bne.n	800761e <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	691b      	ldr	r3, [r3, #16]
 8007616:	f023 0201 	bic.w	r2, r3, #1
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	611a      	str	r2, [r3, #16]
  }
}
 800761e:	bf00      	nop
 8007620:	3714      	adds	r7, #20
 8007622:	46bd      	mov	sp, r7
 8007624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007628:	4770      	bx	lr
 800762a:	bf00      	nop
 800762c:	40012c00 	.word	0x40012c00
 8007630:	40000400 	.word	0x40000400
 8007634:	40000800 	.word	0x40000800
 8007638:	40000c00 	.word	0x40000c00
 800763c:	40013400 	.word	0x40013400
 8007640:	40015000 	.word	0x40015000
 8007644:	40014000 	.word	0x40014000
 8007648:	40014400 	.word	0x40014400
 800764c:	40014800 	.word	0x40014800

08007650 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007650:	b480      	push	{r7}
 8007652:	b087      	sub	sp, #28
 8007654:	af00      	add	r7, sp, #0
 8007656:	6078      	str	r0, [r7, #4]
 8007658:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	6a1b      	ldr	r3, [r3, #32]
 800765e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	6a1b      	ldr	r3, [r3, #32]
 8007664:	f023 0201 	bic.w	r2, r3, #1
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	685b      	ldr	r3, [r3, #4]
 8007670:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	699b      	ldr	r3, [r3, #24]
 8007676:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800767e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007682:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	f023 0303 	bic.w	r3, r3, #3
 800768a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800768c:	683b      	ldr	r3, [r7, #0]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	68fa      	ldr	r2, [r7, #12]
 8007692:	4313      	orrs	r3, r2
 8007694:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007696:	697b      	ldr	r3, [r7, #20]
 8007698:	f023 0302 	bic.w	r3, r3, #2
 800769c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800769e:	683b      	ldr	r3, [r7, #0]
 80076a0:	689b      	ldr	r3, [r3, #8]
 80076a2:	697a      	ldr	r2, [r7, #20]
 80076a4:	4313      	orrs	r3, r2
 80076a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	4a30      	ldr	r2, [pc, #192]	@ (800776c <TIM_OC1_SetConfig+0x11c>)
 80076ac:	4293      	cmp	r3, r2
 80076ae:	d013      	beq.n	80076d8 <TIM_OC1_SetConfig+0x88>
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	4a2f      	ldr	r2, [pc, #188]	@ (8007770 <TIM_OC1_SetConfig+0x120>)
 80076b4:	4293      	cmp	r3, r2
 80076b6:	d00f      	beq.n	80076d8 <TIM_OC1_SetConfig+0x88>
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	4a2e      	ldr	r2, [pc, #184]	@ (8007774 <TIM_OC1_SetConfig+0x124>)
 80076bc:	4293      	cmp	r3, r2
 80076be:	d00b      	beq.n	80076d8 <TIM_OC1_SetConfig+0x88>
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	4a2d      	ldr	r2, [pc, #180]	@ (8007778 <TIM_OC1_SetConfig+0x128>)
 80076c4:	4293      	cmp	r3, r2
 80076c6:	d007      	beq.n	80076d8 <TIM_OC1_SetConfig+0x88>
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	4a2c      	ldr	r2, [pc, #176]	@ (800777c <TIM_OC1_SetConfig+0x12c>)
 80076cc:	4293      	cmp	r3, r2
 80076ce:	d003      	beq.n	80076d8 <TIM_OC1_SetConfig+0x88>
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	4a2b      	ldr	r2, [pc, #172]	@ (8007780 <TIM_OC1_SetConfig+0x130>)
 80076d4:	4293      	cmp	r3, r2
 80076d6:	d10c      	bne.n	80076f2 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80076d8:	697b      	ldr	r3, [r7, #20]
 80076da:	f023 0308 	bic.w	r3, r3, #8
 80076de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80076e0:	683b      	ldr	r3, [r7, #0]
 80076e2:	68db      	ldr	r3, [r3, #12]
 80076e4:	697a      	ldr	r2, [r7, #20]
 80076e6:	4313      	orrs	r3, r2
 80076e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80076ea:	697b      	ldr	r3, [r7, #20]
 80076ec:	f023 0304 	bic.w	r3, r3, #4
 80076f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	4a1d      	ldr	r2, [pc, #116]	@ (800776c <TIM_OC1_SetConfig+0x11c>)
 80076f6:	4293      	cmp	r3, r2
 80076f8:	d013      	beq.n	8007722 <TIM_OC1_SetConfig+0xd2>
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	4a1c      	ldr	r2, [pc, #112]	@ (8007770 <TIM_OC1_SetConfig+0x120>)
 80076fe:	4293      	cmp	r3, r2
 8007700:	d00f      	beq.n	8007722 <TIM_OC1_SetConfig+0xd2>
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	4a1b      	ldr	r2, [pc, #108]	@ (8007774 <TIM_OC1_SetConfig+0x124>)
 8007706:	4293      	cmp	r3, r2
 8007708:	d00b      	beq.n	8007722 <TIM_OC1_SetConfig+0xd2>
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	4a1a      	ldr	r2, [pc, #104]	@ (8007778 <TIM_OC1_SetConfig+0x128>)
 800770e:	4293      	cmp	r3, r2
 8007710:	d007      	beq.n	8007722 <TIM_OC1_SetConfig+0xd2>
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	4a19      	ldr	r2, [pc, #100]	@ (800777c <TIM_OC1_SetConfig+0x12c>)
 8007716:	4293      	cmp	r3, r2
 8007718:	d003      	beq.n	8007722 <TIM_OC1_SetConfig+0xd2>
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	4a18      	ldr	r2, [pc, #96]	@ (8007780 <TIM_OC1_SetConfig+0x130>)
 800771e:	4293      	cmp	r3, r2
 8007720:	d111      	bne.n	8007746 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007722:	693b      	ldr	r3, [r7, #16]
 8007724:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007728:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800772a:	693b      	ldr	r3, [r7, #16]
 800772c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007730:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007732:	683b      	ldr	r3, [r7, #0]
 8007734:	695b      	ldr	r3, [r3, #20]
 8007736:	693a      	ldr	r2, [r7, #16]
 8007738:	4313      	orrs	r3, r2
 800773a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800773c:	683b      	ldr	r3, [r7, #0]
 800773e:	699b      	ldr	r3, [r3, #24]
 8007740:	693a      	ldr	r2, [r7, #16]
 8007742:	4313      	orrs	r3, r2
 8007744:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	693a      	ldr	r2, [r7, #16]
 800774a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	68fa      	ldr	r2, [r7, #12]
 8007750:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007752:	683b      	ldr	r3, [r7, #0]
 8007754:	685a      	ldr	r2, [r3, #4]
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	697a      	ldr	r2, [r7, #20]
 800775e:	621a      	str	r2, [r3, #32]
}
 8007760:	bf00      	nop
 8007762:	371c      	adds	r7, #28
 8007764:	46bd      	mov	sp, r7
 8007766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776a:	4770      	bx	lr
 800776c:	40012c00 	.word	0x40012c00
 8007770:	40013400 	.word	0x40013400
 8007774:	40014000 	.word	0x40014000
 8007778:	40014400 	.word	0x40014400
 800777c:	40014800 	.word	0x40014800
 8007780:	40015000 	.word	0x40015000

08007784 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007784:	b480      	push	{r7}
 8007786:	b087      	sub	sp, #28
 8007788:	af00      	add	r7, sp, #0
 800778a:	6078      	str	r0, [r7, #4]
 800778c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	6a1b      	ldr	r3, [r3, #32]
 8007792:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	6a1b      	ldr	r3, [r3, #32]
 8007798:	f023 0210 	bic.w	r2, r3, #16
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	685b      	ldr	r3, [r3, #4]
 80077a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	699b      	ldr	r3, [r3, #24]
 80077aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80077b2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80077b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80077be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80077c0:	683b      	ldr	r3, [r7, #0]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	021b      	lsls	r3, r3, #8
 80077c6:	68fa      	ldr	r2, [r7, #12]
 80077c8:	4313      	orrs	r3, r2
 80077ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80077cc:	697b      	ldr	r3, [r7, #20]
 80077ce:	f023 0320 	bic.w	r3, r3, #32
 80077d2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80077d4:	683b      	ldr	r3, [r7, #0]
 80077d6:	689b      	ldr	r3, [r3, #8]
 80077d8:	011b      	lsls	r3, r3, #4
 80077da:	697a      	ldr	r2, [r7, #20]
 80077dc:	4313      	orrs	r3, r2
 80077de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	4a2c      	ldr	r2, [pc, #176]	@ (8007894 <TIM_OC2_SetConfig+0x110>)
 80077e4:	4293      	cmp	r3, r2
 80077e6:	d007      	beq.n	80077f8 <TIM_OC2_SetConfig+0x74>
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	4a2b      	ldr	r2, [pc, #172]	@ (8007898 <TIM_OC2_SetConfig+0x114>)
 80077ec:	4293      	cmp	r3, r2
 80077ee:	d003      	beq.n	80077f8 <TIM_OC2_SetConfig+0x74>
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	4a2a      	ldr	r2, [pc, #168]	@ (800789c <TIM_OC2_SetConfig+0x118>)
 80077f4:	4293      	cmp	r3, r2
 80077f6:	d10d      	bne.n	8007814 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80077f8:	697b      	ldr	r3, [r7, #20]
 80077fa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80077fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007800:	683b      	ldr	r3, [r7, #0]
 8007802:	68db      	ldr	r3, [r3, #12]
 8007804:	011b      	lsls	r3, r3, #4
 8007806:	697a      	ldr	r2, [r7, #20]
 8007808:	4313      	orrs	r3, r2
 800780a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800780c:	697b      	ldr	r3, [r7, #20]
 800780e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007812:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	4a1f      	ldr	r2, [pc, #124]	@ (8007894 <TIM_OC2_SetConfig+0x110>)
 8007818:	4293      	cmp	r3, r2
 800781a:	d013      	beq.n	8007844 <TIM_OC2_SetConfig+0xc0>
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	4a1e      	ldr	r2, [pc, #120]	@ (8007898 <TIM_OC2_SetConfig+0x114>)
 8007820:	4293      	cmp	r3, r2
 8007822:	d00f      	beq.n	8007844 <TIM_OC2_SetConfig+0xc0>
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	4a1e      	ldr	r2, [pc, #120]	@ (80078a0 <TIM_OC2_SetConfig+0x11c>)
 8007828:	4293      	cmp	r3, r2
 800782a:	d00b      	beq.n	8007844 <TIM_OC2_SetConfig+0xc0>
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	4a1d      	ldr	r2, [pc, #116]	@ (80078a4 <TIM_OC2_SetConfig+0x120>)
 8007830:	4293      	cmp	r3, r2
 8007832:	d007      	beq.n	8007844 <TIM_OC2_SetConfig+0xc0>
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	4a1c      	ldr	r2, [pc, #112]	@ (80078a8 <TIM_OC2_SetConfig+0x124>)
 8007838:	4293      	cmp	r3, r2
 800783a:	d003      	beq.n	8007844 <TIM_OC2_SetConfig+0xc0>
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	4a17      	ldr	r2, [pc, #92]	@ (800789c <TIM_OC2_SetConfig+0x118>)
 8007840:	4293      	cmp	r3, r2
 8007842:	d113      	bne.n	800786c <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007844:	693b      	ldr	r3, [r7, #16]
 8007846:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800784a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800784c:	693b      	ldr	r3, [r7, #16]
 800784e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007852:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007854:	683b      	ldr	r3, [r7, #0]
 8007856:	695b      	ldr	r3, [r3, #20]
 8007858:	009b      	lsls	r3, r3, #2
 800785a:	693a      	ldr	r2, [r7, #16]
 800785c:	4313      	orrs	r3, r2
 800785e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007860:	683b      	ldr	r3, [r7, #0]
 8007862:	699b      	ldr	r3, [r3, #24]
 8007864:	009b      	lsls	r3, r3, #2
 8007866:	693a      	ldr	r2, [r7, #16]
 8007868:	4313      	orrs	r3, r2
 800786a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	693a      	ldr	r2, [r7, #16]
 8007870:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	68fa      	ldr	r2, [r7, #12]
 8007876:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007878:	683b      	ldr	r3, [r7, #0]
 800787a:	685a      	ldr	r2, [r3, #4]
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	697a      	ldr	r2, [r7, #20]
 8007884:	621a      	str	r2, [r3, #32]
}
 8007886:	bf00      	nop
 8007888:	371c      	adds	r7, #28
 800788a:	46bd      	mov	sp, r7
 800788c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007890:	4770      	bx	lr
 8007892:	bf00      	nop
 8007894:	40012c00 	.word	0x40012c00
 8007898:	40013400 	.word	0x40013400
 800789c:	40015000 	.word	0x40015000
 80078a0:	40014000 	.word	0x40014000
 80078a4:	40014400 	.word	0x40014400
 80078a8:	40014800 	.word	0x40014800

080078ac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80078ac:	b480      	push	{r7}
 80078ae:	b087      	sub	sp, #28
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]
 80078b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	6a1b      	ldr	r3, [r3, #32]
 80078ba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	6a1b      	ldr	r3, [r3, #32]
 80078c0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	685b      	ldr	r3, [r3, #4]
 80078cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	69db      	ldr	r3, [r3, #28]
 80078d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80078da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80078de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	f023 0303 	bic.w	r3, r3, #3
 80078e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80078e8:	683b      	ldr	r3, [r7, #0]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	68fa      	ldr	r2, [r7, #12]
 80078ee:	4313      	orrs	r3, r2
 80078f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80078f2:	697b      	ldr	r3, [r7, #20]
 80078f4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80078f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80078fa:	683b      	ldr	r3, [r7, #0]
 80078fc:	689b      	ldr	r3, [r3, #8]
 80078fe:	021b      	lsls	r3, r3, #8
 8007900:	697a      	ldr	r2, [r7, #20]
 8007902:	4313      	orrs	r3, r2
 8007904:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	4a2b      	ldr	r2, [pc, #172]	@ (80079b8 <TIM_OC3_SetConfig+0x10c>)
 800790a:	4293      	cmp	r3, r2
 800790c:	d007      	beq.n	800791e <TIM_OC3_SetConfig+0x72>
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	4a2a      	ldr	r2, [pc, #168]	@ (80079bc <TIM_OC3_SetConfig+0x110>)
 8007912:	4293      	cmp	r3, r2
 8007914:	d003      	beq.n	800791e <TIM_OC3_SetConfig+0x72>
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	4a29      	ldr	r2, [pc, #164]	@ (80079c0 <TIM_OC3_SetConfig+0x114>)
 800791a:	4293      	cmp	r3, r2
 800791c:	d10d      	bne.n	800793a <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800791e:	697b      	ldr	r3, [r7, #20]
 8007920:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007924:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007926:	683b      	ldr	r3, [r7, #0]
 8007928:	68db      	ldr	r3, [r3, #12]
 800792a:	021b      	lsls	r3, r3, #8
 800792c:	697a      	ldr	r2, [r7, #20]
 800792e:	4313      	orrs	r3, r2
 8007930:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007932:	697b      	ldr	r3, [r7, #20]
 8007934:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007938:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	4a1e      	ldr	r2, [pc, #120]	@ (80079b8 <TIM_OC3_SetConfig+0x10c>)
 800793e:	4293      	cmp	r3, r2
 8007940:	d013      	beq.n	800796a <TIM_OC3_SetConfig+0xbe>
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	4a1d      	ldr	r2, [pc, #116]	@ (80079bc <TIM_OC3_SetConfig+0x110>)
 8007946:	4293      	cmp	r3, r2
 8007948:	d00f      	beq.n	800796a <TIM_OC3_SetConfig+0xbe>
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	4a1d      	ldr	r2, [pc, #116]	@ (80079c4 <TIM_OC3_SetConfig+0x118>)
 800794e:	4293      	cmp	r3, r2
 8007950:	d00b      	beq.n	800796a <TIM_OC3_SetConfig+0xbe>
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	4a1c      	ldr	r2, [pc, #112]	@ (80079c8 <TIM_OC3_SetConfig+0x11c>)
 8007956:	4293      	cmp	r3, r2
 8007958:	d007      	beq.n	800796a <TIM_OC3_SetConfig+0xbe>
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	4a1b      	ldr	r2, [pc, #108]	@ (80079cc <TIM_OC3_SetConfig+0x120>)
 800795e:	4293      	cmp	r3, r2
 8007960:	d003      	beq.n	800796a <TIM_OC3_SetConfig+0xbe>
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	4a16      	ldr	r2, [pc, #88]	@ (80079c0 <TIM_OC3_SetConfig+0x114>)
 8007966:	4293      	cmp	r3, r2
 8007968:	d113      	bne.n	8007992 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800796a:	693b      	ldr	r3, [r7, #16]
 800796c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007970:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007972:	693b      	ldr	r3, [r7, #16]
 8007974:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007978:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800797a:	683b      	ldr	r3, [r7, #0]
 800797c:	695b      	ldr	r3, [r3, #20]
 800797e:	011b      	lsls	r3, r3, #4
 8007980:	693a      	ldr	r2, [r7, #16]
 8007982:	4313      	orrs	r3, r2
 8007984:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007986:	683b      	ldr	r3, [r7, #0]
 8007988:	699b      	ldr	r3, [r3, #24]
 800798a:	011b      	lsls	r3, r3, #4
 800798c:	693a      	ldr	r2, [r7, #16]
 800798e:	4313      	orrs	r3, r2
 8007990:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	693a      	ldr	r2, [r7, #16]
 8007996:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	68fa      	ldr	r2, [r7, #12]
 800799c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800799e:	683b      	ldr	r3, [r7, #0]
 80079a0:	685a      	ldr	r2, [r3, #4]
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	697a      	ldr	r2, [r7, #20]
 80079aa:	621a      	str	r2, [r3, #32]
}
 80079ac:	bf00      	nop
 80079ae:	371c      	adds	r7, #28
 80079b0:	46bd      	mov	sp, r7
 80079b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b6:	4770      	bx	lr
 80079b8:	40012c00 	.word	0x40012c00
 80079bc:	40013400 	.word	0x40013400
 80079c0:	40015000 	.word	0x40015000
 80079c4:	40014000 	.word	0x40014000
 80079c8:	40014400 	.word	0x40014400
 80079cc:	40014800 	.word	0x40014800

080079d0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80079d0:	b480      	push	{r7}
 80079d2:	b087      	sub	sp, #28
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	6078      	str	r0, [r7, #4]
 80079d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	6a1b      	ldr	r3, [r3, #32]
 80079de:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	6a1b      	ldr	r3, [r3, #32]
 80079e4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	685b      	ldr	r3, [r3, #4]
 80079f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	69db      	ldr	r3, [r3, #28]
 80079f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80079fe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007a02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007a0a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007a0c:	683b      	ldr	r3, [r7, #0]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	021b      	lsls	r3, r3, #8
 8007a12:	68fa      	ldr	r2, [r7, #12]
 8007a14:	4313      	orrs	r3, r2
 8007a16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007a18:	697b      	ldr	r3, [r7, #20]
 8007a1a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007a1e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007a20:	683b      	ldr	r3, [r7, #0]
 8007a22:	689b      	ldr	r3, [r3, #8]
 8007a24:	031b      	lsls	r3, r3, #12
 8007a26:	697a      	ldr	r2, [r7, #20]
 8007a28:	4313      	orrs	r3, r2
 8007a2a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	4a2c      	ldr	r2, [pc, #176]	@ (8007ae0 <TIM_OC4_SetConfig+0x110>)
 8007a30:	4293      	cmp	r3, r2
 8007a32:	d007      	beq.n	8007a44 <TIM_OC4_SetConfig+0x74>
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	4a2b      	ldr	r2, [pc, #172]	@ (8007ae4 <TIM_OC4_SetConfig+0x114>)
 8007a38:	4293      	cmp	r3, r2
 8007a3a:	d003      	beq.n	8007a44 <TIM_OC4_SetConfig+0x74>
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	4a2a      	ldr	r2, [pc, #168]	@ (8007ae8 <TIM_OC4_SetConfig+0x118>)
 8007a40:	4293      	cmp	r3, r2
 8007a42:	d10d      	bne.n	8007a60 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8007a44:	697b      	ldr	r3, [r7, #20]
 8007a46:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007a4a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8007a4c:	683b      	ldr	r3, [r7, #0]
 8007a4e:	68db      	ldr	r3, [r3, #12]
 8007a50:	031b      	lsls	r3, r3, #12
 8007a52:	697a      	ldr	r2, [r7, #20]
 8007a54:	4313      	orrs	r3, r2
 8007a56:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8007a58:	697b      	ldr	r3, [r7, #20]
 8007a5a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007a5e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	4a1f      	ldr	r2, [pc, #124]	@ (8007ae0 <TIM_OC4_SetConfig+0x110>)
 8007a64:	4293      	cmp	r3, r2
 8007a66:	d013      	beq.n	8007a90 <TIM_OC4_SetConfig+0xc0>
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	4a1e      	ldr	r2, [pc, #120]	@ (8007ae4 <TIM_OC4_SetConfig+0x114>)
 8007a6c:	4293      	cmp	r3, r2
 8007a6e:	d00f      	beq.n	8007a90 <TIM_OC4_SetConfig+0xc0>
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	4a1e      	ldr	r2, [pc, #120]	@ (8007aec <TIM_OC4_SetConfig+0x11c>)
 8007a74:	4293      	cmp	r3, r2
 8007a76:	d00b      	beq.n	8007a90 <TIM_OC4_SetConfig+0xc0>
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	4a1d      	ldr	r2, [pc, #116]	@ (8007af0 <TIM_OC4_SetConfig+0x120>)
 8007a7c:	4293      	cmp	r3, r2
 8007a7e:	d007      	beq.n	8007a90 <TIM_OC4_SetConfig+0xc0>
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	4a1c      	ldr	r2, [pc, #112]	@ (8007af4 <TIM_OC4_SetConfig+0x124>)
 8007a84:	4293      	cmp	r3, r2
 8007a86:	d003      	beq.n	8007a90 <TIM_OC4_SetConfig+0xc0>
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	4a17      	ldr	r2, [pc, #92]	@ (8007ae8 <TIM_OC4_SetConfig+0x118>)
 8007a8c:	4293      	cmp	r3, r2
 8007a8e:	d113      	bne.n	8007ab8 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007a90:	693b      	ldr	r3, [r7, #16]
 8007a92:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007a96:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8007a98:	693b      	ldr	r3, [r7, #16]
 8007a9a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007a9e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007aa0:	683b      	ldr	r3, [r7, #0]
 8007aa2:	695b      	ldr	r3, [r3, #20]
 8007aa4:	019b      	lsls	r3, r3, #6
 8007aa6:	693a      	ldr	r2, [r7, #16]
 8007aa8:	4313      	orrs	r3, r2
 8007aaa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8007aac:	683b      	ldr	r3, [r7, #0]
 8007aae:	699b      	ldr	r3, [r3, #24]
 8007ab0:	019b      	lsls	r3, r3, #6
 8007ab2:	693a      	ldr	r2, [r7, #16]
 8007ab4:	4313      	orrs	r3, r2
 8007ab6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	693a      	ldr	r2, [r7, #16]
 8007abc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	68fa      	ldr	r2, [r7, #12]
 8007ac2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007ac4:	683b      	ldr	r3, [r7, #0]
 8007ac6:	685a      	ldr	r2, [r3, #4]
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	697a      	ldr	r2, [r7, #20]
 8007ad0:	621a      	str	r2, [r3, #32]
}
 8007ad2:	bf00      	nop
 8007ad4:	371c      	adds	r7, #28
 8007ad6:	46bd      	mov	sp, r7
 8007ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007adc:	4770      	bx	lr
 8007ade:	bf00      	nop
 8007ae0:	40012c00 	.word	0x40012c00
 8007ae4:	40013400 	.word	0x40013400
 8007ae8:	40015000 	.word	0x40015000
 8007aec:	40014000 	.word	0x40014000
 8007af0:	40014400 	.word	0x40014400
 8007af4:	40014800 	.word	0x40014800

08007af8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007af8:	b480      	push	{r7}
 8007afa:	b087      	sub	sp, #28
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	6078      	str	r0, [r7, #4]
 8007b00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	6a1b      	ldr	r3, [r3, #32]
 8007b06:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	6a1b      	ldr	r3, [r3, #32]
 8007b0c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	685b      	ldr	r3, [r3, #4]
 8007b18:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007b26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007b2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007b2c:	683b      	ldr	r3, [r7, #0]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	68fa      	ldr	r2, [r7, #12]
 8007b32:	4313      	orrs	r3, r2
 8007b34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007b36:	693b      	ldr	r3, [r7, #16]
 8007b38:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8007b3c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007b3e:	683b      	ldr	r3, [r7, #0]
 8007b40:	689b      	ldr	r3, [r3, #8]
 8007b42:	041b      	lsls	r3, r3, #16
 8007b44:	693a      	ldr	r2, [r7, #16]
 8007b46:	4313      	orrs	r3, r2
 8007b48:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	4a19      	ldr	r2, [pc, #100]	@ (8007bb4 <TIM_OC5_SetConfig+0xbc>)
 8007b4e:	4293      	cmp	r3, r2
 8007b50:	d013      	beq.n	8007b7a <TIM_OC5_SetConfig+0x82>
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	4a18      	ldr	r2, [pc, #96]	@ (8007bb8 <TIM_OC5_SetConfig+0xc0>)
 8007b56:	4293      	cmp	r3, r2
 8007b58:	d00f      	beq.n	8007b7a <TIM_OC5_SetConfig+0x82>
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	4a17      	ldr	r2, [pc, #92]	@ (8007bbc <TIM_OC5_SetConfig+0xc4>)
 8007b5e:	4293      	cmp	r3, r2
 8007b60:	d00b      	beq.n	8007b7a <TIM_OC5_SetConfig+0x82>
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	4a16      	ldr	r2, [pc, #88]	@ (8007bc0 <TIM_OC5_SetConfig+0xc8>)
 8007b66:	4293      	cmp	r3, r2
 8007b68:	d007      	beq.n	8007b7a <TIM_OC5_SetConfig+0x82>
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	4a15      	ldr	r2, [pc, #84]	@ (8007bc4 <TIM_OC5_SetConfig+0xcc>)
 8007b6e:	4293      	cmp	r3, r2
 8007b70:	d003      	beq.n	8007b7a <TIM_OC5_SetConfig+0x82>
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	4a14      	ldr	r2, [pc, #80]	@ (8007bc8 <TIM_OC5_SetConfig+0xd0>)
 8007b76:	4293      	cmp	r3, r2
 8007b78:	d109      	bne.n	8007b8e <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007b7a:	697b      	ldr	r3, [r7, #20]
 8007b7c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007b80:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007b82:	683b      	ldr	r3, [r7, #0]
 8007b84:	695b      	ldr	r3, [r3, #20]
 8007b86:	021b      	lsls	r3, r3, #8
 8007b88:	697a      	ldr	r2, [r7, #20]
 8007b8a:	4313      	orrs	r3, r2
 8007b8c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	697a      	ldr	r2, [r7, #20]
 8007b92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	68fa      	ldr	r2, [r7, #12]
 8007b98:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007b9a:	683b      	ldr	r3, [r7, #0]
 8007b9c:	685a      	ldr	r2, [r3, #4]
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	693a      	ldr	r2, [r7, #16]
 8007ba6:	621a      	str	r2, [r3, #32]
}
 8007ba8:	bf00      	nop
 8007baa:	371c      	adds	r7, #28
 8007bac:	46bd      	mov	sp, r7
 8007bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb2:	4770      	bx	lr
 8007bb4:	40012c00 	.word	0x40012c00
 8007bb8:	40013400 	.word	0x40013400
 8007bbc:	40014000 	.word	0x40014000
 8007bc0:	40014400 	.word	0x40014400
 8007bc4:	40014800 	.word	0x40014800
 8007bc8:	40015000 	.word	0x40015000

08007bcc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007bcc:	b480      	push	{r7}
 8007bce:	b087      	sub	sp, #28
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	6078      	str	r0, [r7, #4]
 8007bd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	6a1b      	ldr	r3, [r3, #32]
 8007bda:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	6a1b      	ldr	r3, [r3, #32]
 8007be0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	685b      	ldr	r3, [r3, #4]
 8007bec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007bf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007bfa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007bfe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007c00:	683b      	ldr	r3, [r7, #0]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	021b      	lsls	r3, r3, #8
 8007c06:	68fa      	ldr	r2, [r7, #12]
 8007c08:	4313      	orrs	r3, r2
 8007c0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007c0c:	693b      	ldr	r3, [r7, #16]
 8007c0e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007c12:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007c14:	683b      	ldr	r3, [r7, #0]
 8007c16:	689b      	ldr	r3, [r3, #8]
 8007c18:	051b      	lsls	r3, r3, #20
 8007c1a:	693a      	ldr	r2, [r7, #16]
 8007c1c:	4313      	orrs	r3, r2
 8007c1e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	4a1a      	ldr	r2, [pc, #104]	@ (8007c8c <TIM_OC6_SetConfig+0xc0>)
 8007c24:	4293      	cmp	r3, r2
 8007c26:	d013      	beq.n	8007c50 <TIM_OC6_SetConfig+0x84>
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	4a19      	ldr	r2, [pc, #100]	@ (8007c90 <TIM_OC6_SetConfig+0xc4>)
 8007c2c:	4293      	cmp	r3, r2
 8007c2e:	d00f      	beq.n	8007c50 <TIM_OC6_SetConfig+0x84>
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	4a18      	ldr	r2, [pc, #96]	@ (8007c94 <TIM_OC6_SetConfig+0xc8>)
 8007c34:	4293      	cmp	r3, r2
 8007c36:	d00b      	beq.n	8007c50 <TIM_OC6_SetConfig+0x84>
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	4a17      	ldr	r2, [pc, #92]	@ (8007c98 <TIM_OC6_SetConfig+0xcc>)
 8007c3c:	4293      	cmp	r3, r2
 8007c3e:	d007      	beq.n	8007c50 <TIM_OC6_SetConfig+0x84>
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	4a16      	ldr	r2, [pc, #88]	@ (8007c9c <TIM_OC6_SetConfig+0xd0>)
 8007c44:	4293      	cmp	r3, r2
 8007c46:	d003      	beq.n	8007c50 <TIM_OC6_SetConfig+0x84>
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	4a15      	ldr	r2, [pc, #84]	@ (8007ca0 <TIM_OC6_SetConfig+0xd4>)
 8007c4c:	4293      	cmp	r3, r2
 8007c4e:	d109      	bne.n	8007c64 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007c50:	697b      	ldr	r3, [r7, #20]
 8007c52:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007c56:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007c58:	683b      	ldr	r3, [r7, #0]
 8007c5a:	695b      	ldr	r3, [r3, #20]
 8007c5c:	029b      	lsls	r3, r3, #10
 8007c5e:	697a      	ldr	r2, [r7, #20]
 8007c60:	4313      	orrs	r3, r2
 8007c62:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	697a      	ldr	r2, [r7, #20]
 8007c68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	68fa      	ldr	r2, [r7, #12]
 8007c6e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007c70:	683b      	ldr	r3, [r7, #0]
 8007c72:	685a      	ldr	r2, [r3, #4]
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	693a      	ldr	r2, [r7, #16]
 8007c7c:	621a      	str	r2, [r3, #32]
}
 8007c7e:	bf00      	nop
 8007c80:	371c      	adds	r7, #28
 8007c82:	46bd      	mov	sp, r7
 8007c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c88:	4770      	bx	lr
 8007c8a:	bf00      	nop
 8007c8c:	40012c00 	.word	0x40012c00
 8007c90:	40013400 	.word	0x40013400
 8007c94:	40014000 	.word	0x40014000
 8007c98:	40014400 	.word	0x40014400
 8007c9c:	40014800 	.word	0x40014800
 8007ca0:	40015000 	.word	0x40015000

08007ca4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007ca4:	b480      	push	{r7}
 8007ca6:	b087      	sub	sp, #28
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	60f8      	str	r0, [r7, #12]
 8007cac:	60b9      	str	r1, [r7, #8]
 8007cae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	6a1b      	ldr	r3, [r3, #32]
 8007cb4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	6a1b      	ldr	r3, [r3, #32]
 8007cba:	f023 0201 	bic.w	r2, r3, #1
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	699b      	ldr	r3, [r3, #24]
 8007cc6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007cc8:	693b      	ldr	r3, [r7, #16]
 8007cca:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007cce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	011b      	lsls	r3, r3, #4
 8007cd4:	693a      	ldr	r2, [r7, #16]
 8007cd6:	4313      	orrs	r3, r2
 8007cd8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007cda:	697b      	ldr	r3, [r7, #20]
 8007cdc:	f023 030a 	bic.w	r3, r3, #10
 8007ce0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007ce2:	697a      	ldr	r2, [r7, #20]
 8007ce4:	68bb      	ldr	r3, [r7, #8]
 8007ce6:	4313      	orrs	r3, r2
 8007ce8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	693a      	ldr	r2, [r7, #16]
 8007cee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	697a      	ldr	r2, [r7, #20]
 8007cf4:	621a      	str	r2, [r3, #32]
}
 8007cf6:	bf00      	nop
 8007cf8:	371c      	adds	r7, #28
 8007cfa:	46bd      	mov	sp, r7
 8007cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d00:	4770      	bx	lr

08007d02 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007d02:	b480      	push	{r7}
 8007d04:	b087      	sub	sp, #28
 8007d06:	af00      	add	r7, sp, #0
 8007d08:	60f8      	str	r0, [r7, #12]
 8007d0a:	60b9      	str	r1, [r7, #8]
 8007d0c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	6a1b      	ldr	r3, [r3, #32]
 8007d12:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	6a1b      	ldr	r3, [r3, #32]
 8007d18:	f023 0210 	bic.w	r2, r3, #16
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	699b      	ldr	r3, [r3, #24]
 8007d24:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007d26:	693b      	ldr	r3, [r7, #16]
 8007d28:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007d2c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	031b      	lsls	r3, r3, #12
 8007d32:	693a      	ldr	r2, [r7, #16]
 8007d34:	4313      	orrs	r3, r2
 8007d36:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007d38:	697b      	ldr	r3, [r7, #20]
 8007d3a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007d3e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007d40:	68bb      	ldr	r3, [r7, #8]
 8007d42:	011b      	lsls	r3, r3, #4
 8007d44:	697a      	ldr	r2, [r7, #20]
 8007d46:	4313      	orrs	r3, r2
 8007d48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	693a      	ldr	r2, [r7, #16]
 8007d4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	697a      	ldr	r2, [r7, #20]
 8007d54:	621a      	str	r2, [r3, #32]
}
 8007d56:	bf00      	nop
 8007d58:	371c      	adds	r7, #28
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d60:	4770      	bx	lr

08007d62 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007d62:	b480      	push	{r7}
 8007d64:	b085      	sub	sp, #20
 8007d66:	af00      	add	r7, sp, #0
 8007d68:	6078      	str	r0, [r7, #4]
 8007d6a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	689b      	ldr	r3, [r3, #8]
 8007d70:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8007d78:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007d7c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007d7e:	683a      	ldr	r2, [r7, #0]
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	4313      	orrs	r3, r2
 8007d84:	f043 0307 	orr.w	r3, r3, #7
 8007d88:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	68fa      	ldr	r2, [r7, #12]
 8007d8e:	609a      	str	r2, [r3, #8]
}
 8007d90:	bf00      	nop
 8007d92:	3714      	adds	r7, #20
 8007d94:	46bd      	mov	sp, r7
 8007d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9a:	4770      	bx	lr

08007d9c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007d9c:	b480      	push	{r7}
 8007d9e:	b087      	sub	sp, #28
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	60f8      	str	r0, [r7, #12]
 8007da4:	60b9      	str	r1, [r7, #8]
 8007da6:	607a      	str	r2, [r7, #4]
 8007da8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	689b      	ldr	r3, [r3, #8]
 8007dae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007db0:	697b      	ldr	r3, [r7, #20]
 8007db2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007db6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007db8:	683b      	ldr	r3, [r7, #0]
 8007dba:	021a      	lsls	r2, r3, #8
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	431a      	orrs	r2, r3
 8007dc0:	68bb      	ldr	r3, [r7, #8]
 8007dc2:	4313      	orrs	r3, r2
 8007dc4:	697a      	ldr	r2, [r7, #20]
 8007dc6:	4313      	orrs	r3, r2
 8007dc8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	697a      	ldr	r2, [r7, #20]
 8007dce:	609a      	str	r2, [r3, #8]
}
 8007dd0:	bf00      	nop
 8007dd2:	371c      	adds	r7, #28
 8007dd4:	46bd      	mov	sp, r7
 8007dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dda:	4770      	bx	lr

08007ddc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007ddc:	b480      	push	{r7}
 8007dde:	b087      	sub	sp, #28
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	60f8      	str	r0, [r7, #12]
 8007de4:	60b9      	str	r1, [r7, #8]
 8007de6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007de8:	68bb      	ldr	r3, [r7, #8]
 8007dea:	f003 031f 	and.w	r3, r3, #31
 8007dee:	2201      	movs	r2, #1
 8007df0:	fa02 f303 	lsl.w	r3, r2, r3
 8007df4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	6a1a      	ldr	r2, [r3, #32]
 8007dfa:	697b      	ldr	r3, [r7, #20]
 8007dfc:	43db      	mvns	r3, r3
 8007dfe:	401a      	ands	r2, r3
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	6a1a      	ldr	r2, [r3, #32]
 8007e08:	68bb      	ldr	r3, [r7, #8]
 8007e0a:	f003 031f 	and.w	r3, r3, #31
 8007e0e:	6879      	ldr	r1, [r7, #4]
 8007e10:	fa01 f303 	lsl.w	r3, r1, r3
 8007e14:	431a      	orrs	r2, r3
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	621a      	str	r2, [r3, #32]
}
 8007e1a:	bf00      	nop
 8007e1c:	371c      	adds	r7, #28
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e24:	4770      	bx	lr
	...

08007e28 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8007e28:	b480      	push	{r7}
 8007e2a:	b083      	sub	sp, #12
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	4a26      	ldr	r2, [pc, #152]	@ (8007ecc <TIM_ResetCallback+0xa4>)
 8007e34:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	4a25      	ldr	r2, [pc, #148]	@ (8007ed0 <TIM_ResetCallback+0xa8>)
 8007e3c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	4a24      	ldr	r2, [pc, #144]	@ (8007ed4 <TIM_ResetCallback+0xac>)
 8007e44:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	4a23      	ldr	r2, [pc, #140]	@ (8007ed8 <TIM_ResetCallback+0xb0>)
 8007e4c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	4a22      	ldr	r2, [pc, #136]	@ (8007edc <TIM_ResetCallback+0xb4>)
 8007e54:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	4a21      	ldr	r2, [pc, #132]	@ (8007ee0 <TIM_ResetCallback+0xb8>)
 8007e5c:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	4a20      	ldr	r2, [pc, #128]	@ (8007ee4 <TIM_ResetCallback+0xbc>)
 8007e64:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	4a1f      	ldr	r2, [pc, #124]	@ (8007ee8 <TIM_ResetCallback+0xc0>)
 8007e6c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	4a1e      	ldr	r2, [pc, #120]	@ (8007eec <TIM_ResetCallback+0xc4>)
 8007e74:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	4a1d      	ldr	r2, [pc, #116]	@ (8007ef0 <TIM_ResetCallback+0xc8>)
 8007e7c:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	4a1c      	ldr	r2, [pc, #112]	@ (8007ef4 <TIM_ResetCallback+0xcc>)
 8007e84:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	4a1b      	ldr	r2, [pc, #108]	@ (8007ef8 <TIM_ResetCallback+0xd0>)
 8007e8c:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	4a1a      	ldr	r2, [pc, #104]	@ (8007efc <TIM_ResetCallback+0xd4>)
 8007e94:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	4a19      	ldr	r2, [pc, #100]	@ (8007f00 <TIM_ResetCallback+0xd8>)
 8007e9c:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  htim->EncoderIndexCallback              = HAL_TIMEx_EncoderIndexCallback;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	4a18      	ldr	r2, [pc, #96]	@ (8007f04 <TIM_ResetCallback+0xdc>)
 8007ea4:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  htim->DirectionChangeCallback           = HAL_TIMEx_DirectionChangeCallback;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	4a17      	ldr	r2, [pc, #92]	@ (8007f08 <TIM_ResetCallback+0xe0>)
 8007eac:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  htim->IndexErrorCallback                = HAL_TIMEx_IndexErrorCallback;
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	4a16      	ldr	r2, [pc, #88]	@ (8007f0c <TIM_ResetCallback+0xe4>)
 8007eb4:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  htim->TransitionErrorCallback           = HAL_TIMEx_TransitionErrorCallback;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	4a15      	ldr	r2, [pc, #84]	@ (8007f10 <TIM_ResetCallback+0xe8>)
 8007ebc:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 8007ec0:	bf00      	nop
 8007ec2:	370c      	adds	r7, #12
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eca:	4770      	bx	lr
 8007ecc:	08007161 	.word	0x08007161
 8007ed0:	08007175 	.word	0x08007175
 8007ed4:	080071ed 	.word	0x080071ed
 8007ed8:	08007201 	.word	0x08007201
 8007edc:	0800719d 	.word	0x0800719d
 8007ee0:	080071b1 	.word	0x080071b1
 8007ee4:	08007189 	.word	0x08007189
 8007ee8:	080071c5 	.word	0x080071c5
 8007eec:	080071d9 	.word	0x080071d9
 8007ef0:	08007215 	.word	0x08007215
 8007ef4:	08008169 	.word	0x08008169
 8007ef8:	0800817d 	.word	0x0800817d
 8007efc:	08008191 	.word	0x08008191
 8007f00:	080081a5 	.word	0x080081a5
 8007f04:	080081b9 	.word	0x080081b9
 8007f08:	080081cd 	.word	0x080081cd
 8007f0c:	080081e1 	.word	0x080081e1
 8007f10:	080081f5 	.word	0x080081f5

08007f14 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007f14:	b480      	push	{r7}
 8007f16:	b085      	sub	sp, #20
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	6078      	str	r0, [r7, #4]
 8007f1c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007f24:	2b01      	cmp	r3, #1
 8007f26:	d101      	bne.n	8007f2c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007f28:	2302      	movs	r3, #2
 8007f2a:	e074      	b.n	8008016 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	2201      	movs	r2, #1
 8007f30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	2202      	movs	r2, #2
 8007f38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	685b      	ldr	r3, [r3, #4]
 8007f42:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	689b      	ldr	r3, [r3, #8]
 8007f4a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	4a34      	ldr	r2, [pc, #208]	@ (8008024 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007f52:	4293      	cmp	r3, r2
 8007f54:	d009      	beq.n	8007f6a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	4a33      	ldr	r2, [pc, #204]	@ (8008028 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007f5c:	4293      	cmp	r3, r2
 8007f5e:	d004      	beq.n	8007f6a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	4a31      	ldr	r2, [pc, #196]	@ (800802c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007f66:	4293      	cmp	r3, r2
 8007f68:	d108      	bne.n	8007f7c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8007f70:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007f72:	683b      	ldr	r3, [r7, #0]
 8007f74:	685b      	ldr	r3, [r3, #4]
 8007f76:	68fa      	ldr	r2, [r7, #12]
 8007f78:	4313      	orrs	r3, r2
 8007f7a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8007f82:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007f86:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007f88:	683b      	ldr	r3, [r7, #0]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	68fa      	ldr	r2, [r7, #12]
 8007f8e:	4313      	orrs	r3, r2
 8007f90:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	68fa      	ldr	r2, [r7, #12]
 8007f98:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	4a21      	ldr	r2, [pc, #132]	@ (8008024 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007fa0:	4293      	cmp	r3, r2
 8007fa2:	d022      	beq.n	8007fea <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007fac:	d01d      	beq.n	8007fea <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	4a1f      	ldr	r2, [pc, #124]	@ (8008030 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8007fb4:	4293      	cmp	r3, r2
 8007fb6:	d018      	beq.n	8007fea <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	4a1d      	ldr	r2, [pc, #116]	@ (8008034 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8007fbe:	4293      	cmp	r3, r2
 8007fc0:	d013      	beq.n	8007fea <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	4a1c      	ldr	r2, [pc, #112]	@ (8008038 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8007fc8:	4293      	cmp	r3, r2
 8007fca:	d00e      	beq.n	8007fea <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	4a15      	ldr	r2, [pc, #84]	@ (8008028 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007fd2:	4293      	cmp	r3, r2
 8007fd4:	d009      	beq.n	8007fea <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	4a18      	ldr	r2, [pc, #96]	@ (800803c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8007fdc:	4293      	cmp	r3, r2
 8007fde:	d004      	beq.n	8007fea <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	4a11      	ldr	r2, [pc, #68]	@ (800802c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007fe6:	4293      	cmp	r3, r2
 8007fe8:	d10c      	bne.n	8008004 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007fea:	68bb      	ldr	r3, [r7, #8]
 8007fec:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007ff0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007ff2:	683b      	ldr	r3, [r7, #0]
 8007ff4:	689b      	ldr	r3, [r3, #8]
 8007ff6:	68ba      	ldr	r2, [r7, #8]
 8007ff8:	4313      	orrs	r3, r2
 8007ffa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	68ba      	ldr	r2, [r7, #8]
 8008002:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	2201      	movs	r2, #1
 8008008:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	2200      	movs	r2, #0
 8008010:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008014:	2300      	movs	r3, #0
}
 8008016:	4618      	mov	r0, r3
 8008018:	3714      	adds	r7, #20
 800801a:	46bd      	mov	sp, r7
 800801c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008020:	4770      	bx	lr
 8008022:	bf00      	nop
 8008024:	40012c00 	.word	0x40012c00
 8008028:	40013400 	.word	0x40013400
 800802c:	40015000 	.word	0x40015000
 8008030:	40000400 	.word	0x40000400
 8008034:	40000800 	.word	0x40000800
 8008038:	40000c00 	.word	0x40000c00
 800803c:	40014000 	.word	0x40014000

08008040 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008040:	b480      	push	{r7}
 8008042:	b085      	sub	sp, #20
 8008044:	af00      	add	r7, sp, #0
 8008046:	6078      	str	r0, [r7, #4]
 8008048:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800804a:	2300      	movs	r3, #0
 800804c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008054:	2b01      	cmp	r3, #1
 8008056:	d101      	bne.n	800805c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008058:	2302      	movs	r3, #2
 800805a:	e078      	b.n	800814e <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	2201      	movs	r2, #1
 8008060:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800806a:	683b      	ldr	r3, [r7, #0]
 800806c:	68db      	ldr	r3, [r3, #12]
 800806e:	4313      	orrs	r3, r2
 8008070:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008078:	683b      	ldr	r3, [r7, #0]
 800807a:	689b      	ldr	r3, [r3, #8]
 800807c:	4313      	orrs	r3, r2
 800807e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8008086:	683b      	ldr	r3, [r7, #0]
 8008088:	685b      	ldr	r3, [r3, #4]
 800808a:	4313      	orrs	r3, r2
 800808c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8008094:	683b      	ldr	r3, [r7, #0]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	4313      	orrs	r3, r2
 800809a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80080a2:	683b      	ldr	r3, [r7, #0]
 80080a4:	691b      	ldr	r3, [r3, #16]
 80080a6:	4313      	orrs	r3, r2
 80080a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80080b0:	683b      	ldr	r3, [r7, #0]
 80080b2:	695b      	ldr	r3, [r3, #20]
 80080b4:	4313      	orrs	r3, r2
 80080b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80080be:	683b      	ldr	r3, [r7, #0]
 80080c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80080c2:	4313      	orrs	r3, r2
 80080c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80080cc:	683b      	ldr	r3, [r7, #0]
 80080ce:	699b      	ldr	r3, [r3, #24]
 80080d0:	041b      	lsls	r3, r3, #16
 80080d2:	4313      	orrs	r3, r2
 80080d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80080dc:	683b      	ldr	r3, [r7, #0]
 80080de:	69db      	ldr	r3, [r3, #28]
 80080e0:	4313      	orrs	r3, r2
 80080e2:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	4a1c      	ldr	r2, [pc, #112]	@ (800815c <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 80080ea:	4293      	cmp	r3, r2
 80080ec:	d009      	beq.n	8008102 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	4a1b      	ldr	r2, [pc, #108]	@ (8008160 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 80080f4:	4293      	cmp	r3, r2
 80080f6:	d004      	beq.n	8008102 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	4a19      	ldr	r2, [pc, #100]	@ (8008164 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 80080fe:	4293      	cmp	r3, r2
 8008100:	d11c      	bne.n	800813c <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8008108:	683b      	ldr	r3, [r7, #0]
 800810a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800810c:	051b      	lsls	r3, r3, #20
 800810e:	4313      	orrs	r3, r2
 8008110:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8008118:	683b      	ldr	r3, [r7, #0]
 800811a:	6a1b      	ldr	r3, [r3, #32]
 800811c:	4313      	orrs	r3, r2
 800811e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8008126:	683b      	ldr	r3, [r7, #0]
 8008128:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800812a:	4313      	orrs	r3, r2
 800812c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8008134:	683b      	ldr	r3, [r7, #0]
 8008136:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008138:	4313      	orrs	r3, r2
 800813a:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	68fa      	ldr	r2, [r7, #12]
 8008142:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	2200      	movs	r2, #0
 8008148:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800814c:	2300      	movs	r3, #0
}
 800814e:	4618      	mov	r0, r3
 8008150:	3714      	adds	r7, #20
 8008152:	46bd      	mov	sp, r7
 8008154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008158:	4770      	bx	lr
 800815a:	bf00      	nop
 800815c:	40012c00 	.word	0x40012c00
 8008160:	40013400 	.word	0x40013400
 8008164:	40015000 	.word	0x40015000

08008168 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008168:	b480      	push	{r7}
 800816a:	b083      	sub	sp, #12
 800816c:	af00      	add	r7, sp, #0
 800816e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008170:	bf00      	nop
 8008172:	370c      	adds	r7, #12
 8008174:	46bd      	mov	sp, r7
 8008176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800817a:	4770      	bx	lr

0800817c <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800817c:	b480      	push	{r7}
 800817e:	b083      	sub	sp, #12
 8008180:	af00      	add	r7, sp, #0
 8008182:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 8008184:	bf00      	nop
 8008186:	370c      	adds	r7, #12
 8008188:	46bd      	mov	sp, r7
 800818a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800818e:	4770      	bx	lr

08008190 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008190:	b480      	push	{r7}
 8008192:	b083      	sub	sp, #12
 8008194:	af00      	add	r7, sp, #0
 8008196:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008198:	bf00      	nop
 800819a:	370c      	adds	r7, #12
 800819c:	46bd      	mov	sp, r7
 800819e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a2:	4770      	bx	lr

080081a4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80081a4:	b480      	push	{r7}
 80081a6:	b083      	sub	sp, #12
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80081ac:	bf00      	nop
 80081ae:	370c      	adds	r7, #12
 80081b0:	46bd      	mov	sp, r7
 80081b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b6:	4770      	bx	lr

080081b8 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80081b8:	b480      	push	{r7}
 80081ba:	b083      	sub	sp, #12
 80081bc:	af00      	add	r7, sp, #0
 80081be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80081c0:	bf00      	nop
 80081c2:	370c      	adds	r7, #12
 80081c4:	46bd      	mov	sp, r7
 80081c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ca:	4770      	bx	lr

080081cc <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80081cc:	b480      	push	{r7}
 80081ce:	b083      	sub	sp, #12
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80081d4:	bf00      	nop
 80081d6:	370c      	adds	r7, #12
 80081d8:	46bd      	mov	sp, r7
 80081da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081de:	4770      	bx	lr

080081e0 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80081e0:	b480      	push	{r7}
 80081e2:	b083      	sub	sp, #12
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80081e8:	bf00      	nop
 80081ea:	370c      	adds	r7, #12
 80081ec:	46bd      	mov	sp, r7
 80081ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f2:	4770      	bx	lr

080081f4 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80081f4:	b480      	push	{r7}
 80081f6:	b083      	sub	sp, #12
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80081fc:	bf00      	nop
 80081fe:	370c      	adds	r7, #12
 8008200:	46bd      	mov	sp, r7
 8008202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008206:	4770      	bx	lr

08008208 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008208:	b580      	push	{r7, lr}
 800820a:	b082      	sub	sp, #8
 800820c:	af00      	add	r7, sp, #0
 800820e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	2b00      	cmp	r3, #0
 8008214:	d101      	bne.n	800821a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008216:	2301      	movs	r3, #1
 8008218:	e050      	b.n	80082bc <HAL_UART_Init+0xb4>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008220:	2b00      	cmp	r3, #0
 8008222:	d114      	bne.n	800824e <HAL_UART_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	2200      	movs	r2, #0
 8008228:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 800822c:	6878      	ldr	r0, [r7, #4]
 800822e:	f000 fe37 	bl	8008ea0 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8008238:	2b00      	cmp	r3, #0
 800823a:	d103      	bne.n	8008244 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	4a21      	ldr	r2, [pc, #132]	@ (80082c4 <HAL_UART_Init+0xbc>)
 8008240:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800824a:	6878      	ldr	r0, [r7, #4]
 800824c:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	2224      	movs	r2, #36	@ 0x24
 8008252:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	681a      	ldr	r2, [r3, #0]
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	f022 0201 	bic.w	r2, r2, #1
 8008264:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800826a:	2b00      	cmp	r3, #0
 800826c:	d002      	beq.n	8008274 <HAL_UART_Init+0x6c>
  {
    UART_AdvFeatureConfig(huart);
 800826e:	6878      	ldr	r0, [r7, #4]
 8008270:	f001 f964 	bl	800953c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008274:	6878      	ldr	r0, [r7, #4]
 8008276:	f000 fe65 	bl	8008f44 <UART_SetConfig>
 800827a:	4603      	mov	r3, r0
 800827c:	2b01      	cmp	r3, #1
 800827e:	d101      	bne.n	8008284 <HAL_UART_Init+0x7c>
  {
    return HAL_ERROR;
 8008280:	2301      	movs	r3, #1
 8008282:	e01b      	b.n	80082bc <HAL_UART_Init+0xb4>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	685a      	ldr	r2, [r3, #4]
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008292:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	689a      	ldr	r2, [r3, #8]
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80082a2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	681a      	ldr	r2, [r3, #0]
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	f042 0201 	orr.w	r2, r2, #1
 80082b2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80082b4:	6878      	ldr	r0, [r7, #4]
 80082b6:	f001 f9e3 	bl	8009680 <UART_CheckIdleState>
 80082ba:	4603      	mov	r3, r0
}
 80082bc:	4618      	mov	r0, r3
 80082be:	3708      	adds	r7, #8
 80082c0:	46bd      	mov	sp, r7
 80082c2:	bd80      	pop	{r7, pc}
 80082c4:	080026d5 	.word	0x080026d5

080082c8 <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 80082c8:	b480      	push	{r7}
 80082ca:	b087      	sub	sp, #28
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	60f8      	str	r0, [r7, #12]
 80082d0:	460b      	mov	r3, r1
 80082d2:	607a      	str	r2, [r7, #4]
 80082d4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80082d6:	2300      	movs	r3, #0
 80082d8:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d109      	bne.n	80082f4 <HAL_UART_RegisterCallback+0x2c>
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80082e6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    return HAL_ERROR;
 80082f0:	2301      	movs	r3, #1
 80082f2:	e09c      	b.n	800842e <HAL_UART_RegisterCallback+0x166>
  }

  if (huart->gState == HAL_UART_STATE_READY)
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80082fa:	2b20      	cmp	r3, #32
 80082fc:	d16c      	bne.n	80083d8 <HAL_UART_RegisterCallback+0x110>
  {
    switch (CallbackID)
 80082fe:	7afb      	ldrb	r3, [r7, #11]
 8008300:	2b0c      	cmp	r3, #12
 8008302:	d85e      	bhi.n	80083c2 <HAL_UART_RegisterCallback+0xfa>
 8008304:	a201      	add	r2, pc, #4	@ (adr r2, 800830c <HAL_UART_RegisterCallback+0x44>)
 8008306:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800830a:	bf00      	nop
 800830c:	08008341 	.word	0x08008341
 8008310:	0800834b 	.word	0x0800834b
 8008314:	08008355 	.word	0x08008355
 8008318:	0800835f 	.word	0x0800835f
 800831c:	08008369 	.word	0x08008369
 8008320:	08008373 	.word	0x08008373
 8008324:	0800837d 	.word	0x0800837d
 8008328:	08008387 	.word	0x08008387
 800832c:	08008391 	.word	0x08008391
 8008330:	0800839b 	.word	0x0800839b
 8008334:	080083a5 	.word	0x080083a5
 8008338:	080083af 	.word	0x080083af
 800833c:	080083b9 	.word	0x080083b9
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	687a      	ldr	r2, [r7, #4]
 8008344:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 8008348:	e070      	b.n	800842c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	687a      	ldr	r2, [r7, #4]
 800834e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 8008352:	e06b      	b.n	800842c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	687a      	ldr	r2, [r7, #4]
 8008358:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 800835c:	e066      	b.n	800842c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	687a      	ldr	r2, [r7, #4]
 8008362:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 8008366:	e061      	b.n	800842c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	687a      	ldr	r2, [r7, #4]
 800836c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 8008370:	e05c      	b.n	800842c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	687a      	ldr	r2, [r7, #4]
 8008376:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 800837a:	e057      	b.n	800842c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	687a      	ldr	r2, [r7, #4]
 8008380:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 8008384:	e052      	b.n	800842c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	687a      	ldr	r2, [r7, #4]
 800838a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 800838e:	e04d      	b.n	800842c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_WAKEUP_CB_ID :
        huart->WakeupCallback = pCallback;
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	687a      	ldr	r2, [r7, #4]
 8008394:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 8008398:	e048      	b.n	800842c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_FIFO_FULL_CB_ID :
        huart->RxFifoFullCallback = pCallback;
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	687a      	ldr	r2, [r7, #4]
 800839e:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 80083a2:	e043      	b.n	800842c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_FIFO_EMPTY_CB_ID :
        huart->TxFifoEmptyCallback = pCallback;
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	687a      	ldr	r2, [r7, #4]
 80083a8:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 80083ac:	e03e      	b.n	800842c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	687a      	ldr	r2, [r7, #4]
 80083b2:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 80083b6:	e039      	b.n	800842c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	687a      	ldr	r2, [r7, #4]
 80083bc:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 80083c0:	e034      	b.n	800842c <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80083c8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 80083d2:	2301      	movs	r3, #1
 80083d4:	75fb      	strb	r3, [r7, #23]
        break;
 80083d6:	e029      	b.n	800842c <HAL_UART_RegisterCallback+0x164>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d11a      	bne.n	8008418 <HAL_UART_RegisterCallback+0x150>
  {
    switch (CallbackID)
 80083e2:	7afb      	ldrb	r3, [r7, #11]
 80083e4:	2b0b      	cmp	r3, #11
 80083e6:	d002      	beq.n	80083ee <HAL_UART_RegisterCallback+0x126>
 80083e8:	2b0c      	cmp	r3, #12
 80083ea:	d005      	beq.n	80083f8 <HAL_UART_RegisterCallback+0x130>
 80083ec:	e009      	b.n	8008402 <HAL_UART_RegisterCallback+0x13a>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	687a      	ldr	r2, [r7, #4]
 80083f2:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 80083f6:	e019      	b.n	800842c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	687a      	ldr	r2, [r7, #4]
 80083fc:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 8008400:	e014      	b.n	800842c <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008408:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 8008412:	2301      	movs	r3, #1
 8008414:	75fb      	strb	r3, [r7, #23]
        break;
 8008416:	e009      	b.n	800842c <HAL_UART_RegisterCallback+0x164>
    }
  }
  else
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800841e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    status =  HAL_ERROR;
 8008428:	2301      	movs	r3, #1
 800842a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800842c:	7dfb      	ldrb	r3, [r7, #23]
}
 800842e:	4618      	mov	r0, r3
 8008430:	371c      	adds	r7, #28
 8008432:	46bd      	mov	sp, r7
 8008434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008438:	4770      	bx	lr
 800843a:	bf00      	nop

0800843c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800843c:	b580      	push	{r7, lr}
 800843e:	b08a      	sub	sp, #40	@ 0x28
 8008440:	af00      	add	r7, sp, #0
 8008442:	60f8      	str	r0, [r7, #12]
 8008444:	60b9      	str	r1, [r7, #8]
 8008446:	4613      	mov	r3, r2
 8008448:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008450:	2b20      	cmp	r3, #32
 8008452:	d137      	bne.n	80084c4 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8008454:	68bb      	ldr	r3, [r7, #8]
 8008456:	2b00      	cmp	r3, #0
 8008458:	d002      	beq.n	8008460 <HAL_UART_Receive_IT+0x24>
 800845a:	88fb      	ldrh	r3, [r7, #6]
 800845c:	2b00      	cmp	r3, #0
 800845e:	d101      	bne.n	8008464 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8008460:	2301      	movs	r3, #1
 8008462:	e030      	b.n	80084c6 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	2200      	movs	r2, #0
 8008468:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	4a18      	ldr	r2, [pc, #96]	@ (80084d0 <HAL_UART_Receive_IT+0x94>)
 8008470:	4293      	cmp	r3, r2
 8008472:	d01f      	beq.n	80084b4 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	685b      	ldr	r3, [r3, #4]
 800847a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800847e:	2b00      	cmp	r3, #0
 8008480:	d018      	beq.n	80084b4 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008488:	697b      	ldr	r3, [r7, #20]
 800848a:	e853 3f00 	ldrex	r3, [r3]
 800848e:	613b      	str	r3, [r7, #16]
   return(result);
 8008490:	693b      	ldr	r3, [r7, #16]
 8008492:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008496:	627b      	str	r3, [r7, #36]	@ 0x24
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	461a      	mov	r2, r3
 800849e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084a0:	623b      	str	r3, [r7, #32]
 80084a2:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084a4:	69f9      	ldr	r1, [r7, #28]
 80084a6:	6a3a      	ldr	r2, [r7, #32]
 80084a8:	e841 2300 	strex	r3, r2, [r1]
 80084ac:	61bb      	str	r3, [r7, #24]
   return(result);
 80084ae:	69bb      	ldr	r3, [r7, #24]
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d1e6      	bne.n	8008482 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80084b4:	88fb      	ldrh	r3, [r7, #6]
 80084b6:	461a      	mov	r2, r3
 80084b8:	68b9      	ldr	r1, [r7, #8]
 80084ba:	68f8      	ldr	r0, [r7, #12]
 80084bc:	f001 f9f8 	bl	80098b0 <UART_Start_Receive_IT>
 80084c0:	4603      	mov	r3, r0
 80084c2:	e000      	b.n	80084c6 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80084c4:	2302      	movs	r3, #2
  }
}
 80084c6:	4618      	mov	r0, r3
 80084c8:	3728      	adds	r7, #40	@ 0x28
 80084ca:	46bd      	mov	sp, r7
 80084cc:	bd80      	pop	{r7, pc}
 80084ce:	bf00      	nop
 80084d0:	40008000 	.word	0x40008000

080084d4 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80084d4:	b580      	push	{r7, lr}
 80084d6:	b08a      	sub	sp, #40	@ 0x28
 80084d8:	af00      	add	r7, sp, #0
 80084da:	60f8      	str	r0, [r7, #12]
 80084dc:	60b9      	str	r1, [r7, #8]
 80084de:	4613      	mov	r3, r2
 80084e0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80084e8:	2b20      	cmp	r3, #32
 80084ea:	d167      	bne.n	80085bc <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 80084ec:	68bb      	ldr	r3, [r7, #8]
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d002      	beq.n	80084f8 <HAL_UART_Transmit_DMA+0x24>
 80084f2:	88fb      	ldrh	r3, [r7, #6]
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d101      	bne.n	80084fc <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 80084f8:	2301      	movs	r3, #1
 80084fa:	e060      	b.n	80085be <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	68ba      	ldr	r2, [r7, #8]
 8008500:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	88fa      	ldrh	r2, [r7, #6]
 8008506:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	88fa      	ldrh	r2, [r7, #6]
 800850e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	2200      	movs	r2, #0
 8008516:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	2221      	movs	r2, #33	@ 0x21
 800851e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008526:	2b00      	cmp	r3, #0
 8008528:	d028      	beq.n	800857c <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800852e:	4a26      	ldr	r2, [pc, #152]	@ (80085c8 <HAL_UART_Transmit_DMA+0xf4>)
 8008530:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008536:	4a25      	ldr	r2, [pc, #148]	@ (80085cc <HAL_UART_Transmit_DMA+0xf8>)
 8008538:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800853e:	4a24      	ldr	r2, [pc, #144]	@ (80085d0 <HAL_UART_Transmit_DMA+0xfc>)
 8008540:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008546:	2200      	movs	r2, #0
 8008548:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008552:	4619      	mov	r1, r3
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	3328      	adds	r3, #40	@ 0x28
 800855a:	461a      	mov	r2, r3
 800855c:	88fb      	ldrh	r3, [r7, #6]
 800855e:	f7fb fd4b 	bl	8003ff8 <HAL_DMA_Start_IT>
 8008562:	4603      	mov	r3, r0
 8008564:	2b00      	cmp	r3, #0
 8008566:	d009      	beq.n	800857c <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	2210      	movs	r2, #16
 800856c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	2220      	movs	r2, #32
 8008574:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 8008578:	2301      	movs	r3, #1
 800857a:	e020      	b.n	80085be <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	2240      	movs	r2, #64	@ 0x40
 8008582:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	3308      	adds	r3, #8
 800858a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800858c:	697b      	ldr	r3, [r7, #20]
 800858e:	e853 3f00 	ldrex	r3, [r3]
 8008592:	613b      	str	r3, [r7, #16]
   return(result);
 8008594:	693b      	ldr	r3, [r7, #16]
 8008596:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800859a:	627b      	str	r3, [r7, #36]	@ 0x24
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	3308      	adds	r3, #8
 80085a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80085a4:	623a      	str	r2, [r7, #32]
 80085a6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085a8:	69f9      	ldr	r1, [r7, #28]
 80085aa:	6a3a      	ldr	r2, [r7, #32]
 80085ac:	e841 2300 	strex	r3, r2, [r1]
 80085b0:	61bb      	str	r3, [r7, #24]
   return(result);
 80085b2:	69bb      	ldr	r3, [r7, #24]
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d1e5      	bne.n	8008584 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 80085b8:	2300      	movs	r3, #0
 80085ba:	e000      	b.n	80085be <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 80085bc:	2302      	movs	r3, #2
  }
}
 80085be:	4618      	mov	r0, r3
 80085c0:	3728      	adds	r7, #40	@ 0x28
 80085c2:	46bd      	mov	sp, r7
 80085c4:	bd80      	pop	{r7, pc}
 80085c6:	bf00      	nop
 80085c8:	08009c43 	.word	0x08009c43
 80085cc:	08009ce1 	.word	0x08009ce1
 80085d0:	08009d01 	.word	0x08009d01

080085d4 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 80085d4:	b580      	push	{r7, lr}
 80085d6:	b09a      	sub	sp, #104	@ 0x68
 80085d8:	af00      	add	r7, sp, #0
 80085da:	6078      	str	r0, [r7, #4]
  /* Disable PEIE, EIE, RXNEIE and RXFTIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085e2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80085e4:	e853 3f00 	ldrex	r3, [r3]
 80085e8:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80085ea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80085ec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80085f0:	667b      	str	r3, [r7, #100]	@ 0x64
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	461a      	mov	r2, r3
 80085f8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80085fa:	657b      	str	r3, [r7, #84]	@ 0x54
 80085fc:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085fe:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008600:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008602:	e841 2300 	strex	r3, r2, [r1]
 8008606:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8008608:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800860a:	2b00      	cmp	r3, #0
 800860c:	d1e6      	bne.n	80085dc <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE);
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	3308      	adds	r3, #8
 8008614:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008616:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008618:	e853 3f00 	ldrex	r3, [r3]
 800861c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800861e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008620:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008624:	f023 0301 	bic.w	r3, r3, #1
 8008628:	663b      	str	r3, [r7, #96]	@ 0x60
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	3308      	adds	r3, #8
 8008630:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8008632:	643a      	str	r2, [r7, #64]	@ 0x40
 8008634:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008636:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008638:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800863a:	e841 2300 	strex	r3, r2, [r1]
 800863e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008640:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008642:	2b00      	cmp	r3, #0
 8008644:	d1e3      	bne.n	800860e <HAL_UART_AbortReceive+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800864a:	2b01      	cmp	r3, #1
 800864c:	d118      	bne.n	8008680 <HAL_UART_AbortReceive+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008654:	6a3b      	ldr	r3, [r7, #32]
 8008656:	e853 3f00 	ldrex	r3, [r3]
 800865a:	61fb      	str	r3, [r7, #28]
   return(result);
 800865c:	69fb      	ldr	r3, [r7, #28]
 800865e:	f023 0310 	bic.w	r3, r3, #16
 8008662:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	461a      	mov	r2, r3
 800866a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800866c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800866e:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008670:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008672:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008674:	e841 2300 	strex	r3, r2, [r1]
 8008678:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800867a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800867c:	2b00      	cmp	r3, #0
 800867e:	d1e6      	bne.n	800864e <HAL_UART_AbortReceive+0x7a>
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	689b      	ldr	r3, [r3, #8]
 8008686:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800868a:	2b40      	cmp	r3, #64	@ 0x40
 800868c:	d13b      	bne.n	8008706 <HAL_UART_AbortReceive+0x132>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	3308      	adds	r3, #8
 8008694:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	e853 3f00 	ldrex	r3, [r3]
 800869c:	60bb      	str	r3, [r7, #8]
   return(result);
 800869e:	68bb      	ldr	r3, [r7, #8]
 80086a0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80086a4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	3308      	adds	r3, #8
 80086ac:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80086ae:	61ba      	str	r2, [r7, #24]
 80086b0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086b2:	6979      	ldr	r1, [r7, #20]
 80086b4:	69ba      	ldr	r2, [r7, #24]
 80086b6:	e841 2300 	strex	r3, r2, [r1]
 80086ba:	613b      	str	r3, [r7, #16]
   return(result);
 80086bc:	693b      	ldr	r3, [r7, #16]
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d1e5      	bne.n	800868e <HAL_UART_AbortReceive+0xba>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d01c      	beq.n	8008706 <HAL_UART_AbortReceive+0x132>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80086d2:	2200      	movs	r2, #0
 80086d4:	639a      	str	r2, [r3, #56]	@ 0x38

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80086dc:	4618      	mov	r0, r3
 80086de:	f7fb fd06 	bl	80040ee <HAL_DMA_Abort>
 80086e2:	4603      	mov	r3, r0
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d00e      	beq.n	8008706 <HAL_UART_AbortReceive+0x132>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80086ee:	4618      	mov	r0, r3
 80086f0:	f7fb fe6c 	bl	80043cc <HAL_DMA_GetError>
 80086f4:	4603      	mov	r3, r0
 80086f6:	2b20      	cmp	r3, #32
 80086f8:	d105      	bne.n	8008706 <HAL_UART_AbortReceive+0x132>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	2210      	movs	r2, #16
 80086fe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 8008702:	2303      	movs	r3, #3
 8008704:	e017      	b.n	8008736 <HAL_UART_AbortReceive+0x162>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0U;
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	2200      	movs	r2, #0
 800870a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	220f      	movs	r2, #15
 8008714:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	699a      	ldr	r2, [r3, #24]
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	f042 0208 	orr.w	r2, r2, #8
 8008724:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	2220      	movs	r2, #32
 800872a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	2200      	movs	r2, #0
 8008732:	66da      	str	r2, [r3, #108]	@ 0x6c

  return HAL_OK;
 8008734:	2300      	movs	r3, #0
}
 8008736:	4618      	mov	r0, r3
 8008738:	3768      	adds	r7, #104	@ 0x68
 800873a:	46bd      	mov	sp, r7
 800873c:	bd80      	pop	{r7, pc}
	...

08008740 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008740:	b580      	push	{r7, lr}
 8008742:	b0ba      	sub	sp, #232	@ 0xe8
 8008744:	af00      	add	r7, sp, #0
 8008746:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	69db      	ldr	r3, [r3, #28]
 800874e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	689b      	ldr	r3, [r3, #8]
 8008762:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008766:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800876a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800876e:	4013      	ands	r3, r2
 8008770:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8008774:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008778:	2b00      	cmp	r3, #0
 800877a:	d11b      	bne.n	80087b4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800877c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008780:	f003 0320 	and.w	r3, r3, #32
 8008784:	2b00      	cmp	r3, #0
 8008786:	d015      	beq.n	80087b4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008788:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800878c:	f003 0320 	and.w	r3, r3, #32
 8008790:	2b00      	cmp	r3, #0
 8008792:	d105      	bne.n	80087a0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008794:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008798:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800879c:	2b00      	cmp	r3, #0
 800879e:	d009      	beq.n	80087b4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	f000 8312 	beq.w	8008dce <HAL_UART_IRQHandler+0x68e>
      {
        huart->RxISR(huart);
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80087ae:	6878      	ldr	r0, [r7, #4]
 80087b0:	4798      	blx	r3
      }
      return;
 80087b2:	e30c      	b.n	8008dce <HAL_UART_IRQHandler+0x68e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80087b4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	f000 8129 	beq.w	8008a10 <HAL_UART_IRQHandler+0x2d0>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80087be:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80087c2:	4b90      	ldr	r3, [pc, #576]	@ (8008a04 <HAL_UART_IRQHandler+0x2c4>)
 80087c4:	4013      	ands	r3, r2
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d106      	bne.n	80087d8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80087ca:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80087ce:	4b8e      	ldr	r3, [pc, #568]	@ (8008a08 <HAL_UART_IRQHandler+0x2c8>)
 80087d0:	4013      	ands	r3, r2
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	f000 811c 	beq.w	8008a10 <HAL_UART_IRQHandler+0x2d0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80087d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80087dc:	f003 0301 	and.w	r3, r3, #1
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d011      	beq.n	8008808 <HAL_UART_IRQHandler+0xc8>
 80087e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80087e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d00b      	beq.n	8008808 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	2201      	movs	r2, #1
 80087f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80087fe:	f043 0201 	orr.w	r2, r3, #1
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008808:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800880c:	f003 0302 	and.w	r3, r3, #2
 8008810:	2b00      	cmp	r3, #0
 8008812:	d011      	beq.n	8008838 <HAL_UART_IRQHandler+0xf8>
 8008814:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008818:	f003 0301 	and.w	r3, r3, #1
 800881c:	2b00      	cmp	r3, #0
 800881e:	d00b      	beq.n	8008838 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	2202      	movs	r2, #2
 8008826:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800882e:	f043 0204 	orr.w	r2, r3, #4
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008838:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800883c:	f003 0304 	and.w	r3, r3, #4
 8008840:	2b00      	cmp	r3, #0
 8008842:	d011      	beq.n	8008868 <HAL_UART_IRQHandler+0x128>
 8008844:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008848:	f003 0301 	and.w	r3, r3, #1
 800884c:	2b00      	cmp	r3, #0
 800884e:	d00b      	beq.n	8008868 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	2204      	movs	r2, #4
 8008856:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800885e:	f043 0202 	orr.w	r2, r3, #2
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008868:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800886c:	f003 0308 	and.w	r3, r3, #8
 8008870:	2b00      	cmp	r3, #0
 8008872:	d017      	beq.n	80088a4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008874:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008878:	f003 0320 	and.w	r3, r3, #32
 800887c:	2b00      	cmp	r3, #0
 800887e:	d105      	bne.n	800888c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008880:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8008884:	4b5f      	ldr	r3, [pc, #380]	@ (8008a04 <HAL_UART_IRQHandler+0x2c4>)
 8008886:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008888:	2b00      	cmp	r3, #0
 800888a:	d00b      	beq.n	80088a4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	2208      	movs	r2, #8
 8008892:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800889a:	f043 0208 	orr.w	r2, r3, #8
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80088a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80088a8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d012      	beq.n	80088d6 <HAL_UART_IRQHandler+0x196>
 80088b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80088b4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d00c      	beq.n	80088d6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80088c4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80088cc:	f043 0220 	orr.w	r2, r3, #32
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80088dc:	2b00      	cmp	r3, #0
 80088de:	f000 8278 	beq.w	8008dd2 <HAL_UART_IRQHandler+0x692>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80088e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80088e6:	f003 0320 	and.w	r3, r3, #32
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d013      	beq.n	8008916 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80088ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80088f2:	f003 0320 	and.w	r3, r3, #32
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d105      	bne.n	8008906 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80088fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80088fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008902:	2b00      	cmp	r3, #0
 8008904:	d007      	beq.n	8008916 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800890a:	2b00      	cmp	r3, #0
 800890c:	d003      	beq.n	8008916 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008912:	6878      	ldr	r0, [r7, #4]
 8008914:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800891c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	689b      	ldr	r3, [r3, #8]
 8008926:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800892a:	2b40      	cmp	r3, #64	@ 0x40
 800892c:	d005      	beq.n	800893a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800892e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008932:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008936:	2b00      	cmp	r3, #0
 8008938:	d058      	beq.n	80089ec <HAL_UART_IRQHandler+0x2ac>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800893a:	6878      	ldr	r0, [r7, #4]
 800893c:	f001 f91b 	bl	8009b76 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	689b      	ldr	r3, [r3, #8]
 8008946:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800894a:	2b40      	cmp	r3, #64	@ 0x40
 800894c:	d148      	bne.n	80089e0 <HAL_UART_IRQHandler+0x2a0>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	3308      	adds	r3, #8
 8008954:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008958:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800895c:	e853 3f00 	ldrex	r3, [r3]
 8008960:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008964:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008968:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800896c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	3308      	adds	r3, #8
 8008976:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800897a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800897e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008982:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008986:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800898a:	e841 2300 	strex	r3, r2, [r1]
 800898e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008992:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008996:	2b00      	cmp	r3, #0
 8008998:	d1d9      	bne.n	800894e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d017      	beq.n	80089d4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80089aa:	4a18      	ldr	r2, [pc, #96]	@ (8008a0c <HAL_UART_IRQHandler+0x2cc>)
 80089ac:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80089b4:	4618      	mov	r0, r3
 80089b6:	f7fb fbf3 	bl	80041a0 <HAL_DMA_Abort_IT>
 80089ba:	4603      	mov	r3, r0
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d01f      	beq.n	8008a00 <HAL_UART_IRQHandler+0x2c0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80089c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089c8:	687a      	ldr	r2, [r7, #4]
 80089ca:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80089ce:	4610      	mov	r0, r2
 80089d0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80089d2:	e015      	b.n	8008a00 <HAL_UART_IRQHandler+0x2c0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80089da:	6878      	ldr	r0, [r7, #4]
 80089dc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80089de:	e00f      	b.n	8008a00 <HAL_UART_IRQHandler+0x2c0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80089e6:	6878      	ldr	r0, [r7, #4]
 80089e8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80089ea:	e009      	b.n	8008a00 <HAL_UART_IRQHandler+0x2c0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80089f2:	6878      	ldr	r0, [r7, #4]
 80089f4:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	2200      	movs	r2, #0
 80089fa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80089fe:	e1e8      	b.n	8008dd2 <HAL_UART_IRQHandler+0x692>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a00:	bf00      	nop
    return;
 8008a02:	e1e6      	b.n	8008dd2 <HAL_UART_IRQHandler+0x692>
 8008a04:	10000001 	.word	0x10000001
 8008a08:	04000120 	.word	0x04000120
 8008a0c:	08009d85 	.word	0x08009d85

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008a14:	2b01      	cmp	r3, #1
 8008a16:	f040 8176 	bne.w	8008d06 <HAL_UART_IRQHandler+0x5c6>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008a1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008a1e:	f003 0310 	and.w	r3, r3, #16
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	f000 816f 	beq.w	8008d06 <HAL_UART_IRQHandler+0x5c6>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008a28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008a2c:	f003 0310 	and.w	r3, r3, #16
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	f000 8168 	beq.w	8008d06 <HAL_UART_IRQHandler+0x5c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	2210      	movs	r2, #16
 8008a3c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	689b      	ldr	r3, [r3, #8]
 8008a44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a48:	2b40      	cmp	r3, #64	@ 0x40
 8008a4a:	f040 80dc 	bne.w	8008c06 <HAL_UART_IRQHandler+0x4c6>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	685b      	ldr	r3, [r3, #4]
 8008a58:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008a5c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	f000 80b1 	beq.w	8008bc8 <HAL_UART_IRQHandler+0x488>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008a6c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008a70:	429a      	cmp	r2, r3
 8008a72:	f080 80a9 	bcs.w	8008bc8 <HAL_UART_IRQHandler+0x488>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008a7c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	f003 0320 	and.w	r3, r3, #32
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	f040 8087 	bne.w	8008ba2 <HAL_UART_IRQHandler+0x462>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a9c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008aa0:	e853 3f00 	ldrex	r3, [r3]
 8008aa4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008aa8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008aac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008ab0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	461a      	mov	r2, r3
 8008aba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008abe:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008ac2:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ac6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8008aca:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008ace:	e841 2300 	strex	r3, r2, [r1]
 8008ad2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8008ad6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d1da      	bne.n	8008a94 <HAL_UART_IRQHandler+0x354>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	3308      	adds	r3, #8
 8008ae4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ae6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008ae8:	e853 3f00 	ldrex	r3, [r3]
 8008aec:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008aee:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008af0:	f023 0301 	bic.w	r3, r3, #1
 8008af4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	3308      	adds	r3, #8
 8008afe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008b02:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8008b06:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b08:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008b0a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008b0e:	e841 2300 	strex	r3, r2, [r1]
 8008b12:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008b14:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d1e1      	bne.n	8008ade <HAL_UART_IRQHandler+0x39e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	3308      	adds	r3, #8
 8008b20:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b22:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008b24:	e853 3f00 	ldrex	r3, [r3]
 8008b28:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008b2a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008b2c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008b30:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	3308      	adds	r3, #8
 8008b3a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008b3e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008b40:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b42:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008b44:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008b46:	e841 2300 	strex	r3, r2, [r1]
 8008b4a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008b4c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d1e3      	bne.n	8008b1a <HAL_UART_IRQHandler+0x3da>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	2220      	movs	r2, #32
 8008b56:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	2200      	movs	r2, #0
 8008b5e:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b66:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008b68:	e853 3f00 	ldrex	r3, [r3]
 8008b6c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008b6e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008b70:	f023 0310 	bic.w	r3, r3, #16
 8008b74:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	461a      	mov	r2, r3
 8008b7e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008b82:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008b84:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b86:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008b88:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008b8a:	e841 2300 	strex	r3, r2, [r1]
 8008b8e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008b90:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d1e4      	bne.n	8008b60 <HAL_UART_IRQHandler+0x420>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008b9c:	4618      	mov	r0, r3
 8008b9e:	f7fb faa6 	bl	80040ee <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	2202      	movs	r2, #2
 8008ba6:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8008bae:	687a      	ldr	r2, [r7, #4]
 8008bb0:	f8b2 105c 	ldrh.w	r1, [r2, #92]	@ 0x5c
 8008bb4:	687a      	ldr	r2, [r7, #4]
 8008bb6:	f8b2 205e 	ldrh.w	r2, [r2, #94]	@ 0x5e
 8008bba:	b292      	uxth	r2, r2
 8008bbc:	1a8a      	subs	r2, r1, r2
 8008bbe:	b292      	uxth	r2, r2
 8008bc0:	4611      	mov	r1, r2
 8008bc2:	6878      	ldr	r0, [r7, #4]
 8008bc4:	4798      	blx	r3
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8008bc6:	e106      	b.n	8008dd6 <HAL_UART_IRQHandler+0x696>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008bce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008bd2:	429a      	cmp	r2, r3
 8008bd4:	f040 80ff 	bne.w	8008dd6 <HAL_UART_IRQHandler+0x696>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	f003 0320 	and.w	r3, r3, #32
 8008be6:	2b20      	cmp	r3, #32
 8008be8:	f040 80f5 	bne.w	8008dd6 <HAL_UART_IRQHandler+0x696>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	2202      	movs	r2, #2
 8008bf0:	671a      	str	r2, [r3, #112]	@ 0x70
            huart->RxEventCallback(huart, huart->RxXferSize);
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8008bf8:	687a      	ldr	r2, [r7, #4]
 8008bfa:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 8008bfe:	4611      	mov	r1, r2
 8008c00:	6878      	ldr	r0, [r7, #4]
 8008c02:	4798      	blx	r3
      return;
 8008c04:	e0e7      	b.n	8008dd6 <HAL_UART_IRQHandler+0x696>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008c12:	b29b      	uxth	r3, r3
 8008c14:	1ad3      	subs	r3, r2, r3
 8008c16:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008c20:	b29b      	uxth	r3, r3
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	f000 80d9 	beq.w	8008dda <HAL_UART_IRQHandler+0x69a>
          && (nb_rx_data > 0U))
 8008c28:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	f000 80d4 	beq.w	8008dda <HAL_UART_IRQHandler+0x69a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c3a:	e853 3f00 	ldrex	r3, [r3]
 8008c3e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008c40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c42:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008c46:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	461a      	mov	r2, r3
 8008c50:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008c54:	647b      	str	r3, [r7, #68]	@ 0x44
 8008c56:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c58:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008c5a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008c5c:	e841 2300 	strex	r3, r2, [r1]
 8008c60:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008c62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d1e4      	bne.n	8008c32 <HAL_UART_IRQHandler+0x4f2>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	3308      	adds	r3, #8
 8008c6e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c72:	e853 3f00 	ldrex	r3, [r3]
 8008c76:	623b      	str	r3, [r7, #32]
   return(result);
 8008c78:	6a3b      	ldr	r3, [r7, #32]
 8008c7a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008c7e:	f023 0301 	bic.w	r3, r3, #1
 8008c82:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	3308      	adds	r3, #8
 8008c8c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8008c90:	633a      	str	r2, [r7, #48]	@ 0x30
 8008c92:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c94:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008c96:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008c98:	e841 2300 	strex	r3, r2, [r1]
 8008c9c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008c9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d1e1      	bne.n	8008c68 <HAL_UART_IRQHandler+0x528>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	2220      	movs	r2, #32
 8008ca8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	2200      	movs	r2, #0
 8008cb0:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	2200      	movs	r2, #0
 8008cb6:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cbe:	693b      	ldr	r3, [r7, #16]
 8008cc0:	e853 3f00 	ldrex	r3, [r3]
 8008cc4:	60fb      	str	r3, [r7, #12]
   return(result);
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	f023 0310 	bic.w	r3, r3, #16
 8008ccc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	461a      	mov	r2, r3
 8008cd6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8008cda:	61fb      	str	r3, [r7, #28]
 8008cdc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cde:	69b9      	ldr	r1, [r7, #24]
 8008ce0:	69fa      	ldr	r2, [r7, #28]
 8008ce2:	e841 2300 	strex	r3, r2, [r1]
 8008ce6:	617b      	str	r3, [r7, #20]
   return(result);
 8008ce8:	697b      	ldr	r3, [r7, #20]
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d1e4      	bne.n	8008cb8 <HAL_UART_IRQHandler+0x578>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	2202      	movs	r2, #2
 8008cf2:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8008cfa:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	@ 0xce
 8008cfe:	4611      	mov	r1, r2
 8008d00:	6878      	ldr	r0, [r7, #4]
 8008d02:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008d04:	e069      	b.n	8008dda <HAL_UART_IRQHandler+0x69a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008d06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008d0a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d010      	beq.n	8008d34 <HAL_UART_IRQHandler+0x5f4>
 8008d12:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008d16:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d00a      	beq.n	8008d34 <HAL_UART_IRQHandler+0x5f4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8008d26:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008d2e:	6878      	ldr	r0, [r7, #4]
 8008d30:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008d32:	e055      	b.n	8008de0 <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008d34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008d38:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d014      	beq.n	8008d6a <HAL_UART_IRQHandler+0x62a>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008d40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008d44:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d105      	bne.n	8008d58 <HAL_UART_IRQHandler+0x618>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008d4c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008d50:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d008      	beq.n	8008d6a <HAL_UART_IRQHandler+0x62a>
  {
    if (huart->TxISR != NULL)
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d03e      	beq.n	8008dde <HAL_UART_IRQHandler+0x69e>
    {
      huart->TxISR(huart);
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008d64:	6878      	ldr	r0, [r7, #4]
 8008d66:	4798      	blx	r3
    }
    return;
 8008d68:	e039      	b.n	8008dde <HAL_UART_IRQHandler+0x69e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008d6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008d6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d009      	beq.n	8008d8a <HAL_UART_IRQHandler+0x64a>
 8008d76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008d7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d003      	beq.n	8008d8a <HAL_UART_IRQHandler+0x64a>
  {
    UART_EndTransmit_IT(huart);
 8008d82:	6878      	ldr	r0, [r7, #4]
 8008d84:	f001 f812 	bl	8009dac <UART_EndTransmit_IT>
    return;
 8008d88:	e02a      	b.n	8008de0 <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008d8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008d8e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d00b      	beq.n	8008dae <HAL_UART_IRQHandler+0x66e>
 8008d96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008d9a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d005      	beq.n	8008dae <HAL_UART_IRQHandler+0x66e>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8008da8:	6878      	ldr	r0, [r7, #4]
 8008daa:	4798      	blx	r3
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008dac:	e018      	b.n	8008de0 <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008dae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008db2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d012      	beq.n	8008de0 <HAL_UART_IRQHandler+0x6a0>
 8008dba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	da0e      	bge.n	8008de0 <HAL_UART_IRQHandler+0x6a0>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8008dc8:	6878      	ldr	r0, [r7, #4]
 8008dca:	4798      	blx	r3
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008dcc:	e008      	b.n	8008de0 <HAL_UART_IRQHandler+0x6a0>
      return;
 8008dce:	bf00      	nop
 8008dd0:	e006      	b.n	8008de0 <HAL_UART_IRQHandler+0x6a0>
    return;
 8008dd2:	bf00      	nop
 8008dd4:	e004      	b.n	8008de0 <HAL_UART_IRQHandler+0x6a0>
      return;
 8008dd6:	bf00      	nop
 8008dd8:	e002      	b.n	8008de0 <HAL_UART_IRQHandler+0x6a0>
      return;
 8008dda:	bf00      	nop
 8008ddc:	e000      	b.n	8008de0 <HAL_UART_IRQHandler+0x6a0>
    return;
 8008dde:	bf00      	nop
  }
}
 8008de0:	37e8      	adds	r7, #232	@ 0xe8
 8008de2:	46bd      	mov	sp, r7
 8008de4:	bd80      	pop	{r7, pc}
 8008de6:	bf00      	nop

08008de8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008de8:	b480      	push	{r7}
 8008dea:	b083      	sub	sp, #12
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008df0:	bf00      	nop
 8008df2:	370c      	adds	r7, #12
 8008df4:	46bd      	mov	sp, r7
 8008df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dfa:	4770      	bx	lr

08008dfc <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008dfc:	b480      	push	{r7}
 8008dfe:	b083      	sub	sp, #12
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8008e04:	bf00      	nop
 8008e06:	370c      	adds	r7, #12
 8008e08:	46bd      	mov	sp, r7
 8008e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e0e:	4770      	bx	lr

08008e10 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008e10:	b480      	push	{r7}
 8008e12:	b083      	sub	sp, #12
 8008e14:	af00      	add	r7, sp, #0
 8008e16:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8008e18:	bf00      	nop
 8008e1a:	370c      	adds	r7, #12
 8008e1c:	46bd      	mov	sp, r7
 8008e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e22:	4770      	bx	lr

08008e24 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008e24:	b480      	push	{r7}
 8008e26:	b083      	sub	sp, #12
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8008e2c:	bf00      	nop
 8008e2e:	370c      	adds	r7, #12
 8008e30:	46bd      	mov	sp, r7
 8008e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e36:	4770      	bx	lr

08008e38 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008e38:	b480      	push	{r7}
 8008e3a:	b083      	sub	sp, #12
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008e40:	bf00      	nop
 8008e42:	370c      	adds	r7, #12
 8008e44:	46bd      	mov	sp, r7
 8008e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e4a:	4770      	bx	lr

08008e4c <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8008e4c:	b480      	push	{r7}
 8008e4e:	b083      	sub	sp, #12
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8008e54:	bf00      	nop
 8008e56:	370c      	adds	r7, #12
 8008e58:	46bd      	mov	sp, r7
 8008e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e5e:	4770      	bx	lr

08008e60 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8008e60:	b480      	push	{r7}
 8008e62:	b083      	sub	sp, #12
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8008e68:	bf00      	nop
 8008e6a:	370c      	adds	r7, #12
 8008e6c:	46bd      	mov	sp, r7
 8008e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e72:	4770      	bx	lr

08008e74 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8008e74:	b480      	push	{r7}
 8008e76:	b083      	sub	sp, #12
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8008e7c:	bf00      	nop
 8008e7e:	370c      	adds	r7, #12
 8008e80:	46bd      	mov	sp, r7
 8008e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e86:	4770      	bx	lr

08008e88 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008e88:	b480      	push	{r7}
 8008e8a:	b083      	sub	sp, #12
 8008e8c:	af00      	add	r7, sp, #0
 8008e8e:	6078      	str	r0, [r7, #4]
 8008e90:	460b      	mov	r3, r1
 8008e92:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008e94:	bf00      	nop
 8008e96:	370c      	adds	r7, #12
 8008e98:	46bd      	mov	sp, r7
 8008e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e9e:	4770      	bx	lr

08008ea0 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8008ea0:	b480      	push	{r7}
 8008ea2:	b083      	sub	sp, #12
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	4a1a      	ldr	r2, [pc, #104]	@ (8008f14 <UART_InitCallbacksToDefault+0x74>)
 8008eac:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	4a19      	ldr	r2, [pc, #100]	@ (8008f18 <UART_InitCallbacksToDefault+0x78>)
 8008eb4:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	4a18      	ldr	r2, [pc, #96]	@ (8008f1c <UART_InitCallbacksToDefault+0x7c>)
 8008ebc:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	4a17      	ldr	r2, [pc, #92]	@ (8008f20 <UART_InitCallbacksToDefault+0x80>)
 8008ec4:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	4a16      	ldr	r2, [pc, #88]	@ (8008f24 <UART_InitCallbacksToDefault+0x84>)
 8008ecc:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	4a15      	ldr	r2, [pc, #84]	@ (8008f28 <UART_InitCallbacksToDefault+0x88>)
 8008ed4:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	4a14      	ldr	r2, [pc, #80]	@ (8008f2c <UART_InitCallbacksToDefault+0x8c>)
 8008edc:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	4a13      	ldr	r2, [pc, #76]	@ (8008f30 <UART_InitCallbacksToDefault+0x90>)
 8008ee4:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	4a12      	ldr	r2, [pc, #72]	@ (8008f34 <UART_InitCallbacksToDefault+0x94>)
 8008eec:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	4a11      	ldr	r2, [pc, #68]	@ (8008f38 <UART_InitCallbacksToDefault+0x98>)
 8008ef4:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	4a10      	ldr	r2, [pc, #64]	@ (8008f3c <UART_InitCallbacksToDefault+0x9c>)
 8008efc:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	4a0f      	ldr	r2, [pc, #60]	@ (8008f40 <UART_InitCallbacksToDefault+0xa0>)
 8008f04:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

}
 8008f08:	bf00      	nop
 8008f0a:	370c      	adds	r7, #12
 8008f0c:	46bd      	mov	sp, r7
 8008f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f12:	4770      	bx	lr
 8008f14:	08008dfd 	.word	0x08008dfd
 8008f18:	08008de9 	.word	0x08008de9
 8008f1c:	08008e25 	.word	0x08008e25
 8008f20:	08008e11 	.word	0x08008e11
 8008f24:	08008e39 	.word	0x08008e39
 8008f28:	08008e4d 	.word	0x08008e4d
 8008f2c:	08008e61 	.word	0x08008e61
 8008f30:	08008e75 	.word	0x08008e75
 8008f34:	0800a871 	.word	0x0800a871
 8008f38:	0800a885 	.word	0x0800a885
 8008f3c:	0800a899 	.word	0x0800a899
 8008f40:	08008e89 	.word	0x08008e89

08008f44 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008f44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008f48:	b08c      	sub	sp, #48	@ 0x30
 8008f4a:	af00      	add	r7, sp, #0
 8008f4c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008f4e:	2300      	movs	r3, #0
 8008f50:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008f54:	697b      	ldr	r3, [r7, #20]
 8008f56:	689a      	ldr	r2, [r3, #8]
 8008f58:	697b      	ldr	r3, [r7, #20]
 8008f5a:	691b      	ldr	r3, [r3, #16]
 8008f5c:	431a      	orrs	r2, r3
 8008f5e:	697b      	ldr	r3, [r7, #20]
 8008f60:	695b      	ldr	r3, [r3, #20]
 8008f62:	431a      	orrs	r2, r3
 8008f64:	697b      	ldr	r3, [r7, #20]
 8008f66:	69db      	ldr	r3, [r3, #28]
 8008f68:	4313      	orrs	r3, r2
 8008f6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008f6c:	697b      	ldr	r3, [r7, #20]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	681a      	ldr	r2, [r3, #0]
 8008f72:	4baa      	ldr	r3, [pc, #680]	@ (800921c <UART_SetConfig+0x2d8>)
 8008f74:	4013      	ands	r3, r2
 8008f76:	697a      	ldr	r2, [r7, #20]
 8008f78:	6812      	ldr	r2, [r2, #0]
 8008f7a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008f7c:	430b      	orrs	r3, r1
 8008f7e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008f80:	697b      	ldr	r3, [r7, #20]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	685b      	ldr	r3, [r3, #4]
 8008f86:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008f8a:	697b      	ldr	r3, [r7, #20]
 8008f8c:	68da      	ldr	r2, [r3, #12]
 8008f8e:	697b      	ldr	r3, [r7, #20]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	430a      	orrs	r2, r1
 8008f94:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008f96:	697b      	ldr	r3, [r7, #20]
 8008f98:	699b      	ldr	r3, [r3, #24]
 8008f9a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008f9c:	697b      	ldr	r3, [r7, #20]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	4a9f      	ldr	r2, [pc, #636]	@ (8009220 <UART_SetConfig+0x2dc>)
 8008fa2:	4293      	cmp	r3, r2
 8008fa4:	d004      	beq.n	8008fb0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008fa6:	697b      	ldr	r3, [r7, #20]
 8008fa8:	6a1b      	ldr	r3, [r3, #32]
 8008faa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008fac:	4313      	orrs	r3, r2
 8008fae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008fb0:	697b      	ldr	r3, [r7, #20]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	689b      	ldr	r3, [r3, #8]
 8008fb6:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8008fba:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8008fbe:	697a      	ldr	r2, [r7, #20]
 8008fc0:	6812      	ldr	r2, [r2, #0]
 8008fc2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008fc4:	430b      	orrs	r3, r1
 8008fc6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008fc8:	697b      	ldr	r3, [r7, #20]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fce:	f023 010f 	bic.w	r1, r3, #15
 8008fd2:	697b      	ldr	r3, [r7, #20]
 8008fd4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008fd6:	697b      	ldr	r3, [r7, #20]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	430a      	orrs	r2, r1
 8008fdc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008fde:	697b      	ldr	r3, [r7, #20]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	4a90      	ldr	r2, [pc, #576]	@ (8009224 <UART_SetConfig+0x2e0>)
 8008fe4:	4293      	cmp	r3, r2
 8008fe6:	d125      	bne.n	8009034 <UART_SetConfig+0xf0>
 8008fe8:	4b8f      	ldr	r3, [pc, #572]	@ (8009228 <UART_SetConfig+0x2e4>)
 8008fea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008fee:	f003 0303 	and.w	r3, r3, #3
 8008ff2:	2b03      	cmp	r3, #3
 8008ff4:	d81a      	bhi.n	800902c <UART_SetConfig+0xe8>
 8008ff6:	a201      	add	r2, pc, #4	@ (adr r2, 8008ffc <UART_SetConfig+0xb8>)
 8008ff8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ffc:	0800900d 	.word	0x0800900d
 8009000:	0800901d 	.word	0x0800901d
 8009004:	08009015 	.word	0x08009015
 8009008:	08009025 	.word	0x08009025
 800900c:	2301      	movs	r3, #1
 800900e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009012:	e116      	b.n	8009242 <UART_SetConfig+0x2fe>
 8009014:	2302      	movs	r3, #2
 8009016:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800901a:	e112      	b.n	8009242 <UART_SetConfig+0x2fe>
 800901c:	2304      	movs	r3, #4
 800901e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009022:	e10e      	b.n	8009242 <UART_SetConfig+0x2fe>
 8009024:	2308      	movs	r3, #8
 8009026:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800902a:	e10a      	b.n	8009242 <UART_SetConfig+0x2fe>
 800902c:	2310      	movs	r3, #16
 800902e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009032:	e106      	b.n	8009242 <UART_SetConfig+0x2fe>
 8009034:	697b      	ldr	r3, [r7, #20]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	4a7c      	ldr	r2, [pc, #496]	@ (800922c <UART_SetConfig+0x2e8>)
 800903a:	4293      	cmp	r3, r2
 800903c:	d138      	bne.n	80090b0 <UART_SetConfig+0x16c>
 800903e:	4b7a      	ldr	r3, [pc, #488]	@ (8009228 <UART_SetConfig+0x2e4>)
 8009040:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009044:	f003 030c 	and.w	r3, r3, #12
 8009048:	2b0c      	cmp	r3, #12
 800904a:	d82d      	bhi.n	80090a8 <UART_SetConfig+0x164>
 800904c:	a201      	add	r2, pc, #4	@ (adr r2, 8009054 <UART_SetConfig+0x110>)
 800904e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009052:	bf00      	nop
 8009054:	08009089 	.word	0x08009089
 8009058:	080090a9 	.word	0x080090a9
 800905c:	080090a9 	.word	0x080090a9
 8009060:	080090a9 	.word	0x080090a9
 8009064:	08009099 	.word	0x08009099
 8009068:	080090a9 	.word	0x080090a9
 800906c:	080090a9 	.word	0x080090a9
 8009070:	080090a9 	.word	0x080090a9
 8009074:	08009091 	.word	0x08009091
 8009078:	080090a9 	.word	0x080090a9
 800907c:	080090a9 	.word	0x080090a9
 8009080:	080090a9 	.word	0x080090a9
 8009084:	080090a1 	.word	0x080090a1
 8009088:	2300      	movs	r3, #0
 800908a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800908e:	e0d8      	b.n	8009242 <UART_SetConfig+0x2fe>
 8009090:	2302      	movs	r3, #2
 8009092:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009096:	e0d4      	b.n	8009242 <UART_SetConfig+0x2fe>
 8009098:	2304      	movs	r3, #4
 800909a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800909e:	e0d0      	b.n	8009242 <UART_SetConfig+0x2fe>
 80090a0:	2308      	movs	r3, #8
 80090a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80090a6:	e0cc      	b.n	8009242 <UART_SetConfig+0x2fe>
 80090a8:	2310      	movs	r3, #16
 80090aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80090ae:	e0c8      	b.n	8009242 <UART_SetConfig+0x2fe>
 80090b0:	697b      	ldr	r3, [r7, #20]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	4a5e      	ldr	r2, [pc, #376]	@ (8009230 <UART_SetConfig+0x2ec>)
 80090b6:	4293      	cmp	r3, r2
 80090b8:	d125      	bne.n	8009106 <UART_SetConfig+0x1c2>
 80090ba:	4b5b      	ldr	r3, [pc, #364]	@ (8009228 <UART_SetConfig+0x2e4>)
 80090bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80090c0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80090c4:	2b30      	cmp	r3, #48	@ 0x30
 80090c6:	d016      	beq.n	80090f6 <UART_SetConfig+0x1b2>
 80090c8:	2b30      	cmp	r3, #48	@ 0x30
 80090ca:	d818      	bhi.n	80090fe <UART_SetConfig+0x1ba>
 80090cc:	2b20      	cmp	r3, #32
 80090ce:	d00a      	beq.n	80090e6 <UART_SetConfig+0x1a2>
 80090d0:	2b20      	cmp	r3, #32
 80090d2:	d814      	bhi.n	80090fe <UART_SetConfig+0x1ba>
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d002      	beq.n	80090de <UART_SetConfig+0x19a>
 80090d8:	2b10      	cmp	r3, #16
 80090da:	d008      	beq.n	80090ee <UART_SetConfig+0x1aa>
 80090dc:	e00f      	b.n	80090fe <UART_SetConfig+0x1ba>
 80090de:	2300      	movs	r3, #0
 80090e0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80090e4:	e0ad      	b.n	8009242 <UART_SetConfig+0x2fe>
 80090e6:	2302      	movs	r3, #2
 80090e8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80090ec:	e0a9      	b.n	8009242 <UART_SetConfig+0x2fe>
 80090ee:	2304      	movs	r3, #4
 80090f0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80090f4:	e0a5      	b.n	8009242 <UART_SetConfig+0x2fe>
 80090f6:	2308      	movs	r3, #8
 80090f8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80090fc:	e0a1      	b.n	8009242 <UART_SetConfig+0x2fe>
 80090fe:	2310      	movs	r3, #16
 8009100:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009104:	e09d      	b.n	8009242 <UART_SetConfig+0x2fe>
 8009106:	697b      	ldr	r3, [r7, #20]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	4a4a      	ldr	r2, [pc, #296]	@ (8009234 <UART_SetConfig+0x2f0>)
 800910c:	4293      	cmp	r3, r2
 800910e:	d125      	bne.n	800915c <UART_SetConfig+0x218>
 8009110:	4b45      	ldr	r3, [pc, #276]	@ (8009228 <UART_SetConfig+0x2e4>)
 8009112:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009116:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800911a:	2bc0      	cmp	r3, #192	@ 0xc0
 800911c:	d016      	beq.n	800914c <UART_SetConfig+0x208>
 800911e:	2bc0      	cmp	r3, #192	@ 0xc0
 8009120:	d818      	bhi.n	8009154 <UART_SetConfig+0x210>
 8009122:	2b80      	cmp	r3, #128	@ 0x80
 8009124:	d00a      	beq.n	800913c <UART_SetConfig+0x1f8>
 8009126:	2b80      	cmp	r3, #128	@ 0x80
 8009128:	d814      	bhi.n	8009154 <UART_SetConfig+0x210>
 800912a:	2b00      	cmp	r3, #0
 800912c:	d002      	beq.n	8009134 <UART_SetConfig+0x1f0>
 800912e:	2b40      	cmp	r3, #64	@ 0x40
 8009130:	d008      	beq.n	8009144 <UART_SetConfig+0x200>
 8009132:	e00f      	b.n	8009154 <UART_SetConfig+0x210>
 8009134:	2300      	movs	r3, #0
 8009136:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800913a:	e082      	b.n	8009242 <UART_SetConfig+0x2fe>
 800913c:	2302      	movs	r3, #2
 800913e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009142:	e07e      	b.n	8009242 <UART_SetConfig+0x2fe>
 8009144:	2304      	movs	r3, #4
 8009146:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800914a:	e07a      	b.n	8009242 <UART_SetConfig+0x2fe>
 800914c:	2308      	movs	r3, #8
 800914e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009152:	e076      	b.n	8009242 <UART_SetConfig+0x2fe>
 8009154:	2310      	movs	r3, #16
 8009156:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800915a:	e072      	b.n	8009242 <UART_SetConfig+0x2fe>
 800915c:	697b      	ldr	r3, [r7, #20]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	4a35      	ldr	r2, [pc, #212]	@ (8009238 <UART_SetConfig+0x2f4>)
 8009162:	4293      	cmp	r3, r2
 8009164:	d12a      	bne.n	80091bc <UART_SetConfig+0x278>
 8009166:	4b30      	ldr	r3, [pc, #192]	@ (8009228 <UART_SetConfig+0x2e4>)
 8009168:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800916c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009170:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009174:	d01a      	beq.n	80091ac <UART_SetConfig+0x268>
 8009176:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800917a:	d81b      	bhi.n	80091b4 <UART_SetConfig+0x270>
 800917c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009180:	d00c      	beq.n	800919c <UART_SetConfig+0x258>
 8009182:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009186:	d815      	bhi.n	80091b4 <UART_SetConfig+0x270>
 8009188:	2b00      	cmp	r3, #0
 800918a:	d003      	beq.n	8009194 <UART_SetConfig+0x250>
 800918c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009190:	d008      	beq.n	80091a4 <UART_SetConfig+0x260>
 8009192:	e00f      	b.n	80091b4 <UART_SetConfig+0x270>
 8009194:	2300      	movs	r3, #0
 8009196:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800919a:	e052      	b.n	8009242 <UART_SetConfig+0x2fe>
 800919c:	2302      	movs	r3, #2
 800919e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80091a2:	e04e      	b.n	8009242 <UART_SetConfig+0x2fe>
 80091a4:	2304      	movs	r3, #4
 80091a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80091aa:	e04a      	b.n	8009242 <UART_SetConfig+0x2fe>
 80091ac:	2308      	movs	r3, #8
 80091ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80091b2:	e046      	b.n	8009242 <UART_SetConfig+0x2fe>
 80091b4:	2310      	movs	r3, #16
 80091b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80091ba:	e042      	b.n	8009242 <UART_SetConfig+0x2fe>
 80091bc:	697b      	ldr	r3, [r7, #20]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	4a17      	ldr	r2, [pc, #92]	@ (8009220 <UART_SetConfig+0x2dc>)
 80091c2:	4293      	cmp	r3, r2
 80091c4:	d13a      	bne.n	800923c <UART_SetConfig+0x2f8>
 80091c6:	4b18      	ldr	r3, [pc, #96]	@ (8009228 <UART_SetConfig+0x2e4>)
 80091c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80091cc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80091d0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80091d4:	d01a      	beq.n	800920c <UART_SetConfig+0x2c8>
 80091d6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80091da:	d81b      	bhi.n	8009214 <UART_SetConfig+0x2d0>
 80091dc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80091e0:	d00c      	beq.n	80091fc <UART_SetConfig+0x2b8>
 80091e2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80091e6:	d815      	bhi.n	8009214 <UART_SetConfig+0x2d0>
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d003      	beq.n	80091f4 <UART_SetConfig+0x2b0>
 80091ec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80091f0:	d008      	beq.n	8009204 <UART_SetConfig+0x2c0>
 80091f2:	e00f      	b.n	8009214 <UART_SetConfig+0x2d0>
 80091f4:	2300      	movs	r3, #0
 80091f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80091fa:	e022      	b.n	8009242 <UART_SetConfig+0x2fe>
 80091fc:	2302      	movs	r3, #2
 80091fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009202:	e01e      	b.n	8009242 <UART_SetConfig+0x2fe>
 8009204:	2304      	movs	r3, #4
 8009206:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800920a:	e01a      	b.n	8009242 <UART_SetConfig+0x2fe>
 800920c:	2308      	movs	r3, #8
 800920e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009212:	e016      	b.n	8009242 <UART_SetConfig+0x2fe>
 8009214:	2310      	movs	r3, #16
 8009216:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800921a:	e012      	b.n	8009242 <UART_SetConfig+0x2fe>
 800921c:	cfff69f3 	.word	0xcfff69f3
 8009220:	40008000 	.word	0x40008000
 8009224:	40013800 	.word	0x40013800
 8009228:	40021000 	.word	0x40021000
 800922c:	40004400 	.word	0x40004400
 8009230:	40004800 	.word	0x40004800
 8009234:	40004c00 	.word	0x40004c00
 8009238:	40005000 	.word	0x40005000
 800923c:	2310      	movs	r3, #16
 800923e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009242:	697b      	ldr	r3, [r7, #20]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	4aae      	ldr	r2, [pc, #696]	@ (8009500 <UART_SetConfig+0x5bc>)
 8009248:	4293      	cmp	r3, r2
 800924a:	f040 8097 	bne.w	800937c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800924e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009252:	2b08      	cmp	r3, #8
 8009254:	d823      	bhi.n	800929e <UART_SetConfig+0x35a>
 8009256:	a201      	add	r2, pc, #4	@ (adr r2, 800925c <UART_SetConfig+0x318>)
 8009258:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800925c:	08009281 	.word	0x08009281
 8009260:	0800929f 	.word	0x0800929f
 8009264:	08009289 	.word	0x08009289
 8009268:	0800929f 	.word	0x0800929f
 800926c:	0800928f 	.word	0x0800928f
 8009270:	0800929f 	.word	0x0800929f
 8009274:	0800929f 	.word	0x0800929f
 8009278:	0800929f 	.word	0x0800929f
 800927c:	08009297 	.word	0x08009297
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009280:	f7fc f872 	bl	8005368 <HAL_RCC_GetPCLK1Freq>
 8009284:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009286:	e010      	b.n	80092aa <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009288:	4b9e      	ldr	r3, [pc, #632]	@ (8009504 <UART_SetConfig+0x5c0>)
 800928a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800928c:	e00d      	b.n	80092aa <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800928e:	f7fb fffd 	bl	800528c <HAL_RCC_GetSysClockFreq>
 8009292:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009294:	e009      	b.n	80092aa <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009296:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800929a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800929c:	e005      	b.n	80092aa <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800929e:	2300      	movs	r3, #0
 80092a0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80092a2:	2301      	movs	r3, #1
 80092a4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80092a8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80092aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	f000 8130 	beq.w	8009512 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80092b2:	697b      	ldr	r3, [r7, #20]
 80092b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80092b6:	4a94      	ldr	r2, [pc, #592]	@ (8009508 <UART_SetConfig+0x5c4>)
 80092b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80092bc:	461a      	mov	r2, r3
 80092be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092c0:	fbb3 f3f2 	udiv	r3, r3, r2
 80092c4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80092c6:	697b      	ldr	r3, [r7, #20]
 80092c8:	685a      	ldr	r2, [r3, #4]
 80092ca:	4613      	mov	r3, r2
 80092cc:	005b      	lsls	r3, r3, #1
 80092ce:	4413      	add	r3, r2
 80092d0:	69ba      	ldr	r2, [r7, #24]
 80092d2:	429a      	cmp	r2, r3
 80092d4:	d305      	bcc.n	80092e2 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80092d6:	697b      	ldr	r3, [r7, #20]
 80092d8:	685b      	ldr	r3, [r3, #4]
 80092da:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80092dc:	69ba      	ldr	r2, [r7, #24]
 80092de:	429a      	cmp	r2, r3
 80092e0:	d903      	bls.n	80092ea <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80092e2:	2301      	movs	r3, #1
 80092e4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80092e8:	e113      	b.n	8009512 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80092ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092ec:	2200      	movs	r2, #0
 80092ee:	60bb      	str	r3, [r7, #8]
 80092f0:	60fa      	str	r2, [r7, #12]
 80092f2:	697b      	ldr	r3, [r7, #20]
 80092f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80092f6:	4a84      	ldr	r2, [pc, #528]	@ (8009508 <UART_SetConfig+0x5c4>)
 80092f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80092fc:	b29b      	uxth	r3, r3
 80092fe:	2200      	movs	r2, #0
 8009300:	603b      	str	r3, [r7, #0]
 8009302:	607a      	str	r2, [r7, #4]
 8009304:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009308:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800930c:	f7f6 ff84 	bl	8000218 <__aeabi_uldivmod>
 8009310:	4602      	mov	r2, r0
 8009312:	460b      	mov	r3, r1
 8009314:	4610      	mov	r0, r2
 8009316:	4619      	mov	r1, r3
 8009318:	f04f 0200 	mov.w	r2, #0
 800931c:	f04f 0300 	mov.w	r3, #0
 8009320:	020b      	lsls	r3, r1, #8
 8009322:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009326:	0202      	lsls	r2, r0, #8
 8009328:	6979      	ldr	r1, [r7, #20]
 800932a:	6849      	ldr	r1, [r1, #4]
 800932c:	0849      	lsrs	r1, r1, #1
 800932e:	2000      	movs	r0, #0
 8009330:	460c      	mov	r4, r1
 8009332:	4605      	mov	r5, r0
 8009334:	eb12 0804 	adds.w	r8, r2, r4
 8009338:	eb43 0905 	adc.w	r9, r3, r5
 800933c:	697b      	ldr	r3, [r7, #20]
 800933e:	685b      	ldr	r3, [r3, #4]
 8009340:	2200      	movs	r2, #0
 8009342:	469a      	mov	sl, r3
 8009344:	4693      	mov	fp, r2
 8009346:	4652      	mov	r2, sl
 8009348:	465b      	mov	r3, fp
 800934a:	4640      	mov	r0, r8
 800934c:	4649      	mov	r1, r9
 800934e:	f7f6 ff63 	bl	8000218 <__aeabi_uldivmod>
 8009352:	4602      	mov	r2, r0
 8009354:	460b      	mov	r3, r1
 8009356:	4613      	mov	r3, r2
 8009358:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800935a:	6a3b      	ldr	r3, [r7, #32]
 800935c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009360:	d308      	bcc.n	8009374 <UART_SetConfig+0x430>
 8009362:	6a3b      	ldr	r3, [r7, #32]
 8009364:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009368:	d204      	bcs.n	8009374 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800936a:	697b      	ldr	r3, [r7, #20]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	6a3a      	ldr	r2, [r7, #32]
 8009370:	60da      	str	r2, [r3, #12]
 8009372:	e0ce      	b.n	8009512 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8009374:	2301      	movs	r3, #1
 8009376:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800937a:	e0ca      	b.n	8009512 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800937c:	697b      	ldr	r3, [r7, #20]
 800937e:	69db      	ldr	r3, [r3, #28]
 8009380:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009384:	d166      	bne.n	8009454 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8009386:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800938a:	2b08      	cmp	r3, #8
 800938c:	d827      	bhi.n	80093de <UART_SetConfig+0x49a>
 800938e:	a201      	add	r2, pc, #4	@ (adr r2, 8009394 <UART_SetConfig+0x450>)
 8009390:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009394:	080093b9 	.word	0x080093b9
 8009398:	080093c1 	.word	0x080093c1
 800939c:	080093c9 	.word	0x080093c9
 80093a0:	080093df 	.word	0x080093df
 80093a4:	080093cf 	.word	0x080093cf
 80093a8:	080093df 	.word	0x080093df
 80093ac:	080093df 	.word	0x080093df
 80093b0:	080093df 	.word	0x080093df
 80093b4:	080093d7 	.word	0x080093d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80093b8:	f7fb ffd6 	bl	8005368 <HAL_RCC_GetPCLK1Freq>
 80093bc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80093be:	e014      	b.n	80093ea <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80093c0:	f7fb ffe8 	bl	8005394 <HAL_RCC_GetPCLK2Freq>
 80093c4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80093c6:	e010      	b.n	80093ea <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80093c8:	4b4e      	ldr	r3, [pc, #312]	@ (8009504 <UART_SetConfig+0x5c0>)
 80093ca:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80093cc:	e00d      	b.n	80093ea <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80093ce:	f7fb ff5d 	bl	800528c <HAL_RCC_GetSysClockFreq>
 80093d2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80093d4:	e009      	b.n	80093ea <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80093d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80093da:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80093dc:	e005      	b.n	80093ea <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80093de:	2300      	movs	r3, #0
 80093e0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80093e2:	2301      	movs	r3, #1
 80093e4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80093e8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80093ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	f000 8090 	beq.w	8009512 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80093f2:	697b      	ldr	r3, [r7, #20]
 80093f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80093f6:	4a44      	ldr	r2, [pc, #272]	@ (8009508 <UART_SetConfig+0x5c4>)
 80093f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80093fc:	461a      	mov	r2, r3
 80093fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009400:	fbb3 f3f2 	udiv	r3, r3, r2
 8009404:	005a      	lsls	r2, r3, #1
 8009406:	697b      	ldr	r3, [r7, #20]
 8009408:	685b      	ldr	r3, [r3, #4]
 800940a:	085b      	lsrs	r3, r3, #1
 800940c:	441a      	add	r2, r3
 800940e:	697b      	ldr	r3, [r7, #20]
 8009410:	685b      	ldr	r3, [r3, #4]
 8009412:	fbb2 f3f3 	udiv	r3, r2, r3
 8009416:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009418:	6a3b      	ldr	r3, [r7, #32]
 800941a:	2b0f      	cmp	r3, #15
 800941c:	d916      	bls.n	800944c <UART_SetConfig+0x508>
 800941e:	6a3b      	ldr	r3, [r7, #32]
 8009420:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009424:	d212      	bcs.n	800944c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009426:	6a3b      	ldr	r3, [r7, #32]
 8009428:	b29b      	uxth	r3, r3
 800942a:	f023 030f 	bic.w	r3, r3, #15
 800942e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009430:	6a3b      	ldr	r3, [r7, #32]
 8009432:	085b      	lsrs	r3, r3, #1
 8009434:	b29b      	uxth	r3, r3
 8009436:	f003 0307 	and.w	r3, r3, #7
 800943a:	b29a      	uxth	r2, r3
 800943c:	8bfb      	ldrh	r3, [r7, #30]
 800943e:	4313      	orrs	r3, r2
 8009440:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8009442:	697b      	ldr	r3, [r7, #20]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	8bfa      	ldrh	r2, [r7, #30]
 8009448:	60da      	str	r2, [r3, #12]
 800944a:	e062      	b.n	8009512 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800944c:	2301      	movs	r3, #1
 800944e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009452:	e05e      	b.n	8009512 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009454:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009458:	2b08      	cmp	r3, #8
 800945a:	d828      	bhi.n	80094ae <UART_SetConfig+0x56a>
 800945c:	a201      	add	r2, pc, #4	@ (adr r2, 8009464 <UART_SetConfig+0x520>)
 800945e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009462:	bf00      	nop
 8009464:	08009489 	.word	0x08009489
 8009468:	08009491 	.word	0x08009491
 800946c:	08009499 	.word	0x08009499
 8009470:	080094af 	.word	0x080094af
 8009474:	0800949f 	.word	0x0800949f
 8009478:	080094af 	.word	0x080094af
 800947c:	080094af 	.word	0x080094af
 8009480:	080094af 	.word	0x080094af
 8009484:	080094a7 	.word	0x080094a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009488:	f7fb ff6e 	bl	8005368 <HAL_RCC_GetPCLK1Freq>
 800948c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800948e:	e014      	b.n	80094ba <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009490:	f7fb ff80 	bl	8005394 <HAL_RCC_GetPCLK2Freq>
 8009494:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009496:	e010      	b.n	80094ba <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009498:	4b1a      	ldr	r3, [pc, #104]	@ (8009504 <UART_SetConfig+0x5c0>)
 800949a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800949c:	e00d      	b.n	80094ba <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800949e:	f7fb fef5 	bl	800528c <HAL_RCC_GetSysClockFreq>
 80094a2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80094a4:	e009      	b.n	80094ba <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80094a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80094aa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80094ac:	e005      	b.n	80094ba <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80094ae:	2300      	movs	r3, #0
 80094b0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80094b2:	2301      	movs	r3, #1
 80094b4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80094b8:	bf00      	nop
    }

    if (pclk != 0U)
 80094ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d028      	beq.n	8009512 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80094c0:	697b      	ldr	r3, [r7, #20]
 80094c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094c4:	4a10      	ldr	r2, [pc, #64]	@ (8009508 <UART_SetConfig+0x5c4>)
 80094c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80094ca:	461a      	mov	r2, r3
 80094cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094ce:	fbb3 f2f2 	udiv	r2, r3, r2
 80094d2:	697b      	ldr	r3, [r7, #20]
 80094d4:	685b      	ldr	r3, [r3, #4]
 80094d6:	085b      	lsrs	r3, r3, #1
 80094d8:	441a      	add	r2, r3
 80094da:	697b      	ldr	r3, [r7, #20]
 80094dc:	685b      	ldr	r3, [r3, #4]
 80094de:	fbb2 f3f3 	udiv	r3, r2, r3
 80094e2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80094e4:	6a3b      	ldr	r3, [r7, #32]
 80094e6:	2b0f      	cmp	r3, #15
 80094e8:	d910      	bls.n	800950c <UART_SetConfig+0x5c8>
 80094ea:	6a3b      	ldr	r3, [r7, #32]
 80094ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80094f0:	d20c      	bcs.n	800950c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80094f2:	6a3b      	ldr	r3, [r7, #32]
 80094f4:	b29a      	uxth	r2, r3
 80094f6:	697b      	ldr	r3, [r7, #20]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	60da      	str	r2, [r3, #12]
 80094fc:	e009      	b.n	8009512 <UART_SetConfig+0x5ce>
 80094fe:	bf00      	nop
 8009500:	40008000 	.word	0x40008000
 8009504:	00f42400 	.word	0x00f42400
 8009508:	0800aba8 	.word	0x0800aba8
      }
      else
      {
        ret = HAL_ERROR;
 800950c:	2301      	movs	r3, #1
 800950e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009512:	697b      	ldr	r3, [r7, #20]
 8009514:	2201      	movs	r2, #1
 8009516:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800951a:	697b      	ldr	r3, [r7, #20]
 800951c:	2201      	movs	r2, #1
 800951e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009522:	697b      	ldr	r3, [r7, #20]
 8009524:	2200      	movs	r2, #0
 8009526:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8009528:	697b      	ldr	r3, [r7, #20]
 800952a:	2200      	movs	r2, #0
 800952c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800952e:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8009532:	4618      	mov	r0, r3
 8009534:	3730      	adds	r7, #48	@ 0x30
 8009536:	46bd      	mov	sp, r7
 8009538:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800953c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800953c:	b480      	push	{r7}
 800953e:	b083      	sub	sp, #12
 8009540:	af00      	add	r7, sp, #0
 8009542:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009548:	f003 0308 	and.w	r3, r3, #8
 800954c:	2b00      	cmp	r3, #0
 800954e:	d00a      	beq.n	8009566 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	685b      	ldr	r3, [r3, #4]
 8009556:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	430a      	orrs	r2, r1
 8009564:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800956a:	f003 0301 	and.w	r3, r3, #1
 800956e:	2b00      	cmp	r3, #0
 8009570:	d00a      	beq.n	8009588 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	685b      	ldr	r3, [r3, #4]
 8009578:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	430a      	orrs	r2, r1
 8009586:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800958c:	f003 0302 	and.w	r3, r3, #2
 8009590:	2b00      	cmp	r3, #0
 8009592:	d00a      	beq.n	80095aa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	685b      	ldr	r3, [r3, #4]
 800959a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	430a      	orrs	r2, r1
 80095a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80095ae:	f003 0304 	and.w	r3, r3, #4
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d00a      	beq.n	80095cc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	685b      	ldr	r3, [r3, #4]
 80095bc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	430a      	orrs	r2, r1
 80095ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80095d0:	f003 0310 	and.w	r3, r3, #16
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d00a      	beq.n	80095ee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	689b      	ldr	r3, [r3, #8]
 80095de:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	430a      	orrs	r2, r1
 80095ec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80095f2:	f003 0320 	and.w	r3, r3, #32
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d00a      	beq.n	8009610 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	689b      	ldr	r3, [r3, #8]
 8009600:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	430a      	orrs	r2, r1
 800960e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009614:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009618:	2b00      	cmp	r3, #0
 800961a:	d01a      	beq.n	8009652 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	685b      	ldr	r3, [r3, #4]
 8009622:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	430a      	orrs	r2, r1
 8009630:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009636:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800963a:	d10a      	bne.n	8009652 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	685b      	ldr	r3, [r3, #4]
 8009642:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	430a      	orrs	r2, r1
 8009650:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009656:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800965a:	2b00      	cmp	r3, #0
 800965c:	d00a      	beq.n	8009674 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	685b      	ldr	r3, [r3, #4]
 8009664:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	430a      	orrs	r2, r1
 8009672:	605a      	str	r2, [r3, #4]
  }
}
 8009674:	bf00      	nop
 8009676:	370c      	adds	r7, #12
 8009678:	46bd      	mov	sp, r7
 800967a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800967e:	4770      	bx	lr

08009680 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009680:	b580      	push	{r7, lr}
 8009682:	b098      	sub	sp, #96	@ 0x60
 8009684:	af02      	add	r7, sp, #8
 8009686:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	2200      	movs	r2, #0
 800968c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009690:	f7f9 f9cc 	bl	8002a2c <HAL_GetTick>
 8009694:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	f003 0308 	and.w	r3, r3, #8
 80096a0:	2b08      	cmp	r3, #8
 80096a2:	d12f      	bne.n	8009704 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80096a4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80096a8:	9300      	str	r3, [sp, #0]
 80096aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80096ac:	2200      	movs	r2, #0
 80096ae:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80096b2:	6878      	ldr	r0, [r7, #4]
 80096b4:	f000 f88e 	bl	80097d4 <UART_WaitOnFlagUntilTimeout>
 80096b8:	4603      	mov	r3, r0
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d022      	beq.n	8009704 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096c6:	e853 3f00 	ldrex	r3, [r3]
 80096ca:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80096cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80096ce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80096d2:	653b      	str	r3, [r7, #80]	@ 0x50
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	461a      	mov	r2, r3
 80096da:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80096dc:	647b      	str	r3, [r7, #68]	@ 0x44
 80096de:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096e0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80096e2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80096e4:	e841 2300 	strex	r3, r2, [r1]
 80096e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80096ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d1e6      	bne.n	80096be <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	2220      	movs	r2, #32
 80096f4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	2200      	movs	r2, #0
 80096fc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009700:	2303      	movs	r3, #3
 8009702:	e063      	b.n	80097cc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	f003 0304 	and.w	r3, r3, #4
 800970e:	2b04      	cmp	r3, #4
 8009710:	d149      	bne.n	80097a6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009712:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009716:	9300      	str	r3, [sp, #0]
 8009718:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800971a:	2200      	movs	r2, #0
 800971c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009720:	6878      	ldr	r0, [r7, #4]
 8009722:	f000 f857 	bl	80097d4 <UART_WaitOnFlagUntilTimeout>
 8009726:	4603      	mov	r3, r0
 8009728:	2b00      	cmp	r3, #0
 800972a:	d03c      	beq.n	80097a6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009732:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009734:	e853 3f00 	ldrex	r3, [r3]
 8009738:	623b      	str	r3, [r7, #32]
   return(result);
 800973a:	6a3b      	ldr	r3, [r7, #32]
 800973c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009740:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	461a      	mov	r2, r3
 8009748:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800974a:	633b      	str	r3, [r7, #48]	@ 0x30
 800974c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800974e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009750:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009752:	e841 2300 	strex	r3, r2, [r1]
 8009756:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009758:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800975a:	2b00      	cmp	r3, #0
 800975c:	d1e6      	bne.n	800972c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	3308      	adds	r3, #8
 8009764:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009766:	693b      	ldr	r3, [r7, #16]
 8009768:	e853 3f00 	ldrex	r3, [r3]
 800976c:	60fb      	str	r3, [r7, #12]
   return(result);
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	f023 0301 	bic.w	r3, r3, #1
 8009774:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	3308      	adds	r3, #8
 800977c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800977e:	61fa      	str	r2, [r7, #28]
 8009780:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009782:	69b9      	ldr	r1, [r7, #24]
 8009784:	69fa      	ldr	r2, [r7, #28]
 8009786:	e841 2300 	strex	r3, r2, [r1]
 800978a:	617b      	str	r3, [r7, #20]
   return(result);
 800978c:	697b      	ldr	r3, [r7, #20]
 800978e:	2b00      	cmp	r3, #0
 8009790:	d1e5      	bne.n	800975e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	2220      	movs	r2, #32
 8009796:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	2200      	movs	r2, #0
 800979e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80097a2:	2303      	movs	r3, #3
 80097a4:	e012      	b.n	80097cc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	2220      	movs	r2, #32
 80097aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	2220      	movs	r2, #32
 80097b2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	2200      	movs	r2, #0
 80097ba:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	2200      	movs	r2, #0
 80097c0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	2200      	movs	r2, #0
 80097c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80097ca:	2300      	movs	r3, #0
}
 80097cc:	4618      	mov	r0, r3
 80097ce:	3758      	adds	r7, #88	@ 0x58
 80097d0:	46bd      	mov	sp, r7
 80097d2:	bd80      	pop	{r7, pc}

080097d4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80097d4:	b580      	push	{r7, lr}
 80097d6:	b084      	sub	sp, #16
 80097d8:	af00      	add	r7, sp, #0
 80097da:	60f8      	str	r0, [r7, #12]
 80097dc:	60b9      	str	r1, [r7, #8]
 80097de:	603b      	str	r3, [r7, #0]
 80097e0:	4613      	mov	r3, r2
 80097e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80097e4:	e04f      	b.n	8009886 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80097e6:	69bb      	ldr	r3, [r7, #24]
 80097e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097ec:	d04b      	beq.n	8009886 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80097ee:	f7f9 f91d 	bl	8002a2c <HAL_GetTick>
 80097f2:	4602      	mov	r2, r0
 80097f4:	683b      	ldr	r3, [r7, #0]
 80097f6:	1ad3      	subs	r3, r2, r3
 80097f8:	69ba      	ldr	r2, [r7, #24]
 80097fa:	429a      	cmp	r2, r3
 80097fc:	d302      	bcc.n	8009804 <UART_WaitOnFlagUntilTimeout+0x30>
 80097fe:	69bb      	ldr	r3, [r7, #24]
 8009800:	2b00      	cmp	r3, #0
 8009802:	d101      	bne.n	8009808 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009804:	2303      	movs	r3, #3
 8009806:	e04e      	b.n	80098a6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	f003 0304 	and.w	r3, r3, #4
 8009812:	2b00      	cmp	r3, #0
 8009814:	d037      	beq.n	8009886 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009816:	68bb      	ldr	r3, [r7, #8]
 8009818:	2b80      	cmp	r3, #128	@ 0x80
 800981a:	d034      	beq.n	8009886 <UART_WaitOnFlagUntilTimeout+0xb2>
 800981c:	68bb      	ldr	r3, [r7, #8]
 800981e:	2b40      	cmp	r3, #64	@ 0x40
 8009820:	d031      	beq.n	8009886 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	69db      	ldr	r3, [r3, #28]
 8009828:	f003 0308 	and.w	r3, r3, #8
 800982c:	2b08      	cmp	r3, #8
 800982e:	d110      	bne.n	8009852 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	2208      	movs	r2, #8
 8009836:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009838:	68f8      	ldr	r0, [r7, #12]
 800983a:	f000 f99c 	bl	8009b76 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	2208      	movs	r2, #8
 8009842:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	2200      	movs	r2, #0
 800984a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800984e:	2301      	movs	r3, #1
 8009850:	e029      	b.n	80098a6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	69db      	ldr	r3, [r3, #28]
 8009858:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800985c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009860:	d111      	bne.n	8009886 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800986a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800986c:	68f8      	ldr	r0, [r7, #12]
 800986e:	f000 f982 	bl	8009b76 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	2220      	movs	r2, #32
 8009876:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	2200      	movs	r2, #0
 800987e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8009882:	2303      	movs	r3, #3
 8009884:	e00f      	b.n	80098a6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	69da      	ldr	r2, [r3, #28]
 800988c:	68bb      	ldr	r3, [r7, #8]
 800988e:	4013      	ands	r3, r2
 8009890:	68ba      	ldr	r2, [r7, #8]
 8009892:	429a      	cmp	r2, r3
 8009894:	bf0c      	ite	eq
 8009896:	2301      	moveq	r3, #1
 8009898:	2300      	movne	r3, #0
 800989a:	b2db      	uxtb	r3, r3
 800989c:	461a      	mov	r2, r3
 800989e:	79fb      	ldrb	r3, [r7, #7]
 80098a0:	429a      	cmp	r2, r3
 80098a2:	d0a0      	beq.n	80097e6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80098a4:	2300      	movs	r3, #0
}
 80098a6:	4618      	mov	r0, r3
 80098a8:	3710      	adds	r7, #16
 80098aa:	46bd      	mov	sp, r7
 80098ac:	bd80      	pop	{r7, pc}
	...

080098b0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80098b0:	b480      	push	{r7}
 80098b2:	b0a3      	sub	sp, #140	@ 0x8c
 80098b4:	af00      	add	r7, sp, #0
 80098b6:	60f8      	str	r0, [r7, #12]
 80098b8:	60b9      	str	r1, [r7, #8]
 80098ba:	4613      	mov	r3, r2
 80098bc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	68ba      	ldr	r2, [r7, #8]
 80098c2:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	88fa      	ldrh	r2, [r7, #6]
 80098c8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	88fa      	ldrh	r2, [r7, #6]
 80098d0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	2200      	movs	r2, #0
 80098d8:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	689b      	ldr	r3, [r3, #8]
 80098de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80098e2:	d10e      	bne.n	8009902 <UART_Start_Receive_IT+0x52>
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	691b      	ldr	r3, [r3, #16]
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d105      	bne.n	80098f8 <UART_Start_Receive_IT+0x48>
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80098f2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80098f6:	e02d      	b.n	8009954 <UART_Start_Receive_IT+0xa4>
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	22ff      	movs	r2, #255	@ 0xff
 80098fc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009900:	e028      	b.n	8009954 <UART_Start_Receive_IT+0xa4>
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	689b      	ldr	r3, [r3, #8]
 8009906:	2b00      	cmp	r3, #0
 8009908:	d10d      	bne.n	8009926 <UART_Start_Receive_IT+0x76>
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	691b      	ldr	r3, [r3, #16]
 800990e:	2b00      	cmp	r3, #0
 8009910:	d104      	bne.n	800991c <UART_Start_Receive_IT+0x6c>
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	22ff      	movs	r2, #255	@ 0xff
 8009916:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800991a:	e01b      	b.n	8009954 <UART_Start_Receive_IT+0xa4>
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	227f      	movs	r2, #127	@ 0x7f
 8009920:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009924:	e016      	b.n	8009954 <UART_Start_Receive_IT+0xa4>
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	689b      	ldr	r3, [r3, #8]
 800992a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800992e:	d10d      	bne.n	800994c <UART_Start_Receive_IT+0x9c>
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	691b      	ldr	r3, [r3, #16]
 8009934:	2b00      	cmp	r3, #0
 8009936:	d104      	bne.n	8009942 <UART_Start_Receive_IT+0x92>
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	227f      	movs	r2, #127	@ 0x7f
 800993c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009940:	e008      	b.n	8009954 <UART_Start_Receive_IT+0xa4>
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	223f      	movs	r2, #63	@ 0x3f
 8009946:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800994a:	e003      	b.n	8009954 <UART_Start_Receive_IT+0xa4>
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	2200      	movs	r2, #0
 8009950:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	2200      	movs	r2, #0
 8009958:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	2222      	movs	r2, #34	@ 0x22
 8009960:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	3308      	adds	r3, #8
 800996a:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800996c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800996e:	e853 3f00 	ldrex	r3, [r3]
 8009972:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8009974:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009976:	f043 0301 	orr.w	r3, r3, #1
 800997a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	3308      	adds	r3, #8
 8009984:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8009988:	673a      	str	r2, [r7, #112]	@ 0x70
 800998a:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800998c:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800998e:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8009990:	e841 2300 	strex	r3, r2, [r1]
 8009994:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 8009996:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009998:	2b00      	cmp	r3, #0
 800999a:	d1e3      	bne.n	8009964 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80099a0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80099a4:	d14f      	bne.n	8009a46 <UART_Start_Receive_IT+0x196>
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80099ac:	88fa      	ldrh	r2, [r7, #6]
 80099ae:	429a      	cmp	r2, r3
 80099b0:	d349      	bcc.n	8009a46 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	689b      	ldr	r3, [r3, #8]
 80099b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80099ba:	d107      	bne.n	80099cc <UART_Start_Receive_IT+0x11c>
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	691b      	ldr	r3, [r3, #16]
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d103      	bne.n	80099cc <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	4a47      	ldr	r2, [pc, #284]	@ (8009ae4 <UART_Start_Receive_IT+0x234>)
 80099c8:	675a      	str	r2, [r3, #116]	@ 0x74
 80099ca:	e002      	b.n	80099d2 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	4a46      	ldr	r2, [pc, #280]	@ (8009ae8 <UART_Start_Receive_IT+0x238>)
 80099d0:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	691b      	ldr	r3, [r3, #16]
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d01a      	beq.n	8009a10 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099e0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80099e2:	e853 3f00 	ldrex	r3, [r3]
 80099e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80099e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80099ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80099ee:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	461a      	mov	r2, r3
 80099f8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80099fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80099fe:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a00:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8009a02:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8009a04:	e841 2300 	strex	r3, r2, [r1]
 8009a08:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8009a0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d1e4      	bne.n	80099da <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	3308      	adds	r3, #8
 8009a16:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009a1a:	e853 3f00 	ldrex	r3, [r3]
 8009a1e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009a20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a22:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009a26:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	3308      	adds	r3, #8
 8009a2e:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8009a30:	64ba      	str	r2, [r7, #72]	@ 0x48
 8009a32:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a34:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009a36:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009a38:	e841 2300 	strex	r3, r2, [r1]
 8009a3c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8009a3e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d1e5      	bne.n	8009a10 <UART_Start_Receive_IT+0x160>
 8009a44:	e046      	b.n	8009ad4 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	689b      	ldr	r3, [r3, #8]
 8009a4a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009a4e:	d107      	bne.n	8009a60 <UART_Start_Receive_IT+0x1b0>
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	691b      	ldr	r3, [r3, #16]
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d103      	bne.n	8009a60 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	4a24      	ldr	r2, [pc, #144]	@ (8009aec <UART_Start_Receive_IT+0x23c>)
 8009a5c:	675a      	str	r2, [r3, #116]	@ 0x74
 8009a5e:	e002      	b.n	8009a66 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	4a23      	ldr	r2, [pc, #140]	@ (8009af0 <UART_Start_Receive_IT+0x240>)
 8009a64:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	691b      	ldr	r3, [r3, #16]
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d019      	beq.n	8009aa2 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a76:	e853 3f00 	ldrex	r3, [r3]
 8009a7a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009a7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a7e:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8009a82:	677b      	str	r3, [r7, #116]	@ 0x74
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	461a      	mov	r2, r3
 8009a8a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009a8c:	637b      	str	r3, [r7, #52]	@ 0x34
 8009a8e:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a90:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009a92:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009a94:	e841 2300 	strex	r3, r2, [r1]
 8009a98:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8009a9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d1e6      	bne.n	8009a6e <UART_Start_Receive_IT+0x1be>
 8009aa0:	e018      	b.n	8009ad4 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009aa8:	697b      	ldr	r3, [r7, #20]
 8009aaa:	e853 3f00 	ldrex	r3, [r3]
 8009aae:	613b      	str	r3, [r7, #16]
   return(result);
 8009ab0:	693b      	ldr	r3, [r7, #16]
 8009ab2:	f043 0320 	orr.w	r3, r3, #32
 8009ab6:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	461a      	mov	r2, r3
 8009abe:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009ac0:	623b      	str	r3, [r7, #32]
 8009ac2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ac4:	69f9      	ldr	r1, [r7, #28]
 8009ac6:	6a3a      	ldr	r2, [r7, #32]
 8009ac8:	e841 2300 	strex	r3, r2, [r1]
 8009acc:	61bb      	str	r3, [r7, #24]
   return(result);
 8009ace:	69bb      	ldr	r3, [r7, #24]
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d1e6      	bne.n	8009aa2 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8009ad4:	2300      	movs	r3, #0
}
 8009ad6:	4618      	mov	r0, r3
 8009ad8:	378c      	adds	r7, #140	@ 0x8c
 8009ada:	46bd      	mov	sp, r7
 8009adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae0:	4770      	bx	lr
 8009ae2:	bf00      	nop
 8009ae4:	0800a4f9 	.word	0x0800a4f9
 8009ae8:	0800a189 	.word	0x0800a189
 8009aec:	08009fc9 	.word	0x08009fc9
 8009af0:	08009e09 	.word	0x08009e09

08009af4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009af4:	b480      	push	{r7}
 8009af6:	b08f      	sub	sp, #60	@ 0x3c
 8009af8:	af00      	add	r7, sp, #0
 8009afa:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b02:	6a3b      	ldr	r3, [r7, #32]
 8009b04:	e853 3f00 	ldrex	r3, [r3]
 8009b08:	61fb      	str	r3, [r7, #28]
   return(result);
 8009b0a:	69fb      	ldr	r3, [r7, #28]
 8009b0c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8009b10:	637b      	str	r3, [r7, #52]	@ 0x34
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	461a      	mov	r2, r3
 8009b18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009b1c:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b1e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009b20:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009b22:	e841 2300 	strex	r3, r2, [r1]
 8009b26:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009b28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d1e6      	bne.n	8009afc <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	3308      	adds	r3, #8
 8009b34:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	e853 3f00 	ldrex	r3, [r3]
 8009b3c:	60bb      	str	r3, [r7, #8]
   return(result);
 8009b3e:	68bb      	ldr	r3, [r7, #8]
 8009b40:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8009b44:	633b      	str	r3, [r7, #48]	@ 0x30
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	3308      	adds	r3, #8
 8009b4c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009b4e:	61ba      	str	r2, [r7, #24]
 8009b50:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b52:	6979      	ldr	r1, [r7, #20]
 8009b54:	69ba      	ldr	r2, [r7, #24]
 8009b56:	e841 2300 	strex	r3, r2, [r1]
 8009b5a:	613b      	str	r3, [r7, #16]
   return(result);
 8009b5c:	693b      	ldr	r3, [r7, #16]
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d1e5      	bne.n	8009b2e <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	2220      	movs	r2, #32
 8009b66:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8009b6a:	bf00      	nop
 8009b6c:	373c      	adds	r7, #60	@ 0x3c
 8009b6e:	46bd      	mov	sp, r7
 8009b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b74:	4770      	bx	lr

08009b76 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009b76:	b480      	push	{r7}
 8009b78:	b095      	sub	sp, #84	@ 0x54
 8009b7a:	af00      	add	r7, sp, #0
 8009b7c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b86:	e853 3f00 	ldrex	r3, [r3]
 8009b8a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009b8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b8e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009b92:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	461a      	mov	r2, r3
 8009b9a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009b9c:	643b      	str	r3, [r7, #64]	@ 0x40
 8009b9e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ba0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009ba2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009ba4:	e841 2300 	strex	r3, r2, [r1]
 8009ba8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009baa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d1e6      	bne.n	8009b7e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	3308      	adds	r3, #8
 8009bb6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bb8:	6a3b      	ldr	r3, [r7, #32]
 8009bba:	e853 3f00 	ldrex	r3, [r3]
 8009bbe:	61fb      	str	r3, [r7, #28]
   return(result);
 8009bc0:	69fb      	ldr	r3, [r7, #28]
 8009bc2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009bc6:	f023 0301 	bic.w	r3, r3, #1
 8009bca:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	3308      	adds	r3, #8
 8009bd2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009bd4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009bd6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bd8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009bda:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009bdc:	e841 2300 	strex	r3, r2, [r1]
 8009be0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009be2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d1e3      	bne.n	8009bb0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009bec:	2b01      	cmp	r3, #1
 8009bee:	d118      	bne.n	8009c22 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	e853 3f00 	ldrex	r3, [r3]
 8009bfc:	60bb      	str	r3, [r7, #8]
   return(result);
 8009bfe:	68bb      	ldr	r3, [r7, #8]
 8009c00:	f023 0310 	bic.w	r3, r3, #16
 8009c04:	647b      	str	r3, [r7, #68]	@ 0x44
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	461a      	mov	r2, r3
 8009c0c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009c0e:	61bb      	str	r3, [r7, #24]
 8009c10:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c12:	6979      	ldr	r1, [r7, #20]
 8009c14:	69ba      	ldr	r2, [r7, #24]
 8009c16:	e841 2300 	strex	r3, r2, [r1]
 8009c1a:	613b      	str	r3, [r7, #16]
   return(result);
 8009c1c:	693b      	ldr	r3, [r7, #16]
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d1e6      	bne.n	8009bf0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	2220      	movs	r2, #32
 8009c26:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	2200      	movs	r2, #0
 8009c2e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	2200      	movs	r2, #0
 8009c34:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8009c36:	bf00      	nop
 8009c38:	3754      	adds	r7, #84	@ 0x54
 8009c3a:	46bd      	mov	sp, r7
 8009c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c40:	4770      	bx	lr

08009c42 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009c42:	b580      	push	{r7, lr}
 8009c44:	b090      	sub	sp, #64	@ 0x40
 8009c46:	af00      	add	r7, sp, #0
 8009c48:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c4e:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	f003 0320 	and.w	r3, r3, #32
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d137      	bne.n	8009cce <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8009c5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009c60:	2200      	movs	r2, #0
 8009c62:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009c66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	3308      	adds	r3, #8
 8009c6c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c70:	e853 3f00 	ldrex	r3, [r3]
 8009c74:	623b      	str	r3, [r7, #32]
   return(result);
 8009c76:	6a3b      	ldr	r3, [r7, #32]
 8009c78:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009c7c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009c7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	3308      	adds	r3, #8
 8009c84:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009c86:	633a      	str	r2, [r7, #48]	@ 0x30
 8009c88:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c8a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009c8c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009c8e:	e841 2300 	strex	r3, r2, [r1]
 8009c92:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009c94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d1e5      	bne.n	8009c66 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009c9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ca0:	693b      	ldr	r3, [r7, #16]
 8009ca2:	e853 3f00 	ldrex	r3, [r3]
 8009ca6:	60fb      	str	r3, [r7, #12]
   return(result);
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009cae:	637b      	str	r3, [r7, #52]	@ 0x34
 8009cb0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	461a      	mov	r2, r3
 8009cb6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009cb8:	61fb      	str	r3, [r7, #28]
 8009cba:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cbc:	69b9      	ldr	r1, [r7, #24]
 8009cbe:	69fa      	ldr	r2, [r7, #28]
 8009cc0:	e841 2300 	strex	r3, r2, [r1]
 8009cc4:	617b      	str	r3, [r7, #20]
   return(result);
 8009cc6:	697b      	ldr	r3, [r7, #20]
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d1e6      	bne.n	8009c9a <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009ccc:	e004      	b.n	8009cd8 <UART_DMATransmitCplt+0x96>
    huart->TxCpltCallback(huart);
 8009cce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009cd0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009cd4:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8009cd6:	4798      	blx	r3
}
 8009cd8:	bf00      	nop
 8009cda:	3740      	adds	r7, #64	@ 0x40
 8009cdc:	46bd      	mov	sp, r7
 8009cde:	bd80      	pop	{r7, pc}

08009ce0 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009ce0:	b580      	push	{r7, lr}
 8009ce2:	b084      	sub	sp, #16
 8009ce4:	af00      	add	r7, sp, #0
 8009ce6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009cec:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009cf4:	68f8      	ldr	r0, [r7, #12]
 8009cf6:	4798      	blx	r3
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009cf8:	bf00      	nop
 8009cfa:	3710      	adds	r7, #16
 8009cfc:	46bd      	mov	sp, r7
 8009cfe:	bd80      	pop	{r7, pc}

08009d00 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009d00:	b580      	push	{r7, lr}
 8009d02:	b086      	sub	sp, #24
 8009d04:	af00      	add	r7, sp, #0
 8009d06:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d0c:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8009d0e:	697b      	ldr	r3, [r7, #20]
 8009d10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009d14:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8009d16:	697b      	ldr	r3, [r7, #20]
 8009d18:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009d1c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8009d1e:	697b      	ldr	r3, [r7, #20]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	689b      	ldr	r3, [r3, #8]
 8009d24:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009d28:	2b80      	cmp	r3, #128	@ 0x80
 8009d2a:	d109      	bne.n	8009d40 <UART_DMAError+0x40>
 8009d2c:	693b      	ldr	r3, [r7, #16]
 8009d2e:	2b21      	cmp	r3, #33	@ 0x21
 8009d30:	d106      	bne.n	8009d40 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8009d32:	697b      	ldr	r3, [r7, #20]
 8009d34:	2200      	movs	r2, #0
 8009d36:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8009d3a:	6978      	ldr	r0, [r7, #20]
 8009d3c:	f7ff feda 	bl	8009af4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8009d40:	697b      	ldr	r3, [r7, #20]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	689b      	ldr	r3, [r3, #8]
 8009d46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009d4a:	2b40      	cmp	r3, #64	@ 0x40
 8009d4c:	d109      	bne.n	8009d62 <UART_DMAError+0x62>
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	2b22      	cmp	r3, #34	@ 0x22
 8009d52:	d106      	bne.n	8009d62 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8009d54:	697b      	ldr	r3, [r7, #20]
 8009d56:	2200      	movs	r2, #0
 8009d58:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8009d5c:	6978      	ldr	r0, [r7, #20]
 8009d5e:	f7ff ff0a 	bl	8009b76 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009d62:	697b      	ldr	r3, [r7, #20]
 8009d64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009d68:	f043 0210 	orr.w	r2, r3, #16
 8009d6c:	697b      	ldr	r3, [r7, #20]
 8009d6e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8009d72:	697b      	ldr	r3, [r7, #20]
 8009d74:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009d78:	6978      	ldr	r0, [r7, #20]
 8009d7a:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009d7c:	bf00      	nop
 8009d7e:	3718      	adds	r7, #24
 8009d80:	46bd      	mov	sp, r7
 8009d82:	bd80      	pop	{r7, pc}

08009d84 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009d84:	b580      	push	{r7, lr}
 8009d86:	b084      	sub	sp, #16
 8009d88:	af00      	add	r7, sp, #0
 8009d8a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d90:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	2200      	movs	r2, #0
 8009d96:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009da0:	68f8      	ldr	r0, [r7, #12]
 8009da2:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009da4:	bf00      	nop
 8009da6:	3710      	adds	r7, #16
 8009da8:	46bd      	mov	sp, r7
 8009daa:	bd80      	pop	{r7, pc}

08009dac <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009dac:	b580      	push	{r7, lr}
 8009dae:	b088      	sub	sp, #32
 8009db0:	af00      	add	r7, sp, #0
 8009db2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	e853 3f00 	ldrex	r3, [r3]
 8009dc0:	60bb      	str	r3, [r7, #8]
   return(result);
 8009dc2:	68bb      	ldr	r3, [r7, #8]
 8009dc4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009dc8:	61fb      	str	r3, [r7, #28]
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	461a      	mov	r2, r3
 8009dd0:	69fb      	ldr	r3, [r7, #28]
 8009dd2:	61bb      	str	r3, [r7, #24]
 8009dd4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dd6:	6979      	ldr	r1, [r7, #20]
 8009dd8:	69ba      	ldr	r2, [r7, #24]
 8009dda:	e841 2300 	strex	r3, r2, [r1]
 8009dde:	613b      	str	r3, [r7, #16]
   return(result);
 8009de0:	693b      	ldr	r3, [r7, #16]
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d1e6      	bne.n	8009db4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	2220      	movs	r2, #32
 8009dea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	2200      	movs	r2, #0
 8009df2:	679a      	str	r2, [r3, #120]	@ 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009dfa:	6878      	ldr	r0, [r7, #4]
 8009dfc:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009dfe:	bf00      	nop
 8009e00:	3720      	adds	r7, #32
 8009e02:	46bd      	mov	sp, r7
 8009e04:	bd80      	pop	{r7, pc}
	...

08009e08 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8009e08:	b580      	push	{r7, lr}
 8009e0a:	b09c      	sub	sp, #112	@ 0x70
 8009e0c:	af00      	add	r7, sp, #0
 8009e0e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009e16:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009e20:	2b22      	cmp	r3, #34	@ 0x22
 8009e22:	f040 80c2 	bne.w	8009faa <UART_RxISR_8BIT+0x1a2>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e2c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009e30:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8009e34:	b2d9      	uxtb	r1, r3
 8009e36:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8009e3a:	b2da      	uxtb	r2, r3
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009e40:	400a      	ands	r2, r1
 8009e42:	b2d2      	uxtb	r2, r2
 8009e44:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009e4a:	1c5a      	adds	r2, r3, #1
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009e56:	b29b      	uxth	r3, r3
 8009e58:	3b01      	subs	r3, #1
 8009e5a:	b29a      	uxth	r2, r3
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009e68:	b29b      	uxth	r3, r3
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	f040 80a5 	bne.w	8009fba <UART_RxISR_8BIT+0x1b2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e76:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009e78:	e853 3f00 	ldrex	r3, [r3]
 8009e7c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009e7e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009e80:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009e84:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	461a      	mov	r2, r3
 8009e8c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009e8e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009e90:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e92:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009e94:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009e96:	e841 2300 	strex	r3, r2, [r1]
 8009e9a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009e9c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d1e6      	bne.n	8009e70 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	3308      	adds	r3, #8
 8009ea8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009eaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009eac:	e853 3f00 	ldrex	r3, [r3]
 8009eb0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009eb2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009eb4:	f023 0301 	bic.w	r3, r3, #1
 8009eb8:	667b      	str	r3, [r7, #100]	@ 0x64
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	3308      	adds	r3, #8
 8009ec0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8009ec2:	647a      	str	r2, [r7, #68]	@ 0x44
 8009ec4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ec6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009ec8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009eca:	e841 2300 	strex	r3, r2, [r1]
 8009ece:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009ed0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d1e5      	bne.n	8009ea2 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	2220      	movs	r2, #32
 8009eda:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	2200      	movs	r2, #0
 8009ee2:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	2200      	movs	r2, #0
 8009ee8:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	4a35      	ldr	r2, [pc, #212]	@ (8009fc4 <UART_RxISR_8BIT+0x1bc>)
 8009ef0:	4293      	cmp	r3, r2
 8009ef2:	d01f      	beq.n	8009f34 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	685b      	ldr	r3, [r3, #4]
 8009efa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d018      	beq.n	8009f34 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f0a:	e853 3f00 	ldrex	r3, [r3]
 8009f0e:	623b      	str	r3, [r7, #32]
   return(result);
 8009f10:	6a3b      	ldr	r3, [r7, #32]
 8009f12:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009f16:	663b      	str	r3, [r7, #96]	@ 0x60
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	461a      	mov	r2, r3
 8009f1e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009f20:	633b      	str	r3, [r7, #48]	@ 0x30
 8009f22:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f24:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009f26:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009f28:	e841 2300 	strex	r3, r2, [r1]
 8009f2c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009f2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d1e6      	bne.n	8009f02 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009f38:	2b01      	cmp	r3, #1
 8009f3a:	d130      	bne.n	8009f9e <UART_RxISR_8BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	2200      	movs	r2, #0
 8009f40:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f48:	693b      	ldr	r3, [r7, #16]
 8009f4a:	e853 3f00 	ldrex	r3, [r3]
 8009f4e:	60fb      	str	r3, [r7, #12]
   return(result);
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	f023 0310 	bic.w	r3, r3, #16
 8009f56:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	461a      	mov	r2, r3
 8009f5e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009f60:	61fb      	str	r3, [r7, #28]
 8009f62:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f64:	69b9      	ldr	r1, [r7, #24]
 8009f66:	69fa      	ldr	r2, [r7, #28]
 8009f68:	e841 2300 	strex	r3, r2, [r1]
 8009f6c:	617b      	str	r3, [r7, #20]
   return(result);
 8009f6e:	697b      	ldr	r3, [r7, #20]
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d1e6      	bne.n	8009f42 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	69db      	ldr	r3, [r3, #28]
 8009f7a:	f003 0310 	and.w	r3, r3, #16
 8009f7e:	2b10      	cmp	r3, #16
 8009f80:	d103      	bne.n	8009f8a <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	2210      	movs	r2, #16
 8009f88:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8009f90:	687a      	ldr	r2, [r7, #4]
 8009f92:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 8009f96:	4611      	mov	r1, r2
 8009f98:	6878      	ldr	r0, [r7, #4]
 8009f9a:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009f9c:	e00d      	b.n	8009fba <UART_RxISR_8BIT+0x1b2>
        huart->RxCpltCallback(huart);
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009fa4:	6878      	ldr	r0, [r7, #4]
 8009fa6:	4798      	blx	r3
}
 8009fa8:	e007      	b.n	8009fba <UART_RxISR_8BIT+0x1b2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	699a      	ldr	r2, [r3, #24]
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	f042 0208 	orr.w	r2, r2, #8
 8009fb8:	619a      	str	r2, [r3, #24]
}
 8009fba:	bf00      	nop
 8009fbc:	3770      	adds	r7, #112	@ 0x70
 8009fbe:	46bd      	mov	sp, r7
 8009fc0:	bd80      	pop	{r7, pc}
 8009fc2:	bf00      	nop
 8009fc4:	40008000 	.word	0x40008000

08009fc8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009fc8:	b580      	push	{r7, lr}
 8009fca:	b09c      	sub	sp, #112	@ 0x70
 8009fcc:	af00      	add	r7, sp, #0
 8009fce:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009fd6:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009fe0:	2b22      	cmp	r3, #34	@ 0x22
 8009fe2:	f040 80c2 	bne.w	800a16a <UART_RxISR_16BIT+0x1a2>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009fec:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009ff4:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8009ff6:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8009ffa:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8009ffe:	4013      	ands	r3, r2
 800a000:	b29a      	uxth	r2, r3
 800a002:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a004:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a00a:	1c9a      	adds	r2, r3, #2
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a016:	b29b      	uxth	r3, r3
 800a018:	3b01      	subs	r3, #1
 800a01a:	b29a      	uxth	r2, r3
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a028:	b29b      	uxth	r3, r3
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	f040 80a5 	bne.w	800a17a <UART_RxISR_16BIT+0x1b2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a036:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a038:	e853 3f00 	ldrex	r3, [r3]
 800a03c:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800a03e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a040:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a044:	667b      	str	r3, [r7, #100]	@ 0x64
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	461a      	mov	r2, r3
 800a04c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a04e:	657b      	str	r3, [r7, #84]	@ 0x54
 800a050:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a052:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800a054:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a056:	e841 2300 	strex	r3, r2, [r1]
 800a05a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800a05c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d1e6      	bne.n	800a030 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	3308      	adds	r3, #8
 800a068:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a06a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a06c:	e853 3f00 	ldrex	r3, [r3]
 800a070:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a072:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a074:	f023 0301 	bic.w	r3, r3, #1
 800a078:	663b      	str	r3, [r7, #96]	@ 0x60
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	3308      	adds	r3, #8
 800a080:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800a082:	643a      	str	r2, [r7, #64]	@ 0x40
 800a084:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a086:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a088:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a08a:	e841 2300 	strex	r3, r2, [r1]
 800a08e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a090:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a092:	2b00      	cmp	r3, #0
 800a094:	d1e5      	bne.n	800a062 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	2220      	movs	r2, #32
 800a09a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	2200      	movs	r2, #0
 800a0a2:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	2200      	movs	r2, #0
 800a0a8:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	4a35      	ldr	r2, [pc, #212]	@ (800a184 <UART_RxISR_16BIT+0x1bc>)
 800a0b0:	4293      	cmp	r3, r2
 800a0b2:	d01f      	beq.n	800a0f4 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	685b      	ldr	r3, [r3, #4]
 800a0ba:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d018      	beq.n	800a0f4 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0c8:	6a3b      	ldr	r3, [r7, #32]
 800a0ca:	e853 3f00 	ldrex	r3, [r3]
 800a0ce:	61fb      	str	r3, [r7, #28]
   return(result);
 800a0d0:	69fb      	ldr	r3, [r7, #28]
 800a0d2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a0d6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	461a      	mov	r2, r3
 800a0de:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a0e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a0e2:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0e4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a0e6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a0e8:	e841 2300 	strex	r3, r2, [r1]
 800a0ec:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a0ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d1e6      	bne.n	800a0c2 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a0f8:	2b01      	cmp	r3, #1
 800a0fa:	d130      	bne.n	800a15e <UART_RxISR_16BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	2200      	movs	r2, #0
 800a100:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	e853 3f00 	ldrex	r3, [r3]
 800a10e:	60bb      	str	r3, [r7, #8]
   return(result);
 800a110:	68bb      	ldr	r3, [r7, #8]
 800a112:	f023 0310 	bic.w	r3, r3, #16
 800a116:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	461a      	mov	r2, r3
 800a11e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a120:	61bb      	str	r3, [r7, #24]
 800a122:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a124:	6979      	ldr	r1, [r7, #20]
 800a126:	69ba      	ldr	r2, [r7, #24]
 800a128:	e841 2300 	strex	r3, r2, [r1]
 800a12c:	613b      	str	r3, [r7, #16]
   return(result);
 800a12e:	693b      	ldr	r3, [r7, #16]
 800a130:	2b00      	cmp	r3, #0
 800a132:	d1e6      	bne.n	800a102 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	69db      	ldr	r3, [r3, #28]
 800a13a:	f003 0310 	and.w	r3, r3, #16
 800a13e:	2b10      	cmp	r3, #16
 800a140:	d103      	bne.n	800a14a <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	2210      	movs	r2, #16
 800a148:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800a150:	687a      	ldr	r2, [r7, #4]
 800a152:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800a156:	4611      	mov	r1, r2
 800a158:	6878      	ldr	r0, [r7, #4]
 800a15a:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a15c:	e00d      	b.n	800a17a <UART_RxISR_16BIT+0x1b2>
        huart->RxCpltCallback(huart);
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800a164:	6878      	ldr	r0, [r7, #4]
 800a166:	4798      	blx	r3
}
 800a168:	e007      	b.n	800a17a <UART_RxISR_16BIT+0x1b2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	699a      	ldr	r2, [r3, #24]
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	f042 0208 	orr.w	r2, r2, #8
 800a178:	619a      	str	r2, [r3, #24]
}
 800a17a:	bf00      	nop
 800a17c:	3770      	adds	r7, #112	@ 0x70
 800a17e:	46bd      	mov	sp, r7
 800a180:	bd80      	pop	{r7, pc}
 800a182:	bf00      	nop
 800a184:	40008000 	.word	0x40008000

0800a188 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800a188:	b580      	push	{r7, lr}
 800a18a:	b0ac      	sub	sp, #176	@ 0xb0
 800a18c:	af00      	add	r7, sp, #0
 800a18e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800a196:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	69db      	ldr	r3, [r3, #28]
 800a1a0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	689b      	ldr	r3, [r3, #8]
 800a1b4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a1be:	2b22      	cmp	r3, #34	@ 0x22
 800a1c0:	f040 8189 	bne.w	800a4d6 <UART_RxISR_8BIT_FIFOEN+0x34e>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800a1ca:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a1ce:	e12c      	b.n	800a42a <UART_RxISR_8BIT_FIFOEN+0x2a2>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a1d6:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800a1da:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800a1de:	b2d9      	uxtb	r1, r3
 800a1e0:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 800a1e4:	b2da      	uxtb	r2, r3
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a1ea:	400a      	ands	r2, r1
 800a1ec:	b2d2      	uxtb	r2, r2
 800a1ee:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a1f4:	1c5a      	adds	r2, r3, #1
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a200:	b29b      	uxth	r3, r3
 800a202:	3b01      	subs	r3, #1
 800a204:	b29a      	uxth	r2, r3
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	69db      	ldr	r3, [r3, #28]
 800a212:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800a216:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a21a:	f003 0307 	and.w	r3, r3, #7
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d055      	beq.n	800a2ce <UART_RxISR_8BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a222:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a226:	f003 0301 	and.w	r3, r3, #1
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d011      	beq.n	800a252 <UART_RxISR_8BIT_FIFOEN+0xca>
 800a22e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800a232:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a236:	2b00      	cmp	r3, #0
 800a238:	d00b      	beq.n	800a252 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	2201      	movs	r2, #1
 800a240:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a248:	f043 0201 	orr.w	r2, r3, #1
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a252:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a256:	f003 0302 	and.w	r3, r3, #2
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d011      	beq.n	800a282 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800a25e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a262:	f003 0301 	and.w	r3, r3, #1
 800a266:	2b00      	cmp	r3, #0
 800a268:	d00b      	beq.n	800a282 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	2202      	movs	r2, #2
 800a270:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a278:	f043 0204 	orr.w	r2, r3, #4
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a282:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a286:	f003 0304 	and.w	r3, r3, #4
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d011      	beq.n	800a2b2 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800a28e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a292:	f003 0301 	and.w	r3, r3, #1
 800a296:	2b00      	cmp	r3, #0
 800a298:	d00b      	beq.n	800a2b2 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	2204      	movs	r2, #4
 800a2a0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a2a8:	f043 0202 	orr.w	r2, r3, #2
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d008      	beq.n	800a2ce <UART_RxISR_8BIT_FIFOEN+0x146>
        {
          /* Non Blocking error : transfer could go on.
          Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a2c2:	6878      	ldr	r0, [r7, #4]
 800a2c4:	4798      	blx	r3
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	2200      	movs	r2, #0
 800a2ca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a2d4:	b29b      	uxth	r3, r3
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	f040 80a7 	bne.w	800a42a <UART_RxISR_8BIT_FIFOEN+0x2a2>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2e2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a2e4:	e853 3f00 	ldrex	r3, [r3]
 800a2e8:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 800a2ea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a2ec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a2f0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	461a      	mov	r2, r3
 800a2fa:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a2fe:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800a300:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a302:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800a304:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800a306:	e841 2300 	strex	r3, r2, [r1]
 800a30a:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 800a30c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d1e4      	bne.n	800a2dc <UART_RxISR_8BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	3308      	adds	r3, #8
 800a318:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a31a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a31c:	e853 3f00 	ldrex	r3, [r3]
 800a320:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800a322:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a324:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a328:	f023 0301 	bic.w	r3, r3, #1
 800a32c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	3308      	adds	r3, #8
 800a336:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800a33a:	66ba      	str	r2, [r7, #104]	@ 0x68
 800a33c:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a33e:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800a340:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800a342:	e841 2300 	strex	r3, r2, [r1]
 800a346:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800a348:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d1e1      	bne.n	800a312 <UART_RxISR_8BIT_FIFOEN+0x18a>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	2220      	movs	r2, #32
 800a352:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	2200      	movs	r2, #0
 800a35a:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	2200      	movs	r2, #0
 800a360:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	4a62      	ldr	r2, [pc, #392]	@ (800a4f0 <UART_RxISR_8BIT_FIFOEN+0x368>)
 800a368:	4293      	cmp	r3, r2
 800a36a:	d021      	beq.n	800a3b0 <UART_RxISR_8BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	685b      	ldr	r3, [r3, #4]
 800a372:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a376:	2b00      	cmp	r3, #0
 800a378:	d01a      	beq.n	800a3b0 <UART_RxISR_8BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a380:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a382:	e853 3f00 	ldrex	r3, [r3]
 800a386:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800a388:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a38a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a38e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	461a      	mov	r2, r3
 800a398:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a39c:	657b      	str	r3, [r7, #84]	@ 0x54
 800a39e:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3a0:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800a3a2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a3a4:	e841 2300 	strex	r3, r2, [r1]
 800a3a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800a3aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d1e4      	bne.n	800a37a <UART_RxISR_8BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a3b4:	2b01      	cmp	r3, #1
 800a3b6:	d132      	bne.n	800a41e <UART_RxISR_8BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	2200      	movs	r2, #0
 800a3bc:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a3c6:	e853 3f00 	ldrex	r3, [r3]
 800a3ca:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a3cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3ce:	f023 0310 	bic.w	r3, r3, #16
 800a3d2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	461a      	mov	r2, r3
 800a3dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a3e0:	643b      	str	r3, [r7, #64]	@ 0x40
 800a3e2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3e4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a3e6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a3e8:	e841 2300 	strex	r3, r2, [r1]
 800a3ec:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a3ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d1e4      	bne.n	800a3be <UART_RxISR_8BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	69db      	ldr	r3, [r3, #28]
 800a3fa:	f003 0310 	and.w	r3, r3, #16
 800a3fe:	2b10      	cmp	r3, #16
 800a400:	d103      	bne.n	800a40a <UART_RxISR_8BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	2210      	movs	r2, #16
 800a408:	621a      	str	r2, [r3, #32]
          }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800a410:	687a      	ldr	r2, [r7, #4]
 800a412:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800a416:	4611      	mov	r1, r2
 800a418:	6878      	ldr	r0, [r7, #4]
 800a41a:	4798      	blx	r3
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 800a41c:	e010      	b.n	800a440 <UART_RxISR_8BIT_FIFOEN+0x2b8>
          huart->RxCpltCallback(huart);
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800a424:	6878      	ldr	r0, [r7, #4]
 800a426:	4798      	blx	r3
        break;
 800a428:	e00a      	b.n	800a440 <UART_RxISR_8BIT_FIFOEN+0x2b8>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a42a:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d006      	beq.n	800a440 <UART_RxISR_8BIT_FIFOEN+0x2b8>
 800a432:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a436:	f003 0320 	and.w	r3, r3, #32
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	f47f aec8 	bne.w	800a1d0 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a446:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800a44a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d049      	beq.n	800a4e6 <UART_RxISR_8BIT_FIFOEN+0x35e>
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800a458:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800a45c:	429a      	cmp	r2, r3
 800a45e:	d242      	bcs.n	800a4e6 <UART_RxISR_8BIT_FIFOEN+0x35e>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	3308      	adds	r3, #8
 800a466:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a468:	6a3b      	ldr	r3, [r7, #32]
 800a46a:	e853 3f00 	ldrex	r3, [r3]
 800a46e:	61fb      	str	r3, [r7, #28]
   return(result);
 800a470:	69fb      	ldr	r3, [r7, #28]
 800a472:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a476:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	3308      	adds	r3, #8
 800a480:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800a484:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a486:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a488:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a48a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a48c:	e841 2300 	strex	r3, r2, [r1]
 800a490:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a492:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a494:	2b00      	cmp	r3, #0
 800a496:	d1e3      	bne.n	800a460 <UART_RxISR_8BIT_FIFOEN+0x2d8>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	4a16      	ldr	r2, [pc, #88]	@ (800a4f4 <UART_RxISR_8BIT_FIFOEN+0x36c>)
 800a49c:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	e853 3f00 	ldrex	r3, [r3]
 800a4aa:	60bb      	str	r3, [r7, #8]
   return(result);
 800a4ac:	68bb      	ldr	r3, [r7, #8]
 800a4ae:	f043 0320 	orr.w	r3, r3, #32
 800a4b2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	461a      	mov	r2, r3
 800a4bc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800a4c0:	61bb      	str	r3, [r7, #24]
 800a4c2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4c4:	6979      	ldr	r1, [r7, #20]
 800a4c6:	69ba      	ldr	r2, [r7, #24]
 800a4c8:	e841 2300 	strex	r3, r2, [r1]
 800a4cc:	613b      	str	r3, [r7, #16]
   return(result);
 800a4ce:	693b      	ldr	r3, [r7, #16]
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d1e4      	bne.n	800a49e <UART_RxISR_8BIT_FIFOEN+0x316>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a4d4:	e007      	b.n	800a4e6 <UART_RxISR_8BIT_FIFOEN+0x35e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	699a      	ldr	r2, [r3, #24]
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	f042 0208 	orr.w	r2, r2, #8
 800a4e4:	619a      	str	r2, [r3, #24]
}
 800a4e6:	bf00      	nop
 800a4e8:	37b0      	adds	r7, #176	@ 0xb0
 800a4ea:	46bd      	mov	sp, r7
 800a4ec:	bd80      	pop	{r7, pc}
 800a4ee:	bf00      	nop
 800a4f0:	40008000 	.word	0x40008000
 800a4f4:	08009e09 	.word	0x08009e09

0800a4f8 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800a4f8:	b580      	push	{r7, lr}
 800a4fa:	b0ae      	sub	sp, #184	@ 0xb8
 800a4fc:	af00      	add	r7, sp, #0
 800a4fe:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800a506:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	69db      	ldr	r3, [r3, #28]
 800a510:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	689b      	ldr	r3, [r3, #8]
 800a524:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a52e:	2b22      	cmp	r3, #34	@ 0x22
 800a530:	f040 818d 	bne.w	800a84e <UART_RxISR_16BIT_FIFOEN+0x356>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800a53a:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a53e:	e130      	b.n	800a7a2 <UART_RxISR_16BIT_FIFOEN+0x2aa>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a546:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a54e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800a552:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800a556:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800a55a:	4013      	ands	r3, r2
 800a55c:	b29a      	uxth	r2, r3
 800a55e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a562:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a568:	1c9a      	adds	r2, r3, #2
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a574:	b29b      	uxth	r3, r3
 800a576:	3b01      	subs	r3, #1
 800a578:	b29a      	uxth	r2, r3
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	69db      	ldr	r3, [r3, #28]
 800a586:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800a58a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a58e:	f003 0307 	and.w	r3, r3, #7
 800a592:	2b00      	cmp	r3, #0
 800a594:	d055      	beq.n	800a642 <UART_RxISR_16BIT_FIFOEN+0x14a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a596:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a59a:	f003 0301 	and.w	r3, r3, #1
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d011      	beq.n	800a5c6 <UART_RxISR_16BIT_FIFOEN+0xce>
 800a5a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a5a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d00b      	beq.n	800a5c6 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	2201      	movs	r2, #1
 800a5b4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a5bc:	f043 0201 	orr.w	r2, r3, #1
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a5c6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a5ca:	f003 0302 	and.w	r3, r3, #2
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d011      	beq.n	800a5f6 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800a5d2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a5d6:	f003 0301 	and.w	r3, r3, #1
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d00b      	beq.n	800a5f6 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	2202      	movs	r2, #2
 800a5e4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a5ec:	f043 0204 	orr.w	r2, r3, #4
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a5f6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a5fa:	f003 0304 	and.w	r3, r3, #4
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d011      	beq.n	800a626 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800a602:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a606:	f003 0301 	and.w	r3, r3, #1
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d00b      	beq.n	800a626 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	2204      	movs	r2, #4
 800a614:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a61c:	f043 0202 	orr.w	r2, r3, #2
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d008      	beq.n	800a642 <UART_RxISR_16BIT_FIFOEN+0x14a>
        {
          /* Non Blocking error : transfer could go on.
          Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a636:	6878      	ldr	r0, [r7, #4]
 800a638:	4798      	blx	r3
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	2200      	movs	r2, #0
 800a63e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a648:	b29b      	uxth	r3, r3
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	f040 80a9 	bne.w	800a7a2 <UART_RxISR_16BIT_FIFOEN+0x2aa>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a656:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a658:	e853 3f00 	ldrex	r3, [r3]
 800a65c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800a65e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a660:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a664:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	461a      	mov	r2, r3
 800a66e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a672:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a676:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a678:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800a67a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800a67e:	e841 2300 	strex	r3, r2, [r1]
 800a682:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800a684:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a686:	2b00      	cmp	r3, #0
 800a688:	d1e2      	bne.n	800a650 <UART_RxISR_16BIT_FIFOEN+0x158>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	3308      	adds	r3, #8
 800a690:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a692:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a694:	e853 3f00 	ldrex	r3, [r3]
 800a698:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800a69a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a69c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a6a0:	f023 0301 	bic.w	r3, r3, #1
 800a6a4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	3308      	adds	r3, #8
 800a6ae:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800a6b2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800a6b4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6b6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800a6b8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800a6ba:	e841 2300 	strex	r3, r2, [r1]
 800a6be:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800a6c0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d1e1      	bne.n	800a68a <UART_RxISR_16BIT_FIFOEN+0x192>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	2220      	movs	r2, #32
 800a6ca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	2200      	movs	r2, #0
 800a6d2:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	2200      	movs	r2, #0
 800a6d8:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	4a62      	ldr	r2, [pc, #392]	@ (800a868 <UART_RxISR_16BIT_FIFOEN+0x370>)
 800a6e0:	4293      	cmp	r3, r2
 800a6e2:	d021      	beq.n	800a728 <UART_RxISR_16BIT_FIFOEN+0x230>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	685b      	ldr	r3, [r3, #4]
 800a6ea:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d01a      	beq.n	800a728 <UART_RxISR_16BIT_FIFOEN+0x230>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6f8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a6fa:	e853 3f00 	ldrex	r3, [r3]
 800a6fe:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a700:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a702:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a706:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	461a      	mov	r2, r3
 800a710:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800a714:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a716:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a718:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a71a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a71c:	e841 2300 	strex	r3, r2, [r1]
 800a720:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a722:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a724:	2b00      	cmp	r3, #0
 800a726:	d1e4      	bne.n	800a6f2 <UART_RxISR_16BIT_FIFOEN+0x1fa>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a72c:	2b01      	cmp	r3, #1
 800a72e:	d132      	bne.n	800a796 <UART_RxISR_16BIT_FIFOEN+0x29e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	2200      	movs	r2, #0
 800a734:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a73c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a73e:	e853 3f00 	ldrex	r3, [r3]
 800a742:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a744:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a746:	f023 0310 	bic.w	r3, r3, #16
 800a74a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	461a      	mov	r2, r3
 800a754:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a758:	647b      	str	r3, [r7, #68]	@ 0x44
 800a75a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a75c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a75e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a760:	e841 2300 	strex	r3, r2, [r1]
 800a764:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a766:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d1e4      	bne.n	800a736 <UART_RxISR_16BIT_FIFOEN+0x23e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	69db      	ldr	r3, [r3, #28]
 800a772:	f003 0310 	and.w	r3, r3, #16
 800a776:	2b10      	cmp	r3, #16
 800a778:	d103      	bne.n	800a782 <UART_RxISR_16BIT_FIFOEN+0x28a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	2210      	movs	r2, #16
 800a780:	621a      	str	r2, [r3, #32]
          }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800a788:	687a      	ldr	r2, [r7, #4]
 800a78a:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800a78e:	4611      	mov	r1, r2
 800a790:	6878      	ldr	r0, [r7, #4]
 800a792:	4798      	blx	r3
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 800a794:	e010      	b.n	800a7b8 <UART_RxISR_16BIT_FIFOEN+0x2c0>
          huart->RxCpltCallback(huart);
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800a79c:	6878      	ldr	r0, [r7, #4]
 800a79e:	4798      	blx	r3
        break;
 800a7a0:	e00a      	b.n	800a7b8 <UART_RxISR_16BIT_FIFOEN+0x2c0>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a7a2:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d006      	beq.n	800a7b8 <UART_RxISR_16BIT_FIFOEN+0x2c0>
 800a7aa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a7ae:	f003 0320 	and.w	r3, r3, #32
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	f47f aec4 	bne.w	800a540 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a7be:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800a7c2:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d049      	beq.n	800a85e <UART_RxISR_16BIT_FIFOEN+0x366>
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800a7d0:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800a7d4:	429a      	cmp	r2, r3
 800a7d6:	d242      	bcs.n	800a85e <UART_RxISR_16BIT_FIFOEN+0x366>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	3308      	adds	r3, #8
 800a7de:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7e2:	e853 3f00 	ldrex	r3, [r3]
 800a7e6:	623b      	str	r3, [r7, #32]
   return(result);
 800a7e8:	6a3b      	ldr	r3, [r7, #32]
 800a7ea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a7ee:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	3308      	adds	r3, #8
 800a7f8:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800a7fc:	633a      	str	r2, [r7, #48]	@ 0x30
 800a7fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a800:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a802:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a804:	e841 2300 	strex	r3, r2, [r1]
 800a808:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a80a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d1e3      	bne.n	800a7d8 <UART_RxISR_16BIT_FIFOEN+0x2e0>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	4a16      	ldr	r2, [pc, #88]	@ (800a86c <UART_RxISR_16BIT_FIFOEN+0x374>)
 800a814:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a81c:	693b      	ldr	r3, [r7, #16]
 800a81e:	e853 3f00 	ldrex	r3, [r3]
 800a822:	60fb      	str	r3, [r7, #12]
   return(result);
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	f043 0320 	orr.w	r3, r3, #32
 800a82a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	461a      	mov	r2, r3
 800a834:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a838:	61fb      	str	r3, [r7, #28]
 800a83a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a83c:	69b9      	ldr	r1, [r7, #24]
 800a83e:	69fa      	ldr	r2, [r7, #28]
 800a840:	e841 2300 	strex	r3, r2, [r1]
 800a844:	617b      	str	r3, [r7, #20]
   return(result);
 800a846:	697b      	ldr	r3, [r7, #20]
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d1e4      	bne.n	800a816 <UART_RxISR_16BIT_FIFOEN+0x31e>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a84c:	e007      	b.n	800a85e <UART_RxISR_16BIT_FIFOEN+0x366>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	699a      	ldr	r2, [r3, #24]
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	f042 0208 	orr.w	r2, r2, #8
 800a85c:	619a      	str	r2, [r3, #24]
}
 800a85e:	bf00      	nop
 800a860:	37b8      	adds	r7, #184	@ 0xb8
 800a862:	46bd      	mov	sp, r7
 800a864:	bd80      	pop	{r7, pc}
 800a866:	bf00      	nop
 800a868:	40008000 	.word	0x40008000
 800a86c:	08009fc9 	.word	0x08009fc9

0800a870 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a870:	b480      	push	{r7}
 800a872:	b083      	sub	sp, #12
 800a874:	af00      	add	r7, sp, #0
 800a876:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a878:	bf00      	nop
 800a87a:	370c      	adds	r7, #12
 800a87c:	46bd      	mov	sp, r7
 800a87e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a882:	4770      	bx	lr

0800a884 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a884:	b480      	push	{r7}
 800a886:	b083      	sub	sp, #12
 800a888:	af00      	add	r7, sp, #0
 800a88a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a88c:	bf00      	nop
 800a88e:	370c      	adds	r7, #12
 800a890:	46bd      	mov	sp, r7
 800a892:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a896:	4770      	bx	lr

0800a898 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a898:	b480      	push	{r7}
 800a89a:	b083      	sub	sp, #12
 800a89c:	af00      	add	r7, sp, #0
 800a89e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a8a0:	bf00      	nop
 800a8a2:	370c      	adds	r7, #12
 800a8a4:	46bd      	mov	sp, r7
 800a8a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8aa:	4770      	bx	lr

0800a8ac <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a8ac:	b480      	push	{r7}
 800a8ae:	b085      	sub	sp, #20
 800a8b0:	af00      	add	r7, sp, #0
 800a8b2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a8ba:	2b01      	cmp	r3, #1
 800a8bc:	d101      	bne.n	800a8c2 <HAL_UARTEx_DisableFifoMode+0x16>
 800a8be:	2302      	movs	r3, #2
 800a8c0:	e027      	b.n	800a912 <HAL_UARTEx_DisableFifoMode+0x66>
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	2201      	movs	r2, #1
 800a8c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	2224      	movs	r2, #36	@ 0x24
 800a8ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	681a      	ldr	r2, [r3, #0]
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	f022 0201 	bic.w	r2, r2, #1
 800a8e8:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800a8f0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	2200      	movs	r2, #0
 800a8f6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	68fa      	ldr	r2, [r7, #12]
 800a8fe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	2220      	movs	r2, #32
 800a904:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	2200      	movs	r2, #0
 800a90c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a910:	2300      	movs	r3, #0
}
 800a912:	4618      	mov	r0, r3
 800a914:	3714      	adds	r7, #20
 800a916:	46bd      	mov	sp, r7
 800a918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a91c:	4770      	bx	lr

0800a91e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a91e:	b580      	push	{r7, lr}
 800a920:	b084      	sub	sp, #16
 800a922:	af00      	add	r7, sp, #0
 800a924:	6078      	str	r0, [r7, #4]
 800a926:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a92e:	2b01      	cmp	r3, #1
 800a930:	d101      	bne.n	800a936 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a932:	2302      	movs	r3, #2
 800a934:	e02d      	b.n	800a992 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	2201      	movs	r2, #1
 800a93a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	2224      	movs	r2, #36	@ 0x24
 800a942:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	681a      	ldr	r2, [r3, #0]
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	f022 0201 	bic.w	r2, r2, #1
 800a95c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	689b      	ldr	r3, [r3, #8]
 800a964:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	683a      	ldr	r2, [r7, #0]
 800a96e:	430a      	orrs	r2, r1
 800a970:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a972:	6878      	ldr	r0, [r7, #4]
 800a974:	f000 f850 	bl	800aa18 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	68fa      	ldr	r2, [r7, #12]
 800a97e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	2220      	movs	r2, #32
 800a984:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	2200      	movs	r2, #0
 800a98c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a990:	2300      	movs	r3, #0
}
 800a992:	4618      	mov	r0, r3
 800a994:	3710      	adds	r7, #16
 800a996:	46bd      	mov	sp, r7
 800a998:	bd80      	pop	{r7, pc}

0800a99a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a99a:	b580      	push	{r7, lr}
 800a99c:	b084      	sub	sp, #16
 800a99e:	af00      	add	r7, sp, #0
 800a9a0:	6078      	str	r0, [r7, #4]
 800a9a2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a9aa:	2b01      	cmp	r3, #1
 800a9ac:	d101      	bne.n	800a9b2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a9ae:	2302      	movs	r3, #2
 800a9b0:	e02d      	b.n	800aa0e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	2201      	movs	r2, #1
 800a9b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	2224      	movs	r2, #36	@ 0x24
 800a9be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	681a      	ldr	r2, [r3, #0]
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	f022 0201 	bic.w	r2, r2, #1
 800a9d8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	689b      	ldr	r3, [r3, #8]
 800a9e0:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	683a      	ldr	r2, [r7, #0]
 800a9ea:	430a      	orrs	r2, r1
 800a9ec:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a9ee:	6878      	ldr	r0, [r7, #4]
 800a9f0:	f000 f812 	bl	800aa18 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	68fa      	ldr	r2, [r7, #12]
 800a9fa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	2220      	movs	r2, #32
 800aa00:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	2200      	movs	r2, #0
 800aa08:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800aa0c:	2300      	movs	r3, #0
}
 800aa0e:	4618      	mov	r0, r3
 800aa10:	3710      	adds	r7, #16
 800aa12:	46bd      	mov	sp, r7
 800aa14:	bd80      	pop	{r7, pc}
	...

0800aa18 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800aa18:	b480      	push	{r7}
 800aa1a:	b085      	sub	sp, #20
 800aa1c:	af00      	add	r7, sp, #0
 800aa1e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d108      	bne.n	800aa3a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	2201      	movs	r2, #1
 800aa2c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	2201      	movs	r2, #1
 800aa34:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800aa38:	e031      	b.n	800aa9e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800aa3a:	2308      	movs	r3, #8
 800aa3c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800aa3e:	2308      	movs	r3, #8
 800aa40:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	689b      	ldr	r3, [r3, #8]
 800aa48:	0e5b      	lsrs	r3, r3, #25
 800aa4a:	b2db      	uxtb	r3, r3
 800aa4c:	f003 0307 	and.w	r3, r3, #7
 800aa50:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	689b      	ldr	r3, [r3, #8]
 800aa58:	0f5b      	lsrs	r3, r3, #29
 800aa5a:	b2db      	uxtb	r3, r3
 800aa5c:	f003 0307 	and.w	r3, r3, #7
 800aa60:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800aa62:	7bbb      	ldrb	r3, [r7, #14]
 800aa64:	7b3a      	ldrb	r2, [r7, #12]
 800aa66:	4911      	ldr	r1, [pc, #68]	@ (800aaac <UARTEx_SetNbDataToProcess+0x94>)
 800aa68:	5c8a      	ldrb	r2, [r1, r2]
 800aa6a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800aa6e:	7b3a      	ldrb	r2, [r7, #12]
 800aa70:	490f      	ldr	r1, [pc, #60]	@ (800aab0 <UARTEx_SetNbDataToProcess+0x98>)
 800aa72:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800aa74:	fb93 f3f2 	sdiv	r3, r3, r2
 800aa78:	b29a      	uxth	r2, r3
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800aa80:	7bfb      	ldrb	r3, [r7, #15]
 800aa82:	7b7a      	ldrb	r2, [r7, #13]
 800aa84:	4909      	ldr	r1, [pc, #36]	@ (800aaac <UARTEx_SetNbDataToProcess+0x94>)
 800aa86:	5c8a      	ldrb	r2, [r1, r2]
 800aa88:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800aa8c:	7b7a      	ldrb	r2, [r7, #13]
 800aa8e:	4908      	ldr	r1, [pc, #32]	@ (800aab0 <UARTEx_SetNbDataToProcess+0x98>)
 800aa90:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800aa92:	fb93 f3f2 	sdiv	r3, r3, r2
 800aa96:	b29a      	uxth	r2, r3
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800aa9e:	bf00      	nop
 800aaa0:	3714      	adds	r7, #20
 800aaa2:	46bd      	mov	sp, r7
 800aaa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa8:	4770      	bx	lr
 800aaaa:	bf00      	nop
 800aaac:	0800abc0 	.word	0x0800abc0
 800aab0:	0800abc8 	.word	0x0800abc8

0800aab4 <memset>:
 800aab4:	4402      	add	r2, r0
 800aab6:	4603      	mov	r3, r0
 800aab8:	4293      	cmp	r3, r2
 800aaba:	d100      	bne.n	800aabe <memset+0xa>
 800aabc:	4770      	bx	lr
 800aabe:	f803 1b01 	strb.w	r1, [r3], #1
 800aac2:	e7f9      	b.n	800aab8 <memset+0x4>

0800aac4 <__errno>:
 800aac4:	4b01      	ldr	r3, [pc, #4]	@ (800aacc <__errno+0x8>)
 800aac6:	6818      	ldr	r0, [r3, #0]
 800aac8:	4770      	bx	lr
 800aaca:	bf00      	nop
 800aacc:	2000021c 	.word	0x2000021c

0800aad0 <__libc_init_array>:
 800aad0:	b570      	push	{r4, r5, r6, lr}
 800aad2:	4d0d      	ldr	r5, [pc, #52]	@ (800ab08 <__libc_init_array+0x38>)
 800aad4:	4c0d      	ldr	r4, [pc, #52]	@ (800ab0c <__libc_init_array+0x3c>)
 800aad6:	1b64      	subs	r4, r4, r5
 800aad8:	10a4      	asrs	r4, r4, #2
 800aada:	2600      	movs	r6, #0
 800aadc:	42a6      	cmp	r6, r4
 800aade:	d109      	bne.n	800aaf4 <__libc_init_array+0x24>
 800aae0:	4d0b      	ldr	r5, [pc, #44]	@ (800ab10 <__libc_init_array+0x40>)
 800aae2:	4c0c      	ldr	r4, [pc, #48]	@ (800ab14 <__libc_init_array+0x44>)
 800aae4:	f000 f848 	bl	800ab78 <_init>
 800aae8:	1b64      	subs	r4, r4, r5
 800aaea:	10a4      	asrs	r4, r4, #2
 800aaec:	2600      	movs	r6, #0
 800aaee:	42a6      	cmp	r6, r4
 800aaf0:	d105      	bne.n	800aafe <__libc_init_array+0x2e>
 800aaf2:	bd70      	pop	{r4, r5, r6, pc}
 800aaf4:	f855 3b04 	ldr.w	r3, [r5], #4
 800aaf8:	4798      	blx	r3
 800aafa:	3601      	adds	r6, #1
 800aafc:	e7ee      	b.n	800aadc <__libc_init_array+0xc>
 800aafe:	f855 3b04 	ldr.w	r3, [r5], #4
 800ab02:	4798      	blx	r3
 800ab04:	3601      	adds	r6, #1
 800ab06:	e7f2      	b.n	800aaee <__libc_init_array+0x1e>
 800ab08:	0800abd8 	.word	0x0800abd8
 800ab0c:	0800abd8 	.word	0x0800abd8
 800ab10:	0800abd8 	.word	0x0800abd8
 800ab14:	0800abdc 	.word	0x0800abdc

0800ab18 <memcpy>:
 800ab18:	440a      	add	r2, r1
 800ab1a:	4291      	cmp	r1, r2
 800ab1c:	f100 33ff 	add.w	r3, r0, #4294967295
 800ab20:	d100      	bne.n	800ab24 <memcpy+0xc>
 800ab22:	4770      	bx	lr
 800ab24:	b510      	push	{r4, lr}
 800ab26:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ab2a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ab2e:	4291      	cmp	r1, r2
 800ab30:	d1f9      	bne.n	800ab26 <memcpy+0xe>
 800ab32:	bd10      	pop	{r4, pc}

0800ab34 <sqrtf>:
 800ab34:	b508      	push	{r3, lr}
 800ab36:	ed2d 8b02 	vpush	{d8}
 800ab3a:	eeb0 8a40 	vmov.f32	s16, s0
 800ab3e:	f000 f817 	bl	800ab70 <__ieee754_sqrtf>
 800ab42:	eeb4 8a48 	vcmp.f32	s16, s16
 800ab46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab4a:	d60c      	bvs.n	800ab66 <sqrtf+0x32>
 800ab4c:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800ab6c <sqrtf+0x38>
 800ab50:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800ab54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab58:	d505      	bpl.n	800ab66 <sqrtf+0x32>
 800ab5a:	f7ff ffb3 	bl	800aac4 <__errno>
 800ab5e:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800ab62:	2321      	movs	r3, #33	@ 0x21
 800ab64:	6003      	str	r3, [r0, #0]
 800ab66:	ecbd 8b02 	vpop	{d8}
 800ab6a:	bd08      	pop	{r3, pc}
 800ab6c:	00000000 	.word	0x00000000

0800ab70 <__ieee754_sqrtf>:
 800ab70:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800ab74:	4770      	bx	lr
	...

0800ab78 <_init>:
 800ab78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab7a:	bf00      	nop
 800ab7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab7e:	bc08      	pop	{r3}
 800ab80:	469e      	mov	lr, r3
 800ab82:	4770      	bx	lr

0800ab84 <_fini>:
 800ab84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab86:	bf00      	nop
 800ab88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab8a:	bc08      	pop	{r3}
 800ab8c:	469e      	mov	lr, r3
 800ab8e:	4770      	bx	lr
