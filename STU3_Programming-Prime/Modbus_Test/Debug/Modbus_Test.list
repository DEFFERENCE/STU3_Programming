
Modbus_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007968  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08007b40  08007b40  00008b40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007b80  08007b80  0000920c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08007b80  08007b80  00008b80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007b88  08007b88  0000920c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007b88  08007b88  00008b88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007b8c  08007b8c  00008b8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000020c  20000000  08007b90  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000954  2000020c  08007d9c  0000920c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000b60  08007d9c  00009b60  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000920c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000156b0  00000000  00000000  0000923c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000288b  00000000  00000000  0001e8ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001110  00000000  00000000  00021178  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d62  00000000  00000000  00022288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026495  00000000  00000000  00022fea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013e5e  00000000  00000000  0004947f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fc4e7  00000000  00000000  0005d2dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001597c4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000048d0  00000000  00000000  00159808  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000086  00000000  00000000  0015e0d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000020c 	.word	0x2000020c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08007b28 	.word	0x08007b28

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000210 	.word	0x20000210
 8000214:	08007b28 	.word	0x08007b28

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b988 	b.w	8000540 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	468e      	mov	lr, r1
 8000250:	4604      	mov	r4, r0
 8000252:	4688      	mov	r8, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4617      	mov	r7, r2
 800025c:	d962      	bls.n	8000324 <__udivmoddi4+0xdc>
 800025e:	fab2 f682 	clz	r6, r2
 8000262:	b14e      	cbz	r6, 8000278 <__udivmoddi4+0x30>
 8000264:	f1c6 0320 	rsb	r3, r6, #32
 8000268:	fa01 f806 	lsl.w	r8, r1, r6
 800026c:	fa20 f303 	lsr.w	r3, r0, r3
 8000270:	40b7      	lsls	r7, r6
 8000272:	ea43 0808 	orr.w	r8, r3, r8
 8000276:	40b4      	lsls	r4, r6
 8000278:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800027c:	fa1f fc87 	uxth.w	ip, r7
 8000280:	fbb8 f1fe 	udiv	r1, r8, lr
 8000284:	0c23      	lsrs	r3, r4, #16
 8000286:	fb0e 8811 	mls	r8, lr, r1, r8
 800028a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800028e:	fb01 f20c 	mul.w	r2, r1, ip
 8000292:	429a      	cmp	r2, r3
 8000294:	d909      	bls.n	80002aa <__udivmoddi4+0x62>
 8000296:	18fb      	adds	r3, r7, r3
 8000298:	f101 30ff 	add.w	r0, r1, #4294967295
 800029c:	f080 80ea 	bcs.w	8000474 <__udivmoddi4+0x22c>
 80002a0:	429a      	cmp	r2, r3
 80002a2:	f240 80e7 	bls.w	8000474 <__udivmoddi4+0x22c>
 80002a6:	3902      	subs	r1, #2
 80002a8:	443b      	add	r3, r7
 80002aa:	1a9a      	subs	r2, r3, r2
 80002ac:	b2a3      	uxth	r3, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002ba:	fb00 fc0c 	mul.w	ip, r0, ip
 80002be:	459c      	cmp	ip, r3
 80002c0:	d909      	bls.n	80002d6 <__udivmoddi4+0x8e>
 80002c2:	18fb      	adds	r3, r7, r3
 80002c4:	f100 32ff 	add.w	r2, r0, #4294967295
 80002c8:	f080 80d6 	bcs.w	8000478 <__udivmoddi4+0x230>
 80002cc:	459c      	cmp	ip, r3
 80002ce:	f240 80d3 	bls.w	8000478 <__udivmoddi4+0x230>
 80002d2:	443b      	add	r3, r7
 80002d4:	3802      	subs	r0, #2
 80002d6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002da:	eba3 030c 	sub.w	r3, r3, ip
 80002de:	2100      	movs	r1, #0
 80002e0:	b11d      	cbz	r5, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40f3      	lsrs	r3, r6
 80002e4:	2200      	movs	r2, #0
 80002e6:	e9c5 3200 	strd	r3, r2, [r5]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d905      	bls.n	80002fe <__udivmoddi4+0xb6>
 80002f2:	b10d      	cbz	r5, 80002f8 <__udivmoddi4+0xb0>
 80002f4:	e9c5 0100 	strd	r0, r1, [r5]
 80002f8:	2100      	movs	r1, #0
 80002fa:	4608      	mov	r0, r1
 80002fc:	e7f5      	b.n	80002ea <__udivmoddi4+0xa2>
 80002fe:	fab3 f183 	clz	r1, r3
 8000302:	2900      	cmp	r1, #0
 8000304:	d146      	bne.n	8000394 <__udivmoddi4+0x14c>
 8000306:	4573      	cmp	r3, lr
 8000308:	d302      	bcc.n	8000310 <__udivmoddi4+0xc8>
 800030a:	4282      	cmp	r2, r0
 800030c:	f200 8105 	bhi.w	800051a <__udivmoddi4+0x2d2>
 8000310:	1a84      	subs	r4, r0, r2
 8000312:	eb6e 0203 	sbc.w	r2, lr, r3
 8000316:	2001      	movs	r0, #1
 8000318:	4690      	mov	r8, r2
 800031a:	2d00      	cmp	r5, #0
 800031c:	d0e5      	beq.n	80002ea <__udivmoddi4+0xa2>
 800031e:	e9c5 4800 	strd	r4, r8, [r5]
 8000322:	e7e2      	b.n	80002ea <__udivmoddi4+0xa2>
 8000324:	2a00      	cmp	r2, #0
 8000326:	f000 8090 	beq.w	800044a <__udivmoddi4+0x202>
 800032a:	fab2 f682 	clz	r6, r2
 800032e:	2e00      	cmp	r6, #0
 8000330:	f040 80a4 	bne.w	800047c <__udivmoddi4+0x234>
 8000334:	1a8a      	subs	r2, r1, r2
 8000336:	0c03      	lsrs	r3, r0, #16
 8000338:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800033c:	b280      	uxth	r0, r0
 800033e:	b2bc      	uxth	r4, r7
 8000340:	2101      	movs	r1, #1
 8000342:	fbb2 fcfe 	udiv	ip, r2, lr
 8000346:	fb0e 221c 	mls	r2, lr, ip, r2
 800034a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800034e:	fb04 f20c 	mul.w	r2, r4, ip
 8000352:	429a      	cmp	r2, r3
 8000354:	d907      	bls.n	8000366 <__udivmoddi4+0x11e>
 8000356:	18fb      	adds	r3, r7, r3
 8000358:	f10c 38ff 	add.w	r8, ip, #4294967295
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x11c>
 800035e:	429a      	cmp	r2, r3
 8000360:	f200 80e0 	bhi.w	8000524 <__udivmoddi4+0x2dc>
 8000364:	46c4      	mov	ip, r8
 8000366:	1a9b      	subs	r3, r3, r2
 8000368:	fbb3 f2fe 	udiv	r2, r3, lr
 800036c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000370:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000374:	fb02 f404 	mul.w	r4, r2, r4
 8000378:	429c      	cmp	r4, r3
 800037a:	d907      	bls.n	800038c <__udivmoddi4+0x144>
 800037c:	18fb      	adds	r3, r7, r3
 800037e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x142>
 8000384:	429c      	cmp	r4, r3
 8000386:	f200 80ca 	bhi.w	800051e <__udivmoddi4+0x2d6>
 800038a:	4602      	mov	r2, r0
 800038c:	1b1b      	subs	r3, r3, r4
 800038e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000392:	e7a5      	b.n	80002e0 <__udivmoddi4+0x98>
 8000394:	f1c1 0620 	rsb	r6, r1, #32
 8000398:	408b      	lsls	r3, r1
 800039a:	fa22 f706 	lsr.w	r7, r2, r6
 800039e:	431f      	orrs	r7, r3
 80003a0:	fa0e f401 	lsl.w	r4, lr, r1
 80003a4:	fa20 f306 	lsr.w	r3, r0, r6
 80003a8:	fa2e fe06 	lsr.w	lr, lr, r6
 80003ac:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003b0:	4323      	orrs	r3, r4
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	fa1f fc87 	uxth.w	ip, r7
 80003ba:	fbbe f0f9 	udiv	r0, lr, r9
 80003be:	0c1c      	lsrs	r4, r3, #16
 80003c0:	fb09 ee10 	mls	lr, r9, r0, lr
 80003c4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003c8:	fb00 fe0c 	mul.w	lr, r0, ip
 80003cc:	45a6      	cmp	lr, r4
 80003ce:	fa02 f201 	lsl.w	r2, r2, r1
 80003d2:	d909      	bls.n	80003e8 <__udivmoddi4+0x1a0>
 80003d4:	193c      	adds	r4, r7, r4
 80003d6:	f100 3aff 	add.w	sl, r0, #4294967295
 80003da:	f080 809c 	bcs.w	8000516 <__udivmoddi4+0x2ce>
 80003de:	45a6      	cmp	lr, r4
 80003e0:	f240 8099 	bls.w	8000516 <__udivmoddi4+0x2ce>
 80003e4:	3802      	subs	r0, #2
 80003e6:	443c      	add	r4, r7
 80003e8:	eba4 040e 	sub.w	r4, r4, lr
 80003ec:	fa1f fe83 	uxth.w	lr, r3
 80003f0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003f4:	fb09 4413 	mls	r4, r9, r3, r4
 80003f8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003fc:	fb03 fc0c 	mul.w	ip, r3, ip
 8000400:	45a4      	cmp	ip, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1ce>
 8000404:	193c      	adds	r4, r7, r4
 8000406:	f103 3eff 	add.w	lr, r3, #4294967295
 800040a:	f080 8082 	bcs.w	8000512 <__udivmoddi4+0x2ca>
 800040e:	45a4      	cmp	ip, r4
 8000410:	d97f      	bls.n	8000512 <__udivmoddi4+0x2ca>
 8000412:	3b02      	subs	r3, #2
 8000414:	443c      	add	r4, r7
 8000416:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800041a:	eba4 040c 	sub.w	r4, r4, ip
 800041e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000422:	4564      	cmp	r4, ip
 8000424:	4673      	mov	r3, lr
 8000426:	46e1      	mov	r9, ip
 8000428:	d362      	bcc.n	80004f0 <__udivmoddi4+0x2a8>
 800042a:	d05f      	beq.n	80004ec <__udivmoddi4+0x2a4>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x1fe>
 800042e:	ebb8 0203 	subs.w	r2, r8, r3
 8000432:	eb64 0409 	sbc.w	r4, r4, r9
 8000436:	fa04 f606 	lsl.w	r6, r4, r6
 800043a:	fa22 f301 	lsr.w	r3, r2, r1
 800043e:	431e      	orrs	r6, r3
 8000440:	40cc      	lsrs	r4, r1
 8000442:	e9c5 6400 	strd	r6, r4, [r5]
 8000446:	2100      	movs	r1, #0
 8000448:	e74f      	b.n	80002ea <__udivmoddi4+0xa2>
 800044a:	fbb1 fcf2 	udiv	ip, r1, r2
 800044e:	0c01      	lsrs	r1, r0, #16
 8000450:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000454:	b280      	uxth	r0, r0
 8000456:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800045a:	463b      	mov	r3, r7
 800045c:	4638      	mov	r0, r7
 800045e:	463c      	mov	r4, r7
 8000460:	46b8      	mov	r8, r7
 8000462:	46be      	mov	lr, r7
 8000464:	2620      	movs	r6, #32
 8000466:	fbb1 f1f7 	udiv	r1, r1, r7
 800046a:	eba2 0208 	sub.w	r2, r2, r8
 800046e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000472:	e766      	b.n	8000342 <__udivmoddi4+0xfa>
 8000474:	4601      	mov	r1, r0
 8000476:	e718      	b.n	80002aa <__udivmoddi4+0x62>
 8000478:	4610      	mov	r0, r2
 800047a:	e72c      	b.n	80002d6 <__udivmoddi4+0x8e>
 800047c:	f1c6 0220 	rsb	r2, r6, #32
 8000480:	fa2e f302 	lsr.w	r3, lr, r2
 8000484:	40b7      	lsls	r7, r6
 8000486:	40b1      	lsls	r1, r6
 8000488:	fa20 f202 	lsr.w	r2, r0, r2
 800048c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000490:	430a      	orrs	r2, r1
 8000492:	fbb3 f8fe 	udiv	r8, r3, lr
 8000496:	b2bc      	uxth	r4, r7
 8000498:	fb0e 3318 	mls	r3, lr, r8, r3
 800049c:	0c11      	lsrs	r1, r2, #16
 800049e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a2:	fb08 f904 	mul.w	r9, r8, r4
 80004a6:	40b0      	lsls	r0, r6
 80004a8:	4589      	cmp	r9, r1
 80004aa:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004ae:	b280      	uxth	r0, r0
 80004b0:	d93e      	bls.n	8000530 <__udivmoddi4+0x2e8>
 80004b2:	1879      	adds	r1, r7, r1
 80004b4:	f108 3cff 	add.w	ip, r8, #4294967295
 80004b8:	d201      	bcs.n	80004be <__udivmoddi4+0x276>
 80004ba:	4589      	cmp	r9, r1
 80004bc:	d81f      	bhi.n	80004fe <__udivmoddi4+0x2b6>
 80004be:	eba1 0109 	sub.w	r1, r1, r9
 80004c2:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c6:	fb09 f804 	mul.w	r8, r9, r4
 80004ca:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ce:	b292      	uxth	r2, r2
 80004d0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004d4:	4542      	cmp	r2, r8
 80004d6:	d229      	bcs.n	800052c <__udivmoddi4+0x2e4>
 80004d8:	18ba      	adds	r2, r7, r2
 80004da:	f109 31ff 	add.w	r1, r9, #4294967295
 80004de:	d2c4      	bcs.n	800046a <__udivmoddi4+0x222>
 80004e0:	4542      	cmp	r2, r8
 80004e2:	d2c2      	bcs.n	800046a <__udivmoddi4+0x222>
 80004e4:	f1a9 0102 	sub.w	r1, r9, #2
 80004e8:	443a      	add	r2, r7
 80004ea:	e7be      	b.n	800046a <__udivmoddi4+0x222>
 80004ec:	45f0      	cmp	r8, lr
 80004ee:	d29d      	bcs.n	800042c <__udivmoddi4+0x1e4>
 80004f0:	ebbe 0302 	subs.w	r3, lr, r2
 80004f4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004f8:	3801      	subs	r0, #1
 80004fa:	46e1      	mov	r9, ip
 80004fc:	e796      	b.n	800042c <__udivmoddi4+0x1e4>
 80004fe:	eba7 0909 	sub.w	r9, r7, r9
 8000502:	4449      	add	r1, r9
 8000504:	f1a8 0c02 	sub.w	ip, r8, #2
 8000508:	fbb1 f9fe 	udiv	r9, r1, lr
 800050c:	fb09 f804 	mul.w	r8, r9, r4
 8000510:	e7db      	b.n	80004ca <__udivmoddi4+0x282>
 8000512:	4673      	mov	r3, lr
 8000514:	e77f      	b.n	8000416 <__udivmoddi4+0x1ce>
 8000516:	4650      	mov	r0, sl
 8000518:	e766      	b.n	80003e8 <__udivmoddi4+0x1a0>
 800051a:	4608      	mov	r0, r1
 800051c:	e6fd      	b.n	800031a <__udivmoddi4+0xd2>
 800051e:	443b      	add	r3, r7
 8000520:	3a02      	subs	r2, #2
 8000522:	e733      	b.n	800038c <__udivmoddi4+0x144>
 8000524:	f1ac 0c02 	sub.w	ip, ip, #2
 8000528:	443b      	add	r3, r7
 800052a:	e71c      	b.n	8000366 <__udivmoddi4+0x11e>
 800052c:	4649      	mov	r1, r9
 800052e:	e79c      	b.n	800046a <__udivmoddi4+0x222>
 8000530:	eba1 0109 	sub.w	r1, r1, r9
 8000534:	46c4      	mov	ip, r8
 8000536:	fbb1 f9fe 	udiv	r9, r1, lr
 800053a:	fb09 f804 	mul.w	r8, r9, r4
 800053e:	e7c4      	b.n	80004ca <__udivmoddi4+0x282>

08000540 <__aeabi_idiv0>:
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop

08000544 <modbus_1t5_Timeout>:
void Modbus_frame_response();


// function for interrupt
void modbus_1t5_Timeout(TIM_HandleTypeDef *htim)
{
 8000544:	b480      	push	{r7}
 8000546:	b083      	sub	sp, #12
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 800054c:	4b04      	ldr	r3, [pc, #16]	@ (8000560 <modbus_1t5_Timeout+0x1c>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	2201      	movs	r2, #1
 8000552:	751a      	strb	r2, [r3, #20]
}
 8000554:	bf00      	nop
 8000556:	370c      	adds	r7, #12
 8000558:	46bd      	mov	sp, r7
 800055a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055e:	4770      	bx	lr
 8000560:	20000228 	.word	0x20000228

08000564 <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim)
{
 8000564:	b480      	push	{r7}
 8000566:	b083      	sub	sp, #12
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 800056c:	4b04      	ldr	r3, [pc, #16]	@ (8000580 <modbus_3t5_Timeout+0x1c>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	2201      	movs	r2, #1
 8000572:	755a      	strb	r2, [r3, #21]
}
 8000574:	bf00      	nop
 8000576:	370c      	adds	r7, #12
 8000578:	46bd      	mov	sp, r7
 800057a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057e:	4770      	bx	lr
 8000580:	20000228 	.word	0x20000228

08000584 <modbus_UART_Recived>:
void modbus_UART_Recived(UART_HandleTypeDef *huart,uint32_t pos)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
 800058c:	6039      	str	r1, [r7, #0]

	//restart timer / start timer of counting time with modbus RTU
	hModbus->Flag_URev =1;
 800058e:	4b15      	ldr	r3, [pc, #84]	@ (80005e4 <modbus_UART_Recived+0x60>)
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	2201      	movs	r2, #1
 8000594:	759a      	strb	r2, [r3, #22]
	if(hModbus->modbusUartStructure.RxTail++<MODBUS_MESSAGEBUFFER_SIZE)
 8000596:	4b13      	ldr	r3, [pc, #76]	@ (80005e4 <modbus_UART_Recived+0x60>)
 8000598:	681a      	ldr	r2, [r3, #0]
 800059a:	f8b2 33a2 	ldrh.w	r3, [r2, #930]	@ 0x3a2
 800059e:	1c59      	adds	r1, r3, #1
 80005a0:	b289      	uxth	r1, r1
 80005a2:	f8a2 13a2 	strh.w	r1, [r2, #930]	@ 0x3a2
 80005a6:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 80005aa:	d210      	bcs.n	80005ce <modbus_UART_Recived+0x4a>
	{


	    HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 80005ac:	4b0d      	ldr	r3, [pc, #52]	@ (80005e4 <modbus_UART_Recived+0x60>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	68d8      	ldr	r0, [r3, #12]
 80005b2:	4b0c      	ldr	r3, [pc, #48]	@ (80005e4 <modbus_UART_Recived+0x60>)
 80005b4:	681a      	ldr	r2, [r3, #0]
 80005b6:	4b0b      	ldr	r3, [pc, #44]	@ (80005e4 <modbus_UART_Recived+0x60>)
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 80005be:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 80005c2:	4413      	add	r3, r2
 80005c4:	3302      	adds	r3, #2
 80005c6:	2201      	movs	r2, #1
 80005c8:	4619      	mov	r1, r3
 80005ca:	f004 ff37 	bl	800543c <HAL_UART_Receive_IT>
	}
	__HAL_TIM_SET_COUNTER(hModbus->htim,0);
 80005ce:	4b05      	ldr	r3, [pc, #20]	@ (80005e4 <modbus_UART_Recived+0x60>)
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	691b      	ldr	r3, [r3, #16]
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	2200      	movs	r2, #0
 80005d8:	625a      	str	r2, [r3, #36]	@ 0x24

}
 80005da:	bf00      	nop
 80005dc:	3708      	adds	r7, #8
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	20000228 	.word	0x20000228

080005e8 <Modbus_init>:


void Modbus_init(ModbusHandleTypedef* hmodbus,u16u8_t* RegisterStartAddress)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b082      	sub	sp, #8
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
 80005f0:	6039      	str	r1, [r7, #0]
	hModbus = hmodbus;
 80005f2:	4a24      	ldr	r2, [pc, #144]	@ (8000684 <Modbus_init+0x9c>)
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	6013      	str	r3, [r2, #0]

	hModbus->RegisterAddress = RegisterStartAddress;
 80005f8:	4b22      	ldr	r3, [pc, #136]	@ (8000684 <Modbus_init+0x9c>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	683a      	ldr	r2, [r7, #0]
 80005fe:	605a      	str	r2, [r3, #4]

	//config timer interrupt
	HAL_TIM_RegisterCallback(hModbus->htim,HAL_TIM_OC_DELAY_ELAPSED_CB_ID,(void*)modbus_1t5_Timeout);
 8000600:	4b20      	ldr	r3, [pc, #128]	@ (8000684 <Modbus_init+0x9c>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	691b      	ldr	r3, [r3, #16]
 8000606:	4a20      	ldr	r2, [pc, #128]	@ (8000688 <Modbus_init+0xa0>)
 8000608:	2114      	movs	r1, #20
 800060a:	4618      	mov	r0, r3
 800060c:	f003 fe0c 	bl	8004228 <HAL_TIM_RegisterCallback>
	HAL_TIM_RegisterCallback(hModbus->htim,HAL_TIM_PERIOD_ELAPSED_CB_ID ,(void*)modbus_3t5_Timeout);
 8000610:	4b1c      	ldr	r3, [pc, #112]	@ (8000684 <Modbus_init+0x9c>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	691b      	ldr	r3, [r3, #16]
 8000616:	4a1d      	ldr	r2, [pc, #116]	@ (800068c <Modbus_init+0xa4>)
 8000618:	210e      	movs	r1, #14
 800061a:	4618      	mov	r0, r3
 800061c:	f003 fe04 	bl	8004228 <HAL_TIM_RegisterCallback>

	//config UART interrupt
	HAL_UART_RegisterCallback(hModbus->huart,HAL_UART_RX_COMPLETE_CB_ID,(void*)modbus_UART_Recived);
 8000620:	4b18      	ldr	r3, [pc, #96]	@ (8000684 <Modbus_init+0x9c>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	68db      	ldr	r3, [r3, #12]
 8000626:	4a1a      	ldr	r2, [pc, #104]	@ (8000690 <Modbus_init+0xa8>)
 8000628:	2103      	movs	r1, #3
 800062a:	4618      	mov	r0, r3
 800062c:	f004 fe4c 	bl	80052c8 <HAL_UART_RegisterCallback>
	//start Receive
    HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 8000630:	4b14      	ldr	r3, [pc, #80]	@ (8000684 <Modbus_init+0x9c>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	68d8      	ldr	r0, [r3, #12]
 8000636:	4b13      	ldr	r3, [pc, #76]	@ (8000684 <Modbus_init+0x9c>)
 8000638:	681a      	ldr	r2, [r3, #0]
 800063a:	4b12      	ldr	r3, [pc, #72]	@ (8000684 <Modbus_init+0x9c>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8000642:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 8000646:	4413      	add	r3, r2
 8000648:	3302      	adds	r3, #2
 800064a:	2201      	movs	r2, #1
 800064c:	4619      	mov	r1, r3
 800064e:	f004 fef5 	bl	800543c <HAL_UART_Receive_IT>


    if(hModbus->htim->State == HAL_TIM_STATE_READY)
 8000652:	4b0c      	ldr	r3, [pc, #48]	@ (8000684 <Modbus_init+0x9c>)
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	691b      	ldr	r3, [r3, #16]
 8000658:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800065c:	b2db      	uxtb	r3, r3
 800065e:	2b01      	cmp	r3, #1
 8000660:	d10c      	bne.n	800067c <Modbus_init+0x94>
    	{
    		HAL_TIM_Base_Start_IT(hModbus->htim);
 8000662:	4b08      	ldr	r3, [pc, #32]	@ (8000684 <Modbus_init+0x9c>)
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	691b      	ldr	r3, [r3, #16]
 8000668:	4618      	mov	r0, r3
 800066a:	f002 fdff 	bl	800326c <HAL_TIM_Base_Start_IT>
    		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 800066e:	4b05      	ldr	r3, [pc, #20]	@ (8000684 <Modbus_init+0x9c>)
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	691b      	ldr	r3, [r3, #16]
 8000674:	2100      	movs	r1, #0
 8000676:	4618      	mov	r0, r3
 8000678:	f003 f8c6 	bl	8003808 <HAL_TIM_OnePulse_Start_IT>
    	}

}
 800067c:	bf00      	nop
 800067e:	3708      	adds	r7, #8
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}
 8000684:	20000228 	.word	0x20000228
 8000688:	08000545 	.word	0x08000545
 800068c:	08000565 	.word	0x08000565
 8000690:	08000585 	.word	0x08000585

08000694 <CRC16>:
} ;

unsigned short CRC16 ( puchMsg, usDataLen ) /* The function returns the CRC as a unsigned short type */
unsigned char *puchMsg ; /* message to calculate CRC upon */
unsigned short usDataLen ; /* quantity of bytes in message */
{
 8000694:	b480      	push	{r7}
 8000696:	b085      	sub	sp, #20
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
 800069c:	460b      	mov	r3, r1
 800069e:	803b      	strh	r3, [r7, #0]
	unsigned char uchCRCHi = 0xFF ; /* high byte of CRC initialized */
 80006a0:	23ff      	movs	r3, #255	@ 0xff
 80006a2:	73fb      	strb	r3, [r7, #15]
	unsigned char uchCRCLo = 0xFF ; /* low byte of CRC initialized */
 80006a4:	23ff      	movs	r3, #255	@ 0xff
 80006a6:	73bb      	strb	r3, [r7, #14]
	unsigned uIndex ; /* will index into CRC lookup table */
	while (usDataLen--) /* pass through message buffer */
 80006a8:	e013      	b.n	80006d2 <CRC16+0x3e>
	{
		uIndex = uchCRCLo ^ *puchMsg++ ; /* calculate the CRC */
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	1c5a      	adds	r2, r3, #1
 80006ae:	607a      	str	r2, [r7, #4]
 80006b0:	781a      	ldrb	r2, [r3, #0]
 80006b2:	7bbb      	ldrb	r3, [r7, #14]
 80006b4:	4053      	eors	r3, r2
 80006b6:	b2db      	uxtb	r3, r3
 80006b8:	60bb      	str	r3, [r7, #8]
		uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex] ;
 80006ba:	4a10      	ldr	r2, [pc, #64]	@ (80006fc <CRC16+0x68>)
 80006bc:	68bb      	ldr	r3, [r7, #8]
 80006be:	4413      	add	r3, r2
 80006c0:	781a      	ldrb	r2, [r3, #0]
 80006c2:	7bfb      	ldrb	r3, [r7, #15]
 80006c4:	4053      	eors	r3, r2
 80006c6:	73bb      	strb	r3, [r7, #14]
		uchCRCHi = auchCRCLo[uIndex] ;
 80006c8:	4a0d      	ldr	r2, [pc, #52]	@ (8000700 <CRC16+0x6c>)
 80006ca:	68bb      	ldr	r3, [r7, #8]
 80006cc:	4413      	add	r3, r2
 80006ce:	781b      	ldrb	r3, [r3, #0]
 80006d0:	73fb      	strb	r3, [r7, #15]
	while (usDataLen--) /* pass through message buffer */
 80006d2:	883b      	ldrh	r3, [r7, #0]
 80006d4:	1e5a      	subs	r2, r3, #1
 80006d6:	803a      	strh	r2, [r7, #0]
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d1e6      	bne.n	80006aa <CRC16+0x16>
	}
	return (uchCRCHi << 8 | uchCRCLo) ;
 80006dc:	7bfb      	ldrb	r3, [r7, #15]
 80006de:	b21b      	sxth	r3, r3
 80006e0:	021b      	lsls	r3, r3, #8
 80006e2:	b21a      	sxth	r2, r3
 80006e4:	7bbb      	ldrb	r3, [r7, #14]
 80006e6:	b21b      	sxth	r3, r3
 80006e8:	4313      	orrs	r3, r2
 80006ea:	b21b      	sxth	r3, r3
 80006ec:	b29b      	uxth	r3, r3
}
 80006ee:	4618      	mov	r0, r3
 80006f0:	3714      	adds	r7, #20
 80006f2:	46bd      	mov	sp, r7
 80006f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f8:	4770      	bx	lr
 80006fa:	bf00      	nop
 80006fc:	20000100 	.word	0x20000100
 8000700:	20000000 	.word	0x20000000

08000704 <Modbus_Protocal_Worker>:



void Modbus_Protocal_Worker()
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b082      	sub	sp, #8
 8000708:	af00      	add	r7, sp, #0
	switch(hModbus->Mstatus)
 800070a:	4b80      	ldr	r3, [pc, #512]	@ (800090c <Modbus_Protocal_Worker+0x208>)
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	7e1b      	ldrb	r3, [r3, #24]
 8000710:	3b01      	subs	r3, #1
 8000712:	2b03      	cmp	r3, #3
 8000714:	d80a      	bhi.n	800072c <Modbus_Protocal_Worker+0x28>
 8000716:	a201      	add	r2, pc, #4	@ (adr r2, 800071c <Modbus_Protocal_Worker+0x18>)
 8000718:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800071c:	08000737 	.word	0x08000737
 8000720:	080008d5 	.word	0x080008d5
 8000724:	080007c1 	.word	0x080007c1
 8000728:	080007e7 	.word	0x080007e7
	{
	default:
	case Modbus_state_Init:
		/*init Modbus protocal*/

		hModbus->Mstatus = Modbus_state_Idle;
 800072c:	4b77      	ldr	r3, [pc, #476]	@ (800090c <Modbus_Protocal_Worker+0x208>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	2201      	movs	r2, #1
 8000732:	761a      	strb	r2, [r3, #24]
		break;
 8000734:	e0e6      	b.n	8000904 <Modbus_Protocal_Worker+0x200>
	case Modbus_state_Idle:
		/*Idle state*/

		//check that we have response message
		if(hModbus->TxCount)
 8000736:	4b75      	ldr	r3, [pc, #468]	@ (800090c <Modbus_Protocal_Worker+0x208>)
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	f893 3271 	ldrb.w	r3, [r3, #625]	@ 0x271
 800073e:	2b00      	cmp	r3, #0
 8000740:	d002      	beq.n	8000748 <Modbus_Protocal_Worker+0x44>
		{
			Modbus_Emission();
 8000742:	f000 f9d5 	bl	8000af0 <Modbus_Emission>
 8000746:	e01c      	b.n	8000782 <Modbus_Protocal_Worker+0x7e>
		}

		// Received character
		else if(hModbus->Flag_URev)
 8000748:	4b70      	ldr	r3, [pc, #448]	@ (800090c <Modbus_Protocal_Worker+0x208>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	7d9b      	ldrb	r3, [r3, #22]
 800074e:	2b00      	cmp	r3, #0
 8000750:	d017      	beq.n	8000782 <Modbus_Protocal_Worker+0x7e>
		{
			/*reset Timer flag*/
			hModbus->Flag_T15TimeOut = 0;
 8000752:	4b6e      	ldr	r3, [pc, #440]	@ (800090c <Modbus_Protocal_Worker+0x208>)
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	2200      	movs	r2, #0
 8000758:	751a      	strb	r2, [r3, #20]
			hModbus->Flag_T35TimeOut = 0;
 800075a:	4b6c      	ldr	r3, [pc, #432]	@ (800090c <Modbus_Protocal_Worker+0x208>)
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	2200      	movs	r2, #0
 8000760:	755a      	strb	r2, [r3, #21]
			__HAL_TIM_ENABLE(hModbus->htim);
 8000762:	4b6a      	ldr	r3, [pc, #424]	@ (800090c <Modbus_Protocal_Worker+0x208>)
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	691b      	ldr	r3, [r3, #16]
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	681a      	ldr	r2, [r3, #0]
 800076c:	4b67      	ldr	r3, [pc, #412]	@ (800090c <Modbus_Protocal_Worker+0x208>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	691b      	ldr	r3, [r3, #16]
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	f042 0201 	orr.w	r2, r2, #1
 8000778:	601a      	str	r2, [r3, #0]
			/*set state*/
			hModbus->Mstatus= Modbus_state_Reception;
 800077a:	4b64      	ldr	r3, [pc, #400]	@ (800090c <Modbus_Protocal_Worker+0x208>)
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	2203      	movs	r2, #3
 8000780:	761a      	strb	r2, [r3, #24]
		}

		//check that if UART RX not start, start receiving
		if(hModbus->huart->RxState == HAL_UART_STATE_READY)
 8000782:	4b62      	ldr	r3, [pc, #392]	@ (800090c <Modbus_Protocal_Worker+0x208>)
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	68db      	ldr	r3, [r3, #12]
 8000788:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800078c:	2b20      	cmp	r3, #32
 800078e:	f040 80b2 	bne.w	80008f6 <Modbus_Protocal_Worker+0x1f2>
		{
			hModbus->modbusUartStructure.RxTail =0;
 8000792:	4b5e      	ldr	r3, [pc, #376]	@ (800090c <Modbus_Protocal_Worker+0x208>)
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	2200      	movs	r2, #0
 8000798:	f8a3 23a2 	strh.w	r2, [r3, #930]	@ 0x3a2
			HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 800079c:	4b5b      	ldr	r3, [pc, #364]	@ (800090c <Modbus_Protocal_Worker+0x208>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	68d8      	ldr	r0, [r3, #12]
 80007a2:	4b5a      	ldr	r3, [pc, #360]	@ (800090c <Modbus_Protocal_Worker+0x208>)
 80007a4:	681a      	ldr	r2, [r3, #0]
 80007a6:	4b59      	ldr	r3, [pc, #356]	@ (800090c <Modbus_Protocal_Worker+0x208>)
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 80007ae:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 80007b2:	4413      	add	r3, r2
 80007b4:	3302      	adds	r3, #2
 80007b6:	2201      	movs	r2, #1
 80007b8:	4619      	mov	r1, r3
 80007ba:	f004 fe3f 	bl	800543c <HAL_UART_Receive_IT>
		}
		break;
 80007be:	e09a      	b.n	80008f6 <Modbus_Protocal_Worker+0x1f2>
	case Modbus_state_Reception:

		if(hModbus->Flag_T15TimeOut)
 80007c0:	4b52      	ldr	r3, [pc, #328]	@ (800090c <Modbus_Protocal_Worker+0x208>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	7d1b      	ldrb	r3, [r3, #20]
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	f000 8097 	beq.w	80008fa <Modbus_Protocal_Worker+0x1f6>
		{
			/*reset recived flag*/
			hModbus->Flag_URev =0;
 80007cc:	4b4f      	ldr	r3, [pc, #316]	@ (800090c <Modbus_Protocal_Worker+0x208>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	2200      	movs	r2, #0
 80007d2:	759a      	strb	r2, [r3, #22]
			hModbus->RecvStatus = Modbus_RecvFrame_Null;
 80007d4:	4b4d      	ldr	r3, [pc, #308]	@ (800090c <Modbus_Protocal_Worker+0x208>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	22fe      	movs	r2, #254	@ 0xfe
 80007da:	75da      	strb	r2, [r3, #23]

			/*compute CRC and Slave address*/



			hModbus->Mstatus = Modbus_state_ControlAndWaiting;
 80007dc:	4b4b      	ldr	r3, [pc, #300]	@ (800090c <Modbus_Protocal_Worker+0x208>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	2204      	movs	r2, #4
 80007e2:	761a      	strb	r2, [r3, #24]
		}
		break;
 80007e4:	e089      	b.n	80008fa <Modbus_Protocal_Worker+0x1f6>
	case Modbus_state_ControlAndWaiting:
		/*Frame error , Not generate response , Clear buffer*/
		if(hModbus->Flag_URev)
 80007e6:	4b49      	ldr	r3, [pc, #292]	@ (800090c <Modbus_Protocal_Worker+0x208>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	7d9b      	ldrb	r3, [r3, #22]
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d009      	beq.n	8000804 <Modbus_Protocal_Worker+0x100>
		{

			if(!hModbus->RecvStatus)
 80007f0:	4b46      	ldr	r3, [pc, #280]	@ (800090c <Modbus_Protocal_Worker+0x208>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	f993 3017 	ldrsb.w	r3, [r3, #23]
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d103      	bne.n	8000804 <Modbus_Protocal_Worker+0x100>
			{
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 80007fc:	4b43      	ldr	r3, [pc, #268]	@ (800090c <Modbus_Protocal_Worker+0x208>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	22ff      	movs	r2, #255	@ 0xff
 8000802:	75da      	strb	r2, [r3, #23]
			}
		}

		/*Frame Calculation , calculate once*/
		if(hModbus->RecvStatus == Modbus_RecvFrame_Null)
 8000804:	4b41      	ldr	r3, [pc, #260]	@ (800090c <Modbus_Protocal_Worker+0x208>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	f993 3017 	ldrsb.w	r3, [r3, #23]
 800080c:	f113 0f02 	cmn.w	r3, #2
 8000810:	d150      	bne.n	80008b4 <Modbus_Protocal_Worker+0x1b0>
		{
			hModbus->RecvStatus = Modbus_RecvFrame_Normal;
 8000812:	4b3e      	ldr	r3, [pc, #248]	@ (800090c <Modbus_Protocal_Worker+0x208>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	2200      	movs	r2, #0
 8000818:	75da      	strb	r2, [r3, #23]
			// check CRC
			u16u8_t CalculateCRC;
			CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferRx,hModbus->modbusUartStructure.RxTail - 2);
 800081a:	4b3c      	ldr	r3, [pc, #240]	@ (800090c <Modbus_Protocal_Worker+0x208>)
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	f203 2272 	addw	r2, r3, #626	@ 0x272
 8000822:	4b3a      	ldr	r3, [pc, #232]	@ (800090c <Modbus_Protocal_Worker+0x208>)
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 800082a:	3b02      	subs	r3, #2
 800082c:	4619      	mov	r1, r3
 800082e:	4610      	mov	r0, r2
 8000830:	f7ff ff30 	bl	8000694 <CRC16>
 8000834:	4603      	mov	r3, r0
 8000836:	80bb      	strh	r3, [r7, #4]

			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 8000838:	793a      	ldrb	r2, [r7, #4]
 800083a:	4b34      	ldr	r3, [pc, #208]	@ (800090c <Modbus_Protocal_Worker+0x208>)
 800083c:	6819      	ldr	r1, [r3, #0]
 800083e:	4b33      	ldr	r3, [pc, #204]	@ (800090c <Modbus_Protocal_Worker+0x208>)
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8000846:	3b02      	subs	r3, #2
 8000848:	440b      	add	r3, r1
 800084a:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
 800084e:	429a      	cmp	r2, r3
 8000850:	d10c      	bne.n	800086c <Modbus_Protocal_Worker+0x168>
			&& CalculateCRC.U8[1] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail -1]))
 8000852:	797a      	ldrb	r2, [r7, #5]
 8000854:	4b2d      	ldr	r3, [pc, #180]	@ (800090c <Modbus_Protocal_Worker+0x208>)
 8000856:	6819      	ldr	r1, [r3, #0]
 8000858:	4b2c      	ldr	r3, [pc, #176]	@ (800090c <Modbus_Protocal_Worker+0x208>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8000860:	3b01      	subs	r3, #1
 8000862:	440b      	add	r3, r1
 8000864:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 8000868:	429a      	cmp	r2, r3
 800086a:	d004      	beq.n	8000876 <Modbus_Protocal_Worker+0x172>
			{
				// communication unsuccessful
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 800086c:	4b27      	ldr	r3, [pc, #156]	@ (800090c <Modbus_Protocal_Worker+0x208>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	22ff      	movs	r2, #255	@ 0xff
 8000872:	75da      	strb	r2, [r3, #23]
				break;
 8000874:	e046      	b.n	8000904 <Modbus_Protocal_Worker+0x200>
			}

			//check Slave Address
			if(hModbus->modbusUartStructure.MessageBufferRx[0] != hModbus->slaveAddress)
 8000876:	4b25      	ldr	r3, [pc, #148]	@ (800090c <Modbus_Protocal_Worker+0x208>)
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	f893 2272 	ldrb.w	r2, [r3, #626]	@ 0x272
 800087e:	4b23      	ldr	r3, [pc, #140]	@ (800090c <Modbus_Protocal_Worker+0x208>)
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	781b      	ldrb	r3, [r3, #0]
 8000884:	429a      	cmp	r2, r3
 8000886:	d113      	bne.n	80008b0 <Modbus_Protocal_Worker+0x1ac>
				break;

			//copy recivced frame
			memcpy(hModbus->Rxframe,
 8000888:	4b20      	ldr	r3, [pc, #128]	@ (800090c <Modbus_Protocal_Worker+0x208>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	f103 0019 	add.w	r0, r3, #25
					hModbus->modbusUartStructure.MessageBufferRx+1,
 8000890:	4b1e      	ldr	r3, [pc, #120]	@ (800090c <Modbus_Protocal_Worker+0x208>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	f203 2372 	addw	r3, r3, #626	@ 0x272
			memcpy(hModbus->Rxframe,
 8000898:	1c59      	adds	r1, r3, #1
					hModbus->modbusUartStructure.RxTail-3);
 800089a:	4b1c      	ldr	r3, [pc, #112]	@ (800090c <Modbus_Protocal_Worker+0x208>)
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 80008a2:	3b03      	subs	r3, #3
			memcpy(hModbus->Rxframe,
 80008a4:	461a      	mov	r2, r3
 80008a6:	f007 f931 	bl	8007b0c <memcpy>

			//execute command
			Modbus_frame_response();
 80008aa:	f000 f909 	bl	8000ac0 <Modbus_frame_response>
 80008ae:	e001      	b.n	80008b4 <Modbus_Protocal_Worker+0x1b0>
				break;
 80008b0:	bf00      	nop
					}
		break;


	}
}
 80008b2:	e027      	b.n	8000904 <Modbus_Protocal_Worker+0x200>
		if(hModbus->Flag_T35TimeOut)
 80008b4:	4b15      	ldr	r3, [pc, #84]	@ (800090c <Modbus_Protocal_Worker+0x208>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	7d5b      	ldrb	r3, [r3, #21]
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d01f      	beq.n	80008fe <Modbus_Protocal_Worker+0x1fa>
			hModbus->Mstatus = Modbus_state_Idle;
 80008be:	4b13      	ldr	r3, [pc, #76]	@ (800090c <Modbus_Protocal_Worker+0x208>)
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	2201      	movs	r2, #1
 80008c4:	761a      	strb	r2, [r3, #24]
			HAL_UART_AbortReceive(hModbus->huart);
 80008c6:	4b11      	ldr	r3, [pc, #68]	@ (800090c <Modbus_Protocal_Worker+0x208>)
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	68db      	ldr	r3, [r3, #12]
 80008cc:	4618      	mov	r0, r3
 80008ce:	f004 fe81 	bl	80055d4 <HAL_UART_AbortReceive>
		break;
 80008d2:	e014      	b.n	80008fe <Modbus_Protocal_Worker+0x1fa>
		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 80008d4:	4b0d      	ldr	r3, [pc, #52]	@ (800090c <Modbus_Protocal_Worker+0x208>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	68db      	ldr	r3, [r3, #12]
 80008da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80008de:	2b20      	cmp	r3, #32
 80008e0:	d10f      	bne.n	8000902 <Modbus_Protocal_Worker+0x1fe>
			hModbus->TxCount=0;
 80008e2:	4b0a      	ldr	r3, [pc, #40]	@ (800090c <Modbus_Protocal_Worker+0x208>)
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	2200      	movs	r2, #0
 80008e8:	f883 2271 	strb.w	r2, [r3, #625]	@ 0x271
			hModbus->Mstatus = Modbus_state_Idle;
 80008ec:	4b07      	ldr	r3, [pc, #28]	@ (800090c <Modbus_Protocal_Worker+0x208>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	2201      	movs	r2, #1
 80008f2:	761a      	strb	r2, [r3, #24]
		break;
 80008f4:	e005      	b.n	8000902 <Modbus_Protocal_Worker+0x1fe>
		break;
 80008f6:	bf00      	nop
 80008f8:	e004      	b.n	8000904 <Modbus_Protocal_Worker+0x200>
		break;
 80008fa:	bf00      	nop
 80008fc:	e002      	b.n	8000904 <Modbus_Protocal_Worker+0x200>
		break;
 80008fe:	bf00      	nop
 8000900:	e000      	b.n	8000904 <Modbus_Protocal_Worker+0x200>
		break;
 8000902:	bf00      	nop
}
 8000904:	bf00      	nop
 8000906:	3708      	adds	r7, #8
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}
 800090c:	20000228 	.word	0x20000228

08000910 <modbusWrite1Register>:
void modbusWrite1Register() //function 06
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b082      	sub	sp, #8
 8000914:	af00      	add	r7, sp, #0

	//write data to register
	uint16_t startAddress = (hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]);
 8000916:	4b1d      	ldr	r3, [pc, #116]	@ (800098c <modbusWrite1Register+0x7c>)
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	7e9b      	ldrb	r3, [r3, #26]
 800091c:	021b      	lsls	r3, r3, #8
 800091e:	b29b      	uxth	r3, r3
 8000920:	4a1a      	ldr	r2, [pc, #104]	@ (800098c <modbusWrite1Register+0x7c>)
 8000922:	6812      	ldr	r2, [r2, #0]
 8000924:	7ed2      	ldrb	r2, [r2, #27]
 8000926:	4413      	add	r3, r2
 8000928:	80fb      	strh	r3, [r7, #6]

	if(startAddress > hModbus->RegisterSize)
 800092a:	88fa      	ldrh	r2, [r7, #6]
 800092c:	4b17      	ldr	r3, [pc, #92]	@ (800098c <modbusWrite1Register+0x7c>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	689b      	ldr	r3, [r3, #8]
 8000932:	429a      	cmp	r2, r3
 8000934:	d903      	bls.n	800093e <modbusWrite1Register+0x2e>
		{
			 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 8000936:	2002      	movs	r0, #2
 8000938:	f000 f8a0 	bl	8000a7c <ModbusErrorReply>
			 return;
 800093c:	e023      	b.n	8000986 <modbusWrite1Register+0x76>
		}


	hModbus->RegisterAddress[startAddress].U8[1] = hModbus->Rxframe[3];
 800093e:	4b13      	ldr	r3, [pc, #76]	@ (800098c <modbusWrite1Register+0x7c>)
 8000940:	681a      	ldr	r2, [r3, #0]
 8000942:	4b12      	ldr	r3, [pc, #72]	@ (800098c <modbusWrite1Register+0x7c>)
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	6859      	ldr	r1, [r3, #4]
 8000948:	88fb      	ldrh	r3, [r7, #6]
 800094a:	005b      	lsls	r3, r3, #1
 800094c:	440b      	add	r3, r1
 800094e:	7f12      	ldrb	r2, [r2, #28]
 8000950:	705a      	strb	r2, [r3, #1]
	hModbus->RegisterAddress[startAddress].U8[0] = hModbus->Rxframe[4];
 8000952:	4b0e      	ldr	r3, [pc, #56]	@ (800098c <modbusWrite1Register+0x7c>)
 8000954:	681a      	ldr	r2, [r3, #0]
 8000956:	4b0d      	ldr	r3, [pc, #52]	@ (800098c <modbusWrite1Register+0x7c>)
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	6859      	ldr	r1, [r3, #4]
 800095c:	88fb      	ldrh	r3, [r7, #6]
 800095e:	005b      	lsls	r3, r3, #1
 8000960:	440b      	add	r3, r1
 8000962:	7f52      	ldrb	r2, [r2, #29]
 8000964:	701a      	strb	r2, [r3, #0]



	//generate response
	memcpy(hModbus->Txframe,
 8000966:	4b09      	ldr	r3, [pc, #36]	@ (800098c <modbusWrite1Register+0x7c>)
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	f203 1045 	addw	r0, r3, #325	@ 0x145
			hModbus->Rxframe,
 800096e:	4b07      	ldr	r3, [pc, #28]	@ (800098c <modbusWrite1Register+0x7c>)
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	3319      	adds	r3, #25
	memcpy(hModbus->Txframe,
 8000974:	2208      	movs	r2, #8
 8000976:	4619      	mov	r1, r3
 8000978:	f007 f8c8 	bl	8007b0c <memcpy>
			8);
	//set number of byte to sent
	hModbus->TxCount=5;
 800097c:	4b03      	ldr	r3, [pc, #12]	@ (800098c <modbusWrite1Register+0x7c>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	2205      	movs	r2, #5
 8000982:	f883 2271 	strb.w	r2, [r3, #625]	@ 0x271



}
 8000986:	3708      	adds	r7, #8
 8000988:	46bd      	mov	sp, r7
 800098a:	bd80      	pop	{r7, pc}
 800098c:	20000228 	.word	0x20000228

08000990 <modbusRead1Register>:

void modbusRead1Register() // function 03
{
 8000990:	b590      	push	{r4, r7, lr}
 8000992:	b083      	sub	sp, #12
 8000994:	af00      	add	r7, sp, #0



	uint16_t numberOfDataToRead =((hModbus->Rxframe[3]<<8)+(hModbus->Rxframe[4]));
 8000996:	4b38      	ldr	r3, [pc, #224]	@ (8000a78 <modbusRead1Register+0xe8>)
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	7f1b      	ldrb	r3, [r3, #28]
 800099c:	021b      	lsls	r3, r3, #8
 800099e:	b29b      	uxth	r3, r3
 80009a0:	4a35      	ldr	r2, [pc, #212]	@ (8000a78 <modbusRead1Register+0xe8>)
 80009a2:	6812      	ldr	r2, [r2, #0]
 80009a4:	7f52      	ldrb	r2, [r2, #29]
 80009a6:	4413      	add	r3, r2
 80009a8:	80fb      	strh	r3, [r7, #6]
	uint16_t startAddress =((hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]));
 80009aa:	4b33      	ldr	r3, [pc, #204]	@ (8000a78 <modbusRead1Register+0xe8>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	7e9b      	ldrb	r3, [r3, #26]
 80009b0:	021b      	lsls	r3, r3, #8
 80009b2:	b29b      	uxth	r3, r3
 80009b4:	4a30      	ldr	r2, [pc, #192]	@ (8000a78 <modbusRead1Register+0xe8>)
 80009b6:	6812      	ldr	r2, [r2, #0]
 80009b8:	7ed2      	ldrb	r2, [r2, #27]
 80009ba:	4413      	add	r3, r2
 80009bc:	80bb      	strh	r3, [r7, #4]

	//check quantity and address range

	if(numberOfDataToRead <1 ||numberOfDataToRead > 0x7D)
 80009be:	88fb      	ldrh	r3, [r7, #6]
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d002      	beq.n	80009ca <modbusRead1Register+0x3a>
 80009c4:	88fb      	ldrh	r3, [r7, #6]
 80009c6:	2b7d      	cmp	r3, #125	@ 0x7d
 80009c8:	d903      	bls.n	80009d2 <modbusRead1Register+0x42>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataValue);
 80009ca:	2003      	movs	r0, #3
 80009cc:	f000 f856 	bl	8000a7c <ModbusErrorReply>
		 return;
 80009d0:	e04e      	b.n	8000a70 <modbusRead1Register+0xe0>
	}

	if(startAddress > hModbus->RegisterSize || (startAddress +  numberOfDataToRead) > hModbus->RegisterSize)
 80009d2:	88ba      	ldrh	r2, [r7, #4]
 80009d4:	4b28      	ldr	r3, [pc, #160]	@ (8000a78 <modbusRead1Register+0xe8>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	689b      	ldr	r3, [r3, #8]
 80009da:	429a      	cmp	r2, r3
 80009dc:	d808      	bhi.n	80009f0 <modbusRead1Register+0x60>
 80009de:	88ba      	ldrh	r2, [r7, #4]
 80009e0:	88fb      	ldrh	r3, [r7, #6]
 80009e2:	4413      	add	r3, r2
 80009e4:	461a      	mov	r2, r3
 80009e6:	4b24      	ldr	r3, [pc, #144]	@ (8000a78 <modbusRead1Register+0xe8>)
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	689b      	ldr	r3, [r3, #8]
 80009ec:	429a      	cmp	r2, r3
 80009ee:	d903      	bls.n	80009f8 <modbusRead1Register+0x68>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 80009f0:	2002      	movs	r0, #2
 80009f2:	f000 f843 	bl	8000a7c <ModbusErrorReply>
		 return;
 80009f6:	e03b      	b.n	8000a70 <modbusRead1Register+0xe0>
	}


	//generate response
	hModbus->Txframe[0] = Modbus_function_Read_Holding_Register;
 80009f8:	4b1f      	ldr	r3, [pc, #124]	@ (8000a78 <modbusRead1Register+0xe8>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	2203      	movs	r2, #3
 80009fe:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	hModbus->Txframe[1] = (2*numberOfDataToRead) & 0xFF;
 8000a02:	88fb      	ldrh	r3, [r7, #6]
 8000a04:	b2da      	uxtb	r2, r3
 8000a06:	4b1c      	ldr	r3, [pc, #112]	@ (8000a78 <modbusRead1Register+0xe8>)
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	0052      	lsls	r2, r2, #1
 8000a0c:	b2d2      	uxtb	r2, r2
 8000a0e:	f883 2146 	strb.w	r2, [r3, #326]	@ 0x146
	register int i;
	for(i=0; i<numberOfDataToRead;i++)
 8000a12:	2400      	movs	r4, #0
 8000a14:	e020      	b.n	8000a58 <modbusRead1Register+0xc8>
	{
		hModbus->Txframe[2*i+2]=hModbus->RegisterAddress[startAddress+i].U8[1];
 8000a16:	4b18      	ldr	r3, [pc, #96]	@ (8000a78 <modbusRead1Register+0xe8>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	685a      	ldr	r2, [r3, #4]
 8000a1c:	88bb      	ldrh	r3, [r7, #4]
 8000a1e:	4423      	add	r3, r4
 8000a20:	005b      	lsls	r3, r3, #1
 8000a22:	18d1      	adds	r1, r2, r3
 8000a24:	4b14      	ldr	r3, [pc, #80]	@ (8000a78 <modbusRead1Register+0xe8>)
 8000a26:	681a      	ldr	r2, [r3, #0]
 8000a28:	1c63      	adds	r3, r4, #1
 8000a2a:	005b      	lsls	r3, r3, #1
 8000a2c:	7849      	ldrb	r1, [r1, #1]
 8000a2e:	4413      	add	r3, r2
 8000a30:	460a      	mov	r2, r1
 8000a32:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
		hModbus->Txframe[2*i+3]=hModbus->RegisterAddress[startAddress+i].U8[0];
 8000a36:	4b10      	ldr	r3, [pc, #64]	@ (8000a78 <modbusRead1Register+0xe8>)
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	685a      	ldr	r2, [r3, #4]
 8000a3c:	88bb      	ldrh	r3, [r7, #4]
 8000a3e:	4423      	add	r3, r4
 8000a40:	005b      	lsls	r3, r3, #1
 8000a42:	18d1      	adds	r1, r2, r3
 8000a44:	4b0c      	ldr	r3, [pc, #48]	@ (8000a78 <modbusRead1Register+0xe8>)
 8000a46:	681a      	ldr	r2, [r3, #0]
 8000a48:	0063      	lsls	r3, r4, #1
 8000a4a:	3303      	adds	r3, #3
 8000a4c:	7809      	ldrb	r1, [r1, #0]
 8000a4e:	4413      	add	r3, r2
 8000a50:	460a      	mov	r2, r1
 8000a52:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	for(i=0; i<numberOfDataToRead;i++)
 8000a56:	3401      	adds	r4, #1
 8000a58:	88fb      	ldrh	r3, [r7, #6]
 8000a5a:	429c      	cmp	r4, r3
 8000a5c:	dbdb      	blt.n	8000a16 <modbusRead1Register+0x86>
	}
	hModbus->TxCount = 2+2*numberOfDataToRead;
 8000a5e:	88fb      	ldrh	r3, [r7, #6]
 8000a60:	3301      	adds	r3, #1
 8000a62:	b2da      	uxtb	r2, r3
 8000a64:	4b04      	ldr	r3, [pc, #16]	@ (8000a78 <modbusRead1Register+0xe8>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	0052      	lsls	r2, r2, #1
 8000a6a:	b2d2      	uxtb	r2, r2
 8000a6c:	f883 2271 	strb.w	r2, [r3, #625]	@ 0x271

}
 8000a70:	370c      	adds	r7, #12
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd90      	pop	{r4, r7, pc}
 8000a76:	bf00      	nop
 8000a78:	20000228 	.word	0x20000228

08000a7c <ModbusErrorReply>:

void ModbusErrorReply(uint8_t Errorcode)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	b083      	sub	sp, #12
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	4603      	mov	r3, r0
 8000a84:	71fb      	strb	r3, [r7, #7]
	hModbus->Txframe[0] = hModbus->Rxframe[0] | 0x80;
 8000a86:	4b0d      	ldr	r3, [pc, #52]	@ (8000abc <ModbusErrorReply+0x40>)
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	7e5a      	ldrb	r2, [r3, #25]
 8000a8c:	4b0b      	ldr	r3, [pc, #44]	@ (8000abc <ModbusErrorReply+0x40>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8000a94:	b2d2      	uxtb	r2, r2
 8000a96:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	hModbus->Txframe[1] = Errorcode;
 8000a9a:	4b08      	ldr	r3, [pc, #32]	@ (8000abc <ModbusErrorReply+0x40>)
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	79fa      	ldrb	r2, [r7, #7]
 8000aa0:	f883 2146 	strb.w	r2, [r3, #326]	@ 0x146
	hModbus->TxCount = 2;
 8000aa4:	4b05      	ldr	r3, [pc, #20]	@ (8000abc <ModbusErrorReply+0x40>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	2202      	movs	r2, #2
 8000aaa:	f883 2271 	strb.w	r2, [r3, #625]	@ 0x271
}
 8000aae:	bf00      	nop
 8000ab0:	370c      	adds	r7, #12
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop
 8000abc:	20000228 	.word	0x20000228

08000ac0 <Modbus_frame_response>:

void Modbus_frame_response()
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0
	switch(hModbus->Rxframe[0]) //check funcion
 8000ac4:	4b09      	ldr	r3, [pc, #36]	@ (8000aec <Modbus_frame_response+0x2c>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	7e5b      	ldrb	r3, [r3, #25]
 8000aca:	2b03      	cmp	r3, #3
 8000acc:	d004      	beq.n	8000ad8 <Modbus_frame_response+0x18>
 8000ace:	2b06      	cmp	r3, #6
 8000ad0:	d105      	bne.n	8000ade <Modbus_frame_response+0x1e>
	{
	case Modbus_function_Write_SingleRegister:
		modbusWrite1Register();
 8000ad2:	f7ff ff1d 	bl	8000910 <modbusWrite1Register>
		break;
 8000ad6:	e006      	b.n	8000ae6 <Modbus_frame_response+0x26>
	case Modbus_function_Read_Holding_Register:
		modbusRead1Register();
 8000ad8:	f7ff ff5a 	bl	8000990 <modbusRead1Register>
		break;
 8000adc:	e003      	b.n	8000ae6 <Modbus_frame_response+0x26>
	default:
		 ModbusErrorReply(Modbus_RecvFrame_IllegalFunction);
 8000ade:	2001      	movs	r0, #1
 8000ae0:	f7ff ffcc 	bl	8000a7c <ModbusErrorReply>
		break;
 8000ae4:	bf00      	nop

	}
}
 8000ae6:	bf00      	nop
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	20000228 	.word	0x20000228

08000af0 <Modbus_Emission>:

void Modbus_Emission()
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b082      	sub	sp, #8
 8000af4:	af00      	add	r7, sp, #0
	if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8000af6:	4b3c      	ldr	r3, [pc, #240]	@ (8000be8 <Modbus_Emission+0xf8>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	68db      	ldr	r3, [r3, #12]
 8000afc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b00:	2b20      	cmp	r3, #32
 8000b02:	d15d      	bne.n	8000bc0 <Modbus_Emission+0xd0>
	{
		//generate response package
		hModbus->modbusUartStructure.MessageBufferTx[0] = hModbus->slaveAddress;
 8000b04:	4b38      	ldr	r3, [pc, #224]	@ (8000be8 <Modbus_Emission+0xf8>)
 8000b06:	681a      	ldr	r2, [r3, #0]
 8000b08:	4b37      	ldr	r3, [pc, #220]	@ (8000be8 <Modbus_Emission+0xf8>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	7812      	ldrb	r2, [r2, #0]
 8000b0e:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		memcpy
		(
				hModbus->modbusUartStructure.MessageBufferTx+1,
 8000b12:	4b35      	ldr	r3, [pc, #212]	@ (8000be8 <Modbus_Emission+0xf8>)
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	f503 7369 	add.w	r3, r3, #932	@ 0x3a4
		memcpy
 8000b1a:	1c58      	adds	r0, r3, #1
				hModbus->Txframe,
 8000b1c:	4b32      	ldr	r3, [pc, #200]	@ (8000be8 <Modbus_Emission+0xf8>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	f203 1145 	addw	r1, r3, #325	@ 0x145
				hModbus->TxCount
 8000b24:	4b30      	ldr	r3, [pc, #192]	@ (8000be8 <Modbus_Emission+0xf8>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	f893 3271 	ldrb.w	r3, [r3, #625]	@ 0x271
		memcpy
 8000b2c:	461a      	mov	r2, r3
 8000b2e:	f006 ffed 	bl	8007b0c <memcpy>
		);

		hModbus->modbusUartStructure.TxTail = hModbus->TxCount+3;
 8000b32:	4b2d      	ldr	r3, [pc, #180]	@ (8000be8 <Modbus_Emission+0xf8>)
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	f893 3271 	ldrb.w	r3, [r3, #625]	@ 0x271
 8000b3a:	461a      	mov	r2, r3
 8000b3c:	4b2a      	ldr	r3, [pc, #168]	@ (8000be8 <Modbus_Emission+0xf8>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	3203      	adds	r2, #3
 8000b42:	b292      	uxth	r2, r2
 8000b44:	f8a3 24d4 	strh.w	r2, [r3, #1236]	@ 0x4d4

		u16u8_t CalculateCRC;
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 8000b48:	4b27      	ldr	r3, [pc, #156]	@ (8000be8 <Modbus_Emission+0xf8>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	f503 7269 	add.w	r2, r3, #932	@ 0x3a4
				hModbus->modbusUartStructure.TxTail - 2);
 8000b50:	4b25      	ldr	r3, [pc, #148]	@ (8000be8 <Modbus_Emission+0xf8>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 8000b58:	3b02      	subs	r3, #2
 8000b5a:	4619      	mov	r1, r3
 8000b5c:	4610      	mov	r0, r2
 8000b5e:	f7ff fd99 	bl	8000694 <CRC16>
 8000b62:	4603      	mov	r3, r0
 8000b64:	80bb      	strh	r3, [r7, #4]

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-2]
 8000b66:	4b20      	ldr	r3, [pc, #128]	@ (8000be8 <Modbus_Emission+0xf8>)
 8000b68:	681a      	ldr	r2, [r3, #0]
 8000b6a:	4b1f      	ldr	r3, [pc, #124]	@ (8000be8 <Modbus_Emission+0xf8>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 8000b72:	3b02      	subs	r3, #2
													 =CalculateCRC.U8[0];
 8000b74:	7939      	ldrb	r1, [r7, #4]
 8000b76:	4413      	add	r3, r2
 8000b78:	460a      	mov	r2, r1
 8000b7a:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-1]
 8000b7e:	4b1a      	ldr	r3, [pc, #104]	@ (8000be8 <Modbus_Emission+0xf8>)
 8000b80:	681a      	ldr	r2, [r3, #0]
 8000b82:	4b19      	ldr	r3, [pc, #100]	@ (8000be8 <Modbus_Emission+0xf8>)
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 8000b8a:	3b01      	subs	r3, #1
													 =CalculateCRC.U8[1];
 8000b8c:	7979      	ldrb	r1, [r7, #5]
 8000b8e:	4413      	add	r3, r2
 8000b90:	460a      	mov	r2, r1
 8000b92:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4


		//sent modbus

		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8000b96:	4b14      	ldr	r3, [pc, #80]	@ (8000be8 <Modbus_Emission+0xf8>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	68db      	ldr	r3, [r3, #12]
 8000b9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ba0:	2b20      	cmp	r3, #32
 8000ba2:	d10d      	bne.n	8000bc0 <Modbus_Emission+0xd0>
		{
			HAL_UART_Transmit_DMA(hModbus->huart
 8000ba4:	4b10      	ldr	r3, [pc, #64]	@ (8000be8 <Modbus_Emission+0xf8>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	68d8      	ldr	r0, [r3, #12]
					,hModbus->modbusUartStructure.MessageBufferTx
 8000baa:	4b0f      	ldr	r3, [pc, #60]	@ (8000be8 <Modbus_Emission+0xf8>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	f503 7169 	add.w	r1, r3, #932	@ 0x3a4
					,hModbus->modbusUartStructure.TxTail);
 8000bb2:	4b0d      	ldr	r3, [pc, #52]	@ (8000be8 <Modbus_Emission+0xf8>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
			HAL_UART_Transmit_DMA(hModbus->huart
 8000bb6:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 8000bba:	461a      	mov	r2, r3
 8000bbc:	f004 fc8a 	bl	80054d4 <HAL_UART_Transmit_DMA>



	}
	/*reset Timer flag*/
	hModbus->Flag_T15TimeOut = 0;
 8000bc0:	4b09      	ldr	r3, [pc, #36]	@ (8000be8 <Modbus_Emission+0xf8>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	751a      	strb	r2, [r3, #20]
	hModbus->Flag_T35TimeOut = 0;
 8000bc8:	4b07      	ldr	r3, [pc, #28]	@ (8000be8 <Modbus_Emission+0xf8>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	2200      	movs	r2, #0
 8000bce:	755a      	strb	r2, [r3, #21]
	hModbus->Flag_URev =0;
 8000bd0:	4b05      	ldr	r3, [pc, #20]	@ (8000be8 <Modbus_Emission+0xf8>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	759a      	strb	r2, [r3, #22]
	/*set state*/
	hModbus->Mstatus= Modbus_state_Emission;
 8000bd8:	4b03      	ldr	r3, [pc, #12]	@ (8000be8 <Modbus_Emission+0xf8>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	2202      	movs	r2, #2
 8000bde:	761a      	strb	r2, [r3, #24]
}
 8000be0:	bf00      	nop
 8000be2:	3708      	adds	r7, #8
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	20000228 	.word	0x20000228

08000bec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bf0:	f000 fc43 	bl	800147a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bf4:	f000 f83a 	bl	8000c6c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bf8:	f000 fa2c 	bl	8001054 <MX_GPIO_Init>
  MX_DMA_Init();
 8000bfc:	f000 fa00 	bl	8001000 <MX_DMA_Init>
  MX_TIM16_Init();
 8000c00:	f000 f930 	bl	8000e64 <MX_TIM16_Init>
  MX_USART2_UART_Init();
 8000c04:	f000 f9ae 	bl	8000f64 <MX_USART2_UART_Init>
  MX_TIM8_Init();
 8000c08:	f000 f87c 	bl	8000d04 <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 8000c0c:	210c      	movs	r1, #12
 8000c0e:	4811      	ldr	r0, [pc, #68]	@ (8000c54 <main+0x68>)
 8000c10:	f002 fc80 	bl	8003514 <HAL_TIM_PWM_Start>
  hmodbus.huart = &huart2;
 8000c14:	4b10      	ldr	r3, [pc, #64]	@ (8000c58 <main+0x6c>)
 8000c16:	4a11      	ldr	r2, [pc, #68]	@ (8000c5c <main+0x70>)
 8000c18:	60da      	str	r2, [r3, #12]
  hmodbus.htim = &htim16;
 8000c1a:	4b0f      	ldr	r3, [pc, #60]	@ (8000c58 <main+0x6c>)
 8000c1c:	4a10      	ldr	r2, [pc, #64]	@ (8000c60 <main+0x74>)
 8000c1e:	611a      	str	r2, [r3, #16]
  hmodbus.slaveAddress = 0x15;
 8000c20:	4b0d      	ldr	r3, [pc, #52]	@ (8000c58 <main+0x6c>)
 8000c22:	2215      	movs	r2, #21
 8000c24:	701a      	strb	r2, [r3, #0]
  hmodbus.RegisterSize =200;
 8000c26:	4b0c      	ldr	r3, [pc, #48]	@ (8000c58 <main+0x6c>)
 8000c28:	22c8      	movs	r2, #200	@ 0xc8
 8000c2a:	609a      	str	r2, [r3, #8]
  Modbus_init(&hmodbus, registerFrame);
 8000c2c:	490d      	ldr	r1, [pc, #52]	@ (8000c64 <main+0x78>)
 8000c2e:	480a      	ldr	r0, [pc, #40]	@ (8000c58 <main+0x6c>)
 8000c30:	f7ff fcda 	bl	80005e8 <Modbus_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  __HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_4,AAA);
 8000c34:	4b0c      	ldr	r3, [pc, #48]	@ (8000c68 <main+0x7c>)
 8000c36:	881a      	ldrh	r2, [r3, #0]
 8000c38:	4b06      	ldr	r3, [pc, #24]	@ (8000c54 <main+0x68>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	641a      	str	r2, [r3, #64]	@ 0x40
	  Modbus_Protocal_Worker();
 8000c3e:	f7ff fd61 	bl	8000704 <Modbus_Protocal_Worker>
	  registerFrame[0x00].U16 = 22881;
 8000c42:	4b08      	ldr	r3, [pc, #32]	@ (8000c64 <main+0x78>)
 8000c44:	f645 1261 	movw	r2, #22881	@ 0x5961
 8000c48:	801a      	strh	r2, [r3, #0]
	  registerFrame[0x15].U16 = 100;
 8000c4a:	4b06      	ldr	r3, [pc, #24]	@ (8000c64 <main+0x78>)
 8000c4c:	2264      	movs	r2, #100	@ 0x64
 8000c4e:	855a      	strh	r2, [r3, #42]	@ 0x2a
	  __HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_4,AAA);
 8000c50:	bf00      	nop
 8000c52:	e7ef      	b.n	8000c34 <main+0x48>
 8000c54:	2000022c 	.word	0x2000022c
 8000c58:	200004f0 	.word	0x200004f0
 8000c5c:	200003c4 	.word	0x200003c4
 8000c60:	200002f8 	.word	0x200002f8
 8000c64:	200009c8 	.word	0x200009c8
 8000c68:	20000b58 	.word	0x20000b58

08000c6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b094      	sub	sp, #80	@ 0x50
 8000c70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c72:	f107 0318 	add.w	r3, r7, #24
 8000c76:	2238      	movs	r2, #56	@ 0x38
 8000c78:	2100      	movs	r1, #0
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	f006 ff1a 	bl	8007ab4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c80:	1d3b      	adds	r3, r7, #4
 8000c82:	2200      	movs	r2, #0
 8000c84:	601a      	str	r2, [r3, #0]
 8000c86:	605a      	str	r2, [r3, #4]
 8000c88:	609a      	str	r2, [r3, #8]
 8000c8a:	60da      	str	r2, [r3, #12]
 8000c8c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000c8e:	2000      	movs	r0, #0
 8000c90:	f001 fa58 	bl	8002144 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c94:	2302      	movs	r3, #2
 8000c96:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c98:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000c9c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c9e:	2340      	movs	r3, #64	@ 0x40
 8000ca0:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ca2:	2302      	movs	r3, #2
 8000ca4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ca6:	2302      	movs	r3, #2
 8000ca8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000caa:	2304      	movs	r3, #4
 8000cac:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000cae:	2355      	movs	r3, #85	@ 0x55
 8000cb0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000cb2:	2302      	movs	r3, #2
 8000cb4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000cb6:	2302      	movs	r3, #2
 8000cb8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000cba:	2302      	movs	r3, #2
 8000cbc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cbe:	f107 0318 	add.w	r3, r7, #24
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f001 faf2 	bl	80022ac <HAL_RCC_OscConfig>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d001      	beq.n	8000cd2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000cce:	f000 fa1b 	bl	8001108 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cd2:	230f      	movs	r3, #15
 8000cd4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cd6:	2303      	movs	r3, #3
 8000cd8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000ce6:	1d3b      	adds	r3, r7, #4
 8000ce8:	2104      	movs	r1, #4
 8000cea:	4618      	mov	r0, r3
 8000cec:	f001 fdf0 	bl	80028d0 <HAL_RCC_ClockConfig>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d001      	beq.n	8000cfa <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000cf6:	f000 fa07 	bl	8001108 <Error_Handler>
  }
}
 8000cfa:	bf00      	nop
 8000cfc:	3750      	adds	r7, #80	@ 0x50
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
	...

08000d04 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b09c      	sub	sp, #112	@ 0x70
 8000d08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d0a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000d0e:	2200      	movs	r2, #0
 8000d10:	601a      	str	r2, [r3, #0]
 8000d12:	605a      	str	r2, [r3, #4]
 8000d14:	609a      	str	r2, [r3, #8]
 8000d16:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d18:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	601a      	str	r2, [r3, #0]
 8000d20:	605a      	str	r2, [r3, #4]
 8000d22:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d24:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000d28:	2200      	movs	r2, #0
 8000d2a:	601a      	str	r2, [r3, #0]
 8000d2c:	605a      	str	r2, [r3, #4]
 8000d2e:	609a      	str	r2, [r3, #8]
 8000d30:	60da      	str	r2, [r3, #12]
 8000d32:	611a      	str	r2, [r3, #16]
 8000d34:	615a      	str	r2, [r3, #20]
 8000d36:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000d38:	1d3b      	adds	r3, r7, #4
 8000d3a:	2234      	movs	r2, #52	@ 0x34
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f006 feb8 	bl	8007ab4 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000d44:	4b45      	ldr	r3, [pc, #276]	@ (8000e5c <MX_TIM8_Init+0x158>)
 8000d46:	4a46      	ldr	r2, [pc, #280]	@ (8000e60 <MX_TIM8_Init+0x15c>)
 8000d48:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8000d4a:	4b44      	ldr	r3, [pc, #272]	@ (8000e5c <MX_TIM8_Init+0x158>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d50:	4b42      	ldr	r3, [pc, #264]	@ (8000e5c <MX_TIM8_Init+0x158>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8000d56:	4b41      	ldr	r3, [pc, #260]	@ (8000e5c <MX_TIM8_Init+0x158>)
 8000d58:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000d5c:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d5e:	4b3f      	ldr	r3, [pc, #252]	@ (8000e5c <MX_TIM8_Init+0x158>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000d64:	4b3d      	ldr	r3, [pc, #244]	@ (8000e5c <MX_TIM8_Init+0x158>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d6a:	4b3c      	ldr	r3, [pc, #240]	@ (8000e5c <MX_TIM8_Init+0x158>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8000d70:	483a      	ldr	r0, [pc, #232]	@ (8000e5c <MX_TIM8_Init+0x158>)
 8000d72:	f002 fa17 	bl	80031a4 <HAL_TIM_Base_Init>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d001      	beq.n	8000d80 <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 8000d7c:	f000 f9c4 	bl	8001108 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d80:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d84:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8000d86:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	4833      	ldr	r0, [pc, #204]	@ (8000e5c <MX_TIM8_Init+0x158>)
 8000d8e:	f003 f8d1 	bl	8003f34 <HAL_TIM_ConfigClockSource>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d001      	beq.n	8000d9c <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 8000d98:	f000 f9b6 	bl	8001108 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8000d9c:	482f      	ldr	r0, [pc, #188]	@ (8000e5c <MX_TIM8_Init+0x158>)
 8000d9e:	f002 fb4b 	bl	8003438 <HAL_TIM_PWM_Init>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d001      	beq.n	8000dac <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 8000da8:	f000 f9ae 	bl	8001108 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dac:	2300      	movs	r3, #0
 8000dae:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000db0:	2300      	movs	r3, #0
 8000db2:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000db4:	2300      	movs	r3, #0
 8000db6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000db8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	4827      	ldr	r0, [pc, #156]	@ (8000e5c <MX_TIM8_Init+0x158>)
 8000dc0:	f004 f8a8 	bl	8004f14 <HAL_TIMEx_MasterConfigSynchronization>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d001      	beq.n	8000dce <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 8000dca:	f000 f99d 	bl	8001108 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000dce:	2360      	movs	r3, #96	@ 0x60
 8000dd0:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000dde:	2300      	movs	r3, #0
 8000de0:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000de2:	2300      	movs	r3, #0
 8000de4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000de6:	2300      	movs	r3, #0
 8000de8:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000dea:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000dee:	220c      	movs	r2, #12
 8000df0:	4619      	mov	r1, r3
 8000df2:	481a      	ldr	r0, [pc, #104]	@ (8000e5c <MX_TIM8_Init+0x158>)
 8000df4:	f002 ff8a 	bl	8003d0c <HAL_TIM_PWM_ConfigChannel>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d001      	beq.n	8000e02 <MX_TIM8_Init+0xfe>
  {
    Error_Handler();
 8000dfe:	f000 f983 	bl	8001108 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000e02:	2300      	movs	r3, #0
 8000e04:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000e06:	2300      	movs	r3, #0
 8000e08:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000e12:	2300      	movs	r3, #0
 8000e14:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000e16:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e1a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000e20:	2300      	movs	r3, #0
 8000e22:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000e24:	2300      	movs	r3, #0
 8000e26:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000e28:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000e2c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000e32:	2300      	movs	r3, #0
 8000e34:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000e36:	2300      	movs	r3, #0
 8000e38:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8000e3a:	1d3b      	adds	r3, r7, #4
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	4807      	ldr	r0, [pc, #28]	@ (8000e5c <MX_TIM8_Init+0x158>)
 8000e40:	f004 f8fe 	bl	8005040 <HAL_TIMEx_ConfigBreakDeadTime>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d001      	beq.n	8000e4e <MX_TIM8_Init+0x14a>
  {
    Error_Handler();
 8000e4a:	f000 f95d 	bl	8001108 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8000e4e:	4803      	ldr	r0, [pc, #12]	@ (8000e5c <MX_TIM8_Init+0x158>)
 8000e50:	f000 f9be 	bl	80011d0 <HAL_TIM_MspPostInit>

}
 8000e54:	bf00      	nop
 8000e56:	3770      	adds	r7, #112	@ 0x70
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	2000022c 	.word	0x2000022c
 8000e60:	40013400 	.word	0x40013400

08000e64 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b094      	sub	sp, #80	@ 0x50
 8000e68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e6a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000e6e:	2200      	movs	r2, #0
 8000e70:	601a      	str	r2, [r3, #0]
 8000e72:	605a      	str	r2, [r3, #4]
 8000e74:	609a      	str	r2, [r3, #8]
 8000e76:	60da      	str	r2, [r3, #12]
 8000e78:	611a      	str	r2, [r3, #16]
 8000e7a:	615a      	str	r2, [r3, #20]
 8000e7c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000e7e:	463b      	mov	r3, r7
 8000e80:	2234      	movs	r2, #52	@ 0x34
 8000e82:	2100      	movs	r1, #0
 8000e84:	4618      	mov	r0, r3
 8000e86:	f006 fe15 	bl	8007ab4 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000e8a:	4b34      	ldr	r3, [pc, #208]	@ (8000f5c <MX_TIM16_Init+0xf8>)
 8000e8c:	4a34      	ldr	r2, [pc, #208]	@ (8000f60 <MX_TIM16_Init+0xfc>)
 8000e8e:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 169;
 8000e90:	4b32      	ldr	r3, [pc, #200]	@ (8000f5c <MX_TIM16_Init+0xf8>)
 8000e92:	22a9      	movs	r2, #169	@ 0xa9
 8000e94:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e96:	4b31      	ldr	r3, [pc, #196]	@ (8000f5c <MX_TIM16_Init+0xf8>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 2005;
 8000e9c:	4b2f      	ldr	r3, [pc, #188]	@ (8000f5c <MX_TIM16_Init+0xf8>)
 8000e9e:	f240 72d5 	movw	r2, #2005	@ 0x7d5
 8000ea2:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ea4:	4b2d      	ldr	r3, [pc, #180]	@ (8000f5c <MX_TIM16_Init+0xf8>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000eaa:	4b2c      	ldr	r3, [pc, #176]	@ (8000f5c <MX_TIM16_Init+0xf8>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000eb0:	4b2a      	ldr	r3, [pc, #168]	@ (8000f5c <MX_TIM16_Init+0xf8>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000eb6:	4829      	ldr	r0, [pc, #164]	@ (8000f5c <MX_TIM16_Init+0xf8>)
 8000eb8:	f002 f974 	bl	80031a4 <HAL_TIM_Base_Init>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d001      	beq.n	8000ec6 <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 8000ec2:	f000 f921 	bl	8001108 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim16) != HAL_OK)
 8000ec6:	4825      	ldr	r0, [pc, #148]	@ (8000f5c <MX_TIM16_Init+0xf8>)
 8000ec8:	f002 fa48 	bl	800335c <HAL_TIM_OC_Init>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d001      	beq.n	8000ed6 <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 8000ed2:	f000 f919 	bl	8001108 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim16, TIM_OPMODE_SINGLE) != HAL_OK)
 8000ed6:	2108      	movs	r1, #8
 8000ed8:	4820      	ldr	r0, [pc, #128]	@ (8000f5c <MX_TIM16_Init+0xf8>)
 8000eda:	f002 fc2d 	bl	8003738 <HAL_TIM_OnePulse_Init>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d001      	beq.n	8000ee8 <MX_TIM16_Init+0x84>
  {
    Error_Handler();
 8000ee4:	f000 f910 	bl	8001108 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_ACTIVE;
 8000ee8:	2310      	movs	r3, #16
 8000eea:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.Pulse = 1433;
 8000eec:	f240 5399 	movw	r3, #1433	@ 0x599
 8000ef0:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000efa:	2300      	movs	r3, #0
 8000efc:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000efe:	2300      	movs	r3, #0
 8000f00:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000f02:	2300      	movs	r3, #0
 8000f04:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_TIM_OC_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f06:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	4813      	ldr	r0, [pc, #76]	@ (8000f5c <MX_TIM16_Init+0xf8>)
 8000f10:	f002 fe82 	bl	8003c18 <HAL_TIM_OC_ConfigChannel>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d001      	beq.n	8000f1e <MX_TIM16_Init+0xba>
  {
    Error_Handler();
 8000f1a:	f000 f8f5 	bl	8001108 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000f22:	2300      	movs	r3, #0
 8000f24:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000f26:	2300      	movs	r3, #0
 8000f28:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000f32:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f36:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8000f40:	463b      	mov	r3, r7
 8000f42:	4619      	mov	r1, r3
 8000f44:	4805      	ldr	r0, [pc, #20]	@ (8000f5c <MX_TIM16_Init+0xf8>)
 8000f46:	f004 f87b 	bl	8005040 <HAL_TIMEx_ConfigBreakDeadTime>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d001      	beq.n	8000f54 <MX_TIM16_Init+0xf0>
  {
    Error_Handler();
 8000f50:	f000 f8da 	bl	8001108 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8000f54:	bf00      	nop
 8000f56:	3750      	adds	r7, #80	@ 0x50
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	200002f8 	.word	0x200002f8
 8000f60:	40014400 	.word	0x40014400

08000f64 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f68:	4b23      	ldr	r3, [pc, #140]	@ (8000ff8 <MX_USART2_UART_Init+0x94>)
 8000f6a:	4a24      	ldr	r2, [pc, #144]	@ (8000ffc <MX_USART2_UART_Init+0x98>)
 8000f6c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 8000f6e:	4b22      	ldr	r3, [pc, #136]	@ (8000ff8 <MX_USART2_UART_Init+0x94>)
 8000f70:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 8000f74:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8000f76:	4b20      	ldr	r3, [pc, #128]	@ (8000ff8 <MX_USART2_UART_Init+0x94>)
 8000f78:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000f7c:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f7e:	4b1e      	ldr	r3, [pc, #120]	@ (8000ff8 <MX_USART2_UART_Init+0x94>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8000f84:	4b1c      	ldr	r3, [pc, #112]	@ (8000ff8 <MX_USART2_UART_Init+0x94>)
 8000f86:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000f8a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f8c:	4b1a      	ldr	r3, [pc, #104]	@ (8000ff8 <MX_USART2_UART_Init+0x94>)
 8000f8e:	220c      	movs	r2, #12
 8000f90:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f92:	4b19      	ldr	r3, [pc, #100]	@ (8000ff8 <MX_USART2_UART_Init+0x94>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f98:	4b17      	ldr	r3, [pc, #92]	@ (8000ff8 <MX_USART2_UART_Init+0x94>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f9e:	4b16      	ldr	r3, [pc, #88]	@ (8000ff8 <MX_USART2_UART_Init+0x94>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000fa4:	4b14      	ldr	r3, [pc, #80]	@ (8000ff8 <MX_USART2_UART_Init+0x94>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000faa:	4b13      	ldr	r3, [pc, #76]	@ (8000ff8 <MX_USART2_UART_Init+0x94>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000fb0:	4811      	ldr	r0, [pc, #68]	@ (8000ff8 <MX_USART2_UART_Init+0x94>)
 8000fb2:	f004 f929 	bl	8005208 <HAL_UART_Init>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d001      	beq.n	8000fc0 <MX_USART2_UART_Init+0x5c>
  {
    Error_Handler();
 8000fbc:	f000 f8a4 	bl	8001108 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000fc0:	2100      	movs	r1, #0
 8000fc2:	480d      	ldr	r0, [pc, #52]	@ (8000ff8 <MX_USART2_UART_Init+0x94>)
 8000fc4:	f006 fcab 	bl	800791e <HAL_UARTEx_SetTxFifoThreshold>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d001      	beq.n	8000fd2 <MX_USART2_UART_Init+0x6e>
  {
    Error_Handler();
 8000fce:	f000 f89b 	bl	8001108 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000fd2:	2100      	movs	r1, #0
 8000fd4:	4808      	ldr	r0, [pc, #32]	@ (8000ff8 <MX_USART2_UART_Init+0x94>)
 8000fd6:	f006 fce0 	bl	800799a <HAL_UARTEx_SetRxFifoThreshold>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d001      	beq.n	8000fe4 <MX_USART2_UART_Init+0x80>
  {
    Error_Handler();
 8000fe0:	f000 f892 	bl	8001108 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000fe4:	4804      	ldr	r0, [pc, #16]	@ (8000ff8 <MX_USART2_UART_Init+0x94>)
 8000fe6:	f006 fc61 	bl	80078ac <HAL_UARTEx_DisableFifoMode>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d001      	beq.n	8000ff4 <MX_USART2_UART_Init+0x90>
  {
    Error_Handler();
 8000ff0:	f000 f88a 	bl	8001108 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ff4:	bf00      	nop
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	200003c4 	.word	0x200003c4
 8000ffc:	40004400 	.word	0x40004400

08001000 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001006:	4b12      	ldr	r3, [pc, #72]	@ (8001050 <MX_DMA_Init+0x50>)
 8001008:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800100a:	4a11      	ldr	r2, [pc, #68]	@ (8001050 <MX_DMA_Init+0x50>)
 800100c:	f043 0304 	orr.w	r3, r3, #4
 8001010:	6493      	str	r3, [r2, #72]	@ 0x48
 8001012:	4b0f      	ldr	r3, [pc, #60]	@ (8001050 <MX_DMA_Init+0x50>)
 8001014:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001016:	f003 0304 	and.w	r3, r3, #4
 800101a:	607b      	str	r3, [r7, #4]
 800101c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800101e:	4b0c      	ldr	r3, [pc, #48]	@ (8001050 <MX_DMA_Init+0x50>)
 8001020:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001022:	4a0b      	ldr	r2, [pc, #44]	@ (8001050 <MX_DMA_Init+0x50>)
 8001024:	f043 0301 	orr.w	r3, r3, #1
 8001028:	6493      	str	r3, [r2, #72]	@ 0x48
 800102a:	4b09      	ldr	r3, [pc, #36]	@ (8001050 <MX_DMA_Init+0x50>)
 800102c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800102e:	f003 0301 	and.w	r3, r3, #1
 8001032:	603b      	str	r3, [r7, #0]
 8001034:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001036:	2200      	movs	r2, #0
 8001038:	2100      	movs	r1, #0
 800103a:	200b      	movs	r0, #11
 800103c:	f000 fb69 	bl	8001712 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001040:	200b      	movs	r0, #11
 8001042:	f000 fb80 	bl	8001746 <HAL_NVIC_EnableIRQ>

}
 8001046:	bf00      	nop
 8001048:	3708      	adds	r7, #8
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	40021000 	.word	0x40021000

08001054 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b08a      	sub	sp, #40	@ 0x28
 8001058:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800105a:	f107 0314 	add.w	r3, r7, #20
 800105e:	2200      	movs	r2, #0
 8001060:	601a      	str	r2, [r3, #0]
 8001062:	605a      	str	r2, [r3, #4]
 8001064:	609a      	str	r2, [r3, #8]
 8001066:	60da      	str	r2, [r3, #12]
 8001068:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800106a:	4b25      	ldr	r3, [pc, #148]	@ (8001100 <MX_GPIO_Init+0xac>)
 800106c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800106e:	4a24      	ldr	r2, [pc, #144]	@ (8001100 <MX_GPIO_Init+0xac>)
 8001070:	f043 0304 	orr.w	r3, r3, #4
 8001074:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001076:	4b22      	ldr	r3, [pc, #136]	@ (8001100 <MX_GPIO_Init+0xac>)
 8001078:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800107a:	f003 0304 	and.w	r3, r3, #4
 800107e:	613b      	str	r3, [r7, #16]
 8001080:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001082:	4b1f      	ldr	r3, [pc, #124]	@ (8001100 <MX_GPIO_Init+0xac>)
 8001084:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001086:	4a1e      	ldr	r2, [pc, #120]	@ (8001100 <MX_GPIO_Init+0xac>)
 8001088:	f043 0320 	orr.w	r3, r3, #32
 800108c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800108e:	4b1c      	ldr	r3, [pc, #112]	@ (8001100 <MX_GPIO_Init+0xac>)
 8001090:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001092:	f003 0320 	and.w	r3, r3, #32
 8001096:	60fb      	str	r3, [r7, #12]
 8001098:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800109a:	4b19      	ldr	r3, [pc, #100]	@ (8001100 <MX_GPIO_Init+0xac>)
 800109c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800109e:	4a18      	ldr	r2, [pc, #96]	@ (8001100 <MX_GPIO_Init+0xac>)
 80010a0:	f043 0301 	orr.w	r3, r3, #1
 80010a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010a6:	4b16      	ldr	r3, [pc, #88]	@ (8001100 <MX_GPIO_Init+0xac>)
 80010a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010aa:	f003 0301 	and.w	r3, r3, #1
 80010ae:	60bb      	str	r3, [r7, #8]
 80010b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010b2:	4b13      	ldr	r3, [pc, #76]	@ (8001100 <MX_GPIO_Init+0xac>)
 80010b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010b6:	4a12      	ldr	r2, [pc, #72]	@ (8001100 <MX_GPIO_Init+0xac>)
 80010b8:	f043 0302 	orr.w	r3, r3, #2
 80010bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010be:	4b10      	ldr	r3, [pc, #64]	@ (8001100 <MX_GPIO_Init+0xac>)
 80010c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010c2:	f003 0302 	and.w	r3, r3, #2
 80010c6:	607b      	str	r3, [r7, #4]
 80010c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80010ca:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80010ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010d0:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80010d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d6:	2300      	movs	r3, #0
 80010d8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80010da:	f107 0314 	add.w	r3, r7, #20
 80010de:	4619      	mov	r1, r3
 80010e0:	4808      	ldr	r0, [pc, #32]	@ (8001104 <MX_GPIO_Init+0xb0>)
 80010e2:	f000 fe89 	bl	8001df8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80010e6:	2200      	movs	r2, #0
 80010e8:	2100      	movs	r1, #0
 80010ea:	2028      	movs	r0, #40	@ 0x28
 80010ec:	f000 fb11 	bl	8001712 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80010f0:	2028      	movs	r0, #40	@ 0x28
 80010f2:	f000 fb28 	bl	8001746 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80010f6:	bf00      	nop
 80010f8:	3728      	adds	r7, #40	@ 0x28
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	40021000 	.word	0x40021000
 8001104:	48000800 	.word	0x48000800

08001108 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800110c:	b672      	cpsid	i
}
 800110e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001110:	bf00      	nop
 8001112:	e7fd      	b.n	8001110 <Error_Handler+0x8>

08001114 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800111a:	4b0f      	ldr	r3, [pc, #60]	@ (8001158 <HAL_MspInit+0x44>)
 800111c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800111e:	4a0e      	ldr	r2, [pc, #56]	@ (8001158 <HAL_MspInit+0x44>)
 8001120:	f043 0301 	orr.w	r3, r3, #1
 8001124:	6613      	str	r3, [r2, #96]	@ 0x60
 8001126:	4b0c      	ldr	r3, [pc, #48]	@ (8001158 <HAL_MspInit+0x44>)
 8001128:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800112a:	f003 0301 	and.w	r3, r3, #1
 800112e:	607b      	str	r3, [r7, #4]
 8001130:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001132:	4b09      	ldr	r3, [pc, #36]	@ (8001158 <HAL_MspInit+0x44>)
 8001134:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001136:	4a08      	ldr	r2, [pc, #32]	@ (8001158 <HAL_MspInit+0x44>)
 8001138:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800113c:	6593      	str	r3, [r2, #88]	@ 0x58
 800113e:	4b06      	ldr	r3, [pc, #24]	@ (8001158 <HAL_MspInit+0x44>)
 8001140:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001142:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001146:	603b      	str	r3, [r7, #0]
 8001148:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800114a:	f001 f89f 	bl	800228c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800114e:	bf00      	nop
 8001150:	3708      	adds	r7, #8
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	40021000 	.word	0x40021000

0800115c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b084      	sub	sp, #16
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM8)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4a16      	ldr	r2, [pc, #88]	@ (80011c4 <HAL_TIM_Base_MspInit+0x68>)
 800116a:	4293      	cmp	r3, r2
 800116c:	d10c      	bne.n	8001188 <HAL_TIM_Base_MspInit+0x2c>
  {
    /* USER CODE BEGIN TIM8_MspInit 0 */

    /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 800116e:	4b16      	ldr	r3, [pc, #88]	@ (80011c8 <HAL_TIM_Base_MspInit+0x6c>)
 8001170:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001172:	4a15      	ldr	r2, [pc, #84]	@ (80011c8 <HAL_TIM_Base_MspInit+0x6c>)
 8001174:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001178:	6613      	str	r3, [r2, #96]	@ 0x60
 800117a:	4b13      	ldr	r3, [pc, #76]	@ (80011c8 <HAL_TIM_Base_MspInit+0x6c>)
 800117c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800117e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001182:	60fb      	str	r3, [r7, #12]
 8001184:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN TIM16_MspInit 1 */

    /* USER CODE END TIM16_MspInit 1 */
  }

}
 8001186:	e018      	b.n	80011ba <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM16)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4a0f      	ldr	r2, [pc, #60]	@ (80011cc <HAL_TIM_Base_MspInit+0x70>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d113      	bne.n	80011ba <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001192:	4b0d      	ldr	r3, [pc, #52]	@ (80011c8 <HAL_TIM_Base_MspInit+0x6c>)
 8001194:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001196:	4a0c      	ldr	r2, [pc, #48]	@ (80011c8 <HAL_TIM_Base_MspInit+0x6c>)
 8001198:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800119c:	6613      	str	r3, [r2, #96]	@ 0x60
 800119e:	4b0a      	ldr	r3, [pc, #40]	@ (80011c8 <HAL_TIM_Base_MspInit+0x6c>)
 80011a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80011a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011a6:	60bb      	str	r3, [r7, #8]
 80011a8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80011aa:	2200      	movs	r2, #0
 80011ac:	2100      	movs	r1, #0
 80011ae:	2019      	movs	r0, #25
 80011b0:	f000 faaf 	bl	8001712 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80011b4:	2019      	movs	r0, #25
 80011b6:	f000 fac6 	bl	8001746 <HAL_NVIC_EnableIRQ>
}
 80011ba:	bf00      	nop
 80011bc:	3710      	adds	r7, #16
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	40013400 	.word	0x40013400
 80011c8:	40021000 	.word	0x40021000
 80011cc:	40014400 	.word	0x40014400

080011d0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b088      	sub	sp, #32
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011d8:	f107 030c 	add.w	r3, r7, #12
 80011dc:	2200      	movs	r2, #0
 80011de:	601a      	str	r2, [r3, #0]
 80011e0:	605a      	str	r2, [r3, #4]
 80011e2:	609a      	str	r2, [r3, #8]
 80011e4:	60da      	str	r2, [r3, #12]
 80011e6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM8)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4a11      	ldr	r2, [pc, #68]	@ (8001234 <HAL_TIM_MspPostInit+0x64>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d11c      	bne.n	800122c <HAL_TIM_MspPostInit+0x5c>
  {
    /* USER CODE BEGIN TIM8_MspPostInit 0 */

    /* USER CODE END TIM8_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011f2:	4b11      	ldr	r3, [pc, #68]	@ (8001238 <HAL_TIM_MspPostInit+0x68>)
 80011f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011f6:	4a10      	ldr	r2, [pc, #64]	@ (8001238 <HAL_TIM_MspPostInit+0x68>)
 80011f8:	f043 0304 	orr.w	r3, r3, #4
 80011fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011fe:	4b0e      	ldr	r3, [pc, #56]	@ (8001238 <HAL_TIM_MspPostInit+0x68>)
 8001200:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001202:	f003 0304 	and.w	r3, r3, #4
 8001206:	60bb      	str	r3, [r7, #8]
 8001208:	68bb      	ldr	r3, [r7, #8]
    /**TIM8 GPIO Configuration
    PC9     ------> TIM8_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800120a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800120e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001210:	2302      	movs	r3, #2
 8001212:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001214:	2300      	movs	r3, #0
 8001216:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001218:	2300      	movs	r3, #0
 800121a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 800121c:	2304      	movs	r3, #4
 800121e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001220:	f107 030c 	add.w	r3, r7, #12
 8001224:	4619      	mov	r1, r3
 8001226:	4805      	ldr	r0, [pc, #20]	@ (800123c <HAL_TIM_MspPostInit+0x6c>)
 8001228:	f000 fde6 	bl	8001df8 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM8_MspPostInit 1 */

    /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 800122c:	bf00      	nop
 800122e:	3720      	adds	r7, #32
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}
 8001234:	40013400 	.word	0x40013400
 8001238:	40021000 	.word	0x40021000
 800123c:	48000800 	.word	0x48000800

08001240 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b09e      	sub	sp, #120	@ 0x78
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001248:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800124c:	2200      	movs	r2, #0
 800124e:	601a      	str	r2, [r3, #0]
 8001250:	605a      	str	r2, [r3, #4]
 8001252:	609a      	str	r2, [r3, #8]
 8001254:	60da      	str	r2, [r3, #12]
 8001256:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001258:	f107 0310 	add.w	r3, r7, #16
 800125c:	2254      	movs	r2, #84	@ 0x54
 800125e:	2100      	movs	r1, #0
 8001260:	4618      	mov	r0, r3
 8001262:	f006 fc27 	bl	8007ab4 <memset>
  if(huart->Instance==USART2)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	4a37      	ldr	r2, [pc, #220]	@ (8001348 <HAL_UART_MspInit+0x108>)
 800126c:	4293      	cmp	r3, r2
 800126e:	d167      	bne.n	8001340 <HAL_UART_MspInit+0x100>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001270:	2302      	movs	r3, #2
 8001272:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001274:	2300      	movs	r3, #0
 8001276:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001278:	f107 0310 	add.w	r3, r7, #16
 800127c:	4618      	mov	r0, r3
 800127e:	f001 fd43 	bl	8002d08 <HAL_RCCEx_PeriphCLKConfig>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d001      	beq.n	800128c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001288:	f7ff ff3e 	bl	8001108 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800128c:	4b2f      	ldr	r3, [pc, #188]	@ (800134c <HAL_UART_MspInit+0x10c>)
 800128e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001290:	4a2e      	ldr	r2, [pc, #184]	@ (800134c <HAL_UART_MspInit+0x10c>)
 8001292:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001296:	6593      	str	r3, [r2, #88]	@ 0x58
 8001298:	4b2c      	ldr	r3, [pc, #176]	@ (800134c <HAL_UART_MspInit+0x10c>)
 800129a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800129c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012a0:	60fb      	str	r3, [r7, #12]
 80012a2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012a4:	4b29      	ldr	r3, [pc, #164]	@ (800134c <HAL_UART_MspInit+0x10c>)
 80012a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012a8:	4a28      	ldr	r2, [pc, #160]	@ (800134c <HAL_UART_MspInit+0x10c>)
 80012aa:	f043 0301 	orr.w	r3, r3, #1
 80012ae:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012b0:	4b26      	ldr	r3, [pc, #152]	@ (800134c <HAL_UART_MspInit+0x10c>)
 80012b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012b4:	f003 0301 	and.w	r3, r3, #1
 80012b8:	60bb      	str	r3, [r7, #8]
 80012ba:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80012bc:	230c      	movs	r3, #12
 80012be:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012c0:	2302      	movs	r3, #2
 80012c2:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c4:	2300      	movs	r3, #0
 80012c6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c8:	2300      	movs	r3, #0
 80012ca:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80012cc:	2307      	movs	r3, #7
 80012ce:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012d0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80012d4:	4619      	mov	r1, r3
 80012d6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012da:	f000 fd8d 	bl	8001df8 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel1;
 80012de:	4b1c      	ldr	r3, [pc, #112]	@ (8001350 <HAL_UART_MspInit+0x110>)
 80012e0:	4a1c      	ldr	r2, [pc, #112]	@ (8001354 <HAL_UART_MspInit+0x114>)
 80012e2:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 80012e4:	4b1a      	ldr	r3, [pc, #104]	@ (8001350 <HAL_UART_MspInit+0x110>)
 80012e6:	221b      	movs	r2, #27
 80012e8:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80012ea:	4b19      	ldr	r3, [pc, #100]	@ (8001350 <HAL_UART_MspInit+0x110>)
 80012ec:	2210      	movs	r2, #16
 80012ee:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80012f0:	4b17      	ldr	r3, [pc, #92]	@ (8001350 <HAL_UART_MspInit+0x110>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80012f6:	4b16      	ldr	r3, [pc, #88]	@ (8001350 <HAL_UART_MspInit+0x110>)
 80012f8:	2280      	movs	r2, #128	@ 0x80
 80012fa:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80012fc:	4b14      	ldr	r3, [pc, #80]	@ (8001350 <HAL_UART_MspInit+0x110>)
 80012fe:	2200      	movs	r2, #0
 8001300:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001302:	4b13      	ldr	r3, [pc, #76]	@ (8001350 <HAL_UART_MspInit+0x110>)
 8001304:	2200      	movs	r2, #0
 8001306:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001308:	4b11      	ldr	r3, [pc, #68]	@ (8001350 <HAL_UART_MspInit+0x110>)
 800130a:	2200      	movs	r2, #0
 800130c:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800130e:	4b10      	ldr	r3, [pc, #64]	@ (8001350 <HAL_UART_MspInit+0x110>)
 8001310:	2200      	movs	r2, #0
 8001312:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001314:	480e      	ldr	r0, [pc, #56]	@ (8001350 <HAL_UART_MspInit+0x110>)
 8001316:	f000 fa31 	bl	800177c <HAL_DMA_Init>
 800131a:	4603      	mov	r3, r0
 800131c:	2b00      	cmp	r3, #0
 800131e:	d001      	beq.n	8001324 <HAL_UART_MspInit+0xe4>
    {
      Error_Handler();
 8001320:	f7ff fef2 	bl	8001108 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	4a0a      	ldr	r2, [pc, #40]	@ (8001350 <HAL_UART_MspInit+0x110>)
 8001328:	67da      	str	r2, [r3, #124]	@ 0x7c
 800132a:	4a09      	ldr	r2, [pc, #36]	@ (8001350 <HAL_UART_MspInit+0x110>)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001330:	2200      	movs	r2, #0
 8001332:	2100      	movs	r1, #0
 8001334:	2026      	movs	r0, #38	@ 0x26
 8001336:	f000 f9ec 	bl	8001712 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800133a:	2026      	movs	r0, #38	@ 0x26
 800133c:	f000 fa03 	bl	8001746 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8001340:	bf00      	nop
 8001342:	3778      	adds	r7, #120	@ 0x78
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}
 8001348:	40004400 	.word	0x40004400
 800134c:	40021000 	.word	0x40021000
 8001350:	20000490 	.word	0x20000490
 8001354:	40020008 	.word	0x40020008

08001358 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800135c:	bf00      	nop
 800135e:	e7fd      	b.n	800135c <NMI_Handler+0x4>

08001360 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001364:	bf00      	nop
 8001366:	e7fd      	b.n	8001364 <HardFault_Handler+0x4>

08001368 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800136c:	bf00      	nop
 800136e:	e7fd      	b.n	800136c <MemManage_Handler+0x4>

08001370 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001374:	bf00      	nop
 8001376:	e7fd      	b.n	8001374 <BusFault_Handler+0x4>

08001378 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800137c:	bf00      	nop
 800137e:	e7fd      	b.n	800137c <UsageFault_Handler+0x4>

08001380 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001384:	bf00      	nop
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr

0800138e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800138e:	b480      	push	{r7}
 8001390:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001392:	bf00      	nop
 8001394:	46bd      	mov	sp, r7
 8001396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139a:	4770      	bx	lr

0800139c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013a0:	bf00      	nop
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr

080013aa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013aa:	b580      	push	{r7, lr}
 80013ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013ae:	f000 f8b7 	bl	8001520 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013b2:	bf00      	nop
 80013b4:	bd80      	pop	{r7, pc}
	...

080013b8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80013bc:	4802      	ldr	r0, [pc, #8]	@ (80013c8 <DMA1_Channel1_IRQHandler+0x10>)
 80013be:	f000 fbc0 	bl	8001b42 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80013c2:	bf00      	nop
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	20000490 	.word	0x20000490

080013cc <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 80013d0:	4802      	ldr	r0, [pc, #8]	@ (80013dc <TIM1_UP_TIM16_IRQHandler+0x10>)
 80013d2:	f002 faa7 	bl	8003924 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80013d6:	bf00      	nop
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	200002f8 	.word	0x200002f8

080013e0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80013e4:	4802      	ldr	r0, [pc, #8]	@ (80013f0 <USART2_IRQHandler+0x10>)
 80013e6:	f004 f9ab 	bl	8005740 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80013ea:	bf00      	nop
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	200003c4 	.word	0x200003c4

080013f4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80013f8:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80013fc:	f000 fe7e 	bl	80020fc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001400:	bf00      	nop
 8001402:	bd80      	pop	{r7, pc}

08001404 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001408:	4b06      	ldr	r3, [pc, #24]	@ (8001424 <SystemInit+0x20>)
 800140a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800140e:	4a05      	ldr	r2, [pc, #20]	@ (8001424 <SystemInit+0x20>)
 8001410:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001414:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001418:	bf00      	nop
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr
 8001422:	bf00      	nop
 8001424:	e000ed00 	.word	0xe000ed00

08001428 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001428:	480d      	ldr	r0, [pc, #52]	@ (8001460 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800142a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 800142c:	f7ff ffea 	bl	8001404 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001430:	480c      	ldr	r0, [pc, #48]	@ (8001464 <LoopForever+0x6>)
  ldr r1, =_edata
 8001432:	490d      	ldr	r1, [pc, #52]	@ (8001468 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001434:	4a0d      	ldr	r2, [pc, #52]	@ (800146c <LoopForever+0xe>)
  movs r3, #0
 8001436:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001438:	e002      	b.n	8001440 <LoopCopyDataInit>

0800143a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800143a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800143c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800143e:	3304      	adds	r3, #4

08001440 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001440:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001442:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001444:	d3f9      	bcc.n	800143a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001446:	4a0a      	ldr	r2, [pc, #40]	@ (8001470 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001448:	4c0a      	ldr	r4, [pc, #40]	@ (8001474 <LoopForever+0x16>)
  movs r3, #0
 800144a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800144c:	e001      	b.n	8001452 <LoopFillZerobss>

0800144e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800144e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001450:	3204      	adds	r2, #4

08001452 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001452:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001454:	d3fb      	bcc.n	800144e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001456:	f006 fb35 	bl	8007ac4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800145a:	f7ff fbc7 	bl	8000bec <main>

0800145e <LoopForever>:

LoopForever:
    b LoopForever
 800145e:	e7fe      	b.n	800145e <LoopForever>
  ldr   r0, =_estack
 8001460:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001464:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001468:	2000020c 	.word	0x2000020c
  ldr r2, =_sidata
 800146c:	08007b90 	.word	0x08007b90
  ldr r2, =_sbss
 8001470:	2000020c 	.word	0x2000020c
  ldr r4, =_ebss
 8001474:	20000b60 	.word	0x20000b60

08001478 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001478:	e7fe      	b.n	8001478 <ADC1_2_IRQHandler>

0800147a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800147a:	b580      	push	{r7, lr}
 800147c:	b082      	sub	sp, #8
 800147e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001480:	2300      	movs	r3, #0
 8001482:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001484:	2003      	movs	r0, #3
 8001486:	f000 f939 	bl	80016fc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800148a:	2000      	movs	r0, #0
 800148c:	f000 f80e 	bl	80014ac <HAL_InitTick>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d002      	beq.n	800149c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001496:	2301      	movs	r3, #1
 8001498:	71fb      	strb	r3, [r7, #7]
 800149a:	e001      	b.n	80014a0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800149c:	f7ff fe3a 	bl	8001114 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80014a0:	79fb      	ldrb	r3, [r7, #7]

}
 80014a2:	4618      	mov	r0, r3
 80014a4:	3708      	adds	r7, #8
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
	...

080014ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b084      	sub	sp, #16
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80014b4:	2300      	movs	r3, #0
 80014b6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80014b8:	4b16      	ldr	r3, [pc, #88]	@ (8001514 <HAL_InitTick+0x68>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d022      	beq.n	8001506 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80014c0:	4b15      	ldr	r3, [pc, #84]	@ (8001518 <HAL_InitTick+0x6c>)
 80014c2:	681a      	ldr	r2, [r3, #0]
 80014c4:	4b13      	ldr	r3, [pc, #76]	@ (8001514 <HAL_InitTick+0x68>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80014cc:	fbb1 f3f3 	udiv	r3, r1, r3
 80014d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80014d4:	4618      	mov	r0, r3
 80014d6:	f000 f944 	bl	8001762 <HAL_SYSTICK_Config>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d10f      	bne.n	8001500 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2b0f      	cmp	r3, #15
 80014e4:	d809      	bhi.n	80014fa <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014e6:	2200      	movs	r2, #0
 80014e8:	6879      	ldr	r1, [r7, #4]
 80014ea:	f04f 30ff 	mov.w	r0, #4294967295
 80014ee:	f000 f910 	bl	8001712 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80014f2:	4a0a      	ldr	r2, [pc, #40]	@ (800151c <HAL_InitTick+0x70>)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6013      	str	r3, [r2, #0]
 80014f8:	e007      	b.n	800150a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80014fa:	2301      	movs	r3, #1
 80014fc:	73fb      	strb	r3, [r7, #15]
 80014fe:	e004      	b.n	800150a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001500:	2301      	movs	r3, #1
 8001502:	73fb      	strb	r3, [r7, #15]
 8001504:	e001      	b.n	800150a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001506:	2301      	movs	r3, #1
 8001508:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800150a:	7bfb      	ldrb	r3, [r7, #15]
}
 800150c:	4618      	mov	r0, r3
 800150e:	3710      	adds	r7, #16
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}
 8001514:	20000208 	.word	0x20000208
 8001518:	20000200 	.word	0x20000200
 800151c:	20000204 	.word	0x20000204

08001520 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001524:	4b05      	ldr	r3, [pc, #20]	@ (800153c <HAL_IncTick+0x1c>)
 8001526:	681a      	ldr	r2, [r3, #0]
 8001528:	4b05      	ldr	r3, [pc, #20]	@ (8001540 <HAL_IncTick+0x20>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4413      	add	r3, r2
 800152e:	4a03      	ldr	r2, [pc, #12]	@ (800153c <HAL_IncTick+0x1c>)
 8001530:	6013      	str	r3, [r2, #0]
}
 8001532:	bf00      	nop
 8001534:	46bd      	mov	sp, r7
 8001536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153a:	4770      	bx	lr
 800153c:	20000b5c 	.word	0x20000b5c
 8001540:	20000208 	.word	0x20000208

08001544 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0
  return uwTick;
 8001548:	4b03      	ldr	r3, [pc, #12]	@ (8001558 <HAL_GetTick+0x14>)
 800154a:	681b      	ldr	r3, [r3, #0]
}
 800154c:	4618      	mov	r0, r3
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr
 8001556:	bf00      	nop
 8001558:	20000b5c 	.word	0x20000b5c

0800155c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800155c:	b480      	push	{r7}
 800155e:	b085      	sub	sp, #20
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	f003 0307 	and.w	r3, r3, #7
 800156a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800156c:	4b0c      	ldr	r3, [pc, #48]	@ (80015a0 <__NVIC_SetPriorityGrouping+0x44>)
 800156e:	68db      	ldr	r3, [r3, #12]
 8001570:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001572:	68ba      	ldr	r2, [r7, #8]
 8001574:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001578:	4013      	ands	r3, r2
 800157a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001580:	68bb      	ldr	r3, [r7, #8]
 8001582:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001584:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001588:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800158c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800158e:	4a04      	ldr	r2, [pc, #16]	@ (80015a0 <__NVIC_SetPriorityGrouping+0x44>)
 8001590:	68bb      	ldr	r3, [r7, #8]
 8001592:	60d3      	str	r3, [r2, #12]
}
 8001594:	bf00      	nop
 8001596:	3714      	adds	r7, #20
 8001598:	46bd      	mov	sp, r7
 800159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159e:	4770      	bx	lr
 80015a0:	e000ed00 	.word	0xe000ed00

080015a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015a8:	4b04      	ldr	r3, [pc, #16]	@ (80015bc <__NVIC_GetPriorityGrouping+0x18>)
 80015aa:	68db      	ldr	r3, [r3, #12]
 80015ac:	0a1b      	lsrs	r3, r3, #8
 80015ae:	f003 0307 	and.w	r3, r3, #7
}
 80015b2:	4618      	mov	r0, r3
 80015b4:	46bd      	mov	sp, r7
 80015b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ba:	4770      	bx	lr
 80015bc:	e000ed00 	.word	0xe000ed00

080015c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b083      	sub	sp, #12
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	4603      	mov	r3, r0
 80015c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	db0b      	blt.n	80015ea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015d2:	79fb      	ldrb	r3, [r7, #7]
 80015d4:	f003 021f 	and.w	r2, r3, #31
 80015d8:	4907      	ldr	r1, [pc, #28]	@ (80015f8 <__NVIC_EnableIRQ+0x38>)
 80015da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015de:	095b      	lsrs	r3, r3, #5
 80015e0:	2001      	movs	r0, #1
 80015e2:	fa00 f202 	lsl.w	r2, r0, r2
 80015e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80015ea:	bf00      	nop
 80015ec:	370c      	adds	r7, #12
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr
 80015f6:	bf00      	nop
 80015f8:	e000e100 	.word	0xe000e100

080015fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b083      	sub	sp, #12
 8001600:	af00      	add	r7, sp, #0
 8001602:	4603      	mov	r3, r0
 8001604:	6039      	str	r1, [r7, #0]
 8001606:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001608:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800160c:	2b00      	cmp	r3, #0
 800160e:	db0a      	blt.n	8001626 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	b2da      	uxtb	r2, r3
 8001614:	490c      	ldr	r1, [pc, #48]	@ (8001648 <__NVIC_SetPriority+0x4c>)
 8001616:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800161a:	0112      	lsls	r2, r2, #4
 800161c:	b2d2      	uxtb	r2, r2
 800161e:	440b      	add	r3, r1
 8001620:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001624:	e00a      	b.n	800163c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	b2da      	uxtb	r2, r3
 800162a:	4908      	ldr	r1, [pc, #32]	@ (800164c <__NVIC_SetPriority+0x50>)
 800162c:	79fb      	ldrb	r3, [r7, #7]
 800162e:	f003 030f 	and.w	r3, r3, #15
 8001632:	3b04      	subs	r3, #4
 8001634:	0112      	lsls	r2, r2, #4
 8001636:	b2d2      	uxtb	r2, r2
 8001638:	440b      	add	r3, r1
 800163a:	761a      	strb	r2, [r3, #24]
}
 800163c:	bf00      	nop
 800163e:	370c      	adds	r7, #12
 8001640:	46bd      	mov	sp, r7
 8001642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001646:	4770      	bx	lr
 8001648:	e000e100 	.word	0xe000e100
 800164c:	e000ed00 	.word	0xe000ed00

08001650 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001650:	b480      	push	{r7}
 8001652:	b089      	sub	sp, #36	@ 0x24
 8001654:	af00      	add	r7, sp, #0
 8001656:	60f8      	str	r0, [r7, #12]
 8001658:	60b9      	str	r1, [r7, #8]
 800165a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	f003 0307 	and.w	r3, r3, #7
 8001662:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001664:	69fb      	ldr	r3, [r7, #28]
 8001666:	f1c3 0307 	rsb	r3, r3, #7
 800166a:	2b04      	cmp	r3, #4
 800166c:	bf28      	it	cs
 800166e:	2304      	movcs	r3, #4
 8001670:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001672:	69fb      	ldr	r3, [r7, #28]
 8001674:	3304      	adds	r3, #4
 8001676:	2b06      	cmp	r3, #6
 8001678:	d902      	bls.n	8001680 <NVIC_EncodePriority+0x30>
 800167a:	69fb      	ldr	r3, [r7, #28]
 800167c:	3b03      	subs	r3, #3
 800167e:	e000      	b.n	8001682 <NVIC_EncodePriority+0x32>
 8001680:	2300      	movs	r3, #0
 8001682:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001684:	f04f 32ff 	mov.w	r2, #4294967295
 8001688:	69bb      	ldr	r3, [r7, #24]
 800168a:	fa02 f303 	lsl.w	r3, r2, r3
 800168e:	43da      	mvns	r2, r3
 8001690:	68bb      	ldr	r3, [r7, #8]
 8001692:	401a      	ands	r2, r3
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001698:	f04f 31ff 	mov.w	r1, #4294967295
 800169c:	697b      	ldr	r3, [r7, #20]
 800169e:	fa01 f303 	lsl.w	r3, r1, r3
 80016a2:	43d9      	mvns	r1, r3
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016a8:	4313      	orrs	r3, r2
         );
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	3724      	adds	r7, #36	@ 0x24
 80016ae:	46bd      	mov	sp, r7
 80016b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b4:	4770      	bx	lr
	...

080016b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b082      	sub	sp, #8
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	3b01      	subs	r3, #1
 80016c4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80016c8:	d301      	bcc.n	80016ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016ca:	2301      	movs	r3, #1
 80016cc:	e00f      	b.n	80016ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016ce:	4a0a      	ldr	r2, [pc, #40]	@ (80016f8 <SysTick_Config+0x40>)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	3b01      	subs	r3, #1
 80016d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016d6:	210f      	movs	r1, #15
 80016d8:	f04f 30ff 	mov.w	r0, #4294967295
 80016dc:	f7ff ff8e 	bl	80015fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016e0:	4b05      	ldr	r3, [pc, #20]	@ (80016f8 <SysTick_Config+0x40>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016e6:	4b04      	ldr	r3, [pc, #16]	@ (80016f8 <SysTick_Config+0x40>)
 80016e8:	2207      	movs	r2, #7
 80016ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016ec:	2300      	movs	r3, #0
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	3708      	adds	r7, #8
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	e000e010 	.word	0xe000e010

080016fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b082      	sub	sp, #8
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001704:	6878      	ldr	r0, [r7, #4]
 8001706:	f7ff ff29 	bl	800155c <__NVIC_SetPriorityGrouping>
}
 800170a:	bf00      	nop
 800170c:	3708      	adds	r7, #8
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}

08001712 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001712:	b580      	push	{r7, lr}
 8001714:	b086      	sub	sp, #24
 8001716:	af00      	add	r7, sp, #0
 8001718:	4603      	mov	r3, r0
 800171a:	60b9      	str	r1, [r7, #8]
 800171c:	607a      	str	r2, [r7, #4]
 800171e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001720:	f7ff ff40 	bl	80015a4 <__NVIC_GetPriorityGrouping>
 8001724:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001726:	687a      	ldr	r2, [r7, #4]
 8001728:	68b9      	ldr	r1, [r7, #8]
 800172a:	6978      	ldr	r0, [r7, #20]
 800172c:	f7ff ff90 	bl	8001650 <NVIC_EncodePriority>
 8001730:	4602      	mov	r2, r0
 8001732:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001736:	4611      	mov	r1, r2
 8001738:	4618      	mov	r0, r3
 800173a:	f7ff ff5f 	bl	80015fc <__NVIC_SetPriority>
}
 800173e:	bf00      	nop
 8001740:	3718      	adds	r7, #24
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}

08001746 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001746:	b580      	push	{r7, lr}
 8001748:	b082      	sub	sp, #8
 800174a:	af00      	add	r7, sp, #0
 800174c:	4603      	mov	r3, r0
 800174e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001750:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001754:	4618      	mov	r0, r3
 8001756:	f7ff ff33 	bl	80015c0 <__NVIC_EnableIRQ>
}
 800175a:	bf00      	nop
 800175c:	3708      	adds	r7, #8
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}

08001762 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001762:	b580      	push	{r7, lr}
 8001764:	b082      	sub	sp, #8
 8001766:	af00      	add	r7, sp, #0
 8001768:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800176a:	6878      	ldr	r0, [r7, #4]
 800176c:	f7ff ffa4 	bl	80016b8 <SysTick_Config>
 8001770:	4603      	mov	r3, r0
}
 8001772:	4618      	mov	r0, r3
 8001774:	3708      	adds	r7, #8
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
	...

0800177c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b084      	sub	sp, #16
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d101      	bne.n	800178e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800178a:	2301      	movs	r3, #1
 800178c:	e08d      	b.n	80018aa <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	461a      	mov	r2, r3
 8001794:	4b47      	ldr	r3, [pc, #284]	@ (80018b4 <HAL_DMA_Init+0x138>)
 8001796:	429a      	cmp	r2, r3
 8001798:	d80f      	bhi.n	80017ba <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	461a      	mov	r2, r3
 80017a0:	4b45      	ldr	r3, [pc, #276]	@ (80018b8 <HAL_DMA_Init+0x13c>)
 80017a2:	4413      	add	r3, r2
 80017a4:	4a45      	ldr	r2, [pc, #276]	@ (80018bc <HAL_DMA_Init+0x140>)
 80017a6:	fba2 2303 	umull	r2, r3, r2, r3
 80017aa:	091b      	lsrs	r3, r3, #4
 80017ac:	009a      	lsls	r2, r3, #2
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	4a42      	ldr	r2, [pc, #264]	@ (80018c0 <HAL_DMA_Init+0x144>)
 80017b6:	641a      	str	r2, [r3, #64]	@ 0x40
 80017b8:	e00e      	b.n	80017d8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	461a      	mov	r2, r3
 80017c0:	4b40      	ldr	r3, [pc, #256]	@ (80018c4 <HAL_DMA_Init+0x148>)
 80017c2:	4413      	add	r3, r2
 80017c4:	4a3d      	ldr	r2, [pc, #244]	@ (80018bc <HAL_DMA_Init+0x140>)
 80017c6:	fba2 2303 	umull	r2, r3, r2, r3
 80017ca:	091b      	lsrs	r3, r3, #4
 80017cc:	009a      	lsls	r2, r3, #2
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	4a3c      	ldr	r2, [pc, #240]	@ (80018c8 <HAL_DMA_Init+0x14c>)
 80017d6:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2202      	movs	r2, #2
 80017dc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80017ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80017f2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80017fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	691b      	ldr	r3, [r3, #16]
 8001802:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001808:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	699b      	ldr	r3, [r3, #24]
 800180e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001814:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6a1b      	ldr	r3, [r3, #32]
 800181a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800181c:	68fa      	ldr	r2, [r7, #12]
 800181e:	4313      	orrs	r3, r2
 8001820:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	68fa      	ldr	r2, [r7, #12]
 8001828:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800182a:	6878      	ldr	r0, [r7, #4]
 800182c:	f000 fa82 	bl	8001d34 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	689b      	ldr	r3, [r3, #8]
 8001834:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001838:	d102      	bne.n	8001840 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	2200      	movs	r2, #0
 800183e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	685a      	ldr	r2, [r3, #4]
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001848:	b2d2      	uxtb	r2, r2
 800184a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001850:	687a      	ldr	r2, [r7, #4]
 8001852:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001854:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d010      	beq.n	8001880 <HAL_DMA_Init+0x104>
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	2b04      	cmp	r3, #4
 8001864:	d80c      	bhi.n	8001880 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001866:	6878      	ldr	r0, [r7, #4]
 8001868:	f000 faa2 	bl	8001db0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001870:	2200      	movs	r2, #0
 8001872:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001878:	687a      	ldr	r2, [r7, #4]
 800187a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800187c:	605a      	str	r2, [r3, #4]
 800187e:	e008      	b.n	8001892 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2200      	movs	r2, #0
 8001884:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2200      	movs	r2, #0
 800188a:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2200      	movs	r2, #0
 8001890:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	2200      	movs	r2, #0
 8001896:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2201      	movs	r2, #1
 800189c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2200      	movs	r2, #0
 80018a4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80018a8:	2300      	movs	r3, #0
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	3710      	adds	r7, #16
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	40020407 	.word	0x40020407
 80018b8:	bffdfff8 	.word	0xbffdfff8
 80018bc:	cccccccd 	.word	0xcccccccd
 80018c0:	40020000 	.word	0x40020000
 80018c4:	bffdfbf8 	.word	0xbffdfbf8
 80018c8:	40020400 	.word	0x40020400

080018cc <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b086      	sub	sp, #24
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	60f8      	str	r0, [r7, #12]
 80018d4:	60b9      	str	r1, [r7, #8]
 80018d6:	607a      	str	r2, [r7, #4]
 80018d8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80018da:	2300      	movs	r3, #0
 80018dc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80018e4:	2b01      	cmp	r3, #1
 80018e6:	d101      	bne.n	80018ec <HAL_DMA_Start_IT+0x20>
 80018e8:	2302      	movs	r3, #2
 80018ea:	e066      	b.n	80019ba <HAL_DMA_Start_IT+0xee>
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	2201      	movs	r2, #1
 80018f0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80018fa:	b2db      	uxtb	r3, r3
 80018fc:	2b01      	cmp	r3, #1
 80018fe:	d155      	bne.n	80019ac <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	2202      	movs	r2, #2
 8001904:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	2200      	movs	r2, #0
 800190c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	681a      	ldr	r2, [r3, #0]
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f022 0201 	bic.w	r2, r2, #1
 800191c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	687a      	ldr	r2, [r7, #4]
 8001922:	68b9      	ldr	r1, [r7, #8]
 8001924:	68f8      	ldr	r0, [r7, #12]
 8001926:	f000 f9c7 	bl	8001cb8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800192e:	2b00      	cmp	r3, #0
 8001930:	d008      	beq.n	8001944 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	681a      	ldr	r2, [r3, #0]
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f042 020e 	orr.w	r2, r2, #14
 8001940:	601a      	str	r2, [r3, #0]
 8001942:	e00f      	b.n	8001964 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	681a      	ldr	r2, [r3, #0]
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f022 0204 	bic.w	r2, r2, #4
 8001952:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	681a      	ldr	r2, [r3, #0]
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f042 020a 	orr.w	r2, r2, #10
 8001962:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800196e:	2b00      	cmp	r3, #0
 8001970:	d007      	beq.n	8001982 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001976:	681a      	ldr	r2, [r3, #0]
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800197c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001980:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001986:	2b00      	cmp	r3, #0
 8001988:	d007      	beq.n	800199a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800198e:	681a      	ldr	r2, [r3, #0]
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001994:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001998:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	681a      	ldr	r2, [r3, #0]
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f042 0201 	orr.w	r2, r2, #1
 80019a8:	601a      	str	r2, [r3, #0]
 80019aa:	e005      	b.n	80019b8 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	2200      	movs	r2, #0
 80019b0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80019b4:	2302      	movs	r3, #2
 80019b6:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80019b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	3718      	adds	r7, #24
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}

080019c2 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80019c2:	b480      	push	{r7}
 80019c4:	b085      	sub	sp, #20
 80019c6:	af00      	add	r7, sp, #0
 80019c8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80019ca:	2300      	movs	r3, #0
 80019cc:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80019d4:	b2db      	uxtb	r3, r3
 80019d6:	2b02      	cmp	r3, #2
 80019d8:	d005      	beq.n	80019e6 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	2204      	movs	r2, #4
 80019de:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80019e0:	2301      	movs	r3, #1
 80019e2:	73fb      	strb	r3, [r7, #15]
 80019e4:	e037      	b.n	8001a56 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	681a      	ldr	r2, [r3, #0]
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f022 020e 	bic.w	r2, r2, #14
 80019f4:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80019fa:	681a      	ldr	r2, [r3, #0]
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001a00:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001a04:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	681a      	ldr	r2, [r3, #0]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f022 0201 	bic.w	r2, r2, #1
 8001a14:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a1a:	f003 021f 	and.w	r2, r3, #31
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a22:	2101      	movs	r1, #1
 8001a24:	fa01 f202 	lsl.w	r2, r1, r2
 8001a28:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a2e:	687a      	ldr	r2, [r7, #4]
 8001a30:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001a32:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d00c      	beq.n	8001a56 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a40:	681a      	ldr	r2, [r3, #0]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a46:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001a4a:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a50:	687a      	ldr	r2, [r7, #4]
 8001a52:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001a54:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2201      	movs	r2, #1
 8001a5a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2200      	movs	r2, #0
 8001a62:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8001a66:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	3714      	adds	r7, #20
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a72:	4770      	bx	lr

08001a74 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b084      	sub	sp, #16
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001a86:	b2db      	uxtb	r3, r3
 8001a88:	2b02      	cmp	r3, #2
 8001a8a:	d00d      	beq.n	8001aa8 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2204      	movs	r2, #4
 8001a90:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2201      	movs	r2, #1
 8001a96:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	73fb      	strb	r3, [r7, #15]
 8001aa6:	e047      	b.n	8001b38 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	681a      	ldr	r2, [r3, #0]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f022 020e 	bic.w	r2, r2, #14
 8001ab6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	681a      	ldr	r2, [r3, #0]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f022 0201 	bic.w	r2, r2, #1
 8001ac6:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001acc:	681a      	ldr	r2, [r3, #0]
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ad2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001ad6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001adc:	f003 021f 	and.w	r2, r3, #31
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ae4:	2101      	movs	r1, #1
 8001ae6:	fa01 f202 	lsl.w	r2, r1, r2
 8001aea:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001af0:	687a      	ldr	r2, [r7, #4]
 8001af2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001af4:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d00c      	beq.n	8001b18 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b02:	681a      	ldr	r2, [r3, #0]
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b08:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001b0c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b12:	687a      	ldr	r2, [r7, #4]
 8001b14:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001b16:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2200      	movs	r2, #0
 8001b24:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d003      	beq.n	8001b38 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b34:	6878      	ldr	r0, [r7, #4]
 8001b36:	4798      	blx	r3
    }
  }
  return status;
 8001b38:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	3710      	adds	r7, #16
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}

08001b42 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001b42:	b580      	push	{r7, lr}
 8001b44:	b084      	sub	sp, #16
 8001b46:	af00      	add	r7, sp, #0
 8001b48:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b5e:	f003 031f 	and.w	r3, r3, #31
 8001b62:	2204      	movs	r2, #4
 8001b64:	409a      	lsls	r2, r3
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	4013      	ands	r3, r2
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d026      	beq.n	8001bbc <HAL_DMA_IRQHandler+0x7a>
 8001b6e:	68bb      	ldr	r3, [r7, #8]
 8001b70:	f003 0304 	and.w	r3, r3, #4
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d021      	beq.n	8001bbc <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f003 0320 	and.w	r3, r3, #32
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d107      	bne.n	8001b96 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	681a      	ldr	r2, [r3, #0]
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f022 0204 	bic.w	r2, r2, #4
 8001b94:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b9a:	f003 021f 	and.w	r2, r3, #31
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ba2:	2104      	movs	r1, #4
 8001ba4:	fa01 f202 	lsl.w	r2, r1, r2
 8001ba8:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d071      	beq.n	8001c96 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bb6:	6878      	ldr	r0, [r7, #4]
 8001bb8:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001bba:	e06c      	b.n	8001c96 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bc0:	f003 031f 	and.w	r3, r3, #31
 8001bc4:	2202      	movs	r2, #2
 8001bc6:	409a      	lsls	r2, r3
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	4013      	ands	r3, r2
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d02e      	beq.n	8001c2e <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8001bd0:	68bb      	ldr	r3, [r7, #8]
 8001bd2:	f003 0302 	and.w	r3, r3, #2
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d029      	beq.n	8001c2e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f003 0320 	and.w	r3, r3, #32
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d10b      	bne.n	8001c00 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	681a      	ldr	r2, [r3, #0]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f022 020a 	bic.w	r2, r2, #10
 8001bf6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c04:	f003 021f 	and.w	r2, r3, #31
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c0c:	2102      	movs	r1, #2
 8001c0e:	fa01 f202 	lsl.w	r2, r1, r2
 8001c12:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2200      	movs	r2, #0
 8001c18:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d038      	beq.n	8001c96 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c28:	6878      	ldr	r0, [r7, #4]
 8001c2a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001c2c:	e033      	b.n	8001c96 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c32:	f003 031f 	and.w	r3, r3, #31
 8001c36:	2208      	movs	r2, #8
 8001c38:	409a      	lsls	r2, r3
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	4013      	ands	r3, r2
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d02a      	beq.n	8001c98 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8001c42:	68bb      	ldr	r3, [r7, #8]
 8001c44:	f003 0308 	and.w	r3, r3, #8
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d025      	beq.n	8001c98 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	681a      	ldr	r2, [r3, #0]
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f022 020e 	bic.w	r2, r2, #14
 8001c5a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c60:	f003 021f 	and.w	r2, r3, #31
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c68:	2101      	movs	r1, #1
 8001c6a:	fa01 f202 	lsl.w	r2, r1, r2
 8001c6e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2201      	movs	r2, #1
 8001c74:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2201      	movs	r2, #1
 8001c7a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2200      	movs	r2, #0
 8001c82:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d004      	beq.n	8001c98 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c92:	6878      	ldr	r0, [r7, #4]
 8001c94:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001c96:	bf00      	nop
 8001c98:	bf00      	nop
}
 8001c9a:	3710      	adds	r7, #16
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}

08001ca0 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b083      	sub	sp, #12
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	370c      	adds	r7, #12
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb6:	4770      	bx	lr

08001cb8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b085      	sub	sp, #20
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	60f8      	str	r0, [r7, #12]
 8001cc0:	60b9      	str	r1, [r7, #8]
 8001cc2:	607a      	str	r2, [r7, #4]
 8001cc4:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cca:	68fa      	ldr	r2, [r7, #12]
 8001ccc:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001cce:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d004      	beq.n	8001ce2 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cdc:	68fa      	ldr	r2, [r7, #12]
 8001cde:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001ce0:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ce6:	f003 021f 	and.w	r2, r3, #31
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cee:	2101      	movs	r1, #1
 8001cf0:	fa01 f202 	lsl.w	r2, r1, r2
 8001cf4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	683a      	ldr	r2, [r7, #0]
 8001cfc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	689b      	ldr	r3, [r3, #8]
 8001d02:	2b10      	cmp	r3, #16
 8001d04:	d108      	bne.n	8001d18 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	687a      	ldr	r2, [r7, #4]
 8001d0c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	68ba      	ldr	r2, [r7, #8]
 8001d14:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001d16:	e007      	b.n	8001d28 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	68ba      	ldr	r2, [r7, #8]
 8001d1e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	687a      	ldr	r2, [r7, #4]
 8001d26:	60da      	str	r2, [r3, #12]
}
 8001d28:	bf00      	nop
 8001d2a:	3714      	adds	r7, #20
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d32:	4770      	bx	lr

08001d34 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b087      	sub	sp, #28
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	461a      	mov	r2, r3
 8001d42:	4b16      	ldr	r3, [pc, #88]	@ (8001d9c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8001d44:	429a      	cmp	r2, r3
 8001d46:	d802      	bhi.n	8001d4e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8001d48:	4b15      	ldr	r3, [pc, #84]	@ (8001da0 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8001d4a:	617b      	str	r3, [r7, #20]
 8001d4c:	e001      	b.n	8001d52 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8001d4e:	4b15      	ldr	r3, [pc, #84]	@ (8001da4 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8001d50:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8001d52:	697b      	ldr	r3, [r7, #20]
 8001d54:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	b2db      	uxtb	r3, r3
 8001d5c:	3b08      	subs	r3, #8
 8001d5e:	4a12      	ldr	r2, [pc, #72]	@ (8001da8 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8001d60:	fba2 2303 	umull	r2, r3, r2, r3
 8001d64:	091b      	lsrs	r3, r3, #4
 8001d66:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d6c:	089b      	lsrs	r3, r3, #2
 8001d6e:	009a      	lsls	r2, r3, #2
 8001d70:	693b      	ldr	r3, [r7, #16]
 8001d72:	4413      	add	r3, r2
 8001d74:	461a      	mov	r2, r3
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	4a0b      	ldr	r2, [pc, #44]	@ (8001dac <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8001d7e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	f003 031f 	and.w	r3, r3, #31
 8001d86:	2201      	movs	r2, #1
 8001d88:	409a      	lsls	r2, r3
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8001d8e:	bf00      	nop
 8001d90:	371c      	adds	r7, #28
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr
 8001d9a:	bf00      	nop
 8001d9c:	40020407 	.word	0x40020407
 8001da0:	40020800 	.word	0x40020800
 8001da4:	40020820 	.word	0x40020820
 8001da8:	cccccccd 	.word	0xcccccccd
 8001dac:	40020880 	.word	0x40020880

08001db0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b085      	sub	sp, #20
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	b2db      	uxtb	r3, r3
 8001dbe:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001dc0:	68fa      	ldr	r2, [r7, #12]
 8001dc2:	4b0b      	ldr	r3, [pc, #44]	@ (8001df0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001dc4:	4413      	add	r3, r2
 8001dc6:	009b      	lsls	r3, r3, #2
 8001dc8:	461a      	mov	r2, r3
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	4a08      	ldr	r2, [pc, #32]	@ (8001df4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001dd2:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	3b01      	subs	r3, #1
 8001dd8:	f003 031f 	and.w	r3, r3, #31
 8001ddc:	2201      	movs	r2, #1
 8001dde:	409a      	lsls	r2, r3
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8001de4:	bf00      	nop
 8001de6:	3714      	adds	r7, #20
 8001de8:	46bd      	mov	sp, r7
 8001dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dee:	4770      	bx	lr
 8001df0:	1000823f 	.word	0x1000823f
 8001df4:	40020940 	.word	0x40020940

08001df8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b087      	sub	sp, #28
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
 8001e00:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001e02:	2300      	movs	r3, #0
 8001e04:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001e06:	e15a      	b.n	80020be <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	681a      	ldr	r2, [r3, #0]
 8001e0c:	2101      	movs	r1, #1
 8001e0e:	697b      	ldr	r3, [r7, #20]
 8001e10:	fa01 f303 	lsl.w	r3, r1, r3
 8001e14:	4013      	ands	r3, r2
 8001e16:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	f000 814c 	beq.w	80020b8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	f003 0303 	and.w	r3, r3, #3
 8001e28:	2b01      	cmp	r3, #1
 8001e2a:	d005      	beq.n	8001e38 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001e34:	2b02      	cmp	r3, #2
 8001e36:	d130      	bne.n	8001e9a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	689b      	ldr	r3, [r3, #8]
 8001e3c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001e3e:	697b      	ldr	r3, [r7, #20]
 8001e40:	005b      	lsls	r3, r3, #1
 8001e42:	2203      	movs	r2, #3
 8001e44:	fa02 f303 	lsl.w	r3, r2, r3
 8001e48:	43db      	mvns	r3, r3
 8001e4a:	693a      	ldr	r2, [r7, #16]
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	68da      	ldr	r2, [r3, #12]
 8001e54:	697b      	ldr	r3, [r7, #20]
 8001e56:	005b      	lsls	r3, r3, #1
 8001e58:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5c:	693a      	ldr	r2, [r7, #16]
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	693a      	ldr	r2, [r7, #16]
 8001e66:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001e6e:	2201      	movs	r2, #1
 8001e70:	697b      	ldr	r3, [r7, #20]
 8001e72:	fa02 f303 	lsl.w	r3, r2, r3
 8001e76:	43db      	mvns	r3, r3
 8001e78:	693a      	ldr	r2, [r7, #16]
 8001e7a:	4013      	ands	r3, r2
 8001e7c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	091b      	lsrs	r3, r3, #4
 8001e84:	f003 0201 	and.w	r2, r3, #1
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8e:	693a      	ldr	r2, [r7, #16]
 8001e90:	4313      	orrs	r3, r2
 8001e92:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	693a      	ldr	r2, [r7, #16]
 8001e98:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	f003 0303 	and.w	r3, r3, #3
 8001ea2:	2b03      	cmp	r3, #3
 8001ea4:	d017      	beq.n	8001ed6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	68db      	ldr	r3, [r3, #12]
 8001eaa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001eac:	697b      	ldr	r3, [r7, #20]
 8001eae:	005b      	lsls	r3, r3, #1
 8001eb0:	2203      	movs	r2, #3
 8001eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb6:	43db      	mvns	r3, r3
 8001eb8:	693a      	ldr	r2, [r7, #16]
 8001eba:	4013      	ands	r3, r2
 8001ebc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	689a      	ldr	r2, [r3, #8]
 8001ec2:	697b      	ldr	r3, [r7, #20]
 8001ec4:	005b      	lsls	r3, r3, #1
 8001ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eca:	693a      	ldr	r2, [r7, #16]
 8001ecc:	4313      	orrs	r3, r2
 8001ece:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	693a      	ldr	r2, [r7, #16]
 8001ed4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	f003 0303 	and.w	r3, r3, #3
 8001ede:	2b02      	cmp	r3, #2
 8001ee0:	d123      	bne.n	8001f2a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ee2:	697b      	ldr	r3, [r7, #20]
 8001ee4:	08da      	lsrs	r2, r3, #3
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	3208      	adds	r2, #8
 8001eea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001eee:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	f003 0307 	and.w	r3, r3, #7
 8001ef6:	009b      	lsls	r3, r3, #2
 8001ef8:	220f      	movs	r2, #15
 8001efa:	fa02 f303 	lsl.w	r3, r2, r3
 8001efe:	43db      	mvns	r3, r3
 8001f00:	693a      	ldr	r2, [r7, #16]
 8001f02:	4013      	ands	r3, r2
 8001f04:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	691a      	ldr	r2, [r3, #16]
 8001f0a:	697b      	ldr	r3, [r7, #20]
 8001f0c:	f003 0307 	and.w	r3, r3, #7
 8001f10:	009b      	lsls	r3, r3, #2
 8001f12:	fa02 f303 	lsl.w	r3, r2, r3
 8001f16:	693a      	ldr	r2, [r7, #16]
 8001f18:	4313      	orrs	r3, r2
 8001f1a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	08da      	lsrs	r2, r3, #3
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	3208      	adds	r2, #8
 8001f24:	6939      	ldr	r1, [r7, #16]
 8001f26:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	005b      	lsls	r3, r3, #1
 8001f34:	2203      	movs	r2, #3
 8001f36:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3a:	43db      	mvns	r3, r3
 8001f3c:	693a      	ldr	r2, [r7, #16]
 8001f3e:	4013      	ands	r3, r2
 8001f40:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	f003 0203 	and.w	r2, r3, #3
 8001f4a:	697b      	ldr	r3, [r7, #20]
 8001f4c:	005b      	lsls	r3, r3, #1
 8001f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f52:	693a      	ldr	r2, [r7, #16]
 8001f54:	4313      	orrs	r3, r2
 8001f56:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	693a      	ldr	r2, [r7, #16]
 8001f5c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	f000 80a6 	beq.w	80020b8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f6c:	4b5b      	ldr	r3, [pc, #364]	@ (80020dc <HAL_GPIO_Init+0x2e4>)
 8001f6e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f70:	4a5a      	ldr	r2, [pc, #360]	@ (80020dc <HAL_GPIO_Init+0x2e4>)
 8001f72:	f043 0301 	orr.w	r3, r3, #1
 8001f76:	6613      	str	r3, [r2, #96]	@ 0x60
 8001f78:	4b58      	ldr	r3, [pc, #352]	@ (80020dc <HAL_GPIO_Init+0x2e4>)
 8001f7a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f7c:	f003 0301 	and.w	r3, r3, #1
 8001f80:	60bb      	str	r3, [r7, #8]
 8001f82:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f84:	4a56      	ldr	r2, [pc, #344]	@ (80020e0 <HAL_GPIO_Init+0x2e8>)
 8001f86:	697b      	ldr	r3, [r7, #20]
 8001f88:	089b      	lsrs	r3, r3, #2
 8001f8a:	3302      	adds	r3, #2
 8001f8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f90:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001f92:	697b      	ldr	r3, [r7, #20]
 8001f94:	f003 0303 	and.w	r3, r3, #3
 8001f98:	009b      	lsls	r3, r3, #2
 8001f9a:	220f      	movs	r2, #15
 8001f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa0:	43db      	mvns	r3, r3
 8001fa2:	693a      	ldr	r2, [r7, #16]
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001fae:	d01f      	beq.n	8001ff0 <HAL_GPIO_Init+0x1f8>
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	4a4c      	ldr	r2, [pc, #304]	@ (80020e4 <HAL_GPIO_Init+0x2ec>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d019      	beq.n	8001fec <HAL_GPIO_Init+0x1f4>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	4a4b      	ldr	r2, [pc, #300]	@ (80020e8 <HAL_GPIO_Init+0x2f0>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d013      	beq.n	8001fe8 <HAL_GPIO_Init+0x1f0>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	4a4a      	ldr	r2, [pc, #296]	@ (80020ec <HAL_GPIO_Init+0x2f4>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d00d      	beq.n	8001fe4 <HAL_GPIO_Init+0x1ec>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	4a49      	ldr	r2, [pc, #292]	@ (80020f0 <HAL_GPIO_Init+0x2f8>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d007      	beq.n	8001fe0 <HAL_GPIO_Init+0x1e8>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	4a48      	ldr	r2, [pc, #288]	@ (80020f4 <HAL_GPIO_Init+0x2fc>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d101      	bne.n	8001fdc <HAL_GPIO_Init+0x1e4>
 8001fd8:	2305      	movs	r3, #5
 8001fda:	e00a      	b.n	8001ff2 <HAL_GPIO_Init+0x1fa>
 8001fdc:	2306      	movs	r3, #6
 8001fde:	e008      	b.n	8001ff2 <HAL_GPIO_Init+0x1fa>
 8001fe0:	2304      	movs	r3, #4
 8001fe2:	e006      	b.n	8001ff2 <HAL_GPIO_Init+0x1fa>
 8001fe4:	2303      	movs	r3, #3
 8001fe6:	e004      	b.n	8001ff2 <HAL_GPIO_Init+0x1fa>
 8001fe8:	2302      	movs	r3, #2
 8001fea:	e002      	b.n	8001ff2 <HAL_GPIO_Init+0x1fa>
 8001fec:	2301      	movs	r3, #1
 8001fee:	e000      	b.n	8001ff2 <HAL_GPIO_Init+0x1fa>
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	697a      	ldr	r2, [r7, #20]
 8001ff4:	f002 0203 	and.w	r2, r2, #3
 8001ff8:	0092      	lsls	r2, r2, #2
 8001ffa:	4093      	lsls	r3, r2
 8001ffc:	693a      	ldr	r2, [r7, #16]
 8001ffe:	4313      	orrs	r3, r2
 8002000:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002002:	4937      	ldr	r1, [pc, #220]	@ (80020e0 <HAL_GPIO_Init+0x2e8>)
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	089b      	lsrs	r3, r3, #2
 8002008:	3302      	adds	r3, #2
 800200a:	693a      	ldr	r2, [r7, #16]
 800200c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002010:	4b39      	ldr	r3, [pc, #228]	@ (80020f8 <HAL_GPIO_Init+0x300>)
 8002012:	689b      	ldr	r3, [r3, #8]
 8002014:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	43db      	mvns	r3, r3
 800201a:	693a      	ldr	r2, [r7, #16]
 800201c:	4013      	ands	r3, r2
 800201e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002028:	2b00      	cmp	r3, #0
 800202a:	d003      	beq.n	8002034 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800202c:	693a      	ldr	r2, [r7, #16]
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	4313      	orrs	r3, r2
 8002032:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002034:	4a30      	ldr	r2, [pc, #192]	@ (80020f8 <HAL_GPIO_Init+0x300>)
 8002036:	693b      	ldr	r3, [r7, #16]
 8002038:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800203a:	4b2f      	ldr	r3, [pc, #188]	@ (80020f8 <HAL_GPIO_Init+0x300>)
 800203c:	68db      	ldr	r3, [r3, #12]
 800203e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	43db      	mvns	r3, r3
 8002044:	693a      	ldr	r2, [r7, #16]
 8002046:	4013      	ands	r3, r2
 8002048:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002052:	2b00      	cmp	r3, #0
 8002054:	d003      	beq.n	800205e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002056:	693a      	ldr	r2, [r7, #16]
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	4313      	orrs	r3, r2
 800205c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800205e:	4a26      	ldr	r2, [pc, #152]	@ (80020f8 <HAL_GPIO_Init+0x300>)
 8002060:	693b      	ldr	r3, [r7, #16]
 8002062:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002064:	4b24      	ldr	r3, [pc, #144]	@ (80020f8 <HAL_GPIO_Init+0x300>)
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	43db      	mvns	r3, r3
 800206e:	693a      	ldr	r2, [r7, #16]
 8002070:	4013      	ands	r3, r2
 8002072:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800207c:	2b00      	cmp	r3, #0
 800207e:	d003      	beq.n	8002088 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002080:	693a      	ldr	r2, [r7, #16]
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	4313      	orrs	r3, r2
 8002086:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002088:	4a1b      	ldr	r2, [pc, #108]	@ (80020f8 <HAL_GPIO_Init+0x300>)
 800208a:	693b      	ldr	r3, [r7, #16]
 800208c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800208e:	4b1a      	ldr	r3, [pc, #104]	@ (80020f8 <HAL_GPIO_Init+0x300>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	43db      	mvns	r3, r3
 8002098:	693a      	ldr	r2, [r7, #16]
 800209a:	4013      	ands	r3, r2
 800209c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d003      	beq.n	80020b2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80020aa:	693a      	ldr	r2, [r7, #16]
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	4313      	orrs	r3, r2
 80020b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80020b2:	4a11      	ldr	r2, [pc, #68]	@ (80020f8 <HAL_GPIO_Init+0x300>)
 80020b4:	693b      	ldr	r3, [r7, #16]
 80020b6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80020b8:	697b      	ldr	r3, [r7, #20]
 80020ba:	3301      	adds	r3, #1
 80020bc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	681a      	ldr	r2, [r3, #0]
 80020c2:	697b      	ldr	r3, [r7, #20]
 80020c4:	fa22 f303 	lsr.w	r3, r2, r3
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	f47f ae9d 	bne.w	8001e08 <HAL_GPIO_Init+0x10>
  }
}
 80020ce:	bf00      	nop
 80020d0:	bf00      	nop
 80020d2:	371c      	adds	r7, #28
 80020d4:	46bd      	mov	sp, r7
 80020d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020da:	4770      	bx	lr
 80020dc:	40021000 	.word	0x40021000
 80020e0:	40010000 	.word	0x40010000
 80020e4:	48000400 	.word	0x48000400
 80020e8:	48000800 	.word	0x48000800
 80020ec:	48000c00 	.word	0x48000c00
 80020f0:	48001000 	.word	0x48001000
 80020f4:	48001400 	.word	0x48001400
 80020f8:	40010400 	.word	0x40010400

080020fc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b082      	sub	sp, #8
 8002100:	af00      	add	r7, sp, #0
 8002102:	4603      	mov	r3, r0
 8002104:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002106:	4b08      	ldr	r3, [pc, #32]	@ (8002128 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002108:	695a      	ldr	r2, [r3, #20]
 800210a:	88fb      	ldrh	r3, [r7, #6]
 800210c:	4013      	ands	r3, r2
 800210e:	2b00      	cmp	r3, #0
 8002110:	d006      	beq.n	8002120 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002112:	4a05      	ldr	r2, [pc, #20]	@ (8002128 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002114:	88fb      	ldrh	r3, [r7, #6]
 8002116:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002118:	88fb      	ldrh	r3, [r7, #6]
 800211a:	4618      	mov	r0, r3
 800211c:	f000 f806 	bl	800212c <HAL_GPIO_EXTI_Callback>
  }
}
 8002120:	bf00      	nop
 8002122:	3708      	adds	r7, #8
 8002124:	46bd      	mov	sp, r7
 8002126:	bd80      	pop	{r7, pc}
 8002128:	40010400 	.word	0x40010400

0800212c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800212c:	b480      	push	{r7}
 800212e:	b083      	sub	sp, #12
 8002130:	af00      	add	r7, sp, #0
 8002132:	4603      	mov	r3, r0
 8002134:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002136:	bf00      	nop
 8002138:	370c      	adds	r7, #12
 800213a:	46bd      	mov	sp, r7
 800213c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002140:	4770      	bx	lr
	...

08002144 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002144:	b480      	push	{r7}
 8002146:	b085      	sub	sp, #20
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d141      	bne.n	80021d6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002152:	4b4b      	ldr	r3, [pc, #300]	@ (8002280 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800215a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800215e:	d131      	bne.n	80021c4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002160:	4b47      	ldr	r3, [pc, #284]	@ (8002280 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002162:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002166:	4a46      	ldr	r2, [pc, #280]	@ (8002280 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002168:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800216c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002170:	4b43      	ldr	r3, [pc, #268]	@ (8002280 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002178:	4a41      	ldr	r2, [pc, #260]	@ (8002280 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800217a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800217e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002180:	4b40      	ldr	r3, [pc, #256]	@ (8002284 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	2232      	movs	r2, #50	@ 0x32
 8002186:	fb02 f303 	mul.w	r3, r2, r3
 800218a:	4a3f      	ldr	r2, [pc, #252]	@ (8002288 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800218c:	fba2 2303 	umull	r2, r3, r2, r3
 8002190:	0c9b      	lsrs	r3, r3, #18
 8002192:	3301      	adds	r3, #1
 8002194:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002196:	e002      	b.n	800219e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	3b01      	subs	r3, #1
 800219c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800219e:	4b38      	ldr	r3, [pc, #224]	@ (8002280 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021a0:	695b      	ldr	r3, [r3, #20]
 80021a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80021aa:	d102      	bne.n	80021b2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d1f2      	bne.n	8002198 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80021b2:	4b33      	ldr	r3, [pc, #204]	@ (8002280 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021b4:	695b      	ldr	r3, [r3, #20]
 80021b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80021be:	d158      	bne.n	8002272 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80021c0:	2303      	movs	r3, #3
 80021c2:	e057      	b.n	8002274 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80021c4:	4b2e      	ldr	r3, [pc, #184]	@ (8002280 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80021ca:	4a2d      	ldr	r2, [pc, #180]	@ (8002280 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021cc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80021d0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80021d4:	e04d      	b.n	8002272 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80021dc:	d141      	bne.n	8002262 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80021de:	4b28      	ldr	r3, [pc, #160]	@ (8002280 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80021e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80021ea:	d131      	bne.n	8002250 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80021ec:	4b24      	ldr	r3, [pc, #144]	@ (8002280 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80021f2:	4a23      	ldr	r2, [pc, #140]	@ (8002280 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021f8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80021fc:	4b20      	ldr	r3, [pc, #128]	@ (8002280 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002204:	4a1e      	ldr	r2, [pc, #120]	@ (8002280 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002206:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800220a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800220c:	4b1d      	ldr	r3, [pc, #116]	@ (8002284 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	2232      	movs	r2, #50	@ 0x32
 8002212:	fb02 f303 	mul.w	r3, r2, r3
 8002216:	4a1c      	ldr	r2, [pc, #112]	@ (8002288 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002218:	fba2 2303 	umull	r2, r3, r2, r3
 800221c:	0c9b      	lsrs	r3, r3, #18
 800221e:	3301      	adds	r3, #1
 8002220:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002222:	e002      	b.n	800222a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	3b01      	subs	r3, #1
 8002228:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800222a:	4b15      	ldr	r3, [pc, #84]	@ (8002280 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800222c:	695b      	ldr	r3, [r3, #20]
 800222e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002232:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002236:	d102      	bne.n	800223e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d1f2      	bne.n	8002224 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800223e:	4b10      	ldr	r3, [pc, #64]	@ (8002280 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002240:	695b      	ldr	r3, [r3, #20]
 8002242:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002246:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800224a:	d112      	bne.n	8002272 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800224c:	2303      	movs	r3, #3
 800224e:	e011      	b.n	8002274 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002250:	4b0b      	ldr	r3, [pc, #44]	@ (8002280 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002252:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002256:	4a0a      	ldr	r2, [pc, #40]	@ (8002280 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002258:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800225c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002260:	e007      	b.n	8002272 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002262:	4b07      	ldr	r3, [pc, #28]	@ (8002280 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800226a:	4a05      	ldr	r2, [pc, #20]	@ (8002280 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800226c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002270:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002272:	2300      	movs	r3, #0
}
 8002274:	4618      	mov	r0, r3
 8002276:	3714      	adds	r7, #20
 8002278:	46bd      	mov	sp, r7
 800227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227e:	4770      	bx	lr
 8002280:	40007000 	.word	0x40007000
 8002284:	20000200 	.word	0x20000200
 8002288:	431bde83 	.word	0x431bde83

0800228c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800228c:	b480      	push	{r7}
 800228e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002290:	4b05      	ldr	r3, [pc, #20]	@ (80022a8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002292:	689b      	ldr	r3, [r3, #8]
 8002294:	4a04      	ldr	r2, [pc, #16]	@ (80022a8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002296:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800229a:	6093      	str	r3, [r2, #8]
}
 800229c:	bf00      	nop
 800229e:	46bd      	mov	sp, r7
 80022a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a4:	4770      	bx	lr
 80022a6:	bf00      	nop
 80022a8:	40007000 	.word	0x40007000

080022ac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b088      	sub	sp, #32
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d101      	bne.n	80022be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80022ba:	2301      	movs	r3, #1
 80022bc:	e2fe      	b.n	80028bc <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f003 0301 	and.w	r3, r3, #1
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d075      	beq.n	80023b6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80022ca:	4b97      	ldr	r3, [pc, #604]	@ (8002528 <HAL_RCC_OscConfig+0x27c>)
 80022cc:	689b      	ldr	r3, [r3, #8]
 80022ce:	f003 030c 	and.w	r3, r3, #12
 80022d2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80022d4:	4b94      	ldr	r3, [pc, #592]	@ (8002528 <HAL_RCC_OscConfig+0x27c>)
 80022d6:	68db      	ldr	r3, [r3, #12]
 80022d8:	f003 0303 	and.w	r3, r3, #3
 80022dc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80022de:	69bb      	ldr	r3, [r7, #24]
 80022e0:	2b0c      	cmp	r3, #12
 80022e2:	d102      	bne.n	80022ea <HAL_RCC_OscConfig+0x3e>
 80022e4:	697b      	ldr	r3, [r7, #20]
 80022e6:	2b03      	cmp	r3, #3
 80022e8:	d002      	beq.n	80022f0 <HAL_RCC_OscConfig+0x44>
 80022ea:	69bb      	ldr	r3, [r7, #24]
 80022ec:	2b08      	cmp	r3, #8
 80022ee:	d10b      	bne.n	8002308 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022f0:	4b8d      	ldr	r3, [pc, #564]	@ (8002528 <HAL_RCC_OscConfig+0x27c>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d05b      	beq.n	80023b4 <HAL_RCC_OscConfig+0x108>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d157      	bne.n	80023b4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002304:	2301      	movs	r3, #1
 8002306:	e2d9      	b.n	80028bc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002310:	d106      	bne.n	8002320 <HAL_RCC_OscConfig+0x74>
 8002312:	4b85      	ldr	r3, [pc, #532]	@ (8002528 <HAL_RCC_OscConfig+0x27c>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4a84      	ldr	r2, [pc, #528]	@ (8002528 <HAL_RCC_OscConfig+0x27c>)
 8002318:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800231c:	6013      	str	r3, [r2, #0]
 800231e:	e01d      	b.n	800235c <HAL_RCC_OscConfig+0xb0>
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002328:	d10c      	bne.n	8002344 <HAL_RCC_OscConfig+0x98>
 800232a:	4b7f      	ldr	r3, [pc, #508]	@ (8002528 <HAL_RCC_OscConfig+0x27c>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4a7e      	ldr	r2, [pc, #504]	@ (8002528 <HAL_RCC_OscConfig+0x27c>)
 8002330:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002334:	6013      	str	r3, [r2, #0]
 8002336:	4b7c      	ldr	r3, [pc, #496]	@ (8002528 <HAL_RCC_OscConfig+0x27c>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4a7b      	ldr	r2, [pc, #492]	@ (8002528 <HAL_RCC_OscConfig+0x27c>)
 800233c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002340:	6013      	str	r3, [r2, #0]
 8002342:	e00b      	b.n	800235c <HAL_RCC_OscConfig+0xb0>
 8002344:	4b78      	ldr	r3, [pc, #480]	@ (8002528 <HAL_RCC_OscConfig+0x27c>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a77      	ldr	r2, [pc, #476]	@ (8002528 <HAL_RCC_OscConfig+0x27c>)
 800234a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800234e:	6013      	str	r3, [r2, #0]
 8002350:	4b75      	ldr	r3, [pc, #468]	@ (8002528 <HAL_RCC_OscConfig+0x27c>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a74      	ldr	r2, [pc, #464]	@ (8002528 <HAL_RCC_OscConfig+0x27c>)
 8002356:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800235a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d013      	beq.n	800238c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002364:	f7ff f8ee 	bl	8001544 <HAL_GetTick>
 8002368:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800236a:	e008      	b.n	800237e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800236c:	f7ff f8ea 	bl	8001544 <HAL_GetTick>
 8002370:	4602      	mov	r2, r0
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	1ad3      	subs	r3, r2, r3
 8002376:	2b64      	cmp	r3, #100	@ 0x64
 8002378:	d901      	bls.n	800237e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800237a:	2303      	movs	r3, #3
 800237c:	e29e      	b.n	80028bc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800237e:	4b6a      	ldr	r3, [pc, #424]	@ (8002528 <HAL_RCC_OscConfig+0x27c>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002386:	2b00      	cmp	r3, #0
 8002388:	d0f0      	beq.n	800236c <HAL_RCC_OscConfig+0xc0>
 800238a:	e014      	b.n	80023b6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800238c:	f7ff f8da 	bl	8001544 <HAL_GetTick>
 8002390:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002392:	e008      	b.n	80023a6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002394:	f7ff f8d6 	bl	8001544 <HAL_GetTick>
 8002398:	4602      	mov	r2, r0
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	1ad3      	subs	r3, r2, r3
 800239e:	2b64      	cmp	r3, #100	@ 0x64
 80023a0:	d901      	bls.n	80023a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80023a2:	2303      	movs	r3, #3
 80023a4:	e28a      	b.n	80028bc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80023a6:	4b60      	ldr	r3, [pc, #384]	@ (8002528 <HAL_RCC_OscConfig+0x27c>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d1f0      	bne.n	8002394 <HAL_RCC_OscConfig+0xe8>
 80023b2:	e000      	b.n	80023b6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f003 0302 	and.w	r3, r3, #2
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d075      	beq.n	80024ae <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80023c2:	4b59      	ldr	r3, [pc, #356]	@ (8002528 <HAL_RCC_OscConfig+0x27c>)
 80023c4:	689b      	ldr	r3, [r3, #8]
 80023c6:	f003 030c 	and.w	r3, r3, #12
 80023ca:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80023cc:	4b56      	ldr	r3, [pc, #344]	@ (8002528 <HAL_RCC_OscConfig+0x27c>)
 80023ce:	68db      	ldr	r3, [r3, #12]
 80023d0:	f003 0303 	and.w	r3, r3, #3
 80023d4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80023d6:	69bb      	ldr	r3, [r7, #24]
 80023d8:	2b0c      	cmp	r3, #12
 80023da:	d102      	bne.n	80023e2 <HAL_RCC_OscConfig+0x136>
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	2b02      	cmp	r3, #2
 80023e0:	d002      	beq.n	80023e8 <HAL_RCC_OscConfig+0x13c>
 80023e2:	69bb      	ldr	r3, [r7, #24]
 80023e4:	2b04      	cmp	r3, #4
 80023e6:	d11f      	bne.n	8002428 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80023e8:	4b4f      	ldr	r3, [pc, #316]	@ (8002528 <HAL_RCC_OscConfig+0x27c>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d005      	beq.n	8002400 <HAL_RCC_OscConfig+0x154>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	68db      	ldr	r3, [r3, #12]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d101      	bne.n	8002400 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80023fc:	2301      	movs	r3, #1
 80023fe:	e25d      	b.n	80028bc <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002400:	4b49      	ldr	r3, [pc, #292]	@ (8002528 <HAL_RCC_OscConfig+0x27c>)
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	691b      	ldr	r3, [r3, #16]
 800240c:	061b      	lsls	r3, r3, #24
 800240e:	4946      	ldr	r1, [pc, #280]	@ (8002528 <HAL_RCC_OscConfig+0x27c>)
 8002410:	4313      	orrs	r3, r2
 8002412:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002414:	4b45      	ldr	r3, [pc, #276]	@ (800252c <HAL_RCC_OscConfig+0x280>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4618      	mov	r0, r3
 800241a:	f7ff f847 	bl	80014ac <HAL_InitTick>
 800241e:	4603      	mov	r3, r0
 8002420:	2b00      	cmp	r3, #0
 8002422:	d043      	beq.n	80024ac <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002424:	2301      	movs	r3, #1
 8002426:	e249      	b.n	80028bc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	68db      	ldr	r3, [r3, #12]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d023      	beq.n	8002478 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002430:	4b3d      	ldr	r3, [pc, #244]	@ (8002528 <HAL_RCC_OscConfig+0x27c>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a3c      	ldr	r2, [pc, #240]	@ (8002528 <HAL_RCC_OscConfig+0x27c>)
 8002436:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800243a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800243c:	f7ff f882 	bl	8001544 <HAL_GetTick>
 8002440:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002442:	e008      	b.n	8002456 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002444:	f7ff f87e 	bl	8001544 <HAL_GetTick>
 8002448:	4602      	mov	r2, r0
 800244a:	693b      	ldr	r3, [r7, #16]
 800244c:	1ad3      	subs	r3, r2, r3
 800244e:	2b02      	cmp	r3, #2
 8002450:	d901      	bls.n	8002456 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002452:	2303      	movs	r3, #3
 8002454:	e232      	b.n	80028bc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002456:	4b34      	ldr	r3, [pc, #208]	@ (8002528 <HAL_RCC_OscConfig+0x27c>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800245e:	2b00      	cmp	r3, #0
 8002460:	d0f0      	beq.n	8002444 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002462:	4b31      	ldr	r3, [pc, #196]	@ (8002528 <HAL_RCC_OscConfig+0x27c>)
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	691b      	ldr	r3, [r3, #16]
 800246e:	061b      	lsls	r3, r3, #24
 8002470:	492d      	ldr	r1, [pc, #180]	@ (8002528 <HAL_RCC_OscConfig+0x27c>)
 8002472:	4313      	orrs	r3, r2
 8002474:	604b      	str	r3, [r1, #4]
 8002476:	e01a      	b.n	80024ae <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002478:	4b2b      	ldr	r3, [pc, #172]	@ (8002528 <HAL_RCC_OscConfig+0x27c>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a2a      	ldr	r2, [pc, #168]	@ (8002528 <HAL_RCC_OscConfig+0x27c>)
 800247e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002482:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002484:	f7ff f85e 	bl	8001544 <HAL_GetTick>
 8002488:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800248a:	e008      	b.n	800249e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800248c:	f7ff f85a 	bl	8001544 <HAL_GetTick>
 8002490:	4602      	mov	r2, r0
 8002492:	693b      	ldr	r3, [r7, #16]
 8002494:	1ad3      	subs	r3, r2, r3
 8002496:	2b02      	cmp	r3, #2
 8002498:	d901      	bls.n	800249e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800249a:	2303      	movs	r3, #3
 800249c:	e20e      	b.n	80028bc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800249e:	4b22      	ldr	r3, [pc, #136]	@ (8002528 <HAL_RCC_OscConfig+0x27c>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d1f0      	bne.n	800248c <HAL_RCC_OscConfig+0x1e0>
 80024aa:	e000      	b.n	80024ae <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80024ac:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f003 0308 	and.w	r3, r3, #8
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d041      	beq.n	800253e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	695b      	ldr	r3, [r3, #20]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d01c      	beq.n	80024fc <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024c2:	4b19      	ldr	r3, [pc, #100]	@ (8002528 <HAL_RCC_OscConfig+0x27c>)
 80024c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80024c8:	4a17      	ldr	r2, [pc, #92]	@ (8002528 <HAL_RCC_OscConfig+0x27c>)
 80024ca:	f043 0301 	orr.w	r3, r3, #1
 80024ce:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024d2:	f7ff f837 	bl	8001544 <HAL_GetTick>
 80024d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80024d8:	e008      	b.n	80024ec <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024da:	f7ff f833 	bl	8001544 <HAL_GetTick>
 80024de:	4602      	mov	r2, r0
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	1ad3      	subs	r3, r2, r3
 80024e4:	2b02      	cmp	r3, #2
 80024e6:	d901      	bls.n	80024ec <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80024e8:	2303      	movs	r3, #3
 80024ea:	e1e7      	b.n	80028bc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80024ec:	4b0e      	ldr	r3, [pc, #56]	@ (8002528 <HAL_RCC_OscConfig+0x27c>)
 80024ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80024f2:	f003 0302 	and.w	r3, r3, #2
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d0ef      	beq.n	80024da <HAL_RCC_OscConfig+0x22e>
 80024fa:	e020      	b.n	800253e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024fc:	4b0a      	ldr	r3, [pc, #40]	@ (8002528 <HAL_RCC_OscConfig+0x27c>)
 80024fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002502:	4a09      	ldr	r2, [pc, #36]	@ (8002528 <HAL_RCC_OscConfig+0x27c>)
 8002504:	f023 0301 	bic.w	r3, r3, #1
 8002508:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800250c:	f7ff f81a 	bl	8001544 <HAL_GetTick>
 8002510:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002512:	e00d      	b.n	8002530 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002514:	f7ff f816 	bl	8001544 <HAL_GetTick>
 8002518:	4602      	mov	r2, r0
 800251a:	693b      	ldr	r3, [r7, #16]
 800251c:	1ad3      	subs	r3, r2, r3
 800251e:	2b02      	cmp	r3, #2
 8002520:	d906      	bls.n	8002530 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002522:	2303      	movs	r3, #3
 8002524:	e1ca      	b.n	80028bc <HAL_RCC_OscConfig+0x610>
 8002526:	bf00      	nop
 8002528:	40021000 	.word	0x40021000
 800252c:	20000204 	.word	0x20000204
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002530:	4b8c      	ldr	r3, [pc, #560]	@ (8002764 <HAL_RCC_OscConfig+0x4b8>)
 8002532:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002536:	f003 0302 	and.w	r3, r3, #2
 800253a:	2b00      	cmp	r3, #0
 800253c:	d1ea      	bne.n	8002514 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f003 0304 	and.w	r3, r3, #4
 8002546:	2b00      	cmp	r3, #0
 8002548:	f000 80a6 	beq.w	8002698 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800254c:	2300      	movs	r3, #0
 800254e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002550:	4b84      	ldr	r3, [pc, #528]	@ (8002764 <HAL_RCC_OscConfig+0x4b8>)
 8002552:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002554:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002558:	2b00      	cmp	r3, #0
 800255a:	d101      	bne.n	8002560 <HAL_RCC_OscConfig+0x2b4>
 800255c:	2301      	movs	r3, #1
 800255e:	e000      	b.n	8002562 <HAL_RCC_OscConfig+0x2b6>
 8002560:	2300      	movs	r3, #0
 8002562:	2b00      	cmp	r3, #0
 8002564:	d00d      	beq.n	8002582 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002566:	4b7f      	ldr	r3, [pc, #508]	@ (8002764 <HAL_RCC_OscConfig+0x4b8>)
 8002568:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800256a:	4a7e      	ldr	r2, [pc, #504]	@ (8002764 <HAL_RCC_OscConfig+0x4b8>)
 800256c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002570:	6593      	str	r3, [r2, #88]	@ 0x58
 8002572:	4b7c      	ldr	r3, [pc, #496]	@ (8002764 <HAL_RCC_OscConfig+0x4b8>)
 8002574:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002576:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800257a:	60fb      	str	r3, [r7, #12]
 800257c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800257e:	2301      	movs	r3, #1
 8002580:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002582:	4b79      	ldr	r3, [pc, #484]	@ (8002768 <HAL_RCC_OscConfig+0x4bc>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800258a:	2b00      	cmp	r3, #0
 800258c:	d118      	bne.n	80025c0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800258e:	4b76      	ldr	r3, [pc, #472]	@ (8002768 <HAL_RCC_OscConfig+0x4bc>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a75      	ldr	r2, [pc, #468]	@ (8002768 <HAL_RCC_OscConfig+0x4bc>)
 8002594:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002598:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800259a:	f7fe ffd3 	bl	8001544 <HAL_GetTick>
 800259e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80025a0:	e008      	b.n	80025b4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025a2:	f7fe ffcf 	bl	8001544 <HAL_GetTick>
 80025a6:	4602      	mov	r2, r0
 80025a8:	693b      	ldr	r3, [r7, #16]
 80025aa:	1ad3      	subs	r3, r2, r3
 80025ac:	2b02      	cmp	r3, #2
 80025ae:	d901      	bls.n	80025b4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80025b0:	2303      	movs	r3, #3
 80025b2:	e183      	b.n	80028bc <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80025b4:	4b6c      	ldr	r3, [pc, #432]	@ (8002768 <HAL_RCC_OscConfig+0x4bc>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d0f0      	beq.n	80025a2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	689b      	ldr	r3, [r3, #8]
 80025c4:	2b01      	cmp	r3, #1
 80025c6:	d108      	bne.n	80025da <HAL_RCC_OscConfig+0x32e>
 80025c8:	4b66      	ldr	r3, [pc, #408]	@ (8002764 <HAL_RCC_OscConfig+0x4b8>)
 80025ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025ce:	4a65      	ldr	r2, [pc, #404]	@ (8002764 <HAL_RCC_OscConfig+0x4b8>)
 80025d0:	f043 0301 	orr.w	r3, r3, #1
 80025d4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80025d8:	e024      	b.n	8002624 <HAL_RCC_OscConfig+0x378>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	689b      	ldr	r3, [r3, #8]
 80025de:	2b05      	cmp	r3, #5
 80025e0:	d110      	bne.n	8002604 <HAL_RCC_OscConfig+0x358>
 80025e2:	4b60      	ldr	r3, [pc, #384]	@ (8002764 <HAL_RCC_OscConfig+0x4b8>)
 80025e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025e8:	4a5e      	ldr	r2, [pc, #376]	@ (8002764 <HAL_RCC_OscConfig+0x4b8>)
 80025ea:	f043 0304 	orr.w	r3, r3, #4
 80025ee:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80025f2:	4b5c      	ldr	r3, [pc, #368]	@ (8002764 <HAL_RCC_OscConfig+0x4b8>)
 80025f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025f8:	4a5a      	ldr	r2, [pc, #360]	@ (8002764 <HAL_RCC_OscConfig+0x4b8>)
 80025fa:	f043 0301 	orr.w	r3, r3, #1
 80025fe:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002602:	e00f      	b.n	8002624 <HAL_RCC_OscConfig+0x378>
 8002604:	4b57      	ldr	r3, [pc, #348]	@ (8002764 <HAL_RCC_OscConfig+0x4b8>)
 8002606:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800260a:	4a56      	ldr	r2, [pc, #344]	@ (8002764 <HAL_RCC_OscConfig+0x4b8>)
 800260c:	f023 0301 	bic.w	r3, r3, #1
 8002610:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002614:	4b53      	ldr	r3, [pc, #332]	@ (8002764 <HAL_RCC_OscConfig+0x4b8>)
 8002616:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800261a:	4a52      	ldr	r2, [pc, #328]	@ (8002764 <HAL_RCC_OscConfig+0x4b8>)
 800261c:	f023 0304 	bic.w	r3, r3, #4
 8002620:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	689b      	ldr	r3, [r3, #8]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d016      	beq.n	800265a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800262c:	f7fe ff8a 	bl	8001544 <HAL_GetTick>
 8002630:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002632:	e00a      	b.n	800264a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002634:	f7fe ff86 	bl	8001544 <HAL_GetTick>
 8002638:	4602      	mov	r2, r0
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	1ad3      	subs	r3, r2, r3
 800263e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002642:	4293      	cmp	r3, r2
 8002644:	d901      	bls.n	800264a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002646:	2303      	movs	r3, #3
 8002648:	e138      	b.n	80028bc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800264a:	4b46      	ldr	r3, [pc, #280]	@ (8002764 <HAL_RCC_OscConfig+0x4b8>)
 800264c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002650:	f003 0302 	and.w	r3, r3, #2
 8002654:	2b00      	cmp	r3, #0
 8002656:	d0ed      	beq.n	8002634 <HAL_RCC_OscConfig+0x388>
 8002658:	e015      	b.n	8002686 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800265a:	f7fe ff73 	bl	8001544 <HAL_GetTick>
 800265e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002660:	e00a      	b.n	8002678 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002662:	f7fe ff6f 	bl	8001544 <HAL_GetTick>
 8002666:	4602      	mov	r2, r0
 8002668:	693b      	ldr	r3, [r7, #16]
 800266a:	1ad3      	subs	r3, r2, r3
 800266c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002670:	4293      	cmp	r3, r2
 8002672:	d901      	bls.n	8002678 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002674:	2303      	movs	r3, #3
 8002676:	e121      	b.n	80028bc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002678:	4b3a      	ldr	r3, [pc, #232]	@ (8002764 <HAL_RCC_OscConfig+0x4b8>)
 800267a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800267e:	f003 0302 	and.w	r3, r3, #2
 8002682:	2b00      	cmp	r3, #0
 8002684:	d1ed      	bne.n	8002662 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002686:	7ffb      	ldrb	r3, [r7, #31]
 8002688:	2b01      	cmp	r3, #1
 800268a:	d105      	bne.n	8002698 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800268c:	4b35      	ldr	r3, [pc, #212]	@ (8002764 <HAL_RCC_OscConfig+0x4b8>)
 800268e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002690:	4a34      	ldr	r2, [pc, #208]	@ (8002764 <HAL_RCC_OscConfig+0x4b8>)
 8002692:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002696:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f003 0320 	and.w	r3, r3, #32
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d03c      	beq.n	800271e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	699b      	ldr	r3, [r3, #24]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d01c      	beq.n	80026e6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80026ac:	4b2d      	ldr	r3, [pc, #180]	@ (8002764 <HAL_RCC_OscConfig+0x4b8>)
 80026ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80026b2:	4a2c      	ldr	r2, [pc, #176]	@ (8002764 <HAL_RCC_OscConfig+0x4b8>)
 80026b4:	f043 0301 	orr.w	r3, r3, #1
 80026b8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026bc:	f7fe ff42 	bl	8001544 <HAL_GetTick>
 80026c0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80026c2:	e008      	b.n	80026d6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80026c4:	f7fe ff3e 	bl	8001544 <HAL_GetTick>
 80026c8:	4602      	mov	r2, r0
 80026ca:	693b      	ldr	r3, [r7, #16]
 80026cc:	1ad3      	subs	r3, r2, r3
 80026ce:	2b02      	cmp	r3, #2
 80026d0:	d901      	bls.n	80026d6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80026d2:	2303      	movs	r3, #3
 80026d4:	e0f2      	b.n	80028bc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80026d6:	4b23      	ldr	r3, [pc, #140]	@ (8002764 <HAL_RCC_OscConfig+0x4b8>)
 80026d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80026dc:	f003 0302 	and.w	r3, r3, #2
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d0ef      	beq.n	80026c4 <HAL_RCC_OscConfig+0x418>
 80026e4:	e01b      	b.n	800271e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80026e6:	4b1f      	ldr	r3, [pc, #124]	@ (8002764 <HAL_RCC_OscConfig+0x4b8>)
 80026e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80026ec:	4a1d      	ldr	r2, [pc, #116]	@ (8002764 <HAL_RCC_OscConfig+0x4b8>)
 80026ee:	f023 0301 	bic.w	r3, r3, #1
 80026f2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026f6:	f7fe ff25 	bl	8001544 <HAL_GetTick>
 80026fa:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80026fc:	e008      	b.n	8002710 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80026fe:	f7fe ff21 	bl	8001544 <HAL_GetTick>
 8002702:	4602      	mov	r2, r0
 8002704:	693b      	ldr	r3, [r7, #16]
 8002706:	1ad3      	subs	r3, r2, r3
 8002708:	2b02      	cmp	r3, #2
 800270a:	d901      	bls.n	8002710 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800270c:	2303      	movs	r3, #3
 800270e:	e0d5      	b.n	80028bc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002710:	4b14      	ldr	r3, [pc, #80]	@ (8002764 <HAL_RCC_OscConfig+0x4b8>)
 8002712:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002716:	f003 0302 	and.w	r3, r3, #2
 800271a:	2b00      	cmp	r3, #0
 800271c:	d1ef      	bne.n	80026fe <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	69db      	ldr	r3, [r3, #28]
 8002722:	2b00      	cmp	r3, #0
 8002724:	f000 80c9 	beq.w	80028ba <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002728:	4b0e      	ldr	r3, [pc, #56]	@ (8002764 <HAL_RCC_OscConfig+0x4b8>)
 800272a:	689b      	ldr	r3, [r3, #8]
 800272c:	f003 030c 	and.w	r3, r3, #12
 8002730:	2b0c      	cmp	r3, #12
 8002732:	f000 8083 	beq.w	800283c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	69db      	ldr	r3, [r3, #28]
 800273a:	2b02      	cmp	r3, #2
 800273c:	d15e      	bne.n	80027fc <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800273e:	4b09      	ldr	r3, [pc, #36]	@ (8002764 <HAL_RCC_OscConfig+0x4b8>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a08      	ldr	r2, [pc, #32]	@ (8002764 <HAL_RCC_OscConfig+0x4b8>)
 8002744:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002748:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800274a:	f7fe fefb 	bl	8001544 <HAL_GetTick>
 800274e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002750:	e00c      	b.n	800276c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002752:	f7fe fef7 	bl	8001544 <HAL_GetTick>
 8002756:	4602      	mov	r2, r0
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	1ad3      	subs	r3, r2, r3
 800275c:	2b02      	cmp	r3, #2
 800275e:	d905      	bls.n	800276c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002760:	2303      	movs	r3, #3
 8002762:	e0ab      	b.n	80028bc <HAL_RCC_OscConfig+0x610>
 8002764:	40021000 	.word	0x40021000
 8002768:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800276c:	4b55      	ldr	r3, [pc, #340]	@ (80028c4 <HAL_RCC_OscConfig+0x618>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002774:	2b00      	cmp	r3, #0
 8002776:	d1ec      	bne.n	8002752 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002778:	4b52      	ldr	r3, [pc, #328]	@ (80028c4 <HAL_RCC_OscConfig+0x618>)
 800277a:	68da      	ldr	r2, [r3, #12]
 800277c:	4b52      	ldr	r3, [pc, #328]	@ (80028c8 <HAL_RCC_OscConfig+0x61c>)
 800277e:	4013      	ands	r3, r2
 8002780:	687a      	ldr	r2, [r7, #4]
 8002782:	6a11      	ldr	r1, [r2, #32]
 8002784:	687a      	ldr	r2, [r7, #4]
 8002786:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002788:	3a01      	subs	r2, #1
 800278a:	0112      	lsls	r2, r2, #4
 800278c:	4311      	orrs	r1, r2
 800278e:	687a      	ldr	r2, [r7, #4]
 8002790:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8002792:	0212      	lsls	r2, r2, #8
 8002794:	4311      	orrs	r1, r2
 8002796:	687a      	ldr	r2, [r7, #4]
 8002798:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800279a:	0852      	lsrs	r2, r2, #1
 800279c:	3a01      	subs	r2, #1
 800279e:	0552      	lsls	r2, r2, #21
 80027a0:	4311      	orrs	r1, r2
 80027a2:	687a      	ldr	r2, [r7, #4]
 80027a4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80027a6:	0852      	lsrs	r2, r2, #1
 80027a8:	3a01      	subs	r2, #1
 80027aa:	0652      	lsls	r2, r2, #25
 80027ac:	4311      	orrs	r1, r2
 80027ae:	687a      	ldr	r2, [r7, #4]
 80027b0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80027b2:	06d2      	lsls	r2, r2, #27
 80027b4:	430a      	orrs	r2, r1
 80027b6:	4943      	ldr	r1, [pc, #268]	@ (80028c4 <HAL_RCC_OscConfig+0x618>)
 80027b8:	4313      	orrs	r3, r2
 80027ba:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027bc:	4b41      	ldr	r3, [pc, #260]	@ (80028c4 <HAL_RCC_OscConfig+0x618>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a40      	ldr	r2, [pc, #256]	@ (80028c4 <HAL_RCC_OscConfig+0x618>)
 80027c2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80027c6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80027c8:	4b3e      	ldr	r3, [pc, #248]	@ (80028c4 <HAL_RCC_OscConfig+0x618>)
 80027ca:	68db      	ldr	r3, [r3, #12]
 80027cc:	4a3d      	ldr	r2, [pc, #244]	@ (80028c4 <HAL_RCC_OscConfig+0x618>)
 80027ce:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80027d2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027d4:	f7fe feb6 	bl	8001544 <HAL_GetTick>
 80027d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027da:	e008      	b.n	80027ee <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027dc:	f7fe feb2 	bl	8001544 <HAL_GetTick>
 80027e0:	4602      	mov	r2, r0
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	1ad3      	subs	r3, r2, r3
 80027e6:	2b02      	cmp	r3, #2
 80027e8:	d901      	bls.n	80027ee <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80027ea:	2303      	movs	r3, #3
 80027ec:	e066      	b.n	80028bc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027ee:	4b35      	ldr	r3, [pc, #212]	@ (80028c4 <HAL_RCC_OscConfig+0x618>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d0f0      	beq.n	80027dc <HAL_RCC_OscConfig+0x530>
 80027fa:	e05e      	b.n	80028ba <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027fc:	4b31      	ldr	r3, [pc, #196]	@ (80028c4 <HAL_RCC_OscConfig+0x618>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a30      	ldr	r2, [pc, #192]	@ (80028c4 <HAL_RCC_OscConfig+0x618>)
 8002802:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002806:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002808:	f7fe fe9c 	bl	8001544 <HAL_GetTick>
 800280c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800280e:	e008      	b.n	8002822 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002810:	f7fe fe98 	bl	8001544 <HAL_GetTick>
 8002814:	4602      	mov	r2, r0
 8002816:	693b      	ldr	r3, [r7, #16]
 8002818:	1ad3      	subs	r3, r2, r3
 800281a:	2b02      	cmp	r3, #2
 800281c:	d901      	bls.n	8002822 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800281e:	2303      	movs	r3, #3
 8002820:	e04c      	b.n	80028bc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002822:	4b28      	ldr	r3, [pc, #160]	@ (80028c4 <HAL_RCC_OscConfig+0x618>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800282a:	2b00      	cmp	r3, #0
 800282c:	d1f0      	bne.n	8002810 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800282e:	4b25      	ldr	r3, [pc, #148]	@ (80028c4 <HAL_RCC_OscConfig+0x618>)
 8002830:	68da      	ldr	r2, [r3, #12]
 8002832:	4924      	ldr	r1, [pc, #144]	@ (80028c4 <HAL_RCC_OscConfig+0x618>)
 8002834:	4b25      	ldr	r3, [pc, #148]	@ (80028cc <HAL_RCC_OscConfig+0x620>)
 8002836:	4013      	ands	r3, r2
 8002838:	60cb      	str	r3, [r1, #12]
 800283a:	e03e      	b.n	80028ba <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	69db      	ldr	r3, [r3, #28]
 8002840:	2b01      	cmp	r3, #1
 8002842:	d101      	bne.n	8002848 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8002844:	2301      	movs	r3, #1
 8002846:	e039      	b.n	80028bc <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002848:	4b1e      	ldr	r3, [pc, #120]	@ (80028c4 <HAL_RCC_OscConfig+0x618>)
 800284a:	68db      	ldr	r3, [r3, #12]
 800284c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	f003 0203 	and.w	r2, r3, #3
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6a1b      	ldr	r3, [r3, #32]
 8002858:	429a      	cmp	r2, r3
 800285a:	d12c      	bne.n	80028b6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002866:	3b01      	subs	r3, #1
 8002868:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800286a:	429a      	cmp	r2, r3
 800286c:	d123      	bne.n	80028b6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800286e:	697b      	ldr	r3, [r7, #20]
 8002870:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002878:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800287a:	429a      	cmp	r2, r3
 800287c:	d11b      	bne.n	80028b6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002888:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800288a:	429a      	cmp	r2, r3
 800288c:	d113      	bne.n	80028b6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002898:	085b      	lsrs	r3, r3, #1
 800289a:	3b01      	subs	r3, #1
 800289c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800289e:	429a      	cmp	r2, r3
 80028a0:	d109      	bne.n	80028b6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028ac:	085b      	lsrs	r3, r3, #1
 80028ae:	3b01      	subs	r3, #1
 80028b0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80028b2:	429a      	cmp	r2, r3
 80028b4:	d001      	beq.n	80028ba <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
 80028b8:	e000      	b.n	80028bc <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80028ba:	2300      	movs	r3, #0
}
 80028bc:	4618      	mov	r0, r3
 80028be:	3720      	adds	r7, #32
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bd80      	pop	{r7, pc}
 80028c4:	40021000 	.word	0x40021000
 80028c8:	019f800c 	.word	0x019f800c
 80028cc:	feeefffc 	.word	0xfeeefffc

080028d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b086      	sub	sp, #24
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
 80028d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80028da:	2300      	movs	r3, #0
 80028dc:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d101      	bne.n	80028e8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80028e4:	2301      	movs	r3, #1
 80028e6:	e11e      	b.n	8002b26 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80028e8:	4b91      	ldr	r3, [pc, #580]	@ (8002b30 <HAL_RCC_ClockConfig+0x260>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f003 030f 	and.w	r3, r3, #15
 80028f0:	683a      	ldr	r2, [r7, #0]
 80028f2:	429a      	cmp	r2, r3
 80028f4:	d910      	bls.n	8002918 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028f6:	4b8e      	ldr	r3, [pc, #568]	@ (8002b30 <HAL_RCC_ClockConfig+0x260>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f023 020f 	bic.w	r2, r3, #15
 80028fe:	498c      	ldr	r1, [pc, #560]	@ (8002b30 <HAL_RCC_ClockConfig+0x260>)
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	4313      	orrs	r3, r2
 8002904:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002906:	4b8a      	ldr	r3, [pc, #552]	@ (8002b30 <HAL_RCC_ClockConfig+0x260>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f003 030f 	and.w	r3, r3, #15
 800290e:	683a      	ldr	r2, [r7, #0]
 8002910:	429a      	cmp	r2, r3
 8002912:	d001      	beq.n	8002918 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002914:	2301      	movs	r3, #1
 8002916:	e106      	b.n	8002b26 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f003 0301 	and.w	r3, r3, #1
 8002920:	2b00      	cmp	r3, #0
 8002922:	d073      	beq.n	8002a0c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	2b03      	cmp	r3, #3
 800292a:	d129      	bne.n	8002980 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800292c:	4b81      	ldr	r3, [pc, #516]	@ (8002b34 <HAL_RCC_ClockConfig+0x264>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002934:	2b00      	cmp	r3, #0
 8002936:	d101      	bne.n	800293c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002938:	2301      	movs	r3, #1
 800293a:	e0f4      	b.n	8002b26 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800293c:	f000 f99e 	bl	8002c7c <RCC_GetSysClockFreqFromPLLSource>
 8002940:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002942:	693b      	ldr	r3, [r7, #16]
 8002944:	4a7c      	ldr	r2, [pc, #496]	@ (8002b38 <HAL_RCC_ClockConfig+0x268>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d93f      	bls.n	80029ca <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800294a:	4b7a      	ldr	r3, [pc, #488]	@ (8002b34 <HAL_RCC_ClockConfig+0x264>)
 800294c:	689b      	ldr	r3, [r3, #8]
 800294e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002952:	2b00      	cmp	r3, #0
 8002954:	d009      	beq.n	800296a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800295e:	2b00      	cmp	r3, #0
 8002960:	d033      	beq.n	80029ca <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002966:	2b00      	cmp	r3, #0
 8002968:	d12f      	bne.n	80029ca <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800296a:	4b72      	ldr	r3, [pc, #456]	@ (8002b34 <HAL_RCC_ClockConfig+0x264>)
 800296c:	689b      	ldr	r3, [r3, #8]
 800296e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002972:	4a70      	ldr	r2, [pc, #448]	@ (8002b34 <HAL_RCC_ClockConfig+0x264>)
 8002974:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002978:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800297a:	2380      	movs	r3, #128	@ 0x80
 800297c:	617b      	str	r3, [r7, #20]
 800297e:	e024      	b.n	80029ca <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	2b02      	cmp	r3, #2
 8002986:	d107      	bne.n	8002998 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002988:	4b6a      	ldr	r3, [pc, #424]	@ (8002b34 <HAL_RCC_ClockConfig+0x264>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002990:	2b00      	cmp	r3, #0
 8002992:	d109      	bne.n	80029a8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002994:	2301      	movs	r3, #1
 8002996:	e0c6      	b.n	8002b26 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002998:	4b66      	ldr	r3, [pc, #408]	@ (8002b34 <HAL_RCC_ClockConfig+0x264>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d101      	bne.n	80029a8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80029a4:	2301      	movs	r3, #1
 80029a6:	e0be      	b.n	8002b26 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80029a8:	f000 f8ce 	bl	8002b48 <HAL_RCC_GetSysClockFreq>
 80029ac:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80029ae:	693b      	ldr	r3, [r7, #16]
 80029b0:	4a61      	ldr	r2, [pc, #388]	@ (8002b38 <HAL_RCC_ClockConfig+0x268>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d909      	bls.n	80029ca <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80029b6:	4b5f      	ldr	r3, [pc, #380]	@ (8002b34 <HAL_RCC_ClockConfig+0x264>)
 80029b8:	689b      	ldr	r3, [r3, #8]
 80029ba:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80029be:	4a5d      	ldr	r2, [pc, #372]	@ (8002b34 <HAL_RCC_ClockConfig+0x264>)
 80029c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80029c4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80029c6:	2380      	movs	r3, #128	@ 0x80
 80029c8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80029ca:	4b5a      	ldr	r3, [pc, #360]	@ (8002b34 <HAL_RCC_ClockConfig+0x264>)
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	f023 0203 	bic.w	r2, r3, #3
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	4957      	ldr	r1, [pc, #348]	@ (8002b34 <HAL_RCC_ClockConfig+0x264>)
 80029d8:	4313      	orrs	r3, r2
 80029da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029dc:	f7fe fdb2 	bl	8001544 <HAL_GetTick>
 80029e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029e2:	e00a      	b.n	80029fa <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029e4:	f7fe fdae 	bl	8001544 <HAL_GetTick>
 80029e8:	4602      	mov	r2, r0
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	1ad3      	subs	r3, r2, r3
 80029ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d901      	bls.n	80029fa <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80029f6:	2303      	movs	r3, #3
 80029f8:	e095      	b.n	8002b26 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029fa:	4b4e      	ldr	r3, [pc, #312]	@ (8002b34 <HAL_RCC_ClockConfig+0x264>)
 80029fc:	689b      	ldr	r3, [r3, #8]
 80029fe:	f003 020c 	and.w	r2, r3, #12
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	009b      	lsls	r3, r3, #2
 8002a08:	429a      	cmp	r2, r3
 8002a0a:	d1eb      	bne.n	80029e4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f003 0302 	and.w	r3, r3, #2
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d023      	beq.n	8002a60 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f003 0304 	and.w	r3, r3, #4
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d005      	beq.n	8002a30 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a24:	4b43      	ldr	r3, [pc, #268]	@ (8002b34 <HAL_RCC_ClockConfig+0x264>)
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	4a42      	ldr	r2, [pc, #264]	@ (8002b34 <HAL_RCC_ClockConfig+0x264>)
 8002a2a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002a2e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f003 0308 	and.w	r3, r3, #8
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d007      	beq.n	8002a4c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002a3c:	4b3d      	ldr	r3, [pc, #244]	@ (8002b34 <HAL_RCC_ClockConfig+0x264>)
 8002a3e:	689b      	ldr	r3, [r3, #8]
 8002a40:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002a44:	4a3b      	ldr	r2, [pc, #236]	@ (8002b34 <HAL_RCC_ClockConfig+0x264>)
 8002a46:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002a4a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a4c:	4b39      	ldr	r3, [pc, #228]	@ (8002b34 <HAL_RCC_ClockConfig+0x264>)
 8002a4e:	689b      	ldr	r3, [r3, #8]
 8002a50:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	689b      	ldr	r3, [r3, #8]
 8002a58:	4936      	ldr	r1, [pc, #216]	@ (8002b34 <HAL_RCC_ClockConfig+0x264>)
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	608b      	str	r3, [r1, #8]
 8002a5e:	e008      	b.n	8002a72 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002a60:	697b      	ldr	r3, [r7, #20]
 8002a62:	2b80      	cmp	r3, #128	@ 0x80
 8002a64:	d105      	bne.n	8002a72 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002a66:	4b33      	ldr	r3, [pc, #204]	@ (8002b34 <HAL_RCC_ClockConfig+0x264>)
 8002a68:	689b      	ldr	r3, [r3, #8]
 8002a6a:	4a32      	ldr	r2, [pc, #200]	@ (8002b34 <HAL_RCC_ClockConfig+0x264>)
 8002a6c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002a70:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a72:	4b2f      	ldr	r3, [pc, #188]	@ (8002b30 <HAL_RCC_ClockConfig+0x260>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f003 030f 	and.w	r3, r3, #15
 8002a7a:	683a      	ldr	r2, [r7, #0]
 8002a7c:	429a      	cmp	r2, r3
 8002a7e:	d21d      	bcs.n	8002abc <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a80:	4b2b      	ldr	r3, [pc, #172]	@ (8002b30 <HAL_RCC_ClockConfig+0x260>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f023 020f 	bic.w	r2, r3, #15
 8002a88:	4929      	ldr	r1, [pc, #164]	@ (8002b30 <HAL_RCC_ClockConfig+0x260>)
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002a90:	f7fe fd58 	bl	8001544 <HAL_GetTick>
 8002a94:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a96:	e00a      	b.n	8002aae <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a98:	f7fe fd54 	bl	8001544 <HAL_GetTick>
 8002a9c:	4602      	mov	r2, r0
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	1ad3      	subs	r3, r2, r3
 8002aa2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d901      	bls.n	8002aae <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002aaa:	2303      	movs	r3, #3
 8002aac:	e03b      	b.n	8002b26 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002aae:	4b20      	ldr	r3, [pc, #128]	@ (8002b30 <HAL_RCC_ClockConfig+0x260>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f003 030f 	and.w	r3, r3, #15
 8002ab6:	683a      	ldr	r2, [r7, #0]
 8002ab8:	429a      	cmp	r2, r3
 8002aba:	d1ed      	bne.n	8002a98 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f003 0304 	and.w	r3, r3, #4
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d008      	beq.n	8002ada <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ac8:	4b1a      	ldr	r3, [pc, #104]	@ (8002b34 <HAL_RCC_ClockConfig+0x264>)
 8002aca:	689b      	ldr	r3, [r3, #8]
 8002acc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	68db      	ldr	r3, [r3, #12]
 8002ad4:	4917      	ldr	r1, [pc, #92]	@ (8002b34 <HAL_RCC_ClockConfig+0x264>)
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f003 0308 	and.w	r3, r3, #8
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d009      	beq.n	8002afa <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ae6:	4b13      	ldr	r3, [pc, #76]	@ (8002b34 <HAL_RCC_ClockConfig+0x264>)
 8002ae8:	689b      	ldr	r3, [r3, #8]
 8002aea:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	691b      	ldr	r3, [r3, #16]
 8002af2:	00db      	lsls	r3, r3, #3
 8002af4:	490f      	ldr	r1, [pc, #60]	@ (8002b34 <HAL_RCC_ClockConfig+0x264>)
 8002af6:	4313      	orrs	r3, r2
 8002af8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002afa:	f000 f825 	bl	8002b48 <HAL_RCC_GetSysClockFreq>
 8002afe:	4602      	mov	r2, r0
 8002b00:	4b0c      	ldr	r3, [pc, #48]	@ (8002b34 <HAL_RCC_ClockConfig+0x264>)
 8002b02:	689b      	ldr	r3, [r3, #8]
 8002b04:	091b      	lsrs	r3, r3, #4
 8002b06:	f003 030f 	and.w	r3, r3, #15
 8002b0a:	490c      	ldr	r1, [pc, #48]	@ (8002b3c <HAL_RCC_ClockConfig+0x26c>)
 8002b0c:	5ccb      	ldrb	r3, [r1, r3]
 8002b0e:	f003 031f 	and.w	r3, r3, #31
 8002b12:	fa22 f303 	lsr.w	r3, r2, r3
 8002b16:	4a0a      	ldr	r2, [pc, #40]	@ (8002b40 <HAL_RCC_ClockConfig+0x270>)
 8002b18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002b1a:	4b0a      	ldr	r3, [pc, #40]	@ (8002b44 <HAL_RCC_ClockConfig+0x274>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f7fe fcc4 	bl	80014ac <HAL_InitTick>
 8002b24:	4603      	mov	r3, r0
}
 8002b26:	4618      	mov	r0, r3
 8002b28:	3718      	adds	r7, #24
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}
 8002b2e:	bf00      	nop
 8002b30:	40022000 	.word	0x40022000
 8002b34:	40021000 	.word	0x40021000
 8002b38:	04c4b400 	.word	0x04c4b400
 8002b3c:	08007b40 	.word	0x08007b40
 8002b40:	20000200 	.word	0x20000200
 8002b44:	20000204 	.word	0x20000204

08002b48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b087      	sub	sp, #28
 8002b4c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002b4e:	4b2c      	ldr	r3, [pc, #176]	@ (8002c00 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b50:	689b      	ldr	r3, [r3, #8]
 8002b52:	f003 030c 	and.w	r3, r3, #12
 8002b56:	2b04      	cmp	r3, #4
 8002b58:	d102      	bne.n	8002b60 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002b5a:	4b2a      	ldr	r3, [pc, #168]	@ (8002c04 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002b5c:	613b      	str	r3, [r7, #16]
 8002b5e:	e047      	b.n	8002bf0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002b60:	4b27      	ldr	r3, [pc, #156]	@ (8002c00 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	f003 030c 	and.w	r3, r3, #12
 8002b68:	2b08      	cmp	r3, #8
 8002b6a:	d102      	bne.n	8002b72 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002b6c:	4b26      	ldr	r3, [pc, #152]	@ (8002c08 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002b6e:	613b      	str	r3, [r7, #16]
 8002b70:	e03e      	b.n	8002bf0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002b72:	4b23      	ldr	r3, [pc, #140]	@ (8002c00 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	f003 030c 	and.w	r3, r3, #12
 8002b7a:	2b0c      	cmp	r3, #12
 8002b7c:	d136      	bne.n	8002bec <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002b7e:	4b20      	ldr	r3, [pc, #128]	@ (8002c00 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b80:	68db      	ldr	r3, [r3, #12]
 8002b82:	f003 0303 	and.w	r3, r3, #3
 8002b86:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002b88:	4b1d      	ldr	r3, [pc, #116]	@ (8002c00 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b8a:	68db      	ldr	r3, [r3, #12]
 8002b8c:	091b      	lsrs	r3, r3, #4
 8002b8e:	f003 030f 	and.w	r3, r3, #15
 8002b92:	3301      	adds	r3, #1
 8002b94:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	2b03      	cmp	r3, #3
 8002b9a:	d10c      	bne.n	8002bb6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002b9c:	4a1a      	ldr	r2, [pc, #104]	@ (8002c08 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002b9e:	68bb      	ldr	r3, [r7, #8]
 8002ba0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ba4:	4a16      	ldr	r2, [pc, #88]	@ (8002c00 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002ba6:	68d2      	ldr	r2, [r2, #12]
 8002ba8:	0a12      	lsrs	r2, r2, #8
 8002baa:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002bae:	fb02 f303 	mul.w	r3, r2, r3
 8002bb2:	617b      	str	r3, [r7, #20]
      break;
 8002bb4:	e00c      	b.n	8002bd0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002bb6:	4a13      	ldr	r2, [pc, #76]	@ (8002c04 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bbe:	4a10      	ldr	r2, [pc, #64]	@ (8002c00 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002bc0:	68d2      	ldr	r2, [r2, #12]
 8002bc2:	0a12      	lsrs	r2, r2, #8
 8002bc4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002bc8:	fb02 f303 	mul.w	r3, r2, r3
 8002bcc:	617b      	str	r3, [r7, #20]
      break;
 8002bce:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002bd0:	4b0b      	ldr	r3, [pc, #44]	@ (8002c00 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002bd2:	68db      	ldr	r3, [r3, #12]
 8002bd4:	0e5b      	lsrs	r3, r3, #25
 8002bd6:	f003 0303 	and.w	r3, r3, #3
 8002bda:	3301      	adds	r3, #1
 8002bdc:	005b      	lsls	r3, r3, #1
 8002bde:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002be0:	697a      	ldr	r2, [r7, #20]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002be8:	613b      	str	r3, [r7, #16]
 8002bea:	e001      	b.n	8002bf0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002bec:	2300      	movs	r3, #0
 8002bee:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002bf0:	693b      	ldr	r3, [r7, #16]
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	371c      	adds	r7, #28
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfc:	4770      	bx	lr
 8002bfe:	bf00      	nop
 8002c00:	40021000 	.word	0x40021000
 8002c04:	00f42400 	.word	0x00f42400
 8002c08:	016e3600 	.word	0x016e3600

08002c0c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c10:	4b03      	ldr	r3, [pc, #12]	@ (8002c20 <HAL_RCC_GetHCLKFreq+0x14>)
 8002c12:	681b      	ldr	r3, [r3, #0]
}
 8002c14:	4618      	mov	r0, r3
 8002c16:	46bd      	mov	sp, r7
 8002c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1c:	4770      	bx	lr
 8002c1e:	bf00      	nop
 8002c20:	20000200 	.word	0x20000200

08002c24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002c28:	f7ff fff0 	bl	8002c0c <HAL_RCC_GetHCLKFreq>
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	4b06      	ldr	r3, [pc, #24]	@ (8002c48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c30:	689b      	ldr	r3, [r3, #8]
 8002c32:	0a1b      	lsrs	r3, r3, #8
 8002c34:	f003 0307 	and.w	r3, r3, #7
 8002c38:	4904      	ldr	r1, [pc, #16]	@ (8002c4c <HAL_RCC_GetPCLK1Freq+0x28>)
 8002c3a:	5ccb      	ldrb	r3, [r1, r3]
 8002c3c:	f003 031f 	and.w	r3, r3, #31
 8002c40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c44:	4618      	mov	r0, r3
 8002c46:	bd80      	pop	{r7, pc}
 8002c48:	40021000 	.word	0x40021000
 8002c4c:	08007b50 	.word	0x08007b50

08002c50 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002c54:	f7ff ffda 	bl	8002c0c <HAL_RCC_GetHCLKFreq>
 8002c58:	4602      	mov	r2, r0
 8002c5a:	4b06      	ldr	r3, [pc, #24]	@ (8002c74 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c5c:	689b      	ldr	r3, [r3, #8]
 8002c5e:	0adb      	lsrs	r3, r3, #11
 8002c60:	f003 0307 	and.w	r3, r3, #7
 8002c64:	4904      	ldr	r1, [pc, #16]	@ (8002c78 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002c66:	5ccb      	ldrb	r3, [r1, r3]
 8002c68:	f003 031f 	and.w	r3, r3, #31
 8002c6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c70:	4618      	mov	r0, r3
 8002c72:	bd80      	pop	{r7, pc}
 8002c74:	40021000 	.word	0x40021000
 8002c78:	08007b50 	.word	0x08007b50

08002c7c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b087      	sub	sp, #28
 8002c80:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002c82:	4b1e      	ldr	r3, [pc, #120]	@ (8002cfc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002c84:	68db      	ldr	r3, [r3, #12]
 8002c86:	f003 0303 	and.w	r3, r3, #3
 8002c8a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002c8c:	4b1b      	ldr	r3, [pc, #108]	@ (8002cfc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002c8e:	68db      	ldr	r3, [r3, #12]
 8002c90:	091b      	lsrs	r3, r3, #4
 8002c92:	f003 030f 	and.w	r3, r3, #15
 8002c96:	3301      	adds	r3, #1
 8002c98:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002c9a:	693b      	ldr	r3, [r7, #16]
 8002c9c:	2b03      	cmp	r3, #3
 8002c9e:	d10c      	bne.n	8002cba <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002ca0:	4a17      	ldr	r2, [pc, #92]	@ (8002d00 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ca8:	4a14      	ldr	r2, [pc, #80]	@ (8002cfc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002caa:	68d2      	ldr	r2, [r2, #12]
 8002cac:	0a12      	lsrs	r2, r2, #8
 8002cae:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002cb2:	fb02 f303 	mul.w	r3, r2, r3
 8002cb6:	617b      	str	r3, [r7, #20]
    break;
 8002cb8:	e00c      	b.n	8002cd4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002cba:	4a12      	ldr	r2, [pc, #72]	@ (8002d04 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cc2:	4a0e      	ldr	r2, [pc, #56]	@ (8002cfc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002cc4:	68d2      	ldr	r2, [r2, #12]
 8002cc6:	0a12      	lsrs	r2, r2, #8
 8002cc8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002ccc:	fb02 f303 	mul.w	r3, r2, r3
 8002cd0:	617b      	str	r3, [r7, #20]
    break;
 8002cd2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002cd4:	4b09      	ldr	r3, [pc, #36]	@ (8002cfc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002cd6:	68db      	ldr	r3, [r3, #12]
 8002cd8:	0e5b      	lsrs	r3, r3, #25
 8002cda:	f003 0303 	and.w	r3, r3, #3
 8002cde:	3301      	adds	r3, #1
 8002ce0:	005b      	lsls	r3, r3, #1
 8002ce2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002ce4:	697a      	ldr	r2, [r7, #20]
 8002ce6:	68bb      	ldr	r3, [r7, #8]
 8002ce8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cec:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002cee:	687b      	ldr	r3, [r7, #4]
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	371c      	adds	r7, #28
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfa:	4770      	bx	lr
 8002cfc:	40021000 	.word	0x40021000
 8002d00:	016e3600 	.word	0x016e3600
 8002d04:	00f42400 	.word	0x00f42400

08002d08 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b086      	sub	sp, #24
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002d10:	2300      	movs	r3, #0
 8002d12:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002d14:	2300      	movs	r3, #0
 8002d16:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	f000 8098 	beq.w	8002e56 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d26:	2300      	movs	r3, #0
 8002d28:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d2a:	4b43      	ldr	r3, [pc, #268]	@ (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d10d      	bne.n	8002d52 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d36:	4b40      	ldr	r3, [pc, #256]	@ (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d3a:	4a3f      	ldr	r2, [pc, #252]	@ (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d3c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d40:	6593      	str	r3, [r2, #88]	@ 0x58
 8002d42:	4b3d      	ldr	r3, [pc, #244]	@ (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d4a:	60bb      	str	r3, [r7, #8]
 8002d4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d52:	4b3a      	ldr	r3, [pc, #232]	@ (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a39      	ldr	r2, [pc, #228]	@ (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002d58:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d5c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002d5e:	f7fe fbf1 	bl	8001544 <HAL_GetTick>
 8002d62:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002d64:	e009      	b.n	8002d7a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d66:	f7fe fbed 	bl	8001544 <HAL_GetTick>
 8002d6a:	4602      	mov	r2, r0
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	1ad3      	subs	r3, r2, r3
 8002d70:	2b02      	cmp	r3, #2
 8002d72:	d902      	bls.n	8002d7a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002d74:	2303      	movs	r3, #3
 8002d76:	74fb      	strb	r3, [r7, #19]
        break;
 8002d78:	e005      	b.n	8002d86 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002d7a:	4b30      	ldr	r3, [pc, #192]	@ (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d0ef      	beq.n	8002d66 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002d86:	7cfb      	ldrb	r3, [r7, #19]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d159      	bne.n	8002e40 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002d8c:	4b2a      	ldr	r3, [pc, #168]	@ (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d92:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002d96:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002d98:	697b      	ldr	r3, [r7, #20]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d01e      	beq.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002da2:	697a      	ldr	r2, [r7, #20]
 8002da4:	429a      	cmp	r2, r3
 8002da6:	d019      	beq.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002da8:	4b23      	ldr	r3, [pc, #140]	@ (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002daa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002dae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002db2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002db4:	4b20      	ldr	r3, [pc, #128]	@ (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002db6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002dba:	4a1f      	ldr	r2, [pc, #124]	@ (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002dbc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002dc0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002dc4:	4b1c      	ldr	r3, [pc, #112]	@ (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002dc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002dca:	4a1b      	ldr	r2, [pc, #108]	@ (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002dcc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002dd0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002dd4:	4a18      	ldr	r2, [pc, #96]	@ (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	f003 0301 	and.w	r3, r3, #1
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d016      	beq.n	8002e14 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002de6:	f7fe fbad 	bl	8001544 <HAL_GetTick>
 8002dea:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002dec:	e00b      	b.n	8002e06 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dee:	f7fe fba9 	bl	8001544 <HAL_GetTick>
 8002df2:	4602      	mov	r2, r0
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	1ad3      	subs	r3, r2, r3
 8002df8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d902      	bls.n	8002e06 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002e00:	2303      	movs	r3, #3
 8002e02:	74fb      	strb	r3, [r7, #19]
            break;
 8002e04:	e006      	b.n	8002e14 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e06:	4b0c      	ldr	r3, [pc, #48]	@ (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002e08:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e0c:	f003 0302 	and.w	r3, r3, #2
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d0ec      	beq.n	8002dee <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002e14:	7cfb      	ldrb	r3, [r7, #19]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d10b      	bne.n	8002e32 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002e1a:	4b07      	ldr	r3, [pc, #28]	@ (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002e1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e20:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e28:	4903      	ldr	r1, [pc, #12]	@ (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002e30:	e008      	b.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002e32:	7cfb      	ldrb	r3, [r7, #19]
 8002e34:	74bb      	strb	r3, [r7, #18]
 8002e36:	e005      	b.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002e38:	40021000 	.word	0x40021000
 8002e3c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e40:	7cfb      	ldrb	r3, [r7, #19]
 8002e42:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e44:	7c7b      	ldrb	r3, [r7, #17]
 8002e46:	2b01      	cmp	r3, #1
 8002e48:	d105      	bne.n	8002e56 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e4a:	4ba7      	ldr	r3, [pc, #668]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e4e:	4aa6      	ldr	r2, [pc, #664]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e50:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002e54:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f003 0301 	and.w	r3, r3, #1
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d00a      	beq.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002e62:	4ba1      	ldr	r3, [pc, #644]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e68:	f023 0203 	bic.w	r2, r3, #3
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	499d      	ldr	r1, [pc, #628]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e72:	4313      	orrs	r3, r2
 8002e74:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f003 0302 	and.w	r3, r3, #2
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d00a      	beq.n	8002e9a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002e84:	4b98      	ldr	r3, [pc, #608]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e8a:	f023 020c 	bic.w	r2, r3, #12
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	689b      	ldr	r3, [r3, #8]
 8002e92:	4995      	ldr	r1, [pc, #596]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e94:	4313      	orrs	r3, r2
 8002e96:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f003 0304 	and.w	r3, r3, #4
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d00a      	beq.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002ea6:	4b90      	ldr	r3, [pc, #576]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ea8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002eac:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	68db      	ldr	r3, [r3, #12]
 8002eb4:	498c      	ldr	r1, [pc, #560]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f003 0308 	and.w	r3, r3, #8
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d00a      	beq.n	8002ede <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002ec8:	4b87      	ldr	r3, [pc, #540]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002eca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ece:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	691b      	ldr	r3, [r3, #16]
 8002ed6:	4984      	ldr	r1, [pc, #528]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f003 0310 	and.w	r3, r3, #16
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d00a      	beq.n	8002f00 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002eea:	4b7f      	ldr	r3, [pc, #508]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002eec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ef0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	695b      	ldr	r3, [r3, #20]
 8002ef8:	497b      	ldr	r1, [pc, #492]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002efa:	4313      	orrs	r3, r2
 8002efc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f003 0320 	and.w	r3, r3, #32
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d00a      	beq.n	8002f22 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002f0c:	4b76      	ldr	r3, [pc, #472]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f12:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	699b      	ldr	r3, [r3, #24]
 8002f1a:	4973      	ldr	r1, [pc, #460]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d00a      	beq.n	8002f44 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002f2e:	4b6e      	ldr	r3, [pc, #440]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f34:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	69db      	ldr	r3, [r3, #28]
 8002f3c:	496a      	ldr	r1, [pc, #424]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d00a      	beq.n	8002f66 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002f50:	4b65      	ldr	r3, [pc, #404]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f56:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6a1b      	ldr	r3, [r3, #32]
 8002f5e:	4962      	ldr	r1, [pc, #392]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f60:	4313      	orrs	r3, r2
 8002f62:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d00a      	beq.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002f72:	4b5d      	ldr	r3, [pc, #372]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f78:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f80:	4959      	ldr	r1, [pc, #356]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f82:	4313      	orrs	r3, r2
 8002f84:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d00a      	beq.n	8002faa <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002f94:	4b54      	ldr	r3, [pc, #336]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f96:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002f9a:	f023 0203 	bic.w	r2, r3, #3
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fa2:	4951      	ldr	r1, [pc, #324]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d00a      	beq.n	8002fcc <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002fb6:	4b4c      	ldr	r3, [pc, #304]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002fb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fbc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fc4:	4948      	ldr	r1, [pc, #288]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d015      	beq.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002fd8:	4b43      	ldr	r3, [pc, #268]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002fda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fde:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fe6:	4940      	ldr	r1, [pc, #256]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002fe8:	4313      	orrs	r3, r2
 8002fea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ff2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002ff6:	d105      	bne.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ff8:	4b3b      	ldr	r3, [pc, #236]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ffa:	68db      	ldr	r3, [r3, #12]
 8002ffc:	4a3a      	ldr	r2, [pc, #232]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ffe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003002:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800300c:	2b00      	cmp	r3, #0
 800300e:	d015      	beq.n	800303c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003010:	4b35      	ldr	r3, [pc, #212]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003012:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003016:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800301e:	4932      	ldr	r1, [pc, #200]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003020:	4313      	orrs	r3, r2
 8003022:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800302a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800302e:	d105      	bne.n	800303c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003030:	4b2d      	ldr	r3, [pc, #180]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003032:	68db      	ldr	r3, [r3, #12]
 8003034:	4a2c      	ldr	r2, [pc, #176]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003036:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800303a:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003044:	2b00      	cmp	r3, #0
 8003046:	d015      	beq.n	8003074 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003048:	4b27      	ldr	r3, [pc, #156]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800304a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800304e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003056:	4924      	ldr	r1, [pc, #144]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003058:	4313      	orrs	r3, r2
 800305a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003062:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003066:	d105      	bne.n	8003074 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003068:	4b1f      	ldr	r3, [pc, #124]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800306a:	68db      	ldr	r3, [r3, #12]
 800306c:	4a1e      	ldr	r2, [pc, #120]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800306e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003072:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800307c:	2b00      	cmp	r3, #0
 800307e:	d015      	beq.n	80030ac <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003080:	4b19      	ldr	r3, [pc, #100]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003082:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003086:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800308e:	4916      	ldr	r1, [pc, #88]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003090:	4313      	orrs	r3, r2
 8003092:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800309a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800309e:	d105      	bne.n	80030ac <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80030a0:	4b11      	ldr	r3, [pc, #68]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80030a2:	68db      	ldr	r3, [r3, #12]
 80030a4:	4a10      	ldr	r2, [pc, #64]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80030a6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80030aa:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d019      	beq.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80030b8:	4b0b      	ldr	r3, [pc, #44]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80030ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030be:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030c6:	4908      	ldr	r1, [pc, #32]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80030c8:	4313      	orrs	r3, r2
 80030ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030d2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80030d6:	d109      	bne.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80030d8:	4b03      	ldr	r3, [pc, #12]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80030da:	68db      	ldr	r3, [r3, #12]
 80030dc:	4a02      	ldr	r2, [pc, #8]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80030de:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80030e2:	60d3      	str	r3, [r2, #12]
 80030e4:	e002      	b.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80030e6:	bf00      	nop
 80030e8:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d015      	beq.n	8003124 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80030f8:	4b29      	ldr	r3, [pc, #164]	@ (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80030fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030fe:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003106:	4926      	ldr	r1, [pc, #152]	@ (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003108:	4313      	orrs	r3, r2
 800310a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003112:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003116:	d105      	bne.n	8003124 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003118:	4b21      	ldr	r3, [pc, #132]	@ (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800311a:	68db      	ldr	r3, [r3, #12]
 800311c:	4a20      	ldr	r2, [pc, #128]	@ (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800311e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003122:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800312c:	2b00      	cmp	r3, #0
 800312e:	d015      	beq.n	800315c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8003130:	4b1b      	ldr	r3, [pc, #108]	@ (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003132:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003136:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800313e:	4918      	ldr	r1, [pc, #96]	@ (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003140:	4313      	orrs	r3, r2
 8003142:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800314a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800314e:	d105      	bne.n	800315c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003150:	4b13      	ldr	r3, [pc, #76]	@ (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003152:	68db      	ldr	r3, [r3, #12]
 8003154:	4a12      	ldr	r2, [pc, #72]	@ (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003156:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800315a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003164:	2b00      	cmp	r3, #0
 8003166:	d015      	beq.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003168:	4b0d      	ldr	r3, [pc, #52]	@ (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800316a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800316e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003176:	490a      	ldr	r1, [pc, #40]	@ (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003178:	4313      	orrs	r3, r2
 800317a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003182:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003186:	d105      	bne.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003188:	4b05      	ldr	r3, [pc, #20]	@ (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800318a:	68db      	ldr	r3, [r3, #12]
 800318c:	4a04      	ldr	r2, [pc, #16]	@ (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800318e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003192:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003194:	7cbb      	ldrb	r3, [r7, #18]
}
 8003196:	4618      	mov	r0, r3
 8003198:	3718      	adds	r7, #24
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}
 800319e:	bf00      	nop
 80031a0:	40021000 	.word	0x40021000

080031a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b082      	sub	sp, #8
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d101      	bne.n	80031b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80031b2:	2301      	movs	r3, #1
 80031b4:	e054      	b.n	8003260 <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80031bc:	b2db      	uxtb	r3, r3
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d111      	bne.n	80031e6 <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2200      	movs	r2, #0
 80031c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80031ca:	6878      	ldr	r0, [r7, #4]
 80031cc:	f001 fe2c 	bl	8004e28 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d102      	bne.n	80031de <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	4a23      	ldr	r2, [pc, #140]	@ (8003268 <HAL_TIM_Base_Init+0xc4>)
 80031dc:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031e2:	6878      	ldr	r0, [r7, #4]
 80031e4:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2202      	movs	r2, #2
 80031ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681a      	ldr	r2, [r3, #0]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	3304      	adds	r3, #4
 80031f6:	4619      	mov	r1, r3
 80031f8:	4610      	mov	r0, r2
 80031fa:	f001 f975 	bl	80044e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2201      	movs	r2, #1
 8003202:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2201      	movs	r2, #1
 800320a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2201      	movs	r2, #1
 8003212:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2201      	movs	r2, #1
 800321a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2201      	movs	r2, #1
 8003222:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2201      	movs	r2, #1
 800322a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2201      	movs	r2, #1
 8003232:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2201      	movs	r2, #1
 800323a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2201      	movs	r2, #1
 8003242:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2201      	movs	r2, #1
 800324a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2201      	movs	r2, #1
 8003252:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2201      	movs	r2, #1
 800325a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800325e:	2300      	movs	r3, #0
}
 8003260:	4618      	mov	r0, r3
 8003262:	3708      	adds	r7, #8
 8003264:	46bd      	mov	sp, r7
 8003266:	bd80      	pop	{r7, pc}
 8003268:	0800115d 	.word	0x0800115d

0800326c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800326c:	b480      	push	{r7}
 800326e:	b085      	sub	sp, #20
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800327a:	b2db      	uxtb	r3, r3
 800327c:	2b01      	cmp	r3, #1
 800327e:	d001      	beq.n	8003284 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003280:	2301      	movs	r3, #1
 8003282:	e054      	b.n	800332e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2202      	movs	r2, #2
 8003288:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	68da      	ldr	r2, [r3, #12]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f042 0201 	orr.w	r2, r2, #1
 800329a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a26      	ldr	r2, [pc, #152]	@ (800333c <HAL_TIM_Base_Start_IT+0xd0>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d022      	beq.n	80032ec <HAL_TIM_Base_Start_IT+0x80>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80032ae:	d01d      	beq.n	80032ec <HAL_TIM_Base_Start_IT+0x80>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a22      	ldr	r2, [pc, #136]	@ (8003340 <HAL_TIM_Base_Start_IT+0xd4>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d018      	beq.n	80032ec <HAL_TIM_Base_Start_IT+0x80>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4a21      	ldr	r2, [pc, #132]	@ (8003344 <HAL_TIM_Base_Start_IT+0xd8>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d013      	beq.n	80032ec <HAL_TIM_Base_Start_IT+0x80>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a1f      	ldr	r2, [pc, #124]	@ (8003348 <HAL_TIM_Base_Start_IT+0xdc>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d00e      	beq.n	80032ec <HAL_TIM_Base_Start_IT+0x80>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a1e      	ldr	r2, [pc, #120]	@ (800334c <HAL_TIM_Base_Start_IT+0xe0>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d009      	beq.n	80032ec <HAL_TIM_Base_Start_IT+0x80>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a1c      	ldr	r2, [pc, #112]	@ (8003350 <HAL_TIM_Base_Start_IT+0xe4>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d004      	beq.n	80032ec <HAL_TIM_Base_Start_IT+0x80>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a1b      	ldr	r2, [pc, #108]	@ (8003354 <HAL_TIM_Base_Start_IT+0xe8>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d115      	bne.n	8003318 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	689a      	ldr	r2, [r3, #8]
 80032f2:	4b19      	ldr	r3, [pc, #100]	@ (8003358 <HAL_TIM_Base_Start_IT+0xec>)
 80032f4:	4013      	ands	r3, r2
 80032f6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	2b06      	cmp	r3, #6
 80032fc:	d015      	beq.n	800332a <HAL_TIM_Base_Start_IT+0xbe>
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003304:	d011      	beq.n	800332a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	681a      	ldr	r2, [r3, #0]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f042 0201 	orr.w	r2, r2, #1
 8003314:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003316:	e008      	b.n	800332a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	681a      	ldr	r2, [r3, #0]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f042 0201 	orr.w	r2, r2, #1
 8003326:	601a      	str	r2, [r3, #0]
 8003328:	e000      	b.n	800332c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800332a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800332c:	2300      	movs	r3, #0
}
 800332e:	4618      	mov	r0, r3
 8003330:	3714      	adds	r7, #20
 8003332:	46bd      	mov	sp, r7
 8003334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003338:	4770      	bx	lr
 800333a:	bf00      	nop
 800333c:	40012c00 	.word	0x40012c00
 8003340:	40000400 	.word	0x40000400
 8003344:	40000800 	.word	0x40000800
 8003348:	40000c00 	.word	0x40000c00
 800334c:	40013400 	.word	0x40013400
 8003350:	40014000 	.word	0x40014000
 8003354:	40015000 	.word	0x40015000
 8003358:	00010007 	.word	0x00010007

0800335c <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b082      	sub	sp, #8
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d101      	bne.n	800336e <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800336a:	2301      	movs	r3, #1
 800336c:	e054      	b.n	8003418 <HAL_TIM_OC_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003374:	b2db      	uxtb	r3, r3
 8003376:	2b00      	cmp	r3, #0
 8003378:	d111      	bne.n	800339e <HAL_TIM_OC_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2200      	movs	r2, #0
 800337e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8003382:	6878      	ldr	r0, [r7, #4]
 8003384:	f001 fd50 	bl	8004e28 <TIM_ResetCallback>

    if (htim->OC_MspInitCallback == NULL)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800338c:	2b00      	cmp	r3, #0
 800338e:	d102      	bne.n	8003396 <HAL_TIM_OC_Init+0x3a>
    {
      htim->OC_MspInitCallback = HAL_TIM_OC_MspInit;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	4a23      	ldr	r2, [pc, #140]	@ (8003420 <HAL_TIM_OC_Init+0xc4>)
 8003394:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800339a:	6878      	ldr	r0, [r7, #4]
 800339c:	4798      	blx	r3
    HAL_TIM_OC_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2202      	movs	r2, #2
 80033a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681a      	ldr	r2, [r3, #0]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	3304      	adds	r3, #4
 80033ae:	4619      	mov	r1, r3
 80033b0:	4610      	mov	r0, r2
 80033b2:	f001 f899 	bl	80044e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2201      	movs	r2, #1
 80033ba:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2201      	movs	r2, #1
 80033c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2201      	movs	r2, #1
 80033ca:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2201      	movs	r2, #1
 80033d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2201      	movs	r2, #1
 80033da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2201      	movs	r2, #1
 80033e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2201      	movs	r2, #1
 80033ea:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2201      	movs	r2, #1
 80033f2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2201      	movs	r2, #1
 80033fa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2201      	movs	r2, #1
 8003402:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2201      	movs	r2, #1
 800340a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2201      	movs	r2, #1
 8003412:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003416:	2300      	movs	r3, #0
}
 8003418:	4618      	mov	r0, r3
 800341a:	3708      	adds	r7, #8
 800341c:	46bd      	mov	sp, r7
 800341e:	bd80      	pop	{r7, pc}
 8003420:	08003425 	.word	0x08003425

08003424 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8003424:	b480      	push	{r7}
 8003426:	b083      	sub	sp, #12
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800342c:	bf00      	nop
 800342e:	370c      	adds	r7, #12
 8003430:	46bd      	mov	sp, r7
 8003432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003436:	4770      	bx	lr

08003438 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b082      	sub	sp, #8
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d101      	bne.n	800344a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003446:	2301      	movs	r3, #1
 8003448:	e054      	b.n	80034f4 <HAL_TIM_PWM_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003450:	b2db      	uxtb	r3, r3
 8003452:	2b00      	cmp	r3, #0
 8003454:	d111      	bne.n	800347a <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2200      	movs	r2, #0
 800345a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800345e:	6878      	ldr	r0, [r7, #4]
 8003460:	f001 fce2 	bl	8004e28 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003468:	2b00      	cmp	r3, #0
 800346a:	d102      	bne.n	8003472 <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	4a23      	ldr	r2, [pc, #140]	@ (80034fc <HAL_TIM_PWM_Init+0xc4>)
 8003470:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003476:	6878      	ldr	r0, [r7, #4]
 8003478:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2202      	movs	r2, #2
 800347e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681a      	ldr	r2, [r3, #0]
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	3304      	adds	r3, #4
 800348a:	4619      	mov	r1, r3
 800348c:	4610      	mov	r0, r2
 800348e:	f001 f82b 	bl	80044e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2201      	movs	r2, #1
 8003496:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2201      	movs	r2, #1
 800349e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2201      	movs	r2, #1
 80034a6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2201      	movs	r2, #1
 80034ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2201      	movs	r2, #1
 80034b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2201      	movs	r2, #1
 80034be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2201      	movs	r2, #1
 80034c6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2201      	movs	r2, #1
 80034ce:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2201      	movs	r2, #1
 80034d6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2201      	movs	r2, #1
 80034de:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2201      	movs	r2, #1
 80034e6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2201      	movs	r2, #1
 80034ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80034f2:	2300      	movs	r3, #0
}
 80034f4:	4618      	mov	r0, r3
 80034f6:	3708      	adds	r7, #8
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bd80      	pop	{r7, pc}
 80034fc:	08003501 	.word	0x08003501

08003500 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003500:	b480      	push	{r7}
 8003502:	b083      	sub	sp, #12
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003508:	bf00      	nop
 800350a:	370c      	adds	r7, #12
 800350c:	46bd      	mov	sp, r7
 800350e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003512:	4770      	bx	lr

08003514 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b084      	sub	sp, #16
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
 800351c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d109      	bne.n	8003538 <HAL_TIM_PWM_Start+0x24>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800352a:	b2db      	uxtb	r3, r3
 800352c:	2b01      	cmp	r3, #1
 800352e:	bf14      	ite	ne
 8003530:	2301      	movne	r3, #1
 8003532:	2300      	moveq	r3, #0
 8003534:	b2db      	uxtb	r3, r3
 8003536:	e03c      	b.n	80035b2 <HAL_TIM_PWM_Start+0x9e>
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	2b04      	cmp	r3, #4
 800353c:	d109      	bne.n	8003552 <HAL_TIM_PWM_Start+0x3e>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003544:	b2db      	uxtb	r3, r3
 8003546:	2b01      	cmp	r3, #1
 8003548:	bf14      	ite	ne
 800354a:	2301      	movne	r3, #1
 800354c:	2300      	moveq	r3, #0
 800354e:	b2db      	uxtb	r3, r3
 8003550:	e02f      	b.n	80035b2 <HAL_TIM_PWM_Start+0x9e>
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	2b08      	cmp	r3, #8
 8003556:	d109      	bne.n	800356c <HAL_TIM_PWM_Start+0x58>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800355e:	b2db      	uxtb	r3, r3
 8003560:	2b01      	cmp	r3, #1
 8003562:	bf14      	ite	ne
 8003564:	2301      	movne	r3, #1
 8003566:	2300      	moveq	r3, #0
 8003568:	b2db      	uxtb	r3, r3
 800356a:	e022      	b.n	80035b2 <HAL_TIM_PWM_Start+0x9e>
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	2b0c      	cmp	r3, #12
 8003570:	d109      	bne.n	8003586 <HAL_TIM_PWM_Start+0x72>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003578:	b2db      	uxtb	r3, r3
 800357a:	2b01      	cmp	r3, #1
 800357c:	bf14      	ite	ne
 800357e:	2301      	movne	r3, #1
 8003580:	2300      	moveq	r3, #0
 8003582:	b2db      	uxtb	r3, r3
 8003584:	e015      	b.n	80035b2 <HAL_TIM_PWM_Start+0x9e>
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	2b10      	cmp	r3, #16
 800358a:	d109      	bne.n	80035a0 <HAL_TIM_PWM_Start+0x8c>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003592:	b2db      	uxtb	r3, r3
 8003594:	2b01      	cmp	r3, #1
 8003596:	bf14      	ite	ne
 8003598:	2301      	movne	r3, #1
 800359a:	2300      	moveq	r3, #0
 800359c:	b2db      	uxtb	r3, r3
 800359e:	e008      	b.n	80035b2 <HAL_TIM_PWM_Start+0x9e>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80035a6:	b2db      	uxtb	r3, r3
 80035a8:	2b01      	cmp	r3, #1
 80035aa:	bf14      	ite	ne
 80035ac:	2301      	movne	r3, #1
 80035ae:	2300      	moveq	r3, #0
 80035b0:	b2db      	uxtb	r3, r3
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d001      	beq.n	80035ba <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80035b6:	2301      	movs	r3, #1
 80035b8:	e0a6      	b.n	8003708 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d104      	bne.n	80035ca <HAL_TIM_PWM_Start+0xb6>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2202      	movs	r2, #2
 80035c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80035c8:	e023      	b.n	8003612 <HAL_TIM_PWM_Start+0xfe>
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	2b04      	cmp	r3, #4
 80035ce:	d104      	bne.n	80035da <HAL_TIM_PWM_Start+0xc6>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2202      	movs	r2, #2
 80035d4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80035d8:	e01b      	b.n	8003612 <HAL_TIM_PWM_Start+0xfe>
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	2b08      	cmp	r3, #8
 80035de:	d104      	bne.n	80035ea <HAL_TIM_PWM_Start+0xd6>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2202      	movs	r2, #2
 80035e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80035e8:	e013      	b.n	8003612 <HAL_TIM_PWM_Start+0xfe>
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	2b0c      	cmp	r3, #12
 80035ee:	d104      	bne.n	80035fa <HAL_TIM_PWM_Start+0xe6>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2202      	movs	r2, #2
 80035f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80035f8:	e00b      	b.n	8003612 <HAL_TIM_PWM_Start+0xfe>
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	2b10      	cmp	r3, #16
 80035fe:	d104      	bne.n	800360a <HAL_TIM_PWM_Start+0xf6>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2202      	movs	r2, #2
 8003604:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003608:	e003      	b.n	8003612 <HAL_TIM_PWM_Start+0xfe>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2202      	movs	r2, #2
 800360e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	2201      	movs	r2, #1
 8003618:	6839      	ldr	r1, [r7, #0]
 800361a:	4618      	mov	r0, r3
 800361c:	f001 fbde 	bl	8004ddc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a3a      	ldr	r2, [pc, #232]	@ (8003710 <HAL_TIM_PWM_Start+0x1fc>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d018      	beq.n	800365c <HAL_TIM_PWM_Start+0x148>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4a39      	ldr	r2, [pc, #228]	@ (8003714 <HAL_TIM_PWM_Start+0x200>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d013      	beq.n	800365c <HAL_TIM_PWM_Start+0x148>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a37      	ldr	r2, [pc, #220]	@ (8003718 <HAL_TIM_PWM_Start+0x204>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d00e      	beq.n	800365c <HAL_TIM_PWM_Start+0x148>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4a36      	ldr	r2, [pc, #216]	@ (800371c <HAL_TIM_PWM_Start+0x208>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d009      	beq.n	800365c <HAL_TIM_PWM_Start+0x148>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a34      	ldr	r2, [pc, #208]	@ (8003720 <HAL_TIM_PWM_Start+0x20c>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d004      	beq.n	800365c <HAL_TIM_PWM_Start+0x148>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4a33      	ldr	r2, [pc, #204]	@ (8003724 <HAL_TIM_PWM_Start+0x210>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d101      	bne.n	8003660 <HAL_TIM_PWM_Start+0x14c>
 800365c:	2301      	movs	r3, #1
 800365e:	e000      	b.n	8003662 <HAL_TIM_PWM_Start+0x14e>
 8003660:	2300      	movs	r3, #0
 8003662:	2b00      	cmp	r3, #0
 8003664:	d007      	beq.n	8003676 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003674:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a25      	ldr	r2, [pc, #148]	@ (8003710 <HAL_TIM_PWM_Start+0x1fc>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d022      	beq.n	80036c6 <HAL_TIM_PWM_Start+0x1b2>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003688:	d01d      	beq.n	80036c6 <HAL_TIM_PWM_Start+0x1b2>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a26      	ldr	r2, [pc, #152]	@ (8003728 <HAL_TIM_PWM_Start+0x214>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d018      	beq.n	80036c6 <HAL_TIM_PWM_Start+0x1b2>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a24      	ldr	r2, [pc, #144]	@ (800372c <HAL_TIM_PWM_Start+0x218>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d013      	beq.n	80036c6 <HAL_TIM_PWM_Start+0x1b2>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a23      	ldr	r2, [pc, #140]	@ (8003730 <HAL_TIM_PWM_Start+0x21c>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d00e      	beq.n	80036c6 <HAL_TIM_PWM_Start+0x1b2>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a19      	ldr	r2, [pc, #100]	@ (8003714 <HAL_TIM_PWM_Start+0x200>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d009      	beq.n	80036c6 <HAL_TIM_PWM_Start+0x1b2>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4a18      	ldr	r2, [pc, #96]	@ (8003718 <HAL_TIM_PWM_Start+0x204>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d004      	beq.n	80036c6 <HAL_TIM_PWM_Start+0x1b2>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a18      	ldr	r2, [pc, #96]	@ (8003724 <HAL_TIM_PWM_Start+0x210>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d115      	bne.n	80036f2 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	689a      	ldr	r2, [r3, #8]
 80036cc:	4b19      	ldr	r3, [pc, #100]	@ (8003734 <HAL_TIM_PWM_Start+0x220>)
 80036ce:	4013      	ands	r3, r2
 80036d0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	2b06      	cmp	r3, #6
 80036d6:	d015      	beq.n	8003704 <HAL_TIM_PWM_Start+0x1f0>
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80036de:	d011      	beq.n	8003704 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	681a      	ldr	r2, [r3, #0]
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f042 0201 	orr.w	r2, r2, #1
 80036ee:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036f0:	e008      	b.n	8003704 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	681a      	ldr	r2, [r3, #0]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f042 0201 	orr.w	r2, r2, #1
 8003700:	601a      	str	r2, [r3, #0]
 8003702:	e000      	b.n	8003706 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003704:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003706:	2300      	movs	r3, #0
}
 8003708:	4618      	mov	r0, r3
 800370a:	3710      	adds	r7, #16
 800370c:	46bd      	mov	sp, r7
 800370e:	bd80      	pop	{r7, pc}
 8003710:	40012c00 	.word	0x40012c00
 8003714:	40013400 	.word	0x40013400
 8003718:	40014000 	.word	0x40014000
 800371c:	40014400 	.word	0x40014400
 8003720:	40014800 	.word	0x40014800
 8003724:	40015000 	.word	0x40015000
 8003728:	40000400 	.word	0x40000400
 800372c:	40000800 	.word	0x40000800
 8003730:	40000c00 	.word	0x40000c00
 8003734:	00010007 	.word	0x00010007

08003738 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b082      	sub	sp, #8
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
 8003740:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d101      	bne.n	800374c <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8003748:	2301      	movs	r3, #1
 800374a:	e04c      	b.n	80037e6 <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003752:	b2db      	uxtb	r3, r3
 8003754:	2b00      	cmp	r3, #0
 8003756:	d111      	bne.n	800377c <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2200      	movs	r2, #0
 800375c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8003760:	6878      	ldr	r0, [r7, #4]
 8003762:	f001 fb61 	bl	8004e28 <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800376a:	2b00      	cmp	r3, #0
 800376c:	d102      	bne.n	8003774 <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	4a1f      	ldr	r2, [pc, #124]	@ (80037f0 <HAL_TIM_OnePulse_Init+0xb8>)
 8003772:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003778:	6878      	ldr	r0, [r7, #4]
 800377a:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2202      	movs	r2, #2
 8003780:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681a      	ldr	r2, [r3, #0]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	3304      	adds	r3, #4
 800378c:	4619      	mov	r1, r3
 800378e:	4610      	mov	r0, r2
 8003790:	f000 feaa 	bl	80044e8 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	681a      	ldr	r2, [r3, #0]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f022 0208 	bic.w	r2, r2, #8
 80037a2:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	6819      	ldr	r1, [r3, #0]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	683a      	ldr	r2, [r7, #0]
 80037b0:	430a      	orrs	r2, r1
 80037b2:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2201      	movs	r2, #1
 80037b8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2201      	movs	r2, #1
 80037c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2201      	movs	r2, #1
 80037c8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2201      	movs	r2, #1
 80037d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2201      	movs	r2, #1
 80037d8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2201      	movs	r2, #1
 80037e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80037e4:	2300      	movs	r3, #0
}
 80037e6:	4618      	mov	r0, r3
 80037e8:	3708      	adds	r7, #8
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bd80      	pop	{r7, pc}
 80037ee:	bf00      	nop
 80037f0:	080037f5 	.word	0x080037f5

080037f4 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 80037f4:	b480      	push	{r7}
 80037f6:	b083      	sub	sp, #12
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 80037fc:	bf00      	nop
 80037fe:	370c      	adds	r7, #12
 8003800:	46bd      	mov	sp, r7
 8003802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003806:	4770      	bx	lr

08003808 <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b084      	sub	sp, #16
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
 8003810:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003818:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003820:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003828:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003830:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003832:	7bfb      	ldrb	r3, [r7, #15]
 8003834:	2b01      	cmp	r3, #1
 8003836:	d108      	bne.n	800384a <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003838:	7bbb      	ldrb	r3, [r7, #14]
 800383a:	2b01      	cmp	r3, #1
 800383c:	d105      	bne.n	800384a <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800383e:	7b7b      	ldrb	r3, [r7, #13]
 8003840:	2b01      	cmp	r3, #1
 8003842:	d102      	bne.n	800384a <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003844:	7b3b      	ldrb	r3, [r7, #12]
 8003846:	2b01      	cmp	r3, #1
 8003848:	d001      	beq.n	800384e <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 800384a:	2301      	movs	r3, #1
 800384c:	e059      	b.n	8003902 <HAL_TIM_OnePulse_Start_IT+0xfa>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2202      	movs	r2, #2
 8003852:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2202      	movs	r2, #2
 800385a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2202      	movs	r2, #2
 8003862:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2202      	movs	r2, #2
 800386a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	68da      	ldr	r2, [r3, #12]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f042 0202 	orr.w	r2, r2, #2
 800387c:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	68da      	ldr	r2, [r3, #12]
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f042 0204 	orr.w	r2, r2, #4
 800388c:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	2201      	movs	r2, #1
 8003894:	2100      	movs	r1, #0
 8003896:	4618      	mov	r0, r3
 8003898:	f001 faa0 	bl	8004ddc <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	2201      	movs	r2, #1
 80038a2:	2104      	movs	r1, #4
 80038a4:	4618      	mov	r0, r3
 80038a6:	f001 fa99 	bl	8004ddc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4a17      	ldr	r2, [pc, #92]	@ (800390c <HAL_TIM_OnePulse_Start_IT+0x104>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d018      	beq.n	80038e6 <HAL_TIM_OnePulse_Start_IT+0xde>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4a15      	ldr	r2, [pc, #84]	@ (8003910 <HAL_TIM_OnePulse_Start_IT+0x108>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d013      	beq.n	80038e6 <HAL_TIM_OnePulse_Start_IT+0xde>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4a14      	ldr	r2, [pc, #80]	@ (8003914 <HAL_TIM_OnePulse_Start_IT+0x10c>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d00e      	beq.n	80038e6 <HAL_TIM_OnePulse_Start_IT+0xde>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4a12      	ldr	r2, [pc, #72]	@ (8003918 <HAL_TIM_OnePulse_Start_IT+0x110>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d009      	beq.n	80038e6 <HAL_TIM_OnePulse_Start_IT+0xde>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4a11      	ldr	r2, [pc, #68]	@ (800391c <HAL_TIM_OnePulse_Start_IT+0x114>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d004      	beq.n	80038e6 <HAL_TIM_OnePulse_Start_IT+0xde>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a0f      	ldr	r2, [pc, #60]	@ (8003920 <HAL_TIM_OnePulse_Start_IT+0x118>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d101      	bne.n	80038ea <HAL_TIM_OnePulse_Start_IT+0xe2>
 80038e6:	2301      	movs	r3, #1
 80038e8:	e000      	b.n	80038ec <HAL_TIM_OnePulse_Start_IT+0xe4>
 80038ea:	2300      	movs	r3, #0
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d007      	beq.n	8003900 <HAL_TIM_OnePulse_Start_IT+0xf8>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80038fe:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8003900:	2300      	movs	r3, #0
}
 8003902:	4618      	mov	r0, r3
 8003904:	3710      	adds	r7, #16
 8003906:	46bd      	mov	sp, r7
 8003908:	bd80      	pop	{r7, pc}
 800390a:	bf00      	nop
 800390c:	40012c00 	.word	0x40012c00
 8003910:	40013400 	.word	0x40013400
 8003914:	40014000 	.word	0x40014000
 8003918:	40014400 	.word	0x40014400
 800391c:	40014800 	.word	0x40014800
 8003920:	40015000 	.word	0x40015000

08003924 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b084      	sub	sp, #16
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	68db      	ldr	r3, [r3, #12]
 8003932:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	691b      	ldr	r3, [r3, #16]
 800393a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800393c:	68bb      	ldr	r3, [r7, #8]
 800393e:	f003 0302 	and.w	r3, r3, #2
 8003942:	2b00      	cmp	r3, #0
 8003944:	d026      	beq.n	8003994 <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	f003 0302 	and.w	r3, r3, #2
 800394c:	2b00      	cmp	r3, #0
 800394e:	d021      	beq.n	8003994 <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f06f 0202 	mvn.w	r2, #2
 8003958:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2201      	movs	r2, #1
 800395e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	699b      	ldr	r3, [r3, #24]
 8003966:	f003 0303 	and.w	r3, r3, #3
 800396a:	2b00      	cmp	r3, #0
 800396c:	d005      	beq.n	800397a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003974:	6878      	ldr	r0, [r7, #4]
 8003976:	4798      	blx	r3
 8003978:	e009      	b.n	800398e <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003980:	6878      	ldr	r0, [r7, #4]
 8003982:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800398a:	6878      	ldr	r0, [r7, #4]
 800398c:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2200      	movs	r2, #0
 8003992:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	f003 0304 	and.w	r3, r3, #4
 800399a:	2b00      	cmp	r3, #0
 800399c:	d026      	beq.n	80039ec <HAL_TIM_IRQHandler+0xc8>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	f003 0304 	and.w	r3, r3, #4
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d021      	beq.n	80039ec <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f06f 0204 	mvn.w	r2, #4
 80039b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2202      	movs	r2, #2
 80039b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	699b      	ldr	r3, [r3, #24]
 80039be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d005      	beq.n	80039d2 <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80039cc:	6878      	ldr	r0, [r7, #4]
 80039ce:	4798      	blx	r3
 80039d0:	e009      	b.n	80039e6 <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80039d8:	6878      	ldr	r0, [r7, #4]
 80039da:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80039e2:	6878      	ldr	r0, [r7, #4]
 80039e4:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2200      	movs	r2, #0
 80039ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	f003 0308 	and.w	r3, r3, #8
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d026      	beq.n	8003a44 <HAL_TIM_IRQHandler+0x120>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	f003 0308 	and.w	r3, r3, #8
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d021      	beq.n	8003a44 <HAL_TIM_IRQHandler+0x120>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f06f 0208 	mvn.w	r2, #8
 8003a08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2204      	movs	r2, #4
 8003a0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	69db      	ldr	r3, [r3, #28]
 8003a16:	f003 0303 	and.w	r3, r3, #3
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d005      	beq.n	8003a2a <HAL_TIM_IRQHandler+0x106>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003a24:	6878      	ldr	r0, [r7, #4]
 8003a26:	4798      	blx	r3
 8003a28:	e009      	b.n	8003a3e <HAL_TIM_IRQHandler+0x11a>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003a30:	6878      	ldr	r0, [r7, #4]
 8003a32:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003a3a:	6878      	ldr	r0, [r7, #4]
 8003a3c:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2200      	movs	r2, #0
 8003a42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003a44:	68bb      	ldr	r3, [r7, #8]
 8003a46:	f003 0310 	and.w	r3, r3, #16
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d026      	beq.n	8003a9c <HAL_TIM_IRQHandler+0x178>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	f003 0310 	and.w	r3, r3, #16
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d021      	beq.n	8003a9c <HAL_TIM_IRQHandler+0x178>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f06f 0210 	mvn.w	r2, #16
 8003a60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2208      	movs	r2, #8
 8003a66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	69db      	ldr	r3, [r3, #28]
 8003a6e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d005      	beq.n	8003a82 <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003a7c:	6878      	ldr	r0, [r7, #4]
 8003a7e:	4798      	blx	r3
 8003a80:	e009      	b.n	8003a96 <HAL_TIM_IRQHandler+0x172>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003a88:	6878      	ldr	r0, [r7, #4]
 8003a8a:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003a92:	6878      	ldr	r0, [r7, #4]
 8003a94:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2200      	movs	r2, #0
 8003a9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003a9c:	68bb      	ldr	r3, [r7, #8]
 8003a9e:	f003 0301 	and.w	r3, r3, #1
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d00e      	beq.n	8003ac4 <HAL_TIM_IRQHandler+0x1a0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	f003 0301 	and.w	r3, r3, #1
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d009      	beq.n	8003ac4 <HAL_TIM_IRQHandler+0x1a0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f06f 0201 	mvn.w	r2, #1
 8003ab8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003ac0:	6878      	ldr	r0, [r7, #4]
 8003ac2:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003ac4:	68bb      	ldr	r3, [r7, #8]
 8003ac6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d104      	bne.n	8003ad8 <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8003ace:	68bb      	ldr	r3, [r7, #8]
 8003ad0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d00e      	beq.n	8003af6 <HAL_TIM_IRQHandler+0x1d2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d009      	beq.n	8003af6 <HAL_TIM_IRQHandler+0x1d2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8003aea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003af2:	6878      	ldr	r0, [r7, #4]
 8003af4:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003af6:	68bb      	ldr	r3, [r7, #8]
 8003af8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d00e      	beq.n	8003b1e <HAL_TIM_IRQHandler+0x1fa>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d009      	beq.n	8003b1e <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003b12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8003b1a:	6878      	ldr	r0, [r7, #4]
 8003b1c:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003b1e:	68bb      	ldr	r3, [r7, #8]
 8003b20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d00e      	beq.n	8003b46 <HAL_TIM_IRQHandler+0x222>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d009      	beq.n	8003b46 <HAL_TIM_IRQHandler+0x222>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003b3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003b42:	6878      	ldr	r0, [r7, #4]
 8003b44:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003b46:	68bb      	ldr	r3, [r7, #8]
 8003b48:	f003 0320 	and.w	r3, r3, #32
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d00e      	beq.n	8003b6e <HAL_TIM_IRQHandler+0x24a>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	f003 0320 	and.w	r3, r3, #32
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d009      	beq.n	8003b6e <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f06f 0220 	mvn.w	r2, #32
 8003b62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003b6a:	6878      	ldr	r0, [r7, #4]
 8003b6c:	4798      	blx	r3
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8003b6e:	68bb      	ldr	r3, [r7, #8]
 8003b70:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d00e      	beq.n	8003b96 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d009      	beq.n	8003b96 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8003b8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8003b92:	6878      	ldr	r0, [r7, #4]
 8003b94:	4798      	blx	r3
      HAL_TIMEx_EncoderIndexCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d00e      	beq.n	8003bbe <HAL_TIM_IRQHandler+0x29a>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d009      	beq.n	8003bbe <HAL_TIM_IRQHandler+0x29a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8003bb2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003bba:	6878      	ldr	r0, [r7, #4]
 8003bbc:	4798      	blx	r3
      HAL_TIMEx_DirectionChangeCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8003bbe:	68bb      	ldr	r3, [r7, #8]
 8003bc0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d00e      	beq.n	8003be6 <HAL_TIM_IRQHandler+0x2c2>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d009      	beq.n	8003be6 <HAL_TIM_IRQHandler+0x2c2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8003bda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8003be2:	6878      	ldr	r0, [r7, #4]
 8003be4:	4798      	blx	r3
      HAL_TIMEx_IndexErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8003be6:	68bb      	ldr	r3, [r7, #8]
 8003be8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d00e      	beq.n	8003c0e <HAL_TIM_IRQHandler+0x2ea>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d009      	beq.n	8003c0e <HAL_TIM_IRQHandler+0x2ea>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8003c02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8003c0a:	6878      	ldr	r0, [r7, #4]
 8003c0c:	4798      	blx	r3
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003c0e:	bf00      	nop
 8003c10:	3710      	adds	r7, #16
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd80      	pop	{r7, pc}
	...

08003c18 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b086      	sub	sp, #24
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	60f8      	str	r0, [r7, #12]
 8003c20:	60b9      	str	r1, [r7, #8]
 8003c22:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c24:	2300      	movs	r3, #0
 8003c26:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_CHANNEL_MODE(sConfig->OCMode, Channel));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003c2e:	2b01      	cmp	r3, #1
 8003c30:	d101      	bne.n	8003c36 <HAL_TIM_OC_ConfigChannel+0x1e>
 8003c32:	2302      	movs	r3, #2
 8003c34:	e066      	b.n	8003d04 <HAL_TIM_OC_ConfigChannel+0xec>
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	2201      	movs	r2, #1
 8003c3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2b14      	cmp	r3, #20
 8003c42:	d857      	bhi.n	8003cf4 <HAL_TIM_OC_ConfigChannel+0xdc>
 8003c44:	a201      	add	r2, pc, #4	@ (adr r2, 8003c4c <HAL_TIM_OC_ConfigChannel+0x34>)
 8003c46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c4a:	bf00      	nop
 8003c4c:	08003ca1 	.word	0x08003ca1
 8003c50:	08003cf5 	.word	0x08003cf5
 8003c54:	08003cf5 	.word	0x08003cf5
 8003c58:	08003cf5 	.word	0x08003cf5
 8003c5c:	08003caf 	.word	0x08003caf
 8003c60:	08003cf5 	.word	0x08003cf5
 8003c64:	08003cf5 	.word	0x08003cf5
 8003c68:	08003cf5 	.word	0x08003cf5
 8003c6c:	08003cbd 	.word	0x08003cbd
 8003c70:	08003cf5 	.word	0x08003cf5
 8003c74:	08003cf5 	.word	0x08003cf5
 8003c78:	08003cf5 	.word	0x08003cf5
 8003c7c:	08003ccb 	.word	0x08003ccb
 8003c80:	08003cf5 	.word	0x08003cf5
 8003c84:	08003cf5 	.word	0x08003cf5
 8003c88:	08003cf5 	.word	0x08003cf5
 8003c8c:	08003cd9 	.word	0x08003cd9
 8003c90:	08003cf5 	.word	0x08003cf5
 8003c94:	08003cf5 	.word	0x08003cf5
 8003c98:	08003cf5 	.word	0x08003cf5
 8003c9c:	08003ce7 	.word	0x08003ce7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	68b9      	ldr	r1, [r7, #8]
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	f000 fcd2 	bl	8004650 <TIM_OC1_SetConfig>
      break;
 8003cac:	e025      	b.n	8003cfa <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	68b9      	ldr	r1, [r7, #8]
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	f000 fd65 	bl	8004784 <TIM_OC2_SetConfig>
      break;
 8003cba:	e01e      	b.n	8003cfa <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	68b9      	ldr	r1, [r7, #8]
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	f000 fdf2 	bl	80048ac <TIM_OC3_SetConfig>
      break;
 8003cc8:	e017      	b.n	8003cfa <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	68b9      	ldr	r1, [r7, #8]
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	f000 fe7d 	bl	80049d0 <TIM_OC4_SetConfig>
      break;
 8003cd6:	e010      	b.n	8003cfa <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	68b9      	ldr	r1, [r7, #8]
 8003cde:	4618      	mov	r0, r3
 8003ce0:	f000 ff0a 	bl	8004af8 <TIM_OC5_SetConfig>
      break;
 8003ce4:	e009      	b.n	8003cfa <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	68b9      	ldr	r1, [r7, #8]
 8003cec:	4618      	mov	r0, r3
 8003cee:	f000 ff6d 	bl	8004bcc <TIM_OC6_SetConfig>
      break;
 8003cf2:	e002      	b.n	8003cfa <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	75fb      	strb	r3, [r7, #23]
      break;
 8003cf8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003d02:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d04:	4618      	mov	r0, r3
 8003d06:	3718      	adds	r7, #24
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	bd80      	pop	{r7, pc}

08003d0c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b086      	sub	sp, #24
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	60f8      	str	r0, [r7, #12]
 8003d14:	60b9      	str	r1, [r7, #8]
 8003d16:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d18:	2300      	movs	r3, #0
 8003d1a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003d22:	2b01      	cmp	r3, #1
 8003d24:	d101      	bne.n	8003d2a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003d26:	2302      	movs	r3, #2
 8003d28:	e0ff      	b.n	8003f2a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	2201      	movs	r2, #1
 8003d2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2b14      	cmp	r3, #20
 8003d36:	f200 80f0 	bhi.w	8003f1a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003d3a:	a201      	add	r2, pc, #4	@ (adr r2, 8003d40 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003d3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d40:	08003d95 	.word	0x08003d95
 8003d44:	08003f1b 	.word	0x08003f1b
 8003d48:	08003f1b 	.word	0x08003f1b
 8003d4c:	08003f1b 	.word	0x08003f1b
 8003d50:	08003dd5 	.word	0x08003dd5
 8003d54:	08003f1b 	.word	0x08003f1b
 8003d58:	08003f1b 	.word	0x08003f1b
 8003d5c:	08003f1b 	.word	0x08003f1b
 8003d60:	08003e17 	.word	0x08003e17
 8003d64:	08003f1b 	.word	0x08003f1b
 8003d68:	08003f1b 	.word	0x08003f1b
 8003d6c:	08003f1b 	.word	0x08003f1b
 8003d70:	08003e57 	.word	0x08003e57
 8003d74:	08003f1b 	.word	0x08003f1b
 8003d78:	08003f1b 	.word	0x08003f1b
 8003d7c:	08003f1b 	.word	0x08003f1b
 8003d80:	08003e99 	.word	0x08003e99
 8003d84:	08003f1b 	.word	0x08003f1b
 8003d88:	08003f1b 	.word	0x08003f1b
 8003d8c:	08003f1b 	.word	0x08003f1b
 8003d90:	08003ed9 	.word	0x08003ed9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	68b9      	ldr	r1, [r7, #8]
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	f000 fc58 	bl	8004650 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	699a      	ldr	r2, [r3, #24]
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f042 0208 	orr.w	r2, r2, #8
 8003dae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	699a      	ldr	r2, [r3, #24]
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f022 0204 	bic.w	r2, r2, #4
 8003dbe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	6999      	ldr	r1, [r3, #24]
 8003dc6:	68bb      	ldr	r3, [r7, #8]
 8003dc8:	691a      	ldr	r2, [r3, #16]
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	430a      	orrs	r2, r1
 8003dd0:	619a      	str	r2, [r3, #24]
      break;
 8003dd2:	e0a5      	b.n	8003f20 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	68b9      	ldr	r1, [r7, #8]
 8003dda:	4618      	mov	r0, r3
 8003ddc:	f000 fcd2 	bl	8004784 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	699a      	ldr	r2, [r3, #24]
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003dee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	699a      	ldr	r2, [r3, #24]
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003dfe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	6999      	ldr	r1, [r3, #24]
 8003e06:	68bb      	ldr	r3, [r7, #8]
 8003e08:	691b      	ldr	r3, [r3, #16]
 8003e0a:	021a      	lsls	r2, r3, #8
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	430a      	orrs	r2, r1
 8003e12:	619a      	str	r2, [r3, #24]
      break;
 8003e14:	e084      	b.n	8003f20 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	68b9      	ldr	r1, [r7, #8]
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	f000 fd45 	bl	80048ac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	69da      	ldr	r2, [r3, #28]
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f042 0208 	orr.w	r2, r2, #8
 8003e30:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	69da      	ldr	r2, [r3, #28]
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f022 0204 	bic.w	r2, r2, #4
 8003e40:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	69d9      	ldr	r1, [r3, #28]
 8003e48:	68bb      	ldr	r3, [r7, #8]
 8003e4a:	691a      	ldr	r2, [r3, #16]
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	430a      	orrs	r2, r1
 8003e52:	61da      	str	r2, [r3, #28]
      break;
 8003e54:	e064      	b.n	8003f20 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	68b9      	ldr	r1, [r7, #8]
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	f000 fdb7 	bl	80049d0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	69da      	ldr	r2, [r3, #28]
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003e70:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	69da      	ldr	r2, [r3, #28]
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e80:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	69d9      	ldr	r1, [r3, #28]
 8003e88:	68bb      	ldr	r3, [r7, #8]
 8003e8a:	691b      	ldr	r3, [r3, #16]
 8003e8c:	021a      	lsls	r2, r3, #8
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	430a      	orrs	r2, r1
 8003e94:	61da      	str	r2, [r3, #28]
      break;
 8003e96:	e043      	b.n	8003f20 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	68b9      	ldr	r1, [r7, #8]
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	f000 fe2a 	bl	8004af8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f042 0208 	orr.w	r2, r2, #8
 8003eb2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f022 0204 	bic.w	r2, r2, #4
 8003ec2:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8003eca:	68bb      	ldr	r3, [r7, #8]
 8003ecc:	691a      	ldr	r2, [r3, #16]
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	430a      	orrs	r2, r1
 8003ed4:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8003ed6:	e023      	b.n	8003f20 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	68b9      	ldr	r1, [r7, #8]
 8003ede:	4618      	mov	r0, r3
 8003ee0:	f000 fe74 	bl	8004bcc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003ef2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003f02:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8003f0a:	68bb      	ldr	r3, [r7, #8]
 8003f0c:	691b      	ldr	r3, [r3, #16]
 8003f0e:	021a      	lsls	r2, r3, #8
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	430a      	orrs	r2, r1
 8003f16:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8003f18:	e002      	b.n	8003f20 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	75fb      	strb	r3, [r7, #23]
      break;
 8003f1e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	2200      	movs	r2, #0
 8003f24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003f28:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	3718      	adds	r7, #24
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bd80      	pop	{r7, pc}
 8003f32:	bf00      	nop

08003f34 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b084      	sub	sp, #16
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
 8003f3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f3e:	2300      	movs	r3, #0
 8003f40:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003f48:	2b01      	cmp	r3, #1
 8003f4a:	d101      	bne.n	8003f50 <HAL_TIM_ConfigClockSource+0x1c>
 8003f4c:	2302      	movs	r3, #2
 8003f4e:	e0f6      	b.n	800413e <HAL_TIM_ConfigClockSource+0x20a>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2201      	movs	r2, #1
 8003f54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2202      	movs	r2, #2
 8003f5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	689b      	ldr	r3, [r3, #8]
 8003f66:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8003f6e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003f72:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f74:	68bb      	ldr	r3, [r7, #8]
 8003f76:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003f7a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	68ba      	ldr	r2, [r7, #8]
 8003f82:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a6f      	ldr	r2, [pc, #444]	@ (8004148 <HAL_TIM_ConfigClockSource+0x214>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	f000 80c1 	beq.w	8004112 <HAL_TIM_ConfigClockSource+0x1de>
 8003f90:	4a6d      	ldr	r2, [pc, #436]	@ (8004148 <HAL_TIM_ConfigClockSource+0x214>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	f200 80c6 	bhi.w	8004124 <HAL_TIM_ConfigClockSource+0x1f0>
 8003f98:	4a6c      	ldr	r2, [pc, #432]	@ (800414c <HAL_TIM_ConfigClockSource+0x218>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	f000 80b9 	beq.w	8004112 <HAL_TIM_ConfigClockSource+0x1de>
 8003fa0:	4a6a      	ldr	r2, [pc, #424]	@ (800414c <HAL_TIM_ConfigClockSource+0x218>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	f200 80be 	bhi.w	8004124 <HAL_TIM_ConfigClockSource+0x1f0>
 8003fa8:	4a69      	ldr	r2, [pc, #420]	@ (8004150 <HAL_TIM_ConfigClockSource+0x21c>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	f000 80b1 	beq.w	8004112 <HAL_TIM_ConfigClockSource+0x1de>
 8003fb0:	4a67      	ldr	r2, [pc, #412]	@ (8004150 <HAL_TIM_ConfigClockSource+0x21c>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	f200 80b6 	bhi.w	8004124 <HAL_TIM_ConfigClockSource+0x1f0>
 8003fb8:	4a66      	ldr	r2, [pc, #408]	@ (8004154 <HAL_TIM_ConfigClockSource+0x220>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	f000 80a9 	beq.w	8004112 <HAL_TIM_ConfigClockSource+0x1de>
 8003fc0:	4a64      	ldr	r2, [pc, #400]	@ (8004154 <HAL_TIM_ConfigClockSource+0x220>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	f200 80ae 	bhi.w	8004124 <HAL_TIM_ConfigClockSource+0x1f0>
 8003fc8:	4a63      	ldr	r2, [pc, #396]	@ (8004158 <HAL_TIM_ConfigClockSource+0x224>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	f000 80a1 	beq.w	8004112 <HAL_TIM_ConfigClockSource+0x1de>
 8003fd0:	4a61      	ldr	r2, [pc, #388]	@ (8004158 <HAL_TIM_ConfigClockSource+0x224>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	f200 80a6 	bhi.w	8004124 <HAL_TIM_ConfigClockSource+0x1f0>
 8003fd8:	4a60      	ldr	r2, [pc, #384]	@ (800415c <HAL_TIM_ConfigClockSource+0x228>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	f000 8099 	beq.w	8004112 <HAL_TIM_ConfigClockSource+0x1de>
 8003fe0:	4a5e      	ldr	r2, [pc, #376]	@ (800415c <HAL_TIM_ConfigClockSource+0x228>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	f200 809e 	bhi.w	8004124 <HAL_TIM_ConfigClockSource+0x1f0>
 8003fe8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8003fec:	f000 8091 	beq.w	8004112 <HAL_TIM_ConfigClockSource+0x1de>
 8003ff0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8003ff4:	f200 8096 	bhi.w	8004124 <HAL_TIM_ConfigClockSource+0x1f0>
 8003ff8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003ffc:	f000 8089 	beq.w	8004112 <HAL_TIM_ConfigClockSource+0x1de>
 8004000:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004004:	f200 808e 	bhi.w	8004124 <HAL_TIM_ConfigClockSource+0x1f0>
 8004008:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800400c:	d03e      	beq.n	800408c <HAL_TIM_ConfigClockSource+0x158>
 800400e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004012:	f200 8087 	bhi.w	8004124 <HAL_TIM_ConfigClockSource+0x1f0>
 8004016:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800401a:	f000 8086 	beq.w	800412a <HAL_TIM_ConfigClockSource+0x1f6>
 800401e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004022:	d87f      	bhi.n	8004124 <HAL_TIM_ConfigClockSource+0x1f0>
 8004024:	2b70      	cmp	r3, #112	@ 0x70
 8004026:	d01a      	beq.n	800405e <HAL_TIM_ConfigClockSource+0x12a>
 8004028:	2b70      	cmp	r3, #112	@ 0x70
 800402a:	d87b      	bhi.n	8004124 <HAL_TIM_ConfigClockSource+0x1f0>
 800402c:	2b60      	cmp	r3, #96	@ 0x60
 800402e:	d050      	beq.n	80040d2 <HAL_TIM_ConfigClockSource+0x19e>
 8004030:	2b60      	cmp	r3, #96	@ 0x60
 8004032:	d877      	bhi.n	8004124 <HAL_TIM_ConfigClockSource+0x1f0>
 8004034:	2b50      	cmp	r3, #80	@ 0x50
 8004036:	d03c      	beq.n	80040b2 <HAL_TIM_ConfigClockSource+0x17e>
 8004038:	2b50      	cmp	r3, #80	@ 0x50
 800403a:	d873      	bhi.n	8004124 <HAL_TIM_ConfigClockSource+0x1f0>
 800403c:	2b40      	cmp	r3, #64	@ 0x40
 800403e:	d058      	beq.n	80040f2 <HAL_TIM_ConfigClockSource+0x1be>
 8004040:	2b40      	cmp	r3, #64	@ 0x40
 8004042:	d86f      	bhi.n	8004124 <HAL_TIM_ConfigClockSource+0x1f0>
 8004044:	2b30      	cmp	r3, #48	@ 0x30
 8004046:	d064      	beq.n	8004112 <HAL_TIM_ConfigClockSource+0x1de>
 8004048:	2b30      	cmp	r3, #48	@ 0x30
 800404a:	d86b      	bhi.n	8004124 <HAL_TIM_ConfigClockSource+0x1f0>
 800404c:	2b20      	cmp	r3, #32
 800404e:	d060      	beq.n	8004112 <HAL_TIM_ConfigClockSource+0x1de>
 8004050:	2b20      	cmp	r3, #32
 8004052:	d867      	bhi.n	8004124 <HAL_TIM_ConfigClockSource+0x1f0>
 8004054:	2b00      	cmp	r3, #0
 8004056:	d05c      	beq.n	8004112 <HAL_TIM_ConfigClockSource+0x1de>
 8004058:	2b10      	cmp	r3, #16
 800405a:	d05a      	beq.n	8004112 <HAL_TIM_ConfigClockSource+0x1de>
 800405c:	e062      	b.n	8004124 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800406e:	f000 fe95 	bl	8004d9c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	689b      	ldr	r3, [r3, #8]
 8004078:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800407a:	68bb      	ldr	r3, [r7, #8]
 800407c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004080:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	68ba      	ldr	r2, [r7, #8]
 8004088:	609a      	str	r2, [r3, #8]
      break;
 800408a:	e04f      	b.n	800412c <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800409c:	f000 fe7e 	bl	8004d9c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	689a      	ldr	r2, [r3, #8]
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80040ae:	609a      	str	r2, [r3, #8]
      break;
 80040b0:	e03c      	b.n	800412c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80040be:	461a      	mov	r2, r3
 80040c0:	f000 fdf0 	bl	8004ca4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	2150      	movs	r1, #80	@ 0x50
 80040ca:	4618      	mov	r0, r3
 80040cc:	f000 fe49 	bl	8004d62 <TIM_ITRx_SetConfig>
      break;
 80040d0:	e02c      	b.n	800412c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80040de:	461a      	mov	r2, r3
 80040e0:	f000 fe0f 	bl	8004d02 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	2160      	movs	r1, #96	@ 0x60
 80040ea:	4618      	mov	r0, r3
 80040ec:	f000 fe39 	bl	8004d62 <TIM_ITRx_SetConfig>
      break;
 80040f0:	e01c      	b.n	800412c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80040fe:	461a      	mov	r2, r3
 8004100:	f000 fdd0 	bl	8004ca4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	2140      	movs	r1, #64	@ 0x40
 800410a:	4618      	mov	r0, r3
 800410c:	f000 fe29 	bl	8004d62 <TIM_ITRx_SetConfig>
      break;
 8004110:	e00c      	b.n	800412c <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681a      	ldr	r2, [r3, #0]
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4619      	mov	r1, r3
 800411c:	4610      	mov	r0, r2
 800411e:	f000 fe20 	bl	8004d62 <TIM_ITRx_SetConfig>
      break;
 8004122:	e003      	b.n	800412c <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8004124:	2301      	movs	r3, #1
 8004126:	73fb      	strb	r3, [r7, #15]
      break;
 8004128:	e000      	b.n	800412c <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800412a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2201      	movs	r2, #1
 8004130:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2200      	movs	r2, #0
 8004138:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800413c:	7bfb      	ldrb	r3, [r7, #15]
}
 800413e:	4618      	mov	r0, r3
 8004140:	3710      	adds	r7, #16
 8004142:	46bd      	mov	sp, r7
 8004144:	bd80      	pop	{r7, pc}
 8004146:	bf00      	nop
 8004148:	00100070 	.word	0x00100070
 800414c:	00100060 	.word	0x00100060
 8004150:	00100050 	.word	0x00100050
 8004154:	00100040 	.word	0x00100040
 8004158:	00100030 	.word	0x00100030
 800415c:	00100020 	.word	0x00100020

08004160 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004160:	b480      	push	{r7}
 8004162:	b083      	sub	sp, #12
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004168:	bf00      	nop
 800416a:	370c      	adds	r7, #12
 800416c:	46bd      	mov	sp, r7
 800416e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004172:	4770      	bx	lr

08004174 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8004174:	b480      	push	{r7}
 8004176:	b083      	sub	sp, #12
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 800417c:	bf00      	nop
 800417e:	370c      	adds	r7, #12
 8004180:	46bd      	mov	sp, r7
 8004182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004186:	4770      	bx	lr

08004188 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004188:	b480      	push	{r7}
 800418a:	b083      	sub	sp, #12
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004190:	bf00      	nop
 8004192:	370c      	adds	r7, #12
 8004194:	46bd      	mov	sp, r7
 8004196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419a:	4770      	bx	lr

0800419c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800419c:	b480      	push	{r7}
 800419e:	b083      	sub	sp, #12
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80041a4:	bf00      	nop
 80041a6:	370c      	adds	r7, #12
 80041a8:	46bd      	mov	sp, r7
 80041aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ae:	4770      	bx	lr

080041b0 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80041b0:	b480      	push	{r7}
 80041b2:	b083      	sub	sp, #12
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 80041b8:	bf00      	nop
 80041ba:	370c      	adds	r7, #12
 80041bc:	46bd      	mov	sp, r7
 80041be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c2:	4770      	bx	lr

080041c4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80041c4:	b480      	push	{r7}
 80041c6:	b083      	sub	sp, #12
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80041cc:	bf00      	nop
 80041ce:	370c      	adds	r7, #12
 80041d0:	46bd      	mov	sp, r7
 80041d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d6:	4770      	bx	lr

080041d8 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80041d8:	b480      	push	{r7}
 80041da:	b083      	sub	sp, #12
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80041e0:	bf00      	nop
 80041e2:	370c      	adds	r7, #12
 80041e4:	46bd      	mov	sp, r7
 80041e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ea:	4770      	bx	lr

080041ec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80041ec:	b480      	push	{r7}
 80041ee:	b083      	sub	sp, #12
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80041f4:	bf00      	nop
 80041f6:	370c      	adds	r7, #12
 80041f8:	46bd      	mov	sp, r7
 80041fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fe:	4770      	bx	lr

08004200 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8004200:	b480      	push	{r7}
 8004202:	b083      	sub	sp, #12
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8004208:	bf00      	nop
 800420a:	370c      	adds	r7, #12
 800420c:	46bd      	mov	sp, r7
 800420e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004212:	4770      	bx	lr

08004214 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8004214:	b480      	push	{r7}
 8004216:	b083      	sub	sp, #12
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800421c:	bf00      	nop
 800421e:	370c      	adds	r7, #12
 8004220:	46bd      	mov	sp, r7
 8004222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004226:	4770      	bx	lr

08004228 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 8004228:	b480      	push	{r7}
 800422a:	b087      	sub	sp, #28
 800422c:	af00      	add	r7, sp, #0
 800422e:	60f8      	str	r0, [r7, #12]
 8004230:	460b      	mov	r3, r1
 8004232:	607a      	str	r2, [r7, #4]
 8004234:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8004236:	2300      	movs	r3, #0
 8004238:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d101      	bne.n	8004244 <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8004240:	2301      	movs	r3, #1
 8004242:	e14a      	b.n	80044da <HAL_TIM_RegisterCallback+0x2b2>
  }

  if (htim->State == HAL_TIM_STATE_READY)
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800424a:	b2db      	uxtb	r3, r3
 800424c:	2b01      	cmp	r3, #1
 800424e:	f040 80dd 	bne.w	800440c <HAL_TIM_RegisterCallback+0x1e4>
  {
    switch (CallbackID)
 8004252:	7afb      	ldrb	r3, [r7, #11]
 8004254:	2b1f      	cmp	r3, #31
 8004256:	f200 80d6 	bhi.w	8004406 <HAL_TIM_RegisterCallback+0x1de>
 800425a:	a201      	add	r2, pc, #4	@ (adr r2, 8004260 <HAL_TIM_RegisterCallback+0x38>)
 800425c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004260:	080042e1 	.word	0x080042e1
 8004264:	080042e9 	.word	0x080042e9
 8004268:	080042f1 	.word	0x080042f1
 800426c:	080042f9 	.word	0x080042f9
 8004270:	08004301 	.word	0x08004301
 8004274:	08004309 	.word	0x08004309
 8004278:	08004311 	.word	0x08004311
 800427c:	08004319 	.word	0x08004319
 8004280:	08004321 	.word	0x08004321
 8004284:	08004329 	.word	0x08004329
 8004288:	08004331 	.word	0x08004331
 800428c:	08004339 	.word	0x08004339
 8004290:	08004341 	.word	0x08004341
 8004294:	08004349 	.word	0x08004349
 8004298:	08004353 	.word	0x08004353
 800429c:	0800435d 	.word	0x0800435d
 80042a0:	08004367 	.word	0x08004367
 80042a4:	08004371 	.word	0x08004371
 80042a8:	0800437b 	.word	0x0800437b
 80042ac:	08004385 	.word	0x08004385
 80042b0:	0800438f 	.word	0x0800438f
 80042b4:	08004399 	.word	0x08004399
 80042b8:	080043a3 	.word	0x080043a3
 80042bc:	080043ad 	.word	0x080043ad
 80042c0:	080043b7 	.word	0x080043b7
 80042c4:	080043c1 	.word	0x080043c1
 80042c8:	080043cb 	.word	0x080043cb
 80042cc:	080043d5 	.word	0x080043d5
 80042d0:	080043df 	.word	0x080043df
 80042d4:	080043e9 	.word	0x080043e9
 80042d8:	080043f3 	.word	0x080043f3
 80042dc:	080043fd 	.word	0x080043fd
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	687a      	ldr	r2, [r7, #4]
 80042e4:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 80042e6:	e0f7      	b.n	80044d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	687a      	ldr	r2, [r7, #4]
 80042ec:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 80042ee:	e0f3      	b.n	80044d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	687a      	ldr	r2, [r7, #4]
 80042f4:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 80042f6:	e0ef      	b.n	80044d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	687a      	ldr	r2, [r7, #4]
 80042fc:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 80042fe:	e0eb      	b.n	80044d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	687a      	ldr	r2, [r7, #4]
 8004304:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 8004306:	e0e7      	b.n	80044d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	687a      	ldr	r2, [r7, #4]
 800430c:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 800430e:	e0e3      	b.n	80044d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	687a      	ldr	r2, [r7, #4]
 8004314:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 8004316:	e0df      	b.n	80044d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	687a      	ldr	r2, [r7, #4]
 800431c:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 800431e:	e0db      	b.n	80044d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	687a      	ldr	r2, [r7, #4]
 8004324:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 8004326:	e0d7      	b.n	80044d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	687a      	ldr	r2, [r7, #4]
 800432c:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 800432e:	e0d3      	b.n	80044d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	687a      	ldr	r2, [r7, #4]
 8004334:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 8004336:	e0cf      	b.n	80044d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	687a      	ldr	r2, [r7, #4]
 800433c:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 800433e:	e0cb      	b.n	80044d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	687a      	ldr	r2, [r7, #4]
 8004344:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 8004346:	e0c7      	b.n	80044d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	687a      	ldr	r2, [r7, #4]
 800434c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 8004350:	e0c2      	b.n	80044d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	687a      	ldr	r2, [r7, #4]
 8004356:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        break;
 800435a:	e0bd      	b.n	80044d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	687a      	ldr	r2, [r7, #4]
 8004360:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        break;
 8004364:	e0b8      	b.n	80044d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	687a      	ldr	r2, [r7, #4]
 800436a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        break;
 800436e:	e0b3      	b.n	80044d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	687a      	ldr	r2, [r7, #4]
 8004374:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        break;
 8004378:	e0ae      	b.n	80044d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	687a      	ldr	r2, [r7, #4]
 800437e:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 8004382:	e0a9      	b.n	80044d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	687a      	ldr	r2, [r7, #4]
 8004388:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 800438c:	e0a4      	b.n	80044d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	687a      	ldr	r2, [r7, #4]
 8004392:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 8004396:	e09f      	b.n	80044d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	687a      	ldr	r2, [r7, #4]
 800439c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 80043a0:	e09a      	b.n	80044d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	687a      	ldr	r2, [r7, #4]
 80043a6:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 80043aa:	e095      	b.n	80044d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	687a      	ldr	r2, [r7, #4]
 80043b0:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 80043b4:	e090      	b.n	80044d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	687a      	ldr	r2, [r7, #4]
 80043ba:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 80043be:	e08b      	b.n	80044d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	687a      	ldr	r2, [r7, #4]
 80043c4:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 80043c8:	e086      	b.n	80044d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	687a      	ldr	r2, [r7, #4]
 80043ce:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 80043d2:	e081      	b.n	80044d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK2_CB_ID :
        htim->Break2Callback                       = pCallback;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	687a      	ldr	r2, [r7, #4]
 80043d8:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 80043dc:	e07c      	b.n	80044d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_INDEX_CB_ID :
        htim->EncoderIndexCallback                 = pCallback;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	687a      	ldr	r2, [r7, #4]
 80043e2:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 80043e6:	e077      	b.n	80044d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_DIRECTION_CHANGE_CB_ID :
        htim->DirectionChangeCallback              = pCallback;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	687a      	ldr	r2, [r7, #4]
 80043ec:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
        break;
 80043f0:	e072      	b.n	80044d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_INDEX_ERROR_CB_ID :
        htim->IndexErrorCallback                   = pCallback;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	687a      	ldr	r2, [r7, #4]
 80043f6:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 80043fa:	e06d      	b.n	80044d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRANSITION_ERROR_CB_ID :
        htim->TransitionErrorCallback              = pCallback;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	687a      	ldr	r2, [r7, #4]
 8004400:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 8004404:	e068      	b.n	80044d8 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8004406:	2301      	movs	r3, #1
 8004408:	75fb      	strb	r3, [r7, #23]
        break;
 800440a:	e065      	b.n	80044d8 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004412:	b2db      	uxtb	r3, r3
 8004414:	2b00      	cmp	r3, #0
 8004416:	d15d      	bne.n	80044d4 <HAL_TIM_RegisterCallback+0x2ac>
  {
    switch (CallbackID)
 8004418:	7afb      	ldrb	r3, [r7, #11]
 800441a:	2b0d      	cmp	r3, #13
 800441c:	d857      	bhi.n	80044ce <HAL_TIM_RegisterCallback+0x2a6>
 800441e:	a201      	add	r2, pc, #4	@ (adr r2, 8004424 <HAL_TIM_RegisterCallback+0x1fc>)
 8004420:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004424:	0800445d 	.word	0x0800445d
 8004428:	08004465 	.word	0x08004465
 800442c:	0800446d 	.word	0x0800446d
 8004430:	08004475 	.word	0x08004475
 8004434:	0800447d 	.word	0x0800447d
 8004438:	08004485 	.word	0x08004485
 800443c:	0800448d 	.word	0x0800448d
 8004440:	08004495 	.word	0x08004495
 8004444:	0800449d 	.word	0x0800449d
 8004448:	080044a5 	.word	0x080044a5
 800444c:	080044ad 	.word	0x080044ad
 8004450:	080044b5 	.word	0x080044b5
 8004454:	080044bd 	.word	0x080044bd
 8004458:	080044c5 	.word	0x080044c5
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	687a      	ldr	r2, [r7, #4]
 8004460:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 8004462:	e039      	b.n	80044d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	687a      	ldr	r2, [r7, #4]
 8004468:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 800446a:	e035      	b.n	80044d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	687a      	ldr	r2, [r7, #4]
 8004470:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8004472:	e031      	b.n	80044d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	687a      	ldr	r2, [r7, #4]
 8004478:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 800447a:	e02d      	b.n	80044d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	687a      	ldr	r2, [r7, #4]
 8004480:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 8004482:	e029      	b.n	80044d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	687a      	ldr	r2, [r7, #4]
 8004488:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 800448a:	e025      	b.n	80044d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	687a      	ldr	r2, [r7, #4]
 8004490:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 8004492:	e021      	b.n	80044d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	687a      	ldr	r2, [r7, #4]
 8004498:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 800449a:	e01d      	b.n	80044d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	687a      	ldr	r2, [r7, #4]
 80044a0:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 80044a2:	e019      	b.n	80044d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	687a      	ldr	r2, [r7, #4]
 80044a8:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 80044aa:	e015      	b.n	80044d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	687a      	ldr	r2, [r7, #4]
 80044b0:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 80044b2:	e011      	b.n	80044d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	687a      	ldr	r2, [r7, #4]
 80044b8:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 80044ba:	e00d      	b.n	80044d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	687a      	ldr	r2, [r7, #4]
 80044c0:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 80044c2:	e009      	b.n	80044d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	687a      	ldr	r2, [r7, #4]
 80044c8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 80044cc:	e004      	b.n	80044d8 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 80044ce:	2301      	movs	r3, #1
 80044d0:	75fb      	strb	r3, [r7, #23]
        break;
 80044d2:	e001      	b.n	80044d8 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 80044d4:	2301      	movs	r3, #1
 80044d6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80044d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80044da:	4618      	mov	r0, r3
 80044dc:	371c      	adds	r7, #28
 80044de:	46bd      	mov	sp, r7
 80044e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e4:	4770      	bx	lr
 80044e6:	bf00      	nop

080044e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80044e8:	b480      	push	{r7}
 80044ea:	b085      	sub	sp, #20
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
 80044f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	4a4c      	ldr	r2, [pc, #304]	@ (800462c <TIM_Base_SetConfig+0x144>)
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d017      	beq.n	8004530 <TIM_Base_SetConfig+0x48>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004506:	d013      	beq.n	8004530 <TIM_Base_SetConfig+0x48>
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	4a49      	ldr	r2, [pc, #292]	@ (8004630 <TIM_Base_SetConfig+0x148>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d00f      	beq.n	8004530 <TIM_Base_SetConfig+0x48>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	4a48      	ldr	r2, [pc, #288]	@ (8004634 <TIM_Base_SetConfig+0x14c>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d00b      	beq.n	8004530 <TIM_Base_SetConfig+0x48>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	4a47      	ldr	r2, [pc, #284]	@ (8004638 <TIM_Base_SetConfig+0x150>)
 800451c:	4293      	cmp	r3, r2
 800451e:	d007      	beq.n	8004530 <TIM_Base_SetConfig+0x48>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	4a46      	ldr	r2, [pc, #280]	@ (800463c <TIM_Base_SetConfig+0x154>)
 8004524:	4293      	cmp	r3, r2
 8004526:	d003      	beq.n	8004530 <TIM_Base_SetConfig+0x48>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	4a45      	ldr	r2, [pc, #276]	@ (8004640 <TIM_Base_SetConfig+0x158>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d108      	bne.n	8004542 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004536:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	685b      	ldr	r3, [r3, #4]
 800453c:	68fa      	ldr	r2, [r7, #12]
 800453e:	4313      	orrs	r3, r2
 8004540:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	4a39      	ldr	r2, [pc, #228]	@ (800462c <TIM_Base_SetConfig+0x144>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d023      	beq.n	8004592 <TIM_Base_SetConfig+0xaa>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004550:	d01f      	beq.n	8004592 <TIM_Base_SetConfig+0xaa>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	4a36      	ldr	r2, [pc, #216]	@ (8004630 <TIM_Base_SetConfig+0x148>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d01b      	beq.n	8004592 <TIM_Base_SetConfig+0xaa>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	4a35      	ldr	r2, [pc, #212]	@ (8004634 <TIM_Base_SetConfig+0x14c>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d017      	beq.n	8004592 <TIM_Base_SetConfig+0xaa>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	4a34      	ldr	r2, [pc, #208]	@ (8004638 <TIM_Base_SetConfig+0x150>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d013      	beq.n	8004592 <TIM_Base_SetConfig+0xaa>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	4a33      	ldr	r2, [pc, #204]	@ (800463c <TIM_Base_SetConfig+0x154>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d00f      	beq.n	8004592 <TIM_Base_SetConfig+0xaa>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	4a33      	ldr	r2, [pc, #204]	@ (8004644 <TIM_Base_SetConfig+0x15c>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d00b      	beq.n	8004592 <TIM_Base_SetConfig+0xaa>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	4a32      	ldr	r2, [pc, #200]	@ (8004648 <TIM_Base_SetConfig+0x160>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d007      	beq.n	8004592 <TIM_Base_SetConfig+0xaa>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	4a31      	ldr	r2, [pc, #196]	@ (800464c <TIM_Base_SetConfig+0x164>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d003      	beq.n	8004592 <TIM_Base_SetConfig+0xaa>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	4a2c      	ldr	r2, [pc, #176]	@ (8004640 <TIM_Base_SetConfig+0x158>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d108      	bne.n	80045a4 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004598:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	68db      	ldr	r3, [r3, #12]
 800459e:	68fa      	ldr	r2, [r7, #12]
 80045a0:	4313      	orrs	r3, r2
 80045a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	695b      	ldr	r3, [r3, #20]
 80045ae:	4313      	orrs	r3, r2
 80045b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	68fa      	ldr	r2, [r7, #12]
 80045b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	689a      	ldr	r2, [r3, #8]
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	681a      	ldr	r2, [r3, #0]
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	4a18      	ldr	r2, [pc, #96]	@ (800462c <TIM_Base_SetConfig+0x144>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d013      	beq.n	80045f8 <TIM_Base_SetConfig+0x110>
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	4a1a      	ldr	r2, [pc, #104]	@ (800463c <TIM_Base_SetConfig+0x154>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d00f      	beq.n	80045f8 <TIM_Base_SetConfig+0x110>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	4a1a      	ldr	r2, [pc, #104]	@ (8004644 <TIM_Base_SetConfig+0x15c>)
 80045dc:	4293      	cmp	r3, r2
 80045de:	d00b      	beq.n	80045f8 <TIM_Base_SetConfig+0x110>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	4a19      	ldr	r2, [pc, #100]	@ (8004648 <TIM_Base_SetConfig+0x160>)
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d007      	beq.n	80045f8 <TIM_Base_SetConfig+0x110>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	4a18      	ldr	r2, [pc, #96]	@ (800464c <TIM_Base_SetConfig+0x164>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d003      	beq.n	80045f8 <TIM_Base_SetConfig+0x110>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	4a13      	ldr	r2, [pc, #76]	@ (8004640 <TIM_Base_SetConfig+0x158>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d103      	bne.n	8004600 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	691a      	ldr	r2, [r3, #16]
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2201      	movs	r2, #1
 8004604:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	691b      	ldr	r3, [r3, #16]
 800460a:	f003 0301 	and.w	r3, r3, #1
 800460e:	2b01      	cmp	r3, #1
 8004610:	d105      	bne.n	800461e <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	691b      	ldr	r3, [r3, #16]
 8004616:	f023 0201 	bic.w	r2, r3, #1
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	611a      	str	r2, [r3, #16]
  }
}
 800461e:	bf00      	nop
 8004620:	3714      	adds	r7, #20
 8004622:	46bd      	mov	sp, r7
 8004624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004628:	4770      	bx	lr
 800462a:	bf00      	nop
 800462c:	40012c00 	.word	0x40012c00
 8004630:	40000400 	.word	0x40000400
 8004634:	40000800 	.word	0x40000800
 8004638:	40000c00 	.word	0x40000c00
 800463c:	40013400 	.word	0x40013400
 8004640:	40015000 	.word	0x40015000
 8004644:	40014000 	.word	0x40014000
 8004648:	40014400 	.word	0x40014400
 800464c:	40014800 	.word	0x40014800

08004650 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004650:	b480      	push	{r7}
 8004652:	b087      	sub	sp, #28
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
 8004658:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6a1b      	ldr	r3, [r3, #32]
 800465e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6a1b      	ldr	r3, [r3, #32]
 8004664:	f023 0201 	bic.w	r2, r3, #1
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	699b      	ldr	r3, [r3, #24]
 8004676:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800467e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004682:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	f023 0303 	bic.w	r3, r3, #3
 800468a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	68fa      	ldr	r2, [r7, #12]
 8004692:	4313      	orrs	r3, r2
 8004694:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004696:	697b      	ldr	r3, [r7, #20]
 8004698:	f023 0302 	bic.w	r3, r3, #2
 800469c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	689b      	ldr	r3, [r3, #8]
 80046a2:	697a      	ldr	r2, [r7, #20]
 80046a4:	4313      	orrs	r3, r2
 80046a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	4a30      	ldr	r2, [pc, #192]	@ (800476c <TIM_OC1_SetConfig+0x11c>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d013      	beq.n	80046d8 <TIM_OC1_SetConfig+0x88>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	4a2f      	ldr	r2, [pc, #188]	@ (8004770 <TIM_OC1_SetConfig+0x120>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d00f      	beq.n	80046d8 <TIM_OC1_SetConfig+0x88>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	4a2e      	ldr	r2, [pc, #184]	@ (8004774 <TIM_OC1_SetConfig+0x124>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d00b      	beq.n	80046d8 <TIM_OC1_SetConfig+0x88>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	4a2d      	ldr	r2, [pc, #180]	@ (8004778 <TIM_OC1_SetConfig+0x128>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d007      	beq.n	80046d8 <TIM_OC1_SetConfig+0x88>
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	4a2c      	ldr	r2, [pc, #176]	@ (800477c <TIM_OC1_SetConfig+0x12c>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d003      	beq.n	80046d8 <TIM_OC1_SetConfig+0x88>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	4a2b      	ldr	r2, [pc, #172]	@ (8004780 <TIM_OC1_SetConfig+0x130>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d10c      	bne.n	80046f2 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80046d8:	697b      	ldr	r3, [r7, #20]
 80046da:	f023 0308 	bic.w	r3, r3, #8
 80046de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	68db      	ldr	r3, [r3, #12]
 80046e4:	697a      	ldr	r2, [r7, #20]
 80046e6:	4313      	orrs	r3, r2
 80046e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80046ea:	697b      	ldr	r3, [r7, #20]
 80046ec:	f023 0304 	bic.w	r3, r3, #4
 80046f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	4a1d      	ldr	r2, [pc, #116]	@ (800476c <TIM_OC1_SetConfig+0x11c>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d013      	beq.n	8004722 <TIM_OC1_SetConfig+0xd2>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	4a1c      	ldr	r2, [pc, #112]	@ (8004770 <TIM_OC1_SetConfig+0x120>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d00f      	beq.n	8004722 <TIM_OC1_SetConfig+0xd2>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	4a1b      	ldr	r2, [pc, #108]	@ (8004774 <TIM_OC1_SetConfig+0x124>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d00b      	beq.n	8004722 <TIM_OC1_SetConfig+0xd2>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	4a1a      	ldr	r2, [pc, #104]	@ (8004778 <TIM_OC1_SetConfig+0x128>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d007      	beq.n	8004722 <TIM_OC1_SetConfig+0xd2>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	4a19      	ldr	r2, [pc, #100]	@ (800477c <TIM_OC1_SetConfig+0x12c>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d003      	beq.n	8004722 <TIM_OC1_SetConfig+0xd2>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	4a18      	ldr	r2, [pc, #96]	@ (8004780 <TIM_OC1_SetConfig+0x130>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d111      	bne.n	8004746 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004722:	693b      	ldr	r3, [r7, #16]
 8004724:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004728:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800472a:	693b      	ldr	r3, [r7, #16]
 800472c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004730:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	695b      	ldr	r3, [r3, #20]
 8004736:	693a      	ldr	r2, [r7, #16]
 8004738:	4313      	orrs	r3, r2
 800473a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	699b      	ldr	r3, [r3, #24]
 8004740:	693a      	ldr	r2, [r7, #16]
 8004742:	4313      	orrs	r3, r2
 8004744:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	693a      	ldr	r2, [r7, #16]
 800474a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	68fa      	ldr	r2, [r7, #12]
 8004750:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	685a      	ldr	r2, [r3, #4]
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	697a      	ldr	r2, [r7, #20]
 800475e:	621a      	str	r2, [r3, #32]
}
 8004760:	bf00      	nop
 8004762:	371c      	adds	r7, #28
 8004764:	46bd      	mov	sp, r7
 8004766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476a:	4770      	bx	lr
 800476c:	40012c00 	.word	0x40012c00
 8004770:	40013400 	.word	0x40013400
 8004774:	40014000 	.word	0x40014000
 8004778:	40014400 	.word	0x40014400
 800477c:	40014800 	.word	0x40014800
 8004780:	40015000 	.word	0x40015000

08004784 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004784:	b480      	push	{r7}
 8004786:	b087      	sub	sp, #28
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
 800478c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6a1b      	ldr	r3, [r3, #32]
 8004792:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6a1b      	ldr	r3, [r3, #32]
 8004798:	f023 0210 	bic.w	r2, r3, #16
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	685b      	ldr	r3, [r3, #4]
 80047a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	699b      	ldr	r3, [r3, #24]
 80047aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80047b2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80047b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80047be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	021b      	lsls	r3, r3, #8
 80047c6:	68fa      	ldr	r2, [r7, #12]
 80047c8:	4313      	orrs	r3, r2
 80047ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80047cc:	697b      	ldr	r3, [r7, #20]
 80047ce:	f023 0320 	bic.w	r3, r3, #32
 80047d2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	689b      	ldr	r3, [r3, #8]
 80047d8:	011b      	lsls	r3, r3, #4
 80047da:	697a      	ldr	r2, [r7, #20]
 80047dc:	4313      	orrs	r3, r2
 80047de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	4a2c      	ldr	r2, [pc, #176]	@ (8004894 <TIM_OC2_SetConfig+0x110>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d007      	beq.n	80047f8 <TIM_OC2_SetConfig+0x74>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	4a2b      	ldr	r2, [pc, #172]	@ (8004898 <TIM_OC2_SetConfig+0x114>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d003      	beq.n	80047f8 <TIM_OC2_SetConfig+0x74>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	4a2a      	ldr	r2, [pc, #168]	@ (800489c <TIM_OC2_SetConfig+0x118>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d10d      	bne.n	8004814 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80047f8:	697b      	ldr	r3, [r7, #20]
 80047fa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80047fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	68db      	ldr	r3, [r3, #12]
 8004804:	011b      	lsls	r3, r3, #4
 8004806:	697a      	ldr	r2, [r7, #20]
 8004808:	4313      	orrs	r3, r2
 800480a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800480c:	697b      	ldr	r3, [r7, #20]
 800480e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004812:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	4a1f      	ldr	r2, [pc, #124]	@ (8004894 <TIM_OC2_SetConfig+0x110>)
 8004818:	4293      	cmp	r3, r2
 800481a:	d013      	beq.n	8004844 <TIM_OC2_SetConfig+0xc0>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	4a1e      	ldr	r2, [pc, #120]	@ (8004898 <TIM_OC2_SetConfig+0x114>)
 8004820:	4293      	cmp	r3, r2
 8004822:	d00f      	beq.n	8004844 <TIM_OC2_SetConfig+0xc0>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	4a1e      	ldr	r2, [pc, #120]	@ (80048a0 <TIM_OC2_SetConfig+0x11c>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d00b      	beq.n	8004844 <TIM_OC2_SetConfig+0xc0>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	4a1d      	ldr	r2, [pc, #116]	@ (80048a4 <TIM_OC2_SetConfig+0x120>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d007      	beq.n	8004844 <TIM_OC2_SetConfig+0xc0>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	4a1c      	ldr	r2, [pc, #112]	@ (80048a8 <TIM_OC2_SetConfig+0x124>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d003      	beq.n	8004844 <TIM_OC2_SetConfig+0xc0>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	4a17      	ldr	r2, [pc, #92]	@ (800489c <TIM_OC2_SetConfig+0x118>)
 8004840:	4293      	cmp	r3, r2
 8004842:	d113      	bne.n	800486c <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004844:	693b      	ldr	r3, [r7, #16]
 8004846:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800484a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800484c:	693b      	ldr	r3, [r7, #16]
 800484e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004852:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	695b      	ldr	r3, [r3, #20]
 8004858:	009b      	lsls	r3, r3, #2
 800485a:	693a      	ldr	r2, [r7, #16]
 800485c:	4313      	orrs	r3, r2
 800485e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	699b      	ldr	r3, [r3, #24]
 8004864:	009b      	lsls	r3, r3, #2
 8004866:	693a      	ldr	r2, [r7, #16]
 8004868:	4313      	orrs	r3, r2
 800486a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	693a      	ldr	r2, [r7, #16]
 8004870:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	68fa      	ldr	r2, [r7, #12]
 8004876:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	685a      	ldr	r2, [r3, #4]
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	697a      	ldr	r2, [r7, #20]
 8004884:	621a      	str	r2, [r3, #32]
}
 8004886:	bf00      	nop
 8004888:	371c      	adds	r7, #28
 800488a:	46bd      	mov	sp, r7
 800488c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004890:	4770      	bx	lr
 8004892:	bf00      	nop
 8004894:	40012c00 	.word	0x40012c00
 8004898:	40013400 	.word	0x40013400
 800489c:	40015000 	.word	0x40015000
 80048a0:	40014000 	.word	0x40014000
 80048a4:	40014400 	.word	0x40014400
 80048a8:	40014800 	.word	0x40014800

080048ac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80048ac:	b480      	push	{r7}
 80048ae:	b087      	sub	sp, #28
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
 80048b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6a1b      	ldr	r3, [r3, #32]
 80048ba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6a1b      	ldr	r3, [r3, #32]
 80048c0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	69db      	ldr	r3, [r3, #28]
 80048d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80048da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80048de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	f023 0303 	bic.w	r3, r3, #3
 80048e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	68fa      	ldr	r2, [r7, #12]
 80048ee:	4313      	orrs	r3, r2
 80048f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80048f2:	697b      	ldr	r3, [r7, #20]
 80048f4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80048f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	689b      	ldr	r3, [r3, #8]
 80048fe:	021b      	lsls	r3, r3, #8
 8004900:	697a      	ldr	r2, [r7, #20]
 8004902:	4313      	orrs	r3, r2
 8004904:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	4a2b      	ldr	r2, [pc, #172]	@ (80049b8 <TIM_OC3_SetConfig+0x10c>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d007      	beq.n	800491e <TIM_OC3_SetConfig+0x72>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	4a2a      	ldr	r2, [pc, #168]	@ (80049bc <TIM_OC3_SetConfig+0x110>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d003      	beq.n	800491e <TIM_OC3_SetConfig+0x72>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	4a29      	ldr	r2, [pc, #164]	@ (80049c0 <TIM_OC3_SetConfig+0x114>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d10d      	bne.n	800493a <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800491e:	697b      	ldr	r3, [r7, #20]
 8004920:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004924:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	68db      	ldr	r3, [r3, #12]
 800492a:	021b      	lsls	r3, r3, #8
 800492c:	697a      	ldr	r2, [r7, #20]
 800492e:	4313      	orrs	r3, r2
 8004930:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004932:	697b      	ldr	r3, [r7, #20]
 8004934:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004938:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	4a1e      	ldr	r2, [pc, #120]	@ (80049b8 <TIM_OC3_SetConfig+0x10c>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d013      	beq.n	800496a <TIM_OC3_SetConfig+0xbe>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	4a1d      	ldr	r2, [pc, #116]	@ (80049bc <TIM_OC3_SetConfig+0x110>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d00f      	beq.n	800496a <TIM_OC3_SetConfig+0xbe>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	4a1d      	ldr	r2, [pc, #116]	@ (80049c4 <TIM_OC3_SetConfig+0x118>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d00b      	beq.n	800496a <TIM_OC3_SetConfig+0xbe>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	4a1c      	ldr	r2, [pc, #112]	@ (80049c8 <TIM_OC3_SetConfig+0x11c>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d007      	beq.n	800496a <TIM_OC3_SetConfig+0xbe>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	4a1b      	ldr	r2, [pc, #108]	@ (80049cc <TIM_OC3_SetConfig+0x120>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d003      	beq.n	800496a <TIM_OC3_SetConfig+0xbe>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	4a16      	ldr	r2, [pc, #88]	@ (80049c0 <TIM_OC3_SetConfig+0x114>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d113      	bne.n	8004992 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800496a:	693b      	ldr	r3, [r7, #16]
 800496c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004970:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004972:	693b      	ldr	r3, [r7, #16]
 8004974:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004978:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	695b      	ldr	r3, [r3, #20]
 800497e:	011b      	lsls	r3, r3, #4
 8004980:	693a      	ldr	r2, [r7, #16]
 8004982:	4313      	orrs	r3, r2
 8004984:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	699b      	ldr	r3, [r3, #24]
 800498a:	011b      	lsls	r3, r3, #4
 800498c:	693a      	ldr	r2, [r7, #16]
 800498e:	4313      	orrs	r3, r2
 8004990:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	693a      	ldr	r2, [r7, #16]
 8004996:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	68fa      	ldr	r2, [r7, #12]
 800499c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	685a      	ldr	r2, [r3, #4]
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	697a      	ldr	r2, [r7, #20]
 80049aa:	621a      	str	r2, [r3, #32]
}
 80049ac:	bf00      	nop
 80049ae:	371c      	adds	r7, #28
 80049b0:	46bd      	mov	sp, r7
 80049b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b6:	4770      	bx	lr
 80049b8:	40012c00 	.word	0x40012c00
 80049bc:	40013400 	.word	0x40013400
 80049c0:	40015000 	.word	0x40015000
 80049c4:	40014000 	.word	0x40014000
 80049c8:	40014400 	.word	0x40014400
 80049cc:	40014800 	.word	0x40014800

080049d0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80049d0:	b480      	push	{r7}
 80049d2:	b087      	sub	sp, #28
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
 80049d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6a1b      	ldr	r3, [r3, #32]
 80049de:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6a1b      	ldr	r3, [r3, #32]
 80049e4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	685b      	ldr	r3, [r3, #4]
 80049f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	69db      	ldr	r3, [r3, #28]
 80049f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80049fe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004a02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004a0a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	021b      	lsls	r3, r3, #8
 8004a12:	68fa      	ldr	r2, [r7, #12]
 8004a14:	4313      	orrs	r3, r2
 8004a16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004a18:	697b      	ldr	r3, [r7, #20]
 8004a1a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004a1e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	689b      	ldr	r3, [r3, #8]
 8004a24:	031b      	lsls	r3, r3, #12
 8004a26:	697a      	ldr	r2, [r7, #20]
 8004a28:	4313      	orrs	r3, r2
 8004a2a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	4a2c      	ldr	r2, [pc, #176]	@ (8004ae0 <TIM_OC4_SetConfig+0x110>)
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d007      	beq.n	8004a44 <TIM_OC4_SetConfig+0x74>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	4a2b      	ldr	r2, [pc, #172]	@ (8004ae4 <TIM_OC4_SetConfig+0x114>)
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d003      	beq.n	8004a44 <TIM_OC4_SetConfig+0x74>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	4a2a      	ldr	r2, [pc, #168]	@ (8004ae8 <TIM_OC4_SetConfig+0x118>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d10d      	bne.n	8004a60 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8004a44:	697b      	ldr	r3, [r7, #20]
 8004a46:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004a4a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	68db      	ldr	r3, [r3, #12]
 8004a50:	031b      	lsls	r3, r3, #12
 8004a52:	697a      	ldr	r2, [r7, #20]
 8004a54:	4313      	orrs	r3, r2
 8004a56:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8004a58:	697b      	ldr	r3, [r7, #20]
 8004a5a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004a5e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	4a1f      	ldr	r2, [pc, #124]	@ (8004ae0 <TIM_OC4_SetConfig+0x110>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d013      	beq.n	8004a90 <TIM_OC4_SetConfig+0xc0>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	4a1e      	ldr	r2, [pc, #120]	@ (8004ae4 <TIM_OC4_SetConfig+0x114>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d00f      	beq.n	8004a90 <TIM_OC4_SetConfig+0xc0>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	4a1e      	ldr	r2, [pc, #120]	@ (8004aec <TIM_OC4_SetConfig+0x11c>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d00b      	beq.n	8004a90 <TIM_OC4_SetConfig+0xc0>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	4a1d      	ldr	r2, [pc, #116]	@ (8004af0 <TIM_OC4_SetConfig+0x120>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d007      	beq.n	8004a90 <TIM_OC4_SetConfig+0xc0>
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	4a1c      	ldr	r2, [pc, #112]	@ (8004af4 <TIM_OC4_SetConfig+0x124>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d003      	beq.n	8004a90 <TIM_OC4_SetConfig+0xc0>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	4a17      	ldr	r2, [pc, #92]	@ (8004ae8 <TIM_OC4_SetConfig+0x118>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d113      	bne.n	8004ab8 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004a90:	693b      	ldr	r3, [r7, #16]
 8004a92:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004a96:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8004a98:	693b      	ldr	r3, [r7, #16]
 8004a9a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004a9e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	695b      	ldr	r3, [r3, #20]
 8004aa4:	019b      	lsls	r3, r3, #6
 8004aa6:	693a      	ldr	r2, [r7, #16]
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	699b      	ldr	r3, [r3, #24]
 8004ab0:	019b      	lsls	r3, r3, #6
 8004ab2:	693a      	ldr	r2, [r7, #16]
 8004ab4:	4313      	orrs	r3, r2
 8004ab6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	693a      	ldr	r2, [r7, #16]
 8004abc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	68fa      	ldr	r2, [r7, #12]
 8004ac2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	685a      	ldr	r2, [r3, #4]
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	697a      	ldr	r2, [r7, #20]
 8004ad0:	621a      	str	r2, [r3, #32]
}
 8004ad2:	bf00      	nop
 8004ad4:	371c      	adds	r7, #28
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004adc:	4770      	bx	lr
 8004ade:	bf00      	nop
 8004ae0:	40012c00 	.word	0x40012c00
 8004ae4:	40013400 	.word	0x40013400
 8004ae8:	40015000 	.word	0x40015000
 8004aec:	40014000 	.word	0x40014000
 8004af0:	40014400 	.word	0x40014400
 8004af4:	40014800 	.word	0x40014800

08004af8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004af8:	b480      	push	{r7}
 8004afa:	b087      	sub	sp, #28
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
 8004b00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6a1b      	ldr	r3, [r3, #32]
 8004b06:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6a1b      	ldr	r3, [r3, #32]
 8004b0c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	685b      	ldr	r3, [r3, #4]
 8004b18:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004b26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	68fa      	ldr	r2, [r7, #12]
 8004b32:	4313      	orrs	r3, r2
 8004b34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004b36:	693b      	ldr	r3, [r7, #16]
 8004b38:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8004b3c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	689b      	ldr	r3, [r3, #8]
 8004b42:	041b      	lsls	r3, r3, #16
 8004b44:	693a      	ldr	r2, [r7, #16]
 8004b46:	4313      	orrs	r3, r2
 8004b48:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	4a19      	ldr	r2, [pc, #100]	@ (8004bb4 <TIM_OC5_SetConfig+0xbc>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d013      	beq.n	8004b7a <TIM_OC5_SetConfig+0x82>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	4a18      	ldr	r2, [pc, #96]	@ (8004bb8 <TIM_OC5_SetConfig+0xc0>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d00f      	beq.n	8004b7a <TIM_OC5_SetConfig+0x82>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	4a17      	ldr	r2, [pc, #92]	@ (8004bbc <TIM_OC5_SetConfig+0xc4>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d00b      	beq.n	8004b7a <TIM_OC5_SetConfig+0x82>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	4a16      	ldr	r2, [pc, #88]	@ (8004bc0 <TIM_OC5_SetConfig+0xc8>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d007      	beq.n	8004b7a <TIM_OC5_SetConfig+0x82>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	4a15      	ldr	r2, [pc, #84]	@ (8004bc4 <TIM_OC5_SetConfig+0xcc>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d003      	beq.n	8004b7a <TIM_OC5_SetConfig+0x82>
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	4a14      	ldr	r2, [pc, #80]	@ (8004bc8 <TIM_OC5_SetConfig+0xd0>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d109      	bne.n	8004b8e <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004b7a:	697b      	ldr	r3, [r7, #20]
 8004b7c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004b80:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	695b      	ldr	r3, [r3, #20]
 8004b86:	021b      	lsls	r3, r3, #8
 8004b88:	697a      	ldr	r2, [r7, #20]
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	697a      	ldr	r2, [r7, #20]
 8004b92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	68fa      	ldr	r2, [r7, #12]
 8004b98:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	685a      	ldr	r2, [r3, #4]
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	693a      	ldr	r2, [r7, #16]
 8004ba6:	621a      	str	r2, [r3, #32]
}
 8004ba8:	bf00      	nop
 8004baa:	371c      	adds	r7, #28
 8004bac:	46bd      	mov	sp, r7
 8004bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb2:	4770      	bx	lr
 8004bb4:	40012c00 	.word	0x40012c00
 8004bb8:	40013400 	.word	0x40013400
 8004bbc:	40014000 	.word	0x40014000
 8004bc0:	40014400 	.word	0x40014400
 8004bc4:	40014800 	.word	0x40014800
 8004bc8:	40015000 	.word	0x40015000

08004bcc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004bcc:	b480      	push	{r7}
 8004bce:	b087      	sub	sp, #28
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
 8004bd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6a1b      	ldr	r3, [r3, #32]
 8004bda:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6a1b      	ldr	r3, [r3, #32]
 8004be0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	685b      	ldr	r3, [r3, #4]
 8004bec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004bf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004bfa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004bfe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	021b      	lsls	r3, r3, #8
 8004c06:	68fa      	ldr	r2, [r7, #12]
 8004c08:	4313      	orrs	r3, r2
 8004c0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004c0c:	693b      	ldr	r3, [r7, #16]
 8004c0e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004c12:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	689b      	ldr	r3, [r3, #8]
 8004c18:	051b      	lsls	r3, r3, #20
 8004c1a:	693a      	ldr	r2, [r7, #16]
 8004c1c:	4313      	orrs	r3, r2
 8004c1e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	4a1a      	ldr	r2, [pc, #104]	@ (8004c8c <TIM_OC6_SetConfig+0xc0>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d013      	beq.n	8004c50 <TIM_OC6_SetConfig+0x84>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	4a19      	ldr	r2, [pc, #100]	@ (8004c90 <TIM_OC6_SetConfig+0xc4>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d00f      	beq.n	8004c50 <TIM_OC6_SetConfig+0x84>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	4a18      	ldr	r2, [pc, #96]	@ (8004c94 <TIM_OC6_SetConfig+0xc8>)
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d00b      	beq.n	8004c50 <TIM_OC6_SetConfig+0x84>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	4a17      	ldr	r2, [pc, #92]	@ (8004c98 <TIM_OC6_SetConfig+0xcc>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d007      	beq.n	8004c50 <TIM_OC6_SetConfig+0x84>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	4a16      	ldr	r2, [pc, #88]	@ (8004c9c <TIM_OC6_SetConfig+0xd0>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d003      	beq.n	8004c50 <TIM_OC6_SetConfig+0x84>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	4a15      	ldr	r2, [pc, #84]	@ (8004ca0 <TIM_OC6_SetConfig+0xd4>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d109      	bne.n	8004c64 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004c50:	697b      	ldr	r3, [r7, #20]
 8004c52:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004c56:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	695b      	ldr	r3, [r3, #20]
 8004c5c:	029b      	lsls	r3, r3, #10
 8004c5e:	697a      	ldr	r2, [r7, #20]
 8004c60:	4313      	orrs	r3, r2
 8004c62:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	697a      	ldr	r2, [r7, #20]
 8004c68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	68fa      	ldr	r2, [r7, #12]
 8004c6e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	685a      	ldr	r2, [r3, #4]
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	693a      	ldr	r2, [r7, #16]
 8004c7c:	621a      	str	r2, [r3, #32]
}
 8004c7e:	bf00      	nop
 8004c80:	371c      	adds	r7, #28
 8004c82:	46bd      	mov	sp, r7
 8004c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c88:	4770      	bx	lr
 8004c8a:	bf00      	nop
 8004c8c:	40012c00 	.word	0x40012c00
 8004c90:	40013400 	.word	0x40013400
 8004c94:	40014000 	.word	0x40014000
 8004c98:	40014400 	.word	0x40014400
 8004c9c:	40014800 	.word	0x40014800
 8004ca0:	40015000 	.word	0x40015000

08004ca4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	b087      	sub	sp, #28
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	60f8      	str	r0, [r7, #12]
 8004cac:	60b9      	str	r1, [r7, #8]
 8004cae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	6a1b      	ldr	r3, [r3, #32]
 8004cb4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	6a1b      	ldr	r3, [r3, #32]
 8004cba:	f023 0201 	bic.w	r2, r3, #1
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	699b      	ldr	r3, [r3, #24]
 8004cc6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004cc8:	693b      	ldr	r3, [r7, #16]
 8004cca:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004cce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	011b      	lsls	r3, r3, #4
 8004cd4:	693a      	ldr	r2, [r7, #16]
 8004cd6:	4313      	orrs	r3, r2
 8004cd8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004cda:	697b      	ldr	r3, [r7, #20]
 8004cdc:	f023 030a 	bic.w	r3, r3, #10
 8004ce0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004ce2:	697a      	ldr	r2, [r7, #20]
 8004ce4:	68bb      	ldr	r3, [r7, #8]
 8004ce6:	4313      	orrs	r3, r2
 8004ce8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	693a      	ldr	r2, [r7, #16]
 8004cee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	697a      	ldr	r2, [r7, #20]
 8004cf4:	621a      	str	r2, [r3, #32]
}
 8004cf6:	bf00      	nop
 8004cf8:	371c      	adds	r7, #28
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d00:	4770      	bx	lr

08004d02 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d02:	b480      	push	{r7}
 8004d04:	b087      	sub	sp, #28
 8004d06:	af00      	add	r7, sp, #0
 8004d08:	60f8      	str	r0, [r7, #12]
 8004d0a:	60b9      	str	r1, [r7, #8]
 8004d0c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	6a1b      	ldr	r3, [r3, #32]
 8004d12:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	6a1b      	ldr	r3, [r3, #32]
 8004d18:	f023 0210 	bic.w	r2, r3, #16
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	699b      	ldr	r3, [r3, #24]
 8004d24:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004d26:	693b      	ldr	r3, [r7, #16]
 8004d28:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004d2c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	031b      	lsls	r3, r3, #12
 8004d32:	693a      	ldr	r2, [r7, #16]
 8004d34:	4313      	orrs	r3, r2
 8004d36:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004d38:	697b      	ldr	r3, [r7, #20]
 8004d3a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004d3e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	011b      	lsls	r3, r3, #4
 8004d44:	697a      	ldr	r2, [r7, #20]
 8004d46:	4313      	orrs	r3, r2
 8004d48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	693a      	ldr	r2, [r7, #16]
 8004d4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	697a      	ldr	r2, [r7, #20]
 8004d54:	621a      	str	r2, [r3, #32]
}
 8004d56:	bf00      	nop
 8004d58:	371c      	adds	r7, #28
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d60:	4770      	bx	lr

08004d62 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004d62:	b480      	push	{r7}
 8004d64:	b085      	sub	sp, #20
 8004d66:	af00      	add	r7, sp, #0
 8004d68:	6078      	str	r0, [r7, #4]
 8004d6a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	689b      	ldr	r3, [r3, #8]
 8004d70:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8004d78:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d7c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004d7e:	683a      	ldr	r2, [r7, #0]
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	4313      	orrs	r3, r2
 8004d84:	f043 0307 	orr.w	r3, r3, #7
 8004d88:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	68fa      	ldr	r2, [r7, #12]
 8004d8e:	609a      	str	r2, [r3, #8]
}
 8004d90:	bf00      	nop
 8004d92:	3714      	adds	r7, #20
 8004d94:	46bd      	mov	sp, r7
 8004d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9a:	4770      	bx	lr

08004d9c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	b087      	sub	sp, #28
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	60f8      	str	r0, [r7, #12]
 8004da4:	60b9      	str	r1, [r7, #8]
 8004da6:	607a      	str	r2, [r7, #4]
 8004da8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	689b      	ldr	r3, [r3, #8]
 8004dae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004db0:	697b      	ldr	r3, [r7, #20]
 8004db2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004db6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	021a      	lsls	r2, r3, #8
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	431a      	orrs	r2, r3
 8004dc0:	68bb      	ldr	r3, [r7, #8]
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	697a      	ldr	r2, [r7, #20]
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	697a      	ldr	r2, [r7, #20]
 8004dce:	609a      	str	r2, [r3, #8]
}
 8004dd0:	bf00      	nop
 8004dd2:	371c      	adds	r7, #28
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dda:	4770      	bx	lr

08004ddc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004ddc:	b480      	push	{r7}
 8004dde:	b087      	sub	sp, #28
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	60f8      	str	r0, [r7, #12]
 8004de4:	60b9      	str	r1, [r7, #8]
 8004de6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004de8:	68bb      	ldr	r3, [r7, #8]
 8004dea:	f003 031f 	and.w	r3, r3, #31
 8004dee:	2201      	movs	r2, #1
 8004df0:	fa02 f303 	lsl.w	r3, r2, r3
 8004df4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	6a1a      	ldr	r2, [r3, #32]
 8004dfa:	697b      	ldr	r3, [r7, #20]
 8004dfc:	43db      	mvns	r3, r3
 8004dfe:	401a      	ands	r2, r3
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	6a1a      	ldr	r2, [r3, #32]
 8004e08:	68bb      	ldr	r3, [r7, #8]
 8004e0a:	f003 031f 	and.w	r3, r3, #31
 8004e0e:	6879      	ldr	r1, [r7, #4]
 8004e10:	fa01 f303 	lsl.w	r3, r1, r3
 8004e14:	431a      	orrs	r2, r3
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	621a      	str	r2, [r3, #32]
}
 8004e1a:	bf00      	nop
 8004e1c:	371c      	adds	r7, #28
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e24:	4770      	bx	lr
	...

08004e28 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8004e28:	b480      	push	{r7}
 8004e2a:	b083      	sub	sp, #12
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	4a26      	ldr	r2, [pc, #152]	@ (8004ecc <TIM_ResetCallback+0xa4>)
 8004e34:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	4a25      	ldr	r2, [pc, #148]	@ (8004ed0 <TIM_ResetCallback+0xa8>)
 8004e3c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	4a24      	ldr	r2, [pc, #144]	@ (8004ed4 <TIM_ResetCallback+0xac>)
 8004e44:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	4a23      	ldr	r2, [pc, #140]	@ (8004ed8 <TIM_ResetCallback+0xb0>)
 8004e4c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	4a22      	ldr	r2, [pc, #136]	@ (8004edc <TIM_ResetCallback+0xb4>)
 8004e54:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	4a21      	ldr	r2, [pc, #132]	@ (8004ee0 <TIM_ResetCallback+0xb8>)
 8004e5c:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	4a20      	ldr	r2, [pc, #128]	@ (8004ee4 <TIM_ResetCallback+0xbc>)
 8004e64:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	4a1f      	ldr	r2, [pc, #124]	@ (8004ee8 <TIM_ResetCallback+0xc0>)
 8004e6c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	4a1e      	ldr	r2, [pc, #120]	@ (8004eec <TIM_ResetCallback+0xc4>)
 8004e74:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	4a1d      	ldr	r2, [pc, #116]	@ (8004ef0 <TIM_ResetCallback+0xc8>)
 8004e7c:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	4a1c      	ldr	r2, [pc, #112]	@ (8004ef4 <TIM_ResetCallback+0xcc>)
 8004e84:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	4a1b      	ldr	r2, [pc, #108]	@ (8004ef8 <TIM_ResetCallback+0xd0>)
 8004e8c:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	4a1a      	ldr	r2, [pc, #104]	@ (8004efc <TIM_ResetCallback+0xd4>)
 8004e94:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	4a19      	ldr	r2, [pc, #100]	@ (8004f00 <TIM_ResetCallback+0xd8>)
 8004e9c:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  htim->EncoderIndexCallback              = HAL_TIMEx_EncoderIndexCallback;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	4a18      	ldr	r2, [pc, #96]	@ (8004f04 <TIM_ResetCallback+0xdc>)
 8004ea4:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  htim->DirectionChangeCallback           = HAL_TIMEx_DirectionChangeCallback;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	4a17      	ldr	r2, [pc, #92]	@ (8004f08 <TIM_ResetCallback+0xe0>)
 8004eac:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  htim->IndexErrorCallback                = HAL_TIMEx_IndexErrorCallback;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	4a16      	ldr	r2, [pc, #88]	@ (8004f0c <TIM_ResetCallback+0xe4>)
 8004eb4:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  htim->TransitionErrorCallback           = HAL_TIMEx_TransitionErrorCallback;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	4a15      	ldr	r2, [pc, #84]	@ (8004f10 <TIM_ResetCallback+0xe8>)
 8004ebc:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 8004ec0:	bf00      	nop
 8004ec2:	370c      	adds	r7, #12
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eca:	4770      	bx	lr
 8004ecc:	08004161 	.word	0x08004161
 8004ed0:	08004175 	.word	0x08004175
 8004ed4:	080041ed 	.word	0x080041ed
 8004ed8:	08004201 	.word	0x08004201
 8004edc:	0800419d 	.word	0x0800419d
 8004ee0:	080041b1 	.word	0x080041b1
 8004ee4:	08004189 	.word	0x08004189
 8004ee8:	080041c5 	.word	0x080041c5
 8004eec:	080041d9 	.word	0x080041d9
 8004ef0:	08004215 	.word	0x08004215
 8004ef4:	08005169 	.word	0x08005169
 8004ef8:	0800517d 	.word	0x0800517d
 8004efc:	08005191 	.word	0x08005191
 8004f00:	080051a5 	.word	0x080051a5
 8004f04:	080051b9 	.word	0x080051b9
 8004f08:	080051cd 	.word	0x080051cd
 8004f0c:	080051e1 	.word	0x080051e1
 8004f10:	080051f5 	.word	0x080051f5

08004f14 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004f14:	b480      	push	{r7}
 8004f16:	b085      	sub	sp, #20
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
 8004f1c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004f24:	2b01      	cmp	r3, #1
 8004f26:	d101      	bne.n	8004f2c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004f28:	2302      	movs	r3, #2
 8004f2a:	e074      	b.n	8005016 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2201      	movs	r2, #1
 8004f30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2202      	movs	r2, #2
 8004f38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	685b      	ldr	r3, [r3, #4]
 8004f42:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	689b      	ldr	r3, [r3, #8]
 8004f4a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4a34      	ldr	r2, [pc, #208]	@ (8005024 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d009      	beq.n	8004f6a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	4a33      	ldr	r2, [pc, #204]	@ (8005028 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d004      	beq.n	8004f6a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4a31      	ldr	r2, [pc, #196]	@ (800502c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d108      	bne.n	8004f7c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004f70:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	685b      	ldr	r3, [r3, #4]
 8004f76:	68fa      	ldr	r2, [r7, #12]
 8004f78:	4313      	orrs	r3, r2
 8004f7a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8004f82:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f86:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	68fa      	ldr	r2, [r7, #12]
 8004f8e:	4313      	orrs	r3, r2
 8004f90:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	68fa      	ldr	r2, [r7, #12]
 8004f98:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	4a21      	ldr	r2, [pc, #132]	@ (8005024 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d022      	beq.n	8004fea <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004fac:	d01d      	beq.n	8004fea <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	4a1f      	ldr	r2, [pc, #124]	@ (8005030 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d018      	beq.n	8004fea <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	4a1d      	ldr	r2, [pc, #116]	@ (8005034 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d013      	beq.n	8004fea <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	4a1c      	ldr	r2, [pc, #112]	@ (8005038 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8004fc8:	4293      	cmp	r3, r2
 8004fca:	d00e      	beq.n	8004fea <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4a15      	ldr	r2, [pc, #84]	@ (8005028 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d009      	beq.n	8004fea <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	4a18      	ldr	r2, [pc, #96]	@ (800503c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	d004      	beq.n	8004fea <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	4a11      	ldr	r2, [pc, #68]	@ (800502c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d10c      	bne.n	8005004 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004fea:	68bb      	ldr	r3, [r7, #8]
 8004fec:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004ff0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	689b      	ldr	r3, [r3, #8]
 8004ff6:	68ba      	ldr	r2, [r7, #8]
 8004ff8:	4313      	orrs	r3, r2
 8004ffa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	68ba      	ldr	r2, [r7, #8]
 8005002:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2201      	movs	r2, #1
 8005008:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2200      	movs	r2, #0
 8005010:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005014:	2300      	movs	r3, #0
}
 8005016:	4618      	mov	r0, r3
 8005018:	3714      	adds	r7, #20
 800501a:	46bd      	mov	sp, r7
 800501c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005020:	4770      	bx	lr
 8005022:	bf00      	nop
 8005024:	40012c00 	.word	0x40012c00
 8005028:	40013400 	.word	0x40013400
 800502c:	40015000 	.word	0x40015000
 8005030:	40000400 	.word	0x40000400
 8005034:	40000800 	.word	0x40000800
 8005038:	40000c00 	.word	0x40000c00
 800503c:	40014000 	.word	0x40014000

08005040 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005040:	b480      	push	{r7}
 8005042:	b085      	sub	sp, #20
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
 8005048:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800504a:	2300      	movs	r3, #0
 800504c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005054:	2b01      	cmp	r3, #1
 8005056:	d101      	bne.n	800505c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005058:	2302      	movs	r3, #2
 800505a:	e078      	b.n	800514e <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2201      	movs	r2, #1
 8005060:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	68db      	ldr	r3, [r3, #12]
 800506e:	4313      	orrs	r3, r2
 8005070:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	689b      	ldr	r3, [r3, #8]
 800507c:	4313      	orrs	r3, r2
 800507e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	685b      	ldr	r3, [r3, #4]
 800508a:	4313      	orrs	r3, r2
 800508c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4313      	orrs	r3, r2
 800509a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	691b      	ldr	r3, [r3, #16]
 80050a6:	4313      	orrs	r3, r2
 80050a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	695b      	ldr	r3, [r3, #20]
 80050b4:	4313      	orrs	r3, r2
 80050b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050c2:	4313      	orrs	r3, r2
 80050c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	699b      	ldr	r3, [r3, #24]
 80050d0:	041b      	lsls	r3, r3, #16
 80050d2:	4313      	orrs	r3, r2
 80050d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	69db      	ldr	r3, [r3, #28]
 80050e0:	4313      	orrs	r3, r2
 80050e2:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	4a1c      	ldr	r2, [pc, #112]	@ (800515c <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d009      	beq.n	8005102 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	4a1b      	ldr	r2, [pc, #108]	@ (8005160 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d004      	beq.n	8005102 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	4a19      	ldr	r2, [pc, #100]	@ (8005164 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d11c      	bne.n	800513c <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800510c:	051b      	lsls	r3, r3, #20
 800510e:	4313      	orrs	r3, r2
 8005110:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	6a1b      	ldr	r3, [r3, #32]
 800511c:	4313      	orrs	r3, r2
 800511e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800512a:	4313      	orrs	r3, r2
 800512c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005138:	4313      	orrs	r3, r2
 800513a:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	68fa      	ldr	r2, [r7, #12]
 8005142:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2200      	movs	r2, #0
 8005148:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800514c:	2300      	movs	r3, #0
}
 800514e:	4618      	mov	r0, r3
 8005150:	3714      	adds	r7, #20
 8005152:	46bd      	mov	sp, r7
 8005154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005158:	4770      	bx	lr
 800515a:	bf00      	nop
 800515c:	40012c00 	.word	0x40012c00
 8005160:	40013400 	.word	0x40013400
 8005164:	40015000 	.word	0x40015000

08005168 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005168:	b480      	push	{r7}
 800516a:	b083      	sub	sp, #12
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005170:	bf00      	nop
 8005172:	370c      	adds	r7, #12
 8005174:	46bd      	mov	sp, r7
 8005176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517a:	4770      	bx	lr

0800517c <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800517c:	b480      	push	{r7}
 800517e:	b083      	sub	sp, #12
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 8005184:	bf00      	nop
 8005186:	370c      	adds	r7, #12
 8005188:	46bd      	mov	sp, r7
 800518a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518e:	4770      	bx	lr

08005190 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005190:	b480      	push	{r7}
 8005192:	b083      	sub	sp, #12
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005198:	bf00      	nop
 800519a:	370c      	adds	r7, #12
 800519c:	46bd      	mov	sp, r7
 800519e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a2:	4770      	bx	lr

080051a4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80051a4:	b480      	push	{r7}
 80051a6:	b083      	sub	sp, #12
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80051ac:	bf00      	nop
 80051ae:	370c      	adds	r7, #12
 80051b0:	46bd      	mov	sp, r7
 80051b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b6:	4770      	bx	lr

080051b8 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80051b8:	b480      	push	{r7}
 80051ba:	b083      	sub	sp, #12
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80051c0:	bf00      	nop
 80051c2:	370c      	adds	r7, #12
 80051c4:	46bd      	mov	sp, r7
 80051c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ca:	4770      	bx	lr

080051cc <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80051cc:	b480      	push	{r7}
 80051ce:	b083      	sub	sp, #12
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80051d4:	bf00      	nop
 80051d6:	370c      	adds	r7, #12
 80051d8:	46bd      	mov	sp, r7
 80051da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051de:	4770      	bx	lr

080051e0 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80051e0:	b480      	push	{r7}
 80051e2:	b083      	sub	sp, #12
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80051e8:	bf00      	nop
 80051ea:	370c      	adds	r7, #12
 80051ec:	46bd      	mov	sp, r7
 80051ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f2:	4770      	bx	lr

080051f4 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80051f4:	b480      	push	{r7}
 80051f6:	b083      	sub	sp, #12
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80051fc:	bf00      	nop
 80051fe:	370c      	adds	r7, #12
 8005200:	46bd      	mov	sp, r7
 8005202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005206:	4770      	bx	lr

08005208 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005208:	b580      	push	{r7, lr}
 800520a:	b082      	sub	sp, #8
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d101      	bne.n	800521a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005216:	2301      	movs	r3, #1
 8005218:	e050      	b.n	80052bc <HAL_UART_Init+0xb4>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005220:	2b00      	cmp	r3, #0
 8005222:	d114      	bne.n	800524e <HAL_UART_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2200      	movs	r2, #0
 8005228:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 800522c:	6878      	ldr	r0, [r7, #4]
 800522e:	f000 fe37 	bl	8005ea0 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8005238:	2b00      	cmp	r3, #0
 800523a:	d103      	bne.n	8005244 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	4a21      	ldr	r2, [pc, #132]	@ (80052c4 <HAL_UART_Init+0xbc>)
 8005240:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800524a:	6878      	ldr	r0, [r7, #4]
 800524c:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2224      	movs	r2, #36	@ 0x24
 8005252:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	681a      	ldr	r2, [r3, #0]
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f022 0201 	bic.w	r2, r2, #1
 8005264:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800526a:	2b00      	cmp	r3, #0
 800526c:	d002      	beq.n	8005274 <HAL_UART_Init+0x6c>
  {
    UART_AdvFeatureConfig(huart);
 800526e:	6878      	ldr	r0, [r7, #4]
 8005270:	f001 f964 	bl	800653c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005274:	6878      	ldr	r0, [r7, #4]
 8005276:	f000 fe65 	bl	8005f44 <UART_SetConfig>
 800527a:	4603      	mov	r3, r0
 800527c:	2b01      	cmp	r3, #1
 800527e:	d101      	bne.n	8005284 <HAL_UART_Init+0x7c>
  {
    return HAL_ERROR;
 8005280:	2301      	movs	r3, #1
 8005282:	e01b      	b.n	80052bc <HAL_UART_Init+0xb4>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	685a      	ldr	r2, [r3, #4]
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005292:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	689a      	ldr	r2, [r3, #8]
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80052a2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	681a      	ldr	r2, [r3, #0]
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f042 0201 	orr.w	r2, r2, #1
 80052b2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80052b4:	6878      	ldr	r0, [r7, #4]
 80052b6:	f001 f9e3 	bl	8006680 <UART_CheckIdleState>
 80052ba:	4603      	mov	r3, r0
}
 80052bc:	4618      	mov	r0, r3
 80052be:	3708      	adds	r7, #8
 80052c0:	46bd      	mov	sp, r7
 80052c2:	bd80      	pop	{r7, pc}
 80052c4:	08001241 	.word	0x08001241

080052c8 <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 80052c8:	b480      	push	{r7}
 80052ca:	b087      	sub	sp, #28
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	60f8      	str	r0, [r7, #12]
 80052d0:	460b      	mov	r3, r1
 80052d2:	607a      	str	r2, [r7, #4]
 80052d4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80052d6:	2300      	movs	r3, #0
 80052d8:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d109      	bne.n	80052f4 <HAL_UART_RegisterCallback+0x2c>
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052e6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    return HAL_ERROR;
 80052f0:	2301      	movs	r3, #1
 80052f2:	e09c      	b.n	800542e <HAL_UART_RegisterCallback+0x166>
  }

  if (huart->gState == HAL_UART_STATE_READY)
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052fa:	2b20      	cmp	r3, #32
 80052fc:	d16c      	bne.n	80053d8 <HAL_UART_RegisterCallback+0x110>
  {
    switch (CallbackID)
 80052fe:	7afb      	ldrb	r3, [r7, #11]
 8005300:	2b0c      	cmp	r3, #12
 8005302:	d85e      	bhi.n	80053c2 <HAL_UART_RegisterCallback+0xfa>
 8005304:	a201      	add	r2, pc, #4	@ (adr r2, 800530c <HAL_UART_RegisterCallback+0x44>)
 8005306:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800530a:	bf00      	nop
 800530c:	08005341 	.word	0x08005341
 8005310:	0800534b 	.word	0x0800534b
 8005314:	08005355 	.word	0x08005355
 8005318:	0800535f 	.word	0x0800535f
 800531c:	08005369 	.word	0x08005369
 8005320:	08005373 	.word	0x08005373
 8005324:	0800537d 	.word	0x0800537d
 8005328:	08005387 	.word	0x08005387
 800532c:	08005391 	.word	0x08005391
 8005330:	0800539b 	.word	0x0800539b
 8005334:	080053a5 	.word	0x080053a5
 8005338:	080053af 	.word	0x080053af
 800533c:	080053b9 	.word	0x080053b9
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	687a      	ldr	r2, [r7, #4]
 8005344:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 8005348:	e070      	b.n	800542c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	687a      	ldr	r2, [r7, #4]
 800534e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 8005352:	e06b      	b.n	800542c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	687a      	ldr	r2, [r7, #4]
 8005358:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 800535c:	e066      	b.n	800542c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	687a      	ldr	r2, [r7, #4]
 8005362:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 8005366:	e061      	b.n	800542c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	687a      	ldr	r2, [r7, #4]
 800536c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 8005370:	e05c      	b.n	800542c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	687a      	ldr	r2, [r7, #4]
 8005376:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 800537a:	e057      	b.n	800542c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	687a      	ldr	r2, [r7, #4]
 8005380:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 8005384:	e052      	b.n	800542c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	687a      	ldr	r2, [r7, #4]
 800538a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 800538e:	e04d      	b.n	800542c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_WAKEUP_CB_ID :
        huart->WakeupCallback = pCallback;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	687a      	ldr	r2, [r7, #4]
 8005394:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 8005398:	e048      	b.n	800542c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_FIFO_FULL_CB_ID :
        huart->RxFifoFullCallback = pCallback;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	687a      	ldr	r2, [r7, #4]
 800539e:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 80053a2:	e043      	b.n	800542c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_FIFO_EMPTY_CB_ID :
        huart->TxFifoEmptyCallback = pCallback;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	687a      	ldr	r2, [r7, #4]
 80053a8:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 80053ac:	e03e      	b.n	800542c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	687a      	ldr	r2, [r7, #4]
 80053b2:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 80053b6:	e039      	b.n	800542c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	687a      	ldr	r2, [r7, #4]
 80053bc:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 80053c0:	e034      	b.n	800542c <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053c8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 80053d2:	2301      	movs	r3, #1
 80053d4:	75fb      	strb	r3, [r7, #23]
        break;
 80053d6:	e029      	b.n	800542c <HAL_UART_RegisterCallback+0x164>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d11a      	bne.n	8005418 <HAL_UART_RegisterCallback+0x150>
  {
    switch (CallbackID)
 80053e2:	7afb      	ldrb	r3, [r7, #11]
 80053e4:	2b0b      	cmp	r3, #11
 80053e6:	d002      	beq.n	80053ee <HAL_UART_RegisterCallback+0x126>
 80053e8:	2b0c      	cmp	r3, #12
 80053ea:	d005      	beq.n	80053f8 <HAL_UART_RegisterCallback+0x130>
 80053ec:	e009      	b.n	8005402 <HAL_UART_RegisterCallback+0x13a>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	687a      	ldr	r2, [r7, #4]
 80053f2:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 80053f6:	e019      	b.n	800542c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	687a      	ldr	r2, [r7, #4]
 80053fc:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 8005400:	e014      	b.n	800542c <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005408:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 8005412:	2301      	movs	r3, #1
 8005414:	75fb      	strb	r3, [r7, #23]
        break;
 8005416:	e009      	b.n	800542c <HAL_UART_RegisterCallback+0x164>
    }
  }
  else
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800541e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    status =  HAL_ERROR;
 8005428:	2301      	movs	r3, #1
 800542a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800542c:	7dfb      	ldrb	r3, [r7, #23]
}
 800542e:	4618      	mov	r0, r3
 8005430:	371c      	adds	r7, #28
 8005432:	46bd      	mov	sp, r7
 8005434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005438:	4770      	bx	lr
 800543a:	bf00      	nop

0800543c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b08a      	sub	sp, #40	@ 0x28
 8005440:	af00      	add	r7, sp, #0
 8005442:	60f8      	str	r0, [r7, #12]
 8005444:	60b9      	str	r1, [r7, #8]
 8005446:	4613      	mov	r3, r2
 8005448:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005450:	2b20      	cmp	r3, #32
 8005452:	d137      	bne.n	80054c4 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8005454:	68bb      	ldr	r3, [r7, #8]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d002      	beq.n	8005460 <HAL_UART_Receive_IT+0x24>
 800545a:	88fb      	ldrh	r3, [r7, #6]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d101      	bne.n	8005464 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005460:	2301      	movs	r3, #1
 8005462:	e030      	b.n	80054c6 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	2200      	movs	r2, #0
 8005468:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	4a18      	ldr	r2, [pc, #96]	@ (80054d0 <HAL_UART_Receive_IT+0x94>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d01f      	beq.n	80054b4 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	685b      	ldr	r3, [r3, #4]
 800547a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800547e:	2b00      	cmp	r3, #0
 8005480:	d018      	beq.n	80054b4 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005488:	697b      	ldr	r3, [r7, #20]
 800548a:	e853 3f00 	ldrex	r3, [r3]
 800548e:	613b      	str	r3, [r7, #16]
   return(result);
 8005490:	693b      	ldr	r3, [r7, #16]
 8005492:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005496:	627b      	str	r3, [r7, #36]	@ 0x24
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	461a      	mov	r2, r3
 800549e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054a0:	623b      	str	r3, [r7, #32]
 80054a2:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054a4:	69f9      	ldr	r1, [r7, #28]
 80054a6:	6a3a      	ldr	r2, [r7, #32]
 80054a8:	e841 2300 	strex	r3, r2, [r1]
 80054ac:	61bb      	str	r3, [r7, #24]
   return(result);
 80054ae:	69bb      	ldr	r3, [r7, #24]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d1e6      	bne.n	8005482 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80054b4:	88fb      	ldrh	r3, [r7, #6]
 80054b6:	461a      	mov	r2, r3
 80054b8:	68b9      	ldr	r1, [r7, #8]
 80054ba:	68f8      	ldr	r0, [r7, #12]
 80054bc:	f001 f9f8 	bl	80068b0 <UART_Start_Receive_IT>
 80054c0:	4603      	mov	r3, r0
 80054c2:	e000      	b.n	80054c6 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80054c4:	2302      	movs	r3, #2
  }
}
 80054c6:	4618      	mov	r0, r3
 80054c8:	3728      	adds	r7, #40	@ 0x28
 80054ca:	46bd      	mov	sp, r7
 80054cc:	bd80      	pop	{r7, pc}
 80054ce:	bf00      	nop
 80054d0:	40008000 	.word	0x40008000

080054d4 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b08a      	sub	sp, #40	@ 0x28
 80054d8:	af00      	add	r7, sp, #0
 80054da:	60f8      	str	r0, [r7, #12]
 80054dc:	60b9      	str	r1, [r7, #8]
 80054de:	4613      	mov	r3, r2
 80054e0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054e8:	2b20      	cmp	r3, #32
 80054ea:	d167      	bne.n	80055bc <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d002      	beq.n	80054f8 <HAL_UART_Transmit_DMA+0x24>
 80054f2:	88fb      	ldrh	r3, [r7, #6]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d101      	bne.n	80054fc <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 80054f8:	2301      	movs	r3, #1
 80054fa:	e060      	b.n	80055be <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	68ba      	ldr	r2, [r7, #8]
 8005500:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	88fa      	ldrh	r2, [r7, #6]
 8005506:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	88fa      	ldrh	r2, [r7, #6]
 800550e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	2200      	movs	r2, #0
 8005516:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	2221      	movs	r2, #33	@ 0x21
 800551e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005526:	2b00      	cmp	r3, #0
 8005528:	d028      	beq.n	800557c <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800552e:	4a26      	ldr	r2, [pc, #152]	@ (80055c8 <HAL_UART_Transmit_DMA+0xf4>)
 8005530:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005536:	4a25      	ldr	r2, [pc, #148]	@ (80055cc <HAL_UART_Transmit_DMA+0xf8>)
 8005538:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800553e:	4a24      	ldr	r2, [pc, #144]	@ (80055d0 <HAL_UART_Transmit_DMA+0xfc>)
 8005540:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005546:	2200      	movs	r2, #0
 8005548:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005552:	4619      	mov	r1, r3
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	3328      	adds	r3, #40	@ 0x28
 800555a:	461a      	mov	r2, r3
 800555c:	88fb      	ldrh	r3, [r7, #6]
 800555e:	f7fc f9b5 	bl	80018cc <HAL_DMA_Start_IT>
 8005562:	4603      	mov	r3, r0
 8005564:	2b00      	cmp	r3, #0
 8005566:	d009      	beq.n	800557c <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	2210      	movs	r2, #16
 800556c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	2220      	movs	r2, #32
 8005574:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 8005578:	2301      	movs	r3, #1
 800557a:	e020      	b.n	80055be <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	2240      	movs	r2, #64	@ 0x40
 8005582:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	3308      	adds	r3, #8
 800558a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800558c:	697b      	ldr	r3, [r7, #20]
 800558e:	e853 3f00 	ldrex	r3, [r3]
 8005592:	613b      	str	r3, [r7, #16]
   return(result);
 8005594:	693b      	ldr	r3, [r7, #16]
 8005596:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800559a:	627b      	str	r3, [r7, #36]	@ 0x24
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	3308      	adds	r3, #8
 80055a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80055a4:	623a      	str	r2, [r7, #32]
 80055a6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055a8:	69f9      	ldr	r1, [r7, #28]
 80055aa:	6a3a      	ldr	r2, [r7, #32]
 80055ac:	e841 2300 	strex	r3, r2, [r1]
 80055b0:	61bb      	str	r3, [r7, #24]
   return(result);
 80055b2:	69bb      	ldr	r3, [r7, #24]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d1e5      	bne.n	8005584 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 80055b8:	2300      	movs	r3, #0
 80055ba:	e000      	b.n	80055be <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 80055bc:	2302      	movs	r3, #2
  }
}
 80055be:	4618      	mov	r0, r3
 80055c0:	3728      	adds	r7, #40	@ 0x28
 80055c2:	46bd      	mov	sp, r7
 80055c4:	bd80      	pop	{r7, pc}
 80055c6:	bf00      	nop
 80055c8:	08006c43 	.word	0x08006c43
 80055cc:	08006ce1 	.word	0x08006ce1
 80055d0:	08006d01 	.word	0x08006d01

080055d4 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b09a      	sub	sp, #104	@ 0x68
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
  /* Disable PEIE, EIE, RXNEIE and RXFTIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055e2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80055e4:	e853 3f00 	ldrex	r3, [r3]
 80055e8:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80055ea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80055ec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80055f0:	667b      	str	r3, [r7, #100]	@ 0x64
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	461a      	mov	r2, r3
 80055f8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80055fa:	657b      	str	r3, [r7, #84]	@ 0x54
 80055fc:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055fe:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005600:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005602:	e841 2300 	strex	r3, r2, [r1]
 8005606:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8005608:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800560a:	2b00      	cmp	r3, #0
 800560c:	d1e6      	bne.n	80055dc <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	3308      	adds	r3, #8
 8005614:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005616:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005618:	e853 3f00 	ldrex	r3, [r3]
 800561c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800561e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005620:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005624:	f023 0301 	bic.w	r3, r3, #1
 8005628:	663b      	str	r3, [r7, #96]	@ 0x60
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	3308      	adds	r3, #8
 8005630:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005632:	643a      	str	r2, [r7, #64]	@ 0x40
 8005634:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005636:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005638:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800563a:	e841 2300 	strex	r3, r2, [r1]
 800563e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005640:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005642:	2b00      	cmp	r3, #0
 8005644:	d1e3      	bne.n	800560e <HAL_UART_AbortReceive+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800564a:	2b01      	cmp	r3, #1
 800564c:	d118      	bne.n	8005680 <HAL_UART_AbortReceive+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005654:	6a3b      	ldr	r3, [r7, #32]
 8005656:	e853 3f00 	ldrex	r3, [r3]
 800565a:	61fb      	str	r3, [r7, #28]
   return(result);
 800565c:	69fb      	ldr	r3, [r7, #28]
 800565e:	f023 0310 	bic.w	r3, r3, #16
 8005662:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	461a      	mov	r2, r3
 800566a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800566c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800566e:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005670:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005672:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005674:	e841 2300 	strex	r3, r2, [r1]
 8005678:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800567a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800567c:	2b00      	cmp	r3, #0
 800567e:	d1e6      	bne.n	800564e <HAL_UART_AbortReceive+0x7a>
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	689b      	ldr	r3, [r3, #8]
 8005686:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800568a:	2b40      	cmp	r3, #64	@ 0x40
 800568c:	d13b      	bne.n	8005706 <HAL_UART_AbortReceive+0x132>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	3308      	adds	r3, #8
 8005694:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	e853 3f00 	ldrex	r3, [r3]
 800569c:	60bb      	str	r3, [r7, #8]
   return(result);
 800569e:	68bb      	ldr	r3, [r7, #8]
 80056a0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80056a4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	3308      	adds	r3, #8
 80056ac:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80056ae:	61ba      	str	r2, [r7, #24]
 80056b0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056b2:	6979      	ldr	r1, [r7, #20]
 80056b4:	69ba      	ldr	r2, [r7, #24]
 80056b6:	e841 2300 	strex	r3, r2, [r1]
 80056ba:	613b      	str	r3, [r7, #16]
   return(result);
 80056bc:	693b      	ldr	r3, [r7, #16]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d1e5      	bne.n	800568e <HAL_UART_AbortReceive+0xba>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d01c      	beq.n	8005706 <HAL_UART_AbortReceive+0x132>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80056d2:	2200      	movs	r2, #0
 80056d4:	639a      	str	r2, [r3, #56]	@ 0x38

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80056dc:	4618      	mov	r0, r3
 80056de:	f7fc f970 	bl	80019c2 <HAL_DMA_Abort>
 80056e2:	4603      	mov	r3, r0
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d00e      	beq.n	8005706 <HAL_UART_AbortReceive+0x132>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80056ee:	4618      	mov	r0, r3
 80056f0:	f7fc fad6 	bl	8001ca0 <HAL_DMA_GetError>
 80056f4:	4603      	mov	r3, r0
 80056f6:	2b20      	cmp	r3, #32
 80056f8:	d105      	bne.n	8005706 <HAL_UART_AbortReceive+0x132>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	2210      	movs	r2, #16
 80056fe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 8005702:	2303      	movs	r3, #3
 8005704:	e017      	b.n	8005736 <HAL_UART_AbortReceive+0x162>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0U;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2200      	movs	r2, #0
 800570a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	220f      	movs	r2, #15
 8005714:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	699a      	ldr	r2, [r3, #24]
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f042 0208 	orr.w	r2, r2, #8
 8005724:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2220      	movs	r2, #32
 800572a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2200      	movs	r2, #0
 8005732:	66da      	str	r2, [r3, #108]	@ 0x6c

  return HAL_OK;
 8005734:	2300      	movs	r3, #0
}
 8005736:	4618      	mov	r0, r3
 8005738:	3768      	adds	r7, #104	@ 0x68
 800573a:	46bd      	mov	sp, r7
 800573c:	bd80      	pop	{r7, pc}
	...

08005740 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005740:	b580      	push	{r7, lr}
 8005742:	b0ba      	sub	sp, #232	@ 0xe8
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	69db      	ldr	r3, [r3, #28]
 800574e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	689b      	ldr	r3, [r3, #8]
 8005762:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005766:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800576a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800576e:	4013      	ands	r3, r2
 8005770:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8005774:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005778:	2b00      	cmp	r3, #0
 800577a:	d11b      	bne.n	80057b4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800577c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005780:	f003 0320 	and.w	r3, r3, #32
 8005784:	2b00      	cmp	r3, #0
 8005786:	d015      	beq.n	80057b4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005788:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800578c:	f003 0320 	and.w	r3, r3, #32
 8005790:	2b00      	cmp	r3, #0
 8005792:	d105      	bne.n	80057a0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005794:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005798:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800579c:	2b00      	cmp	r3, #0
 800579e:	d009      	beq.n	80057b4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	f000 8312 	beq.w	8005dce <HAL_UART_IRQHandler+0x68e>
      {
        huart->RxISR(huart);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80057ae:	6878      	ldr	r0, [r7, #4]
 80057b0:	4798      	blx	r3
      }
      return;
 80057b2:	e30c      	b.n	8005dce <HAL_UART_IRQHandler+0x68e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80057b4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	f000 8129 	beq.w	8005a10 <HAL_UART_IRQHandler+0x2d0>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80057be:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80057c2:	4b90      	ldr	r3, [pc, #576]	@ (8005a04 <HAL_UART_IRQHandler+0x2c4>)
 80057c4:	4013      	ands	r3, r2
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d106      	bne.n	80057d8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80057ca:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80057ce:	4b8e      	ldr	r3, [pc, #568]	@ (8005a08 <HAL_UART_IRQHandler+0x2c8>)
 80057d0:	4013      	ands	r3, r2
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	f000 811c 	beq.w	8005a10 <HAL_UART_IRQHandler+0x2d0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80057d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80057dc:	f003 0301 	and.w	r3, r3, #1
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d011      	beq.n	8005808 <HAL_UART_IRQHandler+0xc8>
 80057e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80057e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d00b      	beq.n	8005808 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	2201      	movs	r2, #1
 80057f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057fe:	f043 0201 	orr.w	r2, r3, #1
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005808:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800580c:	f003 0302 	and.w	r3, r3, #2
 8005810:	2b00      	cmp	r3, #0
 8005812:	d011      	beq.n	8005838 <HAL_UART_IRQHandler+0xf8>
 8005814:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005818:	f003 0301 	and.w	r3, r3, #1
 800581c:	2b00      	cmp	r3, #0
 800581e:	d00b      	beq.n	8005838 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	2202      	movs	r2, #2
 8005826:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800582e:	f043 0204 	orr.w	r2, r3, #4
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005838:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800583c:	f003 0304 	and.w	r3, r3, #4
 8005840:	2b00      	cmp	r3, #0
 8005842:	d011      	beq.n	8005868 <HAL_UART_IRQHandler+0x128>
 8005844:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005848:	f003 0301 	and.w	r3, r3, #1
 800584c:	2b00      	cmp	r3, #0
 800584e:	d00b      	beq.n	8005868 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	2204      	movs	r2, #4
 8005856:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800585e:	f043 0202 	orr.w	r2, r3, #2
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005868:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800586c:	f003 0308 	and.w	r3, r3, #8
 8005870:	2b00      	cmp	r3, #0
 8005872:	d017      	beq.n	80058a4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005874:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005878:	f003 0320 	and.w	r3, r3, #32
 800587c:	2b00      	cmp	r3, #0
 800587e:	d105      	bne.n	800588c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005880:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8005884:	4b5f      	ldr	r3, [pc, #380]	@ (8005a04 <HAL_UART_IRQHandler+0x2c4>)
 8005886:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005888:	2b00      	cmp	r3, #0
 800588a:	d00b      	beq.n	80058a4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	2208      	movs	r2, #8
 8005892:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800589a:	f043 0208 	orr.w	r2, r3, #8
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80058a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80058a8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d012      	beq.n	80058d6 <HAL_UART_IRQHandler+0x196>
 80058b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80058b4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d00c      	beq.n	80058d6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80058c4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058cc:	f043 0220 	orr.w	r2, r3, #32
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058dc:	2b00      	cmp	r3, #0
 80058de:	f000 8278 	beq.w	8005dd2 <HAL_UART_IRQHandler+0x692>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80058e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80058e6:	f003 0320 	and.w	r3, r3, #32
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d013      	beq.n	8005916 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80058ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80058f2:	f003 0320 	and.w	r3, r3, #32
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d105      	bne.n	8005906 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80058fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80058fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005902:	2b00      	cmp	r3, #0
 8005904:	d007      	beq.n	8005916 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800590a:	2b00      	cmp	r3, #0
 800590c:	d003      	beq.n	8005916 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005912:	6878      	ldr	r0, [r7, #4]
 8005914:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800591c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	689b      	ldr	r3, [r3, #8]
 8005926:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800592a:	2b40      	cmp	r3, #64	@ 0x40
 800592c:	d005      	beq.n	800593a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800592e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005932:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005936:	2b00      	cmp	r3, #0
 8005938:	d058      	beq.n	80059ec <HAL_UART_IRQHandler+0x2ac>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800593a:	6878      	ldr	r0, [r7, #4]
 800593c:	f001 f91b 	bl	8006b76 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	689b      	ldr	r3, [r3, #8]
 8005946:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800594a:	2b40      	cmp	r3, #64	@ 0x40
 800594c:	d148      	bne.n	80059e0 <HAL_UART_IRQHandler+0x2a0>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	3308      	adds	r3, #8
 8005954:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005958:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800595c:	e853 3f00 	ldrex	r3, [r3]
 8005960:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005964:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005968:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800596c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	3308      	adds	r3, #8
 8005976:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800597a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800597e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005982:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005986:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800598a:	e841 2300 	strex	r3, r2, [r1]
 800598e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005992:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005996:	2b00      	cmp	r3, #0
 8005998:	d1d9      	bne.n	800594e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d017      	beq.n	80059d4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80059aa:	4a18      	ldr	r2, [pc, #96]	@ (8005a0c <HAL_UART_IRQHandler+0x2cc>)
 80059ac:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80059b4:	4618      	mov	r0, r3
 80059b6:	f7fc f85d 	bl	8001a74 <HAL_DMA_Abort_IT>
 80059ba:	4603      	mov	r3, r0
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d01f      	beq.n	8005a00 <HAL_UART_IRQHandler+0x2c0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80059c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059c8:	687a      	ldr	r2, [r7, #4]
 80059ca:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80059ce:	4610      	mov	r0, r2
 80059d0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059d2:	e015      	b.n	8005a00 <HAL_UART_IRQHandler+0x2c0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80059da:	6878      	ldr	r0, [r7, #4]
 80059dc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059de:	e00f      	b.n	8005a00 <HAL_UART_IRQHandler+0x2c0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80059e6:	6878      	ldr	r0, [r7, #4]
 80059e8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059ea:	e009      	b.n	8005a00 <HAL_UART_IRQHandler+0x2c0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80059f2:	6878      	ldr	r0, [r7, #4]
 80059f4:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2200      	movs	r2, #0
 80059fa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80059fe:	e1e8      	b.n	8005dd2 <HAL_UART_IRQHandler+0x692>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a00:	bf00      	nop
    return;
 8005a02:	e1e6      	b.n	8005dd2 <HAL_UART_IRQHandler+0x692>
 8005a04:	10000001 	.word	0x10000001
 8005a08:	04000120 	.word	0x04000120
 8005a0c:	08006d85 	.word	0x08006d85

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005a14:	2b01      	cmp	r3, #1
 8005a16:	f040 8176 	bne.w	8005d06 <HAL_UART_IRQHandler+0x5c6>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005a1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a1e:	f003 0310 	and.w	r3, r3, #16
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	f000 816f 	beq.w	8005d06 <HAL_UART_IRQHandler+0x5c6>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005a28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005a2c:	f003 0310 	and.w	r3, r3, #16
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	f000 8168 	beq.w	8005d06 <HAL_UART_IRQHandler+0x5c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	2210      	movs	r2, #16
 8005a3c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	689b      	ldr	r3, [r3, #8]
 8005a44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a48:	2b40      	cmp	r3, #64	@ 0x40
 8005a4a:	f040 80dc 	bne.w	8005c06 <HAL_UART_IRQHandler+0x4c6>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	685b      	ldr	r3, [r3, #4]
 8005a58:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005a5c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	f000 80b1 	beq.w	8005bc8 <HAL_UART_IRQHandler+0x488>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005a6c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005a70:	429a      	cmp	r2, r3
 8005a72:	f080 80a9 	bcs.w	8005bc8 <HAL_UART_IRQHandler+0x488>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005a7c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f003 0320 	and.w	r3, r3, #32
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	f040 8087 	bne.w	8005ba2 <HAL_UART_IRQHandler+0x462>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a9c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005aa0:	e853 3f00 	ldrex	r3, [r3]
 8005aa4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005aa8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005aac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005ab0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	461a      	mov	r2, r3
 8005aba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005abe:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005ac2:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ac6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005aca:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005ace:	e841 2300 	strex	r3, r2, [r1]
 8005ad2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005ad6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d1da      	bne.n	8005a94 <HAL_UART_IRQHandler+0x354>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	3308      	adds	r3, #8
 8005ae4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ae6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005ae8:	e853 3f00 	ldrex	r3, [r3]
 8005aec:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005aee:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005af0:	f023 0301 	bic.w	r3, r3, #1
 8005af4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	3308      	adds	r3, #8
 8005afe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005b02:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005b06:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b08:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005b0a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005b0e:	e841 2300 	strex	r3, r2, [r1]
 8005b12:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005b14:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d1e1      	bne.n	8005ade <HAL_UART_IRQHandler+0x39e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	3308      	adds	r3, #8
 8005b20:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b22:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005b24:	e853 3f00 	ldrex	r3, [r3]
 8005b28:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005b2a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005b2c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005b30:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	3308      	adds	r3, #8
 8005b3a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005b3e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005b40:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b42:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005b44:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005b46:	e841 2300 	strex	r3, r2, [r1]
 8005b4a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005b4c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d1e3      	bne.n	8005b1a <HAL_UART_IRQHandler+0x3da>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2220      	movs	r2, #32
 8005b56:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b66:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005b68:	e853 3f00 	ldrex	r3, [r3]
 8005b6c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005b6e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005b70:	f023 0310 	bic.w	r3, r3, #16
 8005b74:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	461a      	mov	r2, r3
 8005b7e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005b82:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005b84:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b86:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005b88:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005b8a:	e841 2300 	strex	r3, r2, [r1]
 8005b8e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005b90:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d1e4      	bne.n	8005b60 <HAL_UART_IRQHandler+0x420>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	f7fb ff10 	bl	80019c2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	2202      	movs	r2, #2
 8005ba6:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8005bae:	687a      	ldr	r2, [r7, #4]
 8005bb0:	f8b2 105c 	ldrh.w	r1, [r2, #92]	@ 0x5c
 8005bb4:	687a      	ldr	r2, [r7, #4]
 8005bb6:	f8b2 205e 	ldrh.w	r2, [r2, #94]	@ 0x5e
 8005bba:	b292      	uxth	r2, r2
 8005bbc:	1a8a      	subs	r2, r1, r2
 8005bbe:	b292      	uxth	r2, r2
 8005bc0:	4611      	mov	r1, r2
 8005bc2:	6878      	ldr	r0, [r7, #4]
 8005bc4:	4798      	blx	r3
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8005bc6:	e106      	b.n	8005dd6 <HAL_UART_IRQHandler+0x696>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005bce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005bd2:	429a      	cmp	r2, r3
 8005bd4:	f040 80ff 	bne.w	8005dd6 <HAL_UART_IRQHandler+0x696>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f003 0320 	and.w	r3, r3, #32
 8005be6:	2b20      	cmp	r3, #32
 8005be8:	f040 80f5 	bne.w	8005dd6 <HAL_UART_IRQHandler+0x696>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2202      	movs	r2, #2
 8005bf0:	671a      	str	r2, [r3, #112]	@ 0x70
            huart->RxEventCallback(huart, huart->RxXferSize);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8005bf8:	687a      	ldr	r2, [r7, #4]
 8005bfa:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 8005bfe:	4611      	mov	r1, r2
 8005c00:	6878      	ldr	r0, [r7, #4]
 8005c02:	4798      	blx	r3
      return;
 8005c04:	e0e7      	b.n	8005dd6 <HAL_UART_IRQHandler+0x696>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005c12:	b29b      	uxth	r3, r3
 8005c14:	1ad3      	subs	r3, r2, r3
 8005c16:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005c20:	b29b      	uxth	r3, r3
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	f000 80d9 	beq.w	8005dda <HAL_UART_IRQHandler+0x69a>
          && (nb_rx_data > 0U))
 8005c28:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	f000 80d4 	beq.w	8005dda <HAL_UART_IRQHandler+0x69a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c3a:	e853 3f00 	ldrex	r3, [r3]
 8005c3e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005c40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c42:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005c46:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	461a      	mov	r2, r3
 8005c50:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005c54:	647b      	str	r3, [r7, #68]	@ 0x44
 8005c56:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c58:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005c5a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005c5c:	e841 2300 	strex	r3, r2, [r1]
 8005c60:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005c62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d1e4      	bne.n	8005c32 <HAL_UART_IRQHandler+0x4f2>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	3308      	adds	r3, #8
 8005c6e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c72:	e853 3f00 	ldrex	r3, [r3]
 8005c76:	623b      	str	r3, [r7, #32]
   return(result);
 8005c78:	6a3b      	ldr	r3, [r7, #32]
 8005c7a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005c7e:	f023 0301 	bic.w	r3, r3, #1
 8005c82:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	3308      	adds	r3, #8
 8005c8c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005c90:	633a      	str	r2, [r7, #48]	@ 0x30
 8005c92:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c94:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005c96:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005c98:	e841 2300 	strex	r3, r2, [r1]
 8005c9c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005c9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d1e1      	bne.n	8005c68 <HAL_UART_IRQHandler+0x528>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2220      	movs	r2, #32
 8005ca8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2200      	movs	r2, #0
 8005cb0:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cbe:	693b      	ldr	r3, [r7, #16]
 8005cc0:	e853 3f00 	ldrex	r3, [r3]
 8005cc4:	60fb      	str	r3, [r7, #12]
   return(result);
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	f023 0310 	bic.w	r3, r3, #16
 8005ccc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	461a      	mov	r2, r3
 8005cd6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005cda:	61fb      	str	r3, [r7, #28]
 8005cdc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cde:	69b9      	ldr	r1, [r7, #24]
 8005ce0:	69fa      	ldr	r2, [r7, #28]
 8005ce2:	e841 2300 	strex	r3, r2, [r1]
 8005ce6:	617b      	str	r3, [r7, #20]
   return(result);
 8005ce8:	697b      	ldr	r3, [r7, #20]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d1e4      	bne.n	8005cb8 <HAL_UART_IRQHandler+0x578>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2202      	movs	r2, #2
 8005cf2:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8005cfa:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	@ 0xce
 8005cfe:	4611      	mov	r1, r2
 8005d00:	6878      	ldr	r0, [r7, #4]
 8005d02:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005d04:	e069      	b.n	8005dda <HAL_UART_IRQHandler+0x69a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005d06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d0a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d010      	beq.n	8005d34 <HAL_UART_IRQHandler+0x5f4>
 8005d12:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005d16:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d00a      	beq.n	8005d34 <HAL_UART_IRQHandler+0x5f4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8005d26:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005d2e:	6878      	ldr	r0, [r7, #4]
 8005d30:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005d32:	e055      	b.n	8005de0 <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005d34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d38:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d014      	beq.n	8005d6a <HAL_UART_IRQHandler+0x62a>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005d40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005d44:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d105      	bne.n	8005d58 <HAL_UART_IRQHandler+0x618>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005d4c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005d50:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d008      	beq.n	8005d6a <HAL_UART_IRQHandler+0x62a>
  {
    if (huart->TxISR != NULL)
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d03e      	beq.n	8005dde <HAL_UART_IRQHandler+0x69e>
    {
      huart->TxISR(huart);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005d64:	6878      	ldr	r0, [r7, #4]
 8005d66:	4798      	blx	r3
    }
    return;
 8005d68:	e039      	b.n	8005dde <HAL_UART_IRQHandler+0x69e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005d6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d009      	beq.n	8005d8a <HAL_UART_IRQHandler+0x64a>
 8005d76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005d7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d003      	beq.n	8005d8a <HAL_UART_IRQHandler+0x64a>
  {
    UART_EndTransmit_IT(huart);
 8005d82:	6878      	ldr	r0, [r7, #4]
 8005d84:	f001 f812 	bl	8006dac <UART_EndTransmit_IT>
    return;
 8005d88:	e02a      	b.n	8005de0 <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005d8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d8e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d00b      	beq.n	8005dae <HAL_UART_IRQHandler+0x66e>
 8005d96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005d9a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d005      	beq.n	8005dae <HAL_UART_IRQHandler+0x66e>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8005da8:	6878      	ldr	r0, [r7, #4]
 8005daa:	4798      	blx	r3
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005dac:	e018      	b.n	8005de0 <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005dae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005db2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d012      	beq.n	8005de0 <HAL_UART_IRQHandler+0x6a0>
 8005dba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	da0e      	bge.n	8005de0 <HAL_UART_IRQHandler+0x6a0>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005dc8:	6878      	ldr	r0, [r7, #4]
 8005dca:	4798      	blx	r3
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005dcc:	e008      	b.n	8005de0 <HAL_UART_IRQHandler+0x6a0>
      return;
 8005dce:	bf00      	nop
 8005dd0:	e006      	b.n	8005de0 <HAL_UART_IRQHandler+0x6a0>
    return;
 8005dd2:	bf00      	nop
 8005dd4:	e004      	b.n	8005de0 <HAL_UART_IRQHandler+0x6a0>
      return;
 8005dd6:	bf00      	nop
 8005dd8:	e002      	b.n	8005de0 <HAL_UART_IRQHandler+0x6a0>
      return;
 8005dda:	bf00      	nop
 8005ddc:	e000      	b.n	8005de0 <HAL_UART_IRQHandler+0x6a0>
    return;
 8005dde:	bf00      	nop
  }
}
 8005de0:	37e8      	adds	r7, #232	@ 0xe8
 8005de2:	46bd      	mov	sp, r7
 8005de4:	bd80      	pop	{r7, pc}
 8005de6:	bf00      	nop

08005de8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005de8:	b480      	push	{r7}
 8005dea:	b083      	sub	sp, #12
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005df0:	bf00      	nop
 8005df2:	370c      	adds	r7, #12
 8005df4:	46bd      	mov	sp, r7
 8005df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfa:	4770      	bx	lr

08005dfc <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005dfc:	b480      	push	{r7}
 8005dfe:	b083      	sub	sp, #12
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8005e04:	bf00      	nop
 8005e06:	370c      	adds	r7, #12
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0e:	4770      	bx	lr

08005e10 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005e10:	b480      	push	{r7}
 8005e12:	b083      	sub	sp, #12
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8005e18:	bf00      	nop
 8005e1a:	370c      	adds	r7, #12
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e22:	4770      	bx	lr

08005e24 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005e24:	b480      	push	{r7}
 8005e26:	b083      	sub	sp, #12
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8005e2c:	bf00      	nop
 8005e2e:	370c      	adds	r7, #12
 8005e30:	46bd      	mov	sp, r7
 8005e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e36:	4770      	bx	lr

08005e38 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005e38:	b480      	push	{r7}
 8005e3a:	b083      	sub	sp, #12
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005e40:	bf00      	nop
 8005e42:	370c      	adds	r7, #12
 8005e44:	46bd      	mov	sp, r7
 8005e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4a:	4770      	bx	lr

08005e4c <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8005e4c:	b480      	push	{r7}
 8005e4e:	b083      	sub	sp, #12
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8005e54:	bf00      	nop
 8005e56:	370c      	adds	r7, #12
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5e:	4770      	bx	lr

08005e60 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8005e60:	b480      	push	{r7}
 8005e62:	b083      	sub	sp, #12
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8005e68:	bf00      	nop
 8005e6a:	370c      	adds	r7, #12
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e72:	4770      	bx	lr

08005e74 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8005e74:	b480      	push	{r7}
 8005e76:	b083      	sub	sp, #12
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8005e7c:	bf00      	nop
 8005e7e:	370c      	adds	r7, #12
 8005e80:	46bd      	mov	sp, r7
 8005e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e86:	4770      	bx	lr

08005e88 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005e88:	b480      	push	{r7}
 8005e8a:	b083      	sub	sp, #12
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
 8005e90:	460b      	mov	r3, r1
 8005e92:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005e94:	bf00      	nop
 8005e96:	370c      	adds	r7, #12
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9e:	4770      	bx	lr

08005ea0 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8005ea0:	b480      	push	{r7}
 8005ea2:	b083      	sub	sp, #12
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	4a1a      	ldr	r2, [pc, #104]	@ (8005f14 <UART_InitCallbacksToDefault+0x74>)
 8005eac:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	4a19      	ldr	r2, [pc, #100]	@ (8005f18 <UART_InitCallbacksToDefault+0x78>)
 8005eb4:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	4a18      	ldr	r2, [pc, #96]	@ (8005f1c <UART_InitCallbacksToDefault+0x7c>)
 8005ebc:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	4a17      	ldr	r2, [pc, #92]	@ (8005f20 <UART_InitCallbacksToDefault+0x80>)
 8005ec4:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	4a16      	ldr	r2, [pc, #88]	@ (8005f24 <UART_InitCallbacksToDefault+0x84>)
 8005ecc:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	4a15      	ldr	r2, [pc, #84]	@ (8005f28 <UART_InitCallbacksToDefault+0x88>)
 8005ed4:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	4a14      	ldr	r2, [pc, #80]	@ (8005f2c <UART_InitCallbacksToDefault+0x8c>)
 8005edc:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	4a13      	ldr	r2, [pc, #76]	@ (8005f30 <UART_InitCallbacksToDefault+0x90>)
 8005ee4:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	4a12      	ldr	r2, [pc, #72]	@ (8005f34 <UART_InitCallbacksToDefault+0x94>)
 8005eec:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	4a11      	ldr	r2, [pc, #68]	@ (8005f38 <UART_InitCallbacksToDefault+0x98>)
 8005ef4:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	4a10      	ldr	r2, [pc, #64]	@ (8005f3c <UART_InitCallbacksToDefault+0x9c>)
 8005efc:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	4a0f      	ldr	r2, [pc, #60]	@ (8005f40 <UART_InitCallbacksToDefault+0xa0>)
 8005f04:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

}
 8005f08:	bf00      	nop
 8005f0a:	370c      	adds	r7, #12
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f12:	4770      	bx	lr
 8005f14:	08005dfd 	.word	0x08005dfd
 8005f18:	08005de9 	.word	0x08005de9
 8005f1c:	08005e25 	.word	0x08005e25
 8005f20:	08005e11 	.word	0x08005e11
 8005f24:	08005e39 	.word	0x08005e39
 8005f28:	08005e4d 	.word	0x08005e4d
 8005f2c:	08005e61 	.word	0x08005e61
 8005f30:	08005e75 	.word	0x08005e75
 8005f34:	08007871 	.word	0x08007871
 8005f38:	08007885 	.word	0x08007885
 8005f3c:	08007899 	.word	0x08007899
 8005f40:	08005e89 	.word	0x08005e89

08005f44 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005f44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005f48:	b08c      	sub	sp, #48	@ 0x30
 8005f4a:	af00      	add	r7, sp, #0
 8005f4c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005f4e:	2300      	movs	r3, #0
 8005f50:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005f54:	697b      	ldr	r3, [r7, #20]
 8005f56:	689a      	ldr	r2, [r3, #8]
 8005f58:	697b      	ldr	r3, [r7, #20]
 8005f5a:	691b      	ldr	r3, [r3, #16]
 8005f5c:	431a      	orrs	r2, r3
 8005f5e:	697b      	ldr	r3, [r7, #20]
 8005f60:	695b      	ldr	r3, [r3, #20]
 8005f62:	431a      	orrs	r2, r3
 8005f64:	697b      	ldr	r3, [r7, #20]
 8005f66:	69db      	ldr	r3, [r3, #28]
 8005f68:	4313      	orrs	r3, r2
 8005f6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005f6c:	697b      	ldr	r3, [r7, #20]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	681a      	ldr	r2, [r3, #0]
 8005f72:	4baa      	ldr	r3, [pc, #680]	@ (800621c <UART_SetConfig+0x2d8>)
 8005f74:	4013      	ands	r3, r2
 8005f76:	697a      	ldr	r2, [r7, #20]
 8005f78:	6812      	ldr	r2, [r2, #0]
 8005f7a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005f7c:	430b      	orrs	r3, r1
 8005f7e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005f80:	697b      	ldr	r3, [r7, #20]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	685b      	ldr	r3, [r3, #4]
 8005f86:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005f8a:	697b      	ldr	r3, [r7, #20]
 8005f8c:	68da      	ldr	r2, [r3, #12]
 8005f8e:	697b      	ldr	r3, [r7, #20]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	430a      	orrs	r2, r1
 8005f94:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005f96:	697b      	ldr	r3, [r7, #20]
 8005f98:	699b      	ldr	r3, [r3, #24]
 8005f9a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005f9c:	697b      	ldr	r3, [r7, #20]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	4a9f      	ldr	r2, [pc, #636]	@ (8006220 <UART_SetConfig+0x2dc>)
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d004      	beq.n	8005fb0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005fa6:	697b      	ldr	r3, [r7, #20]
 8005fa8:	6a1b      	ldr	r3, [r3, #32]
 8005faa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005fac:	4313      	orrs	r3, r2
 8005fae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005fb0:	697b      	ldr	r3, [r7, #20]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	689b      	ldr	r3, [r3, #8]
 8005fb6:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8005fba:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8005fbe:	697a      	ldr	r2, [r7, #20]
 8005fc0:	6812      	ldr	r2, [r2, #0]
 8005fc2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005fc4:	430b      	orrs	r3, r1
 8005fc6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005fc8:	697b      	ldr	r3, [r7, #20]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fce:	f023 010f 	bic.w	r1, r3, #15
 8005fd2:	697b      	ldr	r3, [r7, #20]
 8005fd4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005fd6:	697b      	ldr	r3, [r7, #20]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	430a      	orrs	r2, r1
 8005fdc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005fde:	697b      	ldr	r3, [r7, #20]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	4a90      	ldr	r2, [pc, #576]	@ (8006224 <UART_SetConfig+0x2e0>)
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	d125      	bne.n	8006034 <UART_SetConfig+0xf0>
 8005fe8:	4b8f      	ldr	r3, [pc, #572]	@ (8006228 <UART_SetConfig+0x2e4>)
 8005fea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005fee:	f003 0303 	and.w	r3, r3, #3
 8005ff2:	2b03      	cmp	r3, #3
 8005ff4:	d81a      	bhi.n	800602c <UART_SetConfig+0xe8>
 8005ff6:	a201      	add	r2, pc, #4	@ (adr r2, 8005ffc <UART_SetConfig+0xb8>)
 8005ff8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ffc:	0800600d 	.word	0x0800600d
 8006000:	0800601d 	.word	0x0800601d
 8006004:	08006015 	.word	0x08006015
 8006008:	08006025 	.word	0x08006025
 800600c:	2301      	movs	r3, #1
 800600e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006012:	e116      	b.n	8006242 <UART_SetConfig+0x2fe>
 8006014:	2302      	movs	r3, #2
 8006016:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800601a:	e112      	b.n	8006242 <UART_SetConfig+0x2fe>
 800601c:	2304      	movs	r3, #4
 800601e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006022:	e10e      	b.n	8006242 <UART_SetConfig+0x2fe>
 8006024:	2308      	movs	r3, #8
 8006026:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800602a:	e10a      	b.n	8006242 <UART_SetConfig+0x2fe>
 800602c:	2310      	movs	r3, #16
 800602e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006032:	e106      	b.n	8006242 <UART_SetConfig+0x2fe>
 8006034:	697b      	ldr	r3, [r7, #20]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	4a7c      	ldr	r2, [pc, #496]	@ (800622c <UART_SetConfig+0x2e8>)
 800603a:	4293      	cmp	r3, r2
 800603c:	d138      	bne.n	80060b0 <UART_SetConfig+0x16c>
 800603e:	4b7a      	ldr	r3, [pc, #488]	@ (8006228 <UART_SetConfig+0x2e4>)
 8006040:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006044:	f003 030c 	and.w	r3, r3, #12
 8006048:	2b0c      	cmp	r3, #12
 800604a:	d82d      	bhi.n	80060a8 <UART_SetConfig+0x164>
 800604c:	a201      	add	r2, pc, #4	@ (adr r2, 8006054 <UART_SetConfig+0x110>)
 800604e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006052:	bf00      	nop
 8006054:	08006089 	.word	0x08006089
 8006058:	080060a9 	.word	0x080060a9
 800605c:	080060a9 	.word	0x080060a9
 8006060:	080060a9 	.word	0x080060a9
 8006064:	08006099 	.word	0x08006099
 8006068:	080060a9 	.word	0x080060a9
 800606c:	080060a9 	.word	0x080060a9
 8006070:	080060a9 	.word	0x080060a9
 8006074:	08006091 	.word	0x08006091
 8006078:	080060a9 	.word	0x080060a9
 800607c:	080060a9 	.word	0x080060a9
 8006080:	080060a9 	.word	0x080060a9
 8006084:	080060a1 	.word	0x080060a1
 8006088:	2300      	movs	r3, #0
 800608a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800608e:	e0d8      	b.n	8006242 <UART_SetConfig+0x2fe>
 8006090:	2302      	movs	r3, #2
 8006092:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006096:	e0d4      	b.n	8006242 <UART_SetConfig+0x2fe>
 8006098:	2304      	movs	r3, #4
 800609a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800609e:	e0d0      	b.n	8006242 <UART_SetConfig+0x2fe>
 80060a0:	2308      	movs	r3, #8
 80060a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80060a6:	e0cc      	b.n	8006242 <UART_SetConfig+0x2fe>
 80060a8:	2310      	movs	r3, #16
 80060aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80060ae:	e0c8      	b.n	8006242 <UART_SetConfig+0x2fe>
 80060b0:	697b      	ldr	r3, [r7, #20]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	4a5e      	ldr	r2, [pc, #376]	@ (8006230 <UART_SetConfig+0x2ec>)
 80060b6:	4293      	cmp	r3, r2
 80060b8:	d125      	bne.n	8006106 <UART_SetConfig+0x1c2>
 80060ba:	4b5b      	ldr	r3, [pc, #364]	@ (8006228 <UART_SetConfig+0x2e4>)
 80060bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060c0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80060c4:	2b30      	cmp	r3, #48	@ 0x30
 80060c6:	d016      	beq.n	80060f6 <UART_SetConfig+0x1b2>
 80060c8:	2b30      	cmp	r3, #48	@ 0x30
 80060ca:	d818      	bhi.n	80060fe <UART_SetConfig+0x1ba>
 80060cc:	2b20      	cmp	r3, #32
 80060ce:	d00a      	beq.n	80060e6 <UART_SetConfig+0x1a2>
 80060d0:	2b20      	cmp	r3, #32
 80060d2:	d814      	bhi.n	80060fe <UART_SetConfig+0x1ba>
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d002      	beq.n	80060de <UART_SetConfig+0x19a>
 80060d8:	2b10      	cmp	r3, #16
 80060da:	d008      	beq.n	80060ee <UART_SetConfig+0x1aa>
 80060dc:	e00f      	b.n	80060fe <UART_SetConfig+0x1ba>
 80060de:	2300      	movs	r3, #0
 80060e0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80060e4:	e0ad      	b.n	8006242 <UART_SetConfig+0x2fe>
 80060e6:	2302      	movs	r3, #2
 80060e8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80060ec:	e0a9      	b.n	8006242 <UART_SetConfig+0x2fe>
 80060ee:	2304      	movs	r3, #4
 80060f0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80060f4:	e0a5      	b.n	8006242 <UART_SetConfig+0x2fe>
 80060f6:	2308      	movs	r3, #8
 80060f8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80060fc:	e0a1      	b.n	8006242 <UART_SetConfig+0x2fe>
 80060fe:	2310      	movs	r3, #16
 8006100:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006104:	e09d      	b.n	8006242 <UART_SetConfig+0x2fe>
 8006106:	697b      	ldr	r3, [r7, #20]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	4a4a      	ldr	r2, [pc, #296]	@ (8006234 <UART_SetConfig+0x2f0>)
 800610c:	4293      	cmp	r3, r2
 800610e:	d125      	bne.n	800615c <UART_SetConfig+0x218>
 8006110:	4b45      	ldr	r3, [pc, #276]	@ (8006228 <UART_SetConfig+0x2e4>)
 8006112:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006116:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800611a:	2bc0      	cmp	r3, #192	@ 0xc0
 800611c:	d016      	beq.n	800614c <UART_SetConfig+0x208>
 800611e:	2bc0      	cmp	r3, #192	@ 0xc0
 8006120:	d818      	bhi.n	8006154 <UART_SetConfig+0x210>
 8006122:	2b80      	cmp	r3, #128	@ 0x80
 8006124:	d00a      	beq.n	800613c <UART_SetConfig+0x1f8>
 8006126:	2b80      	cmp	r3, #128	@ 0x80
 8006128:	d814      	bhi.n	8006154 <UART_SetConfig+0x210>
 800612a:	2b00      	cmp	r3, #0
 800612c:	d002      	beq.n	8006134 <UART_SetConfig+0x1f0>
 800612e:	2b40      	cmp	r3, #64	@ 0x40
 8006130:	d008      	beq.n	8006144 <UART_SetConfig+0x200>
 8006132:	e00f      	b.n	8006154 <UART_SetConfig+0x210>
 8006134:	2300      	movs	r3, #0
 8006136:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800613a:	e082      	b.n	8006242 <UART_SetConfig+0x2fe>
 800613c:	2302      	movs	r3, #2
 800613e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006142:	e07e      	b.n	8006242 <UART_SetConfig+0x2fe>
 8006144:	2304      	movs	r3, #4
 8006146:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800614a:	e07a      	b.n	8006242 <UART_SetConfig+0x2fe>
 800614c:	2308      	movs	r3, #8
 800614e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006152:	e076      	b.n	8006242 <UART_SetConfig+0x2fe>
 8006154:	2310      	movs	r3, #16
 8006156:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800615a:	e072      	b.n	8006242 <UART_SetConfig+0x2fe>
 800615c:	697b      	ldr	r3, [r7, #20]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	4a35      	ldr	r2, [pc, #212]	@ (8006238 <UART_SetConfig+0x2f4>)
 8006162:	4293      	cmp	r3, r2
 8006164:	d12a      	bne.n	80061bc <UART_SetConfig+0x278>
 8006166:	4b30      	ldr	r3, [pc, #192]	@ (8006228 <UART_SetConfig+0x2e4>)
 8006168:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800616c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006170:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006174:	d01a      	beq.n	80061ac <UART_SetConfig+0x268>
 8006176:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800617a:	d81b      	bhi.n	80061b4 <UART_SetConfig+0x270>
 800617c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006180:	d00c      	beq.n	800619c <UART_SetConfig+0x258>
 8006182:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006186:	d815      	bhi.n	80061b4 <UART_SetConfig+0x270>
 8006188:	2b00      	cmp	r3, #0
 800618a:	d003      	beq.n	8006194 <UART_SetConfig+0x250>
 800618c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006190:	d008      	beq.n	80061a4 <UART_SetConfig+0x260>
 8006192:	e00f      	b.n	80061b4 <UART_SetConfig+0x270>
 8006194:	2300      	movs	r3, #0
 8006196:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800619a:	e052      	b.n	8006242 <UART_SetConfig+0x2fe>
 800619c:	2302      	movs	r3, #2
 800619e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80061a2:	e04e      	b.n	8006242 <UART_SetConfig+0x2fe>
 80061a4:	2304      	movs	r3, #4
 80061a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80061aa:	e04a      	b.n	8006242 <UART_SetConfig+0x2fe>
 80061ac:	2308      	movs	r3, #8
 80061ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80061b2:	e046      	b.n	8006242 <UART_SetConfig+0x2fe>
 80061b4:	2310      	movs	r3, #16
 80061b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80061ba:	e042      	b.n	8006242 <UART_SetConfig+0x2fe>
 80061bc:	697b      	ldr	r3, [r7, #20]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	4a17      	ldr	r2, [pc, #92]	@ (8006220 <UART_SetConfig+0x2dc>)
 80061c2:	4293      	cmp	r3, r2
 80061c4:	d13a      	bne.n	800623c <UART_SetConfig+0x2f8>
 80061c6:	4b18      	ldr	r3, [pc, #96]	@ (8006228 <UART_SetConfig+0x2e4>)
 80061c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80061cc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80061d0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80061d4:	d01a      	beq.n	800620c <UART_SetConfig+0x2c8>
 80061d6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80061da:	d81b      	bhi.n	8006214 <UART_SetConfig+0x2d0>
 80061dc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80061e0:	d00c      	beq.n	80061fc <UART_SetConfig+0x2b8>
 80061e2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80061e6:	d815      	bhi.n	8006214 <UART_SetConfig+0x2d0>
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d003      	beq.n	80061f4 <UART_SetConfig+0x2b0>
 80061ec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80061f0:	d008      	beq.n	8006204 <UART_SetConfig+0x2c0>
 80061f2:	e00f      	b.n	8006214 <UART_SetConfig+0x2d0>
 80061f4:	2300      	movs	r3, #0
 80061f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80061fa:	e022      	b.n	8006242 <UART_SetConfig+0x2fe>
 80061fc:	2302      	movs	r3, #2
 80061fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006202:	e01e      	b.n	8006242 <UART_SetConfig+0x2fe>
 8006204:	2304      	movs	r3, #4
 8006206:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800620a:	e01a      	b.n	8006242 <UART_SetConfig+0x2fe>
 800620c:	2308      	movs	r3, #8
 800620e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006212:	e016      	b.n	8006242 <UART_SetConfig+0x2fe>
 8006214:	2310      	movs	r3, #16
 8006216:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800621a:	e012      	b.n	8006242 <UART_SetConfig+0x2fe>
 800621c:	cfff69f3 	.word	0xcfff69f3
 8006220:	40008000 	.word	0x40008000
 8006224:	40013800 	.word	0x40013800
 8006228:	40021000 	.word	0x40021000
 800622c:	40004400 	.word	0x40004400
 8006230:	40004800 	.word	0x40004800
 8006234:	40004c00 	.word	0x40004c00
 8006238:	40005000 	.word	0x40005000
 800623c:	2310      	movs	r3, #16
 800623e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006242:	697b      	ldr	r3, [r7, #20]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	4aae      	ldr	r2, [pc, #696]	@ (8006500 <UART_SetConfig+0x5bc>)
 8006248:	4293      	cmp	r3, r2
 800624a:	f040 8097 	bne.w	800637c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800624e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006252:	2b08      	cmp	r3, #8
 8006254:	d823      	bhi.n	800629e <UART_SetConfig+0x35a>
 8006256:	a201      	add	r2, pc, #4	@ (adr r2, 800625c <UART_SetConfig+0x318>)
 8006258:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800625c:	08006281 	.word	0x08006281
 8006260:	0800629f 	.word	0x0800629f
 8006264:	08006289 	.word	0x08006289
 8006268:	0800629f 	.word	0x0800629f
 800626c:	0800628f 	.word	0x0800628f
 8006270:	0800629f 	.word	0x0800629f
 8006274:	0800629f 	.word	0x0800629f
 8006278:	0800629f 	.word	0x0800629f
 800627c:	08006297 	.word	0x08006297
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006280:	f7fc fcd0 	bl	8002c24 <HAL_RCC_GetPCLK1Freq>
 8006284:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006286:	e010      	b.n	80062aa <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006288:	4b9e      	ldr	r3, [pc, #632]	@ (8006504 <UART_SetConfig+0x5c0>)
 800628a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800628c:	e00d      	b.n	80062aa <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800628e:	f7fc fc5b 	bl	8002b48 <HAL_RCC_GetSysClockFreq>
 8006292:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006294:	e009      	b.n	80062aa <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006296:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800629a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800629c:	e005      	b.n	80062aa <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800629e:	2300      	movs	r3, #0
 80062a0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80062a2:	2301      	movs	r3, #1
 80062a4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80062a8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80062aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	f000 8130 	beq.w	8006512 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80062b2:	697b      	ldr	r3, [r7, #20]
 80062b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062b6:	4a94      	ldr	r2, [pc, #592]	@ (8006508 <UART_SetConfig+0x5c4>)
 80062b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80062bc:	461a      	mov	r2, r3
 80062be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062c0:	fbb3 f3f2 	udiv	r3, r3, r2
 80062c4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80062c6:	697b      	ldr	r3, [r7, #20]
 80062c8:	685a      	ldr	r2, [r3, #4]
 80062ca:	4613      	mov	r3, r2
 80062cc:	005b      	lsls	r3, r3, #1
 80062ce:	4413      	add	r3, r2
 80062d0:	69ba      	ldr	r2, [r7, #24]
 80062d2:	429a      	cmp	r2, r3
 80062d4:	d305      	bcc.n	80062e2 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80062d6:	697b      	ldr	r3, [r7, #20]
 80062d8:	685b      	ldr	r3, [r3, #4]
 80062da:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80062dc:	69ba      	ldr	r2, [r7, #24]
 80062de:	429a      	cmp	r2, r3
 80062e0:	d903      	bls.n	80062ea <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80062e2:	2301      	movs	r3, #1
 80062e4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80062e8:	e113      	b.n	8006512 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80062ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062ec:	2200      	movs	r2, #0
 80062ee:	60bb      	str	r3, [r7, #8]
 80062f0:	60fa      	str	r2, [r7, #12]
 80062f2:	697b      	ldr	r3, [r7, #20]
 80062f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062f6:	4a84      	ldr	r2, [pc, #528]	@ (8006508 <UART_SetConfig+0x5c4>)
 80062f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80062fc:	b29b      	uxth	r3, r3
 80062fe:	2200      	movs	r2, #0
 8006300:	603b      	str	r3, [r7, #0]
 8006302:	607a      	str	r2, [r7, #4]
 8006304:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006308:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800630c:	f7f9 ff84 	bl	8000218 <__aeabi_uldivmod>
 8006310:	4602      	mov	r2, r0
 8006312:	460b      	mov	r3, r1
 8006314:	4610      	mov	r0, r2
 8006316:	4619      	mov	r1, r3
 8006318:	f04f 0200 	mov.w	r2, #0
 800631c:	f04f 0300 	mov.w	r3, #0
 8006320:	020b      	lsls	r3, r1, #8
 8006322:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006326:	0202      	lsls	r2, r0, #8
 8006328:	6979      	ldr	r1, [r7, #20]
 800632a:	6849      	ldr	r1, [r1, #4]
 800632c:	0849      	lsrs	r1, r1, #1
 800632e:	2000      	movs	r0, #0
 8006330:	460c      	mov	r4, r1
 8006332:	4605      	mov	r5, r0
 8006334:	eb12 0804 	adds.w	r8, r2, r4
 8006338:	eb43 0905 	adc.w	r9, r3, r5
 800633c:	697b      	ldr	r3, [r7, #20]
 800633e:	685b      	ldr	r3, [r3, #4]
 8006340:	2200      	movs	r2, #0
 8006342:	469a      	mov	sl, r3
 8006344:	4693      	mov	fp, r2
 8006346:	4652      	mov	r2, sl
 8006348:	465b      	mov	r3, fp
 800634a:	4640      	mov	r0, r8
 800634c:	4649      	mov	r1, r9
 800634e:	f7f9 ff63 	bl	8000218 <__aeabi_uldivmod>
 8006352:	4602      	mov	r2, r0
 8006354:	460b      	mov	r3, r1
 8006356:	4613      	mov	r3, r2
 8006358:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800635a:	6a3b      	ldr	r3, [r7, #32]
 800635c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006360:	d308      	bcc.n	8006374 <UART_SetConfig+0x430>
 8006362:	6a3b      	ldr	r3, [r7, #32]
 8006364:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006368:	d204      	bcs.n	8006374 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800636a:	697b      	ldr	r3, [r7, #20]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	6a3a      	ldr	r2, [r7, #32]
 8006370:	60da      	str	r2, [r3, #12]
 8006372:	e0ce      	b.n	8006512 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8006374:	2301      	movs	r3, #1
 8006376:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800637a:	e0ca      	b.n	8006512 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800637c:	697b      	ldr	r3, [r7, #20]
 800637e:	69db      	ldr	r3, [r3, #28]
 8006380:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006384:	d166      	bne.n	8006454 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8006386:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800638a:	2b08      	cmp	r3, #8
 800638c:	d827      	bhi.n	80063de <UART_SetConfig+0x49a>
 800638e:	a201      	add	r2, pc, #4	@ (adr r2, 8006394 <UART_SetConfig+0x450>)
 8006390:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006394:	080063b9 	.word	0x080063b9
 8006398:	080063c1 	.word	0x080063c1
 800639c:	080063c9 	.word	0x080063c9
 80063a0:	080063df 	.word	0x080063df
 80063a4:	080063cf 	.word	0x080063cf
 80063a8:	080063df 	.word	0x080063df
 80063ac:	080063df 	.word	0x080063df
 80063b0:	080063df 	.word	0x080063df
 80063b4:	080063d7 	.word	0x080063d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80063b8:	f7fc fc34 	bl	8002c24 <HAL_RCC_GetPCLK1Freq>
 80063bc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80063be:	e014      	b.n	80063ea <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80063c0:	f7fc fc46 	bl	8002c50 <HAL_RCC_GetPCLK2Freq>
 80063c4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80063c6:	e010      	b.n	80063ea <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80063c8:	4b4e      	ldr	r3, [pc, #312]	@ (8006504 <UART_SetConfig+0x5c0>)
 80063ca:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80063cc:	e00d      	b.n	80063ea <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80063ce:	f7fc fbbb 	bl	8002b48 <HAL_RCC_GetSysClockFreq>
 80063d2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80063d4:	e009      	b.n	80063ea <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80063d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80063da:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80063dc:	e005      	b.n	80063ea <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80063de:	2300      	movs	r3, #0
 80063e0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80063e2:	2301      	movs	r3, #1
 80063e4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80063e8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80063ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	f000 8090 	beq.w	8006512 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80063f2:	697b      	ldr	r3, [r7, #20]
 80063f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063f6:	4a44      	ldr	r2, [pc, #272]	@ (8006508 <UART_SetConfig+0x5c4>)
 80063f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80063fc:	461a      	mov	r2, r3
 80063fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006400:	fbb3 f3f2 	udiv	r3, r3, r2
 8006404:	005a      	lsls	r2, r3, #1
 8006406:	697b      	ldr	r3, [r7, #20]
 8006408:	685b      	ldr	r3, [r3, #4]
 800640a:	085b      	lsrs	r3, r3, #1
 800640c:	441a      	add	r2, r3
 800640e:	697b      	ldr	r3, [r7, #20]
 8006410:	685b      	ldr	r3, [r3, #4]
 8006412:	fbb2 f3f3 	udiv	r3, r2, r3
 8006416:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006418:	6a3b      	ldr	r3, [r7, #32]
 800641a:	2b0f      	cmp	r3, #15
 800641c:	d916      	bls.n	800644c <UART_SetConfig+0x508>
 800641e:	6a3b      	ldr	r3, [r7, #32]
 8006420:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006424:	d212      	bcs.n	800644c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006426:	6a3b      	ldr	r3, [r7, #32]
 8006428:	b29b      	uxth	r3, r3
 800642a:	f023 030f 	bic.w	r3, r3, #15
 800642e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006430:	6a3b      	ldr	r3, [r7, #32]
 8006432:	085b      	lsrs	r3, r3, #1
 8006434:	b29b      	uxth	r3, r3
 8006436:	f003 0307 	and.w	r3, r3, #7
 800643a:	b29a      	uxth	r2, r3
 800643c:	8bfb      	ldrh	r3, [r7, #30]
 800643e:	4313      	orrs	r3, r2
 8006440:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006442:	697b      	ldr	r3, [r7, #20]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	8bfa      	ldrh	r2, [r7, #30]
 8006448:	60da      	str	r2, [r3, #12]
 800644a:	e062      	b.n	8006512 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800644c:	2301      	movs	r3, #1
 800644e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006452:	e05e      	b.n	8006512 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006454:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006458:	2b08      	cmp	r3, #8
 800645a:	d828      	bhi.n	80064ae <UART_SetConfig+0x56a>
 800645c:	a201      	add	r2, pc, #4	@ (adr r2, 8006464 <UART_SetConfig+0x520>)
 800645e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006462:	bf00      	nop
 8006464:	08006489 	.word	0x08006489
 8006468:	08006491 	.word	0x08006491
 800646c:	08006499 	.word	0x08006499
 8006470:	080064af 	.word	0x080064af
 8006474:	0800649f 	.word	0x0800649f
 8006478:	080064af 	.word	0x080064af
 800647c:	080064af 	.word	0x080064af
 8006480:	080064af 	.word	0x080064af
 8006484:	080064a7 	.word	0x080064a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006488:	f7fc fbcc 	bl	8002c24 <HAL_RCC_GetPCLK1Freq>
 800648c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800648e:	e014      	b.n	80064ba <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006490:	f7fc fbde 	bl	8002c50 <HAL_RCC_GetPCLK2Freq>
 8006494:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006496:	e010      	b.n	80064ba <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006498:	4b1a      	ldr	r3, [pc, #104]	@ (8006504 <UART_SetConfig+0x5c0>)
 800649a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800649c:	e00d      	b.n	80064ba <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800649e:	f7fc fb53 	bl	8002b48 <HAL_RCC_GetSysClockFreq>
 80064a2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80064a4:	e009      	b.n	80064ba <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80064a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80064aa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80064ac:	e005      	b.n	80064ba <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80064ae:	2300      	movs	r3, #0
 80064b0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80064b2:	2301      	movs	r3, #1
 80064b4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80064b8:	bf00      	nop
    }

    if (pclk != 0U)
 80064ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d028      	beq.n	8006512 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80064c0:	697b      	ldr	r3, [r7, #20]
 80064c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064c4:	4a10      	ldr	r2, [pc, #64]	@ (8006508 <UART_SetConfig+0x5c4>)
 80064c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80064ca:	461a      	mov	r2, r3
 80064cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064ce:	fbb3 f2f2 	udiv	r2, r3, r2
 80064d2:	697b      	ldr	r3, [r7, #20]
 80064d4:	685b      	ldr	r3, [r3, #4]
 80064d6:	085b      	lsrs	r3, r3, #1
 80064d8:	441a      	add	r2, r3
 80064da:	697b      	ldr	r3, [r7, #20]
 80064dc:	685b      	ldr	r3, [r3, #4]
 80064de:	fbb2 f3f3 	udiv	r3, r2, r3
 80064e2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80064e4:	6a3b      	ldr	r3, [r7, #32]
 80064e6:	2b0f      	cmp	r3, #15
 80064e8:	d910      	bls.n	800650c <UART_SetConfig+0x5c8>
 80064ea:	6a3b      	ldr	r3, [r7, #32]
 80064ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80064f0:	d20c      	bcs.n	800650c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80064f2:	6a3b      	ldr	r3, [r7, #32]
 80064f4:	b29a      	uxth	r2, r3
 80064f6:	697b      	ldr	r3, [r7, #20]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	60da      	str	r2, [r3, #12]
 80064fc:	e009      	b.n	8006512 <UART_SetConfig+0x5ce>
 80064fe:	bf00      	nop
 8006500:	40008000 	.word	0x40008000
 8006504:	00f42400 	.word	0x00f42400
 8006508:	08007b58 	.word	0x08007b58
      }
      else
      {
        ret = HAL_ERROR;
 800650c:	2301      	movs	r3, #1
 800650e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006512:	697b      	ldr	r3, [r7, #20]
 8006514:	2201      	movs	r2, #1
 8006516:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800651a:	697b      	ldr	r3, [r7, #20]
 800651c:	2201      	movs	r2, #1
 800651e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006522:	697b      	ldr	r3, [r7, #20]
 8006524:	2200      	movs	r2, #0
 8006526:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006528:	697b      	ldr	r3, [r7, #20]
 800652a:	2200      	movs	r2, #0
 800652c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800652e:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8006532:	4618      	mov	r0, r3
 8006534:	3730      	adds	r7, #48	@ 0x30
 8006536:	46bd      	mov	sp, r7
 8006538:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800653c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800653c:	b480      	push	{r7}
 800653e:	b083      	sub	sp, #12
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006548:	f003 0308 	and.w	r3, r3, #8
 800654c:	2b00      	cmp	r3, #0
 800654e:	d00a      	beq.n	8006566 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	685b      	ldr	r3, [r3, #4]
 8006556:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	430a      	orrs	r2, r1
 8006564:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800656a:	f003 0301 	and.w	r3, r3, #1
 800656e:	2b00      	cmp	r3, #0
 8006570:	d00a      	beq.n	8006588 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	685b      	ldr	r3, [r3, #4]
 8006578:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	430a      	orrs	r2, r1
 8006586:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800658c:	f003 0302 	and.w	r3, r3, #2
 8006590:	2b00      	cmp	r3, #0
 8006592:	d00a      	beq.n	80065aa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	685b      	ldr	r3, [r3, #4]
 800659a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	430a      	orrs	r2, r1
 80065a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065ae:	f003 0304 	and.w	r3, r3, #4
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d00a      	beq.n	80065cc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	685b      	ldr	r3, [r3, #4]
 80065bc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	430a      	orrs	r2, r1
 80065ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065d0:	f003 0310 	and.w	r3, r3, #16
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d00a      	beq.n	80065ee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	689b      	ldr	r3, [r3, #8]
 80065de:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	430a      	orrs	r2, r1
 80065ec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065f2:	f003 0320 	and.w	r3, r3, #32
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d00a      	beq.n	8006610 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	689b      	ldr	r3, [r3, #8]
 8006600:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	430a      	orrs	r2, r1
 800660e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006614:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006618:	2b00      	cmp	r3, #0
 800661a:	d01a      	beq.n	8006652 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	685b      	ldr	r3, [r3, #4]
 8006622:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	430a      	orrs	r2, r1
 8006630:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006636:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800663a:	d10a      	bne.n	8006652 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	685b      	ldr	r3, [r3, #4]
 8006642:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	430a      	orrs	r2, r1
 8006650:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006656:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800665a:	2b00      	cmp	r3, #0
 800665c:	d00a      	beq.n	8006674 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	685b      	ldr	r3, [r3, #4]
 8006664:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	430a      	orrs	r2, r1
 8006672:	605a      	str	r2, [r3, #4]
  }
}
 8006674:	bf00      	nop
 8006676:	370c      	adds	r7, #12
 8006678:	46bd      	mov	sp, r7
 800667a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667e:	4770      	bx	lr

08006680 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006680:	b580      	push	{r7, lr}
 8006682:	b098      	sub	sp, #96	@ 0x60
 8006684:	af02      	add	r7, sp, #8
 8006686:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2200      	movs	r2, #0
 800668c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006690:	f7fa ff58 	bl	8001544 <HAL_GetTick>
 8006694:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f003 0308 	and.w	r3, r3, #8
 80066a0:	2b08      	cmp	r3, #8
 80066a2:	d12f      	bne.n	8006704 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80066a4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80066a8:	9300      	str	r3, [sp, #0]
 80066aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80066ac:	2200      	movs	r2, #0
 80066ae:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80066b2:	6878      	ldr	r0, [r7, #4]
 80066b4:	f000 f88e 	bl	80067d4 <UART_WaitOnFlagUntilTimeout>
 80066b8:	4603      	mov	r3, r0
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d022      	beq.n	8006704 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066c6:	e853 3f00 	ldrex	r3, [r3]
 80066ca:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80066cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066ce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80066d2:	653b      	str	r3, [r7, #80]	@ 0x50
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	461a      	mov	r2, r3
 80066da:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80066dc:	647b      	str	r3, [r7, #68]	@ 0x44
 80066de:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066e0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80066e2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80066e4:	e841 2300 	strex	r3, r2, [r1]
 80066e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80066ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d1e6      	bne.n	80066be <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2220      	movs	r2, #32
 80066f4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2200      	movs	r2, #0
 80066fc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006700:	2303      	movs	r3, #3
 8006702:	e063      	b.n	80067cc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	f003 0304 	and.w	r3, r3, #4
 800670e:	2b04      	cmp	r3, #4
 8006710:	d149      	bne.n	80067a6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006712:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006716:	9300      	str	r3, [sp, #0]
 8006718:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800671a:	2200      	movs	r2, #0
 800671c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006720:	6878      	ldr	r0, [r7, #4]
 8006722:	f000 f857 	bl	80067d4 <UART_WaitOnFlagUntilTimeout>
 8006726:	4603      	mov	r3, r0
 8006728:	2b00      	cmp	r3, #0
 800672a:	d03c      	beq.n	80067a6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006732:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006734:	e853 3f00 	ldrex	r3, [r3]
 8006738:	623b      	str	r3, [r7, #32]
   return(result);
 800673a:	6a3b      	ldr	r3, [r7, #32]
 800673c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006740:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	461a      	mov	r2, r3
 8006748:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800674a:	633b      	str	r3, [r7, #48]	@ 0x30
 800674c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800674e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006750:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006752:	e841 2300 	strex	r3, r2, [r1]
 8006756:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006758:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800675a:	2b00      	cmp	r3, #0
 800675c:	d1e6      	bne.n	800672c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	3308      	adds	r3, #8
 8006764:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006766:	693b      	ldr	r3, [r7, #16]
 8006768:	e853 3f00 	ldrex	r3, [r3]
 800676c:	60fb      	str	r3, [r7, #12]
   return(result);
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	f023 0301 	bic.w	r3, r3, #1
 8006774:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	3308      	adds	r3, #8
 800677c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800677e:	61fa      	str	r2, [r7, #28]
 8006780:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006782:	69b9      	ldr	r1, [r7, #24]
 8006784:	69fa      	ldr	r2, [r7, #28]
 8006786:	e841 2300 	strex	r3, r2, [r1]
 800678a:	617b      	str	r3, [r7, #20]
   return(result);
 800678c:	697b      	ldr	r3, [r7, #20]
 800678e:	2b00      	cmp	r3, #0
 8006790:	d1e5      	bne.n	800675e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	2220      	movs	r2, #32
 8006796:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	2200      	movs	r2, #0
 800679e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80067a2:	2303      	movs	r3, #3
 80067a4:	e012      	b.n	80067cc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	2220      	movs	r2, #32
 80067aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	2220      	movs	r2, #32
 80067b2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	2200      	movs	r2, #0
 80067ba:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2200      	movs	r2, #0
 80067c0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	2200      	movs	r2, #0
 80067c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80067ca:	2300      	movs	r3, #0
}
 80067cc:	4618      	mov	r0, r3
 80067ce:	3758      	adds	r7, #88	@ 0x58
 80067d0:	46bd      	mov	sp, r7
 80067d2:	bd80      	pop	{r7, pc}

080067d4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80067d4:	b580      	push	{r7, lr}
 80067d6:	b084      	sub	sp, #16
 80067d8:	af00      	add	r7, sp, #0
 80067da:	60f8      	str	r0, [r7, #12]
 80067dc:	60b9      	str	r1, [r7, #8]
 80067de:	603b      	str	r3, [r7, #0]
 80067e0:	4613      	mov	r3, r2
 80067e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80067e4:	e04f      	b.n	8006886 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80067e6:	69bb      	ldr	r3, [r7, #24]
 80067e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067ec:	d04b      	beq.n	8006886 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067ee:	f7fa fea9 	bl	8001544 <HAL_GetTick>
 80067f2:	4602      	mov	r2, r0
 80067f4:	683b      	ldr	r3, [r7, #0]
 80067f6:	1ad3      	subs	r3, r2, r3
 80067f8:	69ba      	ldr	r2, [r7, #24]
 80067fa:	429a      	cmp	r2, r3
 80067fc:	d302      	bcc.n	8006804 <UART_WaitOnFlagUntilTimeout+0x30>
 80067fe:	69bb      	ldr	r3, [r7, #24]
 8006800:	2b00      	cmp	r3, #0
 8006802:	d101      	bne.n	8006808 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006804:	2303      	movs	r3, #3
 8006806:	e04e      	b.n	80068a6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f003 0304 	and.w	r3, r3, #4
 8006812:	2b00      	cmp	r3, #0
 8006814:	d037      	beq.n	8006886 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006816:	68bb      	ldr	r3, [r7, #8]
 8006818:	2b80      	cmp	r3, #128	@ 0x80
 800681a:	d034      	beq.n	8006886 <UART_WaitOnFlagUntilTimeout+0xb2>
 800681c:	68bb      	ldr	r3, [r7, #8]
 800681e:	2b40      	cmp	r3, #64	@ 0x40
 8006820:	d031      	beq.n	8006886 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	69db      	ldr	r3, [r3, #28]
 8006828:	f003 0308 	and.w	r3, r3, #8
 800682c:	2b08      	cmp	r3, #8
 800682e:	d110      	bne.n	8006852 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	2208      	movs	r2, #8
 8006836:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006838:	68f8      	ldr	r0, [r7, #12]
 800683a:	f000 f99c 	bl	8006b76 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	2208      	movs	r2, #8
 8006842:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	2200      	movs	r2, #0
 800684a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800684e:	2301      	movs	r3, #1
 8006850:	e029      	b.n	80068a6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	69db      	ldr	r3, [r3, #28]
 8006858:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800685c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006860:	d111      	bne.n	8006886 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800686a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800686c:	68f8      	ldr	r0, [r7, #12]
 800686e:	f000 f982 	bl	8006b76 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	2220      	movs	r2, #32
 8006876:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	2200      	movs	r2, #0
 800687e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8006882:	2303      	movs	r3, #3
 8006884:	e00f      	b.n	80068a6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	69da      	ldr	r2, [r3, #28]
 800688c:	68bb      	ldr	r3, [r7, #8]
 800688e:	4013      	ands	r3, r2
 8006890:	68ba      	ldr	r2, [r7, #8]
 8006892:	429a      	cmp	r2, r3
 8006894:	bf0c      	ite	eq
 8006896:	2301      	moveq	r3, #1
 8006898:	2300      	movne	r3, #0
 800689a:	b2db      	uxtb	r3, r3
 800689c:	461a      	mov	r2, r3
 800689e:	79fb      	ldrb	r3, [r7, #7]
 80068a0:	429a      	cmp	r2, r3
 80068a2:	d0a0      	beq.n	80067e6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80068a4:	2300      	movs	r3, #0
}
 80068a6:	4618      	mov	r0, r3
 80068a8:	3710      	adds	r7, #16
 80068aa:	46bd      	mov	sp, r7
 80068ac:	bd80      	pop	{r7, pc}
	...

080068b0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80068b0:	b480      	push	{r7}
 80068b2:	b0a3      	sub	sp, #140	@ 0x8c
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	60f8      	str	r0, [r7, #12]
 80068b8:	60b9      	str	r1, [r7, #8]
 80068ba:	4613      	mov	r3, r2
 80068bc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	68ba      	ldr	r2, [r7, #8]
 80068c2:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	88fa      	ldrh	r2, [r7, #6]
 80068c8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	88fa      	ldrh	r2, [r7, #6]
 80068d0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	2200      	movs	r2, #0
 80068d8:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	689b      	ldr	r3, [r3, #8]
 80068de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80068e2:	d10e      	bne.n	8006902 <UART_Start_Receive_IT+0x52>
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	691b      	ldr	r3, [r3, #16]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d105      	bne.n	80068f8 <UART_Start_Receive_IT+0x48>
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80068f2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80068f6:	e02d      	b.n	8006954 <UART_Start_Receive_IT+0xa4>
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	22ff      	movs	r2, #255	@ 0xff
 80068fc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006900:	e028      	b.n	8006954 <UART_Start_Receive_IT+0xa4>
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	689b      	ldr	r3, [r3, #8]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d10d      	bne.n	8006926 <UART_Start_Receive_IT+0x76>
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	691b      	ldr	r3, [r3, #16]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d104      	bne.n	800691c <UART_Start_Receive_IT+0x6c>
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	22ff      	movs	r2, #255	@ 0xff
 8006916:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800691a:	e01b      	b.n	8006954 <UART_Start_Receive_IT+0xa4>
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	227f      	movs	r2, #127	@ 0x7f
 8006920:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006924:	e016      	b.n	8006954 <UART_Start_Receive_IT+0xa4>
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	689b      	ldr	r3, [r3, #8]
 800692a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800692e:	d10d      	bne.n	800694c <UART_Start_Receive_IT+0x9c>
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	691b      	ldr	r3, [r3, #16]
 8006934:	2b00      	cmp	r3, #0
 8006936:	d104      	bne.n	8006942 <UART_Start_Receive_IT+0x92>
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	227f      	movs	r2, #127	@ 0x7f
 800693c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006940:	e008      	b.n	8006954 <UART_Start_Receive_IT+0xa4>
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	223f      	movs	r2, #63	@ 0x3f
 8006946:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800694a:	e003      	b.n	8006954 <UART_Start_Receive_IT+0xa4>
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	2200      	movs	r2, #0
 8006950:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	2200      	movs	r2, #0
 8006958:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	2222      	movs	r2, #34	@ 0x22
 8006960:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	3308      	adds	r3, #8
 800696a:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800696c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800696e:	e853 3f00 	ldrex	r3, [r3]
 8006972:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8006974:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006976:	f043 0301 	orr.w	r3, r3, #1
 800697a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	3308      	adds	r3, #8
 8006984:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8006988:	673a      	str	r2, [r7, #112]	@ 0x70
 800698a:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800698c:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800698e:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8006990:	e841 2300 	strex	r3, r2, [r1]
 8006994:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 8006996:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006998:	2b00      	cmp	r3, #0
 800699a:	d1e3      	bne.n	8006964 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80069a0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80069a4:	d14f      	bne.n	8006a46 <UART_Start_Receive_IT+0x196>
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80069ac:	88fa      	ldrh	r2, [r7, #6]
 80069ae:	429a      	cmp	r2, r3
 80069b0:	d349      	bcc.n	8006a46 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	689b      	ldr	r3, [r3, #8]
 80069b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80069ba:	d107      	bne.n	80069cc <UART_Start_Receive_IT+0x11c>
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	691b      	ldr	r3, [r3, #16]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d103      	bne.n	80069cc <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	4a47      	ldr	r2, [pc, #284]	@ (8006ae4 <UART_Start_Receive_IT+0x234>)
 80069c8:	675a      	str	r2, [r3, #116]	@ 0x74
 80069ca:	e002      	b.n	80069d2 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	4a46      	ldr	r2, [pc, #280]	@ (8006ae8 <UART_Start_Receive_IT+0x238>)
 80069d0:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	691b      	ldr	r3, [r3, #16]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d01a      	beq.n	8006a10 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069e0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80069e2:	e853 3f00 	ldrex	r3, [r3]
 80069e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80069e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80069ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80069ee:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	461a      	mov	r2, r3
 80069f8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80069fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80069fe:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a00:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8006a02:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8006a04:	e841 2300 	strex	r3, r2, [r1]
 8006a08:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8006a0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d1e4      	bne.n	80069da <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	3308      	adds	r3, #8
 8006a16:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a1a:	e853 3f00 	ldrex	r3, [r3]
 8006a1e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006a20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a22:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006a26:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	3308      	adds	r3, #8
 8006a2e:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8006a30:	64ba      	str	r2, [r7, #72]	@ 0x48
 8006a32:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a34:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006a36:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006a38:	e841 2300 	strex	r3, r2, [r1]
 8006a3c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8006a3e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d1e5      	bne.n	8006a10 <UART_Start_Receive_IT+0x160>
 8006a44:	e046      	b.n	8006ad4 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	689b      	ldr	r3, [r3, #8]
 8006a4a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006a4e:	d107      	bne.n	8006a60 <UART_Start_Receive_IT+0x1b0>
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	691b      	ldr	r3, [r3, #16]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d103      	bne.n	8006a60 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	4a24      	ldr	r2, [pc, #144]	@ (8006aec <UART_Start_Receive_IT+0x23c>)
 8006a5c:	675a      	str	r2, [r3, #116]	@ 0x74
 8006a5e:	e002      	b.n	8006a66 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	4a23      	ldr	r2, [pc, #140]	@ (8006af0 <UART_Start_Receive_IT+0x240>)
 8006a64:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	691b      	ldr	r3, [r3, #16]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d019      	beq.n	8006aa2 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a76:	e853 3f00 	ldrex	r3, [r3]
 8006a7a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006a7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a7e:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8006a82:	677b      	str	r3, [r7, #116]	@ 0x74
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	461a      	mov	r2, r3
 8006a8a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006a8c:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a8e:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a90:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006a92:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006a94:	e841 2300 	strex	r3, r2, [r1]
 8006a98:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8006a9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d1e6      	bne.n	8006a6e <UART_Start_Receive_IT+0x1be>
 8006aa0:	e018      	b.n	8006ad4 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aa8:	697b      	ldr	r3, [r7, #20]
 8006aaa:	e853 3f00 	ldrex	r3, [r3]
 8006aae:	613b      	str	r3, [r7, #16]
   return(result);
 8006ab0:	693b      	ldr	r3, [r7, #16]
 8006ab2:	f043 0320 	orr.w	r3, r3, #32
 8006ab6:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	461a      	mov	r2, r3
 8006abe:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006ac0:	623b      	str	r3, [r7, #32]
 8006ac2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ac4:	69f9      	ldr	r1, [r7, #28]
 8006ac6:	6a3a      	ldr	r2, [r7, #32]
 8006ac8:	e841 2300 	strex	r3, r2, [r1]
 8006acc:	61bb      	str	r3, [r7, #24]
   return(result);
 8006ace:	69bb      	ldr	r3, [r7, #24]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d1e6      	bne.n	8006aa2 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8006ad4:	2300      	movs	r3, #0
}
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	378c      	adds	r7, #140	@ 0x8c
 8006ada:	46bd      	mov	sp, r7
 8006adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae0:	4770      	bx	lr
 8006ae2:	bf00      	nop
 8006ae4:	080074f9 	.word	0x080074f9
 8006ae8:	08007189 	.word	0x08007189
 8006aec:	08006fc9 	.word	0x08006fc9
 8006af0:	08006e09 	.word	0x08006e09

08006af4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006af4:	b480      	push	{r7}
 8006af6:	b08f      	sub	sp, #60	@ 0x3c
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b02:	6a3b      	ldr	r3, [r7, #32]
 8006b04:	e853 3f00 	ldrex	r3, [r3]
 8006b08:	61fb      	str	r3, [r7, #28]
   return(result);
 8006b0a:	69fb      	ldr	r3, [r7, #28]
 8006b0c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8006b10:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	461a      	mov	r2, r3
 8006b18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006b1c:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b1e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006b20:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006b22:	e841 2300 	strex	r3, r2, [r1]
 8006b26:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006b28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d1e6      	bne.n	8006afc <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	3308      	adds	r3, #8
 8006b34:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	e853 3f00 	ldrex	r3, [r3]
 8006b3c:	60bb      	str	r3, [r7, #8]
   return(result);
 8006b3e:	68bb      	ldr	r3, [r7, #8]
 8006b40:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8006b44:	633b      	str	r3, [r7, #48]	@ 0x30
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	3308      	adds	r3, #8
 8006b4c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006b4e:	61ba      	str	r2, [r7, #24]
 8006b50:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b52:	6979      	ldr	r1, [r7, #20]
 8006b54:	69ba      	ldr	r2, [r7, #24]
 8006b56:	e841 2300 	strex	r3, r2, [r1]
 8006b5a:	613b      	str	r3, [r7, #16]
   return(result);
 8006b5c:	693b      	ldr	r3, [r7, #16]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d1e5      	bne.n	8006b2e <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	2220      	movs	r2, #32
 8006b66:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8006b6a:	bf00      	nop
 8006b6c:	373c      	adds	r7, #60	@ 0x3c
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b74:	4770      	bx	lr

08006b76 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006b76:	b480      	push	{r7}
 8006b78:	b095      	sub	sp, #84	@ 0x54
 8006b7a:	af00      	add	r7, sp, #0
 8006b7c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b86:	e853 3f00 	ldrex	r3, [r3]
 8006b8a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006b8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b8e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006b92:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	461a      	mov	r2, r3
 8006b9a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006b9c:	643b      	str	r3, [r7, #64]	@ 0x40
 8006b9e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ba0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006ba2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006ba4:	e841 2300 	strex	r3, r2, [r1]
 8006ba8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006baa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d1e6      	bne.n	8006b7e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	3308      	adds	r3, #8
 8006bb6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bb8:	6a3b      	ldr	r3, [r7, #32]
 8006bba:	e853 3f00 	ldrex	r3, [r3]
 8006bbe:	61fb      	str	r3, [r7, #28]
   return(result);
 8006bc0:	69fb      	ldr	r3, [r7, #28]
 8006bc2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006bc6:	f023 0301 	bic.w	r3, r3, #1
 8006bca:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	3308      	adds	r3, #8
 8006bd2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006bd4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006bd6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bd8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006bda:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006bdc:	e841 2300 	strex	r3, r2, [r1]
 8006be0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006be2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d1e3      	bne.n	8006bb0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006bec:	2b01      	cmp	r3, #1
 8006bee:	d118      	bne.n	8006c22 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	e853 3f00 	ldrex	r3, [r3]
 8006bfc:	60bb      	str	r3, [r7, #8]
   return(result);
 8006bfe:	68bb      	ldr	r3, [r7, #8]
 8006c00:	f023 0310 	bic.w	r3, r3, #16
 8006c04:	647b      	str	r3, [r7, #68]	@ 0x44
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	461a      	mov	r2, r3
 8006c0c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006c0e:	61bb      	str	r3, [r7, #24]
 8006c10:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c12:	6979      	ldr	r1, [r7, #20]
 8006c14:	69ba      	ldr	r2, [r7, #24]
 8006c16:	e841 2300 	strex	r3, r2, [r1]
 8006c1a:	613b      	str	r3, [r7, #16]
   return(result);
 8006c1c:	693b      	ldr	r3, [r7, #16]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d1e6      	bne.n	8006bf0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	2220      	movs	r2, #32
 8006c26:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2200      	movs	r2, #0
 8006c34:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006c36:	bf00      	nop
 8006c38:	3754      	adds	r7, #84	@ 0x54
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c40:	4770      	bx	lr

08006c42 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006c42:	b580      	push	{r7, lr}
 8006c44:	b090      	sub	sp, #64	@ 0x40
 8006c46:	af00      	add	r7, sp, #0
 8006c48:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c4e:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	f003 0320 	and.w	r3, r3, #32
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d137      	bne.n	8006cce <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8006c5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c60:	2200      	movs	r2, #0
 8006c62:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006c66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	3308      	adds	r3, #8
 8006c6c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c70:	e853 3f00 	ldrex	r3, [r3]
 8006c74:	623b      	str	r3, [r7, #32]
   return(result);
 8006c76:	6a3b      	ldr	r3, [r7, #32]
 8006c78:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006c7c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006c7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	3308      	adds	r3, #8
 8006c84:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006c86:	633a      	str	r2, [r7, #48]	@ 0x30
 8006c88:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c8a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006c8c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006c8e:	e841 2300 	strex	r3, r2, [r1]
 8006c92:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006c94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d1e5      	bne.n	8006c66 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006c9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ca0:	693b      	ldr	r3, [r7, #16]
 8006ca2:	e853 3f00 	ldrex	r3, [r3]
 8006ca6:	60fb      	str	r3, [r7, #12]
   return(result);
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006cae:	637b      	str	r3, [r7, #52]	@ 0x34
 8006cb0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	461a      	mov	r2, r3
 8006cb6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006cb8:	61fb      	str	r3, [r7, #28]
 8006cba:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cbc:	69b9      	ldr	r1, [r7, #24]
 8006cbe:	69fa      	ldr	r2, [r7, #28]
 8006cc0:	e841 2300 	strex	r3, r2, [r1]
 8006cc4:	617b      	str	r3, [r7, #20]
   return(result);
 8006cc6:	697b      	ldr	r3, [r7, #20]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d1e6      	bne.n	8006c9a <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006ccc:	e004      	b.n	8006cd8 <UART_DMATransmitCplt+0x96>
    huart->TxCpltCallback(huart);
 8006cce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006cd0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006cd4:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8006cd6:	4798      	blx	r3
}
 8006cd8:	bf00      	nop
 8006cda:	3740      	adds	r7, #64	@ 0x40
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	bd80      	pop	{r7, pc}

08006ce0 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b084      	sub	sp, #16
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cec:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006cf4:	68f8      	ldr	r0, [r7, #12]
 8006cf6:	4798      	blx	r3
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006cf8:	bf00      	nop
 8006cfa:	3710      	adds	r7, #16
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	bd80      	pop	{r7, pc}

08006d00 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b086      	sub	sp, #24
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d0c:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8006d0e:	697b      	ldr	r3, [r7, #20]
 8006d10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d14:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8006d16:	697b      	ldr	r3, [r7, #20]
 8006d18:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006d1c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8006d1e:	697b      	ldr	r3, [r7, #20]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	689b      	ldr	r3, [r3, #8]
 8006d24:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d28:	2b80      	cmp	r3, #128	@ 0x80
 8006d2a:	d109      	bne.n	8006d40 <UART_DMAError+0x40>
 8006d2c:	693b      	ldr	r3, [r7, #16]
 8006d2e:	2b21      	cmp	r3, #33	@ 0x21
 8006d30:	d106      	bne.n	8006d40 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8006d32:	697b      	ldr	r3, [r7, #20]
 8006d34:	2200      	movs	r2, #0
 8006d36:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8006d3a:	6978      	ldr	r0, [r7, #20]
 8006d3c:	f7ff feda 	bl	8006af4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8006d40:	697b      	ldr	r3, [r7, #20]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	689b      	ldr	r3, [r3, #8]
 8006d46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d4a:	2b40      	cmp	r3, #64	@ 0x40
 8006d4c:	d109      	bne.n	8006d62 <UART_DMAError+0x62>
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	2b22      	cmp	r3, #34	@ 0x22
 8006d52:	d106      	bne.n	8006d62 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8006d54:	697b      	ldr	r3, [r7, #20]
 8006d56:	2200      	movs	r2, #0
 8006d58:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8006d5c:	6978      	ldr	r0, [r7, #20]
 8006d5e:	f7ff ff0a 	bl	8006b76 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006d62:	697b      	ldr	r3, [r7, #20]
 8006d64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d68:	f043 0210 	orr.w	r2, r3, #16
 8006d6c:	697b      	ldr	r3, [r7, #20]
 8006d6e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8006d72:	697b      	ldr	r3, [r7, #20]
 8006d74:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006d78:	6978      	ldr	r0, [r7, #20]
 8006d7a:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006d7c:	bf00      	nop
 8006d7e:	3718      	adds	r7, #24
 8006d80:	46bd      	mov	sp, r7
 8006d82:	bd80      	pop	{r7, pc}

08006d84 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006d84:	b580      	push	{r7, lr}
 8006d86:	b084      	sub	sp, #16
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d90:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	2200      	movs	r2, #0
 8006d96:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006da0:	68f8      	ldr	r0, [r7, #12]
 8006da2:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006da4:	bf00      	nop
 8006da6:	3710      	adds	r7, #16
 8006da8:	46bd      	mov	sp, r7
 8006daa:	bd80      	pop	{r7, pc}

08006dac <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b088      	sub	sp, #32
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	e853 3f00 	ldrex	r3, [r3]
 8006dc0:	60bb      	str	r3, [r7, #8]
   return(result);
 8006dc2:	68bb      	ldr	r3, [r7, #8]
 8006dc4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006dc8:	61fb      	str	r3, [r7, #28]
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	461a      	mov	r2, r3
 8006dd0:	69fb      	ldr	r3, [r7, #28]
 8006dd2:	61bb      	str	r3, [r7, #24]
 8006dd4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dd6:	6979      	ldr	r1, [r7, #20]
 8006dd8:	69ba      	ldr	r2, [r7, #24]
 8006dda:	e841 2300 	strex	r3, r2, [r1]
 8006dde:	613b      	str	r3, [r7, #16]
   return(result);
 8006de0:	693b      	ldr	r3, [r7, #16]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d1e6      	bne.n	8006db4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	2220      	movs	r2, #32
 8006dea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	2200      	movs	r2, #0
 8006df2:	679a      	str	r2, [r3, #120]	@ 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006dfa:	6878      	ldr	r0, [r7, #4]
 8006dfc:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006dfe:	bf00      	nop
 8006e00:	3720      	adds	r7, #32
 8006e02:	46bd      	mov	sp, r7
 8006e04:	bd80      	pop	{r7, pc}
	...

08006e08 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	b09c      	sub	sp, #112	@ 0x70
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8006e16:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006e20:	2b22      	cmp	r3, #34	@ 0x22
 8006e22:	f040 80c2 	bne.w	8006faa <UART_RxISR_8BIT+0x1a2>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e2c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006e30:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006e34:	b2d9      	uxtb	r1, r3
 8006e36:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8006e3a:	b2da      	uxtb	r2, r3
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006e40:	400a      	ands	r2, r1
 8006e42:	b2d2      	uxtb	r2, r2
 8006e44:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006e4a:	1c5a      	adds	r2, r3, #1
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006e56:	b29b      	uxth	r3, r3
 8006e58:	3b01      	subs	r3, #1
 8006e5a:	b29a      	uxth	r2, r3
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006e68:	b29b      	uxth	r3, r3
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	f040 80a5 	bne.w	8006fba <UART_RxISR_8BIT+0x1b2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e76:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006e78:	e853 3f00 	ldrex	r3, [r3]
 8006e7c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006e7e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006e80:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006e84:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	461a      	mov	r2, r3
 8006e8c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006e8e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006e90:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e92:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006e94:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006e96:	e841 2300 	strex	r3, r2, [r1]
 8006e9a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006e9c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d1e6      	bne.n	8006e70 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	3308      	adds	r3, #8
 8006ea8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006eac:	e853 3f00 	ldrex	r3, [r3]
 8006eb0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006eb2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006eb4:	f023 0301 	bic.w	r3, r3, #1
 8006eb8:	667b      	str	r3, [r7, #100]	@ 0x64
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	3308      	adds	r3, #8
 8006ec0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8006ec2:	647a      	str	r2, [r7, #68]	@ 0x44
 8006ec4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ec6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006ec8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006eca:	e841 2300 	strex	r3, r2, [r1]
 8006ece:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006ed0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d1e5      	bne.n	8006ea2 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	2220      	movs	r2, #32
 8006eda:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	4a35      	ldr	r2, [pc, #212]	@ (8006fc4 <UART_RxISR_8BIT+0x1bc>)
 8006ef0:	4293      	cmp	r3, r2
 8006ef2:	d01f      	beq.n	8006f34 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	685b      	ldr	r3, [r3, #4]
 8006efa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d018      	beq.n	8006f34 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f0a:	e853 3f00 	ldrex	r3, [r3]
 8006f0e:	623b      	str	r3, [r7, #32]
   return(result);
 8006f10:	6a3b      	ldr	r3, [r7, #32]
 8006f12:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006f16:	663b      	str	r3, [r7, #96]	@ 0x60
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	461a      	mov	r2, r3
 8006f1e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006f20:	633b      	str	r3, [r7, #48]	@ 0x30
 8006f22:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f24:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006f26:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006f28:	e841 2300 	strex	r3, r2, [r1]
 8006f2c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006f2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d1e6      	bne.n	8006f02 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006f38:	2b01      	cmp	r3, #1
 8006f3a:	d130      	bne.n	8006f9e <UART_RxISR_8BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2200      	movs	r2, #0
 8006f40:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f48:	693b      	ldr	r3, [r7, #16]
 8006f4a:	e853 3f00 	ldrex	r3, [r3]
 8006f4e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	f023 0310 	bic.w	r3, r3, #16
 8006f56:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	461a      	mov	r2, r3
 8006f5e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006f60:	61fb      	str	r3, [r7, #28]
 8006f62:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f64:	69b9      	ldr	r1, [r7, #24]
 8006f66:	69fa      	ldr	r2, [r7, #28]
 8006f68:	e841 2300 	strex	r3, r2, [r1]
 8006f6c:	617b      	str	r3, [r7, #20]
   return(result);
 8006f6e:	697b      	ldr	r3, [r7, #20]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d1e6      	bne.n	8006f42 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	69db      	ldr	r3, [r3, #28]
 8006f7a:	f003 0310 	and.w	r3, r3, #16
 8006f7e:	2b10      	cmp	r3, #16
 8006f80:	d103      	bne.n	8006f8a <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	2210      	movs	r2, #16
 8006f88:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8006f90:	687a      	ldr	r2, [r7, #4]
 8006f92:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 8006f96:	4611      	mov	r1, r2
 8006f98:	6878      	ldr	r0, [r7, #4]
 8006f9a:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006f9c:	e00d      	b.n	8006fba <UART_RxISR_8BIT+0x1b2>
        huart->RxCpltCallback(huart);
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006fa4:	6878      	ldr	r0, [r7, #4]
 8006fa6:	4798      	blx	r3
}
 8006fa8:	e007      	b.n	8006fba <UART_RxISR_8BIT+0x1b2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	699a      	ldr	r2, [r3, #24]
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	f042 0208 	orr.w	r2, r2, #8
 8006fb8:	619a      	str	r2, [r3, #24]
}
 8006fba:	bf00      	nop
 8006fbc:	3770      	adds	r7, #112	@ 0x70
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	bd80      	pop	{r7, pc}
 8006fc2:	bf00      	nop
 8006fc4:	40008000 	.word	0x40008000

08006fc8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	b09c      	sub	sp, #112	@ 0x70
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8006fd6:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006fe0:	2b22      	cmp	r3, #34	@ 0x22
 8006fe2:	f040 80c2 	bne.w	800716a <UART_RxISR_16BIT+0x1a2>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fec:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ff4:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8006ff6:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8006ffa:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8006ffe:	4013      	ands	r3, r2
 8007000:	b29a      	uxth	r2, r3
 8007002:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007004:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800700a:	1c9a      	adds	r2, r3, #2
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007016:	b29b      	uxth	r3, r3
 8007018:	3b01      	subs	r3, #1
 800701a:	b29a      	uxth	r2, r3
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007028:	b29b      	uxth	r3, r3
 800702a:	2b00      	cmp	r3, #0
 800702c:	f040 80a5 	bne.w	800717a <UART_RxISR_16BIT+0x1b2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007036:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007038:	e853 3f00 	ldrex	r3, [r3]
 800703c:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800703e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007040:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007044:	667b      	str	r3, [r7, #100]	@ 0x64
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	461a      	mov	r2, r3
 800704c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800704e:	657b      	str	r3, [r7, #84]	@ 0x54
 8007050:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007052:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007054:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007056:	e841 2300 	strex	r3, r2, [r1]
 800705a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800705c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800705e:	2b00      	cmp	r3, #0
 8007060:	d1e6      	bne.n	8007030 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	3308      	adds	r3, #8
 8007068:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800706a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800706c:	e853 3f00 	ldrex	r3, [r3]
 8007070:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007072:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007074:	f023 0301 	bic.w	r3, r3, #1
 8007078:	663b      	str	r3, [r7, #96]	@ 0x60
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	3308      	adds	r3, #8
 8007080:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007082:	643a      	str	r2, [r7, #64]	@ 0x40
 8007084:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007086:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007088:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800708a:	e841 2300 	strex	r3, r2, [r1]
 800708e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007090:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007092:	2b00      	cmp	r3, #0
 8007094:	d1e5      	bne.n	8007062 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	2220      	movs	r2, #32
 800709a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	2200      	movs	r2, #0
 80070a2:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2200      	movs	r2, #0
 80070a8:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	4a35      	ldr	r2, [pc, #212]	@ (8007184 <UART_RxISR_16BIT+0x1bc>)
 80070b0:	4293      	cmp	r3, r2
 80070b2:	d01f      	beq.n	80070f4 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	685b      	ldr	r3, [r3, #4]
 80070ba:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d018      	beq.n	80070f4 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070c8:	6a3b      	ldr	r3, [r7, #32]
 80070ca:	e853 3f00 	ldrex	r3, [r3]
 80070ce:	61fb      	str	r3, [r7, #28]
   return(result);
 80070d0:	69fb      	ldr	r3, [r7, #28]
 80070d2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80070d6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	461a      	mov	r2, r3
 80070de:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80070e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80070e2:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070e4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80070e6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80070e8:	e841 2300 	strex	r3, r2, [r1]
 80070ec:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80070ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d1e6      	bne.n	80070c2 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80070f8:	2b01      	cmp	r3, #1
 80070fa:	d130      	bne.n	800715e <UART_RxISR_16BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	2200      	movs	r2, #0
 8007100:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	e853 3f00 	ldrex	r3, [r3]
 800710e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007110:	68bb      	ldr	r3, [r7, #8]
 8007112:	f023 0310 	bic.w	r3, r3, #16
 8007116:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	461a      	mov	r2, r3
 800711e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007120:	61bb      	str	r3, [r7, #24]
 8007122:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007124:	6979      	ldr	r1, [r7, #20]
 8007126:	69ba      	ldr	r2, [r7, #24]
 8007128:	e841 2300 	strex	r3, r2, [r1]
 800712c:	613b      	str	r3, [r7, #16]
   return(result);
 800712e:	693b      	ldr	r3, [r7, #16]
 8007130:	2b00      	cmp	r3, #0
 8007132:	d1e6      	bne.n	8007102 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	69db      	ldr	r3, [r3, #28]
 800713a:	f003 0310 	and.w	r3, r3, #16
 800713e:	2b10      	cmp	r3, #16
 8007140:	d103      	bne.n	800714a <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	2210      	movs	r2, #16
 8007148:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8007150:	687a      	ldr	r2, [r7, #4]
 8007152:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 8007156:	4611      	mov	r1, r2
 8007158:	6878      	ldr	r0, [r7, #4]
 800715a:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800715c:	e00d      	b.n	800717a <UART_RxISR_16BIT+0x1b2>
        huart->RxCpltCallback(huart);
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007164:	6878      	ldr	r0, [r7, #4]
 8007166:	4798      	blx	r3
}
 8007168:	e007      	b.n	800717a <UART_RxISR_16BIT+0x1b2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	699a      	ldr	r2, [r3, #24]
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	f042 0208 	orr.w	r2, r2, #8
 8007178:	619a      	str	r2, [r3, #24]
}
 800717a:	bf00      	nop
 800717c:	3770      	adds	r7, #112	@ 0x70
 800717e:	46bd      	mov	sp, r7
 8007180:	bd80      	pop	{r7, pc}
 8007182:	bf00      	nop
 8007184:	40008000 	.word	0x40008000

08007188 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007188:	b580      	push	{r7, lr}
 800718a:	b0ac      	sub	sp, #176	@ 0xb0
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8007196:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	69db      	ldr	r3, [r3, #28]
 80071a0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	689b      	ldr	r3, [r3, #8]
 80071b4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80071be:	2b22      	cmp	r3, #34	@ 0x22
 80071c0:	f040 8189 	bne.w	80074d6 <UART_RxISR_8BIT_FIFOEN+0x34e>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80071ca:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80071ce:	e12c      	b.n	800742a <UART_RxISR_8BIT_FIFOEN+0x2a2>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071d6:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80071da:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 80071de:	b2d9      	uxtb	r1, r3
 80071e0:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 80071e4:	b2da      	uxtb	r2, r3
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80071ea:	400a      	ands	r2, r1
 80071ec:	b2d2      	uxtb	r2, r2
 80071ee:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80071f4:	1c5a      	adds	r2, r3, #1
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007200:	b29b      	uxth	r3, r3
 8007202:	3b01      	subs	r3, #1
 8007204:	b29a      	uxth	r2, r3
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	69db      	ldr	r3, [r3, #28]
 8007212:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007216:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800721a:	f003 0307 	and.w	r3, r3, #7
 800721e:	2b00      	cmp	r3, #0
 8007220:	d055      	beq.n	80072ce <UART_RxISR_8BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007222:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007226:	f003 0301 	and.w	r3, r3, #1
 800722a:	2b00      	cmp	r3, #0
 800722c:	d011      	beq.n	8007252 <UART_RxISR_8BIT_FIFOEN+0xca>
 800722e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007232:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007236:	2b00      	cmp	r3, #0
 8007238:	d00b      	beq.n	8007252 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	2201      	movs	r2, #1
 8007240:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007248:	f043 0201 	orr.w	r2, r3, #1
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007252:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007256:	f003 0302 	and.w	r3, r3, #2
 800725a:	2b00      	cmp	r3, #0
 800725c:	d011      	beq.n	8007282 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800725e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007262:	f003 0301 	and.w	r3, r3, #1
 8007266:	2b00      	cmp	r3, #0
 8007268:	d00b      	beq.n	8007282 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	2202      	movs	r2, #2
 8007270:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007278:	f043 0204 	orr.w	r2, r3, #4
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007282:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007286:	f003 0304 	and.w	r3, r3, #4
 800728a:	2b00      	cmp	r3, #0
 800728c:	d011      	beq.n	80072b2 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800728e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007292:	f003 0301 	and.w	r3, r3, #1
 8007296:	2b00      	cmp	r3, #0
 8007298:	d00b      	beq.n	80072b2 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	2204      	movs	r2, #4
 80072a0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80072a8:	f043 0202 	orr.w	r2, r3, #2
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d008      	beq.n	80072ce <UART_RxISR_8BIT_FIFOEN+0x146>
        {
          /* Non Blocking error : transfer could go on.
          Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80072c2:	6878      	ldr	r0, [r7, #4]
 80072c4:	4798      	blx	r3
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	2200      	movs	r2, #0
 80072ca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80072d4:	b29b      	uxth	r3, r3
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	f040 80a7 	bne.w	800742a <UART_RxISR_8BIT_FIFOEN+0x2a2>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072e2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80072e4:	e853 3f00 	ldrex	r3, [r3]
 80072e8:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 80072ea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80072ec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80072f0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	461a      	mov	r2, r3
 80072fa:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80072fe:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007300:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007302:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8007304:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8007306:	e841 2300 	strex	r3, r2, [r1]
 800730a:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 800730c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800730e:	2b00      	cmp	r3, #0
 8007310:	d1e4      	bne.n	80072dc <UART_RxISR_8BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	3308      	adds	r3, #8
 8007318:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800731a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800731c:	e853 3f00 	ldrex	r3, [r3]
 8007320:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8007322:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007324:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007328:	f023 0301 	bic.w	r3, r3, #1
 800732c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	3308      	adds	r3, #8
 8007336:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800733a:	66ba      	str	r2, [r7, #104]	@ 0x68
 800733c:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800733e:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8007340:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8007342:	e841 2300 	strex	r3, r2, [r1]
 8007346:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8007348:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800734a:	2b00      	cmp	r3, #0
 800734c:	d1e1      	bne.n	8007312 <UART_RxISR_8BIT_FIFOEN+0x18a>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	2220      	movs	r2, #32
 8007352:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	2200      	movs	r2, #0
 800735a:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	2200      	movs	r2, #0
 8007360:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	4a62      	ldr	r2, [pc, #392]	@ (80074f0 <UART_RxISR_8BIT_FIFOEN+0x368>)
 8007368:	4293      	cmp	r3, r2
 800736a:	d021      	beq.n	80073b0 <UART_RxISR_8BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	685b      	ldr	r3, [r3, #4]
 8007372:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007376:	2b00      	cmp	r3, #0
 8007378:	d01a      	beq.n	80073b0 <UART_RxISR_8BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007380:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007382:	e853 3f00 	ldrex	r3, [r3]
 8007386:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8007388:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800738a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800738e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	461a      	mov	r2, r3
 8007398:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800739c:	657b      	str	r3, [r7, #84]	@ 0x54
 800739e:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073a0:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80073a2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80073a4:	e841 2300 	strex	r3, r2, [r1]
 80073a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80073aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d1e4      	bne.n	800737a <UART_RxISR_8BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80073b4:	2b01      	cmp	r3, #1
 80073b6:	d132      	bne.n	800741e <UART_RxISR_8BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	2200      	movs	r2, #0
 80073bc:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80073c6:	e853 3f00 	ldrex	r3, [r3]
 80073ca:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80073cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073ce:	f023 0310 	bic.w	r3, r3, #16
 80073d2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	461a      	mov	r2, r3
 80073dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80073e0:	643b      	str	r3, [r7, #64]	@ 0x40
 80073e2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073e4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80073e6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80073e8:	e841 2300 	strex	r3, r2, [r1]
 80073ec:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80073ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d1e4      	bne.n	80073be <UART_RxISR_8BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	69db      	ldr	r3, [r3, #28]
 80073fa:	f003 0310 	and.w	r3, r3, #16
 80073fe:	2b10      	cmp	r3, #16
 8007400:	d103      	bne.n	800740a <UART_RxISR_8BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	2210      	movs	r2, #16
 8007408:	621a      	str	r2, [r3, #32]
          }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8007410:	687a      	ldr	r2, [r7, #4]
 8007412:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 8007416:	4611      	mov	r1, r2
 8007418:	6878      	ldr	r0, [r7, #4]
 800741a:	4798      	blx	r3
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 800741c:	e010      	b.n	8007440 <UART_RxISR_8BIT_FIFOEN+0x2b8>
          huart->RxCpltCallback(huart);
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007424:	6878      	ldr	r0, [r7, #4]
 8007426:	4798      	blx	r3
        break;
 8007428:	e00a      	b.n	8007440 <UART_RxISR_8BIT_FIFOEN+0x2b8>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800742a:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800742e:	2b00      	cmp	r3, #0
 8007430:	d006      	beq.n	8007440 <UART_RxISR_8BIT_FIFOEN+0x2b8>
 8007432:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007436:	f003 0320 	and.w	r3, r3, #32
 800743a:	2b00      	cmp	r3, #0
 800743c:	f47f aec8 	bne.w	80071d0 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007446:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800744a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800744e:	2b00      	cmp	r3, #0
 8007450:	d049      	beq.n	80074e6 <UART_RxISR_8BIT_FIFOEN+0x35e>
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007458:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800745c:	429a      	cmp	r2, r3
 800745e:	d242      	bcs.n	80074e6 <UART_RxISR_8BIT_FIFOEN+0x35e>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	3308      	adds	r3, #8
 8007466:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007468:	6a3b      	ldr	r3, [r7, #32]
 800746a:	e853 3f00 	ldrex	r3, [r3]
 800746e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007470:	69fb      	ldr	r3, [r7, #28]
 8007472:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007476:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	3308      	adds	r3, #8
 8007480:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8007484:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007486:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007488:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800748a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800748c:	e841 2300 	strex	r3, r2, [r1]
 8007490:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007492:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007494:	2b00      	cmp	r3, #0
 8007496:	d1e3      	bne.n	8007460 <UART_RxISR_8BIT_FIFOEN+0x2d8>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	4a16      	ldr	r2, [pc, #88]	@ (80074f4 <UART_RxISR_8BIT_FIFOEN+0x36c>)
 800749c:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	e853 3f00 	ldrex	r3, [r3]
 80074aa:	60bb      	str	r3, [r7, #8]
   return(result);
 80074ac:	68bb      	ldr	r3, [r7, #8]
 80074ae:	f043 0320 	orr.w	r3, r3, #32
 80074b2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	461a      	mov	r2, r3
 80074bc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80074c0:	61bb      	str	r3, [r7, #24]
 80074c2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074c4:	6979      	ldr	r1, [r7, #20]
 80074c6:	69ba      	ldr	r2, [r7, #24]
 80074c8:	e841 2300 	strex	r3, r2, [r1]
 80074cc:	613b      	str	r3, [r7, #16]
   return(result);
 80074ce:	693b      	ldr	r3, [r7, #16]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d1e4      	bne.n	800749e <UART_RxISR_8BIT_FIFOEN+0x316>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80074d4:	e007      	b.n	80074e6 <UART_RxISR_8BIT_FIFOEN+0x35e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	699a      	ldr	r2, [r3, #24]
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	f042 0208 	orr.w	r2, r2, #8
 80074e4:	619a      	str	r2, [r3, #24]
}
 80074e6:	bf00      	nop
 80074e8:	37b0      	adds	r7, #176	@ 0xb0
 80074ea:	46bd      	mov	sp, r7
 80074ec:	bd80      	pop	{r7, pc}
 80074ee:	bf00      	nop
 80074f0:	40008000 	.word	0x40008000
 80074f4:	08006e09 	.word	0x08006e09

080074f8 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80074f8:	b580      	push	{r7, lr}
 80074fa:	b0ae      	sub	sp, #184	@ 0xb8
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8007506:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	69db      	ldr	r3, [r3, #28]
 8007510:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	689b      	ldr	r3, [r3, #8]
 8007524:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800752e:	2b22      	cmp	r3, #34	@ 0x22
 8007530:	f040 818d 	bne.w	800784e <UART_RxISR_16BIT_FIFOEN+0x356>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800753a:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800753e:	e130      	b.n	80077a2 <UART_RxISR_16BIT_FIFOEN+0x2aa>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007546:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800754e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8007552:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 8007556:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800755a:	4013      	ands	r3, r2
 800755c:	b29a      	uxth	r2, r3
 800755e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007562:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007568:	1c9a      	adds	r2, r3, #2
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007574:	b29b      	uxth	r3, r3
 8007576:	3b01      	subs	r3, #1
 8007578:	b29a      	uxth	r2, r3
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	69db      	ldr	r3, [r3, #28]
 8007586:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800758a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800758e:	f003 0307 	and.w	r3, r3, #7
 8007592:	2b00      	cmp	r3, #0
 8007594:	d055      	beq.n	8007642 <UART_RxISR_16BIT_FIFOEN+0x14a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007596:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800759a:	f003 0301 	and.w	r3, r3, #1
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d011      	beq.n	80075c6 <UART_RxISR_16BIT_FIFOEN+0xce>
 80075a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80075a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d00b      	beq.n	80075c6 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	2201      	movs	r2, #1
 80075b4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80075bc:	f043 0201 	orr.w	r2, r3, #1
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80075c6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80075ca:	f003 0302 	and.w	r3, r3, #2
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d011      	beq.n	80075f6 <UART_RxISR_16BIT_FIFOEN+0xfe>
 80075d2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80075d6:	f003 0301 	and.w	r3, r3, #1
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d00b      	beq.n	80075f6 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	2202      	movs	r2, #2
 80075e4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80075ec:	f043 0204 	orr.w	r2, r3, #4
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80075f6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80075fa:	f003 0304 	and.w	r3, r3, #4
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d011      	beq.n	8007626 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8007602:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007606:	f003 0301 	and.w	r3, r3, #1
 800760a:	2b00      	cmp	r3, #0
 800760c:	d00b      	beq.n	8007626 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	2204      	movs	r2, #4
 8007614:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800761c:	f043 0202 	orr.w	r2, r3, #2
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800762c:	2b00      	cmp	r3, #0
 800762e:	d008      	beq.n	8007642 <UART_RxISR_16BIT_FIFOEN+0x14a>
        {
          /* Non Blocking error : transfer could go on.
          Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007636:	6878      	ldr	r0, [r7, #4]
 8007638:	4798      	blx	r3
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	2200      	movs	r2, #0
 800763e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007648:	b29b      	uxth	r3, r3
 800764a:	2b00      	cmp	r3, #0
 800764c:	f040 80a9 	bne.w	80077a2 <UART_RxISR_16BIT_FIFOEN+0x2aa>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007656:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007658:	e853 3f00 	ldrex	r3, [r3]
 800765c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800765e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007660:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007664:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	461a      	mov	r2, r3
 800766e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007672:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007676:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007678:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800767a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800767e:	e841 2300 	strex	r3, r2, [r1]
 8007682:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007684:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007686:	2b00      	cmp	r3, #0
 8007688:	d1e2      	bne.n	8007650 <UART_RxISR_16BIT_FIFOEN+0x158>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	3308      	adds	r3, #8
 8007690:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007692:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007694:	e853 3f00 	ldrex	r3, [r3]
 8007698:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800769a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800769c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80076a0:	f023 0301 	bic.w	r3, r3, #1
 80076a4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	3308      	adds	r3, #8
 80076ae:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 80076b2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80076b4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076b6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80076b8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80076ba:	e841 2300 	strex	r3, r2, [r1]
 80076be:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80076c0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d1e1      	bne.n	800768a <UART_RxISR_16BIT_FIFOEN+0x192>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	2220      	movs	r2, #32
 80076ca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	2200      	movs	r2, #0
 80076d2:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2200      	movs	r2, #0
 80076d8:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	4a62      	ldr	r2, [pc, #392]	@ (8007868 <UART_RxISR_16BIT_FIFOEN+0x370>)
 80076e0:	4293      	cmp	r3, r2
 80076e2:	d021      	beq.n	8007728 <UART_RxISR_16BIT_FIFOEN+0x230>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	685b      	ldr	r3, [r3, #4]
 80076ea:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d01a      	beq.n	8007728 <UART_RxISR_16BIT_FIFOEN+0x230>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076f8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80076fa:	e853 3f00 	ldrex	r3, [r3]
 80076fe:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007700:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007702:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007706:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	461a      	mov	r2, r3
 8007710:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007714:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007716:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007718:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800771a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800771c:	e841 2300 	strex	r3, r2, [r1]
 8007720:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007722:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007724:	2b00      	cmp	r3, #0
 8007726:	d1e4      	bne.n	80076f2 <UART_RxISR_16BIT_FIFOEN+0x1fa>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800772c:	2b01      	cmp	r3, #1
 800772e:	d132      	bne.n	8007796 <UART_RxISR_16BIT_FIFOEN+0x29e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	2200      	movs	r2, #0
 8007734:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800773c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800773e:	e853 3f00 	ldrex	r3, [r3]
 8007742:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007744:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007746:	f023 0310 	bic.w	r3, r3, #16
 800774a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	461a      	mov	r2, r3
 8007754:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007758:	647b      	str	r3, [r7, #68]	@ 0x44
 800775a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800775c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800775e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007760:	e841 2300 	strex	r3, r2, [r1]
 8007764:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007766:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007768:	2b00      	cmp	r3, #0
 800776a:	d1e4      	bne.n	8007736 <UART_RxISR_16BIT_FIFOEN+0x23e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	69db      	ldr	r3, [r3, #28]
 8007772:	f003 0310 	and.w	r3, r3, #16
 8007776:	2b10      	cmp	r3, #16
 8007778:	d103      	bne.n	8007782 <UART_RxISR_16BIT_FIFOEN+0x28a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	2210      	movs	r2, #16
 8007780:	621a      	str	r2, [r3, #32]
          }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8007788:	687a      	ldr	r2, [r7, #4]
 800778a:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800778e:	4611      	mov	r1, r2
 8007790:	6878      	ldr	r0, [r7, #4]
 8007792:	4798      	blx	r3
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8007794:	e010      	b.n	80077b8 <UART_RxISR_16BIT_FIFOEN+0x2c0>
          huart->RxCpltCallback(huart);
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800779c:	6878      	ldr	r0, [r7, #4]
 800779e:	4798      	blx	r3
        break;
 80077a0:	e00a      	b.n	80077b8 <UART_RxISR_16BIT_FIFOEN+0x2c0>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80077a2:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d006      	beq.n	80077b8 <UART_RxISR_16BIT_FIFOEN+0x2c0>
 80077aa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80077ae:	f003 0320 	and.w	r3, r3, #32
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	f47f aec4 	bne.w	8007540 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80077be:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80077c2:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d049      	beq.n	800785e <UART_RxISR_16BIT_FIFOEN+0x366>
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80077d0:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 80077d4:	429a      	cmp	r2, r3
 80077d6:	d242      	bcs.n	800785e <UART_RxISR_16BIT_FIFOEN+0x366>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	3308      	adds	r3, #8
 80077de:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077e2:	e853 3f00 	ldrex	r3, [r3]
 80077e6:	623b      	str	r3, [r7, #32]
   return(result);
 80077e8:	6a3b      	ldr	r3, [r7, #32]
 80077ea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80077ee:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	3308      	adds	r3, #8
 80077f8:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80077fc:	633a      	str	r2, [r7, #48]	@ 0x30
 80077fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007800:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007802:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007804:	e841 2300 	strex	r3, r2, [r1]
 8007808:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800780a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800780c:	2b00      	cmp	r3, #0
 800780e:	d1e3      	bne.n	80077d8 <UART_RxISR_16BIT_FIFOEN+0x2e0>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	4a16      	ldr	r2, [pc, #88]	@ (800786c <UART_RxISR_16BIT_FIFOEN+0x374>)
 8007814:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800781c:	693b      	ldr	r3, [r7, #16]
 800781e:	e853 3f00 	ldrex	r3, [r3]
 8007822:	60fb      	str	r3, [r7, #12]
   return(result);
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	f043 0320 	orr.w	r3, r3, #32
 800782a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	461a      	mov	r2, r3
 8007834:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007838:	61fb      	str	r3, [r7, #28]
 800783a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800783c:	69b9      	ldr	r1, [r7, #24]
 800783e:	69fa      	ldr	r2, [r7, #28]
 8007840:	e841 2300 	strex	r3, r2, [r1]
 8007844:	617b      	str	r3, [r7, #20]
   return(result);
 8007846:	697b      	ldr	r3, [r7, #20]
 8007848:	2b00      	cmp	r3, #0
 800784a:	d1e4      	bne.n	8007816 <UART_RxISR_16BIT_FIFOEN+0x31e>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800784c:	e007      	b.n	800785e <UART_RxISR_16BIT_FIFOEN+0x366>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	699a      	ldr	r2, [r3, #24]
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	f042 0208 	orr.w	r2, r2, #8
 800785c:	619a      	str	r2, [r3, #24]
}
 800785e:	bf00      	nop
 8007860:	37b8      	adds	r7, #184	@ 0xb8
 8007862:	46bd      	mov	sp, r7
 8007864:	bd80      	pop	{r7, pc}
 8007866:	bf00      	nop
 8007868:	40008000 	.word	0x40008000
 800786c:	08006fc9 	.word	0x08006fc9

08007870 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007870:	b480      	push	{r7}
 8007872:	b083      	sub	sp, #12
 8007874:	af00      	add	r7, sp, #0
 8007876:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007878:	bf00      	nop
 800787a:	370c      	adds	r7, #12
 800787c:	46bd      	mov	sp, r7
 800787e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007882:	4770      	bx	lr

08007884 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007884:	b480      	push	{r7}
 8007886:	b083      	sub	sp, #12
 8007888:	af00      	add	r7, sp, #0
 800788a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800788c:	bf00      	nop
 800788e:	370c      	adds	r7, #12
 8007890:	46bd      	mov	sp, r7
 8007892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007896:	4770      	bx	lr

08007898 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007898:	b480      	push	{r7}
 800789a:	b083      	sub	sp, #12
 800789c:	af00      	add	r7, sp, #0
 800789e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80078a0:	bf00      	nop
 80078a2:	370c      	adds	r7, #12
 80078a4:	46bd      	mov	sp, r7
 80078a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078aa:	4770      	bx	lr

080078ac <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80078ac:	b480      	push	{r7}
 80078ae:	b085      	sub	sp, #20
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80078ba:	2b01      	cmp	r3, #1
 80078bc:	d101      	bne.n	80078c2 <HAL_UARTEx_DisableFifoMode+0x16>
 80078be:	2302      	movs	r3, #2
 80078c0:	e027      	b.n	8007912 <HAL_UARTEx_DisableFifoMode+0x66>
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	2201      	movs	r2, #1
 80078c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	2224      	movs	r2, #36	@ 0x24
 80078ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	681a      	ldr	r2, [r3, #0]
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	f022 0201 	bic.w	r2, r2, #1
 80078e8:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80078f0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	2200      	movs	r2, #0
 80078f6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	68fa      	ldr	r2, [r7, #12]
 80078fe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	2220      	movs	r2, #32
 8007904:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	2200      	movs	r2, #0
 800790c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007910:	2300      	movs	r3, #0
}
 8007912:	4618      	mov	r0, r3
 8007914:	3714      	adds	r7, #20
 8007916:	46bd      	mov	sp, r7
 8007918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791c:	4770      	bx	lr

0800791e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800791e:	b580      	push	{r7, lr}
 8007920:	b084      	sub	sp, #16
 8007922:	af00      	add	r7, sp, #0
 8007924:	6078      	str	r0, [r7, #4]
 8007926:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800792e:	2b01      	cmp	r3, #1
 8007930:	d101      	bne.n	8007936 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007932:	2302      	movs	r3, #2
 8007934:	e02d      	b.n	8007992 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	2201      	movs	r2, #1
 800793a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	2224      	movs	r2, #36	@ 0x24
 8007942:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	681a      	ldr	r2, [r3, #0]
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	f022 0201 	bic.w	r2, r2, #1
 800795c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	689b      	ldr	r3, [r3, #8]
 8007964:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	683a      	ldr	r2, [r7, #0]
 800796e:	430a      	orrs	r2, r1
 8007970:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007972:	6878      	ldr	r0, [r7, #4]
 8007974:	f000 f850 	bl	8007a18 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	68fa      	ldr	r2, [r7, #12]
 800797e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	2220      	movs	r2, #32
 8007984:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	2200      	movs	r2, #0
 800798c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007990:	2300      	movs	r3, #0
}
 8007992:	4618      	mov	r0, r3
 8007994:	3710      	adds	r7, #16
 8007996:	46bd      	mov	sp, r7
 8007998:	bd80      	pop	{r7, pc}

0800799a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800799a:	b580      	push	{r7, lr}
 800799c:	b084      	sub	sp, #16
 800799e:	af00      	add	r7, sp, #0
 80079a0:	6078      	str	r0, [r7, #4]
 80079a2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80079aa:	2b01      	cmp	r3, #1
 80079ac:	d101      	bne.n	80079b2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80079ae:	2302      	movs	r3, #2
 80079b0:	e02d      	b.n	8007a0e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	2201      	movs	r2, #1
 80079b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	2224      	movs	r2, #36	@ 0x24
 80079be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	681a      	ldr	r2, [r3, #0]
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	f022 0201 	bic.w	r2, r2, #1
 80079d8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	689b      	ldr	r3, [r3, #8]
 80079e0:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	683a      	ldr	r2, [r7, #0]
 80079ea:	430a      	orrs	r2, r1
 80079ec:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80079ee:	6878      	ldr	r0, [r7, #4]
 80079f0:	f000 f812 	bl	8007a18 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	68fa      	ldr	r2, [r7, #12]
 80079fa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	2220      	movs	r2, #32
 8007a00:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	2200      	movs	r2, #0
 8007a08:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007a0c:	2300      	movs	r3, #0
}
 8007a0e:	4618      	mov	r0, r3
 8007a10:	3710      	adds	r7, #16
 8007a12:	46bd      	mov	sp, r7
 8007a14:	bd80      	pop	{r7, pc}
	...

08007a18 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007a18:	b480      	push	{r7}
 8007a1a:	b085      	sub	sp, #20
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d108      	bne.n	8007a3a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	2201      	movs	r2, #1
 8007a2c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	2201      	movs	r2, #1
 8007a34:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007a38:	e031      	b.n	8007a9e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007a3a:	2308      	movs	r3, #8
 8007a3c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007a3e:	2308      	movs	r3, #8
 8007a40:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	689b      	ldr	r3, [r3, #8]
 8007a48:	0e5b      	lsrs	r3, r3, #25
 8007a4a:	b2db      	uxtb	r3, r3
 8007a4c:	f003 0307 	and.w	r3, r3, #7
 8007a50:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	689b      	ldr	r3, [r3, #8]
 8007a58:	0f5b      	lsrs	r3, r3, #29
 8007a5a:	b2db      	uxtb	r3, r3
 8007a5c:	f003 0307 	and.w	r3, r3, #7
 8007a60:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007a62:	7bbb      	ldrb	r3, [r7, #14]
 8007a64:	7b3a      	ldrb	r2, [r7, #12]
 8007a66:	4911      	ldr	r1, [pc, #68]	@ (8007aac <UARTEx_SetNbDataToProcess+0x94>)
 8007a68:	5c8a      	ldrb	r2, [r1, r2]
 8007a6a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007a6e:	7b3a      	ldrb	r2, [r7, #12]
 8007a70:	490f      	ldr	r1, [pc, #60]	@ (8007ab0 <UARTEx_SetNbDataToProcess+0x98>)
 8007a72:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007a74:	fb93 f3f2 	sdiv	r3, r3, r2
 8007a78:	b29a      	uxth	r2, r3
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007a80:	7bfb      	ldrb	r3, [r7, #15]
 8007a82:	7b7a      	ldrb	r2, [r7, #13]
 8007a84:	4909      	ldr	r1, [pc, #36]	@ (8007aac <UARTEx_SetNbDataToProcess+0x94>)
 8007a86:	5c8a      	ldrb	r2, [r1, r2]
 8007a88:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007a8c:	7b7a      	ldrb	r2, [r7, #13]
 8007a8e:	4908      	ldr	r1, [pc, #32]	@ (8007ab0 <UARTEx_SetNbDataToProcess+0x98>)
 8007a90:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007a92:	fb93 f3f2 	sdiv	r3, r3, r2
 8007a96:	b29a      	uxth	r2, r3
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8007a9e:	bf00      	nop
 8007aa0:	3714      	adds	r7, #20
 8007aa2:	46bd      	mov	sp, r7
 8007aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa8:	4770      	bx	lr
 8007aaa:	bf00      	nop
 8007aac:	08007b70 	.word	0x08007b70
 8007ab0:	08007b78 	.word	0x08007b78

08007ab4 <memset>:
 8007ab4:	4402      	add	r2, r0
 8007ab6:	4603      	mov	r3, r0
 8007ab8:	4293      	cmp	r3, r2
 8007aba:	d100      	bne.n	8007abe <memset+0xa>
 8007abc:	4770      	bx	lr
 8007abe:	f803 1b01 	strb.w	r1, [r3], #1
 8007ac2:	e7f9      	b.n	8007ab8 <memset+0x4>

08007ac4 <__libc_init_array>:
 8007ac4:	b570      	push	{r4, r5, r6, lr}
 8007ac6:	4d0d      	ldr	r5, [pc, #52]	@ (8007afc <__libc_init_array+0x38>)
 8007ac8:	4c0d      	ldr	r4, [pc, #52]	@ (8007b00 <__libc_init_array+0x3c>)
 8007aca:	1b64      	subs	r4, r4, r5
 8007acc:	10a4      	asrs	r4, r4, #2
 8007ace:	2600      	movs	r6, #0
 8007ad0:	42a6      	cmp	r6, r4
 8007ad2:	d109      	bne.n	8007ae8 <__libc_init_array+0x24>
 8007ad4:	4d0b      	ldr	r5, [pc, #44]	@ (8007b04 <__libc_init_array+0x40>)
 8007ad6:	4c0c      	ldr	r4, [pc, #48]	@ (8007b08 <__libc_init_array+0x44>)
 8007ad8:	f000 f826 	bl	8007b28 <_init>
 8007adc:	1b64      	subs	r4, r4, r5
 8007ade:	10a4      	asrs	r4, r4, #2
 8007ae0:	2600      	movs	r6, #0
 8007ae2:	42a6      	cmp	r6, r4
 8007ae4:	d105      	bne.n	8007af2 <__libc_init_array+0x2e>
 8007ae6:	bd70      	pop	{r4, r5, r6, pc}
 8007ae8:	f855 3b04 	ldr.w	r3, [r5], #4
 8007aec:	4798      	blx	r3
 8007aee:	3601      	adds	r6, #1
 8007af0:	e7ee      	b.n	8007ad0 <__libc_init_array+0xc>
 8007af2:	f855 3b04 	ldr.w	r3, [r5], #4
 8007af6:	4798      	blx	r3
 8007af8:	3601      	adds	r6, #1
 8007afa:	e7f2      	b.n	8007ae2 <__libc_init_array+0x1e>
 8007afc:	08007b88 	.word	0x08007b88
 8007b00:	08007b88 	.word	0x08007b88
 8007b04:	08007b88 	.word	0x08007b88
 8007b08:	08007b8c 	.word	0x08007b8c

08007b0c <memcpy>:
 8007b0c:	440a      	add	r2, r1
 8007b0e:	4291      	cmp	r1, r2
 8007b10:	f100 33ff 	add.w	r3, r0, #4294967295
 8007b14:	d100      	bne.n	8007b18 <memcpy+0xc>
 8007b16:	4770      	bx	lr
 8007b18:	b510      	push	{r4, lr}
 8007b1a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007b1e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007b22:	4291      	cmp	r1, r2
 8007b24:	d1f9      	bne.n	8007b1a <memcpy+0xe>
 8007b26:	bd10      	pop	{r4, pc}

08007b28 <_init>:
 8007b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b2a:	bf00      	nop
 8007b2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b2e:	bc08      	pop	{r3}
 8007b30:	469e      	mov	lr, r3
 8007b32:	4770      	bx	lr

08007b34 <_fini>:
 8007b34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b36:	bf00      	nop
 8007b38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b3a:	bc08      	pop	{r3}
 8007b3c:	469e      	mov	lr, r3
 8007b3e:	4770      	bx	lr
